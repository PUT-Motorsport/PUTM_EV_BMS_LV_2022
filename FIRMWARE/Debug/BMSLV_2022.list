
BMSLV_2022.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016570  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009b4  08016730  08016730  00026730  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080170e4  080170e4  00030580  2**0
                  CONTENTS
  4 .ARM          00000000  080170e4  080170e4  00030580  2**0
                  CONTENTS
  5 .preinit_array 00000000  080170e4  080170e4  00030580  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000010  080170e4  080170e4  000270e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080170f4  080170f4  000270f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000580  20000000  080170f8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000093f4  20000580  08017678  00030580  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20009974  08017678  00039974  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030580  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000305b0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00048d93  00000000  00000000  000305f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000889e  00000000  00000000  00079386  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002b48  00000000  00000000  00081c28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000020fd  00000000  00000000  00084770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003ba8a  00000000  00000000  0008686d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003a819  00000000  00000000  000c22f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0014f6c3  00000000  00000000  000fcb10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000c90c  00000000  00000000  0024c1d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  00258ae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000580 	.word	0x20000580
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08016718 	.word	0x08016718

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000584 	.word	0x20000584
 80001fc:	08016718 	.word	0x08016718

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <_Z20discharge_cells_taili>:
			the next cell to discharge has to be the first one.
			So generally it sets the array tail at the beginning.
 * Param:	index
 * Retval:	index
 */
int discharge_cells_tail(int i){
 8000bd8:	b480      	push	{r7}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
	if(5 == i || 6 == i)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	2b05      	cmp	r3, #5
 8000be4:	d002      	beq.n	8000bec <_Z20discharge_cells_taili+0x14>
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	2b06      	cmp	r3, #6
 8000bea:	d102      	bne.n	8000bf2 <_Z20discharge_cells_taili+0x1a>
		return -1;
 8000bec:	f04f 33ff 	mov.w	r3, #4294967295
 8000bf0:	e000      	b.n	8000bf4 <_Z20discharge_cells_taili+0x1c>
	else
		return i;
 8000bf2:	687b      	ldr	r3, [r7, #4]
}
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	370c      	adds	r7, #12
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr

08000c00 <_Z18set_discharge_cellRhRi>:
/**
 * Brief:	It sets cell to be discharged
 * Param:	Index
 * Retval:	None
 */
void set_discharge_cell(uint8_t &discharge_at_once, int &i){
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
 8000c08:	6039      	str	r1, [r7, #0]
	if(discharge_at_once < MAX_CELLS_DISCHARGE_AT_ONCE)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	2b01      	cmp	r3, #1
 8000c10:	d826      	bhi.n	8000c60 <_Z18set_discharge_cellRhRi+0x60>
	{
		data.charging.cell_discharge[i] = true;
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	4a14      	ldr	r2, [pc, #80]	; (8000c68 <_Z18set_discharge_cellRhRi+0x68>)
 8000c18:	4413      	add	r3, r2
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
		discharge_at_once++;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	3301      	adds	r3, #1
 8000c26:	b2da      	uxtb	r2, r3
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	701a      	strb	r2, [r3, #0]
		i++;	//impossible to discharge 2 cells next to each other
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	1c5a      	adds	r2, r3, #1
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	601a      	str	r2, [r3, #0]
		i=discharge_cells_tail(i);
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f7ff ffcc 	bl	8000bd8 <_Z20discharge_cells_taili>
 8000c40:	4602      	mov	r2, r0
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	601a      	str	r2, [r3, #0]

		data.charging.discharge_activation = true;
 8000c46:	4b08      	ldr	r3, [pc, #32]	; (8000c68 <_Z18set_discharge_cellRhRi+0x68>)
 8000c48:	2201      	movs	r2, #1
 8000c4a:	f883 2298 	strb.w	r2, [r3, #664]	; 0x298
		data.charging.discharge_tick_end = HAL_GetTick() + BALANCE_TIME;
 8000c4e:	f004 faaf 	bl	80051b0 <HAL_GetTick>
 8000c52:	4603      	mov	r3, r0
 8000c54:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8000c58:	3310      	adds	r3, #16
 8000c5a:	4a03      	ldr	r2, [pc, #12]	; (8000c68 <_Z18set_discharge_cellRhRi+0x68>)
 8000c5c:	f8c2 329c 	str.w	r3, [r2, #668]	; 0x29c
	}
}
 8000c60:	bf00      	nop
 8000c62:	3708      	adds	r7, #8
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	20001478 	.word	0x20001478

08000c6c <_Z22set_discharge_cell_maxRhRiRb>:
/**
 * Brief:	It sets cell having the highest voltage to be discharged
 * Param:	Index
 * Retval:	None
 */
void set_discharge_cell_max(uint8_t &discharge_at_once, int &i, bool &max_voltage_discharge_activation){
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b084      	sub	sp, #16
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	60f8      	str	r0, [r7, #12]
 8000c74:	60b9      	str	r1, [r7, #8]
 8000c76:	607a      	str	r2, [r7, #4]
	max_voltage_discharge_activation = false;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	701a      	strb	r2, [r3, #0]
	if(discharge_at_once < MAX_CELLS_DISCHARGE_AT_ONCE)
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	2b01      	cmp	r3, #1
 8000c84:	d827      	bhi.n	8000cd6 <_Z22set_discharge_cell_maxRhRiRb+0x6a>
	{
		data.charging.cell_discharge[data.voltages.highest_cell_voltage_index] = true;
 8000c86:	4b16      	ldr	r3, [pc, #88]	; (8000ce0 <_Z22set_discharge_cell_maxRhRiRb+0x74>)
 8000c88:	7c9b      	ldrb	r3, [r3, #18]
 8000c8a:	461a      	mov	r2, r3
 8000c8c:	4b14      	ldr	r3, [pc, #80]	; (8000ce0 <_Z22set_discharge_cell_maxRhRiRb+0x74>)
 8000c8e:	4413      	add	r3, r2
 8000c90:	2201      	movs	r2, #1
 8000c92:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
		discharge_at_once++;
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	3301      	adds	r3, #1
 8000c9c:	b2da      	uxtb	r2, r3
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	701a      	strb	r2, [r3, #0]
		i = data.voltages.highest_cell_voltage_index + 1; //impossible to discharge 2 cells next to each other
 8000ca2:	4b0f      	ldr	r3, [pc, #60]	; (8000ce0 <_Z22set_discharge_cell_maxRhRiRb+0x74>)
 8000ca4:	7c9b      	ldrb	r3, [r3, #18]
 8000ca6:	1c5a      	adds	r2, r3, #1
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	601a      	str	r2, [r3, #0]
		i=discharge_cells_tail(i);
 8000cac:	68bb      	ldr	r3, [r7, #8]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f7ff ff91 	bl	8000bd8 <_Z20discharge_cells_taili>
 8000cb6:	4602      	mov	r2, r0
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	601a      	str	r2, [r3, #0]

		data.charging.discharge_activation = true;
 8000cbc:	4b08      	ldr	r3, [pc, #32]	; (8000ce0 <_Z22set_discharge_cell_maxRhRiRb+0x74>)
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	f883 2298 	strb.w	r2, [r3, #664]	; 0x298
		data.charging.discharge_tick_end = HAL_GetTick() + BALANCE_TIME;
 8000cc4:	f004 fa74 	bl	80051b0 <HAL_GetTick>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8000cce:	3310      	adds	r3, #16
 8000cd0:	4a03      	ldr	r2, [pc, #12]	; (8000ce0 <_Z22set_discharge_cell_maxRhRiRb+0x74>)
 8000cd2:	f8c2 329c 	str.w	r3, [r2, #668]	; 0x29c
	}
}
 8000cd6:	bf00      	nop
 8000cd8:	3710      	adds	r7, #16
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	20001478 	.word	0x20001478

08000ce4 <_Z15balance_controlv>:
 * Brief:	Control of cell discharges
 * Param:	None
 * Retval:	None
 */
void balance_control()
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b086      	sub	sp, #24
 8000ce8:	af00      	add	r7, sp, #0
	uint8_t charged_cells = 0, nearly_charged_cells = 0, cell_overcharged = 0, discharge_at_once = 0;
 8000cea:	2300      	movs	r3, #0
 8000cec:	75fb      	strb	r3, [r7, #23]
 8000cee:	2300      	movs	r3, #0
 8000cf0:	75bb      	strb	r3, [r7, #22]
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	757b      	strb	r3, [r7, #21]
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	73fb      	strb	r3, [r7, #15]
	bool max_voltage_discharge_activation= 0, max_voltage_discharge_activation_charging_off = 0;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	73bb      	strb	r3, [r7, #14]
 8000cfe:	2300      	movs	r3, #0
 8000d00:	737b      	strb	r3, [r7, #13]

	for(unsigned int i = 0; i < NUMBER_OF_CELLS; i++)
 8000d02:	2300      	movs	r3, #0
 8000d04:	613b      	str	r3, [r7, #16]
 8000d06:	e03b      	b.n	8000d80 <_Z15balance_controlv+0x9c>
	{
		if(data.voltages.highest_cell_voltage > VOL_UP_OK || (data.voltages.highest_cell_voltage - data.voltages.lowest_cell_voltage) > BALANCE_VALUE)
 8000d08:	4b9e      	ldr	r3, [pc, #632]	; (8000f84 <_Z15balance_controlv+0x2a0>)
 8000d0a:	8b9b      	ldrh	r3, [r3, #28]
 8000d0c:	f24a 420b 	movw	r2, #41995	; 0xa40b
 8000d10:	4293      	cmp	r3, r2
 8000d12:	d807      	bhi.n	8000d24 <_Z15balance_controlv+0x40>
 8000d14:	4b9b      	ldr	r3, [pc, #620]	; (8000f84 <_Z15balance_controlv+0x2a0>)
 8000d16:	8b9b      	ldrh	r3, [r3, #28]
 8000d18:	461a      	mov	r2, r3
 8000d1a:	4b9a      	ldr	r3, [pc, #616]	; (8000f84 <_Z15balance_controlv+0x2a0>)
 8000d1c:	8b5b      	ldrh	r3, [r3, #26]
 8000d1e:	1ad3      	subs	r3, r2, r3
 8000d20:	2b01      	cmp	r3, #1
 8000d22:	dd01      	ble.n	8000d28 <_Z15balance_controlv+0x44>
		{
			max_voltage_discharge_activation= true;
 8000d24:	2301      	movs	r3, #1
 8000d26:	73bb      	strb	r3, [r7, #14]
		}
		if(data.voltages.highest_cell_voltage > VOL_UP_OK)
 8000d28:	4b96      	ldr	r3, [pc, #600]	; (8000f84 <_Z15balance_controlv+0x2a0>)
 8000d2a:	8b9b      	ldrh	r3, [r3, #28]
 8000d2c:	f24a 420b 	movw	r2, #41995	; 0xa40b
 8000d30:	4293      	cmp	r3, r2
 8000d32:	d901      	bls.n	8000d38 <_Z15balance_controlv+0x54>
		{
			max_voltage_discharge_activation_charging_off = true;
 8000d34:	2301      	movs	r3, #1
 8000d36:	737b      	strb	r3, [r7, #13]
		}
		if(data.voltages.cells[i] > VOL_UP_OK)
 8000d38:	4a92      	ldr	r2, [pc, #584]	; (8000f84 <_Z15balance_controlv+0x2a0>)
 8000d3a:	693b      	ldr	r3, [r7, #16]
 8000d3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d40:	f24a 420b 	movw	r2, #41995	; 0xa40b
 8000d44:	4293      	cmp	r3, r2
 8000d46:	d902      	bls.n	8000d4e <_Z15balance_controlv+0x6a>
		{
			charged_cells++;
 8000d48:	7dfb      	ldrb	r3, [r7, #23]
 8000d4a:	3301      	adds	r3, #1
 8000d4c:	75fb      	strb	r3, [r7, #23]
		}
		if(data.voltages.cells[i] > VOL_UP_NEARLY_OK)
 8000d4e:	4a8d      	ldr	r2, [pc, #564]	; (8000f84 <_Z15balance_controlv+0x2a0>)
 8000d50:	693b      	ldr	r3, [r7, #16]
 8000d52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d56:	f24a 32c0 	movw	r2, #41920	; 0xa3c0
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d902      	bls.n	8000d64 <_Z15balance_controlv+0x80>
		{
			nearly_charged_cells++;
 8000d5e:	7dbb      	ldrb	r3, [r7, #22]
 8000d60:	3301      	adds	r3, #1
 8000d62:	75bb      	strb	r3, [r7, #22]
		}
		if(data.voltages.cells[i] > VOL_UP_OVERCHARGE)
 8000d64:	4a87      	ldr	r2, [pc, #540]	; (8000f84 <_Z15balance_controlv+0x2a0>)
 8000d66:	693b      	ldr	r3, [r7, #16]
 8000d68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d6c:	f24a 4274 	movw	r2, #42100	; 0xa474
 8000d70:	4293      	cmp	r3, r2
 8000d72:	d902      	bls.n	8000d7a <_Z15balance_controlv+0x96>
		{
			cell_overcharged++;
 8000d74:	7d7b      	ldrb	r3, [r7, #21]
 8000d76:	3301      	adds	r3, #1
 8000d78:	757b      	strb	r3, [r7, #21]
	for(unsigned int i = 0; i < NUMBER_OF_CELLS; i++)
 8000d7a:	693b      	ldr	r3, [r7, #16]
 8000d7c:	3301      	adds	r3, #1
 8000d7e:	613b      	str	r3, [r7, #16]
 8000d80:	693b      	ldr	r3, [r7, #16]
 8000d82:	2b05      	cmp	r3, #5
 8000d84:	d9c0      	bls.n	8000d08 <_Z15balance_controlv+0x24>
		}
	}

	//EFUSE switch off - battery full
	if(charged_cells >= 4 && fabsf(data.current.value) < CHARGING_CUTOFF_CURRENT && nearly_charged_cells == 6)
 8000d86:	7dfb      	ldrb	r3, [r7, #23]
 8000d88:	2b03      	cmp	r3, #3
 8000d8a:	d926      	bls.n	8000dda <_Z15balance_controlv+0xf6>
 8000d8c:	4b7d      	ldr	r3, [pc, #500]	; (8000f84 <_Z15balance_controlv+0x2a0>)
 8000d8e:	edd3 7a72 	vldr	s15, [r3, #456]	; 0x1c8
 8000d92:	eef0 7ae7 	vabs.f32	s15, s15
 8000d96:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 8000f88 <_Z15balance_controlv+0x2a4>
 8000d9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000da2:	d51a      	bpl.n	8000dda <_Z15balance_controlv+0xf6>
 8000da4:	7dbb      	ldrb	r3, [r7, #22]
 8000da6:	2b06      	cmp	r3, #6
 8000da8:	d117      	bne.n	8000dda <_Z15balance_controlv+0xf6>
	{
		HAL_GPIO_WritePin(EFUSE_GPIO_Port, EFUSE_Pin, GPIO_PIN_RESET);
 8000daa:	2200      	movs	r2, #0
 8000dac:	2104      	movs	r1, #4
 8000dae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000db2:	f007 fadf 	bl	8008374 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 8000db6:	2200      	movs	r2, #0
 8000db8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dbc:	4873      	ldr	r0, [pc, #460]	; (8000f8c <_Z15balance_controlv+0x2a8>)
 8000dbe:	f007 fad9 	bl	8008374 <HAL_GPIO_WritePin>
		data.soc.main.set_full_battery();
 8000dc2:	4873      	ldr	r0, [pc, #460]	; (8000f90 <_Z15balance_controlv+0x2ac>)
 8000dc4:	f003 fa76 	bl	80042b4 <_ZN7SoC_EKF16set_full_batteryEv>
		data.charging.charging_state = false;
 8000dc8:	4b6e      	ldr	r3, [pc, #440]	; (8000f84 <_Z15balance_controlv+0x2a0>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	f883 2297 	strb.w	r2, [r3, #663]	; 0x297
		data.acu_state = 0;
 8000dd0:	4b6c      	ldr	r3, [pc, #432]	; (8000f84 <_Z15balance_controlv+0x2a0>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8000dd8:	e043      	b.n	8000e62 <_Z15balance_controlv+0x17e>
	}
	//EFUSE switch off - cell overcharged
	else if(cell_overcharged > 1 && data.charging.discharge_activation == 0)
 8000dda:	7d7b      	ldrb	r3, [r7, #21]
 8000ddc:	2b01      	cmp	r3, #1
 8000dde:	d919      	bls.n	8000e14 <_Z15balance_controlv+0x130>
 8000de0:	4b68      	ldr	r3, [pc, #416]	; (8000f84 <_Z15balance_controlv+0x2a0>)
 8000de2:	f893 3298 	ldrb.w	r3, [r3, #664]	; 0x298
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d114      	bne.n	8000e14 <_Z15balance_controlv+0x130>
	{
		HAL_GPIO_WritePin(EFUSE_GPIO_Port, EFUSE_Pin, GPIO_PIN_RESET);
 8000dea:	2200      	movs	r2, #0
 8000dec:	2104      	movs	r1, #4
 8000dee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000df2:	f007 fabf 	bl	8008374 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 8000df6:	2200      	movs	r2, #0
 8000df8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dfc:	4863      	ldr	r0, [pc, #396]	; (8000f8c <_Z15balance_controlv+0x2a8>)
 8000dfe:	f007 fab9 	bl	8008374 <HAL_GPIO_WritePin>
		data.charging.charging_state = false;
 8000e02:	4b60      	ldr	r3, [pc, #384]	; (8000f84 <_Z15balance_controlv+0x2a0>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	f883 2297 	strb.w	r2, [r3, #663]	; 0x297
		data.acu_state = 0;
 8000e0a:	4b5e      	ldr	r3, [pc, #376]	; (8000f84 <_Z15balance_controlv+0x2a0>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8000e12:	e026      	b.n	8000e62 <_Z15balance_controlv+0x17e>
	}
	//EFUSE switch on
	else if(!data.charging.charger_plugged && nearly_charged_cells < 6 && cell_overcharged == 0 && data.charging.discharge_activation == 0)// && acuState == 0
 8000e14:	4b5b      	ldr	r3, [pc, #364]	; (8000f84 <_Z15balance_controlv+0x2a0>)
 8000e16:	f893 3296 	ldrb.w	r3, [r3, #662]	; 0x296
 8000e1a:	f083 0301 	eor.w	r3, r3, #1
 8000e1e:	b2db      	uxtb	r3, r3
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d01e      	beq.n	8000e62 <_Z15balance_controlv+0x17e>
 8000e24:	7dbb      	ldrb	r3, [r7, #22]
 8000e26:	2b05      	cmp	r3, #5
 8000e28:	d81b      	bhi.n	8000e62 <_Z15balance_controlv+0x17e>
 8000e2a:	7d7b      	ldrb	r3, [r7, #21]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d118      	bne.n	8000e62 <_Z15balance_controlv+0x17e>
 8000e30:	4b54      	ldr	r3, [pc, #336]	; (8000f84 <_Z15balance_controlv+0x2a0>)
 8000e32:	f893 3298 	ldrb.w	r3, [r3, #664]	; 0x298
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d113      	bne.n	8000e62 <_Z15balance_controlv+0x17e>
	{
		HAL_GPIO_WritePin(EFUSE_GPIO_Port, EFUSE_Pin, GPIO_PIN_SET);
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	2104      	movs	r1, #4
 8000e3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e42:	f007 fa97 	bl	8008374 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET);
 8000e46:	2201      	movs	r2, #1
 8000e48:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e4c:	484f      	ldr	r0, [pc, #316]	; (8000f8c <_Z15balance_controlv+0x2a8>)
 8000e4e:	f007 fa91 	bl	8008374 <HAL_GPIO_WritePin>
		data.charging.charging_state = true;
 8000e52:	4b4c      	ldr	r3, [pc, #304]	; (8000f84 <_Z15balance_controlv+0x2a0>)
 8000e54:	2201      	movs	r2, #1
 8000e56:	f883 2297 	strb.w	r2, [r3, #663]	; 0x297
		data.acu_state = 1;
 8000e5a:	4b4a      	ldr	r3, [pc, #296]	; (8000f84 <_Z15balance_controlv+0x2a0>)
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
	}


	//cell choice algorithm when charger is connected
	if(true == data.charging.charging_state && fabsf(data.current.value) > CHARGING_CUTOFF_CURRENT ) //charging on
 8000e62:	4b48      	ldr	r3, [pc, #288]	; (8000f84 <_Z15balance_controlv+0x2a0>)
 8000e64:	f893 3297 	ldrb.w	r3, [r3, #663]	; 0x297
 8000e68:	2b01      	cmp	r3, #1
 8000e6a:	d151      	bne.n	8000f10 <_Z15balance_controlv+0x22c>
 8000e6c:	4b45      	ldr	r3, [pc, #276]	; (8000f84 <_Z15balance_controlv+0x2a0>)
 8000e6e:	edd3 7a72 	vldr	s15, [r3, #456]	; 0x1c8
 8000e72:	eef0 7ae7 	vabs.f32	s15, s15
 8000e76:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8000f88 <_Z15balance_controlv+0x2a4>
 8000e7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e82:	dd45      	ble.n	8000f10 <_Z15balance_controlv+0x22c>
	{
		if(false == data.charging.discharge_activation)
 8000e84:	4b3f      	ldr	r3, [pc, #252]	; (8000f84 <_Z15balance_controlv+0x2a0>)
 8000e86:	f893 3298 	ldrb.w	r3, [r3, #664]	; 0x298
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d174      	bne.n	8000f78 <_Z15balance_controlv+0x294>
		{
			for(int i = 0; i < NUMBER_OF_CELLS; i++)
 8000e8e:	2300      	movs	r3, #0
 8000e90:	60bb      	str	r3, [r7, #8]
 8000e92:	e039      	b.n	8000f08 <_Z15balance_controlv+0x224>
			{
				//discharge activation for the cell with the highest voltage
				if(true == max_voltage_discharge_activation)
 8000e94:	7bbb      	ldrb	r3, [r7, #14]
 8000e96:	2b01      	cmp	r3, #1
 8000e98:	d109      	bne.n	8000eae <_Z15balance_controlv+0x1ca>
				{
					set_discharge_cell_max(discharge_at_once, i, max_voltage_discharge_activation);
 8000e9a:	f107 020e 	add.w	r2, r7, #14
 8000e9e:	f107 0108 	add.w	r1, r7, #8
 8000ea2:	f107 030f 	add.w	r3, r7, #15
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f7ff fee0 	bl	8000c6c <_Z22set_discharge_cell_maxRhRiRb>
 8000eac:	e029      	b.n	8000f02 <_Z15balance_controlv+0x21e>
				}
				//discharge activation for the cells with maximum voltage level - 4.201V
				else if(data.voltages.cells[i] > VOL_DIS)
 8000eae:	68bb      	ldr	r3, [r7, #8]
 8000eb0:	4a34      	ldr	r2, [pc, #208]	; (8000f84 <_Z15balance_controlv+0x2a0>)
 8000eb2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000eb6:	f24a 421a 	movw	r2, #42010	; 0xa41a
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d908      	bls.n	8000ed0 <_Z15balance_controlv+0x1ec>
				{
					set_discharge_cell(discharge_at_once, i);
 8000ebe:	f107 0208 	add.w	r2, r7, #8
 8000ec2:	f107 030f 	add.w	r3, r7, #15
 8000ec6:	4611      	mov	r1, r2
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f7ff fe99 	bl	8000c00 <_Z18set_discharge_cellRhRi>
 8000ece:	e018      	b.n	8000f02 <_Z15balance_controlv+0x21e>
				}
				//discharge activation for rest cells if needed
				else if((data.voltages.cells[i] - data.voltages.lowest_cell_voltage) > BALANCE_VALUE)
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	4a2c      	ldr	r2, [pc, #176]	; (8000f84 <_Z15balance_controlv+0x2a0>)
 8000ed4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ed8:	461a      	mov	r2, r3
 8000eda:	4b2a      	ldr	r3, [pc, #168]	; (8000f84 <_Z15balance_controlv+0x2a0>)
 8000edc:	8b5b      	ldrh	r3, [r3, #26]
 8000ede:	1ad3      	subs	r3, r2, r3
 8000ee0:	2b01      	cmp	r3, #1
 8000ee2:	dd08      	ble.n	8000ef6 <_Z15balance_controlv+0x212>
				{
					set_discharge_cell(discharge_at_once, i);
 8000ee4:	f107 0208 	add.w	r2, r7, #8
 8000ee8:	f107 030f 	add.w	r3, r7, #15
 8000eec:	4611      	mov	r1, r2
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f7ff fe86 	bl	8000c00 <_Z18set_discharge_cellRhRi>
 8000ef4:	e005      	b.n	8000f02 <_Z15balance_controlv+0x21e>
				}
				else
					data.charging.cell_discharge[i] = false;
 8000ef6:	68bb      	ldr	r3, [r7, #8]
 8000ef8:	4a22      	ldr	r2, [pc, #136]	; (8000f84 <_Z15balance_controlv+0x2a0>)
 8000efa:	4413      	add	r3, r2
 8000efc:	2200      	movs	r2, #0
 8000efe:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
			for(int i = 0; i < NUMBER_OF_CELLS; i++)
 8000f02:	68bb      	ldr	r3, [r7, #8]
 8000f04:	3301      	adds	r3, #1
 8000f06:	60bb      	str	r3, [r7, #8]
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	2b05      	cmp	r3, #5
 8000f0c:	ddc2      	ble.n	8000e94 <_Z15balance_controlv+0x1b0>
			}
		}
	}
 8000f0e:	e033      	b.n	8000f78 <_Z15balance_controlv+0x294>
	else //charging off
	{
		//balance if the cell voltages are overcharged
		if(not  data.charging.discharge_activation)
 8000f10:	4b1c      	ldr	r3, [pc, #112]	; (8000f84 <_Z15balance_controlv+0x2a0>)
 8000f12:	f893 3298 	ldrb.w	r3, [r3, #664]	; 0x298
 8000f16:	f083 0301 	eor.w	r3, r3, #1
 8000f1a:	b2db      	uxtb	r3, r3
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d02c      	beq.n	8000f7a <_Z15balance_controlv+0x296>
		{
			for(int i = 0; i < NUMBER_OF_CELLS; i++)
 8000f20:	2300      	movs	r3, #0
 8000f22:	607b      	str	r3, [r7, #4]
 8000f24:	e024      	b.n	8000f70 <_Z15balance_controlv+0x28c>
			{
				//discharge activation for the cell with the highest voltage
				if(true == max_voltage_discharge_activation_charging_off)
 8000f26:	7b7b      	ldrb	r3, [r7, #13]
 8000f28:	2b01      	cmp	r3, #1
 8000f2a:	d108      	bne.n	8000f3e <_Z15balance_controlv+0x25a>
				{
					set_discharge_cell_max(discharge_at_once, i, max_voltage_discharge_activation_charging_off);
 8000f2c:	f107 020d 	add.w	r2, r7, #13
 8000f30:	1d39      	adds	r1, r7, #4
 8000f32:	f107 030f 	add.w	r3, r7, #15
 8000f36:	4618      	mov	r0, r3
 8000f38:	f7ff fe98 	bl	8000c6c <_Z22set_discharge_cell_maxRhRiRb>
 8000f3c:	e015      	b.n	8000f6a <_Z15balance_controlv+0x286>
				}
				//discharge activation for the cells with maximum voltage level - 4.201V
				else if(data.voltages.cells[i] > VOL_DIS)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4a10      	ldr	r2, [pc, #64]	; (8000f84 <_Z15balance_controlv+0x2a0>)
 8000f42:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f46:	f24a 421a 	movw	r2, #42010	; 0xa41a
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d907      	bls.n	8000f5e <_Z15balance_controlv+0x27a>
				{
					set_discharge_cell(discharge_at_once, i);
 8000f4e:	1d3a      	adds	r2, r7, #4
 8000f50:	f107 030f 	add.w	r3, r7, #15
 8000f54:	4611      	mov	r1, r2
 8000f56:	4618      	mov	r0, r3
 8000f58:	f7ff fe52 	bl	8000c00 <_Z18set_discharge_cellRhRi>
 8000f5c:	e005      	b.n	8000f6a <_Z15balance_controlv+0x286>
				}
				else
					data.charging.cell_discharge[i] = false;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4a08      	ldr	r2, [pc, #32]	; (8000f84 <_Z15balance_controlv+0x2a0>)
 8000f62:	4413      	add	r3, r2
 8000f64:	2200      	movs	r2, #0
 8000f66:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
			for(int i = 0; i < NUMBER_OF_CELLS; i++)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	607b      	str	r3, [r7, #4]
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2b05      	cmp	r3, #5
 8000f74:	ddd7      	ble.n	8000f26 <_Z15balance_controlv+0x242>
			}
		}
	}
}
 8000f76:	e000      	b.n	8000f7a <_Z15balance_controlv+0x296>
	}
 8000f78:	bf00      	nop
}
 8000f7a:	bf00      	nop
 8000f7c:	3718      	adds	r7, #24
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	20001478 	.word	0x20001478
 8000f88:	3e99999a 	.word	0x3e99999a
 8000f8c:	48000800 	.word	0x48000800
 8000f90:	2000164c 	.word	0x2000164c

08000f94 <_Z31balance_activation_deactivationv>:
 * Brief:	Activation or deactivation of balance
 * Param:	None
 * Retval:	None
 */
void balance_activation_deactivation()
{
 8000f94:	b590      	push	{r4, r7, lr}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
	if(true == data.charging.discharge_activation)
 8000f9a:	4b27      	ldr	r3, [pc, #156]	; (8001038 <_Z31balance_activation_deactivationv+0xa4>)
 8000f9c:	f893 3298 	ldrb.w	r3, [r3, #664]	; 0x298
 8000fa0:	2b01      	cmp	r3, #1
 8000fa2:	d117      	bne.n	8000fd4 <_Z31balance_activation_deactivationv+0x40>
	{
		for(int i = 0; i < NUMBER_OF_CELLS ; i++)
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	607b      	str	r3, [r7, #4]
 8000fa8:	e00e      	b.n	8000fc8 <_Z31balance_activation_deactivationv+0x34>
		{
			if(true == data.charging.cell_discharge[i])
 8000faa:	4a23      	ldr	r2, [pc, #140]	; (8001038 <_Z31balance_activation_deactivationv+0xa4>)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	4413      	add	r3, r2
 8000fb0:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	d103      	bne.n	8000fc2 <_Z31balance_activation_deactivationv+0x2e>
			{
				LTC_turn_on_discharge(i, data.charging.cell_discharge);
 8000fba:	4920      	ldr	r1, [pc, #128]	; (800103c <_Z31balance_activation_deactivationv+0xa8>)
 8000fbc:	6878      	ldr	r0, [r7, #4]
 8000fbe:	f001 fe13 	bl	8002be8 <_Z21LTC_turn_on_dischargeiPb>
		for(int i = 0; i < NUMBER_OF_CELLS ; i++)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	3301      	adds	r3, #1
 8000fc6:	607b      	str	r3, [r7, #4]
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2b05      	cmp	r3, #5
 8000fcc:	dded      	ble.n	8000faa <_Z31balance_activation_deactivationv+0x16>
			}
		}
		balance_deactivation_flag = true;
 8000fce:	4b1c      	ldr	r3, [pc, #112]	; (8001040 <_Z31balance_activation_deactivationv+0xac>)
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	701a      	strb	r2, [r3, #0]
	}
	if(data.charging.discharge_tick_end <= HAL_GetTick() && balance_deactivation_flag)
 8000fd4:	4b18      	ldr	r3, [pc, #96]	; (8001038 <_Z31balance_activation_deactivationv+0xa4>)
 8000fd6:	f8d3 429c 	ldr.w	r4, [r3, #668]	; 0x29c
 8000fda:	f004 f8e9 	bl	80051b0 <HAL_GetTick>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	429c      	cmp	r4, r3
 8000fe2:	d805      	bhi.n	8000ff0 <_Z31balance_activation_deactivationv+0x5c>
 8000fe4:	4b16      	ldr	r3, [pc, #88]	; (8001040 <_Z31balance_activation_deactivationv+0xac>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <_Z31balance_activation_deactivationv+0x5c>
 8000fec:	2301      	movs	r3, #1
 8000fee:	e000      	b.n	8000ff2 <_Z31balance_activation_deactivationv+0x5e>
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d01b      	beq.n	800102e <_Z31balance_activation_deactivationv+0x9a>
	{
		balance_deactivation_flag = false;
 8000ff6:	4b12      	ldr	r3, [pc, #72]	; (8001040 <_Z31balance_activation_deactivationv+0xac>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	701a      	strb	r2, [r3, #0]
		data.charging.discharge_activation = 0;
 8000ffc:	4b0e      	ldr	r3, [pc, #56]	; (8001038 <_Z31balance_activation_deactivationv+0xa4>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	f883 2298 	strb.w	r2, [r3, #664]	; 0x298
		for(int i = 0; i < NUMBER_OF_CELLS ; i++)
 8001004:	2300      	movs	r3, #0
 8001006:	603b      	str	r3, [r7, #0]
 8001008:	e009      	b.n	800101e <_Z31balance_activation_deactivationv+0x8a>
		{
			data.charging.cell_discharge[i] = false;
 800100a:	4a0b      	ldr	r2, [pc, #44]	; (8001038 <_Z31balance_activation_deactivationv+0xa4>)
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	4413      	add	r3, r2
 8001010:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8001014:	2200      	movs	r2, #0
 8001016:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < NUMBER_OF_CELLS ; i++)
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	3301      	adds	r3, #1
 800101c:	603b      	str	r3, [r7, #0]
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	2b05      	cmp	r3, #5
 8001022:	ddf2      	ble.n	800100a <_Z31balance_activation_deactivationv+0x76>
		}
		LTC_turn_off_discharge();
 8001024:	f001 fed0 	bl	8002dc8 <_Z22LTC_turn_off_dischargev>
		tick_counter = 0; // time to wait for proper voltage values
 8001028:	4b06      	ldr	r3, [pc, #24]	; (8001044 <_Z31balance_activation_deactivationv+0xb0>)
 800102a:	2200      	movs	r2, #0
 800102c:	601a      	str	r2, [r3, #0]
	}
}
 800102e:	bf00      	nop
 8001030:	370c      	adds	r7, #12
 8001032:	46bd      	mov	sp, r7
 8001034:	bd90      	pop	{r4, r7, pc}
 8001036:	bf00      	nop
 8001038:	20001478 	.word	0x20001478
 800103c:	20001708 	.word	0x20001708
 8001040:	2000059c 	.word	0x2000059c
 8001044:	200005a0 	.word	0x200005a0

08001048 <_Z22start_balance_functionPv>:



void start_balance_function(void *argument){
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
	data.charging.charger_plugged = HAL_GPIO_ReadPin(INTERLOCK_GPIO_Port, INTERLOCK_Pin);
 8001050:	2104      	movs	r1, #4
 8001052:	481c      	ldr	r0, [pc, #112]	; (80010c4 <_Z22start_balance_functionPv+0x7c>)
 8001054:	f007 f976 	bl	8008344 <HAL_GPIO_ReadPin>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	bf14      	ite	ne
 800105e:	2301      	movne	r3, #1
 8001060:	2300      	moveq	r3, #0
 8001062:	b2da      	uxtb	r2, r3
 8001064:	4b18      	ldr	r3, [pc, #96]	; (80010c8 <_Z22start_balance_functionPv+0x80>)
 8001066:	f883 2296 	strb.w	r2, [r3, #662]	; 0x296
	for(;;){
		osDelay(100);
 800106a:	2064      	movs	r0, #100	; 0x64
 800106c:	f00f f836 	bl	80100dc <osDelay>
		//balance test on cell 0
		//data.charging.cell_discharge[0]=true;
		//LTC_turn_on_discharge(0, data.charging.cell_discharge);
		tick_counter++;
 8001070:	4b16      	ldr	r3, [pc, #88]	; (80010cc <_Z22start_balance_functionPv+0x84>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	3301      	adds	r3, #1
 8001076:	4a15      	ldr	r2, [pc, #84]	; (80010cc <_Z22start_balance_functionPv+0x84>)
 8001078:	6013      	str	r3, [r2, #0]
		if(tick_counter > BALANCE_TICKS_AFTER_BALANCE){
 800107a:	4b14      	ldr	r3, [pc, #80]	; (80010cc <_Z22start_balance_functionPv+0x84>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	2b1e      	cmp	r3, #30
 8001080:	d9f3      	bls.n	800106a <_Z22start_balance_functionPv+0x22>
			if(!data.charging.charger_plugged) //charger is plugged
 8001082:	4b11      	ldr	r3, [pc, #68]	; (80010c8 <_Z22start_balance_functionPv+0x80>)
 8001084:	f893 3296 	ldrb.w	r3, [r3, #662]	; 0x296
 8001088:	f083 0301 	eor.w	r3, r3, #1
 800108c:	b2db      	uxtb	r3, r3
 800108e:	2b00      	cmp	r3, #0
 8001090:	d00f      	beq.n	80010b2 <_Z22start_balance_functionPv+0x6a>
			{
				HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_RESET);
 8001092:	2200      	movs	r2, #0
 8001094:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001098:	480d      	ldr	r0, [pc, #52]	; (80010d0 <_Z22start_balance_functionPv+0x88>)
 800109a:	f007 f96b 	bl	8008374 <HAL_GPIO_WritePin>
				if(1 == data.charging.balance_on)
 800109e:	4b0a      	ldr	r3, [pc, #40]	; (80010c8 <_Z22start_balance_functionPv+0x80>)
 80010a0:	f893 3299 	ldrb.w	r3, [r3, #665]	; 0x299
 80010a4:	2b01      	cmp	r3, #1
 80010a6:	d1e0      	bne.n	800106a <_Z22start_balance_functionPv+0x22>
				{
				balance_control();
 80010a8:	f7ff fe1c 	bl	8000ce4 <_Z15balance_controlv>
				balance_activation_deactivation();
 80010ac:	f7ff ff72 	bl	8000f94 <_Z31balance_activation_deactivationv>
 80010b0:	e7db      	b.n	800106a <_Z22start_balance_functionPv+0x22>
				}

			}
			else	//charger is unplugged
			{
				HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_SET);
 80010b2:	2201      	movs	r2, #1
 80010b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010b8:	4805      	ldr	r0, [pc, #20]	; (80010d0 <_Z22start_balance_functionPv+0x88>)
 80010ba:	f007 f95b 	bl	8008374 <HAL_GPIO_WritePin>
				balance_activation_deactivation();
 80010be:	f7ff ff69 	bl	8000f94 <_Z31balance_activation_deactivationv>
		osDelay(100);
 80010c2:	e7d2      	b.n	800106a <_Z22start_balance_functionPv+0x22>
 80010c4:	48000400 	.word	0x48000400
 80010c8:	20001478 	.word	0x20001478
 80010cc:	200005a0 	.word	0x200005a0
 80010d0:	48000800 	.word	0x48000800

080010d4 <_ZSt21is_constant_evaluatedv>:
#define __cpp_lib_is_constant_evaluated 201811L

  /// Returns true only when called during constant evaluation.
  constexpr inline bool
  is_constant_evaluated() noexcept
  { return __builtin_is_constant_evaluated(); }
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	2300      	movs	r3, #0
 80010da:	4618      	mov	r0, r3
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr

080010e4 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
 80010ec:	6039      	str	r1, [r7, #0]
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	4618      	mov	r0, r3
 80010f2:	370c      	adds	r7, #12
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr

080010fc <_ZN3etl11vector_baseC1Ej>:
  protected:

    //*************************************************************************
    /// Constructor.
    //*************************************************************************
    vector_base(size_t max_size_)
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	6039      	str	r1, [r7, #0]
      : CAPACITY(max_size_)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	683a      	ldr	r2, [r7, #0]
 800110a:	601a      	str	r2, [r3, #0]
    {
    }
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	4618      	mov	r0, r3
 8001110:	370c      	adds	r7, #12
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr

0800111a <_ZN3etl11vector_baseD1Ev>:
    virtual ~vector_base()
    {
    }
#else
  protected:
    ~vector_base()
 800111a:	b480      	push	{r7}
 800111c:	b083      	sub	sp, #12
 800111e:	af00      	add	r7, sp, #0
 8001120:	6078      	str	r0, [r7, #4]
    {
    }
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4618      	mov	r0, r3
 8001126:	370c      	adds	r7, #12
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr

08001130 <_ZN8PUTM_CAN14Can_rx_messageC1ER19__CAN_HandleTypeDefm>:
namespace PUTM_CAN {

static const std::size_t max_dlc_size = 8;

struct Can_rx_message {
  Can_rx_message(CAN_HandleTypeDef &hcan, uint32_t RxFifo) : header{}, data{0} {
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
 8001136:	60f8      	str	r0, [r7, #12]
 8001138:	60b9      	str	r1, [r7, #8]
 800113a:	607a      	str	r2, [r7, #4]
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	461a      	mov	r2, r3
 8001140:	2300      	movs	r3, #0
 8001142:	6013      	str	r3, [r2, #0]
 8001144:	6053      	str	r3, [r2, #4]
 8001146:	6093      	str	r3, [r2, #8]
 8001148:	60d3      	str	r3, [r2, #12]
 800114a:	6113      	str	r3, [r2, #16]
 800114c:	6153      	str	r3, [r2, #20]
 800114e:	6193      	str	r3, [r2, #24]
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	331c      	adds	r3, #28
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	605a      	str	r2, [r3, #4]
    this->status =
        HAL_CAN_GetRxMessage(&hcan, RxFifo, &this->header, this->data);
 800115a:	68fa      	ldr	r2, [r7, #12]
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	331c      	adds	r3, #28
 8001160:	6879      	ldr	r1, [r7, #4]
 8001162:	68b8      	ldr	r0, [r7, #8]
 8001164:	f006 f8a1 	bl	80072aa <HAL_CAN_GetRxMessage>
 8001168:	4603      	mov	r3, r0
 800116a:	461a      	mov	r2, r3
    this->status =
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	4618      	mov	r0, r3
 8001176:	3710      	adds	r7, #16
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}

0800117c <_ZN8PUTM_CAN11Device_base6get_IDEv>:
  bool new_data : 1;

public:
  constexpr Device_base(uint32_t ide, uint8_t dlc)
      : IDE{ide}, DLC{dlc}, new_data{false} {}
  [[nodiscard]] constexpr uint32_t get_ID() { return IDE; }
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	791a      	ldrb	r2, [r3, #4]
 8001188:	795b      	ldrb	r3, [r3, #5]
 800118a:	f003 030f 	and.w	r3, r3, #15
 800118e:	021b      	lsls	r3, r3, #8
 8001190:	4313      	orrs	r3, r2
 8001192:	b29b      	uxth	r3, r3
 8001194:	4618      	mov	r0, r3
 8001196:	370c      	adds	r7, #12
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr

080011a0 <_ZN8PUTM_CAN13Can_interface13parse_messageERKNS_14Can_rx_messageE>:
                                                &wheel_temp_main};

public:
  Can_interface() = default;

  bool parse_message(const Can_rx_message &m) {
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b086      	sub	sp, #24
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	6039      	str	r1, [r7, #0]
    for (auto &device : device_array) {
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80011b0:	613b      	str	r3, [r7, #16]
 80011b2:	6938      	ldr	r0, [r7, #16]
 80011b4:	f000 fd04 	bl	8001bc0 <_ZNSt5arrayIPN8PUTM_CAN11Device_baseELj33EE5beginEv>
 80011b8:	6178      	str	r0, [r7, #20]
 80011ba:	6938      	ldr	r0, [r7, #16]
 80011bc:	f000 fd0c 	bl	8001bd8 <_ZNSt5arrayIPN8PUTM_CAN11Device_baseELj33EE3endEv>
 80011c0:	60f8      	str	r0, [r7, #12]
 80011c2:	e01e      	b.n	8001202 <_ZN8PUTM_CAN13Can_interface13parse_messageERKNS_14Can_rx_messageE+0x62>
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	60bb      	str	r3, [r7, #8]
      if (device->get_ID() == m.header.StdId) {
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff ffd5 	bl	800117c <_ZN8PUTM_CAN11Device_base6get_IDEv>
 80011d2:	4602      	mov	r2, r0
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	429a      	cmp	r2, r3
 80011da:	bf0c      	ite	eq
 80011dc:	2301      	moveq	r3, #1
 80011de:	2300      	movne	r3, #0
 80011e0:	b2db      	uxtb	r3, r3
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d00a      	beq.n	80011fc <_ZN8PUTM_CAN13Can_interface13parse_messageERKNS_14Can_rx_messageE+0x5c>
        device->set_data(m);
 80011e6:	68bb      	ldr	r3, [r7, #8]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	68ba      	ldr	r2, [r7, #8]
 80011f0:	6812      	ldr	r2, [r2, #0]
 80011f2:	6839      	ldr	r1, [r7, #0]
 80011f4:	4610      	mov	r0, r2
 80011f6:	4798      	blx	r3
        return true;
 80011f8:	2301      	movs	r3, #1
 80011fa:	e007      	b.n	800120c <_ZN8PUTM_CAN13Can_interface13parse_messageERKNS_14Can_rx_messageE+0x6c>
    for (auto &device : device_array) {
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	3304      	adds	r3, #4
 8001200:	617b      	str	r3, [r7, #20]
 8001202:	697a      	ldr	r2, [r7, #20]
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	429a      	cmp	r2, r3
 8001208:	d1dc      	bne.n	80011c4 <_ZN8PUTM_CAN13Can_interface13parse_messageERKNS_14Can_rx_messageE+0x24>
      }
    }
    return false;
 800120a:	2300      	movs	r3, #0
  }
 800120c:	4618      	mov	r0, r3
 800120e:	3718      	adds	r7, #24
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}

08001214 <HAL_CAN_RxFifo0MsgPendingCallback>:

Can_interface can;

} // namespace PUTM_CAN

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001214:	b580      	push	{r7, lr}
 8001216:	b08c      	sub	sp, #48	; 0x30
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  PUTM_CAN::Can_rx_message rx{*hcan, 0};
 800121c:	f107 0308 	add.w	r3, r7, #8
 8001220:	2200      	movs	r2, #0
 8001222:	6879      	ldr	r1, [r7, #4]
 8001224:	4618      	mov	r0, r3
 8001226:	f7ff ff83 	bl	8001130 <_ZN8PUTM_CAN14Can_rx_messageC1ER19__CAN_HandleTypeDefm>
  if (rx.status == HAL_StatusTypeDef::HAL_OK) {
 800122a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800122e:	2b00      	cmp	r3, #0
 8001230:	d105      	bne.n	800123e <HAL_CAN_RxFifo0MsgPendingCallback+0x2a>
    if (not PUTM_CAN::can.parse_message(rx)) {
 8001232:	f107 0308 	add.w	r3, r7, #8
 8001236:	4619      	mov	r1, r3
 8001238:	4803      	ldr	r0, [pc, #12]	; (8001248 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 800123a:	f7ff ffb1 	bl	80011a0 <_ZN8PUTM_CAN13Can_interface13parse_messageERKNS_14Can_rx_messageE>
      // Unknown message
      //Error_Handler();
    }
  }
}
 800123e:	bf00      	nop
 8001240:	3730      	adds	r7, #48	; 0x30
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	20000000 	.word	0x20000000

0800124c <_Z8can_initv>:
		{Error_condition::CURRENT_HIGH,20,100,data.current.value,ERROR_TIME,7}

};

void can_init()
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b08a      	sub	sp, #40	; 0x28
 8001250:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef filter;
	filter.FilterActivation = ENABLE;
 8001252:	2301      	movs	r3, #1
 8001254:	623b      	str	r3, [r7, #32]
	filter.FilterBank = 10;
 8001256:	230a      	movs	r3, #10
 8001258:	617b      	str	r3, [r7, #20]
	filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 800125a:	2300      	movs	r3, #0
 800125c:	613b      	str	r3, [r7, #16]
	filter.FilterIdHigh = 0x00;
 800125e:	2300      	movs	r3, #0
 8001260:	603b      	str	r3, [r7, #0]
	filter.FilterIdLow = 0x00;
 8001262:	2300      	movs	r3, #0
 8001264:	607b      	str	r3, [r7, #4]
	filter.FilterMaskIdHigh = 0x00;
 8001266:	2300      	movs	r3, #0
 8001268:	60bb      	str	r3, [r7, #8]
	filter.FilterMaskIdLow = 0x00;
 800126a:	2300      	movs	r3, #0
 800126c:	60fb      	str	r3, [r7, #12]
	filter.FilterMode = CAN_FILTERMODE_IDMASK;
 800126e:	2300      	movs	r3, #0
 8001270:	61bb      	str	r3, [r7, #24]
	filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8001272:	2301      	movs	r3, #1
 8001274:	61fb      	str	r3, [r7, #28]
	filter.SlaveStartFilterBank = 10;
 8001276:	230a      	movs	r3, #10
 8001278:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan1, &filter);
 800127a:	463b      	mov	r3, r7
 800127c:	4619      	mov	r1, r3
 800127e:	4807      	ldr	r0, [pc, #28]	; (800129c <_Z8can_initv+0x50>)
 8001280:	f005 fe35 	bl	8006eee <HAL_CAN_ConfigFilter>
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001284:	2102      	movs	r1, #2
 8001286:	4805      	ldr	r0, [pc, #20]	; (800129c <_Z8can_initv+0x50>)
 8001288:	f006 f921 	bl	80074ce <HAL_CAN_ActivateNotification>
	HAL_CAN_Start(&hcan1);
 800128c:	4803      	ldr	r0, [pc, #12]	; (800129c <_Z8can_initv+0x50>)
 800128e:	f005 fef8 	bl	8007082 <HAL_CAN_Start>

}
 8001292:	bf00      	nop
 8001294:	3728      	adds	r7, #40	; 0x28
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	20001aac 	.word	0x20001aac

080012a0 <_Z11error_checkv>:

// error if value is in range <min, max>
void error_check(){
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b090      	sub	sp, #64	; 0x40
 80012a4:	af00      	add	r7, sp, #0
	etl::vector<Error_condition, 8> errors_vector;
 80012a6:	1d3b      	adds	r3, r7, #4
 80012a8:	4618      	mov	r0, r3
 80012aa:	f000 fcaf 	bl	8001c0c <_ZN3etl6vectorI15Error_conditionLj8EEC1Ev>

	for(auto& error : error_conditions){
 80012ae:	4b2f      	ldr	r3, [pc, #188]	; (800136c <_Z11error_checkv+0xcc>)
 80012b0:	63bb      	str	r3, [r7, #56]	; 0x38
 80012b2:	4b2e      	ldr	r3, [pc, #184]	; (800136c <_Z11error_checkv+0xcc>)
 80012b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80012b6:	4b2e      	ldr	r3, [pc, #184]	; (8001370 <_Z11error_checkv+0xd0>)
 80012b8:	637b      	str	r3, [r7, #52]	; 0x34
 80012ba:	e040      	b.n	800133e <_Z11error_checkv+0x9e>
 80012bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80012be:	633b      	str	r3, [r7, #48]	; 0x30
		if(error.min <= error.value && error.value <= error.max){
 80012c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012c2:	ed93 7a01 	vldr	s14, [r3, #4]
 80012c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012c8:	edd3 7a03 	vldr	s15, [r3, #12]
 80012cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012d4:	d825      	bhi.n	8001322 <_Z11error_checkv+0x82>
 80012d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012d8:	ed93 7a03 	vldr	s14, [r3, #12]
 80012dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012de:	edd3 7a02 	vldr	s15, [r3, #8]
 80012e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ea:	d81a      	bhi.n	8001322 <_Z11error_checkv+0x82>
			errors_vector.emplace_back(error.error);
 80012ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80012ee:	1d3b      	adds	r3, r7, #4
 80012f0:	4611      	mov	r1, r2
 80012f2:	4618      	mov	r0, r3
 80012f4:	f000 fcaf 	bl	8001c56 <_ZN3etl7ivectorI15Error_conditionE12emplace_backIJRS1_EEEvDpOT_>
			data.acu_state=error.acu_state_code;
 80012f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012fa:	7d1a      	ldrb	r2, [r3, #20]
 80012fc:	4b1d      	ldr	r3, [pc, #116]	; (8001374 <_Z11error_checkv+0xd4>)
 80012fe:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
			if(false == error.flag)
 8001302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001304:	7f1b      	ldrb	r3, [r3, #28]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d116      	bne.n	8001338 <_Z11error_checkv+0x98>
			{
				error.timer = HAL_GetTick() + error.error_time;
 800130a:	f003 ff51 	bl	80051b0 <HAL_GetTick>
 800130e:	4602      	mov	r2, r0
 8001310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001312:	691b      	ldr	r3, [r3, #16]
 8001314:	441a      	add	r2, r3
 8001316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001318:	619a      	str	r2, [r3, #24]
				error.flag = true;
 800131a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800131c:	2201      	movs	r2, #1
 800131e:	771a      	strb	r2, [r3, #28]
			if(false == error.flag)
 8001320:	e00a      	b.n	8001338 <_Z11error_checkv+0x98>
			}
		}
		else{
			error.timer = HAL_GetTick() + error.error_time;
 8001322:	f003 ff45 	bl	80051b0 <HAL_GetTick>
 8001326:	4602      	mov	r2, r0
 8001328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800132a:	691b      	ldr	r3, [r3, #16]
 800132c:	441a      	add	r2, r3
 800132e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001330:	619a      	str	r2, [r3, #24]
			error.flag = false;
 8001332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001334:	2200      	movs	r2, #0
 8001336:	771a      	strb	r2, [r3, #28]
	for(auto& error : error_conditions){
 8001338:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800133a:	3320      	adds	r3, #32
 800133c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800133e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001340:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001342:	429a      	cmp	r2, r3
 8001344:	d1ba      	bne.n	80012bc <_Z11error_checkv+0x1c>
		}
	}

	if(errors_vector.empty())
 8001346:	1d3b      	adds	r3, r7, #4
 8001348:	4618      	mov	r0, r3
 800134a:	f000 fc9f 	bl	8001c8c <_ZNK3etl7ivectorI15Error_conditionE5emptyEv>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d003      	beq.n	800135c <_Z11error_checkv+0xbc>
	{
		data.acu_state = NORMAL_STATE;
 8001354:	4b07      	ldr	r3, [pc, #28]	; (8001374 <_Z11error_checkv+0xd4>)
 8001356:	2200      	movs	r2, #0
 8001358:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
	}
}
 800135c:	1d3b      	adds	r3, r7, #4
 800135e:	4618      	mov	r0, r3
 8001360:	f000 fc68 	bl	8001c34 <_ZN3etl6vectorI15Error_conditionLj8EED1Ev>
 8001364:	3740      	adds	r7, #64	; 0x40
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	200005c4 	.word	0x200005c4
 8001370:	200006c4 	.word	0x200006c4
 8001374:	20001478 	.word	0x20001478

08001378 <_Z13error_executev>:

void error_execute(){
 8001378:	b590      	push	{r4, r7, lr}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
	uint32_t time = HAL_GetTick();
 800137e:	f003 ff17 	bl	80051b0 <HAL_GetTick>
 8001382:	6038      	str	r0, [r7, #0]
	if(error_conditions[0].timer <= HAL_GetTick()) //shut down and sleep
 8001384:	4b23      	ldr	r3, [pc, #140]	; (8001414 <_Z13error_executev+0x9c>)
 8001386:	699c      	ldr	r4, [r3, #24]
 8001388:	f003 ff12 	bl	80051b0 <HAL_GetTick>
 800138c:	4603      	mov	r3, r0
 800138e:	429c      	cmp	r4, r3
 8001390:	bf94      	ite	ls
 8001392:	2301      	movls	r3, #1
 8001394:	2300      	movhi	r3, #0
 8001396:	b2db      	uxtb	r3, r3
 8001398:	2b00      	cmp	r3, #0
 800139a:	d00a      	beq.n	80013b2 <_Z13error_executev+0x3a>
	{
		HAL_GPIO_WritePin(EFUSE_GPIO_Port, EFUSE_Pin, GPIO_PIN_RESET);
 800139c:	2200      	movs	r2, #0
 800139e:	2104      	movs	r1, #4
 80013a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013a4:	f006 ffe6 	bl	8008374 <HAL_GPIO_WritePin>
		HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 80013a8:	2101      	movs	r1, #1
 80013aa:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80013ae:	f008 f9b9 	bl	8009724 <HAL_PWR_EnterSTOPMode>
	}
	for(unsigned int i = 3; i < 8; i++){
 80013b2:	2303      	movs	r3, #3
 80013b4:	607b      	str	r3, [r7, #4]
 80013b6:	e018      	b.n	80013ea <_Z13error_executev+0x72>
		{
			if(error_conditions[i].timer <= HAL_GetTick()) //shut down
 80013b8:	4a16      	ldr	r2, [pc, #88]	; (8001414 <_Z13error_executev+0x9c>)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	015b      	lsls	r3, r3, #5
 80013be:	4413      	add	r3, r2
 80013c0:	3318      	adds	r3, #24
 80013c2:	681c      	ldr	r4, [r3, #0]
 80013c4:	f003 fef4 	bl	80051b0 <HAL_GetTick>
 80013c8:	4603      	mov	r3, r0
 80013ca:	429c      	cmp	r4, r3
 80013cc:	bf94      	ite	ls
 80013ce:	2301      	movls	r3, #1
 80013d0:	2300      	movhi	r3, #0
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d005      	beq.n	80013e4 <_Z13error_executev+0x6c>
			{

				HAL_GPIO_WritePin(EFUSE_GPIO_Port, EFUSE_Pin, GPIO_PIN_RESET);
 80013d8:	2200      	movs	r2, #0
 80013da:	2104      	movs	r1, #4
 80013dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013e0:	f006 ffc8 	bl	8008374 <HAL_GPIO_WritePin>
	for(unsigned int i = 3; i < 8; i++){
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	3301      	adds	r3, #1
 80013e8:	607b      	str	r3, [r7, #4]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2b07      	cmp	r3, #7
 80013ee:	d9e3      	bls.n	80013b8 <_Z13error_executev+0x40>
				}*/
			}
		}
	}

	data.EFUSE_state = HAL_GPIO_ReadPin(EFUSE_GPIO_Port, EFUSE_Pin);
 80013f0:	2104      	movs	r1, #4
 80013f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013f6:	f006 ffa5 	bl	8008344 <HAL_GPIO_ReadPin>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	bf14      	ite	ne
 8001400:	2301      	movne	r3, #1
 8001402:	2300      	moveq	r3, #0
 8001404:	b2da      	uxtb	r2, r3
 8001406:	4b04      	ldr	r3, [pc, #16]	; (8001418 <_Z13error_executev+0xa0>)
 8001408:	f883 22a1 	strb.w	r2, [r3, #673]	; 0x2a1
}
 800140c:	bf00      	nop
 800140e:	370c      	adds	r7, #12
 8001410:	46bd      	mov	sp, r7
 8001412:	bd90      	pop	{r4, r7, pc}
 8001414:	200005c4 	.word	0x200005c4
 8001418:	20001478 	.word	0x20001478

0800141c <_Z11serialPrintv>:

void serialPrint()
{
 800141c:	b590      	push	{r4, r7, lr}
 800141e:	b08d      	sub	sp, #52	; 0x34
 8001420:	af02      	add	r7, sp, #8
	// FIXME count chars
	// or use {fmt}
	static char tab[3500];
	uint16_t n=0;
 8001422:	2300      	movs	r3, #0
 8001424:	84fb      	strh	r3, [r7, #38]	; 0x26

	RTC_DateTypeDef rtc_date;
	RTC_TimeTypeDef rtc_time;
	HAL_RTC_GetTime(&hrtc, &rtc_time, RTC_FORMAT_BIN);
 8001426:	463b      	mov	r3, r7
 8001428:	2200      	movs	r2, #0
 800142a:	4619      	mov	r1, r3
 800142c:	48ab      	ldr	r0, [pc, #684]	; (80016dc <_Z11serialPrintv+0x2c0>)
 800142e:	f00a f891 	bl	800b554 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &rtc_date, RTC_FORMAT_BIN);
 8001432:	f107 0314 	add.w	r3, r7, #20
 8001436:	2200      	movs	r2, #0
 8001438:	4619      	mov	r1, r3
 800143a:	48a8      	ldr	r0, [pc, #672]	; (80016dc <_Z11serialPrintv+0x2c0>)
 800143c:	f00a f974 	bl	800b728 <HAL_RTC_GetDate>

	float cell_values_sum = (float)data.voltages.total / 10'000.0;
 8001440:	4ba7      	ldr	r3, [pc, #668]	; (80016e0 <_Z11serialPrintv+0x2c4>)
 8001442:	695b      	ldr	r3, [r3, #20]
 8001444:	ee07 3a90 	vmov	s15, r3
 8001448:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800144c:	eddf 6aa5 	vldr	s13, [pc, #660]	; 80016e4 <_Z11serialPrintv+0x2c8>
 8001450:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001454:	edc7 7a07 	vstr	s15, [r7, #28]
	n += sprintf(&tab[n], "%02d:%02d:%02d\r\n", rtc_time.Hours, rtc_time.Minutes, rtc_time.Seconds);
 8001458:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800145a:	4aa3      	ldr	r2, [pc, #652]	; (80016e8 <_Z11serialPrintv+0x2cc>)
 800145c:	1898      	adds	r0, r3, r2
 800145e:	783b      	ldrb	r3, [r7, #0]
 8001460:	461a      	mov	r2, r3
 8001462:	787b      	ldrb	r3, [r7, #1]
 8001464:	4619      	mov	r1, r3
 8001466:	78bb      	ldrb	r3, [r7, #2]
 8001468:	9300      	str	r3, [sp, #0]
 800146a:	460b      	mov	r3, r1
 800146c:	499f      	ldr	r1, [pc, #636]	; (80016ec <_Z11serialPrintv+0x2d0>)
 800146e:	f012 ff9f 	bl	80143b0 <siprintf>
 8001472:	4603      	mov	r3, r0
 8001474:	b29a      	uxth	r2, r3
 8001476:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001478:	4413      	add	r3, r2
 800147a:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "*** Battery state: %d ***", data.acu_state);
 800147c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800147e:	4a9a      	ldr	r2, [pc, #616]	; (80016e8 <_Z11serialPrintv+0x2cc>)
 8001480:	4413      	add	r3, r2
 8001482:	4a97      	ldr	r2, [pc, #604]	; (80016e0 <_Z11serialPrintv+0x2c4>)
 8001484:	f892 22a0 	ldrb.w	r2, [r2, #672]	; 0x2a0
 8001488:	4999      	ldr	r1, [pc, #612]	; (80016f0 <_Z11serialPrintv+0x2d4>)
 800148a:	4618      	mov	r0, r3
 800148c:	f012 ff90 	bl	80143b0 <siprintf>
 8001490:	4603      	mov	r3, r0
 8001492:	b29a      	uxth	r2, r3
 8001494:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001496:	4413      	add	r3, r2
 8001498:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "\r\n");
 800149a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800149c:	4a92      	ldr	r2, [pc, #584]	; (80016e8 <_Z11serialPrintv+0x2cc>)
 800149e:	4413      	add	r3, r2
 80014a0:	4994      	ldr	r1, [pc, #592]	; (80016f4 <_Z11serialPrintv+0x2d8>)
 80014a2:	4618      	mov	r0, r3
 80014a4:	f012 ff84 	bl	80143b0 <siprintf>
 80014a8:	4603      	mov	r3, r0
 80014aa:	b29a      	uxth	r2, r3
 80014ac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80014ae:	4413      	add	r3, r2
 80014b0:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "LEGEND FOR BATTERY STATE:");
 80014b2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80014b4:	4a8c      	ldr	r2, [pc, #560]	; (80016e8 <_Z11serialPrintv+0x2cc>)
 80014b6:	4413      	add	r3, r2
 80014b8:	498f      	ldr	r1, [pc, #572]	; (80016f8 <_Z11serialPrintv+0x2dc>)
 80014ba:	4618      	mov	r0, r3
 80014bc:	f012 ff78 	bl	80143b0 <siprintf>
 80014c0:	4603      	mov	r3, r0
 80014c2:	b29a      	uxth	r2, r3
 80014c4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80014c6:	4413      	add	r3, r2
 80014c8:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "\r\n");
 80014ca:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80014cc:	4a86      	ldr	r2, [pc, #536]	; (80016e8 <_Z11serialPrintv+0x2cc>)
 80014ce:	4413      	add	r3, r2
 80014d0:	4988      	ldr	r1, [pc, #544]	; (80016f4 <_Z11serialPrintv+0x2d8>)
 80014d2:	4618      	mov	r0, r3
 80014d4:	f012 ff6c 	bl	80143b0 <siprintf>
 80014d8:	4603      	mov	r3, r0
 80014da:	b29a      	uxth	r2, r3
 80014dc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80014de:	4413      	add	r3, r2
 80014e0:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "0- all good");
 80014e2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80014e4:	4a80      	ldr	r2, [pc, #512]	; (80016e8 <_Z11serialPrintv+0x2cc>)
 80014e6:	4413      	add	r3, r2
 80014e8:	4984      	ldr	r1, [pc, #528]	; (80016fc <_Z11serialPrintv+0x2e0>)
 80014ea:	4618      	mov	r0, r3
 80014ec:	f012 ff60 	bl	80143b0 <siprintf>
 80014f0:	4603      	mov	r3, r0
 80014f2:	b29a      	uxth	r2, r3
 80014f4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80014f6:	4413      	add	r3, r2
 80014f8:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "\r\n");
 80014fa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80014fc:	4a7a      	ldr	r2, [pc, #488]	; (80016e8 <_Z11serialPrintv+0x2cc>)
 80014fe:	4413      	add	r3, r2
 8001500:	497c      	ldr	r1, [pc, #496]	; (80016f4 <_Z11serialPrintv+0x2d8>)
 8001502:	4618      	mov	r0, r3
 8001504:	f012 ff54 	bl	80143b0 <siprintf>
 8001508:	4603      	mov	r3, r0
 800150a:	b29a      	uxth	r2, r3
 800150c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800150e:	4413      	add	r3, r2
 8001510:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "1- charging");
 8001512:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001514:	4a74      	ldr	r2, [pc, #464]	; (80016e8 <_Z11serialPrintv+0x2cc>)
 8001516:	4413      	add	r3, r2
 8001518:	4979      	ldr	r1, [pc, #484]	; (8001700 <_Z11serialPrintv+0x2e4>)
 800151a:	4618      	mov	r0, r3
 800151c:	f012 ff48 	bl	80143b0 <siprintf>
 8001520:	4603      	mov	r3, r0
 8001522:	b29a      	uxth	r2, r3
 8001524:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001526:	4413      	add	r3, r2
 8001528:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "\r\n");
 800152a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800152c:	4a6e      	ldr	r2, [pc, #440]	; (80016e8 <_Z11serialPrintv+0x2cc>)
 800152e:	4413      	add	r3, r2
 8001530:	4970      	ldr	r1, [pc, #448]	; (80016f4 <_Z11serialPrintv+0x2d8>)
 8001532:	4618      	mov	r0, r3
 8001534:	f012 ff3c 	bl	80143b0 <siprintf>
 8001538:	4603      	mov	r3, r0
 800153a:	b29a      	uxth	r2, r3
 800153c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800153e:	4413      	add	r3, r2
 8001540:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "2- unbalanced(difference from lowest to highest >0.2V)");
 8001542:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001544:	4a68      	ldr	r2, [pc, #416]	; (80016e8 <_Z11serialPrintv+0x2cc>)
 8001546:	4413      	add	r3, r2
 8001548:	496e      	ldr	r1, [pc, #440]	; (8001704 <_Z11serialPrintv+0x2e8>)
 800154a:	4618      	mov	r0, r3
 800154c:	f012 ff30 	bl	80143b0 <siprintf>
 8001550:	4603      	mov	r3, r0
 8001552:	b29a      	uxth	r2, r3
 8001554:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001556:	4413      	add	r3, r2
 8001558:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "\r\n");
 800155a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800155c:	4a62      	ldr	r2, [pc, #392]	; (80016e8 <_Z11serialPrintv+0x2cc>)
 800155e:	4413      	add	r3, r2
 8001560:	4964      	ldr	r1, [pc, #400]	; (80016f4 <_Z11serialPrintv+0x2d8>)
 8001562:	4618      	mov	r0, r3
 8001564:	f012 ff24 	bl	80143b0 <siprintf>
 8001568:	4603      	mov	r3, r0
 800156a:	b29a      	uxth	r2, r3
 800156c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800156e:	4413      	add	r3, r2
 8001570:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "3- highest temperature is more than 48C");
 8001572:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001574:	4a5c      	ldr	r2, [pc, #368]	; (80016e8 <_Z11serialPrintv+0x2cc>)
 8001576:	4413      	add	r3, r2
 8001578:	4963      	ldr	r1, [pc, #396]	; (8001708 <_Z11serialPrintv+0x2ec>)
 800157a:	4618      	mov	r0, r3
 800157c:	f012 ff18 	bl	80143b0 <siprintf>
 8001580:	4603      	mov	r3, r0
 8001582:	b29a      	uxth	r2, r3
 8001584:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001586:	4413      	add	r3, r2
 8001588:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "\r\n");
 800158a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800158c:	4a56      	ldr	r2, [pc, #344]	; (80016e8 <_Z11serialPrintv+0x2cc>)
 800158e:	4413      	add	r3, r2
 8001590:	4958      	ldr	r1, [pc, #352]	; (80016f4 <_Z11serialPrintv+0x2d8>)
 8001592:	4618      	mov	r0, r3
 8001594:	f012 ff0c 	bl	80143b0 <siprintf>
 8001598:	4603      	mov	r3, r0
 800159a:	b29a      	uxth	r2, r3
 800159c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800159e:	4413      	add	r3, r2
 80015a0:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "4- too low voltage");
 80015a2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80015a4:	4a50      	ldr	r2, [pc, #320]	; (80016e8 <_Z11serialPrintv+0x2cc>)
 80015a6:	4413      	add	r3, r2
 80015a8:	4958      	ldr	r1, [pc, #352]	; (800170c <_Z11serialPrintv+0x2f0>)
 80015aa:	4618      	mov	r0, r3
 80015ac:	f012 ff00 	bl	80143b0 <siprintf>
 80015b0:	4603      	mov	r3, r0
 80015b2:	b29a      	uxth	r2, r3
 80015b4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80015b6:	4413      	add	r3, r2
 80015b8:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "\r\n");
 80015ba:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80015bc:	4a4a      	ldr	r2, [pc, #296]	; (80016e8 <_Z11serialPrintv+0x2cc>)
 80015be:	4413      	add	r3, r2
 80015c0:	494c      	ldr	r1, [pc, #304]	; (80016f4 <_Z11serialPrintv+0x2d8>)
 80015c2:	4618      	mov	r0, r3
 80015c4:	f012 fef4 	bl	80143b0 <siprintf>
 80015c8:	4603      	mov	r3, r0
 80015ca:	b29a      	uxth	r2, r3
 80015cc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80015ce:	4413      	add	r3, r2
 80015d0:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "5- too high voltage");
 80015d2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80015d4:	4a44      	ldr	r2, [pc, #272]	; (80016e8 <_Z11serialPrintv+0x2cc>)
 80015d6:	4413      	add	r3, r2
 80015d8:	494d      	ldr	r1, [pc, #308]	; (8001710 <_Z11serialPrintv+0x2f4>)
 80015da:	4618      	mov	r0, r3
 80015dc:	f012 fee8 	bl	80143b0 <siprintf>
 80015e0:	4603      	mov	r3, r0
 80015e2:	b29a      	uxth	r2, r3
 80015e4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80015e6:	4413      	add	r3, r2
 80015e8:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "\r\n");
 80015ea:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80015ec:	4a3e      	ldr	r2, [pc, #248]	; (80016e8 <_Z11serialPrintv+0x2cc>)
 80015ee:	4413      	add	r3, r2
 80015f0:	4940      	ldr	r1, [pc, #256]	; (80016f4 <_Z11serialPrintv+0x2d8>)
 80015f2:	4618      	mov	r0, r3
 80015f4:	f012 fedc 	bl	80143b0 <siprintf>
 80015f8:	4603      	mov	r3, r0
 80015fa:	b29a      	uxth	r2, r3
 80015fc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80015fe:	4413      	add	r3, r2
 8001600:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "6- too high temperature");
 8001602:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001604:	4a38      	ldr	r2, [pc, #224]	; (80016e8 <_Z11serialPrintv+0x2cc>)
 8001606:	4413      	add	r3, r2
 8001608:	4942      	ldr	r1, [pc, #264]	; (8001714 <_Z11serialPrintv+0x2f8>)
 800160a:	4618      	mov	r0, r3
 800160c:	f012 fed0 	bl	80143b0 <siprintf>
 8001610:	4603      	mov	r3, r0
 8001612:	b29a      	uxth	r2, r3
 8001614:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001616:	4413      	add	r3, r2
 8001618:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "\r\n");
 800161a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800161c:	4a32      	ldr	r2, [pc, #200]	; (80016e8 <_Z11serialPrintv+0x2cc>)
 800161e:	4413      	add	r3, r2
 8001620:	4934      	ldr	r1, [pc, #208]	; (80016f4 <_Z11serialPrintv+0x2d8>)
 8001622:	4618      	mov	r0, r3
 8001624:	f012 fec4 	bl	80143b0 <siprintf>
 8001628:	4603      	mov	r3, r0
 800162a:	b29a      	uxth	r2, r3
 800162c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800162e:	4413      	add	r3, r2
 8001630:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "7- too high current");
 8001632:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001634:	4a2c      	ldr	r2, [pc, #176]	; (80016e8 <_Z11serialPrintv+0x2cc>)
 8001636:	4413      	add	r3, r2
 8001638:	4937      	ldr	r1, [pc, #220]	; (8001718 <_Z11serialPrintv+0x2fc>)
 800163a:	4618      	mov	r0, r3
 800163c:	f012 feb8 	bl	80143b0 <siprintf>
 8001640:	4603      	mov	r3, r0
 8001642:	b29a      	uxth	r2, r3
 8001644:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001646:	4413      	add	r3, r2
 8001648:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "\r\n");
 800164a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800164c:	4a26      	ldr	r2, [pc, #152]	; (80016e8 <_Z11serialPrintv+0x2cc>)
 800164e:	4413      	add	r3, r2
 8001650:	4928      	ldr	r1, [pc, #160]	; (80016f4 <_Z11serialPrintv+0x2d8>)
 8001652:	4618      	mov	r0, r3
 8001654:	f012 feac 	bl	80143b0 <siprintf>
 8001658:	4603      	mov	r3, r0
 800165a:	b29a      	uxth	r2, r3
 800165c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800165e:	4413      	add	r3, r2
 8001660:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "8- sleep mode");
 8001662:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001664:	4a20      	ldr	r2, [pc, #128]	; (80016e8 <_Z11serialPrintv+0x2cc>)
 8001666:	4413      	add	r3, r2
 8001668:	492c      	ldr	r1, [pc, #176]	; (800171c <_Z11serialPrintv+0x300>)
 800166a:	4618      	mov	r0, r3
 800166c:	f012 fea0 	bl	80143b0 <siprintf>
 8001670:	4603      	mov	r3, r0
 8001672:	b29a      	uxth	r2, r3
 8001674:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001676:	4413      	add	r3, r2
 8001678:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "\r\n\n");
 800167a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800167c:	4a1a      	ldr	r2, [pc, #104]	; (80016e8 <_Z11serialPrintv+0x2cc>)
 800167e:	4413      	add	r3, r2
 8001680:	4927      	ldr	r1, [pc, #156]	; (8001720 <_Z11serialPrintv+0x304>)
 8001682:	4618      	mov	r0, r3
 8001684:	f012 fe94 	bl	80143b0 <siprintf>
 8001688:	4603      	mov	r3, r0
 800168a:	b29a      	uxth	r2, r3
 800168c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800168e:	4413      	add	r3, r2
 8001690:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "*** Stack voltage:\t%3.2f V ***", cell_values_sum);
 8001692:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001694:	4a14      	ldr	r2, [pc, #80]	; (80016e8 <_Z11serialPrintv+0x2cc>)
 8001696:	189c      	adds	r4, r3, r2
 8001698:	69f8      	ldr	r0, [r7, #28]
 800169a:	f7fe ff6d 	bl	8000578 <__aeabi_f2d>
 800169e:	4602      	mov	r2, r0
 80016a0:	460b      	mov	r3, r1
 80016a2:	4920      	ldr	r1, [pc, #128]	; (8001724 <_Z11serialPrintv+0x308>)
 80016a4:	4620      	mov	r0, r4
 80016a6:	f012 fe83 	bl	80143b0 <siprintf>
 80016aa:	4603      	mov	r3, r0
 80016ac:	b29a      	uxth	r2, r3
 80016ae:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80016b0:	4413      	add	r3, r2
 80016b2:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "\r\n");
 80016b4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80016b6:	4a0c      	ldr	r2, [pc, #48]	; (80016e8 <_Z11serialPrintv+0x2cc>)
 80016b8:	4413      	add	r3, r2
 80016ba:	490e      	ldr	r1, [pc, #56]	; (80016f4 <_Z11serialPrintv+0x2d8>)
 80016bc:	4618      	mov	r0, r3
 80016be:	f012 fe77 	bl	80143b0 <siprintf>
 80016c2:	4603      	mov	r3, r0
 80016c4:	b29a      	uxth	r2, r3
 80016c6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80016c8:	4413      	add	r3, r2
 80016ca:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "*** State of charge: %f ***", data.soc.value * 100);
 80016cc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80016ce:	4a06      	ldr	r2, [pc, #24]	; (80016e8 <_Z11serialPrintv+0x2cc>)
 80016d0:	189c      	adds	r4, r3, r2
 80016d2:	4b03      	ldr	r3, [pc, #12]	; (80016e0 <_Z11serialPrintv+0x2c4>)
 80016d4:	edd3 7aa2 	vldr	s15, [r3, #648]	; 0x288
 80016d8:	e028      	b.n	800172c <_Z11serialPrintv+0x310>
 80016da:	bf00      	nop
 80016dc:	20001ad4 	.word	0x20001ad4
 80016e0:	20001478 	.word	0x20001478
 80016e4:	461c4000 	.word	0x461c4000
 80016e8:	200006c4 	.word	0x200006c4
 80016ec:	08016730 	.word	0x08016730
 80016f0:	08016744 	.word	0x08016744
 80016f4:	08016760 	.word	0x08016760
 80016f8:	08016764 	.word	0x08016764
 80016fc:	08016780 	.word	0x08016780
 8001700:	0801678c 	.word	0x0801678c
 8001704:	08016798 	.word	0x08016798
 8001708:	080167d0 	.word	0x080167d0
 800170c:	080167f8 	.word	0x080167f8
 8001710:	0801680c 	.word	0x0801680c
 8001714:	08016820 	.word	0x08016820
 8001718:	08016838 	.word	0x08016838
 800171c:	0801684c 	.word	0x0801684c
 8001720:	0801685c 	.word	0x0801685c
 8001724:	08016860 	.word	0x08016860
 8001728:	42c80000 	.word	0x42c80000
 800172c:	ed1f 7a02 	vldr	s14, [pc, #-8]	; 8001728 <_Z11serialPrintv+0x30c>
 8001730:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001734:	ee17 0a90 	vmov	r0, s15
 8001738:	f7fe ff1e 	bl	8000578 <__aeabi_f2d>
 800173c:	4602      	mov	r2, r0
 800173e:	460b      	mov	r3, r1
 8001740:	496b      	ldr	r1, [pc, #428]	; (80018f0 <_Z11serialPrintv+0x4d4>)
 8001742:	4620      	mov	r0, r4
 8001744:	f012 fe34 	bl	80143b0 <siprintf>
 8001748:	4603      	mov	r3, r0
 800174a:	b29a      	uxth	r2, r3
 800174c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800174e:	4413      	add	r3, r2
 8001750:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "\r\n");
 8001752:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001754:	4a67      	ldr	r2, [pc, #412]	; (80018f4 <_Z11serialPrintv+0x4d8>)
 8001756:	4413      	add	r3, r2
 8001758:	4967      	ldr	r1, [pc, #412]	; (80018f8 <_Z11serialPrintv+0x4dc>)
 800175a:	4618      	mov	r0, r3
 800175c:	f012 fe28 	bl	80143b0 <siprintf>
 8001760:	4603      	mov	r3, r0
 8001762:	b29a      	uxth	r2, r3
 8001764:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001766:	4413      	add	r3, r2
 8001768:	84fb      	strh	r3, [r7, #38]	; 0x26

	for(int i = 0; i < NUMBER_OF_CELLS; i++)
 800176a:	2300      	movs	r3, #0
 800176c:	623b      	str	r3, [r7, #32]
 800176e:	e067      	b.n	8001840 <_Z11serialPrintv+0x424>
	{
		float cell_value = (float)data.voltages.cells[i] / 10'000.0;
 8001770:	4a62      	ldr	r2, [pc, #392]	; (80018fc <_Z11serialPrintv+0x4e0>)
 8001772:	6a3b      	ldr	r3, [r7, #32]
 8001774:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001778:	ee07 3a90 	vmov	s15, r3
 800177c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001780:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8001900 <_Z11serialPrintv+0x4e4>
 8001784:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001788:	edc7 7a06 	vstr	s15, [r7, #24]
		n += sprintf(&tab[n], "-V.%d-\t", i);
 800178c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800178e:	4a59      	ldr	r2, [pc, #356]	; (80018f4 <_Z11serialPrintv+0x4d8>)
 8001790:	4413      	add	r3, r2
 8001792:	6a3a      	ldr	r2, [r7, #32]
 8001794:	495b      	ldr	r1, [pc, #364]	; (8001904 <_Z11serialPrintv+0x4e8>)
 8001796:	4618      	mov	r0, r3
 8001798:	f012 fe0a 	bl	80143b0 <siprintf>
 800179c:	4603      	mov	r3, r0
 800179e:	b29a      	uxth	r2, r3
 80017a0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80017a2:	4413      	add	r3, r2
 80017a4:	84fb      	strh	r3, [r7, #38]	; 0x26
		n += sprintf(&tab[n], "%1.3f%c\t", cell_value, data.charging.cell_discharge[i] == 0 ? ' ' : '*');
 80017a6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80017a8:	4a52      	ldr	r2, [pc, #328]	; (80018f4 <_Z11serialPrintv+0x4d8>)
 80017aa:	189c      	adds	r4, r3, r2
 80017ac:	69b8      	ldr	r0, [r7, #24]
 80017ae:	f7fe fee3 	bl	8000578 <__aeabi_f2d>
 80017b2:	4602      	mov	r2, r0
 80017b4:	460b      	mov	r3, r1
 80017b6:	4851      	ldr	r0, [pc, #324]	; (80018fc <_Z11serialPrintv+0x4e0>)
 80017b8:	6a39      	ldr	r1, [r7, #32]
 80017ba:	4401      	add	r1, r0
 80017bc:	f501 7124 	add.w	r1, r1, #656	; 0x290
 80017c0:	7809      	ldrb	r1, [r1, #0]
 80017c2:	2900      	cmp	r1, #0
 80017c4:	d101      	bne.n	80017ca <_Z11serialPrintv+0x3ae>
 80017c6:	2120      	movs	r1, #32
 80017c8:	e000      	b.n	80017cc <_Z11serialPrintv+0x3b0>
 80017ca:	212a      	movs	r1, #42	; 0x2a
 80017cc:	9100      	str	r1, [sp, #0]
 80017ce:	494e      	ldr	r1, [pc, #312]	; (8001908 <_Z11serialPrintv+0x4ec>)
 80017d0:	4620      	mov	r0, r4
 80017d2:	f012 fded 	bl	80143b0 <siprintf>
 80017d6:	4603      	mov	r3, r0
 80017d8:	b29a      	uxth	r2, r3
 80017da:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80017dc:	4413      	add	r3, r2
 80017de:	84fb      	strh	r3, [r7, #38]	; 0x26
		if(i != 5)
 80017e0:	6a3b      	ldr	r3, [r7, #32]
 80017e2:	2b05      	cmp	r3, #5
 80017e4:	d01d      	beq.n	8001822 <_Z11serialPrintv+0x406>
		{
		n += sprintf(&tab[n], " -T.%d-\t", i);
 80017e6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80017e8:	4a42      	ldr	r2, [pc, #264]	; (80018f4 <_Z11serialPrintv+0x4d8>)
 80017ea:	4413      	add	r3, r2
 80017ec:	6a3a      	ldr	r2, [r7, #32]
 80017ee:	4947      	ldr	r1, [pc, #284]	; (800190c <_Z11serialPrintv+0x4f0>)
 80017f0:	4618      	mov	r0, r3
 80017f2:	f012 fddd 	bl	80143b0 <siprintf>
 80017f6:	4603      	mov	r3, r0
 80017f8:	b29a      	uxth	r2, r3
 80017fa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80017fc:	4413      	add	r3, r2
 80017fe:	84fb      	strh	r3, [r7, #38]	; 0x26
		n += sprintf(&tab[n], "%d\t", data.temperatures.values[i]);
 8001800:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001802:	4a3c      	ldr	r2, [pc, #240]	; (80018f4 <_Z11serialPrintv+0x4d8>)
 8001804:	1898      	adds	r0, r3, r2
 8001806:	4a3d      	ldr	r2, [pc, #244]	; (80018fc <_Z11serialPrintv+0x4e0>)
 8001808:	6a3b      	ldr	r3, [r7, #32]
 800180a:	4413      	add	r3, r2
 800180c:	3320      	adds	r3, #32
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	461a      	mov	r2, r3
 8001812:	493f      	ldr	r1, [pc, #252]	; (8001910 <_Z11serialPrintv+0x4f4>)
 8001814:	f012 fdcc 	bl	80143b0 <siprintf>
 8001818:	4603      	mov	r3, r0
 800181a:	b29a      	uxth	r2, r3
 800181c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800181e:	4413      	add	r3, r2
 8001820:	84fb      	strh	r3, [r7, #38]	; 0x26
		}
		n += sprintf(&tab[n], "\r\n");
 8001822:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001824:	4a33      	ldr	r2, [pc, #204]	; (80018f4 <_Z11serialPrintv+0x4d8>)
 8001826:	4413      	add	r3, r2
 8001828:	4933      	ldr	r1, [pc, #204]	; (80018f8 <_Z11serialPrintv+0x4dc>)
 800182a:	4618      	mov	r0, r3
 800182c:	f012 fdc0 	bl	80143b0 <siprintf>
 8001830:	4603      	mov	r3, r0
 8001832:	b29a      	uxth	r2, r3
 8001834:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001836:	4413      	add	r3, r2
 8001838:	84fb      	strh	r3, [r7, #38]	; 0x26
	for(int i = 0; i < NUMBER_OF_CELLS; i++)
 800183a:	6a3b      	ldr	r3, [r7, #32]
 800183c:	3301      	adds	r3, #1
 800183e:	623b      	str	r3, [r7, #32]
 8001840:	6a3b      	ldr	r3, [r7, #32]
 8001842:	2b05      	cmp	r3, #5
 8001844:	dd94      	ble.n	8001770 <_Z11serialPrintv+0x354>
	}

	n += sprintf(&tab[n], "\r\n");
 8001846:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001848:	4a2a      	ldr	r2, [pc, #168]	; (80018f4 <_Z11serialPrintv+0x4d8>)
 800184a:	4413      	add	r3, r2
 800184c:	492a      	ldr	r1, [pc, #168]	; (80018f8 <_Z11serialPrintv+0x4dc>)
 800184e:	4618      	mov	r0, r3
 8001850:	f012 fdae 	bl	80143b0 <siprintf>
 8001854:	4603      	mov	r3, r0
 8001856:	b29a      	uxth	r2, r3
 8001858:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800185a:	4413      	add	r3, r2
 800185c:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "Output current:\t%3.2f\r\n", data.current.value);
 800185e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001860:	4a24      	ldr	r2, [pc, #144]	; (80018f4 <_Z11serialPrintv+0x4d8>)
 8001862:	189c      	adds	r4, r3, r2
 8001864:	4b25      	ldr	r3, [pc, #148]	; (80018fc <_Z11serialPrintv+0x4e0>)
 8001866:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 800186a:	4618      	mov	r0, r3
 800186c:	f7fe fe84 	bl	8000578 <__aeabi_f2d>
 8001870:	4602      	mov	r2, r0
 8001872:	460b      	mov	r3, r1
 8001874:	4927      	ldr	r1, [pc, #156]	; (8001914 <_Z11serialPrintv+0x4f8>)
 8001876:	4620      	mov	r0, r4
 8001878:	f012 fd9a 	bl	80143b0 <siprintf>
 800187c:	4603      	mov	r3, r0
 800187e:	b29a      	uxth	r2, r3
 8001880:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001882:	4413      	add	r3, r2
 8001884:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "\r\n");
 8001886:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001888:	4a1a      	ldr	r2, [pc, #104]	; (80018f4 <_Z11serialPrintv+0x4d8>)
 800188a:	4413      	add	r3, r2
 800188c:	491a      	ldr	r1, [pc, #104]	; (80018f8 <_Z11serialPrintv+0x4dc>)
 800188e:	4618      	mov	r0, r3
 8001890:	f012 fd8e 	bl	80143b0 <siprintf>
 8001894:	4603      	mov	r3, r0
 8001896:	b29a      	uxth	r2, r3
 8001898:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800189a:	4413      	add	r3, r2
 800189c:	84fb      	strh	r3, [r7, #38]	; 0x26

	n += sprintf(&tab[n], "EFUSE state:\t%d\r\n", HAL_GPIO_ReadPin(EFUSE_GPIO_Port, EFUSE_Pin));
 800189e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80018a0:	4a14      	ldr	r2, [pc, #80]	; (80018f4 <_Z11serialPrintv+0x4d8>)
 80018a2:	189c      	adds	r4, r3, r2
 80018a4:	2104      	movs	r1, #4
 80018a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018aa:	f006 fd4b 	bl	8008344 <HAL_GPIO_ReadPin>
 80018ae:	4603      	mov	r3, r0
 80018b0:	461a      	mov	r2, r3
 80018b2:	4919      	ldr	r1, [pc, #100]	; (8001918 <_Z11serialPrintv+0x4fc>)
 80018b4:	4620      	mov	r0, r4
 80018b6:	f012 fd7b 	bl	80143b0 <siprintf>
 80018ba:	4603      	mov	r3, r0
 80018bc:	b29a      	uxth	r2, r3
 80018be:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80018c0:	4413      	add	r3, r2
 80018c2:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "\r\n");
 80018c4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80018c6:	4a0b      	ldr	r2, [pc, #44]	; (80018f4 <_Z11serialPrintv+0x4d8>)
 80018c8:	4413      	add	r3, r2
 80018ca:	490b      	ldr	r1, [pc, #44]	; (80018f8 <_Z11serialPrintv+0x4dc>)
 80018cc:	4618      	mov	r0, r3
 80018ce:	f012 fd6f 	bl	80143b0 <siprintf>
 80018d2:	4603      	mov	r3, r0
 80018d4:	b29a      	uxth	r2, r3
 80018d6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80018d8:	4413      	add	r3, r2
 80018da:	84fb      	strh	r3, [r7, #38]	; 0x26

	CDC_Transmit_FS((uint8_t*)tab, n);
 80018dc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80018de:	4619      	mov	r1, r3
 80018e0:	4804      	ldr	r0, [pc, #16]	; (80018f4 <_Z11serialPrintv+0x4d8>)
 80018e2:	f011 f95f 	bl	8012ba4 <CDC_Transmit_FS>
}
 80018e6:	bf00      	nop
 80018e8:	372c      	adds	r7, #44	; 0x2c
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd90      	pop	{r4, r7, pc}
 80018ee:	bf00      	nop
 80018f0:	08016880 	.word	0x08016880
 80018f4:	200006c4 	.word	0x200006c4
 80018f8:	08016760 	.word	0x08016760
 80018fc:	20001478 	.word	0x20001478
 8001900:	461c4000 	.word	0x461c4000
 8001904:	0801689c 	.word	0x0801689c
 8001908:	080168a4 	.word	0x080168a4
 800190c:	080168b0 	.word	0x080168b0
 8001910:	080168bc 	.word	0x080168bc
 8001914:	080168c0 	.word	0x080168c0
 8001918:	080168d8 	.word	0x080168d8

0800191c <_ZN8PUTM_CAN14Can_tx_messageINS_11BMS_LV_mainEEC1ERKS1_RK19CAN_TxHeaderTypeDef>:
  constexpr Can_tx_message(const T &data,
 800191c:	b5b0      	push	{r4, r5, r7, lr}
 800191e:	b084      	sub	sp, #16
 8001920:	af00      	add	r7, sp, #0
 8001922:	60f8      	str	r0, [r7, #12]
 8001924:	60b9      	str	r1, [r7, #8]
 8001926:	607a      	str	r2, [r7, #4]
      : header{message_header} {
 8001928:	68fa      	ldr	r2, [r7, #12]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4614      	mov	r4, r2
 800192e:	461d      	mov	r5, r3
 8001930:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001932:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001934:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001938:	e884 0003 	stmia.w	r4, {r0, r1}
    std::memcpy(this->buff, &data, sizeof(T));
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	3318      	adds	r3, #24
 8001940:	2206      	movs	r2, #6
 8001942:	68b9      	ldr	r1, [r7, #8]
 8001944:	4618      	mov	r0, r3
 8001946:	f012 fe86 	bl	8014656 <memcpy>
  }
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	4618      	mov	r0, r3
 800194e:	3710      	adds	r7, #16
 8001950:	46bd      	mov	sp, r7
 8001952:	bdb0      	pop	{r4, r5, r7, pc}

08001954 <_ZN8PUTM_CAN14Can_tx_messageINS_18BMS_LV_temperatureEEC1ERKS1_RK19CAN_TxHeaderTypeDef>:
  constexpr Can_tx_message(const T &data,
 8001954:	b5b0      	push	{r4, r5, r7, lr}
 8001956:	b084      	sub	sp, #16
 8001958:	af00      	add	r7, sp, #0
 800195a:	60f8      	str	r0, [r7, #12]
 800195c:	60b9      	str	r1, [r7, #8]
 800195e:	607a      	str	r2, [r7, #4]
      : header{message_header} {
 8001960:	68fa      	ldr	r2, [r7, #12]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4614      	mov	r4, r2
 8001966:	461d      	mov	r5, r3
 8001968:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800196a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800196c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001970:	e884 0003 	stmia.w	r4, {r0, r1}
    std::memcpy(this->buff, &data, sizeof(T));
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	3318      	adds	r3, #24
 8001978:	2208      	movs	r2, #8
 800197a:	68b9      	ldr	r1, [r7, #8]
 800197c:	4618      	mov	r0, r3
 800197e:	f012 fe6a 	bl	8014656 <memcpy>
  }
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	4618      	mov	r0, r3
 8001986:	3710      	adds	r7, #16
 8001988:	46bd      	mov	sp, r7
 800198a:	bdb0      	pop	{r4, r5, r7, pc}

0800198c <_Z23start_comm_err_functionPv>:

void start_comm_err_function(void *argument){
 800198c:	b580      	push	{r7, lr}
 800198e:	b096      	sub	sp, #88	; 0x58
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]

	can_init();
 8001994:	f7ff fc5a 	bl	800124c <_Z8can_initv>
	for(;;){
		osDelay(20);
 8001998:	2014      	movs	r0, #20
 800199a:	f00e fb9f 	bl	80100dc <osDelay>

		error_conditions[0].value = data.current.value;
 800199e:	4b80      	ldr	r3, [pc, #512]	; (8001ba0 <_Z23start_comm_err_functionPv+0x214>)
 80019a0:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 80019a4:	4a7f      	ldr	r2, [pc, #508]	; (8001ba4 <_Z23start_comm_err_functionPv+0x218>)
 80019a6:	60d3      	str	r3, [r2, #12]
		error_conditions[1].value = (float)(data.voltages.highest_cell_voltage-data.voltages.lowest_cell_voltage);
 80019a8:	4b7d      	ldr	r3, [pc, #500]	; (8001ba0 <_Z23start_comm_err_functionPv+0x214>)
 80019aa:	8b9b      	ldrh	r3, [r3, #28]
 80019ac:	461a      	mov	r2, r3
 80019ae:	4b7c      	ldr	r3, [pc, #496]	; (8001ba0 <_Z23start_comm_err_functionPv+0x214>)
 80019b0:	8b5b      	ldrh	r3, [r3, #26]
 80019b2:	1ad3      	subs	r3, r2, r3
 80019b4:	ee07 3a90 	vmov	s15, r3
 80019b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019bc:	4b79      	ldr	r3, [pc, #484]	; (8001ba4 <_Z23start_comm_err_functionPv+0x218>)
 80019be:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		error_conditions[2].value = (float)data.temperatures.highest_temperature;
 80019c2:	4b77      	ldr	r3, [pc, #476]	; (8001ba0 <_Z23start_comm_err_functionPv+0x214>)
 80019c4:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80019c8:	ee07 3a90 	vmov	s15, r3
 80019cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019d0:	4b74      	ldr	r3, [pc, #464]	; (8001ba4 <_Z23start_comm_err_functionPv+0x218>)
 80019d2:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		error_conditions[3].value = (float)data.voltages.lowest_cell_voltage;
 80019d6:	4b72      	ldr	r3, [pc, #456]	; (8001ba0 <_Z23start_comm_err_functionPv+0x214>)
 80019d8:	8b5b      	ldrh	r3, [r3, #26]
 80019da:	ee07 3a90 	vmov	s15, r3
 80019de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019e2:	4b70      	ldr	r3, [pc, #448]	; (8001ba4 <_Z23start_comm_err_functionPv+0x218>)
 80019e4:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
		error_conditions[4].value = (float)data.voltages.highest_cell_voltage;
 80019e8:	4b6d      	ldr	r3, [pc, #436]	; (8001ba0 <_Z23start_comm_err_functionPv+0x214>)
 80019ea:	8b9b      	ldrh	r3, [r3, #28]
 80019ec:	ee07 3a90 	vmov	s15, r3
 80019f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019f4:	4b6b      	ldr	r3, [pc, #428]	; (8001ba4 <_Z23start_comm_err_functionPv+0x218>)
 80019f6:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
		error_conditions[5].value = (float)data.temperatures.highest_temperature;
 80019fa:	4b69      	ldr	r3, [pc, #420]	; (8001ba0 <_Z23start_comm_err_functionPv+0x214>)
 80019fc:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8001a00:	ee07 3a90 	vmov	s15, r3
 8001a04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a08:	4b66      	ldr	r3, [pc, #408]	; (8001ba4 <_Z23start_comm_err_functionPv+0x218>)
 8001a0a:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
		error_conditions[6].value = data.temperatures.lowest_temperature;
 8001a0e:	4b64      	ldr	r3, [pc, #400]	; (8001ba0 <_Z23start_comm_err_functionPv+0x214>)
 8001a10:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001a14:	ee07 3a90 	vmov	s15, r3
 8001a18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a1c:	4b61      	ldr	r3, [pc, #388]	; (8001ba4 <_Z23start_comm_err_functionPv+0x218>)
 8001a1e:	edc3 7a33 	vstr	s15, [r3, #204]	; 0xcc
		error_conditions[7].value = data.current.value;
 8001a22:	4b5f      	ldr	r3, [pc, #380]	; (8001ba0 <_Z23start_comm_err_functionPv+0x214>)
 8001a24:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 8001a28:	4a5e      	ldr	r2, [pc, #376]	; (8001ba4 <_Z23start_comm_err_functionPv+0x218>)
 8001a2a:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec

		PUTM_CAN::BMS_LV_main can_message_main{
			.voltage_sum{data.voltages.total_can},
 8001a2e:	4b5c      	ldr	r3, [pc, #368]	; (8001ba0 <_Z23start_comm_err_functionPv+0x214>)
 8001a30:	8b1b      	ldrh	r3, [r3, #24]
			.soc{data.soc.value_can},
			.temp_avg{data.temperatures.average},
			.current{(uint8_t)data.current.value},
			.device_state{static_cast<PUTM_CAN::BMS_LV_states>(data.acu_state)}
		};
 8001a32:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
			.soc{data.soc.value_can},
 8001a36:	4b5a      	ldr	r3, [pc, #360]	; (8001ba0 <_Z23start_comm_err_functionPv+0x214>)
 8001a38:	f893 328c 	ldrb.w	r3, [r3, #652]	; 0x28c
		};
 8001a3c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
			.temp_avg{data.temperatures.average},
 8001a40:	4b57      	ldr	r3, [pc, #348]	; (8001ba0 <_Z23start_comm_err_functionPv+0x214>)
 8001a42:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
		};
 8001a46:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			.current{(uint8_t)data.current.value},
 8001a4a:	4b55      	ldr	r3, [pc, #340]	; (8001ba0 <_Z23start_comm_err_functionPv+0x214>)
 8001a4c:	edd3 7a72 	vldr	s15, [r3, #456]	; 0x1c8
 8001a50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a54:	edc7 7a00 	vstr	s15, [r7]
 8001a58:	783b      	ldrb	r3, [r7, #0]
 8001a5a:	b2db      	uxtb	r3, r3
		};
 8001a5c:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
			.device_state{static_cast<PUTM_CAN::BMS_LV_states>(data.acu_state)}
 8001a60:	4b4f      	ldr	r3, [pc, #316]	; (8001ba0 <_Z23start_comm_err_functionPv+0x214>)
 8001a62:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
		};
 8001a66:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

		PUTM_CAN::BMS_LV_temperature can_message_temp{
 8001a6a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001a6e:	2200      	movs	r2, #0
 8001a70:	601a      	str	r2, [r3, #0]
 8001a72:	605a      	str	r2, [r3, #4]
			data.temperatures.values[0],
 8001a74:	4b4a      	ldr	r3, [pc, #296]	; (8001ba0 <_Z23start_comm_err_functionPv+0x214>)
 8001a76:	f893 3020 	ldrb.w	r3, [r3, #32]
			data.temperatures.values[3],
			data.temperatures.values[4],
			0,//data.temperatures.values[5],
			0,//data.temperatures.values[6],
			0//data.temperatures.values[7]
		};
 8001a7a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
			data.temperatures.values[1],
 8001a7e:	4b48      	ldr	r3, [pc, #288]	; (8001ba0 <_Z23start_comm_err_functionPv+0x214>)
 8001a80:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
		};
 8001a84:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
			data.temperatures.values[2],
 8001a88:	4b45      	ldr	r3, [pc, #276]	; (8001ba0 <_Z23start_comm_err_functionPv+0x214>)
 8001a8a:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
		};
 8001a8e:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
			data.temperatures.values[3],
 8001a92:	4b43      	ldr	r3, [pc, #268]	; (8001ba0 <_Z23start_comm_err_functionPv+0x214>)
 8001a94:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
		};
 8001a98:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
			data.temperatures.values[4],
 8001a9c:	4b40      	ldr	r3, [pc, #256]	; (8001ba0 <_Z23start_comm_err_functionPv+0x214>)
 8001a9e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
		};
 8001aa2:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c

		if(serial_tick < HAL_GetTick())
 8001aa6:	f003 fb83 	bl	80051b0 <HAL_GetTick>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	4b3e      	ldr	r3, [pc, #248]	; (8001ba8 <_Z23start_comm_err_functionPv+0x21c>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	bf8c      	ite	hi
 8001ab4:	2301      	movhi	r3, #1
 8001ab6:	2300      	movls	r3, #0
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d008      	beq.n	8001ad0 <_Z23start_comm_err_functionPv+0x144>
		{
			serialPrint();
 8001abe:	f7ff fcad 	bl	800141c <_Z11serialPrintv>
			serial_tick = HAL_GetTick() + 500; //0.5s
 8001ac2:	f003 fb75 	bl	80051b0 <HAL_GetTick>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001acc:	4a36      	ldr	r2, [pc, #216]	; (8001ba8 <_Z23start_comm_err_functionPv+0x21c>)
 8001ace:	6013      	str	r3, [r2, #0]
		}

		auto can_message_main_frame = PUTM_CAN::Can_tx_message<PUTM_CAN::BMS_LV_main>(can_message_main, PUTM_CAN::can_tx_header_BMS_LV_MAIN);
 8001ad0:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8001ad4:	f107 0308 	add.w	r3, r7, #8
 8001ad8:	4a34      	ldr	r2, [pc, #208]	; (8001bac <_Z23start_comm_err_functionPv+0x220>)
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7ff ff1e 	bl	800191c <_ZN8PUTM_CAN14Can_tx_messageINS_11BMS_LV_mainEEC1ERKS1_RK19CAN_TxHeaderTypeDef>
		auto can_message_temp_frame = PUTM_CAN::Can_tx_message<PUTM_CAN::BMS_LV_temperature>(can_message_temp, PUTM_CAN::can_tx_header_BMS_LV_TEMPERATURE);
 8001ae0:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001ae4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ae8:	4a31      	ldr	r2, [pc, #196]	; (8001bb0 <_Z23start_comm_err_functionPv+0x224>)
 8001aea:	4618      	mov	r0, r3
 8001aec:	f7ff ff32 	bl	8001954 <_ZN8PUTM_CAN14Can_tx_messageINS_18BMS_LV_temperatureEEC1ERKS1_RK19CAN_TxHeaderTypeDef>

		if(can_main_tick < HAL_GetTick())
 8001af0:	f003 fb5e 	bl	80051b0 <HAL_GetTick>
 8001af4:	4602      	mov	r2, r0
 8001af6:	4b2f      	ldr	r3, [pc, #188]	; (8001bb4 <_Z23start_comm_err_functionPv+0x228>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	429a      	cmp	r2, r3
 8001afc:	bf8c      	ite	hi
 8001afe:	2301      	movhi	r3, #1
 8001b00:	2300      	movls	r3, #0
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d00e      	beq.n	8001b26 <_Z23start_comm_err_functionPv+0x19a>
		{
			auto status_main = can_message_main_frame.send(hcan1);
 8001b08:	f107 0308 	add.w	r3, r7, #8
 8001b0c:	492a      	ldr	r1, [pc, #168]	; (8001bb8 <_Z23start_comm_err_functionPv+0x22c>)
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f000 f8d0 	bl	8001cb4 <_ZN8PUTM_CAN14Can_tx_messageINS_11BMS_LV_mainEE4sendER19__CAN_HandleTypeDef>
 8001b14:	4603      	mov	r3, r0
 8001b16:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			can_main_tick = HAL_GetTick() + 40; //0.04s
 8001b1a:	f003 fb49 	bl	80051b0 <HAL_GetTick>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	3328      	adds	r3, #40	; 0x28
 8001b22:	4a24      	ldr	r2, [pc, #144]	; (8001bb4 <_Z23start_comm_err_functionPv+0x228>)
 8001b24:	6013      	str	r3, [r2, #0]
		}

		if(can_temp_tick < HAL_GetTick())
 8001b26:	f003 fb43 	bl	80051b0 <HAL_GetTick>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	4b23      	ldr	r3, [pc, #140]	; (8001bbc <_Z23start_comm_err_functionPv+0x230>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	bf8c      	ite	hi
 8001b34:	2301      	movhi	r3, #1
 8001b36:	2300      	movls	r3, #0
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d00e      	beq.n	8001b5c <_Z23start_comm_err_functionPv+0x1d0>
		{
			auto status_temp = can_message_temp_frame.send(hcan1);
 8001b3e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b42:	491d      	ldr	r1, [pc, #116]	; (8001bb8 <_Z23start_comm_err_functionPv+0x22c>)
 8001b44:	4618      	mov	r0, r3
 8001b46:	f000 f8c9 	bl	8001cdc <_ZN8PUTM_CAN14Can_tx_messageINS_18BMS_LV_temperatureEE4sendER19__CAN_HandleTypeDef>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
			can_temp_tick = HAL_GetTick() + 200; //0.2s
 8001b50:	f003 fb2e 	bl	80051b0 <HAL_GetTick>
 8001b54:	4603      	mov	r3, r0
 8001b56:	33c8      	adds	r3, #200	; 0xc8
 8001b58:	4a18      	ldr	r2, [pc, #96]	; (8001bbc <_Z23start_comm_err_functionPv+0x230>)
 8001b5a:	6013      	str	r3, [r2, #0]
		}
		if(!data.charging.balance_on) //error check is on
 8001b5c:	4b10      	ldr	r3, [pc, #64]	; (8001ba0 <_Z23start_comm_err_functionPv+0x214>)
 8001b5e:	f893 3299 	ldrb.w	r3, [r3, #665]	; 0x299
 8001b62:	f083 0301 	eor.w	r3, r3, #1
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d004      	beq.n	8001b76 <_Z23start_comm_err_functionPv+0x1ea>
		{
			error_check();
 8001b6c:	f7ff fb98 	bl	80012a0 <_Z11error_checkv>
			error_execute();
 8001b70:	f7ff fc02 	bl	8001378 <_Z13error_executev>
 8001b74:	e710      	b.n	8001998 <_Z23start_comm_err_functionPv+0xc>
		} 
		else //error check is off
		{
			if(HAL_GPIO_ReadPin(EFUSE_GPIO_Port, EFUSE_Pin) == GPIO_PIN_RESET)
 8001b76:	2104      	movs	r1, #4
 8001b78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b7c:	f006 fbe2 	bl	8008344 <HAL_GPIO_ReadPin>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	bf0c      	ite	eq
 8001b86:	2301      	moveq	r3, #1
 8001b88:	2300      	movne	r3, #0
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	f43f af03 	beq.w	8001998 <_Z23start_comm_err_functionPv+0xc>
			{
				HAL_GPIO_WritePin(EFUSE_GPIO_Port, EFUSE_Pin, GPIO_PIN_SET);
 8001b92:	2201      	movs	r2, #1
 8001b94:	2104      	movs	r1, #4
 8001b96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b9a:	f006 fbeb 	bl	8008374 <HAL_GPIO_WritePin>
			}
		}
	}
 8001b9e:	e6fb      	b.n	8001998 <_Z23start_comm_err_functionPv+0xc>
 8001ba0:	20001478 	.word	0x20001478
 8001ba4:	200005c4 	.word	0x200005c4
 8001ba8:	200005b8 	.word	0x200005b8
 8001bac:	08016994 	.word	0x08016994
 8001bb0:	080169ac 	.word	0x080169ac
 8001bb4:	200005bc 	.word	0x200005bc
 8001bb8:	20001aac 	.word	0x20001aac
 8001bbc:	200005c0 	.word	0x200005c0

08001bc0 <_ZNSt5arrayIPN8PUTM_CAN11Device_baseELj33EE5beginEv>:
      noexcept(_AT_Type::_Is_nothrow_swappable::value)
      { std::swap_ranges(begin(), end(), __other.begin()); }

      // Iterators.
      _GLIBCXX17_CONSTEXPR iterator
      begin() noexcept
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	f000 f89b 	bl	8001d04 <_ZNSt5arrayIPN8PUTM_CAN11Device_baseELj33EE4dataEv>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3708      	adds	r7, #8
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}

08001bd8 <_ZNSt5arrayIPN8PUTM_CAN11Device_baseELj33EE3endEv>:
      _GLIBCXX17_CONSTEXPR const_iterator
      begin() const noexcept
      { return const_iterator(data()); }

      _GLIBCXX17_CONSTEXPR iterator
      end() noexcept
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	f000 f88f 	bl	8001d04 <_ZNSt5arrayIPN8PUTM_CAN11Device_baseELj33EE4dataEv>
 8001be6:	4603      	mov	r3, r0
 8001be8:	3384      	adds	r3, #132	; 0x84
 8001bea:	4618      	mov	r0, r3
 8001bec:	3708      	adds	r7, #8
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}

08001bf2 <_ZN3etl7ivectorI15Error_conditionED1Ev>:
  /// The base class for specifically sized vectors.
  /// Can be used as a reference type for all vectors containing a specific type.
  ///\ingroup vector
  //***************************************************************************
  template <typename T>
  class ivector : public etl::vector_base
 8001bf2:	b580      	push	{r7, lr}
 8001bf4:	b082      	sub	sp, #8
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f7ff fa8c 	bl	800111a <_ZN3etl11vector_baseD1Ev>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4618      	mov	r0, r3
 8001c06:	3708      	adds	r7, #8
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}

08001c0c <_ZN3etl6vectorI15Error_conditionLj8EEC1Ev>:
    static const size_t MAX_SIZE = MAX_SIZE_;

    //*************************************************************************
    /// Constructor.
    //*************************************************************************
    vector()
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
      : etl::ivector<T>(reinterpret_cast<T*>(&buffer), MAX_SIZE)
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	330c      	adds	r3, #12
 8001c1a:	2208      	movs	r2, #8
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	f000 f87e 	bl	8001d1e <_ZN3etl7ivectorI15Error_conditionEC1EPS1_j>
    {
      this->initialise();
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4618      	mov	r0, r3
 8001c26:	f000 f890 	bl	8001d4a <_ZN3etl7ivectorI15Error_conditionE10initialiseEv>
    }
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3708      	adds	r7, #8
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}

08001c34 <_ZN3etl6vectorI15Error_conditionLj8EED1Ev>:
#endif

    //*************************************************************************
    /// Destructor.
    //*************************************************************************
    ~vector()
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
    {
      this->clear();
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f000 f897 	bl	8001d72 <_ZN3etl7ivectorI15Error_conditionE5clearEv>
    }
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7ff ffd3 	bl	8001bf2 <_ZN3etl7ivectorI15Error_conditionED1Ev>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3708      	adds	r7, #8
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}

08001c56 <_ZN3etl7ivectorI15Error_conditionE12emplace_backIJRS1_EEEvDpOT_>:
    void emplace_back(Args && ... args)
 8001c56:	b590      	push	{r4, r7, lr}
 8001c58:	b083      	sub	sp, #12
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	6078      	str	r0, [r7, #4]
 8001c5e:	6039      	str	r1, [r7, #0]
      ::new (p_end) T(etl::forward<Args>(args)...);
 8001c60:	6838      	ldr	r0, [r7, #0]
 8001c62:	f000 f891 	bl	8001d88 <_ZN3etl7forwardIR15Error_conditionEEOT_RNS_16remove_referenceIS3_E4typeE>
 8001c66:	4603      	mov	r3, r0
 8001c68:	681c      	ldr	r4, [r3, #0]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	4619      	mov	r1, r3
 8001c70:	2004      	movs	r0, #4
 8001c72:	f7ff fa37 	bl	80010e4 <_ZnwjPv>
 8001c76:	4603      	mov	r3, r0
 8001c78:	601c      	str	r4, [r3, #0]
      ++p_end;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	1d1a      	adds	r2, r3, #4
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	609a      	str	r2, [r3, #8]
    }
 8001c84:	bf00      	nop
 8001c86:	370c      	adds	r7, #12
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd90      	pop	{r4, r7, pc}

08001c8c <_ZNK3etl7ivectorI15Error_conditionE5emptyEv>:
    bool empty() const
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
      return (p_end == p_buffer);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	689a      	ldr	r2, [r3, #8]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	bf0c      	ite	eq
 8001ca0:	2301      	moveq	r3, #1
 8001ca2:	2300      	movne	r3, #0
 8001ca4:	b2db      	uxtb	r3, r3
    }
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	370c      	adds	r7, #12
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
	...

08001cb4 <_ZN8PUTM_CAN14Can_tx_messageINS_11BMS_LV_mainEE4sendER19__CAN_HandleTypeDef>:
  HAL_StatusTypeDef send(CAN_HandleTypeDef &hcan) {
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	6039      	str	r1, [r7, #0]
    return HAL_CAN_AddTxMessage(&hcan, &this->header, this->buff, &TxMailbox);
 8001cbe:	6879      	ldr	r1, [r7, #4]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	f103 0218 	add.w	r2, r3, #24
 8001cc6:	4b04      	ldr	r3, [pc, #16]	; (8001cd8 <_ZN8PUTM_CAN14Can_tx_messageINS_11BMS_LV_mainEE4sendER19__CAN_HandleTypeDef+0x24>)
 8001cc8:	6838      	ldr	r0, [r7, #0]
 8001cca:	f005 fa1e 	bl	800710a <HAL_CAN_AddTxMessage>
 8001cce:	4603      	mov	r3, r0
  }
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3708      	adds	r7, #8
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	20001470 	.word	0x20001470

08001cdc <_ZN8PUTM_CAN14Can_tx_messageINS_18BMS_LV_temperatureEE4sendER19__CAN_HandleTypeDef>:
  HAL_StatusTypeDef send(CAN_HandleTypeDef &hcan) {
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	6039      	str	r1, [r7, #0]
    return HAL_CAN_AddTxMessage(&hcan, &this->header, this->buff, &TxMailbox);
 8001ce6:	6879      	ldr	r1, [r7, #4]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	f103 0218 	add.w	r2, r3, #24
 8001cee:	4b04      	ldr	r3, [pc, #16]	; (8001d00 <_ZN8PUTM_CAN14Can_tx_messageINS_18BMS_LV_temperatureEE4sendER19__CAN_HandleTypeDef+0x24>)
 8001cf0:	6838      	ldr	r0, [r7, #0]
 8001cf2:	f005 fa0a 	bl	800710a <HAL_CAN_AddTxMessage>
 8001cf6:	4603      	mov	r3, r0
  }
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3708      	adds	r7, #8
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	20001474 	.word	0x20001474

08001d04 <_ZNSt5arrayIPN8PUTM_CAN11Device_baseELj33EE4dataEv>:
	return _Nm ? _AT_Type::_S_ref(_M_elems, _Nm - 1)
 	           : _AT_Type::_S_ref(_M_elems, 0);
      }

      _GLIBCXX17_CONSTEXPR pointer
      data() noexcept
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f000 f845 	bl	8001d9e <_ZNSt14__array_traitsIPN8PUTM_CAN11Device_baseELj33EE6_S_ptrERA33_KS2_>
 8001d14:	4603      	mov	r3, r0
 8001d16:	4618      	mov	r0, r3
 8001d18:	3708      	adds	r7, #8
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}

08001d1e <_ZN3etl7ivectorI15Error_conditionEC1EPS1_j>:
    ivector(T* p_buffer_, size_t MAX_SIZE)
 8001d1e:	b580      	push	{r7, lr}
 8001d20:	b084      	sub	sp, #16
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	60f8      	str	r0, [r7, #12]
 8001d26:	60b9      	str	r1, [r7, #8]
 8001d28:	607a      	str	r2, [r7, #4]
      , p_end(p_buffer_)
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	6879      	ldr	r1, [r7, #4]
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7ff f9e4 	bl	80010fc <_ZN3etl11vector_baseC1Ej>
      , p_buffer(p_buffer_)
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	68ba      	ldr	r2, [r7, #8]
 8001d38:	605a      	str	r2, [r3, #4]
      , p_end(p_buffer_)
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	68ba      	ldr	r2, [r7, #8]
 8001d3e:	609a      	str	r2, [r3, #8]
    }
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	4618      	mov	r0, r3
 8001d44:	3710      	adds	r7, #16
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}

08001d4a <_ZN3etl7ivectorI15Error_conditionE10initialiseEv>:
    void initialise()
 8001d4a:	b580      	push	{r7, lr}
 8001d4c:	b082      	sub	sp, #8
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	6078      	str	r0, [r7, #4]
      etl::destroy(p_buffer, p_end);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	685a      	ldr	r2, [r3, #4]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	4610      	mov	r0, r2
 8001d5e:	f000 f829 	bl	8001db4 <_ZN3etl7destroyIP15Error_conditionEEvT_S3_>
      p_end = p_buffer;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	685a      	ldr	r2, [r3, #4]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	609a      	str	r2, [r3, #8]
    }
 8001d6a:	bf00      	nop
 8001d6c:	3708      	adds	r7, #8
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}

08001d72 <_ZN3etl7ivectorI15Error_conditionE5clearEv>:
    void clear()
 8001d72:	b580      	push	{r7, lr}
 8001d74:	b082      	sub	sp, #8
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	6078      	str	r0, [r7, #4]
      initialise();
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f7ff ffe5 	bl	8001d4a <_ZN3etl7ivectorI15Error_conditionE10initialiseEv>
    }
 8001d80:	bf00      	nop
 8001d82:	3708      	adds	r7, #8
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}

08001d88 <_ZN3etl7forwardIR15Error_conditionEEOT_RNS_16remove_referenceIS3_E4typeE>:
    return static_cast<typename etl::remove_reference<T>::type&&>(t);
  }

  //******************************************************************************
  template <typename T>
  constexpr T&& forward(typename etl::remove_reference<T>::type& t) ETL_NOEXCEPT
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  {
    return static_cast<T&&>(t);
 8001d90:	687b      	ldr	r3, [r7, #4]
  }
 8001d92:	4618      	mov	r0, r3
 8001d94:	370c      	adds	r7, #12
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr

08001d9e <_ZNSt14__array_traitsIPN8PUTM_CAN11Device_baseELj33EE6_S_ptrERA33_KS2_>:
      _S_ptr(const _Type& __t) noexcept
 8001d9e:	b480      	push	{r7}
 8001da0:	b083      	sub	sp, #12
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4618      	mov	r0, r3
 8001daa:	370c      	adds	r7, #12
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr

08001db4 <_ZN3etl7destroyIP15Error_conditionEEvT_S3_>:
  /// Destroys a range of items.
  /// https://en.cppreference.com/w/cpp/memory/destroy
  ///\ingroup memory
  //*****************************************************************************
  template <typename TIterator>
  void destroy(TIterator i_begin, TIterator i_end)
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	6039      	str	r1, [r7, #0]
  {
    std::destroy(i_begin, i_end);
 8001dbe:	6839      	ldr	r1, [r7, #0]
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	f000 f804 	bl	8001dce <_ZSt7destroyIP15Error_conditionEvT_S2_>
  }
 8001dc6:	bf00      	nop
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}

08001dce <_ZSt7destroyIP15Error_conditionEvT_S2_>:
    }

#if __cplusplus >= 201703L
  template <typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    destroy(_ForwardIterator __first, _ForwardIterator __last)
 8001dce:	b580      	push	{r7, lr}
 8001dd0:	b082      	sub	sp, #8
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	6078      	str	r0, [r7, #4]
 8001dd6:	6039      	str	r1, [r7, #0]
    {
      std::_Destroy(__first, __last);
 8001dd8:	6839      	ldr	r1, [r7, #0]
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f000 f804 	bl	8001de8 <_ZSt8_DestroyIP15Error_conditionEvT_S2_>
    }
 8001de0:	bf00      	nop
 8001de2:	3708      	adds	r7, #8
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}

08001de8 <_ZSt8_DestroyIP15Error_conditionEvT_S2_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 8001df2:	f7ff f96f 	bl	80010d4 <_ZSt21is_constant_evaluatedv>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d004      	beq.n	8001e06 <_ZSt8_DestroyIP15Error_conditionEvT_S2_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 8001dfc:	6839      	ldr	r1, [r7, #0]
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f000 f808 	bl	8001e14 <_ZNSt12_Destroy_auxILb0EE9__destroyIP15Error_conditionEEvT_S4_>
 8001e04:	e003      	b.n	8001e0e <_ZSt8_DestroyIP15Error_conditionEvT_S2_+0x26>
	__destroy(__first, __last);
 8001e06:	6839      	ldr	r1, [r7, #0]
 8001e08:	6878      	ldr	r0, [r7, #4]
 8001e0a:	f000 f81c 	bl	8001e46 <_ZNSt12_Destroy_auxILb1EE9__destroyIP15Error_conditionEEvT_S4_>
    }
 8001e0e:	3708      	adds	r7, #8
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}

08001e14 <_ZNSt12_Destroy_auxILb0EE9__destroyIP15Error_conditionEEvT_S4_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 8001e1e:	e009      	b.n	8001e34 <_ZNSt12_Destroy_auxILb0EE9__destroyIP15Error_conditionEEvT_S4_+0x20>
	    std::_Destroy(std::__addressof(*__first));
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	f000 f81b 	bl	8001e5c <_ZSt11__addressofI15Error_conditionEPT_RS1_>
 8001e26:	4603      	mov	r3, r0
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f000 f822 	bl	8001e72 <_ZSt8_DestroyI15Error_conditionEvPT_>
	  for (; __first != __last; ++__first)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	3304      	adds	r3, #4
 8001e32:	607b      	str	r3, [r7, #4]
 8001e34:	687a      	ldr	r2, [r7, #4]
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d1f1      	bne.n	8001e20 <_ZNSt12_Destroy_auxILb0EE9__destroyIP15Error_conditionEEvT_S4_+0xc>
	}
 8001e3c:	bf00      	nop
 8001e3e:	bf00      	nop
 8001e40:	3708      	adds	r7, #8
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}

08001e46 <_ZNSt12_Destroy_auxILb1EE9__destroyIP15Error_conditionEEvT_S4_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8001e46:	b480      	push	{r7}
 8001e48:	b083      	sub	sp, #12
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	6078      	str	r0, [r7, #4]
 8001e4e:	6039      	str	r1, [r7, #0]
 8001e50:	bf00      	nop
 8001e52:	370c      	adds	r7, #12
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr

08001e5c <_ZSt11__addressofI15Error_conditionEPT_RS1_>:
   *  @brief Same as C++11 std::addressof
   *  @ingroup utilities
   */
  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR _Tp*
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	4618      	mov	r0, r3
 8001e68:	370c      	adds	r7, #12
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr

08001e72 <_ZSt8_DestroyI15Error_conditionEvPT_>:
    _Destroy(_Tp* __pointer)
 8001e72:	b580      	push	{r7, lr}
 8001e74:	b082      	sub	sp, #8
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f000 f804 	bl	8001e88 <_ZSt10destroy_atI15Error_conditionEvPT_>
    }
 8001e80:	bf00      	nop
 8001e82:	3708      	adds	r7, #8
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}

08001e88 <_ZSt10destroy_atI15Error_conditionEvPT_>:
    destroy_at(_Tp* __location)
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
    }
 8001e90:	bf00      	nop
 8001e92:	370c      	adds	r7, #12
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr

08001e9c <_Z41__static_initialization_and_destruction_0ii>:
}
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	6039      	str	r1, [r7, #0]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	f040 80c6 	bne.w	800203a <_Z41__static_initialization_and_destruction_0ii+0x19e>
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	f040 80c0 	bne.w	800203a <_Z41__static_initialization_and_destruction_0ii+0x19e>
};
 8001eba:	4b63      	ldr	r3, [pc, #396]	; (8002048 <_Z41__static_initialization_and_destruction_0ii+0x1ac>)
 8001ebc:	2207      	movs	r2, #7
 8001ebe:	601a      	str	r2, [r3, #0]
 8001ec0:	4a62      	ldr	r2, [pc, #392]	; (800204c <_Z41__static_initialization_and_destruction_0ii+0x1b0>)
 8001ec2:	605a      	str	r2, [r3, #4]
 8001ec4:	4a62      	ldr	r2, [pc, #392]	; (8002050 <_Z41__static_initialization_and_destruction_0ii+0x1b4>)
 8001ec6:	609a      	str	r2, [r3, #8]
		{Error_condition::NEUTRAL_CURRENT_CAR,-0.3,0.3,data.current.value,TIME_TO_SLEEP,8}, //to check //acu_state 0 or 8?
 8001ec8:	4a62      	ldr	r2, [pc, #392]	; (8002054 <_Z41__static_initialization_and_destruction_0ii+0x1b8>)
 8001eca:	f8d2 21c8 	ldr.w	r2, [r2, #456]	; 0x1c8
};
 8001ece:	60da      	str	r2, [r3, #12]
 8001ed0:	4a61      	ldr	r2, [pc, #388]	; (8002058 <_Z41__static_initialization_and_destruction_0ii+0x1bc>)
 8001ed2:	611a      	str	r2, [r3, #16]
 8001ed4:	2208      	movs	r2, #8
 8001ed6:	751a      	strb	r2, [r3, #20]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	619a      	str	r2, [r3, #24]
 8001edc:	2200      	movs	r2, #0
 8001ede:	771a      	strb	r2, [r3, #28]
 8001ee0:	3320      	adds	r3, #32
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	601a      	str	r2, [r3, #0]
 8001ee6:	4a5d      	ldr	r2, [pc, #372]	; (800205c <_Z41__static_initialization_and_destruction_0ii+0x1c0>)
 8001ee8:	605a      	str	r2, [r3, #4]
 8001eea:	4a5d      	ldr	r2, [pc, #372]	; (8002060 <_Z41__static_initialization_and_destruction_0ii+0x1c4>)
 8001eec:	609a      	str	r2, [r3, #8]
		{Error_condition::UNBALANCE,2000,50000,(float)(data.voltages.highest_cell_voltage-data.voltages.lowest_cell_voltage),ERROR_TIME,2},
 8001eee:	4a59      	ldr	r2, [pc, #356]	; (8002054 <_Z41__static_initialization_and_destruction_0ii+0x1b8>)
 8001ef0:	8b92      	ldrh	r2, [r2, #28]
 8001ef2:	4611      	mov	r1, r2
 8001ef4:	4a57      	ldr	r2, [pc, #348]	; (8002054 <_Z41__static_initialization_and_destruction_0ii+0x1b8>)
 8001ef6:	8b52      	ldrh	r2, [r2, #26]
 8001ef8:	1a8a      	subs	r2, r1, r2
 8001efa:	ee07 2a90 	vmov	s15, r2
 8001efe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
};
 8001f02:	edc3 7a03 	vstr	s15, [r3, #12]
 8001f06:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001f0a:	611a      	str	r2, [r3, #16]
 8001f0c:	2202      	movs	r2, #2
 8001f0e:	751a      	strb	r2, [r3, #20]
 8001f10:	2200      	movs	r2, #0
 8001f12:	619a      	str	r2, [r3, #24]
 8001f14:	2200      	movs	r2, #0
 8001f16:	771a      	strb	r2, [r3, #28]
 8001f18:	3320      	adds	r3, #32
 8001f1a:	2203      	movs	r2, #3
 8001f1c:	601a      	str	r2, [r3, #0]
 8001f1e:	4a51      	ldr	r2, [pc, #324]	; (8002064 <_Z41__static_initialization_and_destruction_0ii+0x1c8>)
 8001f20:	605a      	str	r2, [r3, #4]
 8001f22:	4a51      	ldr	r2, [pc, #324]	; (8002068 <_Z41__static_initialization_and_destruction_0ii+0x1cc>)
 8001f24:	609a      	str	r2, [r3, #8]
		{Error_condition::TEMPERATURE_WARNING,48,55,(float)data.temperatures.highest_temperature,ERROR_TIME_TEMPERATURES,3},
 8001f26:	4a4b      	ldr	r2, [pc, #300]	; (8002054 <_Z41__static_initialization_and_destruction_0ii+0x1b8>)
 8001f28:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
 8001f2c:	ee07 2a90 	vmov	s15, r2
 8001f30:	eef8 7a67 	vcvt.f32.u32	s15, s15
};
 8001f34:	edc3 7a03 	vstr	s15, [r3, #12]
 8001f38:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f3c:	611a      	str	r2, [r3, #16]
 8001f3e:	2203      	movs	r2, #3
 8001f40:	751a      	strb	r2, [r3, #20]
 8001f42:	2200      	movs	r2, #0
 8001f44:	619a      	str	r2, [r3, #24]
 8001f46:	2200      	movs	r2, #0
 8001f48:	771a      	strb	r2, [r3, #28]
 8001f4a:	3320      	adds	r3, #32
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	601a      	str	r2, [r3, #0]
 8001f50:	f04f 0200 	mov.w	r2, #0
 8001f54:	605a      	str	r2, [r3, #4]
 8001f56:	4a45      	ldr	r2, [pc, #276]	; (800206c <_Z41__static_initialization_and_destruction_0ii+0x1d0>)
 8001f58:	609a      	str	r2, [r3, #8]
		{Error_condition::VOLTAGE_LOW,0,30000,(float)data.voltages.lowest_cell_voltage,ERROR_TIME,4},
 8001f5a:	4a3e      	ldr	r2, [pc, #248]	; (8002054 <_Z41__static_initialization_and_destruction_0ii+0x1b8>)
 8001f5c:	8b52      	ldrh	r2, [r2, #26]
 8001f5e:	ee07 2a90 	vmov	s15, r2
 8001f62:	eef8 7a67 	vcvt.f32.u32	s15, s15
};
 8001f66:	edc3 7a03 	vstr	s15, [r3, #12]
 8001f6a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001f6e:	611a      	str	r2, [r3, #16]
 8001f70:	2204      	movs	r2, #4
 8001f72:	751a      	strb	r2, [r3, #20]
 8001f74:	2200      	movs	r2, #0
 8001f76:	619a      	str	r2, [r3, #24]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	771a      	strb	r2, [r3, #28]
 8001f7c:	3320      	adds	r3, #32
 8001f7e:	2202      	movs	r2, #2
 8001f80:	601a      	str	r2, [r3, #0]
 8001f82:	4a3b      	ldr	r2, [pc, #236]	; (8002070 <_Z41__static_initialization_and_destruction_0ii+0x1d4>)
 8001f84:	605a      	str	r2, [r3, #4]
 8001f86:	4a3b      	ldr	r2, [pc, #236]	; (8002074 <_Z41__static_initialization_and_destruction_0ii+0x1d8>)
 8001f88:	609a      	str	r2, [r3, #8]
		{Error_condition::VOLTAGE_HIGH,42200,500000,(float)data.voltages.highest_cell_voltage,ERROR_TIME,5},
 8001f8a:	4a32      	ldr	r2, [pc, #200]	; (8002054 <_Z41__static_initialization_and_destruction_0ii+0x1b8>)
 8001f8c:	8b92      	ldrh	r2, [r2, #28]
 8001f8e:	ee07 2a90 	vmov	s15, r2
 8001f92:	eef8 7a67 	vcvt.f32.u32	s15, s15
};
 8001f96:	edc3 7a03 	vstr	s15, [r3, #12]
 8001f9a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001f9e:	611a      	str	r2, [r3, #16]
 8001fa0:	2205      	movs	r2, #5
 8001fa2:	751a      	strb	r2, [r3, #20]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	619a      	str	r2, [r3, #24]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	771a      	strb	r2, [r3, #28]
 8001fac:	3320      	adds	r3, #32
 8001fae:	2204      	movs	r2, #4
 8001fb0:	601a      	str	r2, [r3, #0]
 8001fb2:	4a2d      	ldr	r2, [pc, #180]	; (8002068 <_Z41__static_initialization_and_destruction_0ii+0x1cc>)
 8001fb4:	605a      	str	r2, [r3, #4]
 8001fb6:	4a30      	ldr	r2, [pc, #192]	; (8002078 <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 8001fb8:	609a      	str	r2, [r3, #8]
		{Error_condition::TEMPERATURE_HIGH,55,120,(float)data.temperatures.highest_temperature,ERROR_TIME_TEMPERATURES,6},
 8001fba:	4a26      	ldr	r2, [pc, #152]	; (8002054 <_Z41__static_initialization_and_destruction_0ii+0x1b8>)
 8001fbc:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
 8001fc0:	ee07 2a90 	vmov	s15, r2
 8001fc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
};
 8001fc8:	edc3 7a03 	vstr	s15, [r3, #12]
 8001fcc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001fd0:	611a      	str	r2, [r3, #16]
 8001fd2:	2206      	movs	r2, #6
 8001fd4:	751a      	strb	r2, [r3, #20]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	619a      	str	r2, [r3, #24]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	771a      	strb	r2, [r3, #28]
 8001fde:	3320      	adds	r3, #32
 8001fe0:	2205      	movs	r2, #5
 8001fe2:	601a      	str	r2, [r3, #0]
 8001fe4:	4a25      	ldr	r2, [pc, #148]	; (800207c <_Z41__static_initialization_and_destruction_0ii+0x1e0>)
 8001fe6:	605a      	str	r2, [r3, #4]
 8001fe8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001fec:	609a      	str	r2, [r3, #8]
		{Error_condition::TEMPERATURE_LOST,-1,1,data.temperatures.lowest_temperature,ERROR_TIME_TEMPERATURES,6},
 8001fee:	4a19      	ldr	r2, [pc, #100]	; (8002054 <_Z41__static_initialization_and_destruction_0ii+0x1b8>)
 8001ff0:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
};
 8001ff4:	ee07 2a90 	vmov	s15, r2
 8001ff8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ffc:	edc3 7a03 	vstr	s15, [r3, #12]
 8002000:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002004:	611a      	str	r2, [r3, #16]
 8002006:	2206      	movs	r2, #6
 8002008:	751a      	strb	r2, [r3, #20]
 800200a:	2200      	movs	r2, #0
 800200c:	619a      	str	r2, [r3, #24]
 800200e:	2200      	movs	r2, #0
 8002010:	771a      	strb	r2, [r3, #28]
 8002012:	3320      	adds	r3, #32
 8002014:	2206      	movs	r2, #6
 8002016:	601a      	str	r2, [r3, #0]
 8002018:	4a19      	ldr	r2, [pc, #100]	; (8002080 <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 800201a:	605a      	str	r2, [r3, #4]
 800201c:	4a19      	ldr	r2, [pc, #100]	; (8002084 <_Z41__static_initialization_and_destruction_0ii+0x1e8>)
 800201e:	609a      	str	r2, [r3, #8]
		{Error_condition::CURRENT_HIGH,20,100,data.current.value,ERROR_TIME,7}
 8002020:	4a0c      	ldr	r2, [pc, #48]	; (8002054 <_Z41__static_initialization_and_destruction_0ii+0x1b8>)
 8002022:	f8d2 21c8 	ldr.w	r2, [r2, #456]	; 0x1c8
};
 8002026:	60da      	str	r2, [r3, #12]
 8002028:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800202c:	611a      	str	r2, [r3, #16]
 800202e:	2207      	movs	r2, #7
 8002030:	751a      	strb	r2, [r3, #20]
 8002032:	2200      	movs	r2, #0
 8002034:	619a      	str	r2, [r3, #24]
 8002036:	2200      	movs	r2, #0
 8002038:	771a      	strb	r2, [r3, #28]
}
 800203a:	bf00      	nop
 800203c:	370c      	adds	r7, #12
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop
 8002048:	200005c4 	.word	0x200005c4
 800204c:	be99999a 	.word	0xbe99999a
 8002050:	3e99999a 	.word	0x3e99999a
 8002054:	20001478 	.word	0x20001478
 8002058:	00124f80 	.word	0x00124f80
 800205c:	44fa0000 	.word	0x44fa0000
 8002060:	47435000 	.word	0x47435000
 8002064:	42400000 	.word	0x42400000
 8002068:	425c0000 	.word	0x425c0000
 800206c:	46ea6000 	.word	0x46ea6000
 8002070:	4724d800 	.word	0x4724d800
 8002074:	48f42400 	.word	0x48f42400
 8002078:	42f00000 	.word	0x42f00000
 800207c:	bf800000 	.word	0xbf800000
 8002080:	41a00000 	.word	0x41a00000
 8002084:	42c80000 	.word	0x42c80000

08002088 <_ZN8PUTM_CAN6DeviceINS_17YawProbe_air_flowEE8set_dataERKNS_14Can_rx_messageE>:
        static_assert(sizeof(Device_data_type) <= 8);
      };

  Device_data_type data{};

  void set_data(const Can_rx_message &m) override {
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
 8002090:	6039      	str	r1, [r7, #0]
    new_data = true;
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	7993      	ldrb	r3, [r2, #6]
 8002096:	f043 0301 	orr.w	r3, r3, #1
 800209a:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	1dd8      	adds	r0, r3, #7
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	331c      	adds	r3, #28
 80020a4:	2203      	movs	r2, #3
 80020a6:	4619      	mov	r1, r3
 80020a8:	f012 fad5 	bl	8014656 <memcpy>
  }
 80020ac:	bf00      	nop
 80020ae:	3708      	adds	r7, #8
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}

080020b4 <_ZN8PUTM_CAN6DeviceINS_14WheelTemp_mainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
 80020bc:	6039      	str	r1, [r7, #0]
    new_data = true;
 80020be:	687a      	ldr	r2, [r7, #4]
 80020c0:	7993      	ldrb	r3, [r2, #6]
 80020c2:	f043 0301 	orr.w	r3, r3, #1
 80020c6:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	3307      	adds	r3, #7
 80020cc:	683a      	ldr	r2, [r7, #0]
 80020ce:	321c      	adds	r2, #28
 80020d0:	8812      	ldrh	r2, [r2, #0]
 80020d2:	b292      	uxth	r2, r2
 80020d4:	801a      	strh	r2, [r3, #0]
  }
 80020d6:	bf00      	nop
 80020d8:	370c      	adds	r7, #12
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr

080020e2 <_ZN8PUTM_CAN6DeviceINS_14Telemetry_MainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80020e2:	b480      	push	{r7}
 80020e4:	b083      	sub	sp, #12
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	6078      	str	r0, [r7, #4]
 80020ea:	6039      	str	r1, [r7, #0]
    new_data = true;
 80020ec:	687a      	ldr	r2, [r7, #4]
 80020ee:	7993      	ldrb	r3, [r2, #6]
 80020f0:	f043 0301 	orr.w	r3, r3, #1
 80020f4:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	3307      	adds	r3, #7
 80020fa:	683a      	ldr	r2, [r7, #0]
 80020fc:	321c      	adds	r2, #28
 80020fe:	6812      	ldr	r2, [r2, #0]
 8002100:	601a      	str	r2, [r3, #0]
  }
 8002102:	bf00      	nop
 8002104:	370c      	adds	r7, #12
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr

0800210e <_ZN8PUTM_CAN6DeviceINS_11TC_imu_gyroEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 800210e:	b580      	push	{r7, lr}
 8002110:	b082      	sub	sp, #8
 8002112:	af00      	add	r7, sp, #0
 8002114:	6078      	str	r0, [r7, #4]
 8002116:	6039      	str	r1, [r7, #0]
    new_data = true;
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	7993      	ldrb	r3, [r2, #6]
 800211c:	f043 0301 	orr.w	r3, r3, #1
 8002120:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	1dd8      	adds	r0, r3, #7
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	331c      	adds	r3, #28
 800212a:	2206      	movs	r2, #6
 800212c:	4619      	mov	r1, r3
 800212e:	f012 fa92 	bl	8014656 <memcpy>
  }
 8002132:	bf00      	nop
 8002134:	3708      	adds	r7, #8
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}

0800213a <_ZN8PUTM_CAN6DeviceINS_10TC_imu_accEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 800213a:	b580      	push	{r7, lr}
 800213c:	b082      	sub	sp, #8
 800213e:	af00      	add	r7, sp, #0
 8002140:	6078      	str	r0, [r7, #4]
 8002142:	6039      	str	r1, [r7, #0]
    new_data = true;
 8002144:	687a      	ldr	r2, [r7, #4]
 8002146:	7993      	ldrb	r3, [r2, #6]
 8002148:	f043 0301 	orr.w	r3, r3, #1
 800214c:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	1dd8      	adds	r0, r3, #7
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	331c      	adds	r3, #28
 8002156:	2206      	movs	r2, #6
 8002158:	4619      	mov	r1, r3
 800215a:	f012 fa7c 	bl	8014656 <memcpy>
  }
 800215e:	bf00      	nop
 8002160:	3708      	adds	r7, #8
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}

08002166 <_ZN8PUTM_CAN6DeviceINS_15TC_temperaturesEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8002166:	b580      	push	{r7, lr}
 8002168:	b082      	sub	sp, #8
 800216a:	af00      	add	r7, sp, #0
 800216c:	6078      	str	r0, [r7, #4]
 800216e:	6039      	str	r1, [r7, #0]
    new_data = true;
 8002170:	687a      	ldr	r2, [r7, #4]
 8002172:	7993      	ldrb	r3, [r2, #6]
 8002174:	f043 0301 	orr.w	r3, r3, #1
 8002178:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	1dd8      	adds	r0, r3, #7
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	331c      	adds	r3, #28
 8002182:	2206      	movs	r2, #6
 8002184:	4619      	mov	r1, r3
 8002186:	f012 fa66 	bl	8014656 <memcpy>
  }
 800218a:	bf00      	nop
 800218c:	3708      	adds	r7, #8
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}

08002192 <_ZN8PUTM_CAN6DeviceINS_19TC_wheel_velocitiesEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8002192:	b580      	push	{r7, lr}
 8002194:	b082      	sub	sp, #8
 8002196:	af00      	add	r7, sp, #0
 8002198:	6078      	str	r0, [r7, #4]
 800219a:	6039      	str	r1, [r7, #0]
    new_data = true;
 800219c:	687a      	ldr	r2, [r7, #4]
 800219e:	7993      	ldrb	r3, [r2, #6]
 80021a0:	f043 0301 	orr.w	r3, r3, #1
 80021a4:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	1dd8      	adds	r0, r3, #7
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	331c      	adds	r3, #28
 80021ae:	2208      	movs	r2, #8
 80021b0:	4619      	mov	r1, r3
 80021b2:	f012 fa50 	bl	8014656 <memcpy>
  }
 80021b6:	bf00      	nop
 80021b8:	3708      	adds	r7, #8
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}

080021be <_ZN8PUTM_CAN6DeviceINS_18TC_rear_suspensionEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80021be:	b480      	push	{r7}
 80021c0:	b083      	sub	sp, #12
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	6078      	str	r0, [r7, #4]
 80021c6:	6039      	str	r1, [r7, #0]
    new_data = true;
 80021c8:	687a      	ldr	r2, [r7, #4]
 80021ca:	7993      	ldrb	r3, [r2, #6]
 80021cc:	f043 0301 	orr.w	r3, r3, #1
 80021d0:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	3307      	adds	r3, #7
 80021d6:	683a      	ldr	r2, [r7, #0]
 80021d8:	321c      	adds	r2, #28
 80021da:	6812      	ldr	r2, [r2, #0]
 80021dc:	601a      	str	r2, [r3, #0]
  }
 80021de:	bf00      	nop
 80021e0:	370c      	adds	r7, #12
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr

080021ea <_ZN8PUTM_CAN6DeviceINS_7TC_mainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80021ea:	b580      	push	{r7, lr}
 80021ec:	b082      	sub	sp, #8
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]
 80021f2:	6039      	str	r1, [r7, #0]
    new_data = true;
 80021f4:	687a      	ldr	r2, [r7, #4]
 80021f6:	7993      	ldrb	r3, [r2, #6]
 80021f8:	f043 0301 	orr.w	r3, r3, #1
 80021fc:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	1dd8      	adds	r0, r3, #7
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	331c      	adds	r3, #28
 8002206:	2208      	movs	r2, #8
 8002208:	4619      	mov	r1, r3
 800220a:	f012 fa24 	bl	8014656 <memcpy>
  }
 800220e:	bf00      	nop
 8002210:	3708      	adds	r7, #8
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}

08002216 <_ZN8PUTM_CAN6DeviceINS_20Steering_Wheel_eventEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8002216:	b580      	push	{r7, lr}
 8002218:	b082      	sub	sp, #8
 800221a:	af00      	add	r7, sp, #0
 800221c:	6078      	str	r0, [r7, #4]
 800221e:	6039      	str	r1, [r7, #0]
    new_data = true;
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	7993      	ldrb	r3, [r2, #6]
 8002224:	f043 0301 	orr.w	r3, r3, #1
 8002228:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	1dd8      	adds	r0, r3, #7
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	331c      	adds	r3, #28
 8002232:	2203      	movs	r2, #3
 8002234:	4619      	mov	r1, r3
 8002236:	f012 fa0e 	bl	8014656 <memcpy>
  }
 800223a:	bf00      	nop
 800223c:	3708      	adds	r7, #8
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}

08002242 <_ZN8PUTM_CAN6DeviceINS_19Steering_Wheel_mainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8002242:	b580      	push	{r7, lr}
 8002244:	b082      	sub	sp, #8
 8002246:	af00      	add	r7, sp, #0
 8002248:	6078      	str	r0, [r7, #4]
 800224a:	6039      	str	r1, [r7, #0]
    new_data = true;
 800224c:	687a      	ldr	r2, [r7, #4]
 800224e:	7993      	ldrb	r3, [r2, #6]
 8002250:	f043 0301 	orr.w	r3, r3, #1
 8002254:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	1dd8      	adds	r0, r3, #7
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	331c      	adds	r3, #28
 800225e:	2203      	movs	r2, #3
 8002260:	4619      	mov	r1, r3
 8002262:	f012 f9f8 	bl	8014656 <memcpy>
  }
 8002266:	bf00      	nop
 8002268:	3708      	adds	r7, #8
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}

0800226e <_ZN8PUTM_CAN6DeviceINS_7SF_NUCSEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 800226e:	b480      	push	{r7}
 8002270:	b083      	sub	sp, #12
 8002272:	af00      	add	r7, sp, #0
 8002274:	6078      	str	r0, [r7, #4]
 8002276:	6039      	str	r1, [r7, #0]
    new_data = true;
 8002278:	687a      	ldr	r2, [r7, #4]
 800227a:	7993      	ldrb	r3, [r2, #6]
 800227c:	f043 0301 	orr.w	r3, r3, #1
 8002280:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	3307      	adds	r3, #7
 8002286:	683a      	ldr	r2, [r7, #0]
 8002288:	321c      	adds	r2, #28
 800228a:	6812      	ldr	r2, [r2, #0]
 800228c:	601a      	str	r2, [r3, #0]
  }
 800228e:	bf00      	nop
 8002290:	370c      	adds	r7, #12
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr

0800229a <_ZN8PUTM_CAN6DeviceINS_5SF_WSEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 800229a:	b580      	push	{r7, lr}
 800229c:	b082      	sub	sp, #8
 800229e:	af00      	add	r7, sp, #0
 80022a0:	6078      	str	r0, [r7, #4]
 80022a2:	6039      	str	r1, [r7, #0]
    new_data = true;
 80022a4:	687a      	ldr	r2, [r7, #4]
 80022a6:	7993      	ldrb	r3, [r2, #6]
 80022a8:	f043 0301 	orr.w	r3, r3, #1
 80022ac:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	1dd8      	adds	r0, r3, #7
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	331c      	adds	r3, #28
 80022b6:	2208      	movs	r2, #8
 80022b8:	4619      	mov	r1, r3
 80022ba:	f012 f9cc 	bl	8014656 <memcpy>
  }
 80022be:	bf00      	nop
 80022c0:	3708      	adds	r7, #8
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}

080022c6 <_ZN8PUTM_CAN6DeviceINS_5SF_DVEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80022c6:	b580      	push	{r7, lr}
 80022c8:	b082      	sub	sp, #8
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	6078      	str	r0, [r7, #4]
 80022ce:	6039      	str	r1, [r7, #0]
    new_data = true;
 80022d0:	687a      	ldr	r2, [r7, #4]
 80022d2:	7993      	ldrb	r3, [r2, #6]
 80022d4:	f043 0301 	orr.w	r3, r3, #1
 80022d8:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	1dd8      	adds	r0, r3, #7
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	331c      	adds	r3, #28
 80022e2:	2208      	movs	r2, #8
 80022e4:	4619      	mov	r1, r3
 80022e6:	f012 f9b6 	bl	8014656 <memcpy>
  }
 80022ea:	bf00      	nop
 80022ec:	3708      	adds	r7, #8
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}

080022f2 <_ZN8PUTM_CAN6DeviceINS_20SF_CoolingAndVSafetyEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80022f2:	b580      	push	{r7, lr}
 80022f4:	b082      	sub	sp, #8
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	6078      	str	r0, [r7, #4]
 80022fa:	6039      	str	r1, [r7, #0]
    new_data = true;
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	7993      	ldrb	r3, [r2, #6]
 8002300:	f043 0301 	orr.w	r3, r3, #1
 8002304:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	1dd8      	adds	r0, r3, #7
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	331c      	adds	r3, #28
 800230e:	2208      	movs	r2, #8
 8002310:	4619      	mov	r1, r3
 8002312:	f012 f9a0 	bl	8014656 <memcpy>
  }
 8002316:	bf00      	nop
 8002318:	3708      	adds	r7, #8
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}

0800231e <_ZN8PUTM_CAN6DeviceINS_11SF_FrontBoxEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 800231e:	b580      	push	{r7, lr}
 8002320:	b082      	sub	sp, #8
 8002322:	af00      	add	r7, sp, #0
 8002324:	6078      	str	r0, [r7, #4]
 8002326:	6039      	str	r1, [r7, #0]
    new_data = true;
 8002328:	687a      	ldr	r2, [r7, #4]
 800232a:	7993      	ldrb	r3, [r2, #6]
 800232c:	f043 0301 	orr.w	r3, r3, #1
 8002330:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	1dd8      	adds	r0, r3, #7
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	331c      	adds	r3, #28
 800233a:	2208      	movs	r2, #8
 800233c:	4619      	mov	r1, r3
 800233e:	f012 f98a 	bl	8014656 <memcpy>
  }
 8002342:	bf00      	nop
 8002344:	3708      	adds	r7, #8
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}

0800234a <_ZN8PUTM_CAN6DeviceINS_7SF_mainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 800234a:	b580      	push	{r7, lr}
 800234c:	b082      	sub	sp, #8
 800234e:	af00      	add	r7, sp, #0
 8002350:	6078      	str	r0, [r7, #4]
 8002352:	6039      	str	r1, [r7, #0]
    new_data = true;
 8002354:	687a      	ldr	r2, [r7, #4]
 8002356:	7993      	ldrb	r3, [r2, #6]
 8002358:	f043 0301 	orr.w	r3, r3, #1
 800235c:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	1dd8      	adds	r0, r3, #7
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	331c      	adds	r3, #28
 8002366:	2203      	movs	r2, #3
 8002368:	4619      	mov	r1, r3
 800236a:	f012 f974 	bl	8014656 <memcpy>
  }
 800236e:	bf00      	nop
 8002370:	3708      	adds	r7, #8
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}

08002376 <_ZN8PUTM_CAN6DeviceINS_9SF_safetyEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8002376:	b580      	push	{r7, lr}
 8002378:	b082      	sub	sp, #8
 800237a:	af00      	add	r7, sp, #0
 800237c:	6078      	str	r0, [r7, #4]
 800237e:	6039      	str	r1, [r7, #0]
    new_data = true;
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	7993      	ldrb	r3, [r2, #6]
 8002384:	f043 0301 	orr.w	r3, r3, #1
 8002388:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	1dd8      	adds	r0, r3, #7
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	331c      	adds	r3, #28
 8002392:	2205      	movs	r2, #5
 8002394:	4619      	mov	r1, r3
 8002396:	f012 f95e 	bl	8014656 <memcpy>
  }
 800239a:	bf00      	nop
 800239c:	3708      	adds	r7, #8
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}

080023a2 <_ZN8PUTM_CAN6DeviceINS_14Lap_timer_PassEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80023a2:	b480      	push	{r7}
 80023a4:	b083      	sub	sp, #12
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	6078      	str	r0, [r7, #4]
 80023aa:	6039      	str	r1, [r7, #0]
    new_data = true;
 80023ac:	687a      	ldr	r2, [r7, #4]
 80023ae:	7993      	ldrb	r3, [r2, #6]
 80023b0:	f043 0301 	orr.w	r3, r3, #1
 80023b4:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	3307      	adds	r3, #7
 80023ba:	683a      	ldr	r2, [r7, #0]
 80023bc:	321c      	adds	r2, #28
 80023be:	8812      	ldrh	r2, [r2, #0]
 80023c0:	b292      	uxth	r2, r2
 80023c2:	801a      	strh	r2, [r3, #0]
  }
 80023c4:	bf00      	nop
 80023c6:	370c      	adds	r7, #12
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr

080023d0 <_ZN8PUTM_CAN6DeviceINS_14Lap_timer_MainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	6039      	str	r1, [r7, #0]
    new_data = true;
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	7993      	ldrb	r3, [r2, #6]
 80023de:	f043 0301 	orr.w	r3, r3, #1
 80023e2:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	3307      	adds	r3, #7
 80023e8:	683a      	ldr	r2, [r7, #0]
 80023ea:	321c      	adds	r2, #28
 80023ec:	7812      	ldrb	r2, [r2, #0]
 80023ee:	701a      	strb	r2, [r3, #0]
  }
 80023f0:	bf00      	nop
 80023f2:	370c      	adds	r7, #12
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr

080023fc <_ZN8PUTM_CAN6DeviceINS_17Dash_lap_finishedEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80023fc:	b480      	push	{r7}
 80023fe:	b083      	sub	sp, #12
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	6039      	str	r1, [r7, #0]
    new_data = true;
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	7993      	ldrb	r3, [r2, #6]
 800240a:	f043 0301 	orr.w	r3, r3, #1
 800240e:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	3307      	adds	r3, #7
 8002414:	683a      	ldr	r2, [r7, #0]
 8002416:	321c      	adds	r2, #28
 8002418:	6812      	ldr	r2, [r2, #0]
 800241a:	601a      	str	r2, [r3, #0]
  }
 800241c:	bf00      	nop
 800241e:	370c      	adds	r7, #12
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr

08002428 <_ZN8PUTM_CAN6DeviceINS_27Dash_steering_wheel_requestEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	6039      	str	r1, [r7, #0]
    new_data = true;
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	7993      	ldrb	r3, [r2, #6]
 8002436:	f043 0301 	orr.w	r3, r3, #1
 800243a:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	3307      	adds	r3, #7
 8002440:	683a      	ldr	r2, [r7, #0]
 8002442:	321c      	adds	r2, #28
 8002444:	7812      	ldrb	r2, [r2, #0]
 8002446:	701a      	strb	r2, [r3, #0]
  }
 8002448:	bf00      	nop
 800244a:	370c      	adds	r7, #12
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr

08002454 <_ZN8PUTM_CAN6DeviceINS_26Dash_Smart_Fuses_FAN_speedEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	6039      	str	r1, [r7, #0]
    new_data = true;
 800245e:	687a      	ldr	r2, [r7, #4]
 8002460:	7993      	ldrb	r3, [r2, #6]
 8002462:	f043 0301 	orr.w	r3, r3, #1
 8002466:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	3307      	adds	r3, #7
 800246c:	683a      	ldr	r2, [r7, #0]
 800246e:	321c      	adds	r2, #28
 8002470:	8812      	ldrh	r2, [r2, #0]
 8002472:	b292      	uxth	r2, r2
 8002474:	801a      	strh	r2, [r3, #0]
  }
 8002476:	bf00      	nop
 8002478:	370c      	adds	r7, #12
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr

08002482 <_ZN8PUTM_CAN6DeviceINS_8Dash_TCSEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8002482:	b580      	push	{r7, lr}
 8002484:	b082      	sub	sp, #8
 8002486:	af00      	add	r7, sp, #0
 8002488:	6078      	str	r0, [r7, #4]
 800248a:	6039      	str	r1, [r7, #0]
    new_data = true;
 800248c:	687a      	ldr	r2, [r7, #4]
 800248e:	7993      	ldrb	r3, [r2, #6]
 8002490:	f043 0301 	orr.w	r3, r3, #1
 8002494:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	1dd8      	adds	r0, r3, #7
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	331c      	adds	r3, #28
 800249e:	2208      	movs	r2, #8
 80024a0:	4619      	mov	r1, r3
 80024a2:	f012 f8d8 	bl	8014656 <memcpy>
  }
 80024a6:	bf00      	nop
 80024a8:	3708      	adds	r7, #8
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}

080024ae <_ZN8PUTM_CAN6DeviceINS_9Dash_MainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80024ae:	b480      	push	{r7}
 80024b0:	b083      	sub	sp, #12
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	6078      	str	r0, [r7, #4]
 80024b6:	6039      	str	r1, [r7, #0]
    new_data = true;
 80024b8:	687a      	ldr	r2, [r7, #4]
 80024ba:	7993      	ldrb	r3, [r2, #6]
 80024bc:	f043 0301 	orr.w	r3, r3, #1
 80024c0:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	3307      	adds	r3, #7
 80024c6:	683a      	ldr	r2, [r7, #0]
 80024c8:	321c      	adds	r2, #28
 80024ca:	7812      	ldrb	r2, [r2, #0]
 80024cc:	701a      	strb	r2, [r3, #0]
  }
 80024ce:	bf00      	nop
 80024d0:	370c      	adds	r7, #12
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr

080024da <_ZN8PUTM_CAN6DeviceINS_18BMS_LV_temperatureEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80024da:	b580      	push	{r7, lr}
 80024dc:	b082      	sub	sp, #8
 80024de:	af00      	add	r7, sp, #0
 80024e0:	6078      	str	r0, [r7, #4]
 80024e2:	6039      	str	r1, [r7, #0]
    new_data = true;
 80024e4:	687a      	ldr	r2, [r7, #4]
 80024e6:	7993      	ldrb	r3, [r2, #6]
 80024e8:	f043 0301 	orr.w	r3, r3, #1
 80024ec:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	1dd8      	adds	r0, r3, #7
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	331c      	adds	r3, #28
 80024f6:	2208      	movs	r2, #8
 80024f8:	4619      	mov	r1, r3
 80024fa:	f012 f8ac 	bl	8014656 <memcpy>
  }
 80024fe:	bf00      	nop
 8002500:	3708      	adds	r7, #8
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}

08002506 <_ZN8PUTM_CAN6DeviceINS_11BMS_LV_mainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8002506:	b580      	push	{r7, lr}
 8002508:	b082      	sub	sp, #8
 800250a:	af00      	add	r7, sp, #0
 800250c:	6078      	str	r0, [r7, #4]
 800250e:	6039      	str	r1, [r7, #0]
    new_data = true;
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	7993      	ldrb	r3, [r2, #6]
 8002514:	f043 0301 	orr.w	r3, r3, #1
 8002518:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	1dd8      	adds	r0, r3, #7
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	331c      	adds	r3, #28
 8002522:	2206      	movs	r2, #6
 8002524:	4619      	mov	r1, r3
 8002526:	f012 f896 	bl	8014656 <memcpy>
  }
 800252a:	bf00      	nop
 800252c:	3708      	adds	r7, #8
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}

08002532 <_ZN8PUTM_CAN6DeviceINS_11BMS_HV_mainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8002532:	b580      	push	{r7, lr}
 8002534:	b082      	sub	sp, #8
 8002536:	af00      	add	r7, sp, #0
 8002538:	6078      	str	r0, [r7, #4]
 800253a:	6039      	str	r1, [r7, #0]
    new_data = true;
 800253c:	687a      	ldr	r2, [r7, #4]
 800253e:	7993      	ldrb	r3, [r2, #6]
 8002540:	f043 0301 	orr.w	r3, r3, #1
 8002544:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	1dd8      	adds	r0, r3, #7
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	331c      	adds	r3, #28
 800254e:	2208      	movs	r2, #8
 8002550:	4619      	mov	r1, r3
 8002552:	f012 f880 	bl	8014656 <memcpy>
  }
 8002556:	bf00      	nop
 8002558:	3708      	adds	r7, #8
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}

0800255e <_ZN8PUTM_CAN6DeviceINS_12AQ_ts_buttonEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 800255e:	b480      	push	{r7}
 8002560:	b083      	sub	sp, #12
 8002562:	af00      	add	r7, sp, #0
 8002564:	6078      	str	r0, [r7, #4]
 8002566:	6039      	str	r1, [r7, #0]
    new_data = true;
 8002568:	687a      	ldr	r2, [r7, #4]
 800256a:	7993      	ldrb	r3, [r2, #6]
 800256c:	f043 0301 	orr.w	r3, r3, #1
 8002570:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	3307      	adds	r3, #7
 8002576:	683a      	ldr	r2, [r7, #0]
 8002578:	321c      	adds	r2, #28
 800257a:	7812      	ldrb	r2, [r2, #0]
 800257c:	701a      	strb	r2, [r3, #0]
  }
 800257e:	bf00      	nop
 8002580:	370c      	adds	r7, #12
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr

0800258a <_ZN8PUTM_CAN6DeviceINS_12AQ_gyroscopeEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 800258a:	b580      	push	{r7, lr}
 800258c:	b082      	sub	sp, #8
 800258e:	af00      	add	r7, sp, #0
 8002590:	6078      	str	r0, [r7, #4]
 8002592:	6039      	str	r1, [r7, #0]
    new_data = true;
 8002594:	687a      	ldr	r2, [r7, #4]
 8002596:	7993      	ldrb	r3, [r2, #6]
 8002598:	f043 0301 	orr.w	r3, r3, #1
 800259c:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	1dd8      	adds	r0, r3, #7
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	331c      	adds	r3, #28
 80025a6:	2206      	movs	r2, #6
 80025a8:	4619      	mov	r1, r3
 80025aa:	f012 f854 	bl	8014656 <memcpy>
  }
 80025ae:	bf00      	nop
 80025b0:	3708      	adds	r7, #8
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}

080025b6 <_ZN8PUTM_CAN6DeviceINS_15AQ_accelerationEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80025b6:	b580      	push	{r7, lr}
 80025b8:	b082      	sub	sp, #8
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	6078      	str	r0, [r7, #4]
 80025be:	6039      	str	r1, [r7, #0]
    new_data = true;
 80025c0:	687a      	ldr	r2, [r7, #4]
 80025c2:	7993      	ldrb	r3, [r2, #6]
 80025c4:	f043 0301 	orr.w	r3, r3, #1
 80025c8:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	1dd8      	adds	r0, r3, #7
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	331c      	adds	r3, #28
 80025d2:	2206      	movs	r2, #6
 80025d4:	4619      	mov	r1, r3
 80025d6:	f012 f83e 	bl	8014656 <memcpy>
  }
 80025da:	bf00      	nop
 80025dc:	3708      	adds	r7, #8
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}

080025e2 <_ZN8PUTM_CAN6DeviceINS_7AQ_mainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80025e2:	b580      	push	{r7, lr}
 80025e4:	b082      	sub	sp, #8
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	6078      	str	r0, [r7, #4]
 80025ea:	6039      	str	r1, [r7, #0]
    new_data = true;
 80025ec:	687a      	ldr	r2, [r7, #4]
 80025ee:	7993      	ldrb	r3, [r2, #6]
 80025f0:	f043 0301 	orr.w	r3, r3, #1
 80025f4:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	1dd8      	adds	r0, r3, #7
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	331c      	adds	r3, #28
 80025fe:	2208      	movs	r2, #8
 8002600:	4619      	mov	r1, r3
 8002602:	f012 f828 	bl	8014656 <memcpy>
  }
 8002606:	bf00      	nop
 8002608:	3708      	adds	r7, #8
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}

0800260e <_ZN8PUTM_CAN6DeviceINS_9Apps_mainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 800260e:	b580      	push	{r7, lr}
 8002610:	b082      	sub	sp, #8
 8002612:	af00      	add	r7, sp, #0
 8002614:	6078      	str	r0, [r7, #4]
 8002616:	6039      	str	r1, [r7, #0]
    new_data = true;
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	7993      	ldrb	r3, [r2, #6]
 800261c:	f043 0301 	orr.w	r3, r3, #1
 8002620:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	1dd8      	adds	r0, r3, #7
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	331c      	adds	r3, #28
 800262a:	2205      	movs	r2, #5
 800262c:	4619      	mov	r1, r3
 800262e:	f012 f812 	bl	8014656 <memcpy>
  }
 8002632:	bf00      	nop
 8002634:	3708      	adds	r7, #8
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}

0800263a <_GLOBAL__sub_I__ZN8PUTM_CAN3canE>:
 800263a:	b580      	push	{r7, lr}
 800263c:	af00      	add	r7, sp, #0
 800263e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002642:	2001      	movs	r0, #1
 8002644:	f7ff fc2a 	bl	8001e9c <_Z41__static_initialization_and_destruction_0ii>
 8002648:	bd80      	pop	{r7, pc}

0800264a <_ZN22Battery_characteristicC1Ev>:
    Vttc2
};

float horner(const float *arry,unsigned int n, const float *x);

struct Battery_characteristic{
 800264a:	b480      	push	{r7}
 800264c:	b083      	sub	sp, #12
 800264e:	af00      	add	r7, sp, #0
 8002650:	6078      	str	r0, [r7, #4]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2201      	movs	r2, #1
 8002656:	601a      	str	r2, [r3, #0]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2201      	movs	r2, #1
 800265c:	605a      	str	r2, [r3, #4]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4618      	mov	r0, r3
 8002662:	370c      	adds	r7, #12
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr

0800266c <_ZN7SoC_EKFC1Ev>:
    float _Q_matrix[3];
    float _State_vector[3];
    

public:
    SoC_EKF() = default;
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	4618      	mov	r0, r3
 8002678:	f7ff ffe7 	bl	800264a <_ZN22Battery_characteristicC1Ev>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	4618      	mov	r0, r3
 8002680:	3708      	adds	r7, #8
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}

08002686 <_ZN15State_of_ChargeC1Ev>:
	float value_max;
	float value_min;

};

struct State_of_Charge{
 8002686:	b580      	push	{r7, lr}
 8002688:	b082      	sub	sp, #8
 800268a:	af00      	add	r7, sp, #0
 800268c:	6078      	str	r0, [r7, #4]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4618      	mov	r0, r3
 8002692:	f7ff ffeb 	bl	800266c <_ZN7SoC_EKFC1Ev>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4618      	mov	r0, r3
 800269a:	3708      	adds	r7, #8
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}

080026a0 <_ZN4DataC1Ev>:
	bool discharge_activation;
	bool balance_on;
	uint32_t discharge_tick_end;
};

struct Data{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b082      	sub	sp, #8
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	f503 73ea 	add.w	r3, r3, #468	; 0x1d4
 80026ae:	4618      	mov	r0, r3
 80026b0:	f7ff ffe9 	bl	8002686 <_ZN15State_of_ChargeC1Ev>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	4618      	mov	r0, r3
 80026b8:	3708      	adds	r7, #8
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
	...

080026c0 <_Z41__static_initialization_and_destruction_0ii>:
 *  Created on: May 22, 2022
 *      Author: Maks
 */
#include <global_variables.hpp>

Data data;
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	6039      	str	r1, [r7, #0]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d107      	bne.n	80026e0 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d102      	bne.n	80026e0 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80026da:	4803      	ldr	r0, [pc, #12]	; (80026e8 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 80026dc:	f7ff ffe0 	bl	80026a0 <_ZN4DataC1Ev>
 80026e0:	bf00      	nop
 80026e2:	3708      	adds	r7, #8
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	20001478 	.word	0x20001478

080026ec <_GLOBAL__sub_I_data>:
 80026ec:	b580      	push	{r7, lr}
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80026f4:	2001      	movs	r0, #1
 80026f6:	f7ff ffe3 	bl	80026c0 <_Z41__static_initialization_and_destruction_0ii>
 80026fa:	bd80      	pop	{r7, pc}

080026fc <_Z16init_PEC15_Tablev>:
uint16_t pec15Table[256];
uint16_t CRC15_POLY = 0x4599;
uint8_t ltcConfig[6] = {0xFC, (uint8_t)(1874 & 0xff), (uint8_t)((1874>>4)|(2625<<4)), (uint8_t)(2625>>4), 0, 0};

void init_PEC15_Table()
{
 80026fc:	b480      	push	{r7}
 80026fe:	b085      	sub	sp, #20
 8002700:	af00      	add	r7, sp, #0
	uint16_t remainder;
	for (int i = 0; i < 256; i++)
 8002702:	2300      	movs	r3, #0
 8002704:	60bb      	str	r3, [r7, #8]
 8002706:	e025      	b.n	8002754 <_Z16init_PEC15_Tablev+0x58>
	{
		remainder = i << 7;
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	b29b      	uxth	r3, r3
 800270c:	01db      	lsls	r3, r3, #7
 800270e:	81fb      	strh	r3, [r7, #14]
		for (int bit = 8; bit > 0; --bit)
 8002710:	2308      	movs	r3, #8
 8002712:	607b      	str	r3, [r7, #4]
 8002714:	e013      	b.n	800273e <_Z16init_PEC15_Tablev+0x42>
		{
			if (remainder & 0x4000)
 8002716:	89fb      	ldrh	r3, [r7, #14]
 8002718:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800271c:	2b00      	cmp	r3, #0
 800271e:	d008      	beq.n	8002732 <_Z16init_PEC15_Tablev+0x36>
			{
				remainder = ((remainder << 1));
 8002720:	89fb      	ldrh	r3, [r7, #14]
 8002722:	005b      	lsls	r3, r3, #1
 8002724:	81fb      	strh	r3, [r7, #14]
				remainder = (remainder ^ CRC15_POLY);
 8002726:	4b10      	ldr	r3, [pc, #64]	; (8002768 <_Z16init_PEC15_Tablev+0x6c>)
 8002728:	881a      	ldrh	r2, [r3, #0]
 800272a:	89fb      	ldrh	r3, [r7, #14]
 800272c:	4053      	eors	r3, r2
 800272e:	81fb      	strh	r3, [r7, #14]
 8002730:	e002      	b.n	8002738 <_Z16init_PEC15_Tablev+0x3c>
			}
			else
			{
				remainder = ((remainder << 1));
 8002732:	89fb      	ldrh	r3, [r7, #14]
 8002734:	005b      	lsls	r3, r3, #1
 8002736:	81fb      	strh	r3, [r7, #14]
		for (int bit = 8; bit > 0; --bit)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	3b01      	subs	r3, #1
 800273c:	607b      	str	r3, [r7, #4]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2b00      	cmp	r3, #0
 8002742:	dce8      	bgt.n	8002716 <_Z16init_PEC15_Tablev+0x1a>
			}
		}
		pec15Table[i] = remainder&0xFFFF;
 8002744:	4909      	ldr	r1, [pc, #36]	; (800276c <_Z16init_PEC15_Tablev+0x70>)
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	89fa      	ldrh	r2, [r7, #14]
 800274a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for (int i = 0; i < 256; i++)
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	3301      	adds	r3, #1
 8002752:	60bb      	str	r3, [r7, #8]
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	2bff      	cmp	r3, #255	; 0xff
 8002758:	ddd6      	ble.n	8002708 <_Z16init_PEC15_Tablev+0xc>
	}
}
 800275a:	bf00      	nop
 800275c:	bf00      	nop
 800275e:	3714      	adds	r7, #20
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr
 8002768:	20000210 	.word	0x20000210
 800276c:	2000171c 	.word	0x2000171c

08002770 <_Z5pec15Pci>:

uint16_t pec15(char *data , int len)
{
 8002770:	b480      	push	{r7}
 8002772:	b087      	sub	sp, #28
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	6039      	str	r1, [r7, #0]
	uint16_t remainder,address;
	remainder = 16;//PEC seed
 800277a:	2310      	movs	r3, #16
 800277c:	82fb      	strh	r3, [r7, #22]
	for (int i = 0; i < len; i++)
 800277e:	2300      	movs	r3, #0
 8002780:	613b      	str	r3, [r7, #16]
 8002782:	e019      	b.n	80027b8 <_Z5pec15Pci+0x48>
	{
		address = ((remainder >> 7) ^ data[i]) & 0xff;//calculate PEC table address
 8002784:	8afb      	ldrh	r3, [r7, #22]
 8002786:	09db      	lsrs	r3, r3, #7
 8002788:	b29a      	uxth	r2, r3
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	6879      	ldr	r1, [r7, #4]
 800278e:	440b      	add	r3, r1
 8002790:	781b      	ldrb	r3, [r3, #0]
 8002792:	b29b      	uxth	r3, r3
 8002794:	4053      	eors	r3, r2
 8002796:	b29b      	uxth	r3, r3
 8002798:	b2db      	uxtb	r3, r3
 800279a:	81fb      	strh	r3, [r7, #14]
		remainder = (remainder << 8 ) ^ pec15Table[address];
 800279c:	8afb      	ldrh	r3, [r7, #22]
 800279e:	021b      	lsls	r3, r3, #8
 80027a0:	b21a      	sxth	r2, r3
 80027a2:	89fb      	ldrh	r3, [r7, #14]
 80027a4:	490b      	ldr	r1, [pc, #44]	; (80027d4 <_Z5pec15Pci+0x64>)
 80027a6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80027aa:	b21b      	sxth	r3, r3
 80027ac:	4053      	eors	r3, r2
 80027ae:	b21b      	sxth	r3, r3
 80027b0:	82fb      	strh	r3, [r7, #22]
	for (int i = 0; i < len; i++)
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	3301      	adds	r3, #1
 80027b6:	613b      	str	r3, [r7, #16]
 80027b8:	693a      	ldr	r2, [r7, #16]
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	429a      	cmp	r2, r3
 80027be:	dbe1      	blt.n	8002784 <_Z5pec15Pci+0x14>
	}
	return (remainder*2);//The CRC15 has a 0 in the LSB so the final value must be multiplied by 2
 80027c0:	8afb      	ldrh	r3, [r7, #22]
 80027c2:	005b      	lsls	r3, r3, #1
 80027c4:	b29b      	uxth	r3, r3
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	371c      	adds	r7, #28
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr
 80027d2:	bf00      	nop
 80027d4:	2000171c 	.word	0x2000171c

080027d8 <_Z11LTC_wake_upv>:
 * Brief:	Send wakeup for LTC, BLOCKING MODE
 * Param:	None
 * Retval:	None
 */
void LTC_wake_up()
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	af00      	add	r7, sp, #0
	uint8_t tab[2] = {0xFF};
 80027de:	23ff      	movs	r3, #255	; 0xff
 80027e0:	80bb      	strh	r3, [r7, #4]

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80027e2:	2200      	movs	r2, #0
 80027e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80027e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027ec:	f005 fdc2 	bl	8008374 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, tab, 2, 1);
 80027f0:	1d39      	adds	r1, r7, #4
 80027f2:	2301      	movs	r3, #1
 80027f4:	2202      	movs	r2, #2
 80027f6:	4807      	ldr	r0, [pc, #28]	; (8002814 <_Z11LTC_wake_upv+0x3c>)
 80027f8:	f009 f95b 	bl	800bab2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 80027fc:	2201      	movs	r2, #1
 80027fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002802:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002806:	f005 fdb5 	bl	8008374 <HAL_GPIO_WritePin>
}
 800280a:	bf00      	nop
 800280c:	3708      	adds	r7, #8
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	20001b08 	.word	0x20001b08

08002818 <_Z18LTC_start_cell_adcv>:
 * Brief:	Send adc config for ltc and start conversion, BLOCKING MODE
 * Param:	None
 * Retval:	None
 */
void LTC_start_cell_adc()
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b084      	sub	sp, #16
 800281c:	af00      	add	r7, sp, #0
	uint8_t tab[12];
	uint16_t pec;

	uint16_t cmd = (1<<15) | 0x01;
 800281e:	f248 0301 	movw	r3, #32769	; 0x8001
 8002822:	81fb      	strh	r3, [r7, #14]
	// configuration
	tab[0] = (cmd>>8);
 8002824:	89fb      	ldrh	r3, [r7, #14]
 8002826:	0a1b      	lsrs	r3, r3, #8
 8002828:	b29b      	uxth	r3, r3
 800282a:	b2db      	uxtb	r3, r3
 800282c:	703b      	strb	r3, [r7, #0]
	tab[1] = cmd;
 800282e:	89fb      	ldrh	r3, [r7, #14]
 8002830:	b2db      	uxtb	r3, r3
 8002832:	707b      	strb	r3, [r7, #1]
	pec = pec15((char*)tab, 2);
 8002834:	463b      	mov	r3, r7
 8002836:	2102      	movs	r1, #2
 8002838:	4618      	mov	r0, r3
 800283a:	f7ff ff99 	bl	8002770 <_Z5pec15Pci>
 800283e:	4603      	mov	r3, r0
 8002840:	81bb      	strh	r3, [r7, #12]
	tab[2] = pec >> 8;
 8002842:	89bb      	ldrh	r3, [r7, #12]
 8002844:	0a1b      	lsrs	r3, r3, #8
 8002846:	b29b      	uxth	r3, r3
 8002848:	b2db      	uxtb	r3, r3
 800284a:	70bb      	strb	r3, [r7, #2]
	tab[3] = pec;
 800284c:	89bb      	ldrh	r3, [r7, #12]
 800284e:	b2db      	uxtb	r3, r3
 8002850:	70fb      	strb	r3, [r7, #3]

	tab[4] = ltcConfig[0];
 8002852:	4b38      	ldr	r3, [pc, #224]	; (8002934 <_Z18LTC_start_cell_adcv+0x11c>)
 8002854:	781b      	ldrb	r3, [r3, #0]
 8002856:	713b      	strb	r3, [r7, #4]
	tab[5] = ltcConfig[1];
 8002858:	4b36      	ldr	r3, [pc, #216]	; (8002934 <_Z18LTC_start_cell_adcv+0x11c>)
 800285a:	785b      	ldrb	r3, [r3, #1]
 800285c:	717b      	strb	r3, [r7, #5]
	tab[6] = ltcConfig[2];
 800285e:	4b35      	ldr	r3, [pc, #212]	; (8002934 <_Z18LTC_start_cell_adcv+0x11c>)
 8002860:	789b      	ldrb	r3, [r3, #2]
 8002862:	71bb      	strb	r3, [r7, #6]
	tab[7] = ltcConfig[3];
 8002864:	4b33      	ldr	r3, [pc, #204]	; (8002934 <_Z18LTC_start_cell_adcv+0x11c>)
 8002866:	78db      	ldrb	r3, [r3, #3]
 8002868:	71fb      	strb	r3, [r7, #7]
	tab[8] = ltcConfig[4];
 800286a:	4b32      	ldr	r3, [pc, #200]	; (8002934 <_Z18LTC_start_cell_adcv+0x11c>)
 800286c:	791b      	ldrb	r3, [r3, #4]
 800286e:	723b      	strb	r3, [r7, #8]
	tab[9] = ltcConfig[5];
 8002870:	4b30      	ldr	r3, [pc, #192]	; (8002934 <_Z18LTC_start_cell_adcv+0x11c>)
 8002872:	795b      	ldrb	r3, [r3, #5]
 8002874:	727b      	strb	r3, [r7, #9]
	pec = pec15((char*)&tab[4], 6);
 8002876:	463b      	mov	r3, r7
 8002878:	3304      	adds	r3, #4
 800287a:	2106      	movs	r1, #6
 800287c:	4618      	mov	r0, r3
 800287e:	f7ff ff77 	bl	8002770 <_Z5pec15Pci>
 8002882:	4603      	mov	r3, r0
 8002884:	81bb      	strh	r3, [r7, #12]
	tab[10] = pec >> 8;
 8002886:	89bb      	ldrh	r3, [r7, #12]
 8002888:	0a1b      	lsrs	r3, r3, #8
 800288a:	b29b      	uxth	r3, r3
 800288c:	b2db      	uxtb	r3, r3
 800288e:	72bb      	strb	r3, [r7, #10]
	tab[11] = pec;
 8002890:	89bb      	ldrh	r3, [r7, #12]
 8002892:	b2db      	uxtb	r3, r3
 8002894:	72fb      	strb	r3, [r7, #11]

	LTC_wake_up();
 8002896:	f7ff ff9f 	bl	80027d8 <_Z11LTC_wake_upv>

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 800289a:	2200      	movs	r2, #0
 800289c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80028a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028a4:	f005 fd66 	bl	8008374 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, tab, 12, 20);
 80028a8:	4639      	mov	r1, r7
 80028aa:	2314      	movs	r3, #20
 80028ac:	220c      	movs	r2, #12
 80028ae:	4822      	ldr	r0, [pc, #136]	; (8002938 <_Z18LTC_start_cell_adcv+0x120>)
 80028b0:	f009 f8ff 	bl	800bab2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 80028b4:	2201      	movs	r2, #1
 80028b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80028ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028be:	f005 fd59 	bl	8008374 <HAL_GPIO_WritePin>


	// adc conversion

	memset(tab, 0, 12);
 80028c2:	463b      	mov	r3, r7
 80028c4:	220c      	movs	r2, #12
 80028c6:	2100      	movs	r1, #0
 80028c8:	4618      	mov	r0, r3
 80028ca:	f011 fdee 	bl	80144aa <memset>

	//cmd = 0b1001100000 | (0b00 << 7); // discharge not permitted
	cmd = 0b1001110000 | (0b00 << 7); // discharge permitted
 80028ce:	f44f 731c 	mov.w	r3, #624	; 0x270
 80028d2:	81fb      	strh	r3, [r7, #14]
	tab[0] = cmd>>8;
 80028d4:	89fb      	ldrh	r3, [r7, #14]
 80028d6:	0a1b      	lsrs	r3, r3, #8
 80028d8:	b29b      	uxth	r3, r3
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	703b      	strb	r3, [r7, #0]
	tab[1] = cmd;
 80028de:	89fb      	ldrh	r3, [r7, #14]
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	707b      	strb	r3, [r7, #1]
	pec = pec15((char*)tab, 2);
 80028e4:	463b      	mov	r3, r7
 80028e6:	2102      	movs	r1, #2
 80028e8:	4618      	mov	r0, r3
 80028ea:	f7ff ff41 	bl	8002770 <_Z5pec15Pci>
 80028ee:	4603      	mov	r3, r0
 80028f0:	81bb      	strh	r3, [r7, #12]
	tab[2] = pec >> 8;
 80028f2:	89bb      	ldrh	r3, [r7, #12]
 80028f4:	0a1b      	lsrs	r3, r3, #8
 80028f6:	b29b      	uxth	r3, r3
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	70bb      	strb	r3, [r7, #2]
	tab[3] = pec;
 80028fc:	89bb      	ldrh	r3, [r7, #12]
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	70fb      	strb	r3, [r7, #3]

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8002902:	2200      	movs	r2, #0
 8002904:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002908:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800290c:	f005 fd32 	bl	8008374 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, tab, 4, 20);
 8002910:	4639      	mov	r1, r7
 8002912:	2314      	movs	r3, #20
 8002914:	2204      	movs	r2, #4
 8002916:	4808      	ldr	r0, [pc, #32]	; (8002938 <_Z18LTC_start_cell_adcv+0x120>)
 8002918:	f009 f8cb 	bl	800bab2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 800291c:	2201      	movs	r2, #1
 800291e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002922:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002926:	f005 fd25 	bl	8008374 <HAL_GPIO_WritePin>
}
 800292a:	bf00      	nop
 800292c:	3710      	adds	r7, #16
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	20000214 	.word	0x20000214
 8002938:	20001b08 	.word	0x20001b08

0800293c <_Z18LTC_get_values_adcPt>:
 * Brief:	Receveing adc data from ltc, BLOCKING MODE
 * Param:	None
 * Retval:	None
 */
void LTC_get_values_adc(uint16_t *cell_values)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b0b8      	sub	sp, #224	; 0xe0
 8002940:	af02      	add	r7, sp, #8
 8002942:	6078      	str	r0, [r7, #4]
	uint8_t tab[100], rx_tab[100];
	uint16_t pec;

	// read cell voltage group A
	uint16_t cmd = (1<<15) | 0b100;
 8002944:	f248 0304 	movw	r3, #32772	; 0x8004
 8002948:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
	memset(tab, 0, 12);
 800294c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002950:	220c      	movs	r2, #12
 8002952:	2100      	movs	r1, #0
 8002954:	4618      	mov	r0, r3
 8002956:	f011 fda8 	bl	80144aa <memset>
	tab[0] = (cmd>>8);
 800295a:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 800295e:	0a1b      	lsrs	r3, r3, #8
 8002960:	b29b      	uxth	r3, r3
 8002962:	b2db      	uxtb	r3, r3
 8002964:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
	tab[1] = cmd;
 8002968:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 800296c:	b2db      	uxtb	r3, r3
 800296e:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
	pec = pec15((char*)tab, 2);
 8002972:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002976:	2102      	movs	r1, #2
 8002978:	4618      	mov	r0, r3
 800297a:	f7ff fef9 	bl	8002770 <_Z5pec15Pci>
 800297e:	4603      	mov	r3, r0
 8002980:	f8a7 30d4 	strh.w	r3, [r7, #212]	; 0xd4
	tab[2] = pec >> 8;
 8002984:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 8002988:	0a1b      	lsrs	r3, r3, #8
 800298a:	b29b      	uxth	r3, r3
 800298c:	b2db      	uxtb	r3, r3
 800298e:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
	tab[3] = pec;
 8002992:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 8002996:	b2db      	uxtb	r3, r3
 8002998:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

	LTC_wake_up();
 800299c:	f7ff ff1c 	bl	80027d8 <_Z11LTC_wake_upv>

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80029a0:	2200      	movs	r2, #0
 80029a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80029a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029aa:	f005 fce3 	bl	8008374 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, tab, rx_tab, 12, 20);
 80029ae:	f107 020c 	add.w	r2, r7, #12
 80029b2:	f107 0170 	add.w	r1, r7, #112	; 0x70
 80029b6:	2314      	movs	r3, #20
 80029b8:	9300      	str	r3, [sp, #0]
 80029ba:	230c      	movs	r3, #12
 80029bc:	4849      	ldr	r0, [pc, #292]	; (8002ae4 <_Z18LTC_get_values_adcPt+0x1a8>)
 80029be:	f009 f9e6 	bl	800bd8e <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 80029c2:	2201      	movs	r2, #1
 80029c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80029c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029cc:	f005 fcd2 	bl	8008374 <HAL_GPIO_WritePin>


	cell_values[0] = (uint16_t)rx_tab[4] | (((uint16_t)rx_tab[5])<<8);
 80029d0:	7c3b      	ldrb	r3, [r7, #16]
 80029d2:	b21a      	sxth	r2, r3
 80029d4:	7c7b      	ldrb	r3, [r7, #17]
 80029d6:	021b      	lsls	r3, r3, #8
 80029d8:	b21b      	sxth	r3, r3
 80029da:	4313      	orrs	r3, r2
 80029dc:	b21b      	sxth	r3, r3
 80029de:	b29a      	uxth	r2, r3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	801a      	strh	r2, [r3, #0]
	cell_values[1] = (uint16_t)rx_tab[6] | (((uint16_t)rx_tab[7])<<8);
 80029e4:	7cbb      	ldrb	r3, [r7, #18]
 80029e6:	b21a      	sxth	r2, r3
 80029e8:	7cfb      	ldrb	r3, [r7, #19]
 80029ea:	021b      	lsls	r3, r3, #8
 80029ec:	b21b      	sxth	r3, r3
 80029ee:	4313      	orrs	r3, r2
 80029f0:	b21a      	sxth	r2, r3
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	3302      	adds	r3, #2
 80029f6:	b292      	uxth	r2, r2
 80029f8:	801a      	strh	r2, [r3, #0]
	cell_values[2] = (uint16_t)rx_tab[8] | (((uint16_t)rx_tab[9])<<8);
 80029fa:	7d3b      	ldrb	r3, [r7, #20]
 80029fc:	b21a      	sxth	r2, r3
 80029fe:	7d7b      	ldrb	r3, [r7, #21]
 8002a00:	021b      	lsls	r3, r3, #8
 8002a02:	b21b      	sxth	r3, r3
 8002a04:	4313      	orrs	r3, r2
 8002a06:	b21a      	sxth	r2, r3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	3304      	adds	r3, #4
 8002a0c:	b292      	uxth	r2, r2
 8002a0e:	801a      	strh	r2, [r3, #0]


	// read cell voltage group B
	cmd = (1<<15) | 0b110;
 8002a10:	f248 0306 	movw	r3, #32774	; 0x8006
 8002a14:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
	memset(tab, 0, 12);
 8002a18:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002a1c:	220c      	movs	r2, #12
 8002a1e:	2100      	movs	r1, #0
 8002a20:	4618      	mov	r0, r3
 8002a22:	f011 fd42 	bl	80144aa <memset>
	tab[0] = (cmd>>8);
 8002a26:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 8002a2a:	0a1b      	lsrs	r3, r3, #8
 8002a2c:	b29b      	uxth	r3, r3
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
	tab[1] = cmd;
 8002a34:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
	pec = pec15((char*)tab, 2);
 8002a3e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002a42:	2102      	movs	r1, #2
 8002a44:	4618      	mov	r0, r3
 8002a46:	f7ff fe93 	bl	8002770 <_Z5pec15Pci>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	f8a7 30d4 	strh.w	r3, [r7, #212]	; 0xd4
	tab[2] = pec >> 8;
 8002a50:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 8002a54:	0a1b      	lsrs	r3, r3, #8
 8002a56:	b29b      	uxth	r3, r3
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
	tab[3] = pec;
 8002a5e:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8002a68:	2200      	movs	r2, #0
 8002a6a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a72:	f005 fc7f 	bl	8008374 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, tab, rx_tab, 12, 20);
 8002a76:	f107 020c 	add.w	r2, r7, #12
 8002a7a:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8002a7e:	2314      	movs	r3, #20
 8002a80:	9300      	str	r3, [sp, #0]
 8002a82:	230c      	movs	r3, #12
 8002a84:	4817      	ldr	r0, [pc, #92]	; (8002ae4 <_Z18LTC_get_values_adcPt+0x1a8>)
 8002a86:	f009 f982 	bl	800bd8e <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a94:	f005 fc6e 	bl	8008374 <HAL_GPIO_WritePin>

	cell_values[3] = (uint16_t)rx_tab[4] | (((uint16_t)rx_tab[5])<<8);
 8002a98:	7c3b      	ldrb	r3, [r7, #16]
 8002a9a:	b21a      	sxth	r2, r3
 8002a9c:	7c7b      	ldrb	r3, [r7, #17]
 8002a9e:	021b      	lsls	r3, r3, #8
 8002aa0:	b21b      	sxth	r3, r3
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	b21a      	sxth	r2, r3
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	3306      	adds	r3, #6
 8002aaa:	b292      	uxth	r2, r2
 8002aac:	801a      	strh	r2, [r3, #0]
	cell_values[4] = (uint16_t)rx_tab[6] | (((uint16_t)rx_tab[7])<<8);
 8002aae:	7cbb      	ldrb	r3, [r7, #18]
 8002ab0:	b21a      	sxth	r2, r3
 8002ab2:	7cfb      	ldrb	r3, [r7, #19]
 8002ab4:	021b      	lsls	r3, r3, #8
 8002ab6:	b21b      	sxth	r3, r3
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	b21a      	sxth	r2, r3
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	3308      	adds	r3, #8
 8002ac0:	b292      	uxth	r2, r2
 8002ac2:	801a      	strh	r2, [r3, #0]
	cell_values[5] = (uint16_t)rx_tab[8] | (((uint16_t)rx_tab[9])<<8);
 8002ac4:	7d3b      	ldrb	r3, [r7, #20]
 8002ac6:	b21a      	sxth	r2, r3
 8002ac8:	7d7b      	ldrb	r3, [r7, #21]
 8002aca:	021b      	lsls	r3, r3, #8
 8002acc:	b21b      	sxth	r3, r3
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	b21a      	sxth	r2, r3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	330a      	adds	r3, #10
 8002ad6:	b292      	uxth	r2, r2
 8002ad8:	801a      	strh	r2, [r3, #0]


}
 8002ada:	bf00      	nop
 8002adc:	37d8      	adds	r7, #216	; 0xd8
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	20001b08 	.word	0x20001b08

08002ae8 <_Z8mute_disv>:
 * Brief:	Muting discharge
 * Param:	None
 * Retval:	None
 */
void mute_dis()
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b082      	sub	sp, #8
 8002aec:	af00      	add	r7, sp, #0
	uint8_t tab[4];
	uint16_t pec;


	uint16_t cmd = (1<<15) | 0b101000;
 8002aee:	f248 0328 	movw	r3, #32808	; 0x8028
 8002af2:	80fb      	strh	r3, [r7, #6]
	memset(tab, 0, 4);
 8002af4:	463b      	mov	r3, r7
 8002af6:	2204      	movs	r2, #4
 8002af8:	2100      	movs	r1, #0
 8002afa:	4618      	mov	r0, r3
 8002afc:	f011 fcd5 	bl	80144aa <memset>
	tab[0] = (cmd>>8);
 8002b00:	88fb      	ldrh	r3, [r7, #6]
 8002b02:	0a1b      	lsrs	r3, r3, #8
 8002b04:	b29b      	uxth	r3, r3
 8002b06:	b2db      	uxtb	r3, r3
 8002b08:	703b      	strb	r3, [r7, #0]
	tab[1] = cmd;
 8002b0a:	88fb      	ldrh	r3, [r7, #6]
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	707b      	strb	r3, [r7, #1]
	pec = pec15((char*)tab, 2);
 8002b10:	463b      	mov	r3, r7
 8002b12:	2102      	movs	r1, #2
 8002b14:	4618      	mov	r0, r3
 8002b16:	f7ff fe2b 	bl	8002770 <_Z5pec15Pci>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	80bb      	strh	r3, [r7, #4]
	tab[2] = pec >> 8;
 8002b1e:	88bb      	ldrh	r3, [r7, #4]
 8002b20:	0a1b      	lsrs	r3, r3, #8
 8002b22:	b29b      	uxth	r3, r3
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	70bb      	strb	r3, [r7, #2]
	tab[3] = pec;
 8002b28:	88bb      	ldrh	r3, [r7, #4]
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	70fb      	strb	r3, [r7, #3]

	LTC_wake_up();
 8002b2e:	f7ff fe53 	bl	80027d8 <_Z11LTC_wake_upv>

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8002b32:	2200      	movs	r2, #0
 8002b34:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b3c:	f005 fc1a 	bl	8008374 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, tab, 4, 100);
 8002b40:	4639      	mov	r1, r7
 8002b42:	2364      	movs	r3, #100	; 0x64
 8002b44:	2204      	movs	r2, #4
 8002b46:	4807      	ldr	r0, [pc, #28]	; (8002b64 <_Z8mute_disv+0x7c>)
 8002b48:	f008 ffb3 	bl	800bab2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b56:	f005 fc0d 	bl	8008374 <HAL_GPIO_WritePin>
}
 8002b5a:	bf00      	nop
 8002b5c:	3708      	adds	r7, #8
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	20001b08 	.word	0x20001b08

08002b68 <_Z10unmute_disv>:
 * Brief:	Unmuting discharge
 * Param:	None
 * Retval:	None
 */
void unmute_dis()
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0
	uint8_t tab[4];
	uint16_t pec;


	uint16_t cmd = (1<<15) | 0b101001;
 8002b6e:	f248 0329 	movw	r3, #32809	; 0x8029
 8002b72:	80fb      	strh	r3, [r7, #6]
	memset(tab, 0, 4);
 8002b74:	463b      	mov	r3, r7
 8002b76:	2204      	movs	r2, #4
 8002b78:	2100      	movs	r1, #0
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f011 fc95 	bl	80144aa <memset>
	tab[0] = (cmd>>8);
 8002b80:	88fb      	ldrh	r3, [r7, #6]
 8002b82:	0a1b      	lsrs	r3, r3, #8
 8002b84:	b29b      	uxth	r3, r3
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	703b      	strb	r3, [r7, #0]
	tab[1] = cmd;
 8002b8a:	88fb      	ldrh	r3, [r7, #6]
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	707b      	strb	r3, [r7, #1]
	pec = pec15((char*)tab, 2);
 8002b90:	463b      	mov	r3, r7
 8002b92:	2102      	movs	r1, #2
 8002b94:	4618      	mov	r0, r3
 8002b96:	f7ff fdeb 	bl	8002770 <_Z5pec15Pci>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	80bb      	strh	r3, [r7, #4]
	tab[2] = pec >> 8;
 8002b9e:	88bb      	ldrh	r3, [r7, #4]
 8002ba0:	0a1b      	lsrs	r3, r3, #8
 8002ba2:	b29b      	uxth	r3, r3
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	70bb      	strb	r3, [r7, #2]
	tab[3] = pec;
 8002ba8:	88bb      	ldrh	r3, [r7, #4]
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	70fb      	strb	r3, [r7, #3]

	LTC_wake_up();
 8002bae:	f7ff fe13 	bl	80027d8 <_Z11LTC_wake_upv>

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002bb8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002bbc:	f005 fbda 	bl	8008374 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, tab, 4, 100);
 8002bc0:	4639      	mov	r1, r7
 8002bc2:	2364      	movs	r3, #100	; 0x64
 8002bc4:	2204      	movs	r2, #4
 8002bc6:	4807      	ldr	r0, [pc, #28]	; (8002be4 <_Z10unmute_disv+0x7c>)
 8002bc8:	f008 ff73 	bl	800bab2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8002bcc:	2201      	movs	r2, #1
 8002bce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002bd2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002bd6:	f005 fbcd 	bl	8008374 <HAL_GPIO_WritePin>
}
 8002bda:	bf00      	nop
 8002bdc:	3708      	adds	r7, #8
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	20001b08 	.word	0x20001b08

08002be8 <_Z21LTC_turn_on_dischargeiPb>:
 * Brief:	Send discharge configuration and start the discharge, BLOCKING MODE
 * Param:	cell: number of cell wanted to be discharged
 * Retval:	None
 */
void LTC_turn_on_discharge(int cell, bool *cellDischarge)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b086      	sub	sp, #24
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	6039      	str	r1, [r7, #0]
	uint8_t tab[12];
	uint16_t pec;

	unmute_dis();
 8002bf2:	f7ff ffb9 	bl	8002b68 <_Z10unmute_disv>

	uint16_t cmd = (1<<15) | 0b10100;
 8002bf6:	f248 0314 	movw	r3, #32788	; 0x8014
 8002bfa:	82fb      	strh	r3, [r7, #22]
	memset(tab, 0, 12);
 8002bfc:	f107 0308 	add.w	r3, r7, #8
 8002c00:	220c      	movs	r2, #12
 8002c02:	2100      	movs	r1, #0
 8002c04:	4618      	mov	r0, r3
 8002c06:	f011 fc50 	bl	80144aa <memset>
	tab[0] = (cmd>>8);
 8002c0a:	8afb      	ldrh	r3, [r7, #22]
 8002c0c:	0a1b      	lsrs	r3, r3, #8
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	723b      	strb	r3, [r7, #8]
	tab[1] = cmd;
 8002c14:	8afb      	ldrh	r3, [r7, #22]
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	727b      	strb	r3, [r7, #9]
	pec = pec15((char*)tab, 2);
 8002c1a:	f107 0308 	add.w	r3, r7, #8
 8002c1e:	2102      	movs	r1, #2
 8002c20:	4618      	mov	r0, r3
 8002c22:	f7ff fda5 	bl	8002770 <_Z5pec15Pci>
 8002c26:	4603      	mov	r3, r0
 8002c28:	82bb      	strh	r3, [r7, #20]
	tab[2] = pec >> 8;
 8002c2a:	8abb      	ldrh	r3, [r7, #20]
 8002c2c:	0a1b      	lsrs	r3, r3, #8
 8002c2e:	b29b      	uxth	r3, r3
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	72bb      	strb	r3, [r7, #10]
	tab[3] = pec;
 8002c34:	8abb      	ldrh	r3, [r7, #20]
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	72fb      	strb	r3, [r7, #11]


	tab[4] = (cellDischarge[0]) | (cellDischarge[1] << 4); // 1, 2
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	781b      	ldrb	r3, [r3, #0]
 8002c3e:	b25a      	sxtb	r2, r3
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	3301      	adds	r3, #1
 8002c44:	781b      	ldrb	r3, [r3, #0]
 8002c46:	011b      	lsls	r3, r3, #4
 8002c48:	b25b      	sxtb	r3, r3
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	b25b      	sxtb	r3, r3
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	733b      	strb	r3, [r7, #12]
	tab[5] = (cellDischarge[2]) | (cellDischarge[3] << 4); // 3, 4
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	3302      	adds	r3, #2
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	b25a      	sxtb	r2, r3
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	3303      	adds	r3, #3
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	011b      	lsls	r3, r3, #4
 8002c62:	b25b      	sxtb	r3, r3
 8002c64:	4313      	orrs	r3, r2
 8002c66:	b25b      	sxtb	r3, r3
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	737b      	strb	r3, [r7, #13]
	tab[6] = (cellDischarge[4]) | (cellDischarge[5] << 4); // 5, 6
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	3304      	adds	r3, #4
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	b25a      	sxtb	r2, r3
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	3305      	adds	r3, #5
 8002c78:	781b      	ldrb	r3, [r3, #0]
 8002c7a:	011b      	lsls	r3, r3, #4
 8002c7c:	b25b      	sxtb	r3, r3
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	b25b      	sxtb	r3, r3
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	73bb      	strb	r3, [r7, #14]
	tab[7] = 0;
 8002c86:	2300      	movs	r3, #0
 8002c88:	73fb      	strb	r3, [r7, #15]
	tab[8] = 0;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	743b      	strb	r3, [r7, #16]
	tab[9] = 0;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	747b      	strb	r3, [r7, #17]
	pec = pec15((char*)&tab[4], 6);
 8002c92:	f107 0308 	add.w	r3, r7, #8
 8002c96:	3304      	adds	r3, #4
 8002c98:	2106      	movs	r1, #6
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f7ff fd68 	bl	8002770 <_Z5pec15Pci>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	82bb      	strh	r3, [r7, #20]
	tab[10] = pec >> 8;
 8002ca4:	8abb      	ldrh	r3, [r7, #20]
 8002ca6:	0a1b      	lsrs	r3, r3, #8
 8002ca8:	b29b      	uxth	r3, r3
 8002caa:	b2db      	uxtb	r3, r3
 8002cac:	74bb      	strb	r3, [r7, #18]
	tab[11] = pec;
 8002cae:	8abb      	ldrh	r3, [r7, #20]
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	74fb      	strb	r3, [r7, #19]

	LTC_wake_up();
 8002cb4:	f7ff fd90 	bl	80027d8 <_Z11LTC_wake_upv>

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8002cb8:	2200      	movs	r2, #0
 8002cba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002cbe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002cc2:	f005 fb57 	bl	8008374 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, tab, 12, 100);
 8002cc6:	f107 0108 	add.w	r1, r7, #8
 8002cca:	2364      	movs	r3, #100	; 0x64
 8002ccc:	220c      	movs	r2, #12
 8002cce:	483c      	ldr	r0, [pc, #240]	; (8002dc0 <_Z21LTC_turn_on_dischargeiPb+0x1d8>)
 8002cd0:	f008 feef 	bl	800bab2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002cda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002cde:	f005 fb49 	bl	8008374 <HAL_GPIO_WritePin>

	cmd = (1<<15) | 0x01;
 8002ce2:	f248 0301 	movw	r3, #32769	; 0x8001
 8002ce6:	82fb      	strh	r3, [r7, #22]
	memset(tab, 0, 12);
 8002ce8:	f107 0308 	add.w	r3, r7, #8
 8002cec:	220c      	movs	r2, #12
 8002cee:	2100      	movs	r1, #0
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f011 fbda 	bl	80144aa <memset>
	// configuration
	tab[0] = (cmd>>8);
 8002cf6:	8afb      	ldrh	r3, [r7, #22]
 8002cf8:	0a1b      	lsrs	r3, r3, #8
 8002cfa:	b29b      	uxth	r3, r3
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	723b      	strb	r3, [r7, #8]
	tab[1] = cmd;
 8002d00:	8afb      	ldrh	r3, [r7, #22]
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	727b      	strb	r3, [r7, #9]
	pec = pec15((char*)tab, 2);
 8002d06:	f107 0308 	add.w	r3, r7, #8
 8002d0a:	2102      	movs	r1, #2
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f7ff fd2f 	bl	8002770 <_Z5pec15Pci>
 8002d12:	4603      	mov	r3, r0
 8002d14:	82bb      	strh	r3, [r7, #20]
	tab[2] = pec >> 8;
 8002d16:	8abb      	ldrh	r3, [r7, #20]
 8002d18:	0a1b      	lsrs	r3, r3, #8
 8002d1a:	b29b      	uxth	r3, r3
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	72bb      	strb	r3, [r7, #10]
	tab[3] = pec;
 8002d20:	8abb      	ldrh	r3, [r7, #20]
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	72fb      	strb	r3, [r7, #11]

	tab[4] = ltcConfig[0];
 8002d26:	4b27      	ldr	r3, [pc, #156]	; (8002dc4 <_Z21LTC_turn_on_dischargeiPb+0x1dc>)
 8002d28:	781b      	ldrb	r3, [r3, #0]
 8002d2a:	733b      	strb	r3, [r7, #12]
	tab[5] = ltcConfig[1];
 8002d2c:	4b25      	ldr	r3, [pc, #148]	; (8002dc4 <_Z21LTC_turn_on_dischargeiPb+0x1dc>)
 8002d2e:	785b      	ldrb	r3, [r3, #1]
 8002d30:	737b      	strb	r3, [r7, #13]
	tab[6] = ltcConfig[2];
 8002d32:	4b24      	ldr	r3, [pc, #144]	; (8002dc4 <_Z21LTC_turn_on_dischargeiPb+0x1dc>)
 8002d34:	789b      	ldrb	r3, [r3, #2]
 8002d36:	73bb      	strb	r3, [r7, #14]
	tab[7] = ltcConfig[3];
 8002d38:	4b22      	ldr	r3, [pc, #136]	; (8002dc4 <_Z21LTC_turn_on_dischargeiPb+0x1dc>)
 8002d3a:	78db      	ldrb	r3, [r3, #3]
 8002d3c:	73fb      	strb	r3, [r7, #15]
	if(cell<7){
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2b06      	cmp	r3, #6
 8002d42:	dc0c      	bgt.n	8002d5e <_Z21LTC_turn_on_dischargeiPb+0x176>
		ltcConfig[4] = ltcConfig[4] | (1 << (cell));
 8002d44:	4b1f      	ldr	r3, [pc, #124]	; (8002dc4 <_Z21LTC_turn_on_dischargeiPb+0x1dc>)
 8002d46:	791b      	ldrb	r3, [r3, #4]
 8002d48:	b25a      	sxtb	r2, r3
 8002d4a:	2101      	movs	r1, #1
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d52:	b25b      	sxtb	r3, r3
 8002d54:	4313      	orrs	r3, r2
 8002d56:	b25b      	sxtb	r3, r3
 8002d58:	b2da      	uxtb	r2, r3
 8002d5a:	4b1a      	ldr	r3, [pc, #104]	; (8002dc4 <_Z21LTC_turn_on_dischargeiPb+0x1dc>)
 8002d5c:	711a      	strb	r2, [r3, #4]
	}
	tab[8] = ltcConfig[4];
 8002d5e:	4b19      	ldr	r3, [pc, #100]	; (8002dc4 <_Z21LTC_turn_on_dischargeiPb+0x1dc>)
 8002d60:	791b      	ldrb	r3, [r3, #4]
 8002d62:	743b      	strb	r3, [r7, #16]
	tab[9] = ltcConfig[5];
 8002d64:	4b17      	ldr	r3, [pc, #92]	; (8002dc4 <_Z21LTC_turn_on_dischargeiPb+0x1dc>)
 8002d66:	795b      	ldrb	r3, [r3, #5]
 8002d68:	747b      	strb	r3, [r7, #17]
	pec = pec15((char*)&tab[4], 6);
 8002d6a:	f107 0308 	add.w	r3, r7, #8
 8002d6e:	3304      	adds	r3, #4
 8002d70:	2106      	movs	r1, #6
 8002d72:	4618      	mov	r0, r3
 8002d74:	f7ff fcfc 	bl	8002770 <_Z5pec15Pci>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	82bb      	strh	r3, [r7, #20]
	tab[10] = pec >> 8;
 8002d7c:	8abb      	ldrh	r3, [r7, #20]
 8002d7e:	0a1b      	lsrs	r3, r3, #8
 8002d80:	b29b      	uxth	r3, r3
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	74bb      	strb	r3, [r7, #18]
	tab[11] = pec;
 8002d86:	8abb      	ldrh	r3, [r7, #20]
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	74fb      	strb	r3, [r7, #19]


	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d96:	f005 faed 	bl	8008374 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, tab, 12, 100);
 8002d9a:	f107 0108 	add.w	r1, r7, #8
 8002d9e:	2364      	movs	r3, #100	; 0x64
 8002da0:	220c      	movs	r2, #12
 8002da2:	4807      	ldr	r0, [pc, #28]	; (8002dc0 <_Z21LTC_turn_on_dischargeiPb+0x1d8>)
 8002da4:	f008 fe85 	bl	800bab2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8002da8:	2201      	movs	r2, #1
 8002daa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002dae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002db2:	f005 fadf 	bl	8008374 <HAL_GPIO_WritePin>


}
 8002db6:	bf00      	nop
 8002db8:	3718      	adds	r7, #24
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	20001b08 	.word	0x20001b08
 8002dc4:	20000214 	.word	0x20000214

08002dc8 <_Z22LTC_turn_off_dischargev>:
 * Brief:	Turn off discharge, BLOCKING MODE
 * Param:	None
 * Retval:	None
 */
void LTC_turn_off_discharge()
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b09a      	sub	sp, #104	; 0x68
 8002dcc:	af00      	add	r7, sp, #0

	uint8_t tab[100];
	uint16_t pec;


	uint16_t cmd = (1<<15) | 0b10100;
 8002dce:	f248 0314 	movw	r3, #32788	; 0x8014
 8002dd2:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
	memset(tab, 0, 12);
 8002dd6:	463b      	mov	r3, r7
 8002dd8:	220c      	movs	r2, #12
 8002dda:	2100      	movs	r1, #0
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f011 fb64 	bl	80144aa <memset>
	tab[0] = (cmd>>8);
 8002de2:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8002de6:	0a1b      	lsrs	r3, r3, #8
 8002de8:	b29b      	uxth	r3, r3
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	703b      	strb	r3, [r7, #0]
	tab[1] = cmd;
 8002dee:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	707b      	strb	r3, [r7, #1]
	pec = pec15((char*)tab, 2);
 8002df6:	463b      	mov	r3, r7
 8002df8:	2102      	movs	r1, #2
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f7ff fcb8 	bl	8002770 <_Z5pec15Pci>
 8002e00:	4603      	mov	r3, r0
 8002e02:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
	tab[2] = pec >> 8;
 8002e06:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002e0a:	0a1b      	lsrs	r3, r3, #8
 8002e0c:	b29b      	uxth	r3, r3
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	70bb      	strb	r3, [r7, #2]
	tab[3] = pec;
 8002e12:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	70fb      	strb	r3, [r7, #3]


	tab[4] = 0;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	713b      	strb	r3, [r7, #4]
	tab[5] = 0;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	717b      	strb	r3, [r7, #5]
	tab[6] = 0;
 8002e22:	2300      	movs	r3, #0
 8002e24:	71bb      	strb	r3, [r7, #6]
	tab[7] = 0;
 8002e26:	2300      	movs	r3, #0
 8002e28:	71fb      	strb	r3, [r7, #7]
	tab[8] = 0;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	723b      	strb	r3, [r7, #8]
	tab[9] = 0;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	727b      	strb	r3, [r7, #9]
	pec = pec15((char*)&tab[4], 6);
 8002e32:	463b      	mov	r3, r7
 8002e34:	3304      	adds	r3, #4
 8002e36:	2106      	movs	r1, #6
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f7ff fc99 	bl	8002770 <_Z5pec15Pci>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
	tab[10] = pec >> 8;
 8002e44:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002e48:	0a1b      	lsrs	r3, r3, #8
 8002e4a:	b29b      	uxth	r3, r3
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	72bb      	strb	r3, [r7, #10]
	tab[11] = pec;
 8002e50:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	72fb      	strb	r3, [r7, #11]

	LTC_wake_up();
 8002e58:	f7ff fcbe 	bl	80027d8 <_Z11LTC_wake_upv>

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002e62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e66:	f005 fa85 	bl	8008374 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, tab, 12, 100);
 8002e6a:	4639      	mov	r1, r7
 8002e6c:	2364      	movs	r3, #100	; 0x64
 8002e6e:	220c      	movs	r2, #12
 8002e70:	4838      	ldr	r0, [pc, #224]	; (8002f54 <_Z22LTC_turn_off_dischargev+0x18c>)
 8002e72:	f008 fe1e 	bl	800bab2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8002e76:	2201      	movs	r2, #1
 8002e78:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002e7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e80:	f005 fa78 	bl	8008374 <HAL_GPIO_WritePin>


	cmd = (1<<15) | 0x01;
 8002e84:	f248 0301 	movw	r3, #32769	; 0x8001
 8002e88:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
	memset(tab, 0, 12);
 8002e8c:	463b      	mov	r3, r7
 8002e8e:	220c      	movs	r2, #12
 8002e90:	2100      	movs	r1, #0
 8002e92:	4618      	mov	r0, r3
 8002e94:	f011 fb09 	bl	80144aa <memset>
	// configuration
	tab[0] = (cmd>>8);
 8002e98:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8002e9c:	0a1b      	lsrs	r3, r3, #8
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	703b      	strb	r3, [r7, #0]
	tab[1] = cmd;
 8002ea4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	707b      	strb	r3, [r7, #1]
	pec = pec15((char*)tab, 2);
 8002eac:	463b      	mov	r3, r7
 8002eae:	2102      	movs	r1, #2
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f7ff fc5d 	bl	8002770 <_Z5pec15Pci>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
	tab[2] = pec >> 8;
 8002ebc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002ec0:	0a1b      	lsrs	r3, r3, #8
 8002ec2:	b29b      	uxth	r3, r3
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	70bb      	strb	r3, [r7, #2]
	tab[3] = pec;
 8002ec8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	70fb      	strb	r3, [r7, #3]

	ltcConfig[4] = 0;
 8002ed0:	4b21      	ldr	r3, [pc, #132]	; (8002f58 <_Z22LTC_turn_off_dischargev+0x190>)
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	711a      	strb	r2, [r3, #4]

	tab[4] = ltcConfig[0];
 8002ed6:	4b20      	ldr	r3, [pc, #128]	; (8002f58 <_Z22LTC_turn_off_dischargev+0x190>)
 8002ed8:	781b      	ldrb	r3, [r3, #0]
 8002eda:	713b      	strb	r3, [r7, #4]
	tab[5] = ltcConfig[1];
 8002edc:	4b1e      	ldr	r3, [pc, #120]	; (8002f58 <_Z22LTC_turn_off_dischargev+0x190>)
 8002ede:	785b      	ldrb	r3, [r3, #1]
 8002ee0:	717b      	strb	r3, [r7, #5]
	tab[6] = ltcConfig[2];
 8002ee2:	4b1d      	ldr	r3, [pc, #116]	; (8002f58 <_Z22LTC_turn_off_dischargev+0x190>)
 8002ee4:	789b      	ldrb	r3, [r3, #2]
 8002ee6:	71bb      	strb	r3, [r7, #6]
	tab[7] = ltcConfig[3];
 8002ee8:	4b1b      	ldr	r3, [pc, #108]	; (8002f58 <_Z22LTC_turn_off_dischargev+0x190>)
 8002eea:	78db      	ldrb	r3, [r3, #3]
 8002eec:	71fb      	strb	r3, [r7, #7]
	tab[8] = ltcConfig[4];
 8002eee:	4b1a      	ldr	r3, [pc, #104]	; (8002f58 <_Z22LTC_turn_off_dischargev+0x190>)
 8002ef0:	791b      	ldrb	r3, [r3, #4]
 8002ef2:	723b      	strb	r3, [r7, #8]
	tab[9] = ltcConfig[5];
 8002ef4:	4b18      	ldr	r3, [pc, #96]	; (8002f58 <_Z22LTC_turn_off_dischargev+0x190>)
 8002ef6:	795b      	ldrb	r3, [r3, #5]
 8002ef8:	727b      	strb	r3, [r7, #9]
	pec = pec15((char*)&tab[4], 6);
 8002efa:	463b      	mov	r3, r7
 8002efc:	3304      	adds	r3, #4
 8002efe:	2106      	movs	r1, #6
 8002f00:	4618      	mov	r0, r3
 8002f02:	f7ff fc35 	bl	8002770 <_Z5pec15Pci>
 8002f06:	4603      	mov	r3, r0
 8002f08:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
	tab[10] = pec >> 8;
 8002f0c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002f10:	0a1b      	lsrs	r3, r3, #8
 8002f12:	b29b      	uxth	r3, r3
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	72bb      	strb	r3, [r7, #10]
	tab[11] = pec;
 8002f18:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	72fb      	strb	r3, [r7, #11]

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8002f20:	2200      	movs	r2, #0
 8002f22:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002f26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f2a:	f005 fa23 	bl	8008374 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, tab, 12, 100);
 8002f2e:	4639      	mov	r1, r7
 8002f30:	2364      	movs	r3, #100	; 0x64
 8002f32:	220c      	movs	r2, #12
 8002f34:	4807      	ldr	r0, [pc, #28]	; (8002f54 <_Z22LTC_turn_off_dischargev+0x18c>)
 8002f36:	f008 fdbc 	bl	800bab2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002f40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f44:	f005 fa16 	bl	8008374 <HAL_GPIO_WritePin>

	mute_dis();
 8002f48:	f7ff fdce 	bl	8002ae8 <_Z8mute_disv>
}
 8002f4c:	bf00      	nop
 8002f4e:	3768      	adds	r7, #104	; 0x68
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}
 8002f54:	20001b08 	.word	0x20001b08
 8002f58:	20000214 	.word	0x20000214

08002f5c <_Z24temperature_calculationst>:
 * Brief:	Calculation of temperature, from value of measured voltage
 * Param:	value:	Value of voltage, LSB -> 0.1 mV
 * Retval:	Temperature in *C
 */
float temperature_calculations(uint16_t value)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b085      	sub	sp, #20
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	4603      	mov	r3, r0
 8002f64:	80fb      	strh	r3, [r7, #6]
	float retval = 0.0;
 8002f66:	f04f 0300 	mov.w	r3, #0
 8002f6a:	60fb      	str	r3, [r7, #12]
	for(unsigned int i = 1; i < 28; i++)
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	60bb      	str	r3, [r7, #8]
 8002f70:	e040      	b.n	8002ff4 <_Z24temperature_calculationst+0x98>
	{
		if(value >= (uint16_t)temperature_map[i][0])
 8002f72:	4a27      	ldr	r2, [pc, #156]	; (8003010 <_Z24temperature_calculationst+0xb4>)
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002f7a:	b29b      	uxth	r3, r3
 8002f7c:	88fa      	ldrh	r2, [r7, #6]
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d335      	bcc.n	8002fee <_Z24temperature_calculationst+0x92>
		{
			// approximation
			retval = (float)temperature_map[i][1] - 5.0 * ((float)value-(float)temperature_map[i][0]) / ((float)temperature_map[i-1][0] - (float)temperature_map[i][0]);
 8002f82:	4a23      	ldr	r2, [pc, #140]	; (8003010 <_Z24temperature_calculationst+0xb4>)
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	00db      	lsls	r3, r3, #3
 8002f88:	4413      	add	r3, r2
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	ee07 3a90 	vmov	s15, r3
 8002f90:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f94:	88fb      	ldrh	r3, [r7, #6]
 8002f96:	ee07 3a90 	vmov	s15, r3
 8002f9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f9e:	4a1c      	ldr	r2, [pc, #112]	; (8003010 <_Z24temperature_calculationst+0xb4>)
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002fa6:	ee07 3a90 	vmov	s15, r3
 8002faa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002fae:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002fb2:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8002fb6:	ee27 6aa6 	vmul.f32	s12, s15, s13
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	3b01      	subs	r3, #1
 8002fbe:	4a14      	ldr	r2, [pc, #80]	; (8003010 <_Z24temperature_calculationst+0xb4>)
 8002fc0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002fc4:	ee07 3a90 	vmov	s15, r3
 8002fc8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002fcc:	4a10      	ldr	r2, [pc, #64]	; (8003010 <_Z24temperature_calculationst+0xb4>)
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002fd4:	ee07 3a90 	vmov	s15, r3
 8002fd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002fdc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002fe0:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002fe4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fe8:	edc7 7a03 	vstr	s15, [r7, #12]
			break;
 8002fec:	e005      	b.n	8002ffa <_Z24temperature_calculationst+0x9e>
	for(unsigned int i = 1; i < 28; i++)
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	3301      	adds	r3, #1
 8002ff2:	60bb      	str	r3, [r7, #8]
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	2b1b      	cmp	r3, #27
 8002ff8:	d9bb      	bls.n	8002f72 <_Z24temperature_calculationst+0x16>
		}
	}
	return retval;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	ee07 3a90 	vmov	s15, r3
}
 8003000:	eeb0 0a67 	vmov.f32	s0, s15
 8003004:	3714      	adds	r7, #20
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr
 800300e:	bf00      	nop
 8003010:	08016b50 	.word	0x08016b50

08003014 <_Z16get_temperaturesv>:
 * Brief:	Getting proper values of temperatures on every cell in *C
 * Param:	None
 * Retval:	None
 */
void get_temperatures()
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b082      	sub	sp, #8
 8003018:	af00      	add	r7, sp, #0
	data.temperatures.average = 0;
 800301a:	4b21      	ldr	r3, [pc, #132]	; (80030a0 <_Z16get_temperaturesv+0x8c>)
 800301c:	2200      	movs	r2, #0
 800301e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	for(unsigned int i = 0; i < NUMBER_OF_TEMPERATURES; i++)
 8003022:	2300      	movs	r3, #0
 8003024:	607b      	str	r3, [r7, #4]
 8003026:	e028      	b.n	800307a <_Z16get_temperaturesv+0x66>
	{
		data.temperatures.values[i] = (uint16_t)temperature_calculations(data.temperatures.adc[7-i]);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	f1c3 0307 	rsb	r3, r3, #7
 800302e:	4a1c      	ldr	r2, [pc, #112]	; (80030a0 <_Z16get_temperaturesv+0x8c>)
 8003030:	3314      	adds	r3, #20
 8003032:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003036:	b29b      	uxth	r3, r3
 8003038:	4618      	mov	r0, r3
 800303a:	f7ff ff8f 	bl	8002f5c <_Z24temperature_calculationst>
 800303e:	eef0 7a40 	vmov.f32	s15, s0
 8003042:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003046:	ee17 3a90 	vmov	r3, s15
 800304a:	b29b      	uxth	r3, r3
 800304c:	b2d9      	uxtb	r1, r3
 800304e:	4a14      	ldr	r2, [pc, #80]	; (80030a0 <_Z16get_temperaturesv+0x8c>)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	4413      	add	r3, r2
 8003054:	3320      	adds	r3, #32
 8003056:	460a      	mov	r2, r1
 8003058:	701a      	strb	r2, [r3, #0]
		data.temperatures.average += data.temperatures.values[i];
 800305a:	4b11      	ldr	r3, [pc, #68]	; (80030a0 <_Z16get_temperaturesv+0x8c>)
 800305c:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8003060:	490f      	ldr	r1, [pc, #60]	; (80030a0 <_Z16get_temperaturesv+0x8c>)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	440b      	add	r3, r1
 8003066:	3320      	adds	r3, #32
 8003068:	781b      	ldrb	r3, [r3, #0]
 800306a:	4413      	add	r3, r2
 800306c:	b2da      	uxtb	r2, r3
 800306e:	4b0c      	ldr	r3, [pc, #48]	; (80030a0 <_Z16get_temperaturesv+0x8c>)
 8003070:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	for(unsigned int i = 0; i < NUMBER_OF_TEMPERATURES; i++)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	3301      	adds	r3, #1
 8003078:	607b      	str	r3, [r7, #4]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2b04      	cmp	r3, #4
 800307e:	d9d3      	bls.n	8003028 <_Z16get_temperaturesv+0x14>
	}
	data.temperatures.average = data.temperatures.average / 6;
 8003080:	4b07      	ldr	r3, [pc, #28]	; (80030a0 <_Z16get_temperaturesv+0x8c>)
 8003082:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8003086:	4a07      	ldr	r2, [pc, #28]	; (80030a4 <_Z16get_temperaturesv+0x90>)
 8003088:	fba2 2303 	umull	r2, r3, r2, r3
 800308c:	089b      	lsrs	r3, r3, #2
 800308e:	b2da      	uxtb	r2, r3
 8003090:	4b03      	ldr	r3, [pc, #12]	; (80030a0 <_Z16get_temperaturesv+0x8c>)
 8003092:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8003096:	bf00      	nop
 8003098:	3708      	adds	r7, #8
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
 800309e:	bf00      	nop
 80030a0:	20001478 	.word	0x20001478
 80030a4:	aaaaaaab 	.word	0xaaaaaaab

080030a8 <_Z15min_max_voltagev>:
/*
 * Brief:	Finding the highest and the lowest cell voltage and index of the highest one
 * Param:	None
 * Retval:	data.voltages.lowest_cell_voltage, data.voltages.highest_cell_voltage, data.voltages.highest_cell_voltage_index
 */
void min_max_voltage(){
 80030a8:	b480      	push	{r7}
 80030aa:	b083      	sub	sp, #12
 80030ac:	af00      	add	r7, sp, #0
	data.voltages.lowest_cell_voltage = data.voltages.cells[0];
 80030ae:	4b1d      	ldr	r3, [pc, #116]	; (8003124 <_Z15min_max_voltagev+0x7c>)
 80030b0:	881a      	ldrh	r2, [r3, #0]
 80030b2:	4b1c      	ldr	r3, [pc, #112]	; (8003124 <_Z15min_max_voltagev+0x7c>)
 80030b4:	835a      	strh	r2, [r3, #26]
	data.voltages.highest_cell_voltage = data.voltages.cells[0];
 80030b6:	4b1b      	ldr	r3, [pc, #108]	; (8003124 <_Z15min_max_voltagev+0x7c>)
 80030b8:	881a      	ldrh	r2, [r3, #0]
 80030ba:	4b1a      	ldr	r3, [pc, #104]	; (8003124 <_Z15min_max_voltagev+0x7c>)
 80030bc:	839a      	strh	r2, [r3, #28]
	data.voltages.highest_cell_voltage_index = 0;
 80030be:	4b19      	ldr	r3, [pc, #100]	; (8003124 <_Z15min_max_voltagev+0x7c>)
 80030c0:	2200      	movs	r2, #0
 80030c2:	749a      	strb	r2, [r3, #18]
	for(uint8_t i = 1; i < NUMBER_OF_CELLS; i++)
 80030c4:	2301      	movs	r3, #1
 80030c6:	71fb      	strb	r3, [r7, #7]
 80030c8:	e021      	b.n	800310e <_Z15min_max_voltagev+0x66>
	{
		if(data.voltages.lowest_cell_voltage > data.voltages.cells[i])
 80030ca:	4b16      	ldr	r3, [pc, #88]	; (8003124 <_Z15min_max_voltagev+0x7c>)
 80030cc:	8b5a      	ldrh	r2, [r3, #26]
 80030ce:	79fb      	ldrb	r3, [r7, #7]
 80030d0:	4914      	ldr	r1, [pc, #80]	; (8003124 <_Z15min_max_voltagev+0x7c>)
 80030d2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80030d6:	429a      	cmp	r2, r3
 80030d8:	d905      	bls.n	80030e6 <_Z15min_max_voltagev+0x3e>
		{
			data.voltages.lowest_cell_voltage = data.voltages.cells[i];
 80030da:	79fb      	ldrb	r3, [r7, #7]
 80030dc:	4a11      	ldr	r2, [pc, #68]	; (8003124 <_Z15min_max_voltagev+0x7c>)
 80030de:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80030e2:	4b10      	ldr	r3, [pc, #64]	; (8003124 <_Z15min_max_voltagev+0x7c>)
 80030e4:	835a      	strh	r2, [r3, #26]
		}
		if(data.voltages.highest_cell_voltage < data.voltages.cells[i])
 80030e6:	4b0f      	ldr	r3, [pc, #60]	; (8003124 <_Z15min_max_voltagev+0x7c>)
 80030e8:	8b9a      	ldrh	r2, [r3, #28]
 80030ea:	79fb      	ldrb	r3, [r7, #7]
 80030ec:	490d      	ldr	r1, [pc, #52]	; (8003124 <_Z15min_max_voltagev+0x7c>)
 80030ee:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d208      	bcs.n	8003108 <_Z15min_max_voltagev+0x60>
		{
			data.voltages.highest_cell_voltage = data.voltages.cells[i];
 80030f6:	79fb      	ldrb	r3, [r7, #7]
 80030f8:	4a0a      	ldr	r2, [pc, #40]	; (8003124 <_Z15min_max_voltagev+0x7c>)
 80030fa:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80030fe:	4b09      	ldr	r3, [pc, #36]	; (8003124 <_Z15min_max_voltagev+0x7c>)
 8003100:	839a      	strh	r2, [r3, #28]
			data.voltages.highest_cell_voltage_index = i;
 8003102:	4a08      	ldr	r2, [pc, #32]	; (8003124 <_Z15min_max_voltagev+0x7c>)
 8003104:	79fb      	ldrb	r3, [r7, #7]
 8003106:	7493      	strb	r3, [r2, #18]
	for(uint8_t i = 1; i < NUMBER_OF_CELLS; i++)
 8003108:	79fb      	ldrb	r3, [r7, #7]
 800310a:	3301      	adds	r3, #1
 800310c:	71fb      	strb	r3, [r7, #7]
 800310e:	79fb      	ldrb	r3, [r7, #7]
 8003110:	2b05      	cmp	r3, #5
 8003112:	d9da      	bls.n	80030ca <_Z15min_max_voltagev+0x22>
		}
	}
}
 8003114:	bf00      	nop
 8003116:	bf00      	nop
 8003118:	370c      	adds	r7, #12
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr
 8003122:	bf00      	nop
 8003124:	20001478 	.word	0x20001478

08003128 <_Z19min_max_temperaturev>:

void min_max_temperature(){
 8003128:	b480      	push	{r7}
 800312a:	b083      	sub	sp, #12
 800312c:	af00      	add	r7, sp, #0
	data.temperatures.lowest_temperature = data.temperatures.values[0];
 800312e:	4b20      	ldr	r3, [pc, #128]	; (80031b0 <_Z19min_max_temperaturev+0x88>)
 8003130:	f893 2020 	ldrb.w	r2, [r3, #32]
 8003134:	4b1e      	ldr	r3, [pc, #120]	; (80031b0 <_Z19min_max_temperaturev+0x88>)
 8003136:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	data.temperatures.highest_temperature = data.temperatures.values[0];
 800313a:	4b1d      	ldr	r3, [pc, #116]	; (80031b0 <_Z19min_max_temperaturev+0x88>)
 800313c:	f893 2020 	ldrb.w	r2, [r3, #32]
 8003140:	4b1b      	ldr	r3, [pc, #108]	; (80031b0 <_Z19min_max_temperaturev+0x88>)
 8003142:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	for(unsigned int i = 1; i < NUMBER_OF_TEMPERATURES; i++)
 8003146:	2301      	movs	r3, #1
 8003148:	607b      	str	r3, [r7, #4]
 800314a:	e026      	b.n	800319a <_Z19min_max_temperaturev+0x72>
	{
		if(data.temperatures.lowest_temperature > data.temperatures.values[i])
 800314c:	4b18      	ldr	r3, [pc, #96]	; (80031b0 <_Z19min_max_temperaturev+0x88>)
 800314e:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8003152:	4917      	ldr	r1, [pc, #92]	; (80031b0 <_Z19min_max_temperaturev+0x88>)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	440b      	add	r3, r1
 8003158:	3320      	adds	r3, #32
 800315a:	781b      	ldrb	r3, [r3, #0]
 800315c:	429a      	cmp	r2, r3
 800315e:	d907      	bls.n	8003170 <_Z19min_max_temperaturev+0x48>
		{
			data.temperatures.lowest_temperature = data.temperatures.values[i];
 8003160:	4a13      	ldr	r2, [pc, #76]	; (80031b0 <_Z19min_max_temperaturev+0x88>)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4413      	add	r3, r2
 8003166:	3320      	adds	r3, #32
 8003168:	781a      	ldrb	r2, [r3, #0]
 800316a:	4b11      	ldr	r3, [pc, #68]	; (80031b0 <_Z19min_max_temperaturev+0x88>)
 800316c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		}
		if(data.temperatures.highest_temperature < data.temperatures.values[i])
 8003170:	4b0f      	ldr	r3, [pc, #60]	; (80031b0 <_Z19min_max_temperaturev+0x88>)
 8003172:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8003176:	490e      	ldr	r1, [pc, #56]	; (80031b0 <_Z19min_max_temperaturev+0x88>)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	440b      	add	r3, r1
 800317c:	3320      	adds	r3, #32
 800317e:	781b      	ldrb	r3, [r3, #0]
 8003180:	429a      	cmp	r2, r3
 8003182:	d207      	bcs.n	8003194 <_Z19min_max_temperaturev+0x6c>
		{
			data.temperatures.highest_temperature = data.temperatures.values[i];
 8003184:	4a0a      	ldr	r2, [pc, #40]	; (80031b0 <_Z19min_max_temperaturev+0x88>)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4413      	add	r3, r2
 800318a:	3320      	adds	r3, #32
 800318c:	781a      	ldrb	r2, [r3, #0]
 800318e:	4b08      	ldr	r3, [pc, #32]	; (80031b0 <_Z19min_max_temperaturev+0x88>)
 8003190:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	for(unsigned int i = 1; i < NUMBER_OF_TEMPERATURES; i++)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	3301      	adds	r3, #1
 8003198:	607b      	str	r3, [r7, #4]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2b04      	cmp	r3, #4
 800319e:	d9d5      	bls.n	800314c <_Z19min_max_temperaturev+0x24>
		}
	}
}
 80031a0:	bf00      	nop
 80031a2:	bf00      	nop
 80031a4:	370c      	adds	r7, #12
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr
 80031ae:	bf00      	nop
 80031b0:	20001478 	.word	0x20001478

080031b4 <_Z16voltage_can_calcv>:

void voltage_can_calc(){
 80031b4:	b480      	push	{r7}
 80031b6:	b083      	sub	sp, #12
 80031b8:	af00      	add	r7, sp, #0
	data.voltages.total = 0;
 80031ba:	4b1a      	ldr	r3, [pc, #104]	; (8003224 <_Z16voltage_can_calcv+0x70>)
 80031bc:	2200      	movs	r2, #0
 80031be:	615a      	str	r2, [r3, #20]
	//voltage calculations for CAN
	for(int i = 0; i < NUMBER_OF_CELLS; i++)
 80031c0:	2300      	movs	r3, #0
 80031c2:	607b      	str	r3, [r7, #4]
 80031c4:	e01b      	b.n	80031fe <_Z16voltage_can_calcv+0x4a>
	{
		data.voltages.total += (uint32_t)data.voltages.cells[i];
 80031c6:	4b17      	ldr	r3, [pc, #92]	; (8003224 <_Z16voltage_can_calcv+0x70>)
 80031c8:	695b      	ldr	r3, [r3, #20]
 80031ca:	4916      	ldr	r1, [pc, #88]	; (8003224 <_Z16voltage_can_calcv+0x70>)
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80031d2:	4413      	add	r3, r2
 80031d4:	4a13      	ldr	r2, [pc, #76]	; (8003224 <_Z16voltage_can_calcv+0x70>)
 80031d6:	6153      	str	r3, [r2, #20]
		data.voltages.cells_can[i] = (uint8_t)(data.voltages.cells[i] / 1000);
 80031d8:	4a12      	ldr	r2, [pc, #72]	; (8003224 <_Z16voltage_can_calcv+0x70>)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80031e0:	4a11      	ldr	r2, [pc, #68]	; (8003228 <_Z16voltage_can_calcv+0x74>)
 80031e2:	fba2 2303 	umull	r2, r3, r2, r3
 80031e6:	099b      	lsrs	r3, r3, #6
 80031e8:	b29b      	uxth	r3, r3
 80031ea:	b2d9      	uxtb	r1, r3
 80031ec:	4a0d      	ldr	r2, [pc, #52]	; (8003224 <_Z16voltage_can_calcv+0x70>)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	4413      	add	r3, r2
 80031f2:	330c      	adds	r3, #12
 80031f4:	460a      	mov	r2, r1
 80031f6:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < NUMBER_OF_CELLS; i++)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	3301      	adds	r3, #1
 80031fc:	607b      	str	r3, [r7, #4]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2b05      	cmp	r3, #5
 8003202:	dde0      	ble.n	80031c6 <_Z16voltage_can_calcv+0x12>
	}

	data.voltages.total_can = data.voltages.total / 100;
 8003204:	4b07      	ldr	r3, [pc, #28]	; (8003224 <_Z16voltage_can_calcv+0x70>)
 8003206:	695b      	ldr	r3, [r3, #20]
 8003208:	4a08      	ldr	r2, [pc, #32]	; (800322c <_Z16voltage_can_calcv+0x78>)
 800320a:	fba2 2303 	umull	r2, r3, r2, r3
 800320e:	095b      	lsrs	r3, r3, #5
 8003210:	b29a      	uxth	r2, r3
 8003212:	4b04      	ldr	r3, [pc, #16]	; (8003224 <_Z16voltage_can_calcv+0x70>)
 8003214:	831a      	strh	r2, [r3, #24]
}
 8003216:	bf00      	nop
 8003218:	370c      	adds	r7, #12
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr
 8003222:	bf00      	nop
 8003224:	20001478 	.word	0x20001478
 8003228:	10624dd3 	.word	0x10624dd3
 800322c:	51eb851f 	.word	0x51eb851f

08003230 <_Z18start_ltc_functionPv>:
/**
 * Brief:	ltc_task main function
 * Param:	None
 * Retval:	None
 */
void start_ltc_function(void *argument){
 8003230:	b580      	push	{r7, lr}
 8003232:	b082      	sub	sp, #8
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
	  init_PEC15_Table();
 8003238:	f7ff fa60 	bl	80026fc <_Z16init_PEC15_Tablev>
	for(;;){

		osDelay(1);
 800323c:	2001      	movs	r0, #1
 800323e:	f00c ff4d 	bl	80100dc <osDelay>
		LTC_start_cell_adc();
 8003242:	f7ff fae9 	bl	8002818 <_Z18LTC_start_cell_adcv>
		osDelay(30);
 8003246:	201e      	movs	r0, #30
 8003248:	f00c ff48 	bl	80100dc <osDelay>

		LTC_get_values_adc(data.voltages.cells);
 800324c:	4805      	ldr	r0, [pc, #20]	; (8003264 <_Z18start_ltc_functionPv+0x34>)
 800324e:	f7ff fb75 	bl	800293c <_Z18LTC_get_values_adcPt>

		min_max_voltage();
 8003252:	f7ff ff29 	bl	80030a8 <_Z15min_max_voltagev>

		voltage_can_calc();
 8003256:	f7ff ffad 	bl	80031b4 <_Z16voltage_can_calcv>

		get_temperatures();
 800325a:	f7ff fedb 	bl	8003014 <_Z16get_temperaturesv>

		min_max_temperature();
 800325e:	f7ff ff63 	bl	8003128 <_Z19min_max_temperaturev>
		osDelay(1);
 8003262:	e7eb      	b.n	800323c <_Z18start_ltc_functionPv+0xc>
 8003264:	20001478 	.word	0x20001478

08003268 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800326c:	f001 ff73 	bl	8005156 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003270:	f000 f892 	bl	8003398 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003274:	f000 fcac 	bl	8003bd0 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8003278:	f000 fc6c 	bl	8003b54 <_ZL11MX_DMA_Initv>
  MX_ADC1_Init();
 800327c:	f000 f8f0 	bl	8003460 <_ZL12MX_ADC1_Initv>
  MX_ADC2_Init();
 8003280:	f000 fa0c 	bl	800369c <_ZL12MX_ADC2_Initv>
  MX_CAN1_Init();
 8003284:	f000 fa78 	bl	8003778 <_ZL12MX_CAN1_Initv>
  MX_RTC_Init();
 8003288:	f000 fab2 	bl	80037f0 <_ZL11MX_RTC_Initv>
  MX_SPI1_Init();
 800328c:	f000 fb20 	bl	80038d0 <_ZL12MX_SPI1_Initv>
  MX_TIM3_Init();
 8003290:	f000 fb60 	bl	8003954 <_ZL12MX_TIM3_Initv>
  MX_TIM6_Init();
 8003294:	f000 fbbc 	bl	8003a10 <_ZL12MX_TIM6_Initv>
  MX_TIM8_Init();
 8003298:	f000 fbfa 	bl	8003a90 <_ZL12MX_TIM8_Initv>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800329c:	f00c fe42 	bl	800ff24 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80032a0:	4a27      	ldr	r2, [pc, #156]	; (8003340 <main+0xd8>)
 80032a2:	2100      	movs	r1, #0
 80032a4:	4827      	ldr	r0, [pc, #156]	; (8003344 <main+0xdc>)
 80032a6:	f00c fe87 	bl	800ffb8 <osThreadNew>
 80032aa:	4603      	mov	r3, r0
 80032ac:	4a26      	ldr	r2, [pc, #152]	; (8003348 <main+0xe0>)
 80032ae:	6013      	str	r3, [r2, #0]

  /* creation of ltc_task */
  ltc_taskHandle = osThreadNew(start_ltc_function, NULL, &ltc_task_attributes);
 80032b0:	4a26      	ldr	r2, [pc, #152]	; (800334c <main+0xe4>)
 80032b2:	2100      	movs	r1, #0
 80032b4:	4826      	ldr	r0, [pc, #152]	; (8003350 <main+0xe8>)
 80032b6:	f00c fe7f 	bl	800ffb8 <osThreadNew>
 80032ba:	4603      	mov	r3, r0
 80032bc:	4a25      	ldr	r2, [pc, #148]	; (8003354 <main+0xec>)
 80032be:	6013      	str	r3, [r2, #0]

  /* creation of soc_update_task */
  soc_update_taskHandle = osThreadNew(start_soc_function, NULL, &soc_update_task_attributes);
 80032c0:	4a25      	ldr	r2, [pc, #148]	; (8003358 <main+0xf0>)
 80032c2:	2100      	movs	r1, #0
 80032c4:	4825      	ldr	r0, [pc, #148]	; (800335c <main+0xf4>)
 80032c6:	f00c fe77 	bl	800ffb8 <osThreadNew>
 80032ca:	4603      	mov	r3, r0
 80032cc:	4a24      	ldr	r2, [pc, #144]	; (8003360 <main+0xf8>)
 80032ce:	6013      	str	r3, [r2, #0]

  /* creation of balance_task */
  balance_taskHandle = osThreadNew(start_balance_function, NULL, &balance_task_attributes);
 80032d0:	4a24      	ldr	r2, [pc, #144]	; (8003364 <main+0xfc>)
 80032d2:	2100      	movs	r1, #0
 80032d4:	4824      	ldr	r0, [pc, #144]	; (8003368 <main+0x100>)
 80032d6:	f00c fe6f 	bl	800ffb8 <osThreadNew>
 80032da:	4603      	mov	r3, r0
 80032dc:	4a23      	ldr	r2, [pc, #140]	; (800336c <main+0x104>)
 80032de:	6013      	str	r3, [r2, #0]

  /* creation of comm_err_task */
  comm_err_taskHandle = osThreadNew(start_comm_err_function, NULL, &comm_err_task_attributes);
 80032e0:	4a23      	ldr	r2, [pc, #140]	; (8003370 <main+0x108>)
 80032e2:	2100      	movs	r1, #0
 80032e4:	4823      	ldr	r0, [pc, #140]	; (8003374 <main+0x10c>)
 80032e6:	f00c fe67 	bl	800ffb8 <osThreadNew>
 80032ea:	4603      	mov	r3, r0
 80032ec:	4a22      	ldr	r2, [pc, #136]	; (8003378 <main+0x110>)
 80032ee:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */


  HAL_Delay(2000);
 80032f0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80032f4:	f001 ff68 	bl	80051c8 <HAL_Delay>
  HAL_GPIO_WritePin(EFUSE_GPIO_Port, EFUSE_Pin, GPIO_PIN_SET);
 80032f8:	2201      	movs	r2, #1
 80032fa:	2104      	movs	r1, #4
 80032fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003300:	f005 f838 	bl	8008374 <HAL_GPIO_WritePin>
  HAL_TIM_Base_Start_IT(&htim3);
 8003304:	481d      	ldr	r0, [pc, #116]	; (800337c <main+0x114>)
 8003306:	f009 f979 	bl	800c5fc <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim6);
 800330a:	481d      	ldr	r0, [pc, #116]	; (8003380 <main+0x118>)
 800330c:	f009 f90e 	bl	800c52c <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim8);
 8003310:	481c      	ldr	r0, [pc, #112]	; (8003384 <main+0x11c>)
 8003312:	f009 f90b 	bl	800c52c <HAL_TIM_Base_Start>


  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8003316:	217f      	movs	r1, #127	; 0x7f
 8003318:	481b      	ldr	r0, [pc, #108]	; (8003388 <main+0x120>)
 800331a:	f003 fbb7 	bl	8006a8c <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 800331e:	217f      	movs	r1, #127	; 0x7f
 8003320:	481a      	ldr	r0, [pc, #104]	; (800338c <main+0x124>)
 8003322:	f003 fbb3 	bl	8006a8c <HAL_ADCEx_Calibration_Start>

  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)data.temperatures.adc, MAX_NUMBER_OF_TEMPERATURES);
 8003326:	2208      	movs	r2, #8
 8003328:	4919      	ldr	r1, [pc, #100]	; (8003390 <main+0x128>)
 800332a:	4817      	ldr	r0, [pc, #92]	; (8003388 <main+0x120>)
 800332c:	f002 faf2 	bl	8005914 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc2, (uint32_t*)data.current.adc, NUMBER_OF_CS_SAMPLES);
 8003330:	2264      	movs	r2, #100	; 0x64
 8003332:	4918      	ldr	r1, [pc, #96]	; (8003394 <main+0x12c>)
 8003334:	4815      	ldr	r0, [pc, #84]	; (800338c <main+0x124>)
 8003336:	f002 faed 	bl	8005914 <HAL_ADC_Start_DMA>

  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800333a:	f00c fe17 	bl	800ff6c <osKernelStart>
  /* USER CODE BEGIN WHILE */




  while (1)
 800333e:	e7fe      	b.n	800333e <main+0xd6>
 8003340:	08016c20 	.word	0x08016c20
 8003344:	08003cf5 	.word	0x08003cf5
 8003348:	20001c50 	.word	0x20001c50
 800334c:	08016c44 	.word	0x08016c44
 8003350:	08003231 	.word	0x08003231
 8003354:	20001c54 	.word	0x20001c54
 8003358:	08016c68 	.word	0x08016c68
 800335c:	08004709 	.word	0x08004709
 8003360:	20002500 	.word	0x20002500
 8003364:	08016c8c 	.word	0x08016c8c
 8003368:	08001049 	.word	0x08001049
 800336c:	20002dac 	.word	0x20002dac
 8003370:	08016cb0 	.word	0x08016cb0
 8003374:	0800198d 	.word	0x0800198d
 8003378:	20003658 	.word	0x20003658
 800337c:	20001b6c 	.word	0x20001b6c
 8003380:	20001bb8 	.word	0x20001bb8
 8003384:	20001c04 	.word	0x20001c04
 8003388:	2000191c 	.word	0x2000191c
 800338c:	20001984 	.word	0x20001984
 8003390:	200014a0 	.word	0x200014a0
 8003394:	200014b0 	.word	0x200014b0

08003398 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b098      	sub	sp, #96	; 0x60
 800339c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800339e:	f107 0318 	add.w	r3, r7, #24
 80033a2:	2248      	movs	r2, #72	; 0x48
 80033a4:	2100      	movs	r1, #0
 80033a6:	4618      	mov	r0, r3
 80033a8:	f011 f87f 	bl	80144aa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80033ac:	1d3b      	adds	r3, r7, #4
 80033ae:	2200      	movs	r2, #0
 80033b0:	601a      	str	r2, [r3, #0]
 80033b2:	605a      	str	r2, [r3, #4]
 80033b4:	609a      	str	r2, [r3, #8]
 80033b6:	60da      	str	r2, [r3, #12]
 80033b8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80033ba:	f44f 7000 	mov.w	r0, #512	; 0x200
 80033be:	f006 f9e9 	bl	8009794 <HAL_PWREx_ControlVoltageScaling>
 80033c2:	4603      	mov	r3, r0
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	bf14      	ite	ne
 80033c8:	2301      	movne	r3, #1
 80033ca:	2300      	moveq	r3, #0
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d001      	beq.n	80033d6 <SystemClock_Config+0x3e>
  {
    Error_Handler();
 80033d2:	f000 fcab 	bl	8003d2c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSI
 80033d6:	2329      	movs	r3, #41	; 0x29
 80033d8:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80033da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80033de:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80033e0:	2301      	movs	r3, #1
 80033e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80033e4:	2301      	movs	r3, #1
 80033e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80033e8:	2302      	movs	r3, #2
 80033ea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80033ec:	2303      	movs	r3, #3
 80033ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 2;
 80033f0:	2302      	movs	r3, #2
 80033f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 16;
 80033f4:	2310      	movs	r3, #16
 80033f6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80033f8:	2302      	movs	r3, #2
 80033fa:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80033fc:	2302      	movs	r3, #2
 80033fe:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003400:	2302      	movs	r3, #2
 8003402:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003404:	f107 0318 	add.w	r3, r7, #24
 8003408:	4618      	mov	r0, r3
 800340a:	f006 facd 	bl	80099a8 <HAL_RCC_OscConfig>
 800340e:	4603      	mov	r3, r0
 8003410:	2b00      	cmp	r3, #0
 8003412:	bf14      	ite	ne
 8003414:	2301      	movne	r3, #1
 8003416:	2300      	moveq	r3, #0
 8003418:	b2db      	uxtb	r3, r3
 800341a:	2b00      	cmp	r3, #0
 800341c:	d001      	beq.n	8003422 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800341e:	f000 fc85 	bl	8003d2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003422:	230f      	movs	r3, #15
 8003424:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003426:	2303      	movs	r3, #3
 8003428:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800342a:	2300      	movs	r3, #0
 800342c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800342e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003432:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003434:	2300      	movs	r3, #0
 8003436:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8003438:	1d3b      	adds	r3, r7, #4
 800343a:	2103      	movs	r1, #3
 800343c:	4618      	mov	r0, r3
 800343e:	f006 ff2f 	bl	800a2a0 <HAL_RCC_ClockConfig>
 8003442:	4603      	mov	r3, r0
 8003444:	2b00      	cmp	r3, #0
 8003446:	bf14      	ite	ne
 8003448:	2301      	movne	r3, #1
 800344a:	2300      	moveq	r3, #0
 800344c:	b2db      	uxtb	r3, r3
 800344e:	2b00      	cmp	r3, #0
 8003450:	d001      	beq.n	8003456 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8003452:	f000 fc6b 	bl	8003d2c <Error_Handler>
  }
}
 8003456:	bf00      	nop
 8003458:	3760      	adds	r7, #96	; 0x60
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
	...

08003460 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b08a      	sub	sp, #40	; 0x28
 8003464:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8003466:	f107 031c 	add.w	r3, r7, #28
 800346a:	2200      	movs	r2, #0
 800346c:	601a      	str	r2, [r3, #0]
 800346e:	605a      	str	r2, [r3, #4]
 8003470:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8003472:	1d3b      	adds	r3, r7, #4
 8003474:	2200      	movs	r2, #0
 8003476:	601a      	str	r2, [r3, #0]
 8003478:	605a      	str	r2, [r3, #4]
 800347a:	609a      	str	r2, [r3, #8]
 800347c:	60da      	str	r2, [r3, #12]
 800347e:	611a      	str	r2, [r3, #16]
 8003480:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8003482:	4b7c      	ldr	r3, [pc, #496]	; (8003674 <_ZL12MX_ADC1_Initv+0x214>)
 8003484:	4a7c      	ldr	r2, [pc, #496]	; (8003678 <_ZL12MX_ADC1_Initv+0x218>)
 8003486:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8003488:	4b7a      	ldr	r3, [pc, #488]	; (8003674 <_ZL12MX_ADC1_Initv+0x214>)
 800348a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800348e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003490:	4b78      	ldr	r3, [pc, #480]	; (8003674 <_ZL12MX_ADC1_Initv+0x214>)
 8003492:	2200      	movs	r2, #0
 8003494:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003496:	4b77      	ldr	r3, [pc, #476]	; (8003674 <_ZL12MX_ADC1_Initv+0x214>)
 8003498:	2200      	movs	r2, #0
 800349a:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800349c:	4b75      	ldr	r3, [pc, #468]	; (8003674 <_ZL12MX_ADC1_Initv+0x214>)
 800349e:	2201      	movs	r2, #1
 80034a0:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80034a2:	4b74      	ldr	r3, [pc, #464]	; (8003674 <_ZL12MX_ADC1_Initv+0x214>)
 80034a4:	2204      	movs	r2, #4
 80034a6:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80034a8:	4b72      	ldr	r3, [pc, #456]	; (8003674 <_ZL12MX_ADC1_Initv+0x214>)
 80034aa:	2200      	movs	r2, #0
 80034ac:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80034ae:	4b71      	ldr	r3, [pc, #452]	; (8003674 <_ZL12MX_ADC1_Initv+0x214>)
 80034b0:	2201      	movs	r2, #1
 80034b2:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 8;
 80034b4:	4b6f      	ldr	r3, [pc, #444]	; (8003674 <_ZL12MX_ADC1_Initv+0x214>)
 80034b6:	2208      	movs	r2, #8
 80034b8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80034ba:	4b6e      	ldr	r3, [pc, #440]	; (8003674 <_ZL12MX_ADC1_Initv+0x214>)
 80034bc:	2200      	movs	r2, #0
 80034be:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80034c2:	4b6c      	ldr	r3, [pc, #432]	; (8003674 <_ZL12MX_ADC1_Initv+0x214>)
 80034c4:	2200      	movs	r2, #0
 80034c6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80034c8:	4b6a      	ldr	r3, [pc, #424]	; (8003674 <_ZL12MX_ADC1_Initv+0x214>)
 80034ca:	2200      	movs	r2, #0
 80034cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80034ce:	4b69      	ldr	r3, [pc, #420]	; (8003674 <_ZL12MX_ADC1_Initv+0x214>)
 80034d0:	2201      	movs	r2, #1
 80034d2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80034d6:	4b67      	ldr	r3, [pc, #412]	; (8003674 <_ZL12MX_ADC1_Initv+0x214>)
 80034d8:	2200      	movs	r2, #0
 80034da:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80034dc:	4b65      	ldr	r3, [pc, #404]	; (8003674 <_ZL12MX_ADC1_Initv+0x214>)
 80034de:	2200      	movs	r2, #0
 80034e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80034e4:	4863      	ldr	r0, [pc, #396]	; (8003674 <_ZL12MX_ADC1_Initv+0x214>)
 80034e6:	f002 f8c3 	bl	8005670 <HAL_ADC_Init>
 80034ea:	4603      	mov	r3, r0
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	bf14      	ite	ne
 80034f0:	2301      	movne	r3, #1
 80034f2:	2300      	moveq	r3, #0
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d001      	beq.n	80034fe <_ZL12MX_ADC1_Initv+0x9e>
  {
    Error_Handler();
 80034fa:	f000 fc17 	bl	8003d2c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80034fe:	2300      	movs	r3, #0
 8003500:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8003502:	f107 031c 	add.w	r3, r7, #28
 8003506:	4619      	mov	r1, r3
 8003508:	485a      	ldr	r0, [pc, #360]	; (8003674 <_ZL12MX_ADC1_Initv+0x214>)
 800350a:	f003 fb51 	bl	8006bb0 <HAL_ADCEx_MultiModeConfigChannel>
 800350e:	4603      	mov	r3, r0
 8003510:	2b00      	cmp	r3, #0
 8003512:	bf14      	ite	ne
 8003514:	2301      	movne	r3, #1
 8003516:	2300      	moveq	r3, #0
 8003518:	b2db      	uxtb	r3, r3
 800351a:	2b00      	cmp	r3, #0
 800351c:	d001      	beq.n	8003522 <_ZL12MX_ADC1_Initv+0xc2>
  {
    Error_Handler();
 800351e:	f000 fc05 	bl	8003d2c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8003522:	4b56      	ldr	r3, [pc, #344]	; (800367c <_ZL12MX_ADC1_Initv+0x21c>)
 8003524:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003526:	2306      	movs	r3, #6
 8003528:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 800352a:	2306      	movs	r3, #6
 800352c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800352e:	237f      	movs	r3, #127	; 0x7f
 8003530:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003532:	2304      	movs	r3, #4
 8003534:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8003536:	2300      	movs	r3, #0
 8003538:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800353a:	1d3b      	adds	r3, r7, #4
 800353c:	4619      	mov	r1, r3
 800353e:	484d      	ldr	r0, [pc, #308]	; (8003674 <_ZL12MX_ADC1_Initv+0x214>)
 8003540:	f002 fcde 	bl	8005f00 <HAL_ADC_ConfigChannel>
 8003544:	4603      	mov	r3, r0
 8003546:	2b00      	cmp	r3, #0
 8003548:	bf14      	ite	ne
 800354a:	2301      	movne	r3, #1
 800354c:	2300      	moveq	r3, #0
 800354e:	b2db      	uxtb	r3, r3
 8003550:	2b00      	cmp	r3, #0
 8003552:	d001      	beq.n	8003558 <_ZL12MX_ADC1_Initv+0xf8>
  {
    Error_Handler();
 8003554:	f000 fbea 	bl	8003d2c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8003558:	4b49      	ldr	r3, [pc, #292]	; (8003680 <_ZL12MX_ADC1_Initv+0x220>)
 800355a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800355c:	230c      	movs	r3, #12
 800355e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003560:	1d3b      	adds	r3, r7, #4
 8003562:	4619      	mov	r1, r3
 8003564:	4843      	ldr	r0, [pc, #268]	; (8003674 <_ZL12MX_ADC1_Initv+0x214>)
 8003566:	f002 fccb 	bl	8005f00 <HAL_ADC_ConfigChannel>
 800356a:	4603      	mov	r3, r0
 800356c:	2b00      	cmp	r3, #0
 800356e:	bf14      	ite	ne
 8003570:	2301      	movne	r3, #1
 8003572:	2300      	moveq	r3, #0
 8003574:	b2db      	uxtb	r3, r3
 8003576:	2b00      	cmp	r3, #0
 8003578:	d001      	beq.n	800357e <_ZL12MX_ADC1_Initv+0x11e>
  {
    Error_Handler();
 800357a:	f000 fbd7 	bl	8003d2c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800357e:	4b41      	ldr	r3, [pc, #260]	; (8003684 <_ZL12MX_ADC1_Initv+0x224>)
 8003580:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8003582:	2312      	movs	r3, #18
 8003584:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003586:	1d3b      	adds	r3, r7, #4
 8003588:	4619      	mov	r1, r3
 800358a:	483a      	ldr	r0, [pc, #232]	; (8003674 <_ZL12MX_ADC1_Initv+0x214>)
 800358c:	f002 fcb8 	bl	8005f00 <HAL_ADC_ConfigChannel>
 8003590:	4603      	mov	r3, r0
 8003592:	2b00      	cmp	r3, #0
 8003594:	bf14      	ite	ne
 8003596:	2301      	movne	r3, #1
 8003598:	2300      	moveq	r3, #0
 800359a:	b2db      	uxtb	r3, r3
 800359c:	2b00      	cmp	r3, #0
 800359e:	d001      	beq.n	80035a4 <_ZL12MX_ADC1_Initv+0x144>
  {
    Error_Handler();
 80035a0:	f000 fbc4 	bl	8003d2c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80035a4:	4b38      	ldr	r3, [pc, #224]	; (8003688 <_ZL12MX_ADC1_Initv+0x228>)
 80035a6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80035a8:	2318      	movs	r3, #24
 80035aa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80035ac:	1d3b      	adds	r3, r7, #4
 80035ae:	4619      	mov	r1, r3
 80035b0:	4830      	ldr	r0, [pc, #192]	; (8003674 <_ZL12MX_ADC1_Initv+0x214>)
 80035b2:	f002 fca5 	bl	8005f00 <HAL_ADC_ConfigChannel>
 80035b6:	4603      	mov	r3, r0
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	bf14      	ite	ne
 80035bc:	2301      	movne	r3, #1
 80035be:	2300      	moveq	r3, #0
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d001      	beq.n	80035ca <_ZL12MX_ADC1_Initv+0x16a>
  {
    Error_Handler();
 80035c6:	f000 fbb1 	bl	8003d2c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80035ca:	4b30      	ldr	r3, [pc, #192]	; (800368c <_ZL12MX_ADC1_Initv+0x22c>)
 80035cc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80035ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035d2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80035d4:	1d3b      	adds	r3, r7, #4
 80035d6:	4619      	mov	r1, r3
 80035d8:	4826      	ldr	r0, [pc, #152]	; (8003674 <_ZL12MX_ADC1_Initv+0x214>)
 80035da:	f002 fc91 	bl	8005f00 <HAL_ADC_ConfigChannel>
 80035de:	4603      	mov	r3, r0
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	bf14      	ite	ne
 80035e4:	2301      	movne	r3, #1
 80035e6:	2300      	moveq	r3, #0
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d001      	beq.n	80035f2 <_ZL12MX_ADC1_Initv+0x192>
  {
    Error_Handler();
 80035ee:	f000 fb9d 	bl	8003d2c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80035f2:	4b27      	ldr	r3, [pc, #156]	; (8003690 <_ZL12MX_ADC1_Initv+0x230>)
 80035f4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80035f6:	f44f 7383 	mov.w	r3, #262	; 0x106
 80035fa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80035fc:	1d3b      	adds	r3, r7, #4
 80035fe:	4619      	mov	r1, r3
 8003600:	481c      	ldr	r0, [pc, #112]	; (8003674 <_ZL12MX_ADC1_Initv+0x214>)
 8003602:	f002 fc7d 	bl	8005f00 <HAL_ADC_ConfigChannel>
 8003606:	4603      	mov	r3, r0
 8003608:	2b00      	cmp	r3, #0
 800360a:	bf14      	ite	ne
 800360c:	2301      	movne	r3, #1
 800360e:	2300      	moveq	r3, #0
 8003610:	b2db      	uxtb	r3, r3
 8003612:	2b00      	cmp	r3, #0
 8003614:	d001      	beq.n	800361a <_ZL12MX_ADC1_Initv+0x1ba>
  {
    Error_Handler();
 8003616:	f000 fb89 	bl	8003d2c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800361a:	4b1e      	ldr	r3, [pc, #120]	; (8003694 <_ZL12MX_ADC1_Initv+0x234>)
 800361c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 800361e:	f44f 7386 	mov.w	r3, #268	; 0x10c
 8003622:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003624:	1d3b      	adds	r3, r7, #4
 8003626:	4619      	mov	r1, r3
 8003628:	4812      	ldr	r0, [pc, #72]	; (8003674 <_ZL12MX_ADC1_Initv+0x214>)
 800362a:	f002 fc69 	bl	8005f00 <HAL_ADC_ConfigChannel>
 800362e:	4603      	mov	r3, r0
 8003630:	2b00      	cmp	r3, #0
 8003632:	bf14      	ite	ne
 8003634:	2301      	movne	r3, #1
 8003636:	2300      	moveq	r3, #0
 8003638:	b2db      	uxtb	r3, r3
 800363a:	2b00      	cmp	r3, #0
 800363c:	d001      	beq.n	8003642 <_ZL12MX_ADC1_Initv+0x1e2>
  {
    Error_Handler();
 800363e:	f000 fb75 	bl	8003d2c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8003642:	4b15      	ldr	r3, [pc, #84]	; (8003698 <_ZL12MX_ADC1_Initv+0x238>)
 8003644:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8003646:	f44f 7389 	mov.w	r3, #274	; 0x112
 800364a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800364c:	1d3b      	adds	r3, r7, #4
 800364e:	4619      	mov	r1, r3
 8003650:	4808      	ldr	r0, [pc, #32]	; (8003674 <_ZL12MX_ADC1_Initv+0x214>)
 8003652:	f002 fc55 	bl	8005f00 <HAL_ADC_ConfigChannel>
 8003656:	4603      	mov	r3, r0
 8003658:	2b00      	cmp	r3, #0
 800365a:	bf14      	ite	ne
 800365c:	2301      	movne	r3, #1
 800365e:	2300      	moveq	r3, #0
 8003660:	b2db      	uxtb	r3, r3
 8003662:	2b00      	cmp	r3, #0
 8003664:	d001      	beq.n	800366a <_ZL12MX_ADC1_Initv+0x20a>
  {
    Error_Handler();
 8003666:	f000 fb61 	bl	8003d2c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800366a:	bf00      	nop
 800366c:	3728      	adds	r7, #40	; 0x28
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}
 8003672:	bf00      	nop
 8003674:	2000191c 	.word	0x2000191c
 8003678:	50040000 	.word	0x50040000
 800367c:	21800100 	.word	0x21800100
 8003680:	25b00200 	.word	0x25b00200
 8003684:	2a000400 	.word	0x2a000400
 8003688:	2e300800 	.word	0x2e300800
 800368c:	32601000 	.word	0x32601000
 8003690:	36902000 	.word	0x36902000
 8003694:	3ac04000 	.word	0x3ac04000
 8003698:	3ef08000 	.word	0x3ef08000

0800369c <_ZL12MX_ADC2_Initv>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b086      	sub	sp, #24
 80036a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80036a2:	463b      	mov	r3, r7
 80036a4:	2200      	movs	r2, #0
 80036a6:	601a      	str	r2, [r3, #0]
 80036a8:	605a      	str	r2, [r3, #4]
 80036aa:	609a      	str	r2, [r3, #8]
 80036ac:	60da      	str	r2, [r3, #12]
 80036ae:	611a      	str	r2, [r3, #16]
 80036b0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80036b2:	4b2e      	ldr	r3, [pc, #184]	; (800376c <_ZL12MX_ADC2_Initv+0xd0>)
 80036b4:	4a2e      	ldr	r2, [pc, #184]	; (8003770 <_ZL12MX_ADC2_Initv+0xd4>)
 80036b6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80036b8:	4b2c      	ldr	r3, [pc, #176]	; (800376c <_ZL12MX_ADC2_Initv+0xd0>)
 80036ba:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80036be:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80036c0:	4b2a      	ldr	r3, [pc, #168]	; (800376c <_ZL12MX_ADC2_Initv+0xd0>)
 80036c2:	2200      	movs	r2, #0
 80036c4:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80036c6:	4b29      	ldr	r3, [pc, #164]	; (800376c <_ZL12MX_ADC2_Initv+0xd0>)
 80036c8:	2200      	movs	r2, #0
 80036ca:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80036cc:	4b27      	ldr	r3, [pc, #156]	; (800376c <_ZL12MX_ADC2_Initv+0xd0>)
 80036ce:	2200      	movs	r2, #0
 80036d0:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80036d2:	4b26      	ldr	r3, [pc, #152]	; (800376c <_ZL12MX_ADC2_Initv+0xd0>)
 80036d4:	2204      	movs	r2, #4
 80036d6:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80036d8:	4b24      	ldr	r3, [pc, #144]	; (800376c <_ZL12MX_ADC2_Initv+0xd0>)
 80036da:	2200      	movs	r2, #0
 80036dc:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80036de:	4b23      	ldr	r3, [pc, #140]	; (800376c <_ZL12MX_ADC2_Initv+0xd0>)
 80036e0:	2201      	movs	r2, #1
 80036e2:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 80036e4:	4b21      	ldr	r3, [pc, #132]	; (800376c <_ZL12MX_ADC2_Initv+0xd0>)
 80036e6:	2201      	movs	r2, #1
 80036e8:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80036ea:	4b20      	ldr	r3, [pc, #128]	; (800376c <_ZL12MX_ADC2_Initv+0xd0>)
 80036ec:	2200      	movs	r2, #0
 80036ee:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80036f2:	4b1e      	ldr	r3, [pc, #120]	; (800376c <_ZL12MX_ADC2_Initv+0xd0>)
 80036f4:	2200      	movs	r2, #0
 80036f6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80036f8:	4b1c      	ldr	r3, [pc, #112]	; (800376c <_ZL12MX_ADC2_Initv+0xd0>)
 80036fa:	2200      	movs	r2, #0
 80036fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80036fe:	4b1b      	ldr	r3, [pc, #108]	; (800376c <_ZL12MX_ADC2_Initv+0xd0>)
 8003700:	2201      	movs	r2, #1
 8003702:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003706:	4b19      	ldr	r3, [pc, #100]	; (800376c <_ZL12MX_ADC2_Initv+0xd0>)
 8003708:	2200      	movs	r2, #0
 800370a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 800370c:	4b17      	ldr	r3, [pc, #92]	; (800376c <_ZL12MX_ADC2_Initv+0xd0>)
 800370e:	2200      	movs	r2, #0
 8003710:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8003714:	4815      	ldr	r0, [pc, #84]	; (800376c <_ZL12MX_ADC2_Initv+0xd0>)
 8003716:	f001 ffab 	bl	8005670 <HAL_ADC_Init>
 800371a:	4603      	mov	r3, r0
 800371c:	2b00      	cmp	r3, #0
 800371e:	bf14      	ite	ne
 8003720:	2301      	movne	r3, #1
 8003722:	2300      	moveq	r3, #0
 8003724:	b2db      	uxtb	r3, r3
 8003726:	2b00      	cmp	r3, #0
 8003728:	d001      	beq.n	800372e <_ZL12MX_ADC2_Initv+0x92>
  {
    Error_Handler();
 800372a:	f000 faff 	bl	8003d2c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 800372e:	4b11      	ldr	r3, [pc, #68]	; (8003774 <_ZL12MX_ADC2_Initv+0xd8>)
 8003730:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003732:	2306      	movs	r3, #6
 8003734:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8003736:	2306      	movs	r3, #6
 8003738:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800373a:	237f      	movs	r3, #127	; 0x7f
 800373c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_1;
 800373e:	2300      	movs	r3, #0
 8003740:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8003742:	2300      	movs	r3, #0
 8003744:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003746:	463b      	mov	r3, r7
 8003748:	4619      	mov	r1, r3
 800374a:	4808      	ldr	r0, [pc, #32]	; (800376c <_ZL12MX_ADC2_Initv+0xd0>)
 800374c:	f002 fbd8 	bl	8005f00 <HAL_ADC_ConfigChannel>
 8003750:	4603      	mov	r3, r0
 8003752:	2b00      	cmp	r3, #0
 8003754:	bf14      	ite	ne
 8003756:	2301      	movne	r3, #1
 8003758:	2300      	moveq	r3, #0
 800375a:	b2db      	uxtb	r3, r3
 800375c:	2b00      	cmp	r3, #0
 800375e:	d001      	beq.n	8003764 <_ZL12MX_ADC2_Initv+0xc8>
  {
    Error_Handler();
 8003760:	f000 fae4 	bl	8003d2c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8003764:	bf00      	nop
 8003766:	3718      	adds	r7, #24
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}
 800376c:	20001984 	.word	0x20001984
 8003770:	50040100 	.word	0x50040100
 8003774:	43210000 	.word	0x43210000

08003778 <_ZL12MX_CAN1_Initv>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800377c:	4b1a      	ldr	r3, [pc, #104]	; (80037e8 <_ZL12MX_CAN1_Initv+0x70>)
 800377e:	4a1b      	ldr	r2, [pc, #108]	; (80037ec <_ZL12MX_CAN1_Initv+0x74>)
 8003780:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 2;
 8003782:	4b19      	ldr	r3, [pc, #100]	; (80037e8 <_ZL12MX_CAN1_Initv+0x70>)
 8003784:	2202      	movs	r2, #2
 8003786:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8003788:	4b17      	ldr	r3, [pc, #92]	; (80037e8 <_ZL12MX_CAN1_Initv+0x70>)
 800378a:	2200      	movs	r2, #0
 800378c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800378e:	4b16      	ldr	r3, [pc, #88]	; (80037e8 <_ZL12MX_CAN1_Initv+0x70>)
 8003790:	2200      	movs	r2, #0
 8003792:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8003794:	4b14      	ldr	r3, [pc, #80]	; (80037e8 <_ZL12MX_CAN1_Initv+0x70>)
 8003796:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 800379a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 800379c:	4b12      	ldr	r3, [pc, #72]	; (80037e8 <_ZL12MX_CAN1_Initv+0x70>)
 800379e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80037a2:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80037a4:	4b10      	ldr	r3, [pc, #64]	; (80037e8 <_ZL12MX_CAN1_Initv+0x70>)
 80037a6:	2200      	movs	r2, #0
 80037a8:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80037aa:	4b0f      	ldr	r3, [pc, #60]	; (80037e8 <_ZL12MX_CAN1_Initv+0x70>)
 80037ac:	2200      	movs	r2, #0
 80037ae:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80037b0:	4b0d      	ldr	r3, [pc, #52]	; (80037e8 <_ZL12MX_CAN1_Initv+0x70>)
 80037b2:	2200      	movs	r2, #0
 80037b4:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80037b6:	4b0c      	ldr	r3, [pc, #48]	; (80037e8 <_ZL12MX_CAN1_Initv+0x70>)
 80037b8:	2200      	movs	r2, #0
 80037ba:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80037bc:	4b0a      	ldr	r3, [pc, #40]	; (80037e8 <_ZL12MX_CAN1_Initv+0x70>)
 80037be:	2200      	movs	r2, #0
 80037c0:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80037c2:	4b09      	ldr	r3, [pc, #36]	; (80037e8 <_ZL12MX_CAN1_Initv+0x70>)
 80037c4:	2200      	movs	r2, #0
 80037c6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80037c8:	4807      	ldr	r0, [pc, #28]	; (80037e8 <_ZL12MX_CAN1_Initv+0x70>)
 80037ca:	f003 fa95 	bl	8006cf8 <HAL_CAN_Init>
 80037ce:	4603      	mov	r3, r0
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	bf14      	ite	ne
 80037d4:	2301      	movne	r3, #1
 80037d6:	2300      	moveq	r3, #0
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d001      	beq.n	80037e2 <_ZL12MX_CAN1_Initv+0x6a>
  {
    Error_Handler();
 80037de:	f000 faa5 	bl	8003d2c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80037e2:	bf00      	nop
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	bf00      	nop
 80037e8:	20001aac 	.word	0x20001aac
 80037ec:	40006400 	.word	0x40006400

080037f0 <_ZL11MX_RTC_Initv>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b086      	sub	sp, #24
 80037f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80037f6:	1d3b      	adds	r3, r7, #4
 80037f8:	2200      	movs	r2, #0
 80037fa:	601a      	str	r2, [r3, #0]
 80037fc:	605a      	str	r2, [r3, #4]
 80037fe:	609a      	str	r2, [r3, #8]
 8003800:	60da      	str	r2, [r3, #12]
 8003802:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8003804:	2300      	movs	r3, #0
 8003806:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003808:	4b2f      	ldr	r3, [pc, #188]	; (80038c8 <_ZL11MX_RTC_Initv+0xd8>)
 800380a:	4a30      	ldr	r2, [pc, #192]	; (80038cc <_ZL11MX_RTC_Initv+0xdc>)
 800380c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800380e:	4b2e      	ldr	r3, [pc, #184]	; (80038c8 <_ZL11MX_RTC_Initv+0xd8>)
 8003810:	2200      	movs	r2, #0
 8003812:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8003814:	4b2c      	ldr	r3, [pc, #176]	; (80038c8 <_ZL11MX_RTC_Initv+0xd8>)
 8003816:	227f      	movs	r2, #127	; 0x7f
 8003818:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 800381a:	4b2b      	ldr	r3, [pc, #172]	; (80038c8 <_ZL11MX_RTC_Initv+0xd8>)
 800381c:	22ff      	movs	r2, #255	; 0xff
 800381e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003820:	4b29      	ldr	r3, [pc, #164]	; (80038c8 <_ZL11MX_RTC_Initv+0xd8>)
 8003822:	2200      	movs	r2, #0
 8003824:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8003826:	4b28      	ldr	r3, [pc, #160]	; (80038c8 <_ZL11MX_RTC_Initv+0xd8>)
 8003828:	2200      	movs	r2, #0
 800382a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800382c:	4b26      	ldr	r3, [pc, #152]	; (80038c8 <_ZL11MX_RTC_Initv+0xd8>)
 800382e:	2200      	movs	r2, #0
 8003830:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003832:	4b25      	ldr	r3, [pc, #148]	; (80038c8 <_ZL11MX_RTC_Initv+0xd8>)
 8003834:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003838:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 800383a:	4b23      	ldr	r3, [pc, #140]	; (80038c8 <_ZL11MX_RTC_Initv+0xd8>)
 800383c:	2200      	movs	r2, #0
 800383e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003840:	4821      	ldr	r0, [pc, #132]	; (80038c8 <_ZL11MX_RTC_Initv+0xd8>)
 8003842:	f007 fd57 	bl	800b2f4 <HAL_RTC_Init>
 8003846:	4603      	mov	r3, r0
 8003848:	2b00      	cmp	r3, #0
 800384a:	bf14      	ite	ne
 800384c:	2301      	movne	r3, #1
 800384e:	2300      	moveq	r3, #0
 8003850:	b2db      	uxtb	r3, r3
 8003852:	2b00      	cmp	r3, #0
 8003854:	d001      	beq.n	800385a <_ZL11MX_RTC_Initv+0x6a>
  {
    Error_Handler();
 8003856:	f000 fa69 	bl	8003d2c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800385a:	2300      	movs	r3, #0
 800385c:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 800385e:	2300      	movs	r3, #0
 8003860:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8003862:	2300      	movs	r3, #0
 8003864:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003866:	2300      	movs	r3, #0
 8003868:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800386a:	2300      	movs	r3, #0
 800386c:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800386e:	1d3b      	adds	r3, r7, #4
 8003870:	2201      	movs	r2, #1
 8003872:	4619      	mov	r1, r3
 8003874:	4814      	ldr	r0, [pc, #80]	; (80038c8 <_ZL11MX_RTC_Initv+0xd8>)
 8003876:	f007 fdcd 	bl	800b414 <HAL_RTC_SetTime>
 800387a:	4603      	mov	r3, r0
 800387c:	2b00      	cmp	r3, #0
 800387e:	bf14      	ite	ne
 8003880:	2301      	movne	r3, #1
 8003882:	2300      	moveq	r3, #0
 8003884:	b2db      	uxtb	r3, r3
 8003886:	2b00      	cmp	r3, #0
 8003888:	d001      	beq.n	800388e <_ZL11MX_RTC_Initv+0x9e>
  {
    Error_Handler();
 800388a:	f000 fa4f 	bl	8003d2c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800388e:	2301      	movs	r3, #1
 8003890:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8003892:	2301      	movs	r3, #1
 8003894:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8003896:	2301      	movs	r3, #1
 8003898:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 800389a:	2300      	movs	r3, #0
 800389c:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800389e:	463b      	mov	r3, r7
 80038a0:	2201      	movs	r2, #1
 80038a2:	4619      	mov	r1, r3
 80038a4:	4808      	ldr	r0, [pc, #32]	; (80038c8 <_ZL11MX_RTC_Initv+0xd8>)
 80038a6:	f007 feb7 	bl	800b618 <HAL_RTC_SetDate>
 80038aa:	4603      	mov	r3, r0
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	bf14      	ite	ne
 80038b0:	2301      	movne	r3, #1
 80038b2:	2300      	moveq	r3, #0
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d001      	beq.n	80038be <_ZL11MX_RTC_Initv+0xce>
  {
    Error_Handler();
 80038ba:	f000 fa37 	bl	8003d2c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80038be:	bf00      	nop
 80038c0:	3718      	adds	r7, #24
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	bf00      	nop
 80038c8:	20001ad4 	.word	0x20001ad4
 80038cc:	40002800 	.word	0x40002800

080038d0 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80038d4:	4b1d      	ldr	r3, [pc, #116]	; (800394c <_ZL12MX_SPI1_Initv+0x7c>)
 80038d6:	4a1e      	ldr	r2, [pc, #120]	; (8003950 <_ZL12MX_SPI1_Initv+0x80>)
 80038d8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80038da:	4b1c      	ldr	r3, [pc, #112]	; (800394c <_ZL12MX_SPI1_Initv+0x7c>)
 80038dc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80038e0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80038e2:	4b1a      	ldr	r3, [pc, #104]	; (800394c <_ZL12MX_SPI1_Initv+0x7c>)
 80038e4:	2200      	movs	r2, #0
 80038e6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80038e8:	4b18      	ldr	r3, [pc, #96]	; (800394c <_ZL12MX_SPI1_Initv+0x7c>)
 80038ea:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80038ee:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80038f0:	4b16      	ldr	r3, [pc, #88]	; (800394c <_ZL12MX_SPI1_Initv+0x7c>)
 80038f2:	2202      	movs	r2, #2
 80038f4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80038f6:	4b15      	ldr	r3, [pc, #84]	; (800394c <_ZL12MX_SPI1_Initv+0x7c>)
 80038f8:	2201      	movs	r2, #1
 80038fa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80038fc:	4b13      	ldr	r3, [pc, #76]	; (800394c <_ZL12MX_SPI1_Initv+0x7c>)
 80038fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003902:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8003904:	4b11      	ldr	r3, [pc, #68]	; (800394c <_ZL12MX_SPI1_Initv+0x7c>)
 8003906:	2228      	movs	r2, #40	; 0x28
 8003908:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800390a:	4b10      	ldr	r3, [pc, #64]	; (800394c <_ZL12MX_SPI1_Initv+0x7c>)
 800390c:	2200      	movs	r2, #0
 800390e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003910:	4b0e      	ldr	r3, [pc, #56]	; (800394c <_ZL12MX_SPI1_Initv+0x7c>)
 8003912:	2200      	movs	r2, #0
 8003914:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003916:	4b0d      	ldr	r3, [pc, #52]	; (800394c <_ZL12MX_SPI1_Initv+0x7c>)
 8003918:	2200      	movs	r2, #0
 800391a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800391c:	4b0b      	ldr	r3, [pc, #44]	; (800394c <_ZL12MX_SPI1_Initv+0x7c>)
 800391e:	2207      	movs	r2, #7
 8003920:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003922:	4b0a      	ldr	r3, [pc, #40]	; (800394c <_ZL12MX_SPI1_Initv+0x7c>)
 8003924:	2200      	movs	r2, #0
 8003926:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8003928:	4b08      	ldr	r3, [pc, #32]	; (800394c <_ZL12MX_SPI1_Initv+0x7c>)
 800392a:	2200      	movs	r2, #0
 800392c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800392e:	4807      	ldr	r0, [pc, #28]	; (800394c <_ZL12MX_SPI1_Initv+0x7c>)
 8003930:	f008 f81c 	bl	800b96c <HAL_SPI_Init>
 8003934:	4603      	mov	r3, r0
 8003936:	2b00      	cmp	r3, #0
 8003938:	bf14      	ite	ne
 800393a:	2301      	movne	r3, #1
 800393c:	2300      	moveq	r3, #0
 800393e:	b2db      	uxtb	r3, r3
 8003940:	2b00      	cmp	r3, #0
 8003942:	d001      	beq.n	8003948 <_ZL12MX_SPI1_Initv+0x78>
  {
    Error_Handler();
 8003944:	f000 f9f2 	bl	8003d2c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003948:	bf00      	nop
 800394a:	bd80      	pop	{r7, pc}
 800394c:	20001b08 	.word	0x20001b08
 8003950:	40013000 	.word	0x40013000

08003954 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b088      	sub	sp, #32
 8003958:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800395a:	f107 0310 	add.w	r3, r7, #16
 800395e:	2200      	movs	r2, #0
 8003960:	601a      	str	r2, [r3, #0]
 8003962:	605a      	str	r2, [r3, #4]
 8003964:	609a      	str	r2, [r3, #8]
 8003966:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003968:	1d3b      	adds	r3, r7, #4
 800396a:	2200      	movs	r2, #0
 800396c:	601a      	str	r2, [r3, #0]
 800396e:	605a      	str	r2, [r3, #4]
 8003970:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003972:	4b25      	ldr	r3, [pc, #148]	; (8003a08 <_ZL12MX_TIM3_Initv+0xb4>)
 8003974:	4a25      	ldr	r2, [pc, #148]	; (8003a0c <_ZL12MX_TIM3_Initv+0xb8>)
 8003976:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 6399;
 8003978:	4b23      	ldr	r3, [pc, #140]	; (8003a08 <_ZL12MX_TIM3_Initv+0xb4>)
 800397a:	f641 02ff 	movw	r2, #6399	; 0x18ff
 800397e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003980:	4b21      	ldr	r3, [pc, #132]	; (8003a08 <_ZL12MX_TIM3_Initv+0xb4>)
 8003982:	2200      	movs	r2, #0
 8003984:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 49;
 8003986:	4b20      	ldr	r3, [pc, #128]	; (8003a08 <_ZL12MX_TIM3_Initv+0xb4>)
 8003988:	2231      	movs	r2, #49	; 0x31
 800398a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800398c:	4b1e      	ldr	r3, [pc, #120]	; (8003a08 <_ZL12MX_TIM3_Initv+0xb4>)
 800398e:	2200      	movs	r2, #0
 8003990:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003992:	4b1d      	ldr	r3, [pc, #116]	; (8003a08 <_ZL12MX_TIM3_Initv+0xb4>)
 8003994:	2200      	movs	r2, #0
 8003996:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003998:	481b      	ldr	r0, [pc, #108]	; (8003a08 <_ZL12MX_TIM3_Initv+0xb4>)
 800399a:	f008 fd6f 	bl	800c47c <HAL_TIM_Base_Init>
 800399e:	4603      	mov	r3, r0
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	bf14      	ite	ne
 80039a4:	2301      	movne	r3, #1
 80039a6:	2300      	moveq	r3, #0
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d001      	beq.n	80039b2 <_ZL12MX_TIM3_Initv+0x5e>
  {
    Error_Handler();
 80039ae:	f000 f9bd 	bl	8003d2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80039b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80039b6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80039b8:	f107 0310 	add.w	r3, r7, #16
 80039bc:	4619      	mov	r1, r3
 80039be:	4812      	ldr	r0, [pc, #72]	; (8003a08 <_ZL12MX_TIM3_Initv+0xb4>)
 80039c0:	f008 ffab 	bl	800c91a <HAL_TIM_ConfigClockSource>
 80039c4:	4603      	mov	r3, r0
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	bf14      	ite	ne
 80039ca:	2301      	movne	r3, #1
 80039cc:	2300      	moveq	r3, #0
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d001      	beq.n	80039d8 <_ZL12MX_TIM3_Initv+0x84>
  {
    Error_Handler();
 80039d4:	f000 f9aa 	bl	8003d2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80039d8:	2300      	movs	r3, #0
 80039da:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80039dc:	2300      	movs	r3, #0
 80039de:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80039e0:	1d3b      	adds	r3, r7, #4
 80039e2:	4619      	mov	r1, r3
 80039e4:	4808      	ldr	r0, [pc, #32]	; (8003a08 <_ZL12MX_TIM3_Initv+0xb4>)
 80039e6:	f009 f9bd 	bl	800cd64 <HAL_TIMEx_MasterConfigSynchronization>
 80039ea:	4603      	mov	r3, r0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	bf14      	ite	ne
 80039f0:	2301      	movne	r3, #1
 80039f2:	2300      	moveq	r3, #0
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d001      	beq.n	80039fe <_ZL12MX_TIM3_Initv+0xaa>
  {
    Error_Handler();
 80039fa:	f000 f997 	bl	8003d2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80039fe:	bf00      	nop
 8003a00:	3720      	adds	r7, #32
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	bf00      	nop
 8003a08:	20001b6c 	.word	0x20001b6c
 8003a0c:	40000400 	.word	0x40000400

08003a10 <_ZL12MX_TIM6_Initv>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b084      	sub	sp, #16
 8003a14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a16:	1d3b      	adds	r3, r7, #4
 8003a18:	2200      	movs	r2, #0
 8003a1a:	601a      	str	r2, [r3, #0]
 8003a1c:	605a      	str	r2, [r3, #4]
 8003a1e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003a20:	4b19      	ldr	r3, [pc, #100]	; (8003a88 <_ZL12MX_TIM6_Initv+0x78>)
 8003a22:	4a1a      	ldr	r2, [pc, #104]	; (8003a8c <_ZL12MX_TIM6_Initv+0x7c>)
 8003a24:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 2399;
 8003a26:	4b18      	ldr	r3, [pc, #96]	; (8003a88 <_ZL12MX_TIM6_Initv+0x78>)
 8003a28:	f640 125f 	movw	r2, #2399	; 0x95f
 8003a2c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a2e:	4b16      	ldr	r3, [pc, #88]	; (8003a88 <_ZL12MX_TIM6_Initv+0x78>)
 8003a30:	2200      	movs	r2, #0
 8003a32:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9;
 8003a34:	4b14      	ldr	r3, [pc, #80]	; (8003a88 <_ZL12MX_TIM6_Initv+0x78>)
 8003a36:	2209      	movs	r2, #9
 8003a38:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a3a:	4b13      	ldr	r3, [pc, #76]	; (8003a88 <_ZL12MX_TIM6_Initv+0x78>)
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003a40:	4811      	ldr	r0, [pc, #68]	; (8003a88 <_ZL12MX_TIM6_Initv+0x78>)
 8003a42:	f008 fd1b 	bl	800c47c <HAL_TIM_Base_Init>
 8003a46:	4603      	mov	r3, r0
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	bf14      	ite	ne
 8003a4c:	2301      	movne	r3, #1
 8003a4e:	2300      	moveq	r3, #0
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d001      	beq.n	8003a5a <_ZL12MX_TIM6_Initv+0x4a>
  {
    Error_Handler();
 8003a56:	f000 f969 	bl	8003d2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003a5a:	2320      	movs	r3, #32
 8003a5c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003a62:	1d3b      	adds	r3, r7, #4
 8003a64:	4619      	mov	r1, r3
 8003a66:	4808      	ldr	r0, [pc, #32]	; (8003a88 <_ZL12MX_TIM6_Initv+0x78>)
 8003a68:	f009 f97c 	bl	800cd64 <HAL_TIMEx_MasterConfigSynchronization>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	bf14      	ite	ne
 8003a72:	2301      	movne	r3, #1
 8003a74:	2300      	moveq	r3, #0
 8003a76:	b2db      	uxtb	r3, r3
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d001      	beq.n	8003a80 <_ZL12MX_TIM6_Initv+0x70>
  {
    Error_Handler();
 8003a7c:	f000 f956 	bl	8003d2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003a80:	bf00      	nop
 8003a82:	3710      	adds	r7, #16
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}
 8003a88:	20001bb8 	.word	0x20001bb8
 8003a8c:	40001000 	.word	0x40001000

08003a90 <_ZL12MX_TIM8_Initv>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b088      	sub	sp, #32
 8003a94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003a96:	f107 0310 	add.w	r3, r7, #16
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	601a      	str	r2, [r3, #0]
 8003a9e:	605a      	str	r2, [r3, #4]
 8003aa0:	609a      	str	r2, [r3, #8]
 8003aa2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003aa4:	1d3b      	adds	r3, r7, #4
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	601a      	str	r2, [r3, #0]
 8003aaa:	605a      	str	r2, [r3, #4]
 8003aac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8003aae:	4b27      	ldr	r3, [pc, #156]	; (8003b4c <_ZL12MX_TIM8_Initv+0xbc>)
 8003ab0:	4a27      	ldr	r2, [pc, #156]	; (8003b50 <_ZL12MX_TIM8_Initv+0xc0>)
 8003ab2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 95;
 8003ab4:	4b25      	ldr	r3, [pc, #148]	; (8003b4c <_ZL12MX_TIM8_Initv+0xbc>)
 8003ab6:	225f      	movs	r2, #95	; 0x5f
 8003ab8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003aba:	4b24      	ldr	r3, [pc, #144]	; (8003b4c <_ZL12MX_TIM8_Initv+0xbc>)
 8003abc:	2200      	movs	r2, #0
 8003abe:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 49;
 8003ac0:	4b22      	ldr	r3, [pc, #136]	; (8003b4c <_ZL12MX_TIM8_Initv+0xbc>)
 8003ac2:	2231      	movs	r2, #49	; 0x31
 8003ac4:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ac6:	4b21      	ldr	r3, [pc, #132]	; (8003b4c <_ZL12MX_TIM8_Initv+0xbc>)
 8003ac8:	2200      	movs	r2, #0
 8003aca:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8003acc:	4b1f      	ldr	r3, [pc, #124]	; (8003b4c <_ZL12MX_TIM8_Initv+0xbc>)
 8003ace:	2200      	movs	r2, #0
 8003ad0:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ad2:	4b1e      	ldr	r3, [pc, #120]	; (8003b4c <_ZL12MX_TIM8_Initv+0xbc>)
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8003ad8:	481c      	ldr	r0, [pc, #112]	; (8003b4c <_ZL12MX_TIM8_Initv+0xbc>)
 8003ada:	f008 fccf 	bl	800c47c <HAL_TIM_Base_Init>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	bf14      	ite	ne
 8003ae4:	2301      	movne	r3, #1
 8003ae6:	2300      	moveq	r3, #0
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d001      	beq.n	8003af2 <_ZL12MX_TIM8_Initv+0x62>
  {
    Error_Handler();
 8003aee:	f000 f91d 	bl	8003d2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003af2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003af6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8003af8:	f107 0310 	add.w	r3, r7, #16
 8003afc:	4619      	mov	r1, r3
 8003afe:	4813      	ldr	r0, [pc, #76]	; (8003b4c <_ZL12MX_TIM8_Initv+0xbc>)
 8003b00:	f008 ff0b 	bl	800c91a <HAL_TIM_ConfigClockSource>
 8003b04:	4603      	mov	r3, r0
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	bf14      	ite	ne
 8003b0a:	2301      	movne	r3, #1
 8003b0c:	2300      	moveq	r3, #0
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d001      	beq.n	8003b18 <_ZL12MX_TIM8_Initv+0x88>
  {
    Error_Handler();
 8003b14:	f000 f90a 	bl	8003d2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003b18:	2320      	movs	r3, #32
 8003b1a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_UPDATE;
 8003b1c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003b20:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b22:	2300      	movs	r3, #0
 8003b24:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003b26:	1d3b      	adds	r3, r7, #4
 8003b28:	4619      	mov	r1, r3
 8003b2a:	4808      	ldr	r0, [pc, #32]	; (8003b4c <_ZL12MX_TIM8_Initv+0xbc>)
 8003b2c:	f009 f91a 	bl	800cd64 <HAL_TIMEx_MasterConfigSynchronization>
 8003b30:	4603      	mov	r3, r0
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	bf14      	ite	ne
 8003b36:	2301      	movne	r3, #1
 8003b38:	2300      	moveq	r3, #0
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d001      	beq.n	8003b44 <_ZL12MX_TIM8_Initv+0xb4>
  {
    Error_Handler();
 8003b40:	f000 f8f4 	bl	8003d2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8003b44:	bf00      	nop
 8003b46:	3720      	adds	r7, #32
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	20001c04 	.word	0x20001c04
 8003b50:	40013400 	.word	0x40013400

08003b54 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b084      	sub	sp, #16
 8003b58:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8003b5a:	4b1c      	ldr	r3, [pc, #112]	; (8003bcc <_ZL11MX_DMA_Initv+0x78>)
 8003b5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b5e:	4a1b      	ldr	r2, [pc, #108]	; (8003bcc <_ZL11MX_DMA_Initv+0x78>)
 8003b60:	f043 0304 	orr.w	r3, r3, #4
 8003b64:	6493      	str	r3, [r2, #72]	; 0x48
 8003b66:	4b19      	ldr	r3, [pc, #100]	; (8003bcc <_ZL11MX_DMA_Initv+0x78>)
 8003b68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b6a:	f003 0304 	and.w	r3, r3, #4
 8003b6e:	60fb      	str	r3, [r7, #12]
 8003b70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003b72:	4b16      	ldr	r3, [pc, #88]	; (8003bcc <_ZL11MX_DMA_Initv+0x78>)
 8003b74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b76:	4a15      	ldr	r2, [pc, #84]	; (8003bcc <_ZL11MX_DMA_Initv+0x78>)
 8003b78:	f043 0301 	orr.w	r3, r3, #1
 8003b7c:	6493      	str	r3, [r2, #72]	; 0x48
 8003b7e:	4b13      	ldr	r3, [pc, #76]	; (8003bcc <_ZL11MX_DMA_Initv+0x78>)
 8003b80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b82:	f003 0301 	and.w	r3, r3, #1
 8003b86:	60bb      	str	r3, [r7, #8]
 8003b88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003b8a:	4b10      	ldr	r3, [pc, #64]	; (8003bcc <_ZL11MX_DMA_Initv+0x78>)
 8003b8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b8e:	4a0f      	ldr	r2, [pc, #60]	; (8003bcc <_ZL11MX_DMA_Initv+0x78>)
 8003b90:	f043 0302 	orr.w	r3, r3, #2
 8003b94:	6493      	str	r3, [r2, #72]	; 0x48
 8003b96:	4b0d      	ldr	r3, [pc, #52]	; (8003bcc <_ZL11MX_DMA_Initv+0x78>)
 8003b98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b9a:	f003 0302 	and.w	r3, r3, #2
 8003b9e:	607b      	str	r3, [r7, #4]
 8003ba0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	2105      	movs	r1, #5
 8003ba6:	200b      	movs	r0, #11
 8003ba8:	f003 ff9e 	bl	8007ae8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003bac:	200b      	movs	r0, #11
 8003bae:	f003 ffb7 	bl	8007b20 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 5, 0);
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	2105      	movs	r1, #5
 8003bb6:	2038      	movs	r0, #56	; 0x38
 8003bb8:	f003 ff96 	bl	8007ae8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8003bbc:	2038      	movs	r0, #56	; 0x38
 8003bbe:	f003 ffaf 	bl	8007b20 <HAL_NVIC_EnableIRQ>

}
 8003bc2:	bf00      	nop
 8003bc4:	3710      	adds	r7, #16
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	bf00      	nop
 8003bcc:	40021000 	.word	0x40021000

08003bd0 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b08a      	sub	sp, #40	; 0x28
 8003bd4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bd6:	f107 0314 	add.w	r3, r7, #20
 8003bda:	2200      	movs	r2, #0
 8003bdc:	601a      	str	r2, [r3, #0]
 8003bde:	605a      	str	r2, [r3, #4]
 8003be0:	609a      	str	r2, [r3, #8]
 8003be2:	60da      	str	r2, [r3, #12]
 8003be4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003be6:	4b40      	ldr	r3, [pc, #256]	; (8003ce8 <_ZL12MX_GPIO_Initv+0x118>)
 8003be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bea:	4a3f      	ldr	r2, [pc, #252]	; (8003ce8 <_ZL12MX_GPIO_Initv+0x118>)
 8003bec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bf0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003bf2:	4b3d      	ldr	r3, [pc, #244]	; (8003ce8 <_ZL12MX_GPIO_Initv+0x118>)
 8003bf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bfa:	613b      	str	r3, [r7, #16]
 8003bfc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bfe:	4b3a      	ldr	r3, [pc, #232]	; (8003ce8 <_ZL12MX_GPIO_Initv+0x118>)
 8003c00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c02:	4a39      	ldr	r2, [pc, #228]	; (8003ce8 <_ZL12MX_GPIO_Initv+0x118>)
 8003c04:	f043 0301 	orr.w	r3, r3, #1
 8003c08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c0a:	4b37      	ldr	r3, [pc, #220]	; (8003ce8 <_ZL12MX_GPIO_Initv+0x118>)
 8003c0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c0e:	f003 0301 	and.w	r3, r3, #1
 8003c12:	60fb      	str	r3, [r7, #12]
 8003c14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c16:	4b34      	ldr	r3, [pc, #208]	; (8003ce8 <_ZL12MX_GPIO_Initv+0x118>)
 8003c18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c1a:	4a33      	ldr	r2, [pc, #204]	; (8003ce8 <_ZL12MX_GPIO_Initv+0x118>)
 8003c1c:	f043 0304 	orr.w	r3, r3, #4
 8003c20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c22:	4b31      	ldr	r3, [pc, #196]	; (8003ce8 <_ZL12MX_GPIO_Initv+0x118>)
 8003c24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c26:	f003 0304 	and.w	r3, r3, #4
 8003c2a:	60bb      	str	r3, [r7, #8]
 8003c2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c2e:	4b2e      	ldr	r3, [pc, #184]	; (8003ce8 <_ZL12MX_GPIO_Initv+0x118>)
 8003c30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c32:	4a2d      	ldr	r2, [pc, #180]	; (8003ce8 <_ZL12MX_GPIO_Initv+0x118>)
 8003c34:	f043 0302 	orr.w	r3, r3, #2
 8003c38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c3a:	4b2b      	ldr	r3, [pc, #172]	; (8003ce8 <_ZL12MX_GPIO_Initv+0x118>)
 8003c3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c3e:	f003 0302 	and.w	r3, r3, #2
 8003c42:	607b      	str	r3, [r7, #4]
 8003c44:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EFUSE_Pin|SPI1_CS_Pin, GPIO_PIN_RESET);
 8003c46:	2200      	movs	r2, #0
 8003c48:	f248 0104 	movw	r1, #32772	; 0x8004
 8003c4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c50:	f004 fb90 	bl	8008374 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FUSE_VOLTAGE_GPIO_Port, FUSE_VOLTAGE_Pin, GPIO_PIN_RESET);
 8003c54:	2200      	movs	r2, #0
 8003c56:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003c5a:	4824      	ldr	r0, [pc, #144]	; (8003cec <_ZL12MX_GPIO_Initv+0x11c>)
 8003c5c:	f004 fb8a 	bl	8008374 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin, GPIO_PIN_SET);
 8003c60:	2201      	movs	r2, #1
 8003c62:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8003c66:	4822      	ldr	r0, [pc, #136]	; (8003cf0 <_ZL12MX_GPIO_Initv+0x120>)
 8003c68:	f004 fb84 	bl	8008374 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : EFUSE_Pin SPI1_CS_Pin */
  GPIO_InitStruct.Pin = EFUSE_Pin|SPI1_CS_Pin;
 8003c6c:	f248 0304 	movw	r3, #32772	; 0x8004
 8003c70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c72:	2301      	movs	r3, #1
 8003c74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c76:	2300      	movs	r3, #0
 8003c78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c7e:	f107 0314 	add.w	r3, r7, #20
 8003c82:	4619      	mov	r1, r3
 8003c84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c88:	f004 f9ca 	bl	8008020 <HAL_GPIO_Init>

  /*Configure GPIO pin : INTERLOCK_Pin */
  GPIO_InitStruct.Pin = INTERLOCK_Pin;
 8003c8c:	2304      	movs	r3, #4
 8003c8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c90:	2300      	movs	r3, #0
 8003c92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c94:	2301      	movs	r3, #1
 8003c96:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INTERLOCK_GPIO_Port, &GPIO_InitStruct);
 8003c98:	f107 0314 	add.w	r3, r7, #20
 8003c9c:	4619      	mov	r1, r3
 8003c9e:	4813      	ldr	r0, [pc, #76]	; (8003cec <_ZL12MX_GPIO_Initv+0x11c>)
 8003ca0:	f004 f9be 	bl	8008020 <HAL_GPIO_Init>

  /*Configure GPIO pin : FUSE_VOLTAGE_Pin */
  GPIO_InitStruct.Pin = FUSE_VOLTAGE_Pin;
 8003ca4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003ca8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003caa:	2301      	movs	r3, #1
 8003cac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(FUSE_VOLTAGE_GPIO_Port, &GPIO_InitStruct);
 8003cb6:	f107 0314 	add.w	r3, r7, #20
 8003cba:	4619      	mov	r1, r3
 8003cbc:	480b      	ldr	r0, [pc, #44]	; (8003cec <_ZL12MX_GPIO_Initv+0x11c>)
 8003cbe:	f004 f9af 	bl	8008020 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_1_Pin LED_2_Pin LED_3_Pin LED_4_Pin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin;
 8003cc2:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8003cc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003cd4:	f107 0314 	add.w	r3, r7, #20
 8003cd8:	4619      	mov	r1, r3
 8003cda:	4805      	ldr	r0, [pc, #20]	; (8003cf0 <_ZL12MX_GPIO_Initv+0x120>)
 8003cdc:	f004 f9a0 	bl	8008020 <HAL_GPIO_Init>

}
 8003ce0:	bf00      	nop
 8003ce2:	3728      	adds	r7, #40	; 0x28
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}
 8003ce8:	40021000 	.word	0x40021000
 8003cec:	48000400 	.word	0x48000400
 8003cf0:	48000800 	.word	0x48000800

08003cf4 <_Z16StartDefaultTaskPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b082      	sub	sp, #8
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8003cfc:	f00e fe8e 	bl	8012a1c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8003d00:	2001      	movs	r0, #1
 8003d02:	f00c f9eb 	bl	80100dc <osDelay>
 8003d06:	e7fb      	b.n	8003d00 <_Z16StartDefaultTaskPv+0xc>

08003d08 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b082      	sub	sp, #8
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM16) {
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a04      	ldr	r2, [pc, #16]	; (8003d28 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d101      	bne.n	8003d1e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003d1a:	f001 fa35 	bl	8005188 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003d1e:	bf00      	nop
 8003d20:	3708      	adds	r7, #8
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}
 8003d26:	bf00      	nop
 8003d28:	40014400 	.word	0x40014400

08003d2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003d30:	b672      	cpsid	i
}
 8003d32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003d34:	e7fe      	b.n	8003d34 <Error_Handler+0x8>

08003d36 <RB_Write>:
//
// RingBuffer_t *Buf - pointer to Ring Buffer structure
// uint8_t Value - a value to store in the buffer
//
RB_Status RB_Write(RingBuffer_t *Buf, uint8_t Value)
{
 8003d36:	b480      	push	{r7}
 8003d38:	b085      	sub	sp, #20
 8003d3a:	af00      	add	r7, sp, #0
 8003d3c:	6078      	str	r0, [r7, #4]
 8003d3e:	460b      	mov	r3, r1
 8003d40:	70fb      	strb	r3, [r7, #3]
	// Calculate new Head pointer value
	uint8_t HeadTmp = (Buf->Head + 1) % RING_BUFFER_SIZE;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	8a1b      	ldrh	r3, [r3, #16]
 8003d46:	3301      	adds	r3, #1
 8003d48:	425a      	negs	r2, r3
 8003d4a:	f003 030f 	and.w	r3, r3, #15
 8003d4e:	f002 020f 	and.w	r2, r2, #15
 8003d52:	bf58      	it	pl
 8003d54:	4253      	negpl	r3, r2
 8003d56:	73fb      	strb	r3, [r7, #15]

	// Check if there is one free space ahead the Head buffer
	if(HeadTmp == Buf->Tail)
 8003d58:	7bfb      	ldrb	r3, [r7, #15]
 8003d5a:	b29a      	uxth	r2, r3
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	8a5b      	ldrh	r3, [r3, #18]
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d101      	bne.n	8003d68 <RB_Write+0x32>
	{
		// There is no space in the buffer - return an error
		return RB_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	e00a      	b.n	8003d7e <RB_Write+0x48>
	}

	// Store a value into the buffer
	Buf->Buffer[Buf->Head] = Value;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	8a1b      	ldrh	r3, [r3, #16]
 8003d6c:	4619      	mov	r1, r3
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	78fa      	ldrb	r2, [r7, #3]
 8003d72:	545a      	strb	r2, [r3, r1]

	// Remember a new Head pointer value
	Buf->Head = HeadTmp;
 8003d74:	7bfb      	ldrb	r3, [r7, #15]
 8003d76:	b29a      	uxth	r2, r3
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	821a      	strh	r2, [r3, #16]

	// Everything is ok - return OK status
	return RB_OK;
 8003d7c:	2300      	movs	r3, #0
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3714      	adds	r7, #20
 8003d82:	46bd      	mov	sp, r7
 8003d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d88:	4770      	bx	lr
	...

08003d8c <_ZN7SoC_EKF17set_update_matrixEv>:
#include "soc_ekf.h"
#include <math.h>
#include <algorithm>

void SoC_EKF::set_update_matrix()
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b082      	sub	sp, #8
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
    _State_vector[ttc1] = 0;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	f04f 0200 	mov.w	r2, #0
 8003d9a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
    _State_vector[ttc2] = 0;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	f04f 0200 	mov.w	r2, #0
 8003da4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

    _et1 = expf(-_Ts / _battery.battery_equivalent_model[ttc1]);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8003dae:	eeb1 7a67 	vneg.f32	s14, s15
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	edd3 7a03 	vldr	s15, [r3, #12]
 8003db8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003dbc:	eeb0 0a66 	vmov.f32	s0, s13
 8003dc0:	f00f fc9a 	bl	80136f8 <expf>
 8003dc4:	eef0 7a40 	vmov.f32	s15, s0
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
    _et2 = expf(-_Ts / _battery.battery_equivalent_model[ttc2]);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8003dd4:	eeb1 7a67 	vneg.f32	s14, s15
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	edd3 7a04 	vldr	s15, [r3, #16]
 8003dde:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003de2:	eeb0 0a66 	vmov.f32	s0, s13
 8003de6:	f00f fc87 	bl	80136f8 <expf>
 8003dea:	eef0 7a40 	vmov.f32	s15, s0
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c

    _A_matrix[SoC] = 1;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003dfa:	675a      	str	r2, [r3, #116]	; 0x74
    _A_matrix[ttc1] = _et1;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	679a      	str	r2, [r3, #120]	; 0x78
    _A_matrix[ttc2] = _et2;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	67da      	str	r2, [r3, #124]	; 0x7c

    _B_matrix[SoC] = - _Ts/_battery.battery_equivalent_model[Qnom]/60/60
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8003e12:	eef1 6a67 	vneg.f32	s13, s15
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	edd3 7a07 	vldr	s15, [r3, #28]
 8003e1c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e20:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8003ecc <_ZN7SoC_EKF17set_update_matrixEv+0x140>
 8003e24:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003e28:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8003ecc <_ZN7SoC_EKF17set_update_matrixEv+0x140>
 8003e2c:	eec7 6a87 	vdiv.f32	s13, s15, s14
            /_battery.cell_in_parallel;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	ee07 3a90 	vmov	s15, r3
 8003e38:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003e3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
    _B_matrix[SoC] = - _Ts/_battery.battery_equivalent_model[Qnom]/60/60
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80

    _B_matrix[ttc1] = _battery.battery_equivalent_model[Rttc1]*(1 - _et1);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	ed93 7a05 	vldr	s14, [r3, #20]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8003e52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e56:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003e5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
    _B_matrix[ttc2] = _battery.battery_equivalent_model[Rttc2]*(1 - _et2);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	ed93 7a06 	vldr	s14, [r3, #24]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8003e70:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e74:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003e78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88

    _P_matrix[SoC] = 0.005;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	4a12      	ldr	r2, [pc, #72]	; (8003ed0 <_ZN7SoC_EKF17set_update_matrixEv+0x144>)
 8003e86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    _P_matrix[ttc1] = 0.1;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	4a11      	ldr	r2, [pc, #68]	; (8003ed4 <_ZN7SoC_EKF17set_update_matrixEv+0x148>)
 8003e8e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    _P_matrix[ttc2] = 0.1;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	4a0f      	ldr	r2, [pc, #60]	; (8003ed4 <_ZN7SoC_EKF17set_update_matrixEv+0x148>)
 8003e96:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    _Q_matrix[SoC] = default_Q_value;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	4a0e      	ldr	r2, [pc, #56]	; (8003ed8 <_ZN7SoC_EKF17set_update_matrixEv+0x14c>)
 8003e9e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    _Q_matrix[ttc1] = _P_matrix[ttc1];
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    _Q_matrix[ttc2] = _P_matrix[ttc2];
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    _R_coeff = default_R_value;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4a07      	ldr	r2, [pc, #28]	; (8003edc <_ZN7SoC_EKF17set_update_matrixEv+0x150>)
 8003ebe:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
}
 8003ec2:	bf00      	nop
 8003ec4:	3708      	adds	r7, #8
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	bf00      	nop
 8003ecc:	42700000 	.word	0x42700000
 8003ed0:	3ba3d70a 	.word	0x3ba3d70a
 8003ed4:	3dcccccd 	.word	0x3dcccccd
 8003ed8:	3951b717 	.word	0x3951b717
 8003edc:	48f42400 	.word	0x48f42400

08003ee0 <_ZN7SoC_EKF21set_filter_covarianceEffff>:

void SoC_EKF::set_filter_covariance(float R, float Q_soc, float Q_v1, float Q_v2)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b087      	sub	sp, #28
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6178      	str	r0, [r7, #20]
 8003ee8:	ed87 0a04 	vstr	s0, [r7, #16]
 8003eec:	edc7 0a03 	vstr	s1, [r7, #12]
 8003ef0:	ed87 1a02 	vstr	s2, [r7, #8]
 8003ef4:	edc7 1a01 	vstr	s3, [r7, #4]
    _R_coeff = R;
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	693a      	ldr	r2, [r7, #16]
 8003efc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    _Q_matrix[SoC] = Q_soc;
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	68fa      	ldr	r2, [r7, #12]
 8003f04:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    _Q_matrix[Vttc1] = Q_v1;
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	68ba      	ldr	r2, [r7, #8]
 8003f0c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    _Q_matrix[Vttc2] = Q_v2;
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	687a      	ldr	r2, [r7, #4]
 8003f14:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
 8003f18:	bf00      	nop
 8003f1a:	371c      	adds	r7, #28
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f22:	4770      	bx	lr

08003f24 <_ZN7SoC_EKF6updateERKfS1_>:

void SoC_EKF::update(const float &Current, const float &Voltage)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b08c      	sub	sp, #48	; 0x30
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	60f8      	str	r0, [r7, #12]
 8003f2c:	60b9      	str	r1, [r7, #8]
 8003f2e:	607a      	str	r2, [r7, #4]
//    }
//    else {
//        set_filter_covariance(default_R_value, default_Q_value);
//    }
    // Predict
    _State_vector[SoC] =  _State_vector[SoC] * _A_matrix[SoC] + Current * _B_matrix[SoC];
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	ed93 7a2a 	vldr	s14, [r3, #168]	; 0xa8
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8003f3c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	edd3 6a00 	vldr	s13, [r3]
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8003f4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003f50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
    _State_vector[ttc1] =  _State_vector[ttc1] * _A_matrix[ttc1] + Current * _B_matrix[ttc1];
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	ed93 7a2b 	vldr	s14, [r3, #172]	; 0xac
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8003f66:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	edd3 6a00 	vldr	s13, [r3]
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8003f76:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003f7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
    _State_vector[ttc2] =  _State_vector[ttc2] * _A_matrix[ttc2] + Current * _B_matrix[ttc2];
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	ed93 7a2c 	vldr	s14, [r3, #176]	; 0xb0
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8003f90:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	edd3 6a00 	vldr	s13, [r3]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8003fa0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003fa4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0

    // Covariance matrix
    _P_matrix[SoC] =  _A_matrix[SoC]  * _A_matrix[SoC] *  _P_matrix[SoC]  + _Q_matrix[SoC];
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	ed93 7a1d 	vldr	s14, [r3, #116]	; 0x74
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8003fba:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8003fc4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 8003fce:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
    _P_matrix[ttc1] = _A_matrix[ttc1] * _A_matrix[ttc1] * _P_matrix[ttc1] + _Q_matrix[ttc1];
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8003fe4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8003fee:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 8003ff8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	edc3 7a24 	vstr	s15, [r3, #144]	; 0x90
    _P_matrix[ttc2] = _A_matrix[ttc2] * _A_matrix[ttc2] * _P_matrix[ttc2] + _Q_matrix[ttc2];
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	ed93 7a1f 	vldr	s14, [r3, #124]	; 0x7c
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 800400e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 8004018:	ee27 7a27 	vmul.f32	s14, s14, s15
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	edd3 7a29 	vldr	s15, [r3, #164]	; 0xa4
 8004022:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	edc3 7a25 	vstr	s15, [r3, #148]	; 0x94

    // Predict Opec circiut voltage single call voltage based on SoC
    float Voltage_predict_OCV = horner(_battery.battery_ocv_poli, SOC_OCV_poli_coeff_lenght, &_State_vector[SoC]);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f103 0020 	add.w	r0, r3, #32
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	33a8      	adds	r3, #168	; 0xa8
 8004036:	461a      	mov	r2, r3
 8004038:	2109      	movs	r1, #9
 800403a:	f000 f9a5 	bl	8004388 <_Z6hornerPKfjS0_>
 800403e:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c

    float Voltage_predict = Voltage_predict_OCV - _State_vector[Vttc1]/_battery.cell_in_parallel
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	edd3 6a2b 	vldr	s13, [r3, #172]	; 0xac
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	ee07 3a90 	vmov	s15, r3
 8004050:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004054:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004058:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800405c:	ee37 7a67 	vsub.f32	s14, s14, s15
            - _State_vector[Vttc2]/_battery.cell_in_parallel
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	ed93 6a2c 	vldr	s12, [r3, #176]	; 0xb0
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	ee07 3a90 	vmov	s15, r3
 800406e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004072:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8004076:	ee37 7a67 	vsub.f32	s14, s14, s15
            - (Current) * _battery.battery_equivalent_model[Rs]
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	edd3 6a00 	vldr	s13, [r3]
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	edd3 7a02 	vldr	s15, [r3, #8]
 8004086:	ee66 6aa7 	vmul.f32	s13, s13, s15
                        *_battery.cell_in_series
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	ee07 3a90 	vmov	s15, r3
 8004092:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004096:	ee26 6aa7 	vmul.f32	s12, s13, s15
                        /_battery.cell_in_parallel; // for multiple cell voltage
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	ee07 3a90 	vmov	s15, r3
 80040a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040a6:	eec6 7a26 	vdiv.f32	s15, s12, s13
    float Voltage_predict = Voltage_predict_OCV - _State_vector[Vttc1]/_battery.cell_in_parallel
 80040aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80040ae:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

    float innovation = (Voltage) - Voltage_predict;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	ed93 7a00 	vldr	s14, [r3]
 80040b8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80040bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80040c0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

    float H = horner(_battery.battery_d_ocv_poli, SOC_OCV_poli_coeff_lenght - 1, &_State_vector[SoC]);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f103 0044 	add.w	r0, r3, #68	; 0x44
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	33a8      	adds	r3, #168	; 0xa8
 80040ce:	461a      	mov	r2, r3
 80040d0:	2108      	movs	r1, #8
 80040d2:	f000 f959 	bl	8004388 <_Z6hornerPKfjS0_>
 80040d6:	ed87 0a08 	vstr	s0, [r7, #32]

    float S = H *  _P_matrix[SoC] * H + _R_coeff;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 80040e0:	edd7 7a08 	vldr	s15, [r7, #32]
 80040e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80040e8:	edd7 7a08 	vldr	s15, [r7, #32]
 80040ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 80040f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80040fa:	edc7 7a07 	vstr	s15, [r7, #28]

    float Kf = _P_matrix[SoC] * H * (1/S);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 8004104:	edd7 7a08 	vldr	s15, [r7, #32]
 8004108:	ee27 7a27 	vmul.f32	s14, s14, s15
 800410c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8004110:	edd7 6a07 	vldr	s13, [r7, #28]
 8004114:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8004118:	ee67 7a27 	vmul.f32	s15, s14, s15
 800411c:	edc7 7a06 	vstr	s15, [r7, #24]

    _State_vector[SoC] += Kf*innovation;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	ed93 7a2a 	vldr	s14, [r3, #168]	; 0xa8
 8004126:	edd7 6a06 	vldr	s13, [r7, #24]
 800412a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800412e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004132:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8

    _P_matrix[SoC] = (1 - Kf*H) * _P_matrix[SoC];
 800413c:	ed97 7a06 	vldr	s14, [r7, #24]
 8004140:	edd7 7a08 	vldr	s15, [r7, #32]
 8004144:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004148:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800414c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8004156:	ee67 7a27 	vmul.f32	s15, s14, s15
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c

    // to ensure that (0.0 <= SoC <= 1.0)
    _State_vector[SoC] = std::clamp(_State_vector[SoC], 0.00f, 1.00f);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	33a8      	adds	r3, #168	; 0xa8
 8004164:	f04f 0200 	mov.w	r2, #0
 8004168:	613a      	str	r2, [r7, #16]
 800416a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800416e:	617a      	str	r2, [r7, #20]
 8004170:	f107 0214 	add.w	r2, r7, #20
 8004174:	f107 0110 	add.w	r1, r7, #16
 8004178:	4618      	mov	r0, r3
 800417a:	f000 f933 	bl	80043e4 <_ZSt5clampIfERKT_S2_S2_S2_>
 800417e:	4603      	mov	r3, r0
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
}
 8004188:	bf00      	nop
 800418a:	3730      	adds	r7, #48	; 0x30
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}

08004190 <_ZN7SoC_EKF27update_SoC_based_on_voltageERKf>:

void SoC_EKF::update_SoC_based_on_voltage(const float &Voltage)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b084      	sub	sp, #16
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
 8004198:	6039      	str	r1, [r7, #0]
    // set low observation noice covariance to calculate faster voltage soc prediction

    set_time_sampling(100.0f);
 800419a:	ed9f 0a23 	vldr	s0, [pc, #140]	; 8004228 <_ZN7SoC_EKF27update_SoC_based_on_voltageERKf+0x98>
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f000 f897 	bl	80042d2 <_ZN7SoC_EKF17set_time_samplingEf>
    set_update_matrix();
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f7ff fdf1 	bl	8003d8c <_ZN7SoC_EKF17set_update_matrixEv>
    set_filter_covariance(1);
 80041aa:	eddf 1a20 	vldr	s3, [pc, #128]	; 800422c <_ZN7SoC_EKF27update_SoC_based_on_voltageERKf+0x9c>
 80041ae:	ed9f 1a1f 	vldr	s2, [pc, #124]	; 800422c <_ZN7SoC_EKF27update_SoC_based_on_voltageERKf+0x9c>
 80041b2:	eddf 0a1f 	vldr	s1, [pc, #124]	; 8004230 <_ZN7SoC_EKF27update_SoC_based_on_voltageERKf+0xa0>
 80041b6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f7ff fe90 	bl	8003ee0 <_ZN7SoC_EKF21set_filter_covarianceEffff>

    for(int i=0; i < 10e3; ++i){
 80041c0:	2300      	movs	r3, #0
 80041c2:	60fb      	str	r3, [r7, #12]
 80041c4:	e00c      	b.n	80041e0 <_ZN7SoC_EKF27update_SoC_based_on_voltageERKf+0x50>
        update(0, Voltage);
 80041c6:	f04f 0300 	mov.w	r3, #0
 80041ca:	60bb      	str	r3, [r7, #8]
 80041cc:	f107 0308 	add.w	r3, r7, #8
 80041d0:	683a      	ldr	r2, [r7, #0]
 80041d2:	4619      	mov	r1, r3
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	f7ff fea5 	bl	8003f24 <_ZN7SoC_EKF6updateERKfS1_>
    for(int i=0; i < 10e3; ++i){
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	3301      	adds	r3, #1
 80041de:	60fb      	str	r3, [r7, #12]
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	ee07 3a90 	vmov	s15, r3
 80041e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80041ea:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8004234 <_ZN7SoC_EKF27update_SoC_based_on_voltageERKf+0xa4>
 80041ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80041f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041f6:	d4e6      	bmi.n	80041c6 <_ZN7SoC_EKF27update_SoC_based_on_voltageERKf+0x36>
    }

    set_filter_covariance();
 80041f8:	eddf 1a0c 	vldr	s3, [pc, #48]	; 800422c <_ZN7SoC_EKF27update_SoC_based_on_voltageERKf+0x9c>
 80041fc:	ed9f 1a0b 	vldr	s2, [pc, #44]	; 800422c <_ZN7SoC_EKF27update_SoC_based_on_voltageERKf+0x9c>
 8004200:	eddf 0a0b 	vldr	s1, [pc, #44]	; 8004230 <_ZN7SoC_EKF27update_SoC_based_on_voltageERKf+0xa0>
 8004204:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8004238 <_ZN7SoC_EKF27update_SoC_based_on_voltageERKf+0xa8>
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	f7ff fe69 	bl	8003ee0 <_ZN7SoC_EKF21set_filter_covarianceEffff>
    set_time_sampling(0.05f);
 800420e:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 800423c <_ZN7SoC_EKF27update_SoC_based_on_voltageERKf+0xac>
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f000 f85d 	bl	80042d2 <_ZN7SoC_EKF17set_time_samplingEf>
    set_update_matrix();
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f7ff fdb7 	bl	8003d8c <_ZN7SoC_EKF17set_update_matrixEv>
}
 800421e:	bf00      	nop
 8004220:	3710      	adds	r7, #16
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}
 8004226:	bf00      	nop
 8004228:	42c80000 	.word	0x42c80000
 800422c:	3dcccccd 	.word	0x3dcccccd
 8004230:	3951b717 	.word	0x3951b717
 8004234:	461c4000 	.word	0x461c4000
 8004238:	48f42400 	.word	0x48f42400
 800423c:	3d4ccccd 	.word	0x3d4ccccd

08004240 <_ZSt4copyIPKfPfET0_T_S4_S3_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 8004240:	b590      	push	{r4, r7, lr}
 8004242:	b085      	sub	sp, #20
 8004244:	af00      	add	r7, sp, #0
 8004246:	60f8      	str	r0, [r7, #12]
 8004248:	60b9      	str	r1, [r7, #8]
 800424a:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 800424c:	68f8      	ldr	r0, [r7, #12]
 800424e:	f000 f8f0 	bl	8004432 <_ZSt12__miter_baseIPKfET_S2_>
 8004252:	4604      	mov	r4, r0
 8004254:	68b8      	ldr	r0, [r7, #8]
 8004256:	f000 f8ec 	bl	8004432 <_ZSt12__miter_baseIPKfET_S2_>
 800425a:	4603      	mov	r3, r0
 800425c:	687a      	ldr	r2, [r7, #4]
 800425e:	4619      	mov	r1, r3
 8004260:	4620      	mov	r0, r4
 8004262:	f000 f8f1 	bl	8004448 <_ZSt13__copy_move_aILb0EPKfPfET1_T0_S4_S3_>
 8004266:	4603      	mov	r3, r0
    }
 8004268:	4618      	mov	r0, r3
 800426a:	3714      	adds	r7, #20
 800426c:	46bd      	mov	sp, r7
 800426e:	bd90      	pop	{r4, r7, pc}

08004270 <_ZN7SoC_EKF32set_single_cell_equivalent_modelEPKf>:

void SoC_EKF::set_single_cell_equivalent_model(const float *battery_model){
 8004270:	b580      	push	{r7, lr}
 8004272:	b082      	sub	sp, #8
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
 8004278:	6039      	str	r1, [r7, #0]
    std::copy(battery_model, battery_model+6, _battery.battery_equivalent_model);
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	f103 0118 	add.w	r1, r3, #24
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	3308      	adds	r3, #8
 8004284:	461a      	mov	r2, r3
 8004286:	6838      	ldr	r0, [r7, #0]
 8004288:	f7ff ffda 	bl	8004240 <_ZSt4copyIPKfPfET0_T_S4_S3_>
};
 800428c:	bf00      	nop
 800428e:	3708      	adds	r7, #8
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}

08004294 <_ZN7SoC_EKF15set_initial_SoCEf>:

void SoC_EKF::set_initial_SoC(float aSoC){
 8004294:	b480      	push	{r7}
 8004296:	b083      	sub	sp, #12
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
 800429c:	ed87 0a00 	vstr	s0, [r7]
    _State_vector[SoC] = aSoC;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	683a      	ldr	r2, [r7, #0]
 80042a4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
}
 80042a8:	bf00      	nop
 80042aa:	370c      	adds	r7, #12
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr

080042b4 <_ZN7SoC_EKF16set_full_batteryEv>:

void SoC_EKF::set_full_battery()
{
 80042b4:	b480      	push	{r7}
 80042b6:	b083      	sub	sp, #12
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
    _State_vector[SoC] = 1.00f;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80042c2:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
};
 80042c6:	bf00      	nop
 80042c8:	370c      	adds	r7, #12
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr

080042d2 <_ZN7SoC_EKF17set_time_samplingEf>:

void SoC_EKF::set_time_sampling(float Ts){
 80042d2:	b480      	push	{r7}
 80042d4:	b083      	sub	sp, #12
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	6078      	str	r0, [r7, #4]
 80042da:	ed87 0a00 	vstr	s0, [r7]
    _Ts = Ts;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	683a      	ldr	r2, [r7, #0]
 80042e2:	671a      	str	r2, [r3, #112]	; 0x70
};
 80042e4:	bf00      	nop
 80042e6:	370c      	adds	r7, #12
 80042e8:	46bd      	mov	sp, r7
 80042ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ee:	4770      	bx	lr

080042f0 <_ZN7SoC_EKF25set_battery_configurationEOjS0_>:

void SoC_EKF::set_battery_configuration(unsigned int &&s, unsigned int &&p){
 80042f0:	b480      	push	{r7}
 80042f2:	b085      	sub	sp, #20
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	60f8      	str	r0, [r7, #12]
 80042f8:	60b9      	str	r1, [r7, #8]
 80042fa:	607a      	str	r2, [r7, #4]
    _battery.cell_in_parallel = p;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	601a      	str	r2, [r3, #0]
    _battery.cell_in_series = s;
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	605a      	str	r2, [r3, #4]
};
 800430c:	bf00      	nop
 800430e:	3714      	adds	r7, #20
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr

08004318 <_ZN7SoC_EKF30set_single_cell_ocv_polinomialEPKfj>:

void SoC_EKF::set_single_cell_ocv_polinomial(const float *battery_ocv, unsigned int number_of_coef){
 8004318:	b580      	push	{r7, lr}
 800431a:	b086      	sub	sp, #24
 800431c:	af00      	add	r7, sp, #0
 800431e:	60f8      	str	r0, [r7, #12]
 8004320:	60b9      	str	r1, [r7, #8]
 8004322:	607a      	str	r2, [r7, #4]

    std::copy(battery_ocv, battery_ocv + number_of_coef, _battery.battery_ocv_poli);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	009b      	lsls	r3, r3, #2
 8004328:	68ba      	ldr	r2, [r7, #8]
 800432a:	18d1      	adds	r1, r2, r3
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	3320      	adds	r3, #32
 8004330:	461a      	mov	r2, r3
 8004332:	68b8      	ldr	r0, [r7, #8]
 8004334:	f7ff ff84 	bl	8004240 <_ZSt4copyIPKfPfET0_T_S4_S3_>

    for(unsigned int ocv_poly_iter = 0; ocv_poly_iter < number_of_coef - 1; ocv_poly_iter++){
 8004338:	2300      	movs	r3, #0
 800433a:	617b      	str	r3, [r7, #20]
 800433c:	e01a      	b.n	8004374 <_ZN7SoC_EKF30set_single_cell_ocv_polinomialEPKfj+0x5c>
        _battery.battery_d_ocv_poli[ocv_poly_iter] = static_cast<float>(number_of_coef - ocv_poly_iter - 1) * battery_ocv[ocv_poly_iter];
 800433e:	687a      	ldr	r2, [r7, #4]
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	1ad3      	subs	r3, r2, r3
 8004344:	3b01      	subs	r3, #1
 8004346:	ee07 3a90 	vmov	s15, r3
 800434a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	009b      	lsls	r3, r3, #2
 8004352:	68ba      	ldr	r2, [r7, #8]
 8004354:	4413      	add	r3, r2
 8004356:	edd3 7a00 	vldr	s15, [r3]
 800435a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800435e:	68fa      	ldr	r2, [r7, #12]
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	3310      	adds	r3, #16
 8004364:	009b      	lsls	r3, r3, #2
 8004366:	4413      	add	r3, r2
 8004368:	3304      	adds	r3, #4
 800436a:	edc3 7a00 	vstr	s15, [r3]
    for(unsigned int ocv_poly_iter = 0; ocv_poly_iter < number_of_coef - 1; ocv_poly_iter++){
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	3301      	adds	r3, #1
 8004372:	617b      	str	r3, [r7, #20]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	3b01      	subs	r3, #1
 8004378:	697a      	ldr	r2, [r7, #20]
 800437a:	429a      	cmp	r2, r3
 800437c:	d3df      	bcc.n	800433e <_ZN7SoC_EKF30set_single_cell_ocv_polinomialEPKfj+0x26>
    }
};
 800437e:	bf00      	nop
 8004380:	bf00      	nop
 8004382:	3718      	adds	r7, #24
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}

08004388 <_Z6hornerPKfjS0_>:
    //    std::cout<<"Kf: "<<Kf <<std::endl;
    //    std::cout<<"SoC: "<<State_vector[0]<<std::endl;
}

[[nodiscard]] float horner(const float *arry, unsigned int n, const float *x)
{
 8004388:	b480      	push	{r7}
 800438a:	b087      	sub	sp, #28
 800438c:	af00      	add	r7, sp, #0
 800438e:	60f8      	str	r0, [r7, #12]
 8004390:	60b9      	str	r1, [r7, #8]
 8004392:	607a      	str	r2, [r7, #4]
    float s = 0;
 8004394:	f04f 0300 	mov.w	r3, #0
 8004398:	617b      	str	r3, [r7, #20]
    for(unsigned int i = 0; i < n ; i++){
 800439a:	2300      	movs	r3, #0
 800439c:	613b      	str	r3, [r7, #16]
 800439e:	e013      	b.n	80043c8 <_Z6hornerPKfjS0_+0x40>
        s = s*(*x) + arry[i];
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	ed93 7a00 	vldr	s14, [r3]
 80043a6:	edd7 7a05 	vldr	s15, [r7, #20]
 80043aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	009b      	lsls	r3, r3, #2
 80043b2:	68fa      	ldr	r2, [r7, #12]
 80043b4:	4413      	add	r3, r2
 80043b6:	edd3 7a00 	vldr	s15, [r3]
 80043ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80043be:	edc7 7a05 	vstr	s15, [r7, #20]
    for(unsigned int i = 0; i < n ; i++){
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	3301      	adds	r3, #1
 80043c6:	613b      	str	r3, [r7, #16]
 80043c8:	693a      	ldr	r2, [r7, #16]
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d3e7      	bcc.n	80043a0 <_Z6hornerPKfjS0_+0x18>
    }
    return s;
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	ee07 3a90 	vmov	s15, r3
}
 80043d6:	eeb0 0a67 	vmov.f32	s0, s15
 80043da:	371c      	adds	r7, #28
 80043dc:	46bd      	mov	sp, r7
 80043de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e2:	4770      	bx	lr

080043e4 <_ZSt5clampIfERKT_S2_S2_S2_>:
   *  @param  __hi   An upper limit of arbitrary type.
   *  @return max(__val, __lo) if __val < __hi or min(__val, __hi) otherwise.
   */
  template<typename _Tp>
    constexpr const _Tp&
    clamp(const _Tp& __val, const _Tp& __lo, const _Tp& __hi)
 80043e4:	b480      	push	{r7}
 80043e6:	b085      	sub	sp, #20
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	60f8      	str	r0, [r7, #12]
 80043ec:	60b9      	str	r1, [r7, #8]
 80043ee:	607a      	str	r2, [r7, #4]
    {
      __glibcxx_assert(!(__hi < __lo));
      return (__val < __lo) ? __lo : (__hi < __val) ? __hi : __val;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	ed93 7a00 	vldr	s14, [r3]
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	edd3 7a00 	vldr	s15, [r3]
 80043fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004400:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004404:	d501      	bpl.n	800440a <_ZSt5clampIfERKT_S2_S2_S2_+0x26>
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	e00d      	b.n	8004426 <_ZSt5clampIfERKT_S2_S2_S2_+0x42>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	ed93 7a00 	vldr	s14, [r3]
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	edd3 7a00 	vldr	s15, [r3]
 8004416:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800441a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800441e:	d501      	bpl.n	8004424 <_ZSt5clampIfERKT_S2_S2_S2_+0x40>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	e000      	b.n	8004426 <_ZSt5clampIfERKT_S2_S2_S2_+0x42>
 8004424:	68fb      	ldr	r3, [r7, #12]
    }
 8004426:	4618      	mov	r0, r3
 8004428:	3714      	adds	r7, #20
 800442a:	46bd      	mov	sp, r7
 800442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004430:	4770      	bx	lr

08004432 <_ZSt12__miter_baseIPKfET_S2_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 8004432:	b480      	push	{r7}
 8004434:	b083      	sub	sp, #12
 8004436:	af00      	add	r7, sp, #0
 8004438:	6078      	str	r0, [r7, #4]
    { return __it; }
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	4618      	mov	r0, r3
 800443e:	370c      	adds	r7, #12
 8004440:	46bd      	mov	sp, r7
 8004442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004446:	4770      	bx	lr

08004448 <_ZSt13__copy_move_aILb0EPKfPfET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8004448:	b5b0      	push	{r4, r5, r7, lr}
 800444a:	b084      	sub	sp, #16
 800444c:	af00      	add	r7, sp, #0
 800444e:	60f8      	str	r0, [r7, #12]
 8004450:	60b9      	str	r1, [r7, #8]
 8004452:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8004454:	68f8      	ldr	r0, [r7, #12]
 8004456:	f000 f81a 	bl	800448e <_ZSt12__niter_baseIPKfET_S2_>
 800445a:	4604      	mov	r4, r0
 800445c:	68b8      	ldr	r0, [r7, #8]
 800445e:	f000 f816 	bl	800448e <_ZSt12__niter_baseIPKfET_S2_>
 8004462:	4605      	mov	r5, r0
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	4618      	mov	r0, r3
 8004468:	f000 f81c 	bl	80044a4 <_ZSt12__niter_baseIPfET_S1_>
 800446c:	4603      	mov	r3, r0
 800446e:	461a      	mov	r2, r3
 8004470:	4629      	mov	r1, r5
 8004472:	4620      	mov	r0, r4
 8004474:	f000 f821 	bl	80044ba <_ZSt14__copy_move_a1ILb0EPKfPfET1_T0_S4_S3_>
 8004478:	4602      	mov	r2, r0
 800447a:	1d3b      	adds	r3, r7, #4
 800447c:	4611      	mov	r1, r2
 800447e:	4618      	mov	r0, r3
 8004480:	f000 f82b 	bl	80044da <_ZSt12__niter_wrapIPfET_RKS1_S1_>
 8004484:	4603      	mov	r3, r0
    }
 8004486:	4618      	mov	r0, r3
 8004488:	3710      	adds	r7, #16
 800448a:	46bd      	mov	sp, r7
 800448c:	bdb0      	pop	{r4, r5, r7, pc}

0800448e <_ZSt12__niter_baseIPKfET_S2_>:
    __niter_base(_Iterator __it)
 800448e:	b480      	push	{r7}
 8004490:	b083      	sub	sp, #12
 8004492:	af00      	add	r7, sp, #0
 8004494:	6078      	str	r0, [r7, #4]
    { return __it; }
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	4618      	mov	r0, r3
 800449a:	370c      	adds	r7, #12
 800449c:	46bd      	mov	sp, r7
 800449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a2:	4770      	bx	lr

080044a4 <_ZSt12__niter_baseIPfET_S1_>:
    __niter_base(_Iterator __it)
 80044a4:	b480      	push	{r7}
 80044a6:	b083      	sub	sp, #12
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
    { return __it; }
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	4618      	mov	r0, r3
 80044b0:	370c      	adds	r7, #12
 80044b2:	46bd      	mov	sp, r7
 80044b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b8:	4770      	bx	lr

080044ba <_ZSt14__copy_move_a1ILb0EPKfPfET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 80044ba:	b580      	push	{r7, lr}
 80044bc:	b084      	sub	sp, #16
 80044be:	af00      	add	r7, sp, #0
 80044c0:	60f8      	str	r0, [r7, #12]
 80044c2:	60b9      	str	r1, [r7, #8]
 80044c4:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 80044c6:	687a      	ldr	r2, [r7, #4]
 80044c8:	68b9      	ldr	r1, [r7, #8]
 80044ca:	68f8      	ldr	r0, [r7, #12]
 80044cc:	f000 f811 	bl	80044f2 <_ZSt14__copy_move_a2ILb0EPKfPfET1_T0_S4_S3_>
 80044d0:	4603      	mov	r3, r0
 80044d2:	4618      	mov	r0, r3
 80044d4:	3710      	adds	r7, #16
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}

080044da <_ZSt12__niter_wrapIPfET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 80044da:	b480      	push	{r7}
 80044dc:	b083      	sub	sp, #12
 80044de:	af00      	add	r7, sp, #0
 80044e0:	6078      	str	r0, [r7, #4]
 80044e2:	6039      	str	r1, [r7, #0]
    { return __res; }
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	4618      	mov	r0, r3
 80044e8:	370c      	adds	r7, #12
 80044ea:	46bd      	mov	sp, r7
 80044ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f0:	4770      	bx	lr

080044f2 <_ZSt14__copy_move_a2ILb0EPKfPfET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80044f2:	b580      	push	{r7, lr}
 80044f4:	b084      	sub	sp, #16
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	60f8      	str	r0, [r7, #12]
 80044fa:	60b9      	str	r1, [r7, #8]
 80044fc:	607a      	str	r2, [r7, #4]
      if (std::is_constant_evaluated())
 80044fe:	f7fc fde9 	bl	80010d4 <_ZSt21is_constant_evaluatedv>
 8004502:	4603      	mov	r3, r0
 8004504:	2b00      	cmp	r3, #0
 8004506:	d006      	beq.n	8004516 <_ZSt14__copy_move_a2ILb0EPKfPfET1_T0_S4_S3_+0x24>
	  __copy_m(__first, __last, __result);
 8004508:	687a      	ldr	r2, [r7, #4]
 800450a:	68b9      	ldr	r1, [r7, #8]
 800450c:	68f8      	ldr	r0, [r7, #12]
 800450e:	f000 f80d 	bl	800452c <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKfPfEET0_T_S7_S6_>
 8004512:	4603      	mov	r3, r0
 8004514:	e006      	b.n	8004524 <_ZSt14__copy_move_a2ILb0EPKfPfET1_T0_S4_S3_+0x32>
			      _Category>::__copy_m(__first, __last, __result);
 8004516:	687a      	ldr	r2, [r7, #4]
 8004518:	68b9      	ldr	r1, [r7, #8]
 800451a:	68f8      	ldr	r0, [r7, #12]
 800451c:	f000 f829 	bl	8004572 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
 8004520:	4603      	mov	r3, r0
 8004522:	bf00      	nop
    }
 8004524:	4618      	mov	r0, r3
 8004526:	3710      	adds	r7, #16
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}

0800452c <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKfPfEET0_T_S7_S6_>:
	__copy_m(_II __first, _II __last, _OI __result)
 800452c:	b480      	push	{r7}
 800452e:	b087      	sub	sp, #28
 8004530:	af00      	add	r7, sp, #0
 8004532:	60f8      	str	r0, [r7, #12]
 8004534:	60b9      	str	r1, [r7, #8]
 8004536:	607a      	str	r2, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 8004538:	68ba      	ldr	r2, [r7, #8]
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	109b      	asrs	r3, r3, #2
 8004540:	617b      	str	r3, [r7, #20]
 8004542:	e00c      	b.n	800455e <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKfPfEET0_T_S7_S6_+0x32>
	      *__result = *__first;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681a      	ldr	r2, [r3, #0]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	601a      	str	r2, [r3, #0]
	      ++__first;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	3304      	adds	r3, #4
 8004550:	60fb      	str	r3, [r7, #12]
	      ++__result;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	3304      	adds	r3, #4
 8004556:	607b      	str	r3, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	3b01      	subs	r3, #1
 800455c:	617b      	str	r3, [r7, #20]
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	2b00      	cmp	r3, #0
 8004562:	dcef      	bgt.n	8004544 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKfPfEET0_T_S7_S6_+0x18>
	  return __result;
 8004564:	687b      	ldr	r3, [r7, #4]
	}
 8004566:	4618      	mov	r0, r3
 8004568:	371c      	adds	r7, #28
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr

08004572 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8004572:	b580      	push	{r7, lr}
 8004574:	b086      	sub	sp, #24
 8004576:	af00      	add	r7, sp, #0
 8004578:	60f8      	str	r0, [r7, #12]
 800457a:	60b9      	str	r1, [r7, #8]
 800457c:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800457e:	68ba      	ldr	r2, [r7, #8]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	1ad3      	subs	r3, r2, r3
 8004584:	109b      	asrs	r3, r3, #2
 8004586:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d006      	beq.n	800459c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	009b      	lsls	r3, r3, #2
 8004592:	461a      	mov	r2, r3
 8004594:	68f9      	ldr	r1, [r7, #12]
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f00f ff6d 	bl	8014476 <memmove>
	  return __result + _Num;
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	009b      	lsls	r3, r3, #2
 80045a0:	687a      	ldr	r2, [r7, #4]
 80045a2:	4413      	add	r3, r2
	}
 80045a4:	4618      	mov	r0, r3
 80045a6:	3718      	adds	r7, #24
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}

080045ac <_ZN7SoC_EKF7get_SoCEv>:
    // negative current -> charge
    void update(const float &Current, const float &Voltage);

    void update_SoC_based_on_voltage(const float &Voltage);
    
    [[nodiscard]] float get_SoC(){return _State_vector[SoC];};
 80045ac:	b480      	push	{r7}
 80045ae:	b083      	sub	sp, #12
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80045ba:	ee07 3a90 	vmov	s15, r3
 80045be:	eeb0 0a67 	vmov.f32	s0, s15
 80045c2:	370c      	adds	r7, #12
 80045c4:	46bd      	mov	sp, r7
 80045c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ca:	4770      	bx	lr

080045cc <_Z17calculate_currentv>:
float max_divided_current_sensor_output_voltage = ((float)(CS_MAX_OUTPUT_VOLTAGE * RESISTOR_2) / (float)(RESISTOR_1 + RESISTOR_2)) / 1000.0;
float current_sensor_volts_to_amper = ((float)(CS_MVOLT_TO_AMPER * RESISTOR_2) / (float)(RESISTOR_1 + RESISTOR_2)) / 1000.0;
float output_current_factor = max_divided_current_sensor_output_voltage / 4096.0 * (1.0 / current_sensor_volts_to_amper);

void calculate_current()
{
 80045cc:	b480      	push	{r7}
 80045ce:	b087      	sub	sp, #28
 80045d0:	af00      	add	r7, sp, #0
	float raw_sum = 0, raw_max = INT32_MIN, raw_min = INT32_MAX, avarage_adc;
 80045d2:	f04f 0300 	mov.w	r3, #0
 80045d6:	617b      	str	r3, [r7, #20]
 80045d8:	f04f 434f 	mov.w	r3, #3472883712	; 0xcf000000
 80045dc:	613b      	str	r3, [r7, #16]
 80045de:	f04f 439e 	mov.w	r3, #1325400064	; 0x4f000000
 80045e2:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < NUMBER_OF_CS_SAMPLES; i++)
 80045e4:	2300      	movs	r3, #0
 80045e6:	60bb      	str	r3, [r7, #8]
 80045e8:	e03e      	b.n	8004668 <_Z17calculate_currentv+0x9c>
	{
		int16_t raw_value = data.current.adc[i];
 80045ea:	4a43      	ldr	r2, [pc, #268]	; (80046f8 <_Z17calculate_currentv+0x12c>)
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	330e      	adds	r3, #14
 80045f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045f4:	807b      	strh	r3, [r7, #2]
		raw_sum += raw_value;
 80045f6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80045fa:	ee07 3a90 	vmov	s15, r3
 80045fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004602:	ed97 7a05 	vldr	s14, [r7, #20]
 8004606:	ee77 7a27 	vadd.f32	s15, s14, s15
 800460a:	edc7 7a05 	vstr	s15, [r7, #20]
		if(raw_value > raw_max) raw_max = raw_value;
 800460e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004612:	ee07 3a90 	vmov	s15, r3
 8004616:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800461a:	ed97 7a04 	vldr	s14, [r7, #16]
 800461e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004622:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004626:	d507      	bpl.n	8004638 <_Z17calculate_currentv+0x6c>
 8004628:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800462c:	ee07 3a90 	vmov	s15, r3
 8004630:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004634:	edc7 7a04 	vstr	s15, [r7, #16]
		if(raw_value < raw_min) raw_min = raw_value;
 8004638:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800463c:	ee07 3a90 	vmov	s15, r3
 8004640:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004644:	ed97 7a03 	vldr	s14, [r7, #12]
 8004648:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800464c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004650:	dd07      	ble.n	8004662 <_Z17calculate_currentv+0x96>
 8004652:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004656:	ee07 3a90 	vmov	s15, r3
 800465a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800465e:	edc7 7a03 	vstr	s15, [r7, #12]
	for(int i = 0; i < NUMBER_OF_CS_SAMPLES; i++)
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	3301      	adds	r3, #1
 8004666:	60bb      	str	r3, [r7, #8]
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	2b63      	cmp	r3, #99	; 0x63
 800466c:	ddbd      	ble.n	80045ea <_Z17calculate_currentv+0x1e>
	}
	avarage_adc = raw_sum / NUMBER_OF_CS_SAMPLES;
 800466e:	ed97 7a05 	vldr	s14, [r7, #20]
 8004672:	eddf 6a22 	vldr	s13, [pc, #136]	; 80046fc <_Z17calculate_currentv+0x130>
 8004676:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800467a:	edc7 7a01 	vstr	s15, [r7, #4]

	avarage_adc -= NEUTRAL_CURRENT_SENSOR;
 800467e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004682:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8004700 <_Z17calculate_currentv+0x134>
 8004686:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800468a:	edc7 7a01 	vstr	s15, [r7, #4]
	raw_max -= NEUTRAL_CURRENT_SENSOR;
 800468e:	edd7 7a04 	vldr	s15, [r7, #16]
 8004692:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8004700 <_Z17calculate_currentv+0x134>
 8004696:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800469a:	edc7 7a04 	vstr	s15, [r7, #16]
	raw_min -= NEUTRAL_CURRENT_SENSOR;
 800469e:	edd7 7a03 	vldr	s15, [r7, #12]
 80046a2:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8004700 <_Z17calculate_currentv+0x134>
 80046a6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80046aa:	edc7 7a03 	vstr	s15, [r7, #12]

	data.current.value = avarage_adc * output_current_factor;
 80046ae:	4b15      	ldr	r3, [pc, #84]	; (8004704 <_Z17calculate_currentv+0x138>)
 80046b0:	ed93 7a00 	vldr	s14, [r3]
 80046b4:	edd7 7a01 	vldr	s15, [r7, #4]
 80046b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046bc:	4b0e      	ldr	r3, [pc, #56]	; (80046f8 <_Z17calculate_currentv+0x12c>)
 80046be:	edc3 7a72 	vstr	s15, [r3, #456]	; 0x1c8
	data.current.value_max = (float)raw_max * output_current_factor;
 80046c2:	4b10      	ldr	r3, [pc, #64]	; (8004704 <_Z17calculate_currentv+0x138>)
 80046c4:	ed93 7a00 	vldr	s14, [r3]
 80046c8:	edd7 7a04 	vldr	s15, [r7, #16]
 80046cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046d0:	4b09      	ldr	r3, [pc, #36]	; (80046f8 <_Z17calculate_currentv+0x12c>)
 80046d2:	edc3 7a73 	vstr	s15, [r3, #460]	; 0x1cc
	data.current.value_min = (float)raw_min * output_current_factor;
 80046d6:	4b0b      	ldr	r3, [pc, #44]	; (8004704 <_Z17calculate_currentv+0x138>)
 80046d8:	ed93 7a00 	vldr	s14, [r3]
 80046dc:	edd7 7a03 	vldr	s15, [r7, #12]
 80046e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046e4:	4b04      	ldr	r3, [pc, #16]	; (80046f8 <_Z17calculate_currentv+0x12c>)
 80046e6:	edc3 7a74 	vstr	s15, [r3, #464]	; 0x1d0
		chargingState = 1;
	}else if (outputCurrent >= 0 || HAL_GPIO_ReadPin(LED_2_GPIO_Port, LED_2_Pin) == 1){
		chargingState = 0;
	}*/

}
 80046ea:	bf00      	nop
 80046ec:	371c      	adds	r7, #28
 80046ee:	46bd      	mov	sp, r7
 80046f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f4:	4770      	bx	lr
 80046f6:	bf00      	nop
 80046f8:	20001478 	.word	0x20001478
 80046fc:	42c80000 	.word	0x42c80000
 8004700:	4501b000 	.word	0x4501b000
 8004704:	20003f04 	.word	0x20003f04

08004708 <_Z18start_soc_functionPv>:

void start_soc_function(void *argument){
 8004708:	b580      	push	{r7, lr}
 800470a:	b086      	sub	sp, #24
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
	data.soc.main.set_single_cell_equivalent_model(ICR18650);
 8004710:	4933      	ldr	r1, [pc, #204]	; (80047e0 <_Z18start_soc_functionPv+0xd8>)
 8004712:	4834      	ldr	r0, [pc, #208]	; (80047e4 <_Z18start_soc_functionPv+0xdc>)
 8004714:	f7ff fdac 	bl	8004270 <_ZN7SoC_EKF32set_single_cell_equivalent_modelEPKf>
	data.soc.main.set_single_cell_ocv_polinomial(Li_Ion_ocv, Li_Ion_ocv_length);
 8004718:	2209      	movs	r2, #9
 800471a:	4933      	ldr	r1, [pc, #204]	; (80047e8 <_Z18start_soc_functionPv+0xe0>)
 800471c:	4831      	ldr	r0, [pc, #196]	; (80047e4 <_Z18start_soc_functionPv+0xdc>)
 800471e:	f7ff fdfb 	bl	8004318 <_ZN7SoC_EKF30set_single_cell_ocv_polinomialEPKfj>
	data.soc.main.set_battery_configuration(1, 2);
 8004722:	2301      	movs	r3, #1
 8004724:	613b      	str	r3, [r7, #16]
 8004726:	2302      	movs	r3, #2
 8004728:	617b      	str	r3, [r7, #20]
 800472a:	f107 0214 	add.w	r2, r7, #20
 800472e:	f107 0310 	add.w	r3, r7, #16
 8004732:	4619      	mov	r1, r3
 8004734:	482b      	ldr	r0, [pc, #172]	; (80047e4 <_Z18start_soc_functionPv+0xdc>)
 8004736:	f7ff fddb 	bl	80042f0 <_ZN7SoC_EKF25set_battery_configurationEOjS0_>
	data.soc.main.set_time_sampling(0.03f);
 800473a:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 80047ec <_Z18start_soc_functionPv+0xe4>
 800473e:	4829      	ldr	r0, [pc, #164]	; (80047e4 <_Z18start_soc_functionPv+0xdc>)
 8004740:	f7ff fdc7 	bl	80042d2 <_ZN7SoC_EKF17set_time_samplingEf>
	data.soc.main.set_update_matrix();
 8004744:	4827      	ldr	r0, [pc, #156]	; (80047e4 <_Z18start_soc_functionPv+0xdc>)
 8004746:	f7ff fb21 	bl	8003d8c <_ZN7SoC_EKF17set_update_matrixEv>
	data.soc.main.set_initial_SoC(0.5);
 800474a:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 800474e:	4825      	ldr	r0, [pc, #148]	; (80047e4 <_Z18start_soc_functionPv+0xdc>)
 8004750:	f7ff fda0 	bl	8004294 <_ZN7SoC_EKF15set_initial_SoCEf>

	osDelay(100);
 8004754:	2064      	movs	r0, #100	; 0x64
 8004756:	f00b fcc1 	bl	80100dc <osDelay>

	float temp_voltage = (float)data.voltages.cells[0] / 10'000.0f;
 800475a:	4b25      	ldr	r3, [pc, #148]	; (80047f0 <_Z18start_soc_functionPv+0xe8>)
 800475c:	881b      	ldrh	r3, [r3, #0]
 800475e:	ee07 3a90 	vmov	s15, r3
 8004762:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004766:	eddf 6a23 	vldr	s13, [pc, #140]	; 80047f4 <_Z18start_soc_functionPv+0xec>
 800476a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800476e:	edc7 7a03 	vstr	s15, [r7, #12]
	data.soc.main.update_SoC_based_on_voltage(temp_voltage);
 8004772:	f107 030c 	add.w	r3, r7, #12
 8004776:	4619      	mov	r1, r3
 8004778:	481a      	ldr	r0, [pc, #104]	; (80047e4 <_Z18start_soc_functionPv+0xdc>)
 800477a:	f7ff fd09 	bl	8004190 <_ZN7SoC_EKF27update_SoC_based_on_voltageERKf>

	for(;;){
		osDelay(30);
 800477e:	201e      	movs	r0, #30
 8004780:	f00b fcac 	bl	80100dc <osDelay>

		calculate_current();
 8004784:	f7ff ff22 	bl	80045cc <_Z17calculate_currentv>

		float temp_voltage = (float)data.voltages.cells[0] / 10'000.0f;
 8004788:	4b19      	ldr	r3, [pc, #100]	; (80047f0 <_Z18start_soc_functionPv+0xe8>)
 800478a:	881b      	ldrh	r3, [r3, #0]
 800478c:	ee07 3a90 	vmov	s15, r3
 8004790:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004794:	eddf 6a17 	vldr	s13, [pc, #92]	; 80047f4 <_Z18start_soc_functionPv+0xec>
 8004798:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800479c:	edc7 7a02 	vstr	s15, [r7, #8]
		data.soc.main.update(data.current.value, temp_voltage);
 80047a0:	f107 0308 	add.w	r3, r7, #8
 80047a4:	461a      	mov	r2, r3
 80047a6:	4914      	ldr	r1, [pc, #80]	; (80047f8 <_Z18start_soc_functionPv+0xf0>)
 80047a8:	480e      	ldr	r0, [pc, #56]	; (80047e4 <_Z18start_soc_functionPv+0xdc>)
 80047aa:	f7ff fbbb 	bl	8003f24 <_ZN7SoC_EKF6updateERKfS1_>
		data.soc.value = data.soc.main.get_SoC();
 80047ae:	480d      	ldr	r0, [pc, #52]	; (80047e4 <_Z18start_soc_functionPv+0xdc>)
 80047b0:	f7ff fefc 	bl	80045ac <_ZN7SoC_EKF7get_SoCEv>
 80047b4:	eef0 7a40 	vmov.f32	s15, s0
 80047b8:	4b0d      	ldr	r3, [pc, #52]	; (80047f0 <_Z18start_soc_functionPv+0xe8>)
 80047ba:	edc3 7aa2 	vstr	s15, [r3, #648]	; 0x288
		data.soc.value_can = (uint8_t)(data.soc.value * 100);
 80047be:	4b0c      	ldr	r3, [pc, #48]	; (80047f0 <_Z18start_soc_functionPv+0xe8>)
 80047c0:	edd3 7aa2 	vldr	s15, [r3, #648]	; 0x288
 80047c4:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80047fc <_Z18start_soc_functionPv+0xf4>
 80047c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80047cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047d0:	edc7 7a00 	vstr	s15, [r7]
 80047d4:	783b      	ldrb	r3, [r7, #0]
 80047d6:	b2da      	uxtb	r2, r3
 80047d8:	4b05      	ldr	r3, [pc, #20]	; (80047f0 <_Z18start_soc_functionPv+0xe8>)
 80047da:	f883 228c 	strb.w	r2, [r3, #652]	; 0x28c

	}
 80047de:	e7ce      	b.n	800477e <_Z18start_soc_functionPv+0x76>
 80047e0:	08016cd4 	.word	0x08016cd4
 80047e4:	2000164c 	.word	0x2000164c
 80047e8:	08016cec 	.word	0x08016cec
 80047ec:	3cf5c28f 	.word	0x3cf5c28f
 80047f0:	20001478 	.word	0x20001478
 80047f4:	461c4000 	.word	0x461c4000
 80047f8:	20001640 	.word	0x20001640
 80047fc:	42c80000 	.word	0x42c80000

08004800 <_Z41__static_initialization_and_destruction_0ii>:
}
 8004800:	b480      	push	{r7}
 8004802:	b083      	sub	sp, #12
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	6039      	str	r1, [r7, #0]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2b01      	cmp	r3, #1
 800480e:	d117      	bne.n	8004840 <_Z41__static_initialization_and_destruction_0ii+0x40>
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004816:	4293      	cmp	r3, r2
 8004818:	d112      	bne.n	8004840 <_Z41__static_initialization_and_destruction_0ii+0x40>
float output_current_factor = max_divided_current_sensor_output_voltage / 4096.0 * (1.0 / current_sensor_volts_to_amper);
 800481a:	4b0c      	ldr	r3, [pc, #48]	; (800484c <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 800481c:	edd3 7a00 	vldr	s15, [r3]
 8004820:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8004850 <_Z41__static_initialization_and_destruction_0ii+0x50>
 8004824:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004828:	4b0a      	ldr	r3, [pc, #40]	; (8004854 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 800482a:	edd3 6a00 	vldr	s13, [r3]
 800482e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8004832:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8004836:	ee67 7a27 	vmul.f32	s15, s14, s15
 800483a:	4b07      	ldr	r3, [pc, #28]	; (8004858 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 800483c:	edc3 7a00 	vstr	s15, [r3]
}
 8004840:	bf00      	nop
 8004842:	370c      	adds	r7, #12
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	4770      	bx	lr
 800484c:	2000021c 	.word	0x2000021c
 8004850:	45800000 	.word	0x45800000
 8004854:	20000220 	.word	0x20000220
 8004858:	20003f04 	.word	0x20003f04

0800485c <_GLOBAL__sub_I_max_divided_current_sensor_output_voltage>:
 800485c:	b580      	push	{r7, lr}
 800485e:	af00      	add	r7, sp, #0
 8004860:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004864:	2001      	movs	r0, #1
 8004866:	f7ff ffcb 	bl	8004800 <_Z41__static_initialization_and_destruction_0ii>
 800486a:	bd80      	pop	{r7, pc}

0800486c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b082      	sub	sp, #8
 8004870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004872:	4b11      	ldr	r3, [pc, #68]	; (80048b8 <HAL_MspInit+0x4c>)
 8004874:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004876:	4a10      	ldr	r2, [pc, #64]	; (80048b8 <HAL_MspInit+0x4c>)
 8004878:	f043 0301 	orr.w	r3, r3, #1
 800487c:	6613      	str	r3, [r2, #96]	; 0x60
 800487e:	4b0e      	ldr	r3, [pc, #56]	; (80048b8 <HAL_MspInit+0x4c>)
 8004880:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004882:	f003 0301 	and.w	r3, r3, #1
 8004886:	607b      	str	r3, [r7, #4]
 8004888:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800488a:	4b0b      	ldr	r3, [pc, #44]	; (80048b8 <HAL_MspInit+0x4c>)
 800488c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800488e:	4a0a      	ldr	r2, [pc, #40]	; (80048b8 <HAL_MspInit+0x4c>)
 8004890:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004894:	6593      	str	r3, [r2, #88]	; 0x58
 8004896:	4b08      	ldr	r3, [pc, #32]	; (80048b8 <HAL_MspInit+0x4c>)
 8004898:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800489a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800489e:	603b      	str	r3, [r7, #0]
 80048a0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80048a2:	2200      	movs	r2, #0
 80048a4:	210f      	movs	r1, #15
 80048a6:	f06f 0001 	mvn.w	r0, #1
 80048aa:	f003 f91d 	bl	8007ae8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80048ae:	bf00      	nop
 80048b0:	3708      	adds	r7, #8
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}
 80048b6:	bf00      	nop
 80048b8:	40021000 	.word	0x40021000

080048bc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b0b4      	sub	sp, #208	; 0xd0
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048c4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80048c8:	2200      	movs	r2, #0
 80048ca:	601a      	str	r2, [r3, #0]
 80048cc:	605a      	str	r2, [r3, #4]
 80048ce:	609a      	str	r2, [r3, #8]
 80048d0:	60da      	str	r2, [r3, #12]
 80048d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80048d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80048d8:	2298      	movs	r2, #152	; 0x98
 80048da:	2100      	movs	r1, #0
 80048dc:	4618      	mov	r0, r3
 80048de:	f00f fde4 	bl	80144aa <memset>
  if(hadc->Instance==ADC1)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a97      	ldr	r2, [pc, #604]	; (8004b44 <HAL_ADC_MspInit+0x288>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	f040 80ad 	bne.w	8004a48 <HAL_ADC_MspInit+0x18c>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80048ee:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80048f2:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 80048f4:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80048f8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80048fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004900:	4618      	mov	r0, r3
 8004902:	f005 ffa3 	bl	800a84c <HAL_RCCEx_PeriphCLKConfig>
 8004906:	4603      	mov	r3, r0
 8004908:	2b00      	cmp	r3, #0
 800490a:	d001      	beq.n	8004910 <HAL_ADC_MspInit+0x54>
    {
      Error_Handler();
 800490c:	f7ff fa0e 	bl	8003d2c <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 8004910:	4b8d      	ldr	r3, [pc, #564]	; (8004b48 <HAL_ADC_MspInit+0x28c>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	3301      	adds	r3, #1
 8004916:	4a8c      	ldr	r2, [pc, #560]	; (8004b48 <HAL_ADC_MspInit+0x28c>)
 8004918:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 800491a:	4b8b      	ldr	r3, [pc, #556]	; (8004b48 <HAL_ADC_MspInit+0x28c>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	2b01      	cmp	r3, #1
 8004920:	d10b      	bne.n	800493a <HAL_ADC_MspInit+0x7e>
      __HAL_RCC_ADC_CLK_ENABLE();
 8004922:	4b8a      	ldr	r3, [pc, #552]	; (8004b4c <HAL_ADC_MspInit+0x290>)
 8004924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004926:	4a89      	ldr	r2, [pc, #548]	; (8004b4c <HAL_ADC_MspInit+0x290>)
 8004928:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800492c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800492e:	4b87      	ldr	r3, [pc, #540]	; (8004b4c <HAL_ADC_MspInit+0x290>)
 8004930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004932:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004936:	623b      	str	r3, [r7, #32]
 8004938:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800493a:	4b84      	ldr	r3, [pc, #528]	; (8004b4c <HAL_ADC_MspInit+0x290>)
 800493c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800493e:	4a83      	ldr	r2, [pc, #524]	; (8004b4c <HAL_ADC_MspInit+0x290>)
 8004940:	f043 0301 	orr.w	r3, r3, #1
 8004944:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004946:	4b81      	ldr	r3, [pc, #516]	; (8004b4c <HAL_ADC_MspInit+0x290>)
 8004948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800494a:	f003 0301 	and.w	r3, r3, #1
 800494e:	61fb      	str	r3, [r7, #28]
 8004950:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004952:	4b7e      	ldr	r3, [pc, #504]	; (8004b4c <HAL_ADC_MspInit+0x290>)
 8004954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004956:	4a7d      	ldr	r2, [pc, #500]	; (8004b4c <HAL_ADC_MspInit+0x290>)
 8004958:	f043 0304 	orr.w	r3, r3, #4
 800495c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800495e:	4b7b      	ldr	r3, [pc, #492]	; (8004b4c <HAL_ADC_MspInit+0x290>)
 8004960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004962:	f003 0304 	and.w	r3, r3, #4
 8004966:	61bb      	str	r3, [r7, #24]
 8004968:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800496a:	4b78      	ldr	r3, [pc, #480]	; (8004b4c <HAL_ADC_MspInit+0x290>)
 800496c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800496e:	4a77      	ldr	r2, [pc, #476]	; (8004b4c <HAL_ADC_MspInit+0x290>)
 8004970:	f043 0302 	orr.w	r3, r3, #2
 8004974:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004976:	4b75      	ldr	r3, [pc, #468]	; (8004b4c <HAL_ADC_MspInit+0x290>)
 8004978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800497a:	f003 0302 	and.w	r3, r3, #2
 800497e:	617b      	str	r3, [r7, #20]
 8004980:	697b      	ldr	r3, [r7, #20]
    PA7     ------> ADC1_IN12
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = THERM_1_Pin|THERM_2_Pin|THERM_3_Pin|THERM_4_Pin
 8004982:	23f8      	movs	r3, #248	; 0xf8
 8004984:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
                          |THERM_5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8004988:	230b      	movs	r3, #11
 800498a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800498e:	2300      	movs	r3, #0
 8004990:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004994:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8004998:	4619      	mov	r1, r3
 800499a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800499e:	f003 fb3f 	bl	8008020 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = THERM_6_Pin|THERM_7_Pin;
 80049a2:	2330      	movs	r3, #48	; 0x30
 80049a4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80049a8:	230b      	movs	r3, #11
 80049aa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049ae:	2300      	movs	r3, #0
 80049b0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80049b4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80049b8:	4619      	mov	r1, r3
 80049ba:	4865      	ldr	r0, [pc, #404]	; (8004b50 <HAL_ADC_MspInit+0x294>)
 80049bc:	f003 fb30 	bl	8008020 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = THERM_8_Pin;
 80049c0:	2301      	movs	r3, #1
 80049c2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80049c6:	230b      	movs	r3, #11
 80049c8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049cc:	2300      	movs	r3, #0
 80049ce:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(THERM_8_GPIO_Port, &GPIO_InitStruct);
 80049d2:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80049d6:	4619      	mov	r1, r3
 80049d8:	485e      	ldr	r0, [pc, #376]	; (8004b54 <HAL_ADC_MspInit+0x298>)
 80049da:	f003 fb21 	bl	8008020 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80049de:	4b5e      	ldr	r3, [pc, #376]	; (8004b58 <HAL_ADC_MspInit+0x29c>)
 80049e0:	4a5e      	ldr	r2, [pc, #376]	; (8004b5c <HAL_ADC_MspInit+0x2a0>)
 80049e2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80049e4:	4b5c      	ldr	r3, [pc, #368]	; (8004b58 <HAL_ADC_MspInit+0x29c>)
 80049e6:	2205      	movs	r2, #5
 80049e8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80049ea:	4b5b      	ldr	r3, [pc, #364]	; (8004b58 <HAL_ADC_MspInit+0x29c>)
 80049ec:	2200      	movs	r2, #0
 80049ee:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80049f0:	4b59      	ldr	r3, [pc, #356]	; (8004b58 <HAL_ADC_MspInit+0x29c>)
 80049f2:	2200      	movs	r2, #0
 80049f4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80049f6:	4b58      	ldr	r3, [pc, #352]	; (8004b58 <HAL_ADC_MspInit+0x29c>)
 80049f8:	2280      	movs	r2, #128	; 0x80
 80049fa:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80049fc:	4b56      	ldr	r3, [pc, #344]	; (8004b58 <HAL_ADC_MspInit+0x29c>)
 80049fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004a02:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004a04:	4b54      	ldr	r3, [pc, #336]	; (8004b58 <HAL_ADC_MspInit+0x29c>)
 8004a06:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004a0a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004a0c:	4b52      	ldr	r3, [pc, #328]	; (8004b58 <HAL_ADC_MspInit+0x29c>)
 8004a0e:	2220      	movs	r2, #32
 8004a10:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8004a12:	4b51      	ldr	r3, [pc, #324]	; (8004b58 <HAL_ADC_MspInit+0x29c>)
 8004a14:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004a18:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004a1a:	484f      	ldr	r0, [pc, #316]	; (8004b58 <HAL_ADC_MspInit+0x29c>)
 8004a1c:	f003 f88e 	bl	8007b3c <HAL_DMA_Init>
 8004a20:	4603      	mov	r3, r0
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d001      	beq.n	8004a2a <HAL_ADC_MspInit+0x16e>
    {
      Error_Handler();
 8004a26:	f7ff f981 	bl	8003d2c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	4a4a      	ldr	r2, [pc, #296]	; (8004b58 <HAL_ADC_MspInit+0x29c>)
 8004a2e:	651a      	str	r2, [r3, #80]	; 0x50
 8004a30:	4a49      	ldr	r2, [pc, #292]	; (8004b58 <HAL_ADC_MspInit+0x29c>)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8004a36:	2200      	movs	r2, #0
 8004a38:	2105      	movs	r1, #5
 8004a3a:	2012      	movs	r0, #18
 8004a3c:	f003 f854 	bl	8007ae8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8004a40:	2012      	movs	r0, #18
 8004a42:	f003 f86d 	bl	8007b20 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8004a46:	e079      	b.n	8004b3c <HAL_ADC_MspInit+0x280>
  else if(hadc->Instance==ADC2)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a44      	ldr	r2, [pc, #272]	; (8004b60 <HAL_ADC_MspInit+0x2a4>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d174      	bne.n	8004b3c <HAL_ADC_MspInit+0x280>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8004a52:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004a56:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8004a58:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8004a5c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004a60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a64:	4618      	mov	r0, r3
 8004a66:	f005 fef1 	bl	800a84c <HAL_RCCEx_PeriphCLKConfig>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d001      	beq.n	8004a74 <HAL_ADC_MspInit+0x1b8>
      Error_Handler();
 8004a70:	f7ff f95c 	bl	8003d2c <Error_Handler>
    HAL_RCC_ADC_CLK_ENABLED++;
 8004a74:	4b34      	ldr	r3, [pc, #208]	; (8004b48 <HAL_ADC_MspInit+0x28c>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	3301      	adds	r3, #1
 8004a7a:	4a33      	ldr	r2, [pc, #204]	; (8004b48 <HAL_ADC_MspInit+0x28c>)
 8004a7c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8004a7e:	4b32      	ldr	r3, [pc, #200]	; (8004b48 <HAL_ADC_MspInit+0x28c>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	2b01      	cmp	r3, #1
 8004a84:	d10b      	bne.n	8004a9e <HAL_ADC_MspInit+0x1e2>
      __HAL_RCC_ADC_CLK_ENABLE();
 8004a86:	4b31      	ldr	r3, [pc, #196]	; (8004b4c <HAL_ADC_MspInit+0x290>)
 8004a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a8a:	4a30      	ldr	r2, [pc, #192]	; (8004b4c <HAL_ADC_MspInit+0x290>)
 8004a8c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004a90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004a92:	4b2e      	ldr	r3, [pc, #184]	; (8004b4c <HAL_ADC_MspInit+0x290>)
 8004a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a9a:	613b      	str	r3, [r7, #16]
 8004a9c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a9e:	4b2b      	ldr	r3, [pc, #172]	; (8004b4c <HAL_ADC_MspInit+0x290>)
 8004aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004aa2:	4a2a      	ldr	r2, [pc, #168]	; (8004b4c <HAL_ADC_MspInit+0x290>)
 8004aa4:	f043 0302 	orr.w	r3, r3, #2
 8004aa8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004aaa:	4b28      	ldr	r3, [pc, #160]	; (8004b4c <HAL_ADC_MspInit+0x290>)
 8004aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004aae:	f003 0302 	and.w	r3, r3, #2
 8004ab2:	60fb      	str	r3, [r7, #12]
 8004ab4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = CURRENT_SENSOR_Pin;
 8004ab6:	2302      	movs	r3, #2
 8004ab8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8004abc:	230b      	movs	r3, #11
 8004abe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(CURRENT_SENSOR_GPIO_Port, &GPIO_InitStruct);
 8004ac8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8004acc:	4619      	mov	r1, r3
 8004ace:	4821      	ldr	r0, [pc, #132]	; (8004b54 <HAL_ADC_MspInit+0x298>)
 8004ad0:	f003 faa6 	bl	8008020 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Channel1;
 8004ad4:	4b23      	ldr	r3, [pc, #140]	; (8004b64 <HAL_ADC_MspInit+0x2a8>)
 8004ad6:	4a24      	ldr	r2, [pc, #144]	; (8004b68 <HAL_ADC_MspInit+0x2ac>)
 8004ad8:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8004ada:	4b22      	ldr	r3, [pc, #136]	; (8004b64 <HAL_ADC_MspInit+0x2a8>)
 8004adc:	2206      	movs	r2, #6
 8004ade:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004ae0:	4b20      	ldr	r3, [pc, #128]	; (8004b64 <HAL_ADC_MspInit+0x2a8>)
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8004ae6:	4b1f      	ldr	r3, [pc, #124]	; (8004b64 <HAL_ADC_MspInit+0x2a8>)
 8004ae8:	2200      	movs	r2, #0
 8004aea:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8004aec:	4b1d      	ldr	r3, [pc, #116]	; (8004b64 <HAL_ADC_MspInit+0x2a8>)
 8004aee:	2280      	movs	r2, #128	; 0x80
 8004af0:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004af2:	4b1c      	ldr	r3, [pc, #112]	; (8004b64 <HAL_ADC_MspInit+0x2a8>)
 8004af4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004af8:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004afa:	4b1a      	ldr	r3, [pc, #104]	; (8004b64 <HAL_ADC_MspInit+0x2a8>)
 8004afc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b00:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8004b02:	4b18      	ldr	r3, [pc, #96]	; (8004b64 <HAL_ADC_MspInit+0x2a8>)
 8004b04:	2220      	movs	r2, #32
 8004b06:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_HIGH;
 8004b08:	4b16      	ldr	r3, [pc, #88]	; (8004b64 <HAL_ADC_MspInit+0x2a8>)
 8004b0a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004b0e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8004b10:	4814      	ldr	r0, [pc, #80]	; (8004b64 <HAL_ADC_MspInit+0x2a8>)
 8004b12:	f003 f813 	bl	8007b3c <HAL_DMA_Init>
 8004b16:	4603      	mov	r3, r0
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d001      	beq.n	8004b20 <HAL_ADC_MspInit+0x264>
      Error_Handler();
 8004b1c:	f7ff f906 	bl	8003d2c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	4a10      	ldr	r2, [pc, #64]	; (8004b64 <HAL_ADC_MspInit+0x2a8>)
 8004b24:	651a      	str	r2, [r3, #80]	; 0x50
 8004b26:	4a0f      	ldr	r2, [pc, #60]	; (8004b64 <HAL_ADC_MspInit+0x2a8>)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	2105      	movs	r1, #5
 8004b30:	2012      	movs	r0, #18
 8004b32:	f002 ffd9 	bl	8007ae8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8004b36:	2012      	movs	r0, #18
 8004b38:	f002 fff2 	bl	8007b20 <HAL_NVIC_EnableIRQ>
}
 8004b3c:	bf00      	nop
 8004b3e:	37d0      	adds	r7, #208	; 0xd0
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}
 8004b44:	50040000 	.word	0x50040000
 8004b48:	20003f08 	.word	0x20003f08
 8004b4c:	40021000 	.word	0x40021000
 8004b50:	48000800 	.word	0x48000800
 8004b54:	48000400 	.word	0x48000400
 8004b58:	200019ec 	.word	0x200019ec
 8004b5c:	40020008 	.word	0x40020008
 8004b60:	50040100 	.word	0x50040100
 8004b64:	20001a4c 	.word	0x20001a4c
 8004b68:	40020408 	.word	0x40020408

08004b6c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b08a      	sub	sp, #40	; 0x28
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b74:	f107 0314 	add.w	r3, r7, #20
 8004b78:	2200      	movs	r2, #0
 8004b7a:	601a      	str	r2, [r3, #0]
 8004b7c:	605a      	str	r2, [r3, #4]
 8004b7e:	609a      	str	r2, [r3, #8]
 8004b80:	60da      	str	r2, [r3, #12]
 8004b82:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a1b      	ldr	r2, [pc, #108]	; (8004bf8 <HAL_CAN_MspInit+0x8c>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d130      	bne.n	8004bf0 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8004b8e:	4b1b      	ldr	r3, [pc, #108]	; (8004bfc <HAL_CAN_MspInit+0x90>)
 8004b90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b92:	4a1a      	ldr	r2, [pc, #104]	; (8004bfc <HAL_CAN_MspInit+0x90>)
 8004b94:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004b98:	6593      	str	r3, [r2, #88]	; 0x58
 8004b9a:	4b18      	ldr	r3, [pc, #96]	; (8004bfc <HAL_CAN_MspInit+0x90>)
 8004b9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ba2:	613b      	str	r3, [r7, #16]
 8004ba4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ba6:	4b15      	ldr	r3, [pc, #84]	; (8004bfc <HAL_CAN_MspInit+0x90>)
 8004ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004baa:	4a14      	ldr	r2, [pc, #80]	; (8004bfc <HAL_CAN_MspInit+0x90>)
 8004bac:	f043 0302 	orr.w	r3, r3, #2
 8004bb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004bb2:	4b12      	ldr	r3, [pc, #72]	; (8004bfc <HAL_CAN_MspInit+0x90>)
 8004bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bb6:	f003 0302 	and.w	r3, r3, #2
 8004bba:	60fb      	str	r3, [r7, #12]
 8004bbc:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004bbe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004bc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bc4:	2302      	movs	r3, #2
 8004bc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bc8:	2300      	movs	r3, #0
 8004bca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004bcc:	2303      	movs	r3, #3
 8004bce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8004bd0:	2309      	movs	r3, #9
 8004bd2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004bd4:	f107 0314 	add.w	r3, r7, #20
 8004bd8:	4619      	mov	r1, r3
 8004bda:	4809      	ldr	r0, [pc, #36]	; (8004c00 <HAL_CAN_MspInit+0x94>)
 8004bdc:	f003 fa20 	bl	8008020 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 8004be0:	2200      	movs	r2, #0
 8004be2:	2105      	movs	r1, #5
 8004be4:	2013      	movs	r0, #19
 8004be6:	f002 ff7f 	bl	8007ae8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8004bea:	2013      	movs	r0, #19
 8004bec:	f002 ff98 	bl	8007b20 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8004bf0:	bf00      	nop
 8004bf2:	3728      	adds	r7, #40	; 0x28
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}
 8004bf8:	40006400 	.word	0x40006400
 8004bfc:	40021000 	.word	0x40021000
 8004c00:	48000400 	.word	0x48000400

08004c04 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b0aa      	sub	sp, #168	; 0xa8
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004c0c:	f107 0310 	add.w	r3, r7, #16
 8004c10:	2298      	movs	r2, #152	; 0x98
 8004c12:	2100      	movs	r1, #0
 8004c14:	4618      	mov	r0, r3
 8004c16:	f00f fc48 	bl	80144aa <memset>
  if(hrtc->Instance==RTC)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a16      	ldr	r2, [pc, #88]	; (8004c78 <HAL_RTC_MspInit+0x74>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d124      	bne.n	8004c6e <HAL_RTC_MspInit+0x6a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004c24:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004c28:	613b      	str	r3, [r7, #16]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8004c2a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004c2e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004c32:	f107 0310 	add.w	r3, r7, #16
 8004c36:	4618      	mov	r0, r3
 8004c38:	f005 fe08 	bl	800a84c <HAL_RCCEx_PeriphCLKConfig>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d001      	beq.n	8004c46 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8004c42:	f7ff f873 	bl	8003d2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004c46:	4b0d      	ldr	r3, [pc, #52]	; (8004c7c <HAL_RTC_MspInit+0x78>)
 8004c48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c4c:	4a0b      	ldr	r2, [pc, #44]	; (8004c7c <HAL_RTC_MspInit+0x78>)
 8004c4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8004c56:	4b09      	ldr	r3, [pc, #36]	; (8004c7c <HAL_RTC_MspInit+0x78>)
 8004c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c5a:	4a08      	ldr	r2, [pc, #32]	; (8004c7c <HAL_RTC_MspInit+0x78>)
 8004c5c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004c60:	6593      	str	r3, [r2, #88]	; 0x58
 8004c62:	4b06      	ldr	r3, [pc, #24]	; (8004c7c <HAL_RTC_MspInit+0x78>)
 8004c64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c6a:	60fb      	str	r3, [r7, #12]
 8004c6c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8004c6e:	bf00      	nop
 8004c70:	37a8      	adds	r7, #168	; 0xa8
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}
 8004c76:	bf00      	nop
 8004c78:	40002800 	.word	0x40002800
 8004c7c:	40021000 	.word	0x40021000

08004c80 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b08a      	sub	sp, #40	; 0x28
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c88:	f107 0314 	add.w	r3, r7, #20
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	601a      	str	r2, [r3, #0]
 8004c90:	605a      	str	r2, [r3, #4]
 8004c92:	609a      	str	r2, [r3, #8]
 8004c94:	60da      	str	r2, [r3, #12]
 8004c96:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a1f      	ldr	r2, [pc, #124]	; (8004d1c <HAL_SPI_MspInit+0x9c>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d137      	bne.n	8004d12 <HAL_SPI_MspInit+0x92>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004ca2:	4b1f      	ldr	r3, [pc, #124]	; (8004d20 <HAL_SPI_MspInit+0xa0>)
 8004ca4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ca6:	4a1e      	ldr	r2, [pc, #120]	; (8004d20 <HAL_SPI_MspInit+0xa0>)
 8004ca8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004cac:	6613      	str	r3, [r2, #96]	; 0x60
 8004cae:	4b1c      	ldr	r3, [pc, #112]	; (8004d20 <HAL_SPI_MspInit+0xa0>)
 8004cb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cb2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004cb6:	613b      	str	r3, [r7, #16]
 8004cb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004cba:	4b19      	ldr	r3, [pc, #100]	; (8004d20 <HAL_SPI_MspInit+0xa0>)
 8004cbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cbe:	4a18      	ldr	r2, [pc, #96]	; (8004d20 <HAL_SPI_MspInit+0xa0>)
 8004cc0:	f043 0302 	orr.w	r3, r3, #2
 8004cc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004cc6:	4b16      	ldr	r3, [pc, #88]	; (8004d20 <HAL_SPI_MspInit+0xa0>)
 8004cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cca:	f003 0302 	and.w	r3, r3, #2
 8004cce:	60fb      	str	r3, [r7, #12]
 8004cd0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8004cd2:	2328      	movs	r3, #40	; 0x28
 8004cd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cd6:	2302      	movs	r3, #2
 8004cd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004cde:	2303      	movs	r3, #3
 8004ce0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004ce2:	2305      	movs	r3, #5
 8004ce4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ce6:	f107 0314 	add.w	r3, r7, #20
 8004cea:	4619      	mov	r1, r3
 8004cec:	480d      	ldr	r0, [pc, #52]	; (8004d24 <HAL_SPI_MspInit+0xa4>)
 8004cee:	f003 f997 	bl	8008020 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004cf2:	2310      	movs	r3, #16
 8004cf4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cf6:	2302      	movs	r3, #2
 8004cf8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004cfe:	2303      	movs	r3, #3
 8004d00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004d02:	2305      	movs	r3, #5
 8004d04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d06:	f107 0314 	add.w	r3, r7, #20
 8004d0a:	4619      	mov	r1, r3
 8004d0c:	4805      	ldr	r0, [pc, #20]	; (8004d24 <HAL_SPI_MspInit+0xa4>)
 8004d0e:	f003 f987 	bl	8008020 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8004d12:	bf00      	nop
 8004d14:	3728      	adds	r7, #40	; 0x28
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}
 8004d1a:	bf00      	nop
 8004d1c:	40013000 	.word	0x40013000
 8004d20:	40021000 	.word	0x40021000
 8004d24:	48000400 	.word	0x48000400

08004d28 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b086      	sub	sp, #24
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a23      	ldr	r2, [pc, #140]	; (8004dc4 <HAL_TIM_Base_MspInit+0x9c>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d114      	bne.n	8004d64 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004d3a:	4b23      	ldr	r3, [pc, #140]	; (8004dc8 <HAL_TIM_Base_MspInit+0xa0>)
 8004d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d3e:	4a22      	ldr	r2, [pc, #136]	; (8004dc8 <HAL_TIM_Base_MspInit+0xa0>)
 8004d40:	f043 0302 	orr.w	r3, r3, #2
 8004d44:	6593      	str	r3, [r2, #88]	; 0x58
 8004d46:	4b20      	ldr	r3, [pc, #128]	; (8004dc8 <HAL_TIM_Base_MspInit+0xa0>)
 8004d48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d4a:	f003 0302 	and.w	r3, r3, #2
 8004d4e:	617b      	str	r3, [r7, #20]
 8004d50:	697b      	ldr	r3, [r7, #20]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8004d52:	2200      	movs	r2, #0
 8004d54:	2105      	movs	r1, #5
 8004d56:	201d      	movs	r0, #29
 8004d58:	f002 fec6 	bl	8007ae8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004d5c:	201d      	movs	r0, #29
 8004d5e:	f002 fedf 	bl	8007b20 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8004d62:	e02a      	b.n	8004dba <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM6)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a18      	ldr	r2, [pc, #96]	; (8004dcc <HAL_TIM_Base_MspInit+0xa4>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d114      	bne.n	8004d98 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004d6e:	4b16      	ldr	r3, [pc, #88]	; (8004dc8 <HAL_TIM_Base_MspInit+0xa0>)
 8004d70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d72:	4a15      	ldr	r2, [pc, #84]	; (8004dc8 <HAL_TIM_Base_MspInit+0xa0>)
 8004d74:	f043 0310 	orr.w	r3, r3, #16
 8004d78:	6593      	str	r3, [r2, #88]	; 0x58
 8004d7a:	4b13      	ldr	r3, [pc, #76]	; (8004dc8 <HAL_TIM_Base_MspInit+0xa0>)
 8004d7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d7e:	f003 0310 	and.w	r3, r3, #16
 8004d82:	613b      	str	r3, [r7, #16]
 8004d84:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8004d86:	2200      	movs	r2, #0
 8004d88:	2105      	movs	r1, #5
 8004d8a:	2036      	movs	r0, #54	; 0x36
 8004d8c:	f002 feac 	bl	8007ae8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004d90:	2036      	movs	r0, #54	; 0x36
 8004d92:	f002 fec5 	bl	8007b20 <HAL_NVIC_EnableIRQ>
}
 8004d96:	e010      	b.n	8004dba <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM8)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a0c      	ldr	r2, [pc, #48]	; (8004dd0 <HAL_TIM_Base_MspInit+0xa8>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d10b      	bne.n	8004dba <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004da2:	4b09      	ldr	r3, [pc, #36]	; (8004dc8 <HAL_TIM_Base_MspInit+0xa0>)
 8004da4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004da6:	4a08      	ldr	r2, [pc, #32]	; (8004dc8 <HAL_TIM_Base_MspInit+0xa0>)
 8004da8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004dac:	6613      	str	r3, [r2, #96]	; 0x60
 8004dae:	4b06      	ldr	r3, [pc, #24]	; (8004dc8 <HAL_TIM_Base_MspInit+0xa0>)
 8004db0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004db2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004db6:	60fb      	str	r3, [r7, #12]
 8004db8:	68fb      	ldr	r3, [r7, #12]
}
 8004dba:	bf00      	nop
 8004dbc:	3718      	adds	r7, #24
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}
 8004dc2:	bf00      	nop
 8004dc4:	40000400 	.word	0x40000400
 8004dc8:	40021000 	.word	0x40021000
 8004dcc:	40001000 	.word	0x40001000
 8004dd0:	40013400 	.word	0x40013400

08004dd4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b08c      	sub	sp, #48	; 0x30
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8004de0:	2300      	movs	r3, #0
 8004de2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM16 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8004de4:	2200      	movs	r2, #0
 8004de6:	6879      	ldr	r1, [r7, #4]
 8004de8:	2019      	movs	r0, #25
 8004dea:	f002 fe7d 	bl	8007ae8 <HAL_NVIC_SetPriority>

  /* Enable the TIM16 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8004dee:	2019      	movs	r0, #25
 8004df0:	f002 fe96 	bl	8007b20 <HAL_NVIC_EnableIRQ>

  /* Enable TIM16 clock */
  __HAL_RCC_TIM16_CLK_ENABLE();
 8004df4:	4b1e      	ldr	r3, [pc, #120]	; (8004e70 <HAL_InitTick+0x9c>)
 8004df6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004df8:	4a1d      	ldr	r2, [pc, #116]	; (8004e70 <HAL_InitTick+0x9c>)
 8004dfa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004dfe:	6613      	str	r3, [r2, #96]	; 0x60
 8004e00:	4b1b      	ldr	r3, [pc, #108]	; (8004e70 <HAL_InitTick+0x9c>)
 8004e02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e08:	60fb      	str	r3, [r7, #12]
 8004e0a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004e0c:	f107 0210 	add.w	r2, r7, #16
 8004e10:	f107 0314 	add.w	r3, r7, #20
 8004e14:	4611      	mov	r1, r2
 8004e16:	4618      	mov	r0, r3
 8004e18:	f005 fc28 	bl	800a66c <HAL_RCC_GetClockConfig>

  /* Compute TIM16 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8004e1c:	f005 fc10 	bl	800a640 <HAL_RCC_GetPCLK2Freq>
 8004e20:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM16 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e24:	4a13      	ldr	r2, [pc, #76]	; (8004e74 <HAL_InitTick+0xa0>)
 8004e26:	fba2 2303 	umull	r2, r3, r2, r3
 8004e2a:	0c9b      	lsrs	r3, r3, #18
 8004e2c:	3b01      	subs	r3, #1
 8004e2e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM16 */
  htim16.Instance = TIM16;
 8004e30:	4b11      	ldr	r3, [pc, #68]	; (8004e78 <HAL_InitTick+0xa4>)
 8004e32:	4a12      	ldr	r2, [pc, #72]	; (8004e7c <HAL_InitTick+0xa8>)
 8004e34:	601a      	str	r2, [r3, #0]
  + Period = [(TIM16CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim16.Init.Period = (1000000U / 1000U) - 1U;
 8004e36:	4b10      	ldr	r3, [pc, #64]	; (8004e78 <HAL_InitTick+0xa4>)
 8004e38:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004e3c:	60da      	str	r2, [r3, #12]
  htim16.Init.Prescaler = uwPrescalerValue;
 8004e3e:	4a0e      	ldr	r2, [pc, #56]	; (8004e78 <HAL_InitTick+0xa4>)
 8004e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e42:	6053      	str	r3, [r2, #4]
  htim16.Init.ClockDivision = 0;
 8004e44:	4b0c      	ldr	r3, [pc, #48]	; (8004e78 <HAL_InitTick+0xa4>)
 8004e46:	2200      	movs	r2, #0
 8004e48:	611a      	str	r2, [r3, #16]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e4a:	4b0b      	ldr	r3, [pc, #44]	; (8004e78 <HAL_InitTick+0xa4>)
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim16) == HAL_OK)
 8004e50:	4809      	ldr	r0, [pc, #36]	; (8004e78 <HAL_InitTick+0xa4>)
 8004e52:	f007 fb13 	bl	800c47c <HAL_TIM_Base_Init>
 8004e56:	4603      	mov	r3, r0
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d104      	bne.n	8004e66 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim16);
 8004e5c:	4806      	ldr	r0, [pc, #24]	; (8004e78 <HAL_InitTick+0xa4>)
 8004e5e:	f007 fbcd 	bl	800c5fc <HAL_TIM_Base_Start_IT>
 8004e62:	4603      	mov	r3, r0
 8004e64:	e000      	b.n	8004e68 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3730      	adds	r7, #48	; 0x30
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}
 8004e70:	40021000 	.word	0x40021000
 8004e74:	431bde83 	.word	0x431bde83
 8004e78:	20003f0c 	.word	0x20003f0c
 8004e7c:	40014400 	.word	0x40014400

08004e80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004e80:	b480      	push	{r7}
 8004e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004e84:	e7fe      	b.n	8004e84 <NMI_Handler+0x4>

08004e86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004e86:	b480      	push	{r7}
 8004e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004e8a:	e7fe      	b.n	8004e8a <HardFault_Handler+0x4>

08004e8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004e90:	e7fe      	b.n	8004e90 <MemManage_Handler+0x4>

08004e92 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004e92:	b480      	push	{r7}
 8004e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004e96:	e7fe      	b.n	8004e96 <BusFault_Handler+0x4>

08004e98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004e9c:	e7fe      	b.n	8004e9c <UsageFault_Handler+0x4>

08004e9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004e9e:	b480      	push	{r7}
 8004ea0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004ea2:	bf00      	nop
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eaa:	4770      	bx	lr

08004eac <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004eb0:	4802      	ldr	r0, [pc, #8]	; (8004ebc <DMA1_Channel1_IRQHandler+0x10>)
 8004eb2:	f002 ff66 	bl	8007d82 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004eb6:	bf00      	nop
 8004eb8:	bd80      	pop	{r7, pc}
 8004eba:	bf00      	nop
 8004ebc:	200019ec 	.word	0x200019ec

08004ec0 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8004ec4:	4803      	ldr	r0, [pc, #12]	; (8004ed4 <ADC1_2_IRQHandler+0x14>)
 8004ec6:	f000 fdd9 	bl	8005a7c <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8004eca:	4803      	ldr	r0, [pc, #12]	; (8004ed8 <ADC1_2_IRQHandler+0x18>)
 8004ecc:	f000 fdd6 	bl	8005a7c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8004ed0:	bf00      	nop
 8004ed2:	bd80      	pop	{r7, pc}
 8004ed4:	2000191c 	.word	0x2000191c
 8004ed8:	20001984 	.word	0x20001984

08004edc <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8004ee0:	4802      	ldr	r0, [pc, #8]	; (8004eec <CAN1_TX_IRQHandler+0x10>)
 8004ee2:	f002 fb1a 	bl	800751a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8004ee6:	bf00      	nop
 8004ee8:	bd80      	pop	{r7, pc}
 8004eea:	bf00      	nop
 8004eec:	20001aac 	.word	0x20001aac

08004ef0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8004ef4:	4802      	ldr	r0, [pc, #8]	; (8004f00 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8004ef6:	f007 fbf1 	bl	800c6dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8004efa:	bf00      	nop
 8004efc:	bd80      	pop	{r7, pc}
 8004efe:	bf00      	nop
 8004f00:	20003f0c 	.word	0x20003f0c

08004f04 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004f08:	4802      	ldr	r0, [pc, #8]	; (8004f14 <TIM3_IRQHandler+0x10>)
 8004f0a:	f007 fbe7 	bl	800c6dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004f0e:	bf00      	nop
 8004f10:	bd80      	pop	{r7, pc}
 8004f12:	bf00      	nop
 8004f14:	20001b6c 	.word	0x20001b6c

08004f18 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004f1c:	4802      	ldr	r0, [pc, #8]	; (8004f28 <TIM6_DAC_IRQHandler+0x10>)
 8004f1e:	f007 fbdd 	bl	800c6dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004f22:	bf00      	nop
 8004f24:	bd80      	pop	{r7, pc}
 8004f26:	bf00      	nop
 8004f28:	20001bb8 	.word	0x20001bb8

08004f2c <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8004f30:	4802      	ldr	r0, [pc, #8]	; (8004f3c <DMA2_Channel1_IRQHandler+0x10>)
 8004f32:	f002 ff26 	bl	8007d82 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8004f36:	bf00      	nop
 8004f38:	bd80      	pop	{r7, pc}
 8004f3a:	bf00      	nop
 8004f3c:	20001a4c 	.word	0x20001a4c

08004f40 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8004f44:	4802      	ldr	r0, [pc, #8]	; (8004f50 <OTG_FS_IRQHandler+0x10>)
 8004f46:	f003 fb80 	bl	800864a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8004f4a:	bf00      	nop
 8004f4c:	bd80      	pop	{r7, pc}
 8004f4e:	bf00      	nop
 8004f50:	200090fc 	.word	0x200090fc

08004f54 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004f54:	b480      	push	{r7}
 8004f56:	af00      	add	r7, sp, #0
	return 1;
 8004f58:	2301      	movs	r3, #1
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f62:	4770      	bx	lr

08004f64 <_kill>:

int _kill(int pid, int sig)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b082      	sub	sp, #8
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
 8004f6c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004f6e:	f00f fb45 	bl	80145fc <__errno>
 8004f72:	4603      	mov	r3, r0
 8004f74:	2216      	movs	r2, #22
 8004f76:	601a      	str	r2, [r3, #0]
	return -1;
 8004f78:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	3708      	adds	r7, #8
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd80      	pop	{r7, pc}

08004f84 <_exit>:

void _exit (int status)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b082      	sub	sp, #8
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004f8c:	f04f 31ff 	mov.w	r1, #4294967295
 8004f90:	6878      	ldr	r0, [r7, #4]
 8004f92:	f7ff ffe7 	bl	8004f64 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004f96:	e7fe      	b.n	8004f96 <_exit+0x12>

08004f98 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b086      	sub	sp, #24
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	60f8      	str	r0, [r7, #12]
 8004fa0:	60b9      	str	r1, [r7, #8]
 8004fa2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	617b      	str	r3, [r7, #20]
 8004fa8:	e00a      	b.n	8004fc0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004faa:	f3af 8000 	nop.w
 8004fae:	4601      	mov	r1, r0
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	1c5a      	adds	r2, r3, #1
 8004fb4:	60ba      	str	r2, [r7, #8]
 8004fb6:	b2ca      	uxtb	r2, r1
 8004fb8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	3301      	adds	r3, #1
 8004fbe:	617b      	str	r3, [r7, #20]
 8004fc0:	697a      	ldr	r2, [r7, #20]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	dbf0      	blt.n	8004faa <_read+0x12>
	}

return len;
 8004fc8:	687b      	ldr	r3, [r7, #4]
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3718      	adds	r7, #24
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}

08004fd2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004fd2:	b580      	push	{r7, lr}
 8004fd4:	b086      	sub	sp, #24
 8004fd6:	af00      	add	r7, sp, #0
 8004fd8:	60f8      	str	r0, [r7, #12]
 8004fda:	60b9      	str	r1, [r7, #8]
 8004fdc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004fde:	2300      	movs	r3, #0
 8004fe0:	617b      	str	r3, [r7, #20]
 8004fe2:	e009      	b.n	8004ff8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	1c5a      	adds	r2, r3, #1
 8004fe8:	60ba      	str	r2, [r7, #8]
 8004fea:	781b      	ldrb	r3, [r3, #0]
 8004fec:	4618      	mov	r0, r3
 8004fee:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	3301      	adds	r3, #1
 8004ff6:	617b      	str	r3, [r7, #20]
 8004ff8:	697a      	ldr	r2, [r7, #20]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	429a      	cmp	r2, r3
 8004ffe:	dbf1      	blt.n	8004fe4 <_write+0x12>
	}
	return len;
 8005000:	687b      	ldr	r3, [r7, #4]
}
 8005002:	4618      	mov	r0, r3
 8005004:	3718      	adds	r7, #24
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}

0800500a <_close>:

int _close(int file)
{
 800500a:	b480      	push	{r7}
 800500c:	b083      	sub	sp, #12
 800500e:	af00      	add	r7, sp, #0
 8005010:	6078      	str	r0, [r7, #4]
	return -1;
 8005012:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005016:	4618      	mov	r0, r3
 8005018:	370c      	adds	r7, #12
 800501a:	46bd      	mov	sp, r7
 800501c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005020:	4770      	bx	lr

08005022 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005022:	b480      	push	{r7}
 8005024:	b083      	sub	sp, #12
 8005026:	af00      	add	r7, sp, #0
 8005028:	6078      	str	r0, [r7, #4]
 800502a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005032:	605a      	str	r2, [r3, #4]
	return 0;
 8005034:	2300      	movs	r3, #0
}
 8005036:	4618      	mov	r0, r3
 8005038:	370c      	adds	r7, #12
 800503a:	46bd      	mov	sp, r7
 800503c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005040:	4770      	bx	lr

08005042 <_isatty>:

int _isatty(int file)
{
 8005042:	b480      	push	{r7}
 8005044:	b083      	sub	sp, #12
 8005046:	af00      	add	r7, sp, #0
 8005048:	6078      	str	r0, [r7, #4]
	return 1;
 800504a:	2301      	movs	r3, #1
}
 800504c:	4618      	mov	r0, r3
 800504e:	370c      	adds	r7, #12
 8005050:	46bd      	mov	sp, r7
 8005052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005056:	4770      	bx	lr

08005058 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005058:	b480      	push	{r7}
 800505a:	b085      	sub	sp, #20
 800505c:	af00      	add	r7, sp, #0
 800505e:	60f8      	str	r0, [r7, #12]
 8005060:	60b9      	str	r1, [r7, #8]
 8005062:	607a      	str	r2, [r7, #4]
	return 0;
 8005064:	2300      	movs	r3, #0
}
 8005066:	4618      	mov	r0, r3
 8005068:	3714      	adds	r7, #20
 800506a:	46bd      	mov	sp, r7
 800506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005070:	4770      	bx	lr
	...

08005074 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b086      	sub	sp, #24
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800507c:	4a14      	ldr	r2, [pc, #80]	; (80050d0 <_sbrk+0x5c>)
 800507e:	4b15      	ldr	r3, [pc, #84]	; (80050d4 <_sbrk+0x60>)
 8005080:	1ad3      	subs	r3, r2, r3
 8005082:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005088:	4b13      	ldr	r3, [pc, #76]	; (80050d8 <_sbrk+0x64>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d102      	bne.n	8005096 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005090:	4b11      	ldr	r3, [pc, #68]	; (80050d8 <_sbrk+0x64>)
 8005092:	4a12      	ldr	r2, [pc, #72]	; (80050dc <_sbrk+0x68>)
 8005094:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005096:	4b10      	ldr	r3, [pc, #64]	; (80050d8 <_sbrk+0x64>)
 8005098:	681a      	ldr	r2, [r3, #0]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	4413      	add	r3, r2
 800509e:	693a      	ldr	r2, [r7, #16]
 80050a0:	429a      	cmp	r2, r3
 80050a2:	d207      	bcs.n	80050b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80050a4:	f00f faaa 	bl	80145fc <__errno>
 80050a8:	4603      	mov	r3, r0
 80050aa:	220c      	movs	r2, #12
 80050ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80050ae:	f04f 33ff 	mov.w	r3, #4294967295
 80050b2:	e009      	b.n	80050c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80050b4:	4b08      	ldr	r3, [pc, #32]	; (80050d8 <_sbrk+0x64>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80050ba:	4b07      	ldr	r3, [pc, #28]	; (80050d8 <_sbrk+0x64>)
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	4413      	add	r3, r2
 80050c2:	4a05      	ldr	r2, [pc, #20]	; (80050d8 <_sbrk+0x64>)
 80050c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80050c6:	68fb      	ldr	r3, [r7, #12]
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	3718      	adds	r7, #24
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}
 80050d0:	20050000 	.word	0x20050000
 80050d4:	00000400 	.word	0x00000400
 80050d8:	20003f58 	.word	0x20003f58
 80050dc:	20009978 	.word	0x20009978

080050e0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80050e0:	b480      	push	{r7}
 80050e2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80050e4:	4b06      	ldr	r3, [pc, #24]	; (8005100 <SystemInit+0x20>)
 80050e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050ea:	4a05      	ldr	r2, [pc, #20]	; (8005100 <SystemInit+0x20>)
 80050ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80050f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80050f4:	bf00      	nop
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	4770      	bx	lr
 80050fe:	bf00      	nop
 8005100:	e000ed00 	.word	0xe000ed00

08005104 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8005104:	f8df d034 	ldr.w	sp, [pc, #52]	; 800513c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005108:	f7ff ffea 	bl	80050e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800510c:	480c      	ldr	r0, [pc, #48]	; (8005140 <LoopForever+0x6>)
  ldr r1, =_edata
 800510e:	490d      	ldr	r1, [pc, #52]	; (8005144 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005110:	4a0d      	ldr	r2, [pc, #52]	; (8005148 <LoopForever+0xe>)
  movs r3, #0
 8005112:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005114:	e002      	b.n	800511c <LoopCopyDataInit>

08005116 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005116:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005118:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800511a:	3304      	adds	r3, #4

0800511c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800511c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800511e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005120:	d3f9      	bcc.n	8005116 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005122:	4a0a      	ldr	r2, [pc, #40]	; (800514c <LoopForever+0x12>)
  ldr r4, =_ebss
 8005124:	4c0a      	ldr	r4, [pc, #40]	; (8005150 <LoopForever+0x16>)
  movs r3, #0
 8005126:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005128:	e001      	b.n	800512e <LoopFillZerobss>

0800512a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800512a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800512c:	3204      	adds	r2, #4

0800512e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800512e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005130:	d3fb      	bcc.n	800512a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005132:	f00f fa69 	bl	8014608 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005136:	f7fe f897 	bl	8003268 <main>

0800513a <LoopForever>:

LoopForever:
    b LoopForever
 800513a:	e7fe      	b.n	800513a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800513c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8005140:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005144:	20000580 	.word	0x20000580
  ldr r2, =_sidata
 8005148:	080170f8 	.word	0x080170f8
  ldr r2, =_sbss
 800514c:	20000580 	.word	0x20000580
  ldr r4, =_ebss
 8005150:	20009974 	.word	0x20009974

08005154 <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005154:	e7fe      	b.n	8005154 <CAN1_RX0_IRQHandler>

08005156 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005156:	b580      	push	{r7, lr}
 8005158:	b082      	sub	sp, #8
 800515a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800515c:	2300      	movs	r3, #0
 800515e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005160:	2003      	movs	r0, #3
 8005162:	f002 fcb6 	bl	8007ad2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005166:	200f      	movs	r0, #15
 8005168:	f7ff fe34 	bl	8004dd4 <HAL_InitTick>
 800516c:	4603      	mov	r3, r0
 800516e:	2b00      	cmp	r3, #0
 8005170:	d002      	beq.n	8005178 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	71fb      	strb	r3, [r7, #7]
 8005176:	e001      	b.n	800517c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005178:	f7ff fb78 	bl	800486c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800517c:	79fb      	ldrb	r3, [r7, #7]
}
 800517e:	4618      	mov	r0, r3
 8005180:	3708      	adds	r7, #8
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}
	...

08005188 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005188:	b480      	push	{r7}
 800518a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800518c:	4b06      	ldr	r3, [pc, #24]	; (80051a8 <HAL_IncTick+0x20>)
 800518e:	781b      	ldrb	r3, [r3, #0]
 8005190:	461a      	mov	r2, r3
 8005192:	4b06      	ldr	r3, [pc, #24]	; (80051ac <HAL_IncTick+0x24>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4413      	add	r3, r2
 8005198:	4a04      	ldr	r2, [pc, #16]	; (80051ac <HAL_IncTick+0x24>)
 800519a:	6013      	str	r3, [r2, #0]
}
 800519c:	bf00      	nop
 800519e:	46bd      	mov	sp, r7
 80051a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a4:	4770      	bx	lr
 80051a6:	bf00      	nop
 80051a8:	2000022c 	.word	0x2000022c
 80051ac:	20003f5c 	.word	0x20003f5c

080051b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80051b0:	b480      	push	{r7}
 80051b2:	af00      	add	r7, sp, #0
  return uwTick;
 80051b4:	4b03      	ldr	r3, [pc, #12]	; (80051c4 <HAL_GetTick+0x14>)
 80051b6:	681b      	ldr	r3, [r3, #0]
}
 80051b8:	4618      	mov	r0, r3
 80051ba:	46bd      	mov	sp, r7
 80051bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c0:	4770      	bx	lr
 80051c2:	bf00      	nop
 80051c4:	20003f5c 	.word	0x20003f5c

080051c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b084      	sub	sp, #16
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80051d0:	f7ff ffee 	bl	80051b0 <HAL_GetTick>
 80051d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051e0:	d005      	beq.n	80051ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80051e2:	4b0a      	ldr	r3, [pc, #40]	; (800520c <HAL_Delay+0x44>)
 80051e4:	781b      	ldrb	r3, [r3, #0]
 80051e6:	461a      	mov	r2, r3
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	4413      	add	r3, r2
 80051ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80051ee:	bf00      	nop
 80051f0:	f7ff ffde 	bl	80051b0 <HAL_GetTick>
 80051f4:	4602      	mov	r2, r0
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	1ad3      	subs	r3, r2, r3
 80051fa:	68fa      	ldr	r2, [r7, #12]
 80051fc:	429a      	cmp	r2, r3
 80051fe:	d8f7      	bhi.n	80051f0 <HAL_Delay+0x28>
  {
  }
}
 8005200:	bf00      	nop
 8005202:	bf00      	nop
 8005204:	3710      	adds	r7, #16
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}
 800520a:	bf00      	nop
 800520c:	2000022c 	.word	0x2000022c

08005210 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8005210:	b480      	push	{r7}
 8005212:	b083      	sub	sp, #12
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
 8005218:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	431a      	orrs	r2, r3
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	609a      	str	r2, [r3, #8]
}
 800522a:	bf00      	nop
 800522c:	370c      	adds	r7, #12
 800522e:	46bd      	mov	sp, r7
 8005230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005234:	4770      	bx	lr

08005236 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8005236:	b480      	push	{r7}
 8005238:	b083      	sub	sp, #12
 800523a:	af00      	add	r7, sp, #0
 800523c:	6078      	str	r0, [r7, #4]
 800523e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	689b      	ldr	r3, [r3, #8]
 8005244:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	431a      	orrs	r2, r3
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	609a      	str	r2, [r3, #8]
}
 8005250:	bf00      	nop
 8005252:	370c      	adds	r7, #12
 8005254:	46bd      	mov	sp, r7
 8005256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525a:	4770      	bx	lr

0800525c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800525c:	b480      	push	{r7}
 800525e:	b083      	sub	sp, #12
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	689b      	ldr	r3, [r3, #8]
 8005268:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800526c:	4618      	mov	r0, r3
 800526e:	370c      	adds	r7, #12
 8005270:	46bd      	mov	sp, r7
 8005272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005276:	4770      	bx	lr

08005278 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8005278:	b480      	push	{r7}
 800527a:	b087      	sub	sp, #28
 800527c:	af00      	add	r7, sp, #0
 800527e:	60f8      	str	r0, [r7, #12]
 8005280:	60b9      	str	r1, [r7, #8]
 8005282:	607a      	str	r2, [r7, #4]
 8005284:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	3360      	adds	r3, #96	; 0x60
 800528a:	461a      	mov	r2, r3
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	009b      	lsls	r3, r3, #2
 8005290:	4413      	add	r3, r2
 8005292:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	4b08      	ldr	r3, [pc, #32]	; (80052bc <LL_ADC_SetOffset+0x44>)
 800529a:	4013      	ands	r3, r2
 800529c:	687a      	ldr	r2, [r7, #4]
 800529e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80052a2:	683a      	ldr	r2, [r7, #0]
 80052a4:	430a      	orrs	r2, r1
 80052a6:	4313      	orrs	r3, r2
 80052a8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80052b0:	bf00      	nop
 80052b2:	371c      	adds	r7, #28
 80052b4:	46bd      	mov	sp, r7
 80052b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ba:	4770      	bx	lr
 80052bc:	03fff000 	.word	0x03fff000

080052c0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b085      	sub	sp, #20
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
 80052c8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	3360      	adds	r3, #96	; 0x60
 80052ce:	461a      	mov	r2, r3
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	009b      	lsls	r3, r3, #2
 80052d4:	4413      	add	r3, r2
 80052d6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	3714      	adds	r7, #20
 80052e4:	46bd      	mov	sp, r7
 80052e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ea:	4770      	bx	lr

080052ec <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b087      	sub	sp, #28
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	60f8      	str	r0, [r7, #12]
 80052f4:	60b9      	str	r1, [r7, #8]
 80052f6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	3360      	adds	r3, #96	; 0x60
 80052fc:	461a      	mov	r2, r3
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	009b      	lsls	r3, r3, #2
 8005302:	4413      	add	r3, r2
 8005304:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	431a      	orrs	r2, r3
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8005316:	bf00      	nop
 8005318:	371c      	adds	r7, #28
 800531a:	46bd      	mov	sp, r7
 800531c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005320:	4770      	bx	lr

08005322 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8005322:	b480      	push	{r7}
 8005324:	b083      	sub	sp, #12
 8005326:	af00      	add	r7, sp, #0
 8005328:	6078      	str	r0, [r7, #4]
 800532a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	695b      	ldr	r3, [r3, #20]
 8005330:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	431a      	orrs	r2, r3
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	615a      	str	r2, [r3, #20]
}
 800533c:	bf00      	nop
 800533e:	370c      	adds	r7, #12
 8005340:	46bd      	mov	sp, r7
 8005342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005346:	4770      	bx	lr

08005348 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8005348:	b480      	push	{r7}
 800534a:	b083      	sub	sp, #12
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	68db      	ldr	r3, [r3, #12]
 8005354:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005358:	2b00      	cmp	r3, #0
 800535a:	d101      	bne.n	8005360 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800535c:	2301      	movs	r3, #1
 800535e:	e000      	b.n	8005362 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8005360:	2300      	movs	r3, #0
}
 8005362:	4618      	mov	r0, r3
 8005364:	370c      	adds	r7, #12
 8005366:	46bd      	mov	sp, r7
 8005368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536c:	4770      	bx	lr

0800536e <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800536e:	b480      	push	{r7}
 8005370:	b087      	sub	sp, #28
 8005372:	af00      	add	r7, sp, #0
 8005374:	60f8      	str	r0, [r7, #12]
 8005376:	60b9      	str	r1, [r7, #8]
 8005378:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	3330      	adds	r3, #48	; 0x30
 800537e:	461a      	mov	r2, r3
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	0a1b      	lsrs	r3, r3, #8
 8005384:	009b      	lsls	r3, r3, #2
 8005386:	f003 030c 	and.w	r3, r3, #12
 800538a:	4413      	add	r3, r2
 800538c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	681a      	ldr	r2, [r3, #0]
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	f003 031f 	and.w	r3, r3, #31
 8005398:	211f      	movs	r1, #31
 800539a:	fa01 f303 	lsl.w	r3, r1, r3
 800539e:	43db      	mvns	r3, r3
 80053a0:	401a      	ands	r2, r3
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	0e9b      	lsrs	r3, r3, #26
 80053a6:	f003 011f 	and.w	r1, r3, #31
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	f003 031f 	and.w	r3, r3, #31
 80053b0:	fa01 f303 	lsl.w	r3, r1, r3
 80053b4:	431a      	orrs	r2, r3
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80053ba:	bf00      	nop
 80053bc:	371c      	adds	r7, #28
 80053be:	46bd      	mov	sp, r7
 80053c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c4:	4770      	bx	lr

080053c6 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80053c6:	b480      	push	{r7}
 80053c8:	b083      	sub	sp, #12
 80053ca:	af00      	add	r7, sp, #0
 80053cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053d2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d101      	bne.n	80053de <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80053da:	2301      	movs	r3, #1
 80053dc:	e000      	b.n	80053e0 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80053de:	2300      	movs	r3, #0
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	370c      	adds	r7, #12
 80053e4:	46bd      	mov	sp, r7
 80053e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ea:	4770      	bx	lr

080053ec <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b087      	sub	sp, #28
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	60f8      	str	r0, [r7, #12]
 80053f4:	60b9      	str	r1, [r7, #8]
 80053f6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	3314      	adds	r3, #20
 80053fc:	461a      	mov	r2, r3
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	0e5b      	lsrs	r3, r3, #25
 8005402:	009b      	lsls	r3, r3, #2
 8005404:	f003 0304 	and.w	r3, r3, #4
 8005408:	4413      	add	r3, r2
 800540a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	681a      	ldr	r2, [r3, #0]
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	0d1b      	lsrs	r3, r3, #20
 8005414:	f003 031f 	and.w	r3, r3, #31
 8005418:	2107      	movs	r1, #7
 800541a:	fa01 f303 	lsl.w	r3, r1, r3
 800541e:	43db      	mvns	r3, r3
 8005420:	401a      	ands	r2, r3
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	0d1b      	lsrs	r3, r3, #20
 8005426:	f003 031f 	and.w	r3, r3, #31
 800542a:	6879      	ldr	r1, [r7, #4]
 800542c:	fa01 f303 	lsl.w	r3, r1, r3
 8005430:	431a      	orrs	r2, r3
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8005436:	bf00      	nop
 8005438:	371c      	adds	r7, #28
 800543a:	46bd      	mov	sp, r7
 800543c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005440:	4770      	bx	lr
	...

08005444 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8005444:	b480      	push	{r7}
 8005446:	b085      	sub	sp, #20
 8005448:	af00      	add	r7, sp, #0
 800544a:	60f8      	str	r0, [r7, #12]
 800544c:	60b9      	str	r1, [r7, #8]
 800544e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800545c:	43db      	mvns	r3, r3
 800545e:	401a      	ands	r2, r3
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	f003 0318 	and.w	r3, r3, #24
 8005466:	4908      	ldr	r1, [pc, #32]	; (8005488 <LL_ADC_SetChannelSingleDiff+0x44>)
 8005468:	40d9      	lsrs	r1, r3
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	400b      	ands	r3, r1
 800546e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005472:	431a      	orrs	r2, r3
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800547a:	bf00      	nop
 800547c:	3714      	adds	r7, #20
 800547e:	46bd      	mov	sp, r7
 8005480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005484:	4770      	bx	lr
 8005486:	bf00      	nop
 8005488:	0007ffff 	.word	0x0007ffff

0800548c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800548c:	b480      	push	{r7}
 800548e:	b083      	sub	sp, #12
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	689b      	ldr	r3, [r3, #8]
 8005498:	f003 031f 	and.w	r3, r3, #31
}
 800549c:	4618      	mov	r0, r3
 800549e:	370c      	adds	r7, #12
 80054a0:	46bd      	mov	sp, r7
 80054a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a6:	4770      	bx	lr

080054a8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b083      	sub	sp, #12
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	689b      	ldr	r3, [r3, #8]
 80054b4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	370c      	adds	r7, #12
 80054bc:	46bd      	mov	sp, r7
 80054be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c2:	4770      	bx	lr

080054c4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b083      	sub	sp, #12
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	689b      	ldr	r3, [r3, #8]
 80054d0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80054d4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80054d8:	687a      	ldr	r2, [r7, #4]
 80054da:	6093      	str	r3, [r2, #8]
}
 80054dc:	bf00      	nop
 80054de:	370c      	adds	r7, #12
 80054e0:	46bd      	mov	sp, r7
 80054e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e6:	4770      	bx	lr

080054e8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b083      	sub	sp, #12
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80054f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80054fc:	d101      	bne.n	8005502 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80054fe:	2301      	movs	r3, #1
 8005500:	e000      	b.n	8005504 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8005502:	2300      	movs	r3, #0
}
 8005504:	4618      	mov	r0, r3
 8005506:	370c      	adds	r7, #12
 8005508:	46bd      	mov	sp, r7
 800550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550e:	4770      	bx	lr

08005510 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005510:	b480      	push	{r7}
 8005512:	b083      	sub	sp, #12
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	689b      	ldr	r3, [r3, #8]
 800551c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8005520:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005524:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800552c:	bf00      	nop
 800552e:	370c      	adds	r7, #12
 8005530:	46bd      	mov	sp, r7
 8005532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005536:	4770      	bx	lr

08005538 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8005538:	b480      	push	{r7}
 800553a:	b083      	sub	sp, #12
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005548:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800554c:	d101      	bne.n	8005552 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800554e:	2301      	movs	r3, #1
 8005550:	e000      	b.n	8005554 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8005552:	2300      	movs	r3, #0
}
 8005554:	4618      	mov	r0, r3
 8005556:	370c      	adds	r7, #12
 8005558:	46bd      	mov	sp, r7
 800555a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555e:	4770      	bx	lr

08005560 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8005560:	b480      	push	{r7}
 8005562:	b083      	sub	sp, #12
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	689b      	ldr	r3, [r3, #8]
 800556c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005570:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005574:	f043 0201 	orr.w	r2, r3, #1
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800557c:	bf00      	nop
 800557e:	370c      	adds	r7, #12
 8005580:	46bd      	mov	sp, r7
 8005582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005586:	4770      	bx	lr

08005588 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8005588:	b480      	push	{r7}
 800558a:	b083      	sub	sp, #12
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	689b      	ldr	r3, [r3, #8]
 8005594:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005598:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800559c:	f043 0202 	orr.w	r2, r3, #2
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80055a4:	bf00      	nop
 80055a6:	370c      	adds	r7, #12
 80055a8:	46bd      	mov	sp, r7
 80055aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ae:	4770      	bx	lr

080055b0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b083      	sub	sp, #12
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	f003 0301 	and.w	r3, r3, #1
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	d101      	bne.n	80055c8 <LL_ADC_IsEnabled+0x18>
 80055c4:	2301      	movs	r3, #1
 80055c6:	e000      	b.n	80055ca <LL_ADC_IsEnabled+0x1a>
 80055c8:	2300      	movs	r3, #0
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	370c      	adds	r7, #12
 80055ce:	46bd      	mov	sp, r7
 80055d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d4:	4770      	bx	lr

080055d6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80055d6:	b480      	push	{r7}
 80055d8:	b083      	sub	sp, #12
 80055da:	af00      	add	r7, sp, #0
 80055dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	689b      	ldr	r3, [r3, #8]
 80055e2:	f003 0302 	and.w	r3, r3, #2
 80055e6:	2b02      	cmp	r3, #2
 80055e8:	d101      	bne.n	80055ee <LL_ADC_IsDisableOngoing+0x18>
 80055ea:	2301      	movs	r3, #1
 80055ec:	e000      	b.n	80055f0 <LL_ADC_IsDisableOngoing+0x1a>
 80055ee:	2300      	movs	r3, #0
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	370c      	adds	r7, #12
 80055f4:	46bd      	mov	sp, r7
 80055f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fa:	4770      	bx	lr

080055fc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b083      	sub	sp, #12
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800560c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005610:	f043 0204 	orr.w	r2, r3, #4
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8005618:	bf00      	nop
 800561a:	370c      	adds	r7, #12
 800561c:	46bd      	mov	sp, r7
 800561e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005622:	4770      	bx	lr

08005624 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005624:	b480      	push	{r7}
 8005626:	b083      	sub	sp, #12
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	689b      	ldr	r3, [r3, #8]
 8005630:	f003 0304 	and.w	r3, r3, #4
 8005634:	2b04      	cmp	r3, #4
 8005636:	d101      	bne.n	800563c <LL_ADC_REG_IsConversionOngoing+0x18>
 8005638:	2301      	movs	r3, #1
 800563a:	e000      	b.n	800563e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800563c:	2300      	movs	r3, #0
}
 800563e:	4618      	mov	r0, r3
 8005640:	370c      	adds	r7, #12
 8005642:	46bd      	mov	sp, r7
 8005644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005648:	4770      	bx	lr

0800564a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800564a:	b480      	push	{r7}
 800564c:	b083      	sub	sp, #12
 800564e:	af00      	add	r7, sp, #0
 8005650:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	689b      	ldr	r3, [r3, #8]
 8005656:	f003 0308 	and.w	r3, r3, #8
 800565a:	2b08      	cmp	r3, #8
 800565c:	d101      	bne.n	8005662 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800565e:	2301      	movs	r3, #1
 8005660:	e000      	b.n	8005664 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8005662:	2300      	movs	r3, #0
}
 8005664:	4618      	mov	r0, r3
 8005666:	370c      	adds	r7, #12
 8005668:	46bd      	mov	sp, r7
 800566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566e:	4770      	bx	lr

08005670 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005670:	b590      	push	{r4, r7, lr}
 8005672:	b089      	sub	sp, #36	; 0x24
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005678:	2300      	movs	r3, #0
 800567a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800567c:	2300      	movs	r3, #0
 800567e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d101      	bne.n	800568a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8005686:	2301      	movs	r3, #1
 8005688:	e134      	b.n	80058f4 <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	691b      	ldr	r3, [r3, #16]
 800568e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005694:	2b00      	cmp	r3, #0
 8005696:	d109      	bne.n	80056ac <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005698:	6878      	ldr	r0, [r7, #4]
 800569a:	f7ff f90f 	bl	80048bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2200      	movs	r2, #0
 80056a2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2200      	movs	r2, #0
 80056a8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4618      	mov	r0, r3
 80056b2:	f7ff ff19 	bl	80054e8 <LL_ADC_IsDeepPowerDownEnabled>
 80056b6:	4603      	mov	r3, r0
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d004      	beq.n	80056c6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4618      	mov	r0, r3
 80056c2:	f7ff feff 	bl	80054c4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4618      	mov	r0, r3
 80056cc:	f7ff ff34 	bl	8005538 <LL_ADC_IsInternalRegulatorEnabled>
 80056d0:	4603      	mov	r3, r0
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d115      	bne.n	8005702 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4618      	mov	r0, r3
 80056dc:	f7ff ff18 	bl	8005510 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80056e0:	4b86      	ldr	r3, [pc, #536]	; (80058fc <HAL_ADC_Init+0x28c>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	099b      	lsrs	r3, r3, #6
 80056e6:	4a86      	ldr	r2, [pc, #536]	; (8005900 <HAL_ADC_Init+0x290>)
 80056e8:	fba2 2303 	umull	r2, r3, r2, r3
 80056ec:	099b      	lsrs	r3, r3, #6
 80056ee:	3301      	adds	r3, #1
 80056f0:	005b      	lsls	r3, r3, #1
 80056f2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80056f4:	e002      	b.n	80056fc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	3b01      	subs	r3, #1
 80056fa:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d1f9      	bne.n	80056f6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4618      	mov	r0, r3
 8005708:	f7ff ff16 	bl	8005538 <LL_ADC_IsInternalRegulatorEnabled>
 800570c:	4603      	mov	r3, r0
 800570e:	2b00      	cmp	r3, #0
 8005710:	d10d      	bne.n	800572e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005716:	f043 0210 	orr.w	r2, r3, #16
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005722:	f043 0201 	orr.w	r2, r3, #1
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4618      	mov	r0, r3
 8005734:	f7ff ff76 	bl	8005624 <LL_ADC_REG_IsConversionOngoing>
 8005738:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800573e:	f003 0310 	and.w	r3, r3, #16
 8005742:	2b00      	cmp	r3, #0
 8005744:	f040 80cd 	bne.w	80058e2 <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8005748:	697b      	ldr	r3, [r7, #20]
 800574a:	2b00      	cmp	r3, #0
 800574c:	f040 80c9 	bne.w	80058e2 <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005754:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8005758:	f043 0202 	orr.w	r2, r3, #2
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4618      	mov	r0, r3
 8005766:	f7ff ff23 	bl	80055b0 <LL_ADC_IsEnabled>
 800576a:	4603      	mov	r3, r0
 800576c:	2b00      	cmp	r3, #0
 800576e:	d110      	bne.n	8005792 <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005770:	4864      	ldr	r0, [pc, #400]	; (8005904 <HAL_ADC_Init+0x294>)
 8005772:	f7ff ff1d 	bl	80055b0 <LL_ADC_IsEnabled>
 8005776:	4604      	mov	r4, r0
 8005778:	4863      	ldr	r0, [pc, #396]	; (8005908 <HAL_ADC_Init+0x298>)
 800577a:	f7ff ff19 	bl	80055b0 <LL_ADC_IsEnabled>
 800577e:	4603      	mov	r3, r0
 8005780:	4323      	orrs	r3, r4
 8005782:	2b00      	cmp	r3, #0
 8005784:	d105      	bne.n	8005792 <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	4619      	mov	r1, r3
 800578c:	485f      	ldr	r0, [pc, #380]	; (800590c <HAL_ADC_Init+0x29c>)
 800578e:	f7ff fd3f 	bl	8005210 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	7e5b      	ldrb	r3, [r3, #25]
 8005796:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800579c:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80057a2:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80057a8:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80057b0:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80057b2:	4313      	orrs	r3, r2
 80057b4:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80057bc:	2b01      	cmp	r3, #1
 80057be:	d106      	bne.n	80057ce <HAL_ADC_Init+0x15e>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c4:	3b01      	subs	r3, #1
 80057c6:	045b      	lsls	r3, r3, #17
 80057c8:	69ba      	ldr	r2, [r7, #24]
 80057ca:	4313      	orrs	r3, r2
 80057cc:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d009      	beq.n	80057ea <HAL_ADC_Init+0x17a>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057da:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057e2:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80057e4:	69ba      	ldr	r2, [r7, #24]
 80057e6:	4313      	orrs	r3, r2
 80057e8:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	68da      	ldr	r2, [r3, #12]
 80057f0:	4b47      	ldr	r3, [pc, #284]	; (8005910 <HAL_ADC_Init+0x2a0>)
 80057f2:	4013      	ands	r3, r2
 80057f4:	687a      	ldr	r2, [r7, #4]
 80057f6:	6812      	ldr	r2, [r2, #0]
 80057f8:	69b9      	ldr	r1, [r7, #24]
 80057fa:	430b      	orrs	r3, r1
 80057fc:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4618      	mov	r0, r3
 8005804:	f7ff ff0e 	bl	8005624 <LL_ADC_REG_IsConversionOngoing>
 8005808:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4618      	mov	r0, r3
 8005810:	f7ff ff1b 	bl	800564a <LL_ADC_INJ_IsConversionOngoing>
 8005814:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d140      	bne.n	800589e <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d13d      	bne.n	800589e <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	7e1b      	ldrb	r3, [r3, #24]
 800582a:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800582c:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005834:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8005836:	4313      	orrs	r3, r2
 8005838:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	68db      	ldr	r3, [r3, #12]
 8005840:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005844:	f023 0306 	bic.w	r3, r3, #6
 8005848:	687a      	ldr	r2, [r7, #4]
 800584a:	6812      	ldr	r2, [r2, #0]
 800584c:	69b9      	ldr	r1, [r7, #24]
 800584e:	430b      	orrs	r3, r1
 8005850:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005858:	2b01      	cmp	r3, #1
 800585a:	d118      	bne.n	800588e <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	691b      	ldr	r3, [r3, #16]
 8005862:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005866:	f023 0304 	bic.w	r3, r3, #4
 800586a:	687a      	ldr	r2, [r7, #4]
 800586c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800586e:	687a      	ldr	r2, [r7, #4]
 8005870:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005872:	4311      	orrs	r1, r2
 8005874:	687a      	ldr	r2, [r7, #4]
 8005876:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005878:	4311      	orrs	r1, r2
 800587a:	687a      	ldr	r2, [r7, #4]
 800587c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800587e:	430a      	orrs	r2, r1
 8005880:	431a      	orrs	r2, r3
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f042 0201 	orr.w	r2, r2, #1
 800588a:	611a      	str	r2, [r3, #16]
 800588c:	e007      	b.n	800589e <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	691a      	ldr	r2, [r3, #16]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f022 0201 	bic.w	r2, r2, #1
 800589c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	691b      	ldr	r3, [r3, #16]
 80058a2:	2b01      	cmp	r3, #1
 80058a4:	d10c      	bne.n	80058c0 <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ac:	f023 010f 	bic.w	r1, r3, #15
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	69db      	ldr	r3, [r3, #28]
 80058b4:	1e5a      	subs	r2, r3, #1
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	430a      	orrs	r2, r1
 80058bc:	631a      	str	r2, [r3, #48]	; 0x30
 80058be:	e007      	b.n	80058d0 <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f022 020f 	bic.w	r2, r2, #15
 80058ce:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058d4:	f023 0303 	bic.w	r3, r3, #3
 80058d8:	f043 0201 	orr.w	r2, r3, #1
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	659a      	str	r2, [r3, #88]	; 0x58
 80058e0:	e007      	b.n	80058f2 <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058e6:	f043 0210 	orr.w	r2, r3, #16
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80058ee:	2301      	movs	r3, #1
 80058f0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80058f2:	7ffb      	ldrb	r3, [r7, #31]
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	3724      	adds	r7, #36	; 0x24
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd90      	pop	{r4, r7, pc}
 80058fc:	20000224 	.word	0x20000224
 8005900:	053e2d63 	.word	0x053e2d63
 8005904:	50040000 	.word	0x50040000
 8005908:	50040100 	.word	0x50040100
 800590c:	50040300 	.word	0x50040300
 8005910:	fff0c007 	.word	0xfff0c007

08005914 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b086      	sub	sp, #24
 8005918:	af00      	add	r7, sp, #0
 800591a:	60f8      	str	r0, [r7, #12]
 800591c:	60b9      	str	r1, [r7, #8]
 800591e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005920:	4850      	ldr	r0, [pc, #320]	; (8005a64 <HAL_ADC_Start_DMA+0x150>)
 8005922:	f7ff fdb3 	bl	800548c <LL_ADC_GetMultimode>
 8005926:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4618      	mov	r0, r3
 800592e:	f7ff fe79 	bl	8005624 <LL_ADC_REG_IsConversionOngoing>
 8005932:	4603      	mov	r3, r0
 8005934:	2b00      	cmp	r3, #0
 8005936:	f040 808e 	bne.w	8005a56 <HAL_ADC_Start_DMA+0x142>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8005940:	2b01      	cmp	r3, #1
 8005942:	d101      	bne.n	8005948 <HAL_ADC_Start_DMA+0x34>
 8005944:	2302      	movs	r3, #2
 8005946:	e089      	b.n	8005a5c <HAL_ADC_Start_DMA+0x148>
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2201      	movs	r2, #1
 800594c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d005      	beq.n	8005962 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	2b05      	cmp	r3, #5
 800595a:	d002      	beq.n	8005962 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	2b09      	cmp	r3, #9
 8005960:	d172      	bne.n	8005a48 <HAL_ADC_Start_DMA+0x134>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8005962:	68f8      	ldr	r0, [r7, #12]
 8005964:	f000 fec6 	bl	80066f4 <ADC_Enable>
 8005968:	4603      	mov	r3, r0
 800596a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800596c:	7dfb      	ldrb	r3, [r7, #23]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d165      	bne.n	8005a3e <HAL_ADC_Start_DMA+0x12a>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005976:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800597a:	f023 0301 	bic.w	r3, r3, #1
 800597e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	659a      	str	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a37      	ldr	r2, [pc, #220]	; (8005a68 <HAL_ADC_Start_DMA+0x154>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d002      	beq.n	8005996 <HAL_ADC_Start_DMA+0x82>
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	e000      	b.n	8005998 <HAL_ADC_Start_DMA+0x84>
 8005996:	4b35      	ldr	r3, [pc, #212]	; (8005a6c <HAL_ADC_Start_DMA+0x158>)
 8005998:	68fa      	ldr	r2, [r7, #12]
 800599a:	6812      	ldr	r2, [r2, #0]
 800599c:	4293      	cmp	r3, r2
 800599e:	d002      	beq.n	80059a6 <HAL_ADC_Start_DMA+0x92>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d105      	bne.n	80059b2 <HAL_ADC_Start_DMA+0x9e>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059aa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	659a      	str	r2, [r3, #88]	; 0x58
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d006      	beq.n	80059cc <HAL_ADC_Start_DMA+0xb8>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059c2:	f023 0206 	bic.w	r2, r3, #6
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	65da      	str	r2, [r3, #92]	; 0x5c
 80059ca:	e002      	b.n	80059d2 <HAL_ADC_Start_DMA+0xbe>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2200      	movs	r2, #0
 80059d0:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059d6:	4a26      	ldr	r2, [pc, #152]	; (8005a70 <HAL_ADC_Start_DMA+0x15c>)
 80059d8:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059de:	4a25      	ldr	r2, [pc, #148]	; (8005a74 <HAL_ADC_Start_DMA+0x160>)
 80059e0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059e6:	4a24      	ldr	r2, [pc, #144]	; (8005a78 <HAL_ADC_Start_DMA+0x164>)
 80059e8:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	221c      	movs	r2, #28
 80059f0:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	2200      	movs	r2, #0
 80059f6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	685a      	ldr	r2, [r3, #4]
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f042 0210 	orr.w	r2, r2, #16
 8005a08:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	68da      	ldr	r2, [r3, #12]
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f042 0201 	orr.w	r2, r2, #1
 8005a18:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	3340      	adds	r3, #64	; 0x40
 8005a24:	4619      	mov	r1, r3
 8005a26:	68ba      	ldr	r2, [r7, #8]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	f002 f92f 	bl	8007c8c <HAL_DMA_Start_IT>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4618      	mov	r0, r3
 8005a38:	f7ff fde0 	bl	80055fc <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8005a3c:	e00d      	b.n	8005a5a <HAL_ADC_Start_DMA+0x146>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2200      	movs	r2, #0
 8005a42:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      if (tmp_hal_status == HAL_OK)
 8005a46:	e008      	b.n	8005a5a <HAL_ADC_Start_DMA+0x146>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8005a48:	2301      	movs	r3, #1
 8005a4a:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8005a54:	e001      	b.n	8005a5a <HAL_ADC_Start_DMA+0x146>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005a56:	2302      	movs	r3, #2
 8005a58:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8005a5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	3718      	adds	r7, #24
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bd80      	pop	{r7, pc}
 8005a64:	50040300 	.word	0x50040300
 8005a68:	50040100 	.word	0x50040100
 8005a6c:	50040000 	.word	0x50040000
 8005a70:	080068bf 	.word	0x080068bf
 8005a74:	08006997 	.word	0x08006997
 8005a78:	080069b3 	.word	0x080069b3

08005a7c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b08a      	sub	sp, #40	; 0x28
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8005a84:	2300      	movs	r3, #0
 8005a86:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005a98:	4882      	ldr	r0, [pc, #520]	; (8005ca4 <HAL_ADC_IRQHandler+0x228>)
 8005a9a:	f7ff fcf7 	bl	800548c <LL_ADC_GetMultimode>
 8005a9e:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8005aa0:	69fb      	ldr	r3, [r7, #28]
 8005aa2:	f003 0302 	and.w	r3, r3, #2
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d017      	beq.n	8005ada <HAL_ADC_IRQHandler+0x5e>
 8005aaa:	69bb      	ldr	r3, [r7, #24]
 8005aac:	f003 0302 	and.w	r3, r3, #2
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d012      	beq.n	8005ada <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ab8:	f003 0310 	and.w	r3, r3, #16
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d105      	bne.n	8005acc <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ac4:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	659a      	str	r2, [r3, #88]	; 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	f001 f865 	bl	8006b9c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	2202      	movs	r2, #2
 8005ad8:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005ada:	69fb      	ldr	r3, [r7, #28]
 8005adc:	f003 0304 	and.w	r3, r3, #4
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d004      	beq.n	8005aee <HAL_ADC_IRQHandler+0x72>
 8005ae4:	69bb      	ldr	r3, [r7, #24]
 8005ae6:	f003 0304 	and.w	r3, r3, #4
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d10a      	bne.n	8005b04 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005aee:	69fb      	ldr	r3, [r7, #28]
 8005af0:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	f000 8083 	beq.w	8005c00 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005afa:	69bb      	ldr	r3, [r7, #24]
 8005afc:	f003 0308 	and.w	r3, r3, #8
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d07d      	beq.n	8005c00 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b08:	f003 0310 	and.w	r3, r3, #16
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d105      	bne.n	8005b1c <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b14:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4618      	mov	r0, r3
 8005b22:	f7ff fc11 	bl	8005348 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005b26:	4603      	mov	r3, r0
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d062      	beq.n	8005bf2 <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a5d      	ldr	r2, [pc, #372]	; (8005ca8 <HAL_ADC_IRQHandler+0x22c>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d002      	beq.n	8005b3c <HAL_ADC_IRQHandler+0xc0>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	e000      	b.n	8005b3e <HAL_ADC_IRQHandler+0xc2>
 8005b3c:	4b5b      	ldr	r3, [pc, #364]	; (8005cac <HAL_ADC_IRQHandler+0x230>)
 8005b3e:	687a      	ldr	r2, [r7, #4]
 8005b40:	6812      	ldr	r2, [r2, #0]
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d008      	beq.n	8005b58 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d005      	beq.n	8005b58 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	2b05      	cmp	r3, #5
 8005b50:	d002      	beq.n	8005b58 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	2b09      	cmp	r3, #9
 8005b56:	d104      	bne.n	8005b62 <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	68db      	ldr	r3, [r3, #12]
 8005b5e:	623b      	str	r3, [r7, #32]
 8005b60:	e00c      	b.n	8005b7c <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a50      	ldr	r2, [pc, #320]	; (8005ca8 <HAL_ADC_IRQHandler+0x22c>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d002      	beq.n	8005b72 <HAL_ADC_IRQHandler+0xf6>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	e000      	b.n	8005b74 <HAL_ADC_IRQHandler+0xf8>
 8005b72:	4b4e      	ldr	r3, [pc, #312]	; (8005cac <HAL_ADC_IRQHandler+0x230>)
 8005b74:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	68db      	ldr	r3, [r3, #12]
 8005b7a:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8005b7c:	6a3b      	ldr	r3, [r7, #32]
 8005b7e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d135      	bne.n	8005bf2 <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f003 0308 	and.w	r3, r3, #8
 8005b90:	2b08      	cmp	r3, #8
 8005b92:	d12e      	bne.n	8005bf2 <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4618      	mov	r0, r3
 8005b9a:	f7ff fd43 	bl	8005624 <LL_ADC_REG_IsConversionOngoing>
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d11a      	bne.n	8005bda <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	685a      	ldr	r2, [r3, #4]
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f022 020c 	bic.w	r2, r2, #12
 8005bb2:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bb8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	659a      	str	r2, [r3, #88]	; 0x58

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bc4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d112      	bne.n	8005bf2 <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bd0:	f043 0201 	orr.w	r2, r3, #1
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	659a      	str	r2, [r3, #88]	; 0x58
 8005bd8:	e00b      	b.n	8005bf2 <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bde:	f043 0210 	orr.w	r2, r3, #16
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bea:	f043 0201 	orr.w	r2, r3, #1
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	65da      	str	r2, [r3, #92]	; 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f000 f95c 	bl	8005eb0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	220c      	movs	r2, #12
 8005bfe:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8005c00:	69fb      	ldr	r3, [r7, #28]
 8005c02:	f003 0320 	and.w	r3, r3, #32
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d004      	beq.n	8005c14 <HAL_ADC_IRQHandler+0x198>
 8005c0a:	69bb      	ldr	r3, [r7, #24]
 8005c0c:	f003 0320 	and.w	r3, r3, #32
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d10b      	bne.n	8005c2c <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8005c14:	69fb      	ldr	r3, [r7, #28]
 8005c16:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	f000 809f 	beq.w	8005d5e <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8005c20:	69bb      	ldr	r3, [r7, #24]
 8005c22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	f000 8099 	beq.w	8005d5e <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c30:	f003 0310 	and.w	r3, r3, #16
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d105      	bne.n	8005c44 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c3c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4618      	mov	r0, r3
 8005c4a:	f7ff fbbc 	bl	80053c6 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8005c4e:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4618      	mov	r0, r3
 8005c56:	f7ff fb77 	bl	8005348 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005c5a:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a11      	ldr	r2, [pc, #68]	; (8005ca8 <HAL_ADC_IRQHandler+0x22c>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d002      	beq.n	8005c6c <HAL_ADC_IRQHandler+0x1f0>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	e000      	b.n	8005c6e <HAL_ADC_IRQHandler+0x1f2>
 8005c6c:	4b0f      	ldr	r3, [pc, #60]	; (8005cac <HAL_ADC_IRQHandler+0x230>)
 8005c6e:	687a      	ldr	r2, [r7, #4]
 8005c70:	6812      	ldr	r2, [r2, #0]
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d008      	beq.n	8005c88 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d005      	beq.n	8005c88 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	2b06      	cmp	r3, #6
 8005c80:	d002      	beq.n	8005c88 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	2b07      	cmp	r3, #7
 8005c86:	d104      	bne.n	8005c92 <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	68db      	ldr	r3, [r3, #12]
 8005c8e:	623b      	str	r3, [r7, #32]
 8005c90:	e013      	b.n	8005cba <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a04      	ldr	r2, [pc, #16]	; (8005ca8 <HAL_ADC_IRQHandler+0x22c>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d009      	beq.n	8005cb0 <HAL_ADC_IRQHandler+0x234>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	e007      	b.n	8005cb2 <HAL_ADC_IRQHandler+0x236>
 8005ca2:	bf00      	nop
 8005ca4:	50040300 	.word	0x50040300
 8005ca8:	50040100 	.word	0x50040100
 8005cac:	50040000 	.word	0x50040000
 8005cb0:	4b7d      	ldr	r3, [pc, #500]	; (8005ea8 <HAL_ADC_IRQHandler+0x42c>)
 8005cb2:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	68db      	ldr	r3, [r3, #12]
 8005cb8:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d047      	beq.n	8005d50 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8005cc0:	6a3b      	ldr	r3, [r7, #32]
 8005cc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d007      	beq.n	8005cda <HAL_ADC_IRQHandler+0x25e>
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d03f      	beq.n	8005d50 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8005cd0:	6a3b      	ldr	r3, [r7, #32]
 8005cd2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d13a      	bne.n	8005d50 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ce4:	2b40      	cmp	r3, #64	; 0x40
 8005ce6:	d133      	bne.n	8005d50 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8005ce8:	6a3b      	ldr	r3, [r7, #32]
 8005cea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d12e      	bne.n	8005d50 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	f7ff fca7 	bl	800564a <LL_ADC_INJ_IsConversionOngoing>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d11a      	bne.n	8005d38 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	685a      	ldr	r2, [r3, #4]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005d10:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d16:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	659a      	str	r2, [r3, #88]	; 0x58

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d112      	bne.n	8005d50 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d2e:	f043 0201 	orr.w	r2, r3, #1
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	659a      	str	r2, [r3, #88]	; 0x58
 8005d36:	e00b      	b.n	8005d50 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d3c:	f043 0210 	orr.w	r2, r3, #16
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	659a      	str	r2, [r3, #88]	; 0x58

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d48:	f043 0201 	orr.w	r2, r3, #1
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	65da      	str	r2, [r3, #92]	; 0x5c
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8005d50:	6878      	ldr	r0, [r7, #4]
 8005d52:	f000 fefb 	bl	8006b4c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	2260      	movs	r2, #96	; 0x60
 8005d5c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8005d5e:	69fb      	ldr	r3, [r7, #28]
 8005d60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d011      	beq.n	8005d8c <HAL_ADC_IRQHandler+0x310>
 8005d68:	69bb      	ldr	r3, [r7, #24]
 8005d6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d00c      	beq.n	8005d8c <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d76:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	f000 f8aa 	bl	8005ed8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	2280      	movs	r2, #128	; 0x80
 8005d8a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8005d8c:	69fb      	ldr	r3, [r7, #28]
 8005d8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d012      	beq.n	8005dbc <HAL_ADC_IRQHandler+0x340>
 8005d96:	69bb      	ldr	r3, [r7, #24]
 8005d98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d00d      	beq.n	8005dbc <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005da4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8005dac:	6878      	ldr	r0, [r7, #4]
 8005dae:	f000 fee1 	bl	8006b74 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005dba:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8005dbc:	69fb      	ldr	r3, [r7, #28]
 8005dbe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d012      	beq.n	8005dec <HAL_ADC_IRQHandler+0x370>
 8005dc6:	69bb      	ldr	r3, [r7, #24]
 8005dc8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d00d      	beq.n	8005dec <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dd4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8005ddc:	6878      	ldr	r0, [r7, #4]
 8005dde:	f000 fed3 	bl	8006b88 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005dea:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8005dec:	69fb      	ldr	r3, [r7, #28]
 8005dee:	f003 0310 	and.w	r3, r3, #16
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d036      	beq.n	8005e64 <HAL_ADC_IRQHandler+0x3e8>
 8005df6:	69bb      	ldr	r3, [r7, #24]
 8005df8:	f003 0310 	and.w	r3, r3, #16
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d031      	beq.n	8005e64 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d102      	bne.n	8005e0e <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8005e08:	2301      	movs	r3, #1
 8005e0a:	627b      	str	r3, [r7, #36]	; 0x24
 8005e0c:	e014      	b.n	8005e38 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d008      	beq.n	8005e26 <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8005e14:	4825      	ldr	r0, [pc, #148]	; (8005eac <HAL_ADC_IRQHandler+0x430>)
 8005e16:	f7ff fb47 	bl	80054a8 <LL_ADC_GetMultiDMATransfer>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d00b      	beq.n	8005e38 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8005e20:	2301      	movs	r3, #1
 8005e22:	627b      	str	r3, [r7, #36]	; 0x24
 8005e24:	e008      	b.n	8005e38 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	68db      	ldr	r3, [r3, #12]
 8005e2c:	f003 0301 	and.w	r3, r3, #1
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d001      	beq.n	8005e38 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8005e34:	2301      	movs	r3, #1
 8005e36:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8005e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e3a:	2b01      	cmp	r3, #1
 8005e3c:	d10e      	bne.n	8005e5c <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e42:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e4e:	f043 0202 	orr.w	r2, r3, #2
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	65da      	str	r2, [r3, #92]	; 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f000 f848 	bl	8005eec <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	2210      	movs	r2, #16
 8005e62:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8005e64:	69fb      	ldr	r3, [r7, #28]
 8005e66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d018      	beq.n	8005ea0 <HAL_ADC_IRQHandler+0x424>
 8005e6e:	69bb      	ldr	r3, [r7, #24]
 8005e70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d013      	beq.n	8005ea0 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e7c:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e88:	f043 0208 	orr.w	r2, r3, #8
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005e98:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f000 fe60 	bl	8006b60 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8005ea0:	bf00      	nop
 8005ea2:	3728      	adds	r7, #40	; 0x28
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bd80      	pop	{r7, pc}
 8005ea8:	50040000 	.word	0x50040000
 8005eac:	50040300 	.word	0x50040300

08005eb0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b083      	sub	sp, #12
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8005eb8:	bf00      	nop
 8005eba:	370c      	adds	r7, #12
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec2:	4770      	bx	lr

08005ec4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b083      	sub	sp, #12
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8005ecc:	bf00      	nop
 8005ece:	370c      	adds	r7, #12
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed6:	4770      	bx	lr

08005ed8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b083      	sub	sp, #12
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8005ee0:	bf00      	nop
 8005ee2:	370c      	adds	r7, #12
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eea:	4770      	bx	lr

08005eec <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005eec:	b480      	push	{r7}
 8005eee:	b083      	sub	sp, #12
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8005ef4:	bf00      	nop
 8005ef6:	370c      	adds	r7, #12
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efe:	4770      	bx	lr

08005f00 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b0b6      	sub	sp, #216	; 0xd8
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
 8005f08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8005f10:	2300      	movs	r3, #0
 8005f12:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8005f1a:	2b01      	cmp	r3, #1
 8005f1c:	d101      	bne.n	8005f22 <HAL_ADC_ConfigChannel+0x22>
 8005f1e:	2302      	movs	r3, #2
 8005f20:	e3d3      	b.n	80066ca <HAL_ADC_ConfigChannel+0x7ca>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2201      	movs	r2, #1
 8005f26:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f7ff fb78 	bl	8005624 <LL_ADC_REG_IsConversionOngoing>
 8005f34:	4603      	mov	r3, r0
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	f040 83b8 	bne.w	80066ac <HAL_ADC_ConfigChannel+0x7ac>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	2b05      	cmp	r3, #5
 8005f42:	d824      	bhi.n	8005f8e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	3b02      	subs	r3, #2
 8005f4a:	2b03      	cmp	r3, #3
 8005f4c:	d81b      	bhi.n	8005f86 <HAL_ADC_ConfigChannel+0x86>
 8005f4e:	a201      	add	r2, pc, #4	; (adr r2, 8005f54 <HAL_ADC_ConfigChannel+0x54>)
 8005f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f54:	08005f65 	.word	0x08005f65
 8005f58:	08005f6d 	.word	0x08005f6d
 8005f5c:	08005f75 	.word	0x08005f75
 8005f60:	08005f7d 	.word	0x08005f7d
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	220c      	movs	r2, #12
 8005f68:	605a      	str	r2, [r3, #4]
          break;
 8005f6a:	e010      	b.n	8005f8e <HAL_ADC_ConfigChannel+0x8e>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	2212      	movs	r2, #18
 8005f70:	605a      	str	r2, [r3, #4]
          break;
 8005f72:	e00c      	b.n	8005f8e <HAL_ADC_ConfigChannel+0x8e>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	2218      	movs	r2, #24
 8005f78:	605a      	str	r2, [r3, #4]
          break;
 8005f7a:	e008      	b.n	8005f8e <HAL_ADC_ConfigChannel+0x8e>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005f82:	605a      	str	r2, [r3, #4]
          break;
 8005f84:	e003      	b.n	8005f8e <HAL_ADC_ConfigChannel+0x8e>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	2206      	movs	r2, #6
 8005f8a:	605a      	str	r2, [r3, #4]
          break;
 8005f8c:	bf00      	nop
      }
    }
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6818      	ldr	r0, [r3, #0]
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	6859      	ldr	r1, [r3, #4]
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	461a      	mov	r2, r3
 8005f9c:	f7ff f9e7 	bl	800536e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	f7ff fb3d 	bl	8005624 <LL_ADC_REG_IsConversionOngoing>
 8005faa:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f7ff fb49 	bl	800564a <LL_ADC_INJ_IsConversionOngoing>
 8005fb8:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005fbc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	f040 81c1 	bne.w	8006348 <HAL_ADC_ConfigChannel+0x448>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005fc6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	f040 81bc 	bne.w	8006348 <HAL_ADC_ConfigChannel+0x448>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	689b      	ldr	r3, [r3, #8]
 8005fd4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005fd8:	d10f      	bne.n	8005ffa <HAL_ADC_ConfigChannel+0xfa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6818      	ldr	r0, [r3, #0]
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	4619      	mov	r1, r3
 8005fe6:	f7ff fa01 	bl	80053ec <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	f7ff f995 	bl	8005322 <LL_ADC_SetSamplingTimeCommonConfig>
 8005ff8:	e00e      	b.n	8006018 <HAL_ADC_ConfigChannel+0x118>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6818      	ldr	r0, [r3, #0]
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	6819      	ldr	r1, [r3, #0]
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	689b      	ldr	r3, [r3, #8]
 8006006:	461a      	mov	r2, r3
 8006008:	f7ff f9f0 	bl	80053ec <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	2100      	movs	r1, #0
 8006012:	4618      	mov	r0, r3
 8006014:	f7ff f985 	bl	8005322 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	695a      	ldr	r2, [r3, #20]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	68db      	ldr	r3, [r3, #12]
 8006022:	08db      	lsrs	r3, r3, #3
 8006024:	f003 0303 	and.w	r3, r3, #3
 8006028:	005b      	lsls	r3, r3, #1
 800602a:	fa02 f303 	lsl.w	r3, r2, r3
 800602e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	691b      	ldr	r3, [r3, #16]
 8006036:	2b04      	cmp	r3, #4
 8006038:	d00a      	beq.n	8006050 <HAL_ADC_ConfigChannel+0x150>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6818      	ldr	r0, [r3, #0]
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	6919      	ldr	r1, [r3, #16]
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	681a      	ldr	r2, [r3, #0]
 8006046:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800604a:	f7ff f915 	bl	8005278 <LL_ADC_SetOffset>
 800604e:	e17b      	b.n	8006348 <HAL_ADC_ConfigChannel+0x448>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	2100      	movs	r1, #0
 8006056:	4618      	mov	r0, r3
 8006058:	f7ff f932 	bl	80052c0 <LL_ADC_GetOffsetChannel>
 800605c:	4603      	mov	r3, r0
 800605e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006062:	2b00      	cmp	r3, #0
 8006064:	d10a      	bne.n	800607c <HAL_ADC_ConfigChannel+0x17c>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	2100      	movs	r1, #0
 800606c:	4618      	mov	r0, r3
 800606e:	f7ff f927 	bl	80052c0 <LL_ADC_GetOffsetChannel>
 8006072:	4603      	mov	r3, r0
 8006074:	0e9b      	lsrs	r3, r3, #26
 8006076:	f003 021f 	and.w	r2, r3, #31
 800607a:	e01e      	b.n	80060ba <HAL_ADC_ConfigChannel+0x1ba>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	2100      	movs	r1, #0
 8006082:	4618      	mov	r0, r3
 8006084:	f7ff f91c 	bl	80052c0 <LL_ADC_GetOffsetChannel>
 8006088:	4603      	mov	r3, r0
 800608a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800608e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006092:	fa93 f3a3 	rbit	r3, r3
 8006096:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800609a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800609e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80060a2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d101      	bne.n	80060ae <HAL_ADC_ConfigChannel+0x1ae>
  {
    return 32U;
 80060aa:	2320      	movs	r3, #32
 80060ac:	e004      	b.n	80060b8 <HAL_ADC_ConfigChannel+0x1b8>
  }
  return __builtin_clz(value);
 80060ae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80060b2:	fab3 f383 	clz	r3, r3
 80060b6:	b2db      	uxtb	r3, r3
 80060b8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d105      	bne.n	80060d2 <HAL_ADC_ConfigChannel+0x1d2>
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	0e9b      	lsrs	r3, r3, #26
 80060cc:	f003 031f 	and.w	r3, r3, #31
 80060d0:	e018      	b.n	8006104 <HAL_ADC_ConfigChannel+0x204>
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060da:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80060de:	fa93 f3a3 	rbit	r3, r3
 80060e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80060e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80060ea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80060ee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d101      	bne.n	80060fa <HAL_ADC_ConfigChannel+0x1fa>
    return 32U;
 80060f6:	2320      	movs	r3, #32
 80060f8:	e004      	b.n	8006104 <HAL_ADC_ConfigChannel+0x204>
  return __builtin_clz(value);
 80060fa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80060fe:	fab3 f383 	clz	r3, r3
 8006102:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006104:	429a      	cmp	r2, r3
 8006106:	d106      	bne.n	8006116 <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	2200      	movs	r2, #0
 800610e:	2100      	movs	r1, #0
 8006110:	4618      	mov	r0, r3
 8006112:	f7ff f8eb 	bl	80052ec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	2101      	movs	r1, #1
 800611c:	4618      	mov	r0, r3
 800611e:	f7ff f8cf 	bl	80052c0 <LL_ADC_GetOffsetChannel>
 8006122:	4603      	mov	r3, r0
 8006124:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006128:	2b00      	cmp	r3, #0
 800612a:	d10a      	bne.n	8006142 <HAL_ADC_ConfigChannel+0x242>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	2101      	movs	r1, #1
 8006132:	4618      	mov	r0, r3
 8006134:	f7ff f8c4 	bl	80052c0 <LL_ADC_GetOffsetChannel>
 8006138:	4603      	mov	r3, r0
 800613a:	0e9b      	lsrs	r3, r3, #26
 800613c:	f003 021f 	and.w	r2, r3, #31
 8006140:	e01e      	b.n	8006180 <HAL_ADC_ConfigChannel+0x280>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	2101      	movs	r1, #1
 8006148:	4618      	mov	r0, r3
 800614a:	f7ff f8b9 	bl	80052c0 <LL_ADC_GetOffsetChannel>
 800614e:	4603      	mov	r3, r0
 8006150:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006154:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006158:	fa93 f3a3 	rbit	r3, r3
 800615c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8006160:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006164:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8006168:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800616c:	2b00      	cmp	r3, #0
 800616e:	d101      	bne.n	8006174 <HAL_ADC_ConfigChannel+0x274>
    return 32U;
 8006170:	2320      	movs	r3, #32
 8006172:	e004      	b.n	800617e <HAL_ADC_ConfigChannel+0x27e>
  return __builtin_clz(value);
 8006174:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006178:	fab3 f383 	clz	r3, r3
 800617c:	b2db      	uxtb	r3, r3
 800617e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006188:	2b00      	cmp	r3, #0
 800618a:	d105      	bne.n	8006198 <HAL_ADC_ConfigChannel+0x298>
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	0e9b      	lsrs	r3, r3, #26
 8006192:	f003 031f 	and.w	r3, r3, #31
 8006196:	e018      	b.n	80061ca <HAL_ADC_ConfigChannel+0x2ca>
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80061a4:	fa93 f3a3 	rbit	r3, r3
 80061a8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80061ac:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80061b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80061b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d101      	bne.n	80061c0 <HAL_ADC_ConfigChannel+0x2c0>
    return 32U;
 80061bc:	2320      	movs	r3, #32
 80061be:	e004      	b.n	80061ca <HAL_ADC_ConfigChannel+0x2ca>
  return __builtin_clz(value);
 80061c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80061c4:	fab3 f383 	clz	r3, r3
 80061c8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80061ca:	429a      	cmp	r2, r3
 80061cc:	d106      	bne.n	80061dc <HAL_ADC_ConfigChannel+0x2dc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	2200      	movs	r2, #0
 80061d4:	2101      	movs	r1, #1
 80061d6:	4618      	mov	r0, r3
 80061d8:	f7ff f888 	bl	80052ec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	2102      	movs	r1, #2
 80061e2:	4618      	mov	r0, r3
 80061e4:	f7ff f86c 	bl	80052c0 <LL_ADC_GetOffsetChannel>
 80061e8:	4603      	mov	r3, r0
 80061ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d10a      	bne.n	8006208 <HAL_ADC_ConfigChannel+0x308>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	2102      	movs	r1, #2
 80061f8:	4618      	mov	r0, r3
 80061fa:	f7ff f861 	bl	80052c0 <LL_ADC_GetOffsetChannel>
 80061fe:	4603      	mov	r3, r0
 8006200:	0e9b      	lsrs	r3, r3, #26
 8006202:	f003 021f 	and.w	r2, r3, #31
 8006206:	e01e      	b.n	8006246 <HAL_ADC_ConfigChannel+0x346>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	2102      	movs	r1, #2
 800620e:	4618      	mov	r0, r3
 8006210:	f7ff f856 	bl	80052c0 <LL_ADC_GetOffsetChannel>
 8006214:	4603      	mov	r3, r0
 8006216:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800621a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800621e:	fa93 f3a3 	rbit	r3, r3
 8006222:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8006226:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800622a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800622e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006232:	2b00      	cmp	r3, #0
 8006234:	d101      	bne.n	800623a <HAL_ADC_ConfigChannel+0x33a>
    return 32U;
 8006236:	2320      	movs	r3, #32
 8006238:	e004      	b.n	8006244 <HAL_ADC_ConfigChannel+0x344>
  return __builtin_clz(value);
 800623a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800623e:	fab3 f383 	clz	r3, r3
 8006242:	b2db      	uxtb	r3, r3
 8006244:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800624e:	2b00      	cmp	r3, #0
 8006250:	d105      	bne.n	800625e <HAL_ADC_ConfigChannel+0x35e>
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	0e9b      	lsrs	r3, r3, #26
 8006258:	f003 031f 	and.w	r3, r3, #31
 800625c:	e016      	b.n	800628c <HAL_ADC_ConfigChannel+0x38c>
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006266:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800626a:	fa93 f3a3 	rbit	r3, r3
 800626e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8006270:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006272:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8006276:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800627a:	2b00      	cmp	r3, #0
 800627c:	d101      	bne.n	8006282 <HAL_ADC_ConfigChannel+0x382>
    return 32U;
 800627e:	2320      	movs	r3, #32
 8006280:	e004      	b.n	800628c <HAL_ADC_ConfigChannel+0x38c>
  return __builtin_clz(value);
 8006282:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006286:	fab3 f383 	clz	r3, r3
 800628a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800628c:	429a      	cmp	r2, r3
 800628e:	d106      	bne.n	800629e <HAL_ADC_ConfigChannel+0x39e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	2200      	movs	r2, #0
 8006296:	2102      	movs	r1, #2
 8006298:	4618      	mov	r0, r3
 800629a:	f7ff f827 	bl	80052ec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	2103      	movs	r1, #3
 80062a4:	4618      	mov	r0, r3
 80062a6:	f7ff f80b 	bl	80052c0 <LL_ADC_GetOffsetChannel>
 80062aa:	4603      	mov	r3, r0
 80062ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d10a      	bne.n	80062ca <HAL_ADC_ConfigChannel+0x3ca>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	2103      	movs	r1, #3
 80062ba:	4618      	mov	r0, r3
 80062bc:	f7ff f800 	bl	80052c0 <LL_ADC_GetOffsetChannel>
 80062c0:	4603      	mov	r3, r0
 80062c2:	0e9b      	lsrs	r3, r3, #26
 80062c4:	f003 021f 	and.w	r2, r3, #31
 80062c8:	e017      	b.n	80062fa <HAL_ADC_ConfigChannel+0x3fa>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	2103      	movs	r1, #3
 80062d0:	4618      	mov	r0, r3
 80062d2:	f7fe fff5 	bl	80052c0 <LL_ADC_GetOffsetChannel>
 80062d6:	4603      	mov	r3, r0
 80062d8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80062dc:	fa93 f3a3 	rbit	r3, r3
 80062e0:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80062e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80062e4:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80062e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d101      	bne.n	80062f0 <HAL_ADC_ConfigChannel+0x3f0>
    return 32U;
 80062ec:	2320      	movs	r3, #32
 80062ee:	e003      	b.n	80062f8 <HAL_ADC_ConfigChannel+0x3f8>
  return __builtin_clz(value);
 80062f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80062f2:	fab3 f383 	clz	r3, r3
 80062f6:	b2db      	uxtb	r3, r3
 80062f8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006302:	2b00      	cmp	r3, #0
 8006304:	d105      	bne.n	8006312 <HAL_ADC_ConfigChannel+0x412>
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	0e9b      	lsrs	r3, r3, #26
 800630c:	f003 031f 	and.w	r3, r3, #31
 8006310:	e011      	b.n	8006336 <HAL_ADC_ConfigChannel+0x436>
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006318:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800631a:	fa93 f3a3 	rbit	r3, r3
 800631e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8006320:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006322:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8006324:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006326:	2b00      	cmp	r3, #0
 8006328:	d101      	bne.n	800632e <HAL_ADC_ConfigChannel+0x42e>
    return 32U;
 800632a:	2320      	movs	r3, #32
 800632c:	e003      	b.n	8006336 <HAL_ADC_ConfigChannel+0x436>
  return __builtin_clz(value);
 800632e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006330:	fab3 f383 	clz	r3, r3
 8006334:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006336:	429a      	cmp	r2, r3
 8006338:	d106      	bne.n	8006348 <HAL_ADC_ConfigChannel+0x448>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	2200      	movs	r2, #0
 8006340:	2103      	movs	r1, #3
 8006342:	4618      	mov	r0, r3
 8006344:	f7fe ffd2 	bl	80052ec <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4618      	mov	r0, r3
 800634e:	f7ff f92f 	bl	80055b0 <LL_ADC_IsEnabled>
 8006352:	4603      	mov	r3, r0
 8006354:	2b00      	cmp	r3, #0
 8006356:	f040 813f 	bne.w	80065d8 <HAL_ADC_ConfigChannel+0x6d8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6818      	ldr	r0, [r3, #0]
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	6819      	ldr	r1, [r3, #0]
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	68db      	ldr	r3, [r3, #12]
 8006366:	461a      	mov	r2, r3
 8006368:	f7ff f86c 	bl	8005444 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	68db      	ldr	r3, [r3, #12]
 8006370:	4a8e      	ldr	r2, [pc, #568]	; (80065ac <HAL_ADC_ConfigChannel+0x6ac>)
 8006372:	4293      	cmp	r3, r2
 8006374:	f040 8130 	bne.w	80065d8 <HAL_ADC_ConfigChannel+0x6d8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006384:	2b00      	cmp	r3, #0
 8006386:	d10b      	bne.n	80063a0 <HAL_ADC_ConfigChannel+0x4a0>
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	0e9b      	lsrs	r3, r3, #26
 800638e:	3301      	adds	r3, #1
 8006390:	f003 031f 	and.w	r3, r3, #31
 8006394:	2b09      	cmp	r3, #9
 8006396:	bf94      	ite	ls
 8006398:	2301      	movls	r3, #1
 800639a:	2300      	movhi	r3, #0
 800639c:	b2db      	uxtb	r3, r3
 800639e:	e019      	b.n	80063d4 <HAL_ADC_ConfigChannel+0x4d4>
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80063a8:	fa93 f3a3 	rbit	r3, r3
 80063ac:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80063ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80063b0:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80063b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d101      	bne.n	80063bc <HAL_ADC_ConfigChannel+0x4bc>
    return 32U;
 80063b8:	2320      	movs	r3, #32
 80063ba:	e003      	b.n	80063c4 <HAL_ADC_ConfigChannel+0x4c4>
  return __builtin_clz(value);
 80063bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80063be:	fab3 f383 	clz	r3, r3
 80063c2:	b2db      	uxtb	r3, r3
 80063c4:	3301      	adds	r3, #1
 80063c6:	f003 031f 	and.w	r3, r3, #31
 80063ca:	2b09      	cmp	r3, #9
 80063cc:	bf94      	ite	ls
 80063ce:	2301      	movls	r3, #1
 80063d0:	2300      	movhi	r3, #0
 80063d2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d079      	beq.n	80064cc <HAL_ADC_ConfigChannel+0x5cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d107      	bne.n	80063f4 <HAL_ADC_ConfigChannel+0x4f4>
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	0e9b      	lsrs	r3, r3, #26
 80063ea:	3301      	adds	r3, #1
 80063ec:	069b      	lsls	r3, r3, #26
 80063ee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80063f2:	e015      	b.n	8006420 <HAL_ADC_ConfigChannel+0x520>
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063fc:	fa93 f3a3 	rbit	r3, r3
 8006400:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8006402:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006404:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8006406:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006408:	2b00      	cmp	r3, #0
 800640a:	d101      	bne.n	8006410 <HAL_ADC_ConfigChannel+0x510>
    return 32U;
 800640c:	2320      	movs	r3, #32
 800640e:	e003      	b.n	8006418 <HAL_ADC_ConfigChannel+0x518>
  return __builtin_clz(value);
 8006410:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006412:	fab3 f383 	clz	r3, r3
 8006416:	b2db      	uxtb	r3, r3
 8006418:	3301      	adds	r3, #1
 800641a:	069b      	lsls	r3, r3, #26
 800641c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006428:	2b00      	cmp	r3, #0
 800642a:	d109      	bne.n	8006440 <HAL_ADC_ConfigChannel+0x540>
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	0e9b      	lsrs	r3, r3, #26
 8006432:	3301      	adds	r3, #1
 8006434:	f003 031f 	and.w	r3, r3, #31
 8006438:	2101      	movs	r1, #1
 800643a:	fa01 f303 	lsl.w	r3, r1, r3
 800643e:	e017      	b.n	8006470 <HAL_ADC_ConfigChannel+0x570>
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006446:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006448:	fa93 f3a3 	rbit	r3, r3
 800644c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800644e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006450:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8006452:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006454:	2b00      	cmp	r3, #0
 8006456:	d101      	bne.n	800645c <HAL_ADC_ConfigChannel+0x55c>
    return 32U;
 8006458:	2320      	movs	r3, #32
 800645a:	e003      	b.n	8006464 <HAL_ADC_ConfigChannel+0x564>
  return __builtin_clz(value);
 800645c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800645e:	fab3 f383 	clz	r3, r3
 8006462:	b2db      	uxtb	r3, r3
 8006464:	3301      	adds	r3, #1
 8006466:	f003 031f 	and.w	r3, r3, #31
 800646a:	2101      	movs	r1, #1
 800646c:	fa01 f303 	lsl.w	r3, r1, r3
 8006470:	ea42 0103 	orr.w	r1, r2, r3
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800647c:	2b00      	cmp	r3, #0
 800647e:	d10a      	bne.n	8006496 <HAL_ADC_ConfigChannel+0x596>
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	0e9b      	lsrs	r3, r3, #26
 8006486:	3301      	adds	r3, #1
 8006488:	f003 021f 	and.w	r2, r3, #31
 800648c:	4613      	mov	r3, r2
 800648e:	005b      	lsls	r3, r3, #1
 8006490:	4413      	add	r3, r2
 8006492:	051b      	lsls	r3, r3, #20
 8006494:	e018      	b.n	80064c8 <HAL_ADC_ConfigChannel+0x5c8>
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800649c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800649e:	fa93 f3a3 	rbit	r3, r3
 80064a2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80064a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80064a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d101      	bne.n	80064b2 <HAL_ADC_ConfigChannel+0x5b2>
    return 32U;
 80064ae:	2320      	movs	r3, #32
 80064b0:	e003      	b.n	80064ba <HAL_ADC_ConfigChannel+0x5ba>
  return __builtin_clz(value);
 80064b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064b4:	fab3 f383 	clz	r3, r3
 80064b8:	b2db      	uxtb	r3, r3
 80064ba:	3301      	adds	r3, #1
 80064bc:	f003 021f 	and.w	r2, r3, #31
 80064c0:	4613      	mov	r3, r2
 80064c2:	005b      	lsls	r3, r3, #1
 80064c4:	4413      	add	r3, r2
 80064c6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80064c8:	430b      	orrs	r3, r1
 80064ca:	e080      	b.n	80065ce <HAL_ADC_ConfigChannel+0x6ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d107      	bne.n	80064e8 <HAL_ADC_ConfigChannel+0x5e8>
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	0e9b      	lsrs	r3, r3, #26
 80064de:	3301      	adds	r3, #1
 80064e0:	069b      	lsls	r3, r3, #26
 80064e2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80064e6:	e015      	b.n	8006514 <HAL_ADC_ConfigChannel+0x614>
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064f0:	fa93 f3a3 	rbit	r3, r3
 80064f4:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80064f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064f8:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80064fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d101      	bne.n	8006504 <HAL_ADC_ConfigChannel+0x604>
    return 32U;
 8006500:	2320      	movs	r3, #32
 8006502:	e003      	b.n	800650c <HAL_ADC_ConfigChannel+0x60c>
  return __builtin_clz(value);
 8006504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006506:	fab3 f383 	clz	r3, r3
 800650a:	b2db      	uxtb	r3, r3
 800650c:	3301      	adds	r3, #1
 800650e:	069b      	lsls	r3, r3, #26
 8006510:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800651c:	2b00      	cmp	r3, #0
 800651e:	d109      	bne.n	8006534 <HAL_ADC_ConfigChannel+0x634>
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	0e9b      	lsrs	r3, r3, #26
 8006526:	3301      	adds	r3, #1
 8006528:	f003 031f 	and.w	r3, r3, #31
 800652c:	2101      	movs	r1, #1
 800652e:	fa01 f303 	lsl.w	r3, r1, r3
 8006532:	e017      	b.n	8006564 <HAL_ADC_ConfigChannel+0x664>
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800653a:	6a3b      	ldr	r3, [r7, #32]
 800653c:	fa93 f3a3 	rbit	r3, r3
 8006540:	61fb      	str	r3, [r7, #28]
  return result;
 8006542:	69fb      	ldr	r3, [r7, #28]
 8006544:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006548:	2b00      	cmp	r3, #0
 800654a:	d101      	bne.n	8006550 <HAL_ADC_ConfigChannel+0x650>
    return 32U;
 800654c:	2320      	movs	r3, #32
 800654e:	e003      	b.n	8006558 <HAL_ADC_ConfigChannel+0x658>
  return __builtin_clz(value);
 8006550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006552:	fab3 f383 	clz	r3, r3
 8006556:	b2db      	uxtb	r3, r3
 8006558:	3301      	adds	r3, #1
 800655a:	f003 031f 	and.w	r3, r3, #31
 800655e:	2101      	movs	r1, #1
 8006560:	fa01 f303 	lsl.w	r3, r1, r3
 8006564:	ea42 0103 	orr.w	r1, r2, r3
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006570:	2b00      	cmp	r3, #0
 8006572:	d10d      	bne.n	8006590 <HAL_ADC_ConfigChannel+0x690>
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	0e9b      	lsrs	r3, r3, #26
 800657a:	3301      	adds	r3, #1
 800657c:	f003 021f 	and.w	r2, r3, #31
 8006580:	4613      	mov	r3, r2
 8006582:	005b      	lsls	r3, r3, #1
 8006584:	4413      	add	r3, r2
 8006586:	3b1e      	subs	r3, #30
 8006588:	051b      	lsls	r3, r3, #20
 800658a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800658e:	e01d      	b.n	80065cc <HAL_ADC_ConfigChannel+0x6cc>
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	fa93 f3a3 	rbit	r3, r3
 800659c:	613b      	str	r3, [r7, #16]
  return result;
 800659e:	693b      	ldr	r3, [r7, #16]
 80065a0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80065a2:	69bb      	ldr	r3, [r7, #24]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d103      	bne.n	80065b0 <HAL_ADC_ConfigChannel+0x6b0>
    return 32U;
 80065a8:	2320      	movs	r3, #32
 80065aa:	e005      	b.n	80065b8 <HAL_ADC_ConfigChannel+0x6b8>
 80065ac:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80065b0:	69bb      	ldr	r3, [r7, #24]
 80065b2:	fab3 f383 	clz	r3, r3
 80065b6:	b2db      	uxtb	r3, r3
 80065b8:	3301      	adds	r3, #1
 80065ba:	f003 021f 	and.w	r2, r3, #31
 80065be:	4613      	mov	r3, r2
 80065c0:	005b      	lsls	r3, r3, #1
 80065c2:	4413      	add	r3, r2
 80065c4:	3b1e      	subs	r3, #30
 80065c6:	051b      	lsls	r3, r3, #20
 80065c8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80065cc:	430b      	orrs	r3, r1
 80065ce:	683a      	ldr	r2, [r7, #0]
 80065d0:	6892      	ldr	r2, [r2, #8]
 80065d2:	4619      	mov	r1, r3
 80065d4:	f7fe ff0a 	bl	80053ec <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	681a      	ldr	r2, [r3, #0]
 80065dc:	4b3d      	ldr	r3, [pc, #244]	; (80066d4 <HAL_ADC_ConfigChannel+0x7d4>)
 80065de:	4013      	ands	r3, r2
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d06c      	beq.n	80066be <HAL_ADC_ConfigChannel+0x7be>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80065e4:	483c      	ldr	r0, [pc, #240]	; (80066d8 <HAL_ADC_ConfigChannel+0x7d8>)
 80065e6:	f7fe fe39 	bl	800525c <LL_ADC_GetCommonPathInternalCh>
 80065ea:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a3a      	ldr	r2, [pc, #232]	; (80066dc <HAL_ADC_ConfigChannel+0x7dc>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d127      	bne.n	8006648 <HAL_ADC_ConfigChannel+0x748>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80065f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80065fc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006600:	2b00      	cmp	r3, #0
 8006602:	d121      	bne.n	8006648 <HAL_ADC_ConfigChannel+0x748>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4a35      	ldr	r2, [pc, #212]	; (80066e0 <HAL_ADC_ConfigChannel+0x7e0>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d157      	bne.n	80066be <HAL_ADC_ConfigChannel+0x7be>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800660e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006612:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006616:	4619      	mov	r1, r3
 8006618:	482f      	ldr	r0, [pc, #188]	; (80066d8 <HAL_ADC_ConfigChannel+0x7d8>)
 800661a:	f7fe fe0c 	bl	8005236 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800661e:	4b31      	ldr	r3, [pc, #196]	; (80066e4 <HAL_ADC_ConfigChannel+0x7e4>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	099b      	lsrs	r3, r3, #6
 8006624:	4a30      	ldr	r2, [pc, #192]	; (80066e8 <HAL_ADC_ConfigChannel+0x7e8>)
 8006626:	fba2 2303 	umull	r2, r3, r2, r3
 800662a:	099b      	lsrs	r3, r3, #6
 800662c:	1c5a      	adds	r2, r3, #1
 800662e:	4613      	mov	r3, r2
 8006630:	005b      	lsls	r3, r3, #1
 8006632:	4413      	add	r3, r2
 8006634:	009b      	lsls	r3, r3, #2
 8006636:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8006638:	e002      	b.n	8006640 <HAL_ADC_ConfigChannel+0x740>
          {
            wait_loop_index--;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	3b01      	subs	r3, #1
 800663e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d1f9      	bne.n	800663a <HAL_ADC_ConfigChannel+0x73a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006646:	e03a      	b.n	80066be <HAL_ADC_ConfigChannel+0x7be>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4a27      	ldr	r2, [pc, #156]	; (80066ec <HAL_ADC_ConfigChannel+0x7ec>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d113      	bne.n	800667a <HAL_ADC_ConfigChannel+0x77a>
 8006652:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006656:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800665a:	2b00      	cmp	r3, #0
 800665c:	d10d      	bne.n	800667a <HAL_ADC_ConfigChannel+0x77a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a1f      	ldr	r2, [pc, #124]	; (80066e0 <HAL_ADC_ConfigChannel+0x7e0>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d12a      	bne.n	80066be <HAL_ADC_ConfigChannel+0x7be>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006668:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800666c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006670:	4619      	mov	r1, r3
 8006672:	4819      	ldr	r0, [pc, #100]	; (80066d8 <HAL_ADC_ConfigChannel+0x7d8>)
 8006674:	f7fe fddf 	bl	8005236 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006678:	e021      	b.n	80066be <HAL_ADC_ConfigChannel+0x7be>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a1c      	ldr	r2, [pc, #112]	; (80066f0 <HAL_ADC_ConfigChannel+0x7f0>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d11c      	bne.n	80066be <HAL_ADC_ConfigChannel+0x7be>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006684:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006688:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800668c:	2b00      	cmp	r3, #0
 800668e:	d116      	bne.n	80066be <HAL_ADC_ConfigChannel+0x7be>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4a12      	ldr	r2, [pc, #72]	; (80066e0 <HAL_ADC_ConfigChannel+0x7e0>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d111      	bne.n	80066be <HAL_ADC_ConfigChannel+0x7be>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800669a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800669e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80066a2:	4619      	mov	r1, r3
 80066a4:	480c      	ldr	r0, [pc, #48]	; (80066d8 <HAL_ADC_ConfigChannel+0x7d8>)
 80066a6:	f7fe fdc6 	bl	8005236 <LL_ADC_SetCommonPathInternalCh>
 80066aa:	e008      	b.n	80066be <HAL_ADC_ConfigChannel+0x7be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066b0:	f043 0220 	orr.w	r2, r3, #32
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80066b8:	2301      	movs	r3, #1
 80066ba:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2200      	movs	r2, #0
 80066c2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80066c6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	37d8      	adds	r7, #216	; 0xd8
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}
 80066d2:	bf00      	nop
 80066d4:	80080000 	.word	0x80080000
 80066d8:	50040300 	.word	0x50040300
 80066dc:	c7520000 	.word	0xc7520000
 80066e0:	50040000 	.word	0x50040000
 80066e4:	20000224 	.word	0x20000224
 80066e8:	053e2d63 	.word	0x053e2d63
 80066ec:	cb840000 	.word	0xcb840000
 80066f0:	80000001 	.word	0x80000001

080066f4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b084      	sub	sp, #16
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80066fc:	2300      	movs	r3, #0
 80066fe:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4618      	mov	r0, r3
 8006706:	f7fe ff53 	bl	80055b0 <LL_ADC_IsEnabled>
 800670a:	4603      	mov	r3, r0
 800670c:	2b00      	cmp	r3, #0
 800670e:	d169      	bne.n	80067e4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	689a      	ldr	r2, [r3, #8]
 8006716:	4b36      	ldr	r3, [pc, #216]	; (80067f0 <ADC_Enable+0xfc>)
 8006718:	4013      	ands	r3, r2
 800671a:	2b00      	cmp	r3, #0
 800671c:	d00d      	beq.n	800673a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006722:	f043 0210 	orr.w	r2, r3, #16
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800672e:	f043 0201 	orr.w	r2, r3, #1
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8006736:	2301      	movs	r3, #1
 8006738:	e055      	b.n	80067e6 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4618      	mov	r0, r3
 8006740:	f7fe ff0e 	bl	8005560 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8006744:	482b      	ldr	r0, [pc, #172]	; (80067f4 <ADC_Enable+0x100>)
 8006746:	f7fe fd89 	bl	800525c <LL_ADC_GetCommonPathInternalCh>
 800674a:	4603      	mov	r3, r0
 800674c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006750:	2b00      	cmp	r3, #0
 8006752:	d013      	beq.n	800677c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006754:	4b28      	ldr	r3, [pc, #160]	; (80067f8 <ADC_Enable+0x104>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	099b      	lsrs	r3, r3, #6
 800675a:	4a28      	ldr	r2, [pc, #160]	; (80067fc <ADC_Enable+0x108>)
 800675c:	fba2 2303 	umull	r2, r3, r2, r3
 8006760:	099b      	lsrs	r3, r3, #6
 8006762:	1c5a      	adds	r2, r3, #1
 8006764:	4613      	mov	r3, r2
 8006766:	005b      	lsls	r3, r3, #1
 8006768:	4413      	add	r3, r2
 800676a:	009b      	lsls	r3, r3, #2
 800676c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800676e:	e002      	b.n	8006776 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	3b01      	subs	r3, #1
 8006774:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d1f9      	bne.n	8006770 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800677c:	f7fe fd18 	bl	80051b0 <HAL_GetTick>
 8006780:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006782:	e028      	b.n	80067d6 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4618      	mov	r0, r3
 800678a:	f7fe ff11 	bl	80055b0 <LL_ADC_IsEnabled>
 800678e:	4603      	mov	r3, r0
 8006790:	2b00      	cmp	r3, #0
 8006792:	d104      	bne.n	800679e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4618      	mov	r0, r3
 800679a:	f7fe fee1 	bl	8005560 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800679e:	f7fe fd07 	bl	80051b0 <HAL_GetTick>
 80067a2:	4602      	mov	r2, r0
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	1ad3      	subs	r3, r2, r3
 80067a8:	2b02      	cmp	r3, #2
 80067aa:	d914      	bls.n	80067d6 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f003 0301 	and.w	r3, r3, #1
 80067b6:	2b01      	cmp	r3, #1
 80067b8:	d00d      	beq.n	80067d6 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067be:	f043 0210 	orr.w	r2, r3, #16
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067ca:	f043 0201 	orr.w	r2, r3, #1
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80067d2:	2301      	movs	r3, #1
 80067d4:	e007      	b.n	80067e6 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f003 0301 	and.w	r3, r3, #1
 80067e0:	2b01      	cmp	r3, #1
 80067e2:	d1cf      	bne.n	8006784 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80067e4:	2300      	movs	r3, #0
}
 80067e6:	4618      	mov	r0, r3
 80067e8:	3710      	adds	r7, #16
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd80      	pop	{r7, pc}
 80067ee:	bf00      	nop
 80067f0:	8000003f 	.word	0x8000003f
 80067f4:	50040300 	.word	0x50040300
 80067f8:	20000224 	.word	0x20000224
 80067fc:	053e2d63 	.word	0x053e2d63

08006800 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b084      	sub	sp, #16
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4618      	mov	r0, r3
 800680e:	f7fe fee2 	bl	80055d6 <LL_ADC_IsDisableOngoing>
 8006812:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4618      	mov	r0, r3
 800681a:	f7fe fec9 	bl	80055b0 <LL_ADC_IsEnabled>
 800681e:	4603      	mov	r3, r0
 8006820:	2b00      	cmp	r3, #0
 8006822:	d047      	beq.n	80068b4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d144      	bne.n	80068b4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	689b      	ldr	r3, [r3, #8]
 8006830:	f003 030d 	and.w	r3, r3, #13
 8006834:	2b01      	cmp	r3, #1
 8006836:	d10c      	bne.n	8006852 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4618      	mov	r0, r3
 800683e:	f7fe fea3 	bl	8005588 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	2203      	movs	r2, #3
 8006848:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800684a:	f7fe fcb1 	bl	80051b0 <HAL_GetTick>
 800684e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006850:	e029      	b.n	80068a6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006856:	f043 0210 	orr.w	r2, r3, #16
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006862:	f043 0201 	orr.w	r2, r3, #1
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 800686a:	2301      	movs	r3, #1
 800686c:	e023      	b.n	80068b6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800686e:	f7fe fc9f 	bl	80051b0 <HAL_GetTick>
 8006872:	4602      	mov	r2, r0
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	1ad3      	subs	r3, r2, r3
 8006878:	2b02      	cmp	r3, #2
 800687a:	d914      	bls.n	80068a6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	689b      	ldr	r3, [r3, #8]
 8006882:	f003 0301 	and.w	r3, r3, #1
 8006886:	2b00      	cmp	r3, #0
 8006888:	d00d      	beq.n	80068a6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800688e:	f043 0210 	orr.w	r2, r3, #16
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800689a:	f043 0201 	orr.w	r2, r3, #1
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80068a2:	2301      	movs	r3, #1
 80068a4:	e007      	b.n	80068b6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	689b      	ldr	r3, [r3, #8]
 80068ac:	f003 0301 	and.w	r3, r3, #1
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d1dc      	bne.n	800686e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80068b4:	2300      	movs	r3, #0
}
 80068b6:	4618      	mov	r0, r3
 80068b8:	3710      	adds	r7, #16
 80068ba:	46bd      	mov	sp, r7
 80068bc:	bd80      	pop	{r7, pc}

080068be <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80068be:	b580      	push	{r7, lr}
 80068c0:	b084      	sub	sp, #16
 80068c2:	af00      	add	r7, sp, #0
 80068c4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068ca:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068d0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d14b      	bne.n	8006970 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068dc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f003 0308 	and.w	r3, r3, #8
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d021      	beq.n	8006936 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4618      	mov	r0, r3
 80068f8:	f7fe fd26 	bl	8005348 <LL_ADC_REG_IsTriggerSourceSWStart>
 80068fc:	4603      	mov	r3, r0
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d032      	beq.n	8006968 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	68db      	ldr	r3, [r3, #12]
 8006908:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800690c:	2b00      	cmp	r3, #0
 800690e:	d12b      	bne.n	8006968 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006914:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	659a      	str	r2, [r3, #88]	; 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006920:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006924:	2b00      	cmp	r3, #0
 8006926:	d11f      	bne.n	8006968 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800692c:	f043 0201 	orr.w	r2, r3, #1
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	659a      	str	r2, [r3, #88]	; 0x58
 8006934:	e018      	b.n	8006968 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	68db      	ldr	r3, [r3, #12]
 800693c:	f003 0302 	and.w	r3, r3, #2
 8006940:	2b00      	cmp	r3, #0
 8006942:	d111      	bne.n	8006968 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006948:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	659a      	str	r2, [r3, #88]	; 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006954:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006958:	2b00      	cmp	r3, #0
 800695a:	d105      	bne.n	8006968 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006960:	f043 0201 	orr.w	r2, r3, #1
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006968:	68f8      	ldr	r0, [r7, #12]
 800696a:	f7ff faa1 	bl	8005eb0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800696e:	e00e      	b.n	800698e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006974:	f003 0310 	and.w	r3, r3, #16
 8006978:	2b00      	cmp	r3, #0
 800697a:	d003      	beq.n	8006984 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800697c:	68f8      	ldr	r0, [r7, #12]
 800697e:	f7ff fab5 	bl	8005eec <HAL_ADC_ErrorCallback>
}
 8006982:	e004      	b.n	800698e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006988:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	4798      	blx	r3
}
 800698e:	bf00      	nop
 8006990:	3710      	adds	r7, #16
 8006992:	46bd      	mov	sp, r7
 8006994:	bd80      	pop	{r7, pc}

08006996 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8006996:	b580      	push	{r7, lr}
 8006998:	b084      	sub	sp, #16
 800699a:	af00      	add	r7, sp, #0
 800699c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069a2:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80069a4:	68f8      	ldr	r0, [r7, #12]
 80069a6:	f7ff fa8d 	bl	8005ec4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80069aa:	bf00      	nop
 80069ac:	3710      	adds	r7, #16
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bd80      	pop	{r7, pc}

080069b2 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80069b2:	b580      	push	{r7, lr}
 80069b4:	b084      	sub	sp, #16
 80069b6:	af00      	add	r7, sp, #0
 80069b8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069be:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069c4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069d0:	f043 0204 	orr.w	r2, r3, #4
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80069d8:	68f8      	ldr	r0, [r7, #12]
 80069da:	f7ff fa87 	bl	8005eec <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80069de:	bf00      	nop
 80069e0:	3710      	adds	r7, #16
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}

080069e6 <LL_ADC_IsEnabled>:
{
 80069e6:	b480      	push	{r7}
 80069e8:	b083      	sub	sp, #12
 80069ea:	af00      	add	r7, sp, #0
 80069ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	689b      	ldr	r3, [r3, #8]
 80069f2:	f003 0301 	and.w	r3, r3, #1
 80069f6:	2b01      	cmp	r3, #1
 80069f8:	d101      	bne.n	80069fe <LL_ADC_IsEnabled+0x18>
 80069fa:	2301      	movs	r3, #1
 80069fc:	e000      	b.n	8006a00 <LL_ADC_IsEnabled+0x1a>
 80069fe:	2300      	movs	r3, #0
}
 8006a00:	4618      	mov	r0, r3
 8006a02:	370c      	adds	r7, #12
 8006a04:	46bd      	mov	sp, r7
 8006a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0a:	4770      	bx	lr

08006a0c <LL_ADC_StartCalibration>:
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	b083      	sub	sp, #12
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
 8006a14:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	689b      	ldr	r3, [r3, #8]
 8006a1a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8006a1e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006a22:	683a      	ldr	r2, [r7, #0]
 8006a24:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	609a      	str	r2, [r3, #8]
}
 8006a32:	bf00      	nop
 8006a34:	370c      	adds	r7, #12
 8006a36:	46bd      	mov	sp, r7
 8006a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3c:	4770      	bx	lr

08006a3e <LL_ADC_IsCalibrationOnGoing>:
{
 8006a3e:	b480      	push	{r7}
 8006a40:	b083      	sub	sp, #12
 8006a42:	af00      	add	r7, sp, #0
 8006a44:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	689b      	ldr	r3, [r3, #8]
 8006a4a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a52:	d101      	bne.n	8006a58 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8006a54:	2301      	movs	r3, #1
 8006a56:	e000      	b.n	8006a5a <LL_ADC_IsCalibrationOnGoing+0x1c>
 8006a58:	2300      	movs	r3, #0
}
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	370c      	adds	r7, #12
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a64:	4770      	bx	lr

08006a66 <LL_ADC_REG_IsConversionOngoing>:
{
 8006a66:	b480      	push	{r7}
 8006a68:	b083      	sub	sp, #12
 8006a6a:	af00      	add	r7, sp, #0
 8006a6c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	689b      	ldr	r3, [r3, #8]
 8006a72:	f003 0304 	and.w	r3, r3, #4
 8006a76:	2b04      	cmp	r3, #4
 8006a78:	d101      	bne.n	8006a7e <LL_ADC_REG_IsConversionOngoing+0x18>
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	e000      	b.n	8006a80 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006a7e:	2300      	movs	r3, #0
}
 8006a80:	4618      	mov	r0, r3
 8006a82:	370c      	adds	r7, #12
 8006a84:	46bd      	mov	sp, r7
 8006a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8a:	4770      	bx	lr

08006a8c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b084      	sub	sp, #16
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
 8006a94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8006a96:	2300      	movs	r3, #0
 8006a98:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8006aa0:	2b01      	cmp	r3, #1
 8006aa2:	d101      	bne.n	8006aa8 <HAL_ADCEx_Calibration_Start+0x1c>
 8006aa4:	2302      	movs	r3, #2
 8006aa6:	e04d      	b.n	8006b44 <HAL_ADCEx_Calibration_Start+0xb8>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2201      	movs	r2, #1
 8006aac:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	f7ff fea5 	bl	8006800 <ADC_Disable>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8006aba:	7bfb      	ldrb	r3, [r7, #15]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d136      	bne.n	8006b2e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ac4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006ac8:	f023 0302 	bic.w	r3, r3, #2
 8006acc:	f043 0202 	orr.w	r2, r3, #2
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	659a      	str	r2, [r3, #88]	; 0x58
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	6839      	ldr	r1, [r7, #0]
 8006ada:	4618      	mov	r0, r3
 8006adc:	f7ff ff96 	bl	8006a0c <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8006ae0:	e014      	b.n	8006b0c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	3301      	adds	r3, #1
 8006ae6:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 8006aee:	d30d      	bcc.n	8006b0c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006af4:	f023 0312 	bic.w	r3, r3, #18
 8006af8:	f043 0210 	orr.w	r2, r3, #16
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	659a      	str	r2, [r3, #88]	; 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2200      	movs	r2, #0
 8006b04:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        return HAL_ERROR;
 8006b08:	2301      	movs	r3, #1
 8006b0a:	e01b      	b.n	8006b44 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4618      	mov	r0, r3
 8006b12:	f7ff ff94 	bl	8006a3e <LL_ADC_IsCalibrationOnGoing>
 8006b16:	4603      	mov	r3, r0
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d1e2      	bne.n	8006ae2 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b20:	f023 0303 	bic.w	r3, r3, #3
 8006b24:	f043 0201 	orr.w	r2, r3, #1
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	659a      	str	r2, [r3, #88]	; 0x58
 8006b2c:	e005      	b.n	8006b3a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b32:	f043 0210 	orr.w	r2, r3, #16
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8006b42:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b44:	4618      	mov	r0, r3
 8006b46:	3710      	adds	r7, #16
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bd80      	pop	{r7, pc}

08006b4c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b083      	sub	sp, #12
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8006b54:	bf00      	nop
 8006b56:	370c      	adds	r7, #12
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5e:	4770      	bx	lr

08006b60 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8006b60:	b480      	push	{r7}
 8006b62:	b083      	sub	sp, #12
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8006b68:	bf00      	nop
 8006b6a:	370c      	adds	r7, #12
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b72:	4770      	bx	lr

08006b74 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8006b74:	b480      	push	{r7}
 8006b76:	b083      	sub	sp, #12
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8006b7c:	bf00      	nop
 8006b7e:	370c      	adds	r7, #12
 8006b80:	46bd      	mov	sp, r7
 8006b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b86:	4770      	bx	lr

08006b88 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b083      	sub	sp, #12
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8006b90:	bf00      	nop
 8006b92:	370c      	adds	r7, #12
 8006b94:	46bd      	mov	sp, r7
 8006b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9a:	4770      	bx	lr

08006b9c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b083      	sub	sp, #12
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8006ba4:	bf00      	nop
 8006ba6:	370c      	adds	r7, #12
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bae:	4770      	bx	lr

08006bb0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8006bb0:	b590      	push	{r4, r7, lr}
 8006bb2:	b0a1      	sub	sp, #132	; 0x84
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
 8006bb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8006bc6:	2b01      	cmp	r3, #1
 8006bc8:	d101      	bne.n	8006bce <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8006bca:	2302      	movs	r3, #2
 8006bcc:	e089      	b.n	8006ce2 <HAL_ADCEx_MultiModeConfigChannel+0x132>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2201      	movs	r2, #1
 8006bd2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8006bda:	2300      	movs	r3, #0
 8006bdc:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4a42      	ldr	r2, [pc, #264]	; (8006cec <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d102      	bne.n	8006bee <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8006be8:	4b41      	ldr	r3, [pc, #260]	; (8006cf0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8006bea:	60fb      	str	r3, [r7, #12]
 8006bec:	e001      	b.n	8006bf2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8006bee:	2300      	movs	r3, #0
 8006bf0:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d10b      	bne.n	8006c10 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bfc:	f043 0220 	orr.w	r2, r3, #32
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2200      	movs	r2, #0
 8006c08:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	e068      	b.n	8006ce2 <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	4618      	mov	r0, r3
 8006c14:	f7ff ff27 	bl	8006a66 <LL_ADC_REG_IsConversionOngoing>
 8006c18:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4618      	mov	r0, r3
 8006c20:	f7ff ff21 	bl	8006a66 <LL_ADC_REG_IsConversionOngoing>
 8006c24:	4603      	mov	r3, r0
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d14a      	bne.n	8006cc0 <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8006c2a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d147      	bne.n	8006cc0 <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006c30:	4b30      	ldr	r3, [pc, #192]	; (8006cf4 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8006c32:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d027      	beq.n	8006c8c <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8006c3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c3e:	689b      	ldr	r3, [r3, #8]
 8006c40:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	6859      	ldr	r1, [r3, #4]
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006c4e:	035b      	lsls	r3, r3, #13
 8006c50:	430b      	orrs	r3, r1
 8006c52:	431a      	orrs	r2, r3
 8006c54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c56:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006c58:	4824      	ldr	r0, [pc, #144]	; (8006cec <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8006c5a:	f7ff fec4 	bl	80069e6 <LL_ADC_IsEnabled>
 8006c5e:	4604      	mov	r4, r0
 8006c60:	4823      	ldr	r0, [pc, #140]	; (8006cf0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8006c62:	f7ff fec0 	bl	80069e6 <LL_ADC_IsEnabled>
 8006c66:	4603      	mov	r3, r0
 8006c68:	4323      	orrs	r3, r4
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d132      	bne.n	8006cd4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8006c6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c70:	689b      	ldr	r3, [r3, #8]
 8006c72:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8006c76:	f023 030f 	bic.w	r3, r3, #15
 8006c7a:	683a      	ldr	r2, [r7, #0]
 8006c7c:	6811      	ldr	r1, [r2, #0]
 8006c7e:	683a      	ldr	r2, [r7, #0]
 8006c80:	6892      	ldr	r2, [r2, #8]
 8006c82:	430a      	orrs	r2, r1
 8006c84:	431a      	orrs	r2, r3
 8006c86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c88:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006c8a:	e023      	b.n	8006cd4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8006c8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c8e:	689b      	ldr	r3, [r3, #8]
 8006c90:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006c94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c96:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006c98:	4814      	ldr	r0, [pc, #80]	; (8006cec <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8006c9a:	f7ff fea4 	bl	80069e6 <LL_ADC_IsEnabled>
 8006c9e:	4604      	mov	r4, r0
 8006ca0:	4813      	ldr	r0, [pc, #76]	; (8006cf0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8006ca2:	f7ff fea0 	bl	80069e6 <LL_ADC_IsEnabled>
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	4323      	orrs	r3, r4
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d112      	bne.n	8006cd4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8006cae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006cb0:	689b      	ldr	r3, [r3, #8]
 8006cb2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8006cb6:	f023 030f 	bic.w	r3, r3, #15
 8006cba:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8006cbc:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006cbe:	e009      	b.n	8006cd4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cc4:	f043 0220 	orr.w	r2, r3, #32
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8006ccc:	2301      	movs	r3, #1
 8006cce:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8006cd2:	e000      	b.n	8006cd6 <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006cd4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8006cde:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	3784      	adds	r7, #132	; 0x84
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bd90      	pop	{r4, r7, pc}
 8006cea:	bf00      	nop
 8006cec:	50040000 	.word	0x50040000
 8006cf0:	50040100 	.word	0x50040100
 8006cf4:	50040300 	.word	0x50040300

08006cf8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b084      	sub	sp, #16
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d101      	bne.n	8006d0a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8006d06:	2301      	movs	r3, #1
 8006d08:	e0ed      	b.n	8006ee6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006d10:	b2db      	uxtb	r3, r3
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d102      	bne.n	8006d1c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	f7fd ff28 	bl	8004b6c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	681a      	ldr	r2, [r3, #0]
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f042 0201 	orr.w	r2, r2, #1
 8006d2a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006d2c:	f7fe fa40 	bl	80051b0 <HAL_GetTick>
 8006d30:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8006d32:	e012      	b.n	8006d5a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006d34:	f7fe fa3c 	bl	80051b0 <HAL_GetTick>
 8006d38:	4602      	mov	r2, r0
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	1ad3      	subs	r3, r2, r3
 8006d3e:	2b0a      	cmp	r3, #10
 8006d40:	d90b      	bls.n	8006d5a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d46:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2205      	movs	r2, #5
 8006d52:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8006d56:	2301      	movs	r3, #1
 8006d58:	e0c5      	b.n	8006ee6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	685b      	ldr	r3, [r3, #4]
 8006d60:	f003 0301 	and.w	r3, r3, #1
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d0e5      	beq.n	8006d34 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	681a      	ldr	r2, [r3, #0]
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f022 0202 	bic.w	r2, r2, #2
 8006d76:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006d78:	f7fe fa1a 	bl	80051b0 <HAL_GetTick>
 8006d7c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8006d7e:	e012      	b.n	8006da6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006d80:	f7fe fa16 	bl	80051b0 <HAL_GetTick>
 8006d84:	4602      	mov	r2, r0
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	1ad3      	subs	r3, r2, r3
 8006d8a:	2b0a      	cmp	r3, #10
 8006d8c:	d90b      	bls.n	8006da6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d92:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2205      	movs	r2, #5
 8006d9e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8006da2:	2301      	movs	r3, #1
 8006da4:	e09f      	b.n	8006ee6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	685b      	ldr	r3, [r3, #4]
 8006dac:	f003 0302 	and.w	r3, r3, #2
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d1e5      	bne.n	8006d80 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	7e1b      	ldrb	r3, [r3, #24]
 8006db8:	2b01      	cmp	r3, #1
 8006dba:	d108      	bne.n	8006dce <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	681a      	ldr	r2, [r3, #0]
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006dca:	601a      	str	r2, [r3, #0]
 8006dcc:	e007      	b.n	8006dde <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	681a      	ldr	r2, [r3, #0]
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006ddc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	7e5b      	ldrb	r3, [r3, #25]
 8006de2:	2b01      	cmp	r3, #1
 8006de4:	d108      	bne.n	8006df8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	681a      	ldr	r2, [r3, #0]
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006df4:	601a      	str	r2, [r3, #0]
 8006df6:	e007      	b.n	8006e08 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	681a      	ldr	r2, [r3, #0]
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e06:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	7e9b      	ldrb	r3, [r3, #26]
 8006e0c:	2b01      	cmp	r3, #1
 8006e0e:	d108      	bne.n	8006e22 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	681a      	ldr	r2, [r3, #0]
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f042 0220 	orr.w	r2, r2, #32
 8006e1e:	601a      	str	r2, [r3, #0]
 8006e20:	e007      	b.n	8006e32 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	681a      	ldr	r2, [r3, #0]
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f022 0220 	bic.w	r2, r2, #32
 8006e30:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	7edb      	ldrb	r3, [r3, #27]
 8006e36:	2b01      	cmp	r3, #1
 8006e38:	d108      	bne.n	8006e4c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	681a      	ldr	r2, [r3, #0]
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f022 0210 	bic.w	r2, r2, #16
 8006e48:	601a      	str	r2, [r3, #0]
 8006e4a:	e007      	b.n	8006e5c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	681a      	ldr	r2, [r3, #0]
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f042 0210 	orr.w	r2, r2, #16
 8006e5a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	7f1b      	ldrb	r3, [r3, #28]
 8006e60:	2b01      	cmp	r3, #1
 8006e62:	d108      	bne.n	8006e76 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	681a      	ldr	r2, [r3, #0]
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f042 0208 	orr.w	r2, r2, #8
 8006e72:	601a      	str	r2, [r3, #0]
 8006e74:	e007      	b.n	8006e86 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	681a      	ldr	r2, [r3, #0]
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f022 0208 	bic.w	r2, r2, #8
 8006e84:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	7f5b      	ldrb	r3, [r3, #29]
 8006e8a:	2b01      	cmp	r3, #1
 8006e8c:	d108      	bne.n	8006ea0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	681a      	ldr	r2, [r3, #0]
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f042 0204 	orr.w	r2, r2, #4
 8006e9c:	601a      	str	r2, [r3, #0]
 8006e9e:	e007      	b.n	8006eb0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	681a      	ldr	r2, [r3, #0]
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f022 0204 	bic.w	r2, r2, #4
 8006eae:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	689a      	ldr	r2, [r3, #8]
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	68db      	ldr	r3, [r3, #12]
 8006eb8:	431a      	orrs	r2, r3
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	691b      	ldr	r3, [r3, #16]
 8006ebe:	431a      	orrs	r2, r3
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	695b      	ldr	r3, [r3, #20]
 8006ec4:	ea42 0103 	orr.w	r1, r2, r3
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	685b      	ldr	r3, [r3, #4]
 8006ecc:	1e5a      	subs	r2, r3, #1
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	430a      	orrs	r2, r1
 8006ed4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2200      	movs	r2, #0
 8006eda:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2201      	movs	r2, #1
 8006ee0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8006ee4:	2300      	movs	r3, #0
}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	3710      	adds	r7, #16
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd80      	pop	{r7, pc}

08006eee <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8006eee:	b480      	push	{r7}
 8006ef0:	b087      	sub	sp, #28
 8006ef2:	af00      	add	r7, sp, #0
 8006ef4:	6078      	str	r0, [r7, #4]
 8006ef6:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006f04:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8006f06:	7cfb      	ldrb	r3, [r7, #19]
 8006f08:	2b01      	cmp	r3, #1
 8006f0a:	d003      	beq.n	8006f14 <HAL_CAN_ConfigFilter+0x26>
 8006f0c:	7cfb      	ldrb	r3, [r7, #19]
 8006f0e:	2b02      	cmp	r3, #2
 8006f10:	f040 80aa 	bne.w	8007068 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8006f14:	697b      	ldr	r3, [r7, #20]
 8006f16:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006f1a:	f043 0201 	orr.w	r2, r3, #1
 8006f1e:	697b      	ldr	r3, [r7, #20]
 8006f20:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	695b      	ldr	r3, [r3, #20]
 8006f28:	f003 031f 	and.w	r3, r3, #31
 8006f2c:	2201      	movs	r2, #1
 8006f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8006f32:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8006f34:	697b      	ldr	r3, [r7, #20]
 8006f36:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	43db      	mvns	r3, r3
 8006f3e:	401a      	ands	r2, r3
 8006f40:	697b      	ldr	r3, [r7, #20]
 8006f42:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	69db      	ldr	r3, [r3, #28]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d123      	bne.n	8006f96 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	43db      	mvns	r3, r3
 8006f58:	401a      	ands	r2, r3
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	68db      	ldr	r3, [r3, #12]
 8006f64:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	685b      	ldr	r3, [r3, #4]
 8006f6a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006f6c:	683a      	ldr	r2, [r7, #0]
 8006f6e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8006f70:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006f72:	697b      	ldr	r3, [r7, #20]
 8006f74:	3248      	adds	r2, #72	; 0x48
 8006f76:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	689b      	ldr	r3, [r3, #8]
 8006f7e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8006f8a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8006f8c:	6979      	ldr	r1, [r7, #20]
 8006f8e:	3348      	adds	r3, #72	; 0x48
 8006f90:	00db      	lsls	r3, r3, #3
 8006f92:	440b      	add	r3, r1
 8006f94:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	69db      	ldr	r3, [r3, #28]
 8006f9a:	2b01      	cmp	r3, #1
 8006f9c:	d122      	bne.n	8006fe4 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8006f9e:	697b      	ldr	r3, [r7, #20]
 8006fa0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	431a      	orrs	r2, r3
 8006fa8:	697b      	ldr	r3, [r7, #20]
 8006faa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	685b      	ldr	r3, [r3, #4]
 8006fb8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006fba:	683a      	ldr	r2, [r7, #0]
 8006fbc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8006fbe:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006fc0:	697b      	ldr	r3, [r7, #20]
 8006fc2:	3248      	adds	r2, #72	; 0x48
 8006fc4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	689b      	ldr	r3, [r3, #8]
 8006fcc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	68db      	ldr	r3, [r3, #12]
 8006fd2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8006fd8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8006fda:	6979      	ldr	r1, [r7, #20]
 8006fdc:	3348      	adds	r3, #72	; 0x48
 8006fde:	00db      	lsls	r3, r3, #3
 8006fe0:	440b      	add	r3, r1
 8006fe2:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	699b      	ldr	r3, [r3, #24]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d109      	bne.n	8007000 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8006fec:	697b      	ldr	r3, [r7, #20]
 8006fee:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	43db      	mvns	r3, r3
 8006ff6:	401a      	ands	r2, r3
 8006ff8:	697b      	ldr	r3, [r7, #20]
 8006ffa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8006ffe:	e007      	b.n	8007010 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8007000:	697b      	ldr	r3, [r7, #20]
 8007002:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	431a      	orrs	r2, r3
 800700a:	697b      	ldr	r3, [r7, #20]
 800700c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	691b      	ldr	r3, [r3, #16]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d109      	bne.n	800702c <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8007018:	697b      	ldr	r3, [r7, #20]
 800701a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	43db      	mvns	r3, r3
 8007022:	401a      	ands	r2, r3
 8007024:	697b      	ldr	r3, [r7, #20]
 8007026:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800702a:	e007      	b.n	800703c <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	431a      	orrs	r2, r3
 8007036:	697b      	ldr	r3, [r7, #20]
 8007038:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	6a1b      	ldr	r3, [r3, #32]
 8007040:	2b01      	cmp	r3, #1
 8007042:	d107      	bne.n	8007054 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8007044:	697b      	ldr	r3, [r7, #20]
 8007046:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	431a      	orrs	r2, r3
 800704e:	697b      	ldr	r3, [r7, #20]
 8007050:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8007054:	697b      	ldr	r3, [r7, #20]
 8007056:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800705a:	f023 0201 	bic.w	r2, r3, #1
 800705e:	697b      	ldr	r3, [r7, #20]
 8007060:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8007064:	2300      	movs	r3, #0
 8007066:	e006      	b.n	8007076 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800706c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007074:	2301      	movs	r3, #1
  }
}
 8007076:	4618      	mov	r0, r3
 8007078:	371c      	adds	r7, #28
 800707a:	46bd      	mov	sp, r7
 800707c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007080:	4770      	bx	lr

08007082 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8007082:	b580      	push	{r7, lr}
 8007084:	b084      	sub	sp, #16
 8007086:	af00      	add	r7, sp, #0
 8007088:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007090:	b2db      	uxtb	r3, r3
 8007092:	2b01      	cmp	r3, #1
 8007094:	d12e      	bne.n	80070f4 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2202      	movs	r2, #2
 800709a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	681a      	ldr	r2, [r3, #0]
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f022 0201 	bic.w	r2, r2, #1
 80070ac:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80070ae:	f7fe f87f 	bl	80051b0 <HAL_GetTick>
 80070b2:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80070b4:	e012      	b.n	80070dc <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80070b6:	f7fe f87b 	bl	80051b0 <HAL_GetTick>
 80070ba:	4602      	mov	r2, r0
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	1ad3      	subs	r3, r2, r3
 80070c0:	2b0a      	cmp	r3, #10
 80070c2:	d90b      	bls.n	80070dc <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070c8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2205      	movs	r2, #5
 80070d4:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80070d8:	2301      	movs	r3, #1
 80070da:	e012      	b.n	8007102 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	685b      	ldr	r3, [r3, #4]
 80070e2:	f003 0301 	and.w	r3, r3, #1
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d1e5      	bne.n	80070b6 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2200      	movs	r2, #0
 80070ee:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80070f0:	2300      	movs	r3, #0
 80070f2:	e006      	b.n	8007102 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070f8:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007100:	2301      	movs	r3, #1
  }
}
 8007102:	4618      	mov	r0, r3
 8007104:	3710      	adds	r7, #16
 8007106:	46bd      	mov	sp, r7
 8007108:	bd80      	pop	{r7, pc}

0800710a <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800710a:	b480      	push	{r7}
 800710c:	b089      	sub	sp, #36	; 0x24
 800710e:	af00      	add	r7, sp, #0
 8007110:	60f8      	str	r0, [r7, #12]
 8007112:	60b9      	str	r1, [r7, #8]
 8007114:	607a      	str	r2, [r7, #4]
 8007116:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800711e:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	689b      	ldr	r3, [r3, #8]
 8007126:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8007128:	7ffb      	ldrb	r3, [r7, #31]
 800712a:	2b01      	cmp	r3, #1
 800712c:	d003      	beq.n	8007136 <HAL_CAN_AddTxMessage+0x2c>
 800712e:	7ffb      	ldrb	r3, [r7, #31]
 8007130:	2b02      	cmp	r3, #2
 8007132:	f040 80ad 	bne.w	8007290 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8007136:	69bb      	ldr	r3, [r7, #24]
 8007138:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800713c:	2b00      	cmp	r3, #0
 800713e:	d10a      	bne.n	8007156 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8007140:	69bb      	ldr	r3, [r7, #24]
 8007142:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8007146:	2b00      	cmp	r3, #0
 8007148:	d105      	bne.n	8007156 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800714a:	69bb      	ldr	r3, [r7, #24]
 800714c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8007150:	2b00      	cmp	r3, #0
 8007152:	f000 8095 	beq.w	8007280 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8007156:	69bb      	ldr	r3, [r7, #24]
 8007158:	0e1b      	lsrs	r3, r3, #24
 800715a:	f003 0303 	and.w	r3, r3, #3
 800715e:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8007160:	2201      	movs	r2, #1
 8007162:	697b      	ldr	r3, [r7, #20]
 8007164:	409a      	lsls	r2, r3
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800716a:	68bb      	ldr	r3, [r7, #8]
 800716c:	689b      	ldr	r3, [r3, #8]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d10d      	bne.n	800718e <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800717c:	68f9      	ldr	r1, [r7, #12]
 800717e:	6809      	ldr	r1, [r1, #0]
 8007180:	431a      	orrs	r2, r3
 8007182:	697b      	ldr	r3, [r7, #20]
 8007184:	3318      	adds	r3, #24
 8007186:	011b      	lsls	r3, r3, #4
 8007188:	440b      	add	r3, r1
 800718a:	601a      	str	r2, [r3, #0]
 800718c:	e00f      	b.n	80071ae <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	685b      	ldr	r3, [r3, #4]
 8007192:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007198:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800719a:	68bb      	ldr	r3, [r7, #8]
 800719c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800719e:	68f9      	ldr	r1, [r7, #12]
 80071a0:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80071a2:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80071a4:	697b      	ldr	r3, [r7, #20]
 80071a6:	3318      	adds	r3, #24
 80071a8:	011b      	lsls	r3, r3, #4
 80071aa:	440b      	add	r3, r1
 80071ac:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	6819      	ldr	r1, [r3, #0]
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	691a      	ldr	r2, [r3, #16]
 80071b6:	697b      	ldr	r3, [r7, #20]
 80071b8:	3318      	adds	r3, #24
 80071ba:	011b      	lsls	r3, r3, #4
 80071bc:	440b      	add	r3, r1
 80071be:	3304      	adds	r3, #4
 80071c0:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	7d1b      	ldrb	r3, [r3, #20]
 80071c6:	2b01      	cmp	r3, #1
 80071c8:	d111      	bne.n	80071ee <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681a      	ldr	r2, [r3, #0]
 80071ce:	697b      	ldr	r3, [r7, #20]
 80071d0:	3318      	adds	r3, #24
 80071d2:	011b      	lsls	r3, r3, #4
 80071d4:	4413      	add	r3, r2
 80071d6:	3304      	adds	r3, #4
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	68fa      	ldr	r2, [r7, #12]
 80071dc:	6811      	ldr	r1, [r2, #0]
 80071de:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80071e2:	697b      	ldr	r3, [r7, #20]
 80071e4:	3318      	adds	r3, #24
 80071e6:	011b      	lsls	r3, r3, #4
 80071e8:	440b      	add	r3, r1
 80071ea:	3304      	adds	r3, #4
 80071ec:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	3307      	adds	r3, #7
 80071f2:	781b      	ldrb	r3, [r3, #0]
 80071f4:	061a      	lsls	r2, r3, #24
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	3306      	adds	r3, #6
 80071fa:	781b      	ldrb	r3, [r3, #0]
 80071fc:	041b      	lsls	r3, r3, #16
 80071fe:	431a      	orrs	r2, r3
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	3305      	adds	r3, #5
 8007204:	781b      	ldrb	r3, [r3, #0]
 8007206:	021b      	lsls	r3, r3, #8
 8007208:	4313      	orrs	r3, r2
 800720a:	687a      	ldr	r2, [r7, #4]
 800720c:	3204      	adds	r2, #4
 800720e:	7812      	ldrb	r2, [r2, #0]
 8007210:	4610      	mov	r0, r2
 8007212:	68fa      	ldr	r2, [r7, #12]
 8007214:	6811      	ldr	r1, [r2, #0]
 8007216:	ea43 0200 	orr.w	r2, r3, r0
 800721a:	697b      	ldr	r3, [r7, #20]
 800721c:	011b      	lsls	r3, r3, #4
 800721e:	440b      	add	r3, r1
 8007220:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8007224:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	3303      	adds	r3, #3
 800722a:	781b      	ldrb	r3, [r3, #0]
 800722c:	061a      	lsls	r2, r3, #24
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	3302      	adds	r3, #2
 8007232:	781b      	ldrb	r3, [r3, #0]
 8007234:	041b      	lsls	r3, r3, #16
 8007236:	431a      	orrs	r2, r3
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	3301      	adds	r3, #1
 800723c:	781b      	ldrb	r3, [r3, #0]
 800723e:	021b      	lsls	r3, r3, #8
 8007240:	4313      	orrs	r3, r2
 8007242:	687a      	ldr	r2, [r7, #4]
 8007244:	7812      	ldrb	r2, [r2, #0]
 8007246:	4610      	mov	r0, r2
 8007248:	68fa      	ldr	r2, [r7, #12]
 800724a:	6811      	ldr	r1, [r2, #0]
 800724c:	ea43 0200 	orr.w	r2, r3, r0
 8007250:	697b      	ldr	r3, [r7, #20]
 8007252:	011b      	lsls	r3, r3, #4
 8007254:	440b      	add	r3, r1
 8007256:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800725a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681a      	ldr	r2, [r3, #0]
 8007260:	697b      	ldr	r3, [r7, #20]
 8007262:	3318      	adds	r3, #24
 8007264:	011b      	lsls	r3, r3, #4
 8007266:	4413      	add	r3, r2
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	68fa      	ldr	r2, [r7, #12]
 800726c:	6811      	ldr	r1, [r2, #0]
 800726e:	f043 0201 	orr.w	r2, r3, #1
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	3318      	adds	r3, #24
 8007276:	011b      	lsls	r3, r3, #4
 8007278:	440b      	add	r3, r1
 800727a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800727c:	2300      	movs	r3, #0
 800727e:	e00e      	b.n	800729e <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007284:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800728c:	2301      	movs	r3, #1
 800728e:	e006      	b.n	800729e <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007294:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800729c:	2301      	movs	r3, #1
  }
}
 800729e:	4618      	mov	r0, r3
 80072a0:	3724      	adds	r7, #36	; 0x24
 80072a2:	46bd      	mov	sp, r7
 80072a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a8:	4770      	bx	lr

080072aa <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80072aa:	b480      	push	{r7}
 80072ac:	b087      	sub	sp, #28
 80072ae:	af00      	add	r7, sp, #0
 80072b0:	60f8      	str	r0, [r7, #12]
 80072b2:	60b9      	str	r1, [r7, #8]
 80072b4:	607a      	str	r2, [r7, #4]
 80072b6:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80072be:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80072c0:	7dfb      	ldrb	r3, [r7, #23]
 80072c2:	2b01      	cmp	r3, #1
 80072c4:	d003      	beq.n	80072ce <HAL_CAN_GetRxMessage+0x24>
 80072c6:	7dfb      	ldrb	r3, [r7, #23]
 80072c8:	2b02      	cmp	r3, #2
 80072ca:	f040 80f3 	bne.w	80074b4 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80072ce:	68bb      	ldr	r3, [r7, #8]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d10e      	bne.n	80072f2 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	68db      	ldr	r3, [r3, #12]
 80072da:	f003 0303 	and.w	r3, r3, #3
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d116      	bne.n	8007310 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072e6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80072ee:	2301      	movs	r3, #1
 80072f0:	e0e7      	b.n	80074c2 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	691b      	ldr	r3, [r3, #16]
 80072f8:	f003 0303 	and.w	r3, r3, #3
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d107      	bne.n	8007310 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007304:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800730c:	2301      	movs	r3, #1
 800730e:	e0d8      	b.n	80074c2 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	681a      	ldr	r2, [r3, #0]
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	331b      	adds	r3, #27
 8007318:	011b      	lsls	r3, r3, #4
 800731a:	4413      	add	r3, r2
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f003 0204 	and.w	r2, r3, #4
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	689b      	ldr	r3, [r3, #8]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d10c      	bne.n	8007348 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681a      	ldr	r2, [r3, #0]
 8007332:	68bb      	ldr	r3, [r7, #8]
 8007334:	331b      	adds	r3, #27
 8007336:	011b      	lsls	r3, r3, #4
 8007338:	4413      	add	r3, r2
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	0d5b      	lsrs	r3, r3, #21
 800733e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	601a      	str	r2, [r3, #0]
 8007346:	e00b      	b.n	8007360 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	681a      	ldr	r2, [r3, #0]
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	331b      	adds	r3, #27
 8007350:	011b      	lsls	r3, r3, #4
 8007352:	4413      	add	r3, r2
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	08db      	lsrs	r3, r3, #3
 8007358:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681a      	ldr	r2, [r3, #0]
 8007364:	68bb      	ldr	r3, [r7, #8]
 8007366:	331b      	adds	r3, #27
 8007368:	011b      	lsls	r3, r3, #4
 800736a:	4413      	add	r3, r2
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f003 0202 	and.w	r2, r3, #2
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681a      	ldr	r2, [r3, #0]
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	331b      	adds	r3, #27
 800737e:	011b      	lsls	r3, r3, #4
 8007380:	4413      	add	r3, r2
 8007382:	3304      	adds	r3, #4
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f003 020f 	and.w	r2, r3, #15
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681a      	ldr	r2, [r3, #0]
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	331b      	adds	r3, #27
 8007396:	011b      	lsls	r3, r3, #4
 8007398:	4413      	add	r3, r2
 800739a:	3304      	adds	r3, #4
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	0a1b      	lsrs	r3, r3, #8
 80073a0:	b2da      	uxtb	r2, r3
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681a      	ldr	r2, [r3, #0]
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	331b      	adds	r3, #27
 80073ae:	011b      	lsls	r3, r3, #4
 80073b0:	4413      	add	r3, r2
 80073b2:	3304      	adds	r3, #4
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	0c1b      	lsrs	r3, r3, #16
 80073b8:	b29a      	uxth	r2, r3
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681a      	ldr	r2, [r3, #0]
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	011b      	lsls	r3, r3, #4
 80073c6:	4413      	add	r3, r2
 80073c8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	b2da      	uxtb	r2, r3
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	681a      	ldr	r2, [r3, #0]
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	011b      	lsls	r3, r3, #4
 80073dc:	4413      	add	r3, r2
 80073de:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	0a1a      	lsrs	r2, r3, #8
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	3301      	adds	r3, #1
 80073ea:	b2d2      	uxtb	r2, r2
 80073ec:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681a      	ldr	r2, [r3, #0]
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	011b      	lsls	r3, r3, #4
 80073f6:	4413      	add	r3, r2
 80073f8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	0c1a      	lsrs	r2, r3, #16
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	3302      	adds	r3, #2
 8007404:	b2d2      	uxtb	r2, r2
 8007406:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681a      	ldr	r2, [r3, #0]
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	011b      	lsls	r3, r3, #4
 8007410:	4413      	add	r3, r2
 8007412:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	0e1a      	lsrs	r2, r3, #24
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	3303      	adds	r3, #3
 800741e:	b2d2      	uxtb	r2, r2
 8007420:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	681a      	ldr	r2, [r3, #0]
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	011b      	lsls	r3, r3, #4
 800742a:	4413      	add	r3, r2
 800742c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8007430:	681a      	ldr	r2, [r3, #0]
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	3304      	adds	r3, #4
 8007436:	b2d2      	uxtb	r2, r2
 8007438:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681a      	ldr	r2, [r3, #0]
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	011b      	lsls	r3, r3, #4
 8007442:	4413      	add	r3, r2
 8007444:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	0a1a      	lsrs	r2, r3, #8
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	3305      	adds	r3, #5
 8007450:	b2d2      	uxtb	r2, r2
 8007452:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681a      	ldr	r2, [r3, #0]
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	011b      	lsls	r3, r3, #4
 800745c:	4413      	add	r3, r2
 800745e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	0c1a      	lsrs	r2, r3, #16
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	3306      	adds	r3, #6
 800746a:	b2d2      	uxtb	r2, r2
 800746c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681a      	ldr	r2, [r3, #0]
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	011b      	lsls	r3, r3, #4
 8007476:	4413      	add	r3, r2
 8007478:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	0e1a      	lsrs	r2, r3, #24
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	3307      	adds	r3, #7
 8007484:	b2d2      	uxtb	r2, r2
 8007486:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d108      	bne.n	80074a0 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	68da      	ldr	r2, [r3, #12]
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f042 0220 	orr.w	r2, r2, #32
 800749c:	60da      	str	r2, [r3, #12]
 800749e:	e007      	b.n	80074b0 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	691a      	ldr	r2, [r3, #16]
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f042 0220 	orr.w	r2, r2, #32
 80074ae:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80074b0:	2300      	movs	r3, #0
 80074b2:	e006      	b.n	80074c2 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074b8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80074c0:	2301      	movs	r3, #1
  }
}
 80074c2:	4618      	mov	r0, r3
 80074c4:	371c      	adds	r7, #28
 80074c6:	46bd      	mov	sp, r7
 80074c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074cc:	4770      	bx	lr

080074ce <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80074ce:	b480      	push	{r7}
 80074d0:	b085      	sub	sp, #20
 80074d2:	af00      	add	r7, sp, #0
 80074d4:	6078      	str	r0, [r7, #4]
 80074d6:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80074de:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80074e0:	7bfb      	ldrb	r3, [r7, #15]
 80074e2:	2b01      	cmp	r3, #1
 80074e4:	d002      	beq.n	80074ec <HAL_CAN_ActivateNotification+0x1e>
 80074e6:	7bfb      	ldrb	r3, [r7, #15]
 80074e8:	2b02      	cmp	r3, #2
 80074ea:	d109      	bne.n	8007500 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	6959      	ldr	r1, [r3, #20]
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	683a      	ldr	r2, [r7, #0]
 80074f8:	430a      	orrs	r2, r1
 80074fa:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80074fc:	2300      	movs	r3, #0
 80074fe:	e006      	b.n	800750e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007504:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800750c:	2301      	movs	r3, #1
  }
}
 800750e:	4618      	mov	r0, r3
 8007510:	3714      	adds	r7, #20
 8007512:	46bd      	mov	sp, r7
 8007514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007518:	4770      	bx	lr

0800751a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800751a:	b580      	push	{r7, lr}
 800751c:	b08a      	sub	sp, #40	; 0x28
 800751e:	af00      	add	r7, sp, #0
 8007520:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8007522:	2300      	movs	r3, #0
 8007524:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	695b      	ldr	r3, [r3, #20]
 800752c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	685b      	ldr	r3, [r3, #4]
 8007534:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	689b      	ldr	r3, [r3, #8]
 800753c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	68db      	ldr	r3, [r3, #12]
 8007544:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	691b      	ldr	r3, [r3, #16]
 800754c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	699b      	ldr	r3, [r3, #24]
 8007554:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8007556:	6a3b      	ldr	r3, [r7, #32]
 8007558:	f003 0301 	and.w	r3, r3, #1
 800755c:	2b00      	cmp	r3, #0
 800755e:	d07c      	beq.n	800765a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8007560:	69bb      	ldr	r3, [r7, #24]
 8007562:	f003 0301 	and.w	r3, r3, #1
 8007566:	2b00      	cmp	r3, #0
 8007568:	d023      	beq.n	80075b2 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	2201      	movs	r2, #1
 8007570:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8007572:	69bb      	ldr	r3, [r7, #24]
 8007574:	f003 0302 	and.w	r3, r3, #2
 8007578:	2b00      	cmp	r3, #0
 800757a:	d003      	beq.n	8007584 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800757c:	6878      	ldr	r0, [r7, #4]
 800757e:	f000 f983 	bl	8007888 <HAL_CAN_TxMailbox0CompleteCallback>
 8007582:	e016      	b.n	80075b2 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8007584:	69bb      	ldr	r3, [r7, #24]
 8007586:	f003 0304 	and.w	r3, r3, #4
 800758a:	2b00      	cmp	r3, #0
 800758c:	d004      	beq.n	8007598 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800758e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007590:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007594:	627b      	str	r3, [r7, #36]	; 0x24
 8007596:	e00c      	b.n	80075b2 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8007598:	69bb      	ldr	r3, [r7, #24]
 800759a:	f003 0308 	and.w	r3, r3, #8
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d004      	beq.n	80075ac <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80075a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075a4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80075a8:	627b      	str	r3, [r7, #36]	; 0x24
 80075aa:	e002      	b.n	80075b2 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	f000 f989 	bl	80078c4 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80075b2:	69bb      	ldr	r3, [r7, #24]
 80075b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d024      	beq.n	8007606 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80075c4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80075c6:	69bb      	ldr	r3, [r7, #24]
 80075c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d003      	beq.n	80075d8 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	f000 f963 	bl	800789c <HAL_CAN_TxMailbox1CompleteCallback>
 80075d6:	e016      	b.n	8007606 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80075d8:	69bb      	ldr	r3, [r7, #24]
 80075da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d004      	beq.n	80075ec <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80075e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075e4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80075e8:	627b      	str	r3, [r7, #36]	; 0x24
 80075ea:	e00c      	b.n	8007606 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80075ec:	69bb      	ldr	r3, [r7, #24]
 80075ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d004      	beq.n	8007600 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80075f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80075fc:	627b      	str	r3, [r7, #36]	; 0x24
 80075fe:	e002      	b.n	8007606 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8007600:	6878      	ldr	r0, [r7, #4]
 8007602:	f000 f969 	bl	80078d8 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8007606:	69bb      	ldr	r3, [r7, #24]
 8007608:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800760c:	2b00      	cmp	r3, #0
 800760e:	d024      	beq.n	800765a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007618:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800761a:	69bb      	ldr	r3, [r7, #24]
 800761c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007620:	2b00      	cmp	r3, #0
 8007622:	d003      	beq.n	800762c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8007624:	6878      	ldr	r0, [r7, #4]
 8007626:	f000 f943 	bl	80078b0 <HAL_CAN_TxMailbox2CompleteCallback>
 800762a:	e016      	b.n	800765a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800762c:	69bb      	ldr	r3, [r7, #24]
 800762e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007632:	2b00      	cmp	r3, #0
 8007634:	d004      	beq.n	8007640 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8007636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007638:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800763c:	627b      	str	r3, [r7, #36]	; 0x24
 800763e:	e00c      	b.n	800765a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8007640:	69bb      	ldr	r3, [r7, #24]
 8007642:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007646:	2b00      	cmp	r3, #0
 8007648:	d004      	beq.n	8007654 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800764a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800764c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007650:	627b      	str	r3, [r7, #36]	; 0x24
 8007652:	e002      	b.n	800765a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	f000 f949 	bl	80078ec <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800765a:	6a3b      	ldr	r3, [r7, #32]
 800765c:	f003 0308 	and.w	r3, r3, #8
 8007660:	2b00      	cmp	r3, #0
 8007662:	d00c      	beq.n	800767e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8007664:	697b      	ldr	r3, [r7, #20]
 8007666:	f003 0310 	and.w	r3, r3, #16
 800766a:	2b00      	cmp	r3, #0
 800766c:	d007      	beq.n	800767e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800766e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007670:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007674:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	2210      	movs	r2, #16
 800767c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800767e:	6a3b      	ldr	r3, [r7, #32]
 8007680:	f003 0304 	and.w	r3, r3, #4
 8007684:	2b00      	cmp	r3, #0
 8007686:	d00b      	beq.n	80076a0 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8007688:	697b      	ldr	r3, [r7, #20]
 800768a:	f003 0308 	and.w	r3, r3, #8
 800768e:	2b00      	cmp	r3, #0
 8007690:	d006      	beq.n	80076a0 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	2208      	movs	r2, #8
 8007698:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	f000 f930 	bl	8007900 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80076a0:	6a3b      	ldr	r3, [r7, #32]
 80076a2:	f003 0302 	and.w	r3, r3, #2
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d009      	beq.n	80076be <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	68db      	ldr	r3, [r3, #12]
 80076b0:	f003 0303 	and.w	r3, r3, #3
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d002      	beq.n	80076be <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80076b8:	6878      	ldr	r0, [r7, #4]
 80076ba:	f7f9 fdab 	bl	8001214 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80076be:	6a3b      	ldr	r3, [r7, #32]
 80076c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d00c      	beq.n	80076e2 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80076c8:	693b      	ldr	r3, [r7, #16]
 80076ca:	f003 0310 	and.w	r3, r3, #16
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d007      	beq.n	80076e2 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80076d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076d4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80076d8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	2210      	movs	r2, #16
 80076e0:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80076e2:	6a3b      	ldr	r3, [r7, #32]
 80076e4:	f003 0320 	and.w	r3, r3, #32
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d00b      	beq.n	8007704 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80076ec:	693b      	ldr	r3, [r7, #16]
 80076ee:	f003 0308 	and.w	r3, r3, #8
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d006      	beq.n	8007704 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	2208      	movs	r2, #8
 80076fc:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	f000 f912 	bl	8007928 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8007704:	6a3b      	ldr	r3, [r7, #32]
 8007706:	f003 0310 	and.w	r3, r3, #16
 800770a:	2b00      	cmp	r3, #0
 800770c:	d009      	beq.n	8007722 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	691b      	ldr	r3, [r3, #16]
 8007714:	f003 0303 	and.w	r3, r3, #3
 8007718:	2b00      	cmp	r3, #0
 800771a:	d002      	beq.n	8007722 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	f000 f8f9 	bl	8007914 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8007722:	6a3b      	ldr	r3, [r7, #32]
 8007724:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007728:	2b00      	cmp	r3, #0
 800772a:	d00b      	beq.n	8007744 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800772c:	69fb      	ldr	r3, [r7, #28]
 800772e:	f003 0310 	and.w	r3, r3, #16
 8007732:	2b00      	cmp	r3, #0
 8007734:	d006      	beq.n	8007744 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	2210      	movs	r2, #16
 800773c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	f000 f8fc 	bl	800793c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8007744:	6a3b      	ldr	r3, [r7, #32]
 8007746:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800774a:	2b00      	cmp	r3, #0
 800774c:	d00b      	beq.n	8007766 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800774e:	69fb      	ldr	r3, [r7, #28]
 8007750:	f003 0308 	and.w	r3, r3, #8
 8007754:	2b00      	cmp	r3, #0
 8007756:	d006      	beq.n	8007766 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	2208      	movs	r2, #8
 800775e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8007760:	6878      	ldr	r0, [r7, #4]
 8007762:	f000 f8f5 	bl	8007950 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8007766:	6a3b      	ldr	r3, [r7, #32]
 8007768:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800776c:	2b00      	cmp	r3, #0
 800776e:	d07b      	beq.n	8007868 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8007770:	69fb      	ldr	r3, [r7, #28]
 8007772:	f003 0304 	and.w	r3, r3, #4
 8007776:	2b00      	cmp	r3, #0
 8007778:	d072      	beq.n	8007860 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800777a:	6a3b      	ldr	r3, [r7, #32]
 800777c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007780:	2b00      	cmp	r3, #0
 8007782:	d008      	beq.n	8007796 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800778a:	2b00      	cmp	r3, #0
 800778c:	d003      	beq.n	8007796 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800778e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007790:	f043 0301 	orr.w	r3, r3, #1
 8007794:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8007796:	6a3b      	ldr	r3, [r7, #32]
 8007798:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800779c:	2b00      	cmp	r3, #0
 800779e:	d008      	beq.n	80077b2 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d003      	beq.n	80077b2 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80077aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ac:	f043 0302 	orr.w	r3, r3, #2
 80077b0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80077b2:	6a3b      	ldr	r3, [r7, #32]
 80077b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d008      	beq.n	80077ce <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d003      	beq.n	80077ce <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80077c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077c8:	f043 0304 	orr.w	r3, r3, #4
 80077cc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80077ce:	6a3b      	ldr	r3, [r7, #32]
 80077d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d043      	beq.n	8007860 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d03e      	beq.n	8007860 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80077e8:	2b60      	cmp	r3, #96	; 0x60
 80077ea:	d02b      	beq.n	8007844 <HAL_CAN_IRQHandler+0x32a>
 80077ec:	2b60      	cmp	r3, #96	; 0x60
 80077ee:	d82e      	bhi.n	800784e <HAL_CAN_IRQHandler+0x334>
 80077f0:	2b50      	cmp	r3, #80	; 0x50
 80077f2:	d022      	beq.n	800783a <HAL_CAN_IRQHandler+0x320>
 80077f4:	2b50      	cmp	r3, #80	; 0x50
 80077f6:	d82a      	bhi.n	800784e <HAL_CAN_IRQHandler+0x334>
 80077f8:	2b40      	cmp	r3, #64	; 0x40
 80077fa:	d019      	beq.n	8007830 <HAL_CAN_IRQHandler+0x316>
 80077fc:	2b40      	cmp	r3, #64	; 0x40
 80077fe:	d826      	bhi.n	800784e <HAL_CAN_IRQHandler+0x334>
 8007800:	2b30      	cmp	r3, #48	; 0x30
 8007802:	d010      	beq.n	8007826 <HAL_CAN_IRQHandler+0x30c>
 8007804:	2b30      	cmp	r3, #48	; 0x30
 8007806:	d822      	bhi.n	800784e <HAL_CAN_IRQHandler+0x334>
 8007808:	2b10      	cmp	r3, #16
 800780a:	d002      	beq.n	8007812 <HAL_CAN_IRQHandler+0x2f8>
 800780c:	2b20      	cmp	r3, #32
 800780e:	d005      	beq.n	800781c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8007810:	e01d      	b.n	800784e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8007812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007814:	f043 0308 	orr.w	r3, r3, #8
 8007818:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800781a:	e019      	b.n	8007850 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800781c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800781e:	f043 0310 	orr.w	r3, r3, #16
 8007822:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007824:	e014      	b.n	8007850 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8007826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007828:	f043 0320 	orr.w	r3, r3, #32
 800782c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800782e:	e00f      	b.n	8007850 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8007830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007832:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007836:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007838:	e00a      	b.n	8007850 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800783a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800783c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007840:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007842:	e005      	b.n	8007850 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8007844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007846:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800784a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800784c:	e000      	b.n	8007850 <HAL_CAN_IRQHandler+0x336>
            break;
 800784e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	699a      	ldr	r2, [r3, #24]
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800785e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	2204      	movs	r2, #4
 8007866:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8007868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800786a:	2b00      	cmp	r3, #0
 800786c:	d008      	beq.n	8007880 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007874:	431a      	orrs	r2, r3
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f000 f872 	bl	8007964 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8007880:	bf00      	nop
 8007882:	3728      	adds	r7, #40	; 0x28
 8007884:	46bd      	mov	sp, r7
 8007886:	bd80      	pop	{r7, pc}

08007888 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8007888:	b480      	push	{r7}
 800788a:	b083      	sub	sp, #12
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8007890:	bf00      	nop
 8007892:	370c      	adds	r7, #12
 8007894:	46bd      	mov	sp, r7
 8007896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789a:	4770      	bx	lr

0800789c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800789c:	b480      	push	{r7}
 800789e:	b083      	sub	sp, #12
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80078a4:	bf00      	nop
 80078a6:	370c      	adds	r7, #12
 80078a8:	46bd      	mov	sp, r7
 80078aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ae:	4770      	bx	lr

080078b0 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80078b0:	b480      	push	{r7}
 80078b2:	b083      	sub	sp, #12
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80078b8:	bf00      	nop
 80078ba:	370c      	adds	r7, #12
 80078bc:	46bd      	mov	sp, r7
 80078be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c2:	4770      	bx	lr

080078c4 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80078c4:	b480      	push	{r7}
 80078c6:	b083      	sub	sp, #12
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80078cc:	bf00      	nop
 80078ce:	370c      	adds	r7, #12
 80078d0:	46bd      	mov	sp, r7
 80078d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d6:	4770      	bx	lr

080078d8 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80078d8:	b480      	push	{r7}
 80078da:	b083      	sub	sp, #12
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80078e0:	bf00      	nop
 80078e2:	370c      	adds	r7, #12
 80078e4:	46bd      	mov	sp, r7
 80078e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ea:	4770      	bx	lr

080078ec <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80078ec:	b480      	push	{r7}
 80078ee:	b083      	sub	sp, #12
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80078f4:	bf00      	nop
 80078f6:	370c      	adds	r7, #12
 80078f8:	46bd      	mov	sp, r7
 80078fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fe:	4770      	bx	lr

08007900 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8007900:	b480      	push	{r7}
 8007902:	b083      	sub	sp, #12
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8007908:	bf00      	nop
 800790a:	370c      	adds	r7, #12
 800790c:	46bd      	mov	sp, r7
 800790e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007912:	4770      	bx	lr

08007914 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8007914:	b480      	push	{r7}
 8007916:	b083      	sub	sp, #12
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800791c:	bf00      	nop
 800791e:	370c      	adds	r7, #12
 8007920:	46bd      	mov	sp, r7
 8007922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007926:	4770      	bx	lr

08007928 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8007928:	b480      	push	{r7}
 800792a:	b083      	sub	sp, #12
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8007930:	bf00      	nop
 8007932:	370c      	adds	r7, #12
 8007934:	46bd      	mov	sp, r7
 8007936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793a:	4770      	bx	lr

0800793c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800793c:	b480      	push	{r7}
 800793e:	b083      	sub	sp, #12
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8007944:	bf00      	nop
 8007946:	370c      	adds	r7, #12
 8007948:	46bd      	mov	sp, r7
 800794a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794e:	4770      	bx	lr

08007950 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8007950:	b480      	push	{r7}
 8007952:	b083      	sub	sp, #12
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8007958:	bf00      	nop
 800795a:	370c      	adds	r7, #12
 800795c:	46bd      	mov	sp, r7
 800795e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007962:	4770      	bx	lr

08007964 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8007964:	b480      	push	{r7}
 8007966:	b083      	sub	sp, #12
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800796c:	bf00      	nop
 800796e:	370c      	adds	r7, #12
 8007970:	46bd      	mov	sp, r7
 8007972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007976:	4770      	bx	lr

08007978 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007978:	b480      	push	{r7}
 800797a:	b085      	sub	sp, #20
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	f003 0307 	and.w	r3, r3, #7
 8007986:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007988:	4b0c      	ldr	r3, [pc, #48]	; (80079bc <__NVIC_SetPriorityGrouping+0x44>)
 800798a:	68db      	ldr	r3, [r3, #12]
 800798c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800798e:	68ba      	ldr	r2, [r7, #8]
 8007990:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007994:	4013      	ands	r3, r2
 8007996:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80079a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80079a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80079a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80079aa:	4a04      	ldr	r2, [pc, #16]	; (80079bc <__NVIC_SetPriorityGrouping+0x44>)
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	60d3      	str	r3, [r2, #12]
}
 80079b0:	bf00      	nop
 80079b2:	3714      	adds	r7, #20
 80079b4:	46bd      	mov	sp, r7
 80079b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ba:	4770      	bx	lr
 80079bc:	e000ed00 	.word	0xe000ed00

080079c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80079c0:	b480      	push	{r7}
 80079c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80079c4:	4b04      	ldr	r3, [pc, #16]	; (80079d8 <__NVIC_GetPriorityGrouping+0x18>)
 80079c6:	68db      	ldr	r3, [r3, #12]
 80079c8:	0a1b      	lsrs	r3, r3, #8
 80079ca:	f003 0307 	and.w	r3, r3, #7
}
 80079ce:	4618      	mov	r0, r3
 80079d0:	46bd      	mov	sp, r7
 80079d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d6:	4770      	bx	lr
 80079d8:	e000ed00 	.word	0xe000ed00

080079dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80079dc:	b480      	push	{r7}
 80079de:	b083      	sub	sp, #12
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	4603      	mov	r3, r0
 80079e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80079e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	db0b      	blt.n	8007a06 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80079ee:	79fb      	ldrb	r3, [r7, #7]
 80079f0:	f003 021f 	and.w	r2, r3, #31
 80079f4:	4907      	ldr	r1, [pc, #28]	; (8007a14 <__NVIC_EnableIRQ+0x38>)
 80079f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80079fa:	095b      	lsrs	r3, r3, #5
 80079fc:	2001      	movs	r0, #1
 80079fe:	fa00 f202 	lsl.w	r2, r0, r2
 8007a02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8007a06:	bf00      	nop
 8007a08:	370c      	adds	r7, #12
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a10:	4770      	bx	lr
 8007a12:	bf00      	nop
 8007a14:	e000e100 	.word	0xe000e100

08007a18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b083      	sub	sp, #12
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	4603      	mov	r3, r0
 8007a20:	6039      	str	r1, [r7, #0]
 8007a22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007a24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	db0a      	blt.n	8007a42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	b2da      	uxtb	r2, r3
 8007a30:	490c      	ldr	r1, [pc, #48]	; (8007a64 <__NVIC_SetPriority+0x4c>)
 8007a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a36:	0112      	lsls	r2, r2, #4
 8007a38:	b2d2      	uxtb	r2, r2
 8007a3a:	440b      	add	r3, r1
 8007a3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007a40:	e00a      	b.n	8007a58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	b2da      	uxtb	r2, r3
 8007a46:	4908      	ldr	r1, [pc, #32]	; (8007a68 <__NVIC_SetPriority+0x50>)
 8007a48:	79fb      	ldrb	r3, [r7, #7]
 8007a4a:	f003 030f 	and.w	r3, r3, #15
 8007a4e:	3b04      	subs	r3, #4
 8007a50:	0112      	lsls	r2, r2, #4
 8007a52:	b2d2      	uxtb	r2, r2
 8007a54:	440b      	add	r3, r1
 8007a56:	761a      	strb	r2, [r3, #24]
}
 8007a58:	bf00      	nop
 8007a5a:	370c      	adds	r7, #12
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a62:	4770      	bx	lr
 8007a64:	e000e100 	.word	0xe000e100
 8007a68:	e000ed00 	.word	0xe000ed00

08007a6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007a6c:	b480      	push	{r7}
 8007a6e:	b089      	sub	sp, #36	; 0x24
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	60f8      	str	r0, [r7, #12]
 8007a74:	60b9      	str	r1, [r7, #8]
 8007a76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	f003 0307 	and.w	r3, r3, #7
 8007a7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007a80:	69fb      	ldr	r3, [r7, #28]
 8007a82:	f1c3 0307 	rsb	r3, r3, #7
 8007a86:	2b04      	cmp	r3, #4
 8007a88:	bf28      	it	cs
 8007a8a:	2304      	movcs	r3, #4
 8007a8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007a8e:	69fb      	ldr	r3, [r7, #28]
 8007a90:	3304      	adds	r3, #4
 8007a92:	2b06      	cmp	r3, #6
 8007a94:	d902      	bls.n	8007a9c <NVIC_EncodePriority+0x30>
 8007a96:	69fb      	ldr	r3, [r7, #28]
 8007a98:	3b03      	subs	r3, #3
 8007a9a:	e000      	b.n	8007a9e <NVIC_EncodePriority+0x32>
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007aa0:	f04f 32ff 	mov.w	r2, #4294967295
 8007aa4:	69bb      	ldr	r3, [r7, #24]
 8007aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8007aaa:	43da      	mvns	r2, r3
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	401a      	ands	r2, r3
 8007ab0:	697b      	ldr	r3, [r7, #20]
 8007ab2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007ab4:	f04f 31ff 	mov.w	r1, #4294967295
 8007ab8:	697b      	ldr	r3, [r7, #20]
 8007aba:	fa01 f303 	lsl.w	r3, r1, r3
 8007abe:	43d9      	mvns	r1, r3
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007ac4:	4313      	orrs	r3, r2
         );
}
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	3724      	adds	r7, #36	; 0x24
 8007aca:	46bd      	mov	sp, r7
 8007acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad0:	4770      	bx	lr

08007ad2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007ad2:	b580      	push	{r7, lr}
 8007ad4:	b082      	sub	sp, #8
 8007ad6:	af00      	add	r7, sp, #0
 8007ad8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	f7ff ff4c 	bl	8007978 <__NVIC_SetPriorityGrouping>
}
 8007ae0:	bf00      	nop
 8007ae2:	3708      	adds	r7, #8
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	bd80      	pop	{r7, pc}

08007ae8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b086      	sub	sp, #24
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	4603      	mov	r3, r0
 8007af0:	60b9      	str	r1, [r7, #8]
 8007af2:	607a      	str	r2, [r7, #4]
 8007af4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8007af6:	2300      	movs	r3, #0
 8007af8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007afa:	f7ff ff61 	bl	80079c0 <__NVIC_GetPriorityGrouping>
 8007afe:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007b00:	687a      	ldr	r2, [r7, #4]
 8007b02:	68b9      	ldr	r1, [r7, #8]
 8007b04:	6978      	ldr	r0, [r7, #20]
 8007b06:	f7ff ffb1 	bl	8007a6c <NVIC_EncodePriority>
 8007b0a:	4602      	mov	r2, r0
 8007b0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007b10:	4611      	mov	r1, r2
 8007b12:	4618      	mov	r0, r3
 8007b14:	f7ff ff80 	bl	8007a18 <__NVIC_SetPriority>
}
 8007b18:	bf00      	nop
 8007b1a:	3718      	adds	r7, #24
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	bd80      	pop	{r7, pc}

08007b20 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b082      	sub	sp, #8
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	4603      	mov	r3, r0
 8007b28:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b2e:	4618      	mov	r0, r3
 8007b30:	f7ff ff54 	bl	80079dc <__NVIC_EnableIRQ>
}
 8007b34:	bf00      	nop
 8007b36:	3708      	adds	r7, #8
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	bd80      	pop	{r7, pc}

08007b3c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b084      	sub	sp, #16
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d101      	bne.n	8007b4e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8007b4a:	2301      	movs	r3, #1
 8007b4c:	e08d      	b.n	8007c6a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	461a      	mov	r2, r3
 8007b54:	4b47      	ldr	r3, [pc, #284]	; (8007c74 <HAL_DMA_Init+0x138>)
 8007b56:	429a      	cmp	r2, r3
 8007b58:	d80f      	bhi.n	8007b7a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	461a      	mov	r2, r3
 8007b60:	4b45      	ldr	r3, [pc, #276]	; (8007c78 <HAL_DMA_Init+0x13c>)
 8007b62:	4413      	add	r3, r2
 8007b64:	4a45      	ldr	r2, [pc, #276]	; (8007c7c <HAL_DMA_Init+0x140>)
 8007b66:	fba2 2303 	umull	r2, r3, r2, r3
 8007b6a:	091b      	lsrs	r3, r3, #4
 8007b6c:	009a      	lsls	r2, r3, #2
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	4a42      	ldr	r2, [pc, #264]	; (8007c80 <HAL_DMA_Init+0x144>)
 8007b76:	641a      	str	r2, [r3, #64]	; 0x40
 8007b78:	e00e      	b.n	8007b98 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	461a      	mov	r2, r3
 8007b80:	4b40      	ldr	r3, [pc, #256]	; (8007c84 <HAL_DMA_Init+0x148>)
 8007b82:	4413      	add	r3, r2
 8007b84:	4a3d      	ldr	r2, [pc, #244]	; (8007c7c <HAL_DMA_Init+0x140>)
 8007b86:	fba2 2303 	umull	r2, r3, r2, r3
 8007b8a:	091b      	lsrs	r3, r3, #4
 8007b8c:	009a      	lsls	r2, r3, #2
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	4a3c      	ldr	r2, [pc, #240]	; (8007c88 <HAL_DMA_Init+0x14c>)
 8007b96:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2202      	movs	r2, #2
 8007b9c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007bae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bb2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8007bbc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	691b      	ldr	r3, [r3, #16]
 8007bc2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007bc8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	699b      	ldr	r3, [r3, #24]
 8007bce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007bd4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6a1b      	ldr	r3, [r3, #32]
 8007bda:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8007bdc:	68fa      	ldr	r2, [r7, #12]
 8007bde:	4313      	orrs	r3, r2
 8007be0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	68fa      	ldr	r2, [r7, #12]
 8007be8:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	f000 f9b6 	bl	8007f5c <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	689b      	ldr	r3, [r3, #8]
 8007bf4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007bf8:	d102      	bne.n	8007c00 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	685a      	ldr	r2, [r3, #4]
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c08:	b2d2      	uxtb	r2, r2
 8007c0a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c10:	687a      	ldr	r2, [r7, #4]
 8007c12:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007c14:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	685b      	ldr	r3, [r3, #4]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d010      	beq.n	8007c40 <HAL_DMA_Init+0x104>
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	685b      	ldr	r3, [r3, #4]
 8007c22:	2b04      	cmp	r3, #4
 8007c24:	d80c      	bhi.n	8007c40 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8007c26:	6878      	ldr	r0, [r7, #4]
 8007c28:	f000 f9d6 	bl	8007fd8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c30:	2200      	movs	r2, #0
 8007c32:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c38:	687a      	ldr	r2, [r7, #4]
 8007c3a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007c3c:	605a      	str	r2, [r3, #4]
 8007c3e:	e008      	b.n	8007c52 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2200      	movs	r2, #0
 8007c44:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2200      	movs	r2, #0
 8007c4a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2200      	movs	r2, #0
 8007c56:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2201      	movs	r2, #1
 8007c5c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2200      	movs	r2, #0
 8007c64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8007c68:	2300      	movs	r3, #0
}
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	3710      	adds	r7, #16
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	bd80      	pop	{r7, pc}
 8007c72:	bf00      	nop
 8007c74:	40020407 	.word	0x40020407
 8007c78:	bffdfff8 	.word	0xbffdfff8
 8007c7c:	cccccccd 	.word	0xcccccccd
 8007c80:	40020000 	.word	0x40020000
 8007c84:	bffdfbf8 	.word	0xbffdfbf8
 8007c88:	40020400 	.word	0x40020400

08007c8c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b086      	sub	sp, #24
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	60f8      	str	r0, [r7, #12]
 8007c94:	60b9      	str	r1, [r7, #8]
 8007c96:	607a      	str	r2, [r7, #4]
 8007c98:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007ca4:	2b01      	cmp	r3, #1
 8007ca6:	d101      	bne.n	8007cac <HAL_DMA_Start_IT+0x20>
 8007ca8:	2302      	movs	r3, #2
 8007caa:	e066      	b.n	8007d7a <HAL_DMA_Start_IT+0xee>
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	2201      	movs	r2, #1
 8007cb0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007cba:	b2db      	uxtb	r3, r3
 8007cbc:	2b01      	cmp	r3, #1
 8007cbe:	d155      	bne.n	8007d6c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	2202      	movs	r2, #2
 8007cc4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	2200      	movs	r2, #0
 8007ccc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	681a      	ldr	r2, [r3, #0]
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f022 0201 	bic.w	r2, r2, #1
 8007cdc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	687a      	ldr	r2, [r7, #4]
 8007ce2:	68b9      	ldr	r1, [r7, #8]
 8007ce4:	68f8      	ldr	r0, [r7, #12]
 8007ce6:	f000 f8fb 	bl	8007ee0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d008      	beq.n	8007d04 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	681a      	ldr	r2, [r3, #0]
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f042 020e 	orr.w	r2, r2, #14
 8007d00:	601a      	str	r2, [r3, #0]
 8007d02:	e00f      	b.n	8007d24 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	681a      	ldr	r2, [r3, #0]
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f022 0204 	bic.w	r2, r2, #4
 8007d12:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	681a      	ldr	r2, [r3, #0]
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f042 020a 	orr.w	r2, r2, #10
 8007d22:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d007      	beq.n	8007d42 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d36:	681a      	ldr	r2, [r3, #0]
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007d40:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d007      	beq.n	8007d5a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d4e:	681a      	ldr	r2, [r3, #0]
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007d58:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	681a      	ldr	r2, [r3, #0]
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f042 0201 	orr.w	r2, r2, #1
 8007d68:	601a      	str	r2, [r3, #0]
 8007d6a:	e005      	b.n	8007d78 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	2200      	movs	r2, #0
 8007d70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8007d74:	2302      	movs	r3, #2
 8007d76:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8007d78:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	3718      	adds	r7, #24
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	bd80      	pop	{r7, pc}

08007d82 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007d82:	b580      	push	{r7, lr}
 8007d84:	b084      	sub	sp, #16
 8007d86:	af00      	add	r7, sp, #0
 8007d88:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d9e:	f003 031c 	and.w	r3, r3, #28
 8007da2:	2204      	movs	r2, #4
 8007da4:	409a      	lsls	r2, r3
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	4013      	ands	r3, r2
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d026      	beq.n	8007dfc <HAL_DMA_IRQHandler+0x7a>
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	f003 0304 	and.w	r3, r3, #4
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d021      	beq.n	8007dfc <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f003 0320 	and.w	r3, r3, #32
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d107      	bne.n	8007dd6 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	681a      	ldr	r2, [r3, #0]
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f022 0204 	bic.w	r2, r2, #4
 8007dd4:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dda:	f003 021c 	and.w	r2, r3, #28
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007de2:	2104      	movs	r1, #4
 8007de4:	fa01 f202 	lsl.w	r2, r1, r2
 8007de8:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d071      	beq.n	8007ed6 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007df6:	6878      	ldr	r0, [r7, #4]
 8007df8:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8007dfa:	e06c      	b.n	8007ed6 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e00:	f003 031c 	and.w	r3, r3, #28
 8007e04:	2202      	movs	r2, #2
 8007e06:	409a      	lsls	r2, r3
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	4013      	ands	r3, r2
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d02e      	beq.n	8007e6e <HAL_DMA_IRQHandler+0xec>
 8007e10:	68bb      	ldr	r3, [r7, #8]
 8007e12:	f003 0302 	and.w	r3, r3, #2
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d029      	beq.n	8007e6e <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f003 0320 	and.w	r3, r3, #32
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d10b      	bne.n	8007e40 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	681a      	ldr	r2, [r3, #0]
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f022 020a 	bic.w	r2, r2, #10
 8007e36:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2201      	movs	r2, #1
 8007e3c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e44:	f003 021c 	and.w	r2, r3, #28
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e4c:	2102      	movs	r1, #2
 8007e4e:	fa01 f202 	lsl.w	r2, r1, r2
 8007e52:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2200      	movs	r2, #0
 8007e58:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d038      	beq.n	8007ed6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e68:	6878      	ldr	r0, [r7, #4]
 8007e6a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8007e6c:	e033      	b.n	8007ed6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e72:	f003 031c 	and.w	r3, r3, #28
 8007e76:	2208      	movs	r2, #8
 8007e78:	409a      	lsls	r2, r3
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	4013      	ands	r3, r2
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d02a      	beq.n	8007ed8 <HAL_DMA_IRQHandler+0x156>
 8007e82:	68bb      	ldr	r3, [r7, #8]
 8007e84:	f003 0308 	and.w	r3, r3, #8
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d025      	beq.n	8007ed8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	681a      	ldr	r2, [r3, #0]
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f022 020e 	bic.w	r2, r2, #14
 8007e9a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ea0:	f003 021c 	and.w	r2, r3, #28
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ea8:	2101      	movs	r1, #1
 8007eaa:	fa01 f202 	lsl.w	r2, r1, r2
 8007eae:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2201      	movs	r2, #1
 8007eb4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2201      	movs	r2, #1
 8007eba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d004      	beq.n	8007ed8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8007ed6:	bf00      	nop
 8007ed8:	bf00      	nop
}
 8007eda:	3710      	adds	r7, #16
 8007edc:	46bd      	mov	sp, r7
 8007ede:	bd80      	pop	{r7, pc}

08007ee0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007ee0:	b480      	push	{r7}
 8007ee2:	b085      	sub	sp, #20
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	60f8      	str	r0, [r7, #12]
 8007ee8:	60b9      	str	r1, [r7, #8]
 8007eea:	607a      	str	r2, [r7, #4]
 8007eec:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ef2:	68fa      	ldr	r2, [r7, #12]
 8007ef4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007ef6:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d004      	beq.n	8007f0a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f04:	68fa      	ldr	r2, [r7, #12]
 8007f06:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007f08:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f0e:	f003 021c 	and.w	r2, r3, #28
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f16:	2101      	movs	r1, #1
 8007f18:	fa01 f202 	lsl.w	r2, r1, r2
 8007f1c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	683a      	ldr	r2, [r7, #0]
 8007f24:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	689b      	ldr	r3, [r3, #8]
 8007f2a:	2b10      	cmp	r3, #16
 8007f2c:	d108      	bne.n	8007f40 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	687a      	ldr	r2, [r7, #4]
 8007f34:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	68ba      	ldr	r2, [r7, #8]
 8007f3c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8007f3e:	e007      	b.n	8007f50 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	68ba      	ldr	r2, [r7, #8]
 8007f46:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	687a      	ldr	r2, [r7, #4]
 8007f4e:	60da      	str	r2, [r3, #12]
}
 8007f50:	bf00      	nop
 8007f52:	3714      	adds	r7, #20
 8007f54:	46bd      	mov	sp, r7
 8007f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5a:	4770      	bx	lr

08007f5c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007f5c:	b480      	push	{r7}
 8007f5e:	b085      	sub	sp, #20
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	461a      	mov	r2, r3
 8007f6a:	4b17      	ldr	r3, [pc, #92]	; (8007fc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8007f6c:	429a      	cmp	r2, r3
 8007f6e:	d80a      	bhi.n	8007f86 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f74:	089b      	lsrs	r3, r3, #2
 8007f76:	009b      	lsls	r3, r3, #2
 8007f78:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007f7c:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8007f80:	687a      	ldr	r2, [r7, #4]
 8007f82:	6493      	str	r3, [r2, #72]	; 0x48
 8007f84:	e007      	b.n	8007f96 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f8a:	089b      	lsrs	r3, r3, #2
 8007f8c:	009a      	lsls	r2, r3, #2
 8007f8e:	4b0f      	ldr	r3, [pc, #60]	; (8007fcc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8007f90:	4413      	add	r3, r2
 8007f92:	687a      	ldr	r2, [r7, #4]
 8007f94:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	b2db      	uxtb	r3, r3
 8007f9c:	3b08      	subs	r3, #8
 8007f9e:	4a0c      	ldr	r2, [pc, #48]	; (8007fd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8007fa0:	fba2 2303 	umull	r2, r3, r2, r3
 8007fa4:	091b      	lsrs	r3, r3, #4
 8007fa6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	4a0a      	ldr	r2, [pc, #40]	; (8007fd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8007fac:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	f003 031f 	and.w	r3, r3, #31
 8007fb4:	2201      	movs	r2, #1
 8007fb6:	409a      	lsls	r2, r3
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	651a      	str	r2, [r3, #80]	; 0x50
}
 8007fbc:	bf00      	nop
 8007fbe:	3714      	adds	r7, #20
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc6:	4770      	bx	lr
 8007fc8:	40020407 	.word	0x40020407
 8007fcc:	4002081c 	.word	0x4002081c
 8007fd0:	cccccccd 	.word	0xcccccccd
 8007fd4:	40020880 	.word	0x40020880

08007fd8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007fd8:	b480      	push	{r7}
 8007fda:	b085      	sub	sp, #20
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	685b      	ldr	r3, [r3, #4]
 8007fe4:	b2db      	uxtb	r3, r3
 8007fe6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007fe8:	68fa      	ldr	r2, [r7, #12]
 8007fea:	4b0b      	ldr	r3, [pc, #44]	; (8008018 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8007fec:	4413      	add	r3, r2
 8007fee:	009b      	lsls	r3, r3, #2
 8007ff0:	461a      	mov	r2, r3
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	4a08      	ldr	r2, [pc, #32]	; (800801c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8007ffa:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	3b01      	subs	r3, #1
 8008000:	f003 0303 	and.w	r3, r3, #3
 8008004:	2201      	movs	r2, #1
 8008006:	409a      	lsls	r2, r3
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800800c:	bf00      	nop
 800800e:	3714      	adds	r7, #20
 8008010:	46bd      	mov	sp, r7
 8008012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008016:	4770      	bx	lr
 8008018:	1000823f 	.word	0x1000823f
 800801c:	40020940 	.word	0x40020940

08008020 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008020:	b480      	push	{r7}
 8008022:	b087      	sub	sp, #28
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
 8008028:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800802a:	2300      	movs	r3, #0
 800802c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800802e:	e166      	b.n	80082fe <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	681a      	ldr	r2, [r3, #0]
 8008034:	2101      	movs	r1, #1
 8008036:	697b      	ldr	r3, [r7, #20]
 8008038:	fa01 f303 	lsl.w	r3, r1, r3
 800803c:	4013      	ands	r3, r2
 800803e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	2b00      	cmp	r3, #0
 8008044:	f000 8158 	beq.w	80082f8 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	685b      	ldr	r3, [r3, #4]
 800804c:	f003 0303 	and.w	r3, r3, #3
 8008050:	2b01      	cmp	r3, #1
 8008052:	d005      	beq.n	8008060 <HAL_GPIO_Init+0x40>
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	685b      	ldr	r3, [r3, #4]
 8008058:	f003 0303 	and.w	r3, r3, #3
 800805c:	2b02      	cmp	r3, #2
 800805e:	d130      	bne.n	80080c2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	689b      	ldr	r3, [r3, #8]
 8008064:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8008066:	697b      	ldr	r3, [r7, #20]
 8008068:	005b      	lsls	r3, r3, #1
 800806a:	2203      	movs	r2, #3
 800806c:	fa02 f303 	lsl.w	r3, r2, r3
 8008070:	43db      	mvns	r3, r3
 8008072:	693a      	ldr	r2, [r7, #16]
 8008074:	4013      	ands	r3, r2
 8008076:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	68da      	ldr	r2, [r3, #12]
 800807c:	697b      	ldr	r3, [r7, #20]
 800807e:	005b      	lsls	r3, r3, #1
 8008080:	fa02 f303 	lsl.w	r3, r2, r3
 8008084:	693a      	ldr	r2, [r7, #16]
 8008086:	4313      	orrs	r3, r2
 8008088:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	693a      	ldr	r2, [r7, #16]
 800808e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	685b      	ldr	r3, [r3, #4]
 8008094:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008096:	2201      	movs	r2, #1
 8008098:	697b      	ldr	r3, [r7, #20]
 800809a:	fa02 f303 	lsl.w	r3, r2, r3
 800809e:	43db      	mvns	r3, r3
 80080a0:	693a      	ldr	r2, [r7, #16]
 80080a2:	4013      	ands	r3, r2
 80080a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	685b      	ldr	r3, [r3, #4]
 80080aa:	091b      	lsrs	r3, r3, #4
 80080ac:	f003 0201 	and.w	r2, r3, #1
 80080b0:	697b      	ldr	r3, [r7, #20]
 80080b2:	fa02 f303 	lsl.w	r3, r2, r3
 80080b6:	693a      	ldr	r2, [r7, #16]
 80080b8:	4313      	orrs	r3, r2
 80080ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	693a      	ldr	r2, [r7, #16]
 80080c0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	685b      	ldr	r3, [r3, #4]
 80080c6:	f003 0303 	and.w	r3, r3, #3
 80080ca:	2b03      	cmp	r3, #3
 80080cc:	d017      	beq.n	80080fe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	68db      	ldr	r3, [r3, #12]
 80080d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80080d4:	697b      	ldr	r3, [r7, #20]
 80080d6:	005b      	lsls	r3, r3, #1
 80080d8:	2203      	movs	r2, #3
 80080da:	fa02 f303 	lsl.w	r3, r2, r3
 80080de:	43db      	mvns	r3, r3
 80080e0:	693a      	ldr	r2, [r7, #16]
 80080e2:	4013      	ands	r3, r2
 80080e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	689a      	ldr	r2, [r3, #8]
 80080ea:	697b      	ldr	r3, [r7, #20]
 80080ec:	005b      	lsls	r3, r3, #1
 80080ee:	fa02 f303 	lsl.w	r3, r2, r3
 80080f2:	693a      	ldr	r2, [r7, #16]
 80080f4:	4313      	orrs	r3, r2
 80080f6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	693a      	ldr	r2, [r7, #16]
 80080fc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	685b      	ldr	r3, [r3, #4]
 8008102:	f003 0303 	and.w	r3, r3, #3
 8008106:	2b02      	cmp	r3, #2
 8008108:	d123      	bne.n	8008152 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800810a:	697b      	ldr	r3, [r7, #20]
 800810c:	08da      	lsrs	r2, r3, #3
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	3208      	adds	r2, #8
 8008112:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008116:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8008118:	697b      	ldr	r3, [r7, #20]
 800811a:	f003 0307 	and.w	r3, r3, #7
 800811e:	009b      	lsls	r3, r3, #2
 8008120:	220f      	movs	r2, #15
 8008122:	fa02 f303 	lsl.w	r3, r2, r3
 8008126:	43db      	mvns	r3, r3
 8008128:	693a      	ldr	r2, [r7, #16]
 800812a:	4013      	ands	r3, r2
 800812c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	691a      	ldr	r2, [r3, #16]
 8008132:	697b      	ldr	r3, [r7, #20]
 8008134:	f003 0307 	and.w	r3, r3, #7
 8008138:	009b      	lsls	r3, r3, #2
 800813a:	fa02 f303 	lsl.w	r3, r2, r3
 800813e:	693a      	ldr	r2, [r7, #16]
 8008140:	4313      	orrs	r3, r2
 8008142:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8008144:	697b      	ldr	r3, [r7, #20]
 8008146:	08da      	lsrs	r2, r3, #3
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	3208      	adds	r2, #8
 800814c:	6939      	ldr	r1, [r7, #16]
 800814e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8008158:	697b      	ldr	r3, [r7, #20]
 800815a:	005b      	lsls	r3, r3, #1
 800815c:	2203      	movs	r2, #3
 800815e:	fa02 f303 	lsl.w	r3, r2, r3
 8008162:	43db      	mvns	r3, r3
 8008164:	693a      	ldr	r2, [r7, #16]
 8008166:	4013      	ands	r3, r2
 8008168:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	685b      	ldr	r3, [r3, #4]
 800816e:	f003 0203 	and.w	r2, r3, #3
 8008172:	697b      	ldr	r3, [r7, #20]
 8008174:	005b      	lsls	r3, r3, #1
 8008176:	fa02 f303 	lsl.w	r3, r2, r3
 800817a:	693a      	ldr	r2, [r7, #16]
 800817c:	4313      	orrs	r3, r2
 800817e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	693a      	ldr	r2, [r7, #16]
 8008184:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	685b      	ldr	r3, [r3, #4]
 800818a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800818e:	2b00      	cmp	r3, #0
 8008190:	f000 80b2 	beq.w	80082f8 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008194:	4b61      	ldr	r3, [pc, #388]	; (800831c <HAL_GPIO_Init+0x2fc>)
 8008196:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008198:	4a60      	ldr	r2, [pc, #384]	; (800831c <HAL_GPIO_Init+0x2fc>)
 800819a:	f043 0301 	orr.w	r3, r3, #1
 800819e:	6613      	str	r3, [r2, #96]	; 0x60
 80081a0:	4b5e      	ldr	r3, [pc, #376]	; (800831c <HAL_GPIO_Init+0x2fc>)
 80081a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081a4:	f003 0301 	and.w	r3, r3, #1
 80081a8:	60bb      	str	r3, [r7, #8]
 80081aa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80081ac:	4a5c      	ldr	r2, [pc, #368]	; (8008320 <HAL_GPIO_Init+0x300>)
 80081ae:	697b      	ldr	r3, [r7, #20]
 80081b0:	089b      	lsrs	r3, r3, #2
 80081b2:	3302      	adds	r3, #2
 80081b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80081b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80081ba:	697b      	ldr	r3, [r7, #20]
 80081bc:	f003 0303 	and.w	r3, r3, #3
 80081c0:	009b      	lsls	r3, r3, #2
 80081c2:	220f      	movs	r2, #15
 80081c4:	fa02 f303 	lsl.w	r3, r2, r3
 80081c8:	43db      	mvns	r3, r3
 80081ca:	693a      	ldr	r2, [r7, #16]
 80081cc:	4013      	ands	r3, r2
 80081ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80081d6:	d02b      	beq.n	8008230 <HAL_GPIO_Init+0x210>
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	4a52      	ldr	r2, [pc, #328]	; (8008324 <HAL_GPIO_Init+0x304>)
 80081dc:	4293      	cmp	r3, r2
 80081de:	d025      	beq.n	800822c <HAL_GPIO_Init+0x20c>
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	4a51      	ldr	r2, [pc, #324]	; (8008328 <HAL_GPIO_Init+0x308>)
 80081e4:	4293      	cmp	r3, r2
 80081e6:	d01f      	beq.n	8008228 <HAL_GPIO_Init+0x208>
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	4a50      	ldr	r2, [pc, #320]	; (800832c <HAL_GPIO_Init+0x30c>)
 80081ec:	4293      	cmp	r3, r2
 80081ee:	d019      	beq.n	8008224 <HAL_GPIO_Init+0x204>
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	4a4f      	ldr	r2, [pc, #316]	; (8008330 <HAL_GPIO_Init+0x310>)
 80081f4:	4293      	cmp	r3, r2
 80081f6:	d013      	beq.n	8008220 <HAL_GPIO_Init+0x200>
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	4a4e      	ldr	r2, [pc, #312]	; (8008334 <HAL_GPIO_Init+0x314>)
 80081fc:	4293      	cmp	r3, r2
 80081fe:	d00d      	beq.n	800821c <HAL_GPIO_Init+0x1fc>
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	4a4d      	ldr	r2, [pc, #308]	; (8008338 <HAL_GPIO_Init+0x318>)
 8008204:	4293      	cmp	r3, r2
 8008206:	d007      	beq.n	8008218 <HAL_GPIO_Init+0x1f8>
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	4a4c      	ldr	r2, [pc, #304]	; (800833c <HAL_GPIO_Init+0x31c>)
 800820c:	4293      	cmp	r3, r2
 800820e:	d101      	bne.n	8008214 <HAL_GPIO_Init+0x1f4>
 8008210:	2307      	movs	r3, #7
 8008212:	e00e      	b.n	8008232 <HAL_GPIO_Init+0x212>
 8008214:	2308      	movs	r3, #8
 8008216:	e00c      	b.n	8008232 <HAL_GPIO_Init+0x212>
 8008218:	2306      	movs	r3, #6
 800821a:	e00a      	b.n	8008232 <HAL_GPIO_Init+0x212>
 800821c:	2305      	movs	r3, #5
 800821e:	e008      	b.n	8008232 <HAL_GPIO_Init+0x212>
 8008220:	2304      	movs	r3, #4
 8008222:	e006      	b.n	8008232 <HAL_GPIO_Init+0x212>
 8008224:	2303      	movs	r3, #3
 8008226:	e004      	b.n	8008232 <HAL_GPIO_Init+0x212>
 8008228:	2302      	movs	r3, #2
 800822a:	e002      	b.n	8008232 <HAL_GPIO_Init+0x212>
 800822c:	2301      	movs	r3, #1
 800822e:	e000      	b.n	8008232 <HAL_GPIO_Init+0x212>
 8008230:	2300      	movs	r3, #0
 8008232:	697a      	ldr	r2, [r7, #20]
 8008234:	f002 0203 	and.w	r2, r2, #3
 8008238:	0092      	lsls	r2, r2, #2
 800823a:	4093      	lsls	r3, r2
 800823c:	693a      	ldr	r2, [r7, #16]
 800823e:	4313      	orrs	r3, r2
 8008240:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8008242:	4937      	ldr	r1, [pc, #220]	; (8008320 <HAL_GPIO_Init+0x300>)
 8008244:	697b      	ldr	r3, [r7, #20]
 8008246:	089b      	lsrs	r3, r3, #2
 8008248:	3302      	adds	r3, #2
 800824a:	693a      	ldr	r2, [r7, #16]
 800824c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008250:	4b3b      	ldr	r3, [pc, #236]	; (8008340 <HAL_GPIO_Init+0x320>)
 8008252:	689b      	ldr	r3, [r3, #8]
 8008254:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	43db      	mvns	r3, r3
 800825a:	693a      	ldr	r2, [r7, #16]
 800825c:	4013      	ands	r3, r2
 800825e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	685b      	ldr	r3, [r3, #4]
 8008264:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008268:	2b00      	cmp	r3, #0
 800826a:	d003      	beq.n	8008274 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800826c:	693a      	ldr	r2, [r7, #16]
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	4313      	orrs	r3, r2
 8008272:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8008274:	4a32      	ldr	r2, [pc, #200]	; (8008340 <HAL_GPIO_Init+0x320>)
 8008276:	693b      	ldr	r3, [r7, #16]
 8008278:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800827a:	4b31      	ldr	r3, [pc, #196]	; (8008340 <HAL_GPIO_Init+0x320>)
 800827c:	68db      	ldr	r3, [r3, #12]
 800827e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	43db      	mvns	r3, r3
 8008284:	693a      	ldr	r2, [r7, #16]
 8008286:	4013      	ands	r3, r2
 8008288:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	685b      	ldr	r3, [r3, #4]
 800828e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008292:	2b00      	cmp	r3, #0
 8008294:	d003      	beq.n	800829e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8008296:	693a      	ldr	r2, [r7, #16]
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	4313      	orrs	r3, r2
 800829c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800829e:	4a28      	ldr	r2, [pc, #160]	; (8008340 <HAL_GPIO_Init+0x320>)
 80082a0:	693b      	ldr	r3, [r7, #16]
 80082a2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80082a4:	4b26      	ldr	r3, [pc, #152]	; (8008340 <HAL_GPIO_Init+0x320>)
 80082a6:	685b      	ldr	r3, [r3, #4]
 80082a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	43db      	mvns	r3, r3
 80082ae:	693a      	ldr	r2, [r7, #16]
 80082b0:	4013      	ands	r3, r2
 80082b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	685b      	ldr	r3, [r3, #4]
 80082b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d003      	beq.n	80082c8 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80082c0:	693a      	ldr	r2, [r7, #16]
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	4313      	orrs	r3, r2
 80082c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80082c8:	4a1d      	ldr	r2, [pc, #116]	; (8008340 <HAL_GPIO_Init+0x320>)
 80082ca:	693b      	ldr	r3, [r7, #16]
 80082cc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80082ce:	4b1c      	ldr	r3, [pc, #112]	; (8008340 <HAL_GPIO_Init+0x320>)
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	43db      	mvns	r3, r3
 80082d8:	693a      	ldr	r2, [r7, #16]
 80082da:	4013      	ands	r3, r2
 80082dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	685b      	ldr	r3, [r3, #4]
 80082e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d003      	beq.n	80082f2 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80082ea:	693a      	ldr	r2, [r7, #16]
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	4313      	orrs	r3, r2
 80082f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80082f2:	4a13      	ldr	r2, [pc, #76]	; (8008340 <HAL_GPIO_Init+0x320>)
 80082f4:	693b      	ldr	r3, [r7, #16]
 80082f6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80082f8:	697b      	ldr	r3, [r7, #20]
 80082fa:	3301      	adds	r3, #1
 80082fc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	681a      	ldr	r2, [r3, #0]
 8008302:	697b      	ldr	r3, [r7, #20]
 8008304:	fa22 f303 	lsr.w	r3, r2, r3
 8008308:	2b00      	cmp	r3, #0
 800830a:	f47f ae91 	bne.w	8008030 <HAL_GPIO_Init+0x10>
  }
}
 800830e:	bf00      	nop
 8008310:	bf00      	nop
 8008312:	371c      	adds	r7, #28
 8008314:	46bd      	mov	sp, r7
 8008316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831a:	4770      	bx	lr
 800831c:	40021000 	.word	0x40021000
 8008320:	40010000 	.word	0x40010000
 8008324:	48000400 	.word	0x48000400
 8008328:	48000800 	.word	0x48000800
 800832c:	48000c00 	.word	0x48000c00
 8008330:	48001000 	.word	0x48001000
 8008334:	48001400 	.word	0x48001400
 8008338:	48001800 	.word	0x48001800
 800833c:	48001c00 	.word	0x48001c00
 8008340:	40010400 	.word	0x40010400

08008344 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008344:	b480      	push	{r7}
 8008346:	b085      	sub	sp, #20
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
 800834c:	460b      	mov	r3, r1
 800834e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	691a      	ldr	r2, [r3, #16]
 8008354:	887b      	ldrh	r3, [r7, #2]
 8008356:	4013      	ands	r3, r2
 8008358:	2b00      	cmp	r3, #0
 800835a:	d002      	beq.n	8008362 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800835c:	2301      	movs	r3, #1
 800835e:	73fb      	strb	r3, [r7, #15]
 8008360:	e001      	b.n	8008366 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008362:	2300      	movs	r3, #0
 8008364:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008366:	7bfb      	ldrb	r3, [r7, #15]
}
 8008368:	4618      	mov	r0, r3
 800836a:	3714      	adds	r7, #20
 800836c:	46bd      	mov	sp, r7
 800836e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008372:	4770      	bx	lr

08008374 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008374:	b480      	push	{r7}
 8008376:	b083      	sub	sp, #12
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
 800837c:	460b      	mov	r3, r1
 800837e:	807b      	strh	r3, [r7, #2]
 8008380:	4613      	mov	r3, r2
 8008382:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008384:	787b      	ldrb	r3, [r7, #1]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d003      	beq.n	8008392 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800838a:	887a      	ldrh	r2, [r7, #2]
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8008390:	e002      	b.n	8008398 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8008392:	887a      	ldrh	r2, [r7, #2]
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	629a      	str	r2, [r3, #40]	; 0x28
}
 8008398:	bf00      	nop
 800839a:	370c      	adds	r7, #12
 800839c:	46bd      	mov	sp, r7
 800839e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a2:	4770      	bx	lr

080083a4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80083a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80083a6:	b08f      	sub	sp, #60	; 0x3c
 80083a8:	af0a      	add	r7, sp, #40	; 0x28
 80083aa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d101      	bne.n	80083b6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80083b2:	2301      	movs	r3, #1
 80083b4:	e116      	b.n	80085e4 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80083c2:	b2db      	uxtb	r3, r3
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d106      	bne.n	80083d6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2200      	movs	r2, #0
 80083cc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80083d0:	6878      	ldr	r0, [r7, #4]
 80083d2:	f00a fd5f 	bl	8012e94 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	2203      	movs	r2, #3
 80083da:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80083de:	68bb      	ldr	r3, [r7, #8]
 80083e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d102      	bne.n	80083f0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	2200      	movs	r2, #0
 80083ee:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	4618      	mov	r0, r3
 80083f6:	f004 fe34 	bl	800d062 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	603b      	str	r3, [r7, #0]
 8008400:	687e      	ldr	r6, [r7, #4]
 8008402:	466d      	mov	r5, sp
 8008404:	f106 0410 	add.w	r4, r6, #16
 8008408:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800840a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800840c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800840e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008410:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008414:	e885 0003 	stmia.w	r5, {r0, r1}
 8008418:	1d33      	adds	r3, r6, #4
 800841a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800841c:	6838      	ldr	r0, [r7, #0]
 800841e:	f004 fd47 	bl	800ceb0 <USB_CoreInit>
 8008422:	4603      	mov	r3, r0
 8008424:	2b00      	cmp	r3, #0
 8008426:	d005      	beq.n	8008434 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2202      	movs	r2, #2
 800842c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8008430:	2301      	movs	r3, #1
 8008432:	e0d7      	b.n	80085e4 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	2100      	movs	r1, #0
 800843a:	4618      	mov	r0, r3
 800843c:	f004 fe22 	bl	800d084 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008440:	2300      	movs	r3, #0
 8008442:	73fb      	strb	r3, [r7, #15]
 8008444:	e04a      	b.n	80084dc <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8008446:	7bfa      	ldrb	r2, [r7, #15]
 8008448:	6879      	ldr	r1, [r7, #4]
 800844a:	4613      	mov	r3, r2
 800844c:	00db      	lsls	r3, r3, #3
 800844e:	4413      	add	r3, r2
 8008450:	009b      	lsls	r3, r3, #2
 8008452:	440b      	add	r3, r1
 8008454:	333d      	adds	r3, #61	; 0x3d
 8008456:	2201      	movs	r2, #1
 8008458:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800845a:	7bfa      	ldrb	r2, [r7, #15]
 800845c:	6879      	ldr	r1, [r7, #4]
 800845e:	4613      	mov	r3, r2
 8008460:	00db      	lsls	r3, r3, #3
 8008462:	4413      	add	r3, r2
 8008464:	009b      	lsls	r3, r3, #2
 8008466:	440b      	add	r3, r1
 8008468:	333c      	adds	r3, #60	; 0x3c
 800846a:	7bfa      	ldrb	r2, [r7, #15]
 800846c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800846e:	7bfa      	ldrb	r2, [r7, #15]
 8008470:	7bfb      	ldrb	r3, [r7, #15]
 8008472:	b298      	uxth	r0, r3
 8008474:	6879      	ldr	r1, [r7, #4]
 8008476:	4613      	mov	r3, r2
 8008478:	00db      	lsls	r3, r3, #3
 800847a:	4413      	add	r3, r2
 800847c:	009b      	lsls	r3, r3, #2
 800847e:	440b      	add	r3, r1
 8008480:	3344      	adds	r3, #68	; 0x44
 8008482:	4602      	mov	r2, r0
 8008484:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8008486:	7bfa      	ldrb	r2, [r7, #15]
 8008488:	6879      	ldr	r1, [r7, #4]
 800848a:	4613      	mov	r3, r2
 800848c:	00db      	lsls	r3, r3, #3
 800848e:	4413      	add	r3, r2
 8008490:	009b      	lsls	r3, r3, #2
 8008492:	440b      	add	r3, r1
 8008494:	3340      	adds	r3, #64	; 0x40
 8008496:	2200      	movs	r2, #0
 8008498:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800849a:	7bfa      	ldrb	r2, [r7, #15]
 800849c:	6879      	ldr	r1, [r7, #4]
 800849e:	4613      	mov	r3, r2
 80084a0:	00db      	lsls	r3, r3, #3
 80084a2:	4413      	add	r3, r2
 80084a4:	009b      	lsls	r3, r3, #2
 80084a6:	440b      	add	r3, r1
 80084a8:	3348      	adds	r3, #72	; 0x48
 80084aa:	2200      	movs	r2, #0
 80084ac:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80084ae:	7bfa      	ldrb	r2, [r7, #15]
 80084b0:	6879      	ldr	r1, [r7, #4]
 80084b2:	4613      	mov	r3, r2
 80084b4:	00db      	lsls	r3, r3, #3
 80084b6:	4413      	add	r3, r2
 80084b8:	009b      	lsls	r3, r3, #2
 80084ba:	440b      	add	r3, r1
 80084bc:	334c      	adds	r3, #76	; 0x4c
 80084be:	2200      	movs	r2, #0
 80084c0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80084c2:	7bfa      	ldrb	r2, [r7, #15]
 80084c4:	6879      	ldr	r1, [r7, #4]
 80084c6:	4613      	mov	r3, r2
 80084c8:	00db      	lsls	r3, r3, #3
 80084ca:	4413      	add	r3, r2
 80084cc:	009b      	lsls	r3, r3, #2
 80084ce:	440b      	add	r3, r1
 80084d0:	3354      	adds	r3, #84	; 0x54
 80084d2:	2200      	movs	r2, #0
 80084d4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80084d6:	7bfb      	ldrb	r3, [r7, #15]
 80084d8:	3301      	adds	r3, #1
 80084da:	73fb      	strb	r3, [r7, #15]
 80084dc:	7bfa      	ldrb	r2, [r7, #15]
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	685b      	ldr	r3, [r3, #4]
 80084e2:	429a      	cmp	r2, r3
 80084e4:	d3af      	bcc.n	8008446 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80084e6:	2300      	movs	r3, #0
 80084e8:	73fb      	strb	r3, [r7, #15]
 80084ea:	e044      	b.n	8008576 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80084ec:	7bfa      	ldrb	r2, [r7, #15]
 80084ee:	6879      	ldr	r1, [r7, #4]
 80084f0:	4613      	mov	r3, r2
 80084f2:	00db      	lsls	r3, r3, #3
 80084f4:	4413      	add	r3, r2
 80084f6:	009b      	lsls	r3, r3, #2
 80084f8:	440b      	add	r3, r1
 80084fa:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80084fe:	2200      	movs	r2, #0
 8008500:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8008502:	7bfa      	ldrb	r2, [r7, #15]
 8008504:	6879      	ldr	r1, [r7, #4]
 8008506:	4613      	mov	r3, r2
 8008508:	00db      	lsls	r3, r3, #3
 800850a:	4413      	add	r3, r2
 800850c:	009b      	lsls	r3, r3, #2
 800850e:	440b      	add	r3, r1
 8008510:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8008514:	7bfa      	ldrb	r2, [r7, #15]
 8008516:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8008518:	7bfa      	ldrb	r2, [r7, #15]
 800851a:	6879      	ldr	r1, [r7, #4]
 800851c:	4613      	mov	r3, r2
 800851e:	00db      	lsls	r3, r3, #3
 8008520:	4413      	add	r3, r2
 8008522:	009b      	lsls	r3, r3, #2
 8008524:	440b      	add	r3, r1
 8008526:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800852a:	2200      	movs	r2, #0
 800852c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800852e:	7bfa      	ldrb	r2, [r7, #15]
 8008530:	6879      	ldr	r1, [r7, #4]
 8008532:	4613      	mov	r3, r2
 8008534:	00db      	lsls	r3, r3, #3
 8008536:	4413      	add	r3, r2
 8008538:	009b      	lsls	r3, r3, #2
 800853a:	440b      	add	r3, r1
 800853c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8008540:	2200      	movs	r2, #0
 8008542:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8008544:	7bfa      	ldrb	r2, [r7, #15]
 8008546:	6879      	ldr	r1, [r7, #4]
 8008548:	4613      	mov	r3, r2
 800854a:	00db      	lsls	r3, r3, #3
 800854c:	4413      	add	r3, r2
 800854e:	009b      	lsls	r3, r3, #2
 8008550:	440b      	add	r3, r1
 8008552:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008556:	2200      	movs	r2, #0
 8008558:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800855a:	7bfa      	ldrb	r2, [r7, #15]
 800855c:	6879      	ldr	r1, [r7, #4]
 800855e:	4613      	mov	r3, r2
 8008560:	00db      	lsls	r3, r3, #3
 8008562:	4413      	add	r3, r2
 8008564:	009b      	lsls	r3, r3, #2
 8008566:	440b      	add	r3, r1
 8008568:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800856c:	2200      	movs	r2, #0
 800856e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008570:	7bfb      	ldrb	r3, [r7, #15]
 8008572:	3301      	adds	r3, #1
 8008574:	73fb      	strb	r3, [r7, #15]
 8008576:	7bfa      	ldrb	r2, [r7, #15]
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	685b      	ldr	r3, [r3, #4]
 800857c:	429a      	cmp	r2, r3
 800857e:	d3b5      	bcc.n	80084ec <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	603b      	str	r3, [r7, #0]
 8008586:	687e      	ldr	r6, [r7, #4]
 8008588:	466d      	mov	r5, sp
 800858a:	f106 0410 	add.w	r4, r6, #16
 800858e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008590:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008592:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008594:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008596:	e894 0003 	ldmia.w	r4, {r0, r1}
 800859a:	e885 0003 	stmia.w	r5, {r0, r1}
 800859e:	1d33      	adds	r3, r6, #4
 80085a0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80085a2:	6838      	ldr	r0, [r7, #0]
 80085a4:	f004 fdba 	bl	800d11c <USB_DevInit>
 80085a8:	4603      	mov	r3, r0
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d005      	beq.n	80085ba <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	2202      	movs	r2, #2
 80085b2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80085b6:	2301      	movs	r3, #1
 80085b8:	e014      	b.n	80085e4 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2200      	movs	r2, #0
 80085be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	2201      	movs	r2, #1
 80085c6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ce:	2b01      	cmp	r3, #1
 80085d0:	d102      	bne.n	80085d8 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80085d2:	6878      	ldr	r0, [r7, #4]
 80085d4:	f001 f882 	bl	80096dc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	4618      	mov	r0, r3
 80085de:	f005 fe42 	bl	800e266 <USB_DevDisconnect>

  return HAL_OK;
 80085e2:	2300      	movs	r3, #0
}
 80085e4:	4618      	mov	r0, r3
 80085e6:	3714      	adds	r7, #20
 80085e8:	46bd      	mov	sp, r7
 80085ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

080085ec <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b084      	sub	sp, #16
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008600:	2b01      	cmp	r3, #1
 8008602:	d101      	bne.n	8008608 <HAL_PCD_Start+0x1c>
 8008604:	2302      	movs	r3, #2
 8008606:	e01c      	b.n	8008642 <HAL_PCD_Start+0x56>
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2201      	movs	r2, #1
 800860c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008614:	2b01      	cmp	r3, #1
 8008616:	d105      	bne.n	8008624 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800861c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	4618      	mov	r0, r3
 800862a:	f004 fd09 	bl	800d040 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	4618      	mov	r0, r3
 8008634:	f005 fdf6 	bl	800e224 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2200      	movs	r2, #0
 800863c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8008640:	2300      	movs	r3, #0
}
 8008642:	4618      	mov	r0, r3
 8008644:	3710      	adds	r7, #16
 8008646:	46bd      	mov	sp, r7
 8008648:	bd80      	pop	{r7, pc}

0800864a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800864a:	b590      	push	{r4, r7, lr}
 800864c:	b08d      	sub	sp, #52	; 0x34
 800864e:	af00      	add	r7, sp, #0
 8008650:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008658:	6a3b      	ldr	r3, [r7, #32]
 800865a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	4618      	mov	r0, r3
 8008662:	f005 feb4 	bl	800e3ce <USB_GetMode>
 8008666:	4603      	mov	r3, r0
 8008668:	2b00      	cmp	r3, #0
 800866a:	f040 847e 	bne.w	8008f6a <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	4618      	mov	r0, r3
 8008674:	f005 fe18 	bl	800e2a8 <USB_ReadInterrupts>
 8008678:	4603      	mov	r3, r0
 800867a:	2b00      	cmp	r3, #0
 800867c:	f000 8474 	beq.w	8008f68 <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8008680:	69fb      	ldr	r3, [r7, #28]
 8008682:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008686:	689b      	ldr	r3, [r3, #8]
 8008688:	0a1b      	lsrs	r3, r3, #8
 800868a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	4618      	mov	r0, r3
 800869a:	f005 fe05 	bl	800e2a8 <USB_ReadInterrupts>
 800869e:	4603      	mov	r3, r0
 80086a0:	f003 0302 	and.w	r3, r3, #2
 80086a4:	2b02      	cmp	r3, #2
 80086a6:	d107      	bne.n	80086b8 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	695a      	ldr	r2, [r3, #20]
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	f002 0202 	and.w	r2, r2, #2
 80086b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	4618      	mov	r0, r3
 80086be:	f005 fdf3 	bl	800e2a8 <USB_ReadInterrupts>
 80086c2:	4603      	mov	r3, r0
 80086c4:	f003 0310 	and.w	r3, r3, #16
 80086c8:	2b10      	cmp	r3, #16
 80086ca:	d161      	bne.n	8008790 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	699a      	ldr	r2, [r3, #24]
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	f022 0210 	bic.w	r2, r2, #16
 80086da:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80086dc:	6a3b      	ldr	r3, [r7, #32]
 80086de:	6a1b      	ldr	r3, [r3, #32]
 80086e0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80086e2:	69bb      	ldr	r3, [r7, #24]
 80086e4:	f003 020f 	and.w	r2, r3, #15
 80086e8:	4613      	mov	r3, r2
 80086ea:	00db      	lsls	r3, r3, #3
 80086ec:	4413      	add	r3, r2
 80086ee:	009b      	lsls	r3, r3, #2
 80086f0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80086f4:	687a      	ldr	r2, [r7, #4]
 80086f6:	4413      	add	r3, r2
 80086f8:	3304      	adds	r3, #4
 80086fa:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80086fc:	69bb      	ldr	r3, [r7, #24]
 80086fe:	0c5b      	lsrs	r3, r3, #17
 8008700:	f003 030f 	and.w	r3, r3, #15
 8008704:	2b02      	cmp	r3, #2
 8008706:	d124      	bne.n	8008752 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8008708:	69ba      	ldr	r2, [r7, #24]
 800870a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800870e:	4013      	ands	r3, r2
 8008710:	2b00      	cmp	r3, #0
 8008712:	d035      	beq.n	8008780 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008714:	697b      	ldr	r3, [r7, #20]
 8008716:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8008718:	69bb      	ldr	r3, [r7, #24]
 800871a:	091b      	lsrs	r3, r3, #4
 800871c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800871e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008722:	b29b      	uxth	r3, r3
 8008724:	461a      	mov	r2, r3
 8008726:	6a38      	ldr	r0, [r7, #32]
 8008728:	f005 fc2a 	bl	800df80 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800872c:	697b      	ldr	r3, [r7, #20]
 800872e:	691a      	ldr	r2, [r3, #16]
 8008730:	69bb      	ldr	r3, [r7, #24]
 8008732:	091b      	lsrs	r3, r3, #4
 8008734:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008738:	441a      	add	r2, r3
 800873a:	697b      	ldr	r3, [r7, #20]
 800873c:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800873e:	697b      	ldr	r3, [r7, #20]
 8008740:	6a1a      	ldr	r2, [r3, #32]
 8008742:	69bb      	ldr	r3, [r7, #24]
 8008744:	091b      	lsrs	r3, r3, #4
 8008746:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800874a:	441a      	add	r2, r3
 800874c:	697b      	ldr	r3, [r7, #20]
 800874e:	621a      	str	r2, [r3, #32]
 8008750:	e016      	b.n	8008780 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8008752:	69bb      	ldr	r3, [r7, #24]
 8008754:	0c5b      	lsrs	r3, r3, #17
 8008756:	f003 030f 	and.w	r3, r3, #15
 800875a:	2b06      	cmp	r3, #6
 800875c:	d110      	bne.n	8008780 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008764:	2208      	movs	r2, #8
 8008766:	4619      	mov	r1, r3
 8008768:	6a38      	ldr	r0, [r7, #32]
 800876a:	f005 fc09 	bl	800df80 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800876e:	697b      	ldr	r3, [r7, #20]
 8008770:	6a1a      	ldr	r2, [r3, #32]
 8008772:	69bb      	ldr	r3, [r7, #24]
 8008774:	091b      	lsrs	r3, r3, #4
 8008776:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800877a:	441a      	add	r2, r3
 800877c:	697b      	ldr	r3, [r7, #20]
 800877e:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	699a      	ldr	r2, [r3, #24]
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	f042 0210 	orr.w	r2, r2, #16
 800878e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	4618      	mov	r0, r3
 8008796:	f005 fd87 	bl	800e2a8 <USB_ReadInterrupts>
 800879a:	4603      	mov	r3, r0
 800879c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80087a0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80087a4:	f040 80a7 	bne.w	80088f6 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80087a8:	2300      	movs	r3, #0
 80087aa:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	4618      	mov	r0, r3
 80087b2:	f005 fd8c 	bl	800e2ce <USB_ReadDevAllOutEpInterrupt>
 80087b6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80087b8:	e099      	b.n	80088ee <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80087ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087bc:	f003 0301 	and.w	r3, r3, #1
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	f000 808e 	beq.w	80088e2 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087cc:	b2d2      	uxtb	r2, r2
 80087ce:	4611      	mov	r1, r2
 80087d0:	4618      	mov	r0, r3
 80087d2:	f005 fdb0 	bl	800e336 <USB_ReadDevOutEPInterrupt>
 80087d6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80087d8:	693b      	ldr	r3, [r7, #16]
 80087da:	f003 0301 	and.w	r3, r3, #1
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d00c      	beq.n	80087fc <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80087e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087e4:	015a      	lsls	r2, r3, #5
 80087e6:	69fb      	ldr	r3, [r7, #28]
 80087e8:	4413      	add	r3, r2
 80087ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087ee:	461a      	mov	r2, r3
 80087f0:	2301      	movs	r3, #1
 80087f2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80087f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80087f6:	6878      	ldr	r0, [r7, #4]
 80087f8:	f000 fe96 	bl	8009528 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80087fc:	693b      	ldr	r3, [r7, #16]
 80087fe:	f003 0308 	and.w	r3, r3, #8
 8008802:	2b00      	cmp	r3, #0
 8008804:	d00c      	beq.n	8008820 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8008806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008808:	015a      	lsls	r2, r3, #5
 800880a:	69fb      	ldr	r3, [r7, #28]
 800880c:	4413      	add	r3, r2
 800880e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008812:	461a      	mov	r2, r3
 8008814:	2308      	movs	r3, #8
 8008816:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8008818:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800881a:	6878      	ldr	r0, [r7, #4]
 800881c:	f000 fed2 	bl	80095c4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8008820:	693b      	ldr	r3, [r7, #16]
 8008822:	f003 0310 	and.w	r3, r3, #16
 8008826:	2b00      	cmp	r3, #0
 8008828:	d008      	beq.n	800883c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800882a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800882c:	015a      	lsls	r2, r3, #5
 800882e:	69fb      	ldr	r3, [r7, #28]
 8008830:	4413      	add	r3, r2
 8008832:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008836:	461a      	mov	r2, r3
 8008838:	2310      	movs	r3, #16
 800883a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800883c:	693b      	ldr	r3, [r7, #16]
 800883e:	f003 0302 	and.w	r3, r3, #2
 8008842:	2b00      	cmp	r3, #0
 8008844:	d030      	beq.n	80088a8 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8008846:	6a3b      	ldr	r3, [r7, #32]
 8008848:	695b      	ldr	r3, [r3, #20]
 800884a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800884e:	2b80      	cmp	r3, #128	; 0x80
 8008850:	d109      	bne.n	8008866 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8008852:	69fb      	ldr	r3, [r7, #28]
 8008854:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008858:	685b      	ldr	r3, [r3, #4]
 800885a:	69fa      	ldr	r2, [r7, #28]
 800885c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008860:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008864:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8008866:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008868:	4613      	mov	r3, r2
 800886a:	00db      	lsls	r3, r3, #3
 800886c:	4413      	add	r3, r2
 800886e:	009b      	lsls	r3, r3, #2
 8008870:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008874:	687a      	ldr	r2, [r7, #4]
 8008876:	4413      	add	r3, r2
 8008878:	3304      	adds	r3, #4
 800887a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800887c:	697b      	ldr	r3, [r7, #20]
 800887e:	78db      	ldrb	r3, [r3, #3]
 8008880:	2b01      	cmp	r3, #1
 8008882:	d108      	bne.n	8008896 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8008884:	697b      	ldr	r3, [r7, #20]
 8008886:	2200      	movs	r2, #0
 8008888:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800888a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800888c:	b2db      	uxtb	r3, r3
 800888e:	4619      	mov	r1, r3
 8008890:	6878      	ldr	r0, [r7, #4]
 8008892:	f00a fc43 	bl	801311c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8008896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008898:	015a      	lsls	r2, r3, #5
 800889a:	69fb      	ldr	r3, [r7, #28]
 800889c:	4413      	add	r3, r2
 800889e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088a2:	461a      	mov	r2, r3
 80088a4:	2302      	movs	r3, #2
 80088a6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80088a8:	693b      	ldr	r3, [r7, #16]
 80088aa:	f003 0320 	and.w	r3, r3, #32
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d008      	beq.n	80088c4 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80088b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088b4:	015a      	lsls	r2, r3, #5
 80088b6:	69fb      	ldr	r3, [r7, #28]
 80088b8:	4413      	add	r3, r2
 80088ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088be:	461a      	mov	r2, r3
 80088c0:	2320      	movs	r3, #32
 80088c2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80088c4:	693b      	ldr	r3, [r7, #16]
 80088c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d009      	beq.n	80088e2 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80088ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088d0:	015a      	lsls	r2, r3, #5
 80088d2:	69fb      	ldr	r3, [r7, #28]
 80088d4:	4413      	add	r3, r2
 80088d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088da:	461a      	mov	r2, r3
 80088dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80088e0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80088e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088e4:	3301      	adds	r3, #1
 80088e6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80088e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088ea:	085b      	lsrs	r3, r3, #1
 80088ec:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80088ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	f47f af62 	bne.w	80087ba <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	4618      	mov	r0, r3
 80088fc:	f005 fcd4 	bl	800e2a8 <USB_ReadInterrupts>
 8008900:	4603      	mov	r3, r0
 8008902:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008906:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800890a:	f040 80a4 	bne.w	8008a56 <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	4618      	mov	r0, r3
 8008914:	f005 fcf5 	bl	800e302 <USB_ReadDevAllInEpInterrupt>
 8008918:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800891a:	2300      	movs	r3, #0
 800891c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800891e:	e096      	b.n	8008a4e <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8008920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008922:	f003 0301 	and.w	r3, r3, #1
 8008926:	2b00      	cmp	r3, #0
 8008928:	f000 808b 	beq.w	8008a42 <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008932:	b2d2      	uxtb	r2, r2
 8008934:	4611      	mov	r1, r2
 8008936:	4618      	mov	r0, r3
 8008938:	f005 fd1b 	bl	800e372 <USB_ReadDevInEPInterrupt>
 800893c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800893e:	693b      	ldr	r3, [r7, #16]
 8008940:	f003 0301 	and.w	r3, r3, #1
 8008944:	2b00      	cmp	r3, #0
 8008946:	d020      	beq.n	800898a <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800894a:	f003 030f 	and.w	r3, r3, #15
 800894e:	2201      	movs	r2, #1
 8008950:	fa02 f303 	lsl.w	r3, r2, r3
 8008954:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008956:	69fb      	ldr	r3, [r7, #28]
 8008958:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800895c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	43db      	mvns	r3, r3
 8008962:	69f9      	ldr	r1, [r7, #28]
 8008964:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008968:	4013      	ands	r3, r2
 800896a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800896c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800896e:	015a      	lsls	r2, r3, #5
 8008970:	69fb      	ldr	r3, [r7, #28]
 8008972:	4413      	add	r3, r2
 8008974:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008978:	461a      	mov	r2, r3
 800897a:	2301      	movs	r3, #1
 800897c:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800897e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008980:	b2db      	uxtb	r3, r3
 8008982:	4619      	mov	r1, r3
 8008984:	6878      	ldr	r0, [r7, #4]
 8008986:	f00a fb34 	bl	8012ff2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800898a:	693b      	ldr	r3, [r7, #16]
 800898c:	f003 0308 	and.w	r3, r3, #8
 8008990:	2b00      	cmp	r3, #0
 8008992:	d008      	beq.n	80089a6 <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8008994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008996:	015a      	lsls	r2, r3, #5
 8008998:	69fb      	ldr	r3, [r7, #28]
 800899a:	4413      	add	r3, r2
 800899c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089a0:	461a      	mov	r2, r3
 80089a2:	2308      	movs	r3, #8
 80089a4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80089a6:	693b      	ldr	r3, [r7, #16]
 80089a8:	f003 0310 	and.w	r3, r3, #16
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d008      	beq.n	80089c2 <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80089b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089b2:	015a      	lsls	r2, r3, #5
 80089b4:	69fb      	ldr	r3, [r7, #28]
 80089b6:	4413      	add	r3, r2
 80089b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089bc:	461a      	mov	r2, r3
 80089be:	2310      	movs	r3, #16
 80089c0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80089c2:	693b      	ldr	r3, [r7, #16]
 80089c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d008      	beq.n	80089de <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80089cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ce:	015a      	lsls	r2, r3, #5
 80089d0:	69fb      	ldr	r3, [r7, #28]
 80089d2:	4413      	add	r3, r2
 80089d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089d8:	461a      	mov	r2, r3
 80089da:	2340      	movs	r3, #64	; 0x40
 80089dc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80089de:	693b      	ldr	r3, [r7, #16]
 80089e0:	f003 0302 	and.w	r3, r3, #2
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d023      	beq.n	8008a30 <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80089e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80089ea:	6a38      	ldr	r0, [r7, #32]
 80089ec:	f004 fce2 	bl	800d3b4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80089f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089f2:	4613      	mov	r3, r2
 80089f4:	00db      	lsls	r3, r3, #3
 80089f6:	4413      	add	r3, r2
 80089f8:	009b      	lsls	r3, r3, #2
 80089fa:	3338      	adds	r3, #56	; 0x38
 80089fc:	687a      	ldr	r2, [r7, #4]
 80089fe:	4413      	add	r3, r2
 8008a00:	3304      	adds	r3, #4
 8008a02:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8008a04:	697b      	ldr	r3, [r7, #20]
 8008a06:	78db      	ldrb	r3, [r3, #3]
 8008a08:	2b01      	cmp	r3, #1
 8008a0a:	d108      	bne.n	8008a1e <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 8008a0c:	697b      	ldr	r3, [r7, #20]
 8008a0e:	2200      	movs	r2, #0
 8008a10:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8008a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a14:	b2db      	uxtb	r3, r3
 8008a16:	4619      	mov	r1, r3
 8008a18:	6878      	ldr	r0, [r7, #4]
 8008a1a:	f00a fb91 	bl	8013140 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8008a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a20:	015a      	lsls	r2, r3, #5
 8008a22:	69fb      	ldr	r3, [r7, #28]
 8008a24:	4413      	add	r3, r2
 8008a26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a2a:	461a      	mov	r2, r3
 8008a2c:	2302      	movs	r3, #2
 8008a2e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8008a30:	693b      	ldr	r3, [r7, #16]
 8008a32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d003      	beq.n	8008a42 <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8008a3a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008a3c:	6878      	ldr	r0, [r7, #4]
 8008a3e:	f000 fcea 	bl	8009416 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8008a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a44:	3301      	adds	r3, #1
 8008a46:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8008a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a4a:	085b      	lsrs	r3, r3, #1
 8008a4c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	f47f af65 	bne.w	8008920 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	f005 fc24 	bl	800e2a8 <USB_ReadInterrupts>
 8008a60:	4603      	mov	r3, r0
 8008a62:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008a66:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008a6a:	d122      	bne.n	8008ab2 <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008a6c:	69fb      	ldr	r3, [r7, #28]
 8008a6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a72:	685b      	ldr	r3, [r3, #4]
 8008a74:	69fa      	ldr	r2, [r7, #28]
 8008a76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008a7a:	f023 0301 	bic.w	r3, r3, #1
 8008a7e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8008a86:	2b01      	cmp	r3, #1
 8008a88:	d108      	bne.n	8008a9c <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8008a92:	2100      	movs	r1, #0
 8008a94:	6878      	ldr	r0, [r7, #4]
 8008a96:	f00a fdc3 	bl	8013620 <HAL_PCDEx_LPM_Callback>
 8008a9a:	e002      	b.n	8008aa2 <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8008a9c:	6878      	ldr	r0, [r7, #4]
 8008a9e:	f00a fb15 	bl	80130cc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	695a      	ldr	r2, [r3, #20]
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8008ab0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	f005 fbf6 	bl	800e2a8 <USB_ReadInterrupts>
 8008abc:	4603      	mov	r3, r0
 8008abe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008ac2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008ac6:	d112      	bne.n	8008aee <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8008ac8:	69fb      	ldr	r3, [r7, #28]
 8008aca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ace:	689b      	ldr	r3, [r3, #8]
 8008ad0:	f003 0301 	and.w	r3, r3, #1
 8008ad4:	2b01      	cmp	r3, #1
 8008ad6:	d102      	bne.n	8008ade <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008ad8:	6878      	ldr	r0, [r7, #4]
 8008ada:	f00a fad1 	bl	8013080 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	695a      	ldr	r2, [r3, #20]
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8008aec:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	4618      	mov	r0, r3
 8008af4:	f005 fbd8 	bl	800e2a8 <USB_ReadInterrupts>
 8008af8:	4603      	mov	r3, r0
 8008afa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008afe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008b02:	d121      	bne.n	8008b48 <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	695a      	ldr	r2, [r3, #20]
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8008b12:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d111      	bne.n	8008b42 <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	2201      	movs	r2, #1
 8008b22:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b2c:	089b      	lsrs	r3, r3, #2
 8008b2e:	f003 020f 	and.w	r2, r3, #15
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8008b38:	2101      	movs	r1, #1
 8008b3a:	6878      	ldr	r0, [r7, #4]
 8008b3c:	f00a fd70 	bl	8013620 <HAL_PCDEx_LPM_Callback>
 8008b40:	e002      	b.n	8008b48 <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008b42:	6878      	ldr	r0, [r7, #4]
 8008b44:	f00a fa9c 	bl	8013080 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	f005 fbab 	bl	800e2a8 <USB_ReadInterrupts>
 8008b52:	4603      	mov	r3, r0
 8008b54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008b58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b5c:	f040 80b5 	bne.w	8008cca <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008b60:	69fb      	ldr	r3, [r7, #28]
 8008b62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b66:	685b      	ldr	r3, [r3, #4]
 8008b68:	69fa      	ldr	r2, [r7, #28]
 8008b6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008b6e:	f023 0301 	bic.w	r3, r3, #1
 8008b72:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	2110      	movs	r1, #16
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	f004 fc1a 	bl	800d3b4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008b80:	2300      	movs	r3, #0
 8008b82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008b84:	e046      	b.n	8008c14 <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8008b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b88:	015a      	lsls	r2, r3, #5
 8008b8a:	69fb      	ldr	r3, [r7, #28]
 8008b8c:	4413      	add	r3, r2
 8008b8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b92:	461a      	mov	r2, r3
 8008b94:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008b98:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b9c:	015a      	lsls	r2, r3, #5
 8008b9e:	69fb      	ldr	r3, [r7, #28]
 8008ba0:	4413      	add	r3, r2
 8008ba2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008baa:	0151      	lsls	r1, r2, #5
 8008bac:	69fa      	ldr	r2, [r7, #28]
 8008bae:	440a      	add	r2, r1
 8008bb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008bb4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008bb8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8008bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bbc:	015a      	lsls	r2, r3, #5
 8008bbe:	69fb      	ldr	r3, [r7, #28]
 8008bc0:	4413      	add	r3, r2
 8008bc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bc6:	461a      	mov	r2, r3
 8008bc8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008bcc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bd0:	015a      	lsls	r2, r3, #5
 8008bd2:	69fb      	ldr	r3, [r7, #28]
 8008bd4:	4413      	add	r3, r2
 8008bd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008bde:	0151      	lsls	r1, r2, #5
 8008be0:	69fa      	ldr	r2, [r7, #28]
 8008be2:	440a      	add	r2, r1
 8008be4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008be8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008bec:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bf0:	015a      	lsls	r2, r3, #5
 8008bf2:	69fb      	ldr	r3, [r7, #28]
 8008bf4:	4413      	add	r3, r2
 8008bf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008bfe:	0151      	lsls	r1, r2, #5
 8008c00:	69fa      	ldr	r2, [r7, #28]
 8008c02:	440a      	add	r2, r1
 8008c04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c08:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008c0c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c10:	3301      	adds	r3, #1
 8008c12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	685b      	ldr	r3, [r3, #4]
 8008c18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c1a:	429a      	cmp	r2, r3
 8008c1c:	d3b3      	bcc.n	8008b86 <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8008c1e:	69fb      	ldr	r3, [r7, #28]
 8008c20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c24:	69db      	ldr	r3, [r3, #28]
 8008c26:	69fa      	ldr	r2, [r7, #28]
 8008c28:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008c2c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8008c30:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d016      	beq.n	8008c68 <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8008c3a:	69fb      	ldr	r3, [r7, #28]
 8008c3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008c44:	69fa      	ldr	r2, [r7, #28]
 8008c46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008c4a:	f043 030b 	orr.w	r3, r3, #11
 8008c4e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8008c52:	69fb      	ldr	r3, [r7, #28]
 8008c54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c5a:	69fa      	ldr	r2, [r7, #28]
 8008c5c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008c60:	f043 030b 	orr.w	r3, r3, #11
 8008c64:	6453      	str	r3, [r2, #68]	; 0x44
 8008c66:	e015      	b.n	8008c94 <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8008c68:	69fb      	ldr	r3, [r7, #28]
 8008c6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c6e:	695b      	ldr	r3, [r3, #20]
 8008c70:	69fa      	ldr	r2, [r7, #28]
 8008c72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008c76:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008c7a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8008c7e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8008c80:	69fb      	ldr	r3, [r7, #28]
 8008c82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c86:	691b      	ldr	r3, [r3, #16]
 8008c88:	69fa      	ldr	r2, [r7, #28]
 8008c8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008c8e:	f043 030b 	orr.w	r3, r3, #11
 8008c92:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8008c94:	69fb      	ldr	r3, [r7, #28]
 8008c96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	69fa      	ldr	r2, [r7, #28]
 8008c9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008ca2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008ca6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681a      	ldr	r2, [r3, #0]
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008cb2:	4619      	mov	r1, r3
 8008cb4:	4610      	mov	r0, r2
 8008cb6:	f005 fbbb 	bl	800e430 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	695a      	ldr	r2, [r3, #20]
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8008cc8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	4618      	mov	r0, r3
 8008cd0:	f005 faea 	bl	800e2a8 <USB_ReadInterrupts>
 8008cd4:	4603      	mov	r3, r0
 8008cd6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008cda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008cde:	d124      	bne.n	8008d2a <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	f005 fb80 	bl	800e3ea <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	4618      	mov	r0, r3
 8008cf0:	f004 fbdd 	bl	800d4ae <USB_GetDevSpeed>
 8008cf4:	4603      	mov	r3, r0
 8008cf6:	461a      	mov	r2, r3
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681c      	ldr	r4, [r3, #0]
 8008d00:	f001 fc92 	bl	800a628 <HAL_RCC_GetHCLKFreq>
 8008d04:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008d0a:	b2db      	uxtb	r3, r3
 8008d0c:	461a      	mov	r2, r3
 8008d0e:	4620      	mov	r0, r4
 8008d10:	f004 f8fa 	bl	800cf08 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8008d14:	6878      	ldr	r0, [r7, #4]
 8008d16:	f00a f994 	bl	8013042 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	695a      	ldr	r2, [r3, #20]
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8008d28:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	4618      	mov	r0, r3
 8008d30:	f005 faba 	bl	800e2a8 <USB_ReadInterrupts>
 8008d34:	4603      	mov	r3, r0
 8008d36:	f003 0308 	and.w	r3, r3, #8
 8008d3a:	2b08      	cmp	r3, #8
 8008d3c:	d10a      	bne.n	8008d54 <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8008d3e:	6878      	ldr	r0, [r7, #4]
 8008d40:	f00a f971 	bl	8013026 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	695a      	ldr	r2, [r3, #20]
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	f002 0208 	and.w	r2, r2, #8
 8008d52:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	4618      	mov	r0, r3
 8008d5a:	f005 faa5 	bl	800e2a8 <USB_ReadInterrupts>
 8008d5e:	4603      	mov	r3, r0
 8008d60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d64:	2b80      	cmp	r3, #128	; 0x80
 8008d66:	d122      	bne.n	8008dae <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8008d68:	6a3b      	ldr	r3, [r7, #32]
 8008d6a:	699b      	ldr	r3, [r3, #24]
 8008d6c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008d70:	6a3b      	ldr	r3, [r7, #32]
 8008d72:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008d74:	2301      	movs	r3, #1
 8008d76:	627b      	str	r3, [r7, #36]	; 0x24
 8008d78:	e014      	b.n	8008da4 <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8008d7a:	6879      	ldr	r1, [r7, #4]
 8008d7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d7e:	4613      	mov	r3, r2
 8008d80:	00db      	lsls	r3, r3, #3
 8008d82:	4413      	add	r3, r2
 8008d84:	009b      	lsls	r3, r3, #2
 8008d86:	440b      	add	r3, r1
 8008d88:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8008d8c:	781b      	ldrb	r3, [r3, #0]
 8008d8e:	2b01      	cmp	r3, #1
 8008d90:	d105      	bne.n	8008d9e <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8008d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d94:	b2db      	uxtb	r3, r3
 8008d96:	4619      	mov	r1, r3
 8008d98:	6878      	ldr	r0, [r7, #4]
 8008d9a:	f000 fb0b 	bl	80093b4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008da0:	3301      	adds	r3, #1
 8008da2:	627b      	str	r3, [r7, #36]	; 0x24
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	685b      	ldr	r3, [r3, #4]
 8008da8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008daa:	429a      	cmp	r2, r3
 8008dac:	d3e5      	bcc.n	8008d7a <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	4618      	mov	r0, r3
 8008db4:	f005 fa78 	bl	800e2a8 <USB_ReadInterrupts>
 8008db8:	4603      	mov	r3, r0
 8008dba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008dbe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008dc2:	d13b      	bne.n	8008e3c <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008dc4:	2301      	movs	r3, #1
 8008dc6:	627b      	str	r3, [r7, #36]	; 0x24
 8008dc8:	e02b      	b.n	8008e22 <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8008dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dcc:	015a      	lsls	r2, r3, #5
 8008dce:	69fb      	ldr	r3, [r7, #28]
 8008dd0:	4413      	add	r3, r2
 8008dd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8008dda:	6879      	ldr	r1, [r7, #4]
 8008ddc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008dde:	4613      	mov	r3, r2
 8008de0:	00db      	lsls	r3, r3, #3
 8008de2:	4413      	add	r3, r2
 8008de4:	009b      	lsls	r3, r3, #2
 8008de6:	440b      	add	r3, r1
 8008de8:	3340      	adds	r3, #64	; 0x40
 8008dea:	781b      	ldrb	r3, [r3, #0]
 8008dec:	2b01      	cmp	r3, #1
 8008dee:	d115      	bne.n	8008e1c <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8008df0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	da12      	bge.n	8008e1c <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8008df6:	6879      	ldr	r1, [r7, #4]
 8008df8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008dfa:	4613      	mov	r3, r2
 8008dfc:	00db      	lsls	r3, r3, #3
 8008dfe:	4413      	add	r3, r2
 8008e00:	009b      	lsls	r3, r3, #2
 8008e02:	440b      	add	r3, r1
 8008e04:	333f      	adds	r3, #63	; 0x3f
 8008e06:	2201      	movs	r2, #1
 8008e08:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8008e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e0c:	b2db      	uxtb	r3, r3
 8008e0e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008e12:	b2db      	uxtb	r3, r3
 8008e14:	4619      	mov	r1, r3
 8008e16:	6878      	ldr	r0, [r7, #4]
 8008e18:	f000 facc 	bl	80093b4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e1e:	3301      	adds	r3, #1
 8008e20:	627b      	str	r3, [r7, #36]	; 0x24
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	685b      	ldr	r3, [r3, #4]
 8008e26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e28:	429a      	cmp	r2, r3
 8008e2a:	d3ce      	bcc.n	8008dca <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	695a      	ldr	r2, [r3, #20]
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8008e3a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	4618      	mov	r0, r3
 8008e42:	f005 fa31 	bl	800e2a8 <USB_ReadInterrupts>
 8008e46:	4603      	mov	r3, r0
 8008e48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008e4c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008e50:	d155      	bne.n	8008efe <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008e52:	2301      	movs	r3, #1
 8008e54:	627b      	str	r3, [r7, #36]	; 0x24
 8008e56:	e045      	b.n	8008ee4 <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8008e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e5a:	015a      	lsls	r2, r3, #5
 8008e5c:	69fb      	ldr	r3, [r7, #28]
 8008e5e:	4413      	add	r3, r2
 8008e60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8008e68:	6879      	ldr	r1, [r7, #4]
 8008e6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e6c:	4613      	mov	r3, r2
 8008e6e:	00db      	lsls	r3, r3, #3
 8008e70:	4413      	add	r3, r2
 8008e72:	009b      	lsls	r3, r3, #2
 8008e74:	440b      	add	r3, r1
 8008e76:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008e7a:	781b      	ldrb	r3, [r3, #0]
 8008e7c:	2b01      	cmp	r3, #1
 8008e7e:	d12e      	bne.n	8008ede <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8008e80:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	da2b      	bge.n	8008ede <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8008e86:	69bb      	ldr	r3, [r7, #24]
 8008e88:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8008e92:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8008e96:	429a      	cmp	r2, r3
 8008e98:	d121      	bne.n	8008ede <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8008e9a:	6879      	ldr	r1, [r7, #4]
 8008e9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e9e:	4613      	mov	r3, r2
 8008ea0:	00db      	lsls	r3, r3, #3
 8008ea2:	4413      	add	r3, r2
 8008ea4:	009b      	lsls	r3, r3, #2
 8008ea6:	440b      	add	r3, r1
 8008ea8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8008eac:	2201      	movs	r2, #1
 8008eae:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8008eb0:	6a3b      	ldr	r3, [r7, #32]
 8008eb2:	699b      	ldr	r3, [r3, #24]
 8008eb4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008eb8:	6a3b      	ldr	r3, [r7, #32]
 8008eba:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8008ebc:	6a3b      	ldr	r3, [r7, #32]
 8008ebe:	695b      	ldr	r3, [r3, #20]
 8008ec0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d10a      	bne.n	8008ede <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8008ec8:	69fb      	ldr	r3, [r7, #28]
 8008eca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ece:	685b      	ldr	r3, [r3, #4]
 8008ed0:	69fa      	ldr	r2, [r7, #28]
 8008ed2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008ed6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008eda:	6053      	str	r3, [r2, #4]
            break;
 8008edc:	e007      	b.n	8008eee <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ee0:	3301      	adds	r3, #1
 8008ee2:	627b      	str	r3, [r7, #36]	; 0x24
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	685b      	ldr	r3, [r3, #4]
 8008ee8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008eea:	429a      	cmp	r2, r3
 8008eec:	d3b4      	bcc.n	8008e58 <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	695a      	ldr	r2, [r3, #20]
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8008efc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	4618      	mov	r0, r3
 8008f04:	f005 f9d0 	bl	800e2a8 <USB_ReadInterrupts>
 8008f08:	4603      	mov	r3, r0
 8008f0a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008f0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f12:	d10a      	bne.n	8008f2a <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8008f14:	6878      	ldr	r0, [r7, #4]
 8008f16:	f00a f925 	bl	8013164 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	695a      	ldr	r2, [r3, #20]
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8008f28:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	4618      	mov	r0, r3
 8008f30:	f005 f9ba 	bl	800e2a8 <USB_ReadInterrupts>
 8008f34:	4603      	mov	r3, r0
 8008f36:	f003 0304 	and.w	r3, r3, #4
 8008f3a:	2b04      	cmp	r3, #4
 8008f3c:	d115      	bne.n	8008f6a <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	685b      	ldr	r3, [r3, #4]
 8008f44:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8008f46:	69bb      	ldr	r3, [r7, #24]
 8008f48:	f003 0304 	and.w	r3, r3, #4
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d002      	beq.n	8008f56 <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8008f50:	6878      	ldr	r0, [r7, #4]
 8008f52:	f00a f915 	bl	8013180 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	6859      	ldr	r1, [r3, #4]
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	69ba      	ldr	r2, [r7, #24]
 8008f62:	430a      	orrs	r2, r1
 8008f64:	605a      	str	r2, [r3, #4]
 8008f66:	e000      	b.n	8008f6a <HAL_PCD_IRQHandler+0x920>
      return;
 8008f68:	bf00      	nop
    }
  }
}
 8008f6a:	3734      	adds	r7, #52	; 0x34
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	bd90      	pop	{r4, r7, pc}

08008f70 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b082      	sub	sp, #8
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
 8008f78:	460b      	mov	r3, r1
 8008f7a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008f82:	2b01      	cmp	r3, #1
 8008f84:	d101      	bne.n	8008f8a <HAL_PCD_SetAddress+0x1a>
 8008f86:	2302      	movs	r3, #2
 8008f88:	e013      	b.n	8008fb2 <HAL_PCD_SetAddress+0x42>
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	2201      	movs	r2, #1
 8008f8e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	78fa      	ldrb	r2, [r7, #3]
 8008f96:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	78fa      	ldrb	r2, [r7, #3]
 8008fa0:	4611      	mov	r1, r2
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	f005 f918 	bl	800e1d8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2200      	movs	r2, #0
 8008fac:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8008fb0:	2300      	movs	r3, #0
}
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	3708      	adds	r7, #8
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	bd80      	pop	{r7, pc}

08008fba <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8008fba:	b580      	push	{r7, lr}
 8008fbc:	b084      	sub	sp, #16
 8008fbe:	af00      	add	r7, sp, #0
 8008fc0:	6078      	str	r0, [r7, #4]
 8008fc2:	4608      	mov	r0, r1
 8008fc4:	4611      	mov	r1, r2
 8008fc6:	461a      	mov	r2, r3
 8008fc8:	4603      	mov	r3, r0
 8008fca:	70fb      	strb	r3, [r7, #3]
 8008fcc:	460b      	mov	r3, r1
 8008fce:	803b      	strh	r3, [r7, #0]
 8008fd0:	4613      	mov	r3, r2
 8008fd2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008fd8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	da0f      	bge.n	8009000 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008fe0:	78fb      	ldrb	r3, [r7, #3]
 8008fe2:	f003 020f 	and.w	r2, r3, #15
 8008fe6:	4613      	mov	r3, r2
 8008fe8:	00db      	lsls	r3, r3, #3
 8008fea:	4413      	add	r3, r2
 8008fec:	009b      	lsls	r3, r3, #2
 8008fee:	3338      	adds	r3, #56	; 0x38
 8008ff0:	687a      	ldr	r2, [r7, #4]
 8008ff2:	4413      	add	r3, r2
 8008ff4:	3304      	adds	r3, #4
 8008ff6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	2201      	movs	r2, #1
 8008ffc:	705a      	strb	r2, [r3, #1]
 8008ffe:	e00f      	b.n	8009020 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009000:	78fb      	ldrb	r3, [r7, #3]
 8009002:	f003 020f 	and.w	r2, r3, #15
 8009006:	4613      	mov	r3, r2
 8009008:	00db      	lsls	r3, r3, #3
 800900a:	4413      	add	r3, r2
 800900c:	009b      	lsls	r3, r3, #2
 800900e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009012:	687a      	ldr	r2, [r7, #4]
 8009014:	4413      	add	r3, r2
 8009016:	3304      	adds	r3, #4
 8009018:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	2200      	movs	r2, #0
 800901e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8009020:	78fb      	ldrb	r3, [r7, #3]
 8009022:	f003 030f 	and.w	r3, r3, #15
 8009026:	b2da      	uxtb	r2, r3
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800902c:	883a      	ldrh	r2, [r7, #0]
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	78ba      	ldrb	r2, [r7, #2]
 8009036:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	785b      	ldrb	r3, [r3, #1]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d004      	beq.n	800904a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	781b      	ldrb	r3, [r3, #0]
 8009044:	b29a      	uxth	r2, r3
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800904a:	78bb      	ldrb	r3, [r7, #2]
 800904c:	2b02      	cmp	r3, #2
 800904e:	d102      	bne.n	8009056 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	2200      	movs	r2, #0
 8009054:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800905c:	2b01      	cmp	r3, #1
 800905e:	d101      	bne.n	8009064 <HAL_PCD_EP_Open+0xaa>
 8009060:	2302      	movs	r3, #2
 8009062:	e00e      	b.n	8009082 <HAL_PCD_EP_Open+0xc8>
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2201      	movs	r2, #1
 8009068:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	68f9      	ldr	r1, [r7, #12]
 8009072:	4618      	mov	r0, r3
 8009074:	f004 fa3a 	bl	800d4ec <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	2200      	movs	r2, #0
 800907c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8009080:	7afb      	ldrb	r3, [r7, #11]
}
 8009082:	4618      	mov	r0, r3
 8009084:	3710      	adds	r7, #16
 8009086:	46bd      	mov	sp, r7
 8009088:	bd80      	pop	{r7, pc}

0800908a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800908a:	b580      	push	{r7, lr}
 800908c:	b084      	sub	sp, #16
 800908e:	af00      	add	r7, sp, #0
 8009090:	6078      	str	r0, [r7, #4]
 8009092:	460b      	mov	r3, r1
 8009094:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009096:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800909a:	2b00      	cmp	r3, #0
 800909c:	da0f      	bge.n	80090be <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800909e:	78fb      	ldrb	r3, [r7, #3]
 80090a0:	f003 020f 	and.w	r2, r3, #15
 80090a4:	4613      	mov	r3, r2
 80090a6:	00db      	lsls	r3, r3, #3
 80090a8:	4413      	add	r3, r2
 80090aa:	009b      	lsls	r3, r3, #2
 80090ac:	3338      	adds	r3, #56	; 0x38
 80090ae:	687a      	ldr	r2, [r7, #4]
 80090b0:	4413      	add	r3, r2
 80090b2:	3304      	adds	r3, #4
 80090b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	2201      	movs	r2, #1
 80090ba:	705a      	strb	r2, [r3, #1]
 80090bc:	e00f      	b.n	80090de <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80090be:	78fb      	ldrb	r3, [r7, #3]
 80090c0:	f003 020f 	and.w	r2, r3, #15
 80090c4:	4613      	mov	r3, r2
 80090c6:	00db      	lsls	r3, r3, #3
 80090c8:	4413      	add	r3, r2
 80090ca:	009b      	lsls	r3, r3, #2
 80090cc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80090d0:	687a      	ldr	r2, [r7, #4]
 80090d2:	4413      	add	r3, r2
 80090d4:	3304      	adds	r3, #4
 80090d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	2200      	movs	r2, #0
 80090dc:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80090de:	78fb      	ldrb	r3, [r7, #3]
 80090e0:	f003 030f 	and.w	r3, r3, #15
 80090e4:	b2da      	uxtb	r2, r3
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80090f0:	2b01      	cmp	r3, #1
 80090f2:	d101      	bne.n	80090f8 <HAL_PCD_EP_Close+0x6e>
 80090f4:	2302      	movs	r3, #2
 80090f6:	e00e      	b.n	8009116 <HAL_PCD_EP_Close+0x8c>
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2201      	movs	r2, #1
 80090fc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	68f9      	ldr	r1, [r7, #12]
 8009106:	4618      	mov	r0, r3
 8009108:	f004 fa78 	bl	800d5fc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	2200      	movs	r2, #0
 8009110:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8009114:	2300      	movs	r3, #0
}
 8009116:	4618      	mov	r0, r3
 8009118:	3710      	adds	r7, #16
 800911a:	46bd      	mov	sp, r7
 800911c:	bd80      	pop	{r7, pc}

0800911e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800911e:	b580      	push	{r7, lr}
 8009120:	b086      	sub	sp, #24
 8009122:	af00      	add	r7, sp, #0
 8009124:	60f8      	str	r0, [r7, #12]
 8009126:	607a      	str	r2, [r7, #4]
 8009128:	603b      	str	r3, [r7, #0]
 800912a:	460b      	mov	r3, r1
 800912c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800912e:	7afb      	ldrb	r3, [r7, #11]
 8009130:	f003 020f 	and.w	r2, r3, #15
 8009134:	4613      	mov	r3, r2
 8009136:	00db      	lsls	r3, r3, #3
 8009138:	4413      	add	r3, r2
 800913a:	009b      	lsls	r3, r3, #2
 800913c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009140:	68fa      	ldr	r2, [r7, #12]
 8009142:	4413      	add	r3, r2
 8009144:	3304      	adds	r3, #4
 8009146:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009148:	697b      	ldr	r3, [r7, #20]
 800914a:	687a      	ldr	r2, [r7, #4]
 800914c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800914e:	697b      	ldr	r3, [r7, #20]
 8009150:	683a      	ldr	r2, [r7, #0]
 8009152:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8009154:	697b      	ldr	r3, [r7, #20]
 8009156:	2200      	movs	r2, #0
 8009158:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800915a:	697b      	ldr	r3, [r7, #20]
 800915c:	2200      	movs	r2, #0
 800915e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009160:	7afb      	ldrb	r3, [r7, #11]
 8009162:	f003 030f 	and.w	r3, r3, #15
 8009166:	b2da      	uxtb	r2, r3
 8009168:	697b      	ldr	r3, [r7, #20]
 800916a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800916c:	7afb      	ldrb	r3, [r7, #11]
 800916e:	f003 030f 	and.w	r3, r3, #15
 8009172:	2b00      	cmp	r3, #0
 8009174:	d106      	bne.n	8009184 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	6979      	ldr	r1, [r7, #20]
 800917c:	4618      	mov	r0, r3
 800917e:	f004 fcf9 	bl	800db74 <USB_EP0StartXfer>
 8009182:	e005      	b.n	8009190 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	6979      	ldr	r1, [r7, #20]
 800918a:	4618      	mov	r0, r3
 800918c:	f004 fb12 	bl	800d7b4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8009190:	2300      	movs	r3, #0
}
 8009192:	4618      	mov	r0, r3
 8009194:	3718      	adds	r7, #24
 8009196:	46bd      	mov	sp, r7
 8009198:	bd80      	pop	{r7, pc}

0800919a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800919a:	b480      	push	{r7}
 800919c:	b083      	sub	sp, #12
 800919e:	af00      	add	r7, sp, #0
 80091a0:	6078      	str	r0, [r7, #4]
 80091a2:	460b      	mov	r3, r1
 80091a4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80091a6:	78fb      	ldrb	r3, [r7, #3]
 80091a8:	f003 020f 	and.w	r2, r3, #15
 80091ac:	6879      	ldr	r1, [r7, #4]
 80091ae:	4613      	mov	r3, r2
 80091b0:	00db      	lsls	r3, r3, #3
 80091b2:	4413      	add	r3, r2
 80091b4:	009b      	lsls	r3, r3, #2
 80091b6:	440b      	add	r3, r1
 80091b8:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80091bc:	681b      	ldr	r3, [r3, #0]
}
 80091be:	4618      	mov	r0, r3
 80091c0:	370c      	adds	r7, #12
 80091c2:	46bd      	mov	sp, r7
 80091c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c8:	4770      	bx	lr

080091ca <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80091ca:	b580      	push	{r7, lr}
 80091cc:	b086      	sub	sp, #24
 80091ce:	af00      	add	r7, sp, #0
 80091d0:	60f8      	str	r0, [r7, #12]
 80091d2:	607a      	str	r2, [r7, #4]
 80091d4:	603b      	str	r3, [r7, #0]
 80091d6:	460b      	mov	r3, r1
 80091d8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80091da:	7afb      	ldrb	r3, [r7, #11]
 80091dc:	f003 020f 	and.w	r2, r3, #15
 80091e0:	4613      	mov	r3, r2
 80091e2:	00db      	lsls	r3, r3, #3
 80091e4:	4413      	add	r3, r2
 80091e6:	009b      	lsls	r3, r3, #2
 80091e8:	3338      	adds	r3, #56	; 0x38
 80091ea:	68fa      	ldr	r2, [r7, #12]
 80091ec:	4413      	add	r3, r2
 80091ee:	3304      	adds	r3, #4
 80091f0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80091f2:	697b      	ldr	r3, [r7, #20]
 80091f4:	687a      	ldr	r2, [r7, #4]
 80091f6:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80091f8:	697b      	ldr	r3, [r7, #20]
 80091fa:	683a      	ldr	r2, [r7, #0]
 80091fc:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80091fe:	697b      	ldr	r3, [r7, #20]
 8009200:	2200      	movs	r2, #0
 8009202:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8009204:	697b      	ldr	r3, [r7, #20]
 8009206:	2201      	movs	r2, #1
 8009208:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800920a:	7afb      	ldrb	r3, [r7, #11]
 800920c:	f003 030f 	and.w	r3, r3, #15
 8009210:	b2da      	uxtb	r2, r3
 8009212:	697b      	ldr	r3, [r7, #20]
 8009214:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009216:	7afb      	ldrb	r3, [r7, #11]
 8009218:	f003 030f 	and.w	r3, r3, #15
 800921c:	2b00      	cmp	r3, #0
 800921e:	d106      	bne.n	800922e <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	6979      	ldr	r1, [r7, #20]
 8009226:	4618      	mov	r0, r3
 8009228:	f004 fca4 	bl	800db74 <USB_EP0StartXfer>
 800922c:	e005      	b.n	800923a <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	6979      	ldr	r1, [r7, #20]
 8009234:	4618      	mov	r0, r3
 8009236:	f004 fabd 	bl	800d7b4 <USB_EPStartXfer>
  }

  return HAL_OK;
 800923a:	2300      	movs	r3, #0
}
 800923c:	4618      	mov	r0, r3
 800923e:	3718      	adds	r7, #24
 8009240:	46bd      	mov	sp, r7
 8009242:	bd80      	pop	{r7, pc}

08009244 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009244:	b580      	push	{r7, lr}
 8009246:	b084      	sub	sp, #16
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
 800924c:	460b      	mov	r3, r1
 800924e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8009250:	78fb      	ldrb	r3, [r7, #3]
 8009252:	f003 020f 	and.w	r2, r3, #15
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	685b      	ldr	r3, [r3, #4]
 800925a:	429a      	cmp	r2, r3
 800925c:	d901      	bls.n	8009262 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800925e:	2301      	movs	r3, #1
 8009260:	e04e      	b.n	8009300 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009262:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009266:	2b00      	cmp	r3, #0
 8009268:	da0f      	bge.n	800928a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800926a:	78fb      	ldrb	r3, [r7, #3]
 800926c:	f003 020f 	and.w	r2, r3, #15
 8009270:	4613      	mov	r3, r2
 8009272:	00db      	lsls	r3, r3, #3
 8009274:	4413      	add	r3, r2
 8009276:	009b      	lsls	r3, r3, #2
 8009278:	3338      	adds	r3, #56	; 0x38
 800927a:	687a      	ldr	r2, [r7, #4]
 800927c:	4413      	add	r3, r2
 800927e:	3304      	adds	r3, #4
 8009280:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	2201      	movs	r2, #1
 8009286:	705a      	strb	r2, [r3, #1]
 8009288:	e00d      	b.n	80092a6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800928a:	78fa      	ldrb	r2, [r7, #3]
 800928c:	4613      	mov	r3, r2
 800928e:	00db      	lsls	r3, r3, #3
 8009290:	4413      	add	r3, r2
 8009292:	009b      	lsls	r3, r3, #2
 8009294:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009298:	687a      	ldr	r2, [r7, #4]
 800929a:	4413      	add	r3, r2
 800929c:	3304      	adds	r3, #4
 800929e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	2200      	movs	r2, #0
 80092a4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	2201      	movs	r2, #1
 80092aa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80092ac:	78fb      	ldrb	r3, [r7, #3]
 80092ae:	f003 030f 	and.w	r3, r3, #15
 80092b2:	b2da      	uxtb	r2, r3
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80092be:	2b01      	cmp	r3, #1
 80092c0:	d101      	bne.n	80092c6 <HAL_PCD_EP_SetStall+0x82>
 80092c2:	2302      	movs	r3, #2
 80092c4:	e01c      	b.n	8009300 <HAL_PCD_EP_SetStall+0xbc>
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	2201      	movs	r2, #1
 80092ca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	68f9      	ldr	r1, [r7, #12]
 80092d4:	4618      	mov	r0, r3
 80092d6:	f004 feab 	bl	800e030 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80092da:	78fb      	ldrb	r3, [r7, #3]
 80092dc:	f003 030f 	and.w	r3, r3, #15
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d108      	bne.n	80092f6 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681a      	ldr	r2, [r3, #0]
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80092ee:	4619      	mov	r1, r3
 80092f0:	4610      	mov	r0, r2
 80092f2:	f005 f89d 	bl	800e430 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	2200      	movs	r2, #0
 80092fa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80092fe:	2300      	movs	r3, #0
}
 8009300:	4618      	mov	r0, r3
 8009302:	3710      	adds	r7, #16
 8009304:	46bd      	mov	sp, r7
 8009306:	bd80      	pop	{r7, pc}

08009308 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009308:	b580      	push	{r7, lr}
 800930a:	b084      	sub	sp, #16
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
 8009310:	460b      	mov	r3, r1
 8009312:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8009314:	78fb      	ldrb	r3, [r7, #3]
 8009316:	f003 020f 	and.w	r2, r3, #15
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	685b      	ldr	r3, [r3, #4]
 800931e:	429a      	cmp	r2, r3
 8009320:	d901      	bls.n	8009326 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8009322:	2301      	movs	r3, #1
 8009324:	e042      	b.n	80093ac <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009326:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800932a:	2b00      	cmp	r3, #0
 800932c:	da0f      	bge.n	800934e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800932e:	78fb      	ldrb	r3, [r7, #3]
 8009330:	f003 020f 	and.w	r2, r3, #15
 8009334:	4613      	mov	r3, r2
 8009336:	00db      	lsls	r3, r3, #3
 8009338:	4413      	add	r3, r2
 800933a:	009b      	lsls	r3, r3, #2
 800933c:	3338      	adds	r3, #56	; 0x38
 800933e:	687a      	ldr	r2, [r7, #4]
 8009340:	4413      	add	r3, r2
 8009342:	3304      	adds	r3, #4
 8009344:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	2201      	movs	r2, #1
 800934a:	705a      	strb	r2, [r3, #1]
 800934c:	e00f      	b.n	800936e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800934e:	78fb      	ldrb	r3, [r7, #3]
 8009350:	f003 020f 	and.w	r2, r3, #15
 8009354:	4613      	mov	r3, r2
 8009356:	00db      	lsls	r3, r3, #3
 8009358:	4413      	add	r3, r2
 800935a:	009b      	lsls	r3, r3, #2
 800935c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009360:	687a      	ldr	r2, [r7, #4]
 8009362:	4413      	add	r3, r2
 8009364:	3304      	adds	r3, #4
 8009366:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	2200      	movs	r2, #0
 800936c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	2200      	movs	r2, #0
 8009372:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009374:	78fb      	ldrb	r3, [r7, #3]
 8009376:	f003 030f 	and.w	r3, r3, #15
 800937a:	b2da      	uxtb	r2, r3
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009386:	2b01      	cmp	r3, #1
 8009388:	d101      	bne.n	800938e <HAL_PCD_EP_ClrStall+0x86>
 800938a:	2302      	movs	r3, #2
 800938c:	e00e      	b.n	80093ac <HAL_PCD_EP_ClrStall+0xa4>
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	2201      	movs	r2, #1
 8009392:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	68f9      	ldr	r1, [r7, #12]
 800939c:	4618      	mov	r0, r3
 800939e:	f004 feb5 	bl	800e10c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	2200      	movs	r2, #0
 80093a6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80093aa:	2300      	movs	r3, #0
}
 80093ac:	4618      	mov	r0, r3
 80093ae:	3710      	adds	r7, #16
 80093b0:	46bd      	mov	sp, r7
 80093b2:	bd80      	pop	{r7, pc}

080093b4 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b084      	sub	sp, #16
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
 80093bc:	460b      	mov	r3, r1
 80093be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80093c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	da0c      	bge.n	80093e2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80093c8:	78fb      	ldrb	r3, [r7, #3]
 80093ca:	f003 020f 	and.w	r2, r3, #15
 80093ce:	4613      	mov	r3, r2
 80093d0:	00db      	lsls	r3, r3, #3
 80093d2:	4413      	add	r3, r2
 80093d4:	009b      	lsls	r3, r3, #2
 80093d6:	3338      	adds	r3, #56	; 0x38
 80093d8:	687a      	ldr	r2, [r7, #4]
 80093da:	4413      	add	r3, r2
 80093dc:	3304      	adds	r3, #4
 80093de:	60fb      	str	r3, [r7, #12]
 80093e0:	e00c      	b.n	80093fc <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80093e2:	78fb      	ldrb	r3, [r7, #3]
 80093e4:	f003 020f 	and.w	r2, r3, #15
 80093e8:	4613      	mov	r3, r2
 80093ea:	00db      	lsls	r3, r3, #3
 80093ec:	4413      	add	r3, r2
 80093ee:	009b      	lsls	r3, r3, #2
 80093f0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80093f4:	687a      	ldr	r2, [r7, #4]
 80093f6:	4413      	add	r3, r2
 80093f8:	3304      	adds	r3, #4
 80093fa:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	68f9      	ldr	r1, [r7, #12]
 8009402:	4618      	mov	r0, r3
 8009404:	f004 fcd8 	bl	800ddb8 <USB_EPStopXfer>
 8009408:	4603      	mov	r3, r0
 800940a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800940c:	7afb      	ldrb	r3, [r7, #11]
}
 800940e:	4618      	mov	r0, r3
 8009410:	3710      	adds	r7, #16
 8009412:	46bd      	mov	sp, r7
 8009414:	bd80      	pop	{r7, pc}

08009416 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009416:	b580      	push	{r7, lr}
 8009418:	b088      	sub	sp, #32
 800941a:	af00      	add	r7, sp, #0
 800941c:	6078      	str	r0, [r7, #4]
 800941e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009426:	697b      	ldr	r3, [r7, #20]
 8009428:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800942a:	683a      	ldr	r2, [r7, #0]
 800942c:	4613      	mov	r3, r2
 800942e:	00db      	lsls	r3, r3, #3
 8009430:	4413      	add	r3, r2
 8009432:	009b      	lsls	r3, r3, #2
 8009434:	3338      	adds	r3, #56	; 0x38
 8009436:	687a      	ldr	r2, [r7, #4]
 8009438:	4413      	add	r3, r2
 800943a:	3304      	adds	r3, #4
 800943c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	6a1a      	ldr	r2, [r3, #32]
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	699b      	ldr	r3, [r3, #24]
 8009446:	429a      	cmp	r2, r3
 8009448:	d901      	bls.n	800944e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800944a:	2301      	movs	r3, #1
 800944c:	e067      	b.n	800951e <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	699a      	ldr	r2, [r3, #24]
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	6a1b      	ldr	r3, [r3, #32]
 8009456:	1ad3      	subs	r3, r2, r3
 8009458:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	68db      	ldr	r3, [r3, #12]
 800945e:	69fa      	ldr	r2, [r7, #28]
 8009460:	429a      	cmp	r2, r3
 8009462:	d902      	bls.n	800946a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	68db      	ldr	r3, [r3, #12]
 8009468:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800946a:	69fb      	ldr	r3, [r7, #28]
 800946c:	3303      	adds	r3, #3
 800946e:	089b      	lsrs	r3, r3, #2
 8009470:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009472:	e026      	b.n	80094c2 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	699a      	ldr	r2, [r3, #24]
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	6a1b      	ldr	r3, [r3, #32]
 800947c:	1ad3      	subs	r3, r2, r3
 800947e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	68db      	ldr	r3, [r3, #12]
 8009484:	69fa      	ldr	r2, [r7, #28]
 8009486:	429a      	cmp	r2, r3
 8009488:	d902      	bls.n	8009490 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	68db      	ldr	r3, [r3, #12]
 800948e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8009490:	69fb      	ldr	r3, [r7, #28]
 8009492:	3303      	adds	r3, #3
 8009494:	089b      	lsrs	r3, r3, #2
 8009496:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	6919      	ldr	r1, [r3, #16]
 800949c:	683b      	ldr	r3, [r7, #0]
 800949e:	b2da      	uxtb	r2, r3
 80094a0:	69fb      	ldr	r3, [r7, #28]
 80094a2:	b29b      	uxth	r3, r3
 80094a4:	6978      	ldr	r0, [r7, #20]
 80094a6:	f004 fd31 	bl	800df0c <USB_WritePacket>

    ep->xfer_buff  += len;
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	691a      	ldr	r2, [r3, #16]
 80094ae:	69fb      	ldr	r3, [r7, #28]
 80094b0:	441a      	add	r2, r3
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	6a1a      	ldr	r2, [r3, #32]
 80094ba:	69fb      	ldr	r3, [r7, #28]
 80094bc:	441a      	add	r2, r3
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80094c2:	683b      	ldr	r3, [r7, #0]
 80094c4:	015a      	lsls	r2, r3, #5
 80094c6:	693b      	ldr	r3, [r7, #16]
 80094c8:	4413      	add	r3, r2
 80094ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094ce:	699b      	ldr	r3, [r3, #24]
 80094d0:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80094d2:	69ba      	ldr	r2, [r7, #24]
 80094d4:	429a      	cmp	r2, r3
 80094d6:	d809      	bhi.n	80094ec <PCD_WriteEmptyTxFifo+0xd6>
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	6a1a      	ldr	r2, [r3, #32]
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80094e0:	429a      	cmp	r2, r3
 80094e2:	d203      	bcs.n	80094ec <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	699b      	ldr	r3, [r3, #24]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d1c3      	bne.n	8009474 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	699a      	ldr	r2, [r3, #24]
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	6a1b      	ldr	r3, [r3, #32]
 80094f4:	429a      	cmp	r2, r3
 80094f6:	d811      	bhi.n	800951c <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	f003 030f 	and.w	r3, r3, #15
 80094fe:	2201      	movs	r2, #1
 8009500:	fa02 f303 	lsl.w	r3, r2, r3
 8009504:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009506:	693b      	ldr	r3, [r7, #16]
 8009508:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800950c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800950e:	68bb      	ldr	r3, [r7, #8]
 8009510:	43db      	mvns	r3, r3
 8009512:	6939      	ldr	r1, [r7, #16]
 8009514:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009518:	4013      	ands	r3, r2
 800951a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800951c:	2300      	movs	r3, #0
}
 800951e:	4618      	mov	r0, r3
 8009520:	3720      	adds	r7, #32
 8009522:	46bd      	mov	sp, r7
 8009524:	bd80      	pop	{r7, pc}
	...

08009528 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009528:	b580      	push	{r7, lr}
 800952a:	b086      	sub	sp, #24
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
 8009530:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009538:	697b      	ldr	r3, [r7, #20]
 800953a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800953c:	697b      	ldr	r3, [r7, #20]
 800953e:	333c      	adds	r3, #60	; 0x3c
 8009540:	3304      	adds	r3, #4
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009546:	683b      	ldr	r3, [r7, #0]
 8009548:	015a      	lsls	r2, r3, #5
 800954a:	693b      	ldr	r3, [r7, #16]
 800954c:	4413      	add	r3, r2
 800954e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009552:	689b      	ldr	r3, [r3, #8]
 8009554:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	4a19      	ldr	r2, [pc, #100]	; (80095c0 <PCD_EP_OutXfrComplete_int+0x98>)
 800955a:	4293      	cmp	r3, r2
 800955c:	d124      	bne.n	80095a8 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800955e:	68bb      	ldr	r3, [r7, #8]
 8009560:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009564:	2b00      	cmp	r3, #0
 8009566:	d00a      	beq.n	800957e <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009568:	683b      	ldr	r3, [r7, #0]
 800956a:	015a      	lsls	r2, r3, #5
 800956c:	693b      	ldr	r3, [r7, #16]
 800956e:	4413      	add	r3, r2
 8009570:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009574:	461a      	mov	r2, r3
 8009576:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800957a:	6093      	str	r3, [r2, #8]
 800957c:	e01a      	b.n	80095b4 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800957e:	68bb      	ldr	r3, [r7, #8]
 8009580:	f003 0320 	and.w	r3, r3, #32
 8009584:	2b00      	cmp	r3, #0
 8009586:	d008      	beq.n	800959a <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009588:	683b      	ldr	r3, [r7, #0]
 800958a:	015a      	lsls	r2, r3, #5
 800958c:	693b      	ldr	r3, [r7, #16]
 800958e:	4413      	add	r3, r2
 8009590:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009594:	461a      	mov	r2, r3
 8009596:	2320      	movs	r3, #32
 8009598:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800959a:	683b      	ldr	r3, [r7, #0]
 800959c:	b2db      	uxtb	r3, r3
 800959e:	4619      	mov	r1, r3
 80095a0:	6878      	ldr	r0, [r7, #4]
 80095a2:	f009 fd0b 	bl	8012fbc <HAL_PCD_DataOutStageCallback>
 80095a6:	e005      	b.n	80095b4 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80095a8:	683b      	ldr	r3, [r7, #0]
 80095aa:	b2db      	uxtb	r3, r3
 80095ac:	4619      	mov	r1, r3
 80095ae:	6878      	ldr	r0, [r7, #4]
 80095b0:	f009 fd04 	bl	8012fbc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 80095b4:	2300      	movs	r3, #0
}
 80095b6:	4618      	mov	r0, r3
 80095b8:	3718      	adds	r7, #24
 80095ba:	46bd      	mov	sp, r7
 80095bc:	bd80      	pop	{r7, pc}
 80095be:	bf00      	nop
 80095c0:	4f54310a 	.word	0x4f54310a

080095c4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b086      	sub	sp, #24
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
 80095cc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095d4:	697b      	ldr	r3, [r7, #20]
 80095d6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80095d8:	697b      	ldr	r3, [r7, #20]
 80095da:	333c      	adds	r3, #60	; 0x3c
 80095dc:	3304      	adds	r3, #4
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80095e2:	683b      	ldr	r3, [r7, #0]
 80095e4:	015a      	lsls	r2, r3, #5
 80095e6:	693b      	ldr	r3, [r7, #16]
 80095e8:	4413      	add	r3, r2
 80095ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095ee:	689b      	ldr	r3, [r3, #8]
 80095f0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	4a0c      	ldr	r2, [pc, #48]	; (8009628 <PCD_EP_OutSetupPacket_int+0x64>)
 80095f6:	4293      	cmp	r3, r2
 80095f8:	d90e      	bls.n	8009618 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80095fa:	68bb      	ldr	r3, [r7, #8]
 80095fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009600:	2b00      	cmp	r3, #0
 8009602:	d009      	beq.n	8009618 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009604:	683b      	ldr	r3, [r7, #0]
 8009606:	015a      	lsls	r2, r3, #5
 8009608:	693b      	ldr	r3, [r7, #16]
 800960a:	4413      	add	r3, r2
 800960c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009610:	461a      	mov	r2, r3
 8009612:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009616:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8009618:	6878      	ldr	r0, [r7, #4]
 800961a:	f009 fcbd 	bl	8012f98 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 800961e:	2300      	movs	r3, #0
}
 8009620:	4618      	mov	r0, r3
 8009622:	3718      	adds	r7, #24
 8009624:	46bd      	mov	sp, r7
 8009626:	bd80      	pop	{r7, pc}
 8009628:	4f54300a 	.word	0x4f54300a

0800962c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800962c:	b480      	push	{r7}
 800962e:	b085      	sub	sp, #20
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
 8009634:	460b      	mov	r3, r1
 8009636:	70fb      	strb	r3, [r7, #3]
 8009638:	4613      	mov	r3, r2
 800963a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009642:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8009644:	78fb      	ldrb	r3, [r7, #3]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d107      	bne.n	800965a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800964a:	883b      	ldrh	r3, [r7, #0]
 800964c:	0419      	lsls	r1, r3, #16
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	68ba      	ldr	r2, [r7, #8]
 8009654:	430a      	orrs	r2, r1
 8009656:	629a      	str	r2, [r3, #40]	; 0x28
 8009658:	e028      	b.n	80096ac <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009660:	0c1b      	lsrs	r3, r3, #16
 8009662:	68ba      	ldr	r2, [r7, #8]
 8009664:	4413      	add	r3, r2
 8009666:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009668:	2300      	movs	r3, #0
 800966a:	73fb      	strb	r3, [r7, #15]
 800966c:	e00d      	b.n	800968a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681a      	ldr	r2, [r3, #0]
 8009672:	7bfb      	ldrb	r3, [r7, #15]
 8009674:	3340      	adds	r3, #64	; 0x40
 8009676:	009b      	lsls	r3, r3, #2
 8009678:	4413      	add	r3, r2
 800967a:	685b      	ldr	r3, [r3, #4]
 800967c:	0c1b      	lsrs	r3, r3, #16
 800967e:	68ba      	ldr	r2, [r7, #8]
 8009680:	4413      	add	r3, r2
 8009682:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009684:	7bfb      	ldrb	r3, [r7, #15]
 8009686:	3301      	adds	r3, #1
 8009688:	73fb      	strb	r3, [r7, #15]
 800968a:	7bfa      	ldrb	r2, [r7, #15]
 800968c:	78fb      	ldrb	r3, [r7, #3]
 800968e:	3b01      	subs	r3, #1
 8009690:	429a      	cmp	r2, r3
 8009692:	d3ec      	bcc.n	800966e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8009694:	883b      	ldrh	r3, [r7, #0]
 8009696:	0418      	lsls	r0, r3, #16
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	6819      	ldr	r1, [r3, #0]
 800969c:	78fb      	ldrb	r3, [r7, #3]
 800969e:	3b01      	subs	r3, #1
 80096a0:	68ba      	ldr	r2, [r7, #8]
 80096a2:	4302      	orrs	r2, r0
 80096a4:	3340      	adds	r3, #64	; 0x40
 80096a6:	009b      	lsls	r3, r3, #2
 80096a8:	440b      	add	r3, r1
 80096aa:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80096ac:	2300      	movs	r3, #0
}
 80096ae:	4618      	mov	r0, r3
 80096b0:	3714      	adds	r7, #20
 80096b2:	46bd      	mov	sp, r7
 80096b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b8:	4770      	bx	lr

080096ba <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80096ba:	b480      	push	{r7}
 80096bc:	b083      	sub	sp, #12
 80096be:	af00      	add	r7, sp, #0
 80096c0:	6078      	str	r0, [r7, #4]
 80096c2:	460b      	mov	r3, r1
 80096c4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	887a      	ldrh	r2, [r7, #2]
 80096cc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80096ce:	2300      	movs	r3, #0
}
 80096d0:	4618      	mov	r0, r3
 80096d2:	370c      	adds	r7, #12
 80096d4:	46bd      	mov	sp, r7
 80096d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096da:	4770      	bx	lr

080096dc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80096dc:	b480      	push	{r7}
 80096de:	b085      	sub	sp, #20
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	2201      	movs	r2, #1
 80096ee:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	2200      	movs	r2, #0
 80096f6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	699b      	ldr	r3, [r3, #24]
 80096fe:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800970a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800970e:	f043 0303 	orr.w	r3, r3, #3
 8009712:	68fa      	ldr	r2, [r7, #12]
 8009714:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8009716:	2300      	movs	r3, #0
}
 8009718:	4618      	mov	r0, r3
 800971a:	3714      	adds	r7, #20
 800971c:	46bd      	mov	sp, r7
 800971e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009722:	4770      	bx	lr

08009724 <HAL_PWR_EnterSTOPMode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop 0 or Stop 1 mode with WFI instruction.
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop 0 or Stop 1 mode with WFE instruction.
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8009724:	b580      	push	{r7, lr}
 8009726:	b082      	sub	sp, #8
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
 800972c:	460b      	mov	r3, r1
 800972e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));

  if(Regulator == PWR_LOWPOWERREGULATOR_ON)
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009736:	d104      	bne.n	8009742 <HAL_PWR_EnterSTOPMode+0x1e>
  {
    HAL_PWREx_EnterSTOP1Mode(STOPEntry);
 8009738:	78fb      	ldrb	r3, [r7, #3]
 800973a:	4618      	mov	r0, r3
 800973c:	f000 f908 	bl	8009950 <HAL_PWREx_EnterSTOP1Mode>
  }
  else
  {
    HAL_PWREx_EnterSTOP0Mode(STOPEntry);
  }
}
 8009740:	e003      	b.n	800974a <HAL_PWR_EnterSTOPMode+0x26>
    HAL_PWREx_EnterSTOP0Mode(STOPEntry);
 8009742:	78fb      	ldrb	r3, [r7, #3]
 8009744:	4618      	mov	r0, r3
 8009746:	f000 f8d9 	bl	80098fc <HAL_PWREx_EnterSTOP0Mode>
}
 800974a:	bf00      	nop
 800974c:	3708      	adds	r7, #8
 800974e:	46bd      	mov	sp, r7
 8009750:	bd80      	pop	{r7, pc}
	...

08009754 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8009754:	b480      	push	{r7}
 8009756:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8009758:	4b0d      	ldr	r3, [pc, #52]	; (8009790 <HAL_PWREx_GetVoltageRange+0x3c>)
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009760:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009764:	d102      	bne.n	800976c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8009766:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800976a:	e00b      	b.n	8009784 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 800976c:	4b08      	ldr	r3, [pc, #32]	; (8009790 <HAL_PWREx_GetVoltageRange+0x3c>)
 800976e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009772:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009776:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800977a:	d102      	bne.n	8009782 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 800977c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009780:	e000      	b.n	8009784 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8009782:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8009784:	4618      	mov	r0, r3
 8009786:	46bd      	mov	sp, r7
 8009788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978c:	4770      	bx	lr
 800978e:	bf00      	nop
 8009790:	40007000 	.word	0x40007000

08009794 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8009794:	b480      	push	{r7}
 8009796:	b085      	sub	sp, #20
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d141      	bne.n	8009826 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80097a2:	4b4b      	ldr	r3, [pc, #300]	; (80098d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80097aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80097ae:	d131      	bne.n	8009814 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80097b0:	4b47      	ldr	r3, [pc, #284]	; (80098d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80097b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80097b6:	4a46      	ldr	r2, [pc, #280]	; (80098d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80097b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80097bc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80097c0:	4b43      	ldr	r3, [pc, #268]	; (80098d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80097c8:	4a41      	ldr	r2, [pc, #260]	; (80098d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80097ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80097ce:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80097d0:	4b40      	ldr	r3, [pc, #256]	; (80098d4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	2232      	movs	r2, #50	; 0x32
 80097d6:	fb02 f303 	mul.w	r3, r2, r3
 80097da:	4a3f      	ldr	r2, [pc, #252]	; (80098d8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80097dc:	fba2 2303 	umull	r2, r3, r2, r3
 80097e0:	0c9b      	lsrs	r3, r3, #18
 80097e2:	3301      	adds	r3, #1
 80097e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80097e6:	e002      	b.n	80097ee <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	3b01      	subs	r3, #1
 80097ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80097ee:	4b38      	ldr	r3, [pc, #224]	; (80098d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80097f0:	695b      	ldr	r3, [r3, #20]
 80097f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80097f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80097fa:	d102      	bne.n	8009802 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d1f2      	bne.n	80097e8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8009802:	4b33      	ldr	r3, [pc, #204]	; (80098d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009804:	695b      	ldr	r3, [r3, #20]
 8009806:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800980a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800980e:	d158      	bne.n	80098c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8009810:	2303      	movs	r3, #3
 8009812:	e057      	b.n	80098c4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009814:	4b2e      	ldr	r3, [pc, #184]	; (80098d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009816:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800981a:	4a2d      	ldr	r2, [pc, #180]	; (80098d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800981c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009820:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8009824:	e04d      	b.n	80098c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800982c:	d141      	bne.n	80098b2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800982e:	4b28      	ldr	r3, [pc, #160]	; (80098d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009836:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800983a:	d131      	bne.n	80098a0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800983c:	4b24      	ldr	r3, [pc, #144]	; (80098d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800983e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009842:	4a23      	ldr	r2, [pc, #140]	; (80098d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009844:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009848:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800984c:	4b20      	ldr	r3, [pc, #128]	; (80098d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8009854:	4a1e      	ldr	r2, [pc, #120]	; (80098d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009856:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800985a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800985c:	4b1d      	ldr	r3, [pc, #116]	; (80098d4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	2232      	movs	r2, #50	; 0x32
 8009862:	fb02 f303 	mul.w	r3, r2, r3
 8009866:	4a1c      	ldr	r2, [pc, #112]	; (80098d8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8009868:	fba2 2303 	umull	r2, r3, r2, r3
 800986c:	0c9b      	lsrs	r3, r3, #18
 800986e:	3301      	adds	r3, #1
 8009870:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009872:	e002      	b.n	800987a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	3b01      	subs	r3, #1
 8009878:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800987a:	4b15      	ldr	r3, [pc, #84]	; (80098d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800987c:	695b      	ldr	r3, [r3, #20]
 800987e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009882:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009886:	d102      	bne.n	800988e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	2b00      	cmp	r3, #0
 800988c:	d1f2      	bne.n	8009874 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800988e:	4b10      	ldr	r3, [pc, #64]	; (80098d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009890:	695b      	ldr	r3, [r3, #20]
 8009892:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009896:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800989a:	d112      	bne.n	80098c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800989c:	2303      	movs	r3, #3
 800989e:	e011      	b.n	80098c4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80098a0:	4b0b      	ldr	r3, [pc, #44]	; (80098d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80098a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80098a6:	4a0a      	ldr	r2, [pc, #40]	; (80098d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80098a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80098ac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80098b0:	e007      	b.n	80098c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80098b2:	4b07      	ldr	r3, [pc, #28]	; (80098d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80098ba:	4a05      	ldr	r2, [pc, #20]	; (80098d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80098bc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80098c0:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80098c2:	2300      	movs	r3, #0
}
 80098c4:	4618      	mov	r0, r3
 80098c6:	3714      	adds	r7, #20
 80098c8:	46bd      	mov	sp, r7
 80098ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ce:	4770      	bx	lr
 80098d0:	40007000 	.word	0x40007000
 80098d4:	20000224 	.word	0x20000224
 80098d8:	431bde83 	.word	0x431bde83

080098dc <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80098dc:	b480      	push	{r7}
 80098de:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80098e0:	4b05      	ldr	r3, [pc, #20]	; (80098f8 <HAL_PWREx_EnableVddUSB+0x1c>)
 80098e2:	685b      	ldr	r3, [r3, #4]
 80098e4:	4a04      	ldr	r2, [pc, #16]	; (80098f8 <HAL_PWREx_EnableVddUSB+0x1c>)
 80098e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80098ea:	6053      	str	r3, [r2, #4]
}
 80098ec:	bf00      	nop
 80098ee:	46bd      	mov	sp, r7
 80098f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f4:	4770      	bx	lr
 80098f6:	bf00      	nop
 80098f8:	40007000 	.word	0x40007000

080098fc <HAL_PWREx_EnterSTOP0Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP0Mode(uint8_t STOPEntry)
{
 80098fc:	b480      	push	{r7}
 80098fe:	b083      	sub	sp, #12
 8009900:	af00      	add	r7, sp, #0
 8009902:	4603      	mov	r3, r0
 8009904:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Stop 0 mode with Main Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP0);
 8009906:	4b10      	ldr	r3, [pc, #64]	; (8009948 <HAL_PWREx_EnterSTOP0Mode+0x4c>)
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	4a0f      	ldr	r2, [pc, #60]	; (8009948 <HAL_PWREx_EnterSTOP0Mode+0x4c>)
 800990c:	f023 0307 	bic.w	r3, r3, #7
 8009910:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8009912:	4b0e      	ldr	r3, [pc, #56]	; (800994c <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8009914:	691b      	ldr	r3, [r3, #16]
 8009916:	4a0d      	ldr	r2, [pc, #52]	; (800994c <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8009918:	f043 0304 	orr.w	r3, r3, #4
 800991c:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 800991e:	79fb      	ldrb	r3, [r7, #7]
 8009920:	2b01      	cmp	r3, #1
 8009922:	d101      	bne.n	8009928 <HAL_PWREx_EnterSTOP0Mode+0x2c>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8009924:	bf30      	wfi
 8009926:	e002      	b.n	800992e <HAL_PWREx_EnterSTOP0Mode+0x32>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8009928:	bf40      	sev
    __WFE();
 800992a:	bf20      	wfe
    __WFE();
 800992c:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800992e:	4b07      	ldr	r3, [pc, #28]	; (800994c <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8009930:	691b      	ldr	r3, [r3, #16]
 8009932:	4a06      	ldr	r2, [pc, #24]	; (800994c <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8009934:	f023 0304 	bic.w	r3, r3, #4
 8009938:	6113      	str	r3, [r2, #16]
}
 800993a:	bf00      	nop
 800993c:	370c      	adds	r7, #12
 800993e:	46bd      	mov	sp, r7
 8009940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009944:	4770      	bx	lr
 8009946:	bf00      	nop
 8009948:	40007000 	.word	0x40007000
 800994c:	e000ed00 	.word	0xe000ed00

08009950 <HAL_PWREx_EnterSTOP1Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP1Mode(uint8_t STOPEntry)
{
 8009950:	b480      	push	{r7}
 8009952:	b083      	sub	sp, #12
 8009954:	af00      	add	r7, sp, #0
 8009956:	4603      	mov	r3, r0
 8009958:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Stop 1 mode with Low-Power Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP1);
 800995a:	4b11      	ldr	r3, [pc, #68]	; (80099a0 <HAL_PWREx_EnterSTOP1Mode+0x50>)
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	f023 0307 	bic.w	r3, r3, #7
 8009962:	4a0f      	ldr	r2, [pc, #60]	; (80099a0 <HAL_PWREx_EnterSTOP1Mode+0x50>)
 8009964:	f043 0301 	orr.w	r3, r3, #1
 8009968:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800996a:	4b0e      	ldr	r3, [pc, #56]	; (80099a4 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 800996c:	691b      	ldr	r3, [r3, #16]
 800996e:	4a0d      	ldr	r2, [pc, #52]	; (80099a4 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8009970:	f043 0304 	orr.w	r3, r3, #4
 8009974:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8009976:	79fb      	ldrb	r3, [r7, #7]
 8009978:	2b01      	cmp	r3, #1
 800997a:	d101      	bne.n	8009980 <HAL_PWREx_EnterSTOP1Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800997c:	bf30      	wfi
 800997e:	e002      	b.n	8009986 <HAL_PWREx_EnterSTOP1Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8009980:	bf40      	sev
    __WFE();
 8009982:	bf20      	wfe
    __WFE();
 8009984:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8009986:	4b07      	ldr	r3, [pc, #28]	; (80099a4 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8009988:	691b      	ldr	r3, [r3, #16]
 800998a:	4a06      	ldr	r2, [pc, #24]	; (80099a4 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 800998c:	f023 0304 	bic.w	r3, r3, #4
 8009990:	6113      	str	r3, [r2, #16]
}
 8009992:	bf00      	nop
 8009994:	370c      	adds	r7, #12
 8009996:	46bd      	mov	sp, r7
 8009998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999c:	4770      	bx	lr
 800999e:	bf00      	nop
 80099a0:	40007000 	.word	0x40007000
 80099a4:	e000ed00 	.word	0xe000ed00

080099a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b08a      	sub	sp, #40	; 0x28
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d102      	bne.n	80099bc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80099b6:	2301      	movs	r3, #1
 80099b8:	f000 bc68 	b.w	800a28c <HAL_RCC_OscConfig+0x8e4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80099bc:	4b97      	ldr	r3, [pc, #604]	; (8009c1c <HAL_RCC_OscConfig+0x274>)
 80099be:	689b      	ldr	r3, [r3, #8]
 80099c0:	f003 030c 	and.w	r3, r3, #12
 80099c4:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80099c6:	4b95      	ldr	r3, [pc, #596]	; (8009c1c <HAL_RCC_OscConfig+0x274>)
 80099c8:	68db      	ldr	r3, [r3, #12]
 80099ca:	f003 0303 	and.w	r3, r3, #3
 80099ce:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	f003 0310 	and.w	r3, r3, #16
 80099d8:	2b00      	cmp	r3, #0
 80099da:	f000 80e6 	beq.w	8009baa <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80099de:	6a3b      	ldr	r3, [r7, #32]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d007      	beq.n	80099f4 <HAL_RCC_OscConfig+0x4c>
 80099e4:	6a3b      	ldr	r3, [r7, #32]
 80099e6:	2b0c      	cmp	r3, #12
 80099e8:	f040 808d 	bne.w	8009b06 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80099ec:	69fb      	ldr	r3, [r7, #28]
 80099ee:	2b01      	cmp	r3, #1
 80099f0:	f040 8089 	bne.w	8009b06 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80099f4:	4b89      	ldr	r3, [pc, #548]	; (8009c1c <HAL_RCC_OscConfig+0x274>)
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	f003 0302 	and.w	r3, r3, #2
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d006      	beq.n	8009a0e <HAL_RCC_OscConfig+0x66>
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	69db      	ldr	r3, [r3, #28]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d102      	bne.n	8009a0e <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8009a08:	2301      	movs	r3, #1
 8009a0a:	f000 bc3f 	b.w	800a28c <HAL_RCC_OscConfig+0x8e4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009a12:	4b82      	ldr	r3, [pc, #520]	; (8009c1c <HAL_RCC_OscConfig+0x274>)
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	f003 0308 	and.w	r3, r3, #8
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d004      	beq.n	8009a28 <HAL_RCC_OscConfig+0x80>
 8009a1e:	4b7f      	ldr	r3, [pc, #508]	; (8009c1c <HAL_RCC_OscConfig+0x274>)
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009a26:	e005      	b.n	8009a34 <HAL_RCC_OscConfig+0x8c>
 8009a28:	4b7c      	ldr	r3, [pc, #496]	; (8009c1c <HAL_RCC_OscConfig+0x274>)
 8009a2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009a2e:	091b      	lsrs	r3, r3, #4
 8009a30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009a34:	4293      	cmp	r3, r2
 8009a36:	d224      	bcs.n	8009a82 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	f000 fe47 	bl	800a6d0 <RCC_SetFlashLatencyFromMSIRange>
 8009a42:	4603      	mov	r3, r0
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d002      	beq.n	8009a4e <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8009a48:	2301      	movs	r3, #1
 8009a4a:	f000 bc1f 	b.w	800a28c <HAL_RCC_OscConfig+0x8e4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009a4e:	4b73      	ldr	r3, [pc, #460]	; (8009c1c <HAL_RCC_OscConfig+0x274>)
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	4a72      	ldr	r2, [pc, #456]	; (8009c1c <HAL_RCC_OscConfig+0x274>)
 8009a54:	f043 0308 	orr.w	r3, r3, #8
 8009a58:	6013      	str	r3, [r2, #0]
 8009a5a:	4b70      	ldr	r3, [pc, #448]	; (8009c1c <HAL_RCC_OscConfig+0x274>)
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a66:	496d      	ldr	r1, [pc, #436]	; (8009c1c <HAL_RCC_OscConfig+0x274>)
 8009a68:	4313      	orrs	r3, r2
 8009a6a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009a6c:	4b6b      	ldr	r3, [pc, #428]	; (8009c1c <HAL_RCC_OscConfig+0x274>)
 8009a6e:	685b      	ldr	r3, [r3, #4]
 8009a70:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	6a1b      	ldr	r3, [r3, #32]
 8009a78:	021b      	lsls	r3, r3, #8
 8009a7a:	4968      	ldr	r1, [pc, #416]	; (8009c1c <HAL_RCC_OscConfig+0x274>)
 8009a7c:	4313      	orrs	r3, r2
 8009a7e:	604b      	str	r3, [r1, #4]
 8009a80:	e025      	b.n	8009ace <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009a82:	4b66      	ldr	r3, [pc, #408]	; (8009c1c <HAL_RCC_OscConfig+0x274>)
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	4a65      	ldr	r2, [pc, #404]	; (8009c1c <HAL_RCC_OscConfig+0x274>)
 8009a88:	f043 0308 	orr.w	r3, r3, #8
 8009a8c:	6013      	str	r3, [r2, #0]
 8009a8e:	4b63      	ldr	r3, [pc, #396]	; (8009c1c <HAL_RCC_OscConfig+0x274>)
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a9a:	4960      	ldr	r1, [pc, #384]	; (8009c1c <HAL_RCC_OscConfig+0x274>)
 8009a9c:	4313      	orrs	r3, r2
 8009a9e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009aa0:	4b5e      	ldr	r3, [pc, #376]	; (8009c1c <HAL_RCC_OscConfig+0x274>)
 8009aa2:	685b      	ldr	r3, [r3, #4]
 8009aa4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	6a1b      	ldr	r3, [r3, #32]
 8009aac:	021b      	lsls	r3, r3, #8
 8009aae:	495b      	ldr	r1, [pc, #364]	; (8009c1c <HAL_RCC_OscConfig+0x274>)
 8009ab0:	4313      	orrs	r3, r2
 8009ab2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8009ab4:	6a3b      	ldr	r3, [r7, #32]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d109      	bne.n	8009ace <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009abe:	4618      	mov	r0, r3
 8009ac0:	f000 fe06 	bl	800a6d0 <RCC_SetFlashLatencyFromMSIRange>
 8009ac4:	4603      	mov	r3, r0
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d001      	beq.n	8009ace <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8009aca:	2301      	movs	r3, #1
 8009acc:	e3de      	b.n	800a28c <HAL_RCC_OscConfig+0x8e4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8009ace:	f000 fd21 	bl	800a514 <HAL_RCC_GetSysClockFreq>
 8009ad2:	4602      	mov	r2, r0
 8009ad4:	4b51      	ldr	r3, [pc, #324]	; (8009c1c <HAL_RCC_OscConfig+0x274>)
 8009ad6:	689b      	ldr	r3, [r3, #8]
 8009ad8:	091b      	lsrs	r3, r3, #4
 8009ada:	f003 030f 	and.w	r3, r3, #15
 8009ade:	4950      	ldr	r1, [pc, #320]	; (8009c20 <HAL_RCC_OscConfig+0x278>)
 8009ae0:	5ccb      	ldrb	r3, [r1, r3]
 8009ae2:	f003 031f 	and.w	r3, r3, #31
 8009ae6:	fa22 f303 	lsr.w	r3, r2, r3
 8009aea:	4a4e      	ldr	r2, [pc, #312]	; (8009c24 <HAL_RCC_OscConfig+0x27c>)
 8009aec:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8009aee:	4b4e      	ldr	r3, [pc, #312]	; (8009c28 <HAL_RCC_OscConfig+0x280>)
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	4618      	mov	r0, r3
 8009af4:	f7fb f96e 	bl	8004dd4 <HAL_InitTick>
 8009af8:	4603      	mov	r3, r0
 8009afa:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8009afc:	7dfb      	ldrb	r3, [r7, #23]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d052      	beq.n	8009ba8 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8009b02:	7dfb      	ldrb	r3, [r7, #23]
 8009b04:	e3c2      	b.n	800a28c <HAL_RCC_OscConfig+0x8e4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	69db      	ldr	r3, [r3, #28]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d032      	beq.n	8009b74 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8009b0e:	4b43      	ldr	r3, [pc, #268]	; (8009c1c <HAL_RCC_OscConfig+0x274>)
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	4a42      	ldr	r2, [pc, #264]	; (8009c1c <HAL_RCC_OscConfig+0x274>)
 8009b14:	f043 0301 	orr.w	r3, r3, #1
 8009b18:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8009b1a:	f7fb fb49 	bl	80051b0 <HAL_GetTick>
 8009b1e:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8009b20:	e008      	b.n	8009b34 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009b22:	f7fb fb45 	bl	80051b0 <HAL_GetTick>
 8009b26:	4602      	mov	r2, r0
 8009b28:	69bb      	ldr	r3, [r7, #24]
 8009b2a:	1ad3      	subs	r3, r2, r3
 8009b2c:	2b02      	cmp	r3, #2
 8009b2e:	d901      	bls.n	8009b34 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8009b30:	2303      	movs	r3, #3
 8009b32:	e3ab      	b.n	800a28c <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8009b34:	4b39      	ldr	r3, [pc, #228]	; (8009c1c <HAL_RCC_OscConfig+0x274>)
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	f003 0302 	and.w	r3, r3, #2
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d0f0      	beq.n	8009b22 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009b40:	4b36      	ldr	r3, [pc, #216]	; (8009c1c <HAL_RCC_OscConfig+0x274>)
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	4a35      	ldr	r2, [pc, #212]	; (8009c1c <HAL_RCC_OscConfig+0x274>)
 8009b46:	f043 0308 	orr.w	r3, r3, #8
 8009b4a:	6013      	str	r3, [r2, #0]
 8009b4c:	4b33      	ldr	r3, [pc, #204]	; (8009c1c <HAL_RCC_OscConfig+0x274>)
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b58:	4930      	ldr	r1, [pc, #192]	; (8009c1c <HAL_RCC_OscConfig+0x274>)
 8009b5a:	4313      	orrs	r3, r2
 8009b5c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009b5e:	4b2f      	ldr	r3, [pc, #188]	; (8009c1c <HAL_RCC_OscConfig+0x274>)
 8009b60:	685b      	ldr	r3, [r3, #4]
 8009b62:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	6a1b      	ldr	r3, [r3, #32]
 8009b6a:	021b      	lsls	r3, r3, #8
 8009b6c:	492b      	ldr	r1, [pc, #172]	; (8009c1c <HAL_RCC_OscConfig+0x274>)
 8009b6e:	4313      	orrs	r3, r2
 8009b70:	604b      	str	r3, [r1, #4]
 8009b72:	e01a      	b.n	8009baa <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8009b74:	4b29      	ldr	r3, [pc, #164]	; (8009c1c <HAL_RCC_OscConfig+0x274>)
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	4a28      	ldr	r2, [pc, #160]	; (8009c1c <HAL_RCC_OscConfig+0x274>)
 8009b7a:	f023 0301 	bic.w	r3, r3, #1
 8009b7e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8009b80:	f7fb fb16 	bl	80051b0 <HAL_GetTick>
 8009b84:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8009b86:	e008      	b.n	8009b9a <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009b88:	f7fb fb12 	bl	80051b0 <HAL_GetTick>
 8009b8c:	4602      	mov	r2, r0
 8009b8e:	69bb      	ldr	r3, [r7, #24]
 8009b90:	1ad3      	subs	r3, r2, r3
 8009b92:	2b02      	cmp	r3, #2
 8009b94:	d901      	bls.n	8009b9a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8009b96:	2303      	movs	r3, #3
 8009b98:	e378      	b.n	800a28c <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8009b9a:	4b20      	ldr	r3, [pc, #128]	; (8009c1c <HAL_RCC_OscConfig+0x274>)
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	f003 0302 	and.w	r3, r3, #2
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d1f0      	bne.n	8009b88 <HAL_RCC_OscConfig+0x1e0>
 8009ba6:	e000      	b.n	8009baa <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8009ba8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	f003 0301 	and.w	r3, r3, #1
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d073      	beq.n	8009c9e <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8009bb6:	6a3b      	ldr	r3, [r7, #32]
 8009bb8:	2b08      	cmp	r3, #8
 8009bba:	d005      	beq.n	8009bc8 <HAL_RCC_OscConfig+0x220>
 8009bbc:	6a3b      	ldr	r3, [r7, #32]
 8009bbe:	2b0c      	cmp	r3, #12
 8009bc0:	d10e      	bne.n	8009be0 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8009bc2:	69fb      	ldr	r3, [r7, #28]
 8009bc4:	2b03      	cmp	r3, #3
 8009bc6:	d10b      	bne.n	8009be0 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009bc8:	4b14      	ldr	r3, [pc, #80]	; (8009c1c <HAL_RCC_OscConfig+0x274>)
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d063      	beq.n	8009c9c <HAL_RCC_OscConfig+0x2f4>
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	685b      	ldr	r3, [r3, #4]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d15f      	bne.n	8009c9c <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8009bdc:	2301      	movs	r3, #1
 8009bde:	e355      	b.n	800a28c <HAL_RCC_OscConfig+0x8e4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	685b      	ldr	r3, [r3, #4]
 8009be4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009be8:	d106      	bne.n	8009bf8 <HAL_RCC_OscConfig+0x250>
 8009bea:	4b0c      	ldr	r3, [pc, #48]	; (8009c1c <HAL_RCC_OscConfig+0x274>)
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	4a0b      	ldr	r2, [pc, #44]	; (8009c1c <HAL_RCC_OscConfig+0x274>)
 8009bf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009bf4:	6013      	str	r3, [r2, #0]
 8009bf6:	e025      	b.n	8009c44 <HAL_RCC_OscConfig+0x29c>
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	685b      	ldr	r3, [r3, #4]
 8009bfc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009c00:	d114      	bne.n	8009c2c <HAL_RCC_OscConfig+0x284>
 8009c02:	4b06      	ldr	r3, [pc, #24]	; (8009c1c <HAL_RCC_OscConfig+0x274>)
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	4a05      	ldr	r2, [pc, #20]	; (8009c1c <HAL_RCC_OscConfig+0x274>)
 8009c08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009c0c:	6013      	str	r3, [r2, #0]
 8009c0e:	4b03      	ldr	r3, [pc, #12]	; (8009c1c <HAL_RCC_OscConfig+0x274>)
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	4a02      	ldr	r2, [pc, #8]	; (8009c1c <HAL_RCC_OscConfig+0x274>)
 8009c14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009c18:	6013      	str	r3, [r2, #0]
 8009c1a:	e013      	b.n	8009c44 <HAL_RCC_OscConfig+0x29c>
 8009c1c:	40021000 	.word	0x40021000
 8009c20:	08016d10 	.word	0x08016d10
 8009c24:	20000224 	.word	0x20000224
 8009c28:	20000228 	.word	0x20000228
 8009c2c:	4b8f      	ldr	r3, [pc, #572]	; (8009e6c <HAL_RCC_OscConfig+0x4c4>)
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	4a8e      	ldr	r2, [pc, #568]	; (8009e6c <HAL_RCC_OscConfig+0x4c4>)
 8009c32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009c36:	6013      	str	r3, [r2, #0]
 8009c38:	4b8c      	ldr	r3, [pc, #560]	; (8009e6c <HAL_RCC_OscConfig+0x4c4>)
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	4a8b      	ldr	r2, [pc, #556]	; (8009e6c <HAL_RCC_OscConfig+0x4c4>)
 8009c3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009c42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	685b      	ldr	r3, [r3, #4]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d013      	beq.n	8009c74 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c4c:	f7fb fab0 	bl	80051b0 <HAL_GetTick>
 8009c50:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009c52:	e008      	b.n	8009c66 <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009c54:	f7fb faac 	bl	80051b0 <HAL_GetTick>
 8009c58:	4602      	mov	r2, r0
 8009c5a:	69bb      	ldr	r3, [r7, #24]
 8009c5c:	1ad3      	subs	r3, r2, r3
 8009c5e:	2b64      	cmp	r3, #100	; 0x64
 8009c60:	d901      	bls.n	8009c66 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8009c62:	2303      	movs	r3, #3
 8009c64:	e312      	b.n	800a28c <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009c66:	4b81      	ldr	r3, [pc, #516]	; (8009e6c <HAL_RCC_OscConfig+0x4c4>)
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d0f0      	beq.n	8009c54 <HAL_RCC_OscConfig+0x2ac>
 8009c72:	e014      	b.n	8009c9e <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c74:	f7fb fa9c 	bl	80051b0 <HAL_GetTick>
 8009c78:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009c7a:	e008      	b.n	8009c8e <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009c7c:	f7fb fa98 	bl	80051b0 <HAL_GetTick>
 8009c80:	4602      	mov	r2, r0
 8009c82:	69bb      	ldr	r3, [r7, #24]
 8009c84:	1ad3      	subs	r3, r2, r3
 8009c86:	2b64      	cmp	r3, #100	; 0x64
 8009c88:	d901      	bls.n	8009c8e <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8009c8a:	2303      	movs	r3, #3
 8009c8c:	e2fe      	b.n	800a28c <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009c8e:	4b77      	ldr	r3, [pc, #476]	; (8009e6c <HAL_RCC_OscConfig+0x4c4>)
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d1f0      	bne.n	8009c7c <HAL_RCC_OscConfig+0x2d4>
 8009c9a:	e000      	b.n	8009c9e <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009c9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	f003 0302 	and.w	r3, r3, #2
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d060      	beq.n	8009d6c <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8009caa:	6a3b      	ldr	r3, [r7, #32]
 8009cac:	2b04      	cmp	r3, #4
 8009cae:	d005      	beq.n	8009cbc <HAL_RCC_OscConfig+0x314>
 8009cb0:	6a3b      	ldr	r3, [r7, #32]
 8009cb2:	2b0c      	cmp	r3, #12
 8009cb4:	d119      	bne.n	8009cea <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8009cb6:	69fb      	ldr	r3, [r7, #28]
 8009cb8:	2b02      	cmp	r3, #2
 8009cba:	d116      	bne.n	8009cea <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009cbc:	4b6b      	ldr	r3, [pc, #428]	; (8009e6c <HAL_RCC_OscConfig+0x4c4>)
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d005      	beq.n	8009cd4 <HAL_RCC_OscConfig+0x32c>
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	68db      	ldr	r3, [r3, #12]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d101      	bne.n	8009cd4 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8009cd0:	2301      	movs	r3, #1
 8009cd2:	e2db      	b.n	800a28c <HAL_RCC_OscConfig+0x8e4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009cd4:	4b65      	ldr	r3, [pc, #404]	; (8009e6c <HAL_RCC_OscConfig+0x4c4>)
 8009cd6:	685b      	ldr	r3, [r3, #4]
 8009cd8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	691b      	ldr	r3, [r3, #16]
 8009ce0:	061b      	lsls	r3, r3, #24
 8009ce2:	4962      	ldr	r1, [pc, #392]	; (8009e6c <HAL_RCC_OscConfig+0x4c4>)
 8009ce4:	4313      	orrs	r3, r2
 8009ce6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009ce8:	e040      	b.n	8009d6c <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	68db      	ldr	r3, [r3, #12]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d023      	beq.n	8009d3a <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009cf2:	4b5e      	ldr	r3, [pc, #376]	; (8009e6c <HAL_RCC_OscConfig+0x4c4>)
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	4a5d      	ldr	r2, [pc, #372]	; (8009e6c <HAL_RCC_OscConfig+0x4c4>)
 8009cf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009cfc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009cfe:	f7fb fa57 	bl	80051b0 <HAL_GetTick>
 8009d02:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009d04:	e008      	b.n	8009d18 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009d06:	f7fb fa53 	bl	80051b0 <HAL_GetTick>
 8009d0a:	4602      	mov	r2, r0
 8009d0c:	69bb      	ldr	r3, [r7, #24]
 8009d0e:	1ad3      	subs	r3, r2, r3
 8009d10:	2b02      	cmp	r3, #2
 8009d12:	d901      	bls.n	8009d18 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8009d14:	2303      	movs	r3, #3
 8009d16:	e2b9      	b.n	800a28c <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009d18:	4b54      	ldr	r3, [pc, #336]	; (8009e6c <HAL_RCC_OscConfig+0x4c4>)
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d0f0      	beq.n	8009d06 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009d24:	4b51      	ldr	r3, [pc, #324]	; (8009e6c <HAL_RCC_OscConfig+0x4c4>)
 8009d26:	685b      	ldr	r3, [r3, #4]
 8009d28:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	691b      	ldr	r3, [r3, #16]
 8009d30:	061b      	lsls	r3, r3, #24
 8009d32:	494e      	ldr	r1, [pc, #312]	; (8009e6c <HAL_RCC_OscConfig+0x4c4>)
 8009d34:	4313      	orrs	r3, r2
 8009d36:	604b      	str	r3, [r1, #4]
 8009d38:	e018      	b.n	8009d6c <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009d3a:	4b4c      	ldr	r3, [pc, #304]	; (8009e6c <HAL_RCC_OscConfig+0x4c4>)
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	4a4b      	ldr	r2, [pc, #300]	; (8009e6c <HAL_RCC_OscConfig+0x4c4>)
 8009d40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009d44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d46:	f7fb fa33 	bl	80051b0 <HAL_GetTick>
 8009d4a:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009d4c:	e008      	b.n	8009d60 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009d4e:	f7fb fa2f 	bl	80051b0 <HAL_GetTick>
 8009d52:	4602      	mov	r2, r0
 8009d54:	69bb      	ldr	r3, [r7, #24]
 8009d56:	1ad3      	subs	r3, r2, r3
 8009d58:	2b02      	cmp	r3, #2
 8009d5a:	d901      	bls.n	8009d60 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8009d5c:	2303      	movs	r3, #3
 8009d5e:	e295      	b.n	800a28c <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009d60:	4b42      	ldr	r3, [pc, #264]	; (8009e6c <HAL_RCC_OscConfig+0x4c4>)
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d1f0      	bne.n	8009d4e <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	f003 0308 	and.w	r3, r3, #8
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	f000 8082 	beq.w	8009e7e <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	695b      	ldr	r3, [r3, #20]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d05f      	beq.n	8009e42 <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8009d82:	4b3a      	ldr	r3, [pc, #232]	; (8009e6c <HAL_RCC_OscConfig+0x4c4>)
 8009d84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009d88:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	699a      	ldr	r2, [r3, #24]
 8009d8e:	693b      	ldr	r3, [r7, #16]
 8009d90:	f003 0310 	and.w	r3, r3, #16
 8009d94:	429a      	cmp	r2, r3
 8009d96:	d037      	beq.n	8009e08 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8009d98:	693b      	ldr	r3, [r7, #16]
 8009d9a:	f003 0302 	and.w	r3, r3, #2
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d006      	beq.n	8009db0 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8009da2:	693b      	ldr	r3, [r7, #16]
 8009da4:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d101      	bne.n	8009db0 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8009dac:	2301      	movs	r3, #1
 8009dae:	e26d      	b.n	800a28c <HAL_RCC_OscConfig+0x8e4>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8009db0:	693b      	ldr	r3, [r7, #16]
 8009db2:	f003 0301 	and.w	r3, r3, #1
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d01b      	beq.n	8009df2 <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 8009dba:	4b2c      	ldr	r3, [pc, #176]	; (8009e6c <HAL_RCC_OscConfig+0x4c4>)
 8009dbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009dc0:	4a2a      	ldr	r2, [pc, #168]	; (8009e6c <HAL_RCC_OscConfig+0x4c4>)
 8009dc2:	f023 0301 	bic.w	r3, r3, #1
 8009dc6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009dca:	f7fb f9f1 	bl	80051b0 <HAL_GetTick>
 8009dce:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009dd0:	e008      	b.n	8009de4 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009dd2:	f7fb f9ed 	bl	80051b0 <HAL_GetTick>
 8009dd6:	4602      	mov	r2, r0
 8009dd8:	69bb      	ldr	r3, [r7, #24]
 8009dda:	1ad3      	subs	r3, r2, r3
 8009ddc:	2b11      	cmp	r3, #17
 8009dde:	d901      	bls.n	8009de4 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8009de0:	2303      	movs	r3, #3
 8009de2:	e253      	b.n	800a28c <HAL_RCC_OscConfig+0x8e4>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009de4:	4b21      	ldr	r3, [pc, #132]	; (8009e6c <HAL_RCC_OscConfig+0x4c4>)
 8009de6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009dea:	f003 0302 	and.w	r3, r3, #2
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d1ef      	bne.n	8009dd2 <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8009df2:	4b1e      	ldr	r3, [pc, #120]	; (8009e6c <HAL_RCC_OscConfig+0x4c4>)
 8009df4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009df8:	f023 0210 	bic.w	r2, r3, #16
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	699b      	ldr	r3, [r3, #24]
 8009e00:	491a      	ldr	r1, [pc, #104]	; (8009e6c <HAL_RCC_OscConfig+0x4c4>)
 8009e02:	4313      	orrs	r3, r2
 8009e04:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009e08:	4b18      	ldr	r3, [pc, #96]	; (8009e6c <HAL_RCC_OscConfig+0x4c4>)
 8009e0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009e0e:	4a17      	ldr	r2, [pc, #92]	; (8009e6c <HAL_RCC_OscConfig+0x4c4>)
 8009e10:	f043 0301 	orr.w	r3, r3, #1
 8009e14:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009e18:	f7fb f9ca 	bl	80051b0 <HAL_GetTick>
 8009e1c:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009e1e:	e008      	b.n	8009e32 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009e20:	f7fb f9c6 	bl	80051b0 <HAL_GetTick>
 8009e24:	4602      	mov	r2, r0
 8009e26:	69bb      	ldr	r3, [r7, #24]
 8009e28:	1ad3      	subs	r3, r2, r3
 8009e2a:	2b11      	cmp	r3, #17
 8009e2c:	d901      	bls.n	8009e32 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8009e2e:	2303      	movs	r3, #3
 8009e30:	e22c      	b.n	800a28c <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009e32:	4b0e      	ldr	r3, [pc, #56]	; (8009e6c <HAL_RCC_OscConfig+0x4c4>)
 8009e34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009e38:	f003 0302 	and.w	r3, r3, #2
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d0ef      	beq.n	8009e20 <HAL_RCC_OscConfig+0x478>
 8009e40:	e01d      	b.n	8009e7e <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009e42:	4b0a      	ldr	r3, [pc, #40]	; (8009e6c <HAL_RCC_OscConfig+0x4c4>)
 8009e44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009e48:	4a08      	ldr	r2, [pc, #32]	; (8009e6c <HAL_RCC_OscConfig+0x4c4>)
 8009e4a:	f023 0301 	bic.w	r3, r3, #1
 8009e4e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009e52:	f7fb f9ad 	bl	80051b0 <HAL_GetTick>
 8009e56:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009e58:	e00a      	b.n	8009e70 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009e5a:	f7fb f9a9 	bl	80051b0 <HAL_GetTick>
 8009e5e:	4602      	mov	r2, r0
 8009e60:	69bb      	ldr	r3, [r7, #24]
 8009e62:	1ad3      	subs	r3, r2, r3
 8009e64:	2b11      	cmp	r3, #17
 8009e66:	d903      	bls.n	8009e70 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8009e68:	2303      	movs	r3, #3
 8009e6a:	e20f      	b.n	800a28c <HAL_RCC_OscConfig+0x8e4>
 8009e6c:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009e70:	4b83      	ldr	r3, [pc, #524]	; (800a080 <HAL_RCC_OscConfig+0x6d8>)
 8009e72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009e76:	f003 0302 	and.w	r3, r3, #2
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d1ed      	bne.n	8009e5a <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	f003 0304 	and.w	r3, r3, #4
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	f000 80bd 	beq.w	800a006 <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8009e92:	4b7b      	ldr	r3, [pc, #492]	; (800a080 <HAL_RCC_OscConfig+0x6d8>)
 8009e94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d10e      	bne.n	8009ebc <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009e9e:	4b78      	ldr	r3, [pc, #480]	; (800a080 <HAL_RCC_OscConfig+0x6d8>)
 8009ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ea2:	4a77      	ldr	r2, [pc, #476]	; (800a080 <HAL_RCC_OscConfig+0x6d8>)
 8009ea4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009ea8:	6593      	str	r3, [r2, #88]	; 0x58
 8009eaa:	4b75      	ldr	r3, [pc, #468]	; (800a080 <HAL_RCC_OscConfig+0x6d8>)
 8009eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009eae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009eb2:	60fb      	str	r3, [r7, #12]
 8009eb4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8009eb6:	2301      	movs	r3, #1
 8009eb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009ebc:	4b71      	ldr	r3, [pc, #452]	; (800a084 <HAL_RCC_OscConfig+0x6dc>)
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d118      	bne.n	8009efa <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009ec8:	4b6e      	ldr	r3, [pc, #440]	; (800a084 <HAL_RCC_OscConfig+0x6dc>)
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	4a6d      	ldr	r2, [pc, #436]	; (800a084 <HAL_RCC_OscConfig+0x6dc>)
 8009ece:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009ed2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009ed4:	f7fb f96c 	bl	80051b0 <HAL_GetTick>
 8009ed8:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009eda:	e008      	b.n	8009eee <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009edc:	f7fb f968 	bl	80051b0 <HAL_GetTick>
 8009ee0:	4602      	mov	r2, r0
 8009ee2:	69bb      	ldr	r3, [r7, #24]
 8009ee4:	1ad3      	subs	r3, r2, r3
 8009ee6:	2b02      	cmp	r3, #2
 8009ee8:	d901      	bls.n	8009eee <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 8009eea:	2303      	movs	r3, #3
 8009eec:	e1ce      	b.n	800a28c <HAL_RCC_OscConfig+0x8e4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009eee:	4b65      	ldr	r3, [pc, #404]	; (800a084 <HAL_RCC_OscConfig+0x6dc>)
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d0f0      	beq.n	8009edc <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	689b      	ldr	r3, [r3, #8]
 8009efe:	f003 0301 	and.w	r3, r3, #1
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d02c      	beq.n	8009f60 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8009f06:	4b5e      	ldr	r3, [pc, #376]	; (800a080 <HAL_RCC_OscConfig+0x6d8>)
 8009f08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f0c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	689b      	ldr	r3, [r3, #8]
 8009f14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f18:	4959      	ldr	r1, [pc, #356]	; (800a080 <HAL_RCC_OscConfig+0x6d8>)
 8009f1a:	4313      	orrs	r3, r2
 8009f1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	689b      	ldr	r3, [r3, #8]
 8009f24:	f003 0304 	and.w	r3, r3, #4
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d010      	beq.n	8009f4e <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8009f2c:	4b54      	ldr	r3, [pc, #336]	; (800a080 <HAL_RCC_OscConfig+0x6d8>)
 8009f2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f32:	4a53      	ldr	r2, [pc, #332]	; (800a080 <HAL_RCC_OscConfig+0x6d8>)
 8009f34:	f043 0304 	orr.w	r3, r3, #4
 8009f38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8009f3c:	4b50      	ldr	r3, [pc, #320]	; (800a080 <HAL_RCC_OscConfig+0x6d8>)
 8009f3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f42:	4a4f      	ldr	r2, [pc, #316]	; (800a080 <HAL_RCC_OscConfig+0x6d8>)
 8009f44:	f043 0301 	orr.w	r3, r3, #1
 8009f48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009f4c:	e018      	b.n	8009f80 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8009f4e:	4b4c      	ldr	r3, [pc, #304]	; (800a080 <HAL_RCC_OscConfig+0x6d8>)
 8009f50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f54:	4a4a      	ldr	r2, [pc, #296]	; (800a080 <HAL_RCC_OscConfig+0x6d8>)
 8009f56:	f043 0301 	orr.w	r3, r3, #1
 8009f5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009f5e:	e00f      	b.n	8009f80 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8009f60:	4b47      	ldr	r3, [pc, #284]	; (800a080 <HAL_RCC_OscConfig+0x6d8>)
 8009f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f66:	4a46      	ldr	r2, [pc, #280]	; (800a080 <HAL_RCC_OscConfig+0x6d8>)
 8009f68:	f023 0301 	bic.w	r3, r3, #1
 8009f6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8009f70:	4b43      	ldr	r3, [pc, #268]	; (800a080 <HAL_RCC_OscConfig+0x6d8>)
 8009f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f76:	4a42      	ldr	r2, [pc, #264]	; (800a080 <HAL_RCC_OscConfig+0x6d8>)
 8009f78:	f023 0304 	bic.w	r3, r3, #4
 8009f7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	689b      	ldr	r3, [r3, #8]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d016      	beq.n	8009fb6 <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009f88:	f7fb f912 	bl	80051b0 <HAL_GetTick>
 8009f8c:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009f8e:	e00a      	b.n	8009fa6 <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009f90:	f7fb f90e 	bl	80051b0 <HAL_GetTick>
 8009f94:	4602      	mov	r2, r0
 8009f96:	69bb      	ldr	r3, [r7, #24]
 8009f98:	1ad3      	subs	r3, r2, r3
 8009f9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f9e:	4293      	cmp	r3, r2
 8009fa0:	d901      	bls.n	8009fa6 <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 8009fa2:	2303      	movs	r3, #3
 8009fa4:	e172      	b.n	800a28c <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009fa6:	4b36      	ldr	r3, [pc, #216]	; (800a080 <HAL_RCC_OscConfig+0x6d8>)
 8009fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009fac:	f003 0302 	and.w	r3, r3, #2
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d0ed      	beq.n	8009f90 <HAL_RCC_OscConfig+0x5e8>
 8009fb4:	e01d      	b.n	8009ff2 <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009fb6:	f7fb f8fb 	bl	80051b0 <HAL_GetTick>
 8009fba:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009fbc:	e00a      	b.n	8009fd4 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009fbe:	f7fb f8f7 	bl	80051b0 <HAL_GetTick>
 8009fc2:	4602      	mov	r2, r0
 8009fc4:	69bb      	ldr	r3, [r7, #24]
 8009fc6:	1ad3      	subs	r3, r2, r3
 8009fc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8009fcc:	4293      	cmp	r3, r2
 8009fce:	d901      	bls.n	8009fd4 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8009fd0:	2303      	movs	r3, #3
 8009fd2:	e15b      	b.n	800a28c <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009fd4:	4b2a      	ldr	r3, [pc, #168]	; (800a080 <HAL_RCC_OscConfig+0x6d8>)
 8009fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009fda:	f003 0302 	and.w	r3, r3, #2
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d1ed      	bne.n	8009fbe <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8009fe2:	4b27      	ldr	r3, [pc, #156]	; (800a080 <HAL_RCC_OscConfig+0x6d8>)
 8009fe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009fe8:	4a25      	ldr	r2, [pc, #148]	; (800a080 <HAL_RCC_OscConfig+0x6d8>)
 8009fea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009fee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009ff2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009ff6:	2b01      	cmp	r3, #1
 8009ff8:	d105      	bne.n	800a006 <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009ffa:	4b21      	ldr	r3, [pc, #132]	; (800a080 <HAL_RCC_OscConfig+0x6d8>)
 8009ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ffe:	4a20      	ldr	r2, [pc, #128]	; (800a080 <HAL_RCC_OscConfig+0x6d8>)
 800a000:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a004:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	f003 0320 	and.w	r3, r3, #32
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d041      	beq.n	800a096 <HAL_RCC_OscConfig+0x6ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a016:	2b00      	cmp	r3, #0
 800a018:	d01c      	beq.n	800a054 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a01a:	4b19      	ldr	r3, [pc, #100]	; (800a080 <HAL_RCC_OscConfig+0x6d8>)
 800a01c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a020:	4a17      	ldr	r2, [pc, #92]	; (800a080 <HAL_RCC_OscConfig+0x6d8>)
 800a022:	f043 0301 	orr.w	r3, r3, #1
 800a026:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a02a:	f7fb f8c1 	bl	80051b0 <HAL_GetTick>
 800a02e:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800a030:	e008      	b.n	800a044 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a032:	f7fb f8bd 	bl	80051b0 <HAL_GetTick>
 800a036:	4602      	mov	r2, r0
 800a038:	69bb      	ldr	r3, [r7, #24]
 800a03a:	1ad3      	subs	r3, r2, r3
 800a03c:	2b02      	cmp	r3, #2
 800a03e:	d901      	bls.n	800a044 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 800a040:	2303      	movs	r3, #3
 800a042:	e123      	b.n	800a28c <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800a044:	4b0e      	ldr	r3, [pc, #56]	; (800a080 <HAL_RCC_OscConfig+0x6d8>)
 800a046:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a04a:	f003 0302 	and.w	r3, r3, #2
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d0ef      	beq.n	800a032 <HAL_RCC_OscConfig+0x68a>
 800a052:	e020      	b.n	800a096 <HAL_RCC_OscConfig+0x6ee>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a054:	4b0a      	ldr	r3, [pc, #40]	; (800a080 <HAL_RCC_OscConfig+0x6d8>)
 800a056:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a05a:	4a09      	ldr	r2, [pc, #36]	; (800a080 <HAL_RCC_OscConfig+0x6d8>)
 800a05c:	f023 0301 	bic.w	r3, r3, #1
 800a060:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a064:	f7fb f8a4 	bl	80051b0 <HAL_GetTick>
 800a068:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800a06a:	e00d      	b.n	800a088 <HAL_RCC_OscConfig+0x6e0>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a06c:	f7fb f8a0 	bl	80051b0 <HAL_GetTick>
 800a070:	4602      	mov	r2, r0
 800a072:	69bb      	ldr	r3, [r7, #24]
 800a074:	1ad3      	subs	r3, r2, r3
 800a076:	2b02      	cmp	r3, #2
 800a078:	d906      	bls.n	800a088 <HAL_RCC_OscConfig+0x6e0>
        {
          return HAL_TIMEOUT;
 800a07a:	2303      	movs	r3, #3
 800a07c:	e106      	b.n	800a28c <HAL_RCC_OscConfig+0x8e4>
 800a07e:	bf00      	nop
 800a080:	40021000 	.word	0x40021000
 800a084:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800a088:	4b82      	ldr	r3, [pc, #520]	; (800a294 <HAL_RCC_OscConfig+0x8ec>)
 800a08a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a08e:	f003 0302 	and.w	r3, r3, #2
 800a092:	2b00      	cmp	r3, #0
 800a094:	d1ea      	bne.n	800a06c <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	f000 80f5 	beq.w	800a28a <HAL_RCC_OscConfig+0x8e2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0a4:	2b02      	cmp	r3, #2
 800a0a6:	f040 80cb 	bne.w	800a240 <HAL_RCC_OscConfig+0x898>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800a0aa:	4b7a      	ldr	r3, [pc, #488]	; (800a294 <HAL_RCC_OscConfig+0x8ec>)
 800a0ac:	68db      	ldr	r3, [r3, #12]
 800a0ae:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800a0b0:	69fb      	ldr	r3, [r7, #28]
 800a0b2:	f003 0203 	and.w	r2, r3, #3
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0ba:	429a      	cmp	r2, r3
 800a0bc:	d12c      	bne.n	800a118 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800a0be:	69fb      	ldr	r3, [r7, #28]
 800a0c0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0c8:	3b01      	subs	r3, #1
 800a0ca:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800a0cc:	429a      	cmp	r2, r3
 800a0ce:	d123      	bne.n	800a118 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a0d0:	69fb      	ldr	r3, [r7, #28]
 800a0d2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0da:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800a0dc:	429a      	cmp	r2, r3
 800a0de:	d11b      	bne.n	800a118 <HAL_RCC_OscConfig+0x770>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800a0e0:	69fb      	ldr	r3, [r7, #28]
 800a0e2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0ea:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a0ec:	429a      	cmp	r2, r3
 800a0ee:	d113      	bne.n	800a118 <HAL_RCC_OscConfig+0x770>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a0f0:	69fb      	ldr	r3, [r7, #28]
 800a0f2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0fa:	085b      	lsrs	r3, r3, #1
 800a0fc:	3b01      	subs	r3, #1
 800a0fe:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800a100:	429a      	cmp	r2, r3
 800a102:	d109      	bne.n	800a118 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800a104:	69fb      	ldr	r3, [r7, #28]
 800a106:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a10e:	085b      	lsrs	r3, r3, #1
 800a110:	3b01      	subs	r3, #1
 800a112:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a114:	429a      	cmp	r2, r3
 800a116:	d06d      	beq.n	800a1f4 <HAL_RCC_OscConfig+0x84c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800a118:	6a3b      	ldr	r3, [r7, #32]
 800a11a:	2b0c      	cmp	r3, #12
 800a11c:	d068      	beq.n	800a1f0 <HAL_RCC_OscConfig+0x848>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800a11e:	4b5d      	ldr	r3, [pc, #372]	; (800a294 <HAL_RCC_OscConfig+0x8ec>)
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a126:	2b00      	cmp	r3, #0
 800a128:	d105      	bne.n	800a136 <HAL_RCC_OscConfig+0x78e>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800a12a:	4b5a      	ldr	r3, [pc, #360]	; (800a294 <HAL_RCC_OscConfig+0x8ec>)
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a132:	2b00      	cmp	r3, #0
 800a134:	d001      	beq.n	800a13a <HAL_RCC_OscConfig+0x792>
#endif
            )
          {
            return HAL_ERROR;
 800a136:	2301      	movs	r3, #1
 800a138:	e0a8      	b.n	800a28c <HAL_RCC_OscConfig+0x8e4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800a13a:	4b56      	ldr	r3, [pc, #344]	; (800a294 <HAL_RCC_OscConfig+0x8ec>)
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	4a55      	ldr	r2, [pc, #340]	; (800a294 <HAL_RCC_OscConfig+0x8ec>)
 800a140:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a144:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800a146:	f7fb f833 	bl	80051b0 <HAL_GetTick>
 800a14a:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a14c:	e008      	b.n	800a160 <HAL_RCC_OscConfig+0x7b8>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a14e:	f7fb f82f 	bl	80051b0 <HAL_GetTick>
 800a152:	4602      	mov	r2, r0
 800a154:	69bb      	ldr	r3, [r7, #24]
 800a156:	1ad3      	subs	r3, r2, r3
 800a158:	2b02      	cmp	r3, #2
 800a15a:	d901      	bls.n	800a160 <HAL_RCC_OscConfig+0x7b8>
              {
                return HAL_TIMEOUT;
 800a15c:	2303      	movs	r3, #3
 800a15e:	e095      	b.n	800a28c <HAL_RCC_OscConfig+0x8e4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a160:	4b4c      	ldr	r3, [pc, #304]	; (800a294 <HAL_RCC_OscConfig+0x8ec>)
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d1f0      	bne.n	800a14e <HAL_RCC_OscConfig+0x7a6>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a16c:	4b49      	ldr	r3, [pc, #292]	; (800a294 <HAL_RCC_OscConfig+0x8ec>)
 800a16e:	68da      	ldr	r2, [r3, #12]
 800a170:	4b49      	ldr	r3, [pc, #292]	; (800a298 <HAL_RCC_OscConfig+0x8f0>)
 800a172:	4013      	ands	r3, r2
 800a174:	687a      	ldr	r2, [r7, #4]
 800a176:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800a178:	687a      	ldr	r2, [r7, #4]
 800a17a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800a17c:	3a01      	subs	r2, #1
 800a17e:	0112      	lsls	r2, r2, #4
 800a180:	4311      	orrs	r1, r2
 800a182:	687a      	ldr	r2, [r7, #4]
 800a184:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a186:	0212      	lsls	r2, r2, #8
 800a188:	4311      	orrs	r1, r2
 800a18a:	687a      	ldr	r2, [r7, #4]
 800a18c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800a18e:	0852      	lsrs	r2, r2, #1
 800a190:	3a01      	subs	r2, #1
 800a192:	0552      	lsls	r2, r2, #21
 800a194:	4311      	orrs	r1, r2
 800a196:	687a      	ldr	r2, [r7, #4]
 800a198:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800a19a:	0852      	lsrs	r2, r2, #1
 800a19c:	3a01      	subs	r2, #1
 800a19e:	0652      	lsls	r2, r2, #25
 800a1a0:	4311      	orrs	r1, r2
 800a1a2:	687a      	ldr	r2, [r7, #4]
 800a1a4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800a1a6:	06d2      	lsls	r2, r2, #27
 800a1a8:	430a      	orrs	r2, r1
 800a1aa:	493a      	ldr	r1, [pc, #232]	; (800a294 <HAL_RCC_OscConfig+0x8ec>)
 800a1ac:	4313      	orrs	r3, r2
 800a1ae:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800a1b0:	4b38      	ldr	r3, [pc, #224]	; (800a294 <HAL_RCC_OscConfig+0x8ec>)
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	4a37      	ldr	r2, [pc, #220]	; (800a294 <HAL_RCC_OscConfig+0x8ec>)
 800a1b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a1ba:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800a1bc:	4b35      	ldr	r3, [pc, #212]	; (800a294 <HAL_RCC_OscConfig+0x8ec>)
 800a1be:	68db      	ldr	r3, [r3, #12]
 800a1c0:	4a34      	ldr	r2, [pc, #208]	; (800a294 <HAL_RCC_OscConfig+0x8ec>)
 800a1c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a1c6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800a1c8:	f7fa fff2 	bl	80051b0 <HAL_GetTick>
 800a1cc:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a1ce:	e008      	b.n	800a1e2 <HAL_RCC_OscConfig+0x83a>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a1d0:	f7fa ffee 	bl	80051b0 <HAL_GetTick>
 800a1d4:	4602      	mov	r2, r0
 800a1d6:	69bb      	ldr	r3, [r7, #24]
 800a1d8:	1ad3      	subs	r3, r2, r3
 800a1da:	2b02      	cmp	r3, #2
 800a1dc:	d901      	bls.n	800a1e2 <HAL_RCC_OscConfig+0x83a>
              {
                return HAL_TIMEOUT;
 800a1de:	2303      	movs	r3, #3
 800a1e0:	e054      	b.n	800a28c <HAL_RCC_OscConfig+0x8e4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a1e2:	4b2c      	ldr	r3, [pc, #176]	; (800a294 <HAL_RCC_OscConfig+0x8ec>)
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d0f0      	beq.n	800a1d0 <HAL_RCC_OscConfig+0x828>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800a1ee:	e04c      	b.n	800a28a <HAL_RCC_OscConfig+0x8e2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800a1f0:	2301      	movs	r3, #1
 800a1f2:	e04b      	b.n	800a28c <HAL_RCC_OscConfig+0x8e4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a1f4:	4b27      	ldr	r3, [pc, #156]	; (800a294 <HAL_RCC_OscConfig+0x8ec>)
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d144      	bne.n	800a28a <HAL_RCC_OscConfig+0x8e2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800a200:	4b24      	ldr	r3, [pc, #144]	; (800a294 <HAL_RCC_OscConfig+0x8ec>)
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	4a23      	ldr	r2, [pc, #140]	; (800a294 <HAL_RCC_OscConfig+0x8ec>)
 800a206:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a20a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800a20c:	4b21      	ldr	r3, [pc, #132]	; (800a294 <HAL_RCC_OscConfig+0x8ec>)
 800a20e:	68db      	ldr	r3, [r3, #12]
 800a210:	4a20      	ldr	r2, [pc, #128]	; (800a294 <HAL_RCC_OscConfig+0x8ec>)
 800a212:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a216:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a218:	f7fa ffca 	bl	80051b0 <HAL_GetTick>
 800a21c:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a21e:	e008      	b.n	800a232 <HAL_RCC_OscConfig+0x88a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a220:	f7fa ffc6 	bl	80051b0 <HAL_GetTick>
 800a224:	4602      	mov	r2, r0
 800a226:	69bb      	ldr	r3, [r7, #24]
 800a228:	1ad3      	subs	r3, r2, r3
 800a22a:	2b02      	cmp	r3, #2
 800a22c:	d901      	bls.n	800a232 <HAL_RCC_OscConfig+0x88a>
            {
              return HAL_TIMEOUT;
 800a22e:	2303      	movs	r3, #3
 800a230:	e02c      	b.n	800a28c <HAL_RCC_OscConfig+0x8e4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a232:	4b18      	ldr	r3, [pc, #96]	; (800a294 <HAL_RCC_OscConfig+0x8ec>)
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d0f0      	beq.n	800a220 <HAL_RCC_OscConfig+0x878>
 800a23e:	e024      	b.n	800a28a <HAL_RCC_OscConfig+0x8e2>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800a240:	6a3b      	ldr	r3, [r7, #32]
 800a242:	2b0c      	cmp	r3, #12
 800a244:	d01f      	beq.n	800a286 <HAL_RCC_OscConfig+0x8de>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a246:	4b13      	ldr	r3, [pc, #76]	; (800a294 <HAL_RCC_OscConfig+0x8ec>)
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	4a12      	ldr	r2, [pc, #72]	; (800a294 <HAL_RCC_OscConfig+0x8ec>)
 800a24c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a250:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a252:	f7fa ffad 	bl	80051b0 <HAL_GetTick>
 800a256:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a258:	e008      	b.n	800a26c <HAL_RCC_OscConfig+0x8c4>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a25a:	f7fa ffa9 	bl	80051b0 <HAL_GetTick>
 800a25e:	4602      	mov	r2, r0
 800a260:	69bb      	ldr	r3, [r7, #24]
 800a262:	1ad3      	subs	r3, r2, r3
 800a264:	2b02      	cmp	r3, #2
 800a266:	d901      	bls.n	800a26c <HAL_RCC_OscConfig+0x8c4>
          {
            return HAL_TIMEOUT;
 800a268:	2303      	movs	r3, #3
 800a26a:	e00f      	b.n	800a28c <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a26c:	4b09      	ldr	r3, [pc, #36]	; (800a294 <HAL_RCC_OscConfig+0x8ec>)
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a274:	2b00      	cmp	r3, #0
 800a276:	d1f0      	bne.n	800a25a <HAL_RCC_OscConfig+0x8b2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800a278:	4b06      	ldr	r3, [pc, #24]	; (800a294 <HAL_RCC_OscConfig+0x8ec>)
 800a27a:	68da      	ldr	r2, [r3, #12]
 800a27c:	4905      	ldr	r1, [pc, #20]	; (800a294 <HAL_RCC_OscConfig+0x8ec>)
 800a27e:	4b07      	ldr	r3, [pc, #28]	; (800a29c <HAL_RCC_OscConfig+0x8f4>)
 800a280:	4013      	ands	r3, r2
 800a282:	60cb      	str	r3, [r1, #12]
 800a284:	e001      	b.n	800a28a <HAL_RCC_OscConfig+0x8e2>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800a286:	2301      	movs	r3, #1
 800a288:	e000      	b.n	800a28c <HAL_RCC_OscConfig+0x8e4>
      }
    }
  }
  return HAL_OK;
 800a28a:	2300      	movs	r3, #0
}
 800a28c:	4618      	mov	r0, r3
 800a28e:	3728      	adds	r7, #40	; 0x28
 800a290:	46bd      	mov	sp, r7
 800a292:	bd80      	pop	{r7, pc}
 800a294:	40021000 	.word	0x40021000
 800a298:	019d800c 	.word	0x019d800c
 800a29c:	feeefffc 	.word	0xfeeefffc

0800a2a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	b086      	sub	sp, #24
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	6078      	str	r0, [r7, #4]
 800a2a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d101      	bne.n	800a2b8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800a2b4:	2301      	movs	r3, #1
 800a2b6:	e11d      	b.n	800a4f4 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a2b8:	4b90      	ldr	r3, [pc, #576]	; (800a4fc <HAL_RCC_ClockConfig+0x25c>)
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	f003 030f 	and.w	r3, r3, #15
 800a2c0:	683a      	ldr	r2, [r7, #0]
 800a2c2:	429a      	cmp	r2, r3
 800a2c4:	d910      	bls.n	800a2e8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a2c6:	4b8d      	ldr	r3, [pc, #564]	; (800a4fc <HAL_RCC_ClockConfig+0x25c>)
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	f023 020f 	bic.w	r2, r3, #15
 800a2ce:	498b      	ldr	r1, [pc, #556]	; (800a4fc <HAL_RCC_ClockConfig+0x25c>)
 800a2d0:	683b      	ldr	r3, [r7, #0]
 800a2d2:	4313      	orrs	r3, r2
 800a2d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a2d6:	4b89      	ldr	r3, [pc, #548]	; (800a4fc <HAL_RCC_ClockConfig+0x25c>)
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	f003 030f 	and.w	r3, r3, #15
 800a2de:	683a      	ldr	r2, [r7, #0]
 800a2e0:	429a      	cmp	r2, r3
 800a2e2:	d001      	beq.n	800a2e8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800a2e4:	2301      	movs	r3, #1
 800a2e6:	e105      	b.n	800a4f4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	f003 0302 	and.w	r3, r3, #2
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d010      	beq.n	800a316 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	689a      	ldr	r2, [r3, #8]
 800a2f8:	4b81      	ldr	r3, [pc, #516]	; (800a500 <HAL_RCC_ClockConfig+0x260>)
 800a2fa:	689b      	ldr	r3, [r3, #8]
 800a2fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a300:	429a      	cmp	r2, r3
 800a302:	d908      	bls.n	800a316 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a304:	4b7e      	ldr	r3, [pc, #504]	; (800a500 <HAL_RCC_ClockConfig+0x260>)
 800a306:	689b      	ldr	r3, [r3, #8]
 800a308:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	689b      	ldr	r3, [r3, #8]
 800a310:	497b      	ldr	r1, [pc, #492]	; (800a500 <HAL_RCC_ClockConfig+0x260>)
 800a312:	4313      	orrs	r3, r2
 800a314:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	f003 0301 	and.w	r3, r3, #1
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d079      	beq.n	800a416 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	685b      	ldr	r3, [r3, #4]
 800a326:	2b03      	cmp	r3, #3
 800a328:	d11e      	bne.n	800a368 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a32a:	4b75      	ldr	r3, [pc, #468]	; (800a500 <HAL_RCC_ClockConfig+0x260>)
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a332:	2b00      	cmp	r3, #0
 800a334:	d101      	bne.n	800a33a <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800a336:	2301      	movs	r3, #1
 800a338:	e0dc      	b.n	800a4f4 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800a33a:	f000 fa23 	bl	800a784 <RCC_GetSysClockFreqFromPLLSource>
 800a33e:	4603      	mov	r3, r0
 800a340:	4a70      	ldr	r2, [pc, #448]	; (800a504 <HAL_RCC_ClockConfig+0x264>)
 800a342:	4293      	cmp	r3, r2
 800a344:	d946      	bls.n	800a3d4 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800a346:	4b6e      	ldr	r3, [pc, #440]	; (800a500 <HAL_RCC_ClockConfig+0x260>)
 800a348:	689b      	ldr	r3, [r3, #8]
 800a34a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d140      	bne.n	800a3d4 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800a352:	4b6b      	ldr	r3, [pc, #428]	; (800a500 <HAL_RCC_ClockConfig+0x260>)
 800a354:	689b      	ldr	r3, [r3, #8]
 800a356:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a35a:	4a69      	ldr	r2, [pc, #420]	; (800a500 <HAL_RCC_ClockConfig+0x260>)
 800a35c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a360:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800a362:	2380      	movs	r3, #128	; 0x80
 800a364:	617b      	str	r3, [r7, #20]
 800a366:	e035      	b.n	800a3d4 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	685b      	ldr	r3, [r3, #4]
 800a36c:	2b02      	cmp	r3, #2
 800a36e:	d107      	bne.n	800a380 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a370:	4b63      	ldr	r3, [pc, #396]	; (800a500 <HAL_RCC_ClockConfig+0x260>)
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d115      	bne.n	800a3a8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800a37c:	2301      	movs	r3, #1
 800a37e:	e0b9      	b.n	800a4f4 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	685b      	ldr	r3, [r3, #4]
 800a384:	2b00      	cmp	r3, #0
 800a386:	d107      	bne.n	800a398 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800a388:	4b5d      	ldr	r3, [pc, #372]	; (800a500 <HAL_RCC_ClockConfig+0x260>)
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	f003 0302 	and.w	r3, r3, #2
 800a390:	2b00      	cmp	r3, #0
 800a392:	d109      	bne.n	800a3a8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800a394:	2301      	movs	r3, #1
 800a396:	e0ad      	b.n	800a4f4 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a398:	4b59      	ldr	r3, [pc, #356]	; (800a500 <HAL_RCC_ClockConfig+0x260>)
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d101      	bne.n	800a3a8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800a3a4:	2301      	movs	r3, #1
 800a3a6:	e0a5      	b.n	800a4f4 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800a3a8:	f000 f8b4 	bl	800a514 <HAL_RCC_GetSysClockFreq>
 800a3ac:	4603      	mov	r3, r0
 800a3ae:	4a55      	ldr	r2, [pc, #340]	; (800a504 <HAL_RCC_ClockConfig+0x264>)
 800a3b0:	4293      	cmp	r3, r2
 800a3b2:	d90f      	bls.n	800a3d4 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800a3b4:	4b52      	ldr	r3, [pc, #328]	; (800a500 <HAL_RCC_ClockConfig+0x260>)
 800a3b6:	689b      	ldr	r3, [r3, #8]
 800a3b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d109      	bne.n	800a3d4 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800a3c0:	4b4f      	ldr	r3, [pc, #316]	; (800a500 <HAL_RCC_ClockConfig+0x260>)
 800a3c2:	689b      	ldr	r3, [r3, #8]
 800a3c4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a3c8:	4a4d      	ldr	r2, [pc, #308]	; (800a500 <HAL_RCC_ClockConfig+0x260>)
 800a3ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3ce:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800a3d0:	2380      	movs	r3, #128	; 0x80
 800a3d2:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a3d4:	4b4a      	ldr	r3, [pc, #296]	; (800a500 <HAL_RCC_ClockConfig+0x260>)
 800a3d6:	689b      	ldr	r3, [r3, #8]
 800a3d8:	f023 0203 	bic.w	r2, r3, #3
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	685b      	ldr	r3, [r3, #4]
 800a3e0:	4947      	ldr	r1, [pc, #284]	; (800a500 <HAL_RCC_ClockConfig+0x260>)
 800a3e2:	4313      	orrs	r3, r2
 800a3e4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a3e6:	f7fa fee3 	bl	80051b0 <HAL_GetTick>
 800a3ea:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a3ec:	e00a      	b.n	800a404 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a3ee:	f7fa fedf 	bl	80051b0 <HAL_GetTick>
 800a3f2:	4602      	mov	r2, r0
 800a3f4:	693b      	ldr	r3, [r7, #16]
 800a3f6:	1ad3      	subs	r3, r2, r3
 800a3f8:	f241 3288 	movw	r2, #5000	; 0x1388
 800a3fc:	4293      	cmp	r3, r2
 800a3fe:	d901      	bls.n	800a404 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 800a400:	2303      	movs	r3, #3
 800a402:	e077      	b.n	800a4f4 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a404:	4b3e      	ldr	r3, [pc, #248]	; (800a500 <HAL_RCC_ClockConfig+0x260>)
 800a406:	689b      	ldr	r3, [r3, #8]
 800a408:	f003 020c 	and.w	r2, r3, #12
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	685b      	ldr	r3, [r3, #4]
 800a410:	009b      	lsls	r3, r3, #2
 800a412:	429a      	cmp	r2, r3
 800a414:	d1eb      	bne.n	800a3ee <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800a416:	697b      	ldr	r3, [r7, #20]
 800a418:	2b80      	cmp	r3, #128	; 0x80
 800a41a:	d105      	bne.n	800a428 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800a41c:	4b38      	ldr	r3, [pc, #224]	; (800a500 <HAL_RCC_ClockConfig+0x260>)
 800a41e:	689b      	ldr	r3, [r3, #8]
 800a420:	4a37      	ldr	r2, [pc, #220]	; (800a500 <HAL_RCC_ClockConfig+0x260>)
 800a422:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a426:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	f003 0302 	and.w	r3, r3, #2
 800a430:	2b00      	cmp	r3, #0
 800a432:	d010      	beq.n	800a456 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	689a      	ldr	r2, [r3, #8]
 800a438:	4b31      	ldr	r3, [pc, #196]	; (800a500 <HAL_RCC_ClockConfig+0x260>)
 800a43a:	689b      	ldr	r3, [r3, #8]
 800a43c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a440:	429a      	cmp	r2, r3
 800a442:	d208      	bcs.n	800a456 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a444:	4b2e      	ldr	r3, [pc, #184]	; (800a500 <HAL_RCC_ClockConfig+0x260>)
 800a446:	689b      	ldr	r3, [r3, #8]
 800a448:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	689b      	ldr	r3, [r3, #8]
 800a450:	492b      	ldr	r1, [pc, #172]	; (800a500 <HAL_RCC_ClockConfig+0x260>)
 800a452:	4313      	orrs	r3, r2
 800a454:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a456:	4b29      	ldr	r3, [pc, #164]	; (800a4fc <HAL_RCC_ClockConfig+0x25c>)
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	f003 030f 	and.w	r3, r3, #15
 800a45e:	683a      	ldr	r2, [r7, #0]
 800a460:	429a      	cmp	r2, r3
 800a462:	d210      	bcs.n	800a486 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a464:	4b25      	ldr	r3, [pc, #148]	; (800a4fc <HAL_RCC_ClockConfig+0x25c>)
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	f023 020f 	bic.w	r2, r3, #15
 800a46c:	4923      	ldr	r1, [pc, #140]	; (800a4fc <HAL_RCC_ClockConfig+0x25c>)
 800a46e:	683b      	ldr	r3, [r7, #0]
 800a470:	4313      	orrs	r3, r2
 800a472:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a474:	4b21      	ldr	r3, [pc, #132]	; (800a4fc <HAL_RCC_ClockConfig+0x25c>)
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	f003 030f 	and.w	r3, r3, #15
 800a47c:	683a      	ldr	r2, [r7, #0]
 800a47e:	429a      	cmp	r2, r3
 800a480:	d001      	beq.n	800a486 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 800a482:	2301      	movs	r3, #1
 800a484:	e036      	b.n	800a4f4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	f003 0304 	and.w	r3, r3, #4
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d008      	beq.n	800a4a4 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a492:	4b1b      	ldr	r3, [pc, #108]	; (800a500 <HAL_RCC_ClockConfig+0x260>)
 800a494:	689b      	ldr	r3, [r3, #8]
 800a496:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	68db      	ldr	r3, [r3, #12]
 800a49e:	4918      	ldr	r1, [pc, #96]	; (800a500 <HAL_RCC_ClockConfig+0x260>)
 800a4a0:	4313      	orrs	r3, r2
 800a4a2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	f003 0308 	and.w	r3, r3, #8
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d009      	beq.n	800a4c4 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a4b0:	4b13      	ldr	r3, [pc, #76]	; (800a500 <HAL_RCC_ClockConfig+0x260>)
 800a4b2:	689b      	ldr	r3, [r3, #8]
 800a4b4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	691b      	ldr	r3, [r3, #16]
 800a4bc:	00db      	lsls	r3, r3, #3
 800a4be:	4910      	ldr	r1, [pc, #64]	; (800a500 <HAL_RCC_ClockConfig+0x260>)
 800a4c0:	4313      	orrs	r3, r2
 800a4c2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800a4c4:	f000 f826 	bl	800a514 <HAL_RCC_GetSysClockFreq>
 800a4c8:	4602      	mov	r2, r0
 800a4ca:	4b0d      	ldr	r3, [pc, #52]	; (800a500 <HAL_RCC_ClockConfig+0x260>)
 800a4cc:	689b      	ldr	r3, [r3, #8]
 800a4ce:	091b      	lsrs	r3, r3, #4
 800a4d0:	f003 030f 	and.w	r3, r3, #15
 800a4d4:	490c      	ldr	r1, [pc, #48]	; (800a508 <HAL_RCC_ClockConfig+0x268>)
 800a4d6:	5ccb      	ldrb	r3, [r1, r3]
 800a4d8:	f003 031f 	and.w	r3, r3, #31
 800a4dc:	fa22 f303 	lsr.w	r3, r2, r3
 800a4e0:	4a0a      	ldr	r2, [pc, #40]	; (800a50c <HAL_RCC_ClockConfig+0x26c>)
 800a4e2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800a4e4:	4b0a      	ldr	r3, [pc, #40]	; (800a510 <HAL_RCC_ClockConfig+0x270>)
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	f7fa fc73 	bl	8004dd4 <HAL_InitTick>
 800a4ee:	4603      	mov	r3, r0
 800a4f0:	73fb      	strb	r3, [r7, #15]

  return status;
 800a4f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	3718      	adds	r7, #24
 800a4f8:	46bd      	mov	sp, r7
 800a4fa:	bd80      	pop	{r7, pc}
 800a4fc:	40022000 	.word	0x40022000
 800a500:	40021000 	.word	0x40021000
 800a504:	04c4b400 	.word	0x04c4b400
 800a508:	08016d10 	.word	0x08016d10
 800a50c:	20000224 	.word	0x20000224
 800a510:	20000228 	.word	0x20000228

0800a514 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a514:	b480      	push	{r7}
 800a516:	b089      	sub	sp, #36	; 0x24
 800a518:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800a51a:	2300      	movs	r3, #0
 800a51c:	61fb      	str	r3, [r7, #28]
 800a51e:	2300      	movs	r3, #0
 800a520:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a522:	4b3e      	ldr	r3, [pc, #248]	; (800a61c <HAL_RCC_GetSysClockFreq+0x108>)
 800a524:	689b      	ldr	r3, [r3, #8]
 800a526:	f003 030c 	and.w	r3, r3, #12
 800a52a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a52c:	4b3b      	ldr	r3, [pc, #236]	; (800a61c <HAL_RCC_GetSysClockFreq+0x108>)
 800a52e:	68db      	ldr	r3, [r3, #12]
 800a530:	f003 0303 	and.w	r3, r3, #3
 800a534:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800a536:	693b      	ldr	r3, [r7, #16]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d005      	beq.n	800a548 <HAL_RCC_GetSysClockFreq+0x34>
 800a53c:	693b      	ldr	r3, [r7, #16]
 800a53e:	2b0c      	cmp	r3, #12
 800a540:	d121      	bne.n	800a586 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	2b01      	cmp	r3, #1
 800a546:	d11e      	bne.n	800a586 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800a548:	4b34      	ldr	r3, [pc, #208]	; (800a61c <HAL_RCC_GetSysClockFreq+0x108>)
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	f003 0308 	and.w	r3, r3, #8
 800a550:	2b00      	cmp	r3, #0
 800a552:	d107      	bne.n	800a564 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800a554:	4b31      	ldr	r3, [pc, #196]	; (800a61c <HAL_RCC_GetSysClockFreq+0x108>)
 800a556:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a55a:	0a1b      	lsrs	r3, r3, #8
 800a55c:	f003 030f 	and.w	r3, r3, #15
 800a560:	61fb      	str	r3, [r7, #28]
 800a562:	e005      	b.n	800a570 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800a564:	4b2d      	ldr	r3, [pc, #180]	; (800a61c <HAL_RCC_GetSysClockFreq+0x108>)
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	091b      	lsrs	r3, r3, #4
 800a56a:	f003 030f 	and.w	r3, r3, #15
 800a56e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800a570:	4a2b      	ldr	r2, [pc, #172]	; (800a620 <HAL_RCC_GetSysClockFreq+0x10c>)
 800a572:	69fb      	ldr	r3, [r7, #28]
 800a574:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a578:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800a57a:	693b      	ldr	r3, [r7, #16]
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d10d      	bne.n	800a59c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800a580:	69fb      	ldr	r3, [r7, #28]
 800a582:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800a584:	e00a      	b.n	800a59c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800a586:	693b      	ldr	r3, [r7, #16]
 800a588:	2b04      	cmp	r3, #4
 800a58a:	d102      	bne.n	800a592 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800a58c:	4b25      	ldr	r3, [pc, #148]	; (800a624 <HAL_RCC_GetSysClockFreq+0x110>)
 800a58e:	61bb      	str	r3, [r7, #24]
 800a590:	e004      	b.n	800a59c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800a592:	693b      	ldr	r3, [r7, #16]
 800a594:	2b08      	cmp	r3, #8
 800a596:	d101      	bne.n	800a59c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800a598:	4b22      	ldr	r3, [pc, #136]	; (800a624 <HAL_RCC_GetSysClockFreq+0x110>)
 800a59a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800a59c:	693b      	ldr	r3, [r7, #16]
 800a59e:	2b0c      	cmp	r3, #12
 800a5a0:	d134      	bne.n	800a60c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800a5a2:	4b1e      	ldr	r3, [pc, #120]	; (800a61c <HAL_RCC_GetSysClockFreq+0x108>)
 800a5a4:	68db      	ldr	r3, [r3, #12]
 800a5a6:	f003 0303 	and.w	r3, r3, #3
 800a5aa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800a5ac:	68bb      	ldr	r3, [r7, #8]
 800a5ae:	2b02      	cmp	r3, #2
 800a5b0:	d003      	beq.n	800a5ba <HAL_RCC_GetSysClockFreq+0xa6>
 800a5b2:	68bb      	ldr	r3, [r7, #8]
 800a5b4:	2b03      	cmp	r3, #3
 800a5b6:	d003      	beq.n	800a5c0 <HAL_RCC_GetSysClockFreq+0xac>
 800a5b8:	e005      	b.n	800a5c6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800a5ba:	4b1a      	ldr	r3, [pc, #104]	; (800a624 <HAL_RCC_GetSysClockFreq+0x110>)
 800a5bc:	617b      	str	r3, [r7, #20]
      break;
 800a5be:	e005      	b.n	800a5cc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800a5c0:	4b18      	ldr	r3, [pc, #96]	; (800a624 <HAL_RCC_GetSysClockFreq+0x110>)
 800a5c2:	617b      	str	r3, [r7, #20]
      break;
 800a5c4:	e002      	b.n	800a5cc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800a5c6:	69fb      	ldr	r3, [r7, #28]
 800a5c8:	617b      	str	r3, [r7, #20]
      break;
 800a5ca:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800a5cc:	4b13      	ldr	r3, [pc, #76]	; (800a61c <HAL_RCC_GetSysClockFreq+0x108>)
 800a5ce:	68db      	ldr	r3, [r3, #12]
 800a5d0:	091b      	lsrs	r3, r3, #4
 800a5d2:	f003 030f 	and.w	r3, r3, #15
 800a5d6:	3301      	adds	r3, #1
 800a5d8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800a5da:	4b10      	ldr	r3, [pc, #64]	; (800a61c <HAL_RCC_GetSysClockFreq+0x108>)
 800a5dc:	68db      	ldr	r3, [r3, #12]
 800a5de:	0a1b      	lsrs	r3, r3, #8
 800a5e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a5e4:	697a      	ldr	r2, [r7, #20]
 800a5e6:	fb03 f202 	mul.w	r2, r3, r2
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5f0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800a5f2:	4b0a      	ldr	r3, [pc, #40]	; (800a61c <HAL_RCC_GetSysClockFreq+0x108>)
 800a5f4:	68db      	ldr	r3, [r3, #12]
 800a5f6:	0e5b      	lsrs	r3, r3, #25
 800a5f8:	f003 0303 	and.w	r3, r3, #3
 800a5fc:	3301      	adds	r3, #1
 800a5fe:	005b      	lsls	r3, r3, #1
 800a600:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800a602:	697a      	ldr	r2, [r7, #20]
 800a604:	683b      	ldr	r3, [r7, #0]
 800a606:	fbb2 f3f3 	udiv	r3, r2, r3
 800a60a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800a60c:	69bb      	ldr	r3, [r7, #24]
}
 800a60e:	4618      	mov	r0, r3
 800a610:	3724      	adds	r7, #36	; 0x24
 800a612:	46bd      	mov	sp, r7
 800a614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a618:	4770      	bx	lr
 800a61a:	bf00      	nop
 800a61c:	40021000 	.word	0x40021000
 800a620:	08016d28 	.word	0x08016d28
 800a624:	00f42400 	.word	0x00f42400

0800a628 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a628:	b480      	push	{r7}
 800a62a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a62c:	4b03      	ldr	r3, [pc, #12]	; (800a63c <HAL_RCC_GetHCLKFreq+0x14>)
 800a62e:	681b      	ldr	r3, [r3, #0]
}
 800a630:	4618      	mov	r0, r3
 800a632:	46bd      	mov	sp, r7
 800a634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a638:	4770      	bx	lr
 800a63a:	bf00      	nop
 800a63c:	20000224 	.word	0x20000224

0800a640 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a640:	b580      	push	{r7, lr}
 800a642:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800a644:	f7ff fff0 	bl	800a628 <HAL_RCC_GetHCLKFreq>
 800a648:	4602      	mov	r2, r0
 800a64a:	4b06      	ldr	r3, [pc, #24]	; (800a664 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a64c:	689b      	ldr	r3, [r3, #8]
 800a64e:	0adb      	lsrs	r3, r3, #11
 800a650:	f003 0307 	and.w	r3, r3, #7
 800a654:	4904      	ldr	r1, [pc, #16]	; (800a668 <HAL_RCC_GetPCLK2Freq+0x28>)
 800a656:	5ccb      	ldrb	r3, [r1, r3]
 800a658:	f003 031f 	and.w	r3, r3, #31
 800a65c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a660:	4618      	mov	r0, r3
 800a662:	bd80      	pop	{r7, pc}
 800a664:	40021000 	.word	0x40021000
 800a668:	08016d20 	.word	0x08016d20

0800a66c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800a66c:	b480      	push	{r7}
 800a66e:	b083      	sub	sp, #12
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
 800a674:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	220f      	movs	r2, #15
 800a67a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800a67c:	4b12      	ldr	r3, [pc, #72]	; (800a6c8 <HAL_RCC_GetClockConfig+0x5c>)
 800a67e:	689b      	ldr	r3, [r3, #8]
 800a680:	f003 0203 	and.w	r2, r3, #3
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800a688:	4b0f      	ldr	r3, [pc, #60]	; (800a6c8 <HAL_RCC_GetClockConfig+0x5c>)
 800a68a:	689b      	ldr	r3, [r3, #8]
 800a68c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800a694:	4b0c      	ldr	r3, [pc, #48]	; (800a6c8 <HAL_RCC_GetClockConfig+0x5c>)
 800a696:	689b      	ldr	r3, [r3, #8]
 800a698:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800a6a0:	4b09      	ldr	r3, [pc, #36]	; (800a6c8 <HAL_RCC_GetClockConfig+0x5c>)
 800a6a2:	689b      	ldr	r3, [r3, #8]
 800a6a4:	08db      	lsrs	r3, r3, #3
 800a6a6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800a6ae:	4b07      	ldr	r3, [pc, #28]	; (800a6cc <HAL_RCC_GetClockConfig+0x60>)
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	f003 020f 	and.w	r2, r3, #15
 800a6b6:	683b      	ldr	r3, [r7, #0]
 800a6b8:	601a      	str	r2, [r3, #0]
}
 800a6ba:	bf00      	nop
 800a6bc:	370c      	adds	r7, #12
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c4:	4770      	bx	lr
 800a6c6:	bf00      	nop
 800a6c8:	40021000 	.word	0x40021000
 800a6cc:	40022000 	.word	0x40022000

0800a6d0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800a6d0:	b580      	push	{r7, lr}
 800a6d2:	b086      	sub	sp, #24
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800a6d8:	2300      	movs	r3, #0
 800a6da:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800a6dc:	4b27      	ldr	r3, [pc, #156]	; (800a77c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800a6de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d003      	beq.n	800a6f0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800a6e8:	f7ff f834 	bl	8009754 <HAL_PWREx_GetVoltageRange>
 800a6ec:	6178      	str	r0, [r7, #20]
 800a6ee:	e014      	b.n	800a71a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800a6f0:	4b22      	ldr	r3, [pc, #136]	; (800a77c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800a6f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6f4:	4a21      	ldr	r2, [pc, #132]	; (800a77c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800a6f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a6fa:	6593      	str	r3, [r2, #88]	; 0x58
 800a6fc:	4b1f      	ldr	r3, [pc, #124]	; (800a77c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800a6fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a700:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a704:	60fb      	str	r3, [r7, #12]
 800a706:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800a708:	f7ff f824 	bl	8009754 <HAL_PWREx_GetVoltageRange>
 800a70c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800a70e:	4b1b      	ldr	r3, [pc, #108]	; (800a77c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800a710:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a712:	4a1a      	ldr	r2, [pc, #104]	; (800a77c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800a714:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a718:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800a71a:	697b      	ldr	r3, [r7, #20]
 800a71c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a720:	d10b      	bne.n	800a73a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	2b80      	cmp	r3, #128	; 0x80
 800a726:	d913      	bls.n	800a750 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	2ba0      	cmp	r3, #160	; 0xa0
 800a72c:	d902      	bls.n	800a734 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800a72e:	2302      	movs	r3, #2
 800a730:	613b      	str	r3, [r7, #16]
 800a732:	e00d      	b.n	800a750 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800a734:	2301      	movs	r3, #1
 800a736:	613b      	str	r3, [r7, #16]
 800a738:	e00a      	b.n	800a750 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	2b7f      	cmp	r3, #127	; 0x7f
 800a73e:	d902      	bls.n	800a746 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 800a740:	2302      	movs	r3, #2
 800a742:	613b      	str	r3, [r7, #16]
 800a744:	e004      	b.n	800a750 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	2b70      	cmp	r3, #112	; 0x70
 800a74a:	d101      	bne.n	800a750 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800a74c:	2301      	movs	r3, #1
 800a74e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800a750:	4b0b      	ldr	r3, [pc, #44]	; (800a780 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	f023 020f 	bic.w	r2, r3, #15
 800a758:	4909      	ldr	r1, [pc, #36]	; (800a780 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800a75a:	693b      	ldr	r3, [r7, #16]
 800a75c:	4313      	orrs	r3, r2
 800a75e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800a760:	4b07      	ldr	r3, [pc, #28]	; (800a780 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	f003 030f 	and.w	r3, r3, #15
 800a768:	693a      	ldr	r2, [r7, #16]
 800a76a:	429a      	cmp	r2, r3
 800a76c:	d001      	beq.n	800a772 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800a76e:	2301      	movs	r3, #1
 800a770:	e000      	b.n	800a774 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800a772:	2300      	movs	r3, #0
}
 800a774:	4618      	mov	r0, r3
 800a776:	3718      	adds	r7, #24
 800a778:	46bd      	mov	sp, r7
 800a77a:	bd80      	pop	{r7, pc}
 800a77c:	40021000 	.word	0x40021000
 800a780:	40022000 	.word	0x40022000

0800a784 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800a784:	b480      	push	{r7}
 800a786:	b087      	sub	sp, #28
 800a788:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800a78a:	4b2d      	ldr	r3, [pc, #180]	; (800a840 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800a78c:	68db      	ldr	r3, [r3, #12]
 800a78e:	f003 0303 	and.w	r3, r3, #3
 800a792:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	2b03      	cmp	r3, #3
 800a798:	d00b      	beq.n	800a7b2 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	2b03      	cmp	r3, #3
 800a79e:	d825      	bhi.n	800a7ec <RCC_GetSysClockFreqFromPLLSource+0x68>
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	2b01      	cmp	r3, #1
 800a7a4:	d008      	beq.n	800a7b8 <RCC_GetSysClockFreqFromPLLSource+0x34>
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	2b02      	cmp	r3, #2
 800a7aa:	d11f      	bne.n	800a7ec <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 800a7ac:	4b25      	ldr	r3, [pc, #148]	; (800a844 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800a7ae:	613b      	str	r3, [r7, #16]
    break;
 800a7b0:	e01f      	b.n	800a7f2 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800a7b2:	4b24      	ldr	r3, [pc, #144]	; (800a844 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800a7b4:	613b      	str	r3, [r7, #16]
    break;
 800a7b6:	e01c      	b.n	800a7f2 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800a7b8:	4b21      	ldr	r3, [pc, #132]	; (800a840 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	f003 0308 	and.w	r3, r3, #8
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d107      	bne.n	800a7d4 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800a7c4:	4b1e      	ldr	r3, [pc, #120]	; (800a840 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800a7c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a7ca:	0a1b      	lsrs	r3, r3, #8
 800a7cc:	f003 030f 	and.w	r3, r3, #15
 800a7d0:	617b      	str	r3, [r7, #20]
 800a7d2:	e005      	b.n	800a7e0 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800a7d4:	4b1a      	ldr	r3, [pc, #104]	; (800a840 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	091b      	lsrs	r3, r3, #4
 800a7da:	f003 030f 	and.w	r3, r3, #15
 800a7de:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 800a7e0:	4a19      	ldr	r2, [pc, #100]	; (800a848 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 800a7e2:	697b      	ldr	r3, [r7, #20]
 800a7e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a7e8:	613b      	str	r3, [r7, #16]
    break;
 800a7ea:	e002      	b.n	800a7f2 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 800a7ec:	2300      	movs	r3, #0
 800a7ee:	613b      	str	r3, [r7, #16]
    break;
 800a7f0:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800a7f2:	4b13      	ldr	r3, [pc, #76]	; (800a840 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800a7f4:	68db      	ldr	r3, [r3, #12]
 800a7f6:	091b      	lsrs	r3, r3, #4
 800a7f8:	f003 030f 	and.w	r3, r3, #15
 800a7fc:	3301      	adds	r3, #1
 800a7fe:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800a800:	4b0f      	ldr	r3, [pc, #60]	; (800a840 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800a802:	68db      	ldr	r3, [r3, #12]
 800a804:	0a1b      	lsrs	r3, r3, #8
 800a806:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a80a:	693a      	ldr	r2, [r7, #16]
 800a80c:	fb03 f202 	mul.w	r2, r3, r2
 800a810:	68bb      	ldr	r3, [r7, #8]
 800a812:	fbb2 f3f3 	udiv	r3, r2, r3
 800a816:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800a818:	4b09      	ldr	r3, [pc, #36]	; (800a840 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800a81a:	68db      	ldr	r3, [r3, #12]
 800a81c:	0e5b      	lsrs	r3, r3, #25
 800a81e:	f003 0303 	and.w	r3, r3, #3
 800a822:	3301      	adds	r3, #1
 800a824:	005b      	lsls	r3, r3, #1
 800a826:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800a828:	693a      	ldr	r2, [r7, #16]
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a830:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800a832:	683b      	ldr	r3, [r7, #0]
}
 800a834:	4618      	mov	r0, r3
 800a836:	371c      	adds	r7, #28
 800a838:	46bd      	mov	sp, r7
 800a83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a83e:	4770      	bx	lr
 800a840:	40021000 	.word	0x40021000
 800a844:	00f42400 	.word	0x00f42400
 800a848:	08016d28 	.word	0x08016d28

0800a84c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a84c:	b580      	push	{r7, lr}
 800a84e:	b086      	sub	sp, #24
 800a850:	af00      	add	r7, sp, #0
 800a852:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a854:	2300      	movs	r3, #0
 800a856:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a858:	2300      	movs	r3, #0
 800a85a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a864:	2b00      	cmp	r3, #0
 800a866:	d040      	beq.n	800a8ea <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a86c:	2b80      	cmp	r3, #128	; 0x80
 800a86e:	d02a      	beq.n	800a8c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800a870:	2b80      	cmp	r3, #128	; 0x80
 800a872:	d825      	bhi.n	800a8c0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800a874:	2b60      	cmp	r3, #96	; 0x60
 800a876:	d026      	beq.n	800a8c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800a878:	2b60      	cmp	r3, #96	; 0x60
 800a87a:	d821      	bhi.n	800a8c0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800a87c:	2b40      	cmp	r3, #64	; 0x40
 800a87e:	d006      	beq.n	800a88e <HAL_RCCEx_PeriphCLKConfig+0x42>
 800a880:	2b40      	cmp	r3, #64	; 0x40
 800a882:	d81d      	bhi.n	800a8c0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800a884:	2b00      	cmp	r3, #0
 800a886:	d009      	beq.n	800a89c <HAL_RCCEx_PeriphCLKConfig+0x50>
 800a888:	2b20      	cmp	r3, #32
 800a88a:	d010      	beq.n	800a8ae <HAL_RCCEx_PeriphCLKConfig+0x62>
 800a88c:	e018      	b.n	800a8c0 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800a88e:	4b89      	ldr	r3, [pc, #548]	; (800aab4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a890:	68db      	ldr	r3, [r3, #12]
 800a892:	4a88      	ldr	r2, [pc, #544]	; (800aab4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a894:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a898:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800a89a:	e015      	b.n	800a8c8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	3304      	adds	r3, #4
 800a8a0:	2100      	movs	r1, #0
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	f000 fb3e 	bl	800af24 <RCCEx_PLLSAI1_Config>
 800a8a8:	4603      	mov	r3, r0
 800a8aa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800a8ac:	e00c      	b.n	800a8c8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	3320      	adds	r3, #32
 800a8b2:	2100      	movs	r1, #0
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	f000 fc29 	bl	800b10c <RCCEx_PLLSAI2_Config>
 800a8ba:	4603      	mov	r3, r0
 800a8bc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800a8be:	e003      	b.n	800a8c8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a8c0:	2301      	movs	r3, #1
 800a8c2:	74fb      	strb	r3, [r7, #19]
      break;
 800a8c4:	e000      	b.n	800a8c8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800a8c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a8c8:	7cfb      	ldrb	r3, [r7, #19]
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d10b      	bne.n	800a8e6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a8ce:	4b79      	ldr	r3, [pc, #484]	; (800aab4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a8d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a8d4:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a8dc:	4975      	ldr	r1, [pc, #468]	; (800aab4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a8de:	4313      	orrs	r3, r2
 800a8e0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800a8e4:	e001      	b.n	800a8ea <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8e6:	7cfb      	ldrb	r3, [r7, #19]
 800a8e8:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d047      	beq.n	800a986 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a8fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a8fe:	d030      	beq.n	800a962 <HAL_RCCEx_PeriphCLKConfig+0x116>
 800a900:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a904:	d82a      	bhi.n	800a95c <HAL_RCCEx_PeriphCLKConfig+0x110>
 800a906:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a90a:	d02a      	beq.n	800a962 <HAL_RCCEx_PeriphCLKConfig+0x116>
 800a90c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a910:	d824      	bhi.n	800a95c <HAL_RCCEx_PeriphCLKConfig+0x110>
 800a912:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a916:	d008      	beq.n	800a92a <HAL_RCCEx_PeriphCLKConfig+0xde>
 800a918:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a91c:	d81e      	bhi.n	800a95c <HAL_RCCEx_PeriphCLKConfig+0x110>
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d00a      	beq.n	800a938 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800a922:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a926:	d010      	beq.n	800a94a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800a928:	e018      	b.n	800a95c <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800a92a:	4b62      	ldr	r3, [pc, #392]	; (800aab4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a92c:	68db      	ldr	r3, [r3, #12]
 800a92e:	4a61      	ldr	r2, [pc, #388]	; (800aab4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a930:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a934:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800a936:	e015      	b.n	800a964 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	3304      	adds	r3, #4
 800a93c:	2100      	movs	r1, #0
 800a93e:	4618      	mov	r0, r3
 800a940:	f000 faf0 	bl	800af24 <RCCEx_PLLSAI1_Config>
 800a944:	4603      	mov	r3, r0
 800a946:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800a948:	e00c      	b.n	800a964 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	3320      	adds	r3, #32
 800a94e:	2100      	movs	r1, #0
 800a950:	4618      	mov	r0, r3
 800a952:	f000 fbdb 	bl	800b10c <RCCEx_PLLSAI2_Config>
 800a956:	4603      	mov	r3, r0
 800a958:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800a95a:	e003      	b.n	800a964 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a95c:	2301      	movs	r3, #1
 800a95e:	74fb      	strb	r3, [r7, #19]
      break;
 800a960:	e000      	b.n	800a964 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800a962:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a964:	7cfb      	ldrb	r3, [r7, #19]
 800a966:	2b00      	cmp	r3, #0
 800a968:	d10b      	bne.n	800a982 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800a96a:	4b52      	ldr	r3, [pc, #328]	; (800aab4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a96c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a970:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a978:	494e      	ldr	r1, [pc, #312]	; (800aab4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a97a:	4313      	orrs	r3, r2
 800a97c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800a980:	e001      	b.n	800a986 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a982:	7cfb      	ldrb	r3, [r7, #19]
 800a984:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a98e:	2b00      	cmp	r3, #0
 800a990:	f000 809f 	beq.w	800aad2 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a994:	2300      	movs	r3, #0
 800a996:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800a998:	4b46      	ldr	r3, [pc, #280]	; (800aab4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a99a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a99c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d101      	bne.n	800a9a8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800a9a4:	2301      	movs	r3, #1
 800a9a6:	e000      	b.n	800a9aa <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800a9a8:	2300      	movs	r3, #0
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d00d      	beq.n	800a9ca <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a9ae:	4b41      	ldr	r3, [pc, #260]	; (800aab4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a9b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a9b2:	4a40      	ldr	r2, [pc, #256]	; (800aab4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a9b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a9b8:	6593      	str	r3, [r2, #88]	; 0x58
 800a9ba:	4b3e      	ldr	r3, [pc, #248]	; (800aab4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a9bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a9be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a9c2:	60bb      	str	r3, [r7, #8]
 800a9c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a9c6:	2301      	movs	r3, #1
 800a9c8:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a9ca:	4b3b      	ldr	r3, [pc, #236]	; (800aab8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	4a3a      	ldr	r2, [pc, #232]	; (800aab8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800a9d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a9d4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a9d6:	f7fa fbeb 	bl	80051b0 <HAL_GetTick>
 800a9da:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800a9dc:	e009      	b.n	800a9f2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a9de:	f7fa fbe7 	bl	80051b0 <HAL_GetTick>
 800a9e2:	4602      	mov	r2, r0
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	1ad3      	subs	r3, r2, r3
 800a9e8:	2b02      	cmp	r3, #2
 800a9ea:	d902      	bls.n	800a9f2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 800a9ec:	2303      	movs	r3, #3
 800a9ee:	74fb      	strb	r3, [r7, #19]
        break;
 800a9f0:	e005      	b.n	800a9fe <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800a9f2:	4b31      	ldr	r3, [pc, #196]	; (800aab8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d0ef      	beq.n	800a9de <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800a9fe:	7cfb      	ldrb	r3, [r7, #19]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d15b      	bne.n	800aabc <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800aa04:	4b2b      	ldr	r3, [pc, #172]	; (800aab4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800aa06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aa0e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800aa10:	697b      	ldr	r3, [r7, #20]
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d01f      	beq.n	800aa56 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800aa1c:	697a      	ldr	r2, [r7, #20]
 800aa1e:	429a      	cmp	r2, r3
 800aa20:	d019      	beq.n	800aa56 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800aa22:	4b24      	ldr	r3, [pc, #144]	; (800aab4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800aa24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aa2c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800aa2e:	4b21      	ldr	r3, [pc, #132]	; (800aab4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800aa30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa34:	4a1f      	ldr	r2, [pc, #124]	; (800aab4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800aa36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aa3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800aa3e:	4b1d      	ldr	r3, [pc, #116]	; (800aab4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800aa40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa44:	4a1b      	ldr	r2, [pc, #108]	; (800aab4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800aa46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800aa4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800aa4e:	4a19      	ldr	r2, [pc, #100]	; (800aab4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800aa50:	697b      	ldr	r3, [r7, #20]
 800aa52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800aa56:	697b      	ldr	r3, [r7, #20]
 800aa58:	f003 0301 	and.w	r3, r3, #1
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d016      	beq.n	800aa8e <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa60:	f7fa fba6 	bl	80051b0 <HAL_GetTick>
 800aa64:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800aa66:	e00b      	b.n	800aa80 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800aa68:	f7fa fba2 	bl	80051b0 <HAL_GetTick>
 800aa6c:	4602      	mov	r2, r0
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	1ad3      	subs	r3, r2, r3
 800aa72:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa76:	4293      	cmp	r3, r2
 800aa78:	d902      	bls.n	800aa80 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800aa7a:	2303      	movs	r3, #3
 800aa7c:	74fb      	strb	r3, [r7, #19]
            break;
 800aa7e:	e006      	b.n	800aa8e <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800aa80:	4b0c      	ldr	r3, [pc, #48]	; (800aab4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800aa82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa86:	f003 0302 	and.w	r3, r3, #2
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d0ec      	beq.n	800aa68 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800aa8e:	7cfb      	ldrb	r3, [r7, #19]
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d10c      	bne.n	800aaae <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800aa94:	4b07      	ldr	r3, [pc, #28]	; (800aab4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800aa96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa9a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800aaa4:	4903      	ldr	r1, [pc, #12]	; (800aab4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800aaa6:	4313      	orrs	r3, r2
 800aaa8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800aaac:	e008      	b.n	800aac0 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800aaae:	7cfb      	ldrb	r3, [r7, #19]
 800aab0:	74bb      	strb	r3, [r7, #18]
 800aab2:	e005      	b.n	800aac0 <HAL_RCCEx_PeriphCLKConfig+0x274>
 800aab4:	40021000 	.word	0x40021000
 800aab8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aabc:	7cfb      	ldrb	r3, [r7, #19]
 800aabe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800aac0:	7c7b      	ldrb	r3, [r7, #17]
 800aac2:	2b01      	cmp	r3, #1
 800aac4:	d105      	bne.n	800aad2 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800aac6:	4ba0      	ldr	r3, [pc, #640]	; (800ad48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800aac8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aaca:	4a9f      	ldr	r2, [pc, #636]	; (800ad48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800aacc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800aad0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	f003 0301 	and.w	r3, r3, #1
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d00a      	beq.n	800aaf4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800aade:	4b9a      	ldr	r3, [pc, #616]	; (800ad48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800aae0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aae4:	f023 0203 	bic.w	r2, r3, #3
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aaec:	4996      	ldr	r1, [pc, #600]	; (800ad48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800aaee:	4313      	orrs	r3, r2
 800aaf0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	f003 0302 	and.w	r3, r3, #2
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d00a      	beq.n	800ab16 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800ab00:	4b91      	ldr	r3, [pc, #580]	; (800ad48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ab02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab06:	f023 020c 	bic.w	r2, r3, #12
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab0e:	498e      	ldr	r1, [pc, #568]	; (800ad48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ab10:	4313      	orrs	r3, r2
 800ab12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	f003 0304 	and.w	r3, r3, #4
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d00a      	beq.n	800ab38 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800ab22:	4b89      	ldr	r3, [pc, #548]	; (800ad48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ab24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab28:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab30:	4985      	ldr	r1, [pc, #532]	; (800ad48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ab32:	4313      	orrs	r3, r2
 800ab34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	f003 0308 	and.w	r3, r3, #8
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d00a      	beq.n	800ab5a <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800ab44:	4b80      	ldr	r3, [pc, #512]	; (800ad48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ab46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab4a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ab52:	497d      	ldr	r1, [pc, #500]	; (800ad48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ab54:	4313      	orrs	r3, r2
 800ab56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	f003 0310 	and.w	r3, r3, #16
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d00a      	beq.n	800ab7c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800ab66:	4b78      	ldr	r3, [pc, #480]	; (800ad48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ab68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab6c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab74:	4974      	ldr	r1, [pc, #464]	; (800ad48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ab76:	4313      	orrs	r3, r2
 800ab78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	f003 0320 	and.w	r3, r3, #32
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d00a      	beq.n	800ab9e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800ab88:	4b6f      	ldr	r3, [pc, #444]	; (800ad48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ab8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab8e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab96:	496c      	ldr	r1, [pc, #432]	; (800ad48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ab98:	4313      	orrs	r3, r2
 800ab9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d00a      	beq.n	800abc0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800abaa:	4b67      	ldr	r3, [pc, #412]	; (800ad48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800abac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abb0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800abb8:	4963      	ldr	r1, [pc, #396]	; (800ad48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800abba:	4313      	orrs	r3, r2
 800abbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d00a      	beq.n	800abe2 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800abcc:	4b5e      	ldr	r3, [pc, #376]	; (800ad48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800abce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abd2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800abda:	495b      	ldr	r1, [pc, #364]	; (800ad48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800abdc:	4313      	orrs	r3, r2
 800abde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800abea:	2b00      	cmp	r3, #0
 800abec:	d00a      	beq.n	800ac04 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800abee:	4b56      	ldr	r3, [pc, #344]	; (800ad48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800abf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abf4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800abfc:	4952      	ldr	r1, [pc, #328]	; (800ad48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800abfe:	4313      	orrs	r3, r2
 800ac00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d00a      	beq.n	800ac26 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800ac10:	4b4d      	ldr	r3, [pc, #308]	; (800ad48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ac12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac16:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac1e:	494a      	ldr	r1, [pc, #296]	; (800ad48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ac20:	4313      	orrs	r3, r2
 800ac22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d00a      	beq.n	800ac48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800ac32:	4b45      	ldr	r3, [pc, #276]	; (800ad48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ac34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac38:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac40:	4941      	ldr	r1, [pc, #260]	; (800ad48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ac42:	4313      	orrs	r3, r2
 800ac44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d00a      	beq.n	800ac6a <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800ac54:	4b3c      	ldr	r3, [pc, #240]	; (800ad48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ac56:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ac5a:	f023 0203 	bic.w	r2, r3, #3
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ac62:	4939      	ldr	r1, [pc, #228]	; (800ad48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ac64:	4313      	orrs	r3, r2
 800ac66:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d028      	beq.n	800acc8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800ac76:	4b34      	ldr	r3, [pc, #208]	; (800ad48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ac78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac7c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ac84:	4930      	ldr	r1, [pc, #192]	; (800ad48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ac86:	4313      	orrs	r3, r2
 800ac88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ac90:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ac94:	d106      	bne.n	800aca4 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800ac96:	4b2c      	ldr	r3, [pc, #176]	; (800ad48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ac98:	68db      	ldr	r3, [r3, #12]
 800ac9a:	4a2b      	ldr	r2, [pc, #172]	; (800ad48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ac9c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800aca0:	60d3      	str	r3, [r2, #12]
 800aca2:	e011      	b.n	800acc8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aca8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800acac:	d10c      	bne.n	800acc8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	3304      	adds	r3, #4
 800acb2:	2101      	movs	r1, #1
 800acb4:	4618      	mov	r0, r3
 800acb6:	f000 f935 	bl	800af24 <RCCEx_PLLSAI1_Config>
 800acba:	4603      	mov	r3, r0
 800acbc:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800acbe:	7cfb      	ldrb	r3, [r7, #19]
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d001      	beq.n	800acc8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 800acc4:	7cfb      	ldrb	r3, [r7, #19]
 800acc6:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d04d      	beq.n	800ad70 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800acd8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800acdc:	d108      	bne.n	800acf0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800acde:	4b1a      	ldr	r3, [pc, #104]	; (800ad48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ace0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ace4:	4a18      	ldr	r2, [pc, #96]	; (800ad48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ace6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800acea:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800acee:	e012      	b.n	800ad16 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800acf0:	4b15      	ldr	r3, [pc, #84]	; (800ad48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800acf2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800acf6:	4a14      	ldr	r2, [pc, #80]	; (800ad48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800acf8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800acfc:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800ad00:	4b11      	ldr	r3, [pc, #68]	; (800ad48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ad02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad06:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ad0e:	490e      	ldr	r1, [pc, #56]	; (800ad48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ad10:	4313      	orrs	r3, r2
 800ad12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ad1a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ad1e:	d106      	bne.n	800ad2e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800ad20:	4b09      	ldr	r3, [pc, #36]	; (800ad48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ad22:	68db      	ldr	r3, [r3, #12]
 800ad24:	4a08      	ldr	r2, [pc, #32]	; (800ad48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ad26:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ad2a:	60d3      	str	r3, [r2, #12]
 800ad2c:	e020      	b.n	800ad70 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ad32:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ad36:	d109      	bne.n	800ad4c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800ad38:	4b03      	ldr	r3, [pc, #12]	; (800ad48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ad3a:	68db      	ldr	r3, [r3, #12]
 800ad3c:	4a02      	ldr	r2, [pc, #8]	; (800ad48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ad3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ad42:	60d3      	str	r3, [r2, #12]
 800ad44:	e014      	b.n	800ad70 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800ad46:	bf00      	nop
 800ad48:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ad50:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ad54:	d10c      	bne.n	800ad70 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	3304      	adds	r3, #4
 800ad5a:	2101      	movs	r1, #1
 800ad5c:	4618      	mov	r0, r3
 800ad5e:	f000 f8e1 	bl	800af24 <RCCEx_PLLSAI1_Config>
 800ad62:	4603      	mov	r3, r0
 800ad64:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800ad66:	7cfb      	ldrb	r3, [r7, #19]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d001      	beq.n	800ad70 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 800ad6c:	7cfb      	ldrb	r3, [r7, #19]
 800ad6e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d028      	beq.n	800adce <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800ad7c:	4b68      	ldr	r3, [pc, #416]	; (800af20 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800ad7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad82:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ad8a:	4965      	ldr	r1, [pc, #404]	; (800af20 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800ad8c:	4313      	orrs	r3, r2
 800ad8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ad96:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ad9a:	d106      	bne.n	800adaa <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800ad9c:	4b60      	ldr	r3, [pc, #384]	; (800af20 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800ad9e:	68db      	ldr	r3, [r3, #12]
 800ada0:	4a5f      	ldr	r2, [pc, #380]	; (800af20 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800ada2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ada6:	60d3      	str	r3, [r2, #12]
 800ada8:	e011      	b.n	800adce <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800adae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800adb2:	d10c      	bne.n	800adce <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	3304      	adds	r3, #4
 800adb8:	2101      	movs	r1, #1
 800adba:	4618      	mov	r0, r3
 800adbc:	f000 f8b2 	bl	800af24 <RCCEx_PLLSAI1_Config>
 800adc0:	4603      	mov	r3, r0
 800adc2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800adc4:	7cfb      	ldrb	r3, [r7, #19]
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d001      	beq.n	800adce <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800adca:	7cfb      	ldrb	r3, [r7, #19]
 800adcc:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800add6:	2b00      	cmp	r3, #0
 800add8:	d01e      	beq.n	800ae18 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800adda:	4b51      	ldr	r3, [pc, #324]	; (800af20 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800addc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ade0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800adea:	494d      	ldr	r1, [pc, #308]	; (800af20 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800adec:	4313      	orrs	r3, r2
 800adee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800adf8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800adfc:	d10c      	bne.n	800ae18 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	3304      	adds	r3, #4
 800ae02:	2102      	movs	r1, #2
 800ae04:	4618      	mov	r0, r3
 800ae06:	f000 f88d 	bl	800af24 <RCCEx_PLLSAI1_Config>
 800ae0a:	4603      	mov	r3, r0
 800ae0c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800ae0e:	7cfb      	ldrb	r3, [r7, #19]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d001      	beq.n	800ae18 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 800ae14:	7cfb      	ldrb	r3, [r7, #19]
 800ae16:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d00b      	beq.n	800ae3c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800ae24:	4b3e      	ldr	r3, [pc, #248]	; (800af20 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800ae26:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ae2a:	f023 0204 	bic.w	r2, r3, #4
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ae34:	493a      	ldr	r1, [pc, #232]	; (800af20 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800ae36:	4313      	orrs	r3, r2
 800ae38:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d00b      	beq.n	800ae60 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800ae48:	4b35      	ldr	r3, [pc, #212]	; (800af20 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800ae4a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ae4e:	f023 0218 	bic.w	r2, r3, #24
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae58:	4931      	ldr	r1, [pc, #196]	; (800af20 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800ae5a:	4313      	orrs	r3, r2
 800ae5c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d035      	beq.n	800aed8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800ae6c:	4b2c      	ldr	r3, [pc, #176]	; (800af20 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	4a2b      	ldr	r2, [pc, #172]	; (800af20 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800ae72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ae76:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ae78:	f7fa f99a 	bl	80051b0 <HAL_GetTick>
 800ae7c:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800ae7e:	e009      	b.n	800ae94 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800ae80:	f7fa f996 	bl	80051b0 <HAL_GetTick>
 800ae84:	4602      	mov	r2, r0
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	1ad3      	subs	r3, r2, r3
 800ae8a:	2b02      	cmp	r3, #2
 800ae8c:	d902      	bls.n	800ae94 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 800ae8e:	2303      	movs	r3, #3
 800ae90:	74fb      	strb	r3, [r7, #19]
        break;
 800ae92:	e005      	b.n	800aea0 <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800ae94:	4b22      	ldr	r3, [pc, #136]	; (800af20 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d1ef      	bne.n	800ae80 <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 800aea0:	7cfb      	ldrb	r3, [r7, #19]
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d113      	bne.n	800aece <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 800aea6:	4b1e      	ldr	r3, [pc, #120]	; (800af20 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800aea8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800aeac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aeb6:	491a      	ldr	r1, [pc, #104]	; (800af20 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800aeb8:	4313      	orrs	r3, r2
 800aeba:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	3320      	adds	r3, #32
 800aec2:	2102      	movs	r1, #2
 800aec4:	4618      	mov	r0, r3
 800aec6:	f000 f921 	bl	800b10c <RCCEx_PLLSAI2_Config>
 800aeca:	4603      	mov	r3, r0
 800aecc:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 800aece:	7cfb      	ldrb	r3, [r7, #19]
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d001      	beq.n	800aed8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 800aed4:	7cfb      	ldrb	r3, [r7, #19]
 800aed6:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d017      	beq.n	800af14 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800aee4:	4b0e      	ldr	r3, [pc, #56]	; (800af20 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800aee6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800aeea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aef4:	490a      	ldr	r1, [pc, #40]	; (800af20 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800aef6:	4313      	orrs	r3, r2
 800aef8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af02:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800af06:	d105      	bne.n	800af14 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800af08:	4b05      	ldr	r3, [pc, #20]	; (800af20 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800af0a:	68db      	ldr	r3, [r3, #12]
 800af0c:	4a04      	ldr	r2, [pc, #16]	; (800af20 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800af0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800af12:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800af14:	7cbb      	ldrb	r3, [r7, #18]
}
 800af16:	4618      	mov	r0, r3
 800af18:	3718      	adds	r7, #24
 800af1a:	46bd      	mov	sp, r7
 800af1c:	bd80      	pop	{r7, pc}
 800af1e:	bf00      	nop
 800af20:	40021000 	.word	0x40021000

0800af24 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800af24:	b580      	push	{r7, lr}
 800af26:	b084      	sub	sp, #16
 800af28:	af00      	add	r7, sp, #0
 800af2a:	6078      	str	r0, [r7, #4]
 800af2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800af2e:	2300      	movs	r3, #0
 800af30:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800af32:	4b72      	ldr	r3, [pc, #456]	; (800b0fc <RCCEx_PLLSAI1_Config+0x1d8>)
 800af34:	68db      	ldr	r3, [r3, #12]
 800af36:	f003 0303 	and.w	r3, r3, #3
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d00e      	beq.n	800af5c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800af3e:	4b6f      	ldr	r3, [pc, #444]	; (800b0fc <RCCEx_PLLSAI1_Config+0x1d8>)
 800af40:	68db      	ldr	r3, [r3, #12]
 800af42:	f003 0203 	and.w	r2, r3, #3
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	429a      	cmp	r2, r3
 800af4c:	d103      	bne.n	800af56 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	681b      	ldr	r3, [r3, #0]
       ||
 800af52:	2b00      	cmp	r3, #0
 800af54:	d142      	bne.n	800afdc <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800af56:	2301      	movs	r3, #1
 800af58:	73fb      	strb	r3, [r7, #15]
 800af5a:	e03f      	b.n	800afdc <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	2b03      	cmp	r3, #3
 800af62:	d018      	beq.n	800af96 <RCCEx_PLLSAI1_Config+0x72>
 800af64:	2b03      	cmp	r3, #3
 800af66:	d825      	bhi.n	800afb4 <RCCEx_PLLSAI1_Config+0x90>
 800af68:	2b01      	cmp	r3, #1
 800af6a:	d002      	beq.n	800af72 <RCCEx_PLLSAI1_Config+0x4e>
 800af6c:	2b02      	cmp	r3, #2
 800af6e:	d009      	beq.n	800af84 <RCCEx_PLLSAI1_Config+0x60>
 800af70:	e020      	b.n	800afb4 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800af72:	4b62      	ldr	r3, [pc, #392]	; (800b0fc <RCCEx_PLLSAI1_Config+0x1d8>)
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	f003 0302 	and.w	r3, r3, #2
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d11d      	bne.n	800afba <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800af7e:	2301      	movs	r3, #1
 800af80:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800af82:	e01a      	b.n	800afba <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800af84:	4b5d      	ldr	r3, [pc, #372]	; (800b0fc <RCCEx_PLLSAI1_Config+0x1d8>)
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d116      	bne.n	800afbe <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 800af90:	2301      	movs	r3, #1
 800af92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800af94:	e013      	b.n	800afbe <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800af96:	4b59      	ldr	r3, [pc, #356]	; (800b0fc <RCCEx_PLLSAI1_Config+0x1d8>)
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d10f      	bne.n	800afc2 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800afa2:	4b56      	ldr	r3, [pc, #344]	; (800b0fc <RCCEx_PLLSAI1_Config+0x1d8>)
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d109      	bne.n	800afc2 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800afae:	2301      	movs	r3, #1
 800afb0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800afb2:	e006      	b.n	800afc2 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 800afb4:	2301      	movs	r3, #1
 800afb6:	73fb      	strb	r3, [r7, #15]
      break;
 800afb8:	e004      	b.n	800afc4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800afba:	bf00      	nop
 800afbc:	e002      	b.n	800afc4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800afbe:	bf00      	nop
 800afc0:	e000      	b.n	800afc4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800afc2:	bf00      	nop
    }

    if(status == HAL_OK)
 800afc4:	7bfb      	ldrb	r3, [r7, #15]
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d108      	bne.n	800afdc <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800afca:	4b4c      	ldr	r3, [pc, #304]	; (800b0fc <RCCEx_PLLSAI1_Config+0x1d8>)
 800afcc:	68db      	ldr	r3, [r3, #12]
 800afce:	f023 0203 	bic.w	r2, r3, #3
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	4949      	ldr	r1, [pc, #292]	; (800b0fc <RCCEx_PLLSAI1_Config+0x1d8>)
 800afd8:	4313      	orrs	r3, r2
 800afda:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800afdc:	7bfb      	ldrb	r3, [r7, #15]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	f040 8086 	bne.w	800b0f0 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800afe4:	4b45      	ldr	r3, [pc, #276]	; (800b0fc <RCCEx_PLLSAI1_Config+0x1d8>)
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	4a44      	ldr	r2, [pc, #272]	; (800b0fc <RCCEx_PLLSAI1_Config+0x1d8>)
 800afea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800afee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aff0:	f7fa f8de 	bl	80051b0 <HAL_GetTick>
 800aff4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800aff6:	e009      	b.n	800b00c <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800aff8:	f7fa f8da 	bl	80051b0 <HAL_GetTick>
 800affc:	4602      	mov	r2, r0
 800affe:	68bb      	ldr	r3, [r7, #8]
 800b000:	1ad3      	subs	r3, r2, r3
 800b002:	2b02      	cmp	r3, #2
 800b004:	d902      	bls.n	800b00c <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800b006:	2303      	movs	r3, #3
 800b008:	73fb      	strb	r3, [r7, #15]
        break;
 800b00a:	e005      	b.n	800b018 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800b00c:	4b3b      	ldr	r3, [pc, #236]	; (800b0fc <RCCEx_PLLSAI1_Config+0x1d8>)
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b014:	2b00      	cmp	r3, #0
 800b016:	d1ef      	bne.n	800aff8 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800b018:	7bfb      	ldrb	r3, [r7, #15]
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d168      	bne.n	800b0f0 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800b01e:	683b      	ldr	r3, [r7, #0]
 800b020:	2b00      	cmp	r3, #0
 800b022:	d113      	bne.n	800b04c <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800b024:	4b35      	ldr	r3, [pc, #212]	; (800b0fc <RCCEx_PLLSAI1_Config+0x1d8>)
 800b026:	691a      	ldr	r2, [r3, #16]
 800b028:	4b35      	ldr	r3, [pc, #212]	; (800b100 <RCCEx_PLLSAI1_Config+0x1dc>)
 800b02a:	4013      	ands	r3, r2
 800b02c:	687a      	ldr	r2, [r7, #4]
 800b02e:	6892      	ldr	r2, [r2, #8]
 800b030:	0211      	lsls	r1, r2, #8
 800b032:	687a      	ldr	r2, [r7, #4]
 800b034:	68d2      	ldr	r2, [r2, #12]
 800b036:	06d2      	lsls	r2, r2, #27
 800b038:	4311      	orrs	r1, r2
 800b03a:	687a      	ldr	r2, [r7, #4]
 800b03c:	6852      	ldr	r2, [r2, #4]
 800b03e:	3a01      	subs	r2, #1
 800b040:	0112      	lsls	r2, r2, #4
 800b042:	430a      	orrs	r2, r1
 800b044:	492d      	ldr	r1, [pc, #180]	; (800b0fc <RCCEx_PLLSAI1_Config+0x1d8>)
 800b046:	4313      	orrs	r3, r2
 800b048:	610b      	str	r3, [r1, #16]
 800b04a:	e02d      	b.n	800b0a8 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800b04c:	683b      	ldr	r3, [r7, #0]
 800b04e:	2b01      	cmp	r3, #1
 800b050:	d115      	bne.n	800b07e <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800b052:	4b2a      	ldr	r3, [pc, #168]	; (800b0fc <RCCEx_PLLSAI1_Config+0x1d8>)
 800b054:	691a      	ldr	r2, [r3, #16]
 800b056:	4b2b      	ldr	r3, [pc, #172]	; (800b104 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b058:	4013      	ands	r3, r2
 800b05a:	687a      	ldr	r2, [r7, #4]
 800b05c:	6892      	ldr	r2, [r2, #8]
 800b05e:	0211      	lsls	r1, r2, #8
 800b060:	687a      	ldr	r2, [r7, #4]
 800b062:	6912      	ldr	r2, [r2, #16]
 800b064:	0852      	lsrs	r2, r2, #1
 800b066:	3a01      	subs	r2, #1
 800b068:	0552      	lsls	r2, r2, #21
 800b06a:	4311      	orrs	r1, r2
 800b06c:	687a      	ldr	r2, [r7, #4]
 800b06e:	6852      	ldr	r2, [r2, #4]
 800b070:	3a01      	subs	r2, #1
 800b072:	0112      	lsls	r2, r2, #4
 800b074:	430a      	orrs	r2, r1
 800b076:	4921      	ldr	r1, [pc, #132]	; (800b0fc <RCCEx_PLLSAI1_Config+0x1d8>)
 800b078:	4313      	orrs	r3, r2
 800b07a:	610b      	str	r3, [r1, #16]
 800b07c:	e014      	b.n	800b0a8 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800b07e:	4b1f      	ldr	r3, [pc, #124]	; (800b0fc <RCCEx_PLLSAI1_Config+0x1d8>)
 800b080:	691a      	ldr	r2, [r3, #16]
 800b082:	4b21      	ldr	r3, [pc, #132]	; (800b108 <RCCEx_PLLSAI1_Config+0x1e4>)
 800b084:	4013      	ands	r3, r2
 800b086:	687a      	ldr	r2, [r7, #4]
 800b088:	6892      	ldr	r2, [r2, #8]
 800b08a:	0211      	lsls	r1, r2, #8
 800b08c:	687a      	ldr	r2, [r7, #4]
 800b08e:	6952      	ldr	r2, [r2, #20]
 800b090:	0852      	lsrs	r2, r2, #1
 800b092:	3a01      	subs	r2, #1
 800b094:	0652      	lsls	r2, r2, #25
 800b096:	4311      	orrs	r1, r2
 800b098:	687a      	ldr	r2, [r7, #4]
 800b09a:	6852      	ldr	r2, [r2, #4]
 800b09c:	3a01      	subs	r2, #1
 800b09e:	0112      	lsls	r2, r2, #4
 800b0a0:	430a      	orrs	r2, r1
 800b0a2:	4916      	ldr	r1, [pc, #88]	; (800b0fc <RCCEx_PLLSAI1_Config+0x1d8>)
 800b0a4:	4313      	orrs	r3, r2
 800b0a6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800b0a8:	4b14      	ldr	r3, [pc, #80]	; (800b0fc <RCCEx_PLLSAI1_Config+0x1d8>)
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	4a13      	ldr	r2, [pc, #76]	; (800b0fc <RCCEx_PLLSAI1_Config+0x1d8>)
 800b0ae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b0b2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b0b4:	f7fa f87c 	bl	80051b0 <HAL_GetTick>
 800b0b8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800b0ba:	e009      	b.n	800b0d0 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800b0bc:	f7fa f878 	bl	80051b0 <HAL_GetTick>
 800b0c0:	4602      	mov	r2, r0
 800b0c2:	68bb      	ldr	r3, [r7, #8]
 800b0c4:	1ad3      	subs	r3, r2, r3
 800b0c6:	2b02      	cmp	r3, #2
 800b0c8:	d902      	bls.n	800b0d0 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800b0ca:	2303      	movs	r3, #3
 800b0cc:	73fb      	strb	r3, [r7, #15]
          break;
 800b0ce:	e005      	b.n	800b0dc <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800b0d0:	4b0a      	ldr	r3, [pc, #40]	; (800b0fc <RCCEx_PLLSAI1_Config+0x1d8>)
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d0ef      	beq.n	800b0bc <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800b0dc:	7bfb      	ldrb	r3, [r7, #15]
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d106      	bne.n	800b0f0 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800b0e2:	4b06      	ldr	r3, [pc, #24]	; (800b0fc <RCCEx_PLLSAI1_Config+0x1d8>)
 800b0e4:	691a      	ldr	r2, [r3, #16]
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	699b      	ldr	r3, [r3, #24]
 800b0ea:	4904      	ldr	r1, [pc, #16]	; (800b0fc <RCCEx_PLLSAI1_Config+0x1d8>)
 800b0ec:	4313      	orrs	r3, r2
 800b0ee:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800b0f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0f2:	4618      	mov	r0, r3
 800b0f4:	3710      	adds	r7, #16
 800b0f6:	46bd      	mov	sp, r7
 800b0f8:	bd80      	pop	{r7, pc}
 800b0fa:	bf00      	nop
 800b0fc:	40021000 	.word	0x40021000
 800b100:	07ff800f 	.word	0x07ff800f
 800b104:	ff9f800f 	.word	0xff9f800f
 800b108:	f9ff800f 	.word	0xf9ff800f

0800b10c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800b10c:	b580      	push	{r7, lr}
 800b10e:	b084      	sub	sp, #16
 800b110:	af00      	add	r7, sp, #0
 800b112:	6078      	str	r0, [r7, #4]
 800b114:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b116:	2300      	movs	r3, #0
 800b118:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800b11a:	4b72      	ldr	r3, [pc, #456]	; (800b2e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b11c:	68db      	ldr	r3, [r3, #12]
 800b11e:	f003 0303 	and.w	r3, r3, #3
 800b122:	2b00      	cmp	r3, #0
 800b124:	d00e      	beq.n	800b144 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800b126:	4b6f      	ldr	r3, [pc, #444]	; (800b2e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b128:	68db      	ldr	r3, [r3, #12]
 800b12a:	f003 0203 	and.w	r2, r3, #3
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	429a      	cmp	r2, r3
 800b134:	d103      	bne.n	800b13e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	681b      	ldr	r3, [r3, #0]
       ||
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d142      	bne.n	800b1c4 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800b13e:	2301      	movs	r3, #1
 800b140:	73fb      	strb	r3, [r7, #15]
 800b142:	e03f      	b.n	800b1c4 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	2b03      	cmp	r3, #3
 800b14a:	d018      	beq.n	800b17e <RCCEx_PLLSAI2_Config+0x72>
 800b14c:	2b03      	cmp	r3, #3
 800b14e:	d825      	bhi.n	800b19c <RCCEx_PLLSAI2_Config+0x90>
 800b150:	2b01      	cmp	r3, #1
 800b152:	d002      	beq.n	800b15a <RCCEx_PLLSAI2_Config+0x4e>
 800b154:	2b02      	cmp	r3, #2
 800b156:	d009      	beq.n	800b16c <RCCEx_PLLSAI2_Config+0x60>
 800b158:	e020      	b.n	800b19c <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800b15a:	4b62      	ldr	r3, [pc, #392]	; (800b2e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	f003 0302 	and.w	r3, r3, #2
 800b162:	2b00      	cmp	r3, #0
 800b164:	d11d      	bne.n	800b1a2 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800b166:	2301      	movs	r3, #1
 800b168:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b16a:	e01a      	b.n	800b1a2 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800b16c:	4b5d      	ldr	r3, [pc, #372]	; (800b2e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b174:	2b00      	cmp	r3, #0
 800b176:	d116      	bne.n	800b1a6 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 800b178:	2301      	movs	r3, #1
 800b17a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b17c:	e013      	b.n	800b1a6 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800b17e:	4b59      	ldr	r3, [pc, #356]	; (800b2e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b186:	2b00      	cmp	r3, #0
 800b188:	d10f      	bne.n	800b1aa <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800b18a:	4b56      	ldr	r3, [pc, #344]	; (800b2e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b192:	2b00      	cmp	r3, #0
 800b194:	d109      	bne.n	800b1aa <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800b196:	2301      	movs	r3, #1
 800b198:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b19a:	e006      	b.n	800b1aa <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 800b19c:	2301      	movs	r3, #1
 800b19e:	73fb      	strb	r3, [r7, #15]
      break;
 800b1a0:	e004      	b.n	800b1ac <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800b1a2:	bf00      	nop
 800b1a4:	e002      	b.n	800b1ac <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800b1a6:	bf00      	nop
 800b1a8:	e000      	b.n	800b1ac <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800b1aa:	bf00      	nop
    }

    if(status == HAL_OK)
 800b1ac:	7bfb      	ldrb	r3, [r7, #15]
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d108      	bne.n	800b1c4 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800b1b2:	4b4c      	ldr	r3, [pc, #304]	; (800b2e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b1b4:	68db      	ldr	r3, [r3, #12]
 800b1b6:	f023 0203 	bic.w	r2, r3, #3
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	4949      	ldr	r1, [pc, #292]	; (800b2e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b1c0:	4313      	orrs	r3, r2
 800b1c2:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800b1c4:	7bfb      	ldrb	r3, [r7, #15]
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	f040 8086 	bne.w	800b2d8 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800b1cc:	4b45      	ldr	r3, [pc, #276]	; (800b2e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	4a44      	ldr	r2, [pc, #272]	; (800b2e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b1d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b1d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b1d8:	f7f9 ffea 	bl	80051b0 <HAL_GetTick>
 800b1dc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800b1de:	e009      	b.n	800b1f4 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800b1e0:	f7f9 ffe6 	bl	80051b0 <HAL_GetTick>
 800b1e4:	4602      	mov	r2, r0
 800b1e6:	68bb      	ldr	r3, [r7, #8]
 800b1e8:	1ad3      	subs	r3, r2, r3
 800b1ea:	2b02      	cmp	r3, #2
 800b1ec:	d902      	bls.n	800b1f4 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800b1ee:	2303      	movs	r3, #3
 800b1f0:	73fb      	strb	r3, [r7, #15]
        break;
 800b1f2:	e005      	b.n	800b200 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800b1f4:	4b3b      	ldr	r3, [pc, #236]	; (800b2e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d1ef      	bne.n	800b1e0 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800b200:	7bfb      	ldrb	r3, [r7, #15]
 800b202:	2b00      	cmp	r3, #0
 800b204:	d168      	bne.n	800b2d8 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800b206:	683b      	ldr	r3, [r7, #0]
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d113      	bne.n	800b234 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800b20c:	4b35      	ldr	r3, [pc, #212]	; (800b2e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b20e:	695a      	ldr	r2, [r3, #20]
 800b210:	4b35      	ldr	r3, [pc, #212]	; (800b2e8 <RCCEx_PLLSAI2_Config+0x1dc>)
 800b212:	4013      	ands	r3, r2
 800b214:	687a      	ldr	r2, [r7, #4]
 800b216:	6892      	ldr	r2, [r2, #8]
 800b218:	0211      	lsls	r1, r2, #8
 800b21a:	687a      	ldr	r2, [r7, #4]
 800b21c:	68d2      	ldr	r2, [r2, #12]
 800b21e:	06d2      	lsls	r2, r2, #27
 800b220:	4311      	orrs	r1, r2
 800b222:	687a      	ldr	r2, [r7, #4]
 800b224:	6852      	ldr	r2, [r2, #4]
 800b226:	3a01      	subs	r2, #1
 800b228:	0112      	lsls	r2, r2, #4
 800b22a:	430a      	orrs	r2, r1
 800b22c:	492d      	ldr	r1, [pc, #180]	; (800b2e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b22e:	4313      	orrs	r3, r2
 800b230:	614b      	str	r3, [r1, #20]
 800b232:	e02d      	b.n	800b290 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 800b234:	683b      	ldr	r3, [r7, #0]
 800b236:	2b01      	cmp	r3, #1
 800b238:	d115      	bne.n	800b266 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800b23a:	4b2a      	ldr	r3, [pc, #168]	; (800b2e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b23c:	695a      	ldr	r2, [r3, #20]
 800b23e:	4b2b      	ldr	r3, [pc, #172]	; (800b2ec <RCCEx_PLLSAI2_Config+0x1e0>)
 800b240:	4013      	ands	r3, r2
 800b242:	687a      	ldr	r2, [r7, #4]
 800b244:	6892      	ldr	r2, [r2, #8]
 800b246:	0211      	lsls	r1, r2, #8
 800b248:	687a      	ldr	r2, [r7, #4]
 800b24a:	6912      	ldr	r2, [r2, #16]
 800b24c:	0852      	lsrs	r2, r2, #1
 800b24e:	3a01      	subs	r2, #1
 800b250:	0552      	lsls	r2, r2, #21
 800b252:	4311      	orrs	r1, r2
 800b254:	687a      	ldr	r2, [r7, #4]
 800b256:	6852      	ldr	r2, [r2, #4]
 800b258:	3a01      	subs	r2, #1
 800b25a:	0112      	lsls	r2, r2, #4
 800b25c:	430a      	orrs	r2, r1
 800b25e:	4921      	ldr	r1, [pc, #132]	; (800b2e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b260:	4313      	orrs	r3, r2
 800b262:	614b      	str	r3, [r1, #20]
 800b264:	e014      	b.n	800b290 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800b266:	4b1f      	ldr	r3, [pc, #124]	; (800b2e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b268:	695a      	ldr	r2, [r3, #20]
 800b26a:	4b21      	ldr	r3, [pc, #132]	; (800b2f0 <RCCEx_PLLSAI2_Config+0x1e4>)
 800b26c:	4013      	ands	r3, r2
 800b26e:	687a      	ldr	r2, [r7, #4]
 800b270:	6892      	ldr	r2, [r2, #8]
 800b272:	0211      	lsls	r1, r2, #8
 800b274:	687a      	ldr	r2, [r7, #4]
 800b276:	6952      	ldr	r2, [r2, #20]
 800b278:	0852      	lsrs	r2, r2, #1
 800b27a:	3a01      	subs	r2, #1
 800b27c:	0652      	lsls	r2, r2, #25
 800b27e:	4311      	orrs	r1, r2
 800b280:	687a      	ldr	r2, [r7, #4]
 800b282:	6852      	ldr	r2, [r2, #4]
 800b284:	3a01      	subs	r2, #1
 800b286:	0112      	lsls	r2, r2, #4
 800b288:	430a      	orrs	r2, r1
 800b28a:	4916      	ldr	r1, [pc, #88]	; (800b2e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b28c:	4313      	orrs	r3, r2
 800b28e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800b290:	4b14      	ldr	r3, [pc, #80]	; (800b2e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	4a13      	ldr	r2, [pc, #76]	; (800b2e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b296:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b29a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b29c:	f7f9 ff88 	bl	80051b0 <HAL_GetTick>
 800b2a0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800b2a2:	e009      	b.n	800b2b8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800b2a4:	f7f9 ff84 	bl	80051b0 <HAL_GetTick>
 800b2a8:	4602      	mov	r2, r0
 800b2aa:	68bb      	ldr	r3, [r7, #8]
 800b2ac:	1ad3      	subs	r3, r2, r3
 800b2ae:	2b02      	cmp	r3, #2
 800b2b0:	d902      	bls.n	800b2b8 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800b2b2:	2303      	movs	r3, #3
 800b2b4:	73fb      	strb	r3, [r7, #15]
          break;
 800b2b6:	e005      	b.n	800b2c4 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800b2b8:	4b0a      	ldr	r3, [pc, #40]	; (800b2e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d0ef      	beq.n	800b2a4 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800b2c4:	7bfb      	ldrb	r3, [r7, #15]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d106      	bne.n	800b2d8 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800b2ca:	4b06      	ldr	r3, [pc, #24]	; (800b2e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b2cc:	695a      	ldr	r2, [r3, #20]
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	699b      	ldr	r3, [r3, #24]
 800b2d2:	4904      	ldr	r1, [pc, #16]	; (800b2e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b2d4:	4313      	orrs	r3, r2
 800b2d6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800b2d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2da:	4618      	mov	r0, r3
 800b2dc:	3710      	adds	r7, #16
 800b2de:	46bd      	mov	sp, r7
 800b2e0:	bd80      	pop	{r7, pc}
 800b2e2:	bf00      	nop
 800b2e4:	40021000 	.word	0x40021000
 800b2e8:	07ff800f 	.word	0x07ff800f
 800b2ec:	ff9f800f 	.word	0xff9f800f
 800b2f0:	f9ff800f 	.word	0xf9ff800f

0800b2f4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800b2f4:	b580      	push	{r7, lr}
 800b2f6:	b084      	sub	sp, #16
 800b2f8:	af00      	add	r7, sp, #0
 800b2fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800b2fc:	2301      	movs	r3, #1
 800b2fe:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	2b00      	cmp	r3, #0
 800b304:	d07f      	beq.n	800b406 <HAL_RTC_Init+0x112>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b30c:	b2db      	uxtb	r3, r3
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d106      	bne.n	800b320 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	2200      	movs	r2, #0
 800b316:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800b31a:	6878      	ldr	r0, [r7, #4]
 800b31c:	f7f9 fc72 	bl	8004c04 <HAL_RTC_MspInit>
    }
#endif /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 800b326:	605a      	str	r2, [r3, #4]
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	2202      	movs	r2, #2
 800b32c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	22ca      	movs	r2, #202	; 0xca
 800b336:	625a      	str	r2, [r3, #36]	; 0x24
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	2253      	movs	r2, #83	; 0x53
 800b33e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800b340:	6878      	ldr	r0, [r7, #4]
 800b342:	f000 fa65 	bl	800b810 <RTC_EnterInitMode>
 800b346:	4603      	mov	r3, r0
 800b348:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800b34a:	7bfb      	ldrb	r3, [r7, #15]
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d15a      	bne.n	800b406 <HAL_RTC_Init+0x112>
    {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	699b      	ldr	r3, [r3, #24]
 800b356:	687a      	ldr	r2, [r7, #4]
 800b358:	6812      	ldr	r2, [r2, #0]
 800b35a:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 800b35e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b362:	6193      	str	r3, [r2, #24]
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	6999      	ldr	r1, [r3, #24]
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	689a      	ldr	r2, [r3, #8]
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	695b      	ldr	r3, [r3, #20]
 800b372:	431a      	orrs	r2, r3
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	69db      	ldr	r3, [r3, #28]
 800b378:	431a      	orrs	r2, r3
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	430a      	orrs	r2, r1
 800b380:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	687a      	ldr	r2, [r7, #4]
 800b388:	6912      	ldr	r2, [r2, #16]
 800b38a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	6919      	ldr	r1, [r3, #16]
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	68db      	ldr	r3, [r3, #12]
 800b396:	041a      	lsls	r2, r3, #16
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	430a      	orrs	r2, r1
 800b39e:	611a      	str	r2, [r3, #16]

#if defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800b3a0:	4b1b      	ldr	r3, [pc, #108]	; (800b410 <HAL_RTC_Init+0x11c>)
 800b3a2:	68db      	ldr	r3, [r3, #12]
 800b3a4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3b0:	430b      	orrs	r3, r1
 800b3b2:	4917      	ldr	r1, [pc, #92]	; (800b410 <HAL_RTC_Init+0x11c>)
 800b3b4:	4313      	orrs	r3, r2
 800b3b6:	60cb      	str	r3, [r1, #12]
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800b3b8:	6878      	ldr	r0, [r7, #4]
 800b3ba:	f000 fa5f 	bl	800b87c <RTC_ExitInitMode>
 800b3be:	4603      	mov	r3, r0
 800b3c0:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800b3c2:	7bfb      	ldrb	r3, [r7, #15]
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d11e      	bne.n	800b406 <HAL_RTC_Init+0x112>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	699a      	ldr	r2, [r3, #24]
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 800b3d6:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	6999      	ldr	r1, [r3, #24]
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	6a1b      	ldr	r3, [r3, #32]
 800b3e6:	431a      	orrs	r2, r3
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	699b      	ldr	r3, [r3, #24]
 800b3ec:	431a      	orrs	r2, r3
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	430a      	orrs	r2, r1
 800b3f4:	619a      	str	r2, [r3, #24]
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	22ff      	movs	r2, #255	; 0xff
 800b3fc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	2201      	movs	r2, #1
 800b402:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      }
    }
  }

  return status;
 800b406:	7bfb      	ldrb	r3, [r7, #15]
}
 800b408:	4618      	mov	r0, r3
 800b40a:	3710      	adds	r7, #16
 800b40c:	46bd      	mov	sp, r7
 800b40e:	bd80      	pop	{r7, pc}
 800b410:	40002800 	.word	0x40002800

0800b414 <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800b414:	b590      	push	{r4, r7, lr}
 800b416:	b087      	sub	sp, #28
 800b418:	af00      	add	r7, sp, #0
 800b41a:	60f8      	str	r0, [r7, #12]
 800b41c:	60b9      	str	r1, [r7, #8]
 800b41e:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));
  }
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b426:	2b01      	cmp	r3, #1
 800b428:	d101      	bne.n	800b42e <HAL_RTC_SetTime+0x1a>
 800b42a:	2302      	movs	r3, #2
 800b42c:	e08b      	b.n	800b546 <HAL_RTC_SetTime+0x132>
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	2201      	movs	r2, #1
 800b432:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  hrtc->State = HAL_RTC_STATE_BUSY;
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	2202      	movs	r2, #2
 800b43a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	22ca      	movs	r2, #202	; 0xca
 800b444:	625a      	str	r2, [r3, #36]	; 0x24
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	2253      	movs	r2, #83	; 0x53
 800b44c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800b44e:	68f8      	ldr	r0, [r7, #12]
 800b450:	f000 f9de 	bl	800b810 <RTC_EnterInitMode>
 800b454:	4603      	mov	r3, r0
 800b456:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800b458:	7cfb      	ldrb	r3, [r7, #19]
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d15e      	bne.n	800b51c <HAL_RTC_SetTime+0x108>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 800b45e:	4b3c      	ldr	r3, [pc, #240]	; (800b550 <HAL_RTC_SetTime+0x13c>)
 800b460:	68db      	ldr	r3, [r3, #12]
 800b462:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b466:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b46a:	d057      	beq.n	800b51c <HAL_RTC_SetTime+0x108>
    {
      if (Format == RTC_FORMAT_BIN)
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d125      	bne.n	800b4be <HAL_RTC_SetTime+0xaa>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800b472:	4b37      	ldr	r3, [pc, #220]	; (800b550 <HAL_RTC_SetTime+0x13c>)
 800b474:	699b      	ldr	r3, [r3, #24]
 800b476:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d102      	bne.n	800b484 <HAL_RTC_SetTime+0x70>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800b47e:	68bb      	ldr	r3, [r7, #8]
 800b480:	2200      	movs	r2, #0
 800b482:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800b484:	68bb      	ldr	r3, [r7, #8]
 800b486:	781b      	ldrb	r3, [r3, #0]
 800b488:	4618      	mov	r0, r3
 800b48a:	f000 fa35 	bl	800b8f8 <RTC_ByteToBcd2>
 800b48e:	4603      	mov	r3, r0
 800b490:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b492:	68bb      	ldr	r3, [r7, #8]
 800b494:	785b      	ldrb	r3, [r3, #1]
 800b496:	4618      	mov	r0, r3
 800b498:	f000 fa2e 	bl	800b8f8 <RTC_ByteToBcd2>
 800b49c:	4603      	mov	r3, r0
 800b49e:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800b4a0:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800b4a2:	68bb      	ldr	r3, [r7, #8]
 800b4a4:	789b      	ldrb	r3, [r3, #2]
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	f000 fa26 	bl	800b8f8 <RTC_ByteToBcd2>
 800b4ac:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b4ae:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800b4b2:	68bb      	ldr	r3, [r7, #8]
 800b4b4:	78db      	ldrb	r3, [r3, #3]
 800b4b6:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800b4b8:	4313      	orrs	r3, r2
 800b4ba:	617b      	str	r3, [r7, #20]
 800b4bc:	e017      	b.n	800b4ee <HAL_RTC_SetTime+0xda>

      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800b4be:	4b24      	ldr	r3, [pc, #144]	; (800b550 <HAL_RTC_SetTime+0x13c>)
 800b4c0:	699b      	ldr	r3, [r3, #24]
 800b4c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d102      	bne.n	800b4d0 <HAL_RTC_SetTime+0xbc>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800b4ca:	68bb      	ldr	r3, [r7, #8]
 800b4cc:	2200      	movs	r2, #0
 800b4ce:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800b4d0:	68bb      	ldr	r3, [r7, #8]
 800b4d2:	781b      	ldrb	r3, [r3, #0]
 800b4d4:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b4d6:	68bb      	ldr	r3, [r7, #8]
 800b4d8:	785b      	ldrb	r3, [r3, #1]
 800b4da:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800b4dc:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800b4de:	68ba      	ldr	r2, [r7, #8]
 800b4e0:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b4e2:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800b4e4:	68bb      	ldr	r3, [r7, #8]
 800b4e6:	78db      	ldrb	r3, [r3, #3]
 800b4e8:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800b4ea:	4313      	orrs	r3, r2
 800b4ec:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 800b4ee:	4a18      	ldr	r2, [pc, #96]	; (800b550 <HAL_RTC_SetTime+0x13c>)
 800b4f0:	697b      	ldr	r3, [r7, #20]
 800b4f2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800b4f6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800b4fa:	6013      	str	r3, [r2, #0]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 800b4fc:	4b14      	ldr	r3, [pc, #80]	; (800b550 <HAL_RTC_SetTime+0x13c>)
 800b4fe:	699b      	ldr	r3, [r3, #24]
 800b500:	4a13      	ldr	r2, [pc, #76]	; (800b550 <HAL_RTC_SetTime+0x13c>)
 800b502:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b506:	6193      	str	r3, [r2, #24]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 800b508:	4b11      	ldr	r3, [pc, #68]	; (800b550 <HAL_RTC_SetTime+0x13c>)
 800b50a:	699a      	ldr	r2, [r3, #24]
 800b50c:	68bb      	ldr	r3, [r7, #8]
 800b50e:	68d9      	ldr	r1, [r3, #12]
 800b510:	68bb      	ldr	r3, [r7, #8]
 800b512:	691b      	ldr	r3, [r3, #16]
 800b514:	430b      	orrs	r3, r1
 800b516:	490e      	ldr	r1, [pc, #56]	; (800b550 <HAL_RTC_SetTime+0x13c>)
 800b518:	4313      	orrs	r3, r2
 800b51a:	618b      	str	r3, [r1, #24]
    }
  }

  /* Exit Initialization mode */
  status = RTC_ExitInitMode(hrtc);
 800b51c:	68f8      	ldr	r0, [r7, #12]
 800b51e:	f000 f9ad 	bl	800b87c <RTC_ExitInitMode>
 800b522:	4603      	mov	r3, r0
 800b524:	74fb      	strb	r3, [r7, #19]


  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	22ff      	movs	r2, #255	; 0xff
 800b52c:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800b52e:	7cfb      	ldrb	r3, [r7, #19]
 800b530:	2b00      	cmp	r3, #0
 800b532:	d103      	bne.n	800b53c <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	2201      	movs	r2, #1
 800b538:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	2200      	movs	r2, #0
 800b540:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800b544:	7cfb      	ldrb	r3, [r7, #19]
}
 800b546:	4618      	mov	r0, r3
 800b548:	371c      	adds	r7, #28
 800b54a:	46bd      	mov	sp, r7
 800b54c:	bd90      	pop	{r4, r7, pc}
 800b54e:	bf00      	nop
 800b550:	40002800 	.word	0x40002800

0800b554 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800b554:	b580      	push	{r7, lr}
 800b556:	b086      	sub	sp, #24
 800b558:	af00      	add	r7, sp, #0
 800b55a:	60f8      	str	r0, [r7, #12]
 800b55c:	60b9      	str	r1, [r7, #8]
 800b55e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg;

  UNUSED(hrtc);
  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = READ_REG(RTC->SSR);
 800b560:	4b2c      	ldr	r3, [pc, #176]	; (800b614 <HAL_RTC_GetTime+0xc0>)
 800b562:	689a      	ldr	r2, [r3, #8]
 800b564:	68bb      	ldr	r3, [r7, #8]
 800b566:	605a      	str	r2, [r3, #4]

  if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 800b568:	4b2a      	ldr	r3, [pc, #168]	; (800b614 <HAL_RTC_GetTime+0xc0>)
 800b56a:	68db      	ldr	r3, [r3, #12]
 800b56c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b570:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b574:	d049      	beq.n	800b60a <HAL_RTC_GetTime+0xb6>
  {
    /* Check the parameters */
    assert_param(IS_RTC_FORMAT(Format));

    /* Get SecondFraction structure field from the corresponding register field*/
    sTime->SecondFraction = (uint32_t)(READ_REG(RTC->PRER) & RTC_PRER_PREDIV_S);
 800b576:	4b27      	ldr	r3, [pc, #156]	; (800b614 <HAL_RTC_GetTime+0xc0>)
 800b578:	691b      	ldr	r3, [r3, #16]
 800b57a:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800b57e:	68bb      	ldr	r3, [r7, #8]
 800b580:	609a      	str	r2, [r3, #8]

    /* Get the TR register */
    tmpreg = (uint32_t)(READ_REG(RTC->TR) & RTC_TR_RESERVED_MASK);
 800b582:	4b24      	ldr	r3, [pc, #144]	; (800b614 <HAL_RTC_GetTime+0xc0>)
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800b58a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800b58e:	617b      	str	r3, [r7, #20]

    /* Fill the structure fields with the read parameters */
    sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 800b590:	697b      	ldr	r3, [r7, #20]
 800b592:	0c1b      	lsrs	r3, r3, #16
 800b594:	b2db      	uxtb	r3, r3
 800b596:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b59a:	b2da      	uxtb	r2, r3
 800b59c:	68bb      	ldr	r3, [r7, #8]
 800b59e:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800b5a0:	697b      	ldr	r3, [r7, #20]
 800b5a2:	0a1b      	lsrs	r3, r3, #8
 800b5a4:	b2db      	uxtb	r3, r3
 800b5a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b5aa:	b2da      	uxtb	r2, r3
 800b5ac:	68bb      	ldr	r3, [r7, #8]
 800b5ae:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 800b5b0:	697b      	ldr	r3, [r7, #20]
 800b5b2:	b2db      	uxtb	r3, r3
 800b5b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b5b8:	b2da      	uxtb	r2, r3
 800b5ba:	68bb      	ldr	r3, [r7, #8]
 800b5bc:	709a      	strb	r2, [r3, #2]
    sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 800b5be:	697b      	ldr	r3, [r7, #20]
 800b5c0:	0d9b      	lsrs	r3, r3, #22
 800b5c2:	b2db      	uxtb	r3, r3
 800b5c4:	f003 0301 	and.w	r3, r3, #1
 800b5c8:	b2da      	uxtb	r2, r3
 800b5ca:	68bb      	ldr	r3, [r7, #8]
 800b5cc:	70da      	strb	r2, [r3, #3]

    /* Check the input parameters format */
    if (Format == RTC_FORMAT_BIN)
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d11a      	bne.n	800b60a <HAL_RTC_GetTime+0xb6>
    {
      /* Convert the time structure parameters to Binary format */
      sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800b5d4:	68bb      	ldr	r3, [r7, #8]
 800b5d6:	781b      	ldrb	r3, [r3, #0]
 800b5d8:	4618      	mov	r0, r3
 800b5da:	f000 f9ad 	bl	800b938 <RTC_Bcd2ToByte>
 800b5de:	4603      	mov	r3, r0
 800b5e0:	461a      	mov	r2, r3
 800b5e2:	68bb      	ldr	r3, [r7, #8]
 800b5e4:	701a      	strb	r2, [r3, #0]
      sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800b5e6:	68bb      	ldr	r3, [r7, #8]
 800b5e8:	785b      	ldrb	r3, [r3, #1]
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	f000 f9a4 	bl	800b938 <RTC_Bcd2ToByte>
 800b5f0:	4603      	mov	r3, r0
 800b5f2:	461a      	mov	r2, r3
 800b5f4:	68bb      	ldr	r3, [r7, #8]
 800b5f6:	705a      	strb	r2, [r3, #1]
      sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800b5f8:	68bb      	ldr	r3, [r7, #8]
 800b5fa:	789b      	ldrb	r3, [r3, #2]
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	f000 f99b 	bl	800b938 <RTC_Bcd2ToByte>
 800b602:	4603      	mov	r3, r0
 800b604:	461a      	mov	r2, r3
 800b606:	68bb      	ldr	r3, [r7, #8]
 800b608:	709a      	strb	r2, [r3, #2]
    }
  }

  return HAL_OK;
 800b60a:	2300      	movs	r3, #0
}
 800b60c:	4618      	mov	r0, r3
 800b60e:	3718      	adds	r7, #24
 800b610:	46bd      	mov	sp, r7
 800b612:	bd80      	pop	{r7, pc}
 800b614:	40002800 	.word	0x40002800

0800b618 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800b618:	b590      	push	{r4, r7, lr}
 800b61a:	b087      	sub	sp, #28
 800b61c:	af00      	add	r7, sp, #0
 800b61e:	60f8      	str	r0, [r7, #12]
 800b620:	60b9      	str	r1, [r7, #8]
 800b622:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b62a:	2b01      	cmp	r3, #1
 800b62c:	d101      	bne.n	800b632 <HAL_RTC_SetDate+0x1a>
 800b62e:	2302      	movs	r3, #2
 800b630:	e074      	b.n	800b71c <HAL_RTC_SetDate+0x104>
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	2201      	movs	r2, #1
 800b636:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  hrtc->State = HAL_RTC_STATE_BUSY;
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	2202      	movs	r2, #2
 800b63e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	2b00      	cmp	r3, #0
 800b646:	d10e      	bne.n	800b666 <HAL_RTC_SetDate+0x4e>
 800b648:	68bb      	ldr	r3, [r7, #8]
 800b64a:	785b      	ldrb	r3, [r3, #1]
 800b64c:	f003 0310 	and.w	r3, r3, #16
 800b650:	2b00      	cmp	r3, #0
 800b652:	d008      	beq.n	800b666 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800b654:	68bb      	ldr	r3, [r7, #8]
 800b656:	785b      	ldrb	r3, [r3, #1]
 800b658:	f023 0310 	bic.w	r3, r3, #16
 800b65c:	b2db      	uxtb	r3, r3
 800b65e:	330a      	adds	r3, #10
 800b660:	b2da      	uxtb	r2, r3
 800b662:	68bb      	ldr	r3, [r7, #8]
 800b664:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d11c      	bne.n	800b6a6 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800b66c:	68bb      	ldr	r3, [r7, #8]
 800b66e:	78db      	ldrb	r3, [r3, #3]
 800b670:	4618      	mov	r0, r3
 800b672:	f000 f941 	bl	800b8f8 <RTC_ByteToBcd2>
 800b676:	4603      	mov	r3, r0
 800b678:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800b67a:	68bb      	ldr	r3, [r7, #8]
 800b67c:	785b      	ldrb	r3, [r3, #1]
 800b67e:	4618      	mov	r0, r3
 800b680:	f000 f93a 	bl	800b8f8 <RTC_ByteToBcd2>
 800b684:	4603      	mov	r3, r0
 800b686:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800b688:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800b68a:	68bb      	ldr	r3, [r7, #8]
 800b68c:	789b      	ldrb	r3, [r3, #2]
 800b68e:	4618      	mov	r0, r3
 800b690:	f000 f932 	bl	800b8f8 <RTC_ByteToBcd2>
 800b694:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800b696:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800b69a:	68bb      	ldr	r3, [r7, #8]
 800b69c:	781b      	ldrb	r3, [r3, #0]
 800b69e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800b6a0:	4313      	orrs	r3, r2
 800b6a2:	617b      	str	r3, [r7, #20]
 800b6a4:	e00e      	b.n	800b6c4 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800b6a6:	68bb      	ldr	r3, [r7, #8]
 800b6a8:	78db      	ldrb	r3, [r3, #3]
 800b6aa:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800b6ac:	68bb      	ldr	r3, [r7, #8]
 800b6ae:	785b      	ldrb	r3, [r3, #1]
 800b6b0:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800b6b2:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800b6b4:	68ba      	ldr	r2, [r7, #8]
 800b6b6:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800b6b8:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800b6ba:	68bb      	ldr	r3, [r7, #8]
 800b6bc:	781b      	ldrb	r3, [r3, #0]
 800b6be:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800b6c0:	4313      	orrs	r3, r2
 800b6c2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	22ca      	movs	r2, #202	; 0xca
 800b6ca:	625a      	str	r2, [r3, #36]	; 0x24
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	2253      	movs	r2, #83	; 0x53
 800b6d2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800b6d4:	68f8      	ldr	r0, [r7, #12]
 800b6d6:	f000 f89b 	bl	800b810 <RTC_EnterInitMode>
 800b6da:	4603      	mov	r3, r0
 800b6dc:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800b6de:	7cfb      	ldrb	r3, [r7, #19]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d10b      	bne.n	800b6fc <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 800b6e4:	4a0f      	ldr	r2, [pc, #60]	; (800b724 <HAL_RTC_SetDate+0x10c>)
 800b6e6:	697b      	ldr	r3, [r7, #20]
 800b6e8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b6ec:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b6f0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800b6f2:	68f8      	ldr	r0, [r7, #12]
 800b6f4:	f000 f8c2 	bl	800b87c <RTC_ExitInitMode>
 800b6f8:	4603      	mov	r3, r0
 800b6fa:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	22ff      	movs	r2, #255	; 0xff
 800b702:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800b704:	7cfb      	ldrb	r3, [r7, #19]
 800b706:	2b00      	cmp	r3, #0
 800b708:	d103      	bne.n	800b712 <HAL_RTC_SetDate+0xfa>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	2201      	movs	r2, #1
 800b70e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	2200      	movs	r2, #0
 800b716:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800b71a:	7cfb      	ldrb	r3, [r7, #19]
}
 800b71c:	4618      	mov	r0, r3
 800b71e:	371c      	adds	r7, #28
 800b720:	46bd      	mov	sp, r7
 800b722:	bd90      	pop	{r4, r7, pc}
 800b724:	40002800 	.word	0x40002800

0800b728 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800b728:	b580      	push	{r7, lr}
 800b72a:	b086      	sub	sp, #24
 800b72c:	af00      	add	r7, sp, #0
 800b72e:	60f8      	str	r0, [r7, #12]
 800b730:	60b9      	str	r1, [r7, #8]
 800b732:	607a      	str	r2, [r7, #4]
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(READ_REG(RTC->DR) & RTC_DR_RESERVED_MASK);
 800b734:	4b22      	ldr	r3, [pc, #136]	; (800b7c0 <HAL_RTC_GetDate+0x98>)
 800b736:	685b      	ldr	r3, [r3, #4]
 800b738:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b73c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b740:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800b742:	697b      	ldr	r3, [r7, #20]
 800b744:	0c1b      	lsrs	r3, r3, #16
 800b746:	b2da      	uxtb	r2, r3
 800b748:	68bb      	ldr	r3, [r7, #8]
 800b74a:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800b74c:	697b      	ldr	r3, [r7, #20]
 800b74e:	0a1b      	lsrs	r3, r3, #8
 800b750:	b2db      	uxtb	r3, r3
 800b752:	f003 031f 	and.w	r3, r3, #31
 800b756:	b2da      	uxtb	r2, r3
 800b758:	68bb      	ldr	r3, [r7, #8]
 800b75a:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800b75c:	697b      	ldr	r3, [r7, #20]
 800b75e:	b2db      	uxtb	r3, r3
 800b760:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b764:	b2da      	uxtb	r2, r3
 800b766:	68bb      	ldr	r3, [r7, #8]
 800b768:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 800b76a:	697b      	ldr	r3, [r7, #20]
 800b76c:	0b5b      	lsrs	r3, r3, #13
 800b76e:	b2db      	uxtb	r3, r3
 800b770:	f003 0307 	and.w	r3, r3, #7
 800b774:	b2da      	uxtb	r2, r3
 800b776:	68bb      	ldr	r3, [r7, #8]
 800b778:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d11a      	bne.n	800b7b6 <HAL_RTC_GetDate+0x8e>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800b780:	68bb      	ldr	r3, [r7, #8]
 800b782:	78db      	ldrb	r3, [r3, #3]
 800b784:	4618      	mov	r0, r3
 800b786:	f000 f8d7 	bl	800b938 <RTC_Bcd2ToByte>
 800b78a:	4603      	mov	r3, r0
 800b78c:	461a      	mov	r2, r3
 800b78e:	68bb      	ldr	r3, [r7, #8]
 800b790:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800b792:	68bb      	ldr	r3, [r7, #8]
 800b794:	785b      	ldrb	r3, [r3, #1]
 800b796:	4618      	mov	r0, r3
 800b798:	f000 f8ce 	bl	800b938 <RTC_Bcd2ToByte>
 800b79c:	4603      	mov	r3, r0
 800b79e:	461a      	mov	r2, r3
 800b7a0:	68bb      	ldr	r3, [r7, #8]
 800b7a2:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800b7a4:	68bb      	ldr	r3, [r7, #8]
 800b7a6:	789b      	ldrb	r3, [r3, #2]
 800b7a8:	4618      	mov	r0, r3
 800b7aa:	f000 f8c5 	bl	800b938 <RTC_Bcd2ToByte>
 800b7ae:	4603      	mov	r3, r0
 800b7b0:	461a      	mov	r2, r3
 800b7b2:	68bb      	ldr	r3, [r7, #8]
 800b7b4:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800b7b6:	2300      	movs	r3, #0
}
 800b7b8:	4618      	mov	r0, r3
 800b7ba:	3718      	adds	r7, #24
 800b7bc:	46bd      	mov	sp, r7
 800b7be:	bd80      	pop	{r7, pc}
 800b7c0:	40002800 	.word	0x40002800

0800b7c4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800b7c4:	b580      	push	{r7, lr}
 800b7c6:	b084      	sub	sp, #16
 800b7c8:	af00      	add	r7, sp, #0
 800b7ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	68da      	ldr	r2, [r3, #12]
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800b7da:	60da      	str	r2, [r3, #12]
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
#endif

  tickstart = HAL_GetTick();
 800b7dc:	f7f9 fce8 	bl	80051b0 <HAL_GetTick>
 800b7e0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800b7e2:	e009      	b.n	800b7f8 <HAL_RTC_WaitForSynchro+0x34>
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800b7e4:	f7f9 fce4 	bl	80051b0 <HAL_GetTick>
 800b7e8:	4602      	mov	r2, r0
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	1ad3      	subs	r3, r2, r3
 800b7ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b7f2:	d901      	bls.n	800b7f8 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800b7f4:	2303      	movs	r3, #3
 800b7f6:	e007      	b.n	800b808 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	68db      	ldr	r3, [r3, #12]
 800b7fe:	f003 0320 	and.w	r3, r3, #32
 800b802:	2b00      	cmp	r3, #0
 800b804:	d0ee      	beq.n	800b7e4 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800b806:	2300      	movs	r3, #0
}
 800b808:	4618      	mov	r0, r3
 800b80a:	3710      	adds	r7, #16
 800b80c:	46bd      	mov	sp, r7
 800b80e:	bd80      	pop	{r7, pc}

0800b810 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800b810:	b580      	push	{r7, lr}
 800b812:	b084      	sub	sp, #16
 800b814:	af00      	add	r7, sp, #0
 800b816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b818:	2300      	movs	r3, #0
 800b81a:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if ((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	68db      	ldr	r3, [r3, #12]
 800b822:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b826:	2b00      	cmp	r3, #0
 800b828:	d123      	bne.n	800b872 <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	68da      	ldr	r2, [r3, #12]
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b838:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800b83a:	f7f9 fcb9 	bl	80051b0 <HAL_GetTick>
 800b83e:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800b840:	e00d      	b.n	800b85e <RTC_EnterInitMode+0x4e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800b842:	f7f9 fcb5 	bl	80051b0 <HAL_GetTick>
 800b846:	4602      	mov	r2, r0
 800b848:	68bb      	ldr	r3, [r7, #8]
 800b84a:	1ad3      	subs	r3, r2, r3
 800b84c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b850:	d905      	bls.n	800b85e <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 800b852:	2303      	movs	r3, #3
 800b854:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	2203      	movs	r2, #3
 800b85a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	68db      	ldr	r3, [r3, #12]
 800b864:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d102      	bne.n	800b872 <RTC_EnterInitMode+0x62>
 800b86c:	7bfb      	ldrb	r3, [r7, #15]
 800b86e:	2b03      	cmp	r3, #3
 800b870:	d1e7      	bne.n	800b842 <RTC_EnterInitMode+0x32>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800b872:	7bfb      	ldrb	r3, [r7, #15]
}
 800b874:	4618      	mov	r0, r3
 800b876:	3710      	adds	r7, #16
 800b878:	46bd      	mov	sp, r7
 800b87a:	bd80      	pop	{r7, pc}

0800b87c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800b87c:	b580      	push	{r7, lr}
 800b87e:	b084      	sub	sp, #16
 800b880:	af00      	add	r7, sp, #0
 800b882:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b884:	2300      	movs	r3, #0
 800b886:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800b888:	4b1a      	ldr	r3, [pc, #104]	; (800b8f4 <RTC_ExitInitMode+0x78>)
 800b88a:	68db      	ldr	r3, [r3, #12]
 800b88c:	4a19      	ldr	r2, [pc, #100]	; (800b8f4 <RTC_ExitInitMode+0x78>)
 800b88e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b892:	60d3      	str	r3, [r2, #12]
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800b894:	4b17      	ldr	r3, [pc, #92]	; (800b8f4 <RTC_ExitInitMode+0x78>)
 800b896:	699b      	ldr	r3, [r3, #24]
 800b898:	f003 0320 	and.w	r3, r3, #32
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d10c      	bne.n	800b8ba <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800b8a0:	6878      	ldr	r0, [r7, #4]
 800b8a2:	f7ff ff8f 	bl	800b7c4 <HAL_RTC_WaitForSynchro>
 800b8a6:	4603      	mov	r3, r0
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d01e      	beq.n	800b8ea <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	2203      	movs	r2, #3
 800b8b0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      status = HAL_TIMEOUT;
 800b8b4:	2303      	movs	r3, #3
 800b8b6:	73fb      	strb	r3, [r7, #15]
 800b8b8:	e017      	b.n	800b8ea <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800b8ba:	4b0e      	ldr	r3, [pc, #56]	; (800b8f4 <RTC_ExitInitMode+0x78>)
 800b8bc:	699b      	ldr	r3, [r3, #24]
 800b8be:	4a0d      	ldr	r2, [pc, #52]	; (800b8f4 <RTC_ExitInitMode+0x78>)
 800b8c0:	f023 0320 	bic.w	r3, r3, #32
 800b8c4:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800b8c6:	6878      	ldr	r0, [r7, #4]
 800b8c8:	f7ff ff7c 	bl	800b7c4 <HAL_RTC_WaitForSynchro>
 800b8cc:	4603      	mov	r3, r0
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d005      	beq.n	800b8de <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	2203      	movs	r2, #3
 800b8d6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      status = HAL_TIMEOUT;
 800b8da:	2303      	movs	r3, #3
 800b8dc:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800b8de:	4b05      	ldr	r3, [pc, #20]	; (800b8f4 <RTC_ExitInitMode+0x78>)
 800b8e0:	699b      	ldr	r3, [r3, #24]
 800b8e2:	4a04      	ldr	r2, [pc, #16]	; (800b8f4 <RTC_ExitInitMode+0x78>)
 800b8e4:	f043 0320 	orr.w	r3, r3, #32
 800b8e8:	6193      	str	r3, [r2, #24]
  }

  return status;
 800b8ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8ec:	4618      	mov	r0, r3
 800b8ee:	3710      	adds	r7, #16
 800b8f0:	46bd      	mov	sp, r7
 800b8f2:	bd80      	pop	{r7, pc}
 800b8f4:	40002800 	.word	0x40002800

0800b8f8 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800b8f8:	b480      	push	{r7}
 800b8fa:	b085      	sub	sp, #20
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	4603      	mov	r3, r0
 800b900:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800b902:	2300      	movs	r3, #0
 800b904:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 800b906:	79fb      	ldrb	r3, [r7, #7]
 800b908:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 800b90a:	e005      	b.n	800b918 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	3301      	adds	r3, #1
 800b910:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 800b912:	7afb      	ldrb	r3, [r7, #11]
 800b914:	3b0a      	subs	r3, #10
 800b916:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 800b918:	7afb      	ldrb	r3, [r7, #11]
 800b91a:	2b09      	cmp	r3, #9
 800b91c:	d8f6      	bhi.n	800b90c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	b2db      	uxtb	r3, r3
 800b922:	011b      	lsls	r3, r3, #4
 800b924:	b2da      	uxtb	r2, r3
 800b926:	7afb      	ldrb	r3, [r7, #11]
 800b928:	4313      	orrs	r3, r2
 800b92a:	b2db      	uxtb	r3, r3
}
 800b92c:	4618      	mov	r0, r3
 800b92e:	3714      	adds	r7, #20
 800b930:	46bd      	mov	sp, r7
 800b932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b936:	4770      	bx	lr

0800b938 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800b938:	b480      	push	{r7}
 800b93a:	b085      	sub	sp, #20
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	4603      	mov	r3, r0
 800b940:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800b942:	79fb      	ldrb	r3, [r7, #7]
 800b944:	091b      	lsrs	r3, r3, #4
 800b946:	b2db      	uxtb	r3, r3
 800b948:	461a      	mov	r2, r3
 800b94a:	0092      	lsls	r2, r2, #2
 800b94c:	4413      	add	r3, r2
 800b94e:	005b      	lsls	r3, r3, #1
 800b950:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800b952:	79fb      	ldrb	r3, [r7, #7]
 800b954:	f003 030f 	and.w	r3, r3, #15
 800b958:	b2da      	uxtb	r2, r3
 800b95a:	7bfb      	ldrb	r3, [r7, #15]
 800b95c:	4413      	add	r3, r2
 800b95e:	b2db      	uxtb	r3, r3
}
 800b960:	4618      	mov	r0, r3
 800b962:	3714      	adds	r7, #20
 800b964:	46bd      	mov	sp, r7
 800b966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b96a:	4770      	bx	lr

0800b96c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b96c:	b580      	push	{r7, lr}
 800b96e:	b084      	sub	sp, #16
 800b970:	af00      	add	r7, sp, #0
 800b972:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	2b00      	cmp	r3, #0
 800b978:	d101      	bne.n	800b97e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b97a:	2301      	movs	r3, #1
 800b97c:	e095      	b.n	800baaa <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b982:	2b00      	cmp	r3, #0
 800b984:	d108      	bne.n	800b998 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	685b      	ldr	r3, [r3, #4]
 800b98a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b98e:	d009      	beq.n	800b9a4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	2200      	movs	r2, #0
 800b994:	61da      	str	r2, [r3, #28]
 800b996:	e005      	b.n	800b9a4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	2200      	movs	r2, #0
 800b99c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	2200      	movs	r2, #0
 800b9a2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	2200      	movs	r2, #0
 800b9a8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b9b0:	b2db      	uxtb	r3, r3
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d106      	bne.n	800b9c4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	2200      	movs	r2, #0
 800b9ba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b9be:	6878      	ldr	r0, [r7, #4]
 800b9c0:	f7f9 f95e 	bl	8004c80 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	2202      	movs	r2, #2
 800b9c8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	681a      	ldr	r2, [r3, #0]
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b9da:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	68db      	ldr	r3, [r3, #12]
 800b9e0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b9e4:	d902      	bls.n	800b9ec <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	60fb      	str	r3, [r7, #12]
 800b9ea:	e002      	b.n	800b9f2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800b9ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b9f0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	68db      	ldr	r3, [r3, #12]
 800b9f6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800b9fa:	d007      	beq.n	800ba0c <HAL_SPI_Init+0xa0>
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	68db      	ldr	r3, [r3, #12]
 800ba00:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800ba04:	d002      	beq.n	800ba0c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	2200      	movs	r2, #0
 800ba0a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	685b      	ldr	r3, [r3, #4]
 800ba10:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	689b      	ldr	r3, [r3, #8]
 800ba18:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800ba1c:	431a      	orrs	r2, r3
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	691b      	ldr	r3, [r3, #16]
 800ba22:	f003 0302 	and.w	r3, r3, #2
 800ba26:	431a      	orrs	r2, r3
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	695b      	ldr	r3, [r3, #20]
 800ba2c:	f003 0301 	and.w	r3, r3, #1
 800ba30:	431a      	orrs	r2, r3
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	699b      	ldr	r3, [r3, #24]
 800ba36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ba3a:	431a      	orrs	r2, r3
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	69db      	ldr	r3, [r3, #28]
 800ba40:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ba44:	431a      	orrs	r2, r3
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	6a1b      	ldr	r3, [r3, #32]
 800ba4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ba4e:	ea42 0103 	orr.w	r1, r2, r3
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba56:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	430a      	orrs	r2, r1
 800ba60:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	699b      	ldr	r3, [r3, #24]
 800ba66:	0c1b      	lsrs	r3, r3, #16
 800ba68:	f003 0204 	and.w	r2, r3, #4
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba70:	f003 0310 	and.w	r3, r3, #16
 800ba74:	431a      	orrs	r2, r3
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba7a:	f003 0308 	and.w	r3, r3, #8
 800ba7e:	431a      	orrs	r2, r3
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	68db      	ldr	r3, [r3, #12]
 800ba84:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800ba88:	ea42 0103 	orr.w	r1, r2, r3
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	430a      	orrs	r2, r1
 800ba98:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	2200      	movs	r2, #0
 800ba9e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	2201      	movs	r2, #1
 800baa4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800baa8:	2300      	movs	r3, #0
}
 800baaa:	4618      	mov	r0, r3
 800baac:	3710      	adds	r7, #16
 800baae:	46bd      	mov	sp, r7
 800bab0:	bd80      	pop	{r7, pc}

0800bab2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bab2:	b580      	push	{r7, lr}
 800bab4:	b088      	sub	sp, #32
 800bab6:	af00      	add	r7, sp, #0
 800bab8:	60f8      	str	r0, [r7, #12]
 800baba:	60b9      	str	r1, [r7, #8]
 800babc:	603b      	str	r3, [r7, #0]
 800babe:	4613      	mov	r3, r2
 800bac0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800bac2:	2300      	movs	r3, #0
 800bac4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800bacc:	2b01      	cmp	r3, #1
 800bace:	d101      	bne.n	800bad4 <HAL_SPI_Transmit+0x22>
 800bad0:	2302      	movs	r3, #2
 800bad2:	e158      	b.n	800bd86 <HAL_SPI_Transmit+0x2d4>
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	2201      	movs	r2, #1
 800bad8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800badc:	f7f9 fb68 	bl	80051b0 <HAL_GetTick>
 800bae0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800bae2:	88fb      	ldrh	r3, [r7, #6]
 800bae4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800baec:	b2db      	uxtb	r3, r3
 800baee:	2b01      	cmp	r3, #1
 800baf0:	d002      	beq.n	800baf8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800baf2:	2302      	movs	r3, #2
 800baf4:	77fb      	strb	r3, [r7, #31]
    goto error;
 800baf6:	e13d      	b.n	800bd74 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800baf8:	68bb      	ldr	r3, [r7, #8]
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d002      	beq.n	800bb04 <HAL_SPI_Transmit+0x52>
 800bafe:	88fb      	ldrh	r3, [r7, #6]
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d102      	bne.n	800bb0a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800bb04:	2301      	movs	r3, #1
 800bb06:	77fb      	strb	r3, [r7, #31]
    goto error;
 800bb08:	e134      	b.n	800bd74 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	2203      	movs	r2, #3
 800bb0e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	2200      	movs	r2, #0
 800bb16:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	68ba      	ldr	r2, [r7, #8]
 800bb1c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	88fa      	ldrh	r2, [r7, #6]
 800bb22:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	88fa      	ldrh	r2, [r7, #6]
 800bb28:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	2200      	movs	r2, #0
 800bb2e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	2200      	movs	r2, #0
 800bb34:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	2200      	movs	r2, #0
 800bb3c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	2200      	movs	r2, #0
 800bb44:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	2200      	movs	r2, #0
 800bb4a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	689b      	ldr	r3, [r3, #8]
 800bb50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bb54:	d10f      	bne.n	800bb76 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	681a      	ldr	r2, [r3, #0]
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bb64:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	681a      	ldr	r2, [r3, #0]
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bb74:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb80:	2b40      	cmp	r3, #64	; 0x40
 800bb82:	d007      	beq.n	800bb94 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	681a      	ldr	r2, [r3, #0]
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bb92:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	68db      	ldr	r3, [r3, #12]
 800bb98:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800bb9c:	d94b      	bls.n	800bc36 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	685b      	ldr	r3, [r3, #4]
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d002      	beq.n	800bbac <HAL_SPI_Transmit+0xfa>
 800bba6:	8afb      	ldrh	r3, [r7, #22]
 800bba8:	2b01      	cmp	r3, #1
 800bbaa:	d13e      	bne.n	800bc2a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbb0:	881a      	ldrh	r2, [r3, #0]
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbbc:	1c9a      	adds	r2, r3, #2
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bbc6:	b29b      	uxth	r3, r3
 800bbc8:	3b01      	subs	r3, #1
 800bbca:	b29a      	uxth	r2, r3
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800bbd0:	e02b      	b.n	800bc2a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	689b      	ldr	r3, [r3, #8]
 800bbd8:	f003 0302 	and.w	r3, r3, #2
 800bbdc:	2b02      	cmp	r3, #2
 800bbde:	d112      	bne.n	800bc06 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbe4:	881a      	ldrh	r2, [r3, #0]
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbf0:	1c9a      	adds	r2, r3, #2
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bbfa:	b29b      	uxth	r3, r3
 800bbfc:	3b01      	subs	r3, #1
 800bbfe:	b29a      	uxth	r2, r3
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	87da      	strh	r2, [r3, #62]	; 0x3e
 800bc04:	e011      	b.n	800bc2a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bc06:	f7f9 fad3 	bl	80051b0 <HAL_GetTick>
 800bc0a:	4602      	mov	r2, r0
 800bc0c:	69bb      	ldr	r3, [r7, #24]
 800bc0e:	1ad3      	subs	r3, r2, r3
 800bc10:	683a      	ldr	r2, [r7, #0]
 800bc12:	429a      	cmp	r2, r3
 800bc14:	d803      	bhi.n	800bc1e <HAL_SPI_Transmit+0x16c>
 800bc16:	683b      	ldr	r3, [r7, #0]
 800bc18:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc1c:	d102      	bne.n	800bc24 <HAL_SPI_Transmit+0x172>
 800bc1e:	683b      	ldr	r3, [r7, #0]
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d102      	bne.n	800bc2a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800bc24:	2303      	movs	r3, #3
 800bc26:	77fb      	strb	r3, [r7, #31]
          goto error;
 800bc28:	e0a4      	b.n	800bd74 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bc2e:	b29b      	uxth	r3, r3
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d1ce      	bne.n	800bbd2 <HAL_SPI_Transmit+0x120>
 800bc34:	e07c      	b.n	800bd30 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	685b      	ldr	r3, [r3, #4]
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d002      	beq.n	800bc44 <HAL_SPI_Transmit+0x192>
 800bc3e:	8afb      	ldrh	r3, [r7, #22]
 800bc40:	2b01      	cmp	r3, #1
 800bc42:	d170      	bne.n	800bd26 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bc48:	b29b      	uxth	r3, r3
 800bc4a:	2b01      	cmp	r3, #1
 800bc4c:	d912      	bls.n	800bc74 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc52:	881a      	ldrh	r2, [r3, #0]
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc5e:	1c9a      	adds	r2, r3, #2
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bc68:	b29b      	uxth	r3, r3
 800bc6a:	3b02      	subs	r3, #2
 800bc6c:	b29a      	uxth	r2, r3
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	87da      	strh	r2, [r3, #62]	; 0x3e
 800bc72:	e058      	b.n	800bd26 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	330c      	adds	r3, #12
 800bc7e:	7812      	ldrb	r2, [r2, #0]
 800bc80:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc86:	1c5a      	adds	r2, r3, #1
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bc90:	b29b      	uxth	r3, r3
 800bc92:	3b01      	subs	r3, #1
 800bc94:	b29a      	uxth	r2, r3
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800bc9a:	e044      	b.n	800bd26 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	689b      	ldr	r3, [r3, #8]
 800bca2:	f003 0302 	and.w	r3, r3, #2
 800bca6:	2b02      	cmp	r3, #2
 800bca8:	d12b      	bne.n	800bd02 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bcae:	b29b      	uxth	r3, r3
 800bcb0:	2b01      	cmp	r3, #1
 800bcb2:	d912      	bls.n	800bcda <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcb8:	881a      	ldrh	r2, [r3, #0]
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcc4:	1c9a      	adds	r2, r3, #2
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bcce:	b29b      	uxth	r3, r3
 800bcd0:	3b02      	subs	r3, #2
 800bcd2:	b29a      	uxth	r2, r3
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	87da      	strh	r2, [r3, #62]	; 0x3e
 800bcd8:	e025      	b.n	800bd26 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	330c      	adds	r3, #12
 800bce4:	7812      	ldrb	r2, [r2, #0]
 800bce6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcec:	1c5a      	adds	r2, r3, #1
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bcf6:	b29b      	uxth	r3, r3
 800bcf8:	3b01      	subs	r3, #1
 800bcfa:	b29a      	uxth	r2, r3
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	87da      	strh	r2, [r3, #62]	; 0x3e
 800bd00:	e011      	b.n	800bd26 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bd02:	f7f9 fa55 	bl	80051b0 <HAL_GetTick>
 800bd06:	4602      	mov	r2, r0
 800bd08:	69bb      	ldr	r3, [r7, #24]
 800bd0a:	1ad3      	subs	r3, r2, r3
 800bd0c:	683a      	ldr	r2, [r7, #0]
 800bd0e:	429a      	cmp	r2, r3
 800bd10:	d803      	bhi.n	800bd1a <HAL_SPI_Transmit+0x268>
 800bd12:	683b      	ldr	r3, [r7, #0]
 800bd14:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd18:	d102      	bne.n	800bd20 <HAL_SPI_Transmit+0x26e>
 800bd1a:	683b      	ldr	r3, [r7, #0]
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d102      	bne.n	800bd26 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800bd20:	2303      	movs	r3, #3
 800bd22:	77fb      	strb	r3, [r7, #31]
          goto error;
 800bd24:	e026      	b.n	800bd74 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bd2a:	b29b      	uxth	r3, r3
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d1b5      	bne.n	800bc9c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800bd30:	69ba      	ldr	r2, [r7, #24]
 800bd32:	6839      	ldr	r1, [r7, #0]
 800bd34:	68f8      	ldr	r0, [r7, #12]
 800bd36:	f000 fb5b 	bl	800c3f0 <SPI_EndRxTxTransaction>
 800bd3a:	4603      	mov	r3, r0
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d002      	beq.n	800bd46 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	2220      	movs	r2, #32
 800bd44:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	689b      	ldr	r3, [r3, #8]
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d10a      	bne.n	800bd64 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bd4e:	2300      	movs	r3, #0
 800bd50:	613b      	str	r3, [r7, #16]
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	68db      	ldr	r3, [r3, #12]
 800bd58:	613b      	str	r3, [r7, #16]
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	689b      	ldr	r3, [r3, #8]
 800bd60:	613b      	str	r3, [r7, #16]
 800bd62:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d002      	beq.n	800bd72 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800bd6c:	2301      	movs	r3, #1
 800bd6e:	77fb      	strb	r3, [r7, #31]
 800bd70:	e000      	b.n	800bd74 <HAL_SPI_Transmit+0x2c2>
  }

error:
 800bd72:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	2201      	movs	r2, #1
 800bd78:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	2200      	movs	r2, #0
 800bd80:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800bd84:	7ffb      	ldrb	r3, [r7, #31]
}
 800bd86:	4618      	mov	r0, r3
 800bd88:	3720      	adds	r7, #32
 800bd8a:	46bd      	mov	sp, r7
 800bd8c:	bd80      	pop	{r7, pc}

0800bd8e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800bd8e:	b580      	push	{r7, lr}
 800bd90:	b08a      	sub	sp, #40	; 0x28
 800bd92:	af00      	add	r7, sp, #0
 800bd94:	60f8      	str	r0, [r7, #12]
 800bd96:	60b9      	str	r1, [r7, #8]
 800bd98:	607a      	str	r2, [r7, #4]
 800bd9a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800bd9c:	2301      	movs	r3, #1
 800bd9e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800bda0:	2300      	movs	r3, #0
 800bda2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800bdac:	2b01      	cmp	r3, #1
 800bdae:	d101      	bne.n	800bdb4 <HAL_SPI_TransmitReceive+0x26>
 800bdb0:	2302      	movs	r3, #2
 800bdb2:	e1fb      	b.n	800c1ac <HAL_SPI_TransmitReceive+0x41e>
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	2201      	movs	r2, #1
 800bdb8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bdbc:	f7f9 f9f8 	bl	80051b0 <HAL_GetTick>
 800bdc0:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800bdc8:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	685b      	ldr	r3, [r3, #4]
 800bdce:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800bdd0:	887b      	ldrh	r3, [r7, #2]
 800bdd2:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800bdd4:	887b      	ldrh	r3, [r7, #2]
 800bdd6:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800bdd8:	7efb      	ldrb	r3, [r7, #27]
 800bdda:	2b01      	cmp	r3, #1
 800bddc:	d00e      	beq.n	800bdfc <HAL_SPI_TransmitReceive+0x6e>
 800bdde:	697b      	ldr	r3, [r7, #20]
 800bde0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bde4:	d106      	bne.n	800bdf4 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	689b      	ldr	r3, [r3, #8]
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d102      	bne.n	800bdf4 <HAL_SPI_TransmitReceive+0x66>
 800bdee:	7efb      	ldrb	r3, [r7, #27]
 800bdf0:	2b04      	cmp	r3, #4
 800bdf2:	d003      	beq.n	800bdfc <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800bdf4:	2302      	movs	r3, #2
 800bdf6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800bdfa:	e1cd      	b.n	800c198 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800bdfc:	68bb      	ldr	r3, [r7, #8]
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d005      	beq.n	800be0e <HAL_SPI_TransmitReceive+0x80>
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	2b00      	cmp	r3, #0
 800be06:	d002      	beq.n	800be0e <HAL_SPI_TransmitReceive+0x80>
 800be08:	887b      	ldrh	r3, [r7, #2]
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d103      	bne.n	800be16 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800be0e:	2301      	movs	r3, #1
 800be10:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800be14:	e1c0      	b.n	800c198 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800be1c:	b2db      	uxtb	r3, r3
 800be1e:	2b04      	cmp	r3, #4
 800be20:	d003      	beq.n	800be2a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	2205      	movs	r2, #5
 800be26:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	2200      	movs	r2, #0
 800be2e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	687a      	ldr	r2, [r7, #4]
 800be34:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	887a      	ldrh	r2, [r7, #2]
 800be3a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	887a      	ldrh	r2, [r7, #2]
 800be42:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	68ba      	ldr	r2, [r7, #8]
 800be4a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	887a      	ldrh	r2, [r7, #2]
 800be50:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	887a      	ldrh	r2, [r7, #2]
 800be56:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	2200      	movs	r2, #0
 800be5c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	2200      	movs	r2, #0
 800be62:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	68db      	ldr	r3, [r3, #12]
 800be68:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800be6c:	d802      	bhi.n	800be74 <HAL_SPI_TransmitReceive+0xe6>
 800be6e:	8a3b      	ldrh	r3, [r7, #16]
 800be70:	2b01      	cmp	r3, #1
 800be72:	d908      	bls.n	800be86 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	685a      	ldr	r2, [r3, #4]
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800be82:	605a      	str	r2, [r3, #4]
 800be84:	e007      	b.n	800be96 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	685a      	ldr	r2, [r3, #4]
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800be94:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bea0:	2b40      	cmp	r3, #64	; 0x40
 800bea2:	d007      	beq.n	800beb4 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	681a      	ldr	r2, [r3, #0]
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800beb2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	68db      	ldr	r3, [r3, #12]
 800beb8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800bebc:	d97c      	bls.n	800bfb8 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	685b      	ldr	r3, [r3, #4]
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d002      	beq.n	800becc <HAL_SPI_TransmitReceive+0x13e>
 800bec6:	8a7b      	ldrh	r3, [r7, #18]
 800bec8:	2b01      	cmp	r3, #1
 800beca:	d169      	bne.n	800bfa0 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bed0:	881a      	ldrh	r2, [r3, #0]
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bedc:	1c9a      	adds	r2, r3, #2
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bee6:	b29b      	uxth	r3, r3
 800bee8:	3b01      	subs	r3, #1
 800beea:	b29a      	uxth	r2, r3
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bef0:	e056      	b.n	800bfa0 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	689b      	ldr	r3, [r3, #8]
 800bef8:	f003 0302 	and.w	r3, r3, #2
 800befc:	2b02      	cmp	r3, #2
 800befe:	d11b      	bne.n	800bf38 <HAL_SPI_TransmitReceive+0x1aa>
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bf04:	b29b      	uxth	r3, r3
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d016      	beq.n	800bf38 <HAL_SPI_TransmitReceive+0x1aa>
 800bf0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf0c:	2b01      	cmp	r3, #1
 800bf0e:	d113      	bne.n	800bf38 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf14:	881a      	ldrh	r2, [r3, #0]
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf20:	1c9a      	adds	r2, r3, #2
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bf2a:	b29b      	uxth	r3, r3
 800bf2c:	3b01      	subs	r3, #1
 800bf2e:	b29a      	uxth	r2, r3
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800bf34:	2300      	movs	r3, #0
 800bf36:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	689b      	ldr	r3, [r3, #8]
 800bf3e:	f003 0301 	and.w	r3, r3, #1
 800bf42:	2b01      	cmp	r3, #1
 800bf44:	d11c      	bne.n	800bf80 <HAL_SPI_TransmitReceive+0x1f2>
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800bf4c:	b29b      	uxth	r3, r3
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d016      	beq.n	800bf80 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	68da      	ldr	r2, [r3, #12]
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf5c:	b292      	uxth	r2, r2
 800bf5e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf64:	1c9a      	adds	r2, r3, #2
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800bf70:	b29b      	uxth	r3, r3
 800bf72:	3b01      	subs	r3, #1
 800bf74:	b29a      	uxth	r2, r3
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800bf7c:	2301      	movs	r3, #1
 800bf7e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800bf80:	f7f9 f916 	bl	80051b0 <HAL_GetTick>
 800bf84:	4602      	mov	r2, r0
 800bf86:	69fb      	ldr	r3, [r7, #28]
 800bf88:	1ad3      	subs	r3, r2, r3
 800bf8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bf8c:	429a      	cmp	r2, r3
 800bf8e:	d807      	bhi.n	800bfa0 <HAL_SPI_TransmitReceive+0x212>
 800bf90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf96:	d003      	beq.n	800bfa0 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800bf98:	2303      	movs	r3, #3
 800bf9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800bf9e:	e0fb      	b.n	800c198 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bfa4:	b29b      	uxth	r3, r3
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d1a3      	bne.n	800bef2 <HAL_SPI_TransmitReceive+0x164>
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800bfb0:	b29b      	uxth	r3, r3
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d19d      	bne.n	800bef2 <HAL_SPI_TransmitReceive+0x164>
 800bfb6:	e0df      	b.n	800c178 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	685b      	ldr	r3, [r3, #4]
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d003      	beq.n	800bfc8 <HAL_SPI_TransmitReceive+0x23a>
 800bfc0:	8a7b      	ldrh	r3, [r7, #18]
 800bfc2:	2b01      	cmp	r3, #1
 800bfc4:	f040 80cb 	bne.w	800c15e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bfcc:	b29b      	uxth	r3, r3
 800bfce:	2b01      	cmp	r3, #1
 800bfd0:	d912      	bls.n	800bff8 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfd6:	881a      	ldrh	r2, [r3, #0]
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfe2:	1c9a      	adds	r2, r3, #2
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bfec:	b29b      	uxth	r3, r3
 800bfee:	3b02      	subs	r3, #2
 800bff0:	b29a      	uxth	r2, r3
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	87da      	strh	r2, [r3, #62]	; 0x3e
 800bff6:	e0b2      	b.n	800c15e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	330c      	adds	r3, #12
 800c002:	7812      	ldrb	r2, [r2, #0]
 800c004:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c00a:	1c5a      	adds	r2, r3, #1
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c014:	b29b      	uxth	r3, r3
 800c016:	3b01      	subs	r3, #1
 800c018:	b29a      	uxth	r2, r3
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c01e:	e09e      	b.n	800c15e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	689b      	ldr	r3, [r3, #8]
 800c026:	f003 0302 	and.w	r3, r3, #2
 800c02a:	2b02      	cmp	r3, #2
 800c02c:	d134      	bne.n	800c098 <HAL_SPI_TransmitReceive+0x30a>
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c032:	b29b      	uxth	r3, r3
 800c034:	2b00      	cmp	r3, #0
 800c036:	d02f      	beq.n	800c098 <HAL_SPI_TransmitReceive+0x30a>
 800c038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c03a:	2b01      	cmp	r3, #1
 800c03c:	d12c      	bne.n	800c098 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c042:	b29b      	uxth	r3, r3
 800c044:	2b01      	cmp	r3, #1
 800c046:	d912      	bls.n	800c06e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c04c:	881a      	ldrh	r2, [r3, #0]
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c058:	1c9a      	adds	r2, r3, #2
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c062:	b29b      	uxth	r3, r3
 800c064:	3b02      	subs	r3, #2
 800c066:	b29a      	uxth	r2, r3
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c06c:	e012      	b.n	800c094 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	330c      	adds	r3, #12
 800c078:	7812      	ldrb	r2, [r2, #0]
 800c07a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c080:	1c5a      	adds	r2, r3, #1
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c08a:	b29b      	uxth	r3, r3
 800c08c:	3b01      	subs	r3, #1
 800c08e:	b29a      	uxth	r2, r3
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c094:	2300      	movs	r3, #0
 800c096:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	689b      	ldr	r3, [r3, #8]
 800c09e:	f003 0301 	and.w	r3, r3, #1
 800c0a2:	2b01      	cmp	r3, #1
 800c0a4:	d148      	bne.n	800c138 <HAL_SPI_TransmitReceive+0x3aa>
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c0ac:	b29b      	uxth	r3, r3
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d042      	beq.n	800c138 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c0b8:	b29b      	uxth	r3, r3
 800c0ba:	2b01      	cmp	r3, #1
 800c0bc:	d923      	bls.n	800c106 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	68da      	ldr	r2, [r3, #12]
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0c8:	b292      	uxth	r2, r2
 800c0ca:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0d0:	1c9a      	adds	r2, r3, #2
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c0dc:	b29b      	uxth	r3, r3
 800c0de:	3b02      	subs	r3, #2
 800c0e0:	b29a      	uxth	r2, r3
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c0ee:	b29b      	uxth	r3, r3
 800c0f0:	2b01      	cmp	r3, #1
 800c0f2:	d81f      	bhi.n	800c134 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	685a      	ldr	r2, [r3, #4]
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c102:	605a      	str	r2, [r3, #4]
 800c104:	e016      	b.n	800c134 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	f103 020c 	add.w	r2, r3, #12
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c112:	7812      	ldrb	r2, [r2, #0]
 800c114:	b2d2      	uxtb	r2, r2
 800c116:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c11c:	1c5a      	adds	r2, r3, #1
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c128:	b29b      	uxth	r3, r3
 800c12a:	3b01      	subs	r3, #1
 800c12c:	b29a      	uxth	r2, r3
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c134:	2301      	movs	r3, #1
 800c136:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800c138:	f7f9 f83a 	bl	80051b0 <HAL_GetTick>
 800c13c:	4602      	mov	r2, r0
 800c13e:	69fb      	ldr	r3, [r7, #28]
 800c140:	1ad3      	subs	r3, r2, r3
 800c142:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c144:	429a      	cmp	r2, r3
 800c146:	d803      	bhi.n	800c150 <HAL_SPI_TransmitReceive+0x3c2>
 800c148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c14a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c14e:	d102      	bne.n	800c156 <HAL_SPI_TransmitReceive+0x3c8>
 800c150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c152:	2b00      	cmp	r3, #0
 800c154:	d103      	bne.n	800c15e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800c156:	2303      	movs	r3, #3
 800c158:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800c15c:	e01c      	b.n	800c198 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c162:	b29b      	uxth	r3, r3
 800c164:	2b00      	cmp	r3, #0
 800c166:	f47f af5b 	bne.w	800c020 <HAL_SPI_TransmitReceive+0x292>
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c170:	b29b      	uxth	r3, r3
 800c172:	2b00      	cmp	r3, #0
 800c174:	f47f af54 	bne.w	800c020 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c178:	69fa      	ldr	r2, [r7, #28]
 800c17a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c17c:	68f8      	ldr	r0, [r7, #12]
 800c17e:	f000 f937 	bl	800c3f0 <SPI_EndRxTxTransaction>
 800c182:	4603      	mov	r3, r0
 800c184:	2b00      	cmp	r3, #0
 800c186:	d006      	beq.n	800c196 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800c188:	2301      	movs	r3, #1
 800c18a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	2220      	movs	r2, #32
 800c192:	661a      	str	r2, [r3, #96]	; 0x60
 800c194:	e000      	b.n	800c198 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800c196:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	2201      	movs	r2, #1
 800c19c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	2200      	movs	r2, #0
 800c1a4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800c1a8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800c1ac:	4618      	mov	r0, r3
 800c1ae:	3728      	adds	r7, #40	; 0x28
 800c1b0:	46bd      	mov	sp, r7
 800c1b2:	bd80      	pop	{r7, pc}

0800c1b4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800c1b4:	b580      	push	{r7, lr}
 800c1b6:	b088      	sub	sp, #32
 800c1b8:	af00      	add	r7, sp, #0
 800c1ba:	60f8      	str	r0, [r7, #12]
 800c1bc:	60b9      	str	r1, [r7, #8]
 800c1be:	603b      	str	r3, [r7, #0]
 800c1c0:	4613      	mov	r3, r2
 800c1c2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800c1c4:	f7f8 fff4 	bl	80051b0 <HAL_GetTick>
 800c1c8:	4602      	mov	r2, r0
 800c1ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1cc:	1a9b      	subs	r3, r3, r2
 800c1ce:	683a      	ldr	r2, [r7, #0]
 800c1d0:	4413      	add	r3, r2
 800c1d2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800c1d4:	f7f8 ffec 	bl	80051b0 <HAL_GetTick>
 800c1d8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800c1da:	4b39      	ldr	r3, [pc, #228]	; (800c2c0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	015b      	lsls	r3, r3, #5
 800c1e0:	0d1b      	lsrs	r3, r3, #20
 800c1e2:	69fa      	ldr	r2, [r7, #28]
 800c1e4:	fb02 f303 	mul.w	r3, r2, r3
 800c1e8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c1ea:	e054      	b.n	800c296 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800c1ec:	683b      	ldr	r3, [r7, #0]
 800c1ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1f2:	d050      	beq.n	800c296 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800c1f4:	f7f8 ffdc 	bl	80051b0 <HAL_GetTick>
 800c1f8:	4602      	mov	r2, r0
 800c1fa:	69bb      	ldr	r3, [r7, #24]
 800c1fc:	1ad3      	subs	r3, r2, r3
 800c1fe:	69fa      	ldr	r2, [r7, #28]
 800c200:	429a      	cmp	r2, r3
 800c202:	d902      	bls.n	800c20a <SPI_WaitFlagStateUntilTimeout+0x56>
 800c204:	69fb      	ldr	r3, [r7, #28]
 800c206:	2b00      	cmp	r3, #0
 800c208:	d13d      	bne.n	800c286 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	685a      	ldr	r2, [r3, #4]
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800c218:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	685b      	ldr	r3, [r3, #4]
 800c21e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c222:	d111      	bne.n	800c248 <SPI_WaitFlagStateUntilTimeout+0x94>
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	689b      	ldr	r3, [r3, #8]
 800c228:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c22c:	d004      	beq.n	800c238 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	689b      	ldr	r3, [r3, #8]
 800c232:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c236:	d107      	bne.n	800c248 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	681a      	ldr	r2, [r3, #0]
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c246:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c24c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c250:	d10f      	bne.n	800c272 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	681a      	ldr	r2, [r3, #0]
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c260:	601a      	str	r2, [r3, #0]
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	681a      	ldr	r2, [r3, #0]
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c270:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	2201      	movs	r2, #1
 800c276:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	2200      	movs	r2, #0
 800c27e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800c282:	2303      	movs	r3, #3
 800c284:	e017      	b.n	800c2b6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800c286:	697b      	ldr	r3, [r7, #20]
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d101      	bne.n	800c290 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800c28c:	2300      	movs	r3, #0
 800c28e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800c290:	697b      	ldr	r3, [r7, #20]
 800c292:	3b01      	subs	r3, #1
 800c294:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	689a      	ldr	r2, [r3, #8]
 800c29c:	68bb      	ldr	r3, [r7, #8]
 800c29e:	4013      	ands	r3, r2
 800c2a0:	68ba      	ldr	r2, [r7, #8]
 800c2a2:	429a      	cmp	r2, r3
 800c2a4:	bf0c      	ite	eq
 800c2a6:	2301      	moveq	r3, #1
 800c2a8:	2300      	movne	r3, #0
 800c2aa:	b2db      	uxtb	r3, r3
 800c2ac:	461a      	mov	r2, r3
 800c2ae:	79fb      	ldrb	r3, [r7, #7]
 800c2b0:	429a      	cmp	r2, r3
 800c2b2:	d19b      	bne.n	800c1ec <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800c2b4:	2300      	movs	r3, #0
}
 800c2b6:	4618      	mov	r0, r3
 800c2b8:	3720      	adds	r7, #32
 800c2ba:	46bd      	mov	sp, r7
 800c2bc:	bd80      	pop	{r7, pc}
 800c2be:	bf00      	nop
 800c2c0:	20000224 	.word	0x20000224

0800c2c4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800c2c4:	b580      	push	{r7, lr}
 800c2c6:	b08a      	sub	sp, #40	; 0x28
 800c2c8:	af00      	add	r7, sp, #0
 800c2ca:	60f8      	str	r0, [r7, #12]
 800c2cc:	60b9      	str	r1, [r7, #8]
 800c2ce:	607a      	str	r2, [r7, #4]
 800c2d0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800c2d2:	2300      	movs	r3, #0
 800c2d4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800c2d6:	f7f8 ff6b 	bl	80051b0 <HAL_GetTick>
 800c2da:	4602      	mov	r2, r0
 800c2dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2de:	1a9b      	subs	r3, r3, r2
 800c2e0:	683a      	ldr	r2, [r7, #0]
 800c2e2:	4413      	add	r3, r2
 800c2e4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800c2e6:	f7f8 ff63 	bl	80051b0 <HAL_GetTick>
 800c2ea:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	330c      	adds	r3, #12
 800c2f2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800c2f4:	4b3d      	ldr	r3, [pc, #244]	; (800c3ec <SPI_WaitFifoStateUntilTimeout+0x128>)
 800c2f6:	681a      	ldr	r2, [r3, #0]
 800c2f8:	4613      	mov	r3, r2
 800c2fa:	009b      	lsls	r3, r3, #2
 800c2fc:	4413      	add	r3, r2
 800c2fe:	00da      	lsls	r2, r3, #3
 800c300:	1ad3      	subs	r3, r2, r3
 800c302:	0d1b      	lsrs	r3, r3, #20
 800c304:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c306:	fb02 f303 	mul.w	r3, r2, r3
 800c30a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800c30c:	e060      	b.n	800c3d0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800c30e:	68bb      	ldr	r3, [r7, #8]
 800c310:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800c314:	d107      	bne.n	800c326 <SPI_WaitFifoStateUntilTimeout+0x62>
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d104      	bne.n	800c326 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800c31c:	69fb      	ldr	r3, [r7, #28]
 800c31e:	781b      	ldrb	r3, [r3, #0]
 800c320:	b2db      	uxtb	r3, r3
 800c322:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800c324:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800c326:	683b      	ldr	r3, [r7, #0]
 800c328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c32c:	d050      	beq.n	800c3d0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800c32e:	f7f8 ff3f 	bl	80051b0 <HAL_GetTick>
 800c332:	4602      	mov	r2, r0
 800c334:	6a3b      	ldr	r3, [r7, #32]
 800c336:	1ad3      	subs	r3, r2, r3
 800c338:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c33a:	429a      	cmp	r2, r3
 800c33c:	d902      	bls.n	800c344 <SPI_WaitFifoStateUntilTimeout+0x80>
 800c33e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c340:	2b00      	cmp	r3, #0
 800c342:	d13d      	bne.n	800c3c0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	685a      	ldr	r2, [r3, #4]
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800c352:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	685b      	ldr	r3, [r3, #4]
 800c358:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c35c:	d111      	bne.n	800c382 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	689b      	ldr	r3, [r3, #8]
 800c362:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c366:	d004      	beq.n	800c372 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	689b      	ldr	r3, [r3, #8]
 800c36c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c370:	d107      	bne.n	800c382 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	681a      	ldr	r2, [r3, #0]
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c380:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c386:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c38a:	d10f      	bne.n	800c3ac <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	681a      	ldr	r2, [r3, #0]
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c39a:	601a      	str	r2, [r3, #0]
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	681a      	ldr	r2, [r3, #0]
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c3aa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	2201      	movs	r2, #1
 800c3b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	2200      	movs	r2, #0
 800c3b8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800c3bc:	2303      	movs	r3, #3
 800c3be:	e010      	b.n	800c3e2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800c3c0:	69bb      	ldr	r3, [r7, #24]
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d101      	bne.n	800c3ca <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800c3c6:	2300      	movs	r3, #0
 800c3c8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800c3ca:	69bb      	ldr	r3, [r7, #24]
 800c3cc:	3b01      	subs	r3, #1
 800c3ce:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	689a      	ldr	r2, [r3, #8]
 800c3d6:	68bb      	ldr	r3, [r7, #8]
 800c3d8:	4013      	ands	r3, r2
 800c3da:	687a      	ldr	r2, [r7, #4]
 800c3dc:	429a      	cmp	r2, r3
 800c3de:	d196      	bne.n	800c30e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800c3e0:	2300      	movs	r3, #0
}
 800c3e2:	4618      	mov	r0, r3
 800c3e4:	3728      	adds	r7, #40	; 0x28
 800c3e6:	46bd      	mov	sp, r7
 800c3e8:	bd80      	pop	{r7, pc}
 800c3ea:	bf00      	nop
 800c3ec:	20000224 	.word	0x20000224

0800c3f0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800c3f0:	b580      	push	{r7, lr}
 800c3f2:	b086      	sub	sp, #24
 800c3f4:	af02      	add	r7, sp, #8
 800c3f6:	60f8      	str	r0, [r7, #12]
 800c3f8:	60b9      	str	r1, [r7, #8]
 800c3fa:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	9300      	str	r3, [sp, #0]
 800c400:	68bb      	ldr	r3, [r7, #8]
 800c402:	2200      	movs	r2, #0
 800c404:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800c408:	68f8      	ldr	r0, [r7, #12]
 800c40a:	f7ff ff5b 	bl	800c2c4 <SPI_WaitFifoStateUntilTimeout>
 800c40e:	4603      	mov	r3, r0
 800c410:	2b00      	cmp	r3, #0
 800c412:	d007      	beq.n	800c424 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c418:	f043 0220 	orr.w	r2, r3, #32
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800c420:	2303      	movs	r3, #3
 800c422:	e027      	b.n	800c474 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	9300      	str	r3, [sp, #0]
 800c428:	68bb      	ldr	r3, [r7, #8]
 800c42a:	2200      	movs	r2, #0
 800c42c:	2180      	movs	r1, #128	; 0x80
 800c42e:	68f8      	ldr	r0, [r7, #12]
 800c430:	f7ff fec0 	bl	800c1b4 <SPI_WaitFlagStateUntilTimeout>
 800c434:	4603      	mov	r3, r0
 800c436:	2b00      	cmp	r3, #0
 800c438:	d007      	beq.n	800c44a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c43e:	f043 0220 	orr.w	r2, r3, #32
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800c446:	2303      	movs	r3, #3
 800c448:	e014      	b.n	800c474 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	9300      	str	r3, [sp, #0]
 800c44e:	68bb      	ldr	r3, [r7, #8]
 800c450:	2200      	movs	r2, #0
 800c452:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800c456:	68f8      	ldr	r0, [r7, #12]
 800c458:	f7ff ff34 	bl	800c2c4 <SPI_WaitFifoStateUntilTimeout>
 800c45c:	4603      	mov	r3, r0
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d007      	beq.n	800c472 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c466:	f043 0220 	orr.w	r2, r3, #32
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800c46e:	2303      	movs	r3, #3
 800c470:	e000      	b.n	800c474 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800c472:	2300      	movs	r3, #0
}
 800c474:	4618      	mov	r0, r3
 800c476:	3710      	adds	r7, #16
 800c478:	46bd      	mov	sp, r7
 800c47a:	bd80      	pop	{r7, pc}

0800c47c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c47c:	b580      	push	{r7, lr}
 800c47e:	b082      	sub	sp, #8
 800c480:	af00      	add	r7, sp, #0
 800c482:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	2b00      	cmp	r3, #0
 800c488:	d101      	bne.n	800c48e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c48a:	2301      	movs	r3, #1
 800c48c:	e049      	b.n	800c522 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c494:	b2db      	uxtb	r3, r3
 800c496:	2b00      	cmp	r3, #0
 800c498:	d106      	bne.n	800c4a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	2200      	movs	r2, #0
 800c49e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c4a2:	6878      	ldr	r0, [r7, #4]
 800c4a4:	f7f8 fc40 	bl	8004d28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	2202      	movs	r2, #2
 800c4ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	681a      	ldr	r2, [r3, #0]
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	3304      	adds	r3, #4
 800c4b8:	4619      	mov	r1, r3
 800c4ba:	4610      	mov	r0, r2
 800c4bc:	f000 fb1e 	bl	800cafc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	2201      	movs	r2, #1
 800c4c4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	2201      	movs	r2, #1
 800c4cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	2201      	movs	r2, #1
 800c4d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	2201      	movs	r2, #1
 800c4dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	2201      	movs	r2, #1
 800c4e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	2201      	movs	r2, #1
 800c4ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	2201      	movs	r2, #1
 800c4f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	2201      	movs	r2, #1
 800c4fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	2201      	movs	r2, #1
 800c504:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	2201      	movs	r2, #1
 800c50c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	2201      	movs	r2, #1
 800c514:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	2201      	movs	r2, #1
 800c51c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c520:	2300      	movs	r3, #0
}
 800c522:	4618      	mov	r0, r3
 800c524:	3708      	adds	r7, #8
 800c526:	46bd      	mov	sp, r7
 800c528:	bd80      	pop	{r7, pc}
	...

0800c52c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800c52c:	b480      	push	{r7}
 800c52e:	b085      	sub	sp, #20
 800c530:	af00      	add	r7, sp, #0
 800c532:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c53a:	b2db      	uxtb	r3, r3
 800c53c:	2b01      	cmp	r3, #1
 800c53e:	d001      	beq.n	800c544 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800c540:	2301      	movs	r3, #1
 800c542:	e047      	b.n	800c5d4 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	2202      	movs	r2, #2
 800c548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	4a23      	ldr	r2, [pc, #140]	; (800c5e0 <HAL_TIM_Base_Start+0xb4>)
 800c552:	4293      	cmp	r3, r2
 800c554:	d01d      	beq.n	800c592 <HAL_TIM_Base_Start+0x66>
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c55e:	d018      	beq.n	800c592 <HAL_TIM_Base_Start+0x66>
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	4a1f      	ldr	r2, [pc, #124]	; (800c5e4 <HAL_TIM_Base_Start+0xb8>)
 800c566:	4293      	cmp	r3, r2
 800c568:	d013      	beq.n	800c592 <HAL_TIM_Base_Start+0x66>
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	4a1e      	ldr	r2, [pc, #120]	; (800c5e8 <HAL_TIM_Base_Start+0xbc>)
 800c570:	4293      	cmp	r3, r2
 800c572:	d00e      	beq.n	800c592 <HAL_TIM_Base_Start+0x66>
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	4a1c      	ldr	r2, [pc, #112]	; (800c5ec <HAL_TIM_Base_Start+0xc0>)
 800c57a:	4293      	cmp	r3, r2
 800c57c:	d009      	beq.n	800c592 <HAL_TIM_Base_Start+0x66>
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	4a1b      	ldr	r2, [pc, #108]	; (800c5f0 <HAL_TIM_Base_Start+0xc4>)
 800c584:	4293      	cmp	r3, r2
 800c586:	d004      	beq.n	800c592 <HAL_TIM_Base_Start+0x66>
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	4a19      	ldr	r2, [pc, #100]	; (800c5f4 <HAL_TIM_Base_Start+0xc8>)
 800c58e:	4293      	cmp	r3, r2
 800c590:	d115      	bne.n	800c5be <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	689a      	ldr	r2, [r3, #8]
 800c598:	4b17      	ldr	r3, [pc, #92]	; (800c5f8 <HAL_TIM_Base_Start+0xcc>)
 800c59a:	4013      	ands	r3, r2
 800c59c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	2b06      	cmp	r3, #6
 800c5a2:	d015      	beq.n	800c5d0 <HAL_TIM_Base_Start+0xa4>
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c5aa:	d011      	beq.n	800c5d0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	681a      	ldr	r2, [r3, #0]
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	f042 0201 	orr.w	r2, r2, #1
 800c5ba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c5bc:	e008      	b.n	800c5d0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	681a      	ldr	r2, [r3, #0]
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	f042 0201 	orr.w	r2, r2, #1
 800c5cc:	601a      	str	r2, [r3, #0]
 800c5ce:	e000      	b.n	800c5d2 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c5d0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c5d2:	2300      	movs	r3, #0
}
 800c5d4:	4618      	mov	r0, r3
 800c5d6:	3714      	adds	r7, #20
 800c5d8:	46bd      	mov	sp, r7
 800c5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5de:	4770      	bx	lr
 800c5e0:	40012c00 	.word	0x40012c00
 800c5e4:	40000400 	.word	0x40000400
 800c5e8:	40000800 	.word	0x40000800
 800c5ec:	40000c00 	.word	0x40000c00
 800c5f0:	40013400 	.word	0x40013400
 800c5f4:	40014000 	.word	0x40014000
 800c5f8:	00010007 	.word	0x00010007

0800c5fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c5fc:	b480      	push	{r7}
 800c5fe:	b085      	sub	sp, #20
 800c600:	af00      	add	r7, sp, #0
 800c602:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c60a:	b2db      	uxtb	r3, r3
 800c60c:	2b01      	cmp	r3, #1
 800c60e:	d001      	beq.n	800c614 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c610:	2301      	movs	r3, #1
 800c612:	e04f      	b.n	800c6b4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	2202      	movs	r2, #2
 800c618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	68da      	ldr	r2, [r3, #12]
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	f042 0201 	orr.w	r2, r2, #1
 800c62a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	4a23      	ldr	r2, [pc, #140]	; (800c6c0 <HAL_TIM_Base_Start_IT+0xc4>)
 800c632:	4293      	cmp	r3, r2
 800c634:	d01d      	beq.n	800c672 <HAL_TIM_Base_Start_IT+0x76>
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c63e:	d018      	beq.n	800c672 <HAL_TIM_Base_Start_IT+0x76>
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	4a1f      	ldr	r2, [pc, #124]	; (800c6c4 <HAL_TIM_Base_Start_IT+0xc8>)
 800c646:	4293      	cmp	r3, r2
 800c648:	d013      	beq.n	800c672 <HAL_TIM_Base_Start_IT+0x76>
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	4a1e      	ldr	r2, [pc, #120]	; (800c6c8 <HAL_TIM_Base_Start_IT+0xcc>)
 800c650:	4293      	cmp	r3, r2
 800c652:	d00e      	beq.n	800c672 <HAL_TIM_Base_Start_IT+0x76>
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	4a1c      	ldr	r2, [pc, #112]	; (800c6cc <HAL_TIM_Base_Start_IT+0xd0>)
 800c65a:	4293      	cmp	r3, r2
 800c65c:	d009      	beq.n	800c672 <HAL_TIM_Base_Start_IT+0x76>
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	4a1b      	ldr	r2, [pc, #108]	; (800c6d0 <HAL_TIM_Base_Start_IT+0xd4>)
 800c664:	4293      	cmp	r3, r2
 800c666:	d004      	beq.n	800c672 <HAL_TIM_Base_Start_IT+0x76>
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	4a19      	ldr	r2, [pc, #100]	; (800c6d4 <HAL_TIM_Base_Start_IT+0xd8>)
 800c66e:	4293      	cmp	r3, r2
 800c670:	d115      	bne.n	800c69e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	689a      	ldr	r2, [r3, #8]
 800c678:	4b17      	ldr	r3, [pc, #92]	; (800c6d8 <HAL_TIM_Base_Start_IT+0xdc>)
 800c67a:	4013      	ands	r3, r2
 800c67c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	2b06      	cmp	r3, #6
 800c682:	d015      	beq.n	800c6b0 <HAL_TIM_Base_Start_IT+0xb4>
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c68a:	d011      	beq.n	800c6b0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	681a      	ldr	r2, [r3, #0]
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	f042 0201 	orr.w	r2, r2, #1
 800c69a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c69c:	e008      	b.n	800c6b0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	681a      	ldr	r2, [r3, #0]
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	f042 0201 	orr.w	r2, r2, #1
 800c6ac:	601a      	str	r2, [r3, #0]
 800c6ae:	e000      	b.n	800c6b2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c6b0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c6b2:	2300      	movs	r3, #0
}
 800c6b4:	4618      	mov	r0, r3
 800c6b6:	3714      	adds	r7, #20
 800c6b8:	46bd      	mov	sp, r7
 800c6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6be:	4770      	bx	lr
 800c6c0:	40012c00 	.word	0x40012c00
 800c6c4:	40000400 	.word	0x40000400
 800c6c8:	40000800 	.word	0x40000800
 800c6cc:	40000c00 	.word	0x40000c00
 800c6d0:	40013400 	.word	0x40013400
 800c6d4:	40014000 	.word	0x40014000
 800c6d8:	00010007 	.word	0x00010007

0800c6dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c6dc:	b580      	push	{r7, lr}
 800c6de:	b082      	sub	sp, #8
 800c6e0:	af00      	add	r7, sp, #0
 800c6e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	691b      	ldr	r3, [r3, #16]
 800c6ea:	f003 0302 	and.w	r3, r3, #2
 800c6ee:	2b02      	cmp	r3, #2
 800c6f0:	d122      	bne.n	800c738 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	68db      	ldr	r3, [r3, #12]
 800c6f8:	f003 0302 	and.w	r3, r3, #2
 800c6fc:	2b02      	cmp	r3, #2
 800c6fe:	d11b      	bne.n	800c738 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	f06f 0202 	mvn.w	r2, #2
 800c708:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	2201      	movs	r2, #1
 800c70e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	699b      	ldr	r3, [r3, #24]
 800c716:	f003 0303 	and.w	r3, r3, #3
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d003      	beq.n	800c726 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c71e:	6878      	ldr	r0, [r7, #4]
 800c720:	f000 f9ce 	bl	800cac0 <HAL_TIM_IC_CaptureCallback>
 800c724:	e005      	b.n	800c732 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c726:	6878      	ldr	r0, [r7, #4]
 800c728:	f000 f9c0 	bl	800caac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c72c:	6878      	ldr	r0, [r7, #4]
 800c72e:	f000 f9d1 	bl	800cad4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	2200      	movs	r2, #0
 800c736:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	691b      	ldr	r3, [r3, #16]
 800c73e:	f003 0304 	and.w	r3, r3, #4
 800c742:	2b04      	cmp	r3, #4
 800c744:	d122      	bne.n	800c78c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	68db      	ldr	r3, [r3, #12]
 800c74c:	f003 0304 	and.w	r3, r3, #4
 800c750:	2b04      	cmp	r3, #4
 800c752:	d11b      	bne.n	800c78c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	f06f 0204 	mvn.w	r2, #4
 800c75c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	2202      	movs	r2, #2
 800c762:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	699b      	ldr	r3, [r3, #24]
 800c76a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d003      	beq.n	800c77a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c772:	6878      	ldr	r0, [r7, #4]
 800c774:	f000 f9a4 	bl	800cac0 <HAL_TIM_IC_CaptureCallback>
 800c778:	e005      	b.n	800c786 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c77a:	6878      	ldr	r0, [r7, #4]
 800c77c:	f000 f996 	bl	800caac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c780:	6878      	ldr	r0, [r7, #4]
 800c782:	f000 f9a7 	bl	800cad4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	2200      	movs	r2, #0
 800c78a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	691b      	ldr	r3, [r3, #16]
 800c792:	f003 0308 	and.w	r3, r3, #8
 800c796:	2b08      	cmp	r3, #8
 800c798:	d122      	bne.n	800c7e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	68db      	ldr	r3, [r3, #12]
 800c7a0:	f003 0308 	and.w	r3, r3, #8
 800c7a4:	2b08      	cmp	r3, #8
 800c7a6:	d11b      	bne.n	800c7e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	f06f 0208 	mvn.w	r2, #8
 800c7b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	2204      	movs	r2, #4
 800c7b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	69db      	ldr	r3, [r3, #28]
 800c7be:	f003 0303 	and.w	r3, r3, #3
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d003      	beq.n	800c7ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c7c6:	6878      	ldr	r0, [r7, #4]
 800c7c8:	f000 f97a 	bl	800cac0 <HAL_TIM_IC_CaptureCallback>
 800c7cc:	e005      	b.n	800c7da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c7ce:	6878      	ldr	r0, [r7, #4]
 800c7d0:	f000 f96c 	bl	800caac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c7d4:	6878      	ldr	r0, [r7, #4]
 800c7d6:	f000 f97d 	bl	800cad4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	2200      	movs	r2, #0
 800c7de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	691b      	ldr	r3, [r3, #16]
 800c7e6:	f003 0310 	and.w	r3, r3, #16
 800c7ea:	2b10      	cmp	r3, #16
 800c7ec:	d122      	bne.n	800c834 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	68db      	ldr	r3, [r3, #12]
 800c7f4:	f003 0310 	and.w	r3, r3, #16
 800c7f8:	2b10      	cmp	r3, #16
 800c7fa:	d11b      	bne.n	800c834 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	f06f 0210 	mvn.w	r2, #16
 800c804:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	2208      	movs	r2, #8
 800c80a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	69db      	ldr	r3, [r3, #28]
 800c812:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c816:	2b00      	cmp	r3, #0
 800c818:	d003      	beq.n	800c822 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c81a:	6878      	ldr	r0, [r7, #4]
 800c81c:	f000 f950 	bl	800cac0 <HAL_TIM_IC_CaptureCallback>
 800c820:	e005      	b.n	800c82e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c822:	6878      	ldr	r0, [r7, #4]
 800c824:	f000 f942 	bl	800caac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c828:	6878      	ldr	r0, [r7, #4]
 800c82a:	f000 f953 	bl	800cad4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	2200      	movs	r2, #0
 800c832:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	691b      	ldr	r3, [r3, #16]
 800c83a:	f003 0301 	and.w	r3, r3, #1
 800c83e:	2b01      	cmp	r3, #1
 800c840:	d10e      	bne.n	800c860 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	68db      	ldr	r3, [r3, #12]
 800c848:	f003 0301 	and.w	r3, r3, #1
 800c84c:	2b01      	cmp	r3, #1
 800c84e:	d107      	bne.n	800c860 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	f06f 0201 	mvn.w	r2, #1
 800c858:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c85a:	6878      	ldr	r0, [r7, #4]
 800c85c:	f7f7 fa54 	bl	8003d08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	691b      	ldr	r3, [r3, #16]
 800c866:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c86a:	2b80      	cmp	r3, #128	; 0x80
 800c86c:	d10e      	bne.n	800c88c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	68db      	ldr	r3, [r3, #12]
 800c874:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c878:	2b80      	cmp	r3, #128	; 0x80
 800c87a:	d107      	bne.n	800c88c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c884:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c886:	6878      	ldr	r0, [r7, #4]
 800c888:	f000 fafe 	bl	800ce88 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	691b      	ldr	r3, [r3, #16]
 800c892:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c896:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c89a:	d10e      	bne.n	800c8ba <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	68db      	ldr	r3, [r3, #12]
 800c8a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c8a6:	2b80      	cmp	r3, #128	; 0x80
 800c8a8:	d107      	bne.n	800c8ba <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800c8b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c8b4:	6878      	ldr	r0, [r7, #4]
 800c8b6:	f000 faf1 	bl	800ce9c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	691b      	ldr	r3, [r3, #16]
 800c8c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c8c4:	2b40      	cmp	r3, #64	; 0x40
 800c8c6:	d10e      	bne.n	800c8e6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	68db      	ldr	r3, [r3, #12]
 800c8ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c8d2:	2b40      	cmp	r3, #64	; 0x40
 800c8d4:	d107      	bne.n	800c8e6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c8de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c8e0:	6878      	ldr	r0, [r7, #4]
 800c8e2:	f000 f901 	bl	800cae8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	691b      	ldr	r3, [r3, #16]
 800c8ec:	f003 0320 	and.w	r3, r3, #32
 800c8f0:	2b20      	cmp	r3, #32
 800c8f2:	d10e      	bne.n	800c912 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	68db      	ldr	r3, [r3, #12]
 800c8fa:	f003 0320 	and.w	r3, r3, #32
 800c8fe:	2b20      	cmp	r3, #32
 800c900:	d107      	bne.n	800c912 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	f06f 0220 	mvn.w	r2, #32
 800c90a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c90c:	6878      	ldr	r0, [r7, #4]
 800c90e:	f000 fab1 	bl	800ce74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c912:	bf00      	nop
 800c914:	3708      	adds	r7, #8
 800c916:	46bd      	mov	sp, r7
 800c918:	bd80      	pop	{r7, pc}

0800c91a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c91a:	b580      	push	{r7, lr}
 800c91c:	b084      	sub	sp, #16
 800c91e:	af00      	add	r7, sp, #0
 800c920:	6078      	str	r0, [r7, #4]
 800c922:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c924:	2300      	movs	r3, #0
 800c926:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c92e:	2b01      	cmp	r3, #1
 800c930:	d101      	bne.n	800c936 <HAL_TIM_ConfigClockSource+0x1c>
 800c932:	2302      	movs	r3, #2
 800c934:	e0b6      	b.n	800caa4 <HAL_TIM_ConfigClockSource+0x18a>
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	2201      	movs	r2, #1
 800c93a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	2202      	movs	r2, #2
 800c942:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	689b      	ldr	r3, [r3, #8]
 800c94c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c94e:	68bb      	ldr	r3, [r7, #8]
 800c950:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c954:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800c958:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c95a:	68bb      	ldr	r3, [r7, #8]
 800c95c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c960:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	68ba      	ldr	r2, [r7, #8]
 800c968:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c96a:	683b      	ldr	r3, [r7, #0]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c972:	d03e      	beq.n	800c9f2 <HAL_TIM_ConfigClockSource+0xd8>
 800c974:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c978:	f200 8087 	bhi.w	800ca8a <HAL_TIM_ConfigClockSource+0x170>
 800c97c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c980:	f000 8086 	beq.w	800ca90 <HAL_TIM_ConfigClockSource+0x176>
 800c984:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c988:	d87f      	bhi.n	800ca8a <HAL_TIM_ConfigClockSource+0x170>
 800c98a:	2b70      	cmp	r3, #112	; 0x70
 800c98c:	d01a      	beq.n	800c9c4 <HAL_TIM_ConfigClockSource+0xaa>
 800c98e:	2b70      	cmp	r3, #112	; 0x70
 800c990:	d87b      	bhi.n	800ca8a <HAL_TIM_ConfigClockSource+0x170>
 800c992:	2b60      	cmp	r3, #96	; 0x60
 800c994:	d050      	beq.n	800ca38 <HAL_TIM_ConfigClockSource+0x11e>
 800c996:	2b60      	cmp	r3, #96	; 0x60
 800c998:	d877      	bhi.n	800ca8a <HAL_TIM_ConfigClockSource+0x170>
 800c99a:	2b50      	cmp	r3, #80	; 0x50
 800c99c:	d03c      	beq.n	800ca18 <HAL_TIM_ConfigClockSource+0xfe>
 800c99e:	2b50      	cmp	r3, #80	; 0x50
 800c9a0:	d873      	bhi.n	800ca8a <HAL_TIM_ConfigClockSource+0x170>
 800c9a2:	2b40      	cmp	r3, #64	; 0x40
 800c9a4:	d058      	beq.n	800ca58 <HAL_TIM_ConfigClockSource+0x13e>
 800c9a6:	2b40      	cmp	r3, #64	; 0x40
 800c9a8:	d86f      	bhi.n	800ca8a <HAL_TIM_ConfigClockSource+0x170>
 800c9aa:	2b30      	cmp	r3, #48	; 0x30
 800c9ac:	d064      	beq.n	800ca78 <HAL_TIM_ConfigClockSource+0x15e>
 800c9ae:	2b30      	cmp	r3, #48	; 0x30
 800c9b0:	d86b      	bhi.n	800ca8a <HAL_TIM_ConfigClockSource+0x170>
 800c9b2:	2b20      	cmp	r3, #32
 800c9b4:	d060      	beq.n	800ca78 <HAL_TIM_ConfigClockSource+0x15e>
 800c9b6:	2b20      	cmp	r3, #32
 800c9b8:	d867      	bhi.n	800ca8a <HAL_TIM_ConfigClockSource+0x170>
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d05c      	beq.n	800ca78 <HAL_TIM_ConfigClockSource+0x15e>
 800c9be:	2b10      	cmp	r3, #16
 800c9c0:	d05a      	beq.n	800ca78 <HAL_TIM_ConfigClockSource+0x15e>
 800c9c2:	e062      	b.n	800ca8a <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c9c8:	683b      	ldr	r3, [r7, #0]
 800c9ca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c9cc:	683b      	ldr	r3, [r7, #0]
 800c9ce:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c9d0:	683b      	ldr	r3, [r7, #0]
 800c9d2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c9d4:	f000 f9a6 	bl	800cd24 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	689b      	ldr	r3, [r3, #8]
 800c9de:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c9e0:	68bb      	ldr	r3, [r7, #8]
 800c9e2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c9e6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	68ba      	ldr	r2, [r7, #8]
 800c9ee:	609a      	str	r2, [r3, #8]
      break;
 800c9f0:	e04f      	b.n	800ca92 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c9f6:	683b      	ldr	r3, [r7, #0]
 800c9f8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c9fa:	683b      	ldr	r3, [r7, #0]
 800c9fc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c9fe:	683b      	ldr	r3, [r7, #0]
 800ca00:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ca02:	f000 f98f 	bl	800cd24 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	689a      	ldr	r2, [r3, #8]
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ca14:	609a      	str	r2, [r3, #8]
      break;
 800ca16:	e03c      	b.n	800ca92 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ca1c:	683b      	ldr	r3, [r7, #0]
 800ca1e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ca20:	683b      	ldr	r3, [r7, #0]
 800ca22:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ca24:	461a      	mov	r2, r3
 800ca26:	f000 f903 	bl	800cc30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	2150      	movs	r1, #80	; 0x50
 800ca30:	4618      	mov	r0, r3
 800ca32:	f000 f95c 	bl	800ccee <TIM_ITRx_SetConfig>
      break;
 800ca36:	e02c      	b.n	800ca92 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ca3c:	683b      	ldr	r3, [r7, #0]
 800ca3e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ca40:	683b      	ldr	r3, [r7, #0]
 800ca42:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ca44:	461a      	mov	r2, r3
 800ca46:	f000 f922 	bl	800cc8e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	2160      	movs	r1, #96	; 0x60
 800ca50:	4618      	mov	r0, r3
 800ca52:	f000 f94c 	bl	800ccee <TIM_ITRx_SetConfig>
      break;
 800ca56:	e01c      	b.n	800ca92 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ca5c:	683b      	ldr	r3, [r7, #0]
 800ca5e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ca60:	683b      	ldr	r3, [r7, #0]
 800ca62:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ca64:	461a      	mov	r2, r3
 800ca66:	f000 f8e3 	bl	800cc30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	2140      	movs	r1, #64	; 0x40
 800ca70:	4618      	mov	r0, r3
 800ca72:	f000 f93c 	bl	800ccee <TIM_ITRx_SetConfig>
      break;
 800ca76:	e00c      	b.n	800ca92 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	681a      	ldr	r2, [r3, #0]
 800ca7c:	683b      	ldr	r3, [r7, #0]
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	4619      	mov	r1, r3
 800ca82:	4610      	mov	r0, r2
 800ca84:	f000 f933 	bl	800ccee <TIM_ITRx_SetConfig>
      break;
 800ca88:	e003      	b.n	800ca92 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800ca8a:	2301      	movs	r3, #1
 800ca8c:	73fb      	strb	r3, [r7, #15]
      break;
 800ca8e:	e000      	b.n	800ca92 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800ca90:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	2201      	movs	r2, #1
 800ca96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	2200      	movs	r2, #0
 800ca9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800caa2:	7bfb      	ldrb	r3, [r7, #15]
}
 800caa4:	4618      	mov	r0, r3
 800caa6:	3710      	adds	r7, #16
 800caa8:	46bd      	mov	sp, r7
 800caaa:	bd80      	pop	{r7, pc}

0800caac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800caac:	b480      	push	{r7}
 800caae:	b083      	sub	sp, #12
 800cab0:	af00      	add	r7, sp, #0
 800cab2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800cab4:	bf00      	nop
 800cab6:	370c      	adds	r7, #12
 800cab8:	46bd      	mov	sp, r7
 800caba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cabe:	4770      	bx	lr

0800cac0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800cac0:	b480      	push	{r7}
 800cac2:	b083      	sub	sp, #12
 800cac4:	af00      	add	r7, sp, #0
 800cac6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800cac8:	bf00      	nop
 800caca:	370c      	adds	r7, #12
 800cacc:	46bd      	mov	sp, r7
 800cace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cad2:	4770      	bx	lr

0800cad4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800cad4:	b480      	push	{r7}
 800cad6:	b083      	sub	sp, #12
 800cad8:	af00      	add	r7, sp, #0
 800cada:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800cadc:	bf00      	nop
 800cade:	370c      	adds	r7, #12
 800cae0:	46bd      	mov	sp, r7
 800cae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae6:	4770      	bx	lr

0800cae8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800cae8:	b480      	push	{r7}
 800caea:	b083      	sub	sp, #12
 800caec:	af00      	add	r7, sp, #0
 800caee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800caf0:	bf00      	nop
 800caf2:	370c      	adds	r7, #12
 800caf4:	46bd      	mov	sp, r7
 800caf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cafa:	4770      	bx	lr

0800cafc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800cafc:	b480      	push	{r7}
 800cafe:	b085      	sub	sp, #20
 800cb00:	af00      	add	r7, sp, #0
 800cb02:	6078      	str	r0, [r7, #4]
 800cb04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	4a40      	ldr	r2, [pc, #256]	; (800cc10 <TIM_Base_SetConfig+0x114>)
 800cb10:	4293      	cmp	r3, r2
 800cb12:	d013      	beq.n	800cb3c <TIM_Base_SetConfig+0x40>
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cb1a:	d00f      	beq.n	800cb3c <TIM_Base_SetConfig+0x40>
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	4a3d      	ldr	r2, [pc, #244]	; (800cc14 <TIM_Base_SetConfig+0x118>)
 800cb20:	4293      	cmp	r3, r2
 800cb22:	d00b      	beq.n	800cb3c <TIM_Base_SetConfig+0x40>
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	4a3c      	ldr	r2, [pc, #240]	; (800cc18 <TIM_Base_SetConfig+0x11c>)
 800cb28:	4293      	cmp	r3, r2
 800cb2a:	d007      	beq.n	800cb3c <TIM_Base_SetConfig+0x40>
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	4a3b      	ldr	r2, [pc, #236]	; (800cc1c <TIM_Base_SetConfig+0x120>)
 800cb30:	4293      	cmp	r3, r2
 800cb32:	d003      	beq.n	800cb3c <TIM_Base_SetConfig+0x40>
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	4a3a      	ldr	r2, [pc, #232]	; (800cc20 <TIM_Base_SetConfig+0x124>)
 800cb38:	4293      	cmp	r3, r2
 800cb3a:	d108      	bne.n	800cb4e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cb42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800cb44:	683b      	ldr	r3, [r7, #0]
 800cb46:	685b      	ldr	r3, [r3, #4]
 800cb48:	68fa      	ldr	r2, [r7, #12]
 800cb4a:	4313      	orrs	r3, r2
 800cb4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	4a2f      	ldr	r2, [pc, #188]	; (800cc10 <TIM_Base_SetConfig+0x114>)
 800cb52:	4293      	cmp	r3, r2
 800cb54:	d01f      	beq.n	800cb96 <TIM_Base_SetConfig+0x9a>
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cb5c:	d01b      	beq.n	800cb96 <TIM_Base_SetConfig+0x9a>
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	4a2c      	ldr	r2, [pc, #176]	; (800cc14 <TIM_Base_SetConfig+0x118>)
 800cb62:	4293      	cmp	r3, r2
 800cb64:	d017      	beq.n	800cb96 <TIM_Base_SetConfig+0x9a>
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	4a2b      	ldr	r2, [pc, #172]	; (800cc18 <TIM_Base_SetConfig+0x11c>)
 800cb6a:	4293      	cmp	r3, r2
 800cb6c:	d013      	beq.n	800cb96 <TIM_Base_SetConfig+0x9a>
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	4a2a      	ldr	r2, [pc, #168]	; (800cc1c <TIM_Base_SetConfig+0x120>)
 800cb72:	4293      	cmp	r3, r2
 800cb74:	d00f      	beq.n	800cb96 <TIM_Base_SetConfig+0x9a>
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	4a29      	ldr	r2, [pc, #164]	; (800cc20 <TIM_Base_SetConfig+0x124>)
 800cb7a:	4293      	cmp	r3, r2
 800cb7c:	d00b      	beq.n	800cb96 <TIM_Base_SetConfig+0x9a>
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	4a28      	ldr	r2, [pc, #160]	; (800cc24 <TIM_Base_SetConfig+0x128>)
 800cb82:	4293      	cmp	r3, r2
 800cb84:	d007      	beq.n	800cb96 <TIM_Base_SetConfig+0x9a>
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	4a27      	ldr	r2, [pc, #156]	; (800cc28 <TIM_Base_SetConfig+0x12c>)
 800cb8a:	4293      	cmp	r3, r2
 800cb8c:	d003      	beq.n	800cb96 <TIM_Base_SetConfig+0x9a>
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	4a26      	ldr	r2, [pc, #152]	; (800cc2c <TIM_Base_SetConfig+0x130>)
 800cb92:	4293      	cmp	r3, r2
 800cb94:	d108      	bne.n	800cba8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cb9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cb9e:	683b      	ldr	r3, [r7, #0]
 800cba0:	68db      	ldr	r3, [r3, #12]
 800cba2:	68fa      	ldr	r2, [r7, #12]
 800cba4:	4313      	orrs	r3, r2
 800cba6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800cbae:	683b      	ldr	r3, [r7, #0]
 800cbb0:	695b      	ldr	r3, [r3, #20]
 800cbb2:	4313      	orrs	r3, r2
 800cbb4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	68fa      	ldr	r2, [r7, #12]
 800cbba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cbbc:	683b      	ldr	r3, [r7, #0]
 800cbbe:	689a      	ldr	r2, [r3, #8]
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cbc4:	683b      	ldr	r3, [r7, #0]
 800cbc6:	681a      	ldr	r2, [r3, #0]
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	4a10      	ldr	r2, [pc, #64]	; (800cc10 <TIM_Base_SetConfig+0x114>)
 800cbd0:	4293      	cmp	r3, r2
 800cbd2:	d00f      	beq.n	800cbf4 <TIM_Base_SetConfig+0xf8>
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	4a12      	ldr	r2, [pc, #72]	; (800cc20 <TIM_Base_SetConfig+0x124>)
 800cbd8:	4293      	cmp	r3, r2
 800cbda:	d00b      	beq.n	800cbf4 <TIM_Base_SetConfig+0xf8>
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	4a11      	ldr	r2, [pc, #68]	; (800cc24 <TIM_Base_SetConfig+0x128>)
 800cbe0:	4293      	cmp	r3, r2
 800cbe2:	d007      	beq.n	800cbf4 <TIM_Base_SetConfig+0xf8>
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	4a10      	ldr	r2, [pc, #64]	; (800cc28 <TIM_Base_SetConfig+0x12c>)
 800cbe8:	4293      	cmp	r3, r2
 800cbea:	d003      	beq.n	800cbf4 <TIM_Base_SetConfig+0xf8>
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	4a0f      	ldr	r2, [pc, #60]	; (800cc2c <TIM_Base_SetConfig+0x130>)
 800cbf0:	4293      	cmp	r3, r2
 800cbf2:	d103      	bne.n	800cbfc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800cbf4:	683b      	ldr	r3, [r7, #0]
 800cbf6:	691a      	ldr	r2, [r3, #16]
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	2201      	movs	r2, #1
 800cc00:	615a      	str	r2, [r3, #20]
}
 800cc02:	bf00      	nop
 800cc04:	3714      	adds	r7, #20
 800cc06:	46bd      	mov	sp, r7
 800cc08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc0c:	4770      	bx	lr
 800cc0e:	bf00      	nop
 800cc10:	40012c00 	.word	0x40012c00
 800cc14:	40000400 	.word	0x40000400
 800cc18:	40000800 	.word	0x40000800
 800cc1c:	40000c00 	.word	0x40000c00
 800cc20:	40013400 	.word	0x40013400
 800cc24:	40014000 	.word	0x40014000
 800cc28:	40014400 	.word	0x40014400
 800cc2c:	40014800 	.word	0x40014800

0800cc30 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cc30:	b480      	push	{r7}
 800cc32:	b087      	sub	sp, #28
 800cc34:	af00      	add	r7, sp, #0
 800cc36:	60f8      	str	r0, [r7, #12]
 800cc38:	60b9      	str	r1, [r7, #8]
 800cc3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	6a1b      	ldr	r3, [r3, #32]
 800cc40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	6a1b      	ldr	r3, [r3, #32]
 800cc46:	f023 0201 	bic.w	r2, r3, #1
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	699b      	ldr	r3, [r3, #24]
 800cc52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800cc54:	693b      	ldr	r3, [r7, #16]
 800cc56:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800cc5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	011b      	lsls	r3, r3, #4
 800cc60:	693a      	ldr	r2, [r7, #16]
 800cc62:	4313      	orrs	r3, r2
 800cc64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800cc66:	697b      	ldr	r3, [r7, #20]
 800cc68:	f023 030a 	bic.w	r3, r3, #10
 800cc6c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800cc6e:	697a      	ldr	r2, [r7, #20]
 800cc70:	68bb      	ldr	r3, [r7, #8]
 800cc72:	4313      	orrs	r3, r2
 800cc74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	693a      	ldr	r2, [r7, #16]
 800cc7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	697a      	ldr	r2, [r7, #20]
 800cc80:	621a      	str	r2, [r3, #32]
}
 800cc82:	bf00      	nop
 800cc84:	371c      	adds	r7, #28
 800cc86:	46bd      	mov	sp, r7
 800cc88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc8c:	4770      	bx	lr

0800cc8e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cc8e:	b480      	push	{r7}
 800cc90:	b087      	sub	sp, #28
 800cc92:	af00      	add	r7, sp, #0
 800cc94:	60f8      	str	r0, [r7, #12]
 800cc96:	60b9      	str	r1, [r7, #8]
 800cc98:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	6a1b      	ldr	r3, [r3, #32]
 800cc9e:	f023 0210 	bic.w	r2, r3, #16
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	699b      	ldr	r3, [r3, #24]
 800ccaa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	6a1b      	ldr	r3, [r3, #32]
 800ccb0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ccb2:	697b      	ldr	r3, [r7, #20]
 800ccb4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ccb8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	031b      	lsls	r3, r3, #12
 800ccbe:	697a      	ldr	r2, [r7, #20]
 800ccc0:	4313      	orrs	r3, r2
 800ccc2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ccc4:	693b      	ldr	r3, [r7, #16]
 800ccc6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ccca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800cccc:	68bb      	ldr	r3, [r7, #8]
 800ccce:	011b      	lsls	r3, r3, #4
 800ccd0:	693a      	ldr	r2, [r7, #16]
 800ccd2:	4313      	orrs	r3, r2
 800ccd4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	697a      	ldr	r2, [r7, #20]
 800ccda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	693a      	ldr	r2, [r7, #16]
 800cce0:	621a      	str	r2, [r3, #32]
}
 800cce2:	bf00      	nop
 800cce4:	371c      	adds	r7, #28
 800cce6:	46bd      	mov	sp, r7
 800cce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccec:	4770      	bx	lr

0800ccee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ccee:	b480      	push	{r7}
 800ccf0:	b085      	sub	sp, #20
 800ccf2:	af00      	add	r7, sp, #0
 800ccf4:	6078      	str	r0, [r7, #4]
 800ccf6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	689b      	ldr	r3, [r3, #8]
 800ccfc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cd04:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800cd06:	683a      	ldr	r2, [r7, #0]
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	4313      	orrs	r3, r2
 800cd0c:	f043 0307 	orr.w	r3, r3, #7
 800cd10:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	68fa      	ldr	r2, [r7, #12]
 800cd16:	609a      	str	r2, [r3, #8]
}
 800cd18:	bf00      	nop
 800cd1a:	3714      	adds	r7, #20
 800cd1c:	46bd      	mov	sp, r7
 800cd1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd22:	4770      	bx	lr

0800cd24 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800cd24:	b480      	push	{r7}
 800cd26:	b087      	sub	sp, #28
 800cd28:	af00      	add	r7, sp, #0
 800cd2a:	60f8      	str	r0, [r7, #12]
 800cd2c:	60b9      	str	r1, [r7, #8]
 800cd2e:	607a      	str	r2, [r7, #4]
 800cd30:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	689b      	ldr	r3, [r3, #8]
 800cd36:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cd38:	697b      	ldr	r3, [r7, #20]
 800cd3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800cd3e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800cd40:	683b      	ldr	r3, [r7, #0]
 800cd42:	021a      	lsls	r2, r3, #8
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	431a      	orrs	r2, r3
 800cd48:	68bb      	ldr	r3, [r7, #8]
 800cd4a:	4313      	orrs	r3, r2
 800cd4c:	697a      	ldr	r2, [r7, #20]
 800cd4e:	4313      	orrs	r3, r2
 800cd50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	697a      	ldr	r2, [r7, #20]
 800cd56:	609a      	str	r2, [r3, #8]
}
 800cd58:	bf00      	nop
 800cd5a:	371c      	adds	r7, #28
 800cd5c:	46bd      	mov	sp, r7
 800cd5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd62:	4770      	bx	lr

0800cd64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cd64:	b480      	push	{r7}
 800cd66:	b085      	sub	sp, #20
 800cd68:	af00      	add	r7, sp, #0
 800cd6a:	6078      	str	r0, [r7, #4]
 800cd6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cd74:	2b01      	cmp	r3, #1
 800cd76:	d101      	bne.n	800cd7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cd78:	2302      	movs	r3, #2
 800cd7a:	e068      	b.n	800ce4e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	2201      	movs	r2, #1
 800cd80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	2202      	movs	r2, #2
 800cd88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	685b      	ldr	r3, [r3, #4]
 800cd92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	689b      	ldr	r3, [r3, #8]
 800cd9a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	4a2e      	ldr	r2, [pc, #184]	; (800ce5c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800cda2:	4293      	cmp	r3, r2
 800cda4:	d004      	beq.n	800cdb0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	4a2d      	ldr	r2, [pc, #180]	; (800ce60 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800cdac:	4293      	cmp	r3, r2
 800cdae:	d108      	bne.n	800cdc2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800cdb6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800cdb8:	683b      	ldr	r3, [r7, #0]
 800cdba:	685b      	ldr	r3, [r3, #4]
 800cdbc:	68fa      	ldr	r2, [r7, #12]
 800cdbe:	4313      	orrs	r3, r2
 800cdc0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cdc8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cdca:	683b      	ldr	r3, [r7, #0]
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	68fa      	ldr	r2, [r7, #12]
 800cdd0:	4313      	orrs	r3, r2
 800cdd2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	68fa      	ldr	r2, [r7, #12]
 800cdda:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	4a1e      	ldr	r2, [pc, #120]	; (800ce5c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800cde2:	4293      	cmp	r3, r2
 800cde4:	d01d      	beq.n	800ce22 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cdee:	d018      	beq.n	800ce22 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	4a1b      	ldr	r2, [pc, #108]	; (800ce64 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800cdf6:	4293      	cmp	r3, r2
 800cdf8:	d013      	beq.n	800ce22 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	4a1a      	ldr	r2, [pc, #104]	; (800ce68 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ce00:	4293      	cmp	r3, r2
 800ce02:	d00e      	beq.n	800ce22 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	4a18      	ldr	r2, [pc, #96]	; (800ce6c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800ce0a:	4293      	cmp	r3, r2
 800ce0c:	d009      	beq.n	800ce22 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	4a13      	ldr	r2, [pc, #76]	; (800ce60 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800ce14:	4293      	cmp	r3, r2
 800ce16:	d004      	beq.n	800ce22 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	4a14      	ldr	r2, [pc, #80]	; (800ce70 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800ce1e:	4293      	cmp	r3, r2
 800ce20:	d10c      	bne.n	800ce3c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ce22:	68bb      	ldr	r3, [r7, #8]
 800ce24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ce28:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ce2a:	683b      	ldr	r3, [r7, #0]
 800ce2c:	689b      	ldr	r3, [r3, #8]
 800ce2e:	68ba      	ldr	r2, [r7, #8]
 800ce30:	4313      	orrs	r3, r2
 800ce32:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	68ba      	ldr	r2, [r7, #8]
 800ce3a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	2201      	movs	r2, #1
 800ce40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	2200      	movs	r2, #0
 800ce48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ce4c:	2300      	movs	r3, #0
}
 800ce4e:	4618      	mov	r0, r3
 800ce50:	3714      	adds	r7, #20
 800ce52:	46bd      	mov	sp, r7
 800ce54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce58:	4770      	bx	lr
 800ce5a:	bf00      	nop
 800ce5c:	40012c00 	.word	0x40012c00
 800ce60:	40013400 	.word	0x40013400
 800ce64:	40000400 	.word	0x40000400
 800ce68:	40000800 	.word	0x40000800
 800ce6c:	40000c00 	.word	0x40000c00
 800ce70:	40014000 	.word	0x40014000

0800ce74 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ce74:	b480      	push	{r7}
 800ce76:	b083      	sub	sp, #12
 800ce78:	af00      	add	r7, sp, #0
 800ce7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ce7c:	bf00      	nop
 800ce7e:	370c      	adds	r7, #12
 800ce80:	46bd      	mov	sp, r7
 800ce82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce86:	4770      	bx	lr

0800ce88 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ce88:	b480      	push	{r7}
 800ce8a:	b083      	sub	sp, #12
 800ce8c:	af00      	add	r7, sp, #0
 800ce8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ce90:	bf00      	nop
 800ce92:	370c      	adds	r7, #12
 800ce94:	46bd      	mov	sp, r7
 800ce96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce9a:	4770      	bx	lr

0800ce9c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ce9c:	b480      	push	{r7}
 800ce9e:	b083      	sub	sp, #12
 800cea0:	af00      	add	r7, sp, #0
 800cea2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800cea4:	bf00      	nop
 800cea6:	370c      	adds	r7, #12
 800cea8:	46bd      	mov	sp, r7
 800ceaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceae:	4770      	bx	lr

0800ceb0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ceb0:	b084      	sub	sp, #16
 800ceb2:	b580      	push	{r7, lr}
 800ceb4:	b084      	sub	sp, #16
 800ceb6:	af00      	add	r7, sp, #0
 800ceb8:	6078      	str	r0, [r7, #4]
 800ceba:	f107 001c 	add.w	r0, r7, #28
 800cebe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	68db      	ldr	r3, [r3, #12]
 800cec6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800cece:	6878      	ldr	r0, [r7, #4]
 800ced0:	f001 faf6 	bl	800e4c0 <USB_CoreReset>
 800ced4:	4603      	mov	r3, r0
 800ced6:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800ced8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d106      	bne.n	800ceec <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cee2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	639a      	str	r2, [r3, #56]	; 0x38
 800ceea:	e005      	b.n	800cef8 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cef0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 800cef8:	7bfb      	ldrb	r3, [r7, #15]
}
 800cefa:	4618      	mov	r0, r3
 800cefc:	3710      	adds	r7, #16
 800cefe:	46bd      	mov	sp, r7
 800cf00:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800cf04:	b004      	add	sp, #16
 800cf06:	4770      	bx	lr

0800cf08 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800cf08:	b480      	push	{r7}
 800cf0a:	b087      	sub	sp, #28
 800cf0c:	af00      	add	r7, sp, #0
 800cf0e:	60f8      	str	r0, [r7, #12]
 800cf10:	60b9      	str	r1, [r7, #8]
 800cf12:	4613      	mov	r3, r2
 800cf14:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800cf16:	79fb      	ldrb	r3, [r7, #7]
 800cf18:	2b02      	cmp	r3, #2
 800cf1a:	d165      	bne.n	800cfe8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800cf1c:	68bb      	ldr	r3, [r7, #8]
 800cf1e:	4a3e      	ldr	r2, [pc, #248]	; (800d018 <USB_SetTurnaroundTime+0x110>)
 800cf20:	4293      	cmp	r3, r2
 800cf22:	d906      	bls.n	800cf32 <USB_SetTurnaroundTime+0x2a>
 800cf24:	68bb      	ldr	r3, [r7, #8]
 800cf26:	4a3d      	ldr	r2, [pc, #244]	; (800d01c <USB_SetTurnaroundTime+0x114>)
 800cf28:	4293      	cmp	r3, r2
 800cf2a:	d202      	bcs.n	800cf32 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800cf2c:	230f      	movs	r3, #15
 800cf2e:	617b      	str	r3, [r7, #20]
 800cf30:	e05c      	b.n	800cfec <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800cf32:	68bb      	ldr	r3, [r7, #8]
 800cf34:	4a39      	ldr	r2, [pc, #228]	; (800d01c <USB_SetTurnaroundTime+0x114>)
 800cf36:	4293      	cmp	r3, r2
 800cf38:	d306      	bcc.n	800cf48 <USB_SetTurnaroundTime+0x40>
 800cf3a:	68bb      	ldr	r3, [r7, #8]
 800cf3c:	4a38      	ldr	r2, [pc, #224]	; (800d020 <USB_SetTurnaroundTime+0x118>)
 800cf3e:	4293      	cmp	r3, r2
 800cf40:	d202      	bcs.n	800cf48 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800cf42:	230e      	movs	r3, #14
 800cf44:	617b      	str	r3, [r7, #20]
 800cf46:	e051      	b.n	800cfec <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800cf48:	68bb      	ldr	r3, [r7, #8]
 800cf4a:	4a35      	ldr	r2, [pc, #212]	; (800d020 <USB_SetTurnaroundTime+0x118>)
 800cf4c:	4293      	cmp	r3, r2
 800cf4e:	d306      	bcc.n	800cf5e <USB_SetTurnaroundTime+0x56>
 800cf50:	68bb      	ldr	r3, [r7, #8]
 800cf52:	4a34      	ldr	r2, [pc, #208]	; (800d024 <USB_SetTurnaroundTime+0x11c>)
 800cf54:	4293      	cmp	r3, r2
 800cf56:	d202      	bcs.n	800cf5e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800cf58:	230d      	movs	r3, #13
 800cf5a:	617b      	str	r3, [r7, #20]
 800cf5c:	e046      	b.n	800cfec <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800cf5e:	68bb      	ldr	r3, [r7, #8]
 800cf60:	4a30      	ldr	r2, [pc, #192]	; (800d024 <USB_SetTurnaroundTime+0x11c>)
 800cf62:	4293      	cmp	r3, r2
 800cf64:	d306      	bcc.n	800cf74 <USB_SetTurnaroundTime+0x6c>
 800cf66:	68bb      	ldr	r3, [r7, #8]
 800cf68:	4a2f      	ldr	r2, [pc, #188]	; (800d028 <USB_SetTurnaroundTime+0x120>)
 800cf6a:	4293      	cmp	r3, r2
 800cf6c:	d802      	bhi.n	800cf74 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800cf6e:	230c      	movs	r3, #12
 800cf70:	617b      	str	r3, [r7, #20]
 800cf72:	e03b      	b.n	800cfec <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800cf74:	68bb      	ldr	r3, [r7, #8]
 800cf76:	4a2c      	ldr	r2, [pc, #176]	; (800d028 <USB_SetTurnaroundTime+0x120>)
 800cf78:	4293      	cmp	r3, r2
 800cf7a:	d906      	bls.n	800cf8a <USB_SetTurnaroundTime+0x82>
 800cf7c:	68bb      	ldr	r3, [r7, #8]
 800cf7e:	4a2b      	ldr	r2, [pc, #172]	; (800d02c <USB_SetTurnaroundTime+0x124>)
 800cf80:	4293      	cmp	r3, r2
 800cf82:	d802      	bhi.n	800cf8a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800cf84:	230b      	movs	r3, #11
 800cf86:	617b      	str	r3, [r7, #20]
 800cf88:	e030      	b.n	800cfec <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800cf8a:	68bb      	ldr	r3, [r7, #8]
 800cf8c:	4a27      	ldr	r2, [pc, #156]	; (800d02c <USB_SetTurnaroundTime+0x124>)
 800cf8e:	4293      	cmp	r3, r2
 800cf90:	d906      	bls.n	800cfa0 <USB_SetTurnaroundTime+0x98>
 800cf92:	68bb      	ldr	r3, [r7, #8]
 800cf94:	4a26      	ldr	r2, [pc, #152]	; (800d030 <USB_SetTurnaroundTime+0x128>)
 800cf96:	4293      	cmp	r3, r2
 800cf98:	d802      	bhi.n	800cfa0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800cf9a:	230a      	movs	r3, #10
 800cf9c:	617b      	str	r3, [r7, #20]
 800cf9e:	e025      	b.n	800cfec <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800cfa0:	68bb      	ldr	r3, [r7, #8]
 800cfa2:	4a23      	ldr	r2, [pc, #140]	; (800d030 <USB_SetTurnaroundTime+0x128>)
 800cfa4:	4293      	cmp	r3, r2
 800cfa6:	d906      	bls.n	800cfb6 <USB_SetTurnaroundTime+0xae>
 800cfa8:	68bb      	ldr	r3, [r7, #8]
 800cfaa:	4a22      	ldr	r2, [pc, #136]	; (800d034 <USB_SetTurnaroundTime+0x12c>)
 800cfac:	4293      	cmp	r3, r2
 800cfae:	d202      	bcs.n	800cfb6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800cfb0:	2309      	movs	r3, #9
 800cfb2:	617b      	str	r3, [r7, #20]
 800cfb4:	e01a      	b.n	800cfec <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800cfb6:	68bb      	ldr	r3, [r7, #8]
 800cfb8:	4a1e      	ldr	r2, [pc, #120]	; (800d034 <USB_SetTurnaroundTime+0x12c>)
 800cfba:	4293      	cmp	r3, r2
 800cfbc:	d306      	bcc.n	800cfcc <USB_SetTurnaroundTime+0xc4>
 800cfbe:	68bb      	ldr	r3, [r7, #8]
 800cfc0:	4a1d      	ldr	r2, [pc, #116]	; (800d038 <USB_SetTurnaroundTime+0x130>)
 800cfc2:	4293      	cmp	r3, r2
 800cfc4:	d802      	bhi.n	800cfcc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800cfc6:	2308      	movs	r3, #8
 800cfc8:	617b      	str	r3, [r7, #20]
 800cfca:	e00f      	b.n	800cfec <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800cfcc:	68bb      	ldr	r3, [r7, #8]
 800cfce:	4a1a      	ldr	r2, [pc, #104]	; (800d038 <USB_SetTurnaroundTime+0x130>)
 800cfd0:	4293      	cmp	r3, r2
 800cfd2:	d906      	bls.n	800cfe2 <USB_SetTurnaroundTime+0xda>
 800cfd4:	68bb      	ldr	r3, [r7, #8]
 800cfd6:	4a19      	ldr	r2, [pc, #100]	; (800d03c <USB_SetTurnaroundTime+0x134>)
 800cfd8:	4293      	cmp	r3, r2
 800cfda:	d202      	bcs.n	800cfe2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800cfdc:	2307      	movs	r3, #7
 800cfde:	617b      	str	r3, [r7, #20]
 800cfe0:	e004      	b.n	800cfec <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800cfe2:	2306      	movs	r3, #6
 800cfe4:	617b      	str	r3, [r7, #20]
 800cfe6:	e001      	b.n	800cfec <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800cfe8:	2309      	movs	r3, #9
 800cfea:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	68db      	ldr	r3, [r3, #12]
 800cff0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800cff4:	68fb      	ldr	r3, [r7, #12]
 800cff6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	68da      	ldr	r2, [r3, #12]
 800cffc:	697b      	ldr	r3, [r7, #20]
 800cffe:	029b      	lsls	r3, r3, #10
 800d000:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800d004:	431a      	orrs	r2, r3
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800d00a:	2300      	movs	r3, #0
}
 800d00c:	4618      	mov	r0, r3
 800d00e:	371c      	adds	r7, #28
 800d010:	46bd      	mov	sp, r7
 800d012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d016:	4770      	bx	lr
 800d018:	00d8acbf 	.word	0x00d8acbf
 800d01c:	00e4e1c0 	.word	0x00e4e1c0
 800d020:	00f42400 	.word	0x00f42400
 800d024:	01067380 	.word	0x01067380
 800d028:	011a499f 	.word	0x011a499f
 800d02c:	01312cff 	.word	0x01312cff
 800d030:	014ca43f 	.word	0x014ca43f
 800d034:	016e3600 	.word	0x016e3600
 800d038:	01a6ab1f 	.word	0x01a6ab1f
 800d03c:	01e84800 	.word	0x01e84800

0800d040 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d040:	b480      	push	{r7}
 800d042:	b083      	sub	sp, #12
 800d044:	af00      	add	r7, sp, #0
 800d046:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	689b      	ldr	r3, [r3, #8]
 800d04c:	f043 0201 	orr.w	r2, r3, #1
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d054:	2300      	movs	r3, #0
}
 800d056:	4618      	mov	r0, r3
 800d058:	370c      	adds	r7, #12
 800d05a:	46bd      	mov	sp, r7
 800d05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d060:	4770      	bx	lr

0800d062 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d062:	b480      	push	{r7}
 800d064:	b083      	sub	sp, #12
 800d066:	af00      	add	r7, sp, #0
 800d068:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	689b      	ldr	r3, [r3, #8]
 800d06e:	f023 0201 	bic.w	r2, r3, #1
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d076:	2300      	movs	r3, #0
}
 800d078:	4618      	mov	r0, r3
 800d07a:	370c      	adds	r7, #12
 800d07c:	46bd      	mov	sp, r7
 800d07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d082:	4770      	bx	lr

0800d084 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800d084:	b580      	push	{r7, lr}
 800d086:	b084      	sub	sp, #16
 800d088:	af00      	add	r7, sp, #0
 800d08a:	6078      	str	r0, [r7, #4]
 800d08c:	460b      	mov	r3, r1
 800d08e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800d090:	2300      	movs	r3, #0
 800d092:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	68db      	ldr	r3, [r3, #12]
 800d098:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800d0a0:	78fb      	ldrb	r3, [r7, #3]
 800d0a2:	2b01      	cmp	r3, #1
 800d0a4:	d115      	bne.n	800d0d2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	68db      	ldr	r3, [r3, #12]
 800d0aa:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800d0b2:	2001      	movs	r0, #1
 800d0b4:	f7f8 f888 	bl	80051c8 <HAL_Delay>
      ms++;
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	3301      	adds	r3, #1
 800d0bc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800d0be:	6878      	ldr	r0, [r7, #4]
 800d0c0:	f001 f985 	bl	800e3ce <USB_GetMode>
 800d0c4:	4603      	mov	r3, r0
 800d0c6:	2b01      	cmp	r3, #1
 800d0c8:	d01e      	beq.n	800d108 <USB_SetCurrentMode+0x84>
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	2b31      	cmp	r3, #49	; 0x31
 800d0ce:	d9f0      	bls.n	800d0b2 <USB_SetCurrentMode+0x2e>
 800d0d0:	e01a      	b.n	800d108 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800d0d2:	78fb      	ldrb	r3, [r7, #3]
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d115      	bne.n	800d104 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	68db      	ldr	r3, [r3, #12]
 800d0dc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800d0e4:	2001      	movs	r0, #1
 800d0e6:	f7f8 f86f 	bl	80051c8 <HAL_Delay>
      ms++;
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	3301      	adds	r3, #1
 800d0ee:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800d0f0:	6878      	ldr	r0, [r7, #4]
 800d0f2:	f001 f96c 	bl	800e3ce <USB_GetMode>
 800d0f6:	4603      	mov	r3, r0
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d005      	beq.n	800d108 <USB_SetCurrentMode+0x84>
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	2b31      	cmp	r3, #49	; 0x31
 800d100:	d9f0      	bls.n	800d0e4 <USB_SetCurrentMode+0x60>
 800d102:	e001      	b.n	800d108 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800d104:	2301      	movs	r3, #1
 800d106:	e005      	b.n	800d114 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	2b32      	cmp	r3, #50	; 0x32
 800d10c:	d101      	bne.n	800d112 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800d10e:	2301      	movs	r3, #1
 800d110:	e000      	b.n	800d114 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800d112:	2300      	movs	r3, #0
}
 800d114:	4618      	mov	r0, r3
 800d116:	3710      	adds	r7, #16
 800d118:	46bd      	mov	sp, r7
 800d11a:	bd80      	pop	{r7, pc}

0800d11c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d11c:	b084      	sub	sp, #16
 800d11e:	b580      	push	{r7, lr}
 800d120:	b086      	sub	sp, #24
 800d122:	af00      	add	r7, sp, #0
 800d124:	6078      	str	r0, [r7, #4]
 800d126:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800d12a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800d12e:	2300      	movs	r3, #0
 800d130:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800d136:	2300      	movs	r3, #0
 800d138:	613b      	str	r3, [r7, #16]
 800d13a:	e009      	b.n	800d150 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800d13c:	687a      	ldr	r2, [r7, #4]
 800d13e:	693b      	ldr	r3, [r7, #16]
 800d140:	3340      	adds	r3, #64	; 0x40
 800d142:	009b      	lsls	r3, r3, #2
 800d144:	4413      	add	r3, r2
 800d146:	2200      	movs	r2, #0
 800d148:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800d14a:	693b      	ldr	r3, [r7, #16]
 800d14c:	3301      	adds	r3, #1
 800d14e:	613b      	str	r3, [r7, #16]
 800d150:	693b      	ldr	r3, [r7, #16]
 800d152:	2b0e      	cmp	r3, #14
 800d154:	d9f2      	bls.n	800d13c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800d156:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d11c      	bne.n	800d196 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d162:	685b      	ldr	r3, [r3, #4]
 800d164:	68fa      	ldr	r2, [r7, #12]
 800d166:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d16a:	f043 0302 	orr.w	r3, r3, #2
 800d16e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d174:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	601a      	str	r2, [r3, #0]
 800d194:	e005      	b.n	800d1a2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d19a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d1a8:	461a      	mov	r2, r3
 800d1aa:	2300      	movs	r3, #0
 800d1ac:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d1b4:	4619      	mov	r1, r3
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d1bc:	461a      	mov	r2, r3
 800d1be:	680b      	ldr	r3, [r1, #0]
 800d1c0:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800d1c2:	2103      	movs	r1, #3
 800d1c4:	6878      	ldr	r0, [r7, #4]
 800d1c6:	f000 f959 	bl	800d47c <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800d1ca:	2110      	movs	r1, #16
 800d1cc:	6878      	ldr	r0, [r7, #4]
 800d1ce:	f000 f8f1 	bl	800d3b4 <USB_FlushTxFifo>
 800d1d2:	4603      	mov	r3, r0
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d001      	beq.n	800d1dc <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 800d1d8:	2301      	movs	r3, #1
 800d1da:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800d1dc:	6878      	ldr	r0, [r7, #4]
 800d1de:	f000 f91d 	bl	800d41c <USB_FlushRxFifo>
 800d1e2:	4603      	mov	r3, r0
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d001      	beq.n	800d1ec <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 800d1e8:	2301      	movs	r3, #1
 800d1ea:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d1f2:	461a      	mov	r2, r3
 800d1f4:	2300      	movs	r3, #0
 800d1f6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d1fe:	461a      	mov	r2, r3
 800d200:	2300      	movs	r3, #0
 800d202:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d20a:	461a      	mov	r2, r3
 800d20c:	2300      	movs	r3, #0
 800d20e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d210:	2300      	movs	r3, #0
 800d212:	613b      	str	r3, [r7, #16]
 800d214:	e043      	b.n	800d29e <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d216:	693b      	ldr	r3, [r7, #16]
 800d218:	015a      	lsls	r2, r3, #5
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	4413      	add	r3, r2
 800d21e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d228:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d22c:	d118      	bne.n	800d260 <USB_DevInit+0x144>
    {
      if (i == 0U)
 800d22e:	693b      	ldr	r3, [r7, #16]
 800d230:	2b00      	cmp	r3, #0
 800d232:	d10a      	bne.n	800d24a <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800d234:	693b      	ldr	r3, [r7, #16]
 800d236:	015a      	lsls	r2, r3, #5
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	4413      	add	r3, r2
 800d23c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d240:	461a      	mov	r2, r3
 800d242:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d246:	6013      	str	r3, [r2, #0]
 800d248:	e013      	b.n	800d272 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800d24a:	693b      	ldr	r3, [r7, #16]
 800d24c:	015a      	lsls	r2, r3, #5
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	4413      	add	r3, r2
 800d252:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d256:	461a      	mov	r2, r3
 800d258:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800d25c:	6013      	str	r3, [r2, #0]
 800d25e:	e008      	b.n	800d272 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800d260:	693b      	ldr	r3, [r7, #16]
 800d262:	015a      	lsls	r2, r3, #5
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	4413      	add	r3, r2
 800d268:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d26c:	461a      	mov	r2, r3
 800d26e:	2300      	movs	r3, #0
 800d270:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800d272:	693b      	ldr	r3, [r7, #16]
 800d274:	015a      	lsls	r2, r3, #5
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	4413      	add	r3, r2
 800d27a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d27e:	461a      	mov	r2, r3
 800d280:	2300      	movs	r3, #0
 800d282:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800d284:	693b      	ldr	r3, [r7, #16]
 800d286:	015a      	lsls	r2, r3, #5
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	4413      	add	r3, r2
 800d28c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d290:	461a      	mov	r2, r3
 800d292:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800d296:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d298:	693b      	ldr	r3, [r7, #16]
 800d29a:	3301      	adds	r3, #1
 800d29c:	613b      	str	r3, [r7, #16]
 800d29e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2a0:	693a      	ldr	r2, [r7, #16]
 800d2a2:	429a      	cmp	r2, r3
 800d2a4:	d3b7      	bcc.n	800d216 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d2a6:	2300      	movs	r3, #0
 800d2a8:	613b      	str	r3, [r7, #16]
 800d2aa:	e043      	b.n	800d334 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d2ac:	693b      	ldr	r3, [r7, #16]
 800d2ae:	015a      	lsls	r2, r3, #5
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	4413      	add	r3, r2
 800d2b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d2be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d2c2:	d118      	bne.n	800d2f6 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 800d2c4:	693b      	ldr	r3, [r7, #16]
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d10a      	bne.n	800d2e0 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800d2ca:	693b      	ldr	r3, [r7, #16]
 800d2cc:	015a      	lsls	r2, r3, #5
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	4413      	add	r3, r2
 800d2d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d2d6:	461a      	mov	r2, r3
 800d2d8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d2dc:	6013      	str	r3, [r2, #0]
 800d2de:	e013      	b.n	800d308 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800d2e0:	693b      	ldr	r3, [r7, #16]
 800d2e2:	015a      	lsls	r2, r3, #5
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	4413      	add	r3, r2
 800d2e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d2ec:	461a      	mov	r2, r3
 800d2ee:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800d2f2:	6013      	str	r3, [r2, #0]
 800d2f4:	e008      	b.n	800d308 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800d2f6:	693b      	ldr	r3, [r7, #16]
 800d2f8:	015a      	lsls	r2, r3, #5
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	4413      	add	r3, r2
 800d2fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d302:	461a      	mov	r2, r3
 800d304:	2300      	movs	r3, #0
 800d306:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800d308:	693b      	ldr	r3, [r7, #16]
 800d30a:	015a      	lsls	r2, r3, #5
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	4413      	add	r3, r2
 800d310:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d314:	461a      	mov	r2, r3
 800d316:	2300      	movs	r3, #0
 800d318:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800d31a:	693b      	ldr	r3, [r7, #16]
 800d31c:	015a      	lsls	r2, r3, #5
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	4413      	add	r3, r2
 800d322:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d326:	461a      	mov	r2, r3
 800d328:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800d32c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d32e:	693b      	ldr	r3, [r7, #16]
 800d330:	3301      	adds	r3, #1
 800d332:	613b      	str	r3, [r7, #16]
 800d334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d336:	693a      	ldr	r2, [r7, #16]
 800d338:	429a      	cmp	r2, r3
 800d33a:	d3b7      	bcc.n	800d2ac <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d342:	691b      	ldr	r3, [r3, #16]
 800d344:	68fa      	ldr	r2, [r7, #12]
 800d346:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d34a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d34e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	2200      	movs	r2, #0
 800d354:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800d35c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	699b      	ldr	r3, [r3, #24]
 800d362:	f043 0210 	orr.w	r2, r3, #16
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	699a      	ldr	r2, [r3, #24]
 800d36e:	4b10      	ldr	r3, [pc, #64]	; (800d3b0 <USB_DevInit+0x294>)
 800d370:	4313      	orrs	r3, r2
 800d372:	687a      	ldr	r2, [r7, #4]
 800d374:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800d376:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d005      	beq.n	800d388 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	699b      	ldr	r3, [r3, #24]
 800d380:	f043 0208 	orr.w	r2, r3, #8
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800d388:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d38a:	2b01      	cmp	r3, #1
 800d38c:	d107      	bne.n	800d39e <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	699b      	ldr	r3, [r3, #24]
 800d392:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d396:	f043 0304 	orr.w	r3, r3, #4
 800d39a:	687a      	ldr	r2, [r7, #4]
 800d39c:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800d39e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d3a0:	4618      	mov	r0, r3
 800d3a2:	3718      	adds	r7, #24
 800d3a4:	46bd      	mov	sp, r7
 800d3a6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d3aa:	b004      	add	sp, #16
 800d3ac:	4770      	bx	lr
 800d3ae:	bf00      	nop
 800d3b0:	803c3800 	.word	0x803c3800

0800d3b4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800d3b4:	b480      	push	{r7}
 800d3b6:	b085      	sub	sp, #20
 800d3b8:	af00      	add	r7, sp, #0
 800d3ba:	6078      	str	r0, [r7, #4]
 800d3bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800d3be:	2300      	movs	r3, #0
 800d3c0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	3301      	adds	r3, #1
 800d3c6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	4a13      	ldr	r2, [pc, #76]	; (800d418 <USB_FlushTxFifo+0x64>)
 800d3cc:	4293      	cmp	r3, r2
 800d3ce:	d901      	bls.n	800d3d4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800d3d0:	2303      	movs	r3, #3
 800d3d2:	e01b      	b.n	800d40c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	691b      	ldr	r3, [r3, #16]
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	daf2      	bge.n	800d3c2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800d3dc:	2300      	movs	r3, #0
 800d3de:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800d3e0:	683b      	ldr	r3, [r7, #0]
 800d3e2:	019b      	lsls	r3, r3, #6
 800d3e4:	f043 0220 	orr.w	r2, r3, #32
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	3301      	adds	r3, #1
 800d3f0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	4a08      	ldr	r2, [pc, #32]	; (800d418 <USB_FlushTxFifo+0x64>)
 800d3f6:	4293      	cmp	r3, r2
 800d3f8:	d901      	bls.n	800d3fe <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800d3fa:	2303      	movs	r3, #3
 800d3fc:	e006      	b.n	800d40c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	691b      	ldr	r3, [r3, #16]
 800d402:	f003 0320 	and.w	r3, r3, #32
 800d406:	2b20      	cmp	r3, #32
 800d408:	d0f0      	beq.n	800d3ec <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800d40a:	2300      	movs	r3, #0
}
 800d40c:	4618      	mov	r0, r3
 800d40e:	3714      	adds	r7, #20
 800d410:	46bd      	mov	sp, r7
 800d412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d416:	4770      	bx	lr
 800d418:	00030d40 	.word	0x00030d40

0800d41c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800d41c:	b480      	push	{r7}
 800d41e:	b085      	sub	sp, #20
 800d420:	af00      	add	r7, sp, #0
 800d422:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d424:	2300      	movs	r3, #0
 800d426:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	3301      	adds	r3, #1
 800d42c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	4a11      	ldr	r2, [pc, #68]	; (800d478 <USB_FlushRxFifo+0x5c>)
 800d432:	4293      	cmp	r3, r2
 800d434:	d901      	bls.n	800d43a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800d436:	2303      	movs	r3, #3
 800d438:	e018      	b.n	800d46c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	691b      	ldr	r3, [r3, #16]
 800d43e:	2b00      	cmp	r3, #0
 800d440:	daf2      	bge.n	800d428 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800d442:	2300      	movs	r3, #0
 800d444:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	2210      	movs	r2, #16
 800d44a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	3301      	adds	r3, #1
 800d450:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	4a08      	ldr	r2, [pc, #32]	; (800d478 <USB_FlushRxFifo+0x5c>)
 800d456:	4293      	cmp	r3, r2
 800d458:	d901      	bls.n	800d45e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800d45a:	2303      	movs	r3, #3
 800d45c:	e006      	b.n	800d46c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	691b      	ldr	r3, [r3, #16]
 800d462:	f003 0310 	and.w	r3, r3, #16
 800d466:	2b10      	cmp	r3, #16
 800d468:	d0f0      	beq.n	800d44c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800d46a:	2300      	movs	r3, #0
}
 800d46c:	4618      	mov	r0, r3
 800d46e:	3714      	adds	r7, #20
 800d470:	46bd      	mov	sp, r7
 800d472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d476:	4770      	bx	lr
 800d478:	00030d40 	.word	0x00030d40

0800d47c <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800d47c:	b480      	push	{r7}
 800d47e:	b085      	sub	sp, #20
 800d480:	af00      	add	r7, sp, #0
 800d482:	6078      	str	r0, [r7, #4]
 800d484:	460b      	mov	r3, r1
 800d486:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d492:	681a      	ldr	r2, [r3, #0]
 800d494:	78fb      	ldrb	r3, [r7, #3]
 800d496:	68f9      	ldr	r1, [r7, #12]
 800d498:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d49c:	4313      	orrs	r3, r2
 800d49e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800d4a0:	2300      	movs	r3, #0
}
 800d4a2:	4618      	mov	r0, r3
 800d4a4:	3714      	adds	r7, #20
 800d4a6:	46bd      	mov	sp, r7
 800d4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ac:	4770      	bx	lr

0800d4ae <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800d4ae:	b480      	push	{r7}
 800d4b0:	b087      	sub	sp, #28
 800d4b2:	af00      	add	r7, sp, #0
 800d4b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800d4ba:	693b      	ldr	r3, [r7, #16]
 800d4bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d4c0:	689b      	ldr	r3, [r3, #8]
 800d4c2:	f003 0306 	and.w	r3, r3, #6
 800d4c6:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	2b02      	cmp	r3, #2
 800d4cc:	d002      	beq.n	800d4d4 <USB_GetDevSpeed+0x26>
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	2b06      	cmp	r3, #6
 800d4d2:	d102      	bne.n	800d4da <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800d4d4:	2302      	movs	r3, #2
 800d4d6:	75fb      	strb	r3, [r7, #23]
 800d4d8:	e001      	b.n	800d4de <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 800d4da:	230f      	movs	r3, #15
 800d4dc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800d4de:	7dfb      	ldrb	r3, [r7, #23]
}
 800d4e0:	4618      	mov	r0, r3
 800d4e2:	371c      	adds	r7, #28
 800d4e4:	46bd      	mov	sp, r7
 800d4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ea:	4770      	bx	lr

0800d4ec <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d4ec:	b480      	push	{r7}
 800d4ee:	b085      	sub	sp, #20
 800d4f0:	af00      	add	r7, sp, #0
 800d4f2:	6078      	str	r0, [r7, #4]
 800d4f4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d4fa:	683b      	ldr	r3, [r7, #0]
 800d4fc:	781b      	ldrb	r3, [r3, #0]
 800d4fe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d500:	683b      	ldr	r3, [r7, #0]
 800d502:	785b      	ldrb	r3, [r3, #1]
 800d504:	2b01      	cmp	r3, #1
 800d506:	d13a      	bne.n	800d57e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d50e:	69da      	ldr	r2, [r3, #28]
 800d510:	683b      	ldr	r3, [r7, #0]
 800d512:	781b      	ldrb	r3, [r3, #0]
 800d514:	f003 030f 	and.w	r3, r3, #15
 800d518:	2101      	movs	r1, #1
 800d51a:	fa01 f303 	lsl.w	r3, r1, r3
 800d51e:	b29b      	uxth	r3, r3
 800d520:	68f9      	ldr	r1, [r7, #12]
 800d522:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d526:	4313      	orrs	r3, r2
 800d528:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800d52a:	68bb      	ldr	r3, [r7, #8]
 800d52c:	015a      	lsls	r2, r3, #5
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	4413      	add	r3, r2
 800d532:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d155      	bne.n	800d5ec <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d540:	68bb      	ldr	r3, [r7, #8]
 800d542:	015a      	lsls	r2, r3, #5
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	4413      	add	r3, r2
 800d548:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d54c:	681a      	ldr	r2, [r3, #0]
 800d54e:	683b      	ldr	r3, [r7, #0]
 800d550:	68db      	ldr	r3, [r3, #12]
 800d552:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800d556:	683b      	ldr	r3, [r7, #0]
 800d558:	791b      	ldrb	r3, [r3, #4]
 800d55a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d55c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800d55e:	68bb      	ldr	r3, [r7, #8]
 800d560:	059b      	lsls	r3, r3, #22
 800d562:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d564:	4313      	orrs	r3, r2
 800d566:	68ba      	ldr	r2, [r7, #8]
 800d568:	0151      	lsls	r1, r2, #5
 800d56a:	68fa      	ldr	r2, [r7, #12]
 800d56c:	440a      	add	r2, r1
 800d56e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d572:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d576:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d57a:	6013      	str	r3, [r2, #0]
 800d57c:	e036      	b.n	800d5ec <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d584:	69da      	ldr	r2, [r3, #28]
 800d586:	683b      	ldr	r3, [r7, #0]
 800d588:	781b      	ldrb	r3, [r3, #0]
 800d58a:	f003 030f 	and.w	r3, r3, #15
 800d58e:	2101      	movs	r1, #1
 800d590:	fa01 f303 	lsl.w	r3, r1, r3
 800d594:	041b      	lsls	r3, r3, #16
 800d596:	68f9      	ldr	r1, [r7, #12]
 800d598:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d59c:	4313      	orrs	r3, r2
 800d59e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800d5a0:	68bb      	ldr	r3, [r7, #8]
 800d5a2:	015a      	lsls	r2, r3, #5
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	4413      	add	r3, r2
 800d5a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d11a      	bne.n	800d5ec <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800d5b6:	68bb      	ldr	r3, [r7, #8]
 800d5b8:	015a      	lsls	r2, r3, #5
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	4413      	add	r3, r2
 800d5be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d5c2:	681a      	ldr	r2, [r3, #0]
 800d5c4:	683b      	ldr	r3, [r7, #0]
 800d5c6:	68db      	ldr	r3, [r3, #12]
 800d5c8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800d5cc:	683b      	ldr	r3, [r7, #0]
 800d5ce:	791b      	ldrb	r3, [r3, #4]
 800d5d0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800d5d2:	430b      	orrs	r3, r1
 800d5d4:	4313      	orrs	r3, r2
 800d5d6:	68ba      	ldr	r2, [r7, #8]
 800d5d8:	0151      	lsls	r1, r2, #5
 800d5da:	68fa      	ldr	r2, [r7, #12]
 800d5dc:	440a      	add	r2, r1
 800d5de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d5e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d5e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d5ea:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800d5ec:	2300      	movs	r3, #0
}
 800d5ee:	4618      	mov	r0, r3
 800d5f0:	3714      	adds	r7, #20
 800d5f2:	46bd      	mov	sp, r7
 800d5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5f8:	4770      	bx	lr
	...

0800d5fc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d5fc:	b480      	push	{r7}
 800d5fe:	b085      	sub	sp, #20
 800d600:	af00      	add	r7, sp, #0
 800d602:	6078      	str	r0, [r7, #4]
 800d604:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d60a:	683b      	ldr	r3, [r7, #0]
 800d60c:	781b      	ldrb	r3, [r3, #0]
 800d60e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800d610:	683b      	ldr	r3, [r7, #0]
 800d612:	785b      	ldrb	r3, [r3, #1]
 800d614:	2b01      	cmp	r3, #1
 800d616:	d161      	bne.n	800d6dc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d618:	68bb      	ldr	r3, [r7, #8]
 800d61a:	015a      	lsls	r2, r3, #5
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	4413      	add	r3, r2
 800d620:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d62a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d62e:	d11f      	bne.n	800d670 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800d630:	68bb      	ldr	r3, [r7, #8]
 800d632:	015a      	lsls	r2, r3, #5
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	4413      	add	r3, r2
 800d638:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	68ba      	ldr	r2, [r7, #8]
 800d640:	0151      	lsls	r1, r2, #5
 800d642:	68fa      	ldr	r2, [r7, #12]
 800d644:	440a      	add	r2, r1
 800d646:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d64a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800d64e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800d650:	68bb      	ldr	r3, [r7, #8]
 800d652:	015a      	lsls	r2, r3, #5
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	4413      	add	r3, r2
 800d658:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	68ba      	ldr	r2, [r7, #8]
 800d660:	0151      	lsls	r1, r2, #5
 800d662:	68fa      	ldr	r2, [r7, #12]
 800d664:	440a      	add	r2, r1
 800d666:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d66a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d66e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d676:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d678:	683b      	ldr	r3, [r7, #0]
 800d67a:	781b      	ldrb	r3, [r3, #0]
 800d67c:	f003 030f 	and.w	r3, r3, #15
 800d680:	2101      	movs	r1, #1
 800d682:	fa01 f303 	lsl.w	r3, r1, r3
 800d686:	b29b      	uxth	r3, r3
 800d688:	43db      	mvns	r3, r3
 800d68a:	68f9      	ldr	r1, [r7, #12]
 800d68c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d690:	4013      	ands	r3, r2
 800d692:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d69a:	69da      	ldr	r2, [r3, #28]
 800d69c:	683b      	ldr	r3, [r7, #0]
 800d69e:	781b      	ldrb	r3, [r3, #0]
 800d6a0:	f003 030f 	and.w	r3, r3, #15
 800d6a4:	2101      	movs	r1, #1
 800d6a6:	fa01 f303 	lsl.w	r3, r1, r3
 800d6aa:	b29b      	uxth	r3, r3
 800d6ac:	43db      	mvns	r3, r3
 800d6ae:	68f9      	ldr	r1, [r7, #12]
 800d6b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d6b4:	4013      	ands	r3, r2
 800d6b6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800d6b8:	68bb      	ldr	r3, [r7, #8]
 800d6ba:	015a      	lsls	r2, r3, #5
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	4413      	add	r3, r2
 800d6c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d6c4:	681a      	ldr	r2, [r3, #0]
 800d6c6:	68bb      	ldr	r3, [r7, #8]
 800d6c8:	0159      	lsls	r1, r3, #5
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	440b      	add	r3, r1
 800d6ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d6d2:	4619      	mov	r1, r3
 800d6d4:	4b35      	ldr	r3, [pc, #212]	; (800d7ac <USB_DeactivateEndpoint+0x1b0>)
 800d6d6:	4013      	ands	r3, r2
 800d6d8:	600b      	str	r3, [r1, #0]
 800d6da:	e060      	b.n	800d79e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d6dc:	68bb      	ldr	r3, [r7, #8]
 800d6de:	015a      	lsls	r2, r3, #5
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	4413      	add	r3, r2
 800d6e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d6ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d6f2:	d11f      	bne.n	800d734 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800d6f4:	68bb      	ldr	r3, [r7, #8]
 800d6f6:	015a      	lsls	r2, r3, #5
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	4413      	add	r3, r2
 800d6fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	68ba      	ldr	r2, [r7, #8]
 800d704:	0151      	lsls	r1, r2, #5
 800d706:	68fa      	ldr	r2, [r7, #12]
 800d708:	440a      	add	r2, r1
 800d70a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d70e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800d712:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800d714:	68bb      	ldr	r3, [r7, #8]
 800d716:	015a      	lsls	r2, r3, #5
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	4413      	add	r3, r2
 800d71c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	68ba      	ldr	r2, [r7, #8]
 800d724:	0151      	lsls	r1, r2, #5
 800d726:	68fa      	ldr	r2, [r7, #12]
 800d728:	440a      	add	r2, r1
 800d72a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d72e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d732:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d73a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d73c:	683b      	ldr	r3, [r7, #0]
 800d73e:	781b      	ldrb	r3, [r3, #0]
 800d740:	f003 030f 	and.w	r3, r3, #15
 800d744:	2101      	movs	r1, #1
 800d746:	fa01 f303 	lsl.w	r3, r1, r3
 800d74a:	041b      	lsls	r3, r3, #16
 800d74c:	43db      	mvns	r3, r3
 800d74e:	68f9      	ldr	r1, [r7, #12]
 800d750:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d754:	4013      	ands	r3, r2
 800d756:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800d758:	68fb      	ldr	r3, [r7, #12]
 800d75a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d75e:	69da      	ldr	r2, [r3, #28]
 800d760:	683b      	ldr	r3, [r7, #0]
 800d762:	781b      	ldrb	r3, [r3, #0]
 800d764:	f003 030f 	and.w	r3, r3, #15
 800d768:	2101      	movs	r1, #1
 800d76a:	fa01 f303 	lsl.w	r3, r1, r3
 800d76e:	041b      	lsls	r3, r3, #16
 800d770:	43db      	mvns	r3, r3
 800d772:	68f9      	ldr	r1, [r7, #12]
 800d774:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d778:	4013      	ands	r3, r2
 800d77a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800d77c:	68bb      	ldr	r3, [r7, #8]
 800d77e:	015a      	lsls	r2, r3, #5
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	4413      	add	r3, r2
 800d784:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d788:	681a      	ldr	r2, [r3, #0]
 800d78a:	68bb      	ldr	r3, [r7, #8]
 800d78c:	0159      	lsls	r1, r3, #5
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	440b      	add	r3, r1
 800d792:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d796:	4619      	mov	r1, r3
 800d798:	4b05      	ldr	r3, [pc, #20]	; (800d7b0 <USB_DeactivateEndpoint+0x1b4>)
 800d79a:	4013      	ands	r3, r2
 800d79c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800d79e:	2300      	movs	r3, #0
}
 800d7a0:	4618      	mov	r0, r3
 800d7a2:	3714      	adds	r7, #20
 800d7a4:	46bd      	mov	sp, r7
 800d7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7aa:	4770      	bx	lr
 800d7ac:	ec337800 	.word	0xec337800
 800d7b0:	eff37800 	.word	0xeff37800

0800d7b4 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d7b4:	b580      	push	{r7, lr}
 800d7b6:	b086      	sub	sp, #24
 800d7b8:	af00      	add	r7, sp, #0
 800d7ba:	6078      	str	r0, [r7, #4]
 800d7bc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800d7c2:	683b      	ldr	r3, [r7, #0]
 800d7c4:	781b      	ldrb	r3, [r3, #0]
 800d7c6:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d7c8:	683b      	ldr	r3, [r7, #0]
 800d7ca:	785b      	ldrb	r3, [r3, #1]
 800d7cc:	2b01      	cmp	r3, #1
 800d7ce:	f040 810a 	bne.w	800d9e6 <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800d7d2:	683b      	ldr	r3, [r7, #0]
 800d7d4:	699b      	ldr	r3, [r3, #24]
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d132      	bne.n	800d840 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d7da:	693b      	ldr	r3, [r7, #16]
 800d7dc:	015a      	lsls	r2, r3, #5
 800d7de:	697b      	ldr	r3, [r7, #20]
 800d7e0:	4413      	add	r3, r2
 800d7e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d7e6:	691b      	ldr	r3, [r3, #16]
 800d7e8:	693a      	ldr	r2, [r7, #16]
 800d7ea:	0151      	lsls	r1, r2, #5
 800d7ec:	697a      	ldr	r2, [r7, #20]
 800d7ee:	440a      	add	r2, r1
 800d7f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d7f4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d7f8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d7fc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d7fe:	693b      	ldr	r3, [r7, #16]
 800d800:	015a      	lsls	r2, r3, #5
 800d802:	697b      	ldr	r3, [r7, #20]
 800d804:	4413      	add	r3, r2
 800d806:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d80a:	691b      	ldr	r3, [r3, #16]
 800d80c:	693a      	ldr	r2, [r7, #16]
 800d80e:	0151      	lsls	r1, r2, #5
 800d810:	697a      	ldr	r2, [r7, #20]
 800d812:	440a      	add	r2, r1
 800d814:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d818:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d81c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d81e:	693b      	ldr	r3, [r7, #16]
 800d820:	015a      	lsls	r2, r3, #5
 800d822:	697b      	ldr	r3, [r7, #20]
 800d824:	4413      	add	r3, r2
 800d826:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d82a:	691b      	ldr	r3, [r3, #16]
 800d82c:	693a      	ldr	r2, [r7, #16]
 800d82e:	0151      	lsls	r1, r2, #5
 800d830:	697a      	ldr	r2, [r7, #20]
 800d832:	440a      	add	r2, r1
 800d834:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d838:	0cdb      	lsrs	r3, r3, #19
 800d83a:	04db      	lsls	r3, r3, #19
 800d83c:	6113      	str	r3, [r2, #16]
 800d83e:	e074      	b.n	800d92a <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d840:	693b      	ldr	r3, [r7, #16]
 800d842:	015a      	lsls	r2, r3, #5
 800d844:	697b      	ldr	r3, [r7, #20]
 800d846:	4413      	add	r3, r2
 800d848:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d84c:	691b      	ldr	r3, [r3, #16]
 800d84e:	693a      	ldr	r2, [r7, #16]
 800d850:	0151      	lsls	r1, r2, #5
 800d852:	697a      	ldr	r2, [r7, #20]
 800d854:	440a      	add	r2, r1
 800d856:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d85a:	0cdb      	lsrs	r3, r3, #19
 800d85c:	04db      	lsls	r3, r3, #19
 800d85e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d860:	693b      	ldr	r3, [r7, #16]
 800d862:	015a      	lsls	r2, r3, #5
 800d864:	697b      	ldr	r3, [r7, #20]
 800d866:	4413      	add	r3, r2
 800d868:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d86c:	691b      	ldr	r3, [r3, #16]
 800d86e:	693a      	ldr	r2, [r7, #16]
 800d870:	0151      	lsls	r1, r2, #5
 800d872:	697a      	ldr	r2, [r7, #20]
 800d874:	440a      	add	r2, r1
 800d876:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d87a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d87e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d882:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800d884:	693b      	ldr	r3, [r7, #16]
 800d886:	015a      	lsls	r2, r3, #5
 800d888:	697b      	ldr	r3, [r7, #20]
 800d88a:	4413      	add	r3, r2
 800d88c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d890:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800d892:	683b      	ldr	r3, [r7, #0]
 800d894:	6999      	ldr	r1, [r3, #24]
 800d896:	683b      	ldr	r3, [r7, #0]
 800d898:	68db      	ldr	r3, [r3, #12]
 800d89a:	440b      	add	r3, r1
 800d89c:	1e59      	subs	r1, r3, #1
 800d89e:	683b      	ldr	r3, [r7, #0]
 800d8a0:	68db      	ldr	r3, [r3, #12]
 800d8a2:	fbb1 f3f3 	udiv	r3, r1, r3
 800d8a6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800d8a8:	4b9e      	ldr	r3, [pc, #632]	; (800db24 <USB_EPStartXfer+0x370>)
 800d8aa:	400b      	ands	r3, r1
 800d8ac:	6939      	ldr	r1, [r7, #16]
 800d8ae:	0148      	lsls	r0, r1, #5
 800d8b0:	6979      	ldr	r1, [r7, #20]
 800d8b2:	4401      	add	r1, r0
 800d8b4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d8b8:	4313      	orrs	r3, r2
 800d8ba:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800d8bc:	693b      	ldr	r3, [r7, #16]
 800d8be:	015a      	lsls	r2, r3, #5
 800d8c0:	697b      	ldr	r3, [r7, #20]
 800d8c2:	4413      	add	r3, r2
 800d8c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d8c8:	691a      	ldr	r2, [r3, #16]
 800d8ca:	683b      	ldr	r3, [r7, #0]
 800d8cc:	699b      	ldr	r3, [r3, #24]
 800d8ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d8d2:	6939      	ldr	r1, [r7, #16]
 800d8d4:	0148      	lsls	r0, r1, #5
 800d8d6:	6979      	ldr	r1, [r7, #20]
 800d8d8:	4401      	add	r1, r0
 800d8da:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d8de:	4313      	orrs	r3, r2
 800d8e0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800d8e2:	683b      	ldr	r3, [r7, #0]
 800d8e4:	791b      	ldrb	r3, [r3, #4]
 800d8e6:	2b01      	cmp	r3, #1
 800d8e8:	d11f      	bne.n	800d92a <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800d8ea:	693b      	ldr	r3, [r7, #16]
 800d8ec:	015a      	lsls	r2, r3, #5
 800d8ee:	697b      	ldr	r3, [r7, #20]
 800d8f0:	4413      	add	r3, r2
 800d8f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d8f6:	691b      	ldr	r3, [r3, #16]
 800d8f8:	693a      	ldr	r2, [r7, #16]
 800d8fa:	0151      	lsls	r1, r2, #5
 800d8fc:	697a      	ldr	r2, [r7, #20]
 800d8fe:	440a      	add	r2, r1
 800d900:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d904:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800d908:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800d90a:	693b      	ldr	r3, [r7, #16]
 800d90c:	015a      	lsls	r2, r3, #5
 800d90e:	697b      	ldr	r3, [r7, #20]
 800d910:	4413      	add	r3, r2
 800d912:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d916:	691b      	ldr	r3, [r3, #16]
 800d918:	693a      	ldr	r2, [r7, #16]
 800d91a:	0151      	lsls	r1, r2, #5
 800d91c:	697a      	ldr	r2, [r7, #20]
 800d91e:	440a      	add	r2, r1
 800d920:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d924:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d928:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d92a:	693b      	ldr	r3, [r7, #16]
 800d92c:	015a      	lsls	r2, r3, #5
 800d92e:	697b      	ldr	r3, [r7, #20]
 800d930:	4413      	add	r3, r2
 800d932:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	693a      	ldr	r2, [r7, #16]
 800d93a:	0151      	lsls	r1, r2, #5
 800d93c:	697a      	ldr	r2, [r7, #20]
 800d93e:	440a      	add	r2, r1
 800d940:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d944:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d948:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800d94a:	683b      	ldr	r3, [r7, #0]
 800d94c:	791b      	ldrb	r3, [r3, #4]
 800d94e:	2b01      	cmp	r3, #1
 800d950:	d015      	beq.n	800d97e <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800d952:	683b      	ldr	r3, [r7, #0]
 800d954:	699b      	ldr	r3, [r3, #24]
 800d956:	2b00      	cmp	r3, #0
 800d958:	f000 8106 	beq.w	800db68 <USB_EPStartXfer+0x3b4>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800d95c:	697b      	ldr	r3, [r7, #20]
 800d95e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d962:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d964:	683b      	ldr	r3, [r7, #0]
 800d966:	781b      	ldrb	r3, [r3, #0]
 800d968:	f003 030f 	and.w	r3, r3, #15
 800d96c:	2101      	movs	r1, #1
 800d96e:	fa01 f303 	lsl.w	r3, r1, r3
 800d972:	6979      	ldr	r1, [r7, #20]
 800d974:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d978:	4313      	orrs	r3, r2
 800d97a:	634b      	str	r3, [r1, #52]	; 0x34
 800d97c:	e0f4      	b.n	800db68 <USB_EPStartXfer+0x3b4>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d97e:	697b      	ldr	r3, [r7, #20]
 800d980:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d984:	689b      	ldr	r3, [r3, #8]
 800d986:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d110      	bne.n	800d9b0 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800d98e:	693b      	ldr	r3, [r7, #16]
 800d990:	015a      	lsls	r2, r3, #5
 800d992:	697b      	ldr	r3, [r7, #20]
 800d994:	4413      	add	r3, r2
 800d996:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	693a      	ldr	r2, [r7, #16]
 800d99e:	0151      	lsls	r1, r2, #5
 800d9a0:	697a      	ldr	r2, [r7, #20]
 800d9a2:	440a      	add	r2, r1
 800d9a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d9a8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d9ac:	6013      	str	r3, [r2, #0]
 800d9ae:	e00f      	b.n	800d9d0 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800d9b0:	693b      	ldr	r3, [r7, #16]
 800d9b2:	015a      	lsls	r2, r3, #5
 800d9b4:	697b      	ldr	r3, [r7, #20]
 800d9b6:	4413      	add	r3, r2
 800d9b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	693a      	ldr	r2, [r7, #16]
 800d9c0:	0151      	lsls	r1, r2, #5
 800d9c2:	697a      	ldr	r2, [r7, #20]
 800d9c4:	440a      	add	r2, r1
 800d9c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d9ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d9ce:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 800d9d0:	683b      	ldr	r3, [r7, #0]
 800d9d2:	6919      	ldr	r1, [r3, #16]
 800d9d4:	683b      	ldr	r3, [r7, #0]
 800d9d6:	781a      	ldrb	r2, [r3, #0]
 800d9d8:	683b      	ldr	r3, [r7, #0]
 800d9da:	699b      	ldr	r3, [r3, #24]
 800d9dc:	b29b      	uxth	r3, r3
 800d9de:	6878      	ldr	r0, [r7, #4]
 800d9e0:	f000 fa94 	bl	800df0c <USB_WritePacket>
 800d9e4:	e0c0      	b.n	800db68 <USB_EPStartXfer+0x3b4>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800d9e6:	693b      	ldr	r3, [r7, #16]
 800d9e8:	015a      	lsls	r2, r3, #5
 800d9ea:	697b      	ldr	r3, [r7, #20]
 800d9ec:	4413      	add	r3, r2
 800d9ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d9f2:	691b      	ldr	r3, [r3, #16]
 800d9f4:	693a      	ldr	r2, [r7, #16]
 800d9f6:	0151      	lsls	r1, r2, #5
 800d9f8:	697a      	ldr	r2, [r7, #20]
 800d9fa:	440a      	add	r2, r1
 800d9fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800da00:	0cdb      	lsrs	r3, r3, #19
 800da02:	04db      	lsls	r3, r3, #19
 800da04:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800da06:	693b      	ldr	r3, [r7, #16]
 800da08:	015a      	lsls	r2, r3, #5
 800da0a:	697b      	ldr	r3, [r7, #20]
 800da0c:	4413      	add	r3, r2
 800da0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da12:	691b      	ldr	r3, [r3, #16]
 800da14:	693a      	ldr	r2, [r7, #16]
 800da16:	0151      	lsls	r1, r2, #5
 800da18:	697a      	ldr	r2, [r7, #20]
 800da1a:	440a      	add	r2, r1
 800da1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800da20:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800da24:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800da28:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800da2a:	683b      	ldr	r3, [r7, #0]
 800da2c:	699b      	ldr	r3, [r3, #24]
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d123      	bne.n	800da7a <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800da32:	693b      	ldr	r3, [r7, #16]
 800da34:	015a      	lsls	r2, r3, #5
 800da36:	697b      	ldr	r3, [r7, #20]
 800da38:	4413      	add	r3, r2
 800da3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da3e:	691a      	ldr	r2, [r3, #16]
 800da40:	683b      	ldr	r3, [r7, #0]
 800da42:	68db      	ldr	r3, [r3, #12]
 800da44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800da48:	6939      	ldr	r1, [r7, #16]
 800da4a:	0148      	lsls	r0, r1, #5
 800da4c:	6979      	ldr	r1, [r7, #20]
 800da4e:	4401      	add	r1, r0
 800da50:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800da54:	4313      	orrs	r3, r2
 800da56:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800da58:	693b      	ldr	r3, [r7, #16]
 800da5a:	015a      	lsls	r2, r3, #5
 800da5c:	697b      	ldr	r3, [r7, #20]
 800da5e:	4413      	add	r3, r2
 800da60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da64:	691b      	ldr	r3, [r3, #16]
 800da66:	693a      	ldr	r2, [r7, #16]
 800da68:	0151      	lsls	r1, r2, #5
 800da6a:	697a      	ldr	r2, [r7, #20]
 800da6c:	440a      	add	r2, r1
 800da6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800da72:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800da76:	6113      	str	r3, [r2, #16]
 800da78:	e037      	b.n	800daea <USB_EPStartXfer+0x336>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800da7a:	683b      	ldr	r3, [r7, #0]
 800da7c:	699a      	ldr	r2, [r3, #24]
 800da7e:	683b      	ldr	r3, [r7, #0]
 800da80:	68db      	ldr	r3, [r3, #12]
 800da82:	4413      	add	r3, r2
 800da84:	1e5a      	subs	r2, r3, #1
 800da86:	683b      	ldr	r3, [r7, #0]
 800da88:	68db      	ldr	r3, [r3, #12]
 800da8a:	fbb2 f3f3 	udiv	r3, r2, r3
 800da8e:	81fb      	strh	r3, [r7, #14]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800da90:	683b      	ldr	r3, [r7, #0]
 800da92:	68db      	ldr	r3, [r3, #12]
 800da94:	89fa      	ldrh	r2, [r7, #14]
 800da96:	fb03 f202 	mul.w	r2, r3, r2
 800da9a:	683b      	ldr	r3, [r7, #0]
 800da9c:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800da9e:	693b      	ldr	r3, [r7, #16]
 800daa0:	015a      	lsls	r2, r3, #5
 800daa2:	697b      	ldr	r3, [r7, #20]
 800daa4:	4413      	add	r3, r2
 800daa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800daaa:	691a      	ldr	r2, [r3, #16]
 800daac:	89fb      	ldrh	r3, [r7, #14]
 800daae:	04d9      	lsls	r1, r3, #19
 800dab0:	4b1c      	ldr	r3, [pc, #112]	; (800db24 <USB_EPStartXfer+0x370>)
 800dab2:	400b      	ands	r3, r1
 800dab4:	6939      	ldr	r1, [r7, #16]
 800dab6:	0148      	lsls	r0, r1, #5
 800dab8:	6979      	ldr	r1, [r7, #20]
 800daba:	4401      	add	r1, r0
 800dabc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800dac0:	4313      	orrs	r3, r2
 800dac2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800dac4:	693b      	ldr	r3, [r7, #16]
 800dac6:	015a      	lsls	r2, r3, #5
 800dac8:	697b      	ldr	r3, [r7, #20]
 800daca:	4413      	add	r3, r2
 800dacc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dad0:	691a      	ldr	r2, [r3, #16]
 800dad2:	683b      	ldr	r3, [r7, #0]
 800dad4:	69db      	ldr	r3, [r3, #28]
 800dad6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800dada:	6939      	ldr	r1, [r7, #16]
 800dadc:	0148      	lsls	r0, r1, #5
 800dade:	6979      	ldr	r1, [r7, #20]
 800dae0:	4401      	add	r1, r0
 800dae2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800dae6:	4313      	orrs	r3, r2
 800dae8:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 800daea:	683b      	ldr	r3, [r7, #0]
 800daec:	791b      	ldrb	r3, [r3, #4]
 800daee:	2b01      	cmp	r3, #1
 800daf0:	d12a      	bne.n	800db48 <USB_EPStartXfer+0x394>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800daf2:	697b      	ldr	r3, [r7, #20]
 800daf4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800daf8:	689b      	ldr	r3, [r3, #8]
 800dafa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d112      	bne.n	800db28 <USB_EPStartXfer+0x374>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800db02:	693b      	ldr	r3, [r7, #16]
 800db04:	015a      	lsls	r2, r3, #5
 800db06:	697b      	ldr	r3, [r7, #20]
 800db08:	4413      	add	r3, r2
 800db0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	693a      	ldr	r2, [r7, #16]
 800db12:	0151      	lsls	r1, r2, #5
 800db14:	697a      	ldr	r2, [r7, #20]
 800db16:	440a      	add	r2, r1
 800db18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800db1c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800db20:	6013      	str	r3, [r2, #0]
 800db22:	e011      	b.n	800db48 <USB_EPStartXfer+0x394>
 800db24:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800db28:	693b      	ldr	r3, [r7, #16]
 800db2a:	015a      	lsls	r2, r3, #5
 800db2c:	697b      	ldr	r3, [r7, #20]
 800db2e:	4413      	add	r3, r2
 800db30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	693a      	ldr	r2, [r7, #16]
 800db38:	0151      	lsls	r1, r2, #5
 800db3a:	697a      	ldr	r2, [r7, #20]
 800db3c:	440a      	add	r2, r1
 800db3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800db42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800db46:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800db48:	693b      	ldr	r3, [r7, #16]
 800db4a:	015a      	lsls	r2, r3, #5
 800db4c:	697b      	ldr	r3, [r7, #20]
 800db4e:	4413      	add	r3, r2
 800db50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	693a      	ldr	r2, [r7, #16]
 800db58:	0151      	lsls	r1, r2, #5
 800db5a:	697a      	ldr	r2, [r7, #20]
 800db5c:	440a      	add	r2, r1
 800db5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800db62:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800db66:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800db68:	2300      	movs	r3, #0
}
 800db6a:	4618      	mov	r0, r3
 800db6c:	3718      	adds	r7, #24
 800db6e:	46bd      	mov	sp, r7
 800db70:	bd80      	pop	{r7, pc}
 800db72:	bf00      	nop

0800db74 <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800db74:	b480      	push	{r7}
 800db76:	b085      	sub	sp, #20
 800db78:	af00      	add	r7, sp, #0
 800db7a:	6078      	str	r0, [r7, #4]
 800db7c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800db82:	683b      	ldr	r3, [r7, #0]
 800db84:	781b      	ldrb	r3, [r3, #0]
 800db86:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800db88:	683b      	ldr	r3, [r7, #0]
 800db8a:	785b      	ldrb	r3, [r3, #1]
 800db8c:	2b01      	cmp	r3, #1
 800db8e:	f040 80ab 	bne.w	800dce8 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800db92:	683b      	ldr	r3, [r7, #0]
 800db94:	699b      	ldr	r3, [r3, #24]
 800db96:	2b00      	cmp	r3, #0
 800db98:	d132      	bne.n	800dc00 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800db9a:	68bb      	ldr	r3, [r7, #8]
 800db9c:	015a      	lsls	r2, r3, #5
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	4413      	add	r3, r2
 800dba2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dba6:	691b      	ldr	r3, [r3, #16]
 800dba8:	68ba      	ldr	r2, [r7, #8]
 800dbaa:	0151      	lsls	r1, r2, #5
 800dbac:	68fa      	ldr	r2, [r7, #12]
 800dbae:	440a      	add	r2, r1
 800dbb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dbb4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800dbb8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800dbbc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800dbbe:	68bb      	ldr	r3, [r7, #8]
 800dbc0:	015a      	lsls	r2, r3, #5
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	4413      	add	r3, r2
 800dbc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dbca:	691b      	ldr	r3, [r3, #16]
 800dbcc:	68ba      	ldr	r2, [r7, #8]
 800dbce:	0151      	lsls	r1, r2, #5
 800dbd0:	68fa      	ldr	r2, [r7, #12]
 800dbd2:	440a      	add	r2, r1
 800dbd4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dbd8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800dbdc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800dbde:	68bb      	ldr	r3, [r7, #8]
 800dbe0:	015a      	lsls	r2, r3, #5
 800dbe2:	68fb      	ldr	r3, [r7, #12]
 800dbe4:	4413      	add	r3, r2
 800dbe6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dbea:	691b      	ldr	r3, [r3, #16]
 800dbec:	68ba      	ldr	r2, [r7, #8]
 800dbee:	0151      	lsls	r1, r2, #5
 800dbf0:	68fa      	ldr	r2, [r7, #12]
 800dbf2:	440a      	add	r2, r1
 800dbf4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dbf8:	0cdb      	lsrs	r3, r3, #19
 800dbfa:	04db      	lsls	r3, r3, #19
 800dbfc:	6113      	str	r3, [r2, #16]
 800dbfe:	e04e      	b.n	800dc9e <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800dc00:	68bb      	ldr	r3, [r7, #8]
 800dc02:	015a      	lsls	r2, r3, #5
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	4413      	add	r3, r2
 800dc08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dc0c:	691b      	ldr	r3, [r3, #16]
 800dc0e:	68ba      	ldr	r2, [r7, #8]
 800dc10:	0151      	lsls	r1, r2, #5
 800dc12:	68fa      	ldr	r2, [r7, #12]
 800dc14:	440a      	add	r2, r1
 800dc16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dc1a:	0cdb      	lsrs	r3, r3, #19
 800dc1c:	04db      	lsls	r3, r3, #19
 800dc1e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800dc20:	68bb      	ldr	r3, [r7, #8]
 800dc22:	015a      	lsls	r2, r3, #5
 800dc24:	68fb      	ldr	r3, [r7, #12]
 800dc26:	4413      	add	r3, r2
 800dc28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dc2c:	691b      	ldr	r3, [r3, #16]
 800dc2e:	68ba      	ldr	r2, [r7, #8]
 800dc30:	0151      	lsls	r1, r2, #5
 800dc32:	68fa      	ldr	r2, [r7, #12]
 800dc34:	440a      	add	r2, r1
 800dc36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dc3a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800dc3e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800dc42:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800dc44:	683b      	ldr	r3, [r7, #0]
 800dc46:	699a      	ldr	r2, [r3, #24]
 800dc48:	683b      	ldr	r3, [r7, #0]
 800dc4a:	68db      	ldr	r3, [r3, #12]
 800dc4c:	429a      	cmp	r2, r3
 800dc4e:	d903      	bls.n	800dc58 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 800dc50:	683b      	ldr	r3, [r7, #0]
 800dc52:	68da      	ldr	r2, [r3, #12]
 800dc54:	683b      	ldr	r3, [r7, #0]
 800dc56:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800dc58:	68bb      	ldr	r3, [r7, #8]
 800dc5a:	015a      	lsls	r2, r3, #5
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	4413      	add	r3, r2
 800dc60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dc64:	691b      	ldr	r3, [r3, #16]
 800dc66:	68ba      	ldr	r2, [r7, #8]
 800dc68:	0151      	lsls	r1, r2, #5
 800dc6a:	68fa      	ldr	r2, [r7, #12]
 800dc6c:	440a      	add	r2, r1
 800dc6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dc72:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800dc76:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800dc78:	68bb      	ldr	r3, [r7, #8]
 800dc7a:	015a      	lsls	r2, r3, #5
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	4413      	add	r3, r2
 800dc80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dc84:	691a      	ldr	r2, [r3, #16]
 800dc86:	683b      	ldr	r3, [r7, #0]
 800dc88:	699b      	ldr	r3, [r3, #24]
 800dc8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800dc8e:	68b9      	ldr	r1, [r7, #8]
 800dc90:	0148      	lsls	r0, r1, #5
 800dc92:	68f9      	ldr	r1, [r7, #12]
 800dc94:	4401      	add	r1, r0
 800dc96:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800dc9a:	4313      	orrs	r3, r2
 800dc9c:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800dc9e:	68bb      	ldr	r3, [r7, #8]
 800dca0:	015a      	lsls	r2, r3, #5
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	4413      	add	r3, r2
 800dca6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	68ba      	ldr	r2, [r7, #8]
 800dcae:	0151      	lsls	r1, r2, #5
 800dcb0:	68fa      	ldr	r2, [r7, #12]
 800dcb2:	440a      	add	r2, r1
 800dcb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dcb8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800dcbc:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 800dcbe:	683b      	ldr	r3, [r7, #0]
 800dcc0:	699b      	ldr	r3, [r3, #24]
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d071      	beq.n	800ddaa <USB_EP0StartXfer+0x236>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dccc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dcce:	683b      	ldr	r3, [r7, #0]
 800dcd0:	781b      	ldrb	r3, [r3, #0]
 800dcd2:	f003 030f 	and.w	r3, r3, #15
 800dcd6:	2101      	movs	r1, #1
 800dcd8:	fa01 f303 	lsl.w	r3, r1, r3
 800dcdc:	68f9      	ldr	r1, [r7, #12]
 800dcde:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800dce2:	4313      	orrs	r3, r2
 800dce4:	634b      	str	r3, [r1, #52]	; 0x34
 800dce6:	e060      	b.n	800ddaa <USB_EP0StartXfer+0x236>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800dce8:	68bb      	ldr	r3, [r7, #8]
 800dcea:	015a      	lsls	r2, r3, #5
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	4413      	add	r3, r2
 800dcf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dcf4:	691b      	ldr	r3, [r3, #16]
 800dcf6:	68ba      	ldr	r2, [r7, #8]
 800dcf8:	0151      	lsls	r1, r2, #5
 800dcfa:	68fa      	ldr	r2, [r7, #12]
 800dcfc:	440a      	add	r2, r1
 800dcfe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dd02:	0cdb      	lsrs	r3, r3, #19
 800dd04:	04db      	lsls	r3, r3, #19
 800dd06:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800dd08:	68bb      	ldr	r3, [r7, #8]
 800dd0a:	015a      	lsls	r2, r3, #5
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	4413      	add	r3, r2
 800dd10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dd14:	691b      	ldr	r3, [r3, #16]
 800dd16:	68ba      	ldr	r2, [r7, #8]
 800dd18:	0151      	lsls	r1, r2, #5
 800dd1a:	68fa      	ldr	r2, [r7, #12]
 800dd1c:	440a      	add	r2, r1
 800dd1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dd22:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800dd26:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800dd2a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800dd2c:	683b      	ldr	r3, [r7, #0]
 800dd2e:	699b      	ldr	r3, [r3, #24]
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d003      	beq.n	800dd3c <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 800dd34:	683b      	ldr	r3, [r7, #0]
 800dd36:	68da      	ldr	r2, [r3, #12]
 800dd38:	683b      	ldr	r3, [r7, #0]
 800dd3a:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800dd3c:	683b      	ldr	r3, [r7, #0]
 800dd3e:	68da      	ldr	r2, [r3, #12]
 800dd40:	683b      	ldr	r3, [r7, #0]
 800dd42:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800dd44:	68bb      	ldr	r3, [r7, #8]
 800dd46:	015a      	lsls	r2, r3, #5
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	4413      	add	r3, r2
 800dd4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dd50:	691b      	ldr	r3, [r3, #16]
 800dd52:	68ba      	ldr	r2, [r7, #8]
 800dd54:	0151      	lsls	r1, r2, #5
 800dd56:	68fa      	ldr	r2, [r7, #12]
 800dd58:	440a      	add	r2, r1
 800dd5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dd5e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800dd62:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800dd64:	68bb      	ldr	r3, [r7, #8]
 800dd66:	015a      	lsls	r2, r3, #5
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	4413      	add	r3, r2
 800dd6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dd70:	691a      	ldr	r2, [r3, #16]
 800dd72:	683b      	ldr	r3, [r7, #0]
 800dd74:	69db      	ldr	r3, [r3, #28]
 800dd76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800dd7a:	68b9      	ldr	r1, [r7, #8]
 800dd7c:	0148      	lsls	r0, r1, #5
 800dd7e:	68f9      	ldr	r1, [r7, #12]
 800dd80:	4401      	add	r1, r0
 800dd82:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800dd86:	4313      	orrs	r3, r2
 800dd88:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800dd8a:	68bb      	ldr	r3, [r7, #8]
 800dd8c:	015a      	lsls	r2, r3, #5
 800dd8e:	68fb      	ldr	r3, [r7, #12]
 800dd90:	4413      	add	r3, r2
 800dd92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dd96:	681b      	ldr	r3, [r3, #0]
 800dd98:	68ba      	ldr	r2, [r7, #8]
 800dd9a:	0151      	lsls	r1, r2, #5
 800dd9c:	68fa      	ldr	r2, [r7, #12]
 800dd9e:	440a      	add	r2, r1
 800dda0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dda4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800dda8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ddaa:	2300      	movs	r3, #0
}
 800ddac:	4618      	mov	r0, r3
 800ddae:	3714      	adds	r7, #20
 800ddb0:	46bd      	mov	sp, r7
 800ddb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddb6:	4770      	bx	lr

0800ddb8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ddb8:	b480      	push	{r7}
 800ddba:	b087      	sub	sp, #28
 800ddbc:	af00      	add	r7, sp, #0
 800ddbe:	6078      	str	r0, [r7, #4]
 800ddc0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800ddc2:	2300      	movs	r3, #0
 800ddc4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800ddc6:	2300      	movs	r3, #0
 800ddc8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ddce:	683b      	ldr	r3, [r7, #0]
 800ddd0:	785b      	ldrb	r3, [r3, #1]
 800ddd2:	2b01      	cmp	r3, #1
 800ddd4:	d14a      	bne.n	800de6c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ddd6:	683b      	ldr	r3, [r7, #0]
 800ddd8:	781b      	ldrb	r3, [r3, #0]
 800ddda:	015a      	lsls	r2, r3, #5
 800dddc:	693b      	ldr	r3, [r7, #16]
 800ddde:	4413      	add	r3, r2
 800dde0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ddea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ddee:	f040 8086 	bne.w	800defe <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800ddf2:	683b      	ldr	r3, [r7, #0]
 800ddf4:	781b      	ldrb	r3, [r3, #0]
 800ddf6:	015a      	lsls	r2, r3, #5
 800ddf8:	693b      	ldr	r3, [r7, #16]
 800ddfa:	4413      	add	r3, r2
 800ddfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	683a      	ldr	r2, [r7, #0]
 800de04:	7812      	ldrb	r2, [r2, #0]
 800de06:	0151      	lsls	r1, r2, #5
 800de08:	693a      	ldr	r2, [r7, #16]
 800de0a:	440a      	add	r2, r1
 800de0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800de10:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800de14:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800de16:	683b      	ldr	r3, [r7, #0]
 800de18:	781b      	ldrb	r3, [r3, #0]
 800de1a:	015a      	lsls	r2, r3, #5
 800de1c:	693b      	ldr	r3, [r7, #16]
 800de1e:	4413      	add	r3, r2
 800de20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	683a      	ldr	r2, [r7, #0]
 800de28:	7812      	ldrb	r2, [r2, #0]
 800de2a:	0151      	lsls	r1, r2, #5
 800de2c:	693a      	ldr	r2, [r7, #16]
 800de2e:	440a      	add	r2, r1
 800de30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800de34:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800de38:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	3301      	adds	r3, #1
 800de3e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	f242 7210 	movw	r2, #10000	; 0x2710
 800de46:	4293      	cmp	r3, r2
 800de48:	d902      	bls.n	800de50 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800de4a:	2301      	movs	r3, #1
 800de4c:	75fb      	strb	r3, [r7, #23]
          break;
 800de4e:	e056      	b.n	800defe <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800de50:	683b      	ldr	r3, [r7, #0]
 800de52:	781b      	ldrb	r3, [r3, #0]
 800de54:	015a      	lsls	r2, r3, #5
 800de56:	693b      	ldr	r3, [r7, #16]
 800de58:	4413      	add	r3, r2
 800de5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800de64:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800de68:	d0e7      	beq.n	800de3a <USB_EPStopXfer+0x82>
 800de6a:	e048      	b.n	800defe <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800de6c:	683b      	ldr	r3, [r7, #0]
 800de6e:	781b      	ldrb	r3, [r3, #0]
 800de70:	015a      	lsls	r2, r3, #5
 800de72:	693b      	ldr	r3, [r7, #16]
 800de74:	4413      	add	r3, r2
 800de76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800de7a:	681b      	ldr	r3, [r3, #0]
 800de7c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800de80:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800de84:	d13b      	bne.n	800defe <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800de86:	683b      	ldr	r3, [r7, #0]
 800de88:	781b      	ldrb	r3, [r3, #0]
 800de8a:	015a      	lsls	r2, r3, #5
 800de8c:	693b      	ldr	r3, [r7, #16]
 800de8e:	4413      	add	r3, r2
 800de90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	683a      	ldr	r2, [r7, #0]
 800de98:	7812      	ldrb	r2, [r2, #0]
 800de9a:	0151      	lsls	r1, r2, #5
 800de9c:	693a      	ldr	r2, [r7, #16]
 800de9e:	440a      	add	r2, r1
 800dea0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dea4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800dea8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800deaa:	683b      	ldr	r3, [r7, #0]
 800deac:	781b      	ldrb	r3, [r3, #0]
 800deae:	015a      	lsls	r2, r3, #5
 800deb0:	693b      	ldr	r3, [r7, #16]
 800deb2:	4413      	add	r3, r2
 800deb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	683a      	ldr	r2, [r7, #0]
 800debc:	7812      	ldrb	r2, [r2, #0]
 800debe:	0151      	lsls	r1, r2, #5
 800dec0:	693a      	ldr	r2, [r7, #16]
 800dec2:	440a      	add	r2, r1
 800dec4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dec8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800decc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	3301      	adds	r3, #1
 800ded2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	f242 7210 	movw	r2, #10000	; 0x2710
 800deda:	4293      	cmp	r3, r2
 800dedc:	d902      	bls.n	800dee4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800dede:	2301      	movs	r3, #1
 800dee0:	75fb      	strb	r3, [r7, #23]
          break;
 800dee2:	e00c      	b.n	800defe <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800dee4:	683b      	ldr	r3, [r7, #0]
 800dee6:	781b      	ldrb	r3, [r3, #0]
 800dee8:	015a      	lsls	r2, r3, #5
 800deea:	693b      	ldr	r3, [r7, #16]
 800deec:	4413      	add	r3, r2
 800deee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800def2:	681b      	ldr	r3, [r3, #0]
 800def4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800def8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800defc:	d0e7      	beq.n	800dece <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800defe:	7dfb      	ldrb	r3, [r7, #23]
}
 800df00:	4618      	mov	r0, r3
 800df02:	371c      	adds	r7, #28
 800df04:	46bd      	mov	sp, r7
 800df06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df0a:	4770      	bx	lr

0800df0c <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 800df0c:	b480      	push	{r7}
 800df0e:	b089      	sub	sp, #36	; 0x24
 800df10:	af00      	add	r7, sp, #0
 800df12:	60f8      	str	r0, [r7, #12]
 800df14:	60b9      	str	r1, [r7, #8]
 800df16:	4611      	mov	r1, r2
 800df18:	461a      	mov	r2, r3
 800df1a:	460b      	mov	r3, r1
 800df1c:	71fb      	strb	r3, [r7, #7]
 800df1e:	4613      	mov	r3, r2
 800df20:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800df22:	68fb      	ldr	r3, [r7, #12]
 800df24:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800df26:	68bb      	ldr	r3, [r7, #8]
 800df28:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 800df2a:	88bb      	ldrh	r3, [r7, #4]
 800df2c:	3303      	adds	r3, #3
 800df2e:	089b      	lsrs	r3, r3, #2
 800df30:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800df32:	2300      	movs	r3, #0
 800df34:	61bb      	str	r3, [r7, #24]
 800df36:	e018      	b.n	800df6a <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800df38:	79fb      	ldrb	r3, [r7, #7]
 800df3a:	031a      	lsls	r2, r3, #12
 800df3c:	697b      	ldr	r3, [r7, #20]
 800df3e:	4413      	add	r3, r2
 800df40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800df44:	461a      	mov	r2, r3
 800df46:	69fb      	ldr	r3, [r7, #28]
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	6013      	str	r3, [r2, #0]
    pSrc++;
 800df4c:	69fb      	ldr	r3, [r7, #28]
 800df4e:	3301      	adds	r3, #1
 800df50:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800df52:	69fb      	ldr	r3, [r7, #28]
 800df54:	3301      	adds	r3, #1
 800df56:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800df58:	69fb      	ldr	r3, [r7, #28]
 800df5a:	3301      	adds	r3, #1
 800df5c:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800df5e:	69fb      	ldr	r3, [r7, #28]
 800df60:	3301      	adds	r3, #1
 800df62:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800df64:	69bb      	ldr	r3, [r7, #24]
 800df66:	3301      	adds	r3, #1
 800df68:	61bb      	str	r3, [r7, #24]
 800df6a:	69ba      	ldr	r2, [r7, #24]
 800df6c:	693b      	ldr	r3, [r7, #16]
 800df6e:	429a      	cmp	r2, r3
 800df70:	d3e2      	bcc.n	800df38 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800df72:	2300      	movs	r3, #0
}
 800df74:	4618      	mov	r0, r3
 800df76:	3724      	adds	r7, #36	; 0x24
 800df78:	46bd      	mov	sp, r7
 800df7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df7e:	4770      	bx	lr

0800df80 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800df80:	b480      	push	{r7}
 800df82:	b08b      	sub	sp, #44	; 0x2c
 800df84:	af00      	add	r7, sp, #0
 800df86:	60f8      	str	r0, [r7, #12]
 800df88:	60b9      	str	r1, [r7, #8]
 800df8a:	4613      	mov	r3, r2
 800df8c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800df8e:	68fb      	ldr	r3, [r7, #12]
 800df90:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800df92:	68bb      	ldr	r3, [r7, #8]
 800df94:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800df96:	88fb      	ldrh	r3, [r7, #6]
 800df98:	089b      	lsrs	r3, r3, #2
 800df9a:	b29b      	uxth	r3, r3
 800df9c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800df9e:	88fb      	ldrh	r3, [r7, #6]
 800dfa0:	f003 0303 	and.w	r3, r3, #3
 800dfa4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800dfa6:	2300      	movs	r3, #0
 800dfa8:	623b      	str	r3, [r7, #32]
 800dfaa:	e014      	b.n	800dfd6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800dfac:	69bb      	ldr	r3, [r7, #24]
 800dfae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dfb2:	681a      	ldr	r2, [r3, #0]
 800dfb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfb6:	601a      	str	r2, [r3, #0]
    pDest++;
 800dfb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfba:	3301      	adds	r3, #1
 800dfbc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800dfbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfc0:	3301      	adds	r3, #1
 800dfc2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800dfc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfc6:	3301      	adds	r3, #1
 800dfc8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800dfca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfcc:	3301      	adds	r3, #1
 800dfce:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800dfd0:	6a3b      	ldr	r3, [r7, #32]
 800dfd2:	3301      	adds	r3, #1
 800dfd4:	623b      	str	r3, [r7, #32]
 800dfd6:	6a3a      	ldr	r2, [r7, #32]
 800dfd8:	697b      	ldr	r3, [r7, #20]
 800dfda:	429a      	cmp	r2, r3
 800dfdc:	d3e6      	bcc.n	800dfac <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800dfde:	8bfb      	ldrh	r3, [r7, #30]
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d01e      	beq.n	800e022 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800dfe4:	2300      	movs	r3, #0
 800dfe6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800dfe8:	69bb      	ldr	r3, [r7, #24]
 800dfea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dfee:	461a      	mov	r2, r3
 800dff0:	f107 0310 	add.w	r3, r7, #16
 800dff4:	6812      	ldr	r2, [r2, #0]
 800dff6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800dff8:	693a      	ldr	r2, [r7, #16]
 800dffa:	6a3b      	ldr	r3, [r7, #32]
 800dffc:	b2db      	uxtb	r3, r3
 800dffe:	00db      	lsls	r3, r3, #3
 800e000:	fa22 f303 	lsr.w	r3, r2, r3
 800e004:	b2da      	uxtb	r2, r3
 800e006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e008:	701a      	strb	r2, [r3, #0]
      i++;
 800e00a:	6a3b      	ldr	r3, [r7, #32]
 800e00c:	3301      	adds	r3, #1
 800e00e:	623b      	str	r3, [r7, #32]
      pDest++;
 800e010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e012:	3301      	adds	r3, #1
 800e014:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800e016:	8bfb      	ldrh	r3, [r7, #30]
 800e018:	3b01      	subs	r3, #1
 800e01a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800e01c:	8bfb      	ldrh	r3, [r7, #30]
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d1ea      	bne.n	800dff8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800e022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e024:	4618      	mov	r0, r3
 800e026:	372c      	adds	r7, #44	; 0x2c
 800e028:	46bd      	mov	sp, r7
 800e02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e02e:	4770      	bx	lr

0800e030 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e030:	b480      	push	{r7}
 800e032:	b085      	sub	sp, #20
 800e034:	af00      	add	r7, sp, #0
 800e036:	6078      	str	r0, [r7, #4]
 800e038:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e03e:	683b      	ldr	r3, [r7, #0]
 800e040:	781b      	ldrb	r3, [r3, #0]
 800e042:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e044:	683b      	ldr	r3, [r7, #0]
 800e046:	785b      	ldrb	r3, [r3, #1]
 800e048:	2b01      	cmp	r3, #1
 800e04a:	d12c      	bne.n	800e0a6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800e04c:	68bb      	ldr	r3, [r7, #8]
 800e04e:	015a      	lsls	r2, r3, #5
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	4413      	add	r3, r2
 800e054:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	db12      	blt.n	800e084 <USB_EPSetStall+0x54>
 800e05e:	68bb      	ldr	r3, [r7, #8]
 800e060:	2b00      	cmp	r3, #0
 800e062:	d00f      	beq.n	800e084 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800e064:	68bb      	ldr	r3, [r7, #8]
 800e066:	015a      	lsls	r2, r3, #5
 800e068:	68fb      	ldr	r3, [r7, #12]
 800e06a:	4413      	add	r3, r2
 800e06c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	68ba      	ldr	r2, [r7, #8]
 800e074:	0151      	lsls	r1, r2, #5
 800e076:	68fa      	ldr	r2, [r7, #12]
 800e078:	440a      	add	r2, r1
 800e07a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e07e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800e082:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800e084:	68bb      	ldr	r3, [r7, #8]
 800e086:	015a      	lsls	r2, r3, #5
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	4413      	add	r3, r2
 800e08c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	68ba      	ldr	r2, [r7, #8]
 800e094:	0151      	lsls	r1, r2, #5
 800e096:	68fa      	ldr	r2, [r7, #12]
 800e098:	440a      	add	r2, r1
 800e09a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e09e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e0a2:	6013      	str	r3, [r2, #0]
 800e0a4:	e02b      	b.n	800e0fe <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800e0a6:	68bb      	ldr	r3, [r7, #8]
 800e0a8:	015a      	lsls	r2, r3, #5
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	4413      	add	r3, r2
 800e0ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e0b2:	681b      	ldr	r3, [r3, #0]
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	db12      	blt.n	800e0de <USB_EPSetStall+0xae>
 800e0b8:	68bb      	ldr	r3, [r7, #8]
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d00f      	beq.n	800e0de <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800e0be:	68bb      	ldr	r3, [r7, #8]
 800e0c0:	015a      	lsls	r2, r3, #5
 800e0c2:	68fb      	ldr	r3, [r7, #12]
 800e0c4:	4413      	add	r3, r2
 800e0c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	68ba      	ldr	r2, [r7, #8]
 800e0ce:	0151      	lsls	r1, r2, #5
 800e0d0:	68fa      	ldr	r2, [r7, #12]
 800e0d2:	440a      	add	r2, r1
 800e0d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e0d8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800e0dc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800e0de:	68bb      	ldr	r3, [r7, #8]
 800e0e0:	015a      	lsls	r2, r3, #5
 800e0e2:	68fb      	ldr	r3, [r7, #12]
 800e0e4:	4413      	add	r3, r2
 800e0e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	68ba      	ldr	r2, [r7, #8]
 800e0ee:	0151      	lsls	r1, r2, #5
 800e0f0:	68fa      	ldr	r2, [r7, #12]
 800e0f2:	440a      	add	r2, r1
 800e0f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e0f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e0fc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e0fe:	2300      	movs	r3, #0
}
 800e100:	4618      	mov	r0, r3
 800e102:	3714      	adds	r7, #20
 800e104:	46bd      	mov	sp, r7
 800e106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e10a:	4770      	bx	lr

0800e10c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e10c:	b480      	push	{r7}
 800e10e:	b085      	sub	sp, #20
 800e110:	af00      	add	r7, sp, #0
 800e112:	6078      	str	r0, [r7, #4]
 800e114:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e11a:	683b      	ldr	r3, [r7, #0]
 800e11c:	781b      	ldrb	r3, [r3, #0]
 800e11e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e120:	683b      	ldr	r3, [r7, #0]
 800e122:	785b      	ldrb	r3, [r3, #1]
 800e124:	2b01      	cmp	r3, #1
 800e126:	d128      	bne.n	800e17a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800e128:	68bb      	ldr	r3, [r7, #8]
 800e12a:	015a      	lsls	r2, r3, #5
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	4413      	add	r3, r2
 800e130:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	68ba      	ldr	r2, [r7, #8]
 800e138:	0151      	lsls	r1, r2, #5
 800e13a:	68fa      	ldr	r2, [r7, #12]
 800e13c:	440a      	add	r2, r1
 800e13e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e142:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e146:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800e148:	683b      	ldr	r3, [r7, #0]
 800e14a:	791b      	ldrb	r3, [r3, #4]
 800e14c:	2b03      	cmp	r3, #3
 800e14e:	d003      	beq.n	800e158 <USB_EPClearStall+0x4c>
 800e150:	683b      	ldr	r3, [r7, #0]
 800e152:	791b      	ldrb	r3, [r3, #4]
 800e154:	2b02      	cmp	r3, #2
 800e156:	d138      	bne.n	800e1ca <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800e158:	68bb      	ldr	r3, [r7, #8]
 800e15a:	015a      	lsls	r2, r3, #5
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	4413      	add	r3, r2
 800e160:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	68ba      	ldr	r2, [r7, #8]
 800e168:	0151      	lsls	r1, r2, #5
 800e16a:	68fa      	ldr	r2, [r7, #12]
 800e16c:	440a      	add	r2, r1
 800e16e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e172:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e176:	6013      	str	r3, [r2, #0]
 800e178:	e027      	b.n	800e1ca <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800e17a:	68bb      	ldr	r3, [r7, #8]
 800e17c:	015a      	lsls	r2, r3, #5
 800e17e:	68fb      	ldr	r3, [r7, #12]
 800e180:	4413      	add	r3, r2
 800e182:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	68ba      	ldr	r2, [r7, #8]
 800e18a:	0151      	lsls	r1, r2, #5
 800e18c:	68fa      	ldr	r2, [r7, #12]
 800e18e:	440a      	add	r2, r1
 800e190:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e194:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e198:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800e19a:	683b      	ldr	r3, [r7, #0]
 800e19c:	791b      	ldrb	r3, [r3, #4]
 800e19e:	2b03      	cmp	r3, #3
 800e1a0:	d003      	beq.n	800e1aa <USB_EPClearStall+0x9e>
 800e1a2:	683b      	ldr	r3, [r7, #0]
 800e1a4:	791b      	ldrb	r3, [r3, #4]
 800e1a6:	2b02      	cmp	r3, #2
 800e1a8:	d10f      	bne.n	800e1ca <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800e1aa:	68bb      	ldr	r3, [r7, #8]
 800e1ac:	015a      	lsls	r2, r3, #5
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	4413      	add	r3, r2
 800e1b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	68ba      	ldr	r2, [r7, #8]
 800e1ba:	0151      	lsls	r1, r2, #5
 800e1bc:	68fa      	ldr	r2, [r7, #12]
 800e1be:	440a      	add	r2, r1
 800e1c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e1c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e1c8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800e1ca:	2300      	movs	r3, #0
}
 800e1cc:	4618      	mov	r0, r3
 800e1ce:	3714      	adds	r7, #20
 800e1d0:	46bd      	mov	sp, r7
 800e1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1d6:	4770      	bx	lr

0800e1d8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800e1d8:	b480      	push	{r7}
 800e1da:	b085      	sub	sp, #20
 800e1dc:	af00      	add	r7, sp, #0
 800e1de:	6078      	str	r0, [r7, #4]
 800e1e0:	460b      	mov	r3, r1
 800e1e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800e1e8:	68fb      	ldr	r3, [r7, #12]
 800e1ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	68fa      	ldr	r2, [r7, #12]
 800e1f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e1f6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800e1fa:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800e1fc:	68fb      	ldr	r3, [r7, #12]
 800e1fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e202:	681a      	ldr	r2, [r3, #0]
 800e204:	78fb      	ldrb	r3, [r7, #3]
 800e206:	011b      	lsls	r3, r3, #4
 800e208:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800e20c:	68f9      	ldr	r1, [r7, #12]
 800e20e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e212:	4313      	orrs	r3, r2
 800e214:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800e216:	2300      	movs	r3, #0
}
 800e218:	4618      	mov	r0, r3
 800e21a:	3714      	adds	r7, #20
 800e21c:	46bd      	mov	sp, r7
 800e21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e222:	4770      	bx	lr

0800e224 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800e224:	b480      	push	{r7}
 800e226:	b085      	sub	sp, #20
 800e228:	af00      	add	r7, sp, #0
 800e22a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	68fa      	ldr	r2, [r7, #12]
 800e23a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e23e:	f023 0303 	bic.w	r3, r3, #3
 800e242:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800e244:	68fb      	ldr	r3, [r7, #12]
 800e246:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e24a:	685b      	ldr	r3, [r3, #4]
 800e24c:	68fa      	ldr	r2, [r7, #12]
 800e24e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e252:	f023 0302 	bic.w	r3, r3, #2
 800e256:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e258:	2300      	movs	r3, #0
}
 800e25a:	4618      	mov	r0, r3
 800e25c:	3714      	adds	r7, #20
 800e25e:	46bd      	mov	sp, r7
 800e260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e264:	4770      	bx	lr

0800e266 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800e266:	b480      	push	{r7}
 800e268:	b085      	sub	sp, #20
 800e26a:	af00      	add	r7, sp, #0
 800e26c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e278:	681b      	ldr	r3, [r3, #0]
 800e27a:	68fa      	ldr	r2, [r7, #12]
 800e27c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e280:	f023 0303 	bic.w	r3, r3, #3
 800e284:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e28c:	685b      	ldr	r3, [r3, #4]
 800e28e:	68fa      	ldr	r2, [r7, #12]
 800e290:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e294:	f043 0302 	orr.w	r3, r3, #2
 800e298:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e29a:	2300      	movs	r3, #0
}
 800e29c:	4618      	mov	r0, r3
 800e29e:	3714      	adds	r7, #20
 800e2a0:	46bd      	mov	sp, r7
 800e2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2a6:	4770      	bx	lr

0800e2a8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800e2a8:	b480      	push	{r7}
 800e2aa:	b085      	sub	sp, #20
 800e2ac:	af00      	add	r7, sp, #0
 800e2ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	695b      	ldr	r3, [r3, #20]
 800e2b4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	699b      	ldr	r3, [r3, #24]
 800e2ba:	68fa      	ldr	r2, [r7, #12]
 800e2bc:	4013      	ands	r3, r2
 800e2be:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800e2c0:	68fb      	ldr	r3, [r7, #12]
}
 800e2c2:	4618      	mov	r0, r3
 800e2c4:	3714      	adds	r7, #20
 800e2c6:	46bd      	mov	sp, r7
 800e2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2cc:	4770      	bx	lr

0800e2ce <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800e2ce:	b480      	push	{r7}
 800e2d0:	b085      	sub	sp, #20
 800e2d2:	af00      	add	r7, sp, #0
 800e2d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e2e0:	699b      	ldr	r3, [r3, #24]
 800e2e2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e2ea:	69db      	ldr	r3, [r3, #28]
 800e2ec:	68ba      	ldr	r2, [r7, #8]
 800e2ee:	4013      	ands	r3, r2
 800e2f0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800e2f2:	68bb      	ldr	r3, [r7, #8]
 800e2f4:	0c1b      	lsrs	r3, r3, #16
}
 800e2f6:	4618      	mov	r0, r3
 800e2f8:	3714      	adds	r7, #20
 800e2fa:	46bd      	mov	sp, r7
 800e2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e300:	4770      	bx	lr

0800e302 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800e302:	b480      	push	{r7}
 800e304:	b085      	sub	sp, #20
 800e306:	af00      	add	r7, sp, #0
 800e308:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800e30e:	68fb      	ldr	r3, [r7, #12]
 800e310:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e314:	699b      	ldr	r3, [r3, #24]
 800e316:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e31e:	69db      	ldr	r3, [r3, #28]
 800e320:	68ba      	ldr	r2, [r7, #8]
 800e322:	4013      	ands	r3, r2
 800e324:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800e326:	68bb      	ldr	r3, [r7, #8]
 800e328:	b29b      	uxth	r3, r3
}
 800e32a:	4618      	mov	r0, r3
 800e32c:	3714      	adds	r7, #20
 800e32e:	46bd      	mov	sp, r7
 800e330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e334:	4770      	bx	lr

0800e336 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800e336:	b480      	push	{r7}
 800e338:	b085      	sub	sp, #20
 800e33a:	af00      	add	r7, sp, #0
 800e33c:	6078      	str	r0, [r7, #4]
 800e33e:	460b      	mov	r3, r1
 800e340:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800e346:	78fb      	ldrb	r3, [r7, #3]
 800e348:	015a      	lsls	r2, r3, #5
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	4413      	add	r3, r2
 800e34e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e352:	689b      	ldr	r3, [r3, #8]
 800e354:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800e356:	68fb      	ldr	r3, [r7, #12]
 800e358:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e35c:	695b      	ldr	r3, [r3, #20]
 800e35e:	68ba      	ldr	r2, [r7, #8]
 800e360:	4013      	ands	r3, r2
 800e362:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800e364:	68bb      	ldr	r3, [r7, #8]
}
 800e366:	4618      	mov	r0, r3
 800e368:	3714      	adds	r7, #20
 800e36a:	46bd      	mov	sp, r7
 800e36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e370:	4770      	bx	lr

0800e372 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800e372:	b480      	push	{r7}
 800e374:	b087      	sub	sp, #28
 800e376:	af00      	add	r7, sp, #0
 800e378:	6078      	str	r0, [r7, #4]
 800e37a:	460b      	mov	r3, r1
 800e37c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800e382:	697b      	ldr	r3, [r7, #20]
 800e384:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e388:	691b      	ldr	r3, [r3, #16]
 800e38a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800e38c:	697b      	ldr	r3, [r7, #20]
 800e38e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e392:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e394:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800e396:	78fb      	ldrb	r3, [r7, #3]
 800e398:	f003 030f 	and.w	r3, r3, #15
 800e39c:	68fa      	ldr	r2, [r7, #12]
 800e39e:	fa22 f303 	lsr.w	r3, r2, r3
 800e3a2:	01db      	lsls	r3, r3, #7
 800e3a4:	b2db      	uxtb	r3, r3
 800e3a6:	693a      	ldr	r2, [r7, #16]
 800e3a8:	4313      	orrs	r3, r2
 800e3aa:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800e3ac:	78fb      	ldrb	r3, [r7, #3]
 800e3ae:	015a      	lsls	r2, r3, #5
 800e3b0:	697b      	ldr	r3, [r7, #20]
 800e3b2:	4413      	add	r3, r2
 800e3b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e3b8:	689b      	ldr	r3, [r3, #8]
 800e3ba:	693a      	ldr	r2, [r7, #16]
 800e3bc:	4013      	ands	r3, r2
 800e3be:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800e3c0:	68bb      	ldr	r3, [r7, #8]
}
 800e3c2:	4618      	mov	r0, r3
 800e3c4:	371c      	adds	r7, #28
 800e3c6:	46bd      	mov	sp, r7
 800e3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3cc:	4770      	bx	lr

0800e3ce <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800e3ce:	b480      	push	{r7}
 800e3d0:	b083      	sub	sp, #12
 800e3d2:	af00      	add	r7, sp, #0
 800e3d4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	695b      	ldr	r3, [r3, #20]
 800e3da:	f003 0301 	and.w	r3, r3, #1
}
 800e3de:	4618      	mov	r0, r3
 800e3e0:	370c      	adds	r7, #12
 800e3e2:	46bd      	mov	sp, r7
 800e3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3e8:	4770      	bx	lr

0800e3ea <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800e3ea:	b480      	push	{r7}
 800e3ec:	b085      	sub	sp, #20
 800e3ee:	af00      	add	r7, sp, #0
 800e3f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e3fc:	681b      	ldr	r3, [r3, #0]
 800e3fe:	68fa      	ldr	r2, [r7, #12]
 800e400:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e404:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800e408:	f023 0307 	bic.w	r3, r3, #7
 800e40c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800e40e:	68fb      	ldr	r3, [r7, #12]
 800e410:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e414:	685b      	ldr	r3, [r3, #4]
 800e416:	68fa      	ldr	r2, [r7, #12]
 800e418:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e41c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e420:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e422:	2300      	movs	r3, #0
}
 800e424:	4618      	mov	r0, r3
 800e426:	3714      	adds	r7, #20
 800e428:	46bd      	mov	sp, r7
 800e42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e42e:	4770      	bx	lr

0800e430 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 800e430:	b480      	push	{r7}
 800e432:	b085      	sub	sp, #20
 800e434:	af00      	add	r7, sp, #0
 800e436:	6078      	str	r0, [r7, #4]
 800e438:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	333c      	adds	r3, #60	; 0x3c
 800e442:	3304      	adds	r3, #4
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800e448:	68bb      	ldr	r3, [r7, #8]
 800e44a:	4a1c      	ldr	r2, [pc, #112]	; (800e4bc <USB_EP0_OutStart+0x8c>)
 800e44c:	4293      	cmp	r3, r2
 800e44e:	d90a      	bls.n	800e466 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e45c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e460:	d101      	bne.n	800e466 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800e462:	2300      	movs	r3, #0
 800e464:	e024      	b.n	800e4b0 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800e466:	68fb      	ldr	r3, [r7, #12]
 800e468:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e46c:	461a      	mov	r2, r3
 800e46e:	2300      	movs	r3, #0
 800e470:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e478:	691b      	ldr	r3, [r3, #16]
 800e47a:	68fa      	ldr	r2, [r7, #12]
 800e47c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e480:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e484:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800e486:	68fb      	ldr	r3, [r7, #12]
 800e488:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e48c:	691b      	ldr	r3, [r3, #16]
 800e48e:	68fa      	ldr	r2, [r7, #12]
 800e490:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e494:	f043 0318 	orr.w	r3, r3, #24
 800e498:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e4a0:	691b      	ldr	r3, [r3, #16]
 800e4a2:	68fa      	ldr	r2, [r7, #12]
 800e4a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e4a8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800e4ac:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800e4ae:	2300      	movs	r3, #0
}
 800e4b0:	4618      	mov	r0, r3
 800e4b2:	3714      	adds	r7, #20
 800e4b4:	46bd      	mov	sp, r7
 800e4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ba:	4770      	bx	lr
 800e4bc:	4f54300a 	.word	0x4f54300a

0800e4c0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800e4c0:	b480      	push	{r7}
 800e4c2:	b085      	sub	sp, #20
 800e4c4:	af00      	add	r7, sp, #0
 800e4c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e4c8:	2300      	movs	r3, #0
 800e4ca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e4cc:	68fb      	ldr	r3, [r7, #12]
 800e4ce:	3301      	adds	r3, #1
 800e4d0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	4a13      	ldr	r2, [pc, #76]	; (800e524 <USB_CoreReset+0x64>)
 800e4d6:	4293      	cmp	r3, r2
 800e4d8:	d901      	bls.n	800e4de <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800e4da:	2303      	movs	r3, #3
 800e4dc:	e01b      	b.n	800e516 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	691b      	ldr	r3, [r3, #16]
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	daf2      	bge.n	800e4cc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800e4e6:	2300      	movs	r3, #0
 800e4e8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	691b      	ldr	r3, [r3, #16]
 800e4ee:	f043 0201 	orr.w	r2, r3, #1
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	3301      	adds	r3, #1
 800e4fa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	4a09      	ldr	r2, [pc, #36]	; (800e524 <USB_CoreReset+0x64>)
 800e500:	4293      	cmp	r3, r2
 800e502:	d901      	bls.n	800e508 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800e504:	2303      	movs	r3, #3
 800e506:	e006      	b.n	800e516 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	691b      	ldr	r3, [r3, #16]
 800e50c:	f003 0301 	and.w	r3, r3, #1
 800e510:	2b01      	cmp	r3, #1
 800e512:	d0f0      	beq.n	800e4f6 <USB_CoreReset+0x36>

  return HAL_OK;
 800e514:	2300      	movs	r3, #0
}
 800e516:	4618      	mov	r0, r3
 800e518:	3714      	adds	r7, #20
 800e51a:	46bd      	mov	sp, r7
 800e51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e520:	4770      	bx	lr
 800e522:	bf00      	nop
 800e524:	00030d40 	.word	0x00030d40

0800e528 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e528:	b580      	push	{r7, lr}
 800e52a:	b084      	sub	sp, #16
 800e52c:	af00      	add	r7, sp, #0
 800e52e:	6078      	str	r0, [r7, #4]
 800e530:	460b      	mov	r3, r1
 800e532:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800e534:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800e538:	f005 f8c0 	bl	80136bc <USBD_static_malloc>
 800e53c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	2b00      	cmp	r3, #0
 800e542:	d105      	bne.n	800e550 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	2200      	movs	r2, #0
 800e548:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800e54c:	2302      	movs	r3, #2
 800e54e:	e066      	b.n	800e61e <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	68fa      	ldr	r2, [r7, #12]
 800e554:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	7c1b      	ldrb	r3, [r3, #16]
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d119      	bne.n	800e594 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800e560:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e564:	2202      	movs	r2, #2
 800e566:	2181      	movs	r1, #129	; 0x81
 800e568:	6878      	ldr	r0, [r7, #4]
 800e56a:	f004 fe93 	bl	8013294 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	2201      	movs	r2, #1
 800e572:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800e574:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e578:	2202      	movs	r2, #2
 800e57a:	2101      	movs	r1, #1
 800e57c:	6878      	ldr	r0, [r7, #4]
 800e57e:	f004 fe89 	bl	8013294 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	2201      	movs	r2, #1
 800e586:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	2210      	movs	r2, #16
 800e58e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800e592:	e016      	b.n	800e5c2 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800e594:	2340      	movs	r3, #64	; 0x40
 800e596:	2202      	movs	r2, #2
 800e598:	2181      	movs	r1, #129	; 0x81
 800e59a:	6878      	ldr	r0, [r7, #4]
 800e59c:	f004 fe7a 	bl	8013294 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	2201      	movs	r2, #1
 800e5a4:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800e5a6:	2340      	movs	r3, #64	; 0x40
 800e5a8:	2202      	movs	r2, #2
 800e5aa:	2101      	movs	r1, #1
 800e5ac:	6878      	ldr	r0, [r7, #4]
 800e5ae:	f004 fe71 	bl	8013294 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	2201      	movs	r2, #1
 800e5b6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	2210      	movs	r2, #16
 800e5be:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800e5c2:	2308      	movs	r3, #8
 800e5c4:	2203      	movs	r2, #3
 800e5c6:	2182      	movs	r1, #130	; 0x82
 800e5c8:	6878      	ldr	r0, [r7, #4]
 800e5ca:	f004 fe63 	bl	8013294 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	2201      	movs	r2, #1
 800e5d2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e5dc:	681b      	ldr	r3, [r3, #0]
 800e5de:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800e5e0:	68fb      	ldr	r3, [r7, #12]
 800e5e2:	2200      	movs	r2, #0
 800e5e4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800e5e8:	68fb      	ldr	r3, [r7, #12]
 800e5ea:	2200      	movs	r2, #0
 800e5ec:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	7c1b      	ldrb	r3, [r3, #16]
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d109      	bne.n	800e60c <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e5fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e602:	2101      	movs	r1, #1
 800e604:	6878      	ldr	r0, [r7, #4]
 800e606:	f004 ffbf 	bl	8013588 <USBD_LL_PrepareReceive>
 800e60a:	e007      	b.n	800e61c <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e60c:	68fb      	ldr	r3, [r7, #12]
 800e60e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e612:	2340      	movs	r3, #64	; 0x40
 800e614:	2101      	movs	r1, #1
 800e616:	6878      	ldr	r0, [r7, #4]
 800e618:	f004 ffb6 	bl	8013588 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e61c:	2300      	movs	r3, #0
}
 800e61e:	4618      	mov	r0, r3
 800e620:	3710      	adds	r7, #16
 800e622:	46bd      	mov	sp, r7
 800e624:	bd80      	pop	{r7, pc}

0800e626 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e626:	b580      	push	{r7, lr}
 800e628:	b082      	sub	sp, #8
 800e62a:	af00      	add	r7, sp, #0
 800e62c:	6078      	str	r0, [r7, #4]
 800e62e:	460b      	mov	r3, r1
 800e630:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800e632:	2181      	movs	r1, #129	; 0x81
 800e634:	6878      	ldr	r0, [r7, #4]
 800e636:	f004 fe6b 	bl	8013310 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	2200      	movs	r2, #0
 800e63e:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800e640:	2101      	movs	r1, #1
 800e642:	6878      	ldr	r0, [r7, #4]
 800e644:	f004 fe64 	bl	8013310 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	2200      	movs	r2, #0
 800e64c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800e650:	2182      	movs	r1, #130	; 0x82
 800e652:	6878      	ldr	r0, [r7, #4]
 800e654:	f004 fe5c 	bl	8013310 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	2200      	movs	r2, #0
 800e65c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	2200      	movs	r2, #0
 800e664:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d00e      	beq.n	800e690 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e678:	685b      	ldr	r3, [r3, #4]
 800e67a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e682:	4618      	mov	r0, r3
 800e684:	f005 f828 	bl	80136d8 <USBD_static_free>
    pdev->pClassData = NULL;
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	2200      	movs	r2, #0
 800e68c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800e690:	2300      	movs	r3, #0
}
 800e692:	4618      	mov	r0, r3
 800e694:	3708      	adds	r7, #8
 800e696:	46bd      	mov	sp, r7
 800e698:	bd80      	pop	{r7, pc}
	...

0800e69c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800e69c:	b580      	push	{r7, lr}
 800e69e:	b086      	sub	sp, #24
 800e6a0:	af00      	add	r7, sp, #0
 800e6a2:	6078      	str	r0, [r7, #4]
 800e6a4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e6ac:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800e6ae:	2300      	movs	r3, #0
 800e6b0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800e6b2:	2300      	movs	r3, #0
 800e6b4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800e6b6:	2300      	movs	r3, #0
 800e6b8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800e6ba:	693b      	ldr	r3, [r7, #16]
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d101      	bne.n	800e6c4 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800e6c0:	2303      	movs	r3, #3
 800e6c2:	e0af      	b.n	800e824 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e6c4:	683b      	ldr	r3, [r7, #0]
 800e6c6:	781b      	ldrb	r3, [r3, #0]
 800e6c8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d03f      	beq.n	800e750 <USBD_CDC_Setup+0xb4>
 800e6d0:	2b20      	cmp	r3, #32
 800e6d2:	f040 809f 	bne.w	800e814 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800e6d6:	683b      	ldr	r3, [r7, #0]
 800e6d8:	88db      	ldrh	r3, [r3, #6]
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d02e      	beq.n	800e73c <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800e6de:	683b      	ldr	r3, [r7, #0]
 800e6e0:	781b      	ldrb	r3, [r3, #0]
 800e6e2:	b25b      	sxtb	r3, r3
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	da16      	bge.n	800e716 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e6ee:	689b      	ldr	r3, [r3, #8]
 800e6f0:	683a      	ldr	r2, [r7, #0]
 800e6f2:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800e6f4:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e6f6:	683a      	ldr	r2, [r7, #0]
 800e6f8:	88d2      	ldrh	r2, [r2, #6]
 800e6fa:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800e6fc:	683b      	ldr	r3, [r7, #0]
 800e6fe:	88db      	ldrh	r3, [r3, #6]
 800e700:	2b07      	cmp	r3, #7
 800e702:	bf28      	it	cs
 800e704:	2307      	movcs	r3, #7
 800e706:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800e708:	693b      	ldr	r3, [r7, #16]
 800e70a:	89fa      	ldrh	r2, [r7, #14]
 800e70c:	4619      	mov	r1, r3
 800e70e:	6878      	ldr	r0, [r7, #4]
 800e710:	f001 fb43 	bl	800fd9a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800e714:	e085      	b.n	800e822 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800e716:	683b      	ldr	r3, [r7, #0]
 800e718:	785a      	ldrb	r2, [r3, #1]
 800e71a:	693b      	ldr	r3, [r7, #16]
 800e71c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800e720:	683b      	ldr	r3, [r7, #0]
 800e722:	88db      	ldrh	r3, [r3, #6]
 800e724:	b2da      	uxtb	r2, r3
 800e726:	693b      	ldr	r3, [r7, #16]
 800e728:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800e72c:	6939      	ldr	r1, [r7, #16]
 800e72e:	683b      	ldr	r3, [r7, #0]
 800e730:	88db      	ldrh	r3, [r3, #6]
 800e732:	461a      	mov	r2, r3
 800e734:	6878      	ldr	r0, [r7, #4]
 800e736:	f001 fb5c 	bl	800fdf2 <USBD_CtlPrepareRx>
      break;
 800e73a:	e072      	b.n	800e822 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e742:	689b      	ldr	r3, [r3, #8]
 800e744:	683a      	ldr	r2, [r7, #0]
 800e746:	7850      	ldrb	r0, [r2, #1]
 800e748:	2200      	movs	r2, #0
 800e74a:	6839      	ldr	r1, [r7, #0]
 800e74c:	4798      	blx	r3
      break;
 800e74e:	e068      	b.n	800e822 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e750:	683b      	ldr	r3, [r7, #0]
 800e752:	785b      	ldrb	r3, [r3, #1]
 800e754:	2b0b      	cmp	r3, #11
 800e756:	d852      	bhi.n	800e7fe <USBD_CDC_Setup+0x162>
 800e758:	a201      	add	r2, pc, #4	; (adr r2, 800e760 <USBD_CDC_Setup+0xc4>)
 800e75a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e75e:	bf00      	nop
 800e760:	0800e791 	.word	0x0800e791
 800e764:	0800e80d 	.word	0x0800e80d
 800e768:	0800e7ff 	.word	0x0800e7ff
 800e76c:	0800e7ff 	.word	0x0800e7ff
 800e770:	0800e7ff 	.word	0x0800e7ff
 800e774:	0800e7ff 	.word	0x0800e7ff
 800e778:	0800e7ff 	.word	0x0800e7ff
 800e77c:	0800e7ff 	.word	0x0800e7ff
 800e780:	0800e7ff 	.word	0x0800e7ff
 800e784:	0800e7ff 	.word	0x0800e7ff
 800e788:	0800e7bb 	.word	0x0800e7bb
 800e78c:	0800e7e5 	.word	0x0800e7e5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e796:	b2db      	uxtb	r3, r3
 800e798:	2b03      	cmp	r3, #3
 800e79a:	d107      	bne.n	800e7ac <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800e79c:	f107 030a 	add.w	r3, r7, #10
 800e7a0:	2202      	movs	r2, #2
 800e7a2:	4619      	mov	r1, r3
 800e7a4:	6878      	ldr	r0, [r7, #4]
 800e7a6:	f001 faf8 	bl	800fd9a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e7aa:	e032      	b.n	800e812 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800e7ac:	6839      	ldr	r1, [r7, #0]
 800e7ae:	6878      	ldr	r0, [r7, #4]
 800e7b0:	f001 fa82 	bl	800fcb8 <USBD_CtlError>
            ret = USBD_FAIL;
 800e7b4:	2303      	movs	r3, #3
 800e7b6:	75fb      	strb	r3, [r7, #23]
          break;
 800e7b8:	e02b      	b.n	800e812 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e7c0:	b2db      	uxtb	r3, r3
 800e7c2:	2b03      	cmp	r3, #3
 800e7c4:	d107      	bne.n	800e7d6 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800e7c6:	f107 030d 	add.w	r3, r7, #13
 800e7ca:	2201      	movs	r2, #1
 800e7cc:	4619      	mov	r1, r3
 800e7ce:	6878      	ldr	r0, [r7, #4]
 800e7d0:	f001 fae3 	bl	800fd9a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e7d4:	e01d      	b.n	800e812 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800e7d6:	6839      	ldr	r1, [r7, #0]
 800e7d8:	6878      	ldr	r0, [r7, #4]
 800e7da:	f001 fa6d 	bl	800fcb8 <USBD_CtlError>
            ret = USBD_FAIL;
 800e7de:	2303      	movs	r3, #3
 800e7e0:	75fb      	strb	r3, [r7, #23]
          break;
 800e7e2:	e016      	b.n	800e812 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e7ea:	b2db      	uxtb	r3, r3
 800e7ec:	2b03      	cmp	r3, #3
 800e7ee:	d00f      	beq.n	800e810 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800e7f0:	6839      	ldr	r1, [r7, #0]
 800e7f2:	6878      	ldr	r0, [r7, #4]
 800e7f4:	f001 fa60 	bl	800fcb8 <USBD_CtlError>
            ret = USBD_FAIL;
 800e7f8:	2303      	movs	r3, #3
 800e7fa:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800e7fc:	e008      	b.n	800e810 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800e7fe:	6839      	ldr	r1, [r7, #0]
 800e800:	6878      	ldr	r0, [r7, #4]
 800e802:	f001 fa59 	bl	800fcb8 <USBD_CtlError>
          ret = USBD_FAIL;
 800e806:	2303      	movs	r3, #3
 800e808:	75fb      	strb	r3, [r7, #23]
          break;
 800e80a:	e002      	b.n	800e812 <USBD_CDC_Setup+0x176>
          break;
 800e80c:	bf00      	nop
 800e80e:	e008      	b.n	800e822 <USBD_CDC_Setup+0x186>
          break;
 800e810:	bf00      	nop
      }
      break;
 800e812:	e006      	b.n	800e822 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800e814:	6839      	ldr	r1, [r7, #0]
 800e816:	6878      	ldr	r0, [r7, #4]
 800e818:	f001 fa4e 	bl	800fcb8 <USBD_CtlError>
      ret = USBD_FAIL;
 800e81c:	2303      	movs	r3, #3
 800e81e:	75fb      	strb	r3, [r7, #23]
      break;
 800e820:	bf00      	nop
  }

  return (uint8_t)ret;
 800e822:	7dfb      	ldrb	r3, [r7, #23]
}
 800e824:	4618      	mov	r0, r3
 800e826:	3718      	adds	r7, #24
 800e828:	46bd      	mov	sp, r7
 800e82a:	bd80      	pop	{r7, pc}

0800e82c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e82c:	b580      	push	{r7, lr}
 800e82e:	b084      	sub	sp, #16
 800e830:	af00      	add	r7, sp, #0
 800e832:	6078      	str	r0, [r7, #4]
 800e834:	460b      	mov	r3, r1
 800e836:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e83e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e846:	2b00      	cmp	r3, #0
 800e848:	d101      	bne.n	800e84e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e84a:	2303      	movs	r3, #3
 800e84c:	e04f      	b.n	800e8ee <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e854:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800e856:	78fa      	ldrb	r2, [r7, #3]
 800e858:	6879      	ldr	r1, [r7, #4]
 800e85a:	4613      	mov	r3, r2
 800e85c:	009b      	lsls	r3, r3, #2
 800e85e:	4413      	add	r3, r2
 800e860:	009b      	lsls	r3, r3, #2
 800e862:	440b      	add	r3, r1
 800e864:	3318      	adds	r3, #24
 800e866:	681b      	ldr	r3, [r3, #0]
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d029      	beq.n	800e8c0 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800e86c:	78fa      	ldrb	r2, [r7, #3]
 800e86e:	6879      	ldr	r1, [r7, #4]
 800e870:	4613      	mov	r3, r2
 800e872:	009b      	lsls	r3, r3, #2
 800e874:	4413      	add	r3, r2
 800e876:	009b      	lsls	r3, r3, #2
 800e878:	440b      	add	r3, r1
 800e87a:	3318      	adds	r3, #24
 800e87c:	681a      	ldr	r2, [r3, #0]
 800e87e:	78f9      	ldrb	r1, [r7, #3]
 800e880:	68f8      	ldr	r0, [r7, #12]
 800e882:	460b      	mov	r3, r1
 800e884:	00db      	lsls	r3, r3, #3
 800e886:	440b      	add	r3, r1
 800e888:	009b      	lsls	r3, r3, #2
 800e88a:	4403      	add	r3, r0
 800e88c:	3348      	adds	r3, #72	; 0x48
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	fbb2 f1f3 	udiv	r1, r2, r3
 800e894:	fb01 f303 	mul.w	r3, r1, r3
 800e898:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d110      	bne.n	800e8c0 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800e89e:	78fa      	ldrb	r2, [r7, #3]
 800e8a0:	6879      	ldr	r1, [r7, #4]
 800e8a2:	4613      	mov	r3, r2
 800e8a4:	009b      	lsls	r3, r3, #2
 800e8a6:	4413      	add	r3, r2
 800e8a8:	009b      	lsls	r3, r3, #2
 800e8aa:	440b      	add	r3, r1
 800e8ac:	3318      	adds	r3, #24
 800e8ae:	2200      	movs	r2, #0
 800e8b0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800e8b2:	78f9      	ldrb	r1, [r7, #3]
 800e8b4:	2300      	movs	r3, #0
 800e8b6:	2200      	movs	r2, #0
 800e8b8:	6878      	ldr	r0, [r7, #4]
 800e8ba:	f004 fe2d 	bl	8013518 <USBD_LL_Transmit>
 800e8be:	e015      	b.n	800e8ec <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800e8c0:	68bb      	ldr	r3, [r7, #8]
 800e8c2:	2200      	movs	r2, #0
 800e8c4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e8ce:	691b      	ldr	r3, [r3, #16]
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	d00b      	beq.n	800e8ec <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e8da:	691b      	ldr	r3, [r3, #16]
 800e8dc:	68ba      	ldr	r2, [r7, #8]
 800e8de:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800e8e2:	68ba      	ldr	r2, [r7, #8]
 800e8e4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800e8e8:	78fa      	ldrb	r2, [r7, #3]
 800e8ea:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800e8ec:	2300      	movs	r3, #0
}
 800e8ee:	4618      	mov	r0, r3
 800e8f0:	3710      	adds	r7, #16
 800e8f2:	46bd      	mov	sp, r7
 800e8f4:	bd80      	pop	{r7, pc}

0800e8f6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e8f6:	b580      	push	{r7, lr}
 800e8f8:	b084      	sub	sp, #16
 800e8fa:	af00      	add	r7, sp, #0
 800e8fc:	6078      	str	r0, [r7, #4]
 800e8fe:	460b      	mov	r3, r1
 800e900:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e908:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e910:	2b00      	cmp	r3, #0
 800e912:	d101      	bne.n	800e918 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e914:	2303      	movs	r3, #3
 800e916:	e015      	b.n	800e944 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800e918:	78fb      	ldrb	r3, [r7, #3]
 800e91a:	4619      	mov	r1, r3
 800e91c:	6878      	ldr	r0, [r7, #4]
 800e91e:	f004 fe6b 	bl	80135f8 <USBD_LL_GetRxDataSize>
 800e922:	4602      	mov	r2, r0
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e930:	68db      	ldr	r3, [r3, #12]
 800e932:	68fa      	ldr	r2, [r7, #12]
 800e934:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800e938:	68fa      	ldr	r2, [r7, #12]
 800e93a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800e93e:	4611      	mov	r1, r2
 800e940:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800e942:	2300      	movs	r3, #0
}
 800e944:	4618      	mov	r0, r3
 800e946:	3710      	adds	r7, #16
 800e948:	46bd      	mov	sp, r7
 800e94a:	bd80      	pop	{r7, pc}

0800e94c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800e94c:	b580      	push	{r7, lr}
 800e94e:	b084      	sub	sp, #16
 800e950:	af00      	add	r7, sp, #0
 800e952:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e95a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e95c:	68fb      	ldr	r3, [r7, #12]
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d101      	bne.n	800e966 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800e962:	2303      	movs	r3, #3
 800e964:	e01b      	b.n	800e99e <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d015      	beq.n	800e99c <USBD_CDC_EP0_RxReady+0x50>
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800e976:	2bff      	cmp	r3, #255	; 0xff
 800e978:	d010      	beq.n	800e99c <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e980:	689b      	ldr	r3, [r3, #8]
 800e982:	68fa      	ldr	r2, [r7, #12]
 800e984:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800e988:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800e98a:	68fa      	ldr	r2, [r7, #12]
 800e98c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800e990:	b292      	uxth	r2, r2
 800e992:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	22ff      	movs	r2, #255	; 0xff
 800e998:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800e99c:	2300      	movs	r3, #0
}
 800e99e:	4618      	mov	r0, r3
 800e9a0:	3710      	adds	r7, #16
 800e9a2:	46bd      	mov	sp, r7
 800e9a4:	bd80      	pop	{r7, pc}
	...

0800e9a8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800e9a8:	b480      	push	{r7}
 800e9aa:	b083      	sub	sp, #12
 800e9ac:	af00      	add	r7, sp, #0
 800e9ae:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	2243      	movs	r2, #67	; 0x43
 800e9b4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800e9b6:	4b03      	ldr	r3, [pc, #12]	; (800e9c4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800e9b8:	4618      	mov	r0, r3
 800e9ba:	370c      	adds	r7, #12
 800e9bc:	46bd      	mov	sp, r7
 800e9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9c2:	4770      	bx	lr
 800e9c4:	200002b8 	.word	0x200002b8

0800e9c8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800e9c8:	b480      	push	{r7}
 800e9ca:	b083      	sub	sp, #12
 800e9cc:	af00      	add	r7, sp, #0
 800e9ce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	2243      	movs	r2, #67	; 0x43
 800e9d4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800e9d6:	4b03      	ldr	r3, [pc, #12]	; (800e9e4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800e9d8:	4618      	mov	r0, r3
 800e9da:	370c      	adds	r7, #12
 800e9dc:	46bd      	mov	sp, r7
 800e9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9e2:	4770      	bx	lr
 800e9e4:	20000274 	.word	0x20000274

0800e9e8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800e9e8:	b480      	push	{r7}
 800e9ea:	b083      	sub	sp, #12
 800e9ec:	af00      	add	r7, sp, #0
 800e9ee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	2243      	movs	r2, #67	; 0x43
 800e9f4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800e9f6:	4b03      	ldr	r3, [pc, #12]	; (800ea04 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800e9f8:	4618      	mov	r0, r3
 800e9fa:	370c      	adds	r7, #12
 800e9fc:	46bd      	mov	sp, r7
 800e9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea02:	4770      	bx	lr
 800ea04:	200002fc 	.word	0x200002fc

0800ea08 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800ea08:	b480      	push	{r7}
 800ea0a:	b083      	sub	sp, #12
 800ea0c:	af00      	add	r7, sp, #0
 800ea0e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	220a      	movs	r2, #10
 800ea14:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800ea16:	4b03      	ldr	r3, [pc, #12]	; (800ea24 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800ea18:	4618      	mov	r0, r3
 800ea1a:	370c      	adds	r7, #12
 800ea1c:	46bd      	mov	sp, r7
 800ea1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea22:	4770      	bx	lr
 800ea24:	20000230 	.word	0x20000230

0800ea28 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800ea28:	b480      	push	{r7}
 800ea2a:	b083      	sub	sp, #12
 800ea2c:	af00      	add	r7, sp, #0
 800ea2e:	6078      	str	r0, [r7, #4]
 800ea30:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800ea32:	683b      	ldr	r3, [r7, #0]
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	d101      	bne.n	800ea3c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800ea38:	2303      	movs	r3, #3
 800ea3a:	e004      	b.n	800ea46 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	683a      	ldr	r2, [r7, #0]
 800ea40:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800ea44:	2300      	movs	r3, #0
}
 800ea46:	4618      	mov	r0, r3
 800ea48:	370c      	adds	r7, #12
 800ea4a:	46bd      	mov	sp, r7
 800ea4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea50:	4770      	bx	lr

0800ea52 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800ea52:	b480      	push	{r7}
 800ea54:	b087      	sub	sp, #28
 800ea56:	af00      	add	r7, sp, #0
 800ea58:	60f8      	str	r0, [r7, #12]
 800ea5a:	60b9      	str	r1, [r7, #8]
 800ea5c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ea5e:	68fb      	ldr	r3, [r7, #12]
 800ea60:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ea64:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800ea66:	697b      	ldr	r3, [r7, #20]
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d101      	bne.n	800ea70 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800ea6c:	2303      	movs	r3, #3
 800ea6e:	e008      	b.n	800ea82 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800ea70:	697b      	ldr	r3, [r7, #20]
 800ea72:	68ba      	ldr	r2, [r7, #8]
 800ea74:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800ea78:	697b      	ldr	r3, [r7, #20]
 800ea7a:	687a      	ldr	r2, [r7, #4]
 800ea7c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800ea80:	2300      	movs	r3, #0
}
 800ea82:	4618      	mov	r0, r3
 800ea84:	371c      	adds	r7, #28
 800ea86:	46bd      	mov	sp, r7
 800ea88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea8c:	4770      	bx	lr

0800ea8e <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800ea8e:	b480      	push	{r7}
 800ea90:	b085      	sub	sp, #20
 800ea92:	af00      	add	r7, sp, #0
 800ea94:	6078      	str	r0, [r7, #4]
 800ea96:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ea9e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d101      	bne.n	800eaaa <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800eaa6:	2303      	movs	r3, #3
 800eaa8:	e004      	b.n	800eab4 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800eaaa:	68fb      	ldr	r3, [r7, #12]
 800eaac:	683a      	ldr	r2, [r7, #0]
 800eaae:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800eab2:	2300      	movs	r3, #0
}
 800eab4:	4618      	mov	r0, r3
 800eab6:	3714      	adds	r7, #20
 800eab8:	46bd      	mov	sp, r7
 800eaba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eabe:	4770      	bx	lr

0800eac0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800eac0:	b580      	push	{r7, lr}
 800eac2:	b084      	sub	sp, #16
 800eac4:	af00      	add	r7, sp, #0
 800eac6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800eace:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800ead0:	2301      	movs	r3, #1
 800ead2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d101      	bne.n	800eae2 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800eade:	2303      	movs	r3, #3
 800eae0:	e01a      	b.n	800eb18 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800eae2:	68bb      	ldr	r3, [r7, #8]
 800eae4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d114      	bne.n	800eb16 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800eaec:	68bb      	ldr	r3, [r7, #8]
 800eaee:	2201      	movs	r2, #1
 800eaf0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800eaf4:	68bb      	ldr	r3, [r7, #8]
 800eaf6:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800eafe:	68bb      	ldr	r3, [r7, #8]
 800eb00:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800eb04:	68bb      	ldr	r3, [r7, #8]
 800eb06:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800eb0a:	2181      	movs	r1, #129	; 0x81
 800eb0c:	6878      	ldr	r0, [r7, #4]
 800eb0e:	f004 fd03 	bl	8013518 <USBD_LL_Transmit>

    ret = USBD_OK;
 800eb12:	2300      	movs	r3, #0
 800eb14:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800eb16:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb18:	4618      	mov	r0, r3
 800eb1a:	3710      	adds	r7, #16
 800eb1c:	46bd      	mov	sp, r7
 800eb1e:	bd80      	pop	{r7, pc}

0800eb20 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800eb20:	b580      	push	{r7, lr}
 800eb22:	b084      	sub	sp, #16
 800eb24:	af00      	add	r7, sp, #0
 800eb26:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800eb2e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	d101      	bne.n	800eb3e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800eb3a:	2303      	movs	r3, #3
 800eb3c:	e016      	b.n	800eb6c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	7c1b      	ldrb	r3, [r3, #16]
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	d109      	bne.n	800eb5a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800eb46:	68fb      	ldr	r3, [r7, #12]
 800eb48:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800eb4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800eb50:	2101      	movs	r1, #1
 800eb52:	6878      	ldr	r0, [r7, #4]
 800eb54:	f004 fd18 	bl	8013588 <USBD_LL_PrepareReceive>
 800eb58:	e007      	b.n	800eb6a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800eb5a:	68fb      	ldr	r3, [r7, #12]
 800eb5c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800eb60:	2340      	movs	r3, #64	; 0x40
 800eb62:	2101      	movs	r1, #1
 800eb64:	6878      	ldr	r0, [r7, #4]
 800eb66:	f004 fd0f 	bl	8013588 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800eb6a:	2300      	movs	r3, #0
}
 800eb6c:	4618      	mov	r0, r3
 800eb6e:	3710      	adds	r7, #16
 800eb70:	46bd      	mov	sp, r7
 800eb72:	bd80      	pop	{r7, pc}

0800eb74 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800eb74:	b580      	push	{r7, lr}
 800eb76:	b086      	sub	sp, #24
 800eb78:	af00      	add	r7, sp, #0
 800eb7a:	60f8      	str	r0, [r7, #12]
 800eb7c:	60b9      	str	r1, [r7, #8]
 800eb7e:	4613      	mov	r3, r2
 800eb80:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800eb82:	68fb      	ldr	r3, [r7, #12]
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	d101      	bne.n	800eb8c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800eb88:	2303      	movs	r3, #3
 800eb8a:	e01f      	b.n	800ebcc <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800eb8c:	68fb      	ldr	r3, [r7, #12]
 800eb8e:	2200      	movs	r2, #0
 800eb90:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800eb94:	68fb      	ldr	r3, [r7, #12]
 800eb96:	2200      	movs	r2, #0
 800eb98:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	2200      	movs	r2, #0
 800eba0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800eba4:	68bb      	ldr	r3, [r7, #8]
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d003      	beq.n	800ebb2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	68ba      	ldr	r2, [r7, #8]
 800ebae:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ebb2:	68fb      	ldr	r3, [r7, #12]
 800ebb4:	2201      	movs	r2, #1
 800ebb6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800ebba:	68fb      	ldr	r3, [r7, #12]
 800ebbc:	79fa      	ldrb	r2, [r7, #7]
 800ebbe:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800ebc0:	68f8      	ldr	r0, [r7, #12]
 800ebc2:	f004 faeb 	bl	801319c <USBD_LL_Init>
 800ebc6:	4603      	mov	r3, r0
 800ebc8:	75fb      	strb	r3, [r7, #23]

  return ret;
 800ebca:	7dfb      	ldrb	r3, [r7, #23]
}
 800ebcc:	4618      	mov	r0, r3
 800ebce:	3718      	adds	r7, #24
 800ebd0:	46bd      	mov	sp, r7
 800ebd2:	bd80      	pop	{r7, pc}

0800ebd4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ebd4:	b580      	push	{r7, lr}
 800ebd6:	b084      	sub	sp, #16
 800ebd8:	af00      	add	r7, sp, #0
 800ebda:	6078      	str	r0, [r7, #4]
 800ebdc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ebde:	2300      	movs	r3, #0
 800ebe0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800ebe2:	683b      	ldr	r3, [r7, #0]
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	d101      	bne.n	800ebec <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800ebe8:	2303      	movs	r3, #3
 800ebea:	e016      	b.n	800ec1a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	683a      	ldr	r2, [r7, #0]
 800ebf0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ebfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	d00b      	beq.n	800ec18 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ec06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec08:	f107 020e 	add.w	r2, r7, #14
 800ec0c:	4610      	mov	r0, r2
 800ec0e:	4798      	blx	r3
 800ec10:	4602      	mov	r2, r0
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800ec18:	2300      	movs	r3, #0
}
 800ec1a:	4618      	mov	r0, r3
 800ec1c:	3710      	adds	r7, #16
 800ec1e:	46bd      	mov	sp, r7
 800ec20:	bd80      	pop	{r7, pc}

0800ec22 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ec22:	b580      	push	{r7, lr}
 800ec24:	b082      	sub	sp, #8
 800ec26:	af00      	add	r7, sp, #0
 800ec28:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800ec2a:	6878      	ldr	r0, [r7, #4]
 800ec2c:	f004 fb00 	bl	8013230 <USBD_LL_Start>
 800ec30:	4603      	mov	r3, r0
}
 800ec32:	4618      	mov	r0, r3
 800ec34:	3708      	adds	r7, #8
 800ec36:	46bd      	mov	sp, r7
 800ec38:	bd80      	pop	{r7, pc}

0800ec3a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800ec3a:	b480      	push	{r7}
 800ec3c:	b083      	sub	sp, #12
 800ec3e:	af00      	add	r7, sp, #0
 800ec40:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ec42:	2300      	movs	r3, #0
}
 800ec44:	4618      	mov	r0, r3
 800ec46:	370c      	adds	r7, #12
 800ec48:	46bd      	mov	sp, r7
 800ec4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec4e:	4770      	bx	lr

0800ec50 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ec50:	b580      	push	{r7, lr}
 800ec52:	b084      	sub	sp, #16
 800ec54:	af00      	add	r7, sp, #0
 800ec56:	6078      	str	r0, [r7, #4]
 800ec58:	460b      	mov	r3, r1
 800ec5a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800ec5c:	2303      	movs	r3, #3
 800ec5e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d009      	beq.n	800ec7e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	78fa      	ldrb	r2, [r7, #3]
 800ec74:	4611      	mov	r1, r2
 800ec76:	6878      	ldr	r0, [r7, #4]
 800ec78:	4798      	blx	r3
 800ec7a:	4603      	mov	r3, r0
 800ec7c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800ec7e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec80:	4618      	mov	r0, r3
 800ec82:	3710      	adds	r7, #16
 800ec84:	46bd      	mov	sp, r7
 800ec86:	bd80      	pop	{r7, pc}

0800ec88 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ec88:	b580      	push	{r7, lr}
 800ec8a:	b082      	sub	sp, #8
 800ec8c:	af00      	add	r7, sp, #0
 800ec8e:	6078      	str	r0, [r7, #4]
 800ec90:	460b      	mov	r3, r1
 800ec92:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	d007      	beq.n	800ecae <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eca4:	685b      	ldr	r3, [r3, #4]
 800eca6:	78fa      	ldrb	r2, [r7, #3]
 800eca8:	4611      	mov	r1, r2
 800ecaa:	6878      	ldr	r0, [r7, #4]
 800ecac:	4798      	blx	r3
  }

  return USBD_OK;
 800ecae:	2300      	movs	r3, #0
}
 800ecb0:	4618      	mov	r0, r3
 800ecb2:	3708      	adds	r7, #8
 800ecb4:	46bd      	mov	sp, r7
 800ecb6:	bd80      	pop	{r7, pc}

0800ecb8 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ecb8:	b580      	push	{r7, lr}
 800ecba:	b084      	sub	sp, #16
 800ecbc:	af00      	add	r7, sp, #0
 800ecbe:	6078      	str	r0, [r7, #4]
 800ecc0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ecc8:	6839      	ldr	r1, [r7, #0]
 800ecca:	4618      	mov	r0, r3
 800eccc:	f000 ffba 	bl	800fc44 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	2201      	movs	r2, #1
 800ecd4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800ecde:	461a      	mov	r2, r3
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ecec:	f003 031f 	and.w	r3, r3, #31
 800ecf0:	2b02      	cmp	r3, #2
 800ecf2:	d01a      	beq.n	800ed2a <USBD_LL_SetupStage+0x72>
 800ecf4:	2b02      	cmp	r3, #2
 800ecf6:	d822      	bhi.n	800ed3e <USBD_LL_SetupStage+0x86>
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d002      	beq.n	800ed02 <USBD_LL_SetupStage+0x4a>
 800ecfc:	2b01      	cmp	r3, #1
 800ecfe:	d00a      	beq.n	800ed16 <USBD_LL_SetupStage+0x5e>
 800ed00:	e01d      	b.n	800ed3e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ed08:	4619      	mov	r1, r3
 800ed0a:	6878      	ldr	r0, [r7, #4]
 800ed0c:	f000 fa62 	bl	800f1d4 <USBD_StdDevReq>
 800ed10:	4603      	mov	r3, r0
 800ed12:	73fb      	strb	r3, [r7, #15]
      break;
 800ed14:	e020      	b.n	800ed58 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ed1c:	4619      	mov	r1, r3
 800ed1e:	6878      	ldr	r0, [r7, #4]
 800ed20:	f000 fac6 	bl	800f2b0 <USBD_StdItfReq>
 800ed24:	4603      	mov	r3, r0
 800ed26:	73fb      	strb	r3, [r7, #15]
      break;
 800ed28:	e016      	b.n	800ed58 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ed30:	4619      	mov	r1, r3
 800ed32:	6878      	ldr	r0, [r7, #4]
 800ed34:	f000 fb05 	bl	800f342 <USBD_StdEPReq>
 800ed38:	4603      	mov	r3, r0
 800ed3a:	73fb      	strb	r3, [r7, #15]
      break;
 800ed3c:	e00c      	b.n	800ed58 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ed44:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ed48:	b2db      	uxtb	r3, r3
 800ed4a:	4619      	mov	r1, r3
 800ed4c:	6878      	ldr	r0, [r7, #4]
 800ed4e:	f004 fb15 	bl	801337c <USBD_LL_StallEP>
 800ed52:	4603      	mov	r3, r0
 800ed54:	73fb      	strb	r3, [r7, #15]
      break;
 800ed56:	bf00      	nop
  }

  return ret;
 800ed58:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed5a:	4618      	mov	r0, r3
 800ed5c:	3710      	adds	r7, #16
 800ed5e:	46bd      	mov	sp, r7
 800ed60:	bd80      	pop	{r7, pc}

0800ed62 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ed62:	b580      	push	{r7, lr}
 800ed64:	b086      	sub	sp, #24
 800ed66:	af00      	add	r7, sp, #0
 800ed68:	60f8      	str	r0, [r7, #12]
 800ed6a:	460b      	mov	r3, r1
 800ed6c:	607a      	str	r2, [r7, #4]
 800ed6e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800ed70:	7afb      	ldrb	r3, [r7, #11]
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d138      	bne.n	800ede8 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800ed76:	68fb      	ldr	r3, [r7, #12]
 800ed78:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800ed7c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ed7e:	68fb      	ldr	r3, [r7, #12]
 800ed80:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ed84:	2b03      	cmp	r3, #3
 800ed86:	d14a      	bne.n	800ee1e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800ed88:	693b      	ldr	r3, [r7, #16]
 800ed8a:	689a      	ldr	r2, [r3, #8]
 800ed8c:	693b      	ldr	r3, [r7, #16]
 800ed8e:	68db      	ldr	r3, [r3, #12]
 800ed90:	429a      	cmp	r2, r3
 800ed92:	d913      	bls.n	800edbc <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ed94:	693b      	ldr	r3, [r7, #16]
 800ed96:	689a      	ldr	r2, [r3, #8]
 800ed98:	693b      	ldr	r3, [r7, #16]
 800ed9a:	68db      	ldr	r3, [r3, #12]
 800ed9c:	1ad2      	subs	r2, r2, r3
 800ed9e:	693b      	ldr	r3, [r7, #16]
 800eda0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800eda2:	693b      	ldr	r3, [r7, #16]
 800eda4:	68da      	ldr	r2, [r3, #12]
 800eda6:	693b      	ldr	r3, [r7, #16]
 800eda8:	689b      	ldr	r3, [r3, #8]
 800edaa:	4293      	cmp	r3, r2
 800edac:	bf28      	it	cs
 800edae:	4613      	movcs	r3, r2
 800edb0:	461a      	mov	r2, r3
 800edb2:	6879      	ldr	r1, [r7, #4]
 800edb4:	68f8      	ldr	r0, [r7, #12]
 800edb6:	f001 f839 	bl	800fe2c <USBD_CtlContinueRx>
 800edba:	e030      	b.n	800ee1e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800edbc:	68fb      	ldr	r3, [r7, #12]
 800edbe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800edc2:	b2db      	uxtb	r3, r3
 800edc4:	2b03      	cmp	r3, #3
 800edc6:	d10b      	bne.n	800ede0 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800edc8:	68fb      	ldr	r3, [r7, #12]
 800edca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800edce:	691b      	ldr	r3, [r3, #16]
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	d005      	beq.n	800ede0 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800edd4:	68fb      	ldr	r3, [r7, #12]
 800edd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800edda:	691b      	ldr	r3, [r3, #16]
 800eddc:	68f8      	ldr	r0, [r7, #12]
 800edde:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800ede0:	68f8      	ldr	r0, [r7, #12]
 800ede2:	f001 f834 	bl	800fe4e <USBD_CtlSendStatus>
 800ede6:	e01a      	b.n	800ee1e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ede8:	68fb      	ldr	r3, [r7, #12]
 800edea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800edee:	b2db      	uxtb	r3, r3
 800edf0:	2b03      	cmp	r3, #3
 800edf2:	d114      	bne.n	800ee1e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800edf4:	68fb      	ldr	r3, [r7, #12]
 800edf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800edfa:	699b      	ldr	r3, [r3, #24]
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	d00e      	beq.n	800ee1e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800ee00:	68fb      	ldr	r3, [r7, #12]
 800ee02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ee06:	699b      	ldr	r3, [r3, #24]
 800ee08:	7afa      	ldrb	r2, [r7, #11]
 800ee0a:	4611      	mov	r1, r2
 800ee0c:	68f8      	ldr	r0, [r7, #12]
 800ee0e:	4798      	blx	r3
 800ee10:	4603      	mov	r3, r0
 800ee12:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800ee14:	7dfb      	ldrb	r3, [r7, #23]
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d001      	beq.n	800ee1e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800ee1a:	7dfb      	ldrb	r3, [r7, #23]
 800ee1c:	e000      	b.n	800ee20 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800ee1e:	2300      	movs	r3, #0
}
 800ee20:	4618      	mov	r0, r3
 800ee22:	3718      	adds	r7, #24
 800ee24:	46bd      	mov	sp, r7
 800ee26:	bd80      	pop	{r7, pc}

0800ee28 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ee28:	b580      	push	{r7, lr}
 800ee2a:	b086      	sub	sp, #24
 800ee2c:	af00      	add	r7, sp, #0
 800ee2e:	60f8      	str	r0, [r7, #12]
 800ee30:	460b      	mov	r3, r1
 800ee32:	607a      	str	r2, [r7, #4]
 800ee34:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800ee36:	7afb      	ldrb	r3, [r7, #11]
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d16b      	bne.n	800ef14 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800ee3c:	68fb      	ldr	r3, [r7, #12]
 800ee3e:	3314      	adds	r3, #20
 800ee40:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ee42:	68fb      	ldr	r3, [r7, #12]
 800ee44:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ee48:	2b02      	cmp	r3, #2
 800ee4a:	d156      	bne.n	800eefa <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800ee4c:	693b      	ldr	r3, [r7, #16]
 800ee4e:	689a      	ldr	r2, [r3, #8]
 800ee50:	693b      	ldr	r3, [r7, #16]
 800ee52:	68db      	ldr	r3, [r3, #12]
 800ee54:	429a      	cmp	r2, r3
 800ee56:	d914      	bls.n	800ee82 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ee58:	693b      	ldr	r3, [r7, #16]
 800ee5a:	689a      	ldr	r2, [r3, #8]
 800ee5c:	693b      	ldr	r3, [r7, #16]
 800ee5e:	68db      	ldr	r3, [r3, #12]
 800ee60:	1ad2      	subs	r2, r2, r3
 800ee62:	693b      	ldr	r3, [r7, #16]
 800ee64:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800ee66:	693b      	ldr	r3, [r7, #16]
 800ee68:	689b      	ldr	r3, [r3, #8]
 800ee6a:	461a      	mov	r2, r3
 800ee6c:	6879      	ldr	r1, [r7, #4]
 800ee6e:	68f8      	ldr	r0, [r7, #12]
 800ee70:	f000 ffae 	bl	800fdd0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ee74:	2300      	movs	r3, #0
 800ee76:	2200      	movs	r2, #0
 800ee78:	2100      	movs	r1, #0
 800ee7a:	68f8      	ldr	r0, [r7, #12]
 800ee7c:	f004 fb84 	bl	8013588 <USBD_LL_PrepareReceive>
 800ee80:	e03b      	b.n	800eefa <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800ee82:	693b      	ldr	r3, [r7, #16]
 800ee84:	68da      	ldr	r2, [r3, #12]
 800ee86:	693b      	ldr	r3, [r7, #16]
 800ee88:	689b      	ldr	r3, [r3, #8]
 800ee8a:	429a      	cmp	r2, r3
 800ee8c:	d11c      	bne.n	800eec8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800ee8e:	693b      	ldr	r3, [r7, #16]
 800ee90:	685a      	ldr	r2, [r3, #4]
 800ee92:	693b      	ldr	r3, [r7, #16]
 800ee94:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800ee96:	429a      	cmp	r2, r3
 800ee98:	d316      	bcc.n	800eec8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800ee9a:	693b      	ldr	r3, [r7, #16]
 800ee9c:	685a      	ldr	r2, [r3, #4]
 800ee9e:	68fb      	ldr	r3, [r7, #12]
 800eea0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800eea4:	429a      	cmp	r2, r3
 800eea6:	d20f      	bcs.n	800eec8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800eea8:	2200      	movs	r2, #0
 800eeaa:	2100      	movs	r1, #0
 800eeac:	68f8      	ldr	r0, [r7, #12]
 800eeae:	f000 ff8f 	bl	800fdd0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800eeb2:	68fb      	ldr	r3, [r7, #12]
 800eeb4:	2200      	movs	r2, #0
 800eeb6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800eeba:	2300      	movs	r3, #0
 800eebc:	2200      	movs	r2, #0
 800eebe:	2100      	movs	r1, #0
 800eec0:	68f8      	ldr	r0, [r7, #12]
 800eec2:	f004 fb61 	bl	8013588 <USBD_LL_PrepareReceive>
 800eec6:	e018      	b.n	800eefa <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eec8:	68fb      	ldr	r3, [r7, #12]
 800eeca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eece:	b2db      	uxtb	r3, r3
 800eed0:	2b03      	cmp	r3, #3
 800eed2:	d10b      	bne.n	800eeec <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800eed4:	68fb      	ldr	r3, [r7, #12]
 800eed6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eeda:	68db      	ldr	r3, [r3, #12]
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d005      	beq.n	800eeec <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800eee0:	68fb      	ldr	r3, [r7, #12]
 800eee2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eee6:	68db      	ldr	r3, [r3, #12]
 800eee8:	68f8      	ldr	r0, [r7, #12]
 800eeea:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800eeec:	2180      	movs	r1, #128	; 0x80
 800eeee:	68f8      	ldr	r0, [r7, #12]
 800eef0:	f004 fa44 	bl	801337c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800eef4:	68f8      	ldr	r0, [r7, #12]
 800eef6:	f000 ffbd 	bl	800fe74 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800eefa:	68fb      	ldr	r3, [r7, #12]
 800eefc:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800ef00:	2b01      	cmp	r3, #1
 800ef02:	d122      	bne.n	800ef4a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800ef04:	68f8      	ldr	r0, [r7, #12]
 800ef06:	f7ff fe98 	bl	800ec3a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ef0a:	68fb      	ldr	r3, [r7, #12]
 800ef0c:	2200      	movs	r2, #0
 800ef0e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800ef12:	e01a      	b.n	800ef4a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ef14:	68fb      	ldr	r3, [r7, #12]
 800ef16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ef1a:	b2db      	uxtb	r3, r3
 800ef1c:	2b03      	cmp	r3, #3
 800ef1e:	d114      	bne.n	800ef4a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800ef20:	68fb      	ldr	r3, [r7, #12]
 800ef22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ef26:	695b      	ldr	r3, [r3, #20]
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d00e      	beq.n	800ef4a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800ef2c:	68fb      	ldr	r3, [r7, #12]
 800ef2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ef32:	695b      	ldr	r3, [r3, #20]
 800ef34:	7afa      	ldrb	r2, [r7, #11]
 800ef36:	4611      	mov	r1, r2
 800ef38:	68f8      	ldr	r0, [r7, #12]
 800ef3a:	4798      	blx	r3
 800ef3c:	4603      	mov	r3, r0
 800ef3e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800ef40:	7dfb      	ldrb	r3, [r7, #23]
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d001      	beq.n	800ef4a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800ef46:	7dfb      	ldrb	r3, [r7, #23]
 800ef48:	e000      	b.n	800ef4c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800ef4a:	2300      	movs	r3, #0
}
 800ef4c:	4618      	mov	r0, r3
 800ef4e:	3718      	adds	r7, #24
 800ef50:	46bd      	mov	sp, r7
 800ef52:	bd80      	pop	{r7, pc}

0800ef54 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ef54:	b580      	push	{r7, lr}
 800ef56:	b082      	sub	sp, #8
 800ef58:	af00      	add	r7, sp, #0
 800ef5a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	2201      	movs	r2, #1
 800ef60:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	2200      	movs	r2, #0
 800ef68:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	2200      	movs	r2, #0
 800ef70:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	2200      	movs	r2, #0
 800ef76:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d101      	bne.n	800ef88 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800ef84:	2303      	movs	r3, #3
 800ef86:	e02f      	b.n	800efe8 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	d00f      	beq.n	800efb2 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ef98:	685b      	ldr	r3, [r3, #4]
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	d009      	beq.n	800efb2 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800efa4:	685b      	ldr	r3, [r3, #4]
 800efa6:	687a      	ldr	r2, [r7, #4]
 800efa8:	6852      	ldr	r2, [r2, #4]
 800efaa:	b2d2      	uxtb	r2, r2
 800efac:	4611      	mov	r1, r2
 800efae:	6878      	ldr	r0, [r7, #4]
 800efb0:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800efb2:	2340      	movs	r3, #64	; 0x40
 800efb4:	2200      	movs	r2, #0
 800efb6:	2100      	movs	r1, #0
 800efb8:	6878      	ldr	r0, [r7, #4]
 800efba:	f004 f96b 	bl	8013294 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	2201      	movs	r2, #1
 800efc2:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	2240      	movs	r2, #64	; 0x40
 800efca:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800efce:	2340      	movs	r3, #64	; 0x40
 800efd0:	2200      	movs	r2, #0
 800efd2:	2180      	movs	r1, #128	; 0x80
 800efd4:	6878      	ldr	r0, [r7, #4]
 800efd6:	f004 f95d 	bl	8013294 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	2201      	movs	r2, #1
 800efde:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	2240      	movs	r2, #64	; 0x40
 800efe4:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800efe6:	2300      	movs	r3, #0
}
 800efe8:	4618      	mov	r0, r3
 800efea:	3708      	adds	r7, #8
 800efec:	46bd      	mov	sp, r7
 800efee:	bd80      	pop	{r7, pc}

0800eff0 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800eff0:	b480      	push	{r7}
 800eff2:	b083      	sub	sp, #12
 800eff4:	af00      	add	r7, sp, #0
 800eff6:	6078      	str	r0, [r7, #4]
 800eff8:	460b      	mov	r3, r1
 800effa:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	78fa      	ldrb	r2, [r7, #3]
 800f000:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800f002:	2300      	movs	r3, #0
}
 800f004:	4618      	mov	r0, r3
 800f006:	370c      	adds	r7, #12
 800f008:	46bd      	mov	sp, r7
 800f00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f00e:	4770      	bx	lr

0800f010 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800f010:	b480      	push	{r7}
 800f012:	b083      	sub	sp, #12
 800f014:	af00      	add	r7, sp, #0
 800f016:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f01e:	b2da      	uxtb	r2, r3
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	2204      	movs	r2, #4
 800f02a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800f02e:	2300      	movs	r3, #0
}
 800f030:	4618      	mov	r0, r3
 800f032:	370c      	adds	r7, #12
 800f034:	46bd      	mov	sp, r7
 800f036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f03a:	4770      	bx	lr

0800f03c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800f03c:	b480      	push	{r7}
 800f03e:	b083      	sub	sp, #12
 800f040:	af00      	add	r7, sp, #0
 800f042:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f04a:	b2db      	uxtb	r3, r3
 800f04c:	2b04      	cmp	r3, #4
 800f04e:	d106      	bne.n	800f05e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800f056:	b2da      	uxtb	r2, r3
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800f05e:	2300      	movs	r3, #0
}
 800f060:	4618      	mov	r0, r3
 800f062:	370c      	adds	r7, #12
 800f064:	46bd      	mov	sp, r7
 800f066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f06a:	4770      	bx	lr

0800f06c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800f06c:	b580      	push	{r7, lr}
 800f06e:	b082      	sub	sp, #8
 800f070:	af00      	add	r7, sp, #0
 800f072:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d101      	bne.n	800f082 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800f07e:	2303      	movs	r3, #3
 800f080:	e012      	b.n	800f0a8 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f088:	b2db      	uxtb	r3, r3
 800f08a:	2b03      	cmp	r3, #3
 800f08c:	d10b      	bne.n	800f0a6 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f094:	69db      	ldr	r3, [r3, #28]
 800f096:	2b00      	cmp	r3, #0
 800f098:	d005      	beq.n	800f0a6 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f0a0:	69db      	ldr	r3, [r3, #28]
 800f0a2:	6878      	ldr	r0, [r7, #4]
 800f0a4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800f0a6:	2300      	movs	r3, #0
}
 800f0a8:	4618      	mov	r0, r3
 800f0aa:	3708      	adds	r7, #8
 800f0ac:	46bd      	mov	sp, r7
 800f0ae:	bd80      	pop	{r7, pc}

0800f0b0 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800f0b0:	b580      	push	{r7, lr}
 800f0b2:	b082      	sub	sp, #8
 800f0b4:	af00      	add	r7, sp, #0
 800f0b6:	6078      	str	r0, [r7, #4]
 800f0b8:	460b      	mov	r3, r1
 800f0ba:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	d101      	bne.n	800f0ca <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800f0c6:	2303      	movs	r3, #3
 800f0c8:	e014      	b.n	800f0f4 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f0d0:	b2db      	uxtb	r3, r3
 800f0d2:	2b03      	cmp	r3, #3
 800f0d4:	d10d      	bne.n	800f0f2 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f0dc:	6a1b      	ldr	r3, [r3, #32]
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	d007      	beq.n	800f0f2 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f0e8:	6a1b      	ldr	r3, [r3, #32]
 800f0ea:	78fa      	ldrb	r2, [r7, #3]
 800f0ec:	4611      	mov	r1, r2
 800f0ee:	6878      	ldr	r0, [r7, #4]
 800f0f0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800f0f2:	2300      	movs	r3, #0
}
 800f0f4:	4618      	mov	r0, r3
 800f0f6:	3708      	adds	r7, #8
 800f0f8:	46bd      	mov	sp, r7
 800f0fa:	bd80      	pop	{r7, pc}

0800f0fc <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800f0fc:	b580      	push	{r7, lr}
 800f0fe:	b082      	sub	sp, #8
 800f100:	af00      	add	r7, sp, #0
 800f102:	6078      	str	r0, [r7, #4]
 800f104:	460b      	mov	r3, r1
 800f106:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f10e:	2b00      	cmp	r3, #0
 800f110:	d101      	bne.n	800f116 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800f112:	2303      	movs	r3, #3
 800f114:	e014      	b.n	800f140 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f11c:	b2db      	uxtb	r3, r3
 800f11e:	2b03      	cmp	r3, #3
 800f120:	d10d      	bne.n	800f13e <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	d007      	beq.n	800f13e <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f136:	78fa      	ldrb	r2, [r7, #3]
 800f138:	4611      	mov	r1, r2
 800f13a:	6878      	ldr	r0, [r7, #4]
 800f13c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800f13e:	2300      	movs	r3, #0
}
 800f140:	4618      	mov	r0, r3
 800f142:	3708      	adds	r7, #8
 800f144:	46bd      	mov	sp, r7
 800f146:	bd80      	pop	{r7, pc}

0800f148 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800f148:	b480      	push	{r7}
 800f14a:	b083      	sub	sp, #12
 800f14c:	af00      	add	r7, sp, #0
 800f14e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800f150:	2300      	movs	r3, #0
}
 800f152:	4618      	mov	r0, r3
 800f154:	370c      	adds	r7, #12
 800f156:	46bd      	mov	sp, r7
 800f158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f15c:	4770      	bx	lr

0800f15e <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800f15e:	b580      	push	{r7, lr}
 800f160:	b082      	sub	sp, #8
 800f162:	af00      	add	r7, sp, #0
 800f164:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	2201      	movs	r2, #1
 800f16a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f174:	2b00      	cmp	r3, #0
 800f176:	d009      	beq.n	800f18c <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f17e:	685b      	ldr	r3, [r3, #4]
 800f180:	687a      	ldr	r2, [r7, #4]
 800f182:	6852      	ldr	r2, [r2, #4]
 800f184:	b2d2      	uxtb	r2, r2
 800f186:	4611      	mov	r1, r2
 800f188:	6878      	ldr	r0, [r7, #4]
 800f18a:	4798      	blx	r3
  }

  return USBD_OK;
 800f18c:	2300      	movs	r3, #0
}
 800f18e:	4618      	mov	r0, r3
 800f190:	3708      	adds	r7, #8
 800f192:	46bd      	mov	sp, r7
 800f194:	bd80      	pop	{r7, pc}

0800f196 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800f196:	b480      	push	{r7}
 800f198:	b087      	sub	sp, #28
 800f19a:	af00      	add	r7, sp, #0
 800f19c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800f1a2:	697b      	ldr	r3, [r7, #20]
 800f1a4:	781b      	ldrb	r3, [r3, #0]
 800f1a6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800f1a8:	697b      	ldr	r3, [r7, #20]
 800f1aa:	3301      	adds	r3, #1
 800f1ac:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800f1ae:	697b      	ldr	r3, [r7, #20]
 800f1b0:	781b      	ldrb	r3, [r3, #0]
 800f1b2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800f1b4:	8a3b      	ldrh	r3, [r7, #16]
 800f1b6:	021b      	lsls	r3, r3, #8
 800f1b8:	b21a      	sxth	r2, r3
 800f1ba:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f1be:	4313      	orrs	r3, r2
 800f1c0:	b21b      	sxth	r3, r3
 800f1c2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800f1c4:	89fb      	ldrh	r3, [r7, #14]
}
 800f1c6:	4618      	mov	r0, r3
 800f1c8:	371c      	adds	r7, #28
 800f1ca:	46bd      	mov	sp, r7
 800f1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1d0:	4770      	bx	lr
	...

0800f1d4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f1d4:	b580      	push	{r7, lr}
 800f1d6:	b084      	sub	sp, #16
 800f1d8:	af00      	add	r7, sp, #0
 800f1da:	6078      	str	r0, [r7, #4]
 800f1dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f1de:	2300      	movs	r3, #0
 800f1e0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f1e2:	683b      	ldr	r3, [r7, #0]
 800f1e4:	781b      	ldrb	r3, [r3, #0]
 800f1e6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f1ea:	2b40      	cmp	r3, #64	; 0x40
 800f1ec:	d005      	beq.n	800f1fa <USBD_StdDevReq+0x26>
 800f1ee:	2b40      	cmp	r3, #64	; 0x40
 800f1f0:	d853      	bhi.n	800f29a <USBD_StdDevReq+0xc6>
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	d00b      	beq.n	800f20e <USBD_StdDevReq+0x3a>
 800f1f6:	2b20      	cmp	r3, #32
 800f1f8:	d14f      	bne.n	800f29a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f200:	689b      	ldr	r3, [r3, #8]
 800f202:	6839      	ldr	r1, [r7, #0]
 800f204:	6878      	ldr	r0, [r7, #4]
 800f206:	4798      	blx	r3
 800f208:	4603      	mov	r3, r0
 800f20a:	73fb      	strb	r3, [r7, #15]
      break;
 800f20c:	e04a      	b.n	800f2a4 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f20e:	683b      	ldr	r3, [r7, #0]
 800f210:	785b      	ldrb	r3, [r3, #1]
 800f212:	2b09      	cmp	r3, #9
 800f214:	d83b      	bhi.n	800f28e <USBD_StdDevReq+0xba>
 800f216:	a201      	add	r2, pc, #4	; (adr r2, 800f21c <USBD_StdDevReq+0x48>)
 800f218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f21c:	0800f271 	.word	0x0800f271
 800f220:	0800f285 	.word	0x0800f285
 800f224:	0800f28f 	.word	0x0800f28f
 800f228:	0800f27b 	.word	0x0800f27b
 800f22c:	0800f28f 	.word	0x0800f28f
 800f230:	0800f24f 	.word	0x0800f24f
 800f234:	0800f245 	.word	0x0800f245
 800f238:	0800f28f 	.word	0x0800f28f
 800f23c:	0800f267 	.word	0x0800f267
 800f240:	0800f259 	.word	0x0800f259
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800f244:	6839      	ldr	r1, [r7, #0]
 800f246:	6878      	ldr	r0, [r7, #4]
 800f248:	f000 f9de 	bl	800f608 <USBD_GetDescriptor>
          break;
 800f24c:	e024      	b.n	800f298 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800f24e:	6839      	ldr	r1, [r7, #0]
 800f250:	6878      	ldr	r0, [r7, #4]
 800f252:	f000 fb6d 	bl	800f930 <USBD_SetAddress>
          break;
 800f256:	e01f      	b.n	800f298 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800f258:	6839      	ldr	r1, [r7, #0]
 800f25a:	6878      	ldr	r0, [r7, #4]
 800f25c:	f000 fbac 	bl	800f9b8 <USBD_SetConfig>
 800f260:	4603      	mov	r3, r0
 800f262:	73fb      	strb	r3, [r7, #15]
          break;
 800f264:	e018      	b.n	800f298 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800f266:	6839      	ldr	r1, [r7, #0]
 800f268:	6878      	ldr	r0, [r7, #4]
 800f26a:	f000 fc4b 	bl	800fb04 <USBD_GetConfig>
          break;
 800f26e:	e013      	b.n	800f298 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800f270:	6839      	ldr	r1, [r7, #0]
 800f272:	6878      	ldr	r0, [r7, #4]
 800f274:	f000 fc7c 	bl	800fb70 <USBD_GetStatus>
          break;
 800f278:	e00e      	b.n	800f298 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800f27a:	6839      	ldr	r1, [r7, #0]
 800f27c:	6878      	ldr	r0, [r7, #4]
 800f27e:	f000 fcab 	bl	800fbd8 <USBD_SetFeature>
          break;
 800f282:	e009      	b.n	800f298 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800f284:	6839      	ldr	r1, [r7, #0]
 800f286:	6878      	ldr	r0, [r7, #4]
 800f288:	f000 fcba 	bl	800fc00 <USBD_ClrFeature>
          break;
 800f28c:	e004      	b.n	800f298 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800f28e:	6839      	ldr	r1, [r7, #0]
 800f290:	6878      	ldr	r0, [r7, #4]
 800f292:	f000 fd11 	bl	800fcb8 <USBD_CtlError>
          break;
 800f296:	bf00      	nop
      }
      break;
 800f298:	e004      	b.n	800f2a4 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800f29a:	6839      	ldr	r1, [r7, #0]
 800f29c:	6878      	ldr	r0, [r7, #4]
 800f29e:	f000 fd0b 	bl	800fcb8 <USBD_CtlError>
      break;
 800f2a2:	bf00      	nop
  }

  return ret;
 800f2a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f2a6:	4618      	mov	r0, r3
 800f2a8:	3710      	adds	r7, #16
 800f2aa:	46bd      	mov	sp, r7
 800f2ac:	bd80      	pop	{r7, pc}
 800f2ae:	bf00      	nop

0800f2b0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f2b0:	b580      	push	{r7, lr}
 800f2b2:	b084      	sub	sp, #16
 800f2b4:	af00      	add	r7, sp, #0
 800f2b6:	6078      	str	r0, [r7, #4]
 800f2b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f2ba:	2300      	movs	r3, #0
 800f2bc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f2be:	683b      	ldr	r3, [r7, #0]
 800f2c0:	781b      	ldrb	r3, [r3, #0]
 800f2c2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f2c6:	2b40      	cmp	r3, #64	; 0x40
 800f2c8:	d005      	beq.n	800f2d6 <USBD_StdItfReq+0x26>
 800f2ca:	2b40      	cmp	r3, #64	; 0x40
 800f2cc:	d82f      	bhi.n	800f32e <USBD_StdItfReq+0x7e>
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	d001      	beq.n	800f2d6 <USBD_StdItfReq+0x26>
 800f2d2:	2b20      	cmp	r3, #32
 800f2d4:	d12b      	bne.n	800f32e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f2dc:	b2db      	uxtb	r3, r3
 800f2de:	3b01      	subs	r3, #1
 800f2e0:	2b02      	cmp	r3, #2
 800f2e2:	d81d      	bhi.n	800f320 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800f2e4:	683b      	ldr	r3, [r7, #0]
 800f2e6:	889b      	ldrh	r3, [r3, #4]
 800f2e8:	b2db      	uxtb	r3, r3
 800f2ea:	2b01      	cmp	r3, #1
 800f2ec:	d813      	bhi.n	800f316 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f2f4:	689b      	ldr	r3, [r3, #8]
 800f2f6:	6839      	ldr	r1, [r7, #0]
 800f2f8:	6878      	ldr	r0, [r7, #4]
 800f2fa:	4798      	blx	r3
 800f2fc:	4603      	mov	r3, r0
 800f2fe:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800f300:	683b      	ldr	r3, [r7, #0]
 800f302:	88db      	ldrh	r3, [r3, #6]
 800f304:	2b00      	cmp	r3, #0
 800f306:	d110      	bne.n	800f32a <USBD_StdItfReq+0x7a>
 800f308:	7bfb      	ldrb	r3, [r7, #15]
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	d10d      	bne.n	800f32a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800f30e:	6878      	ldr	r0, [r7, #4]
 800f310:	f000 fd9d 	bl	800fe4e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800f314:	e009      	b.n	800f32a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800f316:	6839      	ldr	r1, [r7, #0]
 800f318:	6878      	ldr	r0, [r7, #4]
 800f31a:	f000 fccd 	bl	800fcb8 <USBD_CtlError>
          break;
 800f31e:	e004      	b.n	800f32a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800f320:	6839      	ldr	r1, [r7, #0]
 800f322:	6878      	ldr	r0, [r7, #4]
 800f324:	f000 fcc8 	bl	800fcb8 <USBD_CtlError>
          break;
 800f328:	e000      	b.n	800f32c <USBD_StdItfReq+0x7c>
          break;
 800f32a:	bf00      	nop
      }
      break;
 800f32c:	e004      	b.n	800f338 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800f32e:	6839      	ldr	r1, [r7, #0]
 800f330:	6878      	ldr	r0, [r7, #4]
 800f332:	f000 fcc1 	bl	800fcb8 <USBD_CtlError>
      break;
 800f336:	bf00      	nop
  }

  return ret;
 800f338:	7bfb      	ldrb	r3, [r7, #15]
}
 800f33a:	4618      	mov	r0, r3
 800f33c:	3710      	adds	r7, #16
 800f33e:	46bd      	mov	sp, r7
 800f340:	bd80      	pop	{r7, pc}

0800f342 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f342:	b580      	push	{r7, lr}
 800f344:	b084      	sub	sp, #16
 800f346:	af00      	add	r7, sp, #0
 800f348:	6078      	str	r0, [r7, #4]
 800f34a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800f34c:	2300      	movs	r3, #0
 800f34e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800f350:	683b      	ldr	r3, [r7, #0]
 800f352:	889b      	ldrh	r3, [r3, #4]
 800f354:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f356:	683b      	ldr	r3, [r7, #0]
 800f358:	781b      	ldrb	r3, [r3, #0]
 800f35a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f35e:	2b40      	cmp	r3, #64	; 0x40
 800f360:	d007      	beq.n	800f372 <USBD_StdEPReq+0x30>
 800f362:	2b40      	cmp	r3, #64	; 0x40
 800f364:	f200 8145 	bhi.w	800f5f2 <USBD_StdEPReq+0x2b0>
 800f368:	2b00      	cmp	r3, #0
 800f36a:	d00c      	beq.n	800f386 <USBD_StdEPReq+0x44>
 800f36c:	2b20      	cmp	r3, #32
 800f36e:	f040 8140 	bne.w	800f5f2 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f378:	689b      	ldr	r3, [r3, #8]
 800f37a:	6839      	ldr	r1, [r7, #0]
 800f37c:	6878      	ldr	r0, [r7, #4]
 800f37e:	4798      	blx	r3
 800f380:	4603      	mov	r3, r0
 800f382:	73fb      	strb	r3, [r7, #15]
      break;
 800f384:	e13a      	b.n	800f5fc <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f386:	683b      	ldr	r3, [r7, #0]
 800f388:	785b      	ldrb	r3, [r3, #1]
 800f38a:	2b03      	cmp	r3, #3
 800f38c:	d007      	beq.n	800f39e <USBD_StdEPReq+0x5c>
 800f38e:	2b03      	cmp	r3, #3
 800f390:	f300 8129 	bgt.w	800f5e6 <USBD_StdEPReq+0x2a4>
 800f394:	2b00      	cmp	r3, #0
 800f396:	d07f      	beq.n	800f498 <USBD_StdEPReq+0x156>
 800f398:	2b01      	cmp	r3, #1
 800f39a:	d03c      	beq.n	800f416 <USBD_StdEPReq+0xd4>
 800f39c:	e123      	b.n	800f5e6 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f3a4:	b2db      	uxtb	r3, r3
 800f3a6:	2b02      	cmp	r3, #2
 800f3a8:	d002      	beq.n	800f3b0 <USBD_StdEPReq+0x6e>
 800f3aa:	2b03      	cmp	r3, #3
 800f3ac:	d016      	beq.n	800f3dc <USBD_StdEPReq+0x9a>
 800f3ae:	e02c      	b.n	800f40a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f3b0:	7bbb      	ldrb	r3, [r7, #14]
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	d00d      	beq.n	800f3d2 <USBD_StdEPReq+0x90>
 800f3b6:	7bbb      	ldrb	r3, [r7, #14]
 800f3b8:	2b80      	cmp	r3, #128	; 0x80
 800f3ba:	d00a      	beq.n	800f3d2 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f3bc:	7bbb      	ldrb	r3, [r7, #14]
 800f3be:	4619      	mov	r1, r3
 800f3c0:	6878      	ldr	r0, [r7, #4]
 800f3c2:	f003 ffdb 	bl	801337c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f3c6:	2180      	movs	r1, #128	; 0x80
 800f3c8:	6878      	ldr	r0, [r7, #4]
 800f3ca:	f003 ffd7 	bl	801337c <USBD_LL_StallEP>
 800f3ce:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f3d0:	e020      	b.n	800f414 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800f3d2:	6839      	ldr	r1, [r7, #0]
 800f3d4:	6878      	ldr	r0, [r7, #4]
 800f3d6:	f000 fc6f 	bl	800fcb8 <USBD_CtlError>
              break;
 800f3da:	e01b      	b.n	800f414 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f3dc:	683b      	ldr	r3, [r7, #0]
 800f3de:	885b      	ldrh	r3, [r3, #2]
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	d10e      	bne.n	800f402 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800f3e4:	7bbb      	ldrb	r3, [r7, #14]
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d00b      	beq.n	800f402 <USBD_StdEPReq+0xc0>
 800f3ea:	7bbb      	ldrb	r3, [r7, #14]
 800f3ec:	2b80      	cmp	r3, #128	; 0x80
 800f3ee:	d008      	beq.n	800f402 <USBD_StdEPReq+0xc0>
 800f3f0:	683b      	ldr	r3, [r7, #0]
 800f3f2:	88db      	ldrh	r3, [r3, #6]
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	d104      	bne.n	800f402 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800f3f8:	7bbb      	ldrb	r3, [r7, #14]
 800f3fa:	4619      	mov	r1, r3
 800f3fc:	6878      	ldr	r0, [r7, #4]
 800f3fe:	f003 ffbd 	bl	801337c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800f402:	6878      	ldr	r0, [r7, #4]
 800f404:	f000 fd23 	bl	800fe4e <USBD_CtlSendStatus>

              break;
 800f408:	e004      	b.n	800f414 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800f40a:	6839      	ldr	r1, [r7, #0]
 800f40c:	6878      	ldr	r0, [r7, #4]
 800f40e:	f000 fc53 	bl	800fcb8 <USBD_CtlError>
              break;
 800f412:	bf00      	nop
          }
          break;
 800f414:	e0ec      	b.n	800f5f0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f41c:	b2db      	uxtb	r3, r3
 800f41e:	2b02      	cmp	r3, #2
 800f420:	d002      	beq.n	800f428 <USBD_StdEPReq+0xe6>
 800f422:	2b03      	cmp	r3, #3
 800f424:	d016      	beq.n	800f454 <USBD_StdEPReq+0x112>
 800f426:	e030      	b.n	800f48a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f428:	7bbb      	ldrb	r3, [r7, #14]
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	d00d      	beq.n	800f44a <USBD_StdEPReq+0x108>
 800f42e:	7bbb      	ldrb	r3, [r7, #14]
 800f430:	2b80      	cmp	r3, #128	; 0x80
 800f432:	d00a      	beq.n	800f44a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f434:	7bbb      	ldrb	r3, [r7, #14]
 800f436:	4619      	mov	r1, r3
 800f438:	6878      	ldr	r0, [r7, #4]
 800f43a:	f003 ff9f 	bl	801337c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f43e:	2180      	movs	r1, #128	; 0x80
 800f440:	6878      	ldr	r0, [r7, #4]
 800f442:	f003 ff9b 	bl	801337c <USBD_LL_StallEP>
 800f446:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f448:	e025      	b.n	800f496 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800f44a:	6839      	ldr	r1, [r7, #0]
 800f44c:	6878      	ldr	r0, [r7, #4]
 800f44e:	f000 fc33 	bl	800fcb8 <USBD_CtlError>
              break;
 800f452:	e020      	b.n	800f496 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f454:	683b      	ldr	r3, [r7, #0]
 800f456:	885b      	ldrh	r3, [r3, #2]
 800f458:	2b00      	cmp	r3, #0
 800f45a:	d11b      	bne.n	800f494 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800f45c:	7bbb      	ldrb	r3, [r7, #14]
 800f45e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f462:	2b00      	cmp	r3, #0
 800f464:	d004      	beq.n	800f470 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800f466:	7bbb      	ldrb	r3, [r7, #14]
 800f468:	4619      	mov	r1, r3
 800f46a:	6878      	ldr	r0, [r7, #4]
 800f46c:	f003 ffbc 	bl	80133e8 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800f470:	6878      	ldr	r0, [r7, #4]
 800f472:	f000 fcec 	bl	800fe4e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f47c:	689b      	ldr	r3, [r3, #8]
 800f47e:	6839      	ldr	r1, [r7, #0]
 800f480:	6878      	ldr	r0, [r7, #4]
 800f482:	4798      	blx	r3
 800f484:	4603      	mov	r3, r0
 800f486:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800f488:	e004      	b.n	800f494 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800f48a:	6839      	ldr	r1, [r7, #0]
 800f48c:	6878      	ldr	r0, [r7, #4]
 800f48e:	f000 fc13 	bl	800fcb8 <USBD_CtlError>
              break;
 800f492:	e000      	b.n	800f496 <USBD_StdEPReq+0x154>
              break;
 800f494:	bf00      	nop
          }
          break;
 800f496:	e0ab      	b.n	800f5f0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f49e:	b2db      	uxtb	r3, r3
 800f4a0:	2b02      	cmp	r3, #2
 800f4a2:	d002      	beq.n	800f4aa <USBD_StdEPReq+0x168>
 800f4a4:	2b03      	cmp	r3, #3
 800f4a6:	d032      	beq.n	800f50e <USBD_StdEPReq+0x1cc>
 800f4a8:	e097      	b.n	800f5da <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f4aa:	7bbb      	ldrb	r3, [r7, #14]
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	d007      	beq.n	800f4c0 <USBD_StdEPReq+0x17e>
 800f4b0:	7bbb      	ldrb	r3, [r7, #14]
 800f4b2:	2b80      	cmp	r3, #128	; 0x80
 800f4b4:	d004      	beq.n	800f4c0 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800f4b6:	6839      	ldr	r1, [r7, #0]
 800f4b8:	6878      	ldr	r0, [r7, #4]
 800f4ba:	f000 fbfd 	bl	800fcb8 <USBD_CtlError>
                break;
 800f4be:	e091      	b.n	800f5e4 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f4c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	da0b      	bge.n	800f4e0 <USBD_StdEPReq+0x19e>
 800f4c8:	7bbb      	ldrb	r3, [r7, #14]
 800f4ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f4ce:	4613      	mov	r3, r2
 800f4d0:	009b      	lsls	r3, r3, #2
 800f4d2:	4413      	add	r3, r2
 800f4d4:	009b      	lsls	r3, r3, #2
 800f4d6:	3310      	adds	r3, #16
 800f4d8:	687a      	ldr	r2, [r7, #4]
 800f4da:	4413      	add	r3, r2
 800f4dc:	3304      	adds	r3, #4
 800f4de:	e00b      	b.n	800f4f8 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f4e0:	7bbb      	ldrb	r3, [r7, #14]
 800f4e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f4e6:	4613      	mov	r3, r2
 800f4e8:	009b      	lsls	r3, r3, #2
 800f4ea:	4413      	add	r3, r2
 800f4ec:	009b      	lsls	r3, r3, #2
 800f4ee:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800f4f2:	687a      	ldr	r2, [r7, #4]
 800f4f4:	4413      	add	r3, r2
 800f4f6:	3304      	adds	r3, #4
 800f4f8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800f4fa:	68bb      	ldr	r3, [r7, #8]
 800f4fc:	2200      	movs	r2, #0
 800f4fe:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f500:	68bb      	ldr	r3, [r7, #8]
 800f502:	2202      	movs	r2, #2
 800f504:	4619      	mov	r1, r3
 800f506:	6878      	ldr	r0, [r7, #4]
 800f508:	f000 fc47 	bl	800fd9a <USBD_CtlSendData>
              break;
 800f50c:	e06a      	b.n	800f5e4 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800f50e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f512:	2b00      	cmp	r3, #0
 800f514:	da11      	bge.n	800f53a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800f516:	7bbb      	ldrb	r3, [r7, #14]
 800f518:	f003 020f 	and.w	r2, r3, #15
 800f51c:	6879      	ldr	r1, [r7, #4]
 800f51e:	4613      	mov	r3, r2
 800f520:	009b      	lsls	r3, r3, #2
 800f522:	4413      	add	r3, r2
 800f524:	009b      	lsls	r3, r3, #2
 800f526:	440b      	add	r3, r1
 800f528:	3324      	adds	r3, #36	; 0x24
 800f52a:	881b      	ldrh	r3, [r3, #0]
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d117      	bne.n	800f560 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800f530:	6839      	ldr	r1, [r7, #0]
 800f532:	6878      	ldr	r0, [r7, #4]
 800f534:	f000 fbc0 	bl	800fcb8 <USBD_CtlError>
                  break;
 800f538:	e054      	b.n	800f5e4 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800f53a:	7bbb      	ldrb	r3, [r7, #14]
 800f53c:	f003 020f 	and.w	r2, r3, #15
 800f540:	6879      	ldr	r1, [r7, #4]
 800f542:	4613      	mov	r3, r2
 800f544:	009b      	lsls	r3, r3, #2
 800f546:	4413      	add	r3, r2
 800f548:	009b      	lsls	r3, r3, #2
 800f54a:	440b      	add	r3, r1
 800f54c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800f550:	881b      	ldrh	r3, [r3, #0]
 800f552:	2b00      	cmp	r3, #0
 800f554:	d104      	bne.n	800f560 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800f556:	6839      	ldr	r1, [r7, #0]
 800f558:	6878      	ldr	r0, [r7, #4]
 800f55a:	f000 fbad 	bl	800fcb8 <USBD_CtlError>
                  break;
 800f55e:	e041      	b.n	800f5e4 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f560:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f564:	2b00      	cmp	r3, #0
 800f566:	da0b      	bge.n	800f580 <USBD_StdEPReq+0x23e>
 800f568:	7bbb      	ldrb	r3, [r7, #14]
 800f56a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f56e:	4613      	mov	r3, r2
 800f570:	009b      	lsls	r3, r3, #2
 800f572:	4413      	add	r3, r2
 800f574:	009b      	lsls	r3, r3, #2
 800f576:	3310      	adds	r3, #16
 800f578:	687a      	ldr	r2, [r7, #4]
 800f57a:	4413      	add	r3, r2
 800f57c:	3304      	adds	r3, #4
 800f57e:	e00b      	b.n	800f598 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f580:	7bbb      	ldrb	r3, [r7, #14]
 800f582:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f586:	4613      	mov	r3, r2
 800f588:	009b      	lsls	r3, r3, #2
 800f58a:	4413      	add	r3, r2
 800f58c:	009b      	lsls	r3, r3, #2
 800f58e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800f592:	687a      	ldr	r2, [r7, #4]
 800f594:	4413      	add	r3, r2
 800f596:	3304      	adds	r3, #4
 800f598:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800f59a:	7bbb      	ldrb	r3, [r7, #14]
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	d002      	beq.n	800f5a6 <USBD_StdEPReq+0x264>
 800f5a0:	7bbb      	ldrb	r3, [r7, #14]
 800f5a2:	2b80      	cmp	r3, #128	; 0x80
 800f5a4:	d103      	bne.n	800f5ae <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800f5a6:	68bb      	ldr	r3, [r7, #8]
 800f5a8:	2200      	movs	r2, #0
 800f5aa:	601a      	str	r2, [r3, #0]
 800f5ac:	e00e      	b.n	800f5cc <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800f5ae:	7bbb      	ldrb	r3, [r7, #14]
 800f5b0:	4619      	mov	r1, r3
 800f5b2:	6878      	ldr	r0, [r7, #4]
 800f5b4:	f003 ff4e 	bl	8013454 <USBD_LL_IsStallEP>
 800f5b8:	4603      	mov	r3, r0
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	d003      	beq.n	800f5c6 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800f5be:	68bb      	ldr	r3, [r7, #8]
 800f5c0:	2201      	movs	r2, #1
 800f5c2:	601a      	str	r2, [r3, #0]
 800f5c4:	e002      	b.n	800f5cc <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800f5c6:	68bb      	ldr	r3, [r7, #8]
 800f5c8:	2200      	movs	r2, #0
 800f5ca:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f5cc:	68bb      	ldr	r3, [r7, #8]
 800f5ce:	2202      	movs	r2, #2
 800f5d0:	4619      	mov	r1, r3
 800f5d2:	6878      	ldr	r0, [r7, #4]
 800f5d4:	f000 fbe1 	bl	800fd9a <USBD_CtlSendData>
              break;
 800f5d8:	e004      	b.n	800f5e4 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800f5da:	6839      	ldr	r1, [r7, #0]
 800f5dc:	6878      	ldr	r0, [r7, #4]
 800f5de:	f000 fb6b 	bl	800fcb8 <USBD_CtlError>
              break;
 800f5e2:	bf00      	nop
          }
          break;
 800f5e4:	e004      	b.n	800f5f0 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800f5e6:	6839      	ldr	r1, [r7, #0]
 800f5e8:	6878      	ldr	r0, [r7, #4]
 800f5ea:	f000 fb65 	bl	800fcb8 <USBD_CtlError>
          break;
 800f5ee:	bf00      	nop
      }
      break;
 800f5f0:	e004      	b.n	800f5fc <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800f5f2:	6839      	ldr	r1, [r7, #0]
 800f5f4:	6878      	ldr	r0, [r7, #4]
 800f5f6:	f000 fb5f 	bl	800fcb8 <USBD_CtlError>
      break;
 800f5fa:	bf00      	nop
  }

  return ret;
 800f5fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800f5fe:	4618      	mov	r0, r3
 800f600:	3710      	adds	r7, #16
 800f602:	46bd      	mov	sp, r7
 800f604:	bd80      	pop	{r7, pc}
	...

0800f608 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f608:	b580      	push	{r7, lr}
 800f60a:	b084      	sub	sp, #16
 800f60c:	af00      	add	r7, sp, #0
 800f60e:	6078      	str	r0, [r7, #4]
 800f610:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f612:	2300      	movs	r3, #0
 800f614:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800f616:	2300      	movs	r3, #0
 800f618:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800f61a:	2300      	movs	r3, #0
 800f61c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800f61e:	683b      	ldr	r3, [r7, #0]
 800f620:	885b      	ldrh	r3, [r3, #2]
 800f622:	0a1b      	lsrs	r3, r3, #8
 800f624:	b29b      	uxth	r3, r3
 800f626:	3b01      	subs	r3, #1
 800f628:	2b0e      	cmp	r3, #14
 800f62a:	f200 8152 	bhi.w	800f8d2 <USBD_GetDescriptor+0x2ca>
 800f62e:	a201      	add	r2, pc, #4	; (adr r2, 800f634 <USBD_GetDescriptor+0x2c>)
 800f630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f634:	0800f6a5 	.word	0x0800f6a5
 800f638:	0800f6bd 	.word	0x0800f6bd
 800f63c:	0800f6fd 	.word	0x0800f6fd
 800f640:	0800f8d3 	.word	0x0800f8d3
 800f644:	0800f8d3 	.word	0x0800f8d3
 800f648:	0800f873 	.word	0x0800f873
 800f64c:	0800f89f 	.word	0x0800f89f
 800f650:	0800f8d3 	.word	0x0800f8d3
 800f654:	0800f8d3 	.word	0x0800f8d3
 800f658:	0800f8d3 	.word	0x0800f8d3
 800f65c:	0800f8d3 	.word	0x0800f8d3
 800f660:	0800f8d3 	.word	0x0800f8d3
 800f664:	0800f8d3 	.word	0x0800f8d3
 800f668:	0800f8d3 	.word	0x0800f8d3
 800f66c:	0800f671 	.word	0x0800f671
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f676:	69db      	ldr	r3, [r3, #28]
 800f678:	2b00      	cmp	r3, #0
 800f67a:	d00b      	beq.n	800f694 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f682:	69db      	ldr	r3, [r3, #28]
 800f684:	687a      	ldr	r2, [r7, #4]
 800f686:	7c12      	ldrb	r2, [r2, #16]
 800f688:	f107 0108 	add.w	r1, r7, #8
 800f68c:	4610      	mov	r0, r2
 800f68e:	4798      	blx	r3
 800f690:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f692:	e126      	b.n	800f8e2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800f694:	6839      	ldr	r1, [r7, #0]
 800f696:	6878      	ldr	r0, [r7, #4]
 800f698:	f000 fb0e 	bl	800fcb8 <USBD_CtlError>
        err++;
 800f69c:	7afb      	ldrb	r3, [r7, #11]
 800f69e:	3301      	adds	r3, #1
 800f6a0:	72fb      	strb	r3, [r7, #11]
      break;
 800f6a2:	e11e      	b.n	800f8e2 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f6aa:	681b      	ldr	r3, [r3, #0]
 800f6ac:	687a      	ldr	r2, [r7, #4]
 800f6ae:	7c12      	ldrb	r2, [r2, #16]
 800f6b0:	f107 0108 	add.w	r1, r7, #8
 800f6b4:	4610      	mov	r0, r2
 800f6b6:	4798      	blx	r3
 800f6b8:	60f8      	str	r0, [r7, #12]
      break;
 800f6ba:	e112      	b.n	800f8e2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	7c1b      	ldrb	r3, [r3, #16]
 800f6c0:	2b00      	cmp	r3, #0
 800f6c2:	d10d      	bne.n	800f6e0 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f6ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f6cc:	f107 0208 	add.w	r2, r7, #8
 800f6d0:	4610      	mov	r0, r2
 800f6d2:	4798      	blx	r3
 800f6d4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f6d6:	68fb      	ldr	r3, [r7, #12]
 800f6d8:	3301      	adds	r3, #1
 800f6da:	2202      	movs	r2, #2
 800f6dc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800f6de:	e100      	b.n	800f8e2 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f6e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f6e8:	f107 0208 	add.w	r2, r7, #8
 800f6ec:	4610      	mov	r0, r2
 800f6ee:	4798      	blx	r3
 800f6f0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f6f2:	68fb      	ldr	r3, [r7, #12]
 800f6f4:	3301      	adds	r3, #1
 800f6f6:	2202      	movs	r2, #2
 800f6f8:	701a      	strb	r2, [r3, #0]
      break;
 800f6fa:	e0f2      	b.n	800f8e2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800f6fc:	683b      	ldr	r3, [r7, #0]
 800f6fe:	885b      	ldrh	r3, [r3, #2]
 800f700:	b2db      	uxtb	r3, r3
 800f702:	2b05      	cmp	r3, #5
 800f704:	f200 80ac 	bhi.w	800f860 <USBD_GetDescriptor+0x258>
 800f708:	a201      	add	r2, pc, #4	; (adr r2, 800f710 <USBD_GetDescriptor+0x108>)
 800f70a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f70e:	bf00      	nop
 800f710:	0800f729 	.word	0x0800f729
 800f714:	0800f75d 	.word	0x0800f75d
 800f718:	0800f791 	.word	0x0800f791
 800f71c:	0800f7c5 	.word	0x0800f7c5
 800f720:	0800f7f9 	.word	0x0800f7f9
 800f724:	0800f82d 	.word	0x0800f82d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f72e:	685b      	ldr	r3, [r3, #4]
 800f730:	2b00      	cmp	r3, #0
 800f732:	d00b      	beq.n	800f74c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f73a:	685b      	ldr	r3, [r3, #4]
 800f73c:	687a      	ldr	r2, [r7, #4]
 800f73e:	7c12      	ldrb	r2, [r2, #16]
 800f740:	f107 0108 	add.w	r1, r7, #8
 800f744:	4610      	mov	r0, r2
 800f746:	4798      	blx	r3
 800f748:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f74a:	e091      	b.n	800f870 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f74c:	6839      	ldr	r1, [r7, #0]
 800f74e:	6878      	ldr	r0, [r7, #4]
 800f750:	f000 fab2 	bl	800fcb8 <USBD_CtlError>
            err++;
 800f754:	7afb      	ldrb	r3, [r7, #11]
 800f756:	3301      	adds	r3, #1
 800f758:	72fb      	strb	r3, [r7, #11]
          break;
 800f75a:	e089      	b.n	800f870 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f762:	689b      	ldr	r3, [r3, #8]
 800f764:	2b00      	cmp	r3, #0
 800f766:	d00b      	beq.n	800f780 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f76e:	689b      	ldr	r3, [r3, #8]
 800f770:	687a      	ldr	r2, [r7, #4]
 800f772:	7c12      	ldrb	r2, [r2, #16]
 800f774:	f107 0108 	add.w	r1, r7, #8
 800f778:	4610      	mov	r0, r2
 800f77a:	4798      	blx	r3
 800f77c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f77e:	e077      	b.n	800f870 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f780:	6839      	ldr	r1, [r7, #0]
 800f782:	6878      	ldr	r0, [r7, #4]
 800f784:	f000 fa98 	bl	800fcb8 <USBD_CtlError>
            err++;
 800f788:	7afb      	ldrb	r3, [r7, #11]
 800f78a:	3301      	adds	r3, #1
 800f78c:	72fb      	strb	r3, [r7, #11]
          break;
 800f78e:	e06f      	b.n	800f870 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f796:	68db      	ldr	r3, [r3, #12]
 800f798:	2b00      	cmp	r3, #0
 800f79a:	d00b      	beq.n	800f7b4 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f7a2:	68db      	ldr	r3, [r3, #12]
 800f7a4:	687a      	ldr	r2, [r7, #4]
 800f7a6:	7c12      	ldrb	r2, [r2, #16]
 800f7a8:	f107 0108 	add.w	r1, r7, #8
 800f7ac:	4610      	mov	r0, r2
 800f7ae:	4798      	blx	r3
 800f7b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f7b2:	e05d      	b.n	800f870 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f7b4:	6839      	ldr	r1, [r7, #0]
 800f7b6:	6878      	ldr	r0, [r7, #4]
 800f7b8:	f000 fa7e 	bl	800fcb8 <USBD_CtlError>
            err++;
 800f7bc:	7afb      	ldrb	r3, [r7, #11]
 800f7be:	3301      	adds	r3, #1
 800f7c0:	72fb      	strb	r3, [r7, #11]
          break;
 800f7c2:	e055      	b.n	800f870 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f7ca:	691b      	ldr	r3, [r3, #16]
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d00b      	beq.n	800f7e8 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f7d6:	691b      	ldr	r3, [r3, #16]
 800f7d8:	687a      	ldr	r2, [r7, #4]
 800f7da:	7c12      	ldrb	r2, [r2, #16]
 800f7dc:	f107 0108 	add.w	r1, r7, #8
 800f7e0:	4610      	mov	r0, r2
 800f7e2:	4798      	blx	r3
 800f7e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f7e6:	e043      	b.n	800f870 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f7e8:	6839      	ldr	r1, [r7, #0]
 800f7ea:	6878      	ldr	r0, [r7, #4]
 800f7ec:	f000 fa64 	bl	800fcb8 <USBD_CtlError>
            err++;
 800f7f0:	7afb      	ldrb	r3, [r7, #11]
 800f7f2:	3301      	adds	r3, #1
 800f7f4:	72fb      	strb	r3, [r7, #11]
          break;
 800f7f6:	e03b      	b.n	800f870 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f7fe:	695b      	ldr	r3, [r3, #20]
 800f800:	2b00      	cmp	r3, #0
 800f802:	d00b      	beq.n	800f81c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f80a:	695b      	ldr	r3, [r3, #20]
 800f80c:	687a      	ldr	r2, [r7, #4]
 800f80e:	7c12      	ldrb	r2, [r2, #16]
 800f810:	f107 0108 	add.w	r1, r7, #8
 800f814:	4610      	mov	r0, r2
 800f816:	4798      	blx	r3
 800f818:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f81a:	e029      	b.n	800f870 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f81c:	6839      	ldr	r1, [r7, #0]
 800f81e:	6878      	ldr	r0, [r7, #4]
 800f820:	f000 fa4a 	bl	800fcb8 <USBD_CtlError>
            err++;
 800f824:	7afb      	ldrb	r3, [r7, #11]
 800f826:	3301      	adds	r3, #1
 800f828:	72fb      	strb	r3, [r7, #11]
          break;
 800f82a:	e021      	b.n	800f870 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f832:	699b      	ldr	r3, [r3, #24]
 800f834:	2b00      	cmp	r3, #0
 800f836:	d00b      	beq.n	800f850 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f83e:	699b      	ldr	r3, [r3, #24]
 800f840:	687a      	ldr	r2, [r7, #4]
 800f842:	7c12      	ldrb	r2, [r2, #16]
 800f844:	f107 0108 	add.w	r1, r7, #8
 800f848:	4610      	mov	r0, r2
 800f84a:	4798      	blx	r3
 800f84c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f84e:	e00f      	b.n	800f870 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f850:	6839      	ldr	r1, [r7, #0]
 800f852:	6878      	ldr	r0, [r7, #4]
 800f854:	f000 fa30 	bl	800fcb8 <USBD_CtlError>
            err++;
 800f858:	7afb      	ldrb	r3, [r7, #11]
 800f85a:	3301      	adds	r3, #1
 800f85c:	72fb      	strb	r3, [r7, #11]
          break;
 800f85e:	e007      	b.n	800f870 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800f860:	6839      	ldr	r1, [r7, #0]
 800f862:	6878      	ldr	r0, [r7, #4]
 800f864:	f000 fa28 	bl	800fcb8 <USBD_CtlError>
          err++;
 800f868:	7afb      	ldrb	r3, [r7, #11]
 800f86a:	3301      	adds	r3, #1
 800f86c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800f86e:	bf00      	nop
      }
      break;
 800f870:	e037      	b.n	800f8e2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	7c1b      	ldrb	r3, [r3, #16]
 800f876:	2b00      	cmp	r3, #0
 800f878:	d109      	bne.n	800f88e <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f880:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f882:	f107 0208 	add.w	r2, r7, #8
 800f886:	4610      	mov	r0, r2
 800f888:	4798      	blx	r3
 800f88a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f88c:	e029      	b.n	800f8e2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800f88e:	6839      	ldr	r1, [r7, #0]
 800f890:	6878      	ldr	r0, [r7, #4]
 800f892:	f000 fa11 	bl	800fcb8 <USBD_CtlError>
        err++;
 800f896:	7afb      	ldrb	r3, [r7, #11]
 800f898:	3301      	adds	r3, #1
 800f89a:	72fb      	strb	r3, [r7, #11]
      break;
 800f89c:	e021      	b.n	800f8e2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	7c1b      	ldrb	r3, [r3, #16]
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	d10d      	bne.n	800f8c2 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f8ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f8ae:	f107 0208 	add.w	r2, r7, #8
 800f8b2:	4610      	mov	r0, r2
 800f8b4:	4798      	blx	r3
 800f8b6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800f8b8:	68fb      	ldr	r3, [r7, #12]
 800f8ba:	3301      	adds	r3, #1
 800f8bc:	2207      	movs	r2, #7
 800f8be:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f8c0:	e00f      	b.n	800f8e2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800f8c2:	6839      	ldr	r1, [r7, #0]
 800f8c4:	6878      	ldr	r0, [r7, #4]
 800f8c6:	f000 f9f7 	bl	800fcb8 <USBD_CtlError>
        err++;
 800f8ca:	7afb      	ldrb	r3, [r7, #11]
 800f8cc:	3301      	adds	r3, #1
 800f8ce:	72fb      	strb	r3, [r7, #11]
      break;
 800f8d0:	e007      	b.n	800f8e2 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800f8d2:	6839      	ldr	r1, [r7, #0]
 800f8d4:	6878      	ldr	r0, [r7, #4]
 800f8d6:	f000 f9ef 	bl	800fcb8 <USBD_CtlError>
      err++;
 800f8da:	7afb      	ldrb	r3, [r7, #11]
 800f8dc:	3301      	adds	r3, #1
 800f8de:	72fb      	strb	r3, [r7, #11]
      break;
 800f8e0:	bf00      	nop
  }

  if (err != 0U)
 800f8e2:	7afb      	ldrb	r3, [r7, #11]
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d11e      	bne.n	800f926 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800f8e8:	683b      	ldr	r3, [r7, #0]
 800f8ea:	88db      	ldrh	r3, [r3, #6]
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	d016      	beq.n	800f91e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800f8f0:	893b      	ldrh	r3, [r7, #8]
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d00e      	beq.n	800f914 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800f8f6:	683b      	ldr	r3, [r7, #0]
 800f8f8:	88da      	ldrh	r2, [r3, #6]
 800f8fa:	893b      	ldrh	r3, [r7, #8]
 800f8fc:	4293      	cmp	r3, r2
 800f8fe:	bf28      	it	cs
 800f900:	4613      	movcs	r3, r2
 800f902:	b29b      	uxth	r3, r3
 800f904:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800f906:	893b      	ldrh	r3, [r7, #8]
 800f908:	461a      	mov	r2, r3
 800f90a:	68f9      	ldr	r1, [r7, #12]
 800f90c:	6878      	ldr	r0, [r7, #4]
 800f90e:	f000 fa44 	bl	800fd9a <USBD_CtlSendData>
 800f912:	e009      	b.n	800f928 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800f914:	6839      	ldr	r1, [r7, #0]
 800f916:	6878      	ldr	r0, [r7, #4]
 800f918:	f000 f9ce 	bl	800fcb8 <USBD_CtlError>
 800f91c:	e004      	b.n	800f928 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800f91e:	6878      	ldr	r0, [r7, #4]
 800f920:	f000 fa95 	bl	800fe4e <USBD_CtlSendStatus>
 800f924:	e000      	b.n	800f928 <USBD_GetDescriptor+0x320>
    return;
 800f926:	bf00      	nop
  }
}
 800f928:	3710      	adds	r7, #16
 800f92a:	46bd      	mov	sp, r7
 800f92c:	bd80      	pop	{r7, pc}
 800f92e:	bf00      	nop

0800f930 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f930:	b580      	push	{r7, lr}
 800f932:	b084      	sub	sp, #16
 800f934:	af00      	add	r7, sp, #0
 800f936:	6078      	str	r0, [r7, #4]
 800f938:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800f93a:	683b      	ldr	r3, [r7, #0]
 800f93c:	889b      	ldrh	r3, [r3, #4]
 800f93e:	2b00      	cmp	r3, #0
 800f940:	d131      	bne.n	800f9a6 <USBD_SetAddress+0x76>
 800f942:	683b      	ldr	r3, [r7, #0]
 800f944:	88db      	ldrh	r3, [r3, #6]
 800f946:	2b00      	cmp	r3, #0
 800f948:	d12d      	bne.n	800f9a6 <USBD_SetAddress+0x76>
 800f94a:	683b      	ldr	r3, [r7, #0]
 800f94c:	885b      	ldrh	r3, [r3, #2]
 800f94e:	2b7f      	cmp	r3, #127	; 0x7f
 800f950:	d829      	bhi.n	800f9a6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800f952:	683b      	ldr	r3, [r7, #0]
 800f954:	885b      	ldrh	r3, [r3, #2]
 800f956:	b2db      	uxtb	r3, r3
 800f958:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f95c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f964:	b2db      	uxtb	r3, r3
 800f966:	2b03      	cmp	r3, #3
 800f968:	d104      	bne.n	800f974 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800f96a:	6839      	ldr	r1, [r7, #0]
 800f96c:	6878      	ldr	r0, [r7, #4]
 800f96e:	f000 f9a3 	bl	800fcb8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f972:	e01d      	b.n	800f9b0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	7bfa      	ldrb	r2, [r7, #15]
 800f978:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800f97c:	7bfb      	ldrb	r3, [r7, #15]
 800f97e:	4619      	mov	r1, r3
 800f980:	6878      	ldr	r0, [r7, #4]
 800f982:	f003 fd93 	bl	80134ac <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800f986:	6878      	ldr	r0, [r7, #4]
 800f988:	f000 fa61 	bl	800fe4e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800f98c:	7bfb      	ldrb	r3, [r7, #15]
 800f98e:	2b00      	cmp	r3, #0
 800f990:	d004      	beq.n	800f99c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	2202      	movs	r2, #2
 800f996:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f99a:	e009      	b.n	800f9b0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	2201      	movs	r2, #1
 800f9a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f9a4:	e004      	b.n	800f9b0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800f9a6:	6839      	ldr	r1, [r7, #0]
 800f9a8:	6878      	ldr	r0, [r7, #4]
 800f9aa:	f000 f985 	bl	800fcb8 <USBD_CtlError>
  }
}
 800f9ae:	bf00      	nop
 800f9b0:	bf00      	nop
 800f9b2:	3710      	adds	r7, #16
 800f9b4:	46bd      	mov	sp, r7
 800f9b6:	bd80      	pop	{r7, pc}

0800f9b8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f9b8:	b580      	push	{r7, lr}
 800f9ba:	b084      	sub	sp, #16
 800f9bc:	af00      	add	r7, sp, #0
 800f9be:	6078      	str	r0, [r7, #4]
 800f9c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f9c2:	2300      	movs	r3, #0
 800f9c4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800f9c6:	683b      	ldr	r3, [r7, #0]
 800f9c8:	885b      	ldrh	r3, [r3, #2]
 800f9ca:	b2da      	uxtb	r2, r3
 800f9cc:	4b4c      	ldr	r3, [pc, #304]	; (800fb00 <USBD_SetConfig+0x148>)
 800f9ce:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800f9d0:	4b4b      	ldr	r3, [pc, #300]	; (800fb00 <USBD_SetConfig+0x148>)
 800f9d2:	781b      	ldrb	r3, [r3, #0]
 800f9d4:	2b01      	cmp	r3, #1
 800f9d6:	d905      	bls.n	800f9e4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800f9d8:	6839      	ldr	r1, [r7, #0]
 800f9da:	6878      	ldr	r0, [r7, #4]
 800f9dc:	f000 f96c 	bl	800fcb8 <USBD_CtlError>
    return USBD_FAIL;
 800f9e0:	2303      	movs	r3, #3
 800f9e2:	e088      	b.n	800faf6 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f9ea:	b2db      	uxtb	r3, r3
 800f9ec:	2b02      	cmp	r3, #2
 800f9ee:	d002      	beq.n	800f9f6 <USBD_SetConfig+0x3e>
 800f9f0:	2b03      	cmp	r3, #3
 800f9f2:	d025      	beq.n	800fa40 <USBD_SetConfig+0x88>
 800f9f4:	e071      	b.n	800fada <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800f9f6:	4b42      	ldr	r3, [pc, #264]	; (800fb00 <USBD_SetConfig+0x148>)
 800f9f8:	781b      	ldrb	r3, [r3, #0]
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	d01c      	beq.n	800fa38 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800f9fe:	4b40      	ldr	r3, [pc, #256]	; (800fb00 <USBD_SetConfig+0x148>)
 800fa00:	781b      	ldrb	r3, [r3, #0]
 800fa02:	461a      	mov	r2, r3
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800fa08:	4b3d      	ldr	r3, [pc, #244]	; (800fb00 <USBD_SetConfig+0x148>)
 800fa0a:	781b      	ldrb	r3, [r3, #0]
 800fa0c:	4619      	mov	r1, r3
 800fa0e:	6878      	ldr	r0, [r7, #4]
 800fa10:	f7ff f91e 	bl	800ec50 <USBD_SetClassConfig>
 800fa14:	4603      	mov	r3, r0
 800fa16:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800fa18:	7bfb      	ldrb	r3, [r7, #15]
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	d004      	beq.n	800fa28 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800fa1e:	6839      	ldr	r1, [r7, #0]
 800fa20:	6878      	ldr	r0, [r7, #4]
 800fa22:	f000 f949 	bl	800fcb8 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800fa26:	e065      	b.n	800faf4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800fa28:	6878      	ldr	r0, [r7, #4]
 800fa2a:	f000 fa10 	bl	800fe4e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	2203      	movs	r2, #3
 800fa32:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800fa36:	e05d      	b.n	800faf4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800fa38:	6878      	ldr	r0, [r7, #4]
 800fa3a:	f000 fa08 	bl	800fe4e <USBD_CtlSendStatus>
      break;
 800fa3e:	e059      	b.n	800faf4 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800fa40:	4b2f      	ldr	r3, [pc, #188]	; (800fb00 <USBD_SetConfig+0x148>)
 800fa42:	781b      	ldrb	r3, [r3, #0]
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	d112      	bne.n	800fa6e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	2202      	movs	r2, #2
 800fa4c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800fa50:	4b2b      	ldr	r3, [pc, #172]	; (800fb00 <USBD_SetConfig+0x148>)
 800fa52:	781b      	ldrb	r3, [r3, #0]
 800fa54:	461a      	mov	r2, r3
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800fa5a:	4b29      	ldr	r3, [pc, #164]	; (800fb00 <USBD_SetConfig+0x148>)
 800fa5c:	781b      	ldrb	r3, [r3, #0]
 800fa5e:	4619      	mov	r1, r3
 800fa60:	6878      	ldr	r0, [r7, #4]
 800fa62:	f7ff f911 	bl	800ec88 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800fa66:	6878      	ldr	r0, [r7, #4]
 800fa68:	f000 f9f1 	bl	800fe4e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800fa6c:	e042      	b.n	800faf4 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800fa6e:	4b24      	ldr	r3, [pc, #144]	; (800fb00 <USBD_SetConfig+0x148>)
 800fa70:	781b      	ldrb	r3, [r3, #0]
 800fa72:	461a      	mov	r2, r3
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	685b      	ldr	r3, [r3, #4]
 800fa78:	429a      	cmp	r2, r3
 800fa7a:	d02a      	beq.n	800fad2 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	685b      	ldr	r3, [r3, #4]
 800fa80:	b2db      	uxtb	r3, r3
 800fa82:	4619      	mov	r1, r3
 800fa84:	6878      	ldr	r0, [r7, #4]
 800fa86:	f7ff f8ff 	bl	800ec88 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800fa8a:	4b1d      	ldr	r3, [pc, #116]	; (800fb00 <USBD_SetConfig+0x148>)
 800fa8c:	781b      	ldrb	r3, [r3, #0]
 800fa8e:	461a      	mov	r2, r3
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800fa94:	4b1a      	ldr	r3, [pc, #104]	; (800fb00 <USBD_SetConfig+0x148>)
 800fa96:	781b      	ldrb	r3, [r3, #0]
 800fa98:	4619      	mov	r1, r3
 800fa9a:	6878      	ldr	r0, [r7, #4]
 800fa9c:	f7ff f8d8 	bl	800ec50 <USBD_SetClassConfig>
 800faa0:	4603      	mov	r3, r0
 800faa2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800faa4:	7bfb      	ldrb	r3, [r7, #15]
 800faa6:	2b00      	cmp	r3, #0
 800faa8:	d00f      	beq.n	800faca <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800faaa:	6839      	ldr	r1, [r7, #0]
 800faac:	6878      	ldr	r0, [r7, #4]
 800faae:	f000 f903 	bl	800fcb8 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	685b      	ldr	r3, [r3, #4]
 800fab6:	b2db      	uxtb	r3, r3
 800fab8:	4619      	mov	r1, r3
 800faba:	6878      	ldr	r0, [r7, #4]
 800fabc:	f7ff f8e4 	bl	800ec88 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	2202      	movs	r2, #2
 800fac4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800fac8:	e014      	b.n	800faf4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800faca:	6878      	ldr	r0, [r7, #4]
 800facc:	f000 f9bf 	bl	800fe4e <USBD_CtlSendStatus>
      break;
 800fad0:	e010      	b.n	800faf4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800fad2:	6878      	ldr	r0, [r7, #4]
 800fad4:	f000 f9bb 	bl	800fe4e <USBD_CtlSendStatus>
      break;
 800fad8:	e00c      	b.n	800faf4 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800fada:	6839      	ldr	r1, [r7, #0]
 800fadc:	6878      	ldr	r0, [r7, #4]
 800fade:	f000 f8eb 	bl	800fcb8 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800fae2:	4b07      	ldr	r3, [pc, #28]	; (800fb00 <USBD_SetConfig+0x148>)
 800fae4:	781b      	ldrb	r3, [r3, #0]
 800fae6:	4619      	mov	r1, r3
 800fae8:	6878      	ldr	r0, [r7, #4]
 800faea:	f7ff f8cd 	bl	800ec88 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800faee:	2303      	movs	r3, #3
 800faf0:	73fb      	strb	r3, [r7, #15]
      break;
 800faf2:	bf00      	nop
  }

  return ret;
 800faf4:	7bfb      	ldrb	r3, [r7, #15]
}
 800faf6:	4618      	mov	r0, r3
 800faf8:	3710      	adds	r7, #16
 800fafa:	46bd      	mov	sp, r7
 800fafc:	bd80      	pop	{r7, pc}
 800fafe:	bf00      	nop
 800fb00:	20003f60 	.word	0x20003f60

0800fb04 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fb04:	b580      	push	{r7, lr}
 800fb06:	b082      	sub	sp, #8
 800fb08:	af00      	add	r7, sp, #0
 800fb0a:	6078      	str	r0, [r7, #4]
 800fb0c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800fb0e:	683b      	ldr	r3, [r7, #0]
 800fb10:	88db      	ldrh	r3, [r3, #6]
 800fb12:	2b01      	cmp	r3, #1
 800fb14:	d004      	beq.n	800fb20 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800fb16:	6839      	ldr	r1, [r7, #0]
 800fb18:	6878      	ldr	r0, [r7, #4]
 800fb1a:	f000 f8cd 	bl	800fcb8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800fb1e:	e023      	b.n	800fb68 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fb26:	b2db      	uxtb	r3, r3
 800fb28:	2b02      	cmp	r3, #2
 800fb2a:	dc02      	bgt.n	800fb32 <USBD_GetConfig+0x2e>
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	dc03      	bgt.n	800fb38 <USBD_GetConfig+0x34>
 800fb30:	e015      	b.n	800fb5e <USBD_GetConfig+0x5a>
 800fb32:	2b03      	cmp	r3, #3
 800fb34:	d00b      	beq.n	800fb4e <USBD_GetConfig+0x4a>
 800fb36:	e012      	b.n	800fb5e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	2200      	movs	r2, #0
 800fb3c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	3308      	adds	r3, #8
 800fb42:	2201      	movs	r2, #1
 800fb44:	4619      	mov	r1, r3
 800fb46:	6878      	ldr	r0, [r7, #4]
 800fb48:	f000 f927 	bl	800fd9a <USBD_CtlSendData>
        break;
 800fb4c:	e00c      	b.n	800fb68 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	3304      	adds	r3, #4
 800fb52:	2201      	movs	r2, #1
 800fb54:	4619      	mov	r1, r3
 800fb56:	6878      	ldr	r0, [r7, #4]
 800fb58:	f000 f91f 	bl	800fd9a <USBD_CtlSendData>
        break;
 800fb5c:	e004      	b.n	800fb68 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800fb5e:	6839      	ldr	r1, [r7, #0]
 800fb60:	6878      	ldr	r0, [r7, #4]
 800fb62:	f000 f8a9 	bl	800fcb8 <USBD_CtlError>
        break;
 800fb66:	bf00      	nop
}
 800fb68:	bf00      	nop
 800fb6a:	3708      	adds	r7, #8
 800fb6c:	46bd      	mov	sp, r7
 800fb6e:	bd80      	pop	{r7, pc}

0800fb70 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fb70:	b580      	push	{r7, lr}
 800fb72:	b082      	sub	sp, #8
 800fb74:	af00      	add	r7, sp, #0
 800fb76:	6078      	str	r0, [r7, #4]
 800fb78:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fb80:	b2db      	uxtb	r3, r3
 800fb82:	3b01      	subs	r3, #1
 800fb84:	2b02      	cmp	r3, #2
 800fb86:	d81e      	bhi.n	800fbc6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800fb88:	683b      	ldr	r3, [r7, #0]
 800fb8a:	88db      	ldrh	r3, [r3, #6]
 800fb8c:	2b02      	cmp	r3, #2
 800fb8e:	d004      	beq.n	800fb9a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800fb90:	6839      	ldr	r1, [r7, #0]
 800fb92:	6878      	ldr	r0, [r7, #4]
 800fb94:	f000 f890 	bl	800fcb8 <USBD_CtlError>
        break;
 800fb98:	e01a      	b.n	800fbd0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	2201      	movs	r2, #1
 800fb9e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	d005      	beq.n	800fbb6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	68db      	ldr	r3, [r3, #12]
 800fbae:	f043 0202 	orr.w	r2, r3, #2
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	330c      	adds	r3, #12
 800fbba:	2202      	movs	r2, #2
 800fbbc:	4619      	mov	r1, r3
 800fbbe:	6878      	ldr	r0, [r7, #4]
 800fbc0:	f000 f8eb 	bl	800fd9a <USBD_CtlSendData>
      break;
 800fbc4:	e004      	b.n	800fbd0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800fbc6:	6839      	ldr	r1, [r7, #0]
 800fbc8:	6878      	ldr	r0, [r7, #4]
 800fbca:	f000 f875 	bl	800fcb8 <USBD_CtlError>
      break;
 800fbce:	bf00      	nop
  }
}
 800fbd0:	bf00      	nop
 800fbd2:	3708      	adds	r7, #8
 800fbd4:	46bd      	mov	sp, r7
 800fbd6:	bd80      	pop	{r7, pc}

0800fbd8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fbd8:	b580      	push	{r7, lr}
 800fbda:	b082      	sub	sp, #8
 800fbdc:	af00      	add	r7, sp, #0
 800fbde:	6078      	str	r0, [r7, #4]
 800fbe0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800fbe2:	683b      	ldr	r3, [r7, #0]
 800fbe4:	885b      	ldrh	r3, [r3, #2]
 800fbe6:	2b01      	cmp	r3, #1
 800fbe8:	d106      	bne.n	800fbf8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	2201      	movs	r2, #1
 800fbee:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800fbf2:	6878      	ldr	r0, [r7, #4]
 800fbf4:	f000 f92b 	bl	800fe4e <USBD_CtlSendStatus>
  }
}
 800fbf8:	bf00      	nop
 800fbfa:	3708      	adds	r7, #8
 800fbfc:	46bd      	mov	sp, r7
 800fbfe:	bd80      	pop	{r7, pc}

0800fc00 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fc00:	b580      	push	{r7, lr}
 800fc02:	b082      	sub	sp, #8
 800fc04:	af00      	add	r7, sp, #0
 800fc06:	6078      	str	r0, [r7, #4]
 800fc08:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fc10:	b2db      	uxtb	r3, r3
 800fc12:	3b01      	subs	r3, #1
 800fc14:	2b02      	cmp	r3, #2
 800fc16:	d80b      	bhi.n	800fc30 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800fc18:	683b      	ldr	r3, [r7, #0]
 800fc1a:	885b      	ldrh	r3, [r3, #2]
 800fc1c:	2b01      	cmp	r3, #1
 800fc1e:	d10c      	bne.n	800fc3a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	2200      	movs	r2, #0
 800fc24:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800fc28:	6878      	ldr	r0, [r7, #4]
 800fc2a:	f000 f910 	bl	800fe4e <USBD_CtlSendStatus>
      }
      break;
 800fc2e:	e004      	b.n	800fc3a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800fc30:	6839      	ldr	r1, [r7, #0]
 800fc32:	6878      	ldr	r0, [r7, #4]
 800fc34:	f000 f840 	bl	800fcb8 <USBD_CtlError>
      break;
 800fc38:	e000      	b.n	800fc3c <USBD_ClrFeature+0x3c>
      break;
 800fc3a:	bf00      	nop
  }
}
 800fc3c:	bf00      	nop
 800fc3e:	3708      	adds	r7, #8
 800fc40:	46bd      	mov	sp, r7
 800fc42:	bd80      	pop	{r7, pc}

0800fc44 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800fc44:	b580      	push	{r7, lr}
 800fc46:	b084      	sub	sp, #16
 800fc48:	af00      	add	r7, sp, #0
 800fc4a:	6078      	str	r0, [r7, #4]
 800fc4c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800fc4e:	683b      	ldr	r3, [r7, #0]
 800fc50:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800fc52:	68fb      	ldr	r3, [r7, #12]
 800fc54:	781a      	ldrb	r2, [r3, #0]
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800fc5a:	68fb      	ldr	r3, [r7, #12]
 800fc5c:	3301      	adds	r3, #1
 800fc5e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800fc60:	68fb      	ldr	r3, [r7, #12]
 800fc62:	781a      	ldrb	r2, [r3, #0]
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800fc68:	68fb      	ldr	r3, [r7, #12]
 800fc6a:	3301      	adds	r3, #1
 800fc6c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800fc6e:	68f8      	ldr	r0, [r7, #12]
 800fc70:	f7ff fa91 	bl	800f196 <SWAPBYTE>
 800fc74:	4603      	mov	r3, r0
 800fc76:	461a      	mov	r2, r3
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800fc7c:	68fb      	ldr	r3, [r7, #12]
 800fc7e:	3301      	adds	r3, #1
 800fc80:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800fc82:	68fb      	ldr	r3, [r7, #12]
 800fc84:	3301      	adds	r3, #1
 800fc86:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800fc88:	68f8      	ldr	r0, [r7, #12]
 800fc8a:	f7ff fa84 	bl	800f196 <SWAPBYTE>
 800fc8e:	4603      	mov	r3, r0
 800fc90:	461a      	mov	r2, r3
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800fc96:	68fb      	ldr	r3, [r7, #12]
 800fc98:	3301      	adds	r3, #1
 800fc9a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800fc9c:	68fb      	ldr	r3, [r7, #12]
 800fc9e:	3301      	adds	r3, #1
 800fca0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800fca2:	68f8      	ldr	r0, [r7, #12]
 800fca4:	f7ff fa77 	bl	800f196 <SWAPBYTE>
 800fca8:	4603      	mov	r3, r0
 800fcaa:	461a      	mov	r2, r3
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	80da      	strh	r2, [r3, #6]
}
 800fcb0:	bf00      	nop
 800fcb2:	3710      	adds	r7, #16
 800fcb4:	46bd      	mov	sp, r7
 800fcb6:	bd80      	pop	{r7, pc}

0800fcb8 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fcb8:	b580      	push	{r7, lr}
 800fcba:	b082      	sub	sp, #8
 800fcbc:	af00      	add	r7, sp, #0
 800fcbe:	6078      	str	r0, [r7, #4]
 800fcc0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800fcc2:	2180      	movs	r1, #128	; 0x80
 800fcc4:	6878      	ldr	r0, [r7, #4]
 800fcc6:	f003 fb59 	bl	801337c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800fcca:	2100      	movs	r1, #0
 800fccc:	6878      	ldr	r0, [r7, #4]
 800fcce:	f003 fb55 	bl	801337c <USBD_LL_StallEP>
}
 800fcd2:	bf00      	nop
 800fcd4:	3708      	adds	r7, #8
 800fcd6:	46bd      	mov	sp, r7
 800fcd8:	bd80      	pop	{r7, pc}

0800fcda <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800fcda:	b580      	push	{r7, lr}
 800fcdc:	b086      	sub	sp, #24
 800fcde:	af00      	add	r7, sp, #0
 800fce0:	60f8      	str	r0, [r7, #12]
 800fce2:	60b9      	str	r1, [r7, #8]
 800fce4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800fce6:	2300      	movs	r3, #0
 800fce8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800fcea:	68fb      	ldr	r3, [r7, #12]
 800fcec:	2b00      	cmp	r3, #0
 800fcee:	d036      	beq.n	800fd5e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800fcf0:	68fb      	ldr	r3, [r7, #12]
 800fcf2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800fcf4:	6938      	ldr	r0, [r7, #16]
 800fcf6:	f000 f836 	bl	800fd66 <USBD_GetLen>
 800fcfa:	4603      	mov	r3, r0
 800fcfc:	3301      	adds	r3, #1
 800fcfe:	b29b      	uxth	r3, r3
 800fd00:	005b      	lsls	r3, r3, #1
 800fd02:	b29a      	uxth	r2, r3
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800fd08:	7dfb      	ldrb	r3, [r7, #23]
 800fd0a:	68ba      	ldr	r2, [r7, #8]
 800fd0c:	4413      	add	r3, r2
 800fd0e:	687a      	ldr	r2, [r7, #4]
 800fd10:	7812      	ldrb	r2, [r2, #0]
 800fd12:	701a      	strb	r2, [r3, #0]
  idx++;
 800fd14:	7dfb      	ldrb	r3, [r7, #23]
 800fd16:	3301      	adds	r3, #1
 800fd18:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800fd1a:	7dfb      	ldrb	r3, [r7, #23]
 800fd1c:	68ba      	ldr	r2, [r7, #8]
 800fd1e:	4413      	add	r3, r2
 800fd20:	2203      	movs	r2, #3
 800fd22:	701a      	strb	r2, [r3, #0]
  idx++;
 800fd24:	7dfb      	ldrb	r3, [r7, #23]
 800fd26:	3301      	adds	r3, #1
 800fd28:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800fd2a:	e013      	b.n	800fd54 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800fd2c:	7dfb      	ldrb	r3, [r7, #23]
 800fd2e:	68ba      	ldr	r2, [r7, #8]
 800fd30:	4413      	add	r3, r2
 800fd32:	693a      	ldr	r2, [r7, #16]
 800fd34:	7812      	ldrb	r2, [r2, #0]
 800fd36:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800fd38:	693b      	ldr	r3, [r7, #16]
 800fd3a:	3301      	adds	r3, #1
 800fd3c:	613b      	str	r3, [r7, #16]
    idx++;
 800fd3e:	7dfb      	ldrb	r3, [r7, #23]
 800fd40:	3301      	adds	r3, #1
 800fd42:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800fd44:	7dfb      	ldrb	r3, [r7, #23]
 800fd46:	68ba      	ldr	r2, [r7, #8]
 800fd48:	4413      	add	r3, r2
 800fd4a:	2200      	movs	r2, #0
 800fd4c:	701a      	strb	r2, [r3, #0]
    idx++;
 800fd4e:	7dfb      	ldrb	r3, [r7, #23]
 800fd50:	3301      	adds	r3, #1
 800fd52:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800fd54:	693b      	ldr	r3, [r7, #16]
 800fd56:	781b      	ldrb	r3, [r3, #0]
 800fd58:	2b00      	cmp	r3, #0
 800fd5a:	d1e7      	bne.n	800fd2c <USBD_GetString+0x52>
 800fd5c:	e000      	b.n	800fd60 <USBD_GetString+0x86>
    return;
 800fd5e:	bf00      	nop
  }
}
 800fd60:	3718      	adds	r7, #24
 800fd62:	46bd      	mov	sp, r7
 800fd64:	bd80      	pop	{r7, pc}

0800fd66 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800fd66:	b480      	push	{r7}
 800fd68:	b085      	sub	sp, #20
 800fd6a:	af00      	add	r7, sp, #0
 800fd6c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800fd6e:	2300      	movs	r3, #0
 800fd70:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800fd76:	e005      	b.n	800fd84 <USBD_GetLen+0x1e>
  {
    len++;
 800fd78:	7bfb      	ldrb	r3, [r7, #15]
 800fd7a:	3301      	adds	r3, #1
 800fd7c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800fd7e:	68bb      	ldr	r3, [r7, #8]
 800fd80:	3301      	adds	r3, #1
 800fd82:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800fd84:	68bb      	ldr	r3, [r7, #8]
 800fd86:	781b      	ldrb	r3, [r3, #0]
 800fd88:	2b00      	cmp	r3, #0
 800fd8a:	d1f5      	bne.n	800fd78 <USBD_GetLen+0x12>
  }

  return len;
 800fd8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd8e:	4618      	mov	r0, r3
 800fd90:	3714      	adds	r7, #20
 800fd92:	46bd      	mov	sp, r7
 800fd94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd98:	4770      	bx	lr

0800fd9a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800fd9a:	b580      	push	{r7, lr}
 800fd9c:	b084      	sub	sp, #16
 800fd9e:	af00      	add	r7, sp, #0
 800fda0:	60f8      	str	r0, [r7, #12]
 800fda2:	60b9      	str	r1, [r7, #8]
 800fda4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800fda6:	68fb      	ldr	r3, [r7, #12]
 800fda8:	2202      	movs	r2, #2
 800fdaa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800fdae:	68fb      	ldr	r3, [r7, #12]
 800fdb0:	687a      	ldr	r2, [r7, #4]
 800fdb2:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800fdb4:	68fb      	ldr	r3, [r7, #12]
 800fdb6:	687a      	ldr	r2, [r7, #4]
 800fdb8:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	68ba      	ldr	r2, [r7, #8]
 800fdbe:	2100      	movs	r1, #0
 800fdc0:	68f8      	ldr	r0, [r7, #12]
 800fdc2:	f003 fba9 	bl	8013518 <USBD_LL_Transmit>

  return USBD_OK;
 800fdc6:	2300      	movs	r3, #0
}
 800fdc8:	4618      	mov	r0, r3
 800fdca:	3710      	adds	r7, #16
 800fdcc:	46bd      	mov	sp, r7
 800fdce:	bd80      	pop	{r7, pc}

0800fdd0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800fdd0:	b580      	push	{r7, lr}
 800fdd2:	b084      	sub	sp, #16
 800fdd4:	af00      	add	r7, sp, #0
 800fdd6:	60f8      	str	r0, [r7, #12]
 800fdd8:	60b9      	str	r1, [r7, #8]
 800fdda:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	68ba      	ldr	r2, [r7, #8]
 800fde0:	2100      	movs	r1, #0
 800fde2:	68f8      	ldr	r0, [r7, #12]
 800fde4:	f003 fb98 	bl	8013518 <USBD_LL_Transmit>

  return USBD_OK;
 800fde8:	2300      	movs	r3, #0
}
 800fdea:	4618      	mov	r0, r3
 800fdec:	3710      	adds	r7, #16
 800fdee:	46bd      	mov	sp, r7
 800fdf0:	bd80      	pop	{r7, pc}

0800fdf2 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800fdf2:	b580      	push	{r7, lr}
 800fdf4:	b084      	sub	sp, #16
 800fdf6:	af00      	add	r7, sp, #0
 800fdf8:	60f8      	str	r0, [r7, #12]
 800fdfa:	60b9      	str	r1, [r7, #8]
 800fdfc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800fdfe:	68fb      	ldr	r3, [r7, #12]
 800fe00:	2203      	movs	r2, #3
 800fe02:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800fe06:	68fb      	ldr	r3, [r7, #12]
 800fe08:	687a      	ldr	r2, [r7, #4]
 800fe0a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800fe0e:	68fb      	ldr	r3, [r7, #12]
 800fe10:	687a      	ldr	r2, [r7, #4]
 800fe12:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	68ba      	ldr	r2, [r7, #8]
 800fe1a:	2100      	movs	r1, #0
 800fe1c:	68f8      	ldr	r0, [r7, #12]
 800fe1e:	f003 fbb3 	bl	8013588 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fe22:	2300      	movs	r3, #0
}
 800fe24:	4618      	mov	r0, r3
 800fe26:	3710      	adds	r7, #16
 800fe28:	46bd      	mov	sp, r7
 800fe2a:	bd80      	pop	{r7, pc}

0800fe2c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800fe2c:	b580      	push	{r7, lr}
 800fe2e:	b084      	sub	sp, #16
 800fe30:	af00      	add	r7, sp, #0
 800fe32:	60f8      	str	r0, [r7, #12]
 800fe34:	60b9      	str	r1, [r7, #8]
 800fe36:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	68ba      	ldr	r2, [r7, #8]
 800fe3c:	2100      	movs	r1, #0
 800fe3e:	68f8      	ldr	r0, [r7, #12]
 800fe40:	f003 fba2 	bl	8013588 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fe44:	2300      	movs	r3, #0
}
 800fe46:	4618      	mov	r0, r3
 800fe48:	3710      	adds	r7, #16
 800fe4a:	46bd      	mov	sp, r7
 800fe4c:	bd80      	pop	{r7, pc}

0800fe4e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800fe4e:	b580      	push	{r7, lr}
 800fe50:	b082      	sub	sp, #8
 800fe52:	af00      	add	r7, sp, #0
 800fe54:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	2204      	movs	r2, #4
 800fe5a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800fe5e:	2300      	movs	r3, #0
 800fe60:	2200      	movs	r2, #0
 800fe62:	2100      	movs	r1, #0
 800fe64:	6878      	ldr	r0, [r7, #4]
 800fe66:	f003 fb57 	bl	8013518 <USBD_LL_Transmit>

  return USBD_OK;
 800fe6a:	2300      	movs	r3, #0
}
 800fe6c:	4618      	mov	r0, r3
 800fe6e:	3708      	adds	r7, #8
 800fe70:	46bd      	mov	sp, r7
 800fe72:	bd80      	pop	{r7, pc}

0800fe74 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800fe74:	b580      	push	{r7, lr}
 800fe76:	b082      	sub	sp, #8
 800fe78:	af00      	add	r7, sp, #0
 800fe7a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	2205      	movs	r2, #5
 800fe80:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800fe84:	2300      	movs	r3, #0
 800fe86:	2200      	movs	r2, #0
 800fe88:	2100      	movs	r1, #0
 800fe8a:	6878      	ldr	r0, [r7, #4]
 800fe8c:	f003 fb7c 	bl	8013588 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fe90:	2300      	movs	r3, #0
}
 800fe92:	4618      	mov	r0, r3
 800fe94:	3708      	adds	r7, #8
 800fe96:	46bd      	mov	sp, r7
 800fe98:	bd80      	pop	{r7, pc}
	...

0800fe9c <__NVIC_SetPriority>:
{
 800fe9c:	b480      	push	{r7}
 800fe9e:	b083      	sub	sp, #12
 800fea0:	af00      	add	r7, sp, #0
 800fea2:	4603      	mov	r3, r0
 800fea4:	6039      	str	r1, [r7, #0]
 800fea6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800fea8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800feac:	2b00      	cmp	r3, #0
 800feae:	db0a      	blt.n	800fec6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800feb0:	683b      	ldr	r3, [r7, #0]
 800feb2:	b2da      	uxtb	r2, r3
 800feb4:	490c      	ldr	r1, [pc, #48]	; (800fee8 <__NVIC_SetPriority+0x4c>)
 800feb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800feba:	0112      	lsls	r2, r2, #4
 800febc:	b2d2      	uxtb	r2, r2
 800febe:	440b      	add	r3, r1
 800fec0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800fec4:	e00a      	b.n	800fedc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800fec6:	683b      	ldr	r3, [r7, #0]
 800fec8:	b2da      	uxtb	r2, r3
 800feca:	4908      	ldr	r1, [pc, #32]	; (800feec <__NVIC_SetPriority+0x50>)
 800fecc:	79fb      	ldrb	r3, [r7, #7]
 800fece:	f003 030f 	and.w	r3, r3, #15
 800fed2:	3b04      	subs	r3, #4
 800fed4:	0112      	lsls	r2, r2, #4
 800fed6:	b2d2      	uxtb	r2, r2
 800fed8:	440b      	add	r3, r1
 800feda:	761a      	strb	r2, [r3, #24]
}
 800fedc:	bf00      	nop
 800fede:	370c      	adds	r7, #12
 800fee0:	46bd      	mov	sp, r7
 800fee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fee6:	4770      	bx	lr
 800fee8:	e000e100 	.word	0xe000e100
 800feec:	e000ed00 	.word	0xe000ed00

0800fef0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800fef0:	b580      	push	{r7, lr}
 800fef2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800fef4:	4b05      	ldr	r3, [pc, #20]	; (800ff0c <SysTick_Handler+0x1c>)
 800fef6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800fef8:	f001 fd28 	bl	801194c <xTaskGetSchedulerState>
 800fefc:	4603      	mov	r3, r0
 800fefe:	2b01      	cmp	r3, #1
 800ff00:	d001      	beq.n	800ff06 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800ff02:	f002 fb11 	bl	8012528 <xPortSysTickHandler>
  }
}
 800ff06:	bf00      	nop
 800ff08:	bd80      	pop	{r7, pc}
 800ff0a:	bf00      	nop
 800ff0c:	e000e010 	.word	0xe000e010

0800ff10 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800ff10:	b580      	push	{r7, lr}
 800ff12:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800ff14:	2100      	movs	r1, #0
 800ff16:	f06f 0004 	mvn.w	r0, #4
 800ff1a:	f7ff ffbf 	bl	800fe9c <__NVIC_SetPriority>
#endif
}
 800ff1e:	bf00      	nop
 800ff20:	bd80      	pop	{r7, pc}
	...

0800ff24 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800ff24:	b480      	push	{r7}
 800ff26:	b083      	sub	sp, #12
 800ff28:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ff2a:	f3ef 8305 	mrs	r3, IPSR
 800ff2e:	603b      	str	r3, [r7, #0]
  return(result);
 800ff30:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	d003      	beq.n	800ff3e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800ff36:	f06f 0305 	mvn.w	r3, #5
 800ff3a:	607b      	str	r3, [r7, #4]
 800ff3c:	e00c      	b.n	800ff58 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800ff3e:	4b0a      	ldr	r3, [pc, #40]	; (800ff68 <osKernelInitialize+0x44>)
 800ff40:	681b      	ldr	r3, [r3, #0]
 800ff42:	2b00      	cmp	r3, #0
 800ff44:	d105      	bne.n	800ff52 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800ff46:	4b08      	ldr	r3, [pc, #32]	; (800ff68 <osKernelInitialize+0x44>)
 800ff48:	2201      	movs	r2, #1
 800ff4a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800ff4c:	2300      	movs	r3, #0
 800ff4e:	607b      	str	r3, [r7, #4]
 800ff50:	e002      	b.n	800ff58 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800ff52:	f04f 33ff 	mov.w	r3, #4294967295
 800ff56:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ff58:	687b      	ldr	r3, [r7, #4]
}
 800ff5a:	4618      	mov	r0, r3
 800ff5c:	370c      	adds	r7, #12
 800ff5e:	46bd      	mov	sp, r7
 800ff60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff64:	4770      	bx	lr
 800ff66:	bf00      	nop
 800ff68:	20003f64 	.word	0x20003f64

0800ff6c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800ff6c:	b580      	push	{r7, lr}
 800ff6e:	b082      	sub	sp, #8
 800ff70:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ff72:	f3ef 8305 	mrs	r3, IPSR
 800ff76:	603b      	str	r3, [r7, #0]
  return(result);
 800ff78:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ff7a:	2b00      	cmp	r3, #0
 800ff7c:	d003      	beq.n	800ff86 <osKernelStart+0x1a>
    stat = osErrorISR;
 800ff7e:	f06f 0305 	mvn.w	r3, #5
 800ff82:	607b      	str	r3, [r7, #4]
 800ff84:	e010      	b.n	800ffa8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800ff86:	4b0b      	ldr	r3, [pc, #44]	; (800ffb4 <osKernelStart+0x48>)
 800ff88:	681b      	ldr	r3, [r3, #0]
 800ff8a:	2b01      	cmp	r3, #1
 800ff8c:	d109      	bne.n	800ffa2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800ff8e:	f7ff ffbf 	bl	800ff10 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800ff92:	4b08      	ldr	r3, [pc, #32]	; (800ffb4 <osKernelStart+0x48>)
 800ff94:	2202      	movs	r2, #2
 800ff96:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800ff98:	f001 f87c 	bl	8011094 <vTaskStartScheduler>
      stat = osOK;
 800ff9c:	2300      	movs	r3, #0
 800ff9e:	607b      	str	r3, [r7, #4]
 800ffa0:	e002      	b.n	800ffa8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800ffa2:	f04f 33ff 	mov.w	r3, #4294967295
 800ffa6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ffa8:	687b      	ldr	r3, [r7, #4]
}
 800ffaa:	4618      	mov	r0, r3
 800ffac:	3708      	adds	r7, #8
 800ffae:	46bd      	mov	sp, r7
 800ffb0:	bd80      	pop	{r7, pc}
 800ffb2:	bf00      	nop
 800ffb4:	20003f64 	.word	0x20003f64

0800ffb8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800ffb8:	b580      	push	{r7, lr}
 800ffba:	b08e      	sub	sp, #56	; 0x38
 800ffbc:	af04      	add	r7, sp, #16
 800ffbe:	60f8      	str	r0, [r7, #12]
 800ffc0:	60b9      	str	r1, [r7, #8]
 800ffc2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800ffc4:	2300      	movs	r3, #0
 800ffc6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ffc8:	f3ef 8305 	mrs	r3, IPSR
 800ffcc:	617b      	str	r3, [r7, #20]
  return(result);
 800ffce:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800ffd0:	2b00      	cmp	r3, #0
 800ffd2:	d17e      	bne.n	80100d2 <osThreadNew+0x11a>
 800ffd4:	68fb      	ldr	r3, [r7, #12]
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	d07b      	beq.n	80100d2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800ffda:	2380      	movs	r3, #128	; 0x80
 800ffdc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800ffde:	2318      	movs	r3, #24
 800ffe0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800ffe2:	2300      	movs	r3, #0
 800ffe4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800ffe6:	f04f 33ff 	mov.w	r3, #4294967295
 800ffea:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	2b00      	cmp	r3, #0
 800fff0:	d045      	beq.n	801007e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	681b      	ldr	r3, [r3, #0]
 800fff6:	2b00      	cmp	r3, #0
 800fff8:	d002      	beq.n	8010000 <osThreadNew+0x48>
        name = attr->name;
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	681b      	ldr	r3, [r3, #0]
 800fffe:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	699b      	ldr	r3, [r3, #24]
 8010004:	2b00      	cmp	r3, #0
 8010006:	d002      	beq.n	801000e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	699b      	ldr	r3, [r3, #24]
 801000c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 801000e:	69fb      	ldr	r3, [r7, #28]
 8010010:	2b00      	cmp	r3, #0
 8010012:	d008      	beq.n	8010026 <osThreadNew+0x6e>
 8010014:	69fb      	ldr	r3, [r7, #28]
 8010016:	2b38      	cmp	r3, #56	; 0x38
 8010018:	d805      	bhi.n	8010026 <osThreadNew+0x6e>
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	685b      	ldr	r3, [r3, #4]
 801001e:	f003 0301 	and.w	r3, r3, #1
 8010022:	2b00      	cmp	r3, #0
 8010024:	d001      	beq.n	801002a <osThreadNew+0x72>
        return (NULL);
 8010026:	2300      	movs	r3, #0
 8010028:	e054      	b.n	80100d4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	695b      	ldr	r3, [r3, #20]
 801002e:	2b00      	cmp	r3, #0
 8010030:	d003      	beq.n	801003a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	695b      	ldr	r3, [r3, #20]
 8010036:	089b      	lsrs	r3, r3, #2
 8010038:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	689b      	ldr	r3, [r3, #8]
 801003e:	2b00      	cmp	r3, #0
 8010040:	d00e      	beq.n	8010060 <osThreadNew+0xa8>
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	68db      	ldr	r3, [r3, #12]
 8010046:	2ba7      	cmp	r3, #167	; 0xa7
 8010048:	d90a      	bls.n	8010060 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801004e:	2b00      	cmp	r3, #0
 8010050:	d006      	beq.n	8010060 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	695b      	ldr	r3, [r3, #20]
 8010056:	2b00      	cmp	r3, #0
 8010058:	d002      	beq.n	8010060 <osThreadNew+0xa8>
        mem = 1;
 801005a:	2301      	movs	r3, #1
 801005c:	61bb      	str	r3, [r7, #24]
 801005e:	e010      	b.n	8010082 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	689b      	ldr	r3, [r3, #8]
 8010064:	2b00      	cmp	r3, #0
 8010066:	d10c      	bne.n	8010082 <osThreadNew+0xca>
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	68db      	ldr	r3, [r3, #12]
 801006c:	2b00      	cmp	r3, #0
 801006e:	d108      	bne.n	8010082 <osThreadNew+0xca>
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	691b      	ldr	r3, [r3, #16]
 8010074:	2b00      	cmp	r3, #0
 8010076:	d104      	bne.n	8010082 <osThreadNew+0xca>
          mem = 0;
 8010078:	2300      	movs	r3, #0
 801007a:	61bb      	str	r3, [r7, #24]
 801007c:	e001      	b.n	8010082 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 801007e:	2300      	movs	r3, #0
 8010080:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8010082:	69bb      	ldr	r3, [r7, #24]
 8010084:	2b01      	cmp	r3, #1
 8010086:	d110      	bne.n	80100aa <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 801008c:	687a      	ldr	r2, [r7, #4]
 801008e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8010090:	9202      	str	r2, [sp, #8]
 8010092:	9301      	str	r3, [sp, #4]
 8010094:	69fb      	ldr	r3, [r7, #28]
 8010096:	9300      	str	r3, [sp, #0]
 8010098:	68bb      	ldr	r3, [r7, #8]
 801009a:	6a3a      	ldr	r2, [r7, #32]
 801009c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801009e:	68f8      	ldr	r0, [r7, #12]
 80100a0:	f000 fe0c 	bl	8010cbc <xTaskCreateStatic>
 80100a4:	4603      	mov	r3, r0
 80100a6:	613b      	str	r3, [r7, #16]
 80100a8:	e013      	b.n	80100d2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80100aa:	69bb      	ldr	r3, [r7, #24]
 80100ac:	2b00      	cmp	r3, #0
 80100ae:	d110      	bne.n	80100d2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80100b0:	6a3b      	ldr	r3, [r7, #32]
 80100b2:	b29a      	uxth	r2, r3
 80100b4:	f107 0310 	add.w	r3, r7, #16
 80100b8:	9301      	str	r3, [sp, #4]
 80100ba:	69fb      	ldr	r3, [r7, #28]
 80100bc:	9300      	str	r3, [sp, #0]
 80100be:	68bb      	ldr	r3, [r7, #8]
 80100c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80100c2:	68f8      	ldr	r0, [r7, #12]
 80100c4:	f000 fe57 	bl	8010d76 <xTaskCreate>
 80100c8:	4603      	mov	r3, r0
 80100ca:	2b01      	cmp	r3, #1
 80100cc:	d001      	beq.n	80100d2 <osThreadNew+0x11a>
            hTask = NULL;
 80100ce:	2300      	movs	r3, #0
 80100d0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80100d2:	693b      	ldr	r3, [r7, #16]
}
 80100d4:	4618      	mov	r0, r3
 80100d6:	3728      	adds	r7, #40	; 0x28
 80100d8:	46bd      	mov	sp, r7
 80100da:	bd80      	pop	{r7, pc}

080100dc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80100dc:	b580      	push	{r7, lr}
 80100de:	b084      	sub	sp, #16
 80100e0:	af00      	add	r7, sp, #0
 80100e2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80100e4:	f3ef 8305 	mrs	r3, IPSR
 80100e8:	60bb      	str	r3, [r7, #8]
  return(result);
 80100ea:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80100ec:	2b00      	cmp	r3, #0
 80100ee:	d003      	beq.n	80100f8 <osDelay+0x1c>
    stat = osErrorISR;
 80100f0:	f06f 0305 	mvn.w	r3, #5
 80100f4:	60fb      	str	r3, [r7, #12]
 80100f6:	e007      	b.n	8010108 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80100f8:	2300      	movs	r3, #0
 80100fa:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	2b00      	cmp	r3, #0
 8010100:	d002      	beq.n	8010108 <osDelay+0x2c>
      vTaskDelay(ticks);
 8010102:	6878      	ldr	r0, [r7, #4]
 8010104:	f000 ff92 	bl	801102c <vTaskDelay>
    }
  }

  return (stat);
 8010108:	68fb      	ldr	r3, [r7, #12]
}
 801010a:	4618      	mov	r0, r3
 801010c:	3710      	adds	r7, #16
 801010e:	46bd      	mov	sp, r7
 8010110:	bd80      	pop	{r7, pc}
	...

08010114 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8010114:	b480      	push	{r7}
 8010116:	b085      	sub	sp, #20
 8010118:	af00      	add	r7, sp, #0
 801011a:	60f8      	str	r0, [r7, #12]
 801011c:	60b9      	str	r1, [r7, #8]
 801011e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8010120:	68fb      	ldr	r3, [r7, #12]
 8010122:	4a07      	ldr	r2, [pc, #28]	; (8010140 <vApplicationGetIdleTaskMemory+0x2c>)
 8010124:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8010126:	68bb      	ldr	r3, [r7, #8]
 8010128:	4a06      	ldr	r2, [pc, #24]	; (8010144 <vApplicationGetIdleTaskMemory+0x30>)
 801012a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	2280      	movs	r2, #128	; 0x80
 8010130:	601a      	str	r2, [r3, #0]
}
 8010132:	bf00      	nop
 8010134:	3714      	adds	r7, #20
 8010136:	46bd      	mov	sp, r7
 8010138:	f85d 7b04 	ldr.w	r7, [sp], #4
 801013c:	4770      	bx	lr
 801013e:	bf00      	nop
 8010140:	20003f68 	.word	0x20003f68
 8010144:	20004010 	.word	0x20004010

08010148 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8010148:	b480      	push	{r7}
 801014a:	b085      	sub	sp, #20
 801014c:	af00      	add	r7, sp, #0
 801014e:	60f8      	str	r0, [r7, #12]
 8010150:	60b9      	str	r1, [r7, #8]
 8010152:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8010154:	68fb      	ldr	r3, [r7, #12]
 8010156:	4a07      	ldr	r2, [pc, #28]	; (8010174 <vApplicationGetTimerTaskMemory+0x2c>)
 8010158:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 801015a:	68bb      	ldr	r3, [r7, #8]
 801015c:	4a06      	ldr	r2, [pc, #24]	; (8010178 <vApplicationGetTimerTaskMemory+0x30>)
 801015e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010166:	601a      	str	r2, [r3, #0]
}
 8010168:	bf00      	nop
 801016a:	3714      	adds	r7, #20
 801016c:	46bd      	mov	sp, r7
 801016e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010172:	4770      	bx	lr
 8010174:	20004210 	.word	0x20004210
 8010178:	200042b8 	.word	0x200042b8

0801017c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 801017c:	b480      	push	{r7}
 801017e:	b083      	sub	sp, #12
 8010180:	af00      	add	r7, sp, #0
 8010182:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	f103 0208 	add.w	r2, r3, #8
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	f04f 32ff 	mov.w	r2, #4294967295
 8010194:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	f103 0208 	add.w	r2, r3, #8
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	f103 0208 	add.w	r2, r3, #8
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	2200      	movs	r2, #0
 80101ae:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80101b0:	bf00      	nop
 80101b2:	370c      	adds	r7, #12
 80101b4:	46bd      	mov	sp, r7
 80101b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101ba:	4770      	bx	lr

080101bc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80101bc:	b480      	push	{r7}
 80101be:	b083      	sub	sp, #12
 80101c0:	af00      	add	r7, sp, #0
 80101c2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	2200      	movs	r2, #0
 80101c8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80101ca:	bf00      	nop
 80101cc:	370c      	adds	r7, #12
 80101ce:	46bd      	mov	sp, r7
 80101d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101d4:	4770      	bx	lr

080101d6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80101d6:	b480      	push	{r7}
 80101d8:	b085      	sub	sp, #20
 80101da:	af00      	add	r7, sp, #0
 80101dc:	6078      	str	r0, [r7, #4]
 80101de:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	685b      	ldr	r3, [r3, #4]
 80101e4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80101e6:	683b      	ldr	r3, [r7, #0]
 80101e8:	68fa      	ldr	r2, [r7, #12]
 80101ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80101ec:	68fb      	ldr	r3, [r7, #12]
 80101ee:	689a      	ldr	r2, [r3, #8]
 80101f0:	683b      	ldr	r3, [r7, #0]
 80101f2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80101f4:	68fb      	ldr	r3, [r7, #12]
 80101f6:	689b      	ldr	r3, [r3, #8]
 80101f8:	683a      	ldr	r2, [r7, #0]
 80101fa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80101fc:	68fb      	ldr	r3, [r7, #12]
 80101fe:	683a      	ldr	r2, [r7, #0]
 8010200:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8010202:	683b      	ldr	r3, [r7, #0]
 8010204:	687a      	ldr	r2, [r7, #4]
 8010206:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	681b      	ldr	r3, [r3, #0]
 801020c:	1c5a      	adds	r2, r3, #1
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	601a      	str	r2, [r3, #0]
}
 8010212:	bf00      	nop
 8010214:	3714      	adds	r7, #20
 8010216:	46bd      	mov	sp, r7
 8010218:	f85d 7b04 	ldr.w	r7, [sp], #4
 801021c:	4770      	bx	lr

0801021e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801021e:	b480      	push	{r7}
 8010220:	b085      	sub	sp, #20
 8010222:	af00      	add	r7, sp, #0
 8010224:	6078      	str	r0, [r7, #4]
 8010226:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8010228:	683b      	ldr	r3, [r7, #0]
 801022a:	681b      	ldr	r3, [r3, #0]
 801022c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801022e:	68bb      	ldr	r3, [r7, #8]
 8010230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010234:	d103      	bne.n	801023e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	691b      	ldr	r3, [r3, #16]
 801023a:	60fb      	str	r3, [r7, #12]
 801023c:	e00c      	b.n	8010258 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	3308      	adds	r3, #8
 8010242:	60fb      	str	r3, [r7, #12]
 8010244:	e002      	b.n	801024c <vListInsert+0x2e>
 8010246:	68fb      	ldr	r3, [r7, #12]
 8010248:	685b      	ldr	r3, [r3, #4]
 801024a:	60fb      	str	r3, [r7, #12]
 801024c:	68fb      	ldr	r3, [r7, #12]
 801024e:	685b      	ldr	r3, [r3, #4]
 8010250:	681b      	ldr	r3, [r3, #0]
 8010252:	68ba      	ldr	r2, [r7, #8]
 8010254:	429a      	cmp	r2, r3
 8010256:	d2f6      	bcs.n	8010246 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8010258:	68fb      	ldr	r3, [r7, #12]
 801025a:	685a      	ldr	r2, [r3, #4]
 801025c:	683b      	ldr	r3, [r7, #0]
 801025e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8010260:	683b      	ldr	r3, [r7, #0]
 8010262:	685b      	ldr	r3, [r3, #4]
 8010264:	683a      	ldr	r2, [r7, #0]
 8010266:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8010268:	683b      	ldr	r3, [r7, #0]
 801026a:	68fa      	ldr	r2, [r7, #12]
 801026c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801026e:	68fb      	ldr	r3, [r7, #12]
 8010270:	683a      	ldr	r2, [r7, #0]
 8010272:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8010274:	683b      	ldr	r3, [r7, #0]
 8010276:	687a      	ldr	r2, [r7, #4]
 8010278:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	681b      	ldr	r3, [r3, #0]
 801027e:	1c5a      	adds	r2, r3, #1
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	601a      	str	r2, [r3, #0]
}
 8010284:	bf00      	nop
 8010286:	3714      	adds	r7, #20
 8010288:	46bd      	mov	sp, r7
 801028a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801028e:	4770      	bx	lr

08010290 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8010290:	b480      	push	{r7}
 8010292:	b085      	sub	sp, #20
 8010294:	af00      	add	r7, sp, #0
 8010296:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	691b      	ldr	r3, [r3, #16]
 801029c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	685b      	ldr	r3, [r3, #4]
 80102a2:	687a      	ldr	r2, [r7, #4]
 80102a4:	6892      	ldr	r2, [r2, #8]
 80102a6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	689b      	ldr	r3, [r3, #8]
 80102ac:	687a      	ldr	r2, [r7, #4]
 80102ae:	6852      	ldr	r2, [r2, #4]
 80102b0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80102b2:	68fb      	ldr	r3, [r7, #12]
 80102b4:	685b      	ldr	r3, [r3, #4]
 80102b6:	687a      	ldr	r2, [r7, #4]
 80102b8:	429a      	cmp	r2, r3
 80102ba:	d103      	bne.n	80102c4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	689a      	ldr	r2, [r3, #8]
 80102c0:	68fb      	ldr	r3, [r7, #12]
 80102c2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	2200      	movs	r2, #0
 80102c8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80102ca:	68fb      	ldr	r3, [r7, #12]
 80102cc:	681b      	ldr	r3, [r3, #0]
 80102ce:	1e5a      	subs	r2, r3, #1
 80102d0:	68fb      	ldr	r3, [r7, #12]
 80102d2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80102d4:	68fb      	ldr	r3, [r7, #12]
 80102d6:	681b      	ldr	r3, [r3, #0]
}
 80102d8:	4618      	mov	r0, r3
 80102da:	3714      	adds	r7, #20
 80102dc:	46bd      	mov	sp, r7
 80102de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102e2:	4770      	bx	lr

080102e4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80102e4:	b580      	push	{r7, lr}
 80102e6:	b084      	sub	sp, #16
 80102e8:	af00      	add	r7, sp, #0
 80102ea:	6078      	str	r0, [r7, #4]
 80102ec:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80102f2:	68fb      	ldr	r3, [r7, #12]
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	d10a      	bne.n	801030e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80102f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102fc:	f383 8811 	msr	BASEPRI, r3
 8010300:	f3bf 8f6f 	isb	sy
 8010304:	f3bf 8f4f 	dsb	sy
 8010308:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 801030a:	bf00      	nop
 801030c:	e7fe      	b.n	801030c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 801030e:	f002 f879 	bl	8012404 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010312:	68fb      	ldr	r3, [r7, #12]
 8010314:	681a      	ldr	r2, [r3, #0]
 8010316:	68fb      	ldr	r3, [r7, #12]
 8010318:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801031a:	68f9      	ldr	r1, [r7, #12]
 801031c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801031e:	fb01 f303 	mul.w	r3, r1, r3
 8010322:	441a      	add	r2, r3
 8010324:	68fb      	ldr	r3, [r7, #12]
 8010326:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8010328:	68fb      	ldr	r3, [r7, #12]
 801032a:	2200      	movs	r2, #0
 801032c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801032e:	68fb      	ldr	r3, [r7, #12]
 8010330:	681a      	ldr	r2, [r3, #0]
 8010332:	68fb      	ldr	r3, [r7, #12]
 8010334:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010336:	68fb      	ldr	r3, [r7, #12]
 8010338:	681a      	ldr	r2, [r3, #0]
 801033a:	68fb      	ldr	r3, [r7, #12]
 801033c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801033e:	3b01      	subs	r3, #1
 8010340:	68f9      	ldr	r1, [r7, #12]
 8010342:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8010344:	fb01 f303 	mul.w	r3, r1, r3
 8010348:	441a      	add	r2, r3
 801034a:	68fb      	ldr	r3, [r7, #12]
 801034c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801034e:	68fb      	ldr	r3, [r7, #12]
 8010350:	22ff      	movs	r2, #255	; 0xff
 8010352:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8010356:	68fb      	ldr	r3, [r7, #12]
 8010358:	22ff      	movs	r2, #255	; 0xff
 801035a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 801035e:	683b      	ldr	r3, [r7, #0]
 8010360:	2b00      	cmp	r3, #0
 8010362:	d114      	bne.n	801038e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010364:	68fb      	ldr	r3, [r7, #12]
 8010366:	691b      	ldr	r3, [r3, #16]
 8010368:	2b00      	cmp	r3, #0
 801036a:	d01a      	beq.n	80103a2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801036c:	68fb      	ldr	r3, [r7, #12]
 801036e:	3310      	adds	r3, #16
 8010370:	4618      	mov	r0, r3
 8010372:	f001 f929 	bl	80115c8 <xTaskRemoveFromEventList>
 8010376:	4603      	mov	r3, r0
 8010378:	2b00      	cmp	r3, #0
 801037a:	d012      	beq.n	80103a2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 801037c:	4b0c      	ldr	r3, [pc, #48]	; (80103b0 <xQueueGenericReset+0xcc>)
 801037e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010382:	601a      	str	r2, [r3, #0]
 8010384:	f3bf 8f4f 	dsb	sy
 8010388:	f3bf 8f6f 	isb	sy
 801038c:	e009      	b.n	80103a2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801038e:	68fb      	ldr	r3, [r7, #12]
 8010390:	3310      	adds	r3, #16
 8010392:	4618      	mov	r0, r3
 8010394:	f7ff fef2 	bl	801017c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8010398:	68fb      	ldr	r3, [r7, #12]
 801039a:	3324      	adds	r3, #36	; 0x24
 801039c:	4618      	mov	r0, r3
 801039e:	f7ff feed 	bl	801017c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80103a2:	f002 f85f 	bl	8012464 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80103a6:	2301      	movs	r3, #1
}
 80103a8:	4618      	mov	r0, r3
 80103aa:	3710      	adds	r7, #16
 80103ac:	46bd      	mov	sp, r7
 80103ae:	bd80      	pop	{r7, pc}
 80103b0:	e000ed04 	.word	0xe000ed04

080103b4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80103b4:	b580      	push	{r7, lr}
 80103b6:	b08e      	sub	sp, #56	; 0x38
 80103b8:	af02      	add	r7, sp, #8
 80103ba:	60f8      	str	r0, [r7, #12]
 80103bc:	60b9      	str	r1, [r7, #8]
 80103be:	607a      	str	r2, [r7, #4]
 80103c0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80103c2:	68fb      	ldr	r3, [r7, #12]
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	d10a      	bne.n	80103de <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80103c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103cc:	f383 8811 	msr	BASEPRI, r3
 80103d0:	f3bf 8f6f 	isb	sy
 80103d4:	f3bf 8f4f 	dsb	sy
 80103d8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80103da:	bf00      	nop
 80103dc:	e7fe      	b.n	80103dc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80103de:	683b      	ldr	r3, [r7, #0]
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	d10a      	bne.n	80103fa <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80103e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103e8:	f383 8811 	msr	BASEPRI, r3
 80103ec:	f3bf 8f6f 	isb	sy
 80103f0:	f3bf 8f4f 	dsb	sy
 80103f4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80103f6:	bf00      	nop
 80103f8:	e7fe      	b.n	80103f8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	2b00      	cmp	r3, #0
 80103fe:	d002      	beq.n	8010406 <xQueueGenericCreateStatic+0x52>
 8010400:	68bb      	ldr	r3, [r7, #8]
 8010402:	2b00      	cmp	r3, #0
 8010404:	d001      	beq.n	801040a <xQueueGenericCreateStatic+0x56>
 8010406:	2301      	movs	r3, #1
 8010408:	e000      	b.n	801040c <xQueueGenericCreateStatic+0x58>
 801040a:	2300      	movs	r3, #0
 801040c:	2b00      	cmp	r3, #0
 801040e:	d10a      	bne.n	8010426 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8010410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010414:	f383 8811 	msr	BASEPRI, r3
 8010418:	f3bf 8f6f 	isb	sy
 801041c:	f3bf 8f4f 	dsb	sy
 8010420:	623b      	str	r3, [r7, #32]
}
 8010422:	bf00      	nop
 8010424:	e7fe      	b.n	8010424 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	2b00      	cmp	r3, #0
 801042a:	d102      	bne.n	8010432 <xQueueGenericCreateStatic+0x7e>
 801042c:	68bb      	ldr	r3, [r7, #8]
 801042e:	2b00      	cmp	r3, #0
 8010430:	d101      	bne.n	8010436 <xQueueGenericCreateStatic+0x82>
 8010432:	2301      	movs	r3, #1
 8010434:	e000      	b.n	8010438 <xQueueGenericCreateStatic+0x84>
 8010436:	2300      	movs	r3, #0
 8010438:	2b00      	cmp	r3, #0
 801043a:	d10a      	bne.n	8010452 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 801043c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010440:	f383 8811 	msr	BASEPRI, r3
 8010444:	f3bf 8f6f 	isb	sy
 8010448:	f3bf 8f4f 	dsb	sy
 801044c:	61fb      	str	r3, [r7, #28]
}
 801044e:	bf00      	nop
 8010450:	e7fe      	b.n	8010450 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8010452:	2350      	movs	r3, #80	; 0x50
 8010454:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8010456:	697b      	ldr	r3, [r7, #20]
 8010458:	2b50      	cmp	r3, #80	; 0x50
 801045a:	d00a      	beq.n	8010472 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 801045c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010460:	f383 8811 	msr	BASEPRI, r3
 8010464:	f3bf 8f6f 	isb	sy
 8010468:	f3bf 8f4f 	dsb	sy
 801046c:	61bb      	str	r3, [r7, #24]
}
 801046e:	bf00      	nop
 8010470:	e7fe      	b.n	8010470 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8010472:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010474:	683b      	ldr	r3, [r7, #0]
 8010476:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8010478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801047a:	2b00      	cmp	r3, #0
 801047c:	d00d      	beq.n	801049a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801047e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010480:	2201      	movs	r2, #1
 8010482:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010486:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 801048a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801048c:	9300      	str	r3, [sp, #0]
 801048e:	4613      	mov	r3, r2
 8010490:	687a      	ldr	r2, [r7, #4]
 8010492:	68b9      	ldr	r1, [r7, #8]
 8010494:	68f8      	ldr	r0, [r7, #12]
 8010496:	f000 f805 	bl	80104a4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801049a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 801049c:	4618      	mov	r0, r3
 801049e:	3730      	adds	r7, #48	; 0x30
 80104a0:	46bd      	mov	sp, r7
 80104a2:	bd80      	pop	{r7, pc}

080104a4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80104a4:	b580      	push	{r7, lr}
 80104a6:	b084      	sub	sp, #16
 80104a8:	af00      	add	r7, sp, #0
 80104aa:	60f8      	str	r0, [r7, #12]
 80104ac:	60b9      	str	r1, [r7, #8]
 80104ae:	607a      	str	r2, [r7, #4]
 80104b0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80104b2:	68bb      	ldr	r3, [r7, #8]
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	d103      	bne.n	80104c0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80104b8:	69bb      	ldr	r3, [r7, #24]
 80104ba:	69ba      	ldr	r2, [r7, #24]
 80104bc:	601a      	str	r2, [r3, #0]
 80104be:	e002      	b.n	80104c6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80104c0:	69bb      	ldr	r3, [r7, #24]
 80104c2:	687a      	ldr	r2, [r7, #4]
 80104c4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80104c6:	69bb      	ldr	r3, [r7, #24]
 80104c8:	68fa      	ldr	r2, [r7, #12]
 80104ca:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80104cc:	69bb      	ldr	r3, [r7, #24]
 80104ce:	68ba      	ldr	r2, [r7, #8]
 80104d0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80104d2:	2101      	movs	r1, #1
 80104d4:	69b8      	ldr	r0, [r7, #24]
 80104d6:	f7ff ff05 	bl	80102e4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80104da:	69bb      	ldr	r3, [r7, #24]
 80104dc:	78fa      	ldrb	r2, [r7, #3]
 80104de:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80104e2:	bf00      	nop
 80104e4:	3710      	adds	r7, #16
 80104e6:	46bd      	mov	sp, r7
 80104e8:	bd80      	pop	{r7, pc}
	...

080104ec <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80104ec:	b580      	push	{r7, lr}
 80104ee:	b08e      	sub	sp, #56	; 0x38
 80104f0:	af00      	add	r7, sp, #0
 80104f2:	60f8      	str	r0, [r7, #12]
 80104f4:	60b9      	str	r1, [r7, #8]
 80104f6:	607a      	str	r2, [r7, #4]
 80104f8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80104fa:	2300      	movs	r3, #0
 80104fc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80104fe:	68fb      	ldr	r3, [r7, #12]
 8010500:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010504:	2b00      	cmp	r3, #0
 8010506:	d10a      	bne.n	801051e <xQueueGenericSend+0x32>
	__asm volatile
 8010508:	f04f 0350 	mov.w	r3, #80	; 0x50
 801050c:	f383 8811 	msr	BASEPRI, r3
 8010510:	f3bf 8f6f 	isb	sy
 8010514:	f3bf 8f4f 	dsb	sy
 8010518:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801051a:	bf00      	nop
 801051c:	e7fe      	b.n	801051c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801051e:	68bb      	ldr	r3, [r7, #8]
 8010520:	2b00      	cmp	r3, #0
 8010522:	d103      	bne.n	801052c <xQueueGenericSend+0x40>
 8010524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010528:	2b00      	cmp	r3, #0
 801052a:	d101      	bne.n	8010530 <xQueueGenericSend+0x44>
 801052c:	2301      	movs	r3, #1
 801052e:	e000      	b.n	8010532 <xQueueGenericSend+0x46>
 8010530:	2300      	movs	r3, #0
 8010532:	2b00      	cmp	r3, #0
 8010534:	d10a      	bne.n	801054c <xQueueGenericSend+0x60>
	__asm volatile
 8010536:	f04f 0350 	mov.w	r3, #80	; 0x50
 801053a:	f383 8811 	msr	BASEPRI, r3
 801053e:	f3bf 8f6f 	isb	sy
 8010542:	f3bf 8f4f 	dsb	sy
 8010546:	627b      	str	r3, [r7, #36]	; 0x24
}
 8010548:	bf00      	nop
 801054a:	e7fe      	b.n	801054a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801054c:	683b      	ldr	r3, [r7, #0]
 801054e:	2b02      	cmp	r3, #2
 8010550:	d103      	bne.n	801055a <xQueueGenericSend+0x6e>
 8010552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010554:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010556:	2b01      	cmp	r3, #1
 8010558:	d101      	bne.n	801055e <xQueueGenericSend+0x72>
 801055a:	2301      	movs	r3, #1
 801055c:	e000      	b.n	8010560 <xQueueGenericSend+0x74>
 801055e:	2300      	movs	r3, #0
 8010560:	2b00      	cmp	r3, #0
 8010562:	d10a      	bne.n	801057a <xQueueGenericSend+0x8e>
	__asm volatile
 8010564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010568:	f383 8811 	msr	BASEPRI, r3
 801056c:	f3bf 8f6f 	isb	sy
 8010570:	f3bf 8f4f 	dsb	sy
 8010574:	623b      	str	r3, [r7, #32]
}
 8010576:	bf00      	nop
 8010578:	e7fe      	b.n	8010578 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801057a:	f001 f9e7 	bl	801194c <xTaskGetSchedulerState>
 801057e:	4603      	mov	r3, r0
 8010580:	2b00      	cmp	r3, #0
 8010582:	d102      	bne.n	801058a <xQueueGenericSend+0x9e>
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	2b00      	cmp	r3, #0
 8010588:	d101      	bne.n	801058e <xQueueGenericSend+0xa2>
 801058a:	2301      	movs	r3, #1
 801058c:	e000      	b.n	8010590 <xQueueGenericSend+0xa4>
 801058e:	2300      	movs	r3, #0
 8010590:	2b00      	cmp	r3, #0
 8010592:	d10a      	bne.n	80105aa <xQueueGenericSend+0xbe>
	__asm volatile
 8010594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010598:	f383 8811 	msr	BASEPRI, r3
 801059c:	f3bf 8f6f 	isb	sy
 80105a0:	f3bf 8f4f 	dsb	sy
 80105a4:	61fb      	str	r3, [r7, #28]
}
 80105a6:	bf00      	nop
 80105a8:	e7fe      	b.n	80105a8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80105aa:	f001 ff2b 	bl	8012404 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80105ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80105b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80105b6:	429a      	cmp	r2, r3
 80105b8:	d302      	bcc.n	80105c0 <xQueueGenericSend+0xd4>
 80105ba:	683b      	ldr	r3, [r7, #0]
 80105bc:	2b02      	cmp	r3, #2
 80105be:	d129      	bne.n	8010614 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80105c0:	683a      	ldr	r2, [r7, #0]
 80105c2:	68b9      	ldr	r1, [r7, #8]
 80105c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80105c6:	f000 fa0b 	bl	80109e0 <prvCopyDataToQueue>
 80105ca:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80105cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80105d0:	2b00      	cmp	r3, #0
 80105d2:	d010      	beq.n	80105f6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80105d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105d6:	3324      	adds	r3, #36	; 0x24
 80105d8:	4618      	mov	r0, r3
 80105da:	f000 fff5 	bl	80115c8 <xTaskRemoveFromEventList>
 80105de:	4603      	mov	r3, r0
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	d013      	beq.n	801060c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80105e4:	4b3f      	ldr	r3, [pc, #252]	; (80106e4 <xQueueGenericSend+0x1f8>)
 80105e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80105ea:	601a      	str	r2, [r3, #0]
 80105ec:	f3bf 8f4f 	dsb	sy
 80105f0:	f3bf 8f6f 	isb	sy
 80105f4:	e00a      	b.n	801060c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80105f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105f8:	2b00      	cmp	r3, #0
 80105fa:	d007      	beq.n	801060c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80105fc:	4b39      	ldr	r3, [pc, #228]	; (80106e4 <xQueueGenericSend+0x1f8>)
 80105fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010602:	601a      	str	r2, [r3, #0]
 8010604:	f3bf 8f4f 	dsb	sy
 8010608:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 801060c:	f001 ff2a 	bl	8012464 <vPortExitCritical>
				return pdPASS;
 8010610:	2301      	movs	r3, #1
 8010612:	e063      	b.n	80106dc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	2b00      	cmp	r3, #0
 8010618:	d103      	bne.n	8010622 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801061a:	f001 ff23 	bl	8012464 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801061e:	2300      	movs	r3, #0
 8010620:	e05c      	b.n	80106dc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010622:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010624:	2b00      	cmp	r3, #0
 8010626:	d106      	bne.n	8010636 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010628:	f107 0314 	add.w	r3, r7, #20
 801062c:	4618      	mov	r0, r3
 801062e:	f001 f82f 	bl	8011690 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010632:	2301      	movs	r3, #1
 8010634:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010636:	f001 ff15 	bl	8012464 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801063a:	f000 fd9b 	bl	8011174 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801063e:	f001 fee1 	bl	8012404 <vPortEnterCritical>
 8010642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010644:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010648:	b25b      	sxtb	r3, r3
 801064a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801064e:	d103      	bne.n	8010658 <xQueueGenericSend+0x16c>
 8010650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010652:	2200      	movs	r2, #0
 8010654:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801065a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801065e:	b25b      	sxtb	r3, r3
 8010660:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010664:	d103      	bne.n	801066e <xQueueGenericSend+0x182>
 8010666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010668:	2200      	movs	r2, #0
 801066a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801066e:	f001 fef9 	bl	8012464 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010672:	1d3a      	adds	r2, r7, #4
 8010674:	f107 0314 	add.w	r3, r7, #20
 8010678:	4611      	mov	r1, r2
 801067a:	4618      	mov	r0, r3
 801067c:	f001 f81e 	bl	80116bc <xTaskCheckForTimeOut>
 8010680:	4603      	mov	r3, r0
 8010682:	2b00      	cmp	r3, #0
 8010684:	d124      	bne.n	80106d0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8010686:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010688:	f000 faa2 	bl	8010bd0 <prvIsQueueFull>
 801068c:	4603      	mov	r3, r0
 801068e:	2b00      	cmp	r3, #0
 8010690:	d018      	beq.n	80106c4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8010692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010694:	3310      	adds	r3, #16
 8010696:	687a      	ldr	r2, [r7, #4]
 8010698:	4611      	mov	r1, r2
 801069a:	4618      	mov	r0, r3
 801069c:	f000 ff44 	bl	8011528 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80106a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80106a2:	f000 fa2d 	bl	8010b00 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80106a6:	f000 fd73 	bl	8011190 <xTaskResumeAll>
 80106aa:	4603      	mov	r3, r0
 80106ac:	2b00      	cmp	r3, #0
 80106ae:	f47f af7c 	bne.w	80105aa <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80106b2:	4b0c      	ldr	r3, [pc, #48]	; (80106e4 <xQueueGenericSend+0x1f8>)
 80106b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80106b8:	601a      	str	r2, [r3, #0]
 80106ba:	f3bf 8f4f 	dsb	sy
 80106be:	f3bf 8f6f 	isb	sy
 80106c2:	e772      	b.n	80105aa <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80106c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80106c6:	f000 fa1b 	bl	8010b00 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80106ca:	f000 fd61 	bl	8011190 <xTaskResumeAll>
 80106ce:	e76c      	b.n	80105aa <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80106d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80106d2:	f000 fa15 	bl	8010b00 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80106d6:	f000 fd5b 	bl	8011190 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80106da:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80106dc:	4618      	mov	r0, r3
 80106de:	3738      	adds	r7, #56	; 0x38
 80106e0:	46bd      	mov	sp, r7
 80106e2:	bd80      	pop	{r7, pc}
 80106e4:	e000ed04 	.word	0xe000ed04

080106e8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80106e8:	b580      	push	{r7, lr}
 80106ea:	b090      	sub	sp, #64	; 0x40
 80106ec:	af00      	add	r7, sp, #0
 80106ee:	60f8      	str	r0, [r7, #12]
 80106f0:	60b9      	str	r1, [r7, #8]
 80106f2:	607a      	str	r2, [r7, #4]
 80106f4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80106f6:	68fb      	ldr	r3, [r7, #12]
 80106f8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80106fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	d10a      	bne.n	8010716 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8010700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010704:	f383 8811 	msr	BASEPRI, r3
 8010708:	f3bf 8f6f 	isb	sy
 801070c:	f3bf 8f4f 	dsb	sy
 8010710:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8010712:	bf00      	nop
 8010714:	e7fe      	b.n	8010714 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010716:	68bb      	ldr	r3, [r7, #8]
 8010718:	2b00      	cmp	r3, #0
 801071a:	d103      	bne.n	8010724 <xQueueGenericSendFromISR+0x3c>
 801071c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801071e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010720:	2b00      	cmp	r3, #0
 8010722:	d101      	bne.n	8010728 <xQueueGenericSendFromISR+0x40>
 8010724:	2301      	movs	r3, #1
 8010726:	e000      	b.n	801072a <xQueueGenericSendFromISR+0x42>
 8010728:	2300      	movs	r3, #0
 801072a:	2b00      	cmp	r3, #0
 801072c:	d10a      	bne.n	8010744 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 801072e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010732:	f383 8811 	msr	BASEPRI, r3
 8010736:	f3bf 8f6f 	isb	sy
 801073a:	f3bf 8f4f 	dsb	sy
 801073e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8010740:	bf00      	nop
 8010742:	e7fe      	b.n	8010742 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010744:	683b      	ldr	r3, [r7, #0]
 8010746:	2b02      	cmp	r3, #2
 8010748:	d103      	bne.n	8010752 <xQueueGenericSendFromISR+0x6a>
 801074a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801074c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801074e:	2b01      	cmp	r3, #1
 8010750:	d101      	bne.n	8010756 <xQueueGenericSendFromISR+0x6e>
 8010752:	2301      	movs	r3, #1
 8010754:	e000      	b.n	8010758 <xQueueGenericSendFromISR+0x70>
 8010756:	2300      	movs	r3, #0
 8010758:	2b00      	cmp	r3, #0
 801075a:	d10a      	bne.n	8010772 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 801075c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010760:	f383 8811 	msr	BASEPRI, r3
 8010764:	f3bf 8f6f 	isb	sy
 8010768:	f3bf 8f4f 	dsb	sy
 801076c:	623b      	str	r3, [r7, #32]
}
 801076e:	bf00      	nop
 8010770:	e7fe      	b.n	8010770 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010772:	f001 ff29 	bl	80125c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8010776:	f3ef 8211 	mrs	r2, BASEPRI
 801077a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801077e:	f383 8811 	msr	BASEPRI, r3
 8010782:	f3bf 8f6f 	isb	sy
 8010786:	f3bf 8f4f 	dsb	sy
 801078a:	61fa      	str	r2, [r7, #28]
 801078c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 801078e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010790:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010794:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801079a:	429a      	cmp	r2, r3
 801079c:	d302      	bcc.n	80107a4 <xQueueGenericSendFromISR+0xbc>
 801079e:	683b      	ldr	r3, [r7, #0]
 80107a0:	2b02      	cmp	r3, #2
 80107a2:	d12f      	bne.n	8010804 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80107a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80107aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80107ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80107b2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80107b4:	683a      	ldr	r2, [r7, #0]
 80107b6:	68b9      	ldr	r1, [r7, #8]
 80107b8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80107ba:	f000 f911 	bl	80109e0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80107be:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80107c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80107c6:	d112      	bne.n	80107ee <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80107c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107cc:	2b00      	cmp	r3, #0
 80107ce:	d016      	beq.n	80107fe <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80107d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107d2:	3324      	adds	r3, #36	; 0x24
 80107d4:	4618      	mov	r0, r3
 80107d6:	f000 fef7 	bl	80115c8 <xTaskRemoveFromEventList>
 80107da:	4603      	mov	r3, r0
 80107dc:	2b00      	cmp	r3, #0
 80107de:	d00e      	beq.n	80107fe <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	2b00      	cmp	r3, #0
 80107e4:	d00b      	beq.n	80107fe <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	2201      	movs	r2, #1
 80107ea:	601a      	str	r2, [r3, #0]
 80107ec:	e007      	b.n	80107fe <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80107ee:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80107f2:	3301      	adds	r3, #1
 80107f4:	b2db      	uxtb	r3, r3
 80107f6:	b25a      	sxtb	r2, r3
 80107f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80107fe:	2301      	movs	r3, #1
 8010800:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8010802:	e001      	b.n	8010808 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8010804:	2300      	movs	r3, #0
 8010806:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010808:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801080a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801080c:	697b      	ldr	r3, [r7, #20]
 801080e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8010812:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010814:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8010816:	4618      	mov	r0, r3
 8010818:	3740      	adds	r7, #64	; 0x40
 801081a:	46bd      	mov	sp, r7
 801081c:	bd80      	pop	{r7, pc}
	...

08010820 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8010820:	b580      	push	{r7, lr}
 8010822:	b08c      	sub	sp, #48	; 0x30
 8010824:	af00      	add	r7, sp, #0
 8010826:	60f8      	str	r0, [r7, #12]
 8010828:	60b9      	str	r1, [r7, #8]
 801082a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 801082c:	2300      	movs	r3, #0
 801082e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010830:	68fb      	ldr	r3, [r7, #12]
 8010832:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010836:	2b00      	cmp	r3, #0
 8010838:	d10a      	bne.n	8010850 <xQueueReceive+0x30>
	__asm volatile
 801083a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801083e:	f383 8811 	msr	BASEPRI, r3
 8010842:	f3bf 8f6f 	isb	sy
 8010846:	f3bf 8f4f 	dsb	sy
 801084a:	623b      	str	r3, [r7, #32]
}
 801084c:	bf00      	nop
 801084e:	e7fe      	b.n	801084e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010850:	68bb      	ldr	r3, [r7, #8]
 8010852:	2b00      	cmp	r3, #0
 8010854:	d103      	bne.n	801085e <xQueueReceive+0x3e>
 8010856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801085a:	2b00      	cmp	r3, #0
 801085c:	d101      	bne.n	8010862 <xQueueReceive+0x42>
 801085e:	2301      	movs	r3, #1
 8010860:	e000      	b.n	8010864 <xQueueReceive+0x44>
 8010862:	2300      	movs	r3, #0
 8010864:	2b00      	cmp	r3, #0
 8010866:	d10a      	bne.n	801087e <xQueueReceive+0x5e>
	__asm volatile
 8010868:	f04f 0350 	mov.w	r3, #80	; 0x50
 801086c:	f383 8811 	msr	BASEPRI, r3
 8010870:	f3bf 8f6f 	isb	sy
 8010874:	f3bf 8f4f 	dsb	sy
 8010878:	61fb      	str	r3, [r7, #28]
}
 801087a:	bf00      	nop
 801087c:	e7fe      	b.n	801087c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801087e:	f001 f865 	bl	801194c <xTaskGetSchedulerState>
 8010882:	4603      	mov	r3, r0
 8010884:	2b00      	cmp	r3, #0
 8010886:	d102      	bne.n	801088e <xQueueReceive+0x6e>
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	2b00      	cmp	r3, #0
 801088c:	d101      	bne.n	8010892 <xQueueReceive+0x72>
 801088e:	2301      	movs	r3, #1
 8010890:	e000      	b.n	8010894 <xQueueReceive+0x74>
 8010892:	2300      	movs	r3, #0
 8010894:	2b00      	cmp	r3, #0
 8010896:	d10a      	bne.n	80108ae <xQueueReceive+0x8e>
	__asm volatile
 8010898:	f04f 0350 	mov.w	r3, #80	; 0x50
 801089c:	f383 8811 	msr	BASEPRI, r3
 80108a0:	f3bf 8f6f 	isb	sy
 80108a4:	f3bf 8f4f 	dsb	sy
 80108a8:	61bb      	str	r3, [r7, #24]
}
 80108aa:	bf00      	nop
 80108ac:	e7fe      	b.n	80108ac <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80108ae:	f001 fda9 	bl	8012404 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80108b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80108b6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80108b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108ba:	2b00      	cmp	r3, #0
 80108bc:	d01f      	beq.n	80108fe <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80108be:	68b9      	ldr	r1, [r7, #8]
 80108c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80108c2:	f000 f8f7 	bl	8010ab4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80108c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108c8:	1e5a      	subs	r2, r3, #1
 80108ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108cc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80108ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108d0:	691b      	ldr	r3, [r3, #16]
 80108d2:	2b00      	cmp	r3, #0
 80108d4:	d00f      	beq.n	80108f6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80108d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108d8:	3310      	adds	r3, #16
 80108da:	4618      	mov	r0, r3
 80108dc:	f000 fe74 	bl	80115c8 <xTaskRemoveFromEventList>
 80108e0:	4603      	mov	r3, r0
 80108e2:	2b00      	cmp	r3, #0
 80108e4:	d007      	beq.n	80108f6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80108e6:	4b3d      	ldr	r3, [pc, #244]	; (80109dc <xQueueReceive+0x1bc>)
 80108e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80108ec:	601a      	str	r2, [r3, #0]
 80108ee:	f3bf 8f4f 	dsb	sy
 80108f2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80108f6:	f001 fdb5 	bl	8012464 <vPortExitCritical>
				return pdPASS;
 80108fa:	2301      	movs	r3, #1
 80108fc:	e069      	b.n	80109d2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	2b00      	cmp	r3, #0
 8010902:	d103      	bne.n	801090c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010904:	f001 fdae 	bl	8012464 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010908:	2300      	movs	r3, #0
 801090a:	e062      	b.n	80109d2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 801090c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801090e:	2b00      	cmp	r3, #0
 8010910:	d106      	bne.n	8010920 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010912:	f107 0310 	add.w	r3, r7, #16
 8010916:	4618      	mov	r0, r3
 8010918:	f000 feba 	bl	8011690 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801091c:	2301      	movs	r3, #1
 801091e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010920:	f001 fda0 	bl	8012464 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010924:	f000 fc26 	bl	8011174 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010928:	f001 fd6c 	bl	8012404 <vPortEnterCritical>
 801092c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801092e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010932:	b25b      	sxtb	r3, r3
 8010934:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010938:	d103      	bne.n	8010942 <xQueueReceive+0x122>
 801093a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801093c:	2200      	movs	r2, #0
 801093e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010944:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010948:	b25b      	sxtb	r3, r3
 801094a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801094e:	d103      	bne.n	8010958 <xQueueReceive+0x138>
 8010950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010952:	2200      	movs	r2, #0
 8010954:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010958:	f001 fd84 	bl	8012464 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801095c:	1d3a      	adds	r2, r7, #4
 801095e:	f107 0310 	add.w	r3, r7, #16
 8010962:	4611      	mov	r1, r2
 8010964:	4618      	mov	r0, r3
 8010966:	f000 fea9 	bl	80116bc <xTaskCheckForTimeOut>
 801096a:	4603      	mov	r3, r0
 801096c:	2b00      	cmp	r3, #0
 801096e:	d123      	bne.n	80109b8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010970:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010972:	f000 f917 	bl	8010ba4 <prvIsQueueEmpty>
 8010976:	4603      	mov	r3, r0
 8010978:	2b00      	cmp	r3, #0
 801097a:	d017      	beq.n	80109ac <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801097c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801097e:	3324      	adds	r3, #36	; 0x24
 8010980:	687a      	ldr	r2, [r7, #4]
 8010982:	4611      	mov	r1, r2
 8010984:	4618      	mov	r0, r3
 8010986:	f000 fdcf 	bl	8011528 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801098a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801098c:	f000 f8b8 	bl	8010b00 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010990:	f000 fbfe 	bl	8011190 <xTaskResumeAll>
 8010994:	4603      	mov	r3, r0
 8010996:	2b00      	cmp	r3, #0
 8010998:	d189      	bne.n	80108ae <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 801099a:	4b10      	ldr	r3, [pc, #64]	; (80109dc <xQueueReceive+0x1bc>)
 801099c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80109a0:	601a      	str	r2, [r3, #0]
 80109a2:	f3bf 8f4f 	dsb	sy
 80109a6:	f3bf 8f6f 	isb	sy
 80109aa:	e780      	b.n	80108ae <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80109ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80109ae:	f000 f8a7 	bl	8010b00 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80109b2:	f000 fbed 	bl	8011190 <xTaskResumeAll>
 80109b6:	e77a      	b.n	80108ae <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80109b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80109ba:	f000 f8a1 	bl	8010b00 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80109be:	f000 fbe7 	bl	8011190 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80109c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80109c4:	f000 f8ee 	bl	8010ba4 <prvIsQueueEmpty>
 80109c8:	4603      	mov	r3, r0
 80109ca:	2b00      	cmp	r3, #0
 80109cc:	f43f af6f 	beq.w	80108ae <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80109d0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80109d2:	4618      	mov	r0, r3
 80109d4:	3730      	adds	r7, #48	; 0x30
 80109d6:	46bd      	mov	sp, r7
 80109d8:	bd80      	pop	{r7, pc}
 80109da:	bf00      	nop
 80109dc:	e000ed04 	.word	0xe000ed04

080109e0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80109e0:	b580      	push	{r7, lr}
 80109e2:	b086      	sub	sp, #24
 80109e4:	af00      	add	r7, sp, #0
 80109e6:	60f8      	str	r0, [r7, #12]
 80109e8:	60b9      	str	r1, [r7, #8]
 80109ea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80109ec:	2300      	movs	r3, #0
 80109ee:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80109f0:	68fb      	ldr	r3, [r7, #12]
 80109f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80109f4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80109f6:	68fb      	ldr	r3, [r7, #12]
 80109f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80109fa:	2b00      	cmp	r3, #0
 80109fc:	d10d      	bne.n	8010a1a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80109fe:	68fb      	ldr	r3, [r7, #12]
 8010a00:	681b      	ldr	r3, [r3, #0]
 8010a02:	2b00      	cmp	r3, #0
 8010a04:	d14d      	bne.n	8010aa2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010a06:	68fb      	ldr	r3, [r7, #12]
 8010a08:	689b      	ldr	r3, [r3, #8]
 8010a0a:	4618      	mov	r0, r3
 8010a0c:	f000 ffbc 	bl	8011988 <xTaskPriorityDisinherit>
 8010a10:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8010a12:	68fb      	ldr	r3, [r7, #12]
 8010a14:	2200      	movs	r2, #0
 8010a16:	609a      	str	r2, [r3, #8]
 8010a18:	e043      	b.n	8010aa2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	2b00      	cmp	r3, #0
 8010a1e:	d119      	bne.n	8010a54 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010a20:	68fb      	ldr	r3, [r7, #12]
 8010a22:	6858      	ldr	r0, [r3, #4]
 8010a24:	68fb      	ldr	r3, [r7, #12]
 8010a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a28:	461a      	mov	r2, r3
 8010a2a:	68b9      	ldr	r1, [r7, #8]
 8010a2c:	f003 fe13 	bl	8014656 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010a30:	68fb      	ldr	r3, [r7, #12]
 8010a32:	685a      	ldr	r2, [r3, #4]
 8010a34:	68fb      	ldr	r3, [r7, #12]
 8010a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a38:	441a      	add	r2, r3
 8010a3a:	68fb      	ldr	r3, [r7, #12]
 8010a3c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010a3e:	68fb      	ldr	r3, [r7, #12]
 8010a40:	685a      	ldr	r2, [r3, #4]
 8010a42:	68fb      	ldr	r3, [r7, #12]
 8010a44:	689b      	ldr	r3, [r3, #8]
 8010a46:	429a      	cmp	r2, r3
 8010a48:	d32b      	bcc.n	8010aa2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8010a4a:	68fb      	ldr	r3, [r7, #12]
 8010a4c:	681a      	ldr	r2, [r3, #0]
 8010a4e:	68fb      	ldr	r3, [r7, #12]
 8010a50:	605a      	str	r2, [r3, #4]
 8010a52:	e026      	b.n	8010aa2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8010a54:	68fb      	ldr	r3, [r7, #12]
 8010a56:	68d8      	ldr	r0, [r3, #12]
 8010a58:	68fb      	ldr	r3, [r7, #12]
 8010a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a5c:	461a      	mov	r2, r3
 8010a5e:	68b9      	ldr	r1, [r7, #8]
 8010a60:	f003 fdf9 	bl	8014656 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8010a64:	68fb      	ldr	r3, [r7, #12]
 8010a66:	68da      	ldr	r2, [r3, #12]
 8010a68:	68fb      	ldr	r3, [r7, #12]
 8010a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a6c:	425b      	negs	r3, r3
 8010a6e:	441a      	add	r2, r3
 8010a70:	68fb      	ldr	r3, [r7, #12]
 8010a72:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010a74:	68fb      	ldr	r3, [r7, #12]
 8010a76:	68da      	ldr	r2, [r3, #12]
 8010a78:	68fb      	ldr	r3, [r7, #12]
 8010a7a:	681b      	ldr	r3, [r3, #0]
 8010a7c:	429a      	cmp	r2, r3
 8010a7e:	d207      	bcs.n	8010a90 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8010a80:	68fb      	ldr	r3, [r7, #12]
 8010a82:	689a      	ldr	r2, [r3, #8]
 8010a84:	68fb      	ldr	r3, [r7, #12]
 8010a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a88:	425b      	negs	r3, r3
 8010a8a:	441a      	add	r2, r3
 8010a8c:	68fb      	ldr	r3, [r7, #12]
 8010a8e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	2b02      	cmp	r3, #2
 8010a94:	d105      	bne.n	8010aa2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010a96:	693b      	ldr	r3, [r7, #16]
 8010a98:	2b00      	cmp	r3, #0
 8010a9a:	d002      	beq.n	8010aa2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8010a9c:	693b      	ldr	r3, [r7, #16]
 8010a9e:	3b01      	subs	r3, #1
 8010aa0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010aa2:	693b      	ldr	r3, [r7, #16]
 8010aa4:	1c5a      	adds	r2, r3, #1
 8010aa6:	68fb      	ldr	r3, [r7, #12]
 8010aa8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8010aaa:	697b      	ldr	r3, [r7, #20]
}
 8010aac:	4618      	mov	r0, r3
 8010aae:	3718      	adds	r7, #24
 8010ab0:	46bd      	mov	sp, r7
 8010ab2:	bd80      	pop	{r7, pc}

08010ab4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8010ab4:	b580      	push	{r7, lr}
 8010ab6:	b082      	sub	sp, #8
 8010ab8:	af00      	add	r7, sp, #0
 8010aba:	6078      	str	r0, [r7, #4]
 8010abc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ac2:	2b00      	cmp	r3, #0
 8010ac4:	d018      	beq.n	8010af8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	68da      	ldr	r2, [r3, #12]
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ace:	441a      	add	r2, r3
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	68da      	ldr	r2, [r3, #12]
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	689b      	ldr	r3, [r3, #8]
 8010adc:	429a      	cmp	r2, r3
 8010ade:	d303      	bcc.n	8010ae8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	681a      	ldr	r2, [r3, #0]
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	68d9      	ldr	r1, [r3, #12]
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010af0:	461a      	mov	r2, r3
 8010af2:	6838      	ldr	r0, [r7, #0]
 8010af4:	f003 fdaf 	bl	8014656 <memcpy>
	}
}
 8010af8:	bf00      	nop
 8010afa:	3708      	adds	r7, #8
 8010afc:	46bd      	mov	sp, r7
 8010afe:	bd80      	pop	{r7, pc}

08010b00 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8010b00:	b580      	push	{r7, lr}
 8010b02:	b084      	sub	sp, #16
 8010b04:	af00      	add	r7, sp, #0
 8010b06:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8010b08:	f001 fc7c 	bl	8012404 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010b12:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010b14:	e011      	b.n	8010b3a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b1a:	2b00      	cmp	r3, #0
 8010b1c:	d012      	beq.n	8010b44 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	3324      	adds	r3, #36	; 0x24
 8010b22:	4618      	mov	r0, r3
 8010b24:	f000 fd50 	bl	80115c8 <xTaskRemoveFromEventList>
 8010b28:	4603      	mov	r3, r0
 8010b2a:	2b00      	cmp	r3, #0
 8010b2c:	d001      	beq.n	8010b32 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8010b2e:	f000 fe27 	bl	8011780 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8010b32:	7bfb      	ldrb	r3, [r7, #15]
 8010b34:	3b01      	subs	r3, #1
 8010b36:	b2db      	uxtb	r3, r3
 8010b38:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010b3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010b3e:	2b00      	cmp	r3, #0
 8010b40:	dce9      	bgt.n	8010b16 <prvUnlockQueue+0x16>
 8010b42:	e000      	b.n	8010b46 <prvUnlockQueue+0x46>
					break;
 8010b44:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	22ff      	movs	r2, #255	; 0xff
 8010b4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8010b4e:	f001 fc89 	bl	8012464 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8010b52:	f001 fc57 	bl	8012404 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010b5c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010b5e:	e011      	b.n	8010b84 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	691b      	ldr	r3, [r3, #16]
 8010b64:	2b00      	cmp	r3, #0
 8010b66:	d012      	beq.n	8010b8e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	3310      	adds	r3, #16
 8010b6c:	4618      	mov	r0, r3
 8010b6e:	f000 fd2b 	bl	80115c8 <xTaskRemoveFromEventList>
 8010b72:	4603      	mov	r3, r0
 8010b74:	2b00      	cmp	r3, #0
 8010b76:	d001      	beq.n	8010b7c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8010b78:	f000 fe02 	bl	8011780 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8010b7c:	7bbb      	ldrb	r3, [r7, #14]
 8010b7e:	3b01      	subs	r3, #1
 8010b80:	b2db      	uxtb	r3, r3
 8010b82:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010b84:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010b88:	2b00      	cmp	r3, #0
 8010b8a:	dce9      	bgt.n	8010b60 <prvUnlockQueue+0x60>
 8010b8c:	e000      	b.n	8010b90 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8010b8e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	22ff      	movs	r2, #255	; 0xff
 8010b94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8010b98:	f001 fc64 	bl	8012464 <vPortExitCritical>
}
 8010b9c:	bf00      	nop
 8010b9e:	3710      	adds	r7, #16
 8010ba0:	46bd      	mov	sp, r7
 8010ba2:	bd80      	pop	{r7, pc}

08010ba4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8010ba4:	b580      	push	{r7, lr}
 8010ba6:	b084      	sub	sp, #16
 8010ba8:	af00      	add	r7, sp, #0
 8010baa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010bac:	f001 fc2a 	bl	8012404 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010bb4:	2b00      	cmp	r3, #0
 8010bb6:	d102      	bne.n	8010bbe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8010bb8:	2301      	movs	r3, #1
 8010bba:	60fb      	str	r3, [r7, #12]
 8010bbc:	e001      	b.n	8010bc2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8010bbe:	2300      	movs	r3, #0
 8010bc0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010bc2:	f001 fc4f 	bl	8012464 <vPortExitCritical>

	return xReturn;
 8010bc6:	68fb      	ldr	r3, [r7, #12]
}
 8010bc8:	4618      	mov	r0, r3
 8010bca:	3710      	adds	r7, #16
 8010bcc:	46bd      	mov	sp, r7
 8010bce:	bd80      	pop	{r7, pc}

08010bd0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8010bd0:	b580      	push	{r7, lr}
 8010bd2:	b084      	sub	sp, #16
 8010bd4:	af00      	add	r7, sp, #0
 8010bd6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010bd8:	f001 fc14 	bl	8012404 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010be4:	429a      	cmp	r2, r3
 8010be6:	d102      	bne.n	8010bee <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8010be8:	2301      	movs	r3, #1
 8010bea:	60fb      	str	r3, [r7, #12]
 8010bec:	e001      	b.n	8010bf2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8010bee:	2300      	movs	r3, #0
 8010bf0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010bf2:	f001 fc37 	bl	8012464 <vPortExitCritical>

	return xReturn;
 8010bf6:	68fb      	ldr	r3, [r7, #12]
}
 8010bf8:	4618      	mov	r0, r3
 8010bfa:	3710      	adds	r7, #16
 8010bfc:	46bd      	mov	sp, r7
 8010bfe:	bd80      	pop	{r7, pc}

08010c00 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8010c00:	b480      	push	{r7}
 8010c02:	b085      	sub	sp, #20
 8010c04:	af00      	add	r7, sp, #0
 8010c06:	6078      	str	r0, [r7, #4]
 8010c08:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010c0a:	2300      	movs	r3, #0
 8010c0c:	60fb      	str	r3, [r7, #12]
 8010c0e:	e014      	b.n	8010c3a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8010c10:	4a0f      	ldr	r2, [pc, #60]	; (8010c50 <vQueueAddToRegistry+0x50>)
 8010c12:	68fb      	ldr	r3, [r7, #12]
 8010c14:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8010c18:	2b00      	cmp	r3, #0
 8010c1a:	d10b      	bne.n	8010c34 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8010c1c:	490c      	ldr	r1, [pc, #48]	; (8010c50 <vQueueAddToRegistry+0x50>)
 8010c1e:	68fb      	ldr	r3, [r7, #12]
 8010c20:	683a      	ldr	r2, [r7, #0]
 8010c22:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8010c26:	4a0a      	ldr	r2, [pc, #40]	; (8010c50 <vQueueAddToRegistry+0x50>)
 8010c28:	68fb      	ldr	r3, [r7, #12]
 8010c2a:	00db      	lsls	r3, r3, #3
 8010c2c:	4413      	add	r3, r2
 8010c2e:	687a      	ldr	r2, [r7, #4]
 8010c30:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8010c32:	e006      	b.n	8010c42 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010c34:	68fb      	ldr	r3, [r7, #12]
 8010c36:	3301      	adds	r3, #1
 8010c38:	60fb      	str	r3, [r7, #12]
 8010c3a:	68fb      	ldr	r3, [r7, #12]
 8010c3c:	2b07      	cmp	r3, #7
 8010c3e:	d9e7      	bls.n	8010c10 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8010c40:	bf00      	nop
 8010c42:	bf00      	nop
 8010c44:	3714      	adds	r7, #20
 8010c46:	46bd      	mov	sp, r7
 8010c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c4c:	4770      	bx	lr
 8010c4e:	bf00      	nop
 8010c50:	200046b8 	.word	0x200046b8

08010c54 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8010c54:	b580      	push	{r7, lr}
 8010c56:	b086      	sub	sp, #24
 8010c58:	af00      	add	r7, sp, #0
 8010c5a:	60f8      	str	r0, [r7, #12]
 8010c5c:	60b9      	str	r1, [r7, #8]
 8010c5e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8010c60:	68fb      	ldr	r3, [r7, #12]
 8010c62:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8010c64:	f001 fbce 	bl	8012404 <vPortEnterCritical>
 8010c68:	697b      	ldr	r3, [r7, #20]
 8010c6a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010c6e:	b25b      	sxtb	r3, r3
 8010c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c74:	d103      	bne.n	8010c7e <vQueueWaitForMessageRestricted+0x2a>
 8010c76:	697b      	ldr	r3, [r7, #20]
 8010c78:	2200      	movs	r2, #0
 8010c7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010c7e:	697b      	ldr	r3, [r7, #20]
 8010c80:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010c84:	b25b      	sxtb	r3, r3
 8010c86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c8a:	d103      	bne.n	8010c94 <vQueueWaitForMessageRestricted+0x40>
 8010c8c:	697b      	ldr	r3, [r7, #20]
 8010c8e:	2200      	movs	r2, #0
 8010c90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010c94:	f001 fbe6 	bl	8012464 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8010c98:	697b      	ldr	r3, [r7, #20]
 8010c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	d106      	bne.n	8010cae <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8010ca0:	697b      	ldr	r3, [r7, #20]
 8010ca2:	3324      	adds	r3, #36	; 0x24
 8010ca4:	687a      	ldr	r2, [r7, #4]
 8010ca6:	68b9      	ldr	r1, [r7, #8]
 8010ca8:	4618      	mov	r0, r3
 8010caa:	f000 fc61 	bl	8011570 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8010cae:	6978      	ldr	r0, [r7, #20]
 8010cb0:	f7ff ff26 	bl	8010b00 <prvUnlockQueue>
	}
 8010cb4:	bf00      	nop
 8010cb6:	3718      	adds	r7, #24
 8010cb8:	46bd      	mov	sp, r7
 8010cba:	bd80      	pop	{r7, pc}

08010cbc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8010cbc:	b580      	push	{r7, lr}
 8010cbe:	b08e      	sub	sp, #56	; 0x38
 8010cc0:	af04      	add	r7, sp, #16
 8010cc2:	60f8      	str	r0, [r7, #12]
 8010cc4:	60b9      	str	r1, [r7, #8]
 8010cc6:	607a      	str	r2, [r7, #4]
 8010cc8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8010cca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ccc:	2b00      	cmp	r3, #0
 8010cce:	d10a      	bne.n	8010ce6 <xTaskCreateStatic+0x2a>
	__asm volatile
 8010cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cd4:	f383 8811 	msr	BASEPRI, r3
 8010cd8:	f3bf 8f6f 	isb	sy
 8010cdc:	f3bf 8f4f 	dsb	sy
 8010ce0:	623b      	str	r3, [r7, #32]
}
 8010ce2:	bf00      	nop
 8010ce4:	e7fe      	b.n	8010ce4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8010ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ce8:	2b00      	cmp	r3, #0
 8010cea:	d10a      	bne.n	8010d02 <xTaskCreateStatic+0x46>
	__asm volatile
 8010cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cf0:	f383 8811 	msr	BASEPRI, r3
 8010cf4:	f3bf 8f6f 	isb	sy
 8010cf8:	f3bf 8f4f 	dsb	sy
 8010cfc:	61fb      	str	r3, [r7, #28]
}
 8010cfe:	bf00      	nop
 8010d00:	e7fe      	b.n	8010d00 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8010d02:	23a8      	movs	r3, #168	; 0xa8
 8010d04:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8010d06:	693b      	ldr	r3, [r7, #16]
 8010d08:	2ba8      	cmp	r3, #168	; 0xa8
 8010d0a:	d00a      	beq.n	8010d22 <xTaskCreateStatic+0x66>
	__asm volatile
 8010d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d10:	f383 8811 	msr	BASEPRI, r3
 8010d14:	f3bf 8f6f 	isb	sy
 8010d18:	f3bf 8f4f 	dsb	sy
 8010d1c:	61bb      	str	r3, [r7, #24]
}
 8010d1e:	bf00      	nop
 8010d20:	e7fe      	b.n	8010d20 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8010d22:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8010d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d26:	2b00      	cmp	r3, #0
 8010d28:	d01e      	beq.n	8010d68 <xTaskCreateStatic+0xac>
 8010d2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	d01b      	beq.n	8010d68 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010d30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d32:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8010d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010d38:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8010d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d3c:	2202      	movs	r2, #2
 8010d3e:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8010d42:	2300      	movs	r3, #0
 8010d44:	9303      	str	r3, [sp, #12]
 8010d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d48:	9302      	str	r3, [sp, #8]
 8010d4a:	f107 0314 	add.w	r3, r7, #20
 8010d4e:	9301      	str	r3, [sp, #4]
 8010d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d52:	9300      	str	r3, [sp, #0]
 8010d54:	683b      	ldr	r3, [r7, #0]
 8010d56:	687a      	ldr	r2, [r7, #4]
 8010d58:	68b9      	ldr	r1, [r7, #8]
 8010d5a:	68f8      	ldr	r0, [r7, #12]
 8010d5c:	f000 f850 	bl	8010e00 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010d60:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010d62:	f000 f8f3 	bl	8010f4c <prvAddNewTaskToReadyList>
 8010d66:	e001      	b.n	8010d6c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8010d68:	2300      	movs	r3, #0
 8010d6a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8010d6c:	697b      	ldr	r3, [r7, #20]
	}
 8010d6e:	4618      	mov	r0, r3
 8010d70:	3728      	adds	r7, #40	; 0x28
 8010d72:	46bd      	mov	sp, r7
 8010d74:	bd80      	pop	{r7, pc}

08010d76 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8010d76:	b580      	push	{r7, lr}
 8010d78:	b08c      	sub	sp, #48	; 0x30
 8010d7a:	af04      	add	r7, sp, #16
 8010d7c:	60f8      	str	r0, [r7, #12]
 8010d7e:	60b9      	str	r1, [r7, #8]
 8010d80:	603b      	str	r3, [r7, #0]
 8010d82:	4613      	mov	r3, r2
 8010d84:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8010d86:	88fb      	ldrh	r3, [r7, #6]
 8010d88:	009b      	lsls	r3, r3, #2
 8010d8a:	4618      	mov	r0, r3
 8010d8c:	f001 fc5c 	bl	8012648 <pvPortMalloc>
 8010d90:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8010d92:	697b      	ldr	r3, [r7, #20]
 8010d94:	2b00      	cmp	r3, #0
 8010d96:	d00e      	beq.n	8010db6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8010d98:	20a8      	movs	r0, #168	; 0xa8
 8010d9a:	f001 fc55 	bl	8012648 <pvPortMalloc>
 8010d9e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8010da0:	69fb      	ldr	r3, [r7, #28]
 8010da2:	2b00      	cmp	r3, #0
 8010da4:	d003      	beq.n	8010dae <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8010da6:	69fb      	ldr	r3, [r7, #28]
 8010da8:	697a      	ldr	r2, [r7, #20]
 8010daa:	631a      	str	r2, [r3, #48]	; 0x30
 8010dac:	e005      	b.n	8010dba <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8010dae:	6978      	ldr	r0, [r7, #20]
 8010db0:	f001 fd16 	bl	80127e0 <vPortFree>
 8010db4:	e001      	b.n	8010dba <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8010db6:	2300      	movs	r3, #0
 8010db8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8010dba:	69fb      	ldr	r3, [r7, #28]
 8010dbc:	2b00      	cmp	r3, #0
 8010dbe:	d017      	beq.n	8010df0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8010dc0:	69fb      	ldr	r3, [r7, #28]
 8010dc2:	2200      	movs	r2, #0
 8010dc4:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8010dc8:	88fa      	ldrh	r2, [r7, #6]
 8010dca:	2300      	movs	r3, #0
 8010dcc:	9303      	str	r3, [sp, #12]
 8010dce:	69fb      	ldr	r3, [r7, #28]
 8010dd0:	9302      	str	r3, [sp, #8]
 8010dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010dd4:	9301      	str	r3, [sp, #4]
 8010dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010dd8:	9300      	str	r3, [sp, #0]
 8010dda:	683b      	ldr	r3, [r7, #0]
 8010ddc:	68b9      	ldr	r1, [r7, #8]
 8010dde:	68f8      	ldr	r0, [r7, #12]
 8010de0:	f000 f80e 	bl	8010e00 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010de4:	69f8      	ldr	r0, [r7, #28]
 8010de6:	f000 f8b1 	bl	8010f4c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8010dea:	2301      	movs	r3, #1
 8010dec:	61bb      	str	r3, [r7, #24]
 8010dee:	e002      	b.n	8010df6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8010df0:	f04f 33ff 	mov.w	r3, #4294967295
 8010df4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8010df6:	69bb      	ldr	r3, [r7, #24]
	}
 8010df8:	4618      	mov	r0, r3
 8010dfa:	3720      	adds	r7, #32
 8010dfc:	46bd      	mov	sp, r7
 8010dfe:	bd80      	pop	{r7, pc}

08010e00 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8010e00:	b580      	push	{r7, lr}
 8010e02:	b088      	sub	sp, #32
 8010e04:	af00      	add	r7, sp, #0
 8010e06:	60f8      	str	r0, [r7, #12]
 8010e08:	60b9      	str	r1, [r7, #8]
 8010e0a:	607a      	str	r2, [r7, #4]
 8010e0c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8010e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e10:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	009b      	lsls	r3, r3, #2
 8010e16:	461a      	mov	r2, r3
 8010e18:	21a5      	movs	r1, #165	; 0xa5
 8010e1a:	f003 fb46 	bl	80144aa <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8010e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8010e28:	3b01      	subs	r3, #1
 8010e2a:	009b      	lsls	r3, r3, #2
 8010e2c:	4413      	add	r3, r2
 8010e2e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8010e30:	69bb      	ldr	r3, [r7, #24]
 8010e32:	f023 0307 	bic.w	r3, r3, #7
 8010e36:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8010e38:	69bb      	ldr	r3, [r7, #24]
 8010e3a:	f003 0307 	and.w	r3, r3, #7
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	d00a      	beq.n	8010e58 <prvInitialiseNewTask+0x58>
	__asm volatile
 8010e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e46:	f383 8811 	msr	BASEPRI, r3
 8010e4a:	f3bf 8f6f 	isb	sy
 8010e4e:	f3bf 8f4f 	dsb	sy
 8010e52:	617b      	str	r3, [r7, #20]
}
 8010e54:	bf00      	nop
 8010e56:	e7fe      	b.n	8010e56 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8010e58:	68bb      	ldr	r3, [r7, #8]
 8010e5a:	2b00      	cmp	r3, #0
 8010e5c:	d01f      	beq.n	8010e9e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010e5e:	2300      	movs	r3, #0
 8010e60:	61fb      	str	r3, [r7, #28]
 8010e62:	e012      	b.n	8010e8a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8010e64:	68ba      	ldr	r2, [r7, #8]
 8010e66:	69fb      	ldr	r3, [r7, #28]
 8010e68:	4413      	add	r3, r2
 8010e6a:	7819      	ldrb	r1, [r3, #0]
 8010e6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010e6e:	69fb      	ldr	r3, [r7, #28]
 8010e70:	4413      	add	r3, r2
 8010e72:	3334      	adds	r3, #52	; 0x34
 8010e74:	460a      	mov	r2, r1
 8010e76:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8010e78:	68ba      	ldr	r2, [r7, #8]
 8010e7a:	69fb      	ldr	r3, [r7, #28]
 8010e7c:	4413      	add	r3, r2
 8010e7e:	781b      	ldrb	r3, [r3, #0]
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	d006      	beq.n	8010e92 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010e84:	69fb      	ldr	r3, [r7, #28]
 8010e86:	3301      	adds	r3, #1
 8010e88:	61fb      	str	r3, [r7, #28]
 8010e8a:	69fb      	ldr	r3, [r7, #28]
 8010e8c:	2b0f      	cmp	r3, #15
 8010e8e:	d9e9      	bls.n	8010e64 <prvInitialiseNewTask+0x64>
 8010e90:	e000      	b.n	8010e94 <prvInitialiseNewTask+0x94>
			{
				break;
 8010e92:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8010e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e96:	2200      	movs	r2, #0
 8010e98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8010e9c:	e003      	b.n	8010ea6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8010e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ea0:	2200      	movs	r2, #0
 8010ea2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8010ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ea8:	2b37      	cmp	r3, #55	; 0x37
 8010eaa:	d901      	bls.n	8010eb0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8010eac:	2337      	movs	r3, #55	; 0x37
 8010eae:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8010eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010eb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010eb4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8010eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010eb8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010eba:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8010ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ebe:	2200      	movs	r2, #0
 8010ec0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8010ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ec4:	3304      	adds	r3, #4
 8010ec6:	4618      	mov	r0, r3
 8010ec8:	f7ff f978 	bl	80101bc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8010ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ece:	3318      	adds	r3, #24
 8010ed0:	4618      	mov	r0, r3
 8010ed2:	f7ff f973 	bl	80101bc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8010ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ed8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010eda:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ede:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8010ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ee4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8010ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ee8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010eea:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8010eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010eee:	2200      	movs	r2, #0
 8010ef0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ef6:	2200      	movs	r2, #0
 8010ef8:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8010efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010efe:	3354      	adds	r3, #84	; 0x54
 8010f00:	224c      	movs	r2, #76	; 0x4c
 8010f02:	2100      	movs	r1, #0
 8010f04:	4618      	mov	r0, r3
 8010f06:	f003 fad0 	bl	80144aa <memset>
 8010f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f0c:	4a0c      	ldr	r2, [pc, #48]	; (8010f40 <prvInitialiseNewTask+0x140>)
 8010f0e:	659a      	str	r2, [r3, #88]	; 0x58
 8010f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f12:	4a0c      	ldr	r2, [pc, #48]	; (8010f44 <prvInitialiseNewTask+0x144>)
 8010f14:	65da      	str	r2, [r3, #92]	; 0x5c
 8010f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f18:	4a0b      	ldr	r2, [pc, #44]	; (8010f48 <prvInitialiseNewTask+0x148>)
 8010f1a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8010f1c:	683a      	ldr	r2, [r7, #0]
 8010f1e:	68f9      	ldr	r1, [r7, #12]
 8010f20:	69b8      	ldr	r0, [r7, #24]
 8010f22:	f001 f941 	bl	80121a8 <pxPortInitialiseStack>
 8010f26:	4602      	mov	r2, r0
 8010f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f2a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8010f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f2e:	2b00      	cmp	r3, #0
 8010f30:	d002      	beq.n	8010f38 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8010f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010f36:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010f38:	bf00      	nop
 8010f3a:	3720      	adds	r7, #32
 8010f3c:	46bd      	mov	sp, r7
 8010f3e:	bd80      	pop	{r7, pc}
 8010f40:	20009828 	.word	0x20009828
 8010f44:	20009890 	.word	0x20009890
 8010f48:	200098f8 	.word	0x200098f8

08010f4c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8010f4c:	b580      	push	{r7, lr}
 8010f4e:	b082      	sub	sp, #8
 8010f50:	af00      	add	r7, sp, #0
 8010f52:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8010f54:	f001 fa56 	bl	8012404 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8010f58:	4b2d      	ldr	r3, [pc, #180]	; (8011010 <prvAddNewTaskToReadyList+0xc4>)
 8010f5a:	681b      	ldr	r3, [r3, #0]
 8010f5c:	3301      	adds	r3, #1
 8010f5e:	4a2c      	ldr	r2, [pc, #176]	; (8011010 <prvAddNewTaskToReadyList+0xc4>)
 8010f60:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8010f62:	4b2c      	ldr	r3, [pc, #176]	; (8011014 <prvAddNewTaskToReadyList+0xc8>)
 8010f64:	681b      	ldr	r3, [r3, #0]
 8010f66:	2b00      	cmp	r3, #0
 8010f68:	d109      	bne.n	8010f7e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8010f6a:	4a2a      	ldr	r2, [pc, #168]	; (8011014 <prvAddNewTaskToReadyList+0xc8>)
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8010f70:	4b27      	ldr	r3, [pc, #156]	; (8011010 <prvAddNewTaskToReadyList+0xc4>)
 8010f72:	681b      	ldr	r3, [r3, #0]
 8010f74:	2b01      	cmp	r3, #1
 8010f76:	d110      	bne.n	8010f9a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8010f78:	f000 fc26 	bl	80117c8 <prvInitialiseTaskLists>
 8010f7c:	e00d      	b.n	8010f9a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8010f7e:	4b26      	ldr	r3, [pc, #152]	; (8011018 <prvAddNewTaskToReadyList+0xcc>)
 8010f80:	681b      	ldr	r3, [r3, #0]
 8010f82:	2b00      	cmp	r3, #0
 8010f84:	d109      	bne.n	8010f9a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8010f86:	4b23      	ldr	r3, [pc, #140]	; (8011014 <prvAddNewTaskToReadyList+0xc8>)
 8010f88:	681b      	ldr	r3, [r3, #0]
 8010f8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f90:	429a      	cmp	r2, r3
 8010f92:	d802      	bhi.n	8010f9a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8010f94:	4a1f      	ldr	r2, [pc, #124]	; (8011014 <prvAddNewTaskToReadyList+0xc8>)
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8010f9a:	4b20      	ldr	r3, [pc, #128]	; (801101c <prvAddNewTaskToReadyList+0xd0>)
 8010f9c:	681b      	ldr	r3, [r3, #0]
 8010f9e:	3301      	adds	r3, #1
 8010fa0:	4a1e      	ldr	r2, [pc, #120]	; (801101c <prvAddNewTaskToReadyList+0xd0>)
 8010fa2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8010fa4:	4b1d      	ldr	r3, [pc, #116]	; (801101c <prvAddNewTaskToReadyList+0xd0>)
 8010fa6:	681a      	ldr	r2, [r3, #0]
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010fb0:	4b1b      	ldr	r3, [pc, #108]	; (8011020 <prvAddNewTaskToReadyList+0xd4>)
 8010fb2:	681b      	ldr	r3, [r3, #0]
 8010fb4:	429a      	cmp	r2, r3
 8010fb6:	d903      	bls.n	8010fc0 <prvAddNewTaskToReadyList+0x74>
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010fbc:	4a18      	ldr	r2, [pc, #96]	; (8011020 <prvAddNewTaskToReadyList+0xd4>)
 8010fbe:	6013      	str	r3, [r2, #0]
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010fc4:	4613      	mov	r3, r2
 8010fc6:	009b      	lsls	r3, r3, #2
 8010fc8:	4413      	add	r3, r2
 8010fca:	009b      	lsls	r3, r3, #2
 8010fcc:	4a15      	ldr	r2, [pc, #84]	; (8011024 <prvAddNewTaskToReadyList+0xd8>)
 8010fce:	441a      	add	r2, r3
 8010fd0:	687b      	ldr	r3, [r7, #4]
 8010fd2:	3304      	adds	r3, #4
 8010fd4:	4619      	mov	r1, r3
 8010fd6:	4610      	mov	r0, r2
 8010fd8:	f7ff f8fd 	bl	80101d6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8010fdc:	f001 fa42 	bl	8012464 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8010fe0:	4b0d      	ldr	r3, [pc, #52]	; (8011018 <prvAddNewTaskToReadyList+0xcc>)
 8010fe2:	681b      	ldr	r3, [r3, #0]
 8010fe4:	2b00      	cmp	r3, #0
 8010fe6:	d00e      	beq.n	8011006 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8010fe8:	4b0a      	ldr	r3, [pc, #40]	; (8011014 <prvAddNewTaskToReadyList+0xc8>)
 8010fea:	681b      	ldr	r3, [r3, #0]
 8010fec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ff2:	429a      	cmp	r2, r3
 8010ff4:	d207      	bcs.n	8011006 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8010ff6:	4b0c      	ldr	r3, [pc, #48]	; (8011028 <prvAddNewTaskToReadyList+0xdc>)
 8010ff8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010ffc:	601a      	str	r2, [r3, #0]
 8010ffe:	f3bf 8f4f 	dsb	sy
 8011002:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011006:	bf00      	nop
 8011008:	3708      	adds	r7, #8
 801100a:	46bd      	mov	sp, r7
 801100c:	bd80      	pop	{r7, pc}
 801100e:	bf00      	nop
 8011010:	20004bcc 	.word	0x20004bcc
 8011014:	200046f8 	.word	0x200046f8
 8011018:	20004bd8 	.word	0x20004bd8
 801101c:	20004be8 	.word	0x20004be8
 8011020:	20004bd4 	.word	0x20004bd4
 8011024:	200046fc 	.word	0x200046fc
 8011028:	e000ed04 	.word	0xe000ed04

0801102c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 801102c:	b580      	push	{r7, lr}
 801102e:	b084      	sub	sp, #16
 8011030:	af00      	add	r7, sp, #0
 8011032:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8011034:	2300      	movs	r3, #0
 8011036:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8011038:	687b      	ldr	r3, [r7, #4]
 801103a:	2b00      	cmp	r3, #0
 801103c:	d017      	beq.n	801106e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801103e:	4b13      	ldr	r3, [pc, #76]	; (801108c <vTaskDelay+0x60>)
 8011040:	681b      	ldr	r3, [r3, #0]
 8011042:	2b00      	cmp	r3, #0
 8011044:	d00a      	beq.n	801105c <vTaskDelay+0x30>
	__asm volatile
 8011046:	f04f 0350 	mov.w	r3, #80	; 0x50
 801104a:	f383 8811 	msr	BASEPRI, r3
 801104e:	f3bf 8f6f 	isb	sy
 8011052:	f3bf 8f4f 	dsb	sy
 8011056:	60bb      	str	r3, [r7, #8]
}
 8011058:	bf00      	nop
 801105a:	e7fe      	b.n	801105a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 801105c:	f000 f88a 	bl	8011174 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8011060:	2100      	movs	r1, #0
 8011062:	6878      	ldr	r0, [r7, #4]
 8011064:	f000 fcfe 	bl	8011a64 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8011068:	f000 f892 	bl	8011190 <xTaskResumeAll>
 801106c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801106e:	68fb      	ldr	r3, [r7, #12]
 8011070:	2b00      	cmp	r3, #0
 8011072:	d107      	bne.n	8011084 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8011074:	4b06      	ldr	r3, [pc, #24]	; (8011090 <vTaskDelay+0x64>)
 8011076:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801107a:	601a      	str	r2, [r3, #0]
 801107c:	f3bf 8f4f 	dsb	sy
 8011080:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011084:	bf00      	nop
 8011086:	3710      	adds	r7, #16
 8011088:	46bd      	mov	sp, r7
 801108a:	bd80      	pop	{r7, pc}
 801108c:	20004bf4 	.word	0x20004bf4
 8011090:	e000ed04 	.word	0xe000ed04

08011094 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8011094:	b580      	push	{r7, lr}
 8011096:	b08a      	sub	sp, #40	; 0x28
 8011098:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801109a:	2300      	movs	r3, #0
 801109c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801109e:	2300      	movs	r3, #0
 80110a0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80110a2:	463a      	mov	r2, r7
 80110a4:	1d39      	adds	r1, r7, #4
 80110a6:	f107 0308 	add.w	r3, r7, #8
 80110aa:	4618      	mov	r0, r3
 80110ac:	f7ff f832 	bl	8010114 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80110b0:	6839      	ldr	r1, [r7, #0]
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	68ba      	ldr	r2, [r7, #8]
 80110b6:	9202      	str	r2, [sp, #8]
 80110b8:	9301      	str	r3, [sp, #4]
 80110ba:	2300      	movs	r3, #0
 80110bc:	9300      	str	r3, [sp, #0]
 80110be:	2300      	movs	r3, #0
 80110c0:	460a      	mov	r2, r1
 80110c2:	4924      	ldr	r1, [pc, #144]	; (8011154 <vTaskStartScheduler+0xc0>)
 80110c4:	4824      	ldr	r0, [pc, #144]	; (8011158 <vTaskStartScheduler+0xc4>)
 80110c6:	f7ff fdf9 	bl	8010cbc <xTaskCreateStatic>
 80110ca:	4603      	mov	r3, r0
 80110cc:	4a23      	ldr	r2, [pc, #140]	; (801115c <vTaskStartScheduler+0xc8>)
 80110ce:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80110d0:	4b22      	ldr	r3, [pc, #136]	; (801115c <vTaskStartScheduler+0xc8>)
 80110d2:	681b      	ldr	r3, [r3, #0]
 80110d4:	2b00      	cmp	r3, #0
 80110d6:	d002      	beq.n	80110de <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80110d8:	2301      	movs	r3, #1
 80110da:	617b      	str	r3, [r7, #20]
 80110dc:	e001      	b.n	80110e2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80110de:	2300      	movs	r3, #0
 80110e0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80110e2:	697b      	ldr	r3, [r7, #20]
 80110e4:	2b01      	cmp	r3, #1
 80110e6:	d102      	bne.n	80110ee <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80110e8:	f000 fd10 	bl	8011b0c <xTimerCreateTimerTask>
 80110ec:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80110ee:	697b      	ldr	r3, [r7, #20]
 80110f0:	2b01      	cmp	r3, #1
 80110f2:	d11b      	bne.n	801112c <vTaskStartScheduler+0x98>
	__asm volatile
 80110f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110f8:	f383 8811 	msr	BASEPRI, r3
 80110fc:	f3bf 8f6f 	isb	sy
 8011100:	f3bf 8f4f 	dsb	sy
 8011104:	613b      	str	r3, [r7, #16]
}
 8011106:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8011108:	4b15      	ldr	r3, [pc, #84]	; (8011160 <vTaskStartScheduler+0xcc>)
 801110a:	681b      	ldr	r3, [r3, #0]
 801110c:	3354      	adds	r3, #84	; 0x54
 801110e:	4a15      	ldr	r2, [pc, #84]	; (8011164 <vTaskStartScheduler+0xd0>)
 8011110:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8011112:	4b15      	ldr	r3, [pc, #84]	; (8011168 <vTaskStartScheduler+0xd4>)
 8011114:	f04f 32ff 	mov.w	r2, #4294967295
 8011118:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801111a:	4b14      	ldr	r3, [pc, #80]	; (801116c <vTaskStartScheduler+0xd8>)
 801111c:	2201      	movs	r2, #1
 801111e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8011120:	4b13      	ldr	r3, [pc, #76]	; (8011170 <vTaskStartScheduler+0xdc>)
 8011122:	2200      	movs	r2, #0
 8011124:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8011126:	f001 f8cb 	bl	80122c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801112a:	e00e      	b.n	801114a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801112c:	697b      	ldr	r3, [r7, #20]
 801112e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011132:	d10a      	bne.n	801114a <vTaskStartScheduler+0xb6>
	__asm volatile
 8011134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011138:	f383 8811 	msr	BASEPRI, r3
 801113c:	f3bf 8f6f 	isb	sy
 8011140:	f3bf 8f4f 	dsb	sy
 8011144:	60fb      	str	r3, [r7, #12]
}
 8011146:	bf00      	nop
 8011148:	e7fe      	b.n	8011148 <vTaskStartScheduler+0xb4>
}
 801114a:	bf00      	nop
 801114c:	3718      	adds	r7, #24
 801114e:	46bd      	mov	sp, r7
 8011150:	bd80      	pop	{r7, pc}
 8011152:	bf00      	nop
 8011154:	08016934 	.word	0x08016934
 8011158:	08011799 	.word	0x08011799
 801115c:	20004bf0 	.word	0x20004bf0
 8011160:	200046f8 	.word	0x200046f8
 8011164:	20000410 	.word	0x20000410
 8011168:	20004bec 	.word	0x20004bec
 801116c:	20004bd8 	.word	0x20004bd8
 8011170:	20004bd0 	.word	0x20004bd0

08011174 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8011174:	b480      	push	{r7}
 8011176:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8011178:	4b04      	ldr	r3, [pc, #16]	; (801118c <vTaskSuspendAll+0x18>)
 801117a:	681b      	ldr	r3, [r3, #0]
 801117c:	3301      	adds	r3, #1
 801117e:	4a03      	ldr	r2, [pc, #12]	; (801118c <vTaskSuspendAll+0x18>)
 8011180:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8011182:	bf00      	nop
 8011184:	46bd      	mov	sp, r7
 8011186:	f85d 7b04 	ldr.w	r7, [sp], #4
 801118a:	4770      	bx	lr
 801118c:	20004bf4 	.word	0x20004bf4

08011190 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8011190:	b580      	push	{r7, lr}
 8011192:	b084      	sub	sp, #16
 8011194:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8011196:	2300      	movs	r3, #0
 8011198:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801119a:	2300      	movs	r3, #0
 801119c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801119e:	4b42      	ldr	r3, [pc, #264]	; (80112a8 <xTaskResumeAll+0x118>)
 80111a0:	681b      	ldr	r3, [r3, #0]
 80111a2:	2b00      	cmp	r3, #0
 80111a4:	d10a      	bne.n	80111bc <xTaskResumeAll+0x2c>
	__asm volatile
 80111a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111aa:	f383 8811 	msr	BASEPRI, r3
 80111ae:	f3bf 8f6f 	isb	sy
 80111b2:	f3bf 8f4f 	dsb	sy
 80111b6:	603b      	str	r3, [r7, #0]
}
 80111b8:	bf00      	nop
 80111ba:	e7fe      	b.n	80111ba <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80111bc:	f001 f922 	bl	8012404 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80111c0:	4b39      	ldr	r3, [pc, #228]	; (80112a8 <xTaskResumeAll+0x118>)
 80111c2:	681b      	ldr	r3, [r3, #0]
 80111c4:	3b01      	subs	r3, #1
 80111c6:	4a38      	ldr	r2, [pc, #224]	; (80112a8 <xTaskResumeAll+0x118>)
 80111c8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80111ca:	4b37      	ldr	r3, [pc, #220]	; (80112a8 <xTaskResumeAll+0x118>)
 80111cc:	681b      	ldr	r3, [r3, #0]
 80111ce:	2b00      	cmp	r3, #0
 80111d0:	d162      	bne.n	8011298 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80111d2:	4b36      	ldr	r3, [pc, #216]	; (80112ac <xTaskResumeAll+0x11c>)
 80111d4:	681b      	ldr	r3, [r3, #0]
 80111d6:	2b00      	cmp	r3, #0
 80111d8:	d05e      	beq.n	8011298 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80111da:	e02f      	b.n	801123c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80111dc:	4b34      	ldr	r3, [pc, #208]	; (80112b0 <xTaskResumeAll+0x120>)
 80111de:	68db      	ldr	r3, [r3, #12]
 80111e0:	68db      	ldr	r3, [r3, #12]
 80111e2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80111e4:	68fb      	ldr	r3, [r7, #12]
 80111e6:	3318      	adds	r3, #24
 80111e8:	4618      	mov	r0, r3
 80111ea:	f7ff f851 	bl	8010290 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80111ee:	68fb      	ldr	r3, [r7, #12]
 80111f0:	3304      	adds	r3, #4
 80111f2:	4618      	mov	r0, r3
 80111f4:	f7ff f84c 	bl	8010290 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80111f8:	68fb      	ldr	r3, [r7, #12]
 80111fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80111fc:	4b2d      	ldr	r3, [pc, #180]	; (80112b4 <xTaskResumeAll+0x124>)
 80111fe:	681b      	ldr	r3, [r3, #0]
 8011200:	429a      	cmp	r2, r3
 8011202:	d903      	bls.n	801120c <xTaskResumeAll+0x7c>
 8011204:	68fb      	ldr	r3, [r7, #12]
 8011206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011208:	4a2a      	ldr	r2, [pc, #168]	; (80112b4 <xTaskResumeAll+0x124>)
 801120a:	6013      	str	r3, [r2, #0]
 801120c:	68fb      	ldr	r3, [r7, #12]
 801120e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011210:	4613      	mov	r3, r2
 8011212:	009b      	lsls	r3, r3, #2
 8011214:	4413      	add	r3, r2
 8011216:	009b      	lsls	r3, r3, #2
 8011218:	4a27      	ldr	r2, [pc, #156]	; (80112b8 <xTaskResumeAll+0x128>)
 801121a:	441a      	add	r2, r3
 801121c:	68fb      	ldr	r3, [r7, #12]
 801121e:	3304      	adds	r3, #4
 8011220:	4619      	mov	r1, r3
 8011222:	4610      	mov	r0, r2
 8011224:	f7fe ffd7 	bl	80101d6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011228:	68fb      	ldr	r3, [r7, #12]
 801122a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801122c:	4b23      	ldr	r3, [pc, #140]	; (80112bc <xTaskResumeAll+0x12c>)
 801122e:	681b      	ldr	r3, [r3, #0]
 8011230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011232:	429a      	cmp	r2, r3
 8011234:	d302      	bcc.n	801123c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8011236:	4b22      	ldr	r3, [pc, #136]	; (80112c0 <xTaskResumeAll+0x130>)
 8011238:	2201      	movs	r2, #1
 801123a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801123c:	4b1c      	ldr	r3, [pc, #112]	; (80112b0 <xTaskResumeAll+0x120>)
 801123e:	681b      	ldr	r3, [r3, #0]
 8011240:	2b00      	cmp	r3, #0
 8011242:	d1cb      	bne.n	80111dc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8011244:	68fb      	ldr	r3, [r7, #12]
 8011246:	2b00      	cmp	r3, #0
 8011248:	d001      	beq.n	801124e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801124a:	f000 fb5f 	bl	801190c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801124e:	4b1d      	ldr	r3, [pc, #116]	; (80112c4 <xTaskResumeAll+0x134>)
 8011250:	681b      	ldr	r3, [r3, #0]
 8011252:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	2b00      	cmp	r3, #0
 8011258:	d010      	beq.n	801127c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801125a:	f000 f847 	bl	80112ec <xTaskIncrementTick>
 801125e:	4603      	mov	r3, r0
 8011260:	2b00      	cmp	r3, #0
 8011262:	d002      	beq.n	801126a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8011264:	4b16      	ldr	r3, [pc, #88]	; (80112c0 <xTaskResumeAll+0x130>)
 8011266:	2201      	movs	r2, #1
 8011268:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	3b01      	subs	r3, #1
 801126e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	2b00      	cmp	r3, #0
 8011274:	d1f1      	bne.n	801125a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8011276:	4b13      	ldr	r3, [pc, #76]	; (80112c4 <xTaskResumeAll+0x134>)
 8011278:	2200      	movs	r2, #0
 801127a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801127c:	4b10      	ldr	r3, [pc, #64]	; (80112c0 <xTaskResumeAll+0x130>)
 801127e:	681b      	ldr	r3, [r3, #0]
 8011280:	2b00      	cmp	r3, #0
 8011282:	d009      	beq.n	8011298 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8011284:	2301      	movs	r3, #1
 8011286:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8011288:	4b0f      	ldr	r3, [pc, #60]	; (80112c8 <xTaskResumeAll+0x138>)
 801128a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801128e:	601a      	str	r2, [r3, #0]
 8011290:	f3bf 8f4f 	dsb	sy
 8011294:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011298:	f001 f8e4 	bl	8012464 <vPortExitCritical>

	return xAlreadyYielded;
 801129c:	68bb      	ldr	r3, [r7, #8]
}
 801129e:	4618      	mov	r0, r3
 80112a0:	3710      	adds	r7, #16
 80112a2:	46bd      	mov	sp, r7
 80112a4:	bd80      	pop	{r7, pc}
 80112a6:	bf00      	nop
 80112a8:	20004bf4 	.word	0x20004bf4
 80112ac:	20004bcc 	.word	0x20004bcc
 80112b0:	20004b8c 	.word	0x20004b8c
 80112b4:	20004bd4 	.word	0x20004bd4
 80112b8:	200046fc 	.word	0x200046fc
 80112bc:	200046f8 	.word	0x200046f8
 80112c0:	20004be0 	.word	0x20004be0
 80112c4:	20004bdc 	.word	0x20004bdc
 80112c8:	e000ed04 	.word	0xe000ed04

080112cc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80112cc:	b480      	push	{r7}
 80112ce:	b083      	sub	sp, #12
 80112d0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80112d2:	4b05      	ldr	r3, [pc, #20]	; (80112e8 <xTaskGetTickCount+0x1c>)
 80112d4:	681b      	ldr	r3, [r3, #0]
 80112d6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80112d8:	687b      	ldr	r3, [r7, #4]
}
 80112da:	4618      	mov	r0, r3
 80112dc:	370c      	adds	r7, #12
 80112de:	46bd      	mov	sp, r7
 80112e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112e4:	4770      	bx	lr
 80112e6:	bf00      	nop
 80112e8:	20004bd0 	.word	0x20004bd0

080112ec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80112ec:	b580      	push	{r7, lr}
 80112ee:	b086      	sub	sp, #24
 80112f0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80112f2:	2300      	movs	r3, #0
 80112f4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80112f6:	4b4f      	ldr	r3, [pc, #316]	; (8011434 <xTaskIncrementTick+0x148>)
 80112f8:	681b      	ldr	r3, [r3, #0]
 80112fa:	2b00      	cmp	r3, #0
 80112fc:	f040 808f 	bne.w	801141e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8011300:	4b4d      	ldr	r3, [pc, #308]	; (8011438 <xTaskIncrementTick+0x14c>)
 8011302:	681b      	ldr	r3, [r3, #0]
 8011304:	3301      	adds	r3, #1
 8011306:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8011308:	4a4b      	ldr	r2, [pc, #300]	; (8011438 <xTaskIncrementTick+0x14c>)
 801130a:	693b      	ldr	r3, [r7, #16]
 801130c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801130e:	693b      	ldr	r3, [r7, #16]
 8011310:	2b00      	cmp	r3, #0
 8011312:	d120      	bne.n	8011356 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8011314:	4b49      	ldr	r3, [pc, #292]	; (801143c <xTaskIncrementTick+0x150>)
 8011316:	681b      	ldr	r3, [r3, #0]
 8011318:	681b      	ldr	r3, [r3, #0]
 801131a:	2b00      	cmp	r3, #0
 801131c:	d00a      	beq.n	8011334 <xTaskIncrementTick+0x48>
	__asm volatile
 801131e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011322:	f383 8811 	msr	BASEPRI, r3
 8011326:	f3bf 8f6f 	isb	sy
 801132a:	f3bf 8f4f 	dsb	sy
 801132e:	603b      	str	r3, [r7, #0]
}
 8011330:	bf00      	nop
 8011332:	e7fe      	b.n	8011332 <xTaskIncrementTick+0x46>
 8011334:	4b41      	ldr	r3, [pc, #260]	; (801143c <xTaskIncrementTick+0x150>)
 8011336:	681b      	ldr	r3, [r3, #0]
 8011338:	60fb      	str	r3, [r7, #12]
 801133a:	4b41      	ldr	r3, [pc, #260]	; (8011440 <xTaskIncrementTick+0x154>)
 801133c:	681b      	ldr	r3, [r3, #0]
 801133e:	4a3f      	ldr	r2, [pc, #252]	; (801143c <xTaskIncrementTick+0x150>)
 8011340:	6013      	str	r3, [r2, #0]
 8011342:	4a3f      	ldr	r2, [pc, #252]	; (8011440 <xTaskIncrementTick+0x154>)
 8011344:	68fb      	ldr	r3, [r7, #12]
 8011346:	6013      	str	r3, [r2, #0]
 8011348:	4b3e      	ldr	r3, [pc, #248]	; (8011444 <xTaskIncrementTick+0x158>)
 801134a:	681b      	ldr	r3, [r3, #0]
 801134c:	3301      	adds	r3, #1
 801134e:	4a3d      	ldr	r2, [pc, #244]	; (8011444 <xTaskIncrementTick+0x158>)
 8011350:	6013      	str	r3, [r2, #0]
 8011352:	f000 fadb 	bl	801190c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8011356:	4b3c      	ldr	r3, [pc, #240]	; (8011448 <xTaskIncrementTick+0x15c>)
 8011358:	681b      	ldr	r3, [r3, #0]
 801135a:	693a      	ldr	r2, [r7, #16]
 801135c:	429a      	cmp	r2, r3
 801135e:	d349      	bcc.n	80113f4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011360:	4b36      	ldr	r3, [pc, #216]	; (801143c <xTaskIncrementTick+0x150>)
 8011362:	681b      	ldr	r3, [r3, #0]
 8011364:	681b      	ldr	r3, [r3, #0]
 8011366:	2b00      	cmp	r3, #0
 8011368:	d104      	bne.n	8011374 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801136a:	4b37      	ldr	r3, [pc, #220]	; (8011448 <xTaskIncrementTick+0x15c>)
 801136c:	f04f 32ff 	mov.w	r2, #4294967295
 8011370:	601a      	str	r2, [r3, #0]
					break;
 8011372:	e03f      	b.n	80113f4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011374:	4b31      	ldr	r3, [pc, #196]	; (801143c <xTaskIncrementTick+0x150>)
 8011376:	681b      	ldr	r3, [r3, #0]
 8011378:	68db      	ldr	r3, [r3, #12]
 801137a:	68db      	ldr	r3, [r3, #12]
 801137c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801137e:	68bb      	ldr	r3, [r7, #8]
 8011380:	685b      	ldr	r3, [r3, #4]
 8011382:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8011384:	693a      	ldr	r2, [r7, #16]
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	429a      	cmp	r2, r3
 801138a:	d203      	bcs.n	8011394 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801138c:	4a2e      	ldr	r2, [pc, #184]	; (8011448 <xTaskIncrementTick+0x15c>)
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8011392:	e02f      	b.n	80113f4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011394:	68bb      	ldr	r3, [r7, #8]
 8011396:	3304      	adds	r3, #4
 8011398:	4618      	mov	r0, r3
 801139a:	f7fe ff79 	bl	8010290 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801139e:	68bb      	ldr	r3, [r7, #8]
 80113a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80113a2:	2b00      	cmp	r3, #0
 80113a4:	d004      	beq.n	80113b0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80113a6:	68bb      	ldr	r3, [r7, #8]
 80113a8:	3318      	adds	r3, #24
 80113aa:	4618      	mov	r0, r3
 80113ac:	f7fe ff70 	bl	8010290 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80113b0:	68bb      	ldr	r3, [r7, #8]
 80113b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80113b4:	4b25      	ldr	r3, [pc, #148]	; (801144c <xTaskIncrementTick+0x160>)
 80113b6:	681b      	ldr	r3, [r3, #0]
 80113b8:	429a      	cmp	r2, r3
 80113ba:	d903      	bls.n	80113c4 <xTaskIncrementTick+0xd8>
 80113bc:	68bb      	ldr	r3, [r7, #8]
 80113be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80113c0:	4a22      	ldr	r2, [pc, #136]	; (801144c <xTaskIncrementTick+0x160>)
 80113c2:	6013      	str	r3, [r2, #0]
 80113c4:	68bb      	ldr	r3, [r7, #8]
 80113c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80113c8:	4613      	mov	r3, r2
 80113ca:	009b      	lsls	r3, r3, #2
 80113cc:	4413      	add	r3, r2
 80113ce:	009b      	lsls	r3, r3, #2
 80113d0:	4a1f      	ldr	r2, [pc, #124]	; (8011450 <xTaskIncrementTick+0x164>)
 80113d2:	441a      	add	r2, r3
 80113d4:	68bb      	ldr	r3, [r7, #8]
 80113d6:	3304      	adds	r3, #4
 80113d8:	4619      	mov	r1, r3
 80113da:	4610      	mov	r0, r2
 80113dc:	f7fe fefb 	bl	80101d6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80113e0:	68bb      	ldr	r3, [r7, #8]
 80113e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80113e4:	4b1b      	ldr	r3, [pc, #108]	; (8011454 <xTaskIncrementTick+0x168>)
 80113e6:	681b      	ldr	r3, [r3, #0]
 80113e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80113ea:	429a      	cmp	r2, r3
 80113ec:	d3b8      	bcc.n	8011360 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80113ee:	2301      	movs	r3, #1
 80113f0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80113f2:	e7b5      	b.n	8011360 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80113f4:	4b17      	ldr	r3, [pc, #92]	; (8011454 <xTaskIncrementTick+0x168>)
 80113f6:	681b      	ldr	r3, [r3, #0]
 80113f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80113fa:	4915      	ldr	r1, [pc, #84]	; (8011450 <xTaskIncrementTick+0x164>)
 80113fc:	4613      	mov	r3, r2
 80113fe:	009b      	lsls	r3, r3, #2
 8011400:	4413      	add	r3, r2
 8011402:	009b      	lsls	r3, r3, #2
 8011404:	440b      	add	r3, r1
 8011406:	681b      	ldr	r3, [r3, #0]
 8011408:	2b01      	cmp	r3, #1
 801140a:	d901      	bls.n	8011410 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 801140c:	2301      	movs	r3, #1
 801140e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8011410:	4b11      	ldr	r3, [pc, #68]	; (8011458 <xTaskIncrementTick+0x16c>)
 8011412:	681b      	ldr	r3, [r3, #0]
 8011414:	2b00      	cmp	r3, #0
 8011416:	d007      	beq.n	8011428 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8011418:	2301      	movs	r3, #1
 801141a:	617b      	str	r3, [r7, #20]
 801141c:	e004      	b.n	8011428 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 801141e:	4b0f      	ldr	r3, [pc, #60]	; (801145c <xTaskIncrementTick+0x170>)
 8011420:	681b      	ldr	r3, [r3, #0]
 8011422:	3301      	adds	r3, #1
 8011424:	4a0d      	ldr	r2, [pc, #52]	; (801145c <xTaskIncrementTick+0x170>)
 8011426:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8011428:	697b      	ldr	r3, [r7, #20]
}
 801142a:	4618      	mov	r0, r3
 801142c:	3718      	adds	r7, #24
 801142e:	46bd      	mov	sp, r7
 8011430:	bd80      	pop	{r7, pc}
 8011432:	bf00      	nop
 8011434:	20004bf4 	.word	0x20004bf4
 8011438:	20004bd0 	.word	0x20004bd0
 801143c:	20004b84 	.word	0x20004b84
 8011440:	20004b88 	.word	0x20004b88
 8011444:	20004be4 	.word	0x20004be4
 8011448:	20004bec 	.word	0x20004bec
 801144c:	20004bd4 	.word	0x20004bd4
 8011450:	200046fc 	.word	0x200046fc
 8011454:	200046f8 	.word	0x200046f8
 8011458:	20004be0 	.word	0x20004be0
 801145c:	20004bdc 	.word	0x20004bdc

08011460 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8011460:	b480      	push	{r7}
 8011462:	b085      	sub	sp, #20
 8011464:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8011466:	4b2a      	ldr	r3, [pc, #168]	; (8011510 <vTaskSwitchContext+0xb0>)
 8011468:	681b      	ldr	r3, [r3, #0]
 801146a:	2b00      	cmp	r3, #0
 801146c:	d003      	beq.n	8011476 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801146e:	4b29      	ldr	r3, [pc, #164]	; (8011514 <vTaskSwitchContext+0xb4>)
 8011470:	2201      	movs	r2, #1
 8011472:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8011474:	e046      	b.n	8011504 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8011476:	4b27      	ldr	r3, [pc, #156]	; (8011514 <vTaskSwitchContext+0xb4>)
 8011478:	2200      	movs	r2, #0
 801147a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801147c:	4b26      	ldr	r3, [pc, #152]	; (8011518 <vTaskSwitchContext+0xb8>)
 801147e:	681b      	ldr	r3, [r3, #0]
 8011480:	60fb      	str	r3, [r7, #12]
 8011482:	e010      	b.n	80114a6 <vTaskSwitchContext+0x46>
 8011484:	68fb      	ldr	r3, [r7, #12]
 8011486:	2b00      	cmp	r3, #0
 8011488:	d10a      	bne.n	80114a0 <vTaskSwitchContext+0x40>
	__asm volatile
 801148a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801148e:	f383 8811 	msr	BASEPRI, r3
 8011492:	f3bf 8f6f 	isb	sy
 8011496:	f3bf 8f4f 	dsb	sy
 801149a:	607b      	str	r3, [r7, #4]
}
 801149c:	bf00      	nop
 801149e:	e7fe      	b.n	801149e <vTaskSwitchContext+0x3e>
 80114a0:	68fb      	ldr	r3, [r7, #12]
 80114a2:	3b01      	subs	r3, #1
 80114a4:	60fb      	str	r3, [r7, #12]
 80114a6:	491d      	ldr	r1, [pc, #116]	; (801151c <vTaskSwitchContext+0xbc>)
 80114a8:	68fa      	ldr	r2, [r7, #12]
 80114aa:	4613      	mov	r3, r2
 80114ac:	009b      	lsls	r3, r3, #2
 80114ae:	4413      	add	r3, r2
 80114b0:	009b      	lsls	r3, r3, #2
 80114b2:	440b      	add	r3, r1
 80114b4:	681b      	ldr	r3, [r3, #0]
 80114b6:	2b00      	cmp	r3, #0
 80114b8:	d0e4      	beq.n	8011484 <vTaskSwitchContext+0x24>
 80114ba:	68fa      	ldr	r2, [r7, #12]
 80114bc:	4613      	mov	r3, r2
 80114be:	009b      	lsls	r3, r3, #2
 80114c0:	4413      	add	r3, r2
 80114c2:	009b      	lsls	r3, r3, #2
 80114c4:	4a15      	ldr	r2, [pc, #84]	; (801151c <vTaskSwitchContext+0xbc>)
 80114c6:	4413      	add	r3, r2
 80114c8:	60bb      	str	r3, [r7, #8]
 80114ca:	68bb      	ldr	r3, [r7, #8]
 80114cc:	685b      	ldr	r3, [r3, #4]
 80114ce:	685a      	ldr	r2, [r3, #4]
 80114d0:	68bb      	ldr	r3, [r7, #8]
 80114d2:	605a      	str	r2, [r3, #4]
 80114d4:	68bb      	ldr	r3, [r7, #8]
 80114d6:	685a      	ldr	r2, [r3, #4]
 80114d8:	68bb      	ldr	r3, [r7, #8]
 80114da:	3308      	adds	r3, #8
 80114dc:	429a      	cmp	r2, r3
 80114de:	d104      	bne.n	80114ea <vTaskSwitchContext+0x8a>
 80114e0:	68bb      	ldr	r3, [r7, #8]
 80114e2:	685b      	ldr	r3, [r3, #4]
 80114e4:	685a      	ldr	r2, [r3, #4]
 80114e6:	68bb      	ldr	r3, [r7, #8]
 80114e8:	605a      	str	r2, [r3, #4]
 80114ea:	68bb      	ldr	r3, [r7, #8]
 80114ec:	685b      	ldr	r3, [r3, #4]
 80114ee:	68db      	ldr	r3, [r3, #12]
 80114f0:	4a0b      	ldr	r2, [pc, #44]	; (8011520 <vTaskSwitchContext+0xc0>)
 80114f2:	6013      	str	r3, [r2, #0]
 80114f4:	4a08      	ldr	r2, [pc, #32]	; (8011518 <vTaskSwitchContext+0xb8>)
 80114f6:	68fb      	ldr	r3, [r7, #12]
 80114f8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80114fa:	4b09      	ldr	r3, [pc, #36]	; (8011520 <vTaskSwitchContext+0xc0>)
 80114fc:	681b      	ldr	r3, [r3, #0]
 80114fe:	3354      	adds	r3, #84	; 0x54
 8011500:	4a08      	ldr	r2, [pc, #32]	; (8011524 <vTaskSwitchContext+0xc4>)
 8011502:	6013      	str	r3, [r2, #0]
}
 8011504:	bf00      	nop
 8011506:	3714      	adds	r7, #20
 8011508:	46bd      	mov	sp, r7
 801150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801150e:	4770      	bx	lr
 8011510:	20004bf4 	.word	0x20004bf4
 8011514:	20004be0 	.word	0x20004be0
 8011518:	20004bd4 	.word	0x20004bd4
 801151c:	200046fc 	.word	0x200046fc
 8011520:	200046f8 	.word	0x200046f8
 8011524:	20000410 	.word	0x20000410

08011528 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8011528:	b580      	push	{r7, lr}
 801152a:	b084      	sub	sp, #16
 801152c:	af00      	add	r7, sp, #0
 801152e:	6078      	str	r0, [r7, #4]
 8011530:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	2b00      	cmp	r3, #0
 8011536:	d10a      	bne.n	801154e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8011538:	f04f 0350 	mov.w	r3, #80	; 0x50
 801153c:	f383 8811 	msr	BASEPRI, r3
 8011540:	f3bf 8f6f 	isb	sy
 8011544:	f3bf 8f4f 	dsb	sy
 8011548:	60fb      	str	r3, [r7, #12]
}
 801154a:	bf00      	nop
 801154c:	e7fe      	b.n	801154c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801154e:	4b07      	ldr	r3, [pc, #28]	; (801156c <vTaskPlaceOnEventList+0x44>)
 8011550:	681b      	ldr	r3, [r3, #0]
 8011552:	3318      	adds	r3, #24
 8011554:	4619      	mov	r1, r3
 8011556:	6878      	ldr	r0, [r7, #4]
 8011558:	f7fe fe61 	bl	801021e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801155c:	2101      	movs	r1, #1
 801155e:	6838      	ldr	r0, [r7, #0]
 8011560:	f000 fa80 	bl	8011a64 <prvAddCurrentTaskToDelayedList>
}
 8011564:	bf00      	nop
 8011566:	3710      	adds	r7, #16
 8011568:	46bd      	mov	sp, r7
 801156a:	bd80      	pop	{r7, pc}
 801156c:	200046f8 	.word	0x200046f8

08011570 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8011570:	b580      	push	{r7, lr}
 8011572:	b086      	sub	sp, #24
 8011574:	af00      	add	r7, sp, #0
 8011576:	60f8      	str	r0, [r7, #12]
 8011578:	60b9      	str	r1, [r7, #8]
 801157a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 801157c:	68fb      	ldr	r3, [r7, #12]
 801157e:	2b00      	cmp	r3, #0
 8011580:	d10a      	bne.n	8011598 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8011582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011586:	f383 8811 	msr	BASEPRI, r3
 801158a:	f3bf 8f6f 	isb	sy
 801158e:	f3bf 8f4f 	dsb	sy
 8011592:	617b      	str	r3, [r7, #20]
}
 8011594:	bf00      	nop
 8011596:	e7fe      	b.n	8011596 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011598:	4b0a      	ldr	r3, [pc, #40]	; (80115c4 <vTaskPlaceOnEventListRestricted+0x54>)
 801159a:	681b      	ldr	r3, [r3, #0]
 801159c:	3318      	adds	r3, #24
 801159e:	4619      	mov	r1, r3
 80115a0:	68f8      	ldr	r0, [r7, #12]
 80115a2:	f7fe fe18 	bl	80101d6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	2b00      	cmp	r3, #0
 80115aa:	d002      	beq.n	80115b2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80115ac:	f04f 33ff 	mov.w	r3, #4294967295
 80115b0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80115b2:	6879      	ldr	r1, [r7, #4]
 80115b4:	68b8      	ldr	r0, [r7, #8]
 80115b6:	f000 fa55 	bl	8011a64 <prvAddCurrentTaskToDelayedList>
	}
 80115ba:	bf00      	nop
 80115bc:	3718      	adds	r7, #24
 80115be:	46bd      	mov	sp, r7
 80115c0:	bd80      	pop	{r7, pc}
 80115c2:	bf00      	nop
 80115c4:	200046f8 	.word	0x200046f8

080115c8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80115c8:	b580      	push	{r7, lr}
 80115ca:	b086      	sub	sp, #24
 80115cc:	af00      	add	r7, sp, #0
 80115ce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	68db      	ldr	r3, [r3, #12]
 80115d4:	68db      	ldr	r3, [r3, #12]
 80115d6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80115d8:	693b      	ldr	r3, [r7, #16]
 80115da:	2b00      	cmp	r3, #0
 80115dc:	d10a      	bne.n	80115f4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80115de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115e2:	f383 8811 	msr	BASEPRI, r3
 80115e6:	f3bf 8f6f 	isb	sy
 80115ea:	f3bf 8f4f 	dsb	sy
 80115ee:	60fb      	str	r3, [r7, #12]
}
 80115f0:	bf00      	nop
 80115f2:	e7fe      	b.n	80115f2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80115f4:	693b      	ldr	r3, [r7, #16]
 80115f6:	3318      	adds	r3, #24
 80115f8:	4618      	mov	r0, r3
 80115fa:	f7fe fe49 	bl	8010290 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80115fe:	4b1e      	ldr	r3, [pc, #120]	; (8011678 <xTaskRemoveFromEventList+0xb0>)
 8011600:	681b      	ldr	r3, [r3, #0]
 8011602:	2b00      	cmp	r3, #0
 8011604:	d11d      	bne.n	8011642 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8011606:	693b      	ldr	r3, [r7, #16]
 8011608:	3304      	adds	r3, #4
 801160a:	4618      	mov	r0, r3
 801160c:	f7fe fe40 	bl	8010290 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8011610:	693b      	ldr	r3, [r7, #16]
 8011612:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011614:	4b19      	ldr	r3, [pc, #100]	; (801167c <xTaskRemoveFromEventList+0xb4>)
 8011616:	681b      	ldr	r3, [r3, #0]
 8011618:	429a      	cmp	r2, r3
 801161a:	d903      	bls.n	8011624 <xTaskRemoveFromEventList+0x5c>
 801161c:	693b      	ldr	r3, [r7, #16]
 801161e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011620:	4a16      	ldr	r2, [pc, #88]	; (801167c <xTaskRemoveFromEventList+0xb4>)
 8011622:	6013      	str	r3, [r2, #0]
 8011624:	693b      	ldr	r3, [r7, #16]
 8011626:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011628:	4613      	mov	r3, r2
 801162a:	009b      	lsls	r3, r3, #2
 801162c:	4413      	add	r3, r2
 801162e:	009b      	lsls	r3, r3, #2
 8011630:	4a13      	ldr	r2, [pc, #76]	; (8011680 <xTaskRemoveFromEventList+0xb8>)
 8011632:	441a      	add	r2, r3
 8011634:	693b      	ldr	r3, [r7, #16]
 8011636:	3304      	adds	r3, #4
 8011638:	4619      	mov	r1, r3
 801163a:	4610      	mov	r0, r2
 801163c:	f7fe fdcb 	bl	80101d6 <vListInsertEnd>
 8011640:	e005      	b.n	801164e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8011642:	693b      	ldr	r3, [r7, #16]
 8011644:	3318      	adds	r3, #24
 8011646:	4619      	mov	r1, r3
 8011648:	480e      	ldr	r0, [pc, #56]	; (8011684 <xTaskRemoveFromEventList+0xbc>)
 801164a:	f7fe fdc4 	bl	80101d6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801164e:	693b      	ldr	r3, [r7, #16]
 8011650:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011652:	4b0d      	ldr	r3, [pc, #52]	; (8011688 <xTaskRemoveFromEventList+0xc0>)
 8011654:	681b      	ldr	r3, [r3, #0]
 8011656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011658:	429a      	cmp	r2, r3
 801165a:	d905      	bls.n	8011668 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801165c:	2301      	movs	r3, #1
 801165e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8011660:	4b0a      	ldr	r3, [pc, #40]	; (801168c <xTaskRemoveFromEventList+0xc4>)
 8011662:	2201      	movs	r2, #1
 8011664:	601a      	str	r2, [r3, #0]
 8011666:	e001      	b.n	801166c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8011668:	2300      	movs	r3, #0
 801166a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801166c:	697b      	ldr	r3, [r7, #20]
}
 801166e:	4618      	mov	r0, r3
 8011670:	3718      	adds	r7, #24
 8011672:	46bd      	mov	sp, r7
 8011674:	bd80      	pop	{r7, pc}
 8011676:	bf00      	nop
 8011678:	20004bf4 	.word	0x20004bf4
 801167c:	20004bd4 	.word	0x20004bd4
 8011680:	200046fc 	.word	0x200046fc
 8011684:	20004b8c 	.word	0x20004b8c
 8011688:	200046f8 	.word	0x200046f8
 801168c:	20004be0 	.word	0x20004be0

08011690 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8011690:	b480      	push	{r7}
 8011692:	b083      	sub	sp, #12
 8011694:	af00      	add	r7, sp, #0
 8011696:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8011698:	4b06      	ldr	r3, [pc, #24]	; (80116b4 <vTaskInternalSetTimeOutState+0x24>)
 801169a:	681a      	ldr	r2, [r3, #0]
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80116a0:	4b05      	ldr	r3, [pc, #20]	; (80116b8 <vTaskInternalSetTimeOutState+0x28>)
 80116a2:	681a      	ldr	r2, [r3, #0]
 80116a4:	687b      	ldr	r3, [r7, #4]
 80116a6:	605a      	str	r2, [r3, #4]
}
 80116a8:	bf00      	nop
 80116aa:	370c      	adds	r7, #12
 80116ac:	46bd      	mov	sp, r7
 80116ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116b2:	4770      	bx	lr
 80116b4:	20004be4 	.word	0x20004be4
 80116b8:	20004bd0 	.word	0x20004bd0

080116bc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80116bc:	b580      	push	{r7, lr}
 80116be:	b088      	sub	sp, #32
 80116c0:	af00      	add	r7, sp, #0
 80116c2:	6078      	str	r0, [r7, #4]
 80116c4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80116c6:	687b      	ldr	r3, [r7, #4]
 80116c8:	2b00      	cmp	r3, #0
 80116ca:	d10a      	bne.n	80116e2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80116cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116d0:	f383 8811 	msr	BASEPRI, r3
 80116d4:	f3bf 8f6f 	isb	sy
 80116d8:	f3bf 8f4f 	dsb	sy
 80116dc:	613b      	str	r3, [r7, #16]
}
 80116de:	bf00      	nop
 80116e0:	e7fe      	b.n	80116e0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80116e2:	683b      	ldr	r3, [r7, #0]
 80116e4:	2b00      	cmp	r3, #0
 80116e6:	d10a      	bne.n	80116fe <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80116e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116ec:	f383 8811 	msr	BASEPRI, r3
 80116f0:	f3bf 8f6f 	isb	sy
 80116f4:	f3bf 8f4f 	dsb	sy
 80116f8:	60fb      	str	r3, [r7, #12]
}
 80116fa:	bf00      	nop
 80116fc:	e7fe      	b.n	80116fc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80116fe:	f000 fe81 	bl	8012404 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8011702:	4b1d      	ldr	r3, [pc, #116]	; (8011778 <xTaskCheckForTimeOut+0xbc>)
 8011704:	681b      	ldr	r3, [r3, #0]
 8011706:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8011708:	687b      	ldr	r3, [r7, #4]
 801170a:	685b      	ldr	r3, [r3, #4]
 801170c:	69ba      	ldr	r2, [r7, #24]
 801170e:	1ad3      	subs	r3, r2, r3
 8011710:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8011712:	683b      	ldr	r3, [r7, #0]
 8011714:	681b      	ldr	r3, [r3, #0]
 8011716:	f1b3 3fff 	cmp.w	r3, #4294967295
 801171a:	d102      	bne.n	8011722 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 801171c:	2300      	movs	r3, #0
 801171e:	61fb      	str	r3, [r7, #28]
 8011720:	e023      	b.n	801176a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	681a      	ldr	r2, [r3, #0]
 8011726:	4b15      	ldr	r3, [pc, #84]	; (801177c <xTaskCheckForTimeOut+0xc0>)
 8011728:	681b      	ldr	r3, [r3, #0]
 801172a:	429a      	cmp	r2, r3
 801172c:	d007      	beq.n	801173e <xTaskCheckForTimeOut+0x82>
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	685b      	ldr	r3, [r3, #4]
 8011732:	69ba      	ldr	r2, [r7, #24]
 8011734:	429a      	cmp	r2, r3
 8011736:	d302      	bcc.n	801173e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8011738:	2301      	movs	r3, #1
 801173a:	61fb      	str	r3, [r7, #28]
 801173c:	e015      	b.n	801176a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801173e:	683b      	ldr	r3, [r7, #0]
 8011740:	681b      	ldr	r3, [r3, #0]
 8011742:	697a      	ldr	r2, [r7, #20]
 8011744:	429a      	cmp	r2, r3
 8011746:	d20b      	bcs.n	8011760 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8011748:	683b      	ldr	r3, [r7, #0]
 801174a:	681a      	ldr	r2, [r3, #0]
 801174c:	697b      	ldr	r3, [r7, #20]
 801174e:	1ad2      	subs	r2, r2, r3
 8011750:	683b      	ldr	r3, [r7, #0]
 8011752:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8011754:	6878      	ldr	r0, [r7, #4]
 8011756:	f7ff ff9b 	bl	8011690 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801175a:	2300      	movs	r3, #0
 801175c:	61fb      	str	r3, [r7, #28]
 801175e:	e004      	b.n	801176a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8011760:	683b      	ldr	r3, [r7, #0]
 8011762:	2200      	movs	r2, #0
 8011764:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8011766:	2301      	movs	r3, #1
 8011768:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801176a:	f000 fe7b 	bl	8012464 <vPortExitCritical>

	return xReturn;
 801176e:	69fb      	ldr	r3, [r7, #28]
}
 8011770:	4618      	mov	r0, r3
 8011772:	3720      	adds	r7, #32
 8011774:	46bd      	mov	sp, r7
 8011776:	bd80      	pop	{r7, pc}
 8011778:	20004bd0 	.word	0x20004bd0
 801177c:	20004be4 	.word	0x20004be4

08011780 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8011780:	b480      	push	{r7}
 8011782:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8011784:	4b03      	ldr	r3, [pc, #12]	; (8011794 <vTaskMissedYield+0x14>)
 8011786:	2201      	movs	r2, #1
 8011788:	601a      	str	r2, [r3, #0]
}
 801178a:	bf00      	nop
 801178c:	46bd      	mov	sp, r7
 801178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011792:	4770      	bx	lr
 8011794:	20004be0 	.word	0x20004be0

08011798 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8011798:	b580      	push	{r7, lr}
 801179a:	b082      	sub	sp, #8
 801179c:	af00      	add	r7, sp, #0
 801179e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80117a0:	f000 f852 	bl	8011848 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80117a4:	4b06      	ldr	r3, [pc, #24]	; (80117c0 <prvIdleTask+0x28>)
 80117a6:	681b      	ldr	r3, [r3, #0]
 80117a8:	2b01      	cmp	r3, #1
 80117aa:	d9f9      	bls.n	80117a0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80117ac:	4b05      	ldr	r3, [pc, #20]	; (80117c4 <prvIdleTask+0x2c>)
 80117ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80117b2:	601a      	str	r2, [r3, #0]
 80117b4:	f3bf 8f4f 	dsb	sy
 80117b8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80117bc:	e7f0      	b.n	80117a0 <prvIdleTask+0x8>
 80117be:	bf00      	nop
 80117c0:	200046fc 	.word	0x200046fc
 80117c4:	e000ed04 	.word	0xe000ed04

080117c8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80117c8:	b580      	push	{r7, lr}
 80117ca:	b082      	sub	sp, #8
 80117cc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80117ce:	2300      	movs	r3, #0
 80117d0:	607b      	str	r3, [r7, #4]
 80117d2:	e00c      	b.n	80117ee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80117d4:	687a      	ldr	r2, [r7, #4]
 80117d6:	4613      	mov	r3, r2
 80117d8:	009b      	lsls	r3, r3, #2
 80117da:	4413      	add	r3, r2
 80117dc:	009b      	lsls	r3, r3, #2
 80117de:	4a12      	ldr	r2, [pc, #72]	; (8011828 <prvInitialiseTaskLists+0x60>)
 80117e0:	4413      	add	r3, r2
 80117e2:	4618      	mov	r0, r3
 80117e4:	f7fe fcca 	bl	801017c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	3301      	adds	r3, #1
 80117ec:	607b      	str	r3, [r7, #4]
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	2b37      	cmp	r3, #55	; 0x37
 80117f2:	d9ef      	bls.n	80117d4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80117f4:	480d      	ldr	r0, [pc, #52]	; (801182c <prvInitialiseTaskLists+0x64>)
 80117f6:	f7fe fcc1 	bl	801017c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80117fa:	480d      	ldr	r0, [pc, #52]	; (8011830 <prvInitialiseTaskLists+0x68>)
 80117fc:	f7fe fcbe 	bl	801017c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8011800:	480c      	ldr	r0, [pc, #48]	; (8011834 <prvInitialiseTaskLists+0x6c>)
 8011802:	f7fe fcbb 	bl	801017c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8011806:	480c      	ldr	r0, [pc, #48]	; (8011838 <prvInitialiseTaskLists+0x70>)
 8011808:	f7fe fcb8 	bl	801017c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801180c:	480b      	ldr	r0, [pc, #44]	; (801183c <prvInitialiseTaskLists+0x74>)
 801180e:	f7fe fcb5 	bl	801017c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8011812:	4b0b      	ldr	r3, [pc, #44]	; (8011840 <prvInitialiseTaskLists+0x78>)
 8011814:	4a05      	ldr	r2, [pc, #20]	; (801182c <prvInitialiseTaskLists+0x64>)
 8011816:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8011818:	4b0a      	ldr	r3, [pc, #40]	; (8011844 <prvInitialiseTaskLists+0x7c>)
 801181a:	4a05      	ldr	r2, [pc, #20]	; (8011830 <prvInitialiseTaskLists+0x68>)
 801181c:	601a      	str	r2, [r3, #0]
}
 801181e:	bf00      	nop
 8011820:	3708      	adds	r7, #8
 8011822:	46bd      	mov	sp, r7
 8011824:	bd80      	pop	{r7, pc}
 8011826:	bf00      	nop
 8011828:	200046fc 	.word	0x200046fc
 801182c:	20004b5c 	.word	0x20004b5c
 8011830:	20004b70 	.word	0x20004b70
 8011834:	20004b8c 	.word	0x20004b8c
 8011838:	20004ba0 	.word	0x20004ba0
 801183c:	20004bb8 	.word	0x20004bb8
 8011840:	20004b84 	.word	0x20004b84
 8011844:	20004b88 	.word	0x20004b88

08011848 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8011848:	b580      	push	{r7, lr}
 801184a:	b082      	sub	sp, #8
 801184c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801184e:	e019      	b.n	8011884 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8011850:	f000 fdd8 	bl	8012404 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011854:	4b10      	ldr	r3, [pc, #64]	; (8011898 <prvCheckTasksWaitingTermination+0x50>)
 8011856:	68db      	ldr	r3, [r3, #12]
 8011858:	68db      	ldr	r3, [r3, #12]
 801185a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801185c:	687b      	ldr	r3, [r7, #4]
 801185e:	3304      	adds	r3, #4
 8011860:	4618      	mov	r0, r3
 8011862:	f7fe fd15 	bl	8010290 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8011866:	4b0d      	ldr	r3, [pc, #52]	; (801189c <prvCheckTasksWaitingTermination+0x54>)
 8011868:	681b      	ldr	r3, [r3, #0]
 801186a:	3b01      	subs	r3, #1
 801186c:	4a0b      	ldr	r2, [pc, #44]	; (801189c <prvCheckTasksWaitingTermination+0x54>)
 801186e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8011870:	4b0b      	ldr	r3, [pc, #44]	; (80118a0 <prvCheckTasksWaitingTermination+0x58>)
 8011872:	681b      	ldr	r3, [r3, #0]
 8011874:	3b01      	subs	r3, #1
 8011876:	4a0a      	ldr	r2, [pc, #40]	; (80118a0 <prvCheckTasksWaitingTermination+0x58>)
 8011878:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801187a:	f000 fdf3 	bl	8012464 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801187e:	6878      	ldr	r0, [r7, #4]
 8011880:	f000 f810 	bl	80118a4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011884:	4b06      	ldr	r3, [pc, #24]	; (80118a0 <prvCheckTasksWaitingTermination+0x58>)
 8011886:	681b      	ldr	r3, [r3, #0]
 8011888:	2b00      	cmp	r3, #0
 801188a:	d1e1      	bne.n	8011850 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801188c:	bf00      	nop
 801188e:	bf00      	nop
 8011890:	3708      	adds	r7, #8
 8011892:	46bd      	mov	sp, r7
 8011894:	bd80      	pop	{r7, pc}
 8011896:	bf00      	nop
 8011898:	20004ba0 	.word	0x20004ba0
 801189c:	20004bcc 	.word	0x20004bcc
 80118a0:	20004bb4 	.word	0x20004bb4

080118a4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80118a4:	b580      	push	{r7, lr}
 80118a6:	b084      	sub	sp, #16
 80118a8:	af00      	add	r7, sp, #0
 80118aa:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	3354      	adds	r3, #84	; 0x54
 80118b0:	4618      	mov	r0, r3
 80118b2:	f002 fe17 	bl	80144e4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80118bc:	2b00      	cmp	r3, #0
 80118be:	d108      	bne.n	80118d2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80118c4:	4618      	mov	r0, r3
 80118c6:	f000 ff8b 	bl	80127e0 <vPortFree>
				vPortFree( pxTCB );
 80118ca:	6878      	ldr	r0, [r7, #4]
 80118cc:	f000 ff88 	bl	80127e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80118d0:	e018      	b.n	8011904 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80118d2:	687b      	ldr	r3, [r7, #4]
 80118d4:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80118d8:	2b01      	cmp	r3, #1
 80118da:	d103      	bne.n	80118e4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80118dc:	6878      	ldr	r0, [r7, #4]
 80118de:	f000 ff7f 	bl	80127e0 <vPortFree>
	}
 80118e2:	e00f      	b.n	8011904 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80118ea:	2b02      	cmp	r3, #2
 80118ec:	d00a      	beq.n	8011904 <prvDeleteTCB+0x60>
	__asm volatile
 80118ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118f2:	f383 8811 	msr	BASEPRI, r3
 80118f6:	f3bf 8f6f 	isb	sy
 80118fa:	f3bf 8f4f 	dsb	sy
 80118fe:	60fb      	str	r3, [r7, #12]
}
 8011900:	bf00      	nop
 8011902:	e7fe      	b.n	8011902 <prvDeleteTCB+0x5e>
	}
 8011904:	bf00      	nop
 8011906:	3710      	adds	r7, #16
 8011908:	46bd      	mov	sp, r7
 801190a:	bd80      	pop	{r7, pc}

0801190c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801190c:	b480      	push	{r7}
 801190e:	b083      	sub	sp, #12
 8011910:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011912:	4b0c      	ldr	r3, [pc, #48]	; (8011944 <prvResetNextTaskUnblockTime+0x38>)
 8011914:	681b      	ldr	r3, [r3, #0]
 8011916:	681b      	ldr	r3, [r3, #0]
 8011918:	2b00      	cmp	r3, #0
 801191a:	d104      	bne.n	8011926 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801191c:	4b0a      	ldr	r3, [pc, #40]	; (8011948 <prvResetNextTaskUnblockTime+0x3c>)
 801191e:	f04f 32ff 	mov.w	r2, #4294967295
 8011922:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8011924:	e008      	b.n	8011938 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011926:	4b07      	ldr	r3, [pc, #28]	; (8011944 <prvResetNextTaskUnblockTime+0x38>)
 8011928:	681b      	ldr	r3, [r3, #0]
 801192a:	68db      	ldr	r3, [r3, #12]
 801192c:	68db      	ldr	r3, [r3, #12]
 801192e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	685b      	ldr	r3, [r3, #4]
 8011934:	4a04      	ldr	r2, [pc, #16]	; (8011948 <prvResetNextTaskUnblockTime+0x3c>)
 8011936:	6013      	str	r3, [r2, #0]
}
 8011938:	bf00      	nop
 801193a:	370c      	adds	r7, #12
 801193c:	46bd      	mov	sp, r7
 801193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011942:	4770      	bx	lr
 8011944:	20004b84 	.word	0x20004b84
 8011948:	20004bec 	.word	0x20004bec

0801194c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801194c:	b480      	push	{r7}
 801194e:	b083      	sub	sp, #12
 8011950:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8011952:	4b0b      	ldr	r3, [pc, #44]	; (8011980 <xTaskGetSchedulerState+0x34>)
 8011954:	681b      	ldr	r3, [r3, #0]
 8011956:	2b00      	cmp	r3, #0
 8011958:	d102      	bne.n	8011960 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801195a:	2301      	movs	r3, #1
 801195c:	607b      	str	r3, [r7, #4]
 801195e:	e008      	b.n	8011972 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011960:	4b08      	ldr	r3, [pc, #32]	; (8011984 <xTaskGetSchedulerState+0x38>)
 8011962:	681b      	ldr	r3, [r3, #0]
 8011964:	2b00      	cmp	r3, #0
 8011966:	d102      	bne.n	801196e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8011968:	2302      	movs	r3, #2
 801196a:	607b      	str	r3, [r7, #4]
 801196c:	e001      	b.n	8011972 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801196e:	2300      	movs	r3, #0
 8011970:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8011972:	687b      	ldr	r3, [r7, #4]
	}
 8011974:	4618      	mov	r0, r3
 8011976:	370c      	adds	r7, #12
 8011978:	46bd      	mov	sp, r7
 801197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801197e:	4770      	bx	lr
 8011980:	20004bd8 	.word	0x20004bd8
 8011984:	20004bf4 	.word	0x20004bf4

08011988 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8011988:	b580      	push	{r7, lr}
 801198a:	b086      	sub	sp, #24
 801198c:	af00      	add	r7, sp, #0
 801198e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8011990:	687b      	ldr	r3, [r7, #4]
 8011992:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8011994:	2300      	movs	r3, #0
 8011996:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011998:	687b      	ldr	r3, [r7, #4]
 801199a:	2b00      	cmp	r3, #0
 801199c:	d056      	beq.n	8011a4c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801199e:	4b2e      	ldr	r3, [pc, #184]	; (8011a58 <xTaskPriorityDisinherit+0xd0>)
 80119a0:	681b      	ldr	r3, [r3, #0]
 80119a2:	693a      	ldr	r2, [r7, #16]
 80119a4:	429a      	cmp	r2, r3
 80119a6:	d00a      	beq.n	80119be <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80119a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119ac:	f383 8811 	msr	BASEPRI, r3
 80119b0:	f3bf 8f6f 	isb	sy
 80119b4:	f3bf 8f4f 	dsb	sy
 80119b8:	60fb      	str	r3, [r7, #12]
}
 80119ba:	bf00      	nop
 80119bc:	e7fe      	b.n	80119bc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80119be:	693b      	ldr	r3, [r7, #16]
 80119c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80119c2:	2b00      	cmp	r3, #0
 80119c4:	d10a      	bne.n	80119dc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80119c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119ca:	f383 8811 	msr	BASEPRI, r3
 80119ce:	f3bf 8f6f 	isb	sy
 80119d2:	f3bf 8f4f 	dsb	sy
 80119d6:	60bb      	str	r3, [r7, #8]
}
 80119d8:	bf00      	nop
 80119da:	e7fe      	b.n	80119da <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80119dc:	693b      	ldr	r3, [r7, #16]
 80119de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80119e0:	1e5a      	subs	r2, r3, #1
 80119e2:	693b      	ldr	r3, [r7, #16]
 80119e4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80119e6:	693b      	ldr	r3, [r7, #16]
 80119e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80119ea:	693b      	ldr	r3, [r7, #16]
 80119ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80119ee:	429a      	cmp	r2, r3
 80119f0:	d02c      	beq.n	8011a4c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80119f2:	693b      	ldr	r3, [r7, #16]
 80119f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80119f6:	2b00      	cmp	r3, #0
 80119f8:	d128      	bne.n	8011a4c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80119fa:	693b      	ldr	r3, [r7, #16]
 80119fc:	3304      	adds	r3, #4
 80119fe:	4618      	mov	r0, r3
 8011a00:	f7fe fc46 	bl	8010290 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8011a04:	693b      	ldr	r3, [r7, #16]
 8011a06:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011a08:	693b      	ldr	r3, [r7, #16]
 8011a0a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011a0c:	693b      	ldr	r3, [r7, #16]
 8011a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a10:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8011a14:	693b      	ldr	r3, [r7, #16]
 8011a16:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8011a18:	693b      	ldr	r3, [r7, #16]
 8011a1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a1c:	4b0f      	ldr	r3, [pc, #60]	; (8011a5c <xTaskPriorityDisinherit+0xd4>)
 8011a1e:	681b      	ldr	r3, [r3, #0]
 8011a20:	429a      	cmp	r2, r3
 8011a22:	d903      	bls.n	8011a2c <xTaskPriorityDisinherit+0xa4>
 8011a24:	693b      	ldr	r3, [r7, #16]
 8011a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a28:	4a0c      	ldr	r2, [pc, #48]	; (8011a5c <xTaskPriorityDisinherit+0xd4>)
 8011a2a:	6013      	str	r3, [r2, #0]
 8011a2c:	693b      	ldr	r3, [r7, #16]
 8011a2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a30:	4613      	mov	r3, r2
 8011a32:	009b      	lsls	r3, r3, #2
 8011a34:	4413      	add	r3, r2
 8011a36:	009b      	lsls	r3, r3, #2
 8011a38:	4a09      	ldr	r2, [pc, #36]	; (8011a60 <xTaskPriorityDisinherit+0xd8>)
 8011a3a:	441a      	add	r2, r3
 8011a3c:	693b      	ldr	r3, [r7, #16]
 8011a3e:	3304      	adds	r3, #4
 8011a40:	4619      	mov	r1, r3
 8011a42:	4610      	mov	r0, r2
 8011a44:	f7fe fbc7 	bl	80101d6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8011a48:	2301      	movs	r3, #1
 8011a4a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011a4c:	697b      	ldr	r3, [r7, #20]
	}
 8011a4e:	4618      	mov	r0, r3
 8011a50:	3718      	adds	r7, #24
 8011a52:	46bd      	mov	sp, r7
 8011a54:	bd80      	pop	{r7, pc}
 8011a56:	bf00      	nop
 8011a58:	200046f8 	.word	0x200046f8
 8011a5c:	20004bd4 	.word	0x20004bd4
 8011a60:	200046fc 	.word	0x200046fc

08011a64 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8011a64:	b580      	push	{r7, lr}
 8011a66:	b084      	sub	sp, #16
 8011a68:	af00      	add	r7, sp, #0
 8011a6a:	6078      	str	r0, [r7, #4]
 8011a6c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8011a6e:	4b21      	ldr	r3, [pc, #132]	; (8011af4 <prvAddCurrentTaskToDelayedList+0x90>)
 8011a70:	681b      	ldr	r3, [r3, #0]
 8011a72:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011a74:	4b20      	ldr	r3, [pc, #128]	; (8011af8 <prvAddCurrentTaskToDelayedList+0x94>)
 8011a76:	681b      	ldr	r3, [r3, #0]
 8011a78:	3304      	adds	r3, #4
 8011a7a:	4618      	mov	r0, r3
 8011a7c:	f7fe fc08 	bl	8010290 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011a86:	d10a      	bne.n	8011a9e <prvAddCurrentTaskToDelayedList+0x3a>
 8011a88:	683b      	ldr	r3, [r7, #0]
 8011a8a:	2b00      	cmp	r3, #0
 8011a8c:	d007      	beq.n	8011a9e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011a8e:	4b1a      	ldr	r3, [pc, #104]	; (8011af8 <prvAddCurrentTaskToDelayedList+0x94>)
 8011a90:	681b      	ldr	r3, [r3, #0]
 8011a92:	3304      	adds	r3, #4
 8011a94:	4619      	mov	r1, r3
 8011a96:	4819      	ldr	r0, [pc, #100]	; (8011afc <prvAddCurrentTaskToDelayedList+0x98>)
 8011a98:	f7fe fb9d 	bl	80101d6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8011a9c:	e026      	b.n	8011aec <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8011a9e:	68fa      	ldr	r2, [r7, #12]
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	4413      	add	r3, r2
 8011aa4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8011aa6:	4b14      	ldr	r3, [pc, #80]	; (8011af8 <prvAddCurrentTaskToDelayedList+0x94>)
 8011aa8:	681b      	ldr	r3, [r3, #0]
 8011aaa:	68ba      	ldr	r2, [r7, #8]
 8011aac:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8011aae:	68ba      	ldr	r2, [r7, #8]
 8011ab0:	68fb      	ldr	r3, [r7, #12]
 8011ab2:	429a      	cmp	r2, r3
 8011ab4:	d209      	bcs.n	8011aca <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011ab6:	4b12      	ldr	r3, [pc, #72]	; (8011b00 <prvAddCurrentTaskToDelayedList+0x9c>)
 8011ab8:	681a      	ldr	r2, [r3, #0]
 8011aba:	4b0f      	ldr	r3, [pc, #60]	; (8011af8 <prvAddCurrentTaskToDelayedList+0x94>)
 8011abc:	681b      	ldr	r3, [r3, #0]
 8011abe:	3304      	adds	r3, #4
 8011ac0:	4619      	mov	r1, r3
 8011ac2:	4610      	mov	r0, r2
 8011ac4:	f7fe fbab 	bl	801021e <vListInsert>
}
 8011ac8:	e010      	b.n	8011aec <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011aca:	4b0e      	ldr	r3, [pc, #56]	; (8011b04 <prvAddCurrentTaskToDelayedList+0xa0>)
 8011acc:	681a      	ldr	r2, [r3, #0]
 8011ace:	4b0a      	ldr	r3, [pc, #40]	; (8011af8 <prvAddCurrentTaskToDelayedList+0x94>)
 8011ad0:	681b      	ldr	r3, [r3, #0]
 8011ad2:	3304      	adds	r3, #4
 8011ad4:	4619      	mov	r1, r3
 8011ad6:	4610      	mov	r0, r2
 8011ad8:	f7fe fba1 	bl	801021e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8011adc:	4b0a      	ldr	r3, [pc, #40]	; (8011b08 <prvAddCurrentTaskToDelayedList+0xa4>)
 8011ade:	681b      	ldr	r3, [r3, #0]
 8011ae0:	68ba      	ldr	r2, [r7, #8]
 8011ae2:	429a      	cmp	r2, r3
 8011ae4:	d202      	bcs.n	8011aec <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8011ae6:	4a08      	ldr	r2, [pc, #32]	; (8011b08 <prvAddCurrentTaskToDelayedList+0xa4>)
 8011ae8:	68bb      	ldr	r3, [r7, #8]
 8011aea:	6013      	str	r3, [r2, #0]
}
 8011aec:	bf00      	nop
 8011aee:	3710      	adds	r7, #16
 8011af0:	46bd      	mov	sp, r7
 8011af2:	bd80      	pop	{r7, pc}
 8011af4:	20004bd0 	.word	0x20004bd0
 8011af8:	200046f8 	.word	0x200046f8
 8011afc:	20004bb8 	.word	0x20004bb8
 8011b00:	20004b88 	.word	0x20004b88
 8011b04:	20004b84 	.word	0x20004b84
 8011b08:	20004bec 	.word	0x20004bec

08011b0c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8011b0c:	b580      	push	{r7, lr}
 8011b0e:	b08a      	sub	sp, #40	; 0x28
 8011b10:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8011b12:	2300      	movs	r3, #0
 8011b14:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8011b16:	f000 fb07 	bl	8012128 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8011b1a:	4b1c      	ldr	r3, [pc, #112]	; (8011b8c <xTimerCreateTimerTask+0x80>)
 8011b1c:	681b      	ldr	r3, [r3, #0]
 8011b1e:	2b00      	cmp	r3, #0
 8011b20:	d021      	beq.n	8011b66 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8011b22:	2300      	movs	r3, #0
 8011b24:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8011b26:	2300      	movs	r3, #0
 8011b28:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8011b2a:	1d3a      	adds	r2, r7, #4
 8011b2c:	f107 0108 	add.w	r1, r7, #8
 8011b30:	f107 030c 	add.w	r3, r7, #12
 8011b34:	4618      	mov	r0, r3
 8011b36:	f7fe fb07 	bl	8010148 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8011b3a:	6879      	ldr	r1, [r7, #4]
 8011b3c:	68bb      	ldr	r3, [r7, #8]
 8011b3e:	68fa      	ldr	r2, [r7, #12]
 8011b40:	9202      	str	r2, [sp, #8]
 8011b42:	9301      	str	r3, [sp, #4]
 8011b44:	2302      	movs	r3, #2
 8011b46:	9300      	str	r3, [sp, #0]
 8011b48:	2300      	movs	r3, #0
 8011b4a:	460a      	mov	r2, r1
 8011b4c:	4910      	ldr	r1, [pc, #64]	; (8011b90 <xTimerCreateTimerTask+0x84>)
 8011b4e:	4811      	ldr	r0, [pc, #68]	; (8011b94 <xTimerCreateTimerTask+0x88>)
 8011b50:	f7ff f8b4 	bl	8010cbc <xTaskCreateStatic>
 8011b54:	4603      	mov	r3, r0
 8011b56:	4a10      	ldr	r2, [pc, #64]	; (8011b98 <xTimerCreateTimerTask+0x8c>)
 8011b58:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8011b5a:	4b0f      	ldr	r3, [pc, #60]	; (8011b98 <xTimerCreateTimerTask+0x8c>)
 8011b5c:	681b      	ldr	r3, [r3, #0]
 8011b5e:	2b00      	cmp	r3, #0
 8011b60:	d001      	beq.n	8011b66 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8011b62:	2301      	movs	r3, #1
 8011b64:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8011b66:	697b      	ldr	r3, [r7, #20]
 8011b68:	2b00      	cmp	r3, #0
 8011b6a:	d10a      	bne.n	8011b82 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8011b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b70:	f383 8811 	msr	BASEPRI, r3
 8011b74:	f3bf 8f6f 	isb	sy
 8011b78:	f3bf 8f4f 	dsb	sy
 8011b7c:	613b      	str	r3, [r7, #16]
}
 8011b7e:	bf00      	nop
 8011b80:	e7fe      	b.n	8011b80 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8011b82:	697b      	ldr	r3, [r7, #20]
}
 8011b84:	4618      	mov	r0, r3
 8011b86:	3718      	adds	r7, #24
 8011b88:	46bd      	mov	sp, r7
 8011b8a:	bd80      	pop	{r7, pc}
 8011b8c:	20004c28 	.word	0x20004c28
 8011b90:	0801693c 	.word	0x0801693c
 8011b94:	08011cd1 	.word	0x08011cd1
 8011b98:	20004c2c 	.word	0x20004c2c

08011b9c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8011b9c:	b580      	push	{r7, lr}
 8011b9e:	b08a      	sub	sp, #40	; 0x28
 8011ba0:	af00      	add	r7, sp, #0
 8011ba2:	60f8      	str	r0, [r7, #12]
 8011ba4:	60b9      	str	r1, [r7, #8]
 8011ba6:	607a      	str	r2, [r7, #4]
 8011ba8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8011baa:	2300      	movs	r3, #0
 8011bac:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8011bae:	68fb      	ldr	r3, [r7, #12]
 8011bb0:	2b00      	cmp	r3, #0
 8011bb2:	d10a      	bne.n	8011bca <xTimerGenericCommand+0x2e>
	__asm volatile
 8011bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011bb8:	f383 8811 	msr	BASEPRI, r3
 8011bbc:	f3bf 8f6f 	isb	sy
 8011bc0:	f3bf 8f4f 	dsb	sy
 8011bc4:	623b      	str	r3, [r7, #32]
}
 8011bc6:	bf00      	nop
 8011bc8:	e7fe      	b.n	8011bc8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8011bca:	4b1a      	ldr	r3, [pc, #104]	; (8011c34 <xTimerGenericCommand+0x98>)
 8011bcc:	681b      	ldr	r3, [r3, #0]
 8011bce:	2b00      	cmp	r3, #0
 8011bd0:	d02a      	beq.n	8011c28 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8011bd2:	68bb      	ldr	r3, [r7, #8]
 8011bd4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8011bd6:	687b      	ldr	r3, [r7, #4]
 8011bd8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8011bda:	68fb      	ldr	r3, [r7, #12]
 8011bdc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8011bde:	68bb      	ldr	r3, [r7, #8]
 8011be0:	2b05      	cmp	r3, #5
 8011be2:	dc18      	bgt.n	8011c16 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8011be4:	f7ff feb2 	bl	801194c <xTaskGetSchedulerState>
 8011be8:	4603      	mov	r3, r0
 8011bea:	2b02      	cmp	r3, #2
 8011bec:	d109      	bne.n	8011c02 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8011bee:	4b11      	ldr	r3, [pc, #68]	; (8011c34 <xTimerGenericCommand+0x98>)
 8011bf0:	6818      	ldr	r0, [r3, #0]
 8011bf2:	f107 0110 	add.w	r1, r7, #16
 8011bf6:	2300      	movs	r3, #0
 8011bf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011bfa:	f7fe fc77 	bl	80104ec <xQueueGenericSend>
 8011bfe:	6278      	str	r0, [r7, #36]	; 0x24
 8011c00:	e012      	b.n	8011c28 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8011c02:	4b0c      	ldr	r3, [pc, #48]	; (8011c34 <xTimerGenericCommand+0x98>)
 8011c04:	6818      	ldr	r0, [r3, #0]
 8011c06:	f107 0110 	add.w	r1, r7, #16
 8011c0a:	2300      	movs	r3, #0
 8011c0c:	2200      	movs	r2, #0
 8011c0e:	f7fe fc6d 	bl	80104ec <xQueueGenericSend>
 8011c12:	6278      	str	r0, [r7, #36]	; 0x24
 8011c14:	e008      	b.n	8011c28 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8011c16:	4b07      	ldr	r3, [pc, #28]	; (8011c34 <xTimerGenericCommand+0x98>)
 8011c18:	6818      	ldr	r0, [r3, #0]
 8011c1a:	f107 0110 	add.w	r1, r7, #16
 8011c1e:	2300      	movs	r3, #0
 8011c20:	683a      	ldr	r2, [r7, #0]
 8011c22:	f7fe fd61 	bl	80106e8 <xQueueGenericSendFromISR>
 8011c26:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8011c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8011c2a:	4618      	mov	r0, r3
 8011c2c:	3728      	adds	r7, #40	; 0x28
 8011c2e:	46bd      	mov	sp, r7
 8011c30:	bd80      	pop	{r7, pc}
 8011c32:	bf00      	nop
 8011c34:	20004c28 	.word	0x20004c28

08011c38 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8011c38:	b580      	push	{r7, lr}
 8011c3a:	b088      	sub	sp, #32
 8011c3c:	af02      	add	r7, sp, #8
 8011c3e:	6078      	str	r0, [r7, #4]
 8011c40:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011c42:	4b22      	ldr	r3, [pc, #136]	; (8011ccc <prvProcessExpiredTimer+0x94>)
 8011c44:	681b      	ldr	r3, [r3, #0]
 8011c46:	68db      	ldr	r3, [r3, #12]
 8011c48:	68db      	ldr	r3, [r3, #12]
 8011c4a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011c4c:	697b      	ldr	r3, [r7, #20]
 8011c4e:	3304      	adds	r3, #4
 8011c50:	4618      	mov	r0, r3
 8011c52:	f7fe fb1d 	bl	8010290 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011c56:	697b      	ldr	r3, [r7, #20]
 8011c58:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011c5c:	f003 0304 	and.w	r3, r3, #4
 8011c60:	2b00      	cmp	r3, #0
 8011c62:	d022      	beq.n	8011caa <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8011c64:	697b      	ldr	r3, [r7, #20]
 8011c66:	699a      	ldr	r2, [r3, #24]
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	18d1      	adds	r1, r2, r3
 8011c6c:	687b      	ldr	r3, [r7, #4]
 8011c6e:	683a      	ldr	r2, [r7, #0]
 8011c70:	6978      	ldr	r0, [r7, #20]
 8011c72:	f000 f8d1 	bl	8011e18 <prvInsertTimerInActiveList>
 8011c76:	4603      	mov	r3, r0
 8011c78:	2b00      	cmp	r3, #0
 8011c7a:	d01f      	beq.n	8011cbc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8011c7c:	2300      	movs	r3, #0
 8011c7e:	9300      	str	r3, [sp, #0]
 8011c80:	2300      	movs	r3, #0
 8011c82:	687a      	ldr	r2, [r7, #4]
 8011c84:	2100      	movs	r1, #0
 8011c86:	6978      	ldr	r0, [r7, #20]
 8011c88:	f7ff ff88 	bl	8011b9c <xTimerGenericCommand>
 8011c8c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8011c8e:	693b      	ldr	r3, [r7, #16]
 8011c90:	2b00      	cmp	r3, #0
 8011c92:	d113      	bne.n	8011cbc <prvProcessExpiredTimer+0x84>
	__asm volatile
 8011c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c98:	f383 8811 	msr	BASEPRI, r3
 8011c9c:	f3bf 8f6f 	isb	sy
 8011ca0:	f3bf 8f4f 	dsb	sy
 8011ca4:	60fb      	str	r3, [r7, #12]
}
 8011ca6:	bf00      	nop
 8011ca8:	e7fe      	b.n	8011ca8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011caa:	697b      	ldr	r3, [r7, #20]
 8011cac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011cb0:	f023 0301 	bic.w	r3, r3, #1
 8011cb4:	b2da      	uxtb	r2, r3
 8011cb6:	697b      	ldr	r3, [r7, #20]
 8011cb8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011cbc:	697b      	ldr	r3, [r7, #20]
 8011cbe:	6a1b      	ldr	r3, [r3, #32]
 8011cc0:	6978      	ldr	r0, [r7, #20]
 8011cc2:	4798      	blx	r3
}
 8011cc4:	bf00      	nop
 8011cc6:	3718      	adds	r7, #24
 8011cc8:	46bd      	mov	sp, r7
 8011cca:	bd80      	pop	{r7, pc}
 8011ccc:	20004c20 	.word	0x20004c20

08011cd0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8011cd0:	b580      	push	{r7, lr}
 8011cd2:	b084      	sub	sp, #16
 8011cd4:	af00      	add	r7, sp, #0
 8011cd6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8011cd8:	f107 0308 	add.w	r3, r7, #8
 8011cdc:	4618      	mov	r0, r3
 8011cde:	f000 f857 	bl	8011d90 <prvGetNextExpireTime>
 8011ce2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8011ce4:	68bb      	ldr	r3, [r7, #8]
 8011ce6:	4619      	mov	r1, r3
 8011ce8:	68f8      	ldr	r0, [r7, #12]
 8011cea:	f000 f803 	bl	8011cf4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8011cee:	f000 f8d5 	bl	8011e9c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8011cf2:	e7f1      	b.n	8011cd8 <prvTimerTask+0x8>

08011cf4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8011cf4:	b580      	push	{r7, lr}
 8011cf6:	b084      	sub	sp, #16
 8011cf8:	af00      	add	r7, sp, #0
 8011cfa:	6078      	str	r0, [r7, #4]
 8011cfc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8011cfe:	f7ff fa39 	bl	8011174 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8011d02:	f107 0308 	add.w	r3, r7, #8
 8011d06:	4618      	mov	r0, r3
 8011d08:	f000 f866 	bl	8011dd8 <prvSampleTimeNow>
 8011d0c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8011d0e:	68bb      	ldr	r3, [r7, #8]
 8011d10:	2b00      	cmp	r3, #0
 8011d12:	d130      	bne.n	8011d76 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8011d14:	683b      	ldr	r3, [r7, #0]
 8011d16:	2b00      	cmp	r3, #0
 8011d18:	d10a      	bne.n	8011d30 <prvProcessTimerOrBlockTask+0x3c>
 8011d1a:	687a      	ldr	r2, [r7, #4]
 8011d1c:	68fb      	ldr	r3, [r7, #12]
 8011d1e:	429a      	cmp	r2, r3
 8011d20:	d806      	bhi.n	8011d30 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8011d22:	f7ff fa35 	bl	8011190 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8011d26:	68f9      	ldr	r1, [r7, #12]
 8011d28:	6878      	ldr	r0, [r7, #4]
 8011d2a:	f7ff ff85 	bl	8011c38 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8011d2e:	e024      	b.n	8011d7a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8011d30:	683b      	ldr	r3, [r7, #0]
 8011d32:	2b00      	cmp	r3, #0
 8011d34:	d008      	beq.n	8011d48 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8011d36:	4b13      	ldr	r3, [pc, #76]	; (8011d84 <prvProcessTimerOrBlockTask+0x90>)
 8011d38:	681b      	ldr	r3, [r3, #0]
 8011d3a:	681b      	ldr	r3, [r3, #0]
 8011d3c:	2b00      	cmp	r3, #0
 8011d3e:	d101      	bne.n	8011d44 <prvProcessTimerOrBlockTask+0x50>
 8011d40:	2301      	movs	r3, #1
 8011d42:	e000      	b.n	8011d46 <prvProcessTimerOrBlockTask+0x52>
 8011d44:	2300      	movs	r3, #0
 8011d46:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8011d48:	4b0f      	ldr	r3, [pc, #60]	; (8011d88 <prvProcessTimerOrBlockTask+0x94>)
 8011d4a:	6818      	ldr	r0, [r3, #0]
 8011d4c:	687a      	ldr	r2, [r7, #4]
 8011d4e:	68fb      	ldr	r3, [r7, #12]
 8011d50:	1ad3      	subs	r3, r2, r3
 8011d52:	683a      	ldr	r2, [r7, #0]
 8011d54:	4619      	mov	r1, r3
 8011d56:	f7fe ff7d 	bl	8010c54 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8011d5a:	f7ff fa19 	bl	8011190 <xTaskResumeAll>
 8011d5e:	4603      	mov	r3, r0
 8011d60:	2b00      	cmp	r3, #0
 8011d62:	d10a      	bne.n	8011d7a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8011d64:	4b09      	ldr	r3, [pc, #36]	; (8011d8c <prvProcessTimerOrBlockTask+0x98>)
 8011d66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011d6a:	601a      	str	r2, [r3, #0]
 8011d6c:	f3bf 8f4f 	dsb	sy
 8011d70:	f3bf 8f6f 	isb	sy
}
 8011d74:	e001      	b.n	8011d7a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8011d76:	f7ff fa0b 	bl	8011190 <xTaskResumeAll>
}
 8011d7a:	bf00      	nop
 8011d7c:	3710      	adds	r7, #16
 8011d7e:	46bd      	mov	sp, r7
 8011d80:	bd80      	pop	{r7, pc}
 8011d82:	bf00      	nop
 8011d84:	20004c24 	.word	0x20004c24
 8011d88:	20004c28 	.word	0x20004c28
 8011d8c:	e000ed04 	.word	0xe000ed04

08011d90 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8011d90:	b480      	push	{r7}
 8011d92:	b085      	sub	sp, #20
 8011d94:	af00      	add	r7, sp, #0
 8011d96:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8011d98:	4b0e      	ldr	r3, [pc, #56]	; (8011dd4 <prvGetNextExpireTime+0x44>)
 8011d9a:	681b      	ldr	r3, [r3, #0]
 8011d9c:	681b      	ldr	r3, [r3, #0]
 8011d9e:	2b00      	cmp	r3, #0
 8011da0:	d101      	bne.n	8011da6 <prvGetNextExpireTime+0x16>
 8011da2:	2201      	movs	r2, #1
 8011da4:	e000      	b.n	8011da8 <prvGetNextExpireTime+0x18>
 8011da6:	2200      	movs	r2, #0
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8011dac:	687b      	ldr	r3, [r7, #4]
 8011dae:	681b      	ldr	r3, [r3, #0]
 8011db0:	2b00      	cmp	r3, #0
 8011db2:	d105      	bne.n	8011dc0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011db4:	4b07      	ldr	r3, [pc, #28]	; (8011dd4 <prvGetNextExpireTime+0x44>)
 8011db6:	681b      	ldr	r3, [r3, #0]
 8011db8:	68db      	ldr	r3, [r3, #12]
 8011dba:	681b      	ldr	r3, [r3, #0]
 8011dbc:	60fb      	str	r3, [r7, #12]
 8011dbe:	e001      	b.n	8011dc4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8011dc0:	2300      	movs	r3, #0
 8011dc2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8011dc4:	68fb      	ldr	r3, [r7, #12]
}
 8011dc6:	4618      	mov	r0, r3
 8011dc8:	3714      	adds	r7, #20
 8011dca:	46bd      	mov	sp, r7
 8011dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dd0:	4770      	bx	lr
 8011dd2:	bf00      	nop
 8011dd4:	20004c20 	.word	0x20004c20

08011dd8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8011dd8:	b580      	push	{r7, lr}
 8011dda:	b084      	sub	sp, #16
 8011ddc:	af00      	add	r7, sp, #0
 8011dde:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8011de0:	f7ff fa74 	bl	80112cc <xTaskGetTickCount>
 8011de4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8011de6:	4b0b      	ldr	r3, [pc, #44]	; (8011e14 <prvSampleTimeNow+0x3c>)
 8011de8:	681b      	ldr	r3, [r3, #0]
 8011dea:	68fa      	ldr	r2, [r7, #12]
 8011dec:	429a      	cmp	r2, r3
 8011dee:	d205      	bcs.n	8011dfc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8011df0:	f000 f936 	bl	8012060 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	2201      	movs	r2, #1
 8011df8:	601a      	str	r2, [r3, #0]
 8011dfa:	e002      	b.n	8011e02 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8011dfc:	687b      	ldr	r3, [r7, #4]
 8011dfe:	2200      	movs	r2, #0
 8011e00:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8011e02:	4a04      	ldr	r2, [pc, #16]	; (8011e14 <prvSampleTimeNow+0x3c>)
 8011e04:	68fb      	ldr	r3, [r7, #12]
 8011e06:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8011e08:	68fb      	ldr	r3, [r7, #12]
}
 8011e0a:	4618      	mov	r0, r3
 8011e0c:	3710      	adds	r7, #16
 8011e0e:	46bd      	mov	sp, r7
 8011e10:	bd80      	pop	{r7, pc}
 8011e12:	bf00      	nop
 8011e14:	20004c30 	.word	0x20004c30

08011e18 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8011e18:	b580      	push	{r7, lr}
 8011e1a:	b086      	sub	sp, #24
 8011e1c:	af00      	add	r7, sp, #0
 8011e1e:	60f8      	str	r0, [r7, #12]
 8011e20:	60b9      	str	r1, [r7, #8]
 8011e22:	607a      	str	r2, [r7, #4]
 8011e24:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8011e26:	2300      	movs	r3, #0
 8011e28:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8011e2a:	68fb      	ldr	r3, [r7, #12]
 8011e2c:	68ba      	ldr	r2, [r7, #8]
 8011e2e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8011e30:	68fb      	ldr	r3, [r7, #12]
 8011e32:	68fa      	ldr	r2, [r7, #12]
 8011e34:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8011e36:	68ba      	ldr	r2, [r7, #8]
 8011e38:	687b      	ldr	r3, [r7, #4]
 8011e3a:	429a      	cmp	r2, r3
 8011e3c:	d812      	bhi.n	8011e64 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011e3e:	687a      	ldr	r2, [r7, #4]
 8011e40:	683b      	ldr	r3, [r7, #0]
 8011e42:	1ad2      	subs	r2, r2, r3
 8011e44:	68fb      	ldr	r3, [r7, #12]
 8011e46:	699b      	ldr	r3, [r3, #24]
 8011e48:	429a      	cmp	r2, r3
 8011e4a:	d302      	bcc.n	8011e52 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8011e4c:	2301      	movs	r3, #1
 8011e4e:	617b      	str	r3, [r7, #20]
 8011e50:	e01b      	b.n	8011e8a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8011e52:	4b10      	ldr	r3, [pc, #64]	; (8011e94 <prvInsertTimerInActiveList+0x7c>)
 8011e54:	681a      	ldr	r2, [r3, #0]
 8011e56:	68fb      	ldr	r3, [r7, #12]
 8011e58:	3304      	adds	r3, #4
 8011e5a:	4619      	mov	r1, r3
 8011e5c:	4610      	mov	r0, r2
 8011e5e:	f7fe f9de 	bl	801021e <vListInsert>
 8011e62:	e012      	b.n	8011e8a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8011e64:	687a      	ldr	r2, [r7, #4]
 8011e66:	683b      	ldr	r3, [r7, #0]
 8011e68:	429a      	cmp	r2, r3
 8011e6a:	d206      	bcs.n	8011e7a <prvInsertTimerInActiveList+0x62>
 8011e6c:	68ba      	ldr	r2, [r7, #8]
 8011e6e:	683b      	ldr	r3, [r7, #0]
 8011e70:	429a      	cmp	r2, r3
 8011e72:	d302      	bcc.n	8011e7a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8011e74:	2301      	movs	r3, #1
 8011e76:	617b      	str	r3, [r7, #20]
 8011e78:	e007      	b.n	8011e8a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8011e7a:	4b07      	ldr	r3, [pc, #28]	; (8011e98 <prvInsertTimerInActiveList+0x80>)
 8011e7c:	681a      	ldr	r2, [r3, #0]
 8011e7e:	68fb      	ldr	r3, [r7, #12]
 8011e80:	3304      	adds	r3, #4
 8011e82:	4619      	mov	r1, r3
 8011e84:	4610      	mov	r0, r2
 8011e86:	f7fe f9ca 	bl	801021e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8011e8a:	697b      	ldr	r3, [r7, #20]
}
 8011e8c:	4618      	mov	r0, r3
 8011e8e:	3718      	adds	r7, #24
 8011e90:	46bd      	mov	sp, r7
 8011e92:	bd80      	pop	{r7, pc}
 8011e94:	20004c24 	.word	0x20004c24
 8011e98:	20004c20 	.word	0x20004c20

08011e9c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8011e9c:	b580      	push	{r7, lr}
 8011e9e:	b08e      	sub	sp, #56	; 0x38
 8011ea0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8011ea2:	e0ca      	b.n	801203a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8011ea4:	687b      	ldr	r3, [r7, #4]
 8011ea6:	2b00      	cmp	r3, #0
 8011ea8:	da18      	bge.n	8011edc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8011eaa:	1d3b      	adds	r3, r7, #4
 8011eac:	3304      	adds	r3, #4
 8011eae:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8011eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011eb2:	2b00      	cmp	r3, #0
 8011eb4:	d10a      	bne.n	8011ecc <prvProcessReceivedCommands+0x30>
	__asm volatile
 8011eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011eba:	f383 8811 	msr	BASEPRI, r3
 8011ebe:	f3bf 8f6f 	isb	sy
 8011ec2:	f3bf 8f4f 	dsb	sy
 8011ec6:	61fb      	str	r3, [r7, #28]
}
 8011ec8:	bf00      	nop
 8011eca:	e7fe      	b.n	8011eca <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8011ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ece:	681b      	ldr	r3, [r3, #0]
 8011ed0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011ed2:	6850      	ldr	r0, [r2, #4]
 8011ed4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011ed6:	6892      	ldr	r2, [r2, #8]
 8011ed8:	4611      	mov	r1, r2
 8011eda:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	2b00      	cmp	r3, #0
 8011ee0:	f2c0 80ab 	blt.w	801203a <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8011ee4:	68fb      	ldr	r3, [r7, #12]
 8011ee6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8011ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011eea:	695b      	ldr	r3, [r3, #20]
 8011eec:	2b00      	cmp	r3, #0
 8011eee:	d004      	beq.n	8011efa <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ef2:	3304      	adds	r3, #4
 8011ef4:	4618      	mov	r0, r3
 8011ef6:	f7fe f9cb 	bl	8010290 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8011efa:	463b      	mov	r3, r7
 8011efc:	4618      	mov	r0, r3
 8011efe:	f7ff ff6b 	bl	8011dd8 <prvSampleTimeNow>
 8011f02:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8011f04:	687b      	ldr	r3, [r7, #4]
 8011f06:	2b09      	cmp	r3, #9
 8011f08:	f200 8096 	bhi.w	8012038 <prvProcessReceivedCommands+0x19c>
 8011f0c:	a201      	add	r2, pc, #4	; (adr r2, 8011f14 <prvProcessReceivedCommands+0x78>)
 8011f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011f12:	bf00      	nop
 8011f14:	08011f3d 	.word	0x08011f3d
 8011f18:	08011f3d 	.word	0x08011f3d
 8011f1c:	08011f3d 	.word	0x08011f3d
 8011f20:	08011fb1 	.word	0x08011fb1
 8011f24:	08011fc5 	.word	0x08011fc5
 8011f28:	0801200f 	.word	0x0801200f
 8011f2c:	08011f3d 	.word	0x08011f3d
 8011f30:	08011f3d 	.word	0x08011f3d
 8011f34:	08011fb1 	.word	0x08011fb1
 8011f38:	08011fc5 	.word	0x08011fc5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8011f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f3e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011f42:	f043 0301 	orr.w	r3, r3, #1
 8011f46:	b2da      	uxtb	r2, r3
 8011f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f4a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8011f4e:	68ba      	ldr	r2, [r7, #8]
 8011f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f52:	699b      	ldr	r3, [r3, #24]
 8011f54:	18d1      	adds	r1, r2, r3
 8011f56:	68bb      	ldr	r3, [r7, #8]
 8011f58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011f5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011f5c:	f7ff ff5c 	bl	8011e18 <prvInsertTimerInActiveList>
 8011f60:	4603      	mov	r3, r0
 8011f62:	2b00      	cmp	r3, #0
 8011f64:	d069      	beq.n	801203a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f68:	6a1b      	ldr	r3, [r3, #32]
 8011f6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011f6c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011f74:	f003 0304 	and.w	r3, r3, #4
 8011f78:	2b00      	cmp	r3, #0
 8011f7a:	d05e      	beq.n	801203a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8011f7c:	68ba      	ldr	r2, [r7, #8]
 8011f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f80:	699b      	ldr	r3, [r3, #24]
 8011f82:	441a      	add	r2, r3
 8011f84:	2300      	movs	r3, #0
 8011f86:	9300      	str	r3, [sp, #0]
 8011f88:	2300      	movs	r3, #0
 8011f8a:	2100      	movs	r1, #0
 8011f8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011f8e:	f7ff fe05 	bl	8011b9c <xTimerGenericCommand>
 8011f92:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8011f94:	6a3b      	ldr	r3, [r7, #32]
 8011f96:	2b00      	cmp	r3, #0
 8011f98:	d14f      	bne.n	801203a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8011f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f9e:	f383 8811 	msr	BASEPRI, r3
 8011fa2:	f3bf 8f6f 	isb	sy
 8011fa6:	f3bf 8f4f 	dsb	sy
 8011faa:	61bb      	str	r3, [r7, #24]
}
 8011fac:	bf00      	nop
 8011fae:	e7fe      	b.n	8011fae <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fb2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011fb6:	f023 0301 	bic.w	r3, r3, #1
 8011fba:	b2da      	uxtb	r2, r3
 8011fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fbe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8011fc2:	e03a      	b.n	801203a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8011fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fc6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011fca:	f043 0301 	orr.w	r3, r3, #1
 8011fce:	b2da      	uxtb	r2, r3
 8011fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fd2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8011fd6:	68ba      	ldr	r2, [r7, #8]
 8011fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fda:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8011fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fde:	699b      	ldr	r3, [r3, #24]
 8011fe0:	2b00      	cmp	r3, #0
 8011fe2:	d10a      	bne.n	8011ffa <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8011fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011fe8:	f383 8811 	msr	BASEPRI, r3
 8011fec:	f3bf 8f6f 	isb	sy
 8011ff0:	f3bf 8f4f 	dsb	sy
 8011ff4:	617b      	str	r3, [r7, #20]
}
 8011ff6:	bf00      	nop
 8011ff8:	e7fe      	b.n	8011ff8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8011ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ffc:	699a      	ldr	r2, [r3, #24]
 8011ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012000:	18d1      	adds	r1, r2, r3
 8012002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012004:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012006:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012008:	f7ff ff06 	bl	8011e18 <prvInsertTimerInActiveList>
					break;
 801200c:	e015      	b.n	801203a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801200e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012010:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012014:	f003 0302 	and.w	r3, r3, #2
 8012018:	2b00      	cmp	r3, #0
 801201a:	d103      	bne.n	8012024 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 801201c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801201e:	f000 fbdf 	bl	80127e0 <vPortFree>
 8012022:	e00a      	b.n	801203a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012026:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801202a:	f023 0301 	bic.w	r3, r3, #1
 801202e:	b2da      	uxtb	r2, r3
 8012030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012032:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8012036:	e000      	b.n	801203a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8012038:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801203a:	4b08      	ldr	r3, [pc, #32]	; (801205c <prvProcessReceivedCommands+0x1c0>)
 801203c:	681b      	ldr	r3, [r3, #0]
 801203e:	1d39      	adds	r1, r7, #4
 8012040:	2200      	movs	r2, #0
 8012042:	4618      	mov	r0, r3
 8012044:	f7fe fbec 	bl	8010820 <xQueueReceive>
 8012048:	4603      	mov	r3, r0
 801204a:	2b00      	cmp	r3, #0
 801204c:	f47f af2a 	bne.w	8011ea4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8012050:	bf00      	nop
 8012052:	bf00      	nop
 8012054:	3730      	adds	r7, #48	; 0x30
 8012056:	46bd      	mov	sp, r7
 8012058:	bd80      	pop	{r7, pc}
 801205a:	bf00      	nop
 801205c:	20004c28 	.word	0x20004c28

08012060 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8012060:	b580      	push	{r7, lr}
 8012062:	b088      	sub	sp, #32
 8012064:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8012066:	e048      	b.n	80120fa <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8012068:	4b2d      	ldr	r3, [pc, #180]	; (8012120 <prvSwitchTimerLists+0xc0>)
 801206a:	681b      	ldr	r3, [r3, #0]
 801206c:	68db      	ldr	r3, [r3, #12]
 801206e:	681b      	ldr	r3, [r3, #0]
 8012070:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012072:	4b2b      	ldr	r3, [pc, #172]	; (8012120 <prvSwitchTimerLists+0xc0>)
 8012074:	681b      	ldr	r3, [r3, #0]
 8012076:	68db      	ldr	r3, [r3, #12]
 8012078:	68db      	ldr	r3, [r3, #12]
 801207a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801207c:	68fb      	ldr	r3, [r7, #12]
 801207e:	3304      	adds	r3, #4
 8012080:	4618      	mov	r0, r3
 8012082:	f7fe f905 	bl	8010290 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012086:	68fb      	ldr	r3, [r7, #12]
 8012088:	6a1b      	ldr	r3, [r3, #32]
 801208a:	68f8      	ldr	r0, [r7, #12]
 801208c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801208e:	68fb      	ldr	r3, [r7, #12]
 8012090:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012094:	f003 0304 	and.w	r3, r3, #4
 8012098:	2b00      	cmp	r3, #0
 801209a:	d02e      	beq.n	80120fa <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801209c:	68fb      	ldr	r3, [r7, #12]
 801209e:	699b      	ldr	r3, [r3, #24]
 80120a0:	693a      	ldr	r2, [r7, #16]
 80120a2:	4413      	add	r3, r2
 80120a4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80120a6:	68ba      	ldr	r2, [r7, #8]
 80120a8:	693b      	ldr	r3, [r7, #16]
 80120aa:	429a      	cmp	r2, r3
 80120ac:	d90e      	bls.n	80120cc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80120ae:	68fb      	ldr	r3, [r7, #12]
 80120b0:	68ba      	ldr	r2, [r7, #8]
 80120b2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80120b4:	68fb      	ldr	r3, [r7, #12]
 80120b6:	68fa      	ldr	r2, [r7, #12]
 80120b8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80120ba:	4b19      	ldr	r3, [pc, #100]	; (8012120 <prvSwitchTimerLists+0xc0>)
 80120bc:	681a      	ldr	r2, [r3, #0]
 80120be:	68fb      	ldr	r3, [r7, #12]
 80120c0:	3304      	adds	r3, #4
 80120c2:	4619      	mov	r1, r3
 80120c4:	4610      	mov	r0, r2
 80120c6:	f7fe f8aa 	bl	801021e <vListInsert>
 80120ca:	e016      	b.n	80120fa <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80120cc:	2300      	movs	r3, #0
 80120ce:	9300      	str	r3, [sp, #0]
 80120d0:	2300      	movs	r3, #0
 80120d2:	693a      	ldr	r2, [r7, #16]
 80120d4:	2100      	movs	r1, #0
 80120d6:	68f8      	ldr	r0, [r7, #12]
 80120d8:	f7ff fd60 	bl	8011b9c <xTimerGenericCommand>
 80120dc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80120de:	687b      	ldr	r3, [r7, #4]
 80120e0:	2b00      	cmp	r3, #0
 80120e2:	d10a      	bne.n	80120fa <prvSwitchTimerLists+0x9a>
	__asm volatile
 80120e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120e8:	f383 8811 	msr	BASEPRI, r3
 80120ec:	f3bf 8f6f 	isb	sy
 80120f0:	f3bf 8f4f 	dsb	sy
 80120f4:	603b      	str	r3, [r7, #0]
}
 80120f6:	bf00      	nop
 80120f8:	e7fe      	b.n	80120f8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80120fa:	4b09      	ldr	r3, [pc, #36]	; (8012120 <prvSwitchTimerLists+0xc0>)
 80120fc:	681b      	ldr	r3, [r3, #0]
 80120fe:	681b      	ldr	r3, [r3, #0]
 8012100:	2b00      	cmp	r3, #0
 8012102:	d1b1      	bne.n	8012068 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8012104:	4b06      	ldr	r3, [pc, #24]	; (8012120 <prvSwitchTimerLists+0xc0>)
 8012106:	681b      	ldr	r3, [r3, #0]
 8012108:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801210a:	4b06      	ldr	r3, [pc, #24]	; (8012124 <prvSwitchTimerLists+0xc4>)
 801210c:	681b      	ldr	r3, [r3, #0]
 801210e:	4a04      	ldr	r2, [pc, #16]	; (8012120 <prvSwitchTimerLists+0xc0>)
 8012110:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8012112:	4a04      	ldr	r2, [pc, #16]	; (8012124 <prvSwitchTimerLists+0xc4>)
 8012114:	697b      	ldr	r3, [r7, #20]
 8012116:	6013      	str	r3, [r2, #0]
}
 8012118:	bf00      	nop
 801211a:	3718      	adds	r7, #24
 801211c:	46bd      	mov	sp, r7
 801211e:	bd80      	pop	{r7, pc}
 8012120:	20004c20 	.word	0x20004c20
 8012124:	20004c24 	.word	0x20004c24

08012128 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8012128:	b580      	push	{r7, lr}
 801212a:	b082      	sub	sp, #8
 801212c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801212e:	f000 f969 	bl	8012404 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8012132:	4b15      	ldr	r3, [pc, #84]	; (8012188 <prvCheckForValidListAndQueue+0x60>)
 8012134:	681b      	ldr	r3, [r3, #0]
 8012136:	2b00      	cmp	r3, #0
 8012138:	d120      	bne.n	801217c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801213a:	4814      	ldr	r0, [pc, #80]	; (801218c <prvCheckForValidListAndQueue+0x64>)
 801213c:	f7fe f81e 	bl	801017c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8012140:	4813      	ldr	r0, [pc, #76]	; (8012190 <prvCheckForValidListAndQueue+0x68>)
 8012142:	f7fe f81b 	bl	801017c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8012146:	4b13      	ldr	r3, [pc, #76]	; (8012194 <prvCheckForValidListAndQueue+0x6c>)
 8012148:	4a10      	ldr	r2, [pc, #64]	; (801218c <prvCheckForValidListAndQueue+0x64>)
 801214a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801214c:	4b12      	ldr	r3, [pc, #72]	; (8012198 <prvCheckForValidListAndQueue+0x70>)
 801214e:	4a10      	ldr	r2, [pc, #64]	; (8012190 <prvCheckForValidListAndQueue+0x68>)
 8012150:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8012152:	2300      	movs	r3, #0
 8012154:	9300      	str	r3, [sp, #0]
 8012156:	4b11      	ldr	r3, [pc, #68]	; (801219c <prvCheckForValidListAndQueue+0x74>)
 8012158:	4a11      	ldr	r2, [pc, #68]	; (80121a0 <prvCheckForValidListAndQueue+0x78>)
 801215a:	2110      	movs	r1, #16
 801215c:	200a      	movs	r0, #10
 801215e:	f7fe f929 	bl	80103b4 <xQueueGenericCreateStatic>
 8012162:	4603      	mov	r3, r0
 8012164:	4a08      	ldr	r2, [pc, #32]	; (8012188 <prvCheckForValidListAndQueue+0x60>)
 8012166:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8012168:	4b07      	ldr	r3, [pc, #28]	; (8012188 <prvCheckForValidListAndQueue+0x60>)
 801216a:	681b      	ldr	r3, [r3, #0]
 801216c:	2b00      	cmp	r3, #0
 801216e:	d005      	beq.n	801217c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8012170:	4b05      	ldr	r3, [pc, #20]	; (8012188 <prvCheckForValidListAndQueue+0x60>)
 8012172:	681b      	ldr	r3, [r3, #0]
 8012174:	490b      	ldr	r1, [pc, #44]	; (80121a4 <prvCheckForValidListAndQueue+0x7c>)
 8012176:	4618      	mov	r0, r3
 8012178:	f7fe fd42 	bl	8010c00 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801217c:	f000 f972 	bl	8012464 <vPortExitCritical>
}
 8012180:	bf00      	nop
 8012182:	46bd      	mov	sp, r7
 8012184:	bd80      	pop	{r7, pc}
 8012186:	bf00      	nop
 8012188:	20004c28 	.word	0x20004c28
 801218c:	20004bf8 	.word	0x20004bf8
 8012190:	20004c0c 	.word	0x20004c0c
 8012194:	20004c20 	.word	0x20004c20
 8012198:	20004c24 	.word	0x20004c24
 801219c:	20004cd4 	.word	0x20004cd4
 80121a0:	20004c34 	.word	0x20004c34
 80121a4:	08016944 	.word	0x08016944

080121a8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80121a8:	b480      	push	{r7}
 80121aa:	b085      	sub	sp, #20
 80121ac:	af00      	add	r7, sp, #0
 80121ae:	60f8      	str	r0, [r7, #12]
 80121b0:	60b9      	str	r1, [r7, #8]
 80121b2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80121b4:	68fb      	ldr	r3, [r7, #12]
 80121b6:	3b04      	subs	r3, #4
 80121b8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80121ba:	68fb      	ldr	r3, [r7, #12]
 80121bc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80121c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80121c2:	68fb      	ldr	r3, [r7, #12]
 80121c4:	3b04      	subs	r3, #4
 80121c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80121c8:	68bb      	ldr	r3, [r7, #8]
 80121ca:	f023 0201 	bic.w	r2, r3, #1
 80121ce:	68fb      	ldr	r3, [r7, #12]
 80121d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80121d2:	68fb      	ldr	r3, [r7, #12]
 80121d4:	3b04      	subs	r3, #4
 80121d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80121d8:	4a0c      	ldr	r2, [pc, #48]	; (801220c <pxPortInitialiseStack+0x64>)
 80121da:	68fb      	ldr	r3, [r7, #12]
 80121dc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80121de:	68fb      	ldr	r3, [r7, #12]
 80121e0:	3b14      	subs	r3, #20
 80121e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80121e4:	687a      	ldr	r2, [r7, #4]
 80121e6:	68fb      	ldr	r3, [r7, #12]
 80121e8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80121ea:	68fb      	ldr	r3, [r7, #12]
 80121ec:	3b04      	subs	r3, #4
 80121ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80121f0:	68fb      	ldr	r3, [r7, #12]
 80121f2:	f06f 0202 	mvn.w	r2, #2
 80121f6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80121f8:	68fb      	ldr	r3, [r7, #12]
 80121fa:	3b20      	subs	r3, #32
 80121fc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80121fe:	68fb      	ldr	r3, [r7, #12]
}
 8012200:	4618      	mov	r0, r3
 8012202:	3714      	adds	r7, #20
 8012204:	46bd      	mov	sp, r7
 8012206:	f85d 7b04 	ldr.w	r7, [sp], #4
 801220a:	4770      	bx	lr
 801220c:	08012211 	.word	0x08012211

08012210 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8012210:	b480      	push	{r7}
 8012212:	b085      	sub	sp, #20
 8012214:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8012216:	2300      	movs	r3, #0
 8012218:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801221a:	4b12      	ldr	r3, [pc, #72]	; (8012264 <prvTaskExitError+0x54>)
 801221c:	681b      	ldr	r3, [r3, #0]
 801221e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012222:	d00a      	beq.n	801223a <prvTaskExitError+0x2a>
	__asm volatile
 8012224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012228:	f383 8811 	msr	BASEPRI, r3
 801222c:	f3bf 8f6f 	isb	sy
 8012230:	f3bf 8f4f 	dsb	sy
 8012234:	60fb      	str	r3, [r7, #12]
}
 8012236:	bf00      	nop
 8012238:	e7fe      	b.n	8012238 <prvTaskExitError+0x28>
	__asm volatile
 801223a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801223e:	f383 8811 	msr	BASEPRI, r3
 8012242:	f3bf 8f6f 	isb	sy
 8012246:	f3bf 8f4f 	dsb	sy
 801224a:	60bb      	str	r3, [r7, #8]
}
 801224c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801224e:	bf00      	nop
 8012250:	687b      	ldr	r3, [r7, #4]
 8012252:	2b00      	cmp	r3, #0
 8012254:	d0fc      	beq.n	8012250 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8012256:	bf00      	nop
 8012258:	bf00      	nop
 801225a:	3714      	adds	r7, #20
 801225c:	46bd      	mov	sp, r7
 801225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012262:	4770      	bx	lr
 8012264:	20000340 	.word	0x20000340
	...

08012270 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8012270:	4b07      	ldr	r3, [pc, #28]	; (8012290 <pxCurrentTCBConst2>)
 8012272:	6819      	ldr	r1, [r3, #0]
 8012274:	6808      	ldr	r0, [r1, #0]
 8012276:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801227a:	f380 8809 	msr	PSP, r0
 801227e:	f3bf 8f6f 	isb	sy
 8012282:	f04f 0000 	mov.w	r0, #0
 8012286:	f380 8811 	msr	BASEPRI, r0
 801228a:	4770      	bx	lr
 801228c:	f3af 8000 	nop.w

08012290 <pxCurrentTCBConst2>:
 8012290:	200046f8 	.word	0x200046f8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8012294:	bf00      	nop
 8012296:	bf00      	nop

08012298 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8012298:	4808      	ldr	r0, [pc, #32]	; (80122bc <prvPortStartFirstTask+0x24>)
 801229a:	6800      	ldr	r0, [r0, #0]
 801229c:	6800      	ldr	r0, [r0, #0]
 801229e:	f380 8808 	msr	MSP, r0
 80122a2:	f04f 0000 	mov.w	r0, #0
 80122a6:	f380 8814 	msr	CONTROL, r0
 80122aa:	b662      	cpsie	i
 80122ac:	b661      	cpsie	f
 80122ae:	f3bf 8f4f 	dsb	sy
 80122b2:	f3bf 8f6f 	isb	sy
 80122b6:	df00      	svc	0
 80122b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80122ba:	bf00      	nop
 80122bc:	e000ed08 	.word	0xe000ed08

080122c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80122c0:	b580      	push	{r7, lr}
 80122c2:	b086      	sub	sp, #24
 80122c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80122c6:	4b46      	ldr	r3, [pc, #280]	; (80123e0 <xPortStartScheduler+0x120>)
 80122c8:	681b      	ldr	r3, [r3, #0]
 80122ca:	4a46      	ldr	r2, [pc, #280]	; (80123e4 <xPortStartScheduler+0x124>)
 80122cc:	4293      	cmp	r3, r2
 80122ce:	d10a      	bne.n	80122e6 <xPortStartScheduler+0x26>
	__asm volatile
 80122d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122d4:	f383 8811 	msr	BASEPRI, r3
 80122d8:	f3bf 8f6f 	isb	sy
 80122dc:	f3bf 8f4f 	dsb	sy
 80122e0:	613b      	str	r3, [r7, #16]
}
 80122e2:	bf00      	nop
 80122e4:	e7fe      	b.n	80122e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80122e6:	4b3e      	ldr	r3, [pc, #248]	; (80123e0 <xPortStartScheduler+0x120>)
 80122e8:	681b      	ldr	r3, [r3, #0]
 80122ea:	4a3f      	ldr	r2, [pc, #252]	; (80123e8 <xPortStartScheduler+0x128>)
 80122ec:	4293      	cmp	r3, r2
 80122ee:	d10a      	bne.n	8012306 <xPortStartScheduler+0x46>
	__asm volatile
 80122f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122f4:	f383 8811 	msr	BASEPRI, r3
 80122f8:	f3bf 8f6f 	isb	sy
 80122fc:	f3bf 8f4f 	dsb	sy
 8012300:	60fb      	str	r3, [r7, #12]
}
 8012302:	bf00      	nop
 8012304:	e7fe      	b.n	8012304 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8012306:	4b39      	ldr	r3, [pc, #228]	; (80123ec <xPortStartScheduler+0x12c>)
 8012308:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801230a:	697b      	ldr	r3, [r7, #20]
 801230c:	781b      	ldrb	r3, [r3, #0]
 801230e:	b2db      	uxtb	r3, r3
 8012310:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8012312:	697b      	ldr	r3, [r7, #20]
 8012314:	22ff      	movs	r2, #255	; 0xff
 8012316:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8012318:	697b      	ldr	r3, [r7, #20]
 801231a:	781b      	ldrb	r3, [r3, #0]
 801231c:	b2db      	uxtb	r3, r3
 801231e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8012320:	78fb      	ldrb	r3, [r7, #3]
 8012322:	b2db      	uxtb	r3, r3
 8012324:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8012328:	b2da      	uxtb	r2, r3
 801232a:	4b31      	ldr	r3, [pc, #196]	; (80123f0 <xPortStartScheduler+0x130>)
 801232c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801232e:	4b31      	ldr	r3, [pc, #196]	; (80123f4 <xPortStartScheduler+0x134>)
 8012330:	2207      	movs	r2, #7
 8012332:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012334:	e009      	b.n	801234a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8012336:	4b2f      	ldr	r3, [pc, #188]	; (80123f4 <xPortStartScheduler+0x134>)
 8012338:	681b      	ldr	r3, [r3, #0]
 801233a:	3b01      	subs	r3, #1
 801233c:	4a2d      	ldr	r2, [pc, #180]	; (80123f4 <xPortStartScheduler+0x134>)
 801233e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8012340:	78fb      	ldrb	r3, [r7, #3]
 8012342:	b2db      	uxtb	r3, r3
 8012344:	005b      	lsls	r3, r3, #1
 8012346:	b2db      	uxtb	r3, r3
 8012348:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801234a:	78fb      	ldrb	r3, [r7, #3]
 801234c:	b2db      	uxtb	r3, r3
 801234e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012352:	2b80      	cmp	r3, #128	; 0x80
 8012354:	d0ef      	beq.n	8012336 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8012356:	4b27      	ldr	r3, [pc, #156]	; (80123f4 <xPortStartScheduler+0x134>)
 8012358:	681b      	ldr	r3, [r3, #0]
 801235a:	f1c3 0307 	rsb	r3, r3, #7
 801235e:	2b04      	cmp	r3, #4
 8012360:	d00a      	beq.n	8012378 <xPortStartScheduler+0xb8>
	__asm volatile
 8012362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012366:	f383 8811 	msr	BASEPRI, r3
 801236a:	f3bf 8f6f 	isb	sy
 801236e:	f3bf 8f4f 	dsb	sy
 8012372:	60bb      	str	r3, [r7, #8]
}
 8012374:	bf00      	nop
 8012376:	e7fe      	b.n	8012376 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8012378:	4b1e      	ldr	r3, [pc, #120]	; (80123f4 <xPortStartScheduler+0x134>)
 801237a:	681b      	ldr	r3, [r3, #0]
 801237c:	021b      	lsls	r3, r3, #8
 801237e:	4a1d      	ldr	r2, [pc, #116]	; (80123f4 <xPortStartScheduler+0x134>)
 8012380:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8012382:	4b1c      	ldr	r3, [pc, #112]	; (80123f4 <xPortStartScheduler+0x134>)
 8012384:	681b      	ldr	r3, [r3, #0]
 8012386:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801238a:	4a1a      	ldr	r2, [pc, #104]	; (80123f4 <xPortStartScheduler+0x134>)
 801238c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	b2da      	uxtb	r2, r3
 8012392:	697b      	ldr	r3, [r7, #20]
 8012394:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8012396:	4b18      	ldr	r3, [pc, #96]	; (80123f8 <xPortStartScheduler+0x138>)
 8012398:	681b      	ldr	r3, [r3, #0]
 801239a:	4a17      	ldr	r2, [pc, #92]	; (80123f8 <xPortStartScheduler+0x138>)
 801239c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80123a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80123a2:	4b15      	ldr	r3, [pc, #84]	; (80123f8 <xPortStartScheduler+0x138>)
 80123a4:	681b      	ldr	r3, [r3, #0]
 80123a6:	4a14      	ldr	r2, [pc, #80]	; (80123f8 <xPortStartScheduler+0x138>)
 80123a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80123ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80123ae:	f000 f8dd 	bl	801256c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80123b2:	4b12      	ldr	r3, [pc, #72]	; (80123fc <xPortStartScheduler+0x13c>)
 80123b4:	2200      	movs	r2, #0
 80123b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80123b8:	f000 f8fc 	bl	80125b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80123bc:	4b10      	ldr	r3, [pc, #64]	; (8012400 <xPortStartScheduler+0x140>)
 80123be:	681b      	ldr	r3, [r3, #0]
 80123c0:	4a0f      	ldr	r2, [pc, #60]	; (8012400 <xPortStartScheduler+0x140>)
 80123c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80123c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80123c8:	f7ff ff66 	bl	8012298 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80123cc:	f7ff f848 	bl	8011460 <vTaskSwitchContext>
	prvTaskExitError();
 80123d0:	f7ff ff1e 	bl	8012210 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80123d4:	2300      	movs	r3, #0
}
 80123d6:	4618      	mov	r0, r3
 80123d8:	3718      	adds	r7, #24
 80123da:	46bd      	mov	sp, r7
 80123dc:	bd80      	pop	{r7, pc}
 80123de:	bf00      	nop
 80123e0:	e000ed00 	.word	0xe000ed00
 80123e4:	410fc271 	.word	0x410fc271
 80123e8:	410fc270 	.word	0x410fc270
 80123ec:	e000e400 	.word	0xe000e400
 80123f0:	20004d24 	.word	0x20004d24
 80123f4:	20004d28 	.word	0x20004d28
 80123f8:	e000ed20 	.word	0xe000ed20
 80123fc:	20000340 	.word	0x20000340
 8012400:	e000ef34 	.word	0xe000ef34

08012404 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8012404:	b480      	push	{r7}
 8012406:	b083      	sub	sp, #12
 8012408:	af00      	add	r7, sp, #0
	__asm volatile
 801240a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801240e:	f383 8811 	msr	BASEPRI, r3
 8012412:	f3bf 8f6f 	isb	sy
 8012416:	f3bf 8f4f 	dsb	sy
 801241a:	607b      	str	r3, [r7, #4]
}
 801241c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801241e:	4b0f      	ldr	r3, [pc, #60]	; (801245c <vPortEnterCritical+0x58>)
 8012420:	681b      	ldr	r3, [r3, #0]
 8012422:	3301      	adds	r3, #1
 8012424:	4a0d      	ldr	r2, [pc, #52]	; (801245c <vPortEnterCritical+0x58>)
 8012426:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8012428:	4b0c      	ldr	r3, [pc, #48]	; (801245c <vPortEnterCritical+0x58>)
 801242a:	681b      	ldr	r3, [r3, #0]
 801242c:	2b01      	cmp	r3, #1
 801242e:	d10f      	bne.n	8012450 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8012430:	4b0b      	ldr	r3, [pc, #44]	; (8012460 <vPortEnterCritical+0x5c>)
 8012432:	681b      	ldr	r3, [r3, #0]
 8012434:	b2db      	uxtb	r3, r3
 8012436:	2b00      	cmp	r3, #0
 8012438:	d00a      	beq.n	8012450 <vPortEnterCritical+0x4c>
	__asm volatile
 801243a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801243e:	f383 8811 	msr	BASEPRI, r3
 8012442:	f3bf 8f6f 	isb	sy
 8012446:	f3bf 8f4f 	dsb	sy
 801244a:	603b      	str	r3, [r7, #0]
}
 801244c:	bf00      	nop
 801244e:	e7fe      	b.n	801244e <vPortEnterCritical+0x4a>
	}
}
 8012450:	bf00      	nop
 8012452:	370c      	adds	r7, #12
 8012454:	46bd      	mov	sp, r7
 8012456:	f85d 7b04 	ldr.w	r7, [sp], #4
 801245a:	4770      	bx	lr
 801245c:	20000340 	.word	0x20000340
 8012460:	e000ed04 	.word	0xe000ed04

08012464 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8012464:	b480      	push	{r7}
 8012466:	b083      	sub	sp, #12
 8012468:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801246a:	4b12      	ldr	r3, [pc, #72]	; (80124b4 <vPortExitCritical+0x50>)
 801246c:	681b      	ldr	r3, [r3, #0]
 801246e:	2b00      	cmp	r3, #0
 8012470:	d10a      	bne.n	8012488 <vPortExitCritical+0x24>
	__asm volatile
 8012472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012476:	f383 8811 	msr	BASEPRI, r3
 801247a:	f3bf 8f6f 	isb	sy
 801247e:	f3bf 8f4f 	dsb	sy
 8012482:	607b      	str	r3, [r7, #4]
}
 8012484:	bf00      	nop
 8012486:	e7fe      	b.n	8012486 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8012488:	4b0a      	ldr	r3, [pc, #40]	; (80124b4 <vPortExitCritical+0x50>)
 801248a:	681b      	ldr	r3, [r3, #0]
 801248c:	3b01      	subs	r3, #1
 801248e:	4a09      	ldr	r2, [pc, #36]	; (80124b4 <vPortExitCritical+0x50>)
 8012490:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8012492:	4b08      	ldr	r3, [pc, #32]	; (80124b4 <vPortExitCritical+0x50>)
 8012494:	681b      	ldr	r3, [r3, #0]
 8012496:	2b00      	cmp	r3, #0
 8012498:	d105      	bne.n	80124a6 <vPortExitCritical+0x42>
 801249a:	2300      	movs	r3, #0
 801249c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801249e:	683b      	ldr	r3, [r7, #0]
 80124a0:	f383 8811 	msr	BASEPRI, r3
}
 80124a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80124a6:	bf00      	nop
 80124a8:	370c      	adds	r7, #12
 80124aa:	46bd      	mov	sp, r7
 80124ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124b0:	4770      	bx	lr
 80124b2:	bf00      	nop
 80124b4:	20000340 	.word	0x20000340
	...

080124c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80124c0:	f3ef 8009 	mrs	r0, PSP
 80124c4:	f3bf 8f6f 	isb	sy
 80124c8:	4b15      	ldr	r3, [pc, #84]	; (8012520 <pxCurrentTCBConst>)
 80124ca:	681a      	ldr	r2, [r3, #0]
 80124cc:	f01e 0f10 	tst.w	lr, #16
 80124d0:	bf08      	it	eq
 80124d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80124d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124da:	6010      	str	r0, [r2, #0]
 80124dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80124e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80124e4:	f380 8811 	msr	BASEPRI, r0
 80124e8:	f3bf 8f4f 	dsb	sy
 80124ec:	f3bf 8f6f 	isb	sy
 80124f0:	f7fe ffb6 	bl	8011460 <vTaskSwitchContext>
 80124f4:	f04f 0000 	mov.w	r0, #0
 80124f8:	f380 8811 	msr	BASEPRI, r0
 80124fc:	bc09      	pop	{r0, r3}
 80124fe:	6819      	ldr	r1, [r3, #0]
 8012500:	6808      	ldr	r0, [r1, #0]
 8012502:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012506:	f01e 0f10 	tst.w	lr, #16
 801250a:	bf08      	it	eq
 801250c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8012510:	f380 8809 	msr	PSP, r0
 8012514:	f3bf 8f6f 	isb	sy
 8012518:	4770      	bx	lr
 801251a:	bf00      	nop
 801251c:	f3af 8000 	nop.w

08012520 <pxCurrentTCBConst>:
 8012520:	200046f8 	.word	0x200046f8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8012524:	bf00      	nop
 8012526:	bf00      	nop

08012528 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8012528:	b580      	push	{r7, lr}
 801252a:	b082      	sub	sp, #8
 801252c:	af00      	add	r7, sp, #0
	__asm volatile
 801252e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012532:	f383 8811 	msr	BASEPRI, r3
 8012536:	f3bf 8f6f 	isb	sy
 801253a:	f3bf 8f4f 	dsb	sy
 801253e:	607b      	str	r3, [r7, #4]
}
 8012540:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8012542:	f7fe fed3 	bl	80112ec <xTaskIncrementTick>
 8012546:	4603      	mov	r3, r0
 8012548:	2b00      	cmp	r3, #0
 801254a:	d003      	beq.n	8012554 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801254c:	4b06      	ldr	r3, [pc, #24]	; (8012568 <xPortSysTickHandler+0x40>)
 801254e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012552:	601a      	str	r2, [r3, #0]
 8012554:	2300      	movs	r3, #0
 8012556:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012558:	683b      	ldr	r3, [r7, #0]
 801255a:	f383 8811 	msr	BASEPRI, r3
}
 801255e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8012560:	bf00      	nop
 8012562:	3708      	adds	r7, #8
 8012564:	46bd      	mov	sp, r7
 8012566:	bd80      	pop	{r7, pc}
 8012568:	e000ed04 	.word	0xe000ed04

0801256c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801256c:	b480      	push	{r7}
 801256e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8012570:	4b0b      	ldr	r3, [pc, #44]	; (80125a0 <vPortSetupTimerInterrupt+0x34>)
 8012572:	2200      	movs	r2, #0
 8012574:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8012576:	4b0b      	ldr	r3, [pc, #44]	; (80125a4 <vPortSetupTimerInterrupt+0x38>)
 8012578:	2200      	movs	r2, #0
 801257a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801257c:	4b0a      	ldr	r3, [pc, #40]	; (80125a8 <vPortSetupTimerInterrupt+0x3c>)
 801257e:	681b      	ldr	r3, [r3, #0]
 8012580:	4a0a      	ldr	r2, [pc, #40]	; (80125ac <vPortSetupTimerInterrupt+0x40>)
 8012582:	fba2 2303 	umull	r2, r3, r2, r3
 8012586:	099b      	lsrs	r3, r3, #6
 8012588:	4a09      	ldr	r2, [pc, #36]	; (80125b0 <vPortSetupTimerInterrupt+0x44>)
 801258a:	3b01      	subs	r3, #1
 801258c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801258e:	4b04      	ldr	r3, [pc, #16]	; (80125a0 <vPortSetupTimerInterrupt+0x34>)
 8012590:	2207      	movs	r2, #7
 8012592:	601a      	str	r2, [r3, #0]
}
 8012594:	bf00      	nop
 8012596:	46bd      	mov	sp, r7
 8012598:	f85d 7b04 	ldr.w	r7, [sp], #4
 801259c:	4770      	bx	lr
 801259e:	bf00      	nop
 80125a0:	e000e010 	.word	0xe000e010
 80125a4:	e000e018 	.word	0xe000e018
 80125a8:	20000224 	.word	0x20000224
 80125ac:	10624dd3 	.word	0x10624dd3
 80125b0:	e000e014 	.word	0xe000e014

080125b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80125b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80125c4 <vPortEnableVFP+0x10>
 80125b8:	6801      	ldr	r1, [r0, #0]
 80125ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80125be:	6001      	str	r1, [r0, #0]
 80125c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80125c2:	bf00      	nop
 80125c4:	e000ed88 	.word	0xe000ed88

080125c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80125c8:	b480      	push	{r7}
 80125ca:	b085      	sub	sp, #20
 80125cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80125ce:	f3ef 8305 	mrs	r3, IPSR
 80125d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80125d4:	68fb      	ldr	r3, [r7, #12]
 80125d6:	2b0f      	cmp	r3, #15
 80125d8:	d914      	bls.n	8012604 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80125da:	4a17      	ldr	r2, [pc, #92]	; (8012638 <vPortValidateInterruptPriority+0x70>)
 80125dc:	68fb      	ldr	r3, [r7, #12]
 80125de:	4413      	add	r3, r2
 80125e0:	781b      	ldrb	r3, [r3, #0]
 80125e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80125e4:	4b15      	ldr	r3, [pc, #84]	; (801263c <vPortValidateInterruptPriority+0x74>)
 80125e6:	781b      	ldrb	r3, [r3, #0]
 80125e8:	7afa      	ldrb	r2, [r7, #11]
 80125ea:	429a      	cmp	r2, r3
 80125ec:	d20a      	bcs.n	8012604 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80125ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125f2:	f383 8811 	msr	BASEPRI, r3
 80125f6:	f3bf 8f6f 	isb	sy
 80125fa:	f3bf 8f4f 	dsb	sy
 80125fe:	607b      	str	r3, [r7, #4]
}
 8012600:	bf00      	nop
 8012602:	e7fe      	b.n	8012602 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8012604:	4b0e      	ldr	r3, [pc, #56]	; (8012640 <vPortValidateInterruptPriority+0x78>)
 8012606:	681b      	ldr	r3, [r3, #0]
 8012608:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801260c:	4b0d      	ldr	r3, [pc, #52]	; (8012644 <vPortValidateInterruptPriority+0x7c>)
 801260e:	681b      	ldr	r3, [r3, #0]
 8012610:	429a      	cmp	r2, r3
 8012612:	d90a      	bls.n	801262a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8012614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012618:	f383 8811 	msr	BASEPRI, r3
 801261c:	f3bf 8f6f 	isb	sy
 8012620:	f3bf 8f4f 	dsb	sy
 8012624:	603b      	str	r3, [r7, #0]
}
 8012626:	bf00      	nop
 8012628:	e7fe      	b.n	8012628 <vPortValidateInterruptPriority+0x60>
	}
 801262a:	bf00      	nop
 801262c:	3714      	adds	r7, #20
 801262e:	46bd      	mov	sp, r7
 8012630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012634:	4770      	bx	lr
 8012636:	bf00      	nop
 8012638:	e000e3f0 	.word	0xe000e3f0
 801263c:	20004d24 	.word	0x20004d24
 8012640:	e000ed0c 	.word	0xe000ed0c
 8012644:	20004d28 	.word	0x20004d28

08012648 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8012648:	b580      	push	{r7, lr}
 801264a:	b08a      	sub	sp, #40	; 0x28
 801264c:	af00      	add	r7, sp, #0
 801264e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8012650:	2300      	movs	r3, #0
 8012652:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8012654:	f7fe fd8e 	bl	8011174 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8012658:	4b5b      	ldr	r3, [pc, #364]	; (80127c8 <pvPortMalloc+0x180>)
 801265a:	681b      	ldr	r3, [r3, #0]
 801265c:	2b00      	cmp	r3, #0
 801265e:	d101      	bne.n	8012664 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8012660:	f000 f920 	bl	80128a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8012664:	4b59      	ldr	r3, [pc, #356]	; (80127cc <pvPortMalloc+0x184>)
 8012666:	681a      	ldr	r2, [r3, #0]
 8012668:	687b      	ldr	r3, [r7, #4]
 801266a:	4013      	ands	r3, r2
 801266c:	2b00      	cmp	r3, #0
 801266e:	f040 8093 	bne.w	8012798 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8012672:	687b      	ldr	r3, [r7, #4]
 8012674:	2b00      	cmp	r3, #0
 8012676:	d01d      	beq.n	80126b4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8012678:	2208      	movs	r2, #8
 801267a:	687b      	ldr	r3, [r7, #4]
 801267c:	4413      	add	r3, r2
 801267e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	f003 0307 	and.w	r3, r3, #7
 8012686:	2b00      	cmp	r3, #0
 8012688:	d014      	beq.n	80126b4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801268a:	687b      	ldr	r3, [r7, #4]
 801268c:	f023 0307 	bic.w	r3, r3, #7
 8012690:	3308      	adds	r3, #8
 8012692:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012694:	687b      	ldr	r3, [r7, #4]
 8012696:	f003 0307 	and.w	r3, r3, #7
 801269a:	2b00      	cmp	r3, #0
 801269c:	d00a      	beq.n	80126b4 <pvPortMalloc+0x6c>
	__asm volatile
 801269e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126a2:	f383 8811 	msr	BASEPRI, r3
 80126a6:	f3bf 8f6f 	isb	sy
 80126aa:	f3bf 8f4f 	dsb	sy
 80126ae:	617b      	str	r3, [r7, #20]
}
 80126b0:	bf00      	nop
 80126b2:	e7fe      	b.n	80126b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80126b4:	687b      	ldr	r3, [r7, #4]
 80126b6:	2b00      	cmp	r3, #0
 80126b8:	d06e      	beq.n	8012798 <pvPortMalloc+0x150>
 80126ba:	4b45      	ldr	r3, [pc, #276]	; (80127d0 <pvPortMalloc+0x188>)
 80126bc:	681b      	ldr	r3, [r3, #0]
 80126be:	687a      	ldr	r2, [r7, #4]
 80126c0:	429a      	cmp	r2, r3
 80126c2:	d869      	bhi.n	8012798 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80126c4:	4b43      	ldr	r3, [pc, #268]	; (80127d4 <pvPortMalloc+0x18c>)
 80126c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80126c8:	4b42      	ldr	r3, [pc, #264]	; (80127d4 <pvPortMalloc+0x18c>)
 80126ca:	681b      	ldr	r3, [r3, #0]
 80126cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80126ce:	e004      	b.n	80126da <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80126d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80126d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126d6:	681b      	ldr	r3, [r3, #0]
 80126d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80126da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126dc:	685b      	ldr	r3, [r3, #4]
 80126de:	687a      	ldr	r2, [r7, #4]
 80126e0:	429a      	cmp	r2, r3
 80126e2:	d903      	bls.n	80126ec <pvPortMalloc+0xa4>
 80126e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126e6:	681b      	ldr	r3, [r3, #0]
 80126e8:	2b00      	cmp	r3, #0
 80126ea:	d1f1      	bne.n	80126d0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80126ec:	4b36      	ldr	r3, [pc, #216]	; (80127c8 <pvPortMalloc+0x180>)
 80126ee:	681b      	ldr	r3, [r3, #0]
 80126f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80126f2:	429a      	cmp	r2, r3
 80126f4:	d050      	beq.n	8012798 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80126f6:	6a3b      	ldr	r3, [r7, #32]
 80126f8:	681b      	ldr	r3, [r3, #0]
 80126fa:	2208      	movs	r2, #8
 80126fc:	4413      	add	r3, r2
 80126fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8012700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012702:	681a      	ldr	r2, [r3, #0]
 8012704:	6a3b      	ldr	r3, [r7, #32]
 8012706:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8012708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801270a:	685a      	ldr	r2, [r3, #4]
 801270c:	687b      	ldr	r3, [r7, #4]
 801270e:	1ad2      	subs	r2, r2, r3
 8012710:	2308      	movs	r3, #8
 8012712:	005b      	lsls	r3, r3, #1
 8012714:	429a      	cmp	r2, r3
 8012716:	d91f      	bls.n	8012758 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8012718:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801271a:	687b      	ldr	r3, [r7, #4]
 801271c:	4413      	add	r3, r2
 801271e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012720:	69bb      	ldr	r3, [r7, #24]
 8012722:	f003 0307 	and.w	r3, r3, #7
 8012726:	2b00      	cmp	r3, #0
 8012728:	d00a      	beq.n	8012740 <pvPortMalloc+0xf8>
	__asm volatile
 801272a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801272e:	f383 8811 	msr	BASEPRI, r3
 8012732:	f3bf 8f6f 	isb	sy
 8012736:	f3bf 8f4f 	dsb	sy
 801273a:	613b      	str	r3, [r7, #16]
}
 801273c:	bf00      	nop
 801273e:	e7fe      	b.n	801273e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8012740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012742:	685a      	ldr	r2, [r3, #4]
 8012744:	687b      	ldr	r3, [r7, #4]
 8012746:	1ad2      	subs	r2, r2, r3
 8012748:	69bb      	ldr	r3, [r7, #24]
 801274a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801274c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801274e:	687a      	ldr	r2, [r7, #4]
 8012750:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8012752:	69b8      	ldr	r0, [r7, #24]
 8012754:	f000 f908 	bl	8012968 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8012758:	4b1d      	ldr	r3, [pc, #116]	; (80127d0 <pvPortMalloc+0x188>)
 801275a:	681a      	ldr	r2, [r3, #0]
 801275c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801275e:	685b      	ldr	r3, [r3, #4]
 8012760:	1ad3      	subs	r3, r2, r3
 8012762:	4a1b      	ldr	r2, [pc, #108]	; (80127d0 <pvPortMalloc+0x188>)
 8012764:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8012766:	4b1a      	ldr	r3, [pc, #104]	; (80127d0 <pvPortMalloc+0x188>)
 8012768:	681a      	ldr	r2, [r3, #0]
 801276a:	4b1b      	ldr	r3, [pc, #108]	; (80127d8 <pvPortMalloc+0x190>)
 801276c:	681b      	ldr	r3, [r3, #0]
 801276e:	429a      	cmp	r2, r3
 8012770:	d203      	bcs.n	801277a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8012772:	4b17      	ldr	r3, [pc, #92]	; (80127d0 <pvPortMalloc+0x188>)
 8012774:	681b      	ldr	r3, [r3, #0]
 8012776:	4a18      	ldr	r2, [pc, #96]	; (80127d8 <pvPortMalloc+0x190>)
 8012778:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801277a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801277c:	685a      	ldr	r2, [r3, #4]
 801277e:	4b13      	ldr	r3, [pc, #76]	; (80127cc <pvPortMalloc+0x184>)
 8012780:	681b      	ldr	r3, [r3, #0]
 8012782:	431a      	orrs	r2, r3
 8012784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012786:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8012788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801278a:	2200      	movs	r2, #0
 801278c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801278e:	4b13      	ldr	r3, [pc, #76]	; (80127dc <pvPortMalloc+0x194>)
 8012790:	681b      	ldr	r3, [r3, #0]
 8012792:	3301      	adds	r3, #1
 8012794:	4a11      	ldr	r2, [pc, #68]	; (80127dc <pvPortMalloc+0x194>)
 8012796:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8012798:	f7fe fcfa 	bl	8011190 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801279c:	69fb      	ldr	r3, [r7, #28]
 801279e:	f003 0307 	and.w	r3, r3, #7
 80127a2:	2b00      	cmp	r3, #0
 80127a4:	d00a      	beq.n	80127bc <pvPortMalloc+0x174>
	__asm volatile
 80127a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80127aa:	f383 8811 	msr	BASEPRI, r3
 80127ae:	f3bf 8f6f 	isb	sy
 80127b2:	f3bf 8f4f 	dsb	sy
 80127b6:	60fb      	str	r3, [r7, #12]
}
 80127b8:	bf00      	nop
 80127ba:	e7fe      	b.n	80127ba <pvPortMalloc+0x172>
	return pvReturn;
 80127bc:	69fb      	ldr	r3, [r7, #28]
}
 80127be:	4618      	mov	r0, r3
 80127c0:	3728      	adds	r7, #40	; 0x28
 80127c2:	46bd      	mov	sp, r7
 80127c4:	bd80      	pop	{r7, pc}
 80127c6:	bf00      	nop
 80127c8:	20007c14 	.word	0x20007c14
 80127cc:	20007c28 	.word	0x20007c28
 80127d0:	20007c18 	.word	0x20007c18
 80127d4:	20007c0c 	.word	0x20007c0c
 80127d8:	20007c1c 	.word	0x20007c1c
 80127dc:	20007c20 	.word	0x20007c20

080127e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80127e0:	b580      	push	{r7, lr}
 80127e2:	b086      	sub	sp, #24
 80127e4:	af00      	add	r7, sp, #0
 80127e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80127e8:	687b      	ldr	r3, [r7, #4]
 80127ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80127ec:	687b      	ldr	r3, [r7, #4]
 80127ee:	2b00      	cmp	r3, #0
 80127f0:	d04d      	beq.n	801288e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80127f2:	2308      	movs	r3, #8
 80127f4:	425b      	negs	r3, r3
 80127f6:	697a      	ldr	r2, [r7, #20]
 80127f8:	4413      	add	r3, r2
 80127fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80127fc:	697b      	ldr	r3, [r7, #20]
 80127fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8012800:	693b      	ldr	r3, [r7, #16]
 8012802:	685a      	ldr	r2, [r3, #4]
 8012804:	4b24      	ldr	r3, [pc, #144]	; (8012898 <vPortFree+0xb8>)
 8012806:	681b      	ldr	r3, [r3, #0]
 8012808:	4013      	ands	r3, r2
 801280a:	2b00      	cmp	r3, #0
 801280c:	d10a      	bne.n	8012824 <vPortFree+0x44>
	__asm volatile
 801280e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012812:	f383 8811 	msr	BASEPRI, r3
 8012816:	f3bf 8f6f 	isb	sy
 801281a:	f3bf 8f4f 	dsb	sy
 801281e:	60fb      	str	r3, [r7, #12]
}
 8012820:	bf00      	nop
 8012822:	e7fe      	b.n	8012822 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8012824:	693b      	ldr	r3, [r7, #16]
 8012826:	681b      	ldr	r3, [r3, #0]
 8012828:	2b00      	cmp	r3, #0
 801282a:	d00a      	beq.n	8012842 <vPortFree+0x62>
	__asm volatile
 801282c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012830:	f383 8811 	msr	BASEPRI, r3
 8012834:	f3bf 8f6f 	isb	sy
 8012838:	f3bf 8f4f 	dsb	sy
 801283c:	60bb      	str	r3, [r7, #8]
}
 801283e:	bf00      	nop
 8012840:	e7fe      	b.n	8012840 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8012842:	693b      	ldr	r3, [r7, #16]
 8012844:	685a      	ldr	r2, [r3, #4]
 8012846:	4b14      	ldr	r3, [pc, #80]	; (8012898 <vPortFree+0xb8>)
 8012848:	681b      	ldr	r3, [r3, #0]
 801284a:	4013      	ands	r3, r2
 801284c:	2b00      	cmp	r3, #0
 801284e:	d01e      	beq.n	801288e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8012850:	693b      	ldr	r3, [r7, #16]
 8012852:	681b      	ldr	r3, [r3, #0]
 8012854:	2b00      	cmp	r3, #0
 8012856:	d11a      	bne.n	801288e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8012858:	693b      	ldr	r3, [r7, #16]
 801285a:	685a      	ldr	r2, [r3, #4]
 801285c:	4b0e      	ldr	r3, [pc, #56]	; (8012898 <vPortFree+0xb8>)
 801285e:	681b      	ldr	r3, [r3, #0]
 8012860:	43db      	mvns	r3, r3
 8012862:	401a      	ands	r2, r3
 8012864:	693b      	ldr	r3, [r7, #16]
 8012866:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8012868:	f7fe fc84 	bl	8011174 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801286c:	693b      	ldr	r3, [r7, #16]
 801286e:	685a      	ldr	r2, [r3, #4]
 8012870:	4b0a      	ldr	r3, [pc, #40]	; (801289c <vPortFree+0xbc>)
 8012872:	681b      	ldr	r3, [r3, #0]
 8012874:	4413      	add	r3, r2
 8012876:	4a09      	ldr	r2, [pc, #36]	; (801289c <vPortFree+0xbc>)
 8012878:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801287a:	6938      	ldr	r0, [r7, #16]
 801287c:	f000 f874 	bl	8012968 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8012880:	4b07      	ldr	r3, [pc, #28]	; (80128a0 <vPortFree+0xc0>)
 8012882:	681b      	ldr	r3, [r3, #0]
 8012884:	3301      	adds	r3, #1
 8012886:	4a06      	ldr	r2, [pc, #24]	; (80128a0 <vPortFree+0xc0>)
 8012888:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801288a:	f7fe fc81 	bl	8011190 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801288e:	bf00      	nop
 8012890:	3718      	adds	r7, #24
 8012892:	46bd      	mov	sp, r7
 8012894:	bd80      	pop	{r7, pc}
 8012896:	bf00      	nop
 8012898:	20007c28 	.word	0x20007c28
 801289c:	20007c18 	.word	0x20007c18
 80128a0:	20007c24 	.word	0x20007c24

080128a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80128a4:	b480      	push	{r7}
 80128a6:	b085      	sub	sp, #20
 80128a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80128aa:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 80128ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80128b0:	4b27      	ldr	r3, [pc, #156]	; (8012950 <prvHeapInit+0xac>)
 80128b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80128b4:	68fb      	ldr	r3, [r7, #12]
 80128b6:	f003 0307 	and.w	r3, r3, #7
 80128ba:	2b00      	cmp	r3, #0
 80128bc:	d00c      	beq.n	80128d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80128be:	68fb      	ldr	r3, [r7, #12]
 80128c0:	3307      	adds	r3, #7
 80128c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80128c4:	68fb      	ldr	r3, [r7, #12]
 80128c6:	f023 0307 	bic.w	r3, r3, #7
 80128ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80128cc:	68ba      	ldr	r2, [r7, #8]
 80128ce:	68fb      	ldr	r3, [r7, #12]
 80128d0:	1ad3      	subs	r3, r2, r3
 80128d2:	4a1f      	ldr	r2, [pc, #124]	; (8012950 <prvHeapInit+0xac>)
 80128d4:	4413      	add	r3, r2
 80128d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80128d8:	68fb      	ldr	r3, [r7, #12]
 80128da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80128dc:	4a1d      	ldr	r2, [pc, #116]	; (8012954 <prvHeapInit+0xb0>)
 80128de:	687b      	ldr	r3, [r7, #4]
 80128e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80128e2:	4b1c      	ldr	r3, [pc, #112]	; (8012954 <prvHeapInit+0xb0>)
 80128e4:	2200      	movs	r2, #0
 80128e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80128e8:	687b      	ldr	r3, [r7, #4]
 80128ea:	68ba      	ldr	r2, [r7, #8]
 80128ec:	4413      	add	r3, r2
 80128ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80128f0:	2208      	movs	r2, #8
 80128f2:	68fb      	ldr	r3, [r7, #12]
 80128f4:	1a9b      	subs	r3, r3, r2
 80128f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80128f8:	68fb      	ldr	r3, [r7, #12]
 80128fa:	f023 0307 	bic.w	r3, r3, #7
 80128fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8012900:	68fb      	ldr	r3, [r7, #12]
 8012902:	4a15      	ldr	r2, [pc, #84]	; (8012958 <prvHeapInit+0xb4>)
 8012904:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8012906:	4b14      	ldr	r3, [pc, #80]	; (8012958 <prvHeapInit+0xb4>)
 8012908:	681b      	ldr	r3, [r3, #0]
 801290a:	2200      	movs	r2, #0
 801290c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801290e:	4b12      	ldr	r3, [pc, #72]	; (8012958 <prvHeapInit+0xb4>)
 8012910:	681b      	ldr	r3, [r3, #0]
 8012912:	2200      	movs	r2, #0
 8012914:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8012916:	687b      	ldr	r3, [r7, #4]
 8012918:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801291a:	683b      	ldr	r3, [r7, #0]
 801291c:	68fa      	ldr	r2, [r7, #12]
 801291e:	1ad2      	subs	r2, r2, r3
 8012920:	683b      	ldr	r3, [r7, #0]
 8012922:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8012924:	4b0c      	ldr	r3, [pc, #48]	; (8012958 <prvHeapInit+0xb4>)
 8012926:	681a      	ldr	r2, [r3, #0]
 8012928:	683b      	ldr	r3, [r7, #0]
 801292a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801292c:	683b      	ldr	r3, [r7, #0]
 801292e:	685b      	ldr	r3, [r3, #4]
 8012930:	4a0a      	ldr	r2, [pc, #40]	; (801295c <prvHeapInit+0xb8>)
 8012932:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012934:	683b      	ldr	r3, [r7, #0]
 8012936:	685b      	ldr	r3, [r3, #4]
 8012938:	4a09      	ldr	r2, [pc, #36]	; (8012960 <prvHeapInit+0xbc>)
 801293a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801293c:	4b09      	ldr	r3, [pc, #36]	; (8012964 <prvHeapInit+0xc0>)
 801293e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8012942:	601a      	str	r2, [r3, #0]
}
 8012944:	bf00      	nop
 8012946:	3714      	adds	r7, #20
 8012948:	46bd      	mov	sp, r7
 801294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801294e:	4770      	bx	lr
 8012950:	20004d2c 	.word	0x20004d2c
 8012954:	20007c0c 	.word	0x20007c0c
 8012958:	20007c14 	.word	0x20007c14
 801295c:	20007c1c 	.word	0x20007c1c
 8012960:	20007c18 	.word	0x20007c18
 8012964:	20007c28 	.word	0x20007c28

08012968 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8012968:	b480      	push	{r7}
 801296a:	b085      	sub	sp, #20
 801296c:	af00      	add	r7, sp, #0
 801296e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8012970:	4b28      	ldr	r3, [pc, #160]	; (8012a14 <prvInsertBlockIntoFreeList+0xac>)
 8012972:	60fb      	str	r3, [r7, #12]
 8012974:	e002      	b.n	801297c <prvInsertBlockIntoFreeList+0x14>
 8012976:	68fb      	ldr	r3, [r7, #12]
 8012978:	681b      	ldr	r3, [r3, #0]
 801297a:	60fb      	str	r3, [r7, #12]
 801297c:	68fb      	ldr	r3, [r7, #12]
 801297e:	681b      	ldr	r3, [r3, #0]
 8012980:	687a      	ldr	r2, [r7, #4]
 8012982:	429a      	cmp	r2, r3
 8012984:	d8f7      	bhi.n	8012976 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8012986:	68fb      	ldr	r3, [r7, #12]
 8012988:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801298a:	68fb      	ldr	r3, [r7, #12]
 801298c:	685b      	ldr	r3, [r3, #4]
 801298e:	68ba      	ldr	r2, [r7, #8]
 8012990:	4413      	add	r3, r2
 8012992:	687a      	ldr	r2, [r7, #4]
 8012994:	429a      	cmp	r2, r3
 8012996:	d108      	bne.n	80129aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8012998:	68fb      	ldr	r3, [r7, #12]
 801299a:	685a      	ldr	r2, [r3, #4]
 801299c:	687b      	ldr	r3, [r7, #4]
 801299e:	685b      	ldr	r3, [r3, #4]
 80129a0:	441a      	add	r2, r3
 80129a2:	68fb      	ldr	r3, [r7, #12]
 80129a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80129a6:	68fb      	ldr	r3, [r7, #12]
 80129a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80129aa:	687b      	ldr	r3, [r7, #4]
 80129ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80129ae:	687b      	ldr	r3, [r7, #4]
 80129b0:	685b      	ldr	r3, [r3, #4]
 80129b2:	68ba      	ldr	r2, [r7, #8]
 80129b4:	441a      	add	r2, r3
 80129b6:	68fb      	ldr	r3, [r7, #12]
 80129b8:	681b      	ldr	r3, [r3, #0]
 80129ba:	429a      	cmp	r2, r3
 80129bc:	d118      	bne.n	80129f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80129be:	68fb      	ldr	r3, [r7, #12]
 80129c0:	681a      	ldr	r2, [r3, #0]
 80129c2:	4b15      	ldr	r3, [pc, #84]	; (8012a18 <prvInsertBlockIntoFreeList+0xb0>)
 80129c4:	681b      	ldr	r3, [r3, #0]
 80129c6:	429a      	cmp	r2, r3
 80129c8:	d00d      	beq.n	80129e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	685a      	ldr	r2, [r3, #4]
 80129ce:	68fb      	ldr	r3, [r7, #12]
 80129d0:	681b      	ldr	r3, [r3, #0]
 80129d2:	685b      	ldr	r3, [r3, #4]
 80129d4:	441a      	add	r2, r3
 80129d6:	687b      	ldr	r3, [r7, #4]
 80129d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80129da:	68fb      	ldr	r3, [r7, #12]
 80129dc:	681b      	ldr	r3, [r3, #0]
 80129de:	681a      	ldr	r2, [r3, #0]
 80129e0:	687b      	ldr	r3, [r7, #4]
 80129e2:	601a      	str	r2, [r3, #0]
 80129e4:	e008      	b.n	80129f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80129e6:	4b0c      	ldr	r3, [pc, #48]	; (8012a18 <prvInsertBlockIntoFreeList+0xb0>)
 80129e8:	681a      	ldr	r2, [r3, #0]
 80129ea:	687b      	ldr	r3, [r7, #4]
 80129ec:	601a      	str	r2, [r3, #0]
 80129ee:	e003      	b.n	80129f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80129f0:	68fb      	ldr	r3, [r7, #12]
 80129f2:	681a      	ldr	r2, [r3, #0]
 80129f4:	687b      	ldr	r3, [r7, #4]
 80129f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80129f8:	68fa      	ldr	r2, [r7, #12]
 80129fa:	687b      	ldr	r3, [r7, #4]
 80129fc:	429a      	cmp	r2, r3
 80129fe:	d002      	beq.n	8012a06 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8012a00:	68fb      	ldr	r3, [r7, #12]
 8012a02:	687a      	ldr	r2, [r7, #4]
 8012a04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012a06:	bf00      	nop
 8012a08:	3714      	adds	r7, #20
 8012a0a:	46bd      	mov	sp, r7
 8012a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a10:	4770      	bx	lr
 8012a12:	bf00      	nop
 8012a14:	20007c0c 	.word	0x20007c0c
 8012a18:	20007c14 	.word	0x20007c14

08012a1c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8012a1c:	b580      	push	{r7, lr}
 8012a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8012a20:	2200      	movs	r2, #0
 8012a22:	4912      	ldr	r1, [pc, #72]	; (8012a6c <MX_USB_DEVICE_Init+0x50>)
 8012a24:	4812      	ldr	r0, [pc, #72]	; (8012a70 <MX_USB_DEVICE_Init+0x54>)
 8012a26:	f7fc f8a5 	bl	800eb74 <USBD_Init>
 8012a2a:	4603      	mov	r3, r0
 8012a2c:	2b00      	cmp	r3, #0
 8012a2e:	d001      	beq.n	8012a34 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8012a30:	f7f1 f97c 	bl	8003d2c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8012a34:	490f      	ldr	r1, [pc, #60]	; (8012a74 <MX_USB_DEVICE_Init+0x58>)
 8012a36:	480e      	ldr	r0, [pc, #56]	; (8012a70 <MX_USB_DEVICE_Init+0x54>)
 8012a38:	f7fc f8cc 	bl	800ebd4 <USBD_RegisterClass>
 8012a3c:	4603      	mov	r3, r0
 8012a3e:	2b00      	cmp	r3, #0
 8012a40:	d001      	beq.n	8012a46 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8012a42:	f7f1 f973 	bl	8003d2c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8012a46:	490c      	ldr	r1, [pc, #48]	; (8012a78 <MX_USB_DEVICE_Init+0x5c>)
 8012a48:	4809      	ldr	r0, [pc, #36]	; (8012a70 <MX_USB_DEVICE_Init+0x54>)
 8012a4a:	f7fb ffed 	bl	800ea28 <USBD_CDC_RegisterInterface>
 8012a4e:	4603      	mov	r3, r0
 8012a50:	2b00      	cmp	r3, #0
 8012a52:	d001      	beq.n	8012a58 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8012a54:	f7f1 f96a 	bl	8003d2c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8012a58:	4805      	ldr	r0, [pc, #20]	; (8012a70 <MX_USB_DEVICE_Init+0x54>)
 8012a5a:	f7fc f8e2 	bl	800ec22 <USBD_Start>
 8012a5e:	4603      	mov	r3, r0
 8012a60:	2b00      	cmp	r3, #0
 8012a62:	d001      	beq.n	8012a68 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8012a64:	f7f1 f962 	bl	8003d2c <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8012a68:	bf00      	nop
 8012a6a:	bd80      	pop	{r7, pc}
 8012a6c:	20000358 	.word	0x20000358
 8012a70:	20007c2c 	.word	0x20007c2c
 8012a74:	2000023c 	.word	0x2000023c
 8012a78:	20000344 	.word	0x20000344

08012a7c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8012a7c:	b580      	push	{r7, lr}
 8012a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8012a80:	2200      	movs	r2, #0
 8012a82:	4905      	ldr	r1, [pc, #20]	; (8012a98 <CDC_Init_FS+0x1c>)
 8012a84:	4805      	ldr	r0, [pc, #20]	; (8012a9c <CDC_Init_FS+0x20>)
 8012a86:	f7fb ffe4 	bl	800ea52 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8012a8a:	4905      	ldr	r1, [pc, #20]	; (8012aa0 <CDC_Init_FS+0x24>)
 8012a8c:	4803      	ldr	r0, [pc, #12]	; (8012a9c <CDC_Init_FS+0x20>)
 8012a8e:	f7fb fffe 	bl	800ea8e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8012a92:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8012a94:	4618      	mov	r0, r3
 8012a96:	bd80      	pop	{r7, pc}
 8012a98:	200086fc 	.word	0x200086fc
 8012a9c:	20007c2c 	.word	0x20007c2c
 8012aa0:	20007efc 	.word	0x20007efc

08012aa4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8012aa4:	b480      	push	{r7}
 8012aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8012aa8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8012aaa:	4618      	mov	r0, r3
 8012aac:	46bd      	mov	sp, r7
 8012aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ab2:	4770      	bx	lr

08012ab4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8012ab4:	b480      	push	{r7}
 8012ab6:	b083      	sub	sp, #12
 8012ab8:	af00      	add	r7, sp, #0
 8012aba:	4603      	mov	r3, r0
 8012abc:	6039      	str	r1, [r7, #0]
 8012abe:	71fb      	strb	r3, [r7, #7]
 8012ac0:	4613      	mov	r3, r2
 8012ac2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8012ac4:	79fb      	ldrb	r3, [r7, #7]
 8012ac6:	2b23      	cmp	r3, #35	; 0x23
 8012ac8:	d84a      	bhi.n	8012b60 <CDC_Control_FS+0xac>
 8012aca:	a201      	add	r2, pc, #4	; (adr r2, 8012ad0 <CDC_Control_FS+0x1c>)
 8012acc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012ad0:	08012b61 	.word	0x08012b61
 8012ad4:	08012b61 	.word	0x08012b61
 8012ad8:	08012b61 	.word	0x08012b61
 8012adc:	08012b61 	.word	0x08012b61
 8012ae0:	08012b61 	.word	0x08012b61
 8012ae4:	08012b61 	.word	0x08012b61
 8012ae8:	08012b61 	.word	0x08012b61
 8012aec:	08012b61 	.word	0x08012b61
 8012af0:	08012b61 	.word	0x08012b61
 8012af4:	08012b61 	.word	0x08012b61
 8012af8:	08012b61 	.word	0x08012b61
 8012afc:	08012b61 	.word	0x08012b61
 8012b00:	08012b61 	.word	0x08012b61
 8012b04:	08012b61 	.word	0x08012b61
 8012b08:	08012b61 	.word	0x08012b61
 8012b0c:	08012b61 	.word	0x08012b61
 8012b10:	08012b61 	.word	0x08012b61
 8012b14:	08012b61 	.word	0x08012b61
 8012b18:	08012b61 	.word	0x08012b61
 8012b1c:	08012b61 	.word	0x08012b61
 8012b20:	08012b61 	.word	0x08012b61
 8012b24:	08012b61 	.word	0x08012b61
 8012b28:	08012b61 	.word	0x08012b61
 8012b2c:	08012b61 	.word	0x08012b61
 8012b30:	08012b61 	.word	0x08012b61
 8012b34:	08012b61 	.word	0x08012b61
 8012b38:	08012b61 	.word	0x08012b61
 8012b3c:	08012b61 	.word	0x08012b61
 8012b40:	08012b61 	.word	0x08012b61
 8012b44:	08012b61 	.word	0x08012b61
 8012b48:	08012b61 	.word	0x08012b61
 8012b4c:	08012b61 	.word	0x08012b61
 8012b50:	08012b61 	.word	0x08012b61
 8012b54:	08012b61 	.word	0x08012b61
 8012b58:	08012b61 	.word	0x08012b61
 8012b5c:	08012b61 	.word	0x08012b61
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8012b60:	bf00      	nop
  }

  return (USBD_OK);
 8012b62:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8012b64:	4618      	mov	r0, r3
 8012b66:	370c      	adds	r7, #12
 8012b68:	46bd      	mov	sp, r7
 8012b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b6e:	4770      	bx	lr

08012b70 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8012b70:	b580      	push	{r7, lr}
 8012b72:	b082      	sub	sp, #8
 8012b74:	af00      	add	r7, sp, #0
 8012b76:	6078      	str	r0, [r7, #4]
 8012b78:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  WriteUSBDataToRingBuffer(Buf, *Len);
 8012b7a:	683b      	ldr	r3, [r7, #0]
 8012b7c:	681b      	ldr	r3, [r3, #0]
 8012b7e:	4619      	mov	r1, r3
 8012b80:	6878      	ldr	r0, [r7, #4]
 8012b82:	f000 f847 	bl	8012c14 <WriteUSBDataToRingBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8012b86:	6879      	ldr	r1, [r7, #4]
 8012b88:	4805      	ldr	r0, [pc, #20]	; (8012ba0 <CDC_Receive_FS+0x30>)
 8012b8a:	f7fb ff80 	bl	800ea8e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8012b8e:	4804      	ldr	r0, [pc, #16]	; (8012ba0 <CDC_Receive_FS+0x30>)
 8012b90:	f7fb ffc6 	bl	800eb20 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8012b94:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8012b96:	4618      	mov	r0, r3
 8012b98:	3708      	adds	r7, #8
 8012b9a:	46bd      	mov	sp, r7
 8012b9c:	bd80      	pop	{r7, pc}
 8012b9e:	bf00      	nop
 8012ba0:	20007c2c 	.word	0x20007c2c

08012ba4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8012ba4:	b580      	push	{r7, lr}
 8012ba6:	b084      	sub	sp, #16
 8012ba8:	af00      	add	r7, sp, #0
 8012baa:	6078      	str	r0, [r7, #4]
 8012bac:	460b      	mov	r3, r1
 8012bae:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8012bb0:	2300      	movs	r3, #0
 8012bb2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8012bb4:	4b0d      	ldr	r3, [pc, #52]	; (8012bec <CDC_Transmit_FS+0x48>)
 8012bb6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012bba:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8012bbc:	68bb      	ldr	r3, [r7, #8]
 8012bbe:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8012bc2:	2b00      	cmp	r3, #0
 8012bc4:	d001      	beq.n	8012bca <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8012bc6:	2301      	movs	r3, #1
 8012bc8:	e00b      	b.n	8012be2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8012bca:	887b      	ldrh	r3, [r7, #2]
 8012bcc:	461a      	mov	r2, r3
 8012bce:	6879      	ldr	r1, [r7, #4]
 8012bd0:	4806      	ldr	r0, [pc, #24]	; (8012bec <CDC_Transmit_FS+0x48>)
 8012bd2:	f7fb ff3e 	bl	800ea52 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8012bd6:	4805      	ldr	r0, [pc, #20]	; (8012bec <CDC_Transmit_FS+0x48>)
 8012bd8:	f7fb ff72 	bl	800eac0 <USBD_CDC_TransmitPacket>
 8012bdc:	4603      	mov	r3, r0
 8012bde:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8012be0:	7bfb      	ldrb	r3, [r7, #15]
}
 8012be2:	4618      	mov	r0, r3
 8012be4:	3710      	adds	r7, #16
 8012be6:	46bd      	mov	sp, r7
 8012be8:	bd80      	pop	{r7, pc}
 8012bea:	bf00      	nop
 8012bec:	20007c2c 	.word	0x20007c2c

08012bf0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8012bf0:	b480      	push	{r7}
 8012bf2:	b087      	sub	sp, #28
 8012bf4:	af00      	add	r7, sp, #0
 8012bf6:	60f8      	str	r0, [r7, #12]
 8012bf8:	60b9      	str	r1, [r7, #8]
 8012bfa:	4613      	mov	r3, r2
 8012bfc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8012bfe:	2300      	movs	r3, #0
 8012c00:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8012c02:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012c06:	4618      	mov	r0, r3
 8012c08:	371c      	adds	r7, #28
 8012c0a:	46bd      	mov	sp, r7
 8012c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c10:	4770      	bx	lr
	...

08012c14 <WriteUSBDataToRingBuffer>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void WriteUSBDataToRingBuffer(uint8_t *Buf, uint32_t Len) {
 8012c14:	b580      	push	{r7, lr}
 8012c16:	b084      	sub	sp, #16
 8012c18:	af00      	add	r7, sp, #0
 8012c1a:	6078      	str	r0, [r7, #4]
 8012c1c:	6039      	str	r1, [r7, #0]
    for(uint32_t i = 0; i < Len; i++) {
 8012c1e:	2300      	movs	r3, #0
 8012c20:	60fb      	str	r3, [r7, #12]
 8012c22:	e00a      	b.n	8012c3a <WriteUSBDataToRingBuffer+0x26>
        RB_Write(&USB_Receive_Buffer, Buf[i]);
 8012c24:	687a      	ldr	r2, [r7, #4]
 8012c26:	68fb      	ldr	r3, [r7, #12]
 8012c28:	4413      	add	r3, r2
 8012c2a:	781b      	ldrb	r3, [r3, #0]
 8012c2c:	4619      	mov	r1, r3
 8012c2e:	4807      	ldr	r0, [pc, #28]	; (8012c4c <WriteUSBDataToRingBuffer+0x38>)
 8012c30:	f7f1 f881 	bl	8003d36 <RB_Write>
    for(uint32_t i = 0; i < Len; i++) {
 8012c34:	68fb      	ldr	r3, [r7, #12]
 8012c36:	3301      	adds	r3, #1
 8012c38:	60fb      	str	r3, [r7, #12]
 8012c3a:	68fa      	ldr	r2, [r7, #12]
 8012c3c:	683b      	ldr	r3, [r7, #0]
 8012c3e:	429a      	cmp	r2, r3
 8012c40:	d3f0      	bcc.n	8012c24 <WriteUSBDataToRingBuffer+0x10>
    }
}
 8012c42:	bf00      	nop
 8012c44:	bf00      	nop
 8012c46:	3710      	adds	r7, #16
 8012c48:	46bd      	mov	sp, r7
 8012c4a:	bd80      	pop	{r7, pc}
 8012c4c:	200005a4 	.word	0x200005a4

08012c50 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012c50:	b480      	push	{r7}
 8012c52:	b083      	sub	sp, #12
 8012c54:	af00      	add	r7, sp, #0
 8012c56:	4603      	mov	r3, r0
 8012c58:	6039      	str	r1, [r7, #0]
 8012c5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8012c5c:	683b      	ldr	r3, [r7, #0]
 8012c5e:	2212      	movs	r2, #18
 8012c60:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8012c62:	4b03      	ldr	r3, [pc, #12]	; (8012c70 <USBD_FS_DeviceDescriptor+0x20>)
}
 8012c64:	4618      	mov	r0, r3
 8012c66:	370c      	adds	r7, #12
 8012c68:	46bd      	mov	sp, r7
 8012c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c6e:	4770      	bx	lr
 8012c70:	20000378 	.word	0x20000378

08012c74 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012c74:	b480      	push	{r7}
 8012c76:	b083      	sub	sp, #12
 8012c78:	af00      	add	r7, sp, #0
 8012c7a:	4603      	mov	r3, r0
 8012c7c:	6039      	str	r1, [r7, #0]
 8012c7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8012c80:	683b      	ldr	r3, [r7, #0]
 8012c82:	2204      	movs	r2, #4
 8012c84:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8012c86:	4b03      	ldr	r3, [pc, #12]	; (8012c94 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8012c88:	4618      	mov	r0, r3
 8012c8a:	370c      	adds	r7, #12
 8012c8c:	46bd      	mov	sp, r7
 8012c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c92:	4770      	bx	lr
 8012c94:	20000398 	.word	0x20000398

08012c98 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012c98:	b580      	push	{r7, lr}
 8012c9a:	b082      	sub	sp, #8
 8012c9c:	af00      	add	r7, sp, #0
 8012c9e:	4603      	mov	r3, r0
 8012ca0:	6039      	str	r1, [r7, #0]
 8012ca2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012ca4:	79fb      	ldrb	r3, [r7, #7]
 8012ca6:	2b00      	cmp	r3, #0
 8012ca8:	d105      	bne.n	8012cb6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8012caa:	683a      	ldr	r2, [r7, #0]
 8012cac:	4907      	ldr	r1, [pc, #28]	; (8012ccc <USBD_FS_ProductStrDescriptor+0x34>)
 8012cae:	4808      	ldr	r0, [pc, #32]	; (8012cd0 <USBD_FS_ProductStrDescriptor+0x38>)
 8012cb0:	f7fd f813 	bl	800fcda <USBD_GetString>
 8012cb4:	e004      	b.n	8012cc0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8012cb6:	683a      	ldr	r2, [r7, #0]
 8012cb8:	4904      	ldr	r1, [pc, #16]	; (8012ccc <USBD_FS_ProductStrDescriptor+0x34>)
 8012cba:	4805      	ldr	r0, [pc, #20]	; (8012cd0 <USBD_FS_ProductStrDescriptor+0x38>)
 8012cbc:	f7fd f80d 	bl	800fcda <USBD_GetString>
  }
  return USBD_StrDesc;
 8012cc0:	4b02      	ldr	r3, [pc, #8]	; (8012ccc <USBD_FS_ProductStrDescriptor+0x34>)
}
 8012cc2:	4618      	mov	r0, r3
 8012cc4:	3708      	adds	r7, #8
 8012cc6:	46bd      	mov	sp, r7
 8012cc8:	bd80      	pop	{r7, pc}
 8012cca:	bf00      	nop
 8012ccc:	20008efc 	.word	0x20008efc
 8012cd0:	0801694c 	.word	0x0801694c

08012cd4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012cd4:	b580      	push	{r7, lr}
 8012cd6:	b082      	sub	sp, #8
 8012cd8:	af00      	add	r7, sp, #0
 8012cda:	4603      	mov	r3, r0
 8012cdc:	6039      	str	r1, [r7, #0]
 8012cde:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8012ce0:	683a      	ldr	r2, [r7, #0]
 8012ce2:	4904      	ldr	r1, [pc, #16]	; (8012cf4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8012ce4:	4804      	ldr	r0, [pc, #16]	; (8012cf8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8012ce6:	f7fc fff8 	bl	800fcda <USBD_GetString>
  return USBD_StrDesc;
 8012cea:	4b02      	ldr	r3, [pc, #8]	; (8012cf4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8012cec:	4618      	mov	r0, r3
 8012cee:	3708      	adds	r7, #8
 8012cf0:	46bd      	mov	sp, r7
 8012cf2:	bd80      	pop	{r7, pc}
 8012cf4:	20008efc 	.word	0x20008efc
 8012cf8:	08016964 	.word	0x08016964

08012cfc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012cfc:	b580      	push	{r7, lr}
 8012cfe:	b082      	sub	sp, #8
 8012d00:	af00      	add	r7, sp, #0
 8012d02:	4603      	mov	r3, r0
 8012d04:	6039      	str	r1, [r7, #0]
 8012d06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8012d08:	683b      	ldr	r3, [r7, #0]
 8012d0a:	221a      	movs	r2, #26
 8012d0c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8012d0e:	f000 f855 	bl	8012dbc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8012d12:	4b02      	ldr	r3, [pc, #8]	; (8012d1c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8012d14:	4618      	mov	r0, r3
 8012d16:	3708      	adds	r7, #8
 8012d18:	46bd      	mov	sp, r7
 8012d1a:	bd80      	pop	{r7, pc}
 8012d1c:	2000039c 	.word	0x2000039c

08012d20 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012d20:	b580      	push	{r7, lr}
 8012d22:	b082      	sub	sp, #8
 8012d24:	af00      	add	r7, sp, #0
 8012d26:	4603      	mov	r3, r0
 8012d28:	6039      	str	r1, [r7, #0]
 8012d2a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8012d2c:	79fb      	ldrb	r3, [r7, #7]
 8012d2e:	2b00      	cmp	r3, #0
 8012d30:	d105      	bne.n	8012d3e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8012d32:	683a      	ldr	r2, [r7, #0]
 8012d34:	4907      	ldr	r1, [pc, #28]	; (8012d54 <USBD_FS_ConfigStrDescriptor+0x34>)
 8012d36:	4808      	ldr	r0, [pc, #32]	; (8012d58 <USBD_FS_ConfigStrDescriptor+0x38>)
 8012d38:	f7fc ffcf 	bl	800fcda <USBD_GetString>
 8012d3c:	e004      	b.n	8012d48 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8012d3e:	683a      	ldr	r2, [r7, #0]
 8012d40:	4904      	ldr	r1, [pc, #16]	; (8012d54 <USBD_FS_ConfigStrDescriptor+0x34>)
 8012d42:	4805      	ldr	r0, [pc, #20]	; (8012d58 <USBD_FS_ConfigStrDescriptor+0x38>)
 8012d44:	f7fc ffc9 	bl	800fcda <USBD_GetString>
  }
  return USBD_StrDesc;
 8012d48:	4b02      	ldr	r3, [pc, #8]	; (8012d54 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8012d4a:	4618      	mov	r0, r3
 8012d4c:	3708      	adds	r7, #8
 8012d4e:	46bd      	mov	sp, r7
 8012d50:	bd80      	pop	{r7, pc}
 8012d52:	bf00      	nop
 8012d54:	20008efc 	.word	0x20008efc
 8012d58:	08016978 	.word	0x08016978

08012d5c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012d5c:	b580      	push	{r7, lr}
 8012d5e:	b082      	sub	sp, #8
 8012d60:	af00      	add	r7, sp, #0
 8012d62:	4603      	mov	r3, r0
 8012d64:	6039      	str	r1, [r7, #0]
 8012d66:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012d68:	79fb      	ldrb	r3, [r7, #7]
 8012d6a:	2b00      	cmp	r3, #0
 8012d6c:	d105      	bne.n	8012d7a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8012d6e:	683a      	ldr	r2, [r7, #0]
 8012d70:	4907      	ldr	r1, [pc, #28]	; (8012d90 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8012d72:	4808      	ldr	r0, [pc, #32]	; (8012d94 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8012d74:	f7fc ffb1 	bl	800fcda <USBD_GetString>
 8012d78:	e004      	b.n	8012d84 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8012d7a:	683a      	ldr	r2, [r7, #0]
 8012d7c:	4904      	ldr	r1, [pc, #16]	; (8012d90 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8012d7e:	4805      	ldr	r0, [pc, #20]	; (8012d94 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8012d80:	f7fc ffab 	bl	800fcda <USBD_GetString>
  }
  return USBD_StrDesc;
 8012d84:	4b02      	ldr	r3, [pc, #8]	; (8012d90 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8012d86:	4618      	mov	r0, r3
 8012d88:	3708      	adds	r7, #8
 8012d8a:	46bd      	mov	sp, r7
 8012d8c:	bd80      	pop	{r7, pc}
 8012d8e:	bf00      	nop
 8012d90:	20008efc 	.word	0x20008efc
 8012d94:	08016984 	.word	0x08016984

08012d98 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012d98:	b480      	push	{r7}
 8012d9a:	b083      	sub	sp, #12
 8012d9c:	af00      	add	r7, sp, #0
 8012d9e:	4603      	mov	r3, r0
 8012da0:	6039      	str	r1, [r7, #0]
 8012da2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8012da4:	683b      	ldr	r3, [r7, #0]
 8012da6:	220c      	movs	r2, #12
 8012da8:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8012daa:	4b03      	ldr	r3, [pc, #12]	; (8012db8 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8012dac:	4618      	mov	r0, r3
 8012dae:	370c      	adds	r7, #12
 8012db0:	46bd      	mov	sp, r7
 8012db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012db6:	4770      	bx	lr
 8012db8:	2000038c 	.word	0x2000038c

08012dbc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8012dbc:	b580      	push	{r7, lr}
 8012dbe:	b084      	sub	sp, #16
 8012dc0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8012dc2:	4b0f      	ldr	r3, [pc, #60]	; (8012e00 <Get_SerialNum+0x44>)
 8012dc4:	681b      	ldr	r3, [r3, #0]
 8012dc6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8012dc8:	4b0e      	ldr	r3, [pc, #56]	; (8012e04 <Get_SerialNum+0x48>)
 8012dca:	681b      	ldr	r3, [r3, #0]
 8012dcc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8012dce:	4b0e      	ldr	r3, [pc, #56]	; (8012e08 <Get_SerialNum+0x4c>)
 8012dd0:	681b      	ldr	r3, [r3, #0]
 8012dd2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8012dd4:	68fa      	ldr	r2, [r7, #12]
 8012dd6:	687b      	ldr	r3, [r7, #4]
 8012dd8:	4413      	add	r3, r2
 8012dda:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8012ddc:	68fb      	ldr	r3, [r7, #12]
 8012dde:	2b00      	cmp	r3, #0
 8012de0:	d009      	beq.n	8012df6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8012de2:	2208      	movs	r2, #8
 8012de4:	4909      	ldr	r1, [pc, #36]	; (8012e0c <Get_SerialNum+0x50>)
 8012de6:	68f8      	ldr	r0, [r7, #12]
 8012de8:	f000 f814 	bl	8012e14 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8012dec:	2204      	movs	r2, #4
 8012dee:	4908      	ldr	r1, [pc, #32]	; (8012e10 <Get_SerialNum+0x54>)
 8012df0:	68b8      	ldr	r0, [r7, #8]
 8012df2:	f000 f80f 	bl	8012e14 <IntToUnicode>
  }
}
 8012df6:	bf00      	nop
 8012df8:	3710      	adds	r7, #16
 8012dfa:	46bd      	mov	sp, r7
 8012dfc:	bd80      	pop	{r7, pc}
 8012dfe:	bf00      	nop
 8012e00:	1fff7590 	.word	0x1fff7590
 8012e04:	1fff7594 	.word	0x1fff7594
 8012e08:	1fff7598 	.word	0x1fff7598
 8012e0c:	2000039e 	.word	0x2000039e
 8012e10:	200003ae 	.word	0x200003ae

08012e14 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8012e14:	b480      	push	{r7}
 8012e16:	b087      	sub	sp, #28
 8012e18:	af00      	add	r7, sp, #0
 8012e1a:	60f8      	str	r0, [r7, #12]
 8012e1c:	60b9      	str	r1, [r7, #8]
 8012e1e:	4613      	mov	r3, r2
 8012e20:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8012e22:	2300      	movs	r3, #0
 8012e24:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8012e26:	2300      	movs	r3, #0
 8012e28:	75fb      	strb	r3, [r7, #23]
 8012e2a:	e027      	b.n	8012e7c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8012e2c:	68fb      	ldr	r3, [r7, #12]
 8012e2e:	0f1b      	lsrs	r3, r3, #28
 8012e30:	2b09      	cmp	r3, #9
 8012e32:	d80b      	bhi.n	8012e4c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8012e34:	68fb      	ldr	r3, [r7, #12]
 8012e36:	0f1b      	lsrs	r3, r3, #28
 8012e38:	b2da      	uxtb	r2, r3
 8012e3a:	7dfb      	ldrb	r3, [r7, #23]
 8012e3c:	005b      	lsls	r3, r3, #1
 8012e3e:	4619      	mov	r1, r3
 8012e40:	68bb      	ldr	r3, [r7, #8]
 8012e42:	440b      	add	r3, r1
 8012e44:	3230      	adds	r2, #48	; 0x30
 8012e46:	b2d2      	uxtb	r2, r2
 8012e48:	701a      	strb	r2, [r3, #0]
 8012e4a:	e00a      	b.n	8012e62 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8012e4c:	68fb      	ldr	r3, [r7, #12]
 8012e4e:	0f1b      	lsrs	r3, r3, #28
 8012e50:	b2da      	uxtb	r2, r3
 8012e52:	7dfb      	ldrb	r3, [r7, #23]
 8012e54:	005b      	lsls	r3, r3, #1
 8012e56:	4619      	mov	r1, r3
 8012e58:	68bb      	ldr	r3, [r7, #8]
 8012e5a:	440b      	add	r3, r1
 8012e5c:	3237      	adds	r2, #55	; 0x37
 8012e5e:	b2d2      	uxtb	r2, r2
 8012e60:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8012e62:	68fb      	ldr	r3, [r7, #12]
 8012e64:	011b      	lsls	r3, r3, #4
 8012e66:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8012e68:	7dfb      	ldrb	r3, [r7, #23]
 8012e6a:	005b      	lsls	r3, r3, #1
 8012e6c:	3301      	adds	r3, #1
 8012e6e:	68ba      	ldr	r2, [r7, #8]
 8012e70:	4413      	add	r3, r2
 8012e72:	2200      	movs	r2, #0
 8012e74:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8012e76:	7dfb      	ldrb	r3, [r7, #23]
 8012e78:	3301      	adds	r3, #1
 8012e7a:	75fb      	strb	r3, [r7, #23]
 8012e7c:	7dfa      	ldrb	r2, [r7, #23]
 8012e7e:	79fb      	ldrb	r3, [r7, #7]
 8012e80:	429a      	cmp	r2, r3
 8012e82:	d3d3      	bcc.n	8012e2c <IntToUnicode+0x18>
  }
}
 8012e84:	bf00      	nop
 8012e86:	bf00      	nop
 8012e88:	371c      	adds	r7, #28
 8012e8a:	46bd      	mov	sp, r7
 8012e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e90:	4770      	bx	lr
	...

08012e94 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8012e94:	b580      	push	{r7, lr}
 8012e96:	b0b0      	sub	sp, #192	; 0xc0
 8012e98:	af00      	add	r7, sp, #0
 8012e9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012e9c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8012ea0:	2200      	movs	r2, #0
 8012ea2:	601a      	str	r2, [r3, #0]
 8012ea4:	605a      	str	r2, [r3, #4]
 8012ea6:	609a      	str	r2, [r3, #8]
 8012ea8:	60da      	str	r2, [r3, #12]
 8012eaa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8012eac:	f107 0314 	add.w	r3, r7, #20
 8012eb0:	2298      	movs	r2, #152	; 0x98
 8012eb2:	2100      	movs	r1, #0
 8012eb4:	4618      	mov	r0, r3
 8012eb6:	f001 faf8 	bl	80144aa <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8012eba:	687b      	ldr	r3, [r7, #4]
 8012ebc:	681b      	ldr	r3, [r3, #0]
 8012ebe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8012ec2:	d163      	bne.n	8012f8c <HAL_PCD_MspInit+0xf8>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8012ec4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8012ec8:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8012eca:	2300      	movs	r3, #0
 8012ecc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8012ed0:	f107 0314 	add.w	r3, r7, #20
 8012ed4:	4618      	mov	r0, r3
 8012ed6:	f7f7 fcb9 	bl	800a84c <HAL_RCCEx_PeriphCLKConfig>
 8012eda:	4603      	mov	r3, r0
 8012edc:	2b00      	cmp	r3, #0
 8012ede:	d001      	beq.n	8012ee4 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8012ee0:	f7f0 ff24 	bl	8003d2c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8012ee4:	4b2b      	ldr	r3, [pc, #172]	; (8012f94 <HAL_PCD_MspInit+0x100>)
 8012ee6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012ee8:	4a2a      	ldr	r2, [pc, #168]	; (8012f94 <HAL_PCD_MspInit+0x100>)
 8012eea:	f043 0301 	orr.w	r3, r3, #1
 8012eee:	64d3      	str	r3, [r2, #76]	; 0x4c
 8012ef0:	4b28      	ldr	r3, [pc, #160]	; (8012f94 <HAL_PCD_MspInit+0x100>)
 8012ef2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012ef4:	f003 0301 	and.w	r3, r3, #1
 8012ef8:	613b      	str	r3, [r7, #16]
 8012efa:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8012efc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8012f00:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012f04:	2302      	movs	r3, #2
 8012f06:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012f0a:	2300      	movs	r3, #0
 8012f0c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012f10:	2303      	movs	r3, #3
 8012f12:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8012f16:	230a      	movs	r3, #10
 8012f18:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012f1c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8012f20:	4619      	mov	r1, r3
 8012f22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8012f26:	f7f5 f87b 	bl	8008020 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8012f2a:	4b1a      	ldr	r3, [pc, #104]	; (8012f94 <HAL_PCD_MspInit+0x100>)
 8012f2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012f2e:	4a19      	ldr	r2, [pc, #100]	; (8012f94 <HAL_PCD_MspInit+0x100>)
 8012f30:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8012f34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8012f36:	4b17      	ldr	r3, [pc, #92]	; (8012f94 <HAL_PCD_MspInit+0x100>)
 8012f38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012f3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8012f3e:	60fb      	str	r3, [r7, #12]
 8012f40:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8012f42:	4b14      	ldr	r3, [pc, #80]	; (8012f94 <HAL_PCD_MspInit+0x100>)
 8012f44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012f46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012f4a:	2b00      	cmp	r3, #0
 8012f4c:	d114      	bne.n	8012f78 <HAL_PCD_MspInit+0xe4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8012f4e:	4b11      	ldr	r3, [pc, #68]	; (8012f94 <HAL_PCD_MspInit+0x100>)
 8012f50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012f52:	4a10      	ldr	r2, [pc, #64]	; (8012f94 <HAL_PCD_MspInit+0x100>)
 8012f54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012f58:	6593      	str	r3, [r2, #88]	; 0x58
 8012f5a:	4b0e      	ldr	r3, [pc, #56]	; (8012f94 <HAL_PCD_MspInit+0x100>)
 8012f5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012f5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012f62:	60bb      	str	r3, [r7, #8]
 8012f64:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8012f66:	f7f6 fcb9 	bl	80098dc <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8012f6a:	4b0a      	ldr	r3, [pc, #40]	; (8012f94 <HAL_PCD_MspInit+0x100>)
 8012f6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012f6e:	4a09      	ldr	r2, [pc, #36]	; (8012f94 <HAL_PCD_MspInit+0x100>)
 8012f70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8012f74:	6593      	str	r3, [r2, #88]	; 0x58
 8012f76:	e001      	b.n	8012f7c <HAL_PCD_MspInit+0xe8>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8012f78:	f7f6 fcb0 	bl	80098dc <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8012f7c:	2200      	movs	r2, #0
 8012f7e:	2105      	movs	r1, #5
 8012f80:	2043      	movs	r0, #67	; 0x43
 8012f82:	f7f4 fdb1 	bl	8007ae8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8012f86:	2043      	movs	r0, #67	; 0x43
 8012f88:	f7f4 fdca 	bl	8007b20 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8012f8c:	bf00      	nop
 8012f8e:	37c0      	adds	r7, #192	; 0xc0
 8012f90:	46bd      	mov	sp, r7
 8012f92:	bd80      	pop	{r7, pc}
 8012f94:	40021000 	.word	0x40021000

08012f98 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012f98:	b580      	push	{r7, lr}
 8012f9a:	b082      	sub	sp, #8
 8012f9c:	af00      	add	r7, sp, #0
 8012f9e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8012fa0:	687b      	ldr	r3, [r7, #4]
 8012fa2:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8012fa6:	687b      	ldr	r3, [r7, #4]
 8012fa8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8012fac:	4619      	mov	r1, r3
 8012fae:	4610      	mov	r0, r2
 8012fb0:	f7fb fe82 	bl	800ecb8 <USBD_LL_SetupStage>
}
 8012fb4:	bf00      	nop
 8012fb6:	3708      	adds	r7, #8
 8012fb8:	46bd      	mov	sp, r7
 8012fba:	bd80      	pop	{r7, pc}

08012fbc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012fbc:	b580      	push	{r7, lr}
 8012fbe:	b082      	sub	sp, #8
 8012fc0:	af00      	add	r7, sp, #0
 8012fc2:	6078      	str	r0, [r7, #4]
 8012fc4:	460b      	mov	r3, r1
 8012fc6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8012fc8:	687b      	ldr	r3, [r7, #4]
 8012fca:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8012fce:	78fa      	ldrb	r2, [r7, #3]
 8012fd0:	6879      	ldr	r1, [r7, #4]
 8012fd2:	4613      	mov	r3, r2
 8012fd4:	00db      	lsls	r3, r3, #3
 8012fd6:	4413      	add	r3, r2
 8012fd8:	009b      	lsls	r3, r3, #2
 8012fda:	440b      	add	r3, r1
 8012fdc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8012fe0:	681a      	ldr	r2, [r3, #0]
 8012fe2:	78fb      	ldrb	r3, [r7, #3]
 8012fe4:	4619      	mov	r1, r3
 8012fe6:	f7fb febc 	bl	800ed62 <USBD_LL_DataOutStage>
}
 8012fea:	bf00      	nop
 8012fec:	3708      	adds	r7, #8
 8012fee:	46bd      	mov	sp, r7
 8012ff0:	bd80      	pop	{r7, pc}

08012ff2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012ff2:	b580      	push	{r7, lr}
 8012ff4:	b082      	sub	sp, #8
 8012ff6:	af00      	add	r7, sp, #0
 8012ff8:	6078      	str	r0, [r7, #4]
 8012ffa:	460b      	mov	r3, r1
 8012ffc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8012ffe:	687b      	ldr	r3, [r7, #4]
 8013000:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8013004:	78fa      	ldrb	r2, [r7, #3]
 8013006:	6879      	ldr	r1, [r7, #4]
 8013008:	4613      	mov	r3, r2
 801300a:	00db      	lsls	r3, r3, #3
 801300c:	4413      	add	r3, r2
 801300e:	009b      	lsls	r3, r3, #2
 8013010:	440b      	add	r3, r1
 8013012:	334c      	adds	r3, #76	; 0x4c
 8013014:	681a      	ldr	r2, [r3, #0]
 8013016:	78fb      	ldrb	r3, [r7, #3]
 8013018:	4619      	mov	r1, r3
 801301a:	f7fb ff05 	bl	800ee28 <USBD_LL_DataInStage>
}
 801301e:	bf00      	nop
 8013020:	3708      	adds	r7, #8
 8013022:	46bd      	mov	sp, r7
 8013024:	bd80      	pop	{r7, pc}

08013026 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013026:	b580      	push	{r7, lr}
 8013028:	b082      	sub	sp, #8
 801302a:	af00      	add	r7, sp, #0
 801302c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801302e:	687b      	ldr	r3, [r7, #4]
 8013030:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8013034:	4618      	mov	r0, r3
 8013036:	f7fc f819 	bl	800f06c <USBD_LL_SOF>
}
 801303a:	bf00      	nop
 801303c:	3708      	adds	r7, #8
 801303e:	46bd      	mov	sp, r7
 8013040:	bd80      	pop	{r7, pc}

08013042 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013042:	b580      	push	{r7, lr}
 8013044:	b084      	sub	sp, #16
 8013046:	af00      	add	r7, sp, #0
 8013048:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801304a:	2301      	movs	r3, #1
 801304c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801304e:	687b      	ldr	r3, [r7, #4]
 8013050:	68db      	ldr	r3, [r3, #12]
 8013052:	2b02      	cmp	r3, #2
 8013054:	d001      	beq.n	801305a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8013056:	f7f0 fe69 	bl	8003d2c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801305a:	687b      	ldr	r3, [r7, #4]
 801305c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8013060:	7bfa      	ldrb	r2, [r7, #15]
 8013062:	4611      	mov	r1, r2
 8013064:	4618      	mov	r0, r3
 8013066:	f7fb ffc3 	bl	800eff0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801306a:	687b      	ldr	r3, [r7, #4]
 801306c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8013070:	4618      	mov	r0, r3
 8013072:	f7fb ff6f 	bl	800ef54 <USBD_LL_Reset>
}
 8013076:	bf00      	nop
 8013078:	3710      	adds	r7, #16
 801307a:	46bd      	mov	sp, r7
 801307c:	bd80      	pop	{r7, pc}
	...

08013080 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013080:	b580      	push	{r7, lr}
 8013082:	b082      	sub	sp, #8
 8013084:	af00      	add	r7, sp, #0
 8013086:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8013088:	687b      	ldr	r3, [r7, #4]
 801308a:	681b      	ldr	r3, [r3, #0]
 801308c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013090:	681b      	ldr	r3, [r3, #0]
 8013092:	687a      	ldr	r2, [r7, #4]
 8013094:	6812      	ldr	r2, [r2, #0]
 8013096:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801309a:	f043 0301 	orr.w	r3, r3, #1
 801309e:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80130a0:	687b      	ldr	r3, [r7, #4]
 80130a2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80130a6:	4618      	mov	r0, r3
 80130a8:	f7fb ffb2 	bl	800f010 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80130ac:	687b      	ldr	r3, [r7, #4]
 80130ae:	6a1b      	ldr	r3, [r3, #32]
 80130b0:	2b00      	cmp	r3, #0
 80130b2:	d005      	beq.n	80130c0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80130b4:	4b04      	ldr	r3, [pc, #16]	; (80130c8 <HAL_PCD_SuspendCallback+0x48>)
 80130b6:	691b      	ldr	r3, [r3, #16]
 80130b8:	4a03      	ldr	r2, [pc, #12]	; (80130c8 <HAL_PCD_SuspendCallback+0x48>)
 80130ba:	f043 0306 	orr.w	r3, r3, #6
 80130be:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80130c0:	bf00      	nop
 80130c2:	3708      	adds	r7, #8
 80130c4:	46bd      	mov	sp, r7
 80130c6:	bd80      	pop	{r7, pc}
 80130c8:	e000ed00 	.word	0xe000ed00

080130cc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80130cc:	b580      	push	{r7, lr}
 80130ce:	b082      	sub	sp, #8
 80130d0:	af00      	add	r7, sp, #0
 80130d2:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80130d4:	687b      	ldr	r3, [r7, #4]
 80130d6:	681b      	ldr	r3, [r3, #0]
 80130d8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80130dc:	681b      	ldr	r3, [r3, #0]
 80130de:	687a      	ldr	r2, [r7, #4]
 80130e0:	6812      	ldr	r2, [r2, #0]
 80130e2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80130e6:	f023 0301 	bic.w	r3, r3, #1
 80130ea:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80130ec:	687b      	ldr	r3, [r7, #4]
 80130ee:	6a1b      	ldr	r3, [r3, #32]
 80130f0:	2b00      	cmp	r3, #0
 80130f2:	d007      	beq.n	8013104 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80130f4:	4b08      	ldr	r3, [pc, #32]	; (8013118 <HAL_PCD_ResumeCallback+0x4c>)
 80130f6:	691b      	ldr	r3, [r3, #16]
 80130f8:	4a07      	ldr	r2, [pc, #28]	; (8013118 <HAL_PCD_ResumeCallback+0x4c>)
 80130fa:	f023 0306 	bic.w	r3, r3, #6
 80130fe:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8013100:	f000 faf4 	bl	80136ec <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8013104:	687b      	ldr	r3, [r7, #4]
 8013106:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801310a:	4618      	mov	r0, r3
 801310c:	f7fb ff96 	bl	800f03c <USBD_LL_Resume>
}
 8013110:	bf00      	nop
 8013112:	3708      	adds	r7, #8
 8013114:	46bd      	mov	sp, r7
 8013116:	bd80      	pop	{r7, pc}
 8013118:	e000ed00 	.word	0xe000ed00

0801311c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801311c:	b580      	push	{r7, lr}
 801311e:	b082      	sub	sp, #8
 8013120:	af00      	add	r7, sp, #0
 8013122:	6078      	str	r0, [r7, #4]
 8013124:	460b      	mov	r3, r1
 8013126:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8013128:	687b      	ldr	r3, [r7, #4]
 801312a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801312e:	78fa      	ldrb	r2, [r7, #3]
 8013130:	4611      	mov	r1, r2
 8013132:	4618      	mov	r0, r3
 8013134:	f7fb ffe2 	bl	800f0fc <USBD_LL_IsoOUTIncomplete>
}
 8013138:	bf00      	nop
 801313a:	3708      	adds	r7, #8
 801313c:	46bd      	mov	sp, r7
 801313e:	bd80      	pop	{r7, pc}

08013140 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013140:	b580      	push	{r7, lr}
 8013142:	b082      	sub	sp, #8
 8013144:	af00      	add	r7, sp, #0
 8013146:	6078      	str	r0, [r7, #4]
 8013148:	460b      	mov	r3, r1
 801314a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801314c:	687b      	ldr	r3, [r7, #4]
 801314e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8013152:	78fa      	ldrb	r2, [r7, #3]
 8013154:	4611      	mov	r1, r2
 8013156:	4618      	mov	r0, r3
 8013158:	f7fb ffaa 	bl	800f0b0 <USBD_LL_IsoINIncomplete>
}
 801315c:	bf00      	nop
 801315e:	3708      	adds	r7, #8
 8013160:	46bd      	mov	sp, r7
 8013162:	bd80      	pop	{r7, pc}

08013164 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013164:	b580      	push	{r7, lr}
 8013166:	b082      	sub	sp, #8
 8013168:	af00      	add	r7, sp, #0
 801316a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801316c:	687b      	ldr	r3, [r7, #4]
 801316e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8013172:	4618      	mov	r0, r3
 8013174:	f7fb ffe8 	bl	800f148 <USBD_LL_DevConnected>
}
 8013178:	bf00      	nop
 801317a:	3708      	adds	r7, #8
 801317c:	46bd      	mov	sp, r7
 801317e:	bd80      	pop	{r7, pc}

08013180 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013180:	b580      	push	{r7, lr}
 8013182:	b082      	sub	sp, #8
 8013184:	af00      	add	r7, sp, #0
 8013186:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8013188:	687b      	ldr	r3, [r7, #4]
 801318a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801318e:	4618      	mov	r0, r3
 8013190:	f7fb ffe5 	bl	800f15e <USBD_LL_DevDisconnected>
}
 8013194:	bf00      	nop
 8013196:	3708      	adds	r7, #8
 8013198:	46bd      	mov	sp, r7
 801319a:	bd80      	pop	{r7, pc}

0801319c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801319c:	b580      	push	{r7, lr}
 801319e:	b082      	sub	sp, #8
 80131a0:	af00      	add	r7, sp, #0
 80131a2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80131a4:	687b      	ldr	r3, [r7, #4]
 80131a6:	781b      	ldrb	r3, [r3, #0]
 80131a8:	2b00      	cmp	r3, #0
 80131aa:	d139      	bne.n	8013220 <USBD_LL_Init+0x84>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80131ac:	4a1f      	ldr	r2, [pc, #124]	; (801322c <USBD_LL_Init+0x90>)
 80131ae:	687b      	ldr	r3, [r7, #4]
 80131b0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80131b4:	687b      	ldr	r3, [r7, #4]
 80131b6:	4a1d      	ldr	r2, [pc, #116]	; (801322c <USBD_LL_Init+0x90>)
 80131b8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80131bc:	4b1b      	ldr	r3, [pc, #108]	; (801322c <USBD_LL_Init+0x90>)
 80131be:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80131c2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80131c4:	4b19      	ldr	r3, [pc, #100]	; (801322c <USBD_LL_Init+0x90>)
 80131c6:	2206      	movs	r2, #6
 80131c8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80131ca:	4b18      	ldr	r3, [pc, #96]	; (801322c <USBD_LL_Init+0x90>)
 80131cc:	2202      	movs	r2, #2
 80131ce:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80131d0:	4b16      	ldr	r3, [pc, #88]	; (801322c <USBD_LL_Init+0x90>)
 80131d2:	2200      	movs	r2, #0
 80131d4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80131d6:	4b15      	ldr	r3, [pc, #84]	; (801322c <USBD_LL_Init+0x90>)
 80131d8:	2200      	movs	r2, #0
 80131da:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80131dc:	4b13      	ldr	r3, [pc, #76]	; (801322c <USBD_LL_Init+0x90>)
 80131de:	2200      	movs	r2, #0
 80131e0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80131e2:	4b12      	ldr	r3, [pc, #72]	; (801322c <USBD_LL_Init+0x90>)
 80131e4:	2200      	movs	r2, #0
 80131e6:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80131e8:	4b10      	ldr	r3, [pc, #64]	; (801322c <USBD_LL_Init+0x90>)
 80131ea:	2200      	movs	r2, #0
 80131ec:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80131ee:	4b0f      	ldr	r3, [pc, #60]	; (801322c <USBD_LL_Init+0x90>)
 80131f0:	2200      	movs	r2, #0
 80131f2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80131f4:	480d      	ldr	r0, [pc, #52]	; (801322c <USBD_LL_Init+0x90>)
 80131f6:	f7f5 f8d5 	bl	80083a4 <HAL_PCD_Init>
 80131fa:	4603      	mov	r3, r0
 80131fc:	2b00      	cmp	r3, #0
 80131fe:	d001      	beq.n	8013204 <USBD_LL_Init+0x68>
  {
    Error_Handler( );
 8013200:	f7f0 fd94 	bl	8003d2c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8013204:	2180      	movs	r1, #128	; 0x80
 8013206:	4809      	ldr	r0, [pc, #36]	; (801322c <USBD_LL_Init+0x90>)
 8013208:	f7f6 fa57 	bl	80096ba <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801320c:	2240      	movs	r2, #64	; 0x40
 801320e:	2100      	movs	r1, #0
 8013210:	4806      	ldr	r0, [pc, #24]	; (801322c <USBD_LL_Init+0x90>)
 8013212:	f7f6 fa0b 	bl	800962c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8013216:	2280      	movs	r2, #128	; 0x80
 8013218:	2101      	movs	r1, #1
 801321a:	4804      	ldr	r0, [pc, #16]	; (801322c <USBD_LL_Init+0x90>)
 801321c:	f7f6 fa06 	bl	800962c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8013220:	2300      	movs	r3, #0
}
 8013222:	4618      	mov	r0, r3
 8013224:	3708      	adds	r7, #8
 8013226:	46bd      	mov	sp, r7
 8013228:	bd80      	pop	{r7, pc}
 801322a:	bf00      	nop
 801322c:	200090fc 	.word	0x200090fc

08013230 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8013230:	b580      	push	{r7, lr}
 8013232:	b084      	sub	sp, #16
 8013234:	af00      	add	r7, sp, #0
 8013236:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013238:	2300      	movs	r3, #0
 801323a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801323c:	2300      	movs	r3, #0
 801323e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 8013240:	687b      	ldr	r3, [r7, #4]
 8013242:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8013246:	4618      	mov	r0, r3
 8013248:	f7f5 f9d0 	bl	80085ec <HAL_PCD_Start>
 801324c:	4603      	mov	r3, r0
 801324e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8013250:	7bbb      	ldrb	r3, [r7, #14]
 8013252:	2b03      	cmp	r3, #3
 8013254:	d816      	bhi.n	8013284 <USBD_LL_Start+0x54>
 8013256:	a201      	add	r2, pc, #4	; (adr r2, 801325c <USBD_LL_Start+0x2c>)
 8013258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801325c:	0801326d 	.word	0x0801326d
 8013260:	08013273 	.word	0x08013273
 8013264:	08013279 	.word	0x08013279
 8013268:	0801327f 	.word	0x0801327f
    case HAL_OK :
      usb_status = USBD_OK;
 801326c:	2300      	movs	r3, #0
 801326e:	73fb      	strb	r3, [r7, #15]
    break;
 8013270:	e00b      	b.n	801328a <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8013272:	2303      	movs	r3, #3
 8013274:	73fb      	strb	r3, [r7, #15]
    break;
 8013276:	e008      	b.n	801328a <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8013278:	2301      	movs	r3, #1
 801327a:	73fb      	strb	r3, [r7, #15]
    break;
 801327c:	e005      	b.n	801328a <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801327e:	2303      	movs	r3, #3
 8013280:	73fb      	strb	r3, [r7, #15]
    break;
 8013282:	e002      	b.n	801328a <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8013284:	2303      	movs	r3, #3
 8013286:	73fb      	strb	r3, [r7, #15]
    break;
 8013288:	bf00      	nop
  }
  return usb_status;
 801328a:	7bfb      	ldrb	r3, [r7, #15]
}
 801328c:	4618      	mov	r0, r3
 801328e:	3710      	adds	r7, #16
 8013290:	46bd      	mov	sp, r7
 8013292:	bd80      	pop	{r7, pc}

08013294 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8013294:	b580      	push	{r7, lr}
 8013296:	b084      	sub	sp, #16
 8013298:	af00      	add	r7, sp, #0
 801329a:	6078      	str	r0, [r7, #4]
 801329c:	4608      	mov	r0, r1
 801329e:	4611      	mov	r1, r2
 80132a0:	461a      	mov	r2, r3
 80132a2:	4603      	mov	r3, r0
 80132a4:	70fb      	strb	r3, [r7, #3]
 80132a6:	460b      	mov	r3, r1
 80132a8:	70bb      	strb	r3, [r7, #2]
 80132aa:	4613      	mov	r3, r2
 80132ac:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80132ae:	2300      	movs	r3, #0
 80132b0:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80132b2:	2300      	movs	r3, #0
 80132b4:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80132b6:	687b      	ldr	r3, [r7, #4]
 80132b8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80132bc:	78bb      	ldrb	r3, [r7, #2]
 80132be:	883a      	ldrh	r2, [r7, #0]
 80132c0:	78f9      	ldrb	r1, [r7, #3]
 80132c2:	f7f5 fe7a 	bl	8008fba <HAL_PCD_EP_Open>
 80132c6:	4603      	mov	r3, r0
 80132c8:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80132ca:	7bbb      	ldrb	r3, [r7, #14]
 80132cc:	2b03      	cmp	r3, #3
 80132ce:	d817      	bhi.n	8013300 <USBD_LL_OpenEP+0x6c>
 80132d0:	a201      	add	r2, pc, #4	; (adr r2, 80132d8 <USBD_LL_OpenEP+0x44>)
 80132d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80132d6:	bf00      	nop
 80132d8:	080132e9 	.word	0x080132e9
 80132dc:	080132ef 	.word	0x080132ef
 80132e0:	080132f5 	.word	0x080132f5
 80132e4:	080132fb 	.word	0x080132fb
    case HAL_OK :
      usb_status = USBD_OK;
 80132e8:	2300      	movs	r3, #0
 80132ea:	73fb      	strb	r3, [r7, #15]
    break;
 80132ec:	e00b      	b.n	8013306 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80132ee:	2303      	movs	r3, #3
 80132f0:	73fb      	strb	r3, [r7, #15]
    break;
 80132f2:	e008      	b.n	8013306 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80132f4:	2301      	movs	r3, #1
 80132f6:	73fb      	strb	r3, [r7, #15]
    break;
 80132f8:	e005      	b.n	8013306 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80132fa:	2303      	movs	r3, #3
 80132fc:	73fb      	strb	r3, [r7, #15]
    break;
 80132fe:	e002      	b.n	8013306 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8013300:	2303      	movs	r3, #3
 8013302:	73fb      	strb	r3, [r7, #15]
    break;
 8013304:	bf00      	nop
  }
  return usb_status;
 8013306:	7bfb      	ldrb	r3, [r7, #15]
}
 8013308:	4618      	mov	r0, r3
 801330a:	3710      	adds	r7, #16
 801330c:	46bd      	mov	sp, r7
 801330e:	bd80      	pop	{r7, pc}

08013310 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013310:	b580      	push	{r7, lr}
 8013312:	b084      	sub	sp, #16
 8013314:	af00      	add	r7, sp, #0
 8013316:	6078      	str	r0, [r7, #4]
 8013318:	460b      	mov	r3, r1
 801331a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801331c:	2300      	movs	r3, #0
 801331e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013320:	2300      	movs	r3, #0
 8013322:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8013324:	687b      	ldr	r3, [r7, #4]
 8013326:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801332a:	78fa      	ldrb	r2, [r7, #3]
 801332c:	4611      	mov	r1, r2
 801332e:	4618      	mov	r0, r3
 8013330:	f7f5 feab 	bl	800908a <HAL_PCD_EP_Close>
 8013334:	4603      	mov	r3, r0
 8013336:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8013338:	7bbb      	ldrb	r3, [r7, #14]
 801333a:	2b03      	cmp	r3, #3
 801333c:	d816      	bhi.n	801336c <USBD_LL_CloseEP+0x5c>
 801333e:	a201      	add	r2, pc, #4	; (adr r2, 8013344 <USBD_LL_CloseEP+0x34>)
 8013340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013344:	08013355 	.word	0x08013355
 8013348:	0801335b 	.word	0x0801335b
 801334c:	08013361 	.word	0x08013361
 8013350:	08013367 	.word	0x08013367
    case HAL_OK :
      usb_status = USBD_OK;
 8013354:	2300      	movs	r3, #0
 8013356:	73fb      	strb	r3, [r7, #15]
    break;
 8013358:	e00b      	b.n	8013372 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801335a:	2303      	movs	r3, #3
 801335c:	73fb      	strb	r3, [r7, #15]
    break;
 801335e:	e008      	b.n	8013372 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8013360:	2301      	movs	r3, #1
 8013362:	73fb      	strb	r3, [r7, #15]
    break;
 8013364:	e005      	b.n	8013372 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8013366:	2303      	movs	r3, #3
 8013368:	73fb      	strb	r3, [r7, #15]
    break;
 801336a:	e002      	b.n	8013372 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 801336c:	2303      	movs	r3, #3
 801336e:	73fb      	strb	r3, [r7, #15]
    break;
 8013370:	bf00      	nop
  }
  return usb_status;
 8013372:	7bfb      	ldrb	r3, [r7, #15]
}
 8013374:	4618      	mov	r0, r3
 8013376:	3710      	adds	r7, #16
 8013378:	46bd      	mov	sp, r7
 801337a:	bd80      	pop	{r7, pc}

0801337c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801337c:	b580      	push	{r7, lr}
 801337e:	b084      	sub	sp, #16
 8013380:	af00      	add	r7, sp, #0
 8013382:	6078      	str	r0, [r7, #4]
 8013384:	460b      	mov	r3, r1
 8013386:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013388:	2300      	movs	r3, #0
 801338a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801338c:	2300      	movs	r3, #0
 801338e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8013390:	687b      	ldr	r3, [r7, #4]
 8013392:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8013396:	78fa      	ldrb	r2, [r7, #3]
 8013398:	4611      	mov	r1, r2
 801339a:	4618      	mov	r0, r3
 801339c:	f7f5 ff52 	bl	8009244 <HAL_PCD_EP_SetStall>
 80133a0:	4603      	mov	r3, r0
 80133a2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80133a4:	7bbb      	ldrb	r3, [r7, #14]
 80133a6:	2b03      	cmp	r3, #3
 80133a8:	d816      	bhi.n	80133d8 <USBD_LL_StallEP+0x5c>
 80133aa:	a201      	add	r2, pc, #4	; (adr r2, 80133b0 <USBD_LL_StallEP+0x34>)
 80133ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80133b0:	080133c1 	.word	0x080133c1
 80133b4:	080133c7 	.word	0x080133c7
 80133b8:	080133cd 	.word	0x080133cd
 80133bc:	080133d3 	.word	0x080133d3
    case HAL_OK :
      usb_status = USBD_OK;
 80133c0:	2300      	movs	r3, #0
 80133c2:	73fb      	strb	r3, [r7, #15]
    break;
 80133c4:	e00b      	b.n	80133de <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80133c6:	2303      	movs	r3, #3
 80133c8:	73fb      	strb	r3, [r7, #15]
    break;
 80133ca:	e008      	b.n	80133de <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80133cc:	2301      	movs	r3, #1
 80133ce:	73fb      	strb	r3, [r7, #15]
    break;
 80133d0:	e005      	b.n	80133de <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80133d2:	2303      	movs	r3, #3
 80133d4:	73fb      	strb	r3, [r7, #15]
    break;
 80133d6:	e002      	b.n	80133de <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80133d8:	2303      	movs	r3, #3
 80133da:	73fb      	strb	r3, [r7, #15]
    break;
 80133dc:	bf00      	nop
  }
  return usb_status;
 80133de:	7bfb      	ldrb	r3, [r7, #15]
}
 80133e0:	4618      	mov	r0, r3
 80133e2:	3710      	adds	r7, #16
 80133e4:	46bd      	mov	sp, r7
 80133e6:	bd80      	pop	{r7, pc}

080133e8 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80133e8:	b580      	push	{r7, lr}
 80133ea:	b084      	sub	sp, #16
 80133ec:	af00      	add	r7, sp, #0
 80133ee:	6078      	str	r0, [r7, #4]
 80133f0:	460b      	mov	r3, r1
 80133f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80133f4:	2300      	movs	r3, #0
 80133f6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80133f8:	2300      	movs	r3, #0
 80133fa:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80133fc:	687b      	ldr	r3, [r7, #4]
 80133fe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8013402:	78fa      	ldrb	r2, [r7, #3]
 8013404:	4611      	mov	r1, r2
 8013406:	4618      	mov	r0, r3
 8013408:	f7f5 ff7e 	bl	8009308 <HAL_PCD_EP_ClrStall>
 801340c:	4603      	mov	r3, r0
 801340e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8013410:	7bbb      	ldrb	r3, [r7, #14]
 8013412:	2b03      	cmp	r3, #3
 8013414:	d816      	bhi.n	8013444 <USBD_LL_ClearStallEP+0x5c>
 8013416:	a201      	add	r2, pc, #4	; (adr r2, 801341c <USBD_LL_ClearStallEP+0x34>)
 8013418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801341c:	0801342d 	.word	0x0801342d
 8013420:	08013433 	.word	0x08013433
 8013424:	08013439 	.word	0x08013439
 8013428:	0801343f 	.word	0x0801343f
    case HAL_OK :
      usb_status = USBD_OK;
 801342c:	2300      	movs	r3, #0
 801342e:	73fb      	strb	r3, [r7, #15]
    break;
 8013430:	e00b      	b.n	801344a <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8013432:	2303      	movs	r3, #3
 8013434:	73fb      	strb	r3, [r7, #15]
    break;
 8013436:	e008      	b.n	801344a <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8013438:	2301      	movs	r3, #1
 801343a:	73fb      	strb	r3, [r7, #15]
    break;
 801343c:	e005      	b.n	801344a <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801343e:	2303      	movs	r3, #3
 8013440:	73fb      	strb	r3, [r7, #15]
    break;
 8013442:	e002      	b.n	801344a <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8013444:	2303      	movs	r3, #3
 8013446:	73fb      	strb	r3, [r7, #15]
    break;
 8013448:	bf00      	nop
  }
  return usb_status;
 801344a:	7bfb      	ldrb	r3, [r7, #15]
}
 801344c:	4618      	mov	r0, r3
 801344e:	3710      	adds	r7, #16
 8013450:	46bd      	mov	sp, r7
 8013452:	bd80      	pop	{r7, pc}

08013454 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013454:	b480      	push	{r7}
 8013456:	b085      	sub	sp, #20
 8013458:	af00      	add	r7, sp, #0
 801345a:	6078      	str	r0, [r7, #4]
 801345c:	460b      	mov	r3, r1
 801345e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8013460:	687b      	ldr	r3, [r7, #4]
 8013462:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8013466:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8013468:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801346c:	2b00      	cmp	r3, #0
 801346e:	da0b      	bge.n	8013488 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8013470:	78fb      	ldrb	r3, [r7, #3]
 8013472:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8013476:	68f9      	ldr	r1, [r7, #12]
 8013478:	4613      	mov	r3, r2
 801347a:	00db      	lsls	r3, r3, #3
 801347c:	4413      	add	r3, r2
 801347e:	009b      	lsls	r3, r3, #2
 8013480:	440b      	add	r3, r1
 8013482:	333e      	adds	r3, #62	; 0x3e
 8013484:	781b      	ldrb	r3, [r3, #0]
 8013486:	e00b      	b.n	80134a0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8013488:	78fb      	ldrb	r3, [r7, #3]
 801348a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801348e:	68f9      	ldr	r1, [r7, #12]
 8013490:	4613      	mov	r3, r2
 8013492:	00db      	lsls	r3, r3, #3
 8013494:	4413      	add	r3, r2
 8013496:	009b      	lsls	r3, r3, #2
 8013498:	440b      	add	r3, r1
 801349a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 801349e:	781b      	ldrb	r3, [r3, #0]
  }
}
 80134a0:	4618      	mov	r0, r3
 80134a2:	3714      	adds	r7, #20
 80134a4:	46bd      	mov	sp, r7
 80134a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134aa:	4770      	bx	lr

080134ac <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80134ac:	b580      	push	{r7, lr}
 80134ae:	b084      	sub	sp, #16
 80134b0:	af00      	add	r7, sp, #0
 80134b2:	6078      	str	r0, [r7, #4]
 80134b4:	460b      	mov	r3, r1
 80134b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80134b8:	2300      	movs	r3, #0
 80134ba:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80134bc:	2300      	movs	r3, #0
 80134be:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80134c0:	687b      	ldr	r3, [r7, #4]
 80134c2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80134c6:	78fa      	ldrb	r2, [r7, #3]
 80134c8:	4611      	mov	r1, r2
 80134ca:	4618      	mov	r0, r3
 80134cc:	f7f5 fd50 	bl	8008f70 <HAL_PCD_SetAddress>
 80134d0:	4603      	mov	r3, r0
 80134d2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80134d4:	7bbb      	ldrb	r3, [r7, #14]
 80134d6:	2b03      	cmp	r3, #3
 80134d8:	d816      	bhi.n	8013508 <USBD_LL_SetUSBAddress+0x5c>
 80134da:	a201      	add	r2, pc, #4	; (adr r2, 80134e0 <USBD_LL_SetUSBAddress+0x34>)
 80134dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80134e0:	080134f1 	.word	0x080134f1
 80134e4:	080134f7 	.word	0x080134f7
 80134e8:	080134fd 	.word	0x080134fd
 80134ec:	08013503 	.word	0x08013503
    case HAL_OK :
      usb_status = USBD_OK;
 80134f0:	2300      	movs	r3, #0
 80134f2:	73fb      	strb	r3, [r7, #15]
    break;
 80134f4:	e00b      	b.n	801350e <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80134f6:	2303      	movs	r3, #3
 80134f8:	73fb      	strb	r3, [r7, #15]
    break;
 80134fa:	e008      	b.n	801350e <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80134fc:	2301      	movs	r3, #1
 80134fe:	73fb      	strb	r3, [r7, #15]
    break;
 8013500:	e005      	b.n	801350e <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8013502:	2303      	movs	r3, #3
 8013504:	73fb      	strb	r3, [r7, #15]
    break;
 8013506:	e002      	b.n	801350e <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8013508:	2303      	movs	r3, #3
 801350a:	73fb      	strb	r3, [r7, #15]
    break;
 801350c:	bf00      	nop
  }
  return usb_status;
 801350e:	7bfb      	ldrb	r3, [r7, #15]
}
 8013510:	4618      	mov	r0, r3
 8013512:	3710      	adds	r7, #16
 8013514:	46bd      	mov	sp, r7
 8013516:	bd80      	pop	{r7, pc}

08013518 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8013518:	b580      	push	{r7, lr}
 801351a:	b086      	sub	sp, #24
 801351c:	af00      	add	r7, sp, #0
 801351e:	60f8      	str	r0, [r7, #12]
 8013520:	607a      	str	r2, [r7, #4]
 8013522:	603b      	str	r3, [r7, #0]
 8013524:	460b      	mov	r3, r1
 8013526:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013528:	2300      	movs	r3, #0
 801352a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801352c:	2300      	movs	r3, #0
 801352e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8013530:	68fb      	ldr	r3, [r7, #12]
 8013532:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8013536:	7af9      	ldrb	r1, [r7, #11]
 8013538:	683b      	ldr	r3, [r7, #0]
 801353a:	687a      	ldr	r2, [r7, #4]
 801353c:	f7f5 fe45 	bl	80091ca <HAL_PCD_EP_Transmit>
 8013540:	4603      	mov	r3, r0
 8013542:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8013544:	7dbb      	ldrb	r3, [r7, #22]
 8013546:	2b03      	cmp	r3, #3
 8013548:	d816      	bhi.n	8013578 <USBD_LL_Transmit+0x60>
 801354a:	a201      	add	r2, pc, #4	; (adr r2, 8013550 <USBD_LL_Transmit+0x38>)
 801354c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013550:	08013561 	.word	0x08013561
 8013554:	08013567 	.word	0x08013567
 8013558:	0801356d 	.word	0x0801356d
 801355c:	08013573 	.word	0x08013573
    case HAL_OK :
      usb_status = USBD_OK;
 8013560:	2300      	movs	r3, #0
 8013562:	75fb      	strb	r3, [r7, #23]
    break;
 8013564:	e00b      	b.n	801357e <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8013566:	2303      	movs	r3, #3
 8013568:	75fb      	strb	r3, [r7, #23]
    break;
 801356a:	e008      	b.n	801357e <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801356c:	2301      	movs	r3, #1
 801356e:	75fb      	strb	r3, [r7, #23]
    break;
 8013570:	e005      	b.n	801357e <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8013572:	2303      	movs	r3, #3
 8013574:	75fb      	strb	r3, [r7, #23]
    break;
 8013576:	e002      	b.n	801357e <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8013578:	2303      	movs	r3, #3
 801357a:	75fb      	strb	r3, [r7, #23]
    break;
 801357c:	bf00      	nop
  }
  return usb_status;
 801357e:	7dfb      	ldrb	r3, [r7, #23]
}
 8013580:	4618      	mov	r0, r3
 8013582:	3718      	adds	r7, #24
 8013584:	46bd      	mov	sp, r7
 8013586:	bd80      	pop	{r7, pc}

08013588 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8013588:	b580      	push	{r7, lr}
 801358a:	b086      	sub	sp, #24
 801358c:	af00      	add	r7, sp, #0
 801358e:	60f8      	str	r0, [r7, #12]
 8013590:	607a      	str	r2, [r7, #4]
 8013592:	603b      	str	r3, [r7, #0]
 8013594:	460b      	mov	r3, r1
 8013596:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013598:	2300      	movs	r3, #0
 801359a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801359c:	2300      	movs	r3, #0
 801359e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80135a0:	68fb      	ldr	r3, [r7, #12]
 80135a2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80135a6:	7af9      	ldrb	r1, [r7, #11]
 80135a8:	683b      	ldr	r3, [r7, #0]
 80135aa:	687a      	ldr	r2, [r7, #4]
 80135ac:	f7f5 fdb7 	bl	800911e <HAL_PCD_EP_Receive>
 80135b0:	4603      	mov	r3, r0
 80135b2:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 80135b4:	7dbb      	ldrb	r3, [r7, #22]
 80135b6:	2b03      	cmp	r3, #3
 80135b8:	d816      	bhi.n	80135e8 <USBD_LL_PrepareReceive+0x60>
 80135ba:	a201      	add	r2, pc, #4	; (adr r2, 80135c0 <USBD_LL_PrepareReceive+0x38>)
 80135bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80135c0:	080135d1 	.word	0x080135d1
 80135c4:	080135d7 	.word	0x080135d7
 80135c8:	080135dd 	.word	0x080135dd
 80135cc:	080135e3 	.word	0x080135e3
    case HAL_OK :
      usb_status = USBD_OK;
 80135d0:	2300      	movs	r3, #0
 80135d2:	75fb      	strb	r3, [r7, #23]
    break;
 80135d4:	e00b      	b.n	80135ee <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80135d6:	2303      	movs	r3, #3
 80135d8:	75fb      	strb	r3, [r7, #23]
    break;
 80135da:	e008      	b.n	80135ee <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80135dc:	2301      	movs	r3, #1
 80135de:	75fb      	strb	r3, [r7, #23]
    break;
 80135e0:	e005      	b.n	80135ee <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80135e2:	2303      	movs	r3, #3
 80135e4:	75fb      	strb	r3, [r7, #23]
    break;
 80135e6:	e002      	b.n	80135ee <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 80135e8:	2303      	movs	r3, #3
 80135ea:	75fb      	strb	r3, [r7, #23]
    break;
 80135ec:	bf00      	nop
  }
  return usb_status;
 80135ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80135f0:	4618      	mov	r0, r3
 80135f2:	3718      	adds	r7, #24
 80135f4:	46bd      	mov	sp, r7
 80135f6:	bd80      	pop	{r7, pc}

080135f8 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80135f8:	b580      	push	{r7, lr}
 80135fa:	b082      	sub	sp, #8
 80135fc:	af00      	add	r7, sp, #0
 80135fe:	6078      	str	r0, [r7, #4]
 8013600:	460b      	mov	r3, r1
 8013602:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8013604:	687b      	ldr	r3, [r7, #4]
 8013606:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801360a:	78fa      	ldrb	r2, [r7, #3]
 801360c:	4611      	mov	r1, r2
 801360e:	4618      	mov	r0, r3
 8013610:	f7f5 fdc3 	bl	800919a <HAL_PCD_EP_GetRxCount>
 8013614:	4603      	mov	r3, r0
}
 8013616:	4618      	mov	r0, r3
 8013618:	3708      	adds	r7, #8
 801361a:	46bd      	mov	sp, r7
 801361c:	bd80      	pop	{r7, pc}
	...

08013620 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8013620:	b580      	push	{r7, lr}
 8013622:	b082      	sub	sp, #8
 8013624:	af00      	add	r7, sp, #0
 8013626:	6078      	str	r0, [r7, #4]
 8013628:	460b      	mov	r3, r1
 801362a:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 801362c:	78fb      	ldrb	r3, [r7, #3]
 801362e:	2b00      	cmp	r3, #0
 8013630:	d002      	beq.n	8013638 <HAL_PCDEx_LPM_Callback+0x18>
 8013632:	2b01      	cmp	r3, #1
 8013634:	d01f      	beq.n	8013676 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8013636:	e03b      	b.n	80136b0 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8013638:	687b      	ldr	r3, [r7, #4]
 801363a:	6a1b      	ldr	r3, [r3, #32]
 801363c:	2b00      	cmp	r3, #0
 801363e:	d007      	beq.n	8013650 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8013640:	f000 f854 	bl	80136ec <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8013644:	4b1c      	ldr	r3, [pc, #112]	; (80136b8 <HAL_PCDEx_LPM_Callback+0x98>)
 8013646:	691b      	ldr	r3, [r3, #16]
 8013648:	4a1b      	ldr	r2, [pc, #108]	; (80136b8 <HAL_PCDEx_LPM_Callback+0x98>)
 801364a:	f023 0306 	bic.w	r3, r3, #6
 801364e:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8013650:	687b      	ldr	r3, [r7, #4]
 8013652:	681b      	ldr	r3, [r3, #0]
 8013654:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013658:	681b      	ldr	r3, [r3, #0]
 801365a:	687a      	ldr	r2, [r7, #4]
 801365c:	6812      	ldr	r2, [r2, #0]
 801365e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8013662:	f023 0301 	bic.w	r3, r3, #1
 8013666:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8013668:	687b      	ldr	r3, [r7, #4]
 801366a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801366e:	4618      	mov	r0, r3
 8013670:	f7fb fce4 	bl	800f03c <USBD_LL_Resume>
    break;
 8013674:	e01c      	b.n	80136b0 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8013676:	687b      	ldr	r3, [r7, #4]
 8013678:	681b      	ldr	r3, [r3, #0]
 801367a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801367e:	681b      	ldr	r3, [r3, #0]
 8013680:	687a      	ldr	r2, [r7, #4]
 8013682:	6812      	ldr	r2, [r2, #0]
 8013684:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8013688:	f043 0301 	orr.w	r3, r3, #1
 801368c:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 801368e:	687b      	ldr	r3, [r7, #4]
 8013690:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8013694:	4618      	mov	r0, r3
 8013696:	f7fb fcbb 	bl	800f010 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 801369a:	687b      	ldr	r3, [r7, #4]
 801369c:	6a1b      	ldr	r3, [r3, #32]
 801369e:	2b00      	cmp	r3, #0
 80136a0:	d005      	beq.n	80136ae <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80136a2:	4b05      	ldr	r3, [pc, #20]	; (80136b8 <HAL_PCDEx_LPM_Callback+0x98>)
 80136a4:	691b      	ldr	r3, [r3, #16]
 80136a6:	4a04      	ldr	r2, [pc, #16]	; (80136b8 <HAL_PCDEx_LPM_Callback+0x98>)
 80136a8:	f043 0306 	orr.w	r3, r3, #6
 80136ac:	6113      	str	r3, [r2, #16]
    break;
 80136ae:	bf00      	nop
}
 80136b0:	bf00      	nop
 80136b2:	3708      	adds	r7, #8
 80136b4:	46bd      	mov	sp, r7
 80136b6:	bd80      	pop	{r7, pc}
 80136b8:	e000ed00 	.word	0xe000ed00

080136bc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80136bc:	b480      	push	{r7}
 80136be:	b083      	sub	sp, #12
 80136c0:	af00      	add	r7, sp, #0
 80136c2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80136c4:	4b03      	ldr	r3, [pc, #12]	; (80136d4 <USBD_static_malloc+0x18>)
}
 80136c6:	4618      	mov	r0, r3
 80136c8:	370c      	adds	r7, #12
 80136ca:	46bd      	mov	sp, r7
 80136cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136d0:	4770      	bx	lr
 80136d2:	bf00      	nop
 80136d4:	20009608 	.word	0x20009608

080136d8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80136d8:	b480      	push	{r7}
 80136da:	b083      	sub	sp, #12
 80136dc:	af00      	add	r7, sp, #0
 80136de:	6078      	str	r0, [r7, #4]

}
 80136e0:	bf00      	nop
 80136e2:	370c      	adds	r7, #12
 80136e4:	46bd      	mov	sp, r7
 80136e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136ea:	4770      	bx	lr

080136ec <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80136ec:	b580      	push	{r7, lr}
 80136ee:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80136f0:	f7ef fe52 	bl	8003398 <SystemClock_Config>
}
 80136f4:	bf00      	nop
 80136f6:	bd80      	pop	{r7, pc}

080136f8 <expf>:
 80136f8:	b508      	push	{r3, lr}
 80136fa:	ed2d 8b02 	vpush	{d8}
 80136fe:	eef0 8a40 	vmov.f32	s17, s0
 8013702:	f000 f83d 	bl	8013780 <__ieee754_expf>
 8013706:	eeb0 8a40 	vmov.f32	s16, s0
 801370a:	eeb0 0a68 	vmov.f32	s0, s17
 801370e:	f000 f829 	bl	8013764 <finitef>
 8013712:	b160      	cbz	r0, 801372e <expf+0x36>
 8013714:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8013754 <expf+0x5c>
 8013718:	eef4 8ae7 	vcmpe.f32	s17, s15
 801371c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013720:	dd0a      	ble.n	8013738 <expf+0x40>
 8013722:	f000 ff6b 	bl	80145fc <__errno>
 8013726:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 8013758 <expf+0x60>
 801372a:	2322      	movs	r3, #34	; 0x22
 801372c:	6003      	str	r3, [r0, #0]
 801372e:	eeb0 0a48 	vmov.f32	s0, s16
 8013732:	ecbd 8b02 	vpop	{d8}
 8013736:	bd08      	pop	{r3, pc}
 8013738:	eddf 7a08 	vldr	s15, [pc, #32]	; 801375c <expf+0x64>
 801373c:	eef4 8ae7 	vcmpe.f32	s17, s15
 8013740:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013744:	d5f3      	bpl.n	801372e <expf+0x36>
 8013746:	f000 ff59 	bl	80145fc <__errno>
 801374a:	2322      	movs	r3, #34	; 0x22
 801374c:	ed9f 8a04 	vldr	s16, [pc, #16]	; 8013760 <expf+0x68>
 8013750:	6003      	str	r3, [r0, #0]
 8013752:	e7ec      	b.n	801372e <expf+0x36>
 8013754:	42b17217 	.word	0x42b17217
 8013758:	7f800000 	.word	0x7f800000
 801375c:	c2cff1b5 	.word	0xc2cff1b5
 8013760:	00000000 	.word	0x00000000

08013764 <finitef>:
 8013764:	b082      	sub	sp, #8
 8013766:	ed8d 0a01 	vstr	s0, [sp, #4]
 801376a:	9801      	ldr	r0, [sp, #4]
 801376c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8013770:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8013774:	bfac      	ite	ge
 8013776:	2000      	movge	r0, #0
 8013778:	2001      	movlt	r0, #1
 801377a:	b002      	add	sp, #8
 801377c:	4770      	bx	lr
	...

08013780 <__ieee754_expf>:
 8013780:	ee10 2a10 	vmov	r2, s0
 8013784:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8013788:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801378c:	d902      	bls.n	8013794 <__ieee754_expf+0x14>
 801378e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8013792:	4770      	bx	lr
 8013794:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 8013798:	d106      	bne.n	80137a8 <__ieee754_expf+0x28>
 801379a:	eddf 7a4e 	vldr	s15, [pc, #312]	; 80138d4 <__ieee754_expf+0x154>
 801379e:	2900      	cmp	r1, #0
 80137a0:	bf18      	it	ne
 80137a2:	eeb0 0a67 	vmovne.f32	s0, s15
 80137a6:	4770      	bx	lr
 80137a8:	484b      	ldr	r0, [pc, #300]	; (80138d8 <__ieee754_expf+0x158>)
 80137aa:	4282      	cmp	r2, r0
 80137ac:	dd02      	ble.n	80137b4 <__ieee754_expf+0x34>
 80137ae:	2000      	movs	r0, #0
 80137b0:	f000 b8d0 	b.w	8013954 <__math_oflowf>
 80137b4:	2a00      	cmp	r2, #0
 80137b6:	da05      	bge.n	80137c4 <__ieee754_expf+0x44>
 80137b8:	4a48      	ldr	r2, [pc, #288]	; (80138dc <__ieee754_expf+0x15c>)
 80137ba:	4293      	cmp	r3, r2
 80137bc:	d902      	bls.n	80137c4 <__ieee754_expf+0x44>
 80137be:	2000      	movs	r0, #0
 80137c0:	f000 b8c2 	b.w	8013948 <__math_uflowf>
 80137c4:	4a46      	ldr	r2, [pc, #280]	; (80138e0 <__ieee754_expf+0x160>)
 80137c6:	4293      	cmp	r3, r2
 80137c8:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80137cc:	d952      	bls.n	8013874 <__ieee754_expf+0xf4>
 80137ce:	4a45      	ldr	r2, [pc, #276]	; (80138e4 <__ieee754_expf+0x164>)
 80137d0:	4293      	cmp	r3, r2
 80137d2:	ea4f 0281 	mov.w	r2, r1, lsl #2
 80137d6:	d834      	bhi.n	8013842 <__ieee754_expf+0xc2>
 80137d8:	4b43      	ldr	r3, [pc, #268]	; (80138e8 <__ieee754_expf+0x168>)
 80137da:	4413      	add	r3, r2
 80137dc:	ed93 7a00 	vldr	s14, [r3]
 80137e0:	4b42      	ldr	r3, [pc, #264]	; (80138ec <__ieee754_expf+0x16c>)
 80137e2:	4413      	add	r3, r2
 80137e4:	ee30 7a47 	vsub.f32	s14, s0, s14
 80137e8:	f1c1 0201 	rsb	r2, r1, #1
 80137ec:	edd3 7a00 	vldr	s15, [r3]
 80137f0:	1a52      	subs	r2, r2, r1
 80137f2:	ee37 0a67 	vsub.f32	s0, s14, s15
 80137f6:	ee20 6a00 	vmul.f32	s12, s0, s0
 80137fa:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 80138f0 <__ieee754_expf+0x170>
 80137fe:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80138f4 <__ieee754_expf+0x174>
 8013802:	eee6 6a05 	vfma.f32	s13, s12, s10
 8013806:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 80138f8 <__ieee754_expf+0x178>
 801380a:	eea6 5a86 	vfma.f32	s10, s13, s12
 801380e:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80138fc <__ieee754_expf+0x17c>
 8013812:	eee5 6a06 	vfma.f32	s13, s10, s12
 8013816:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 8013900 <__ieee754_expf+0x180>
 801381a:	eea6 5a86 	vfma.f32	s10, s13, s12
 801381e:	eef0 6a40 	vmov.f32	s13, s0
 8013822:	eee5 6a46 	vfms.f32	s13, s10, s12
 8013826:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 801382a:	ee20 5a26 	vmul.f32	s10, s0, s13
 801382e:	bb92      	cbnz	r2, 8013896 <__ieee754_expf+0x116>
 8013830:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8013834:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8013838:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801383c:	ee35 0ac0 	vsub.f32	s0, s11, s0
 8013840:	4770      	bx	lr
 8013842:	4b30      	ldr	r3, [pc, #192]	; (8013904 <__ieee754_expf+0x184>)
 8013844:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8013908 <__ieee754_expf+0x188>
 8013848:	eddf 6a30 	vldr	s13, [pc, #192]	; 801390c <__ieee754_expf+0x18c>
 801384c:	4413      	add	r3, r2
 801384e:	edd3 7a00 	vldr	s15, [r3]
 8013852:	eee0 7a07 	vfma.f32	s15, s0, s14
 8013856:	eeb0 7a40 	vmov.f32	s14, s0
 801385a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801385e:	ee17 2a90 	vmov	r2, s15
 8013862:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013866:	eea7 7ae6 	vfms.f32	s14, s15, s13
 801386a:	eddf 6a29 	vldr	s13, [pc, #164]	; 8013910 <__ieee754_expf+0x190>
 801386e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8013872:	e7be      	b.n	80137f2 <__ieee754_expf+0x72>
 8013874:	f1b3 5f50 	cmp.w	r3, #872415232	; 0x34000000
 8013878:	d20b      	bcs.n	8013892 <__ieee754_expf+0x112>
 801387a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8013914 <__ieee754_expf+0x194>
 801387e:	ee70 6a26 	vadd.f32	s13, s0, s13
 8013882:	eef4 6ae5 	vcmpe.f32	s13, s11
 8013886:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801388a:	dd02      	ble.n	8013892 <__ieee754_expf+0x112>
 801388c:	ee30 0a25 	vadd.f32	s0, s0, s11
 8013890:	4770      	bx	lr
 8013892:	2200      	movs	r2, #0
 8013894:	e7af      	b.n	80137f6 <__ieee754_expf+0x76>
 8013896:	ee36 6a66 	vsub.f32	s12, s12, s13
 801389a:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 801389e:	eec5 6a06 	vdiv.f32	s13, s10, s12
 80138a2:	bfb8      	it	lt
 80138a4:	3264      	addlt	r2, #100	; 0x64
 80138a6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80138aa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80138ae:	ee75 7ae7 	vsub.f32	s15, s11, s15
 80138b2:	ee17 3a90 	vmov	r3, s15
 80138b6:	bfab      	itete	ge
 80138b8:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 80138bc:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 80138c0:	ee00 3a10 	vmovge	s0, r3
 80138c4:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 8013918 <__ieee754_expf+0x198>
 80138c8:	bfbc      	itt	lt
 80138ca:	ee00 3a10 	vmovlt	s0, r3
 80138ce:	ee20 0a27 	vmullt.f32	s0, s0, s15
 80138d2:	4770      	bx	lr
 80138d4:	00000000 	.word	0x00000000
 80138d8:	42b17217 	.word	0x42b17217
 80138dc:	42cff1b5 	.word	0x42cff1b5
 80138e0:	3eb17218 	.word	0x3eb17218
 80138e4:	3f851591 	.word	0x3f851591
 80138e8:	08016d60 	.word	0x08016d60
 80138ec:	08016d68 	.word	0x08016d68
 80138f0:	3331bb4c 	.word	0x3331bb4c
 80138f4:	b5ddea0e 	.word	0xb5ddea0e
 80138f8:	388ab355 	.word	0x388ab355
 80138fc:	bb360b61 	.word	0xbb360b61
 8013900:	3e2aaaab 	.word	0x3e2aaaab
 8013904:	08016d58 	.word	0x08016d58
 8013908:	3fb8aa3b 	.word	0x3fb8aa3b
 801390c:	3f317180 	.word	0x3f317180
 8013910:	3717f7d1 	.word	0x3717f7d1
 8013914:	7149f2ca 	.word	0x7149f2ca
 8013918:	0d800000 	.word	0x0d800000

0801391c <with_errnof>:
 801391c:	b513      	push	{r0, r1, r4, lr}
 801391e:	4604      	mov	r4, r0
 8013920:	ed8d 0a01 	vstr	s0, [sp, #4]
 8013924:	f000 fe6a 	bl	80145fc <__errno>
 8013928:	ed9d 0a01 	vldr	s0, [sp, #4]
 801392c:	6004      	str	r4, [r0, #0]
 801392e:	b002      	add	sp, #8
 8013930:	bd10      	pop	{r4, pc}

08013932 <xflowf>:
 8013932:	b130      	cbz	r0, 8013942 <xflowf+0x10>
 8013934:	eef1 7a40 	vneg.f32	s15, s0
 8013938:	ee27 0a80 	vmul.f32	s0, s15, s0
 801393c:	2022      	movs	r0, #34	; 0x22
 801393e:	f7ff bfed 	b.w	801391c <with_errnof>
 8013942:	eef0 7a40 	vmov.f32	s15, s0
 8013946:	e7f7      	b.n	8013938 <xflowf+0x6>

08013948 <__math_uflowf>:
 8013948:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8013950 <__math_uflowf+0x8>
 801394c:	f7ff bff1 	b.w	8013932 <xflowf>
 8013950:	10000000 	.word	0x10000000

08013954 <__math_oflowf>:
 8013954:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801395c <__math_oflowf+0x8>
 8013958:	f7ff bfeb 	b.w	8013932 <xflowf>
 801395c:	70000000 	.word	0x70000000

08013960 <__cvt>:
 8013960:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013964:	ec55 4b10 	vmov	r4, r5, d0
 8013968:	2d00      	cmp	r5, #0
 801396a:	460e      	mov	r6, r1
 801396c:	4619      	mov	r1, r3
 801396e:	462b      	mov	r3, r5
 8013970:	bfbb      	ittet	lt
 8013972:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8013976:	461d      	movlt	r5, r3
 8013978:	2300      	movge	r3, #0
 801397a:	232d      	movlt	r3, #45	; 0x2d
 801397c:	700b      	strb	r3, [r1, #0]
 801397e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013980:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8013984:	4691      	mov	r9, r2
 8013986:	f023 0820 	bic.w	r8, r3, #32
 801398a:	bfbc      	itt	lt
 801398c:	4622      	movlt	r2, r4
 801398e:	4614      	movlt	r4, r2
 8013990:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8013994:	d005      	beq.n	80139a2 <__cvt+0x42>
 8013996:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801399a:	d100      	bne.n	801399e <__cvt+0x3e>
 801399c:	3601      	adds	r6, #1
 801399e:	2102      	movs	r1, #2
 80139a0:	e000      	b.n	80139a4 <__cvt+0x44>
 80139a2:	2103      	movs	r1, #3
 80139a4:	ab03      	add	r3, sp, #12
 80139a6:	9301      	str	r3, [sp, #4]
 80139a8:	ab02      	add	r3, sp, #8
 80139aa:	9300      	str	r3, [sp, #0]
 80139ac:	ec45 4b10 	vmov	d0, r4, r5
 80139b0:	4653      	mov	r3, sl
 80139b2:	4632      	mov	r2, r6
 80139b4:	f000 fee8 	bl	8014788 <_dtoa_r>
 80139b8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80139bc:	4607      	mov	r7, r0
 80139be:	d102      	bne.n	80139c6 <__cvt+0x66>
 80139c0:	f019 0f01 	tst.w	r9, #1
 80139c4:	d022      	beq.n	8013a0c <__cvt+0xac>
 80139c6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80139ca:	eb07 0906 	add.w	r9, r7, r6
 80139ce:	d110      	bne.n	80139f2 <__cvt+0x92>
 80139d0:	783b      	ldrb	r3, [r7, #0]
 80139d2:	2b30      	cmp	r3, #48	; 0x30
 80139d4:	d10a      	bne.n	80139ec <__cvt+0x8c>
 80139d6:	2200      	movs	r2, #0
 80139d8:	2300      	movs	r3, #0
 80139da:	4620      	mov	r0, r4
 80139dc:	4629      	mov	r1, r5
 80139de:	f7ed f88b 	bl	8000af8 <__aeabi_dcmpeq>
 80139e2:	b918      	cbnz	r0, 80139ec <__cvt+0x8c>
 80139e4:	f1c6 0601 	rsb	r6, r6, #1
 80139e8:	f8ca 6000 	str.w	r6, [sl]
 80139ec:	f8da 3000 	ldr.w	r3, [sl]
 80139f0:	4499      	add	r9, r3
 80139f2:	2200      	movs	r2, #0
 80139f4:	2300      	movs	r3, #0
 80139f6:	4620      	mov	r0, r4
 80139f8:	4629      	mov	r1, r5
 80139fa:	f7ed f87d 	bl	8000af8 <__aeabi_dcmpeq>
 80139fe:	b108      	cbz	r0, 8013a04 <__cvt+0xa4>
 8013a00:	f8cd 900c 	str.w	r9, [sp, #12]
 8013a04:	2230      	movs	r2, #48	; 0x30
 8013a06:	9b03      	ldr	r3, [sp, #12]
 8013a08:	454b      	cmp	r3, r9
 8013a0a:	d307      	bcc.n	8013a1c <__cvt+0xbc>
 8013a0c:	9b03      	ldr	r3, [sp, #12]
 8013a0e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013a10:	1bdb      	subs	r3, r3, r7
 8013a12:	4638      	mov	r0, r7
 8013a14:	6013      	str	r3, [r2, #0]
 8013a16:	b004      	add	sp, #16
 8013a18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013a1c:	1c59      	adds	r1, r3, #1
 8013a1e:	9103      	str	r1, [sp, #12]
 8013a20:	701a      	strb	r2, [r3, #0]
 8013a22:	e7f0      	b.n	8013a06 <__cvt+0xa6>

08013a24 <__exponent>:
 8013a24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013a26:	4603      	mov	r3, r0
 8013a28:	2900      	cmp	r1, #0
 8013a2a:	bfb8      	it	lt
 8013a2c:	4249      	neglt	r1, r1
 8013a2e:	f803 2b02 	strb.w	r2, [r3], #2
 8013a32:	bfb4      	ite	lt
 8013a34:	222d      	movlt	r2, #45	; 0x2d
 8013a36:	222b      	movge	r2, #43	; 0x2b
 8013a38:	2909      	cmp	r1, #9
 8013a3a:	7042      	strb	r2, [r0, #1]
 8013a3c:	dd2a      	ble.n	8013a94 <__exponent+0x70>
 8013a3e:	f10d 0207 	add.w	r2, sp, #7
 8013a42:	4617      	mov	r7, r2
 8013a44:	260a      	movs	r6, #10
 8013a46:	4694      	mov	ip, r2
 8013a48:	fb91 f5f6 	sdiv	r5, r1, r6
 8013a4c:	fb06 1415 	mls	r4, r6, r5, r1
 8013a50:	3430      	adds	r4, #48	; 0x30
 8013a52:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8013a56:	460c      	mov	r4, r1
 8013a58:	2c63      	cmp	r4, #99	; 0x63
 8013a5a:	f102 32ff 	add.w	r2, r2, #4294967295
 8013a5e:	4629      	mov	r1, r5
 8013a60:	dcf1      	bgt.n	8013a46 <__exponent+0x22>
 8013a62:	3130      	adds	r1, #48	; 0x30
 8013a64:	f1ac 0402 	sub.w	r4, ip, #2
 8013a68:	f802 1c01 	strb.w	r1, [r2, #-1]
 8013a6c:	1c41      	adds	r1, r0, #1
 8013a6e:	4622      	mov	r2, r4
 8013a70:	42ba      	cmp	r2, r7
 8013a72:	d30a      	bcc.n	8013a8a <__exponent+0x66>
 8013a74:	f10d 0209 	add.w	r2, sp, #9
 8013a78:	eba2 020c 	sub.w	r2, r2, ip
 8013a7c:	42bc      	cmp	r4, r7
 8013a7e:	bf88      	it	hi
 8013a80:	2200      	movhi	r2, #0
 8013a82:	4413      	add	r3, r2
 8013a84:	1a18      	subs	r0, r3, r0
 8013a86:	b003      	add	sp, #12
 8013a88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013a8a:	f812 5b01 	ldrb.w	r5, [r2], #1
 8013a8e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8013a92:	e7ed      	b.n	8013a70 <__exponent+0x4c>
 8013a94:	2330      	movs	r3, #48	; 0x30
 8013a96:	3130      	adds	r1, #48	; 0x30
 8013a98:	7083      	strb	r3, [r0, #2]
 8013a9a:	70c1      	strb	r1, [r0, #3]
 8013a9c:	1d03      	adds	r3, r0, #4
 8013a9e:	e7f1      	b.n	8013a84 <__exponent+0x60>

08013aa0 <_printf_float>:
 8013aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013aa4:	ed2d 8b02 	vpush	{d8}
 8013aa8:	b08d      	sub	sp, #52	; 0x34
 8013aaa:	460c      	mov	r4, r1
 8013aac:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8013ab0:	4616      	mov	r6, r2
 8013ab2:	461f      	mov	r7, r3
 8013ab4:	4605      	mov	r5, r0
 8013ab6:	f000 fd01 	bl	80144bc <_localeconv_r>
 8013aba:	f8d0 a000 	ldr.w	sl, [r0]
 8013abe:	4650      	mov	r0, sl
 8013ac0:	f7ec fbee 	bl	80002a0 <strlen>
 8013ac4:	2300      	movs	r3, #0
 8013ac6:	930a      	str	r3, [sp, #40]	; 0x28
 8013ac8:	6823      	ldr	r3, [r4, #0]
 8013aca:	9305      	str	r3, [sp, #20]
 8013acc:	f8d8 3000 	ldr.w	r3, [r8]
 8013ad0:	f894 b018 	ldrb.w	fp, [r4, #24]
 8013ad4:	3307      	adds	r3, #7
 8013ad6:	f023 0307 	bic.w	r3, r3, #7
 8013ada:	f103 0208 	add.w	r2, r3, #8
 8013ade:	f8c8 2000 	str.w	r2, [r8]
 8013ae2:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013ae6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8013aea:	9307      	str	r3, [sp, #28]
 8013aec:	f8cd 8018 	str.w	r8, [sp, #24]
 8013af0:	ee08 0a10 	vmov	s16, r0
 8013af4:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8013af8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013afc:	4b9e      	ldr	r3, [pc, #632]	; (8013d78 <_printf_float+0x2d8>)
 8013afe:	f04f 32ff 	mov.w	r2, #4294967295
 8013b02:	f7ed f82b 	bl	8000b5c <__aeabi_dcmpun>
 8013b06:	bb88      	cbnz	r0, 8013b6c <_printf_float+0xcc>
 8013b08:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013b0c:	4b9a      	ldr	r3, [pc, #616]	; (8013d78 <_printf_float+0x2d8>)
 8013b0e:	f04f 32ff 	mov.w	r2, #4294967295
 8013b12:	f7ed f805 	bl	8000b20 <__aeabi_dcmple>
 8013b16:	bb48      	cbnz	r0, 8013b6c <_printf_float+0xcc>
 8013b18:	2200      	movs	r2, #0
 8013b1a:	2300      	movs	r3, #0
 8013b1c:	4640      	mov	r0, r8
 8013b1e:	4649      	mov	r1, r9
 8013b20:	f7ec fff4 	bl	8000b0c <__aeabi_dcmplt>
 8013b24:	b110      	cbz	r0, 8013b2c <_printf_float+0x8c>
 8013b26:	232d      	movs	r3, #45	; 0x2d
 8013b28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013b2c:	4a93      	ldr	r2, [pc, #588]	; (8013d7c <_printf_float+0x2dc>)
 8013b2e:	4b94      	ldr	r3, [pc, #592]	; (8013d80 <_printf_float+0x2e0>)
 8013b30:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8013b34:	bf94      	ite	ls
 8013b36:	4690      	movls	r8, r2
 8013b38:	4698      	movhi	r8, r3
 8013b3a:	2303      	movs	r3, #3
 8013b3c:	6123      	str	r3, [r4, #16]
 8013b3e:	9b05      	ldr	r3, [sp, #20]
 8013b40:	f023 0304 	bic.w	r3, r3, #4
 8013b44:	6023      	str	r3, [r4, #0]
 8013b46:	f04f 0900 	mov.w	r9, #0
 8013b4a:	9700      	str	r7, [sp, #0]
 8013b4c:	4633      	mov	r3, r6
 8013b4e:	aa0b      	add	r2, sp, #44	; 0x2c
 8013b50:	4621      	mov	r1, r4
 8013b52:	4628      	mov	r0, r5
 8013b54:	f000 f9da 	bl	8013f0c <_printf_common>
 8013b58:	3001      	adds	r0, #1
 8013b5a:	f040 8090 	bne.w	8013c7e <_printf_float+0x1de>
 8013b5e:	f04f 30ff 	mov.w	r0, #4294967295
 8013b62:	b00d      	add	sp, #52	; 0x34
 8013b64:	ecbd 8b02 	vpop	{d8}
 8013b68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b6c:	4642      	mov	r2, r8
 8013b6e:	464b      	mov	r3, r9
 8013b70:	4640      	mov	r0, r8
 8013b72:	4649      	mov	r1, r9
 8013b74:	f7ec fff2 	bl	8000b5c <__aeabi_dcmpun>
 8013b78:	b140      	cbz	r0, 8013b8c <_printf_float+0xec>
 8013b7a:	464b      	mov	r3, r9
 8013b7c:	2b00      	cmp	r3, #0
 8013b7e:	bfbc      	itt	lt
 8013b80:	232d      	movlt	r3, #45	; 0x2d
 8013b82:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8013b86:	4a7f      	ldr	r2, [pc, #508]	; (8013d84 <_printf_float+0x2e4>)
 8013b88:	4b7f      	ldr	r3, [pc, #508]	; (8013d88 <_printf_float+0x2e8>)
 8013b8a:	e7d1      	b.n	8013b30 <_printf_float+0x90>
 8013b8c:	6863      	ldr	r3, [r4, #4]
 8013b8e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8013b92:	9206      	str	r2, [sp, #24]
 8013b94:	1c5a      	adds	r2, r3, #1
 8013b96:	d13f      	bne.n	8013c18 <_printf_float+0x178>
 8013b98:	2306      	movs	r3, #6
 8013b9a:	6063      	str	r3, [r4, #4]
 8013b9c:	9b05      	ldr	r3, [sp, #20]
 8013b9e:	6861      	ldr	r1, [r4, #4]
 8013ba0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8013ba4:	2300      	movs	r3, #0
 8013ba6:	9303      	str	r3, [sp, #12]
 8013ba8:	ab0a      	add	r3, sp, #40	; 0x28
 8013baa:	e9cd b301 	strd	fp, r3, [sp, #4]
 8013bae:	ab09      	add	r3, sp, #36	; 0x24
 8013bb0:	ec49 8b10 	vmov	d0, r8, r9
 8013bb4:	9300      	str	r3, [sp, #0]
 8013bb6:	6022      	str	r2, [r4, #0]
 8013bb8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8013bbc:	4628      	mov	r0, r5
 8013bbe:	f7ff fecf 	bl	8013960 <__cvt>
 8013bc2:	9b06      	ldr	r3, [sp, #24]
 8013bc4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013bc6:	2b47      	cmp	r3, #71	; 0x47
 8013bc8:	4680      	mov	r8, r0
 8013bca:	d108      	bne.n	8013bde <_printf_float+0x13e>
 8013bcc:	1cc8      	adds	r0, r1, #3
 8013bce:	db02      	blt.n	8013bd6 <_printf_float+0x136>
 8013bd0:	6863      	ldr	r3, [r4, #4]
 8013bd2:	4299      	cmp	r1, r3
 8013bd4:	dd41      	ble.n	8013c5a <_printf_float+0x1ba>
 8013bd6:	f1ab 0302 	sub.w	r3, fp, #2
 8013bda:	fa5f fb83 	uxtb.w	fp, r3
 8013bde:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8013be2:	d820      	bhi.n	8013c26 <_printf_float+0x186>
 8013be4:	3901      	subs	r1, #1
 8013be6:	465a      	mov	r2, fp
 8013be8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8013bec:	9109      	str	r1, [sp, #36]	; 0x24
 8013bee:	f7ff ff19 	bl	8013a24 <__exponent>
 8013bf2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013bf4:	1813      	adds	r3, r2, r0
 8013bf6:	2a01      	cmp	r2, #1
 8013bf8:	4681      	mov	r9, r0
 8013bfa:	6123      	str	r3, [r4, #16]
 8013bfc:	dc02      	bgt.n	8013c04 <_printf_float+0x164>
 8013bfe:	6822      	ldr	r2, [r4, #0]
 8013c00:	07d2      	lsls	r2, r2, #31
 8013c02:	d501      	bpl.n	8013c08 <_printf_float+0x168>
 8013c04:	3301      	adds	r3, #1
 8013c06:	6123      	str	r3, [r4, #16]
 8013c08:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8013c0c:	2b00      	cmp	r3, #0
 8013c0e:	d09c      	beq.n	8013b4a <_printf_float+0xaa>
 8013c10:	232d      	movs	r3, #45	; 0x2d
 8013c12:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013c16:	e798      	b.n	8013b4a <_printf_float+0xaa>
 8013c18:	9a06      	ldr	r2, [sp, #24]
 8013c1a:	2a47      	cmp	r2, #71	; 0x47
 8013c1c:	d1be      	bne.n	8013b9c <_printf_float+0xfc>
 8013c1e:	2b00      	cmp	r3, #0
 8013c20:	d1bc      	bne.n	8013b9c <_printf_float+0xfc>
 8013c22:	2301      	movs	r3, #1
 8013c24:	e7b9      	b.n	8013b9a <_printf_float+0xfa>
 8013c26:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8013c2a:	d118      	bne.n	8013c5e <_printf_float+0x1be>
 8013c2c:	2900      	cmp	r1, #0
 8013c2e:	6863      	ldr	r3, [r4, #4]
 8013c30:	dd0b      	ble.n	8013c4a <_printf_float+0x1aa>
 8013c32:	6121      	str	r1, [r4, #16]
 8013c34:	b913      	cbnz	r3, 8013c3c <_printf_float+0x19c>
 8013c36:	6822      	ldr	r2, [r4, #0]
 8013c38:	07d0      	lsls	r0, r2, #31
 8013c3a:	d502      	bpl.n	8013c42 <_printf_float+0x1a2>
 8013c3c:	3301      	adds	r3, #1
 8013c3e:	440b      	add	r3, r1
 8013c40:	6123      	str	r3, [r4, #16]
 8013c42:	65a1      	str	r1, [r4, #88]	; 0x58
 8013c44:	f04f 0900 	mov.w	r9, #0
 8013c48:	e7de      	b.n	8013c08 <_printf_float+0x168>
 8013c4a:	b913      	cbnz	r3, 8013c52 <_printf_float+0x1b2>
 8013c4c:	6822      	ldr	r2, [r4, #0]
 8013c4e:	07d2      	lsls	r2, r2, #31
 8013c50:	d501      	bpl.n	8013c56 <_printf_float+0x1b6>
 8013c52:	3302      	adds	r3, #2
 8013c54:	e7f4      	b.n	8013c40 <_printf_float+0x1a0>
 8013c56:	2301      	movs	r3, #1
 8013c58:	e7f2      	b.n	8013c40 <_printf_float+0x1a0>
 8013c5a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8013c5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013c60:	4299      	cmp	r1, r3
 8013c62:	db05      	blt.n	8013c70 <_printf_float+0x1d0>
 8013c64:	6823      	ldr	r3, [r4, #0]
 8013c66:	6121      	str	r1, [r4, #16]
 8013c68:	07d8      	lsls	r0, r3, #31
 8013c6a:	d5ea      	bpl.n	8013c42 <_printf_float+0x1a2>
 8013c6c:	1c4b      	adds	r3, r1, #1
 8013c6e:	e7e7      	b.n	8013c40 <_printf_float+0x1a0>
 8013c70:	2900      	cmp	r1, #0
 8013c72:	bfd4      	ite	le
 8013c74:	f1c1 0202 	rsble	r2, r1, #2
 8013c78:	2201      	movgt	r2, #1
 8013c7a:	4413      	add	r3, r2
 8013c7c:	e7e0      	b.n	8013c40 <_printf_float+0x1a0>
 8013c7e:	6823      	ldr	r3, [r4, #0]
 8013c80:	055a      	lsls	r2, r3, #21
 8013c82:	d407      	bmi.n	8013c94 <_printf_float+0x1f4>
 8013c84:	6923      	ldr	r3, [r4, #16]
 8013c86:	4642      	mov	r2, r8
 8013c88:	4631      	mov	r1, r6
 8013c8a:	4628      	mov	r0, r5
 8013c8c:	47b8      	blx	r7
 8013c8e:	3001      	adds	r0, #1
 8013c90:	d12c      	bne.n	8013cec <_printf_float+0x24c>
 8013c92:	e764      	b.n	8013b5e <_printf_float+0xbe>
 8013c94:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8013c98:	f240 80e0 	bls.w	8013e5c <_printf_float+0x3bc>
 8013c9c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8013ca0:	2200      	movs	r2, #0
 8013ca2:	2300      	movs	r3, #0
 8013ca4:	f7ec ff28 	bl	8000af8 <__aeabi_dcmpeq>
 8013ca8:	2800      	cmp	r0, #0
 8013caa:	d034      	beq.n	8013d16 <_printf_float+0x276>
 8013cac:	4a37      	ldr	r2, [pc, #220]	; (8013d8c <_printf_float+0x2ec>)
 8013cae:	2301      	movs	r3, #1
 8013cb0:	4631      	mov	r1, r6
 8013cb2:	4628      	mov	r0, r5
 8013cb4:	47b8      	blx	r7
 8013cb6:	3001      	adds	r0, #1
 8013cb8:	f43f af51 	beq.w	8013b5e <_printf_float+0xbe>
 8013cbc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013cc0:	429a      	cmp	r2, r3
 8013cc2:	db02      	blt.n	8013cca <_printf_float+0x22a>
 8013cc4:	6823      	ldr	r3, [r4, #0]
 8013cc6:	07d8      	lsls	r0, r3, #31
 8013cc8:	d510      	bpl.n	8013cec <_printf_float+0x24c>
 8013cca:	ee18 3a10 	vmov	r3, s16
 8013cce:	4652      	mov	r2, sl
 8013cd0:	4631      	mov	r1, r6
 8013cd2:	4628      	mov	r0, r5
 8013cd4:	47b8      	blx	r7
 8013cd6:	3001      	adds	r0, #1
 8013cd8:	f43f af41 	beq.w	8013b5e <_printf_float+0xbe>
 8013cdc:	f04f 0800 	mov.w	r8, #0
 8013ce0:	f104 091a 	add.w	r9, r4, #26
 8013ce4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013ce6:	3b01      	subs	r3, #1
 8013ce8:	4543      	cmp	r3, r8
 8013cea:	dc09      	bgt.n	8013d00 <_printf_float+0x260>
 8013cec:	6823      	ldr	r3, [r4, #0]
 8013cee:	079b      	lsls	r3, r3, #30
 8013cf0:	f100 8107 	bmi.w	8013f02 <_printf_float+0x462>
 8013cf4:	68e0      	ldr	r0, [r4, #12]
 8013cf6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013cf8:	4298      	cmp	r0, r3
 8013cfa:	bfb8      	it	lt
 8013cfc:	4618      	movlt	r0, r3
 8013cfe:	e730      	b.n	8013b62 <_printf_float+0xc2>
 8013d00:	2301      	movs	r3, #1
 8013d02:	464a      	mov	r2, r9
 8013d04:	4631      	mov	r1, r6
 8013d06:	4628      	mov	r0, r5
 8013d08:	47b8      	blx	r7
 8013d0a:	3001      	adds	r0, #1
 8013d0c:	f43f af27 	beq.w	8013b5e <_printf_float+0xbe>
 8013d10:	f108 0801 	add.w	r8, r8, #1
 8013d14:	e7e6      	b.n	8013ce4 <_printf_float+0x244>
 8013d16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013d18:	2b00      	cmp	r3, #0
 8013d1a:	dc39      	bgt.n	8013d90 <_printf_float+0x2f0>
 8013d1c:	4a1b      	ldr	r2, [pc, #108]	; (8013d8c <_printf_float+0x2ec>)
 8013d1e:	2301      	movs	r3, #1
 8013d20:	4631      	mov	r1, r6
 8013d22:	4628      	mov	r0, r5
 8013d24:	47b8      	blx	r7
 8013d26:	3001      	adds	r0, #1
 8013d28:	f43f af19 	beq.w	8013b5e <_printf_float+0xbe>
 8013d2c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8013d30:	4313      	orrs	r3, r2
 8013d32:	d102      	bne.n	8013d3a <_printf_float+0x29a>
 8013d34:	6823      	ldr	r3, [r4, #0]
 8013d36:	07d9      	lsls	r1, r3, #31
 8013d38:	d5d8      	bpl.n	8013cec <_printf_float+0x24c>
 8013d3a:	ee18 3a10 	vmov	r3, s16
 8013d3e:	4652      	mov	r2, sl
 8013d40:	4631      	mov	r1, r6
 8013d42:	4628      	mov	r0, r5
 8013d44:	47b8      	blx	r7
 8013d46:	3001      	adds	r0, #1
 8013d48:	f43f af09 	beq.w	8013b5e <_printf_float+0xbe>
 8013d4c:	f04f 0900 	mov.w	r9, #0
 8013d50:	f104 0a1a 	add.w	sl, r4, #26
 8013d54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013d56:	425b      	negs	r3, r3
 8013d58:	454b      	cmp	r3, r9
 8013d5a:	dc01      	bgt.n	8013d60 <_printf_float+0x2c0>
 8013d5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013d5e:	e792      	b.n	8013c86 <_printf_float+0x1e6>
 8013d60:	2301      	movs	r3, #1
 8013d62:	4652      	mov	r2, sl
 8013d64:	4631      	mov	r1, r6
 8013d66:	4628      	mov	r0, r5
 8013d68:	47b8      	blx	r7
 8013d6a:	3001      	adds	r0, #1
 8013d6c:	f43f aef7 	beq.w	8013b5e <_printf_float+0xbe>
 8013d70:	f109 0901 	add.w	r9, r9, #1
 8013d74:	e7ee      	b.n	8013d54 <_printf_float+0x2b4>
 8013d76:	bf00      	nop
 8013d78:	7fefffff 	.word	0x7fefffff
 8013d7c:	08016d70 	.word	0x08016d70
 8013d80:	08016d74 	.word	0x08016d74
 8013d84:	08016d78 	.word	0x08016d78
 8013d88:	08016d7c 	.word	0x08016d7c
 8013d8c:	08016d80 	.word	0x08016d80
 8013d90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013d92:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013d94:	429a      	cmp	r2, r3
 8013d96:	bfa8      	it	ge
 8013d98:	461a      	movge	r2, r3
 8013d9a:	2a00      	cmp	r2, #0
 8013d9c:	4691      	mov	r9, r2
 8013d9e:	dc37      	bgt.n	8013e10 <_printf_float+0x370>
 8013da0:	f04f 0b00 	mov.w	fp, #0
 8013da4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013da8:	f104 021a 	add.w	r2, r4, #26
 8013dac:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013dae:	9305      	str	r3, [sp, #20]
 8013db0:	eba3 0309 	sub.w	r3, r3, r9
 8013db4:	455b      	cmp	r3, fp
 8013db6:	dc33      	bgt.n	8013e20 <_printf_float+0x380>
 8013db8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013dbc:	429a      	cmp	r2, r3
 8013dbe:	db3b      	blt.n	8013e38 <_printf_float+0x398>
 8013dc0:	6823      	ldr	r3, [r4, #0]
 8013dc2:	07da      	lsls	r2, r3, #31
 8013dc4:	d438      	bmi.n	8013e38 <_printf_float+0x398>
 8013dc6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8013dca:	eba2 0903 	sub.w	r9, r2, r3
 8013dce:	9b05      	ldr	r3, [sp, #20]
 8013dd0:	1ad2      	subs	r2, r2, r3
 8013dd2:	4591      	cmp	r9, r2
 8013dd4:	bfa8      	it	ge
 8013dd6:	4691      	movge	r9, r2
 8013dd8:	f1b9 0f00 	cmp.w	r9, #0
 8013ddc:	dc35      	bgt.n	8013e4a <_printf_float+0x3aa>
 8013dde:	f04f 0800 	mov.w	r8, #0
 8013de2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013de6:	f104 0a1a 	add.w	sl, r4, #26
 8013dea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013dee:	1a9b      	subs	r3, r3, r2
 8013df0:	eba3 0309 	sub.w	r3, r3, r9
 8013df4:	4543      	cmp	r3, r8
 8013df6:	f77f af79 	ble.w	8013cec <_printf_float+0x24c>
 8013dfa:	2301      	movs	r3, #1
 8013dfc:	4652      	mov	r2, sl
 8013dfe:	4631      	mov	r1, r6
 8013e00:	4628      	mov	r0, r5
 8013e02:	47b8      	blx	r7
 8013e04:	3001      	adds	r0, #1
 8013e06:	f43f aeaa 	beq.w	8013b5e <_printf_float+0xbe>
 8013e0a:	f108 0801 	add.w	r8, r8, #1
 8013e0e:	e7ec      	b.n	8013dea <_printf_float+0x34a>
 8013e10:	4613      	mov	r3, r2
 8013e12:	4631      	mov	r1, r6
 8013e14:	4642      	mov	r2, r8
 8013e16:	4628      	mov	r0, r5
 8013e18:	47b8      	blx	r7
 8013e1a:	3001      	adds	r0, #1
 8013e1c:	d1c0      	bne.n	8013da0 <_printf_float+0x300>
 8013e1e:	e69e      	b.n	8013b5e <_printf_float+0xbe>
 8013e20:	2301      	movs	r3, #1
 8013e22:	4631      	mov	r1, r6
 8013e24:	4628      	mov	r0, r5
 8013e26:	9205      	str	r2, [sp, #20]
 8013e28:	47b8      	blx	r7
 8013e2a:	3001      	adds	r0, #1
 8013e2c:	f43f ae97 	beq.w	8013b5e <_printf_float+0xbe>
 8013e30:	9a05      	ldr	r2, [sp, #20]
 8013e32:	f10b 0b01 	add.w	fp, fp, #1
 8013e36:	e7b9      	b.n	8013dac <_printf_float+0x30c>
 8013e38:	ee18 3a10 	vmov	r3, s16
 8013e3c:	4652      	mov	r2, sl
 8013e3e:	4631      	mov	r1, r6
 8013e40:	4628      	mov	r0, r5
 8013e42:	47b8      	blx	r7
 8013e44:	3001      	adds	r0, #1
 8013e46:	d1be      	bne.n	8013dc6 <_printf_float+0x326>
 8013e48:	e689      	b.n	8013b5e <_printf_float+0xbe>
 8013e4a:	9a05      	ldr	r2, [sp, #20]
 8013e4c:	464b      	mov	r3, r9
 8013e4e:	4442      	add	r2, r8
 8013e50:	4631      	mov	r1, r6
 8013e52:	4628      	mov	r0, r5
 8013e54:	47b8      	blx	r7
 8013e56:	3001      	adds	r0, #1
 8013e58:	d1c1      	bne.n	8013dde <_printf_float+0x33e>
 8013e5a:	e680      	b.n	8013b5e <_printf_float+0xbe>
 8013e5c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013e5e:	2a01      	cmp	r2, #1
 8013e60:	dc01      	bgt.n	8013e66 <_printf_float+0x3c6>
 8013e62:	07db      	lsls	r3, r3, #31
 8013e64:	d53a      	bpl.n	8013edc <_printf_float+0x43c>
 8013e66:	2301      	movs	r3, #1
 8013e68:	4642      	mov	r2, r8
 8013e6a:	4631      	mov	r1, r6
 8013e6c:	4628      	mov	r0, r5
 8013e6e:	47b8      	blx	r7
 8013e70:	3001      	adds	r0, #1
 8013e72:	f43f ae74 	beq.w	8013b5e <_printf_float+0xbe>
 8013e76:	ee18 3a10 	vmov	r3, s16
 8013e7a:	4652      	mov	r2, sl
 8013e7c:	4631      	mov	r1, r6
 8013e7e:	4628      	mov	r0, r5
 8013e80:	47b8      	blx	r7
 8013e82:	3001      	adds	r0, #1
 8013e84:	f43f ae6b 	beq.w	8013b5e <_printf_float+0xbe>
 8013e88:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8013e8c:	2200      	movs	r2, #0
 8013e8e:	2300      	movs	r3, #0
 8013e90:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8013e94:	f7ec fe30 	bl	8000af8 <__aeabi_dcmpeq>
 8013e98:	b9d8      	cbnz	r0, 8013ed2 <_printf_float+0x432>
 8013e9a:	f10a 33ff 	add.w	r3, sl, #4294967295
 8013e9e:	f108 0201 	add.w	r2, r8, #1
 8013ea2:	4631      	mov	r1, r6
 8013ea4:	4628      	mov	r0, r5
 8013ea6:	47b8      	blx	r7
 8013ea8:	3001      	adds	r0, #1
 8013eaa:	d10e      	bne.n	8013eca <_printf_float+0x42a>
 8013eac:	e657      	b.n	8013b5e <_printf_float+0xbe>
 8013eae:	2301      	movs	r3, #1
 8013eb0:	4652      	mov	r2, sl
 8013eb2:	4631      	mov	r1, r6
 8013eb4:	4628      	mov	r0, r5
 8013eb6:	47b8      	blx	r7
 8013eb8:	3001      	adds	r0, #1
 8013eba:	f43f ae50 	beq.w	8013b5e <_printf_float+0xbe>
 8013ebe:	f108 0801 	add.w	r8, r8, #1
 8013ec2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013ec4:	3b01      	subs	r3, #1
 8013ec6:	4543      	cmp	r3, r8
 8013ec8:	dcf1      	bgt.n	8013eae <_printf_float+0x40e>
 8013eca:	464b      	mov	r3, r9
 8013ecc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8013ed0:	e6da      	b.n	8013c88 <_printf_float+0x1e8>
 8013ed2:	f04f 0800 	mov.w	r8, #0
 8013ed6:	f104 0a1a 	add.w	sl, r4, #26
 8013eda:	e7f2      	b.n	8013ec2 <_printf_float+0x422>
 8013edc:	2301      	movs	r3, #1
 8013ede:	4642      	mov	r2, r8
 8013ee0:	e7df      	b.n	8013ea2 <_printf_float+0x402>
 8013ee2:	2301      	movs	r3, #1
 8013ee4:	464a      	mov	r2, r9
 8013ee6:	4631      	mov	r1, r6
 8013ee8:	4628      	mov	r0, r5
 8013eea:	47b8      	blx	r7
 8013eec:	3001      	adds	r0, #1
 8013eee:	f43f ae36 	beq.w	8013b5e <_printf_float+0xbe>
 8013ef2:	f108 0801 	add.w	r8, r8, #1
 8013ef6:	68e3      	ldr	r3, [r4, #12]
 8013ef8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013efa:	1a5b      	subs	r3, r3, r1
 8013efc:	4543      	cmp	r3, r8
 8013efe:	dcf0      	bgt.n	8013ee2 <_printf_float+0x442>
 8013f00:	e6f8      	b.n	8013cf4 <_printf_float+0x254>
 8013f02:	f04f 0800 	mov.w	r8, #0
 8013f06:	f104 0919 	add.w	r9, r4, #25
 8013f0a:	e7f4      	b.n	8013ef6 <_printf_float+0x456>

08013f0c <_printf_common>:
 8013f0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013f10:	4616      	mov	r6, r2
 8013f12:	4699      	mov	r9, r3
 8013f14:	688a      	ldr	r2, [r1, #8]
 8013f16:	690b      	ldr	r3, [r1, #16]
 8013f18:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013f1c:	4293      	cmp	r3, r2
 8013f1e:	bfb8      	it	lt
 8013f20:	4613      	movlt	r3, r2
 8013f22:	6033      	str	r3, [r6, #0]
 8013f24:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013f28:	4607      	mov	r7, r0
 8013f2a:	460c      	mov	r4, r1
 8013f2c:	b10a      	cbz	r2, 8013f32 <_printf_common+0x26>
 8013f2e:	3301      	adds	r3, #1
 8013f30:	6033      	str	r3, [r6, #0]
 8013f32:	6823      	ldr	r3, [r4, #0]
 8013f34:	0699      	lsls	r1, r3, #26
 8013f36:	bf42      	ittt	mi
 8013f38:	6833      	ldrmi	r3, [r6, #0]
 8013f3a:	3302      	addmi	r3, #2
 8013f3c:	6033      	strmi	r3, [r6, #0]
 8013f3e:	6825      	ldr	r5, [r4, #0]
 8013f40:	f015 0506 	ands.w	r5, r5, #6
 8013f44:	d106      	bne.n	8013f54 <_printf_common+0x48>
 8013f46:	f104 0a19 	add.w	sl, r4, #25
 8013f4a:	68e3      	ldr	r3, [r4, #12]
 8013f4c:	6832      	ldr	r2, [r6, #0]
 8013f4e:	1a9b      	subs	r3, r3, r2
 8013f50:	42ab      	cmp	r3, r5
 8013f52:	dc26      	bgt.n	8013fa2 <_printf_common+0x96>
 8013f54:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8013f58:	1e13      	subs	r3, r2, #0
 8013f5a:	6822      	ldr	r2, [r4, #0]
 8013f5c:	bf18      	it	ne
 8013f5e:	2301      	movne	r3, #1
 8013f60:	0692      	lsls	r2, r2, #26
 8013f62:	d42b      	bmi.n	8013fbc <_printf_common+0xb0>
 8013f64:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013f68:	4649      	mov	r1, r9
 8013f6a:	4638      	mov	r0, r7
 8013f6c:	47c0      	blx	r8
 8013f6e:	3001      	adds	r0, #1
 8013f70:	d01e      	beq.n	8013fb0 <_printf_common+0xa4>
 8013f72:	6823      	ldr	r3, [r4, #0]
 8013f74:	6922      	ldr	r2, [r4, #16]
 8013f76:	f003 0306 	and.w	r3, r3, #6
 8013f7a:	2b04      	cmp	r3, #4
 8013f7c:	bf02      	ittt	eq
 8013f7e:	68e5      	ldreq	r5, [r4, #12]
 8013f80:	6833      	ldreq	r3, [r6, #0]
 8013f82:	1aed      	subeq	r5, r5, r3
 8013f84:	68a3      	ldr	r3, [r4, #8]
 8013f86:	bf0c      	ite	eq
 8013f88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013f8c:	2500      	movne	r5, #0
 8013f8e:	4293      	cmp	r3, r2
 8013f90:	bfc4      	itt	gt
 8013f92:	1a9b      	subgt	r3, r3, r2
 8013f94:	18ed      	addgt	r5, r5, r3
 8013f96:	2600      	movs	r6, #0
 8013f98:	341a      	adds	r4, #26
 8013f9a:	42b5      	cmp	r5, r6
 8013f9c:	d11a      	bne.n	8013fd4 <_printf_common+0xc8>
 8013f9e:	2000      	movs	r0, #0
 8013fa0:	e008      	b.n	8013fb4 <_printf_common+0xa8>
 8013fa2:	2301      	movs	r3, #1
 8013fa4:	4652      	mov	r2, sl
 8013fa6:	4649      	mov	r1, r9
 8013fa8:	4638      	mov	r0, r7
 8013faa:	47c0      	blx	r8
 8013fac:	3001      	adds	r0, #1
 8013fae:	d103      	bne.n	8013fb8 <_printf_common+0xac>
 8013fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8013fb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013fb8:	3501      	adds	r5, #1
 8013fba:	e7c6      	b.n	8013f4a <_printf_common+0x3e>
 8013fbc:	18e1      	adds	r1, r4, r3
 8013fbe:	1c5a      	adds	r2, r3, #1
 8013fc0:	2030      	movs	r0, #48	; 0x30
 8013fc2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013fc6:	4422      	add	r2, r4
 8013fc8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013fcc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013fd0:	3302      	adds	r3, #2
 8013fd2:	e7c7      	b.n	8013f64 <_printf_common+0x58>
 8013fd4:	2301      	movs	r3, #1
 8013fd6:	4622      	mov	r2, r4
 8013fd8:	4649      	mov	r1, r9
 8013fda:	4638      	mov	r0, r7
 8013fdc:	47c0      	blx	r8
 8013fde:	3001      	adds	r0, #1
 8013fe0:	d0e6      	beq.n	8013fb0 <_printf_common+0xa4>
 8013fe2:	3601      	adds	r6, #1
 8013fe4:	e7d9      	b.n	8013f9a <_printf_common+0x8e>
	...

08013fe8 <_printf_i>:
 8013fe8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013fec:	7e0f      	ldrb	r7, [r1, #24]
 8013fee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8013ff0:	2f78      	cmp	r7, #120	; 0x78
 8013ff2:	4691      	mov	r9, r2
 8013ff4:	4680      	mov	r8, r0
 8013ff6:	460c      	mov	r4, r1
 8013ff8:	469a      	mov	sl, r3
 8013ffa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8013ffe:	d807      	bhi.n	8014010 <_printf_i+0x28>
 8014000:	2f62      	cmp	r7, #98	; 0x62
 8014002:	d80a      	bhi.n	801401a <_printf_i+0x32>
 8014004:	2f00      	cmp	r7, #0
 8014006:	f000 80d4 	beq.w	80141b2 <_printf_i+0x1ca>
 801400a:	2f58      	cmp	r7, #88	; 0x58
 801400c:	f000 80c0 	beq.w	8014190 <_printf_i+0x1a8>
 8014010:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014014:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8014018:	e03a      	b.n	8014090 <_printf_i+0xa8>
 801401a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801401e:	2b15      	cmp	r3, #21
 8014020:	d8f6      	bhi.n	8014010 <_printf_i+0x28>
 8014022:	a101      	add	r1, pc, #4	; (adr r1, 8014028 <_printf_i+0x40>)
 8014024:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014028:	08014081 	.word	0x08014081
 801402c:	08014095 	.word	0x08014095
 8014030:	08014011 	.word	0x08014011
 8014034:	08014011 	.word	0x08014011
 8014038:	08014011 	.word	0x08014011
 801403c:	08014011 	.word	0x08014011
 8014040:	08014095 	.word	0x08014095
 8014044:	08014011 	.word	0x08014011
 8014048:	08014011 	.word	0x08014011
 801404c:	08014011 	.word	0x08014011
 8014050:	08014011 	.word	0x08014011
 8014054:	08014199 	.word	0x08014199
 8014058:	080140c1 	.word	0x080140c1
 801405c:	08014153 	.word	0x08014153
 8014060:	08014011 	.word	0x08014011
 8014064:	08014011 	.word	0x08014011
 8014068:	080141bb 	.word	0x080141bb
 801406c:	08014011 	.word	0x08014011
 8014070:	080140c1 	.word	0x080140c1
 8014074:	08014011 	.word	0x08014011
 8014078:	08014011 	.word	0x08014011
 801407c:	0801415b 	.word	0x0801415b
 8014080:	682b      	ldr	r3, [r5, #0]
 8014082:	1d1a      	adds	r2, r3, #4
 8014084:	681b      	ldr	r3, [r3, #0]
 8014086:	602a      	str	r2, [r5, #0]
 8014088:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801408c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014090:	2301      	movs	r3, #1
 8014092:	e09f      	b.n	80141d4 <_printf_i+0x1ec>
 8014094:	6820      	ldr	r0, [r4, #0]
 8014096:	682b      	ldr	r3, [r5, #0]
 8014098:	0607      	lsls	r7, r0, #24
 801409a:	f103 0104 	add.w	r1, r3, #4
 801409e:	6029      	str	r1, [r5, #0]
 80140a0:	d501      	bpl.n	80140a6 <_printf_i+0xbe>
 80140a2:	681e      	ldr	r6, [r3, #0]
 80140a4:	e003      	b.n	80140ae <_printf_i+0xc6>
 80140a6:	0646      	lsls	r6, r0, #25
 80140a8:	d5fb      	bpl.n	80140a2 <_printf_i+0xba>
 80140aa:	f9b3 6000 	ldrsh.w	r6, [r3]
 80140ae:	2e00      	cmp	r6, #0
 80140b0:	da03      	bge.n	80140ba <_printf_i+0xd2>
 80140b2:	232d      	movs	r3, #45	; 0x2d
 80140b4:	4276      	negs	r6, r6
 80140b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80140ba:	485a      	ldr	r0, [pc, #360]	; (8014224 <_printf_i+0x23c>)
 80140bc:	230a      	movs	r3, #10
 80140be:	e012      	b.n	80140e6 <_printf_i+0xfe>
 80140c0:	682b      	ldr	r3, [r5, #0]
 80140c2:	6820      	ldr	r0, [r4, #0]
 80140c4:	1d19      	adds	r1, r3, #4
 80140c6:	6029      	str	r1, [r5, #0]
 80140c8:	0605      	lsls	r5, r0, #24
 80140ca:	d501      	bpl.n	80140d0 <_printf_i+0xe8>
 80140cc:	681e      	ldr	r6, [r3, #0]
 80140ce:	e002      	b.n	80140d6 <_printf_i+0xee>
 80140d0:	0641      	lsls	r1, r0, #25
 80140d2:	d5fb      	bpl.n	80140cc <_printf_i+0xe4>
 80140d4:	881e      	ldrh	r6, [r3, #0]
 80140d6:	4853      	ldr	r0, [pc, #332]	; (8014224 <_printf_i+0x23c>)
 80140d8:	2f6f      	cmp	r7, #111	; 0x6f
 80140da:	bf0c      	ite	eq
 80140dc:	2308      	moveq	r3, #8
 80140de:	230a      	movne	r3, #10
 80140e0:	2100      	movs	r1, #0
 80140e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80140e6:	6865      	ldr	r5, [r4, #4]
 80140e8:	60a5      	str	r5, [r4, #8]
 80140ea:	2d00      	cmp	r5, #0
 80140ec:	bfa2      	ittt	ge
 80140ee:	6821      	ldrge	r1, [r4, #0]
 80140f0:	f021 0104 	bicge.w	r1, r1, #4
 80140f4:	6021      	strge	r1, [r4, #0]
 80140f6:	b90e      	cbnz	r6, 80140fc <_printf_i+0x114>
 80140f8:	2d00      	cmp	r5, #0
 80140fa:	d04b      	beq.n	8014194 <_printf_i+0x1ac>
 80140fc:	4615      	mov	r5, r2
 80140fe:	fbb6 f1f3 	udiv	r1, r6, r3
 8014102:	fb03 6711 	mls	r7, r3, r1, r6
 8014106:	5dc7      	ldrb	r7, [r0, r7]
 8014108:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801410c:	4637      	mov	r7, r6
 801410e:	42bb      	cmp	r3, r7
 8014110:	460e      	mov	r6, r1
 8014112:	d9f4      	bls.n	80140fe <_printf_i+0x116>
 8014114:	2b08      	cmp	r3, #8
 8014116:	d10b      	bne.n	8014130 <_printf_i+0x148>
 8014118:	6823      	ldr	r3, [r4, #0]
 801411a:	07de      	lsls	r6, r3, #31
 801411c:	d508      	bpl.n	8014130 <_printf_i+0x148>
 801411e:	6923      	ldr	r3, [r4, #16]
 8014120:	6861      	ldr	r1, [r4, #4]
 8014122:	4299      	cmp	r1, r3
 8014124:	bfde      	ittt	le
 8014126:	2330      	movle	r3, #48	; 0x30
 8014128:	f805 3c01 	strble.w	r3, [r5, #-1]
 801412c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8014130:	1b52      	subs	r2, r2, r5
 8014132:	6122      	str	r2, [r4, #16]
 8014134:	f8cd a000 	str.w	sl, [sp]
 8014138:	464b      	mov	r3, r9
 801413a:	aa03      	add	r2, sp, #12
 801413c:	4621      	mov	r1, r4
 801413e:	4640      	mov	r0, r8
 8014140:	f7ff fee4 	bl	8013f0c <_printf_common>
 8014144:	3001      	adds	r0, #1
 8014146:	d14a      	bne.n	80141de <_printf_i+0x1f6>
 8014148:	f04f 30ff 	mov.w	r0, #4294967295
 801414c:	b004      	add	sp, #16
 801414e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014152:	6823      	ldr	r3, [r4, #0]
 8014154:	f043 0320 	orr.w	r3, r3, #32
 8014158:	6023      	str	r3, [r4, #0]
 801415a:	4833      	ldr	r0, [pc, #204]	; (8014228 <_printf_i+0x240>)
 801415c:	2778      	movs	r7, #120	; 0x78
 801415e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8014162:	6823      	ldr	r3, [r4, #0]
 8014164:	6829      	ldr	r1, [r5, #0]
 8014166:	061f      	lsls	r7, r3, #24
 8014168:	f851 6b04 	ldr.w	r6, [r1], #4
 801416c:	d402      	bmi.n	8014174 <_printf_i+0x18c>
 801416e:	065f      	lsls	r7, r3, #25
 8014170:	bf48      	it	mi
 8014172:	b2b6      	uxthmi	r6, r6
 8014174:	07df      	lsls	r7, r3, #31
 8014176:	bf48      	it	mi
 8014178:	f043 0320 	orrmi.w	r3, r3, #32
 801417c:	6029      	str	r1, [r5, #0]
 801417e:	bf48      	it	mi
 8014180:	6023      	strmi	r3, [r4, #0]
 8014182:	b91e      	cbnz	r6, 801418c <_printf_i+0x1a4>
 8014184:	6823      	ldr	r3, [r4, #0]
 8014186:	f023 0320 	bic.w	r3, r3, #32
 801418a:	6023      	str	r3, [r4, #0]
 801418c:	2310      	movs	r3, #16
 801418e:	e7a7      	b.n	80140e0 <_printf_i+0xf8>
 8014190:	4824      	ldr	r0, [pc, #144]	; (8014224 <_printf_i+0x23c>)
 8014192:	e7e4      	b.n	801415e <_printf_i+0x176>
 8014194:	4615      	mov	r5, r2
 8014196:	e7bd      	b.n	8014114 <_printf_i+0x12c>
 8014198:	682b      	ldr	r3, [r5, #0]
 801419a:	6826      	ldr	r6, [r4, #0]
 801419c:	6961      	ldr	r1, [r4, #20]
 801419e:	1d18      	adds	r0, r3, #4
 80141a0:	6028      	str	r0, [r5, #0]
 80141a2:	0635      	lsls	r5, r6, #24
 80141a4:	681b      	ldr	r3, [r3, #0]
 80141a6:	d501      	bpl.n	80141ac <_printf_i+0x1c4>
 80141a8:	6019      	str	r1, [r3, #0]
 80141aa:	e002      	b.n	80141b2 <_printf_i+0x1ca>
 80141ac:	0670      	lsls	r0, r6, #25
 80141ae:	d5fb      	bpl.n	80141a8 <_printf_i+0x1c0>
 80141b0:	8019      	strh	r1, [r3, #0]
 80141b2:	2300      	movs	r3, #0
 80141b4:	6123      	str	r3, [r4, #16]
 80141b6:	4615      	mov	r5, r2
 80141b8:	e7bc      	b.n	8014134 <_printf_i+0x14c>
 80141ba:	682b      	ldr	r3, [r5, #0]
 80141bc:	1d1a      	adds	r2, r3, #4
 80141be:	602a      	str	r2, [r5, #0]
 80141c0:	681d      	ldr	r5, [r3, #0]
 80141c2:	6862      	ldr	r2, [r4, #4]
 80141c4:	2100      	movs	r1, #0
 80141c6:	4628      	mov	r0, r5
 80141c8:	f7ec f81a 	bl	8000200 <memchr>
 80141cc:	b108      	cbz	r0, 80141d2 <_printf_i+0x1ea>
 80141ce:	1b40      	subs	r0, r0, r5
 80141d0:	6060      	str	r0, [r4, #4]
 80141d2:	6863      	ldr	r3, [r4, #4]
 80141d4:	6123      	str	r3, [r4, #16]
 80141d6:	2300      	movs	r3, #0
 80141d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80141dc:	e7aa      	b.n	8014134 <_printf_i+0x14c>
 80141de:	6923      	ldr	r3, [r4, #16]
 80141e0:	462a      	mov	r2, r5
 80141e2:	4649      	mov	r1, r9
 80141e4:	4640      	mov	r0, r8
 80141e6:	47d0      	blx	sl
 80141e8:	3001      	adds	r0, #1
 80141ea:	d0ad      	beq.n	8014148 <_printf_i+0x160>
 80141ec:	6823      	ldr	r3, [r4, #0]
 80141ee:	079b      	lsls	r3, r3, #30
 80141f0:	d413      	bmi.n	801421a <_printf_i+0x232>
 80141f2:	68e0      	ldr	r0, [r4, #12]
 80141f4:	9b03      	ldr	r3, [sp, #12]
 80141f6:	4298      	cmp	r0, r3
 80141f8:	bfb8      	it	lt
 80141fa:	4618      	movlt	r0, r3
 80141fc:	e7a6      	b.n	801414c <_printf_i+0x164>
 80141fe:	2301      	movs	r3, #1
 8014200:	4632      	mov	r2, r6
 8014202:	4649      	mov	r1, r9
 8014204:	4640      	mov	r0, r8
 8014206:	47d0      	blx	sl
 8014208:	3001      	adds	r0, #1
 801420a:	d09d      	beq.n	8014148 <_printf_i+0x160>
 801420c:	3501      	adds	r5, #1
 801420e:	68e3      	ldr	r3, [r4, #12]
 8014210:	9903      	ldr	r1, [sp, #12]
 8014212:	1a5b      	subs	r3, r3, r1
 8014214:	42ab      	cmp	r3, r5
 8014216:	dcf2      	bgt.n	80141fe <_printf_i+0x216>
 8014218:	e7eb      	b.n	80141f2 <_printf_i+0x20a>
 801421a:	2500      	movs	r5, #0
 801421c:	f104 0619 	add.w	r6, r4, #25
 8014220:	e7f5      	b.n	801420e <_printf_i+0x226>
 8014222:	bf00      	nop
 8014224:	08016d82 	.word	0x08016d82
 8014228:	08016d93 	.word	0x08016d93

0801422c <std>:
 801422c:	2300      	movs	r3, #0
 801422e:	b510      	push	{r4, lr}
 8014230:	4604      	mov	r4, r0
 8014232:	e9c0 3300 	strd	r3, r3, [r0]
 8014236:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801423a:	6083      	str	r3, [r0, #8]
 801423c:	8181      	strh	r1, [r0, #12]
 801423e:	6643      	str	r3, [r0, #100]	; 0x64
 8014240:	81c2      	strh	r2, [r0, #14]
 8014242:	6183      	str	r3, [r0, #24]
 8014244:	4619      	mov	r1, r3
 8014246:	2208      	movs	r2, #8
 8014248:	305c      	adds	r0, #92	; 0x5c
 801424a:	f000 f92e 	bl	80144aa <memset>
 801424e:	4b0d      	ldr	r3, [pc, #52]	; (8014284 <std+0x58>)
 8014250:	6263      	str	r3, [r4, #36]	; 0x24
 8014252:	4b0d      	ldr	r3, [pc, #52]	; (8014288 <std+0x5c>)
 8014254:	62a3      	str	r3, [r4, #40]	; 0x28
 8014256:	4b0d      	ldr	r3, [pc, #52]	; (801428c <std+0x60>)
 8014258:	62e3      	str	r3, [r4, #44]	; 0x2c
 801425a:	4b0d      	ldr	r3, [pc, #52]	; (8014290 <std+0x64>)
 801425c:	6323      	str	r3, [r4, #48]	; 0x30
 801425e:	4b0d      	ldr	r3, [pc, #52]	; (8014294 <std+0x68>)
 8014260:	6224      	str	r4, [r4, #32]
 8014262:	429c      	cmp	r4, r3
 8014264:	d006      	beq.n	8014274 <std+0x48>
 8014266:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801426a:	4294      	cmp	r4, r2
 801426c:	d002      	beq.n	8014274 <std+0x48>
 801426e:	33d0      	adds	r3, #208	; 0xd0
 8014270:	429c      	cmp	r4, r3
 8014272:	d105      	bne.n	8014280 <std+0x54>
 8014274:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8014278:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801427c:	f000 b9e8 	b.w	8014650 <__retarget_lock_init_recursive>
 8014280:	bd10      	pop	{r4, pc}
 8014282:	bf00      	nop
 8014284:	080143f1 	.word	0x080143f1
 8014288:	08014413 	.word	0x08014413
 801428c:	0801444b 	.word	0x0801444b
 8014290:	0801446f 	.word	0x0801446f
 8014294:	20009828 	.word	0x20009828

08014298 <stdio_exit_handler>:
 8014298:	4a02      	ldr	r2, [pc, #8]	; (80142a4 <stdio_exit_handler+0xc>)
 801429a:	4903      	ldr	r1, [pc, #12]	; (80142a8 <stdio_exit_handler+0x10>)
 801429c:	4803      	ldr	r0, [pc, #12]	; (80142ac <stdio_exit_handler+0x14>)
 801429e:	f000 b869 	b.w	8014374 <_fwalk_sglue>
 80142a2:	bf00      	nop
 80142a4:	200003b8 	.word	0x200003b8
 80142a8:	08016021 	.word	0x08016021
 80142ac:	200003c4 	.word	0x200003c4

080142b0 <cleanup_stdio>:
 80142b0:	6841      	ldr	r1, [r0, #4]
 80142b2:	4b0c      	ldr	r3, [pc, #48]	; (80142e4 <cleanup_stdio+0x34>)
 80142b4:	4299      	cmp	r1, r3
 80142b6:	b510      	push	{r4, lr}
 80142b8:	4604      	mov	r4, r0
 80142ba:	d001      	beq.n	80142c0 <cleanup_stdio+0x10>
 80142bc:	f001 feb0 	bl	8016020 <_fflush_r>
 80142c0:	68a1      	ldr	r1, [r4, #8]
 80142c2:	4b09      	ldr	r3, [pc, #36]	; (80142e8 <cleanup_stdio+0x38>)
 80142c4:	4299      	cmp	r1, r3
 80142c6:	d002      	beq.n	80142ce <cleanup_stdio+0x1e>
 80142c8:	4620      	mov	r0, r4
 80142ca:	f001 fea9 	bl	8016020 <_fflush_r>
 80142ce:	68e1      	ldr	r1, [r4, #12]
 80142d0:	4b06      	ldr	r3, [pc, #24]	; (80142ec <cleanup_stdio+0x3c>)
 80142d2:	4299      	cmp	r1, r3
 80142d4:	d004      	beq.n	80142e0 <cleanup_stdio+0x30>
 80142d6:	4620      	mov	r0, r4
 80142d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80142dc:	f001 bea0 	b.w	8016020 <_fflush_r>
 80142e0:	bd10      	pop	{r4, pc}
 80142e2:	bf00      	nop
 80142e4:	20009828 	.word	0x20009828
 80142e8:	20009890 	.word	0x20009890
 80142ec:	200098f8 	.word	0x200098f8

080142f0 <global_stdio_init.part.0>:
 80142f0:	b510      	push	{r4, lr}
 80142f2:	4b0b      	ldr	r3, [pc, #44]	; (8014320 <global_stdio_init.part.0+0x30>)
 80142f4:	4c0b      	ldr	r4, [pc, #44]	; (8014324 <global_stdio_init.part.0+0x34>)
 80142f6:	4a0c      	ldr	r2, [pc, #48]	; (8014328 <global_stdio_init.part.0+0x38>)
 80142f8:	601a      	str	r2, [r3, #0]
 80142fa:	4620      	mov	r0, r4
 80142fc:	2200      	movs	r2, #0
 80142fe:	2104      	movs	r1, #4
 8014300:	f7ff ff94 	bl	801422c <std>
 8014304:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8014308:	2201      	movs	r2, #1
 801430a:	2109      	movs	r1, #9
 801430c:	f7ff ff8e 	bl	801422c <std>
 8014310:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8014314:	2202      	movs	r2, #2
 8014316:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801431a:	2112      	movs	r1, #18
 801431c:	f7ff bf86 	b.w	801422c <std>
 8014320:	20009960 	.word	0x20009960
 8014324:	20009828 	.word	0x20009828
 8014328:	08014299 	.word	0x08014299

0801432c <__sfp_lock_acquire>:
 801432c:	4801      	ldr	r0, [pc, #4]	; (8014334 <__sfp_lock_acquire+0x8>)
 801432e:	f000 b990 	b.w	8014652 <__retarget_lock_acquire_recursive>
 8014332:	bf00      	nop
 8014334:	20009969 	.word	0x20009969

08014338 <__sfp_lock_release>:
 8014338:	4801      	ldr	r0, [pc, #4]	; (8014340 <__sfp_lock_release+0x8>)
 801433a:	f000 b98b 	b.w	8014654 <__retarget_lock_release_recursive>
 801433e:	bf00      	nop
 8014340:	20009969 	.word	0x20009969

08014344 <__sinit>:
 8014344:	b510      	push	{r4, lr}
 8014346:	4604      	mov	r4, r0
 8014348:	f7ff fff0 	bl	801432c <__sfp_lock_acquire>
 801434c:	6a23      	ldr	r3, [r4, #32]
 801434e:	b11b      	cbz	r3, 8014358 <__sinit+0x14>
 8014350:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014354:	f7ff bff0 	b.w	8014338 <__sfp_lock_release>
 8014358:	4b04      	ldr	r3, [pc, #16]	; (801436c <__sinit+0x28>)
 801435a:	6223      	str	r3, [r4, #32]
 801435c:	4b04      	ldr	r3, [pc, #16]	; (8014370 <__sinit+0x2c>)
 801435e:	681b      	ldr	r3, [r3, #0]
 8014360:	2b00      	cmp	r3, #0
 8014362:	d1f5      	bne.n	8014350 <__sinit+0xc>
 8014364:	f7ff ffc4 	bl	80142f0 <global_stdio_init.part.0>
 8014368:	e7f2      	b.n	8014350 <__sinit+0xc>
 801436a:	bf00      	nop
 801436c:	080142b1 	.word	0x080142b1
 8014370:	20009960 	.word	0x20009960

08014374 <_fwalk_sglue>:
 8014374:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014378:	4607      	mov	r7, r0
 801437a:	4688      	mov	r8, r1
 801437c:	4614      	mov	r4, r2
 801437e:	2600      	movs	r6, #0
 8014380:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014384:	f1b9 0901 	subs.w	r9, r9, #1
 8014388:	d505      	bpl.n	8014396 <_fwalk_sglue+0x22>
 801438a:	6824      	ldr	r4, [r4, #0]
 801438c:	2c00      	cmp	r4, #0
 801438e:	d1f7      	bne.n	8014380 <_fwalk_sglue+0xc>
 8014390:	4630      	mov	r0, r6
 8014392:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014396:	89ab      	ldrh	r3, [r5, #12]
 8014398:	2b01      	cmp	r3, #1
 801439a:	d907      	bls.n	80143ac <_fwalk_sglue+0x38>
 801439c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80143a0:	3301      	adds	r3, #1
 80143a2:	d003      	beq.n	80143ac <_fwalk_sglue+0x38>
 80143a4:	4629      	mov	r1, r5
 80143a6:	4638      	mov	r0, r7
 80143a8:	47c0      	blx	r8
 80143aa:	4306      	orrs	r6, r0
 80143ac:	3568      	adds	r5, #104	; 0x68
 80143ae:	e7e9      	b.n	8014384 <_fwalk_sglue+0x10>

080143b0 <siprintf>:
 80143b0:	b40e      	push	{r1, r2, r3}
 80143b2:	b500      	push	{lr}
 80143b4:	b09c      	sub	sp, #112	; 0x70
 80143b6:	ab1d      	add	r3, sp, #116	; 0x74
 80143b8:	9002      	str	r0, [sp, #8]
 80143ba:	9006      	str	r0, [sp, #24]
 80143bc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80143c0:	4809      	ldr	r0, [pc, #36]	; (80143e8 <siprintf+0x38>)
 80143c2:	9107      	str	r1, [sp, #28]
 80143c4:	9104      	str	r1, [sp, #16]
 80143c6:	4909      	ldr	r1, [pc, #36]	; (80143ec <siprintf+0x3c>)
 80143c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80143cc:	9105      	str	r1, [sp, #20]
 80143ce:	6800      	ldr	r0, [r0, #0]
 80143d0:	9301      	str	r3, [sp, #4]
 80143d2:	a902      	add	r1, sp, #8
 80143d4:	f001 fca0 	bl	8015d18 <_svfiprintf_r>
 80143d8:	9b02      	ldr	r3, [sp, #8]
 80143da:	2200      	movs	r2, #0
 80143dc:	701a      	strb	r2, [r3, #0]
 80143de:	b01c      	add	sp, #112	; 0x70
 80143e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80143e4:	b003      	add	sp, #12
 80143e6:	4770      	bx	lr
 80143e8:	20000410 	.word	0x20000410
 80143ec:	ffff0208 	.word	0xffff0208

080143f0 <__sread>:
 80143f0:	b510      	push	{r4, lr}
 80143f2:	460c      	mov	r4, r1
 80143f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80143f8:	f000 f8dc 	bl	80145b4 <_read_r>
 80143fc:	2800      	cmp	r0, #0
 80143fe:	bfab      	itete	ge
 8014400:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8014402:	89a3      	ldrhlt	r3, [r4, #12]
 8014404:	181b      	addge	r3, r3, r0
 8014406:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801440a:	bfac      	ite	ge
 801440c:	6563      	strge	r3, [r4, #84]	; 0x54
 801440e:	81a3      	strhlt	r3, [r4, #12]
 8014410:	bd10      	pop	{r4, pc}

08014412 <__swrite>:
 8014412:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014416:	461f      	mov	r7, r3
 8014418:	898b      	ldrh	r3, [r1, #12]
 801441a:	05db      	lsls	r3, r3, #23
 801441c:	4605      	mov	r5, r0
 801441e:	460c      	mov	r4, r1
 8014420:	4616      	mov	r6, r2
 8014422:	d505      	bpl.n	8014430 <__swrite+0x1e>
 8014424:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014428:	2302      	movs	r3, #2
 801442a:	2200      	movs	r2, #0
 801442c:	f000 f8b0 	bl	8014590 <_lseek_r>
 8014430:	89a3      	ldrh	r3, [r4, #12]
 8014432:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014436:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801443a:	81a3      	strh	r3, [r4, #12]
 801443c:	4632      	mov	r2, r6
 801443e:	463b      	mov	r3, r7
 8014440:	4628      	mov	r0, r5
 8014442:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014446:	f000 b8c7 	b.w	80145d8 <_write_r>

0801444a <__sseek>:
 801444a:	b510      	push	{r4, lr}
 801444c:	460c      	mov	r4, r1
 801444e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014452:	f000 f89d 	bl	8014590 <_lseek_r>
 8014456:	1c43      	adds	r3, r0, #1
 8014458:	89a3      	ldrh	r3, [r4, #12]
 801445a:	bf15      	itete	ne
 801445c:	6560      	strne	r0, [r4, #84]	; 0x54
 801445e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8014462:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8014466:	81a3      	strheq	r3, [r4, #12]
 8014468:	bf18      	it	ne
 801446a:	81a3      	strhne	r3, [r4, #12]
 801446c:	bd10      	pop	{r4, pc}

0801446e <__sclose>:
 801446e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014472:	f000 b827 	b.w	80144c4 <_close_r>

08014476 <memmove>:
 8014476:	4288      	cmp	r0, r1
 8014478:	b510      	push	{r4, lr}
 801447a:	eb01 0402 	add.w	r4, r1, r2
 801447e:	d902      	bls.n	8014486 <memmove+0x10>
 8014480:	4284      	cmp	r4, r0
 8014482:	4623      	mov	r3, r4
 8014484:	d807      	bhi.n	8014496 <memmove+0x20>
 8014486:	1e43      	subs	r3, r0, #1
 8014488:	42a1      	cmp	r1, r4
 801448a:	d008      	beq.n	801449e <memmove+0x28>
 801448c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014490:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014494:	e7f8      	b.n	8014488 <memmove+0x12>
 8014496:	4402      	add	r2, r0
 8014498:	4601      	mov	r1, r0
 801449a:	428a      	cmp	r2, r1
 801449c:	d100      	bne.n	80144a0 <memmove+0x2a>
 801449e:	bd10      	pop	{r4, pc}
 80144a0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80144a4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80144a8:	e7f7      	b.n	801449a <memmove+0x24>

080144aa <memset>:
 80144aa:	4402      	add	r2, r0
 80144ac:	4603      	mov	r3, r0
 80144ae:	4293      	cmp	r3, r2
 80144b0:	d100      	bne.n	80144b4 <memset+0xa>
 80144b2:	4770      	bx	lr
 80144b4:	f803 1b01 	strb.w	r1, [r3], #1
 80144b8:	e7f9      	b.n	80144ae <memset+0x4>
	...

080144bc <_localeconv_r>:
 80144bc:	4800      	ldr	r0, [pc, #0]	; (80144c0 <_localeconv_r+0x4>)
 80144be:	4770      	bx	lr
 80144c0:	20000504 	.word	0x20000504

080144c4 <_close_r>:
 80144c4:	b538      	push	{r3, r4, r5, lr}
 80144c6:	4d06      	ldr	r5, [pc, #24]	; (80144e0 <_close_r+0x1c>)
 80144c8:	2300      	movs	r3, #0
 80144ca:	4604      	mov	r4, r0
 80144cc:	4608      	mov	r0, r1
 80144ce:	602b      	str	r3, [r5, #0]
 80144d0:	f7f0 fd9b 	bl	800500a <_close>
 80144d4:	1c43      	adds	r3, r0, #1
 80144d6:	d102      	bne.n	80144de <_close_r+0x1a>
 80144d8:	682b      	ldr	r3, [r5, #0]
 80144da:	b103      	cbz	r3, 80144de <_close_r+0x1a>
 80144dc:	6023      	str	r3, [r4, #0]
 80144de:	bd38      	pop	{r3, r4, r5, pc}
 80144e0:	20009964 	.word	0x20009964

080144e4 <_reclaim_reent>:
 80144e4:	4b29      	ldr	r3, [pc, #164]	; (801458c <_reclaim_reent+0xa8>)
 80144e6:	681b      	ldr	r3, [r3, #0]
 80144e8:	4283      	cmp	r3, r0
 80144ea:	b570      	push	{r4, r5, r6, lr}
 80144ec:	4604      	mov	r4, r0
 80144ee:	d04b      	beq.n	8014588 <_reclaim_reent+0xa4>
 80144f0:	69c3      	ldr	r3, [r0, #28]
 80144f2:	b143      	cbz	r3, 8014506 <_reclaim_reent+0x22>
 80144f4:	68db      	ldr	r3, [r3, #12]
 80144f6:	2b00      	cmp	r3, #0
 80144f8:	d144      	bne.n	8014584 <_reclaim_reent+0xa0>
 80144fa:	69e3      	ldr	r3, [r4, #28]
 80144fc:	6819      	ldr	r1, [r3, #0]
 80144fe:	b111      	cbz	r1, 8014506 <_reclaim_reent+0x22>
 8014500:	4620      	mov	r0, r4
 8014502:	f000 ff33 	bl	801536c <_free_r>
 8014506:	6961      	ldr	r1, [r4, #20]
 8014508:	b111      	cbz	r1, 8014510 <_reclaim_reent+0x2c>
 801450a:	4620      	mov	r0, r4
 801450c:	f000 ff2e 	bl	801536c <_free_r>
 8014510:	69e1      	ldr	r1, [r4, #28]
 8014512:	b111      	cbz	r1, 801451a <_reclaim_reent+0x36>
 8014514:	4620      	mov	r0, r4
 8014516:	f000 ff29 	bl	801536c <_free_r>
 801451a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801451c:	b111      	cbz	r1, 8014524 <_reclaim_reent+0x40>
 801451e:	4620      	mov	r0, r4
 8014520:	f000 ff24 	bl	801536c <_free_r>
 8014524:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014526:	b111      	cbz	r1, 801452e <_reclaim_reent+0x4a>
 8014528:	4620      	mov	r0, r4
 801452a:	f000 ff1f 	bl	801536c <_free_r>
 801452e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8014530:	b111      	cbz	r1, 8014538 <_reclaim_reent+0x54>
 8014532:	4620      	mov	r0, r4
 8014534:	f000 ff1a 	bl	801536c <_free_r>
 8014538:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801453a:	b111      	cbz	r1, 8014542 <_reclaim_reent+0x5e>
 801453c:	4620      	mov	r0, r4
 801453e:	f000 ff15 	bl	801536c <_free_r>
 8014542:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8014544:	b111      	cbz	r1, 801454c <_reclaim_reent+0x68>
 8014546:	4620      	mov	r0, r4
 8014548:	f000 ff10 	bl	801536c <_free_r>
 801454c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 801454e:	b111      	cbz	r1, 8014556 <_reclaim_reent+0x72>
 8014550:	4620      	mov	r0, r4
 8014552:	f000 ff0b 	bl	801536c <_free_r>
 8014556:	6a23      	ldr	r3, [r4, #32]
 8014558:	b1b3      	cbz	r3, 8014588 <_reclaim_reent+0xa4>
 801455a:	4620      	mov	r0, r4
 801455c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014560:	4718      	bx	r3
 8014562:	5949      	ldr	r1, [r1, r5]
 8014564:	b941      	cbnz	r1, 8014578 <_reclaim_reent+0x94>
 8014566:	3504      	adds	r5, #4
 8014568:	69e3      	ldr	r3, [r4, #28]
 801456a:	2d80      	cmp	r5, #128	; 0x80
 801456c:	68d9      	ldr	r1, [r3, #12]
 801456e:	d1f8      	bne.n	8014562 <_reclaim_reent+0x7e>
 8014570:	4620      	mov	r0, r4
 8014572:	f000 fefb 	bl	801536c <_free_r>
 8014576:	e7c0      	b.n	80144fa <_reclaim_reent+0x16>
 8014578:	680e      	ldr	r6, [r1, #0]
 801457a:	4620      	mov	r0, r4
 801457c:	f000 fef6 	bl	801536c <_free_r>
 8014580:	4631      	mov	r1, r6
 8014582:	e7ef      	b.n	8014564 <_reclaim_reent+0x80>
 8014584:	2500      	movs	r5, #0
 8014586:	e7ef      	b.n	8014568 <_reclaim_reent+0x84>
 8014588:	bd70      	pop	{r4, r5, r6, pc}
 801458a:	bf00      	nop
 801458c:	20000410 	.word	0x20000410

08014590 <_lseek_r>:
 8014590:	b538      	push	{r3, r4, r5, lr}
 8014592:	4d07      	ldr	r5, [pc, #28]	; (80145b0 <_lseek_r+0x20>)
 8014594:	4604      	mov	r4, r0
 8014596:	4608      	mov	r0, r1
 8014598:	4611      	mov	r1, r2
 801459a:	2200      	movs	r2, #0
 801459c:	602a      	str	r2, [r5, #0]
 801459e:	461a      	mov	r2, r3
 80145a0:	f7f0 fd5a 	bl	8005058 <_lseek>
 80145a4:	1c43      	adds	r3, r0, #1
 80145a6:	d102      	bne.n	80145ae <_lseek_r+0x1e>
 80145a8:	682b      	ldr	r3, [r5, #0]
 80145aa:	b103      	cbz	r3, 80145ae <_lseek_r+0x1e>
 80145ac:	6023      	str	r3, [r4, #0]
 80145ae:	bd38      	pop	{r3, r4, r5, pc}
 80145b0:	20009964 	.word	0x20009964

080145b4 <_read_r>:
 80145b4:	b538      	push	{r3, r4, r5, lr}
 80145b6:	4d07      	ldr	r5, [pc, #28]	; (80145d4 <_read_r+0x20>)
 80145b8:	4604      	mov	r4, r0
 80145ba:	4608      	mov	r0, r1
 80145bc:	4611      	mov	r1, r2
 80145be:	2200      	movs	r2, #0
 80145c0:	602a      	str	r2, [r5, #0]
 80145c2:	461a      	mov	r2, r3
 80145c4:	f7f0 fce8 	bl	8004f98 <_read>
 80145c8:	1c43      	adds	r3, r0, #1
 80145ca:	d102      	bne.n	80145d2 <_read_r+0x1e>
 80145cc:	682b      	ldr	r3, [r5, #0]
 80145ce:	b103      	cbz	r3, 80145d2 <_read_r+0x1e>
 80145d0:	6023      	str	r3, [r4, #0]
 80145d2:	bd38      	pop	{r3, r4, r5, pc}
 80145d4:	20009964 	.word	0x20009964

080145d8 <_write_r>:
 80145d8:	b538      	push	{r3, r4, r5, lr}
 80145da:	4d07      	ldr	r5, [pc, #28]	; (80145f8 <_write_r+0x20>)
 80145dc:	4604      	mov	r4, r0
 80145de:	4608      	mov	r0, r1
 80145e0:	4611      	mov	r1, r2
 80145e2:	2200      	movs	r2, #0
 80145e4:	602a      	str	r2, [r5, #0]
 80145e6:	461a      	mov	r2, r3
 80145e8:	f7f0 fcf3 	bl	8004fd2 <_write>
 80145ec:	1c43      	adds	r3, r0, #1
 80145ee:	d102      	bne.n	80145f6 <_write_r+0x1e>
 80145f0:	682b      	ldr	r3, [r5, #0]
 80145f2:	b103      	cbz	r3, 80145f6 <_write_r+0x1e>
 80145f4:	6023      	str	r3, [r4, #0]
 80145f6:	bd38      	pop	{r3, r4, r5, pc}
 80145f8:	20009964 	.word	0x20009964

080145fc <__errno>:
 80145fc:	4b01      	ldr	r3, [pc, #4]	; (8014604 <__errno+0x8>)
 80145fe:	6818      	ldr	r0, [r3, #0]
 8014600:	4770      	bx	lr
 8014602:	bf00      	nop
 8014604:	20000410 	.word	0x20000410

08014608 <__libc_init_array>:
 8014608:	b570      	push	{r4, r5, r6, lr}
 801460a:	4d0d      	ldr	r5, [pc, #52]	; (8014640 <__libc_init_array+0x38>)
 801460c:	4c0d      	ldr	r4, [pc, #52]	; (8014644 <__libc_init_array+0x3c>)
 801460e:	1b64      	subs	r4, r4, r5
 8014610:	10a4      	asrs	r4, r4, #2
 8014612:	2600      	movs	r6, #0
 8014614:	42a6      	cmp	r6, r4
 8014616:	d109      	bne.n	801462c <__libc_init_array+0x24>
 8014618:	4d0b      	ldr	r5, [pc, #44]	; (8014648 <__libc_init_array+0x40>)
 801461a:	4c0c      	ldr	r4, [pc, #48]	; (801464c <__libc_init_array+0x44>)
 801461c:	f002 f87c 	bl	8016718 <_init>
 8014620:	1b64      	subs	r4, r4, r5
 8014622:	10a4      	asrs	r4, r4, #2
 8014624:	2600      	movs	r6, #0
 8014626:	42a6      	cmp	r6, r4
 8014628:	d105      	bne.n	8014636 <__libc_init_array+0x2e>
 801462a:	bd70      	pop	{r4, r5, r6, pc}
 801462c:	f855 3b04 	ldr.w	r3, [r5], #4
 8014630:	4798      	blx	r3
 8014632:	3601      	adds	r6, #1
 8014634:	e7ee      	b.n	8014614 <__libc_init_array+0xc>
 8014636:	f855 3b04 	ldr.w	r3, [r5], #4
 801463a:	4798      	blx	r3
 801463c:	3601      	adds	r6, #1
 801463e:	e7f2      	b.n	8014626 <__libc_init_array+0x1e>
 8014640:	080170e4 	.word	0x080170e4
 8014644:	080170e4 	.word	0x080170e4
 8014648:	080170e4 	.word	0x080170e4
 801464c:	080170f4 	.word	0x080170f4

08014650 <__retarget_lock_init_recursive>:
 8014650:	4770      	bx	lr

08014652 <__retarget_lock_acquire_recursive>:
 8014652:	4770      	bx	lr

08014654 <__retarget_lock_release_recursive>:
 8014654:	4770      	bx	lr

08014656 <memcpy>:
 8014656:	440a      	add	r2, r1
 8014658:	4291      	cmp	r1, r2
 801465a:	f100 33ff 	add.w	r3, r0, #4294967295
 801465e:	d100      	bne.n	8014662 <memcpy+0xc>
 8014660:	4770      	bx	lr
 8014662:	b510      	push	{r4, lr}
 8014664:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014668:	f803 4f01 	strb.w	r4, [r3, #1]!
 801466c:	4291      	cmp	r1, r2
 801466e:	d1f9      	bne.n	8014664 <memcpy+0xe>
 8014670:	bd10      	pop	{r4, pc}

08014672 <quorem>:
 8014672:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014676:	6903      	ldr	r3, [r0, #16]
 8014678:	690c      	ldr	r4, [r1, #16]
 801467a:	42a3      	cmp	r3, r4
 801467c:	4607      	mov	r7, r0
 801467e:	db7e      	blt.n	801477e <quorem+0x10c>
 8014680:	3c01      	subs	r4, #1
 8014682:	f101 0814 	add.w	r8, r1, #20
 8014686:	f100 0514 	add.w	r5, r0, #20
 801468a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801468e:	9301      	str	r3, [sp, #4]
 8014690:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8014694:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014698:	3301      	adds	r3, #1
 801469a:	429a      	cmp	r2, r3
 801469c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80146a0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80146a4:	fbb2 f6f3 	udiv	r6, r2, r3
 80146a8:	d331      	bcc.n	801470e <quorem+0x9c>
 80146aa:	f04f 0e00 	mov.w	lr, #0
 80146ae:	4640      	mov	r0, r8
 80146b0:	46ac      	mov	ip, r5
 80146b2:	46f2      	mov	sl, lr
 80146b4:	f850 2b04 	ldr.w	r2, [r0], #4
 80146b8:	b293      	uxth	r3, r2
 80146ba:	fb06 e303 	mla	r3, r6, r3, lr
 80146be:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80146c2:	0c1a      	lsrs	r2, r3, #16
 80146c4:	b29b      	uxth	r3, r3
 80146c6:	ebaa 0303 	sub.w	r3, sl, r3
 80146ca:	f8dc a000 	ldr.w	sl, [ip]
 80146ce:	fa13 f38a 	uxtah	r3, r3, sl
 80146d2:	fb06 220e 	mla	r2, r6, lr, r2
 80146d6:	9300      	str	r3, [sp, #0]
 80146d8:	9b00      	ldr	r3, [sp, #0]
 80146da:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80146de:	b292      	uxth	r2, r2
 80146e0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80146e4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80146e8:	f8bd 3000 	ldrh.w	r3, [sp]
 80146ec:	4581      	cmp	r9, r0
 80146ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80146f2:	f84c 3b04 	str.w	r3, [ip], #4
 80146f6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80146fa:	d2db      	bcs.n	80146b4 <quorem+0x42>
 80146fc:	f855 300b 	ldr.w	r3, [r5, fp]
 8014700:	b92b      	cbnz	r3, 801470e <quorem+0x9c>
 8014702:	9b01      	ldr	r3, [sp, #4]
 8014704:	3b04      	subs	r3, #4
 8014706:	429d      	cmp	r5, r3
 8014708:	461a      	mov	r2, r3
 801470a:	d32c      	bcc.n	8014766 <quorem+0xf4>
 801470c:	613c      	str	r4, [r7, #16]
 801470e:	4638      	mov	r0, r7
 8014710:	f001 f9a8 	bl	8015a64 <__mcmp>
 8014714:	2800      	cmp	r0, #0
 8014716:	db22      	blt.n	801475e <quorem+0xec>
 8014718:	3601      	adds	r6, #1
 801471a:	4629      	mov	r1, r5
 801471c:	2000      	movs	r0, #0
 801471e:	f858 2b04 	ldr.w	r2, [r8], #4
 8014722:	f8d1 c000 	ldr.w	ip, [r1]
 8014726:	b293      	uxth	r3, r2
 8014728:	1ac3      	subs	r3, r0, r3
 801472a:	0c12      	lsrs	r2, r2, #16
 801472c:	fa13 f38c 	uxtah	r3, r3, ip
 8014730:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8014734:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014738:	b29b      	uxth	r3, r3
 801473a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801473e:	45c1      	cmp	r9, r8
 8014740:	f841 3b04 	str.w	r3, [r1], #4
 8014744:	ea4f 4022 	mov.w	r0, r2, asr #16
 8014748:	d2e9      	bcs.n	801471e <quorem+0xac>
 801474a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801474e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014752:	b922      	cbnz	r2, 801475e <quorem+0xec>
 8014754:	3b04      	subs	r3, #4
 8014756:	429d      	cmp	r5, r3
 8014758:	461a      	mov	r2, r3
 801475a:	d30a      	bcc.n	8014772 <quorem+0x100>
 801475c:	613c      	str	r4, [r7, #16]
 801475e:	4630      	mov	r0, r6
 8014760:	b003      	add	sp, #12
 8014762:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014766:	6812      	ldr	r2, [r2, #0]
 8014768:	3b04      	subs	r3, #4
 801476a:	2a00      	cmp	r2, #0
 801476c:	d1ce      	bne.n	801470c <quorem+0x9a>
 801476e:	3c01      	subs	r4, #1
 8014770:	e7c9      	b.n	8014706 <quorem+0x94>
 8014772:	6812      	ldr	r2, [r2, #0]
 8014774:	3b04      	subs	r3, #4
 8014776:	2a00      	cmp	r2, #0
 8014778:	d1f0      	bne.n	801475c <quorem+0xea>
 801477a:	3c01      	subs	r4, #1
 801477c:	e7eb      	b.n	8014756 <quorem+0xe4>
 801477e:	2000      	movs	r0, #0
 8014780:	e7ee      	b.n	8014760 <quorem+0xee>
 8014782:	0000      	movs	r0, r0
 8014784:	0000      	movs	r0, r0
	...

08014788 <_dtoa_r>:
 8014788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801478c:	ed2d 8b04 	vpush	{d8-d9}
 8014790:	69c5      	ldr	r5, [r0, #28]
 8014792:	b093      	sub	sp, #76	; 0x4c
 8014794:	ed8d 0b02 	vstr	d0, [sp, #8]
 8014798:	ec57 6b10 	vmov	r6, r7, d0
 801479c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80147a0:	9107      	str	r1, [sp, #28]
 80147a2:	4604      	mov	r4, r0
 80147a4:	920a      	str	r2, [sp, #40]	; 0x28
 80147a6:	930d      	str	r3, [sp, #52]	; 0x34
 80147a8:	b975      	cbnz	r5, 80147c8 <_dtoa_r+0x40>
 80147aa:	2010      	movs	r0, #16
 80147ac:	f000 fe2a 	bl	8015404 <malloc>
 80147b0:	4602      	mov	r2, r0
 80147b2:	61e0      	str	r0, [r4, #28]
 80147b4:	b920      	cbnz	r0, 80147c0 <_dtoa_r+0x38>
 80147b6:	4bae      	ldr	r3, [pc, #696]	; (8014a70 <_dtoa_r+0x2e8>)
 80147b8:	21ef      	movs	r1, #239	; 0xef
 80147ba:	48ae      	ldr	r0, [pc, #696]	; (8014a74 <_dtoa_r+0x2ec>)
 80147bc:	f001 fc68 	bl	8016090 <__assert_func>
 80147c0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80147c4:	6005      	str	r5, [r0, #0]
 80147c6:	60c5      	str	r5, [r0, #12]
 80147c8:	69e3      	ldr	r3, [r4, #28]
 80147ca:	6819      	ldr	r1, [r3, #0]
 80147cc:	b151      	cbz	r1, 80147e4 <_dtoa_r+0x5c>
 80147ce:	685a      	ldr	r2, [r3, #4]
 80147d0:	604a      	str	r2, [r1, #4]
 80147d2:	2301      	movs	r3, #1
 80147d4:	4093      	lsls	r3, r2
 80147d6:	608b      	str	r3, [r1, #8]
 80147d8:	4620      	mov	r0, r4
 80147da:	f000 ff07 	bl	80155ec <_Bfree>
 80147de:	69e3      	ldr	r3, [r4, #28]
 80147e0:	2200      	movs	r2, #0
 80147e2:	601a      	str	r2, [r3, #0]
 80147e4:	1e3b      	subs	r3, r7, #0
 80147e6:	bfbb      	ittet	lt
 80147e8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80147ec:	9303      	strlt	r3, [sp, #12]
 80147ee:	2300      	movge	r3, #0
 80147f0:	2201      	movlt	r2, #1
 80147f2:	bfac      	ite	ge
 80147f4:	f8c8 3000 	strge.w	r3, [r8]
 80147f8:	f8c8 2000 	strlt.w	r2, [r8]
 80147fc:	4b9e      	ldr	r3, [pc, #632]	; (8014a78 <_dtoa_r+0x2f0>)
 80147fe:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8014802:	ea33 0308 	bics.w	r3, r3, r8
 8014806:	d11b      	bne.n	8014840 <_dtoa_r+0xb8>
 8014808:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801480a:	f242 730f 	movw	r3, #9999	; 0x270f
 801480e:	6013      	str	r3, [r2, #0]
 8014810:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8014814:	4333      	orrs	r3, r6
 8014816:	f000 8593 	beq.w	8015340 <_dtoa_r+0xbb8>
 801481a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801481c:	b963      	cbnz	r3, 8014838 <_dtoa_r+0xb0>
 801481e:	4b97      	ldr	r3, [pc, #604]	; (8014a7c <_dtoa_r+0x2f4>)
 8014820:	e027      	b.n	8014872 <_dtoa_r+0xea>
 8014822:	4b97      	ldr	r3, [pc, #604]	; (8014a80 <_dtoa_r+0x2f8>)
 8014824:	9300      	str	r3, [sp, #0]
 8014826:	3308      	adds	r3, #8
 8014828:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801482a:	6013      	str	r3, [r2, #0]
 801482c:	9800      	ldr	r0, [sp, #0]
 801482e:	b013      	add	sp, #76	; 0x4c
 8014830:	ecbd 8b04 	vpop	{d8-d9}
 8014834:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014838:	4b90      	ldr	r3, [pc, #576]	; (8014a7c <_dtoa_r+0x2f4>)
 801483a:	9300      	str	r3, [sp, #0]
 801483c:	3303      	adds	r3, #3
 801483e:	e7f3      	b.n	8014828 <_dtoa_r+0xa0>
 8014840:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014844:	2200      	movs	r2, #0
 8014846:	ec51 0b17 	vmov	r0, r1, d7
 801484a:	eeb0 8a47 	vmov.f32	s16, s14
 801484e:	eef0 8a67 	vmov.f32	s17, s15
 8014852:	2300      	movs	r3, #0
 8014854:	f7ec f950 	bl	8000af8 <__aeabi_dcmpeq>
 8014858:	4681      	mov	r9, r0
 801485a:	b160      	cbz	r0, 8014876 <_dtoa_r+0xee>
 801485c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801485e:	2301      	movs	r3, #1
 8014860:	6013      	str	r3, [r2, #0]
 8014862:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014864:	2b00      	cmp	r3, #0
 8014866:	f000 8568 	beq.w	801533a <_dtoa_r+0xbb2>
 801486a:	4b86      	ldr	r3, [pc, #536]	; (8014a84 <_dtoa_r+0x2fc>)
 801486c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801486e:	6013      	str	r3, [r2, #0]
 8014870:	3b01      	subs	r3, #1
 8014872:	9300      	str	r3, [sp, #0]
 8014874:	e7da      	b.n	801482c <_dtoa_r+0xa4>
 8014876:	aa10      	add	r2, sp, #64	; 0x40
 8014878:	a911      	add	r1, sp, #68	; 0x44
 801487a:	4620      	mov	r0, r4
 801487c:	eeb0 0a48 	vmov.f32	s0, s16
 8014880:	eef0 0a68 	vmov.f32	s1, s17
 8014884:	f001 f994 	bl	8015bb0 <__d2b>
 8014888:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801488c:	4682      	mov	sl, r0
 801488e:	2d00      	cmp	r5, #0
 8014890:	d07f      	beq.n	8014992 <_dtoa_r+0x20a>
 8014892:	ee18 3a90 	vmov	r3, s17
 8014896:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801489a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 801489e:	ec51 0b18 	vmov	r0, r1, d8
 80148a2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80148a6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80148aa:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80148ae:	4619      	mov	r1, r3
 80148b0:	2200      	movs	r2, #0
 80148b2:	4b75      	ldr	r3, [pc, #468]	; (8014a88 <_dtoa_r+0x300>)
 80148b4:	f7eb fd00 	bl	80002b8 <__aeabi_dsub>
 80148b8:	a367      	add	r3, pc, #412	; (adr r3, 8014a58 <_dtoa_r+0x2d0>)
 80148ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148be:	f7eb feb3 	bl	8000628 <__aeabi_dmul>
 80148c2:	a367      	add	r3, pc, #412	; (adr r3, 8014a60 <_dtoa_r+0x2d8>)
 80148c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148c8:	f7eb fcf8 	bl	80002bc <__adddf3>
 80148cc:	4606      	mov	r6, r0
 80148ce:	4628      	mov	r0, r5
 80148d0:	460f      	mov	r7, r1
 80148d2:	f7eb fe3f 	bl	8000554 <__aeabi_i2d>
 80148d6:	a364      	add	r3, pc, #400	; (adr r3, 8014a68 <_dtoa_r+0x2e0>)
 80148d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148dc:	f7eb fea4 	bl	8000628 <__aeabi_dmul>
 80148e0:	4602      	mov	r2, r0
 80148e2:	460b      	mov	r3, r1
 80148e4:	4630      	mov	r0, r6
 80148e6:	4639      	mov	r1, r7
 80148e8:	f7eb fce8 	bl	80002bc <__adddf3>
 80148ec:	4606      	mov	r6, r0
 80148ee:	460f      	mov	r7, r1
 80148f0:	f7ec f94a 	bl	8000b88 <__aeabi_d2iz>
 80148f4:	2200      	movs	r2, #0
 80148f6:	4683      	mov	fp, r0
 80148f8:	2300      	movs	r3, #0
 80148fa:	4630      	mov	r0, r6
 80148fc:	4639      	mov	r1, r7
 80148fe:	f7ec f905 	bl	8000b0c <__aeabi_dcmplt>
 8014902:	b148      	cbz	r0, 8014918 <_dtoa_r+0x190>
 8014904:	4658      	mov	r0, fp
 8014906:	f7eb fe25 	bl	8000554 <__aeabi_i2d>
 801490a:	4632      	mov	r2, r6
 801490c:	463b      	mov	r3, r7
 801490e:	f7ec f8f3 	bl	8000af8 <__aeabi_dcmpeq>
 8014912:	b908      	cbnz	r0, 8014918 <_dtoa_r+0x190>
 8014914:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014918:	f1bb 0f16 	cmp.w	fp, #22
 801491c:	d857      	bhi.n	80149ce <_dtoa_r+0x246>
 801491e:	4b5b      	ldr	r3, [pc, #364]	; (8014a8c <_dtoa_r+0x304>)
 8014920:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8014924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014928:	ec51 0b18 	vmov	r0, r1, d8
 801492c:	f7ec f8ee 	bl	8000b0c <__aeabi_dcmplt>
 8014930:	2800      	cmp	r0, #0
 8014932:	d04e      	beq.n	80149d2 <_dtoa_r+0x24a>
 8014934:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014938:	2300      	movs	r3, #0
 801493a:	930c      	str	r3, [sp, #48]	; 0x30
 801493c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801493e:	1b5b      	subs	r3, r3, r5
 8014940:	1e5a      	subs	r2, r3, #1
 8014942:	bf45      	ittet	mi
 8014944:	f1c3 0301 	rsbmi	r3, r3, #1
 8014948:	9305      	strmi	r3, [sp, #20]
 801494a:	2300      	movpl	r3, #0
 801494c:	2300      	movmi	r3, #0
 801494e:	9206      	str	r2, [sp, #24]
 8014950:	bf54      	ite	pl
 8014952:	9305      	strpl	r3, [sp, #20]
 8014954:	9306      	strmi	r3, [sp, #24]
 8014956:	f1bb 0f00 	cmp.w	fp, #0
 801495a:	db3c      	blt.n	80149d6 <_dtoa_r+0x24e>
 801495c:	9b06      	ldr	r3, [sp, #24]
 801495e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8014962:	445b      	add	r3, fp
 8014964:	9306      	str	r3, [sp, #24]
 8014966:	2300      	movs	r3, #0
 8014968:	9308      	str	r3, [sp, #32]
 801496a:	9b07      	ldr	r3, [sp, #28]
 801496c:	2b09      	cmp	r3, #9
 801496e:	d868      	bhi.n	8014a42 <_dtoa_r+0x2ba>
 8014970:	2b05      	cmp	r3, #5
 8014972:	bfc4      	itt	gt
 8014974:	3b04      	subgt	r3, #4
 8014976:	9307      	strgt	r3, [sp, #28]
 8014978:	9b07      	ldr	r3, [sp, #28]
 801497a:	f1a3 0302 	sub.w	r3, r3, #2
 801497e:	bfcc      	ite	gt
 8014980:	2500      	movgt	r5, #0
 8014982:	2501      	movle	r5, #1
 8014984:	2b03      	cmp	r3, #3
 8014986:	f200 8085 	bhi.w	8014a94 <_dtoa_r+0x30c>
 801498a:	e8df f003 	tbb	[pc, r3]
 801498e:	3b2e      	.short	0x3b2e
 8014990:	5839      	.short	0x5839
 8014992:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8014996:	441d      	add	r5, r3
 8014998:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801499c:	2b20      	cmp	r3, #32
 801499e:	bfc1      	itttt	gt
 80149a0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80149a4:	fa08 f803 	lslgt.w	r8, r8, r3
 80149a8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80149ac:	fa26 f303 	lsrgt.w	r3, r6, r3
 80149b0:	bfd6      	itet	le
 80149b2:	f1c3 0320 	rsble	r3, r3, #32
 80149b6:	ea48 0003 	orrgt.w	r0, r8, r3
 80149ba:	fa06 f003 	lslle.w	r0, r6, r3
 80149be:	f7eb fdb9 	bl	8000534 <__aeabi_ui2d>
 80149c2:	2201      	movs	r2, #1
 80149c4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80149c8:	3d01      	subs	r5, #1
 80149ca:	920e      	str	r2, [sp, #56]	; 0x38
 80149cc:	e76f      	b.n	80148ae <_dtoa_r+0x126>
 80149ce:	2301      	movs	r3, #1
 80149d0:	e7b3      	b.n	801493a <_dtoa_r+0x1b2>
 80149d2:	900c      	str	r0, [sp, #48]	; 0x30
 80149d4:	e7b2      	b.n	801493c <_dtoa_r+0x1b4>
 80149d6:	9b05      	ldr	r3, [sp, #20]
 80149d8:	eba3 030b 	sub.w	r3, r3, fp
 80149dc:	9305      	str	r3, [sp, #20]
 80149de:	f1cb 0300 	rsb	r3, fp, #0
 80149e2:	9308      	str	r3, [sp, #32]
 80149e4:	2300      	movs	r3, #0
 80149e6:	930b      	str	r3, [sp, #44]	; 0x2c
 80149e8:	e7bf      	b.n	801496a <_dtoa_r+0x1e2>
 80149ea:	2300      	movs	r3, #0
 80149ec:	9309      	str	r3, [sp, #36]	; 0x24
 80149ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80149f0:	2b00      	cmp	r3, #0
 80149f2:	dc52      	bgt.n	8014a9a <_dtoa_r+0x312>
 80149f4:	2301      	movs	r3, #1
 80149f6:	9301      	str	r3, [sp, #4]
 80149f8:	9304      	str	r3, [sp, #16]
 80149fa:	461a      	mov	r2, r3
 80149fc:	920a      	str	r2, [sp, #40]	; 0x28
 80149fe:	e00b      	b.n	8014a18 <_dtoa_r+0x290>
 8014a00:	2301      	movs	r3, #1
 8014a02:	e7f3      	b.n	80149ec <_dtoa_r+0x264>
 8014a04:	2300      	movs	r3, #0
 8014a06:	9309      	str	r3, [sp, #36]	; 0x24
 8014a08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014a0a:	445b      	add	r3, fp
 8014a0c:	9301      	str	r3, [sp, #4]
 8014a0e:	3301      	adds	r3, #1
 8014a10:	2b01      	cmp	r3, #1
 8014a12:	9304      	str	r3, [sp, #16]
 8014a14:	bfb8      	it	lt
 8014a16:	2301      	movlt	r3, #1
 8014a18:	69e0      	ldr	r0, [r4, #28]
 8014a1a:	2100      	movs	r1, #0
 8014a1c:	2204      	movs	r2, #4
 8014a1e:	f102 0614 	add.w	r6, r2, #20
 8014a22:	429e      	cmp	r6, r3
 8014a24:	d93d      	bls.n	8014aa2 <_dtoa_r+0x31a>
 8014a26:	6041      	str	r1, [r0, #4]
 8014a28:	4620      	mov	r0, r4
 8014a2a:	f000 fd9f 	bl	801556c <_Balloc>
 8014a2e:	9000      	str	r0, [sp, #0]
 8014a30:	2800      	cmp	r0, #0
 8014a32:	d139      	bne.n	8014aa8 <_dtoa_r+0x320>
 8014a34:	4b16      	ldr	r3, [pc, #88]	; (8014a90 <_dtoa_r+0x308>)
 8014a36:	4602      	mov	r2, r0
 8014a38:	f240 11af 	movw	r1, #431	; 0x1af
 8014a3c:	e6bd      	b.n	80147ba <_dtoa_r+0x32>
 8014a3e:	2301      	movs	r3, #1
 8014a40:	e7e1      	b.n	8014a06 <_dtoa_r+0x27e>
 8014a42:	2501      	movs	r5, #1
 8014a44:	2300      	movs	r3, #0
 8014a46:	9307      	str	r3, [sp, #28]
 8014a48:	9509      	str	r5, [sp, #36]	; 0x24
 8014a4a:	f04f 33ff 	mov.w	r3, #4294967295
 8014a4e:	9301      	str	r3, [sp, #4]
 8014a50:	9304      	str	r3, [sp, #16]
 8014a52:	2200      	movs	r2, #0
 8014a54:	2312      	movs	r3, #18
 8014a56:	e7d1      	b.n	80149fc <_dtoa_r+0x274>
 8014a58:	636f4361 	.word	0x636f4361
 8014a5c:	3fd287a7 	.word	0x3fd287a7
 8014a60:	8b60c8b3 	.word	0x8b60c8b3
 8014a64:	3fc68a28 	.word	0x3fc68a28
 8014a68:	509f79fb 	.word	0x509f79fb
 8014a6c:	3fd34413 	.word	0x3fd34413
 8014a70:	08016db1 	.word	0x08016db1
 8014a74:	08016dc8 	.word	0x08016dc8
 8014a78:	7ff00000 	.word	0x7ff00000
 8014a7c:	08016dad 	.word	0x08016dad
 8014a80:	08016da4 	.word	0x08016da4
 8014a84:	08016d81 	.word	0x08016d81
 8014a88:	3ff80000 	.word	0x3ff80000
 8014a8c:	08016eb8 	.word	0x08016eb8
 8014a90:	08016e20 	.word	0x08016e20
 8014a94:	2301      	movs	r3, #1
 8014a96:	9309      	str	r3, [sp, #36]	; 0x24
 8014a98:	e7d7      	b.n	8014a4a <_dtoa_r+0x2c2>
 8014a9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014a9c:	9301      	str	r3, [sp, #4]
 8014a9e:	9304      	str	r3, [sp, #16]
 8014aa0:	e7ba      	b.n	8014a18 <_dtoa_r+0x290>
 8014aa2:	3101      	adds	r1, #1
 8014aa4:	0052      	lsls	r2, r2, #1
 8014aa6:	e7ba      	b.n	8014a1e <_dtoa_r+0x296>
 8014aa8:	69e3      	ldr	r3, [r4, #28]
 8014aaa:	9a00      	ldr	r2, [sp, #0]
 8014aac:	601a      	str	r2, [r3, #0]
 8014aae:	9b04      	ldr	r3, [sp, #16]
 8014ab0:	2b0e      	cmp	r3, #14
 8014ab2:	f200 80a8 	bhi.w	8014c06 <_dtoa_r+0x47e>
 8014ab6:	2d00      	cmp	r5, #0
 8014ab8:	f000 80a5 	beq.w	8014c06 <_dtoa_r+0x47e>
 8014abc:	f1bb 0f00 	cmp.w	fp, #0
 8014ac0:	dd38      	ble.n	8014b34 <_dtoa_r+0x3ac>
 8014ac2:	4bc0      	ldr	r3, [pc, #768]	; (8014dc4 <_dtoa_r+0x63c>)
 8014ac4:	f00b 020f 	and.w	r2, fp, #15
 8014ac8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014acc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8014ad0:	e9d3 6700 	ldrd	r6, r7, [r3]
 8014ad4:	ea4f 182b 	mov.w	r8, fp, asr #4
 8014ad8:	d019      	beq.n	8014b0e <_dtoa_r+0x386>
 8014ada:	4bbb      	ldr	r3, [pc, #748]	; (8014dc8 <_dtoa_r+0x640>)
 8014adc:	ec51 0b18 	vmov	r0, r1, d8
 8014ae0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8014ae4:	f7eb feca 	bl	800087c <__aeabi_ddiv>
 8014ae8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014aec:	f008 080f 	and.w	r8, r8, #15
 8014af0:	2503      	movs	r5, #3
 8014af2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8014dc8 <_dtoa_r+0x640>
 8014af6:	f1b8 0f00 	cmp.w	r8, #0
 8014afa:	d10a      	bne.n	8014b12 <_dtoa_r+0x38a>
 8014afc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014b00:	4632      	mov	r2, r6
 8014b02:	463b      	mov	r3, r7
 8014b04:	f7eb feba 	bl	800087c <__aeabi_ddiv>
 8014b08:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014b0c:	e02b      	b.n	8014b66 <_dtoa_r+0x3de>
 8014b0e:	2502      	movs	r5, #2
 8014b10:	e7ef      	b.n	8014af2 <_dtoa_r+0x36a>
 8014b12:	f018 0f01 	tst.w	r8, #1
 8014b16:	d008      	beq.n	8014b2a <_dtoa_r+0x3a2>
 8014b18:	4630      	mov	r0, r6
 8014b1a:	4639      	mov	r1, r7
 8014b1c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8014b20:	f7eb fd82 	bl	8000628 <__aeabi_dmul>
 8014b24:	3501      	adds	r5, #1
 8014b26:	4606      	mov	r6, r0
 8014b28:	460f      	mov	r7, r1
 8014b2a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8014b2e:	f109 0908 	add.w	r9, r9, #8
 8014b32:	e7e0      	b.n	8014af6 <_dtoa_r+0x36e>
 8014b34:	f000 809f 	beq.w	8014c76 <_dtoa_r+0x4ee>
 8014b38:	f1cb 0600 	rsb	r6, fp, #0
 8014b3c:	4ba1      	ldr	r3, [pc, #644]	; (8014dc4 <_dtoa_r+0x63c>)
 8014b3e:	4fa2      	ldr	r7, [pc, #648]	; (8014dc8 <_dtoa_r+0x640>)
 8014b40:	f006 020f 	and.w	r2, r6, #15
 8014b44:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b4c:	ec51 0b18 	vmov	r0, r1, d8
 8014b50:	f7eb fd6a 	bl	8000628 <__aeabi_dmul>
 8014b54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014b58:	1136      	asrs	r6, r6, #4
 8014b5a:	2300      	movs	r3, #0
 8014b5c:	2502      	movs	r5, #2
 8014b5e:	2e00      	cmp	r6, #0
 8014b60:	d17e      	bne.n	8014c60 <_dtoa_r+0x4d8>
 8014b62:	2b00      	cmp	r3, #0
 8014b64:	d1d0      	bne.n	8014b08 <_dtoa_r+0x380>
 8014b66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014b68:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8014b6c:	2b00      	cmp	r3, #0
 8014b6e:	f000 8084 	beq.w	8014c7a <_dtoa_r+0x4f2>
 8014b72:	4b96      	ldr	r3, [pc, #600]	; (8014dcc <_dtoa_r+0x644>)
 8014b74:	2200      	movs	r2, #0
 8014b76:	4640      	mov	r0, r8
 8014b78:	4649      	mov	r1, r9
 8014b7a:	f7eb ffc7 	bl	8000b0c <__aeabi_dcmplt>
 8014b7e:	2800      	cmp	r0, #0
 8014b80:	d07b      	beq.n	8014c7a <_dtoa_r+0x4f2>
 8014b82:	9b04      	ldr	r3, [sp, #16]
 8014b84:	2b00      	cmp	r3, #0
 8014b86:	d078      	beq.n	8014c7a <_dtoa_r+0x4f2>
 8014b88:	9b01      	ldr	r3, [sp, #4]
 8014b8a:	2b00      	cmp	r3, #0
 8014b8c:	dd39      	ble.n	8014c02 <_dtoa_r+0x47a>
 8014b8e:	4b90      	ldr	r3, [pc, #576]	; (8014dd0 <_dtoa_r+0x648>)
 8014b90:	2200      	movs	r2, #0
 8014b92:	4640      	mov	r0, r8
 8014b94:	4649      	mov	r1, r9
 8014b96:	f7eb fd47 	bl	8000628 <__aeabi_dmul>
 8014b9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014b9e:	9e01      	ldr	r6, [sp, #4]
 8014ba0:	f10b 37ff 	add.w	r7, fp, #4294967295
 8014ba4:	3501      	adds	r5, #1
 8014ba6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8014baa:	4628      	mov	r0, r5
 8014bac:	f7eb fcd2 	bl	8000554 <__aeabi_i2d>
 8014bb0:	4642      	mov	r2, r8
 8014bb2:	464b      	mov	r3, r9
 8014bb4:	f7eb fd38 	bl	8000628 <__aeabi_dmul>
 8014bb8:	4b86      	ldr	r3, [pc, #536]	; (8014dd4 <_dtoa_r+0x64c>)
 8014bba:	2200      	movs	r2, #0
 8014bbc:	f7eb fb7e 	bl	80002bc <__adddf3>
 8014bc0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8014bc4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014bc8:	9303      	str	r3, [sp, #12]
 8014bca:	2e00      	cmp	r6, #0
 8014bcc:	d158      	bne.n	8014c80 <_dtoa_r+0x4f8>
 8014bce:	4b82      	ldr	r3, [pc, #520]	; (8014dd8 <_dtoa_r+0x650>)
 8014bd0:	2200      	movs	r2, #0
 8014bd2:	4640      	mov	r0, r8
 8014bd4:	4649      	mov	r1, r9
 8014bd6:	f7eb fb6f 	bl	80002b8 <__aeabi_dsub>
 8014bda:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014bde:	4680      	mov	r8, r0
 8014be0:	4689      	mov	r9, r1
 8014be2:	f7eb ffb1 	bl	8000b48 <__aeabi_dcmpgt>
 8014be6:	2800      	cmp	r0, #0
 8014be8:	f040 8296 	bne.w	8015118 <_dtoa_r+0x990>
 8014bec:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8014bf0:	4640      	mov	r0, r8
 8014bf2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014bf6:	4649      	mov	r1, r9
 8014bf8:	f7eb ff88 	bl	8000b0c <__aeabi_dcmplt>
 8014bfc:	2800      	cmp	r0, #0
 8014bfe:	f040 8289 	bne.w	8015114 <_dtoa_r+0x98c>
 8014c02:	ed8d 8b02 	vstr	d8, [sp, #8]
 8014c06:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014c08:	2b00      	cmp	r3, #0
 8014c0a:	f2c0 814e 	blt.w	8014eaa <_dtoa_r+0x722>
 8014c0e:	f1bb 0f0e 	cmp.w	fp, #14
 8014c12:	f300 814a 	bgt.w	8014eaa <_dtoa_r+0x722>
 8014c16:	4b6b      	ldr	r3, [pc, #428]	; (8014dc4 <_dtoa_r+0x63c>)
 8014c18:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8014c1c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8014c20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014c22:	2b00      	cmp	r3, #0
 8014c24:	f280 80dc 	bge.w	8014de0 <_dtoa_r+0x658>
 8014c28:	9b04      	ldr	r3, [sp, #16]
 8014c2a:	2b00      	cmp	r3, #0
 8014c2c:	f300 80d8 	bgt.w	8014de0 <_dtoa_r+0x658>
 8014c30:	f040 826f 	bne.w	8015112 <_dtoa_r+0x98a>
 8014c34:	4b68      	ldr	r3, [pc, #416]	; (8014dd8 <_dtoa_r+0x650>)
 8014c36:	2200      	movs	r2, #0
 8014c38:	4640      	mov	r0, r8
 8014c3a:	4649      	mov	r1, r9
 8014c3c:	f7eb fcf4 	bl	8000628 <__aeabi_dmul>
 8014c40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014c44:	f7eb ff76 	bl	8000b34 <__aeabi_dcmpge>
 8014c48:	9e04      	ldr	r6, [sp, #16]
 8014c4a:	4637      	mov	r7, r6
 8014c4c:	2800      	cmp	r0, #0
 8014c4e:	f040 8245 	bne.w	80150dc <_dtoa_r+0x954>
 8014c52:	9d00      	ldr	r5, [sp, #0]
 8014c54:	2331      	movs	r3, #49	; 0x31
 8014c56:	f805 3b01 	strb.w	r3, [r5], #1
 8014c5a:	f10b 0b01 	add.w	fp, fp, #1
 8014c5e:	e241      	b.n	80150e4 <_dtoa_r+0x95c>
 8014c60:	07f2      	lsls	r2, r6, #31
 8014c62:	d505      	bpl.n	8014c70 <_dtoa_r+0x4e8>
 8014c64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014c68:	f7eb fcde 	bl	8000628 <__aeabi_dmul>
 8014c6c:	3501      	adds	r5, #1
 8014c6e:	2301      	movs	r3, #1
 8014c70:	1076      	asrs	r6, r6, #1
 8014c72:	3708      	adds	r7, #8
 8014c74:	e773      	b.n	8014b5e <_dtoa_r+0x3d6>
 8014c76:	2502      	movs	r5, #2
 8014c78:	e775      	b.n	8014b66 <_dtoa_r+0x3de>
 8014c7a:	9e04      	ldr	r6, [sp, #16]
 8014c7c:	465f      	mov	r7, fp
 8014c7e:	e792      	b.n	8014ba6 <_dtoa_r+0x41e>
 8014c80:	9900      	ldr	r1, [sp, #0]
 8014c82:	4b50      	ldr	r3, [pc, #320]	; (8014dc4 <_dtoa_r+0x63c>)
 8014c84:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014c88:	4431      	add	r1, r6
 8014c8a:	9102      	str	r1, [sp, #8]
 8014c8c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014c8e:	eeb0 9a47 	vmov.f32	s18, s14
 8014c92:	eef0 9a67 	vmov.f32	s19, s15
 8014c96:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8014c9a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8014c9e:	2900      	cmp	r1, #0
 8014ca0:	d044      	beq.n	8014d2c <_dtoa_r+0x5a4>
 8014ca2:	494e      	ldr	r1, [pc, #312]	; (8014ddc <_dtoa_r+0x654>)
 8014ca4:	2000      	movs	r0, #0
 8014ca6:	f7eb fde9 	bl	800087c <__aeabi_ddiv>
 8014caa:	ec53 2b19 	vmov	r2, r3, d9
 8014cae:	f7eb fb03 	bl	80002b8 <__aeabi_dsub>
 8014cb2:	9d00      	ldr	r5, [sp, #0]
 8014cb4:	ec41 0b19 	vmov	d9, r0, r1
 8014cb8:	4649      	mov	r1, r9
 8014cba:	4640      	mov	r0, r8
 8014cbc:	f7eb ff64 	bl	8000b88 <__aeabi_d2iz>
 8014cc0:	4606      	mov	r6, r0
 8014cc2:	f7eb fc47 	bl	8000554 <__aeabi_i2d>
 8014cc6:	4602      	mov	r2, r0
 8014cc8:	460b      	mov	r3, r1
 8014cca:	4640      	mov	r0, r8
 8014ccc:	4649      	mov	r1, r9
 8014cce:	f7eb faf3 	bl	80002b8 <__aeabi_dsub>
 8014cd2:	3630      	adds	r6, #48	; 0x30
 8014cd4:	f805 6b01 	strb.w	r6, [r5], #1
 8014cd8:	ec53 2b19 	vmov	r2, r3, d9
 8014cdc:	4680      	mov	r8, r0
 8014cde:	4689      	mov	r9, r1
 8014ce0:	f7eb ff14 	bl	8000b0c <__aeabi_dcmplt>
 8014ce4:	2800      	cmp	r0, #0
 8014ce6:	d164      	bne.n	8014db2 <_dtoa_r+0x62a>
 8014ce8:	4642      	mov	r2, r8
 8014cea:	464b      	mov	r3, r9
 8014cec:	4937      	ldr	r1, [pc, #220]	; (8014dcc <_dtoa_r+0x644>)
 8014cee:	2000      	movs	r0, #0
 8014cf0:	f7eb fae2 	bl	80002b8 <__aeabi_dsub>
 8014cf4:	ec53 2b19 	vmov	r2, r3, d9
 8014cf8:	f7eb ff08 	bl	8000b0c <__aeabi_dcmplt>
 8014cfc:	2800      	cmp	r0, #0
 8014cfe:	f040 80b6 	bne.w	8014e6e <_dtoa_r+0x6e6>
 8014d02:	9b02      	ldr	r3, [sp, #8]
 8014d04:	429d      	cmp	r5, r3
 8014d06:	f43f af7c 	beq.w	8014c02 <_dtoa_r+0x47a>
 8014d0a:	4b31      	ldr	r3, [pc, #196]	; (8014dd0 <_dtoa_r+0x648>)
 8014d0c:	ec51 0b19 	vmov	r0, r1, d9
 8014d10:	2200      	movs	r2, #0
 8014d12:	f7eb fc89 	bl	8000628 <__aeabi_dmul>
 8014d16:	4b2e      	ldr	r3, [pc, #184]	; (8014dd0 <_dtoa_r+0x648>)
 8014d18:	ec41 0b19 	vmov	d9, r0, r1
 8014d1c:	2200      	movs	r2, #0
 8014d1e:	4640      	mov	r0, r8
 8014d20:	4649      	mov	r1, r9
 8014d22:	f7eb fc81 	bl	8000628 <__aeabi_dmul>
 8014d26:	4680      	mov	r8, r0
 8014d28:	4689      	mov	r9, r1
 8014d2a:	e7c5      	b.n	8014cb8 <_dtoa_r+0x530>
 8014d2c:	ec51 0b17 	vmov	r0, r1, d7
 8014d30:	f7eb fc7a 	bl	8000628 <__aeabi_dmul>
 8014d34:	9b02      	ldr	r3, [sp, #8]
 8014d36:	9d00      	ldr	r5, [sp, #0]
 8014d38:	930f      	str	r3, [sp, #60]	; 0x3c
 8014d3a:	ec41 0b19 	vmov	d9, r0, r1
 8014d3e:	4649      	mov	r1, r9
 8014d40:	4640      	mov	r0, r8
 8014d42:	f7eb ff21 	bl	8000b88 <__aeabi_d2iz>
 8014d46:	4606      	mov	r6, r0
 8014d48:	f7eb fc04 	bl	8000554 <__aeabi_i2d>
 8014d4c:	3630      	adds	r6, #48	; 0x30
 8014d4e:	4602      	mov	r2, r0
 8014d50:	460b      	mov	r3, r1
 8014d52:	4640      	mov	r0, r8
 8014d54:	4649      	mov	r1, r9
 8014d56:	f7eb faaf 	bl	80002b8 <__aeabi_dsub>
 8014d5a:	f805 6b01 	strb.w	r6, [r5], #1
 8014d5e:	9b02      	ldr	r3, [sp, #8]
 8014d60:	429d      	cmp	r5, r3
 8014d62:	4680      	mov	r8, r0
 8014d64:	4689      	mov	r9, r1
 8014d66:	f04f 0200 	mov.w	r2, #0
 8014d6a:	d124      	bne.n	8014db6 <_dtoa_r+0x62e>
 8014d6c:	4b1b      	ldr	r3, [pc, #108]	; (8014ddc <_dtoa_r+0x654>)
 8014d6e:	ec51 0b19 	vmov	r0, r1, d9
 8014d72:	f7eb faa3 	bl	80002bc <__adddf3>
 8014d76:	4602      	mov	r2, r0
 8014d78:	460b      	mov	r3, r1
 8014d7a:	4640      	mov	r0, r8
 8014d7c:	4649      	mov	r1, r9
 8014d7e:	f7eb fee3 	bl	8000b48 <__aeabi_dcmpgt>
 8014d82:	2800      	cmp	r0, #0
 8014d84:	d173      	bne.n	8014e6e <_dtoa_r+0x6e6>
 8014d86:	ec53 2b19 	vmov	r2, r3, d9
 8014d8a:	4914      	ldr	r1, [pc, #80]	; (8014ddc <_dtoa_r+0x654>)
 8014d8c:	2000      	movs	r0, #0
 8014d8e:	f7eb fa93 	bl	80002b8 <__aeabi_dsub>
 8014d92:	4602      	mov	r2, r0
 8014d94:	460b      	mov	r3, r1
 8014d96:	4640      	mov	r0, r8
 8014d98:	4649      	mov	r1, r9
 8014d9a:	f7eb feb7 	bl	8000b0c <__aeabi_dcmplt>
 8014d9e:	2800      	cmp	r0, #0
 8014da0:	f43f af2f 	beq.w	8014c02 <_dtoa_r+0x47a>
 8014da4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8014da6:	1e6b      	subs	r3, r5, #1
 8014da8:	930f      	str	r3, [sp, #60]	; 0x3c
 8014daa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8014dae:	2b30      	cmp	r3, #48	; 0x30
 8014db0:	d0f8      	beq.n	8014da4 <_dtoa_r+0x61c>
 8014db2:	46bb      	mov	fp, r7
 8014db4:	e04a      	b.n	8014e4c <_dtoa_r+0x6c4>
 8014db6:	4b06      	ldr	r3, [pc, #24]	; (8014dd0 <_dtoa_r+0x648>)
 8014db8:	f7eb fc36 	bl	8000628 <__aeabi_dmul>
 8014dbc:	4680      	mov	r8, r0
 8014dbe:	4689      	mov	r9, r1
 8014dc0:	e7bd      	b.n	8014d3e <_dtoa_r+0x5b6>
 8014dc2:	bf00      	nop
 8014dc4:	08016eb8 	.word	0x08016eb8
 8014dc8:	08016e90 	.word	0x08016e90
 8014dcc:	3ff00000 	.word	0x3ff00000
 8014dd0:	40240000 	.word	0x40240000
 8014dd4:	401c0000 	.word	0x401c0000
 8014dd8:	40140000 	.word	0x40140000
 8014ddc:	3fe00000 	.word	0x3fe00000
 8014de0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8014de4:	9d00      	ldr	r5, [sp, #0]
 8014de6:	4642      	mov	r2, r8
 8014de8:	464b      	mov	r3, r9
 8014dea:	4630      	mov	r0, r6
 8014dec:	4639      	mov	r1, r7
 8014dee:	f7eb fd45 	bl	800087c <__aeabi_ddiv>
 8014df2:	f7eb fec9 	bl	8000b88 <__aeabi_d2iz>
 8014df6:	9001      	str	r0, [sp, #4]
 8014df8:	f7eb fbac 	bl	8000554 <__aeabi_i2d>
 8014dfc:	4642      	mov	r2, r8
 8014dfe:	464b      	mov	r3, r9
 8014e00:	f7eb fc12 	bl	8000628 <__aeabi_dmul>
 8014e04:	4602      	mov	r2, r0
 8014e06:	460b      	mov	r3, r1
 8014e08:	4630      	mov	r0, r6
 8014e0a:	4639      	mov	r1, r7
 8014e0c:	f7eb fa54 	bl	80002b8 <__aeabi_dsub>
 8014e10:	9e01      	ldr	r6, [sp, #4]
 8014e12:	9f04      	ldr	r7, [sp, #16]
 8014e14:	3630      	adds	r6, #48	; 0x30
 8014e16:	f805 6b01 	strb.w	r6, [r5], #1
 8014e1a:	9e00      	ldr	r6, [sp, #0]
 8014e1c:	1bae      	subs	r6, r5, r6
 8014e1e:	42b7      	cmp	r7, r6
 8014e20:	4602      	mov	r2, r0
 8014e22:	460b      	mov	r3, r1
 8014e24:	d134      	bne.n	8014e90 <_dtoa_r+0x708>
 8014e26:	f7eb fa49 	bl	80002bc <__adddf3>
 8014e2a:	4642      	mov	r2, r8
 8014e2c:	464b      	mov	r3, r9
 8014e2e:	4606      	mov	r6, r0
 8014e30:	460f      	mov	r7, r1
 8014e32:	f7eb fe89 	bl	8000b48 <__aeabi_dcmpgt>
 8014e36:	b9c8      	cbnz	r0, 8014e6c <_dtoa_r+0x6e4>
 8014e38:	4642      	mov	r2, r8
 8014e3a:	464b      	mov	r3, r9
 8014e3c:	4630      	mov	r0, r6
 8014e3e:	4639      	mov	r1, r7
 8014e40:	f7eb fe5a 	bl	8000af8 <__aeabi_dcmpeq>
 8014e44:	b110      	cbz	r0, 8014e4c <_dtoa_r+0x6c4>
 8014e46:	9b01      	ldr	r3, [sp, #4]
 8014e48:	07db      	lsls	r3, r3, #31
 8014e4a:	d40f      	bmi.n	8014e6c <_dtoa_r+0x6e4>
 8014e4c:	4651      	mov	r1, sl
 8014e4e:	4620      	mov	r0, r4
 8014e50:	f000 fbcc 	bl	80155ec <_Bfree>
 8014e54:	2300      	movs	r3, #0
 8014e56:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014e58:	702b      	strb	r3, [r5, #0]
 8014e5a:	f10b 0301 	add.w	r3, fp, #1
 8014e5e:	6013      	str	r3, [r2, #0]
 8014e60:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014e62:	2b00      	cmp	r3, #0
 8014e64:	f43f ace2 	beq.w	801482c <_dtoa_r+0xa4>
 8014e68:	601d      	str	r5, [r3, #0]
 8014e6a:	e4df      	b.n	801482c <_dtoa_r+0xa4>
 8014e6c:	465f      	mov	r7, fp
 8014e6e:	462b      	mov	r3, r5
 8014e70:	461d      	mov	r5, r3
 8014e72:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014e76:	2a39      	cmp	r2, #57	; 0x39
 8014e78:	d106      	bne.n	8014e88 <_dtoa_r+0x700>
 8014e7a:	9a00      	ldr	r2, [sp, #0]
 8014e7c:	429a      	cmp	r2, r3
 8014e7e:	d1f7      	bne.n	8014e70 <_dtoa_r+0x6e8>
 8014e80:	9900      	ldr	r1, [sp, #0]
 8014e82:	2230      	movs	r2, #48	; 0x30
 8014e84:	3701      	adds	r7, #1
 8014e86:	700a      	strb	r2, [r1, #0]
 8014e88:	781a      	ldrb	r2, [r3, #0]
 8014e8a:	3201      	adds	r2, #1
 8014e8c:	701a      	strb	r2, [r3, #0]
 8014e8e:	e790      	b.n	8014db2 <_dtoa_r+0x62a>
 8014e90:	4ba3      	ldr	r3, [pc, #652]	; (8015120 <_dtoa_r+0x998>)
 8014e92:	2200      	movs	r2, #0
 8014e94:	f7eb fbc8 	bl	8000628 <__aeabi_dmul>
 8014e98:	2200      	movs	r2, #0
 8014e9a:	2300      	movs	r3, #0
 8014e9c:	4606      	mov	r6, r0
 8014e9e:	460f      	mov	r7, r1
 8014ea0:	f7eb fe2a 	bl	8000af8 <__aeabi_dcmpeq>
 8014ea4:	2800      	cmp	r0, #0
 8014ea6:	d09e      	beq.n	8014de6 <_dtoa_r+0x65e>
 8014ea8:	e7d0      	b.n	8014e4c <_dtoa_r+0x6c4>
 8014eaa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014eac:	2a00      	cmp	r2, #0
 8014eae:	f000 80ca 	beq.w	8015046 <_dtoa_r+0x8be>
 8014eb2:	9a07      	ldr	r2, [sp, #28]
 8014eb4:	2a01      	cmp	r2, #1
 8014eb6:	f300 80ad 	bgt.w	8015014 <_dtoa_r+0x88c>
 8014eba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014ebc:	2a00      	cmp	r2, #0
 8014ebe:	f000 80a5 	beq.w	801500c <_dtoa_r+0x884>
 8014ec2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8014ec6:	9e08      	ldr	r6, [sp, #32]
 8014ec8:	9d05      	ldr	r5, [sp, #20]
 8014eca:	9a05      	ldr	r2, [sp, #20]
 8014ecc:	441a      	add	r2, r3
 8014ece:	9205      	str	r2, [sp, #20]
 8014ed0:	9a06      	ldr	r2, [sp, #24]
 8014ed2:	2101      	movs	r1, #1
 8014ed4:	441a      	add	r2, r3
 8014ed6:	4620      	mov	r0, r4
 8014ed8:	9206      	str	r2, [sp, #24]
 8014eda:	f000 fc3d 	bl	8015758 <__i2b>
 8014ede:	4607      	mov	r7, r0
 8014ee0:	b165      	cbz	r5, 8014efc <_dtoa_r+0x774>
 8014ee2:	9b06      	ldr	r3, [sp, #24]
 8014ee4:	2b00      	cmp	r3, #0
 8014ee6:	dd09      	ble.n	8014efc <_dtoa_r+0x774>
 8014ee8:	42ab      	cmp	r3, r5
 8014eea:	9a05      	ldr	r2, [sp, #20]
 8014eec:	bfa8      	it	ge
 8014eee:	462b      	movge	r3, r5
 8014ef0:	1ad2      	subs	r2, r2, r3
 8014ef2:	9205      	str	r2, [sp, #20]
 8014ef4:	9a06      	ldr	r2, [sp, #24]
 8014ef6:	1aed      	subs	r5, r5, r3
 8014ef8:	1ad3      	subs	r3, r2, r3
 8014efa:	9306      	str	r3, [sp, #24]
 8014efc:	9b08      	ldr	r3, [sp, #32]
 8014efe:	b1f3      	cbz	r3, 8014f3e <_dtoa_r+0x7b6>
 8014f00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014f02:	2b00      	cmp	r3, #0
 8014f04:	f000 80a3 	beq.w	801504e <_dtoa_r+0x8c6>
 8014f08:	2e00      	cmp	r6, #0
 8014f0a:	dd10      	ble.n	8014f2e <_dtoa_r+0x7a6>
 8014f0c:	4639      	mov	r1, r7
 8014f0e:	4632      	mov	r2, r6
 8014f10:	4620      	mov	r0, r4
 8014f12:	f000 fce1 	bl	80158d8 <__pow5mult>
 8014f16:	4652      	mov	r2, sl
 8014f18:	4601      	mov	r1, r0
 8014f1a:	4607      	mov	r7, r0
 8014f1c:	4620      	mov	r0, r4
 8014f1e:	f000 fc31 	bl	8015784 <__multiply>
 8014f22:	4651      	mov	r1, sl
 8014f24:	4680      	mov	r8, r0
 8014f26:	4620      	mov	r0, r4
 8014f28:	f000 fb60 	bl	80155ec <_Bfree>
 8014f2c:	46c2      	mov	sl, r8
 8014f2e:	9b08      	ldr	r3, [sp, #32]
 8014f30:	1b9a      	subs	r2, r3, r6
 8014f32:	d004      	beq.n	8014f3e <_dtoa_r+0x7b6>
 8014f34:	4651      	mov	r1, sl
 8014f36:	4620      	mov	r0, r4
 8014f38:	f000 fcce 	bl	80158d8 <__pow5mult>
 8014f3c:	4682      	mov	sl, r0
 8014f3e:	2101      	movs	r1, #1
 8014f40:	4620      	mov	r0, r4
 8014f42:	f000 fc09 	bl	8015758 <__i2b>
 8014f46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014f48:	2b00      	cmp	r3, #0
 8014f4a:	4606      	mov	r6, r0
 8014f4c:	f340 8081 	ble.w	8015052 <_dtoa_r+0x8ca>
 8014f50:	461a      	mov	r2, r3
 8014f52:	4601      	mov	r1, r0
 8014f54:	4620      	mov	r0, r4
 8014f56:	f000 fcbf 	bl	80158d8 <__pow5mult>
 8014f5a:	9b07      	ldr	r3, [sp, #28]
 8014f5c:	2b01      	cmp	r3, #1
 8014f5e:	4606      	mov	r6, r0
 8014f60:	dd7a      	ble.n	8015058 <_dtoa_r+0x8d0>
 8014f62:	f04f 0800 	mov.w	r8, #0
 8014f66:	6933      	ldr	r3, [r6, #16]
 8014f68:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8014f6c:	6918      	ldr	r0, [r3, #16]
 8014f6e:	f000 fba5 	bl	80156bc <__hi0bits>
 8014f72:	f1c0 0020 	rsb	r0, r0, #32
 8014f76:	9b06      	ldr	r3, [sp, #24]
 8014f78:	4418      	add	r0, r3
 8014f7a:	f010 001f 	ands.w	r0, r0, #31
 8014f7e:	f000 8094 	beq.w	80150aa <_dtoa_r+0x922>
 8014f82:	f1c0 0320 	rsb	r3, r0, #32
 8014f86:	2b04      	cmp	r3, #4
 8014f88:	f340 8085 	ble.w	8015096 <_dtoa_r+0x90e>
 8014f8c:	9b05      	ldr	r3, [sp, #20]
 8014f8e:	f1c0 001c 	rsb	r0, r0, #28
 8014f92:	4403      	add	r3, r0
 8014f94:	9305      	str	r3, [sp, #20]
 8014f96:	9b06      	ldr	r3, [sp, #24]
 8014f98:	4403      	add	r3, r0
 8014f9a:	4405      	add	r5, r0
 8014f9c:	9306      	str	r3, [sp, #24]
 8014f9e:	9b05      	ldr	r3, [sp, #20]
 8014fa0:	2b00      	cmp	r3, #0
 8014fa2:	dd05      	ble.n	8014fb0 <_dtoa_r+0x828>
 8014fa4:	4651      	mov	r1, sl
 8014fa6:	461a      	mov	r2, r3
 8014fa8:	4620      	mov	r0, r4
 8014faa:	f000 fcef 	bl	801598c <__lshift>
 8014fae:	4682      	mov	sl, r0
 8014fb0:	9b06      	ldr	r3, [sp, #24]
 8014fb2:	2b00      	cmp	r3, #0
 8014fb4:	dd05      	ble.n	8014fc2 <_dtoa_r+0x83a>
 8014fb6:	4631      	mov	r1, r6
 8014fb8:	461a      	mov	r2, r3
 8014fba:	4620      	mov	r0, r4
 8014fbc:	f000 fce6 	bl	801598c <__lshift>
 8014fc0:	4606      	mov	r6, r0
 8014fc2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014fc4:	2b00      	cmp	r3, #0
 8014fc6:	d072      	beq.n	80150ae <_dtoa_r+0x926>
 8014fc8:	4631      	mov	r1, r6
 8014fca:	4650      	mov	r0, sl
 8014fcc:	f000 fd4a 	bl	8015a64 <__mcmp>
 8014fd0:	2800      	cmp	r0, #0
 8014fd2:	da6c      	bge.n	80150ae <_dtoa_r+0x926>
 8014fd4:	2300      	movs	r3, #0
 8014fd6:	4651      	mov	r1, sl
 8014fd8:	220a      	movs	r2, #10
 8014fda:	4620      	mov	r0, r4
 8014fdc:	f000 fb28 	bl	8015630 <__multadd>
 8014fe0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014fe2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014fe6:	4682      	mov	sl, r0
 8014fe8:	2b00      	cmp	r3, #0
 8014fea:	f000 81b0 	beq.w	801534e <_dtoa_r+0xbc6>
 8014fee:	2300      	movs	r3, #0
 8014ff0:	4639      	mov	r1, r7
 8014ff2:	220a      	movs	r2, #10
 8014ff4:	4620      	mov	r0, r4
 8014ff6:	f000 fb1b 	bl	8015630 <__multadd>
 8014ffa:	9b01      	ldr	r3, [sp, #4]
 8014ffc:	2b00      	cmp	r3, #0
 8014ffe:	4607      	mov	r7, r0
 8015000:	f300 8096 	bgt.w	8015130 <_dtoa_r+0x9a8>
 8015004:	9b07      	ldr	r3, [sp, #28]
 8015006:	2b02      	cmp	r3, #2
 8015008:	dc59      	bgt.n	80150be <_dtoa_r+0x936>
 801500a:	e091      	b.n	8015130 <_dtoa_r+0x9a8>
 801500c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801500e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8015012:	e758      	b.n	8014ec6 <_dtoa_r+0x73e>
 8015014:	9b04      	ldr	r3, [sp, #16]
 8015016:	1e5e      	subs	r6, r3, #1
 8015018:	9b08      	ldr	r3, [sp, #32]
 801501a:	42b3      	cmp	r3, r6
 801501c:	bfbf      	itttt	lt
 801501e:	9b08      	ldrlt	r3, [sp, #32]
 8015020:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8015022:	9608      	strlt	r6, [sp, #32]
 8015024:	1af3      	sublt	r3, r6, r3
 8015026:	bfb4      	ite	lt
 8015028:	18d2      	addlt	r2, r2, r3
 801502a:	1b9e      	subge	r6, r3, r6
 801502c:	9b04      	ldr	r3, [sp, #16]
 801502e:	bfbc      	itt	lt
 8015030:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8015032:	2600      	movlt	r6, #0
 8015034:	2b00      	cmp	r3, #0
 8015036:	bfb7      	itett	lt
 8015038:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 801503c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8015040:	1a9d      	sublt	r5, r3, r2
 8015042:	2300      	movlt	r3, #0
 8015044:	e741      	b.n	8014eca <_dtoa_r+0x742>
 8015046:	9e08      	ldr	r6, [sp, #32]
 8015048:	9d05      	ldr	r5, [sp, #20]
 801504a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801504c:	e748      	b.n	8014ee0 <_dtoa_r+0x758>
 801504e:	9a08      	ldr	r2, [sp, #32]
 8015050:	e770      	b.n	8014f34 <_dtoa_r+0x7ac>
 8015052:	9b07      	ldr	r3, [sp, #28]
 8015054:	2b01      	cmp	r3, #1
 8015056:	dc19      	bgt.n	801508c <_dtoa_r+0x904>
 8015058:	9b02      	ldr	r3, [sp, #8]
 801505a:	b9bb      	cbnz	r3, 801508c <_dtoa_r+0x904>
 801505c:	9b03      	ldr	r3, [sp, #12]
 801505e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015062:	b99b      	cbnz	r3, 801508c <_dtoa_r+0x904>
 8015064:	9b03      	ldr	r3, [sp, #12]
 8015066:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801506a:	0d1b      	lsrs	r3, r3, #20
 801506c:	051b      	lsls	r3, r3, #20
 801506e:	b183      	cbz	r3, 8015092 <_dtoa_r+0x90a>
 8015070:	9b05      	ldr	r3, [sp, #20]
 8015072:	3301      	adds	r3, #1
 8015074:	9305      	str	r3, [sp, #20]
 8015076:	9b06      	ldr	r3, [sp, #24]
 8015078:	3301      	adds	r3, #1
 801507a:	9306      	str	r3, [sp, #24]
 801507c:	f04f 0801 	mov.w	r8, #1
 8015080:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015082:	2b00      	cmp	r3, #0
 8015084:	f47f af6f 	bne.w	8014f66 <_dtoa_r+0x7de>
 8015088:	2001      	movs	r0, #1
 801508a:	e774      	b.n	8014f76 <_dtoa_r+0x7ee>
 801508c:	f04f 0800 	mov.w	r8, #0
 8015090:	e7f6      	b.n	8015080 <_dtoa_r+0x8f8>
 8015092:	4698      	mov	r8, r3
 8015094:	e7f4      	b.n	8015080 <_dtoa_r+0x8f8>
 8015096:	d082      	beq.n	8014f9e <_dtoa_r+0x816>
 8015098:	9a05      	ldr	r2, [sp, #20]
 801509a:	331c      	adds	r3, #28
 801509c:	441a      	add	r2, r3
 801509e:	9205      	str	r2, [sp, #20]
 80150a0:	9a06      	ldr	r2, [sp, #24]
 80150a2:	441a      	add	r2, r3
 80150a4:	441d      	add	r5, r3
 80150a6:	9206      	str	r2, [sp, #24]
 80150a8:	e779      	b.n	8014f9e <_dtoa_r+0x816>
 80150aa:	4603      	mov	r3, r0
 80150ac:	e7f4      	b.n	8015098 <_dtoa_r+0x910>
 80150ae:	9b04      	ldr	r3, [sp, #16]
 80150b0:	2b00      	cmp	r3, #0
 80150b2:	dc37      	bgt.n	8015124 <_dtoa_r+0x99c>
 80150b4:	9b07      	ldr	r3, [sp, #28]
 80150b6:	2b02      	cmp	r3, #2
 80150b8:	dd34      	ble.n	8015124 <_dtoa_r+0x99c>
 80150ba:	9b04      	ldr	r3, [sp, #16]
 80150bc:	9301      	str	r3, [sp, #4]
 80150be:	9b01      	ldr	r3, [sp, #4]
 80150c0:	b963      	cbnz	r3, 80150dc <_dtoa_r+0x954>
 80150c2:	4631      	mov	r1, r6
 80150c4:	2205      	movs	r2, #5
 80150c6:	4620      	mov	r0, r4
 80150c8:	f000 fab2 	bl	8015630 <__multadd>
 80150cc:	4601      	mov	r1, r0
 80150ce:	4606      	mov	r6, r0
 80150d0:	4650      	mov	r0, sl
 80150d2:	f000 fcc7 	bl	8015a64 <__mcmp>
 80150d6:	2800      	cmp	r0, #0
 80150d8:	f73f adbb 	bgt.w	8014c52 <_dtoa_r+0x4ca>
 80150dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80150de:	9d00      	ldr	r5, [sp, #0]
 80150e0:	ea6f 0b03 	mvn.w	fp, r3
 80150e4:	f04f 0800 	mov.w	r8, #0
 80150e8:	4631      	mov	r1, r6
 80150ea:	4620      	mov	r0, r4
 80150ec:	f000 fa7e 	bl	80155ec <_Bfree>
 80150f0:	2f00      	cmp	r7, #0
 80150f2:	f43f aeab 	beq.w	8014e4c <_dtoa_r+0x6c4>
 80150f6:	f1b8 0f00 	cmp.w	r8, #0
 80150fa:	d005      	beq.n	8015108 <_dtoa_r+0x980>
 80150fc:	45b8      	cmp	r8, r7
 80150fe:	d003      	beq.n	8015108 <_dtoa_r+0x980>
 8015100:	4641      	mov	r1, r8
 8015102:	4620      	mov	r0, r4
 8015104:	f000 fa72 	bl	80155ec <_Bfree>
 8015108:	4639      	mov	r1, r7
 801510a:	4620      	mov	r0, r4
 801510c:	f000 fa6e 	bl	80155ec <_Bfree>
 8015110:	e69c      	b.n	8014e4c <_dtoa_r+0x6c4>
 8015112:	2600      	movs	r6, #0
 8015114:	4637      	mov	r7, r6
 8015116:	e7e1      	b.n	80150dc <_dtoa_r+0x954>
 8015118:	46bb      	mov	fp, r7
 801511a:	4637      	mov	r7, r6
 801511c:	e599      	b.n	8014c52 <_dtoa_r+0x4ca>
 801511e:	bf00      	nop
 8015120:	40240000 	.word	0x40240000
 8015124:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015126:	2b00      	cmp	r3, #0
 8015128:	f000 80c8 	beq.w	80152bc <_dtoa_r+0xb34>
 801512c:	9b04      	ldr	r3, [sp, #16]
 801512e:	9301      	str	r3, [sp, #4]
 8015130:	2d00      	cmp	r5, #0
 8015132:	dd05      	ble.n	8015140 <_dtoa_r+0x9b8>
 8015134:	4639      	mov	r1, r7
 8015136:	462a      	mov	r2, r5
 8015138:	4620      	mov	r0, r4
 801513a:	f000 fc27 	bl	801598c <__lshift>
 801513e:	4607      	mov	r7, r0
 8015140:	f1b8 0f00 	cmp.w	r8, #0
 8015144:	d05b      	beq.n	80151fe <_dtoa_r+0xa76>
 8015146:	6879      	ldr	r1, [r7, #4]
 8015148:	4620      	mov	r0, r4
 801514a:	f000 fa0f 	bl	801556c <_Balloc>
 801514e:	4605      	mov	r5, r0
 8015150:	b928      	cbnz	r0, 801515e <_dtoa_r+0x9d6>
 8015152:	4b83      	ldr	r3, [pc, #524]	; (8015360 <_dtoa_r+0xbd8>)
 8015154:	4602      	mov	r2, r0
 8015156:	f240 21ef 	movw	r1, #751	; 0x2ef
 801515a:	f7ff bb2e 	b.w	80147ba <_dtoa_r+0x32>
 801515e:	693a      	ldr	r2, [r7, #16]
 8015160:	3202      	adds	r2, #2
 8015162:	0092      	lsls	r2, r2, #2
 8015164:	f107 010c 	add.w	r1, r7, #12
 8015168:	300c      	adds	r0, #12
 801516a:	f7ff fa74 	bl	8014656 <memcpy>
 801516e:	2201      	movs	r2, #1
 8015170:	4629      	mov	r1, r5
 8015172:	4620      	mov	r0, r4
 8015174:	f000 fc0a 	bl	801598c <__lshift>
 8015178:	9b00      	ldr	r3, [sp, #0]
 801517a:	3301      	adds	r3, #1
 801517c:	9304      	str	r3, [sp, #16]
 801517e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015182:	4413      	add	r3, r2
 8015184:	9308      	str	r3, [sp, #32]
 8015186:	9b02      	ldr	r3, [sp, #8]
 8015188:	f003 0301 	and.w	r3, r3, #1
 801518c:	46b8      	mov	r8, r7
 801518e:	9306      	str	r3, [sp, #24]
 8015190:	4607      	mov	r7, r0
 8015192:	9b04      	ldr	r3, [sp, #16]
 8015194:	4631      	mov	r1, r6
 8015196:	3b01      	subs	r3, #1
 8015198:	4650      	mov	r0, sl
 801519a:	9301      	str	r3, [sp, #4]
 801519c:	f7ff fa69 	bl	8014672 <quorem>
 80151a0:	4641      	mov	r1, r8
 80151a2:	9002      	str	r0, [sp, #8]
 80151a4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80151a8:	4650      	mov	r0, sl
 80151aa:	f000 fc5b 	bl	8015a64 <__mcmp>
 80151ae:	463a      	mov	r2, r7
 80151b0:	9005      	str	r0, [sp, #20]
 80151b2:	4631      	mov	r1, r6
 80151b4:	4620      	mov	r0, r4
 80151b6:	f000 fc71 	bl	8015a9c <__mdiff>
 80151ba:	68c2      	ldr	r2, [r0, #12]
 80151bc:	4605      	mov	r5, r0
 80151be:	bb02      	cbnz	r2, 8015202 <_dtoa_r+0xa7a>
 80151c0:	4601      	mov	r1, r0
 80151c2:	4650      	mov	r0, sl
 80151c4:	f000 fc4e 	bl	8015a64 <__mcmp>
 80151c8:	4602      	mov	r2, r0
 80151ca:	4629      	mov	r1, r5
 80151cc:	4620      	mov	r0, r4
 80151ce:	9209      	str	r2, [sp, #36]	; 0x24
 80151d0:	f000 fa0c 	bl	80155ec <_Bfree>
 80151d4:	9b07      	ldr	r3, [sp, #28]
 80151d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80151d8:	9d04      	ldr	r5, [sp, #16]
 80151da:	ea43 0102 	orr.w	r1, r3, r2
 80151de:	9b06      	ldr	r3, [sp, #24]
 80151e0:	4319      	orrs	r1, r3
 80151e2:	d110      	bne.n	8015206 <_dtoa_r+0xa7e>
 80151e4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80151e8:	d029      	beq.n	801523e <_dtoa_r+0xab6>
 80151ea:	9b05      	ldr	r3, [sp, #20]
 80151ec:	2b00      	cmp	r3, #0
 80151ee:	dd02      	ble.n	80151f6 <_dtoa_r+0xa6e>
 80151f0:	9b02      	ldr	r3, [sp, #8]
 80151f2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80151f6:	9b01      	ldr	r3, [sp, #4]
 80151f8:	f883 9000 	strb.w	r9, [r3]
 80151fc:	e774      	b.n	80150e8 <_dtoa_r+0x960>
 80151fe:	4638      	mov	r0, r7
 8015200:	e7ba      	b.n	8015178 <_dtoa_r+0x9f0>
 8015202:	2201      	movs	r2, #1
 8015204:	e7e1      	b.n	80151ca <_dtoa_r+0xa42>
 8015206:	9b05      	ldr	r3, [sp, #20]
 8015208:	2b00      	cmp	r3, #0
 801520a:	db04      	blt.n	8015216 <_dtoa_r+0xa8e>
 801520c:	9907      	ldr	r1, [sp, #28]
 801520e:	430b      	orrs	r3, r1
 8015210:	9906      	ldr	r1, [sp, #24]
 8015212:	430b      	orrs	r3, r1
 8015214:	d120      	bne.n	8015258 <_dtoa_r+0xad0>
 8015216:	2a00      	cmp	r2, #0
 8015218:	dded      	ble.n	80151f6 <_dtoa_r+0xa6e>
 801521a:	4651      	mov	r1, sl
 801521c:	2201      	movs	r2, #1
 801521e:	4620      	mov	r0, r4
 8015220:	f000 fbb4 	bl	801598c <__lshift>
 8015224:	4631      	mov	r1, r6
 8015226:	4682      	mov	sl, r0
 8015228:	f000 fc1c 	bl	8015a64 <__mcmp>
 801522c:	2800      	cmp	r0, #0
 801522e:	dc03      	bgt.n	8015238 <_dtoa_r+0xab0>
 8015230:	d1e1      	bne.n	80151f6 <_dtoa_r+0xa6e>
 8015232:	f019 0f01 	tst.w	r9, #1
 8015236:	d0de      	beq.n	80151f6 <_dtoa_r+0xa6e>
 8015238:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801523c:	d1d8      	bne.n	80151f0 <_dtoa_r+0xa68>
 801523e:	9a01      	ldr	r2, [sp, #4]
 8015240:	2339      	movs	r3, #57	; 0x39
 8015242:	7013      	strb	r3, [r2, #0]
 8015244:	462b      	mov	r3, r5
 8015246:	461d      	mov	r5, r3
 8015248:	3b01      	subs	r3, #1
 801524a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801524e:	2a39      	cmp	r2, #57	; 0x39
 8015250:	d06c      	beq.n	801532c <_dtoa_r+0xba4>
 8015252:	3201      	adds	r2, #1
 8015254:	701a      	strb	r2, [r3, #0]
 8015256:	e747      	b.n	80150e8 <_dtoa_r+0x960>
 8015258:	2a00      	cmp	r2, #0
 801525a:	dd07      	ble.n	801526c <_dtoa_r+0xae4>
 801525c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8015260:	d0ed      	beq.n	801523e <_dtoa_r+0xab6>
 8015262:	9a01      	ldr	r2, [sp, #4]
 8015264:	f109 0301 	add.w	r3, r9, #1
 8015268:	7013      	strb	r3, [r2, #0]
 801526a:	e73d      	b.n	80150e8 <_dtoa_r+0x960>
 801526c:	9b04      	ldr	r3, [sp, #16]
 801526e:	9a08      	ldr	r2, [sp, #32]
 8015270:	f803 9c01 	strb.w	r9, [r3, #-1]
 8015274:	4293      	cmp	r3, r2
 8015276:	d043      	beq.n	8015300 <_dtoa_r+0xb78>
 8015278:	4651      	mov	r1, sl
 801527a:	2300      	movs	r3, #0
 801527c:	220a      	movs	r2, #10
 801527e:	4620      	mov	r0, r4
 8015280:	f000 f9d6 	bl	8015630 <__multadd>
 8015284:	45b8      	cmp	r8, r7
 8015286:	4682      	mov	sl, r0
 8015288:	f04f 0300 	mov.w	r3, #0
 801528c:	f04f 020a 	mov.w	r2, #10
 8015290:	4641      	mov	r1, r8
 8015292:	4620      	mov	r0, r4
 8015294:	d107      	bne.n	80152a6 <_dtoa_r+0xb1e>
 8015296:	f000 f9cb 	bl	8015630 <__multadd>
 801529a:	4680      	mov	r8, r0
 801529c:	4607      	mov	r7, r0
 801529e:	9b04      	ldr	r3, [sp, #16]
 80152a0:	3301      	adds	r3, #1
 80152a2:	9304      	str	r3, [sp, #16]
 80152a4:	e775      	b.n	8015192 <_dtoa_r+0xa0a>
 80152a6:	f000 f9c3 	bl	8015630 <__multadd>
 80152aa:	4639      	mov	r1, r7
 80152ac:	4680      	mov	r8, r0
 80152ae:	2300      	movs	r3, #0
 80152b0:	220a      	movs	r2, #10
 80152b2:	4620      	mov	r0, r4
 80152b4:	f000 f9bc 	bl	8015630 <__multadd>
 80152b8:	4607      	mov	r7, r0
 80152ba:	e7f0      	b.n	801529e <_dtoa_r+0xb16>
 80152bc:	9b04      	ldr	r3, [sp, #16]
 80152be:	9301      	str	r3, [sp, #4]
 80152c0:	9d00      	ldr	r5, [sp, #0]
 80152c2:	4631      	mov	r1, r6
 80152c4:	4650      	mov	r0, sl
 80152c6:	f7ff f9d4 	bl	8014672 <quorem>
 80152ca:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80152ce:	9b00      	ldr	r3, [sp, #0]
 80152d0:	f805 9b01 	strb.w	r9, [r5], #1
 80152d4:	1aea      	subs	r2, r5, r3
 80152d6:	9b01      	ldr	r3, [sp, #4]
 80152d8:	4293      	cmp	r3, r2
 80152da:	dd07      	ble.n	80152ec <_dtoa_r+0xb64>
 80152dc:	4651      	mov	r1, sl
 80152de:	2300      	movs	r3, #0
 80152e0:	220a      	movs	r2, #10
 80152e2:	4620      	mov	r0, r4
 80152e4:	f000 f9a4 	bl	8015630 <__multadd>
 80152e8:	4682      	mov	sl, r0
 80152ea:	e7ea      	b.n	80152c2 <_dtoa_r+0xb3a>
 80152ec:	9b01      	ldr	r3, [sp, #4]
 80152ee:	2b00      	cmp	r3, #0
 80152f0:	bfc8      	it	gt
 80152f2:	461d      	movgt	r5, r3
 80152f4:	9b00      	ldr	r3, [sp, #0]
 80152f6:	bfd8      	it	le
 80152f8:	2501      	movle	r5, #1
 80152fa:	441d      	add	r5, r3
 80152fc:	f04f 0800 	mov.w	r8, #0
 8015300:	4651      	mov	r1, sl
 8015302:	2201      	movs	r2, #1
 8015304:	4620      	mov	r0, r4
 8015306:	f000 fb41 	bl	801598c <__lshift>
 801530a:	4631      	mov	r1, r6
 801530c:	4682      	mov	sl, r0
 801530e:	f000 fba9 	bl	8015a64 <__mcmp>
 8015312:	2800      	cmp	r0, #0
 8015314:	dc96      	bgt.n	8015244 <_dtoa_r+0xabc>
 8015316:	d102      	bne.n	801531e <_dtoa_r+0xb96>
 8015318:	f019 0f01 	tst.w	r9, #1
 801531c:	d192      	bne.n	8015244 <_dtoa_r+0xabc>
 801531e:	462b      	mov	r3, r5
 8015320:	461d      	mov	r5, r3
 8015322:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8015326:	2a30      	cmp	r2, #48	; 0x30
 8015328:	d0fa      	beq.n	8015320 <_dtoa_r+0xb98>
 801532a:	e6dd      	b.n	80150e8 <_dtoa_r+0x960>
 801532c:	9a00      	ldr	r2, [sp, #0]
 801532e:	429a      	cmp	r2, r3
 8015330:	d189      	bne.n	8015246 <_dtoa_r+0xabe>
 8015332:	f10b 0b01 	add.w	fp, fp, #1
 8015336:	2331      	movs	r3, #49	; 0x31
 8015338:	e796      	b.n	8015268 <_dtoa_r+0xae0>
 801533a:	4b0a      	ldr	r3, [pc, #40]	; (8015364 <_dtoa_r+0xbdc>)
 801533c:	f7ff ba99 	b.w	8014872 <_dtoa_r+0xea>
 8015340:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015342:	2b00      	cmp	r3, #0
 8015344:	f47f aa6d 	bne.w	8014822 <_dtoa_r+0x9a>
 8015348:	4b07      	ldr	r3, [pc, #28]	; (8015368 <_dtoa_r+0xbe0>)
 801534a:	f7ff ba92 	b.w	8014872 <_dtoa_r+0xea>
 801534e:	9b01      	ldr	r3, [sp, #4]
 8015350:	2b00      	cmp	r3, #0
 8015352:	dcb5      	bgt.n	80152c0 <_dtoa_r+0xb38>
 8015354:	9b07      	ldr	r3, [sp, #28]
 8015356:	2b02      	cmp	r3, #2
 8015358:	f73f aeb1 	bgt.w	80150be <_dtoa_r+0x936>
 801535c:	e7b0      	b.n	80152c0 <_dtoa_r+0xb38>
 801535e:	bf00      	nop
 8015360:	08016e20 	.word	0x08016e20
 8015364:	08016d80 	.word	0x08016d80
 8015368:	08016da4 	.word	0x08016da4

0801536c <_free_r>:
 801536c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801536e:	2900      	cmp	r1, #0
 8015370:	d044      	beq.n	80153fc <_free_r+0x90>
 8015372:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015376:	9001      	str	r0, [sp, #4]
 8015378:	2b00      	cmp	r3, #0
 801537a:	f1a1 0404 	sub.w	r4, r1, #4
 801537e:	bfb8      	it	lt
 8015380:	18e4      	addlt	r4, r4, r3
 8015382:	f000 f8e7 	bl	8015554 <__malloc_lock>
 8015386:	4a1e      	ldr	r2, [pc, #120]	; (8015400 <_free_r+0x94>)
 8015388:	9801      	ldr	r0, [sp, #4]
 801538a:	6813      	ldr	r3, [r2, #0]
 801538c:	b933      	cbnz	r3, 801539c <_free_r+0x30>
 801538e:	6063      	str	r3, [r4, #4]
 8015390:	6014      	str	r4, [r2, #0]
 8015392:	b003      	add	sp, #12
 8015394:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015398:	f000 b8e2 	b.w	8015560 <__malloc_unlock>
 801539c:	42a3      	cmp	r3, r4
 801539e:	d908      	bls.n	80153b2 <_free_r+0x46>
 80153a0:	6825      	ldr	r5, [r4, #0]
 80153a2:	1961      	adds	r1, r4, r5
 80153a4:	428b      	cmp	r3, r1
 80153a6:	bf01      	itttt	eq
 80153a8:	6819      	ldreq	r1, [r3, #0]
 80153aa:	685b      	ldreq	r3, [r3, #4]
 80153ac:	1949      	addeq	r1, r1, r5
 80153ae:	6021      	streq	r1, [r4, #0]
 80153b0:	e7ed      	b.n	801538e <_free_r+0x22>
 80153b2:	461a      	mov	r2, r3
 80153b4:	685b      	ldr	r3, [r3, #4]
 80153b6:	b10b      	cbz	r3, 80153bc <_free_r+0x50>
 80153b8:	42a3      	cmp	r3, r4
 80153ba:	d9fa      	bls.n	80153b2 <_free_r+0x46>
 80153bc:	6811      	ldr	r1, [r2, #0]
 80153be:	1855      	adds	r5, r2, r1
 80153c0:	42a5      	cmp	r5, r4
 80153c2:	d10b      	bne.n	80153dc <_free_r+0x70>
 80153c4:	6824      	ldr	r4, [r4, #0]
 80153c6:	4421      	add	r1, r4
 80153c8:	1854      	adds	r4, r2, r1
 80153ca:	42a3      	cmp	r3, r4
 80153cc:	6011      	str	r1, [r2, #0]
 80153ce:	d1e0      	bne.n	8015392 <_free_r+0x26>
 80153d0:	681c      	ldr	r4, [r3, #0]
 80153d2:	685b      	ldr	r3, [r3, #4]
 80153d4:	6053      	str	r3, [r2, #4]
 80153d6:	440c      	add	r4, r1
 80153d8:	6014      	str	r4, [r2, #0]
 80153da:	e7da      	b.n	8015392 <_free_r+0x26>
 80153dc:	d902      	bls.n	80153e4 <_free_r+0x78>
 80153de:	230c      	movs	r3, #12
 80153e0:	6003      	str	r3, [r0, #0]
 80153e2:	e7d6      	b.n	8015392 <_free_r+0x26>
 80153e4:	6825      	ldr	r5, [r4, #0]
 80153e6:	1961      	adds	r1, r4, r5
 80153e8:	428b      	cmp	r3, r1
 80153ea:	bf04      	itt	eq
 80153ec:	6819      	ldreq	r1, [r3, #0]
 80153ee:	685b      	ldreq	r3, [r3, #4]
 80153f0:	6063      	str	r3, [r4, #4]
 80153f2:	bf04      	itt	eq
 80153f4:	1949      	addeq	r1, r1, r5
 80153f6:	6021      	streq	r1, [r4, #0]
 80153f8:	6054      	str	r4, [r2, #4]
 80153fa:	e7ca      	b.n	8015392 <_free_r+0x26>
 80153fc:	b003      	add	sp, #12
 80153fe:	bd30      	pop	{r4, r5, pc}
 8015400:	2000996c 	.word	0x2000996c

08015404 <malloc>:
 8015404:	4b02      	ldr	r3, [pc, #8]	; (8015410 <malloc+0xc>)
 8015406:	4601      	mov	r1, r0
 8015408:	6818      	ldr	r0, [r3, #0]
 801540a:	f000 b823 	b.w	8015454 <_malloc_r>
 801540e:	bf00      	nop
 8015410:	20000410 	.word	0x20000410

08015414 <sbrk_aligned>:
 8015414:	b570      	push	{r4, r5, r6, lr}
 8015416:	4e0e      	ldr	r6, [pc, #56]	; (8015450 <sbrk_aligned+0x3c>)
 8015418:	460c      	mov	r4, r1
 801541a:	6831      	ldr	r1, [r6, #0]
 801541c:	4605      	mov	r5, r0
 801541e:	b911      	cbnz	r1, 8015426 <sbrk_aligned+0x12>
 8015420:	f000 fe26 	bl	8016070 <_sbrk_r>
 8015424:	6030      	str	r0, [r6, #0]
 8015426:	4621      	mov	r1, r4
 8015428:	4628      	mov	r0, r5
 801542a:	f000 fe21 	bl	8016070 <_sbrk_r>
 801542e:	1c43      	adds	r3, r0, #1
 8015430:	d00a      	beq.n	8015448 <sbrk_aligned+0x34>
 8015432:	1cc4      	adds	r4, r0, #3
 8015434:	f024 0403 	bic.w	r4, r4, #3
 8015438:	42a0      	cmp	r0, r4
 801543a:	d007      	beq.n	801544c <sbrk_aligned+0x38>
 801543c:	1a21      	subs	r1, r4, r0
 801543e:	4628      	mov	r0, r5
 8015440:	f000 fe16 	bl	8016070 <_sbrk_r>
 8015444:	3001      	adds	r0, #1
 8015446:	d101      	bne.n	801544c <sbrk_aligned+0x38>
 8015448:	f04f 34ff 	mov.w	r4, #4294967295
 801544c:	4620      	mov	r0, r4
 801544e:	bd70      	pop	{r4, r5, r6, pc}
 8015450:	20009970 	.word	0x20009970

08015454 <_malloc_r>:
 8015454:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015458:	1ccd      	adds	r5, r1, #3
 801545a:	f025 0503 	bic.w	r5, r5, #3
 801545e:	3508      	adds	r5, #8
 8015460:	2d0c      	cmp	r5, #12
 8015462:	bf38      	it	cc
 8015464:	250c      	movcc	r5, #12
 8015466:	2d00      	cmp	r5, #0
 8015468:	4607      	mov	r7, r0
 801546a:	db01      	blt.n	8015470 <_malloc_r+0x1c>
 801546c:	42a9      	cmp	r1, r5
 801546e:	d905      	bls.n	801547c <_malloc_r+0x28>
 8015470:	230c      	movs	r3, #12
 8015472:	603b      	str	r3, [r7, #0]
 8015474:	2600      	movs	r6, #0
 8015476:	4630      	mov	r0, r6
 8015478:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801547c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8015550 <_malloc_r+0xfc>
 8015480:	f000 f868 	bl	8015554 <__malloc_lock>
 8015484:	f8d8 3000 	ldr.w	r3, [r8]
 8015488:	461c      	mov	r4, r3
 801548a:	bb5c      	cbnz	r4, 80154e4 <_malloc_r+0x90>
 801548c:	4629      	mov	r1, r5
 801548e:	4638      	mov	r0, r7
 8015490:	f7ff ffc0 	bl	8015414 <sbrk_aligned>
 8015494:	1c43      	adds	r3, r0, #1
 8015496:	4604      	mov	r4, r0
 8015498:	d155      	bne.n	8015546 <_malloc_r+0xf2>
 801549a:	f8d8 4000 	ldr.w	r4, [r8]
 801549e:	4626      	mov	r6, r4
 80154a0:	2e00      	cmp	r6, #0
 80154a2:	d145      	bne.n	8015530 <_malloc_r+0xdc>
 80154a4:	2c00      	cmp	r4, #0
 80154a6:	d048      	beq.n	801553a <_malloc_r+0xe6>
 80154a8:	6823      	ldr	r3, [r4, #0]
 80154aa:	4631      	mov	r1, r6
 80154ac:	4638      	mov	r0, r7
 80154ae:	eb04 0903 	add.w	r9, r4, r3
 80154b2:	f000 fddd 	bl	8016070 <_sbrk_r>
 80154b6:	4581      	cmp	r9, r0
 80154b8:	d13f      	bne.n	801553a <_malloc_r+0xe6>
 80154ba:	6821      	ldr	r1, [r4, #0]
 80154bc:	1a6d      	subs	r5, r5, r1
 80154be:	4629      	mov	r1, r5
 80154c0:	4638      	mov	r0, r7
 80154c2:	f7ff ffa7 	bl	8015414 <sbrk_aligned>
 80154c6:	3001      	adds	r0, #1
 80154c8:	d037      	beq.n	801553a <_malloc_r+0xe6>
 80154ca:	6823      	ldr	r3, [r4, #0]
 80154cc:	442b      	add	r3, r5
 80154ce:	6023      	str	r3, [r4, #0]
 80154d0:	f8d8 3000 	ldr.w	r3, [r8]
 80154d4:	2b00      	cmp	r3, #0
 80154d6:	d038      	beq.n	801554a <_malloc_r+0xf6>
 80154d8:	685a      	ldr	r2, [r3, #4]
 80154da:	42a2      	cmp	r2, r4
 80154dc:	d12b      	bne.n	8015536 <_malloc_r+0xe2>
 80154de:	2200      	movs	r2, #0
 80154e0:	605a      	str	r2, [r3, #4]
 80154e2:	e00f      	b.n	8015504 <_malloc_r+0xb0>
 80154e4:	6822      	ldr	r2, [r4, #0]
 80154e6:	1b52      	subs	r2, r2, r5
 80154e8:	d41f      	bmi.n	801552a <_malloc_r+0xd6>
 80154ea:	2a0b      	cmp	r2, #11
 80154ec:	d917      	bls.n	801551e <_malloc_r+0xca>
 80154ee:	1961      	adds	r1, r4, r5
 80154f0:	42a3      	cmp	r3, r4
 80154f2:	6025      	str	r5, [r4, #0]
 80154f4:	bf18      	it	ne
 80154f6:	6059      	strne	r1, [r3, #4]
 80154f8:	6863      	ldr	r3, [r4, #4]
 80154fa:	bf08      	it	eq
 80154fc:	f8c8 1000 	streq.w	r1, [r8]
 8015500:	5162      	str	r2, [r4, r5]
 8015502:	604b      	str	r3, [r1, #4]
 8015504:	4638      	mov	r0, r7
 8015506:	f104 060b 	add.w	r6, r4, #11
 801550a:	f000 f829 	bl	8015560 <__malloc_unlock>
 801550e:	f026 0607 	bic.w	r6, r6, #7
 8015512:	1d23      	adds	r3, r4, #4
 8015514:	1af2      	subs	r2, r6, r3
 8015516:	d0ae      	beq.n	8015476 <_malloc_r+0x22>
 8015518:	1b9b      	subs	r3, r3, r6
 801551a:	50a3      	str	r3, [r4, r2]
 801551c:	e7ab      	b.n	8015476 <_malloc_r+0x22>
 801551e:	42a3      	cmp	r3, r4
 8015520:	6862      	ldr	r2, [r4, #4]
 8015522:	d1dd      	bne.n	80154e0 <_malloc_r+0x8c>
 8015524:	f8c8 2000 	str.w	r2, [r8]
 8015528:	e7ec      	b.n	8015504 <_malloc_r+0xb0>
 801552a:	4623      	mov	r3, r4
 801552c:	6864      	ldr	r4, [r4, #4]
 801552e:	e7ac      	b.n	801548a <_malloc_r+0x36>
 8015530:	4634      	mov	r4, r6
 8015532:	6876      	ldr	r6, [r6, #4]
 8015534:	e7b4      	b.n	80154a0 <_malloc_r+0x4c>
 8015536:	4613      	mov	r3, r2
 8015538:	e7cc      	b.n	80154d4 <_malloc_r+0x80>
 801553a:	230c      	movs	r3, #12
 801553c:	603b      	str	r3, [r7, #0]
 801553e:	4638      	mov	r0, r7
 8015540:	f000 f80e 	bl	8015560 <__malloc_unlock>
 8015544:	e797      	b.n	8015476 <_malloc_r+0x22>
 8015546:	6025      	str	r5, [r4, #0]
 8015548:	e7dc      	b.n	8015504 <_malloc_r+0xb0>
 801554a:	605b      	str	r3, [r3, #4]
 801554c:	deff      	udf	#255	; 0xff
 801554e:	bf00      	nop
 8015550:	2000996c 	.word	0x2000996c

08015554 <__malloc_lock>:
 8015554:	4801      	ldr	r0, [pc, #4]	; (801555c <__malloc_lock+0x8>)
 8015556:	f7ff b87c 	b.w	8014652 <__retarget_lock_acquire_recursive>
 801555a:	bf00      	nop
 801555c:	20009968 	.word	0x20009968

08015560 <__malloc_unlock>:
 8015560:	4801      	ldr	r0, [pc, #4]	; (8015568 <__malloc_unlock+0x8>)
 8015562:	f7ff b877 	b.w	8014654 <__retarget_lock_release_recursive>
 8015566:	bf00      	nop
 8015568:	20009968 	.word	0x20009968

0801556c <_Balloc>:
 801556c:	b570      	push	{r4, r5, r6, lr}
 801556e:	69c6      	ldr	r6, [r0, #28]
 8015570:	4604      	mov	r4, r0
 8015572:	460d      	mov	r5, r1
 8015574:	b976      	cbnz	r6, 8015594 <_Balloc+0x28>
 8015576:	2010      	movs	r0, #16
 8015578:	f7ff ff44 	bl	8015404 <malloc>
 801557c:	4602      	mov	r2, r0
 801557e:	61e0      	str	r0, [r4, #28]
 8015580:	b920      	cbnz	r0, 801558c <_Balloc+0x20>
 8015582:	4b18      	ldr	r3, [pc, #96]	; (80155e4 <_Balloc+0x78>)
 8015584:	4818      	ldr	r0, [pc, #96]	; (80155e8 <_Balloc+0x7c>)
 8015586:	216b      	movs	r1, #107	; 0x6b
 8015588:	f000 fd82 	bl	8016090 <__assert_func>
 801558c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015590:	6006      	str	r6, [r0, #0]
 8015592:	60c6      	str	r6, [r0, #12]
 8015594:	69e6      	ldr	r6, [r4, #28]
 8015596:	68f3      	ldr	r3, [r6, #12]
 8015598:	b183      	cbz	r3, 80155bc <_Balloc+0x50>
 801559a:	69e3      	ldr	r3, [r4, #28]
 801559c:	68db      	ldr	r3, [r3, #12]
 801559e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80155a2:	b9b8      	cbnz	r0, 80155d4 <_Balloc+0x68>
 80155a4:	2101      	movs	r1, #1
 80155a6:	fa01 f605 	lsl.w	r6, r1, r5
 80155aa:	1d72      	adds	r2, r6, #5
 80155ac:	0092      	lsls	r2, r2, #2
 80155ae:	4620      	mov	r0, r4
 80155b0:	f000 fd8c 	bl	80160cc <_calloc_r>
 80155b4:	b160      	cbz	r0, 80155d0 <_Balloc+0x64>
 80155b6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80155ba:	e00e      	b.n	80155da <_Balloc+0x6e>
 80155bc:	2221      	movs	r2, #33	; 0x21
 80155be:	2104      	movs	r1, #4
 80155c0:	4620      	mov	r0, r4
 80155c2:	f000 fd83 	bl	80160cc <_calloc_r>
 80155c6:	69e3      	ldr	r3, [r4, #28]
 80155c8:	60f0      	str	r0, [r6, #12]
 80155ca:	68db      	ldr	r3, [r3, #12]
 80155cc:	2b00      	cmp	r3, #0
 80155ce:	d1e4      	bne.n	801559a <_Balloc+0x2e>
 80155d0:	2000      	movs	r0, #0
 80155d2:	bd70      	pop	{r4, r5, r6, pc}
 80155d4:	6802      	ldr	r2, [r0, #0]
 80155d6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80155da:	2300      	movs	r3, #0
 80155dc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80155e0:	e7f7      	b.n	80155d2 <_Balloc+0x66>
 80155e2:	bf00      	nop
 80155e4:	08016db1 	.word	0x08016db1
 80155e8:	08016e31 	.word	0x08016e31

080155ec <_Bfree>:
 80155ec:	b570      	push	{r4, r5, r6, lr}
 80155ee:	69c6      	ldr	r6, [r0, #28]
 80155f0:	4605      	mov	r5, r0
 80155f2:	460c      	mov	r4, r1
 80155f4:	b976      	cbnz	r6, 8015614 <_Bfree+0x28>
 80155f6:	2010      	movs	r0, #16
 80155f8:	f7ff ff04 	bl	8015404 <malloc>
 80155fc:	4602      	mov	r2, r0
 80155fe:	61e8      	str	r0, [r5, #28]
 8015600:	b920      	cbnz	r0, 801560c <_Bfree+0x20>
 8015602:	4b09      	ldr	r3, [pc, #36]	; (8015628 <_Bfree+0x3c>)
 8015604:	4809      	ldr	r0, [pc, #36]	; (801562c <_Bfree+0x40>)
 8015606:	218f      	movs	r1, #143	; 0x8f
 8015608:	f000 fd42 	bl	8016090 <__assert_func>
 801560c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015610:	6006      	str	r6, [r0, #0]
 8015612:	60c6      	str	r6, [r0, #12]
 8015614:	b13c      	cbz	r4, 8015626 <_Bfree+0x3a>
 8015616:	69eb      	ldr	r3, [r5, #28]
 8015618:	6862      	ldr	r2, [r4, #4]
 801561a:	68db      	ldr	r3, [r3, #12]
 801561c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8015620:	6021      	str	r1, [r4, #0]
 8015622:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8015626:	bd70      	pop	{r4, r5, r6, pc}
 8015628:	08016db1 	.word	0x08016db1
 801562c:	08016e31 	.word	0x08016e31

08015630 <__multadd>:
 8015630:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015634:	690d      	ldr	r5, [r1, #16]
 8015636:	4607      	mov	r7, r0
 8015638:	460c      	mov	r4, r1
 801563a:	461e      	mov	r6, r3
 801563c:	f101 0c14 	add.w	ip, r1, #20
 8015640:	2000      	movs	r0, #0
 8015642:	f8dc 3000 	ldr.w	r3, [ip]
 8015646:	b299      	uxth	r1, r3
 8015648:	fb02 6101 	mla	r1, r2, r1, r6
 801564c:	0c1e      	lsrs	r6, r3, #16
 801564e:	0c0b      	lsrs	r3, r1, #16
 8015650:	fb02 3306 	mla	r3, r2, r6, r3
 8015654:	b289      	uxth	r1, r1
 8015656:	3001      	adds	r0, #1
 8015658:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801565c:	4285      	cmp	r5, r0
 801565e:	f84c 1b04 	str.w	r1, [ip], #4
 8015662:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8015666:	dcec      	bgt.n	8015642 <__multadd+0x12>
 8015668:	b30e      	cbz	r6, 80156ae <__multadd+0x7e>
 801566a:	68a3      	ldr	r3, [r4, #8]
 801566c:	42ab      	cmp	r3, r5
 801566e:	dc19      	bgt.n	80156a4 <__multadd+0x74>
 8015670:	6861      	ldr	r1, [r4, #4]
 8015672:	4638      	mov	r0, r7
 8015674:	3101      	adds	r1, #1
 8015676:	f7ff ff79 	bl	801556c <_Balloc>
 801567a:	4680      	mov	r8, r0
 801567c:	b928      	cbnz	r0, 801568a <__multadd+0x5a>
 801567e:	4602      	mov	r2, r0
 8015680:	4b0c      	ldr	r3, [pc, #48]	; (80156b4 <__multadd+0x84>)
 8015682:	480d      	ldr	r0, [pc, #52]	; (80156b8 <__multadd+0x88>)
 8015684:	21ba      	movs	r1, #186	; 0xba
 8015686:	f000 fd03 	bl	8016090 <__assert_func>
 801568a:	6922      	ldr	r2, [r4, #16]
 801568c:	3202      	adds	r2, #2
 801568e:	f104 010c 	add.w	r1, r4, #12
 8015692:	0092      	lsls	r2, r2, #2
 8015694:	300c      	adds	r0, #12
 8015696:	f7fe ffde 	bl	8014656 <memcpy>
 801569a:	4621      	mov	r1, r4
 801569c:	4638      	mov	r0, r7
 801569e:	f7ff ffa5 	bl	80155ec <_Bfree>
 80156a2:	4644      	mov	r4, r8
 80156a4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80156a8:	3501      	adds	r5, #1
 80156aa:	615e      	str	r6, [r3, #20]
 80156ac:	6125      	str	r5, [r4, #16]
 80156ae:	4620      	mov	r0, r4
 80156b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80156b4:	08016e20 	.word	0x08016e20
 80156b8:	08016e31 	.word	0x08016e31

080156bc <__hi0bits>:
 80156bc:	0c03      	lsrs	r3, r0, #16
 80156be:	041b      	lsls	r3, r3, #16
 80156c0:	b9d3      	cbnz	r3, 80156f8 <__hi0bits+0x3c>
 80156c2:	0400      	lsls	r0, r0, #16
 80156c4:	2310      	movs	r3, #16
 80156c6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80156ca:	bf04      	itt	eq
 80156cc:	0200      	lsleq	r0, r0, #8
 80156ce:	3308      	addeq	r3, #8
 80156d0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80156d4:	bf04      	itt	eq
 80156d6:	0100      	lsleq	r0, r0, #4
 80156d8:	3304      	addeq	r3, #4
 80156da:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80156de:	bf04      	itt	eq
 80156e0:	0080      	lsleq	r0, r0, #2
 80156e2:	3302      	addeq	r3, #2
 80156e4:	2800      	cmp	r0, #0
 80156e6:	db05      	blt.n	80156f4 <__hi0bits+0x38>
 80156e8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80156ec:	f103 0301 	add.w	r3, r3, #1
 80156f0:	bf08      	it	eq
 80156f2:	2320      	moveq	r3, #32
 80156f4:	4618      	mov	r0, r3
 80156f6:	4770      	bx	lr
 80156f8:	2300      	movs	r3, #0
 80156fa:	e7e4      	b.n	80156c6 <__hi0bits+0xa>

080156fc <__lo0bits>:
 80156fc:	6803      	ldr	r3, [r0, #0]
 80156fe:	f013 0207 	ands.w	r2, r3, #7
 8015702:	d00c      	beq.n	801571e <__lo0bits+0x22>
 8015704:	07d9      	lsls	r1, r3, #31
 8015706:	d422      	bmi.n	801574e <__lo0bits+0x52>
 8015708:	079a      	lsls	r2, r3, #30
 801570a:	bf49      	itett	mi
 801570c:	085b      	lsrmi	r3, r3, #1
 801570e:	089b      	lsrpl	r3, r3, #2
 8015710:	6003      	strmi	r3, [r0, #0]
 8015712:	2201      	movmi	r2, #1
 8015714:	bf5c      	itt	pl
 8015716:	6003      	strpl	r3, [r0, #0]
 8015718:	2202      	movpl	r2, #2
 801571a:	4610      	mov	r0, r2
 801571c:	4770      	bx	lr
 801571e:	b299      	uxth	r1, r3
 8015720:	b909      	cbnz	r1, 8015726 <__lo0bits+0x2a>
 8015722:	0c1b      	lsrs	r3, r3, #16
 8015724:	2210      	movs	r2, #16
 8015726:	b2d9      	uxtb	r1, r3
 8015728:	b909      	cbnz	r1, 801572e <__lo0bits+0x32>
 801572a:	3208      	adds	r2, #8
 801572c:	0a1b      	lsrs	r3, r3, #8
 801572e:	0719      	lsls	r1, r3, #28
 8015730:	bf04      	itt	eq
 8015732:	091b      	lsreq	r3, r3, #4
 8015734:	3204      	addeq	r2, #4
 8015736:	0799      	lsls	r1, r3, #30
 8015738:	bf04      	itt	eq
 801573a:	089b      	lsreq	r3, r3, #2
 801573c:	3202      	addeq	r2, #2
 801573e:	07d9      	lsls	r1, r3, #31
 8015740:	d403      	bmi.n	801574a <__lo0bits+0x4e>
 8015742:	085b      	lsrs	r3, r3, #1
 8015744:	f102 0201 	add.w	r2, r2, #1
 8015748:	d003      	beq.n	8015752 <__lo0bits+0x56>
 801574a:	6003      	str	r3, [r0, #0]
 801574c:	e7e5      	b.n	801571a <__lo0bits+0x1e>
 801574e:	2200      	movs	r2, #0
 8015750:	e7e3      	b.n	801571a <__lo0bits+0x1e>
 8015752:	2220      	movs	r2, #32
 8015754:	e7e1      	b.n	801571a <__lo0bits+0x1e>
	...

08015758 <__i2b>:
 8015758:	b510      	push	{r4, lr}
 801575a:	460c      	mov	r4, r1
 801575c:	2101      	movs	r1, #1
 801575e:	f7ff ff05 	bl	801556c <_Balloc>
 8015762:	4602      	mov	r2, r0
 8015764:	b928      	cbnz	r0, 8015772 <__i2b+0x1a>
 8015766:	4b05      	ldr	r3, [pc, #20]	; (801577c <__i2b+0x24>)
 8015768:	4805      	ldr	r0, [pc, #20]	; (8015780 <__i2b+0x28>)
 801576a:	f240 1145 	movw	r1, #325	; 0x145
 801576e:	f000 fc8f 	bl	8016090 <__assert_func>
 8015772:	2301      	movs	r3, #1
 8015774:	6144      	str	r4, [r0, #20]
 8015776:	6103      	str	r3, [r0, #16]
 8015778:	bd10      	pop	{r4, pc}
 801577a:	bf00      	nop
 801577c:	08016e20 	.word	0x08016e20
 8015780:	08016e31 	.word	0x08016e31

08015784 <__multiply>:
 8015784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015788:	4691      	mov	r9, r2
 801578a:	690a      	ldr	r2, [r1, #16]
 801578c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015790:	429a      	cmp	r2, r3
 8015792:	bfb8      	it	lt
 8015794:	460b      	movlt	r3, r1
 8015796:	460c      	mov	r4, r1
 8015798:	bfbc      	itt	lt
 801579a:	464c      	movlt	r4, r9
 801579c:	4699      	movlt	r9, r3
 801579e:	6927      	ldr	r7, [r4, #16]
 80157a0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80157a4:	68a3      	ldr	r3, [r4, #8]
 80157a6:	6861      	ldr	r1, [r4, #4]
 80157a8:	eb07 060a 	add.w	r6, r7, sl
 80157ac:	42b3      	cmp	r3, r6
 80157ae:	b085      	sub	sp, #20
 80157b0:	bfb8      	it	lt
 80157b2:	3101      	addlt	r1, #1
 80157b4:	f7ff feda 	bl	801556c <_Balloc>
 80157b8:	b930      	cbnz	r0, 80157c8 <__multiply+0x44>
 80157ba:	4602      	mov	r2, r0
 80157bc:	4b44      	ldr	r3, [pc, #272]	; (80158d0 <__multiply+0x14c>)
 80157be:	4845      	ldr	r0, [pc, #276]	; (80158d4 <__multiply+0x150>)
 80157c0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80157c4:	f000 fc64 	bl	8016090 <__assert_func>
 80157c8:	f100 0514 	add.w	r5, r0, #20
 80157cc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80157d0:	462b      	mov	r3, r5
 80157d2:	2200      	movs	r2, #0
 80157d4:	4543      	cmp	r3, r8
 80157d6:	d321      	bcc.n	801581c <__multiply+0x98>
 80157d8:	f104 0314 	add.w	r3, r4, #20
 80157dc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80157e0:	f109 0314 	add.w	r3, r9, #20
 80157e4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80157e8:	9202      	str	r2, [sp, #8]
 80157ea:	1b3a      	subs	r2, r7, r4
 80157ec:	3a15      	subs	r2, #21
 80157ee:	f022 0203 	bic.w	r2, r2, #3
 80157f2:	3204      	adds	r2, #4
 80157f4:	f104 0115 	add.w	r1, r4, #21
 80157f8:	428f      	cmp	r7, r1
 80157fa:	bf38      	it	cc
 80157fc:	2204      	movcc	r2, #4
 80157fe:	9201      	str	r2, [sp, #4]
 8015800:	9a02      	ldr	r2, [sp, #8]
 8015802:	9303      	str	r3, [sp, #12]
 8015804:	429a      	cmp	r2, r3
 8015806:	d80c      	bhi.n	8015822 <__multiply+0x9e>
 8015808:	2e00      	cmp	r6, #0
 801580a:	dd03      	ble.n	8015814 <__multiply+0x90>
 801580c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8015810:	2b00      	cmp	r3, #0
 8015812:	d05b      	beq.n	80158cc <__multiply+0x148>
 8015814:	6106      	str	r6, [r0, #16]
 8015816:	b005      	add	sp, #20
 8015818:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801581c:	f843 2b04 	str.w	r2, [r3], #4
 8015820:	e7d8      	b.n	80157d4 <__multiply+0x50>
 8015822:	f8b3 a000 	ldrh.w	sl, [r3]
 8015826:	f1ba 0f00 	cmp.w	sl, #0
 801582a:	d024      	beq.n	8015876 <__multiply+0xf2>
 801582c:	f104 0e14 	add.w	lr, r4, #20
 8015830:	46a9      	mov	r9, r5
 8015832:	f04f 0c00 	mov.w	ip, #0
 8015836:	f85e 2b04 	ldr.w	r2, [lr], #4
 801583a:	f8d9 1000 	ldr.w	r1, [r9]
 801583e:	fa1f fb82 	uxth.w	fp, r2
 8015842:	b289      	uxth	r1, r1
 8015844:	fb0a 110b 	mla	r1, sl, fp, r1
 8015848:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801584c:	f8d9 2000 	ldr.w	r2, [r9]
 8015850:	4461      	add	r1, ip
 8015852:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8015856:	fb0a c20b 	mla	r2, sl, fp, ip
 801585a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801585e:	b289      	uxth	r1, r1
 8015860:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8015864:	4577      	cmp	r7, lr
 8015866:	f849 1b04 	str.w	r1, [r9], #4
 801586a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801586e:	d8e2      	bhi.n	8015836 <__multiply+0xb2>
 8015870:	9a01      	ldr	r2, [sp, #4]
 8015872:	f845 c002 	str.w	ip, [r5, r2]
 8015876:	9a03      	ldr	r2, [sp, #12]
 8015878:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801587c:	3304      	adds	r3, #4
 801587e:	f1b9 0f00 	cmp.w	r9, #0
 8015882:	d021      	beq.n	80158c8 <__multiply+0x144>
 8015884:	6829      	ldr	r1, [r5, #0]
 8015886:	f104 0c14 	add.w	ip, r4, #20
 801588a:	46ae      	mov	lr, r5
 801588c:	f04f 0a00 	mov.w	sl, #0
 8015890:	f8bc b000 	ldrh.w	fp, [ip]
 8015894:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8015898:	fb09 220b 	mla	r2, r9, fp, r2
 801589c:	4452      	add	r2, sl
 801589e:	b289      	uxth	r1, r1
 80158a0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80158a4:	f84e 1b04 	str.w	r1, [lr], #4
 80158a8:	f85c 1b04 	ldr.w	r1, [ip], #4
 80158ac:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80158b0:	f8be 1000 	ldrh.w	r1, [lr]
 80158b4:	fb09 110a 	mla	r1, r9, sl, r1
 80158b8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80158bc:	4567      	cmp	r7, ip
 80158be:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80158c2:	d8e5      	bhi.n	8015890 <__multiply+0x10c>
 80158c4:	9a01      	ldr	r2, [sp, #4]
 80158c6:	50a9      	str	r1, [r5, r2]
 80158c8:	3504      	adds	r5, #4
 80158ca:	e799      	b.n	8015800 <__multiply+0x7c>
 80158cc:	3e01      	subs	r6, #1
 80158ce:	e79b      	b.n	8015808 <__multiply+0x84>
 80158d0:	08016e20 	.word	0x08016e20
 80158d4:	08016e31 	.word	0x08016e31

080158d8 <__pow5mult>:
 80158d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80158dc:	4615      	mov	r5, r2
 80158de:	f012 0203 	ands.w	r2, r2, #3
 80158e2:	4606      	mov	r6, r0
 80158e4:	460f      	mov	r7, r1
 80158e6:	d007      	beq.n	80158f8 <__pow5mult+0x20>
 80158e8:	4c25      	ldr	r4, [pc, #148]	; (8015980 <__pow5mult+0xa8>)
 80158ea:	3a01      	subs	r2, #1
 80158ec:	2300      	movs	r3, #0
 80158ee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80158f2:	f7ff fe9d 	bl	8015630 <__multadd>
 80158f6:	4607      	mov	r7, r0
 80158f8:	10ad      	asrs	r5, r5, #2
 80158fa:	d03d      	beq.n	8015978 <__pow5mult+0xa0>
 80158fc:	69f4      	ldr	r4, [r6, #28]
 80158fe:	b97c      	cbnz	r4, 8015920 <__pow5mult+0x48>
 8015900:	2010      	movs	r0, #16
 8015902:	f7ff fd7f 	bl	8015404 <malloc>
 8015906:	4602      	mov	r2, r0
 8015908:	61f0      	str	r0, [r6, #28]
 801590a:	b928      	cbnz	r0, 8015918 <__pow5mult+0x40>
 801590c:	4b1d      	ldr	r3, [pc, #116]	; (8015984 <__pow5mult+0xac>)
 801590e:	481e      	ldr	r0, [pc, #120]	; (8015988 <__pow5mult+0xb0>)
 8015910:	f240 11b3 	movw	r1, #435	; 0x1b3
 8015914:	f000 fbbc 	bl	8016090 <__assert_func>
 8015918:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801591c:	6004      	str	r4, [r0, #0]
 801591e:	60c4      	str	r4, [r0, #12]
 8015920:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8015924:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8015928:	b94c      	cbnz	r4, 801593e <__pow5mult+0x66>
 801592a:	f240 2171 	movw	r1, #625	; 0x271
 801592e:	4630      	mov	r0, r6
 8015930:	f7ff ff12 	bl	8015758 <__i2b>
 8015934:	2300      	movs	r3, #0
 8015936:	f8c8 0008 	str.w	r0, [r8, #8]
 801593a:	4604      	mov	r4, r0
 801593c:	6003      	str	r3, [r0, #0]
 801593e:	f04f 0900 	mov.w	r9, #0
 8015942:	07eb      	lsls	r3, r5, #31
 8015944:	d50a      	bpl.n	801595c <__pow5mult+0x84>
 8015946:	4639      	mov	r1, r7
 8015948:	4622      	mov	r2, r4
 801594a:	4630      	mov	r0, r6
 801594c:	f7ff ff1a 	bl	8015784 <__multiply>
 8015950:	4639      	mov	r1, r7
 8015952:	4680      	mov	r8, r0
 8015954:	4630      	mov	r0, r6
 8015956:	f7ff fe49 	bl	80155ec <_Bfree>
 801595a:	4647      	mov	r7, r8
 801595c:	106d      	asrs	r5, r5, #1
 801595e:	d00b      	beq.n	8015978 <__pow5mult+0xa0>
 8015960:	6820      	ldr	r0, [r4, #0]
 8015962:	b938      	cbnz	r0, 8015974 <__pow5mult+0x9c>
 8015964:	4622      	mov	r2, r4
 8015966:	4621      	mov	r1, r4
 8015968:	4630      	mov	r0, r6
 801596a:	f7ff ff0b 	bl	8015784 <__multiply>
 801596e:	6020      	str	r0, [r4, #0]
 8015970:	f8c0 9000 	str.w	r9, [r0]
 8015974:	4604      	mov	r4, r0
 8015976:	e7e4      	b.n	8015942 <__pow5mult+0x6a>
 8015978:	4638      	mov	r0, r7
 801597a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801597e:	bf00      	nop
 8015980:	08016f80 	.word	0x08016f80
 8015984:	08016db1 	.word	0x08016db1
 8015988:	08016e31 	.word	0x08016e31

0801598c <__lshift>:
 801598c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015990:	460c      	mov	r4, r1
 8015992:	6849      	ldr	r1, [r1, #4]
 8015994:	6923      	ldr	r3, [r4, #16]
 8015996:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801599a:	68a3      	ldr	r3, [r4, #8]
 801599c:	4607      	mov	r7, r0
 801599e:	4691      	mov	r9, r2
 80159a0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80159a4:	f108 0601 	add.w	r6, r8, #1
 80159a8:	42b3      	cmp	r3, r6
 80159aa:	db0b      	blt.n	80159c4 <__lshift+0x38>
 80159ac:	4638      	mov	r0, r7
 80159ae:	f7ff fddd 	bl	801556c <_Balloc>
 80159b2:	4605      	mov	r5, r0
 80159b4:	b948      	cbnz	r0, 80159ca <__lshift+0x3e>
 80159b6:	4602      	mov	r2, r0
 80159b8:	4b28      	ldr	r3, [pc, #160]	; (8015a5c <__lshift+0xd0>)
 80159ba:	4829      	ldr	r0, [pc, #164]	; (8015a60 <__lshift+0xd4>)
 80159bc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80159c0:	f000 fb66 	bl	8016090 <__assert_func>
 80159c4:	3101      	adds	r1, #1
 80159c6:	005b      	lsls	r3, r3, #1
 80159c8:	e7ee      	b.n	80159a8 <__lshift+0x1c>
 80159ca:	2300      	movs	r3, #0
 80159cc:	f100 0114 	add.w	r1, r0, #20
 80159d0:	f100 0210 	add.w	r2, r0, #16
 80159d4:	4618      	mov	r0, r3
 80159d6:	4553      	cmp	r3, sl
 80159d8:	db33      	blt.n	8015a42 <__lshift+0xb6>
 80159da:	6920      	ldr	r0, [r4, #16]
 80159dc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80159e0:	f104 0314 	add.w	r3, r4, #20
 80159e4:	f019 091f 	ands.w	r9, r9, #31
 80159e8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80159ec:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80159f0:	d02b      	beq.n	8015a4a <__lshift+0xbe>
 80159f2:	f1c9 0e20 	rsb	lr, r9, #32
 80159f6:	468a      	mov	sl, r1
 80159f8:	2200      	movs	r2, #0
 80159fa:	6818      	ldr	r0, [r3, #0]
 80159fc:	fa00 f009 	lsl.w	r0, r0, r9
 8015a00:	4310      	orrs	r0, r2
 8015a02:	f84a 0b04 	str.w	r0, [sl], #4
 8015a06:	f853 2b04 	ldr.w	r2, [r3], #4
 8015a0a:	459c      	cmp	ip, r3
 8015a0c:	fa22 f20e 	lsr.w	r2, r2, lr
 8015a10:	d8f3      	bhi.n	80159fa <__lshift+0x6e>
 8015a12:	ebac 0304 	sub.w	r3, ip, r4
 8015a16:	3b15      	subs	r3, #21
 8015a18:	f023 0303 	bic.w	r3, r3, #3
 8015a1c:	3304      	adds	r3, #4
 8015a1e:	f104 0015 	add.w	r0, r4, #21
 8015a22:	4584      	cmp	ip, r0
 8015a24:	bf38      	it	cc
 8015a26:	2304      	movcc	r3, #4
 8015a28:	50ca      	str	r2, [r1, r3]
 8015a2a:	b10a      	cbz	r2, 8015a30 <__lshift+0xa4>
 8015a2c:	f108 0602 	add.w	r6, r8, #2
 8015a30:	3e01      	subs	r6, #1
 8015a32:	4638      	mov	r0, r7
 8015a34:	612e      	str	r6, [r5, #16]
 8015a36:	4621      	mov	r1, r4
 8015a38:	f7ff fdd8 	bl	80155ec <_Bfree>
 8015a3c:	4628      	mov	r0, r5
 8015a3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015a42:	f842 0f04 	str.w	r0, [r2, #4]!
 8015a46:	3301      	adds	r3, #1
 8015a48:	e7c5      	b.n	80159d6 <__lshift+0x4a>
 8015a4a:	3904      	subs	r1, #4
 8015a4c:	f853 2b04 	ldr.w	r2, [r3], #4
 8015a50:	f841 2f04 	str.w	r2, [r1, #4]!
 8015a54:	459c      	cmp	ip, r3
 8015a56:	d8f9      	bhi.n	8015a4c <__lshift+0xc0>
 8015a58:	e7ea      	b.n	8015a30 <__lshift+0xa4>
 8015a5a:	bf00      	nop
 8015a5c:	08016e20 	.word	0x08016e20
 8015a60:	08016e31 	.word	0x08016e31

08015a64 <__mcmp>:
 8015a64:	b530      	push	{r4, r5, lr}
 8015a66:	6902      	ldr	r2, [r0, #16]
 8015a68:	690c      	ldr	r4, [r1, #16]
 8015a6a:	1b12      	subs	r2, r2, r4
 8015a6c:	d10e      	bne.n	8015a8c <__mcmp+0x28>
 8015a6e:	f100 0314 	add.w	r3, r0, #20
 8015a72:	3114      	adds	r1, #20
 8015a74:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8015a78:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8015a7c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8015a80:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8015a84:	42a5      	cmp	r5, r4
 8015a86:	d003      	beq.n	8015a90 <__mcmp+0x2c>
 8015a88:	d305      	bcc.n	8015a96 <__mcmp+0x32>
 8015a8a:	2201      	movs	r2, #1
 8015a8c:	4610      	mov	r0, r2
 8015a8e:	bd30      	pop	{r4, r5, pc}
 8015a90:	4283      	cmp	r3, r0
 8015a92:	d3f3      	bcc.n	8015a7c <__mcmp+0x18>
 8015a94:	e7fa      	b.n	8015a8c <__mcmp+0x28>
 8015a96:	f04f 32ff 	mov.w	r2, #4294967295
 8015a9a:	e7f7      	b.n	8015a8c <__mcmp+0x28>

08015a9c <__mdiff>:
 8015a9c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015aa0:	460c      	mov	r4, r1
 8015aa2:	4606      	mov	r6, r0
 8015aa4:	4611      	mov	r1, r2
 8015aa6:	4620      	mov	r0, r4
 8015aa8:	4690      	mov	r8, r2
 8015aaa:	f7ff ffdb 	bl	8015a64 <__mcmp>
 8015aae:	1e05      	subs	r5, r0, #0
 8015ab0:	d110      	bne.n	8015ad4 <__mdiff+0x38>
 8015ab2:	4629      	mov	r1, r5
 8015ab4:	4630      	mov	r0, r6
 8015ab6:	f7ff fd59 	bl	801556c <_Balloc>
 8015aba:	b930      	cbnz	r0, 8015aca <__mdiff+0x2e>
 8015abc:	4b3a      	ldr	r3, [pc, #232]	; (8015ba8 <__mdiff+0x10c>)
 8015abe:	4602      	mov	r2, r0
 8015ac0:	f240 2137 	movw	r1, #567	; 0x237
 8015ac4:	4839      	ldr	r0, [pc, #228]	; (8015bac <__mdiff+0x110>)
 8015ac6:	f000 fae3 	bl	8016090 <__assert_func>
 8015aca:	2301      	movs	r3, #1
 8015acc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8015ad0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ad4:	bfa4      	itt	ge
 8015ad6:	4643      	movge	r3, r8
 8015ad8:	46a0      	movge	r8, r4
 8015ada:	4630      	mov	r0, r6
 8015adc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8015ae0:	bfa6      	itte	ge
 8015ae2:	461c      	movge	r4, r3
 8015ae4:	2500      	movge	r5, #0
 8015ae6:	2501      	movlt	r5, #1
 8015ae8:	f7ff fd40 	bl	801556c <_Balloc>
 8015aec:	b920      	cbnz	r0, 8015af8 <__mdiff+0x5c>
 8015aee:	4b2e      	ldr	r3, [pc, #184]	; (8015ba8 <__mdiff+0x10c>)
 8015af0:	4602      	mov	r2, r0
 8015af2:	f240 2145 	movw	r1, #581	; 0x245
 8015af6:	e7e5      	b.n	8015ac4 <__mdiff+0x28>
 8015af8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8015afc:	6926      	ldr	r6, [r4, #16]
 8015afe:	60c5      	str	r5, [r0, #12]
 8015b00:	f104 0914 	add.w	r9, r4, #20
 8015b04:	f108 0514 	add.w	r5, r8, #20
 8015b08:	f100 0e14 	add.w	lr, r0, #20
 8015b0c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8015b10:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8015b14:	f108 0210 	add.w	r2, r8, #16
 8015b18:	46f2      	mov	sl, lr
 8015b1a:	2100      	movs	r1, #0
 8015b1c:	f859 3b04 	ldr.w	r3, [r9], #4
 8015b20:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8015b24:	fa11 f88b 	uxtah	r8, r1, fp
 8015b28:	b299      	uxth	r1, r3
 8015b2a:	0c1b      	lsrs	r3, r3, #16
 8015b2c:	eba8 0801 	sub.w	r8, r8, r1
 8015b30:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8015b34:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8015b38:	fa1f f888 	uxth.w	r8, r8
 8015b3c:	1419      	asrs	r1, r3, #16
 8015b3e:	454e      	cmp	r6, r9
 8015b40:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8015b44:	f84a 3b04 	str.w	r3, [sl], #4
 8015b48:	d8e8      	bhi.n	8015b1c <__mdiff+0x80>
 8015b4a:	1b33      	subs	r3, r6, r4
 8015b4c:	3b15      	subs	r3, #21
 8015b4e:	f023 0303 	bic.w	r3, r3, #3
 8015b52:	3304      	adds	r3, #4
 8015b54:	3415      	adds	r4, #21
 8015b56:	42a6      	cmp	r6, r4
 8015b58:	bf38      	it	cc
 8015b5a:	2304      	movcc	r3, #4
 8015b5c:	441d      	add	r5, r3
 8015b5e:	4473      	add	r3, lr
 8015b60:	469e      	mov	lr, r3
 8015b62:	462e      	mov	r6, r5
 8015b64:	4566      	cmp	r6, ip
 8015b66:	d30e      	bcc.n	8015b86 <__mdiff+0xea>
 8015b68:	f10c 0203 	add.w	r2, ip, #3
 8015b6c:	1b52      	subs	r2, r2, r5
 8015b6e:	f022 0203 	bic.w	r2, r2, #3
 8015b72:	3d03      	subs	r5, #3
 8015b74:	45ac      	cmp	ip, r5
 8015b76:	bf38      	it	cc
 8015b78:	2200      	movcc	r2, #0
 8015b7a:	4413      	add	r3, r2
 8015b7c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8015b80:	b17a      	cbz	r2, 8015ba2 <__mdiff+0x106>
 8015b82:	6107      	str	r7, [r0, #16]
 8015b84:	e7a4      	b.n	8015ad0 <__mdiff+0x34>
 8015b86:	f856 8b04 	ldr.w	r8, [r6], #4
 8015b8a:	fa11 f288 	uxtah	r2, r1, r8
 8015b8e:	1414      	asrs	r4, r2, #16
 8015b90:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8015b94:	b292      	uxth	r2, r2
 8015b96:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8015b9a:	f84e 2b04 	str.w	r2, [lr], #4
 8015b9e:	1421      	asrs	r1, r4, #16
 8015ba0:	e7e0      	b.n	8015b64 <__mdiff+0xc8>
 8015ba2:	3f01      	subs	r7, #1
 8015ba4:	e7ea      	b.n	8015b7c <__mdiff+0xe0>
 8015ba6:	bf00      	nop
 8015ba8:	08016e20 	.word	0x08016e20
 8015bac:	08016e31 	.word	0x08016e31

08015bb0 <__d2b>:
 8015bb0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8015bb4:	460f      	mov	r7, r1
 8015bb6:	2101      	movs	r1, #1
 8015bb8:	ec59 8b10 	vmov	r8, r9, d0
 8015bbc:	4616      	mov	r6, r2
 8015bbe:	f7ff fcd5 	bl	801556c <_Balloc>
 8015bc2:	4604      	mov	r4, r0
 8015bc4:	b930      	cbnz	r0, 8015bd4 <__d2b+0x24>
 8015bc6:	4602      	mov	r2, r0
 8015bc8:	4b24      	ldr	r3, [pc, #144]	; (8015c5c <__d2b+0xac>)
 8015bca:	4825      	ldr	r0, [pc, #148]	; (8015c60 <__d2b+0xb0>)
 8015bcc:	f240 310f 	movw	r1, #783	; 0x30f
 8015bd0:	f000 fa5e 	bl	8016090 <__assert_func>
 8015bd4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8015bd8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8015bdc:	bb2d      	cbnz	r5, 8015c2a <__d2b+0x7a>
 8015bde:	9301      	str	r3, [sp, #4]
 8015be0:	f1b8 0300 	subs.w	r3, r8, #0
 8015be4:	d026      	beq.n	8015c34 <__d2b+0x84>
 8015be6:	4668      	mov	r0, sp
 8015be8:	9300      	str	r3, [sp, #0]
 8015bea:	f7ff fd87 	bl	80156fc <__lo0bits>
 8015bee:	e9dd 1200 	ldrd	r1, r2, [sp]
 8015bf2:	b1e8      	cbz	r0, 8015c30 <__d2b+0x80>
 8015bf4:	f1c0 0320 	rsb	r3, r0, #32
 8015bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8015bfc:	430b      	orrs	r3, r1
 8015bfe:	40c2      	lsrs	r2, r0
 8015c00:	6163      	str	r3, [r4, #20]
 8015c02:	9201      	str	r2, [sp, #4]
 8015c04:	9b01      	ldr	r3, [sp, #4]
 8015c06:	61a3      	str	r3, [r4, #24]
 8015c08:	2b00      	cmp	r3, #0
 8015c0a:	bf14      	ite	ne
 8015c0c:	2202      	movne	r2, #2
 8015c0e:	2201      	moveq	r2, #1
 8015c10:	6122      	str	r2, [r4, #16]
 8015c12:	b1bd      	cbz	r5, 8015c44 <__d2b+0x94>
 8015c14:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8015c18:	4405      	add	r5, r0
 8015c1a:	603d      	str	r5, [r7, #0]
 8015c1c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8015c20:	6030      	str	r0, [r6, #0]
 8015c22:	4620      	mov	r0, r4
 8015c24:	b003      	add	sp, #12
 8015c26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015c2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8015c2e:	e7d6      	b.n	8015bde <__d2b+0x2e>
 8015c30:	6161      	str	r1, [r4, #20]
 8015c32:	e7e7      	b.n	8015c04 <__d2b+0x54>
 8015c34:	a801      	add	r0, sp, #4
 8015c36:	f7ff fd61 	bl	80156fc <__lo0bits>
 8015c3a:	9b01      	ldr	r3, [sp, #4]
 8015c3c:	6163      	str	r3, [r4, #20]
 8015c3e:	3020      	adds	r0, #32
 8015c40:	2201      	movs	r2, #1
 8015c42:	e7e5      	b.n	8015c10 <__d2b+0x60>
 8015c44:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8015c48:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8015c4c:	6038      	str	r0, [r7, #0]
 8015c4e:	6918      	ldr	r0, [r3, #16]
 8015c50:	f7ff fd34 	bl	80156bc <__hi0bits>
 8015c54:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8015c58:	e7e2      	b.n	8015c20 <__d2b+0x70>
 8015c5a:	bf00      	nop
 8015c5c:	08016e20 	.word	0x08016e20
 8015c60:	08016e31 	.word	0x08016e31

08015c64 <__ssputs_r>:
 8015c64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015c68:	688e      	ldr	r6, [r1, #8]
 8015c6a:	461f      	mov	r7, r3
 8015c6c:	42be      	cmp	r6, r7
 8015c6e:	680b      	ldr	r3, [r1, #0]
 8015c70:	4682      	mov	sl, r0
 8015c72:	460c      	mov	r4, r1
 8015c74:	4690      	mov	r8, r2
 8015c76:	d82c      	bhi.n	8015cd2 <__ssputs_r+0x6e>
 8015c78:	898a      	ldrh	r2, [r1, #12]
 8015c7a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8015c7e:	d026      	beq.n	8015cce <__ssputs_r+0x6a>
 8015c80:	6965      	ldr	r5, [r4, #20]
 8015c82:	6909      	ldr	r1, [r1, #16]
 8015c84:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015c88:	eba3 0901 	sub.w	r9, r3, r1
 8015c8c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8015c90:	1c7b      	adds	r3, r7, #1
 8015c92:	444b      	add	r3, r9
 8015c94:	106d      	asrs	r5, r5, #1
 8015c96:	429d      	cmp	r5, r3
 8015c98:	bf38      	it	cc
 8015c9a:	461d      	movcc	r5, r3
 8015c9c:	0553      	lsls	r3, r2, #21
 8015c9e:	d527      	bpl.n	8015cf0 <__ssputs_r+0x8c>
 8015ca0:	4629      	mov	r1, r5
 8015ca2:	f7ff fbd7 	bl	8015454 <_malloc_r>
 8015ca6:	4606      	mov	r6, r0
 8015ca8:	b360      	cbz	r0, 8015d04 <__ssputs_r+0xa0>
 8015caa:	6921      	ldr	r1, [r4, #16]
 8015cac:	464a      	mov	r2, r9
 8015cae:	f7fe fcd2 	bl	8014656 <memcpy>
 8015cb2:	89a3      	ldrh	r3, [r4, #12]
 8015cb4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8015cb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015cbc:	81a3      	strh	r3, [r4, #12]
 8015cbe:	6126      	str	r6, [r4, #16]
 8015cc0:	6165      	str	r5, [r4, #20]
 8015cc2:	444e      	add	r6, r9
 8015cc4:	eba5 0509 	sub.w	r5, r5, r9
 8015cc8:	6026      	str	r6, [r4, #0]
 8015cca:	60a5      	str	r5, [r4, #8]
 8015ccc:	463e      	mov	r6, r7
 8015cce:	42be      	cmp	r6, r7
 8015cd0:	d900      	bls.n	8015cd4 <__ssputs_r+0x70>
 8015cd2:	463e      	mov	r6, r7
 8015cd4:	6820      	ldr	r0, [r4, #0]
 8015cd6:	4632      	mov	r2, r6
 8015cd8:	4641      	mov	r1, r8
 8015cda:	f7fe fbcc 	bl	8014476 <memmove>
 8015cde:	68a3      	ldr	r3, [r4, #8]
 8015ce0:	1b9b      	subs	r3, r3, r6
 8015ce2:	60a3      	str	r3, [r4, #8]
 8015ce4:	6823      	ldr	r3, [r4, #0]
 8015ce6:	4433      	add	r3, r6
 8015ce8:	6023      	str	r3, [r4, #0]
 8015cea:	2000      	movs	r0, #0
 8015cec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015cf0:	462a      	mov	r2, r5
 8015cf2:	f000 fa13 	bl	801611c <_realloc_r>
 8015cf6:	4606      	mov	r6, r0
 8015cf8:	2800      	cmp	r0, #0
 8015cfa:	d1e0      	bne.n	8015cbe <__ssputs_r+0x5a>
 8015cfc:	6921      	ldr	r1, [r4, #16]
 8015cfe:	4650      	mov	r0, sl
 8015d00:	f7ff fb34 	bl	801536c <_free_r>
 8015d04:	230c      	movs	r3, #12
 8015d06:	f8ca 3000 	str.w	r3, [sl]
 8015d0a:	89a3      	ldrh	r3, [r4, #12]
 8015d0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015d10:	81a3      	strh	r3, [r4, #12]
 8015d12:	f04f 30ff 	mov.w	r0, #4294967295
 8015d16:	e7e9      	b.n	8015cec <__ssputs_r+0x88>

08015d18 <_svfiprintf_r>:
 8015d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d1c:	4698      	mov	r8, r3
 8015d1e:	898b      	ldrh	r3, [r1, #12]
 8015d20:	061b      	lsls	r3, r3, #24
 8015d22:	b09d      	sub	sp, #116	; 0x74
 8015d24:	4607      	mov	r7, r0
 8015d26:	460d      	mov	r5, r1
 8015d28:	4614      	mov	r4, r2
 8015d2a:	d50e      	bpl.n	8015d4a <_svfiprintf_r+0x32>
 8015d2c:	690b      	ldr	r3, [r1, #16]
 8015d2e:	b963      	cbnz	r3, 8015d4a <_svfiprintf_r+0x32>
 8015d30:	2140      	movs	r1, #64	; 0x40
 8015d32:	f7ff fb8f 	bl	8015454 <_malloc_r>
 8015d36:	6028      	str	r0, [r5, #0]
 8015d38:	6128      	str	r0, [r5, #16]
 8015d3a:	b920      	cbnz	r0, 8015d46 <_svfiprintf_r+0x2e>
 8015d3c:	230c      	movs	r3, #12
 8015d3e:	603b      	str	r3, [r7, #0]
 8015d40:	f04f 30ff 	mov.w	r0, #4294967295
 8015d44:	e0d0      	b.n	8015ee8 <_svfiprintf_r+0x1d0>
 8015d46:	2340      	movs	r3, #64	; 0x40
 8015d48:	616b      	str	r3, [r5, #20]
 8015d4a:	2300      	movs	r3, #0
 8015d4c:	9309      	str	r3, [sp, #36]	; 0x24
 8015d4e:	2320      	movs	r3, #32
 8015d50:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015d54:	f8cd 800c 	str.w	r8, [sp, #12]
 8015d58:	2330      	movs	r3, #48	; 0x30
 8015d5a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8015f00 <_svfiprintf_r+0x1e8>
 8015d5e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015d62:	f04f 0901 	mov.w	r9, #1
 8015d66:	4623      	mov	r3, r4
 8015d68:	469a      	mov	sl, r3
 8015d6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015d6e:	b10a      	cbz	r2, 8015d74 <_svfiprintf_r+0x5c>
 8015d70:	2a25      	cmp	r2, #37	; 0x25
 8015d72:	d1f9      	bne.n	8015d68 <_svfiprintf_r+0x50>
 8015d74:	ebba 0b04 	subs.w	fp, sl, r4
 8015d78:	d00b      	beq.n	8015d92 <_svfiprintf_r+0x7a>
 8015d7a:	465b      	mov	r3, fp
 8015d7c:	4622      	mov	r2, r4
 8015d7e:	4629      	mov	r1, r5
 8015d80:	4638      	mov	r0, r7
 8015d82:	f7ff ff6f 	bl	8015c64 <__ssputs_r>
 8015d86:	3001      	adds	r0, #1
 8015d88:	f000 80a9 	beq.w	8015ede <_svfiprintf_r+0x1c6>
 8015d8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015d8e:	445a      	add	r2, fp
 8015d90:	9209      	str	r2, [sp, #36]	; 0x24
 8015d92:	f89a 3000 	ldrb.w	r3, [sl]
 8015d96:	2b00      	cmp	r3, #0
 8015d98:	f000 80a1 	beq.w	8015ede <_svfiprintf_r+0x1c6>
 8015d9c:	2300      	movs	r3, #0
 8015d9e:	f04f 32ff 	mov.w	r2, #4294967295
 8015da2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015da6:	f10a 0a01 	add.w	sl, sl, #1
 8015daa:	9304      	str	r3, [sp, #16]
 8015dac:	9307      	str	r3, [sp, #28]
 8015dae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015db2:	931a      	str	r3, [sp, #104]	; 0x68
 8015db4:	4654      	mov	r4, sl
 8015db6:	2205      	movs	r2, #5
 8015db8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015dbc:	4850      	ldr	r0, [pc, #320]	; (8015f00 <_svfiprintf_r+0x1e8>)
 8015dbe:	f7ea fa1f 	bl	8000200 <memchr>
 8015dc2:	9a04      	ldr	r2, [sp, #16]
 8015dc4:	b9d8      	cbnz	r0, 8015dfe <_svfiprintf_r+0xe6>
 8015dc6:	06d0      	lsls	r0, r2, #27
 8015dc8:	bf44      	itt	mi
 8015dca:	2320      	movmi	r3, #32
 8015dcc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015dd0:	0711      	lsls	r1, r2, #28
 8015dd2:	bf44      	itt	mi
 8015dd4:	232b      	movmi	r3, #43	; 0x2b
 8015dd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015dda:	f89a 3000 	ldrb.w	r3, [sl]
 8015dde:	2b2a      	cmp	r3, #42	; 0x2a
 8015de0:	d015      	beq.n	8015e0e <_svfiprintf_r+0xf6>
 8015de2:	9a07      	ldr	r2, [sp, #28]
 8015de4:	4654      	mov	r4, sl
 8015de6:	2000      	movs	r0, #0
 8015de8:	f04f 0c0a 	mov.w	ip, #10
 8015dec:	4621      	mov	r1, r4
 8015dee:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015df2:	3b30      	subs	r3, #48	; 0x30
 8015df4:	2b09      	cmp	r3, #9
 8015df6:	d94d      	bls.n	8015e94 <_svfiprintf_r+0x17c>
 8015df8:	b1b0      	cbz	r0, 8015e28 <_svfiprintf_r+0x110>
 8015dfa:	9207      	str	r2, [sp, #28]
 8015dfc:	e014      	b.n	8015e28 <_svfiprintf_r+0x110>
 8015dfe:	eba0 0308 	sub.w	r3, r0, r8
 8015e02:	fa09 f303 	lsl.w	r3, r9, r3
 8015e06:	4313      	orrs	r3, r2
 8015e08:	9304      	str	r3, [sp, #16]
 8015e0a:	46a2      	mov	sl, r4
 8015e0c:	e7d2      	b.n	8015db4 <_svfiprintf_r+0x9c>
 8015e0e:	9b03      	ldr	r3, [sp, #12]
 8015e10:	1d19      	adds	r1, r3, #4
 8015e12:	681b      	ldr	r3, [r3, #0]
 8015e14:	9103      	str	r1, [sp, #12]
 8015e16:	2b00      	cmp	r3, #0
 8015e18:	bfbb      	ittet	lt
 8015e1a:	425b      	neglt	r3, r3
 8015e1c:	f042 0202 	orrlt.w	r2, r2, #2
 8015e20:	9307      	strge	r3, [sp, #28]
 8015e22:	9307      	strlt	r3, [sp, #28]
 8015e24:	bfb8      	it	lt
 8015e26:	9204      	strlt	r2, [sp, #16]
 8015e28:	7823      	ldrb	r3, [r4, #0]
 8015e2a:	2b2e      	cmp	r3, #46	; 0x2e
 8015e2c:	d10c      	bne.n	8015e48 <_svfiprintf_r+0x130>
 8015e2e:	7863      	ldrb	r3, [r4, #1]
 8015e30:	2b2a      	cmp	r3, #42	; 0x2a
 8015e32:	d134      	bne.n	8015e9e <_svfiprintf_r+0x186>
 8015e34:	9b03      	ldr	r3, [sp, #12]
 8015e36:	1d1a      	adds	r2, r3, #4
 8015e38:	681b      	ldr	r3, [r3, #0]
 8015e3a:	9203      	str	r2, [sp, #12]
 8015e3c:	2b00      	cmp	r3, #0
 8015e3e:	bfb8      	it	lt
 8015e40:	f04f 33ff 	movlt.w	r3, #4294967295
 8015e44:	3402      	adds	r4, #2
 8015e46:	9305      	str	r3, [sp, #20]
 8015e48:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8015f10 <_svfiprintf_r+0x1f8>
 8015e4c:	7821      	ldrb	r1, [r4, #0]
 8015e4e:	2203      	movs	r2, #3
 8015e50:	4650      	mov	r0, sl
 8015e52:	f7ea f9d5 	bl	8000200 <memchr>
 8015e56:	b138      	cbz	r0, 8015e68 <_svfiprintf_r+0x150>
 8015e58:	9b04      	ldr	r3, [sp, #16]
 8015e5a:	eba0 000a 	sub.w	r0, r0, sl
 8015e5e:	2240      	movs	r2, #64	; 0x40
 8015e60:	4082      	lsls	r2, r0
 8015e62:	4313      	orrs	r3, r2
 8015e64:	3401      	adds	r4, #1
 8015e66:	9304      	str	r3, [sp, #16]
 8015e68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015e6c:	4825      	ldr	r0, [pc, #148]	; (8015f04 <_svfiprintf_r+0x1ec>)
 8015e6e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015e72:	2206      	movs	r2, #6
 8015e74:	f7ea f9c4 	bl	8000200 <memchr>
 8015e78:	2800      	cmp	r0, #0
 8015e7a:	d038      	beq.n	8015eee <_svfiprintf_r+0x1d6>
 8015e7c:	4b22      	ldr	r3, [pc, #136]	; (8015f08 <_svfiprintf_r+0x1f0>)
 8015e7e:	bb1b      	cbnz	r3, 8015ec8 <_svfiprintf_r+0x1b0>
 8015e80:	9b03      	ldr	r3, [sp, #12]
 8015e82:	3307      	adds	r3, #7
 8015e84:	f023 0307 	bic.w	r3, r3, #7
 8015e88:	3308      	adds	r3, #8
 8015e8a:	9303      	str	r3, [sp, #12]
 8015e8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015e8e:	4433      	add	r3, r6
 8015e90:	9309      	str	r3, [sp, #36]	; 0x24
 8015e92:	e768      	b.n	8015d66 <_svfiprintf_r+0x4e>
 8015e94:	fb0c 3202 	mla	r2, ip, r2, r3
 8015e98:	460c      	mov	r4, r1
 8015e9a:	2001      	movs	r0, #1
 8015e9c:	e7a6      	b.n	8015dec <_svfiprintf_r+0xd4>
 8015e9e:	2300      	movs	r3, #0
 8015ea0:	3401      	adds	r4, #1
 8015ea2:	9305      	str	r3, [sp, #20]
 8015ea4:	4619      	mov	r1, r3
 8015ea6:	f04f 0c0a 	mov.w	ip, #10
 8015eaa:	4620      	mov	r0, r4
 8015eac:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015eb0:	3a30      	subs	r2, #48	; 0x30
 8015eb2:	2a09      	cmp	r2, #9
 8015eb4:	d903      	bls.n	8015ebe <_svfiprintf_r+0x1a6>
 8015eb6:	2b00      	cmp	r3, #0
 8015eb8:	d0c6      	beq.n	8015e48 <_svfiprintf_r+0x130>
 8015eba:	9105      	str	r1, [sp, #20]
 8015ebc:	e7c4      	b.n	8015e48 <_svfiprintf_r+0x130>
 8015ebe:	fb0c 2101 	mla	r1, ip, r1, r2
 8015ec2:	4604      	mov	r4, r0
 8015ec4:	2301      	movs	r3, #1
 8015ec6:	e7f0      	b.n	8015eaa <_svfiprintf_r+0x192>
 8015ec8:	ab03      	add	r3, sp, #12
 8015eca:	9300      	str	r3, [sp, #0]
 8015ecc:	462a      	mov	r2, r5
 8015ece:	4b0f      	ldr	r3, [pc, #60]	; (8015f0c <_svfiprintf_r+0x1f4>)
 8015ed0:	a904      	add	r1, sp, #16
 8015ed2:	4638      	mov	r0, r7
 8015ed4:	f7fd fde4 	bl	8013aa0 <_printf_float>
 8015ed8:	1c42      	adds	r2, r0, #1
 8015eda:	4606      	mov	r6, r0
 8015edc:	d1d6      	bne.n	8015e8c <_svfiprintf_r+0x174>
 8015ede:	89ab      	ldrh	r3, [r5, #12]
 8015ee0:	065b      	lsls	r3, r3, #25
 8015ee2:	f53f af2d 	bmi.w	8015d40 <_svfiprintf_r+0x28>
 8015ee6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015ee8:	b01d      	add	sp, #116	; 0x74
 8015eea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015eee:	ab03      	add	r3, sp, #12
 8015ef0:	9300      	str	r3, [sp, #0]
 8015ef2:	462a      	mov	r2, r5
 8015ef4:	4b05      	ldr	r3, [pc, #20]	; (8015f0c <_svfiprintf_r+0x1f4>)
 8015ef6:	a904      	add	r1, sp, #16
 8015ef8:	4638      	mov	r0, r7
 8015efa:	f7fe f875 	bl	8013fe8 <_printf_i>
 8015efe:	e7eb      	b.n	8015ed8 <_svfiprintf_r+0x1c0>
 8015f00:	08016f8c 	.word	0x08016f8c
 8015f04:	08016f96 	.word	0x08016f96
 8015f08:	08013aa1 	.word	0x08013aa1
 8015f0c:	08015c65 	.word	0x08015c65
 8015f10:	08016f92 	.word	0x08016f92

08015f14 <__sflush_r>:
 8015f14:	898a      	ldrh	r2, [r1, #12]
 8015f16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015f1a:	4605      	mov	r5, r0
 8015f1c:	0710      	lsls	r0, r2, #28
 8015f1e:	460c      	mov	r4, r1
 8015f20:	d458      	bmi.n	8015fd4 <__sflush_r+0xc0>
 8015f22:	684b      	ldr	r3, [r1, #4]
 8015f24:	2b00      	cmp	r3, #0
 8015f26:	dc05      	bgt.n	8015f34 <__sflush_r+0x20>
 8015f28:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8015f2a:	2b00      	cmp	r3, #0
 8015f2c:	dc02      	bgt.n	8015f34 <__sflush_r+0x20>
 8015f2e:	2000      	movs	r0, #0
 8015f30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015f34:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015f36:	2e00      	cmp	r6, #0
 8015f38:	d0f9      	beq.n	8015f2e <__sflush_r+0x1a>
 8015f3a:	2300      	movs	r3, #0
 8015f3c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015f40:	682f      	ldr	r7, [r5, #0]
 8015f42:	6a21      	ldr	r1, [r4, #32]
 8015f44:	602b      	str	r3, [r5, #0]
 8015f46:	d032      	beq.n	8015fae <__sflush_r+0x9a>
 8015f48:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015f4a:	89a3      	ldrh	r3, [r4, #12]
 8015f4c:	075a      	lsls	r2, r3, #29
 8015f4e:	d505      	bpl.n	8015f5c <__sflush_r+0x48>
 8015f50:	6863      	ldr	r3, [r4, #4]
 8015f52:	1ac0      	subs	r0, r0, r3
 8015f54:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015f56:	b10b      	cbz	r3, 8015f5c <__sflush_r+0x48>
 8015f58:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015f5a:	1ac0      	subs	r0, r0, r3
 8015f5c:	2300      	movs	r3, #0
 8015f5e:	4602      	mov	r2, r0
 8015f60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015f62:	6a21      	ldr	r1, [r4, #32]
 8015f64:	4628      	mov	r0, r5
 8015f66:	47b0      	blx	r6
 8015f68:	1c43      	adds	r3, r0, #1
 8015f6a:	89a3      	ldrh	r3, [r4, #12]
 8015f6c:	d106      	bne.n	8015f7c <__sflush_r+0x68>
 8015f6e:	6829      	ldr	r1, [r5, #0]
 8015f70:	291d      	cmp	r1, #29
 8015f72:	d82b      	bhi.n	8015fcc <__sflush_r+0xb8>
 8015f74:	4a29      	ldr	r2, [pc, #164]	; (801601c <__sflush_r+0x108>)
 8015f76:	410a      	asrs	r2, r1
 8015f78:	07d6      	lsls	r6, r2, #31
 8015f7a:	d427      	bmi.n	8015fcc <__sflush_r+0xb8>
 8015f7c:	2200      	movs	r2, #0
 8015f7e:	6062      	str	r2, [r4, #4]
 8015f80:	04d9      	lsls	r1, r3, #19
 8015f82:	6922      	ldr	r2, [r4, #16]
 8015f84:	6022      	str	r2, [r4, #0]
 8015f86:	d504      	bpl.n	8015f92 <__sflush_r+0x7e>
 8015f88:	1c42      	adds	r2, r0, #1
 8015f8a:	d101      	bne.n	8015f90 <__sflush_r+0x7c>
 8015f8c:	682b      	ldr	r3, [r5, #0]
 8015f8e:	b903      	cbnz	r3, 8015f92 <__sflush_r+0x7e>
 8015f90:	6560      	str	r0, [r4, #84]	; 0x54
 8015f92:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015f94:	602f      	str	r7, [r5, #0]
 8015f96:	2900      	cmp	r1, #0
 8015f98:	d0c9      	beq.n	8015f2e <__sflush_r+0x1a>
 8015f9a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015f9e:	4299      	cmp	r1, r3
 8015fa0:	d002      	beq.n	8015fa8 <__sflush_r+0x94>
 8015fa2:	4628      	mov	r0, r5
 8015fa4:	f7ff f9e2 	bl	801536c <_free_r>
 8015fa8:	2000      	movs	r0, #0
 8015faa:	6360      	str	r0, [r4, #52]	; 0x34
 8015fac:	e7c0      	b.n	8015f30 <__sflush_r+0x1c>
 8015fae:	2301      	movs	r3, #1
 8015fb0:	4628      	mov	r0, r5
 8015fb2:	47b0      	blx	r6
 8015fb4:	1c41      	adds	r1, r0, #1
 8015fb6:	d1c8      	bne.n	8015f4a <__sflush_r+0x36>
 8015fb8:	682b      	ldr	r3, [r5, #0]
 8015fba:	2b00      	cmp	r3, #0
 8015fbc:	d0c5      	beq.n	8015f4a <__sflush_r+0x36>
 8015fbe:	2b1d      	cmp	r3, #29
 8015fc0:	d001      	beq.n	8015fc6 <__sflush_r+0xb2>
 8015fc2:	2b16      	cmp	r3, #22
 8015fc4:	d101      	bne.n	8015fca <__sflush_r+0xb6>
 8015fc6:	602f      	str	r7, [r5, #0]
 8015fc8:	e7b1      	b.n	8015f2e <__sflush_r+0x1a>
 8015fca:	89a3      	ldrh	r3, [r4, #12]
 8015fcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015fd0:	81a3      	strh	r3, [r4, #12]
 8015fd2:	e7ad      	b.n	8015f30 <__sflush_r+0x1c>
 8015fd4:	690f      	ldr	r7, [r1, #16]
 8015fd6:	2f00      	cmp	r7, #0
 8015fd8:	d0a9      	beq.n	8015f2e <__sflush_r+0x1a>
 8015fda:	0793      	lsls	r3, r2, #30
 8015fdc:	680e      	ldr	r6, [r1, #0]
 8015fde:	bf08      	it	eq
 8015fe0:	694b      	ldreq	r3, [r1, #20]
 8015fe2:	600f      	str	r7, [r1, #0]
 8015fe4:	bf18      	it	ne
 8015fe6:	2300      	movne	r3, #0
 8015fe8:	eba6 0807 	sub.w	r8, r6, r7
 8015fec:	608b      	str	r3, [r1, #8]
 8015fee:	f1b8 0f00 	cmp.w	r8, #0
 8015ff2:	dd9c      	ble.n	8015f2e <__sflush_r+0x1a>
 8015ff4:	6a21      	ldr	r1, [r4, #32]
 8015ff6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015ff8:	4643      	mov	r3, r8
 8015ffa:	463a      	mov	r2, r7
 8015ffc:	4628      	mov	r0, r5
 8015ffe:	47b0      	blx	r6
 8016000:	2800      	cmp	r0, #0
 8016002:	dc06      	bgt.n	8016012 <__sflush_r+0xfe>
 8016004:	89a3      	ldrh	r3, [r4, #12]
 8016006:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801600a:	81a3      	strh	r3, [r4, #12]
 801600c:	f04f 30ff 	mov.w	r0, #4294967295
 8016010:	e78e      	b.n	8015f30 <__sflush_r+0x1c>
 8016012:	4407      	add	r7, r0
 8016014:	eba8 0800 	sub.w	r8, r8, r0
 8016018:	e7e9      	b.n	8015fee <__sflush_r+0xda>
 801601a:	bf00      	nop
 801601c:	dfbffffe 	.word	0xdfbffffe

08016020 <_fflush_r>:
 8016020:	b538      	push	{r3, r4, r5, lr}
 8016022:	690b      	ldr	r3, [r1, #16]
 8016024:	4605      	mov	r5, r0
 8016026:	460c      	mov	r4, r1
 8016028:	b913      	cbnz	r3, 8016030 <_fflush_r+0x10>
 801602a:	2500      	movs	r5, #0
 801602c:	4628      	mov	r0, r5
 801602e:	bd38      	pop	{r3, r4, r5, pc}
 8016030:	b118      	cbz	r0, 801603a <_fflush_r+0x1a>
 8016032:	6a03      	ldr	r3, [r0, #32]
 8016034:	b90b      	cbnz	r3, 801603a <_fflush_r+0x1a>
 8016036:	f7fe f985 	bl	8014344 <__sinit>
 801603a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801603e:	2b00      	cmp	r3, #0
 8016040:	d0f3      	beq.n	801602a <_fflush_r+0xa>
 8016042:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8016044:	07d0      	lsls	r0, r2, #31
 8016046:	d404      	bmi.n	8016052 <_fflush_r+0x32>
 8016048:	0599      	lsls	r1, r3, #22
 801604a:	d402      	bmi.n	8016052 <_fflush_r+0x32>
 801604c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801604e:	f7fe fb00 	bl	8014652 <__retarget_lock_acquire_recursive>
 8016052:	4628      	mov	r0, r5
 8016054:	4621      	mov	r1, r4
 8016056:	f7ff ff5d 	bl	8015f14 <__sflush_r>
 801605a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801605c:	07da      	lsls	r2, r3, #31
 801605e:	4605      	mov	r5, r0
 8016060:	d4e4      	bmi.n	801602c <_fflush_r+0xc>
 8016062:	89a3      	ldrh	r3, [r4, #12]
 8016064:	059b      	lsls	r3, r3, #22
 8016066:	d4e1      	bmi.n	801602c <_fflush_r+0xc>
 8016068:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801606a:	f7fe faf3 	bl	8014654 <__retarget_lock_release_recursive>
 801606e:	e7dd      	b.n	801602c <_fflush_r+0xc>

08016070 <_sbrk_r>:
 8016070:	b538      	push	{r3, r4, r5, lr}
 8016072:	4d06      	ldr	r5, [pc, #24]	; (801608c <_sbrk_r+0x1c>)
 8016074:	2300      	movs	r3, #0
 8016076:	4604      	mov	r4, r0
 8016078:	4608      	mov	r0, r1
 801607a:	602b      	str	r3, [r5, #0]
 801607c:	f7ee fffa 	bl	8005074 <_sbrk>
 8016080:	1c43      	adds	r3, r0, #1
 8016082:	d102      	bne.n	801608a <_sbrk_r+0x1a>
 8016084:	682b      	ldr	r3, [r5, #0]
 8016086:	b103      	cbz	r3, 801608a <_sbrk_r+0x1a>
 8016088:	6023      	str	r3, [r4, #0]
 801608a:	bd38      	pop	{r3, r4, r5, pc}
 801608c:	20009964 	.word	0x20009964

08016090 <__assert_func>:
 8016090:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016092:	4614      	mov	r4, r2
 8016094:	461a      	mov	r2, r3
 8016096:	4b09      	ldr	r3, [pc, #36]	; (80160bc <__assert_func+0x2c>)
 8016098:	681b      	ldr	r3, [r3, #0]
 801609a:	4605      	mov	r5, r0
 801609c:	68d8      	ldr	r0, [r3, #12]
 801609e:	b14c      	cbz	r4, 80160b4 <__assert_func+0x24>
 80160a0:	4b07      	ldr	r3, [pc, #28]	; (80160c0 <__assert_func+0x30>)
 80160a2:	9100      	str	r1, [sp, #0]
 80160a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80160a8:	4906      	ldr	r1, [pc, #24]	; (80160c4 <__assert_func+0x34>)
 80160aa:	462b      	mov	r3, r5
 80160ac:	f000 f872 	bl	8016194 <fiprintf>
 80160b0:	f000 f882 	bl	80161b8 <abort>
 80160b4:	4b04      	ldr	r3, [pc, #16]	; (80160c8 <__assert_func+0x38>)
 80160b6:	461c      	mov	r4, r3
 80160b8:	e7f3      	b.n	80160a2 <__assert_func+0x12>
 80160ba:	bf00      	nop
 80160bc:	20000410 	.word	0x20000410
 80160c0:	08016fa7 	.word	0x08016fa7
 80160c4:	08016fb4 	.word	0x08016fb4
 80160c8:	08016fe2 	.word	0x08016fe2

080160cc <_calloc_r>:
 80160cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80160ce:	fba1 2402 	umull	r2, r4, r1, r2
 80160d2:	b94c      	cbnz	r4, 80160e8 <_calloc_r+0x1c>
 80160d4:	4611      	mov	r1, r2
 80160d6:	9201      	str	r2, [sp, #4]
 80160d8:	f7ff f9bc 	bl	8015454 <_malloc_r>
 80160dc:	9a01      	ldr	r2, [sp, #4]
 80160de:	4605      	mov	r5, r0
 80160e0:	b930      	cbnz	r0, 80160f0 <_calloc_r+0x24>
 80160e2:	4628      	mov	r0, r5
 80160e4:	b003      	add	sp, #12
 80160e6:	bd30      	pop	{r4, r5, pc}
 80160e8:	220c      	movs	r2, #12
 80160ea:	6002      	str	r2, [r0, #0]
 80160ec:	2500      	movs	r5, #0
 80160ee:	e7f8      	b.n	80160e2 <_calloc_r+0x16>
 80160f0:	4621      	mov	r1, r4
 80160f2:	f7fe f9da 	bl	80144aa <memset>
 80160f6:	e7f4      	b.n	80160e2 <_calloc_r+0x16>

080160f8 <__ascii_mbtowc>:
 80160f8:	b082      	sub	sp, #8
 80160fa:	b901      	cbnz	r1, 80160fe <__ascii_mbtowc+0x6>
 80160fc:	a901      	add	r1, sp, #4
 80160fe:	b142      	cbz	r2, 8016112 <__ascii_mbtowc+0x1a>
 8016100:	b14b      	cbz	r3, 8016116 <__ascii_mbtowc+0x1e>
 8016102:	7813      	ldrb	r3, [r2, #0]
 8016104:	600b      	str	r3, [r1, #0]
 8016106:	7812      	ldrb	r2, [r2, #0]
 8016108:	1e10      	subs	r0, r2, #0
 801610a:	bf18      	it	ne
 801610c:	2001      	movne	r0, #1
 801610e:	b002      	add	sp, #8
 8016110:	4770      	bx	lr
 8016112:	4610      	mov	r0, r2
 8016114:	e7fb      	b.n	801610e <__ascii_mbtowc+0x16>
 8016116:	f06f 0001 	mvn.w	r0, #1
 801611a:	e7f8      	b.n	801610e <__ascii_mbtowc+0x16>

0801611c <_realloc_r>:
 801611c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016120:	4680      	mov	r8, r0
 8016122:	4614      	mov	r4, r2
 8016124:	460e      	mov	r6, r1
 8016126:	b921      	cbnz	r1, 8016132 <_realloc_r+0x16>
 8016128:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801612c:	4611      	mov	r1, r2
 801612e:	f7ff b991 	b.w	8015454 <_malloc_r>
 8016132:	b92a      	cbnz	r2, 8016140 <_realloc_r+0x24>
 8016134:	f7ff f91a 	bl	801536c <_free_r>
 8016138:	4625      	mov	r5, r4
 801613a:	4628      	mov	r0, r5
 801613c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016140:	f000 f841 	bl	80161c6 <_malloc_usable_size_r>
 8016144:	4284      	cmp	r4, r0
 8016146:	4607      	mov	r7, r0
 8016148:	d802      	bhi.n	8016150 <_realloc_r+0x34>
 801614a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801614e:	d812      	bhi.n	8016176 <_realloc_r+0x5a>
 8016150:	4621      	mov	r1, r4
 8016152:	4640      	mov	r0, r8
 8016154:	f7ff f97e 	bl	8015454 <_malloc_r>
 8016158:	4605      	mov	r5, r0
 801615a:	2800      	cmp	r0, #0
 801615c:	d0ed      	beq.n	801613a <_realloc_r+0x1e>
 801615e:	42bc      	cmp	r4, r7
 8016160:	4622      	mov	r2, r4
 8016162:	4631      	mov	r1, r6
 8016164:	bf28      	it	cs
 8016166:	463a      	movcs	r2, r7
 8016168:	f7fe fa75 	bl	8014656 <memcpy>
 801616c:	4631      	mov	r1, r6
 801616e:	4640      	mov	r0, r8
 8016170:	f7ff f8fc 	bl	801536c <_free_r>
 8016174:	e7e1      	b.n	801613a <_realloc_r+0x1e>
 8016176:	4635      	mov	r5, r6
 8016178:	e7df      	b.n	801613a <_realloc_r+0x1e>

0801617a <__ascii_wctomb>:
 801617a:	b149      	cbz	r1, 8016190 <__ascii_wctomb+0x16>
 801617c:	2aff      	cmp	r2, #255	; 0xff
 801617e:	bf85      	ittet	hi
 8016180:	238a      	movhi	r3, #138	; 0x8a
 8016182:	6003      	strhi	r3, [r0, #0]
 8016184:	700a      	strbls	r2, [r1, #0]
 8016186:	f04f 30ff 	movhi.w	r0, #4294967295
 801618a:	bf98      	it	ls
 801618c:	2001      	movls	r0, #1
 801618e:	4770      	bx	lr
 8016190:	4608      	mov	r0, r1
 8016192:	4770      	bx	lr

08016194 <fiprintf>:
 8016194:	b40e      	push	{r1, r2, r3}
 8016196:	b503      	push	{r0, r1, lr}
 8016198:	4601      	mov	r1, r0
 801619a:	ab03      	add	r3, sp, #12
 801619c:	4805      	ldr	r0, [pc, #20]	; (80161b4 <fiprintf+0x20>)
 801619e:	f853 2b04 	ldr.w	r2, [r3], #4
 80161a2:	6800      	ldr	r0, [r0, #0]
 80161a4:	9301      	str	r3, [sp, #4]
 80161a6:	f000 f83f 	bl	8016228 <_vfiprintf_r>
 80161aa:	b002      	add	sp, #8
 80161ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80161b0:	b003      	add	sp, #12
 80161b2:	4770      	bx	lr
 80161b4:	20000410 	.word	0x20000410

080161b8 <abort>:
 80161b8:	b508      	push	{r3, lr}
 80161ba:	2006      	movs	r0, #6
 80161bc:	f000 fa0c 	bl	80165d8 <raise>
 80161c0:	2001      	movs	r0, #1
 80161c2:	f7ee fedf 	bl	8004f84 <_exit>

080161c6 <_malloc_usable_size_r>:
 80161c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80161ca:	1f18      	subs	r0, r3, #4
 80161cc:	2b00      	cmp	r3, #0
 80161ce:	bfbc      	itt	lt
 80161d0:	580b      	ldrlt	r3, [r1, r0]
 80161d2:	18c0      	addlt	r0, r0, r3
 80161d4:	4770      	bx	lr

080161d6 <__sfputc_r>:
 80161d6:	6893      	ldr	r3, [r2, #8]
 80161d8:	3b01      	subs	r3, #1
 80161da:	2b00      	cmp	r3, #0
 80161dc:	b410      	push	{r4}
 80161de:	6093      	str	r3, [r2, #8]
 80161e0:	da08      	bge.n	80161f4 <__sfputc_r+0x1e>
 80161e2:	6994      	ldr	r4, [r2, #24]
 80161e4:	42a3      	cmp	r3, r4
 80161e6:	db01      	blt.n	80161ec <__sfputc_r+0x16>
 80161e8:	290a      	cmp	r1, #10
 80161ea:	d103      	bne.n	80161f4 <__sfputc_r+0x1e>
 80161ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80161f0:	f000 b934 	b.w	801645c <__swbuf_r>
 80161f4:	6813      	ldr	r3, [r2, #0]
 80161f6:	1c58      	adds	r0, r3, #1
 80161f8:	6010      	str	r0, [r2, #0]
 80161fa:	7019      	strb	r1, [r3, #0]
 80161fc:	4608      	mov	r0, r1
 80161fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016202:	4770      	bx	lr

08016204 <__sfputs_r>:
 8016204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016206:	4606      	mov	r6, r0
 8016208:	460f      	mov	r7, r1
 801620a:	4614      	mov	r4, r2
 801620c:	18d5      	adds	r5, r2, r3
 801620e:	42ac      	cmp	r4, r5
 8016210:	d101      	bne.n	8016216 <__sfputs_r+0x12>
 8016212:	2000      	movs	r0, #0
 8016214:	e007      	b.n	8016226 <__sfputs_r+0x22>
 8016216:	f814 1b01 	ldrb.w	r1, [r4], #1
 801621a:	463a      	mov	r2, r7
 801621c:	4630      	mov	r0, r6
 801621e:	f7ff ffda 	bl	80161d6 <__sfputc_r>
 8016222:	1c43      	adds	r3, r0, #1
 8016224:	d1f3      	bne.n	801620e <__sfputs_r+0xa>
 8016226:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08016228 <_vfiprintf_r>:
 8016228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801622c:	460d      	mov	r5, r1
 801622e:	b09d      	sub	sp, #116	; 0x74
 8016230:	4614      	mov	r4, r2
 8016232:	4698      	mov	r8, r3
 8016234:	4606      	mov	r6, r0
 8016236:	b118      	cbz	r0, 8016240 <_vfiprintf_r+0x18>
 8016238:	6a03      	ldr	r3, [r0, #32]
 801623a:	b90b      	cbnz	r3, 8016240 <_vfiprintf_r+0x18>
 801623c:	f7fe f882 	bl	8014344 <__sinit>
 8016240:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016242:	07d9      	lsls	r1, r3, #31
 8016244:	d405      	bmi.n	8016252 <_vfiprintf_r+0x2a>
 8016246:	89ab      	ldrh	r3, [r5, #12]
 8016248:	059a      	lsls	r2, r3, #22
 801624a:	d402      	bmi.n	8016252 <_vfiprintf_r+0x2a>
 801624c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801624e:	f7fe fa00 	bl	8014652 <__retarget_lock_acquire_recursive>
 8016252:	89ab      	ldrh	r3, [r5, #12]
 8016254:	071b      	lsls	r3, r3, #28
 8016256:	d501      	bpl.n	801625c <_vfiprintf_r+0x34>
 8016258:	692b      	ldr	r3, [r5, #16]
 801625a:	b99b      	cbnz	r3, 8016284 <_vfiprintf_r+0x5c>
 801625c:	4629      	mov	r1, r5
 801625e:	4630      	mov	r0, r6
 8016260:	f000 f93a 	bl	80164d8 <__swsetup_r>
 8016264:	b170      	cbz	r0, 8016284 <_vfiprintf_r+0x5c>
 8016266:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016268:	07dc      	lsls	r4, r3, #31
 801626a:	d504      	bpl.n	8016276 <_vfiprintf_r+0x4e>
 801626c:	f04f 30ff 	mov.w	r0, #4294967295
 8016270:	b01d      	add	sp, #116	; 0x74
 8016272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016276:	89ab      	ldrh	r3, [r5, #12]
 8016278:	0598      	lsls	r0, r3, #22
 801627a:	d4f7      	bmi.n	801626c <_vfiprintf_r+0x44>
 801627c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801627e:	f7fe f9e9 	bl	8014654 <__retarget_lock_release_recursive>
 8016282:	e7f3      	b.n	801626c <_vfiprintf_r+0x44>
 8016284:	2300      	movs	r3, #0
 8016286:	9309      	str	r3, [sp, #36]	; 0x24
 8016288:	2320      	movs	r3, #32
 801628a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801628e:	f8cd 800c 	str.w	r8, [sp, #12]
 8016292:	2330      	movs	r3, #48	; 0x30
 8016294:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8016448 <_vfiprintf_r+0x220>
 8016298:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801629c:	f04f 0901 	mov.w	r9, #1
 80162a0:	4623      	mov	r3, r4
 80162a2:	469a      	mov	sl, r3
 80162a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80162a8:	b10a      	cbz	r2, 80162ae <_vfiprintf_r+0x86>
 80162aa:	2a25      	cmp	r2, #37	; 0x25
 80162ac:	d1f9      	bne.n	80162a2 <_vfiprintf_r+0x7a>
 80162ae:	ebba 0b04 	subs.w	fp, sl, r4
 80162b2:	d00b      	beq.n	80162cc <_vfiprintf_r+0xa4>
 80162b4:	465b      	mov	r3, fp
 80162b6:	4622      	mov	r2, r4
 80162b8:	4629      	mov	r1, r5
 80162ba:	4630      	mov	r0, r6
 80162bc:	f7ff ffa2 	bl	8016204 <__sfputs_r>
 80162c0:	3001      	adds	r0, #1
 80162c2:	f000 80a9 	beq.w	8016418 <_vfiprintf_r+0x1f0>
 80162c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80162c8:	445a      	add	r2, fp
 80162ca:	9209      	str	r2, [sp, #36]	; 0x24
 80162cc:	f89a 3000 	ldrb.w	r3, [sl]
 80162d0:	2b00      	cmp	r3, #0
 80162d2:	f000 80a1 	beq.w	8016418 <_vfiprintf_r+0x1f0>
 80162d6:	2300      	movs	r3, #0
 80162d8:	f04f 32ff 	mov.w	r2, #4294967295
 80162dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80162e0:	f10a 0a01 	add.w	sl, sl, #1
 80162e4:	9304      	str	r3, [sp, #16]
 80162e6:	9307      	str	r3, [sp, #28]
 80162e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80162ec:	931a      	str	r3, [sp, #104]	; 0x68
 80162ee:	4654      	mov	r4, sl
 80162f0:	2205      	movs	r2, #5
 80162f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80162f6:	4854      	ldr	r0, [pc, #336]	; (8016448 <_vfiprintf_r+0x220>)
 80162f8:	f7e9 ff82 	bl	8000200 <memchr>
 80162fc:	9a04      	ldr	r2, [sp, #16]
 80162fe:	b9d8      	cbnz	r0, 8016338 <_vfiprintf_r+0x110>
 8016300:	06d1      	lsls	r1, r2, #27
 8016302:	bf44      	itt	mi
 8016304:	2320      	movmi	r3, #32
 8016306:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801630a:	0713      	lsls	r3, r2, #28
 801630c:	bf44      	itt	mi
 801630e:	232b      	movmi	r3, #43	; 0x2b
 8016310:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016314:	f89a 3000 	ldrb.w	r3, [sl]
 8016318:	2b2a      	cmp	r3, #42	; 0x2a
 801631a:	d015      	beq.n	8016348 <_vfiprintf_r+0x120>
 801631c:	9a07      	ldr	r2, [sp, #28]
 801631e:	4654      	mov	r4, sl
 8016320:	2000      	movs	r0, #0
 8016322:	f04f 0c0a 	mov.w	ip, #10
 8016326:	4621      	mov	r1, r4
 8016328:	f811 3b01 	ldrb.w	r3, [r1], #1
 801632c:	3b30      	subs	r3, #48	; 0x30
 801632e:	2b09      	cmp	r3, #9
 8016330:	d94d      	bls.n	80163ce <_vfiprintf_r+0x1a6>
 8016332:	b1b0      	cbz	r0, 8016362 <_vfiprintf_r+0x13a>
 8016334:	9207      	str	r2, [sp, #28]
 8016336:	e014      	b.n	8016362 <_vfiprintf_r+0x13a>
 8016338:	eba0 0308 	sub.w	r3, r0, r8
 801633c:	fa09 f303 	lsl.w	r3, r9, r3
 8016340:	4313      	orrs	r3, r2
 8016342:	9304      	str	r3, [sp, #16]
 8016344:	46a2      	mov	sl, r4
 8016346:	e7d2      	b.n	80162ee <_vfiprintf_r+0xc6>
 8016348:	9b03      	ldr	r3, [sp, #12]
 801634a:	1d19      	adds	r1, r3, #4
 801634c:	681b      	ldr	r3, [r3, #0]
 801634e:	9103      	str	r1, [sp, #12]
 8016350:	2b00      	cmp	r3, #0
 8016352:	bfbb      	ittet	lt
 8016354:	425b      	neglt	r3, r3
 8016356:	f042 0202 	orrlt.w	r2, r2, #2
 801635a:	9307      	strge	r3, [sp, #28]
 801635c:	9307      	strlt	r3, [sp, #28]
 801635e:	bfb8      	it	lt
 8016360:	9204      	strlt	r2, [sp, #16]
 8016362:	7823      	ldrb	r3, [r4, #0]
 8016364:	2b2e      	cmp	r3, #46	; 0x2e
 8016366:	d10c      	bne.n	8016382 <_vfiprintf_r+0x15a>
 8016368:	7863      	ldrb	r3, [r4, #1]
 801636a:	2b2a      	cmp	r3, #42	; 0x2a
 801636c:	d134      	bne.n	80163d8 <_vfiprintf_r+0x1b0>
 801636e:	9b03      	ldr	r3, [sp, #12]
 8016370:	1d1a      	adds	r2, r3, #4
 8016372:	681b      	ldr	r3, [r3, #0]
 8016374:	9203      	str	r2, [sp, #12]
 8016376:	2b00      	cmp	r3, #0
 8016378:	bfb8      	it	lt
 801637a:	f04f 33ff 	movlt.w	r3, #4294967295
 801637e:	3402      	adds	r4, #2
 8016380:	9305      	str	r3, [sp, #20]
 8016382:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8016458 <_vfiprintf_r+0x230>
 8016386:	7821      	ldrb	r1, [r4, #0]
 8016388:	2203      	movs	r2, #3
 801638a:	4650      	mov	r0, sl
 801638c:	f7e9 ff38 	bl	8000200 <memchr>
 8016390:	b138      	cbz	r0, 80163a2 <_vfiprintf_r+0x17a>
 8016392:	9b04      	ldr	r3, [sp, #16]
 8016394:	eba0 000a 	sub.w	r0, r0, sl
 8016398:	2240      	movs	r2, #64	; 0x40
 801639a:	4082      	lsls	r2, r0
 801639c:	4313      	orrs	r3, r2
 801639e:	3401      	adds	r4, #1
 80163a0:	9304      	str	r3, [sp, #16]
 80163a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80163a6:	4829      	ldr	r0, [pc, #164]	; (801644c <_vfiprintf_r+0x224>)
 80163a8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80163ac:	2206      	movs	r2, #6
 80163ae:	f7e9 ff27 	bl	8000200 <memchr>
 80163b2:	2800      	cmp	r0, #0
 80163b4:	d03f      	beq.n	8016436 <_vfiprintf_r+0x20e>
 80163b6:	4b26      	ldr	r3, [pc, #152]	; (8016450 <_vfiprintf_r+0x228>)
 80163b8:	bb1b      	cbnz	r3, 8016402 <_vfiprintf_r+0x1da>
 80163ba:	9b03      	ldr	r3, [sp, #12]
 80163bc:	3307      	adds	r3, #7
 80163be:	f023 0307 	bic.w	r3, r3, #7
 80163c2:	3308      	adds	r3, #8
 80163c4:	9303      	str	r3, [sp, #12]
 80163c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80163c8:	443b      	add	r3, r7
 80163ca:	9309      	str	r3, [sp, #36]	; 0x24
 80163cc:	e768      	b.n	80162a0 <_vfiprintf_r+0x78>
 80163ce:	fb0c 3202 	mla	r2, ip, r2, r3
 80163d2:	460c      	mov	r4, r1
 80163d4:	2001      	movs	r0, #1
 80163d6:	e7a6      	b.n	8016326 <_vfiprintf_r+0xfe>
 80163d8:	2300      	movs	r3, #0
 80163da:	3401      	adds	r4, #1
 80163dc:	9305      	str	r3, [sp, #20]
 80163de:	4619      	mov	r1, r3
 80163e0:	f04f 0c0a 	mov.w	ip, #10
 80163e4:	4620      	mov	r0, r4
 80163e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80163ea:	3a30      	subs	r2, #48	; 0x30
 80163ec:	2a09      	cmp	r2, #9
 80163ee:	d903      	bls.n	80163f8 <_vfiprintf_r+0x1d0>
 80163f0:	2b00      	cmp	r3, #0
 80163f2:	d0c6      	beq.n	8016382 <_vfiprintf_r+0x15a>
 80163f4:	9105      	str	r1, [sp, #20]
 80163f6:	e7c4      	b.n	8016382 <_vfiprintf_r+0x15a>
 80163f8:	fb0c 2101 	mla	r1, ip, r1, r2
 80163fc:	4604      	mov	r4, r0
 80163fe:	2301      	movs	r3, #1
 8016400:	e7f0      	b.n	80163e4 <_vfiprintf_r+0x1bc>
 8016402:	ab03      	add	r3, sp, #12
 8016404:	9300      	str	r3, [sp, #0]
 8016406:	462a      	mov	r2, r5
 8016408:	4b12      	ldr	r3, [pc, #72]	; (8016454 <_vfiprintf_r+0x22c>)
 801640a:	a904      	add	r1, sp, #16
 801640c:	4630      	mov	r0, r6
 801640e:	f7fd fb47 	bl	8013aa0 <_printf_float>
 8016412:	4607      	mov	r7, r0
 8016414:	1c78      	adds	r0, r7, #1
 8016416:	d1d6      	bne.n	80163c6 <_vfiprintf_r+0x19e>
 8016418:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801641a:	07d9      	lsls	r1, r3, #31
 801641c:	d405      	bmi.n	801642a <_vfiprintf_r+0x202>
 801641e:	89ab      	ldrh	r3, [r5, #12]
 8016420:	059a      	lsls	r2, r3, #22
 8016422:	d402      	bmi.n	801642a <_vfiprintf_r+0x202>
 8016424:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016426:	f7fe f915 	bl	8014654 <__retarget_lock_release_recursive>
 801642a:	89ab      	ldrh	r3, [r5, #12]
 801642c:	065b      	lsls	r3, r3, #25
 801642e:	f53f af1d 	bmi.w	801626c <_vfiprintf_r+0x44>
 8016432:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016434:	e71c      	b.n	8016270 <_vfiprintf_r+0x48>
 8016436:	ab03      	add	r3, sp, #12
 8016438:	9300      	str	r3, [sp, #0]
 801643a:	462a      	mov	r2, r5
 801643c:	4b05      	ldr	r3, [pc, #20]	; (8016454 <_vfiprintf_r+0x22c>)
 801643e:	a904      	add	r1, sp, #16
 8016440:	4630      	mov	r0, r6
 8016442:	f7fd fdd1 	bl	8013fe8 <_printf_i>
 8016446:	e7e4      	b.n	8016412 <_vfiprintf_r+0x1ea>
 8016448:	08016f8c 	.word	0x08016f8c
 801644c:	08016f96 	.word	0x08016f96
 8016450:	08013aa1 	.word	0x08013aa1
 8016454:	08016205 	.word	0x08016205
 8016458:	08016f92 	.word	0x08016f92

0801645c <__swbuf_r>:
 801645c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801645e:	460e      	mov	r6, r1
 8016460:	4614      	mov	r4, r2
 8016462:	4605      	mov	r5, r0
 8016464:	b118      	cbz	r0, 801646e <__swbuf_r+0x12>
 8016466:	6a03      	ldr	r3, [r0, #32]
 8016468:	b90b      	cbnz	r3, 801646e <__swbuf_r+0x12>
 801646a:	f7fd ff6b 	bl	8014344 <__sinit>
 801646e:	69a3      	ldr	r3, [r4, #24]
 8016470:	60a3      	str	r3, [r4, #8]
 8016472:	89a3      	ldrh	r3, [r4, #12]
 8016474:	071a      	lsls	r2, r3, #28
 8016476:	d525      	bpl.n	80164c4 <__swbuf_r+0x68>
 8016478:	6923      	ldr	r3, [r4, #16]
 801647a:	b31b      	cbz	r3, 80164c4 <__swbuf_r+0x68>
 801647c:	6823      	ldr	r3, [r4, #0]
 801647e:	6922      	ldr	r2, [r4, #16]
 8016480:	1a98      	subs	r0, r3, r2
 8016482:	6963      	ldr	r3, [r4, #20]
 8016484:	b2f6      	uxtb	r6, r6
 8016486:	4283      	cmp	r3, r0
 8016488:	4637      	mov	r7, r6
 801648a:	dc04      	bgt.n	8016496 <__swbuf_r+0x3a>
 801648c:	4621      	mov	r1, r4
 801648e:	4628      	mov	r0, r5
 8016490:	f7ff fdc6 	bl	8016020 <_fflush_r>
 8016494:	b9e0      	cbnz	r0, 80164d0 <__swbuf_r+0x74>
 8016496:	68a3      	ldr	r3, [r4, #8]
 8016498:	3b01      	subs	r3, #1
 801649a:	60a3      	str	r3, [r4, #8]
 801649c:	6823      	ldr	r3, [r4, #0]
 801649e:	1c5a      	adds	r2, r3, #1
 80164a0:	6022      	str	r2, [r4, #0]
 80164a2:	701e      	strb	r6, [r3, #0]
 80164a4:	6962      	ldr	r2, [r4, #20]
 80164a6:	1c43      	adds	r3, r0, #1
 80164a8:	429a      	cmp	r2, r3
 80164aa:	d004      	beq.n	80164b6 <__swbuf_r+0x5a>
 80164ac:	89a3      	ldrh	r3, [r4, #12]
 80164ae:	07db      	lsls	r3, r3, #31
 80164b0:	d506      	bpl.n	80164c0 <__swbuf_r+0x64>
 80164b2:	2e0a      	cmp	r6, #10
 80164b4:	d104      	bne.n	80164c0 <__swbuf_r+0x64>
 80164b6:	4621      	mov	r1, r4
 80164b8:	4628      	mov	r0, r5
 80164ba:	f7ff fdb1 	bl	8016020 <_fflush_r>
 80164be:	b938      	cbnz	r0, 80164d0 <__swbuf_r+0x74>
 80164c0:	4638      	mov	r0, r7
 80164c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80164c4:	4621      	mov	r1, r4
 80164c6:	4628      	mov	r0, r5
 80164c8:	f000 f806 	bl	80164d8 <__swsetup_r>
 80164cc:	2800      	cmp	r0, #0
 80164ce:	d0d5      	beq.n	801647c <__swbuf_r+0x20>
 80164d0:	f04f 37ff 	mov.w	r7, #4294967295
 80164d4:	e7f4      	b.n	80164c0 <__swbuf_r+0x64>
	...

080164d8 <__swsetup_r>:
 80164d8:	b538      	push	{r3, r4, r5, lr}
 80164da:	4b2a      	ldr	r3, [pc, #168]	; (8016584 <__swsetup_r+0xac>)
 80164dc:	4605      	mov	r5, r0
 80164de:	6818      	ldr	r0, [r3, #0]
 80164e0:	460c      	mov	r4, r1
 80164e2:	b118      	cbz	r0, 80164ec <__swsetup_r+0x14>
 80164e4:	6a03      	ldr	r3, [r0, #32]
 80164e6:	b90b      	cbnz	r3, 80164ec <__swsetup_r+0x14>
 80164e8:	f7fd ff2c 	bl	8014344 <__sinit>
 80164ec:	89a3      	ldrh	r3, [r4, #12]
 80164ee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80164f2:	0718      	lsls	r0, r3, #28
 80164f4:	d422      	bmi.n	801653c <__swsetup_r+0x64>
 80164f6:	06d9      	lsls	r1, r3, #27
 80164f8:	d407      	bmi.n	801650a <__swsetup_r+0x32>
 80164fa:	2309      	movs	r3, #9
 80164fc:	602b      	str	r3, [r5, #0]
 80164fe:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8016502:	81a3      	strh	r3, [r4, #12]
 8016504:	f04f 30ff 	mov.w	r0, #4294967295
 8016508:	e034      	b.n	8016574 <__swsetup_r+0x9c>
 801650a:	0758      	lsls	r0, r3, #29
 801650c:	d512      	bpl.n	8016534 <__swsetup_r+0x5c>
 801650e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016510:	b141      	cbz	r1, 8016524 <__swsetup_r+0x4c>
 8016512:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016516:	4299      	cmp	r1, r3
 8016518:	d002      	beq.n	8016520 <__swsetup_r+0x48>
 801651a:	4628      	mov	r0, r5
 801651c:	f7fe ff26 	bl	801536c <_free_r>
 8016520:	2300      	movs	r3, #0
 8016522:	6363      	str	r3, [r4, #52]	; 0x34
 8016524:	89a3      	ldrh	r3, [r4, #12]
 8016526:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801652a:	81a3      	strh	r3, [r4, #12]
 801652c:	2300      	movs	r3, #0
 801652e:	6063      	str	r3, [r4, #4]
 8016530:	6923      	ldr	r3, [r4, #16]
 8016532:	6023      	str	r3, [r4, #0]
 8016534:	89a3      	ldrh	r3, [r4, #12]
 8016536:	f043 0308 	orr.w	r3, r3, #8
 801653a:	81a3      	strh	r3, [r4, #12]
 801653c:	6923      	ldr	r3, [r4, #16]
 801653e:	b94b      	cbnz	r3, 8016554 <__swsetup_r+0x7c>
 8016540:	89a3      	ldrh	r3, [r4, #12]
 8016542:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8016546:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801654a:	d003      	beq.n	8016554 <__swsetup_r+0x7c>
 801654c:	4621      	mov	r1, r4
 801654e:	4628      	mov	r0, r5
 8016550:	f000 f884 	bl	801665c <__smakebuf_r>
 8016554:	89a0      	ldrh	r0, [r4, #12]
 8016556:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801655a:	f010 0301 	ands.w	r3, r0, #1
 801655e:	d00a      	beq.n	8016576 <__swsetup_r+0x9e>
 8016560:	2300      	movs	r3, #0
 8016562:	60a3      	str	r3, [r4, #8]
 8016564:	6963      	ldr	r3, [r4, #20]
 8016566:	425b      	negs	r3, r3
 8016568:	61a3      	str	r3, [r4, #24]
 801656a:	6923      	ldr	r3, [r4, #16]
 801656c:	b943      	cbnz	r3, 8016580 <__swsetup_r+0xa8>
 801656e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8016572:	d1c4      	bne.n	80164fe <__swsetup_r+0x26>
 8016574:	bd38      	pop	{r3, r4, r5, pc}
 8016576:	0781      	lsls	r1, r0, #30
 8016578:	bf58      	it	pl
 801657a:	6963      	ldrpl	r3, [r4, #20]
 801657c:	60a3      	str	r3, [r4, #8]
 801657e:	e7f4      	b.n	801656a <__swsetup_r+0x92>
 8016580:	2000      	movs	r0, #0
 8016582:	e7f7      	b.n	8016574 <__swsetup_r+0x9c>
 8016584:	20000410 	.word	0x20000410

08016588 <_raise_r>:
 8016588:	291f      	cmp	r1, #31
 801658a:	b538      	push	{r3, r4, r5, lr}
 801658c:	4604      	mov	r4, r0
 801658e:	460d      	mov	r5, r1
 8016590:	d904      	bls.n	801659c <_raise_r+0x14>
 8016592:	2316      	movs	r3, #22
 8016594:	6003      	str	r3, [r0, #0]
 8016596:	f04f 30ff 	mov.w	r0, #4294967295
 801659a:	bd38      	pop	{r3, r4, r5, pc}
 801659c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801659e:	b112      	cbz	r2, 80165a6 <_raise_r+0x1e>
 80165a0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80165a4:	b94b      	cbnz	r3, 80165ba <_raise_r+0x32>
 80165a6:	4620      	mov	r0, r4
 80165a8:	f000 f830 	bl	801660c <_getpid_r>
 80165ac:	462a      	mov	r2, r5
 80165ae:	4601      	mov	r1, r0
 80165b0:	4620      	mov	r0, r4
 80165b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80165b6:	f000 b817 	b.w	80165e8 <_kill_r>
 80165ba:	2b01      	cmp	r3, #1
 80165bc:	d00a      	beq.n	80165d4 <_raise_r+0x4c>
 80165be:	1c59      	adds	r1, r3, #1
 80165c0:	d103      	bne.n	80165ca <_raise_r+0x42>
 80165c2:	2316      	movs	r3, #22
 80165c4:	6003      	str	r3, [r0, #0]
 80165c6:	2001      	movs	r0, #1
 80165c8:	e7e7      	b.n	801659a <_raise_r+0x12>
 80165ca:	2400      	movs	r4, #0
 80165cc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80165d0:	4628      	mov	r0, r5
 80165d2:	4798      	blx	r3
 80165d4:	2000      	movs	r0, #0
 80165d6:	e7e0      	b.n	801659a <_raise_r+0x12>

080165d8 <raise>:
 80165d8:	4b02      	ldr	r3, [pc, #8]	; (80165e4 <raise+0xc>)
 80165da:	4601      	mov	r1, r0
 80165dc:	6818      	ldr	r0, [r3, #0]
 80165de:	f7ff bfd3 	b.w	8016588 <_raise_r>
 80165e2:	bf00      	nop
 80165e4:	20000410 	.word	0x20000410

080165e8 <_kill_r>:
 80165e8:	b538      	push	{r3, r4, r5, lr}
 80165ea:	4d07      	ldr	r5, [pc, #28]	; (8016608 <_kill_r+0x20>)
 80165ec:	2300      	movs	r3, #0
 80165ee:	4604      	mov	r4, r0
 80165f0:	4608      	mov	r0, r1
 80165f2:	4611      	mov	r1, r2
 80165f4:	602b      	str	r3, [r5, #0]
 80165f6:	f7ee fcb5 	bl	8004f64 <_kill>
 80165fa:	1c43      	adds	r3, r0, #1
 80165fc:	d102      	bne.n	8016604 <_kill_r+0x1c>
 80165fe:	682b      	ldr	r3, [r5, #0]
 8016600:	b103      	cbz	r3, 8016604 <_kill_r+0x1c>
 8016602:	6023      	str	r3, [r4, #0]
 8016604:	bd38      	pop	{r3, r4, r5, pc}
 8016606:	bf00      	nop
 8016608:	20009964 	.word	0x20009964

0801660c <_getpid_r>:
 801660c:	f7ee bca2 	b.w	8004f54 <_getpid>

08016610 <__swhatbuf_r>:
 8016610:	b570      	push	{r4, r5, r6, lr}
 8016612:	460c      	mov	r4, r1
 8016614:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016618:	2900      	cmp	r1, #0
 801661a:	b096      	sub	sp, #88	; 0x58
 801661c:	4615      	mov	r5, r2
 801661e:	461e      	mov	r6, r3
 8016620:	da0d      	bge.n	801663e <__swhatbuf_r+0x2e>
 8016622:	89a3      	ldrh	r3, [r4, #12]
 8016624:	f013 0f80 	tst.w	r3, #128	; 0x80
 8016628:	f04f 0100 	mov.w	r1, #0
 801662c:	bf0c      	ite	eq
 801662e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8016632:	2340      	movne	r3, #64	; 0x40
 8016634:	2000      	movs	r0, #0
 8016636:	6031      	str	r1, [r6, #0]
 8016638:	602b      	str	r3, [r5, #0]
 801663a:	b016      	add	sp, #88	; 0x58
 801663c:	bd70      	pop	{r4, r5, r6, pc}
 801663e:	466a      	mov	r2, sp
 8016640:	f000 f848 	bl	80166d4 <_fstat_r>
 8016644:	2800      	cmp	r0, #0
 8016646:	dbec      	blt.n	8016622 <__swhatbuf_r+0x12>
 8016648:	9901      	ldr	r1, [sp, #4]
 801664a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801664e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8016652:	4259      	negs	r1, r3
 8016654:	4159      	adcs	r1, r3
 8016656:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801665a:	e7eb      	b.n	8016634 <__swhatbuf_r+0x24>

0801665c <__smakebuf_r>:
 801665c:	898b      	ldrh	r3, [r1, #12]
 801665e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016660:	079d      	lsls	r5, r3, #30
 8016662:	4606      	mov	r6, r0
 8016664:	460c      	mov	r4, r1
 8016666:	d507      	bpl.n	8016678 <__smakebuf_r+0x1c>
 8016668:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801666c:	6023      	str	r3, [r4, #0]
 801666e:	6123      	str	r3, [r4, #16]
 8016670:	2301      	movs	r3, #1
 8016672:	6163      	str	r3, [r4, #20]
 8016674:	b002      	add	sp, #8
 8016676:	bd70      	pop	{r4, r5, r6, pc}
 8016678:	ab01      	add	r3, sp, #4
 801667a:	466a      	mov	r2, sp
 801667c:	f7ff ffc8 	bl	8016610 <__swhatbuf_r>
 8016680:	9900      	ldr	r1, [sp, #0]
 8016682:	4605      	mov	r5, r0
 8016684:	4630      	mov	r0, r6
 8016686:	f7fe fee5 	bl	8015454 <_malloc_r>
 801668a:	b948      	cbnz	r0, 80166a0 <__smakebuf_r+0x44>
 801668c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016690:	059a      	lsls	r2, r3, #22
 8016692:	d4ef      	bmi.n	8016674 <__smakebuf_r+0x18>
 8016694:	f023 0303 	bic.w	r3, r3, #3
 8016698:	f043 0302 	orr.w	r3, r3, #2
 801669c:	81a3      	strh	r3, [r4, #12]
 801669e:	e7e3      	b.n	8016668 <__smakebuf_r+0xc>
 80166a0:	89a3      	ldrh	r3, [r4, #12]
 80166a2:	6020      	str	r0, [r4, #0]
 80166a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80166a8:	81a3      	strh	r3, [r4, #12]
 80166aa:	9b00      	ldr	r3, [sp, #0]
 80166ac:	6163      	str	r3, [r4, #20]
 80166ae:	9b01      	ldr	r3, [sp, #4]
 80166b0:	6120      	str	r0, [r4, #16]
 80166b2:	b15b      	cbz	r3, 80166cc <__smakebuf_r+0x70>
 80166b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80166b8:	4630      	mov	r0, r6
 80166ba:	f000 f81d 	bl	80166f8 <_isatty_r>
 80166be:	b128      	cbz	r0, 80166cc <__smakebuf_r+0x70>
 80166c0:	89a3      	ldrh	r3, [r4, #12]
 80166c2:	f023 0303 	bic.w	r3, r3, #3
 80166c6:	f043 0301 	orr.w	r3, r3, #1
 80166ca:	81a3      	strh	r3, [r4, #12]
 80166cc:	89a3      	ldrh	r3, [r4, #12]
 80166ce:	431d      	orrs	r5, r3
 80166d0:	81a5      	strh	r5, [r4, #12]
 80166d2:	e7cf      	b.n	8016674 <__smakebuf_r+0x18>

080166d4 <_fstat_r>:
 80166d4:	b538      	push	{r3, r4, r5, lr}
 80166d6:	4d07      	ldr	r5, [pc, #28]	; (80166f4 <_fstat_r+0x20>)
 80166d8:	2300      	movs	r3, #0
 80166da:	4604      	mov	r4, r0
 80166dc:	4608      	mov	r0, r1
 80166de:	4611      	mov	r1, r2
 80166e0:	602b      	str	r3, [r5, #0]
 80166e2:	f7ee fc9e 	bl	8005022 <_fstat>
 80166e6:	1c43      	adds	r3, r0, #1
 80166e8:	d102      	bne.n	80166f0 <_fstat_r+0x1c>
 80166ea:	682b      	ldr	r3, [r5, #0]
 80166ec:	b103      	cbz	r3, 80166f0 <_fstat_r+0x1c>
 80166ee:	6023      	str	r3, [r4, #0]
 80166f0:	bd38      	pop	{r3, r4, r5, pc}
 80166f2:	bf00      	nop
 80166f4:	20009964 	.word	0x20009964

080166f8 <_isatty_r>:
 80166f8:	b538      	push	{r3, r4, r5, lr}
 80166fa:	4d06      	ldr	r5, [pc, #24]	; (8016714 <_isatty_r+0x1c>)
 80166fc:	2300      	movs	r3, #0
 80166fe:	4604      	mov	r4, r0
 8016700:	4608      	mov	r0, r1
 8016702:	602b      	str	r3, [r5, #0]
 8016704:	f7ee fc9d 	bl	8005042 <_isatty>
 8016708:	1c43      	adds	r3, r0, #1
 801670a:	d102      	bne.n	8016712 <_isatty_r+0x1a>
 801670c:	682b      	ldr	r3, [r5, #0]
 801670e:	b103      	cbz	r3, 8016712 <_isatty_r+0x1a>
 8016710:	6023      	str	r3, [r4, #0]
 8016712:	bd38      	pop	{r3, r4, r5, pc}
 8016714:	20009964 	.word	0x20009964

08016718 <_init>:
 8016718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801671a:	bf00      	nop
 801671c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801671e:	bc08      	pop	{r3}
 8016720:	469e      	mov	lr, r3
 8016722:	4770      	bx	lr

08016724 <_fini>:
 8016724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016726:	bf00      	nop
 8016728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801672a:	bc08      	pop	{r3}
 801672c:	469e      	mov	lr, r3
 801672e:	4770      	bx	lr
