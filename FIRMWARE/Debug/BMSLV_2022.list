
BMSLV_2022.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014abc  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007e4  08014c80  08014c80  00024c80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015464  08015464  000304e8  2**0
                  CONTENTS
  4 .ARM          00000000  08015464  08015464  000304e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08015464  08015464  000304e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000010  08015464  08015464  00025464  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015474  08015474  00025474  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004e8  20000000  08015478  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004af0  200004e8  08015960  000304e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004fd8  08015960  00034fd8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000304e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00048dd9  00000000  00000000  00030518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000877d  00000000  00000000  000792f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002ab8  00000000  00000000  00081a70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000027c0  00000000  00000000  00084528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003b8a7  00000000  00000000  00086ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00036b01  00000000  00000000  000c258f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0014d3f7  00000000  00000000  000f9090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00246487  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000c5e8  00000000  00000000  002464d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200004e8 	.word	0x200004e8
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08014c64 	.word	0x08014c64

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200004ec 	.word	0x200004ec
 80001fc:	08014c64 	.word	0x08014c64

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <_Z20discharge_cells_tailRi>:
			the next cell to discharge has to be the first one.
			So generally it sets the array tail at the beginning.
 * Param:	index
 * Retval:	index
 */
int discharge_cells_tail(int &i){
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
	if(5 == i)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	2b05      	cmp	r3, #5
 8000c86:	d106      	bne.n	8000c96 <_Z20discharge_cells_tailRi+0x1e>
		return i = -1;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	f04f 32ff 	mov.w	r2, #4294967295
 8000c8e:	601a      	str	r2, [r3, #0]
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	e7ff      	b.n	8000c96 <_Z20discharge_cells_tailRi+0x1e>
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	370c      	adds	r7, #12
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
	...

08000ca4 <_Z18set_discharge_cellRhRi>:
/**
 * Brief:	It sets cell to be discharged
 * Param:	Index
 * Retval:	None
 */
void set_discharge_cell(uint8_t &discharge_at_once, int &i){
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
 8000cac:	6039      	str	r1, [r7, #0]
	if(discharge_at_once < MAX_CELLS_DISCHARGE_AT_ONCE)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	2b02      	cmp	r3, #2
 8000cb4:	d811      	bhi.n	8000cda <_Z18set_discharge_cellRhRi+0x36>
	{
		data.charging.cell_discharge[i] = true;
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4a13      	ldr	r2, [pc, #76]	; (8000d08 <_Z18set_discharge_cellRhRi+0x64>)
 8000cbc:	4413      	add	r3, r2
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	f883 25ac 	strb.w	r2, [r3, #1452]	; 0x5ac
		discharge_at_once++;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	3301      	adds	r3, #1
 8000cca:	b2da      	uxtb	r2, r3
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	701a      	strb	r2, [r3, #0]
		i++;	//impossible to discharge 2 cells next to each other
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	1c5a      	adds	r2, r3, #1
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	601a      	str	r2, [r3, #0]
	}
	data.charging.discharge_activation = true;
 8000cda:	4b0b      	ldr	r3, [pc, #44]	; (8000d08 <_Z18set_discharge_cellRhRi+0x64>)
 8000cdc:	2201      	movs	r2, #1
 8000cde:	f883 25b4 	strb.w	r2, [r3, #1460]	; 0x5b4
	data.charging.discharge_tick_end = HAL_GetTick() + BALANCE_TIME;
 8000ce2:	f003 fd53 	bl	800478c <HAL_GetTick>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8000cec:	3310      	adds	r3, #16
 8000cee:	4a06      	ldr	r2, [pc, #24]	; (8000d08 <_Z18set_discharge_cellRhRi+0x64>)
 8000cf0:	f8c2 35b8 	str.w	r3, [r2, #1464]	; 0x5b8

	i=discharge_cells_tail(i);
 8000cf4:	6838      	ldr	r0, [r7, #0]
 8000cf6:	f7ff ffbf 	bl	8000c78 <_Z20discharge_cells_tailRi>
 8000cfa:	4602      	mov	r2, r0
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	601a      	str	r2, [r3, #0]
}
 8000d00:	bf00      	nop
 8000d02:	3708      	adds	r7, #8
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	200005ec 	.word	0x200005ec

08000d0c <_Z22set_discharge_cell_maxRhRiRb>:
/**
 * Brief:	It sets cell having the highest voltage to be discharged
 * Param:	Index
 * Retval:	None
 */
void set_discharge_cell_max(uint8_t &discharge_at_once, int &i, bool &max_voltage_discharge_activation){
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b084      	sub	sp, #16
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	60f8      	str	r0, [r7, #12]
 8000d14:	60b9      	str	r1, [r7, #8]
 8000d16:	607a      	str	r2, [r7, #4]
	max_voltage_discharge_activation = false;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	701a      	strb	r2, [r3, #0]
	if(discharge_at_once < MAX_CELLS_DISCHARGE_AT_ONCE)
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	2b02      	cmp	r3, #2
 8000d24:	d812      	bhi.n	8000d4c <_Z22set_discharge_cell_maxRhRiRb+0x40>
	{
		data.charging.cell_discharge[data.voltages.highest_cell_voltage_index] = true;
 8000d26:	4b15      	ldr	r3, [pc, #84]	; (8000d7c <_Z22set_discharge_cell_maxRhRiRb+0x70>)
 8000d28:	8bdb      	ldrh	r3, [r3, #30]
 8000d2a:	461a      	mov	r2, r3
 8000d2c:	4b13      	ldr	r3, [pc, #76]	; (8000d7c <_Z22set_discharge_cell_maxRhRiRb+0x70>)
 8000d2e:	4413      	add	r3, r2
 8000d30:	2201      	movs	r2, #1
 8000d32:	f883 25ac 	strb.w	r2, [r3, #1452]	; 0x5ac
		discharge_at_once++;
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	3301      	adds	r3, #1
 8000d3c:	b2da      	uxtb	r2, r3
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	701a      	strb	r2, [r3, #0]
		i = data.voltages.highest_cell_voltage_index + 1; //impossible to discharge 2 cells next to each other
 8000d42:	4b0e      	ldr	r3, [pc, #56]	; (8000d7c <_Z22set_discharge_cell_maxRhRiRb+0x70>)
 8000d44:	8bdb      	ldrh	r3, [r3, #30]
 8000d46:	1c5a      	adds	r2, r3, #1
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	601a      	str	r2, [r3, #0]
	}

	data.charging.discharge_activation = true;
 8000d4c:	4b0b      	ldr	r3, [pc, #44]	; (8000d7c <_Z22set_discharge_cell_maxRhRiRb+0x70>)
 8000d4e:	2201      	movs	r2, #1
 8000d50:	f883 25b4 	strb.w	r2, [r3, #1460]	; 0x5b4
	data.charging.discharge_tick_end = HAL_GetTick() + BALANCE_TIME;
 8000d54:	f003 fd1a 	bl	800478c <HAL_GetTick>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8000d5e:	3310      	adds	r3, #16
 8000d60:	4a06      	ldr	r2, [pc, #24]	; (8000d7c <_Z22set_discharge_cell_maxRhRiRb+0x70>)
 8000d62:	f8c2 35b8 	str.w	r3, [r2, #1464]	; 0x5b8

	i=discharge_cells_tail(i);
 8000d66:	68b8      	ldr	r0, [r7, #8]
 8000d68:	f7ff ff86 	bl	8000c78 <_Z20discharge_cells_tailRi>
 8000d6c:	4602      	mov	r2, r0
 8000d6e:	68bb      	ldr	r3, [r7, #8]
 8000d70:	601a      	str	r2, [r3, #0]
}
 8000d72:	bf00      	nop
 8000d74:	3710      	adds	r7, #16
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	200005ec 	.word	0x200005ec

08000d80 <_Z15balance_controlv>:
 * Brief:	Control of cell discharges
 * Param:	None
 * Retval:	None
 */
void balance_control()
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b086      	sub	sp, #24
 8000d84:	af00      	add	r7, sp, #0
	uint8_t charged_cells = 0, nearly_charged_cells = 0, cell_overcharged = 0, discharge_at_once = 0;
 8000d86:	2300      	movs	r3, #0
 8000d88:	75fb      	strb	r3, [r7, #23]
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	75bb      	strb	r3, [r7, #22]
 8000d8e:	2300      	movs	r3, #0
 8000d90:	757b      	strb	r3, [r7, #21]
 8000d92:	2300      	movs	r3, #0
 8000d94:	73fb      	strb	r3, [r7, #15]
	bool max_voltage_discharge_activation= 0, max_voltage_discharge_activation_charging_off = 0;
 8000d96:	2300      	movs	r3, #0
 8000d98:	73bb      	strb	r3, [r7, #14]
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	737b      	strb	r3, [r7, #13]

	for(unsigned int i = 0; i < NUMBER_OF_CELLS; i++)
 8000d9e:	2300      	movs	r3, #0
 8000da0:	613b      	str	r3, [r7, #16]
 8000da2:	693b      	ldr	r3, [r7, #16]
 8000da4:	2b05      	cmp	r3, #5
 8000da6:	d83c      	bhi.n	8000e22 <_Z15balance_controlv+0xa2>
	{
		if(data.voltages.highest_cell_voltage > VOL_UP_OK || (data.voltages.highest_cell_voltage - data.voltages.lowest_cell_voltage) > BALANCE_VALUE)
 8000da8:	4b95      	ldr	r3, [pc, #596]	; (8001000 <_Z15balance_controlv+0x280>)
 8000daa:	8b9b      	ldrh	r3, [r3, #28]
 8000dac:	f24a 421a 	movw	r2, #42010	; 0xa41a
 8000db0:	4293      	cmp	r3, r2
 8000db2:	d807      	bhi.n	8000dc4 <_Z15balance_controlv+0x44>
 8000db4:	4b92      	ldr	r3, [pc, #584]	; (8001000 <_Z15balance_controlv+0x280>)
 8000db6:	8b9b      	ldrh	r3, [r3, #28]
 8000db8:	461a      	mov	r2, r3
 8000dba:	4b91      	ldr	r3, [pc, #580]	; (8001000 <_Z15balance_controlv+0x280>)
 8000dbc:	8b5b      	ldrh	r3, [r3, #26]
 8000dbe:	1ad3      	subs	r3, r2, r3
 8000dc0:	2b32      	cmp	r3, #50	; 0x32
 8000dc2:	dd01      	ble.n	8000dc8 <_Z15balance_controlv+0x48>
		{
			max_voltage_discharge_activation= true;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	73bb      	strb	r3, [r7, #14]
		}
		if(data.voltages.highest_cell_voltage > VOL_UP_OK)
 8000dc8:	4b8d      	ldr	r3, [pc, #564]	; (8001000 <_Z15balance_controlv+0x280>)
 8000dca:	8b9b      	ldrh	r3, [r3, #28]
 8000dcc:	f24a 421a 	movw	r2, #42010	; 0xa41a
 8000dd0:	4293      	cmp	r3, r2
 8000dd2:	d901      	bls.n	8000dd8 <_Z15balance_controlv+0x58>
		{
			max_voltage_discharge_activation_charging_off = true;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	737b      	strb	r3, [r7, #13]
		}
		if(data.voltages.cells[i] > VOL_UP_OK)
 8000dd8:	4a89      	ldr	r2, [pc, #548]	; (8001000 <_Z15balance_controlv+0x280>)
 8000dda:	693b      	ldr	r3, [r7, #16]
 8000ddc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000de0:	f24a 421a 	movw	r2, #42010	; 0xa41a
 8000de4:	4293      	cmp	r3, r2
 8000de6:	d902      	bls.n	8000dee <_Z15balance_controlv+0x6e>
		{
			charged_cells++;
 8000de8:	7dfb      	ldrb	r3, [r7, #23]
 8000dea:	3301      	adds	r3, #1
 8000dec:	75fb      	strb	r3, [r7, #23]
		}
		if(data.voltages.cells[i] > VOL_UP_NEARLY_OK)
 8000dee:	4a84      	ldr	r2, [pc, #528]	; (8001000 <_Z15balance_controlv+0x280>)
 8000df0:	693b      	ldr	r3, [r7, #16]
 8000df2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000df6:	f24a 32de 	movw	r2, #41950	; 0xa3de
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d902      	bls.n	8000e04 <_Z15balance_controlv+0x84>
		{
			nearly_charged_cells++;
 8000dfe:	7dbb      	ldrb	r3, [r7, #22]
 8000e00:	3301      	adds	r3, #1
 8000e02:	75bb      	strb	r3, [r7, #22]
		}
		if(data.voltages.cells[i] > VOL_UP_OVERCHARGE)
 8000e04:	4a7e      	ldr	r2, [pc, #504]	; (8001000 <_Z15balance_controlv+0x280>)
 8000e06:	693b      	ldr	r3, [r7, #16]
 8000e08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e0c:	f24a 4274 	movw	r2, #42100	; 0xa474
 8000e10:	4293      	cmp	r3, r2
 8000e12:	d902      	bls.n	8000e1a <_Z15balance_controlv+0x9a>
		{
			cell_overcharged++;
 8000e14:	7d7b      	ldrb	r3, [r7, #21]
 8000e16:	3301      	adds	r3, #1
 8000e18:	757b      	strb	r3, [r7, #21]
	for(unsigned int i = 0; i < NUMBER_OF_CELLS; i++)
 8000e1a:	693b      	ldr	r3, [r7, #16]
 8000e1c:	3301      	adds	r3, #1
 8000e1e:	613b      	str	r3, [r7, #16]
 8000e20:	e7bf      	b.n	8000da2 <_Z15balance_controlv+0x22>
		}
	}

	//EFUSE switch off - battery full
	if(charged_cells >= 4 && fabsf(data.current.value) < CHARGING_CUTOFF_CURRENT && nearly_charged_cells == 6)
 8000e22:	7dfb      	ldrb	r3, [r7, #23]
 8000e24:	2b03      	cmp	r3, #3
 8000e26:	d928      	bls.n	8000e7a <_Z15balance_controlv+0xfa>
 8000e28:	4b75      	ldr	r3, [pc, #468]	; (8001000 <_Z15balance_controlv+0x280>)
 8000e2a:	f203 43e4 	addw	r3, r3, #1252	; 0x4e4
 8000e2e:	edd3 7a00 	vldr	s15, [r3]
 8000e32:	eef0 7ae7 	vabs.f32	s15, s15
 8000e36:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8001004 <_Z15balance_controlv+0x284>
 8000e3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e42:	d51a      	bpl.n	8000e7a <_Z15balance_controlv+0xfa>
 8000e44:	7dbb      	ldrb	r3, [r7, #22]
 8000e46:	2b06      	cmp	r3, #6
 8000e48:	d117      	bne.n	8000e7a <_Z15balance_controlv+0xfa>
	{
		HAL_GPIO_WritePin(EFUSE_GPIO_Port, EFUSE_Pin, GPIO_PIN_RESET);
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	2104      	movs	r1, #4
 8000e4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e52:	f006 f881 	bl	8006f58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET);
 8000e56:	2201      	movs	r2, #1
 8000e58:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e5c:	486a      	ldr	r0, [pc, #424]	; (8001008 <_Z15balance_controlv+0x288>)
 8000e5e:	f006 f87b 	bl	8006f58 <HAL_GPIO_WritePin>
		data.soc.main.set_full_battery();
 8000e62:	486a      	ldr	r0, [pc, #424]	; (800100c <_Z15balance_controlv+0x28c>)
 8000e64:	f002 fcec 	bl	8003840 <_ZN7SoC_EKF16set_full_batteryEv>
		data.charging.charging_state = false;
 8000e68:	4b65      	ldr	r3, [pc, #404]	; (8001000 <_Z15balance_controlv+0x280>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	f883 25b3 	strb.w	r2, [r3, #1459]	; 0x5b3
		data.acu_state = 0;
 8000e70:	4b63      	ldr	r3, [pc, #396]	; (8001000 <_Z15balance_controlv+0x280>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	f883 25bc 	strb.w	r2, [r3, #1468]	; 0x5bc
 8000e78:	e043      	b.n	8000f02 <_Z15balance_controlv+0x182>
	}
	//EFUSE switch off - cell overcharged
	else if(cell_overcharged > 1)
 8000e7a:	7d7b      	ldrb	r3, [r7, #21]
 8000e7c:	2b01      	cmp	r3, #1
 8000e7e:	d914      	bls.n	8000eaa <_Z15balance_controlv+0x12a>
	{
		HAL_GPIO_WritePin(EFUSE_GPIO_Port, EFUSE_Pin, GPIO_PIN_RESET);
 8000e80:	2200      	movs	r2, #0
 8000e82:	2104      	movs	r1, #4
 8000e84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e88:	f006 f866 	bl	8006f58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET);
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e92:	485d      	ldr	r0, [pc, #372]	; (8001008 <_Z15balance_controlv+0x288>)
 8000e94:	f006 f860 	bl	8006f58 <HAL_GPIO_WritePin>
		data.charging.charging_state = false;
 8000e98:	4b59      	ldr	r3, [pc, #356]	; (8001000 <_Z15balance_controlv+0x280>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	f883 25b3 	strb.w	r2, [r3, #1459]	; 0x5b3
		data.acu_state = 0;
 8000ea0:	4b57      	ldr	r3, [pc, #348]	; (8001000 <_Z15balance_controlv+0x280>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	f883 25bc 	strb.w	r2, [r3, #1468]	; 0x5bc
 8000ea8:	e02b      	b.n	8000f02 <_Z15balance_controlv+0x182>
	}
	//EFUSE switch on
	else if(HAL_GPIO_ReadPin(EFUSE_GPIO_Port, EFUSE_Pin) == 0 && nearly_charged_cells < 6 && data.charging.discharge_activation == 0 && cell_overcharged == 0)// && acuState == 0)
 8000eaa:	2104      	movs	r1, #4
 8000eac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eb0:	f006 f83a 	bl	8006f28 <HAL_GPIO_ReadPin>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d10c      	bne.n	8000ed4 <_Z15balance_controlv+0x154>
 8000eba:	7dbb      	ldrb	r3, [r7, #22]
 8000ebc:	2b05      	cmp	r3, #5
 8000ebe:	d809      	bhi.n	8000ed4 <_Z15balance_controlv+0x154>
 8000ec0:	4b4f      	ldr	r3, [pc, #316]	; (8001000 <_Z15balance_controlv+0x280>)
 8000ec2:	f893 35b4 	ldrb.w	r3, [r3, #1460]	; 0x5b4
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d104      	bne.n	8000ed4 <_Z15balance_controlv+0x154>
 8000eca:	7d7b      	ldrb	r3, [r7, #21]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d101      	bne.n	8000ed4 <_Z15balance_controlv+0x154>
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	e000      	b.n	8000ed6 <_Z15balance_controlv+0x156>
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d013      	beq.n	8000f02 <_Z15balance_controlv+0x182>
	{
		HAL_GPIO_WritePin(EFUSE_GPIO_Port, EFUSE_Pin, GPIO_PIN_SET);
 8000eda:	2201      	movs	r2, #1
 8000edc:	2104      	movs	r1, #4
 8000ede:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ee2:	f006 f839 	bl	8006f58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000eec:	4846      	ldr	r0, [pc, #280]	; (8001008 <_Z15balance_controlv+0x288>)
 8000eee:	f006 f833 	bl	8006f58 <HAL_GPIO_WritePin>
		data.charging.charging_state = true;
 8000ef2:	4b43      	ldr	r3, [pc, #268]	; (8001000 <_Z15balance_controlv+0x280>)
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	f883 25b3 	strb.w	r2, [r3, #1459]	; 0x5b3
		data.acu_state = 1;
 8000efa:	4b41      	ldr	r3, [pc, #260]	; (8001000 <_Z15balance_controlv+0x280>)
 8000efc:	2201      	movs	r2, #1
 8000efe:	f883 25bc 	strb.w	r2, [r3, #1468]	; 0x5bc
	}


	//cell choice algorithm when charger is connected
	if(true == data.charging.charging_state) //charging on
 8000f02:	4b3f      	ldr	r3, [pc, #252]	; (8001000 <_Z15balance_controlv+0x280>)
 8000f04:	f893 35b3 	ldrb.w	r3, [r3, #1459]	; 0x5b3
 8000f08:	2b01      	cmp	r3, #1
 8000f0a:	d144      	bne.n	8000f96 <_Z15balance_controlv+0x216>
	{
		if(false == data.charging.discharge_activation)
 8000f0c:	4b3c      	ldr	r3, [pc, #240]	; (8001000 <_Z15balance_controlv+0x280>)
 8000f0e:	f893 35b4 	ldrb.w	r3, [r3, #1460]	; 0x5b4
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d16f      	bne.n	8000ff6 <_Z15balance_controlv+0x276>
		{
			for(int i = 0; i < NUMBER_OF_CELLS; i++)
 8000f16:	2300      	movs	r3, #0
 8000f18:	60bb      	str	r3, [r7, #8]
 8000f1a:	68bb      	ldr	r3, [r7, #8]
 8000f1c:	2b05      	cmp	r3, #5
 8000f1e:	dc6a      	bgt.n	8000ff6 <_Z15balance_controlv+0x276>
			{
				//discharge activation for the cell with the highest voltage
				if(true == max_voltage_discharge_activation)
 8000f20:	7bbb      	ldrb	r3, [r7, #14]
 8000f22:	2b01      	cmp	r3, #1
 8000f24:	d109      	bne.n	8000f3a <_Z15balance_controlv+0x1ba>
				{
					set_discharge_cell_max(discharge_at_once, i, max_voltage_discharge_activation);
 8000f26:	f107 020e 	add.w	r2, r7, #14
 8000f2a:	f107 0108 	add.w	r1, r7, #8
 8000f2e:	f107 030f 	add.w	r3, r7, #15
 8000f32:	4618      	mov	r0, r3
 8000f34:	f7ff feea 	bl	8000d0c <_Z22set_discharge_cell_maxRhRiRb>
 8000f38:	e029      	b.n	8000f8e <_Z15balance_controlv+0x20e>
				}
				//discharge activation for the cells with maximum voltage level - 4.201V
				else if(data.voltages.cells[i] > VOL_UP_OK)
 8000f3a:	68bb      	ldr	r3, [r7, #8]
 8000f3c:	4a30      	ldr	r2, [pc, #192]	; (8001000 <_Z15balance_controlv+0x280>)
 8000f3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f42:	f24a 421a 	movw	r2, #42010	; 0xa41a
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d908      	bls.n	8000f5c <_Z15balance_controlv+0x1dc>
				{
					set_discharge_cell(discharge_at_once, i);
 8000f4a:	f107 0208 	add.w	r2, r7, #8
 8000f4e:	f107 030f 	add.w	r3, r7, #15
 8000f52:	4611      	mov	r1, r2
 8000f54:	4618      	mov	r0, r3
 8000f56:	f7ff fea5 	bl	8000ca4 <_Z18set_discharge_cellRhRi>
 8000f5a:	e018      	b.n	8000f8e <_Z15balance_controlv+0x20e>
				}
				//discharge activation for rest cells if needed
				else if((data.voltages.cells[i] - data.voltages.lowest_cell_voltage) > BALANCE_VALUE)
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	4a28      	ldr	r2, [pc, #160]	; (8001000 <_Z15balance_controlv+0x280>)
 8000f60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f64:	461a      	mov	r2, r3
 8000f66:	4b26      	ldr	r3, [pc, #152]	; (8001000 <_Z15balance_controlv+0x280>)
 8000f68:	8b5b      	ldrh	r3, [r3, #26]
 8000f6a:	1ad3      	subs	r3, r2, r3
 8000f6c:	2b32      	cmp	r3, #50	; 0x32
 8000f6e:	dd08      	ble.n	8000f82 <_Z15balance_controlv+0x202>
				{
					set_discharge_cell(discharge_at_once, i);
 8000f70:	f107 0208 	add.w	r2, r7, #8
 8000f74:	f107 030f 	add.w	r3, r7, #15
 8000f78:	4611      	mov	r1, r2
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f7ff fe92 	bl	8000ca4 <_Z18set_discharge_cellRhRi>
 8000f80:	e005      	b.n	8000f8e <_Z15balance_controlv+0x20e>
				}
				else
					data.charging.cell_discharge[i] = 0;
 8000f82:	68bb      	ldr	r3, [r7, #8]
 8000f84:	4a1e      	ldr	r2, [pc, #120]	; (8001000 <_Z15balance_controlv+0x280>)
 8000f86:	4413      	add	r3, r2
 8000f88:	2200      	movs	r2, #0
 8000f8a:	f883 25ac 	strb.w	r2, [r3, #1452]	; 0x5ac
			for(int i = 0; i < NUMBER_OF_CELLS; i++)
 8000f8e:	68bb      	ldr	r3, [r7, #8]
 8000f90:	3301      	adds	r3, #1
 8000f92:	60bb      	str	r3, [r7, #8]
 8000f94:	e7c1      	b.n	8000f1a <_Z15balance_controlv+0x19a>
		}
	}
	else //charging off
	{
		//balance if the cell voltages are overcharged
		if(false == data.charging.discharge_activation)
 8000f96:	4b1a      	ldr	r3, [pc, #104]	; (8001000 <_Z15balance_controlv+0x280>)
 8000f98:	f893 35b4 	ldrb.w	r3, [r3, #1460]	; 0x5b4
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d12a      	bne.n	8000ff6 <_Z15balance_controlv+0x276>
		{
			for(int i = 0; i < NUMBER_OF_CELLS; i++)
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	607b      	str	r3, [r7, #4]
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2b05      	cmp	r3, #5
 8000fa8:	dc25      	bgt.n	8000ff6 <_Z15balance_controlv+0x276>
			{
				//discharge activation for the cell with the highest voltage
				if(true == max_voltage_discharge_activation_charging_off)
 8000faa:	7b7b      	ldrb	r3, [r7, #13]
 8000fac:	2b01      	cmp	r3, #1
 8000fae:	d108      	bne.n	8000fc2 <_Z15balance_controlv+0x242>
				{
					set_discharge_cell_max(discharge_at_once, i, max_voltage_discharge_activation_charging_off);
 8000fb0:	f107 020d 	add.w	r2, r7, #13
 8000fb4:	1d39      	adds	r1, r7, #4
 8000fb6:	f107 030f 	add.w	r3, r7, #15
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f7ff fea6 	bl	8000d0c <_Z22set_discharge_cell_maxRhRiRb>
 8000fc0:	e015      	b.n	8000fee <_Z15balance_controlv+0x26e>
				}
				//discharge activation for the cells with maximum voltage level - 4.201V
				else if(data.voltages.cells[i] > VOL_UP_OK)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4a0e      	ldr	r2, [pc, #56]	; (8001000 <_Z15balance_controlv+0x280>)
 8000fc6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000fca:	f24a 421a 	movw	r2, #42010	; 0xa41a
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d907      	bls.n	8000fe2 <_Z15balance_controlv+0x262>
				{
					set_discharge_cell(discharge_at_once, i);
 8000fd2:	1d3a      	adds	r2, r7, #4
 8000fd4:	f107 030f 	add.w	r3, r7, #15
 8000fd8:	4611      	mov	r1, r2
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f7ff fe62 	bl	8000ca4 <_Z18set_discharge_cellRhRi>
 8000fe0:	e005      	b.n	8000fee <_Z15balance_controlv+0x26e>
				}
				else
					data.charging.cell_discharge[i] = 0;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4a06      	ldr	r2, [pc, #24]	; (8001000 <_Z15balance_controlv+0x280>)
 8000fe6:	4413      	add	r3, r2
 8000fe8:	2200      	movs	r2, #0
 8000fea:	f883 25ac 	strb.w	r2, [r3, #1452]	; 0x5ac
			for(int i = 0; i < NUMBER_OF_CELLS; i++)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	607b      	str	r3, [r7, #4]
 8000ff4:	e7d6      	b.n	8000fa4 <_Z15balance_controlv+0x224>
			}
		}
	}
}
 8000ff6:	bf00      	nop
 8000ff8:	3718      	adds	r7, #24
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	200005ec 	.word	0x200005ec
 8001004:	3e99999a 	.word	0x3e99999a
 8001008:	48000800 	.word	0x48000800
 800100c:	20000adc 	.word	0x20000adc

08001010 <_Z31balance_activation_deactivationv>:
 * Brief:	Activation or deactivation of balance
 * Param:	None
 * Retval:	None
 */
void balance_activation_deactivation()
{
 8001010:	b590      	push	{r4, r7, lr}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
	if(true == data.charging.discharge_activation)
 8001016:	4b1a      	ldr	r3, [pc, #104]	; (8001080 <_Z31balance_activation_deactivationv+0x70>)
 8001018:	f893 35b4 	ldrb.w	r3, [r3, #1460]	; 0x5b4
 800101c:	2b01      	cmp	r3, #1
 800101e:	d114      	bne.n	800104a <_Z31balance_activation_deactivationv+0x3a>
	{
		for(int i = 0; i < NUMBER_OF_CELLS ; i++)
 8001020:	2300      	movs	r3, #0
 8001022:	607b      	str	r3, [r7, #4]
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2b05      	cmp	r3, #5
 8001028:	dc26      	bgt.n	8001078 <_Z31balance_activation_deactivationv+0x68>
		{
			if(true == data.charging.cell_discharge[i])
 800102a:	4a15      	ldr	r2, [pc, #84]	; (8001080 <_Z31balance_activation_deactivationv+0x70>)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	4413      	add	r3, r2
 8001030:	f203 53ac 	addw	r3, r3, #1452	; 0x5ac
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	2b01      	cmp	r3, #1
 8001038:	d103      	bne.n	8001042 <_Z31balance_activation_deactivationv+0x32>
			{
				LTC_turn_on_discharge(i, data.charging.cell_discharge);
 800103a:	4912      	ldr	r1, [pc, #72]	; (8001084 <_Z31balance_activation_deactivationv+0x74>)
 800103c:	6878      	ldr	r0, [r7, #4]
 800103e:	f001 f98b 	bl	8002358 <_Z21LTC_turn_on_dischargeiPb>
		for(int i = 0; i < NUMBER_OF_CELLS ; i++)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	3301      	adds	r3, #1
 8001046:	607b      	str	r3, [r7, #4]
 8001048:	e7ec      	b.n	8001024 <_Z31balance_activation_deactivationv+0x14>
			}
		}

	}
	else if(data.charging.discharge_tick_end <= HAL_GetTick())
 800104a:	4b0d      	ldr	r3, [pc, #52]	; (8001080 <_Z31balance_activation_deactivationv+0x70>)
 800104c:	f8d3 45b8 	ldr.w	r4, [r3, #1464]	; 0x5b8
 8001050:	f003 fb9c 	bl	800478c <HAL_GetTick>
 8001054:	4603      	mov	r3, r0
 8001056:	429c      	cmp	r4, r3
 8001058:	bf94      	ite	ls
 800105a:	2301      	movls	r3, #1
 800105c:	2300      	movhi	r3, #0
 800105e:	b2db      	uxtb	r3, r3
 8001060:	2b00      	cmp	r3, #0
 8001062:	d009      	beq.n	8001078 <_Z31balance_activation_deactivationv+0x68>
	{
		data.charging.discharge_activation = 0;
 8001064:	4b06      	ldr	r3, [pc, #24]	; (8001080 <_Z31balance_activation_deactivationv+0x70>)
 8001066:	2200      	movs	r2, #0
 8001068:	f883 25b4 	strb.w	r2, [r3, #1460]	; 0x5b4
		LTC_turn_off_discharge();
 800106c:	f001 fa64 	bl	8002538 <_Z22LTC_turn_off_dischargev>
		osDelay(1500);
 8001070:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001074:	f00d fcc2 	bl	800e9fc <osDelay>
	}
}
 8001078:	bf00      	nop
 800107a:	370c      	adds	r7, #12
 800107c:	46bd      	mov	sp, r7
 800107e:	bd90      	pop	{r4, r7, pc}
 8001080:	200005ec 	.word	0x200005ec
 8001084:	20000b98 	.word	0x20000b98

08001088 <_Z22start_balance_functionPv>:

void start_balance_function(void *argument){
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
	data.charging.charger_plugged = HAL_GPIO_ReadPin(INTERLOCK_GPIO_Port, INTERLOCK_Pin);
 8001090:	2104      	movs	r1, #4
 8001092:	4813      	ldr	r0, [pc, #76]	; (80010e0 <_Z22start_balance_functionPv+0x58>)
 8001094:	f005 ff48 	bl	8006f28 <HAL_GPIO_ReadPin>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	bf14      	ite	ne
 800109e:	2301      	movne	r3, #1
 80010a0:	2300      	moveq	r3, #0
 80010a2:	b2da      	uxtb	r2, r3
 80010a4:	4b0f      	ldr	r3, [pc, #60]	; (80010e4 <_Z22start_balance_functionPv+0x5c>)
 80010a6:	f883 25b2 	strb.w	r2, [r3, #1458]	; 0x5b2
	if(true == data.charging.charger_plugged) //charger is plugged
 80010aa:	4b0e      	ldr	r3, [pc, #56]	; (80010e4 <_Z22start_balance_functionPv+0x5c>)
 80010ac:	f893 35b2 	ldrb.w	r3, [r3, #1458]	; 0x5b2
 80010b0:	2b01      	cmp	r3, #1
 80010b2:	d10a      	bne.n	80010ca <_Z22start_balance_functionPv+0x42>
	{
		HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_SET);
 80010b4:	2201      	movs	r2, #1
 80010b6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010ba:	480b      	ldr	r0, [pc, #44]	; (80010e8 <_Z22start_balance_functionPv+0x60>)
 80010bc:	f005 ff4c 	bl	8006f58 <HAL_GPIO_WritePin>
		for(;;){
			balance_control();
 80010c0:	f7ff fe5e 	bl	8000d80 <_Z15balance_controlv>
			balance_activation_deactivation();
 80010c4:	f7ff ffa4 	bl	8001010 <_Z31balance_activation_deactivationv>
			balance_control();
 80010c8:	e7fa      	b.n	80010c0 <_Z22start_balance_functionPv+0x38>
		}
	}
	else	//charger is unplugged
	{
		HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_RESET);
 80010ca:	2200      	movs	r2, #0
 80010cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010d0:	4805      	ldr	r0, [pc, #20]	; (80010e8 <_Z22start_balance_functionPv+0x60>)
 80010d2:	f005 ff41 	bl	8006f58 <HAL_GPIO_WritePin>
	}
}
 80010d6:	bf00      	nop
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	48000400 	.word	0x48000400
 80010e4:	200005ec 	.word	0x200005ec
 80010e8:	48000800 	.word	0x48000800

080010ec <_ZSt21is_constant_evaluatedv>:

#define __cpp_lib_is_constant_evaluated 201811L

  constexpr inline bool
  is_constant_evaluated() noexcept
  { return __builtin_is_constant_evaluated(); }
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	2300      	movs	r3, #0
 80010f2:	4618      	mov	r0, r3
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr

080010fc <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	6039      	str	r1, [r7, #0]
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	4618      	mov	r0, r3
 800110a:	370c      	adds	r7, #12
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr

08001114 <_ZN3etl11vector_baseC1Ej>:
  protected:

    //*************************************************************************
    /// Constructor.
    //*************************************************************************
    vector_base(size_t max_size_)
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
 800111c:	6039      	str	r1, [r7, #0]
      : CAPACITY(max_size_)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	683a      	ldr	r2, [r7, #0]
 8001122:	601a      	str	r2, [r3, #0]
    {
    }
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	4618      	mov	r0, r3
 8001128:	370c      	adds	r7, #12
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr

08001132 <_ZN3etl11vector_baseD1Ev>:
    virtual ~vector_base()
    {
    }
#else
  protected:
    ~vector_base()
 8001132:	b480      	push	{r7}
 8001134:	b083      	sub	sp, #12
 8001136:	af00      	add	r7, sp, #0
 8001138:	6078      	str	r0, [r7, #4]
    {
    }
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4618      	mov	r0, r3
 800113e:	370c      	adds	r7, #12
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr

08001148 <_ZN8PUTM_CAN14Can_rx_messageC1ER19__CAN_HandleTypeDefm>:
namespace PUTM_CAN {

static const std::size_t max_dlc_size = 8;

struct Can_rx_message {
  Can_rx_message(CAN_HandleTypeDef &hcan, uint32_t RxFifo) : header{}, data{0} {
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	60f8      	str	r0, [r7, #12]
 8001150:	60b9      	str	r1, [r7, #8]
 8001152:	607a      	str	r2, [r7, #4]
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	461a      	mov	r2, r3
 8001158:	2300      	movs	r3, #0
 800115a:	6013      	str	r3, [r2, #0]
 800115c:	6053      	str	r3, [r2, #4]
 800115e:	6093      	str	r3, [r2, #8]
 8001160:	60d3      	str	r3, [r2, #12]
 8001162:	6113      	str	r3, [r2, #16]
 8001164:	6153      	str	r3, [r2, #20]
 8001166:	6193      	str	r3, [r2, #24]
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	331c      	adds	r3, #28
 800116c:	2200      	movs	r2, #0
 800116e:	601a      	str	r2, [r3, #0]
 8001170:	605a      	str	r2, [r3, #4]
    this->status =
        HAL_CAN_GetRxMessage(&hcan, RxFifo, &this->header, this->data);
 8001172:	68fa      	ldr	r2, [r7, #12]
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	331c      	adds	r3, #28
 8001178:	6879      	ldr	r1, [r7, #4]
 800117a:	68b8      	ldr	r0, [r7, #8]
 800117c:	f004 ff65 	bl	800604a <HAL_CAN_GetRxMessage>
 8001180:	4603      	mov	r3, r0
 8001182:	461a      	mov	r2, r3
    this->status =
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	4618      	mov	r0, r3
 800118e:	3710      	adds	r7, #16
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}

08001194 <_ZN8PUTM_CAN11Device_base6get_IDEv>:
  bool new_data : 1;

public:
  constexpr Device_base(uint32_t ide, uint8_t dlc)
      : IDE{ide}, DLC{dlc}, new_data{false} {}
  [[nodiscard]] constexpr uint32_t get_ID() { return IDE; }
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	791a      	ldrb	r2, [r3, #4]
 80011a0:	795b      	ldrb	r3, [r3, #5]
 80011a2:	f003 030f 	and.w	r3, r3, #15
 80011a6:	021b      	lsls	r3, r3, #8
 80011a8:	4313      	orrs	r3, r2
 80011aa:	b29b      	uxth	r3, r3
 80011ac:	4618      	mov	r0, r3
 80011ae:	370c      	adds	r7, #12
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr

080011b8 <_ZN8PUTM_CAN13Can_interface13parse_messageERKNS_14Can_rx_messageE>:
                                                &telemetry_main};

public:
  Can_interface() = default;

  bool parse_message(const Can_rx_message &m) {
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b086      	sub	sp, #24
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
 80011c0:	6039      	str	r1, [r7, #0]
    for (auto &device : device_array) {
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	f503 738a 	add.w	r3, r3, #276	; 0x114
 80011c8:	613b      	str	r3, [r7, #16]
 80011ca:	6938      	ldr	r0, [r7, #16]
 80011cc:	f000 f9aa 	bl	8001524 <_ZNSt5arrayIPN8PUTM_CAN11Device_baseELj23EE5beginEv>
 80011d0:	6178      	str	r0, [r7, #20]
 80011d2:	6938      	ldr	r0, [r7, #16]
 80011d4:	f000 f9b2 	bl	800153c <_ZNSt5arrayIPN8PUTM_CAN11Device_baseELj23EE3endEv>
 80011d8:	60f8      	str	r0, [r7, #12]
 80011da:	697a      	ldr	r2, [r7, #20]
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	429a      	cmp	r2, r3
 80011e0:	d01f      	beq.n	8001222 <_ZN8PUTM_CAN13Can_interface13parse_messageERKNS_14Can_rx_messageE+0x6a>
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	60bb      	str	r3, [r7, #8]
      if (device->get_ID() == m.header.StdId) {
 80011e6:	68bb      	ldr	r3, [r7, #8]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4618      	mov	r0, r3
 80011ec:	f7ff ffd2 	bl	8001194 <_ZN8PUTM_CAN11Device_base6get_IDEv>
 80011f0:	4602      	mov	r2, r0
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	429a      	cmp	r2, r3
 80011f8:	bf0c      	ite	eq
 80011fa:	2301      	moveq	r3, #1
 80011fc:	2300      	movne	r3, #0
 80011fe:	b2db      	uxtb	r3, r3
 8001200:	2b00      	cmp	r3, #0
 8001202:	d00a      	beq.n	800121a <_ZN8PUTM_CAN13Can_interface13parse_messageERKNS_14Can_rx_messageE+0x62>
        device->set_data(m);
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	68ba      	ldr	r2, [r7, #8]
 800120e:	6812      	ldr	r2, [r2, #0]
 8001210:	6839      	ldr	r1, [r7, #0]
 8001212:	4610      	mov	r0, r2
 8001214:	4798      	blx	r3
        return true;
 8001216:	2301      	movs	r3, #1
 8001218:	e004      	b.n	8001224 <_ZN8PUTM_CAN13Can_interface13parse_messageERKNS_14Can_rx_messageE+0x6c>
    for (auto &device : device_array) {
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	3304      	adds	r3, #4
 800121e:	617b      	str	r3, [r7, #20]
 8001220:	e7db      	b.n	80011da <_ZN8PUTM_CAN13Can_interface13parse_messageERKNS_14Can_rx_messageE+0x22>
      }
    }
    return false;
 8001222:	2300      	movs	r3, #0
  }
 8001224:	4618      	mov	r0, r3
 8001226:	3718      	adds	r7, #24
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}

0800122c <HAL_CAN_RxFifo0MsgPendingCallback>:

Can_interface can;

} // namespace PUTM_CAN

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 800122c:	b580      	push	{r7, lr}
 800122e:	b08c      	sub	sp, #48	; 0x30
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  PUTM_CAN::Can_rx_message rx{*hcan, 0};
 8001234:	f107 0308 	add.w	r3, r7, #8
 8001238:	2200      	movs	r2, #0
 800123a:	6879      	ldr	r1, [r7, #4]
 800123c:	4618      	mov	r0, r3
 800123e:	f7ff ff83 	bl	8001148 <_ZN8PUTM_CAN14Can_rx_messageC1ER19__CAN_HandleTypeDefm>
  if (rx.status == HAL_StatusTypeDef::HAL_OK) {
 8001242:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001246:	2b00      	cmp	r3, #0
 8001248:	d10d      	bne.n	8001266 <HAL_CAN_RxFifo0MsgPendingCallback+0x3a>
    if (not PUTM_CAN::can.parse_message(rx)) {
 800124a:	f107 0308 	add.w	r3, r7, #8
 800124e:	4619      	mov	r1, r3
 8001250:	4807      	ldr	r0, [pc, #28]	; (8001270 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 8001252:	f7ff ffb1 	bl	80011b8 <_ZN8PUTM_CAN13Can_interface13parse_messageERKNS_14Can_rx_messageE>
 8001256:	4603      	mov	r3, r0
 8001258:	f083 0301 	eor.w	r3, r3, #1
 800125c:	b2db      	uxtb	r3, r3
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <HAL_CAN_RxFifo0MsgPendingCallback+0x3a>
      // Unknown message
      Error_Handler();
 8001262:	f002 f85d 	bl	8003320 <Error_Handler>
    }
  }
}
 8001266:	bf00      	nop
 8001268:	3730      	adds	r7, #48	; 0x30
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	20000000 	.word	0x20000000

08001274 <_Z11error_checkv>:

};


// error if value is in range <min, max>
void error_check(){
 8001274:	b580      	push	{r7, lr}
 8001276:	b08e      	sub	sp, #56	; 0x38
 8001278:	af00      	add	r7, sp, #0
	etl::vector<Error_condition, 7> errors_vector;
 800127a:	463b      	mov	r3, r7
 800127c:	4618      	mov	r0, r3
 800127e:	f000 f977 	bl	8001570 <_ZN3etl6vectorI15Error_conditionLj7EEC1Ev>

	for(auto& error : error_conditions){
 8001282:	4b2f      	ldr	r3, [pc, #188]	; (8001340 <_Z11error_checkv+0xcc>)
 8001284:	633b      	str	r3, [r7, #48]	; 0x30
 8001286:	4b2e      	ldr	r3, [pc, #184]	; (8001340 <_Z11error_checkv+0xcc>)
 8001288:	637b      	str	r3, [r7, #52]	; 0x34
 800128a:	4b2e      	ldr	r3, [pc, #184]	; (8001344 <_Z11error_checkv+0xd0>)
 800128c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800128e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001292:	429a      	cmp	r2, r3
 8001294:	d041      	beq.n	800131a <_Z11error_checkv+0xa6>
 8001296:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001298:	62bb      	str	r3, [r7, #40]	; 0x28
		if(error.min <= error.value && error.value <= error.max){
 800129a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800129c:	ed93 7a01 	vldr	s14, [r3, #4]
 80012a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012a2:	edd3 7a03 	vldr	s15, [r3, #12]
 80012a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ae:	d825      	bhi.n	80012fc <_Z11error_checkv+0x88>
 80012b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012b2:	ed93 7a03 	vldr	s14, [r3, #12]
 80012b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012b8:	edd3 7a02 	vldr	s15, [r3, #8]
 80012bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012c4:	d81a      	bhi.n	80012fc <_Z11error_checkv+0x88>

			if(false == error.flag)
 80012c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012c8:	7f1b      	ldrb	r3, [r3, #28]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d121      	bne.n	8001312 <_Z11error_checkv+0x9e>
			{
				errors_vector.emplace_back(error.error);
 80012ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80012d0:	463b      	mov	r3, r7
 80012d2:	4611      	mov	r1, r2
 80012d4:	4618      	mov	r0, r3
 80012d6:	f000 f970 	bl	80015ba <_ZN3etl7ivectorI15Error_conditionE12emplace_backIJRS1_EEEvDpOT_>
				error.timer = HAL_GetTick() + error.error_time;
 80012da:	f003 fa57 	bl	800478c <HAL_GetTick>
 80012de:	4602      	mov	r2, r0
 80012e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012e2:	691b      	ldr	r3, [r3, #16]
 80012e4:	441a      	add	r2, r3
 80012e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012e8:	619a      	str	r2, [r3, #24]
				error.flag = true;
 80012ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012ec:	2201      	movs	r2, #1
 80012ee:	771a      	strb	r2, [r3, #28]
				data.acu_state=error.acu_state_code;
 80012f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012f2:	7d1a      	ldrb	r2, [r3, #20]
 80012f4:	4b14      	ldr	r3, [pc, #80]	; (8001348 <_Z11error_checkv+0xd4>)
 80012f6:	f883 25bc 	strb.w	r2, [r3, #1468]	; 0x5bc
			if(false == error.flag)
 80012fa:	e00a      	b.n	8001312 <_Z11error_checkv+0x9e>
			}
		}
		else{
			error.timer = HAL_GetTick() + error.error_time;
 80012fc:	f003 fa46 	bl	800478c <HAL_GetTick>
 8001300:	4602      	mov	r2, r0
 8001302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001304:	691b      	ldr	r3, [r3, #16]
 8001306:	441a      	add	r2, r3
 8001308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800130a:	619a      	str	r2, [r3, #24]
			error.flag = false;
 800130c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800130e:	2200      	movs	r2, #0
 8001310:	771a      	strb	r2, [r3, #28]
	for(auto& error : error_conditions){
 8001312:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001314:	3320      	adds	r3, #32
 8001316:	637b      	str	r3, [r7, #52]	; 0x34
 8001318:	e7b9      	b.n	800128e <_Z11error_checkv+0x1a>
		}
	}

	if(errors_vector.empty())
 800131a:	463b      	mov	r3, r7
 800131c:	4618      	mov	r0, r3
 800131e:	f000 f967 	bl	80015f0 <_ZNK3etl7ivectorI15Error_conditionE5emptyEv>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d003      	beq.n	8001330 <_Z11error_checkv+0xbc>
	{
		data.acu_state = NORMAL_STATE;
 8001328:	4b07      	ldr	r3, [pc, #28]	; (8001348 <_Z11error_checkv+0xd4>)
 800132a:	2200      	movs	r2, #0
 800132c:	f883 25bc 	strb.w	r2, [r3, #1468]	; 0x5bc
	etl::vector<Error_condition, 7> errors_vector;
 8001330:	463b      	mov	r3, r7
 8001332:	4618      	mov	r0, r3
 8001334:	f000 f930 	bl	8001598 <_ZN3etl6vectorI15Error_conditionLj7EED1Ev>
	}

	/*for (auto error : errors_vector){
		// do sth
	}*/
}
 8001338:	bf00      	nop
 800133a:	3738      	adds	r7, #56	; 0x38
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	20000504 	.word	0x20000504
 8001344:	200005e4 	.word	0x200005e4
 8001348:	200005ec 	.word	0x200005ec

0800134c <_Z13error_executev>:

void error_execute(){
 800134c:	b590      	push	{r4, r7, lr}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
	if(error_conditions[0].timer <= HAL_GetTick()) //shut down and sleep
 8001352:	4b1d      	ldr	r3, [pc, #116]	; (80013c8 <_Z13error_executev+0x7c>)
 8001354:	699c      	ldr	r4, [r3, #24]
 8001356:	f003 fa19 	bl	800478c <HAL_GetTick>
 800135a:	4603      	mov	r3, r0
 800135c:	429c      	cmp	r4, r3
 800135e:	bf94      	ite	ls
 8001360:	2301      	movls	r3, #1
 8001362:	2300      	movhi	r3, #0
 8001364:	b2db      	uxtb	r3, r3
 8001366:	2b00      	cmp	r3, #0
 8001368:	d00a      	beq.n	8001380 <_Z13error_executev+0x34>
	{
		HAL_GPIO_WritePin(EFUSE_GPIO_Port, EFUSE_Pin, GPIO_PIN_RESET);
 800136a:	2200      	movs	r2, #0
 800136c:	2104      	movs	r1, #4
 800136e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001372:	f005 fdf1 	bl	8006f58 <HAL_GPIO_WritePin>
		HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8001376:	2101      	movs	r1, #1
 8001378:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800137c:	f006 ffc4 	bl	8008308 <HAL_PWR_EnterSTOPMode>
	}
	for(unsigned int i = 3; i < 7; i++){
 8001380:	2303      	movs	r3, #3
 8001382:	607b      	str	r3, [r7, #4]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2b06      	cmp	r3, #6
 8001388:	d819      	bhi.n	80013be <_Z13error_executev+0x72>
		{
			if(error_conditions[i].timer <= HAL_GetTick()) //shut down
 800138a:	4a0f      	ldr	r2, [pc, #60]	; (80013c8 <_Z13error_executev+0x7c>)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	015b      	lsls	r3, r3, #5
 8001390:	4413      	add	r3, r2
 8001392:	3318      	adds	r3, #24
 8001394:	681c      	ldr	r4, [r3, #0]
 8001396:	f003 f9f9 	bl	800478c <HAL_GetTick>
 800139a:	4603      	mov	r3, r0
 800139c:	429c      	cmp	r4, r3
 800139e:	bf94      	ite	ls
 80013a0:	2301      	movls	r3, #1
 80013a2:	2300      	movhi	r3, #0
 80013a4:	b2db      	uxtb	r3, r3
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d005      	beq.n	80013b6 <_Z13error_executev+0x6a>
			{

				HAL_GPIO_WritePin(EFUSE_GPIO_Port, EFUSE_Pin, GPIO_PIN_RESET);
 80013aa:	2200      	movs	r2, #0
 80013ac:	2104      	movs	r1, #4
 80013ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013b2:	f005 fdd1 	bl	8006f58 <HAL_GPIO_WritePin>
	for(unsigned int i = 3; i < 7; i++){
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	3301      	adds	r3, #1
 80013ba:	607b      	str	r3, [r7, #4]
 80013bc:	e7e2      	b.n	8001384 <_Z13error_executev+0x38>
					break;
				}*/
			}
		}
	}
}
 80013be:	bf00      	nop
 80013c0:	370c      	adds	r7, #12
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd90      	pop	{r4, r7, pc}
 80013c6:	bf00      	nop
 80013c8:	20000504 	.word	0x20000504

080013cc <_ZN8PUTM_CAN14Can_tx_messageI11BMS_LV_mainEC1ERKS1_RK19CAN_TxHeaderTypeDef>:
  constexpr Can_tx_message(const T &data,
 80013cc:	b5b0      	push	{r4, r5, r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	60f8      	str	r0, [r7, #12]
 80013d4:	60b9      	str	r1, [r7, #8]
 80013d6:	607a      	str	r2, [r7, #4]
      : header{message_header} {
 80013d8:	68fa      	ldr	r2, [r7, #12]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4614      	mov	r4, r2
 80013de:	461d      	mov	r5, r3
 80013e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013e4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80013e8:	e884 0003 	stmia.w	r4, {r0, r1}
    std::memcpy(this->buff, &data, sizeof(T));
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	3318      	adds	r3, #24
 80013f0:	2206      	movs	r2, #6
 80013f2:	68b9      	ldr	r1, [r7, #8]
 80013f4:	4618      	mov	r0, r3
 80013f6:	f010 fefb 	bl	80121f0 <memcpy>
  }
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	4618      	mov	r0, r3
 80013fe:	3710      	adds	r7, #16
 8001400:	46bd      	mov	sp, r7
 8001402:	bdb0      	pop	{r4, r5, r7, pc}

08001404 <_ZN8PUTM_CAN14Can_tx_messageI18BMS_LV_temperatureEC1ERKS1_RK19CAN_TxHeaderTypeDef>:
  constexpr Can_tx_message(const T &data,
 8001404:	b5b0      	push	{r4, r5, r7, lr}
 8001406:	b084      	sub	sp, #16
 8001408:	af00      	add	r7, sp, #0
 800140a:	60f8      	str	r0, [r7, #12]
 800140c:	60b9      	str	r1, [r7, #8]
 800140e:	607a      	str	r2, [r7, #4]
      : header{message_header} {
 8001410:	68fa      	ldr	r2, [r7, #12]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4614      	mov	r4, r2
 8001416:	461d      	mov	r5, r3
 8001418:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800141a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800141c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001420:	e884 0003 	stmia.w	r4, {r0, r1}
    std::memcpy(this->buff, &data, sizeof(T));
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	3318      	adds	r3, #24
 8001428:	2208      	movs	r2, #8
 800142a:	68b9      	ldr	r1, [r7, #8]
 800142c:	4618      	mov	r0, r3
 800142e:	f010 fedf 	bl	80121f0 <memcpy>
  }
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	4618      	mov	r0, r3
 8001436:	3710      	adds	r7, #16
 8001438:	46bd      	mov	sp, r7
 800143a:	bdb0      	pop	{r4, r5, r7, pc}

0800143c <_Z23start_comm_err_functionPv>:
	n += sprintf(&tab[n], "\r\n");

	CDC_Transmit_FS((uint8_t*)tab, n);
}

void start_comm_err_function(void *argument){
 800143c:	b580      	push	{r7, lr}
 800143e:	b096      	sub	sp, #88	; 0x58
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]

	for(;;){
		osDelay(20);
 8001444:	2014      	movs	r0, #20
 8001446:	f00d fad9 	bl	800e9fc <osDelay>

		BMS_LV_main can_message_main{
			data.voltages.total_can,
 800144a:	4b32      	ldr	r3, [pc, #200]	; (8001514 <_Z23start_comm_err_functionPv+0xd8>)
 800144c:	8b1b      	ldrh	r3, [r3, #24]
			data.soc.value_can,
			data.temperatures.average,
			(uint8_t)data.current.value,
			static_cast<BMS_LV_states>(data.acu_state)
		};
 800144e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
			data.soc.value_can,
 8001452:	4b30      	ldr	r3, [pc, #192]	; (8001514 <_Z23start_comm_err_functionPv+0xd8>)
 8001454:	f893 35a8 	ldrb.w	r3, [r3, #1448]	; 0x5a8
		};
 8001458:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
			data.temperatures.average,
 800145c:	4b2d      	ldr	r3, [pc, #180]	; (8001514 <_Z23start_comm_err_functionPv+0xd8>)
 800145e:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
		};
 8001462:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			(uint8_t)data.current.value,
 8001466:	4b2b      	ldr	r3, [pc, #172]	; (8001514 <_Z23start_comm_err_functionPv+0xd8>)
 8001468:	f203 43e4 	addw	r3, r3, #1252	; 0x4e4
 800146c:	edd3 7a00 	vldr	s15, [r3]
 8001470:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001474:	edc7 7a00 	vstr	s15, [r7]
 8001478:	783b      	ldrb	r3, [r7, #0]
 800147a:	b2db      	uxtb	r3, r3
		};
 800147c:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
			static_cast<BMS_LV_states>(data.acu_state)
 8001480:	4b24      	ldr	r3, [pc, #144]	; (8001514 <_Z23start_comm_err_functionPv+0xd8>)
 8001482:	f893 35bc 	ldrb.w	r3, [r3, #1468]	; 0x5bc
		};
 8001486:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

		BMS_LV_temperature can_message_temp{
 800148a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800148e:	2200      	movs	r2, #0
 8001490:	601a      	str	r2, [r3, #0]
 8001492:	605a      	str	r2, [r3, #4]
			data.temperatures.values[0],
 8001494:	4b1f      	ldr	r3, [pc, #124]	; (8001514 <_Z23start_comm_err_functionPv+0xd8>)
 8001496:	f893 3020 	ldrb.w	r3, [r3, #32]
			data.temperatures.values[3],
			data.temperatures.values[4],
			0,//data.temperatures.values[5],
			0,//data.temperatures.values[6],
			0//data.temperatures.values[7]
		};
 800149a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
			data.temperatures.values[1],
 800149e:	4b1d      	ldr	r3, [pc, #116]	; (8001514 <_Z23start_comm_err_functionPv+0xd8>)
 80014a0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
		};
 80014a4:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
			data.temperatures.values[2],
 80014a8:	4b1a      	ldr	r3, [pc, #104]	; (8001514 <_Z23start_comm_err_functionPv+0xd8>)
 80014aa:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
		};
 80014ae:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
			data.temperatures.values[3],
 80014b2:	4b18      	ldr	r3, [pc, #96]	; (8001514 <_Z23start_comm_err_functionPv+0xd8>)
 80014b4:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
		};
 80014b8:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
			data.temperatures.values[4],
 80014bc:	4b15      	ldr	r3, [pc, #84]	; (8001514 <_Z23start_comm_err_functionPv+0xd8>)
 80014be:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
		};
 80014c2:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c

		//serialPrint();

		auto can_message_main_frame = PUTM_CAN::Can_tx_message<BMS_LV_main>(can_message_main, can_tx_header_BMS_LV_MAIN);
 80014c6:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80014ca:	f107 0308 	add.w	r3, r7, #8
 80014ce:	4a12      	ldr	r2, [pc, #72]	; (8001518 <_Z23start_comm_err_functionPv+0xdc>)
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7ff ff7b 	bl	80013cc <_ZN8PUTM_CAN14Can_tx_messageI11BMS_LV_mainEC1ERKS1_RK19CAN_TxHeaderTypeDef>
		auto can_message_temp_frame = PUTM_CAN::Can_tx_message<BMS_LV_temperature>(can_message_temp, can_tx_header_BMS_LV_TEMPERATURE);
 80014d6:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80014da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014de:	4a0f      	ldr	r2, [pc, #60]	; (800151c <_Z23start_comm_err_functionPv+0xe0>)
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7ff ff8f 	bl	8001404 <_ZN8PUTM_CAN14Can_tx_messageI18BMS_LV_temperatureEC1ERKS1_RK19CAN_TxHeaderTypeDef>

		auto status_main = can_message_main_frame.send(hcan1);
 80014e6:	f107 0308 	add.w	r3, r7, #8
 80014ea:	490d      	ldr	r1, [pc, #52]	; (8001520 <_Z23start_comm_err_functionPv+0xe4>)
 80014ec:	4618      	mov	r0, r3
 80014ee:	f000 f893 	bl	8001618 <_ZN8PUTM_CAN14Can_tx_messageI11BMS_LV_mainE4sendER19__CAN_HandleTypeDef>
 80014f2:	4603      	mov	r3, r0
 80014f4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		auto status_temp = can_message_temp_frame.send(hcan1);
 80014f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014fc:	4908      	ldr	r1, [pc, #32]	; (8001520 <_Z23start_comm_err_functionPv+0xe4>)
 80014fe:	4618      	mov	r0, r3
 8001500:	f000 f89e 	bl	8001640 <_ZN8PUTM_CAN14Can_tx_messageI18BMS_LV_temperatureE4sendER19__CAN_HandleTypeDef>
 8001504:	4603      	mov	r3, r0
 8001506:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56

		error_check();
 800150a:	f7ff feb3 	bl	8001274 <_Z11error_checkv>

		error_execute();
 800150e:	f7ff ff1d 	bl	800134c <_Z13error_executev>
	}
 8001512:	e797      	b.n	8001444 <_Z23start_comm_err_functionPv+0x8>
 8001514:	200005ec 	.word	0x200005ec
 8001518:	08014d28 	.word	0x08014d28
 800151c:	08014d40 	.word	0x08014d40
 8001520:	20000f3c 	.word	0x20000f3c

08001524 <_ZNSt5arrayIPN8PUTM_CAN11Device_baseELj23EE5beginEv>:
      noexcept(_AT_Type::_Is_nothrow_swappable::value)
      { std::swap_ranges(begin(), end(), __other.begin()); }

      // Iterators.
      _GLIBCXX17_CONSTEXPR iterator
      begin() noexcept
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 800152c:	6878      	ldr	r0, [r7, #4]
 800152e:	f000 f89b 	bl	8001668 <_ZNSt5arrayIPN8PUTM_CAN11Device_baseELj23EE4dataEv>
 8001532:	4603      	mov	r3, r0
 8001534:	4618      	mov	r0, r3
 8001536:	3708      	adds	r7, #8
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}

0800153c <_ZNSt5arrayIPN8PUTM_CAN11Device_baseELj23EE3endEv>:
      _GLIBCXX17_CONSTEXPR const_iterator
      begin() const noexcept
      { return const_iterator(data()); }

      _GLIBCXX17_CONSTEXPR iterator
      end() noexcept
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	f000 f88f 	bl	8001668 <_ZNSt5arrayIPN8PUTM_CAN11Device_baseELj23EE4dataEv>
 800154a:	4603      	mov	r3, r0
 800154c:	335c      	adds	r3, #92	; 0x5c
 800154e:	4618      	mov	r0, r3
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}

08001556 <_ZN3etl7ivectorI15Error_conditionED1Ev>:
  /// The base class for specifically sized vectors.
  /// Can be used as a reference type for all vectors containing a specific type.
  ///\ingroup vector
  //***************************************************************************
  template <typename T>
  class ivector : public etl::vector_base
 8001556:	b580      	push	{r7, lr}
 8001558:	b082      	sub	sp, #8
 800155a:	af00      	add	r7, sp, #0
 800155c:	6078      	str	r0, [r7, #4]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4618      	mov	r0, r3
 8001562:	f7ff fde6 	bl	8001132 <_ZN3etl11vector_baseD1Ev>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4618      	mov	r0, r3
 800156a:	3708      	adds	r7, #8
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}

08001570 <_ZN3etl6vectorI15Error_conditionLj7EEC1Ev>:
    static const size_t MAX_SIZE = MAX_SIZE_;

    //*************************************************************************
    /// Constructor.
    //*************************************************************************
    vector()
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
      : etl::ivector<T>(reinterpret_cast<T*>(&buffer), MAX_SIZE)
 8001578:	6878      	ldr	r0, [r7, #4]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	330c      	adds	r3, #12
 800157e:	2207      	movs	r2, #7
 8001580:	4619      	mov	r1, r3
 8001582:	f000 f87e 	bl	8001682 <_ZN3etl7ivectorI15Error_conditionEC1EPS1_j>
    {
      this->initialise();
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4618      	mov	r0, r3
 800158a:	f000 f890 	bl	80016ae <_ZN3etl7ivectorI15Error_conditionE10initialiseEv>
    }
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4618      	mov	r0, r3
 8001592:	3708      	adds	r7, #8
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}

08001598 <_ZN3etl6vectorI15Error_conditionLj7EED1Ev>:
#endif

    //*************************************************************************
    /// Destructor.
    //*************************************************************************
    ~vector()
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
    {
      this->clear();
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	4618      	mov	r0, r3
 80015a4:	f000 f897 	bl	80016d6 <_ZN3etl7ivectorI15Error_conditionE5clearEv>
    }
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	4618      	mov	r0, r3
 80015ac:	f7ff ffd3 	bl	8001556 <_ZN3etl7ivectorI15Error_conditionED1Ev>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	4618      	mov	r0, r3
 80015b4:	3708      	adds	r7, #8
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}

080015ba <_ZN3etl7ivectorI15Error_conditionE12emplace_backIJRS1_EEEvDpOT_>:
    void emplace_back(Args && ... args)
 80015ba:	b590      	push	{r4, r7, lr}
 80015bc:	b083      	sub	sp, #12
 80015be:	af00      	add	r7, sp, #0
 80015c0:	6078      	str	r0, [r7, #4]
 80015c2:	6039      	str	r1, [r7, #0]
      ::new (p_end) T(etl::forward<Args>(args)...);
 80015c4:	6838      	ldr	r0, [r7, #0]
 80015c6:	f000 f891 	bl	80016ec <_ZN3etl7forwardIR15Error_conditionEEOT_RNS_16remove_referenceIS3_E4typeE>
 80015ca:	4603      	mov	r3, r0
 80015cc:	681c      	ldr	r4, [r3, #0]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	4619      	mov	r1, r3
 80015d4:	2004      	movs	r0, #4
 80015d6:	f7ff fd91 	bl	80010fc <_ZnwjPv>
 80015da:	4603      	mov	r3, r0
 80015dc:	601c      	str	r4, [r3, #0]
      ++p_end;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	1d1a      	adds	r2, r3, #4
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	609a      	str	r2, [r3, #8]
    }
 80015e8:	bf00      	nop
 80015ea:	370c      	adds	r7, #12
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd90      	pop	{r4, r7, pc}

080015f0 <_ZNK3etl7ivectorI15Error_conditionE5emptyEv>:
    bool empty() const
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
      return (p_end == p_buffer);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	689a      	ldr	r2, [r3, #8]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	429a      	cmp	r2, r3
 8001602:	bf0c      	ite	eq
 8001604:	2301      	moveq	r3, #1
 8001606:	2300      	movne	r3, #0
 8001608:	b2db      	uxtb	r3, r3
    }
 800160a:	4618      	mov	r0, r3
 800160c:	370c      	adds	r7, #12
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
	...

08001618 <_ZN8PUTM_CAN14Can_tx_messageI11BMS_LV_mainE4sendER19__CAN_HandleTypeDef>:
  HAL_StatusTypeDef send(CAN_HandleTypeDef &hcan) {
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	6039      	str	r1, [r7, #0]
    return HAL_CAN_AddTxMessage(&hcan, &this->header, this->buff, &TxMailbox);
 8001622:	6879      	ldr	r1, [r7, #4]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	f103 0218 	add.w	r2, r3, #24
 800162a:	4b04      	ldr	r3, [pc, #16]	; (800163c <_ZN8PUTM_CAN14Can_tx_messageI11BMS_LV_mainE4sendER19__CAN_HandleTypeDef+0x24>)
 800162c:	6838      	ldr	r0, [r7, #0]
 800162e:	f004 fc3c 	bl	8005eaa <HAL_CAN_AddTxMessage>
 8001632:	4603      	mov	r3, r0
  }
 8001634:	4618      	mov	r0, r3
 8001636:	3708      	adds	r7, #8
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	200005e4 	.word	0x200005e4

08001640 <_ZN8PUTM_CAN14Can_tx_messageI18BMS_LV_temperatureE4sendER19__CAN_HandleTypeDef>:
  HAL_StatusTypeDef send(CAN_HandleTypeDef &hcan) {
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	6039      	str	r1, [r7, #0]
    return HAL_CAN_AddTxMessage(&hcan, &this->header, this->buff, &TxMailbox);
 800164a:	6879      	ldr	r1, [r7, #4]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	f103 0218 	add.w	r2, r3, #24
 8001652:	4b04      	ldr	r3, [pc, #16]	; (8001664 <_ZN8PUTM_CAN14Can_tx_messageI18BMS_LV_temperatureE4sendER19__CAN_HandleTypeDef+0x24>)
 8001654:	6838      	ldr	r0, [r7, #0]
 8001656:	f004 fc28 	bl	8005eaa <HAL_CAN_AddTxMessage>
 800165a:	4603      	mov	r3, r0
  }
 800165c:	4618      	mov	r0, r3
 800165e:	3708      	adds	r7, #8
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	200005e8 	.word	0x200005e8

08001668 <_ZNSt5arrayIPN8PUTM_CAN11Device_baseELj23EE4dataEv>:
	return _Nm ? _AT_Type::_S_ref(_M_elems, _Nm - 1)
 	           : _AT_Type::_S_ref(_M_elems, 0);
      }

      _GLIBCXX17_CONSTEXPR pointer
      data() noexcept
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	4618      	mov	r0, r3
 8001674:	f000 f845 	bl	8001702 <_ZNSt14__array_traitsIPN8PUTM_CAN11Device_baseELj23EE6_S_ptrERA23_KS2_>
 8001678:	4603      	mov	r3, r0
 800167a:	4618      	mov	r0, r3
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}

08001682 <_ZN3etl7ivectorI15Error_conditionEC1EPS1_j>:
    ivector(T* p_buffer_, size_t MAX_SIZE)
 8001682:	b580      	push	{r7, lr}
 8001684:	b084      	sub	sp, #16
 8001686:	af00      	add	r7, sp, #0
 8001688:	60f8      	str	r0, [r7, #12]
 800168a:	60b9      	str	r1, [r7, #8]
 800168c:	607a      	str	r2, [r7, #4]
      , p_end(p_buffer_)
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	6879      	ldr	r1, [r7, #4]
 8001692:	4618      	mov	r0, r3
 8001694:	f7ff fd3e 	bl	8001114 <_ZN3etl11vector_baseC1Ej>
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	68ba      	ldr	r2, [r7, #8]
 800169c:	605a      	str	r2, [r3, #4]
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	68ba      	ldr	r2, [r7, #8]
 80016a2:	609a      	str	r2, [r3, #8]
    }
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	4618      	mov	r0, r3
 80016a8:	3710      	adds	r7, #16
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}

080016ae <_ZN3etl7ivectorI15Error_conditionE10initialiseEv>:
    void initialise()
 80016ae:	b580      	push	{r7, lr}
 80016b0:	b082      	sub	sp, #8
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	6078      	str	r0, [r7, #4]
      etl::destroy(p_buffer, p_end);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	685a      	ldr	r2, [r3, #4]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	4619      	mov	r1, r3
 80016c0:	4610      	mov	r0, r2
 80016c2:	f000 f829 	bl	8001718 <_ZN3etl7destroyIP15Error_conditionEEvT_S3_>
      p_end = p_buffer;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	685a      	ldr	r2, [r3, #4]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	609a      	str	r2, [r3, #8]
    }
 80016ce:	bf00      	nop
 80016d0:	3708      	adds	r7, #8
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}

080016d6 <_ZN3etl7ivectorI15Error_conditionE5clearEv>:
    void clear()
 80016d6:	b580      	push	{r7, lr}
 80016d8:	b082      	sub	sp, #8
 80016da:	af00      	add	r7, sp, #0
 80016dc:	6078      	str	r0, [r7, #4]
      initialise();
 80016de:	6878      	ldr	r0, [r7, #4]
 80016e0:	f7ff ffe5 	bl	80016ae <_ZN3etl7ivectorI15Error_conditionE10initialiseEv>
    }
 80016e4:	bf00      	nop
 80016e6:	3708      	adds	r7, #8
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}

080016ec <_ZN3etl7forwardIR15Error_conditionEEOT_RNS_16remove_referenceIS3_E4typeE>:
    return static_cast<typename etl::remove_reference<T>::type&&>(t);
  }

  //******************************************************************************
  template <typename T>
  constexpr T&& forward(typename etl::remove_reference<T>::type& t) ETL_NOEXCEPT
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  {
    return static_cast<T&&>(t);
 80016f4:	687b      	ldr	r3, [r7, #4]
  }
 80016f6:	4618      	mov	r0, r3
 80016f8:	370c      	adds	r7, #12
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr

08001702 <_ZNSt14__array_traitsIPN8PUTM_CAN11Device_baseELj23EE6_S_ptrERA23_KS2_>:
      _S_ptr(const _Type& __t) noexcept
 8001702:	b480      	push	{r7}
 8001704:	b083      	sub	sp, #12
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	4618      	mov	r0, r3
 800170e:	370c      	adds	r7, #12
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr

08001718 <_ZN3etl7destroyIP15Error_conditionEEvT_S3_>:
  /// Destroys a range of items.
  /// https://en.cppreference.com/w/cpp/memory/destroy
  ///\ingroup memory
  //*****************************************************************************
  template <typename TIterator>
  void destroy(TIterator i_begin, TIterator i_end)
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	6039      	str	r1, [r7, #0]
  {
    std::destroy(i_begin, i_end);
 8001722:	6839      	ldr	r1, [r7, #0]
 8001724:	6878      	ldr	r0, [r7, #4]
 8001726:	f000 f804 	bl	8001732 <_ZSt7destroyIP15Error_conditionEvT_S2_>
  }
 800172a:	bf00      	nop
 800172c:	3708      	adds	r7, #8
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}

08001732 <_ZSt7destroyIP15Error_conditionEvT_S2_>:
    }

#if __cplusplus >= 201703L
  template <typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    destroy(_ForwardIterator __first, _ForwardIterator __last)
 8001732:	b580      	push	{r7, lr}
 8001734:	b082      	sub	sp, #8
 8001736:	af00      	add	r7, sp, #0
 8001738:	6078      	str	r0, [r7, #4]
 800173a:	6039      	str	r1, [r7, #0]
    {
      std::_Destroy(__first, __last);
 800173c:	6839      	ldr	r1, [r7, #0]
 800173e:	6878      	ldr	r0, [r7, #4]
 8001740:	f000 f804 	bl	800174c <_ZSt8_DestroyIP15Error_conditionEvT_S2_>
    }
 8001744:	bf00      	nop
 8001746:	3708      	adds	r7, #8
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}

0800174c <_ZSt8_DestroyIP15Error_conditionEvT_S2_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 8001756:	f7ff fcc9 	bl	80010ec <_ZSt21is_constant_evaluatedv>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d004      	beq.n	800176a <_ZSt8_DestroyIP15Error_conditionEvT_S2_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 8001760:	6839      	ldr	r1, [r7, #0]
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	f000 f808 	bl	8001778 <_ZNSt12_Destroy_auxILb0EE9__destroyIP15Error_conditionEEvT_S4_>
 8001768:	e003      	b.n	8001772 <_ZSt8_DestroyIP15Error_conditionEvT_S2_+0x26>
	__destroy(__first, __last);
 800176a:	6839      	ldr	r1, [r7, #0]
 800176c:	6878      	ldr	r0, [r7, #4]
 800176e:	f000 f81b 	bl	80017a8 <_ZNSt12_Destroy_auxILb1EE9__destroyIP15Error_conditionEEvT_S4_>
    }
 8001772:	3708      	adds	r7, #8
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}

08001778 <_ZNSt12_Destroy_auxILb0EE9__destroyIP15Error_conditionEEvT_S4_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 8001782:	687a      	ldr	r2, [r7, #4]
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	429a      	cmp	r2, r3
 8001788:	d00a      	beq.n	80017a0 <_ZNSt12_Destroy_auxILb0EE9__destroyIP15Error_conditionEEvT_S4_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f000 f817 	bl	80017be <_ZSt11__addressofI15Error_conditionEPT_RS1_>
 8001790:	4603      	mov	r3, r0
 8001792:	4618      	mov	r0, r3
 8001794:	f000 f81e 	bl	80017d4 <_ZSt8_DestroyI15Error_conditionEvPT_>
	  for (; __first != __last; ++__first)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	3304      	adds	r3, #4
 800179c:	607b      	str	r3, [r7, #4]
 800179e:	e7f0      	b.n	8001782 <_ZNSt12_Destroy_auxILb0EE9__destroyIP15Error_conditionEEvT_S4_+0xa>
	}
 80017a0:	bf00      	nop
 80017a2:	3708      	adds	r7, #8
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}

080017a8 <_ZNSt12_Destroy_auxILb1EE9__destroyIP15Error_conditionEEvT_S4_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	6039      	str	r1, [r7, #0]
 80017b2:	bf00      	nop
 80017b4:	370c      	adds	r7, #12
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr

080017be <_ZSt11__addressofI15Error_conditionEPT_RS1_>:
   *  @brief Same as C++11 std::addressof
   *  @ingroup utilities
   */
  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR _Tp*
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80017be:	b480      	push	{r7}
 80017c0:	b083      	sub	sp, #12
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4618      	mov	r0, r3
 80017ca:	370c      	adds	r7, #12
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr

080017d4 <_ZSt8_DestroyI15Error_conditionEvPT_>:
    _Destroy(_Tp* __pointer)
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	f000 f804 	bl	80017ea <_ZSt10destroy_atI15Error_conditionEvPT_>
    }
 80017e2:	bf00      	nop
 80017e4:	3708      	adds	r7, #8
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}

080017ea <_ZSt10destroy_atI15Error_conditionEvPT_>:
    destroy_at(_Tp* __location)
 80017ea:	b480      	push	{r7}
 80017ec:	b083      	sub	sp, #12
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	6078      	str	r0, [r7, #4]
    }
 80017f2:	bf00      	nop
 80017f4:	370c      	adds	r7, #12
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
	...

08001800 <_Z41__static_initialization_and_destruction_0ii>:
}
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	6039      	str	r1, [r7, #0]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2b01      	cmp	r3, #1
 800180e:	f040 80af 	bne.w	8001970 <_Z41__static_initialization_and_destruction_0ii+0x170>
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001818:	4293      	cmp	r3, r2
 800181a:	f040 80a9 	bne.w	8001970 <_Z41__static_initialization_and_destruction_0ii+0x170>
};
 800181e:	4b57      	ldr	r3, [pc, #348]	; (800197c <_Z41__static_initialization_and_destruction_0ii+0x17c>)
 8001820:	2206      	movs	r2, #6
 8001822:	601a      	str	r2, [r3, #0]
 8001824:	f04f 0200 	mov.w	r2, #0
 8001828:	605a      	str	r2, [r3, #4]
 800182a:	4a55      	ldr	r2, [pc, #340]	; (8001980 <_Z41__static_initialization_and_destruction_0ii+0x180>)
 800182c:	609a      	str	r2, [r3, #8]
		{Error_condition::NEUTRAL_CURRENT_CAR,0,0.3,data.current.value,1200000,8}, //to check //acu_state 0 or 8?
 800182e:	4a55      	ldr	r2, [pc, #340]	; (8001984 <_Z41__static_initialization_and_destruction_0ii+0x184>)
 8001830:	f202 42e4 	addw	r2, r2, #1252	; 0x4e4
 8001834:	6812      	ldr	r2, [r2, #0]
};
 8001836:	60da      	str	r2, [r3, #12]
 8001838:	4a53      	ldr	r2, [pc, #332]	; (8001988 <_Z41__static_initialization_and_destruction_0ii+0x188>)
 800183a:	611a      	str	r2, [r3, #16]
 800183c:	2208      	movs	r2, #8
 800183e:	751a      	strb	r2, [r3, #20]
 8001840:	2200      	movs	r2, #0
 8001842:	619a      	str	r2, [r3, #24]
 8001844:	2200      	movs	r2, #0
 8001846:	771a      	strb	r2, [r3, #28]
 8001848:	3320      	adds	r3, #32
 800184a:	2200      	movs	r2, #0
 800184c:	601a      	str	r2, [r3, #0]
 800184e:	4a4f      	ldr	r2, [pc, #316]	; (800198c <_Z41__static_initialization_and_destruction_0ii+0x18c>)
 8001850:	605a      	str	r2, [r3, #4]
 8001852:	4a4f      	ldr	r2, [pc, #316]	; (8001990 <_Z41__static_initialization_and_destruction_0ii+0x190>)
 8001854:	609a      	str	r2, [r3, #8]
		{Error_condition::UNBALANCE,2000,50000,(float)(data.voltages.highest_cell_voltage-data.voltages.lowest_cell_voltage),500,2},
 8001856:	4a4b      	ldr	r2, [pc, #300]	; (8001984 <_Z41__static_initialization_and_destruction_0ii+0x184>)
 8001858:	8b92      	ldrh	r2, [r2, #28]
 800185a:	4611      	mov	r1, r2
 800185c:	4a49      	ldr	r2, [pc, #292]	; (8001984 <_Z41__static_initialization_and_destruction_0ii+0x184>)
 800185e:	8b52      	ldrh	r2, [r2, #26]
 8001860:	1a8a      	subs	r2, r1, r2
 8001862:	ee07 2a90 	vmov	s15, r2
 8001866:	eef8 7ae7 	vcvt.f32.s32	s15, s15
};
 800186a:	edc3 7a03 	vstr	s15, [r3, #12]
 800186e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001872:	611a      	str	r2, [r3, #16]
 8001874:	2202      	movs	r2, #2
 8001876:	751a      	strb	r2, [r3, #20]
 8001878:	2200      	movs	r2, #0
 800187a:	619a      	str	r2, [r3, #24]
 800187c:	2200      	movs	r2, #0
 800187e:	771a      	strb	r2, [r3, #28]
 8001880:	3320      	adds	r3, #32
 8001882:	2203      	movs	r2, #3
 8001884:	601a      	str	r2, [r3, #0]
 8001886:	4a43      	ldr	r2, [pc, #268]	; (8001994 <_Z41__static_initialization_and_destruction_0ii+0x194>)
 8001888:	605a      	str	r2, [r3, #4]
 800188a:	4a43      	ldr	r2, [pc, #268]	; (8001998 <_Z41__static_initialization_and_destruction_0ii+0x198>)
 800188c:	609a      	str	r2, [r3, #8]
		{Error_condition::TEMPERATURE_WARNING,48,55,(float)data.temperatures.highest_temperature,1000,3},
 800188e:	4a3d      	ldr	r2, [pc, #244]	; (8001984 <_Z41__static_initialization_and_destruction_0ii+0x184>)
 8001890:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
 8001894:	ee07 2a90 	vmov	s15, r2
 8001898:	eef8 7a67 	vcvt.f32.u32	s15, s15
};
 800189c:	edc3 7a03 	vstr	s15, [r3, #12]
 80018a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80018a4:	611a      	str	r2, [r3, #16]
 80018a6:	2203      	movs	r2, #3
 80018a8:	751a      	strb	r2, [r3, #20]
 80018aa:	2200      	movs	r2, #0
 80018ac:	619a      	str	r2, [r3, #24]
 80018ae:	2200      	movs	r2, #0
 80018b0:	771a      	strb	r2, [r3, #28]
 80018b2:	3320      	adds	r3, #32
 80018b4:	2201      	movs	r2, #1
 80018b6:	601a      	str	r2, [r3, #0]
 80018b8:	f04f 0200 	mov.w	r2, #0
 80018bc:	605a      	str	r2, [r3, #4]
 80018be:	4a37      	ldr	r2, [pc, #220]	; (800199c <_Z41__static_initialization_and_destruction_0ii+0x19c>)
 80018c0:	609a      	str	r2, [r3, #8]
		{Error_condition::VOLTAGE_LOW,0,30000,(float)data.voltages.lowest_cell_voltage,500,4},
 80018c2:	4a30      	ldr	r2, [pc, #192]	; (8001984 <_Z41__static_initialization_and_destruction_0ii+0x184>)
 80018c4:	8b52      	ldrh	r2, [r2, #26]
 80018c6:	ee07 2a90 	vmov	s15, r2
 80018ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
};
 80018ce:	edc3 7a03 	vstr	s15, [r3, #12]
 80018d2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80018d6:	611a      	str	r2, [r3, #16]
 80018d8:	2204      	movs	r2, #4
 80018da:	751a      	strb	r2, [r3, #20]
 80018dc:	2200      	movs	r2, #0
 80018de:	619a      	str	r2, [r3, #24]
 80018e0:	2200      	movs	r2, #0
 80018e2:	771a      	strb	r2, [r3, #28]
 80018e4:	3320      	adds	r3, #32
 80018e6:	2202      	movs	r2, #2
 80018e8:	601a      	str	r2, [r3, #0]
 80018ea:	4a2d      	ldr	r2, [pc, #180]	; (80019a0 <_Z41__static_initialization_and_destruction_0ii+0x1a0>)
 80018ec:	605a      	str	r2, [r3, #4]
 80018ee:	4a2d      	ldr	r2, [pc, #180]	; (80019a4 <_Z41__static_initialization_and_destruction_0ii+0x1a4>)
 80018f0:	609a      	str	r2, [r3, #8]
		{Error_condition::VOLTAGE_HIGH,42200,500000,(float)data.voltages.highest_cell_voltage,500,5},
 80018f2:	4a24      	ldr	r2, [pc, #144]	; (8001984 <_Z41__static_initialization_and_destruction_0ii+0x184>)
 80018f4:	8b92      	ldrh	r2, [r2, #28]
 80018f6:	ee07 2a90 	vmov	s15, r2
 80018fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
};
 80018fe:	edc3 7a03 	vstr	s15, [r3, #12]
 8001902:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001906:	611a      	str	r2, [r3, #16]
 8001908:	2205      	movs	r2, #5
 800190a:	751a      	strb	r2, [r3, #20]
 800190c:	2200      	movs	r2, #0
 800190e:	619a      	str	r2, [r3, #24]
 8001910:	2200      	movs	r2, #0
 8001912:	771a      	strb	r2, [r3, #28]
 8001914:	3320      	adds	r3, #32
 8001916:	2204      	movs	r2, #4
 8001918:	601a      	str	r2, [r3, #0]
 800191a:	4a1f      	ldr	r2, [pc, #124]	; (8001998 <_Z41__static_initialization_and_destruction_0ii+0x198>)
 800191c:	605a      	str	r2, [r3, #4]
 800191e:	4a22      	ldr	r2, [pc, #136]	; (80019a8 <_Z41__static_initialization_and_destruction_0ii+0x1a8>)
 8001920:	609a      	str	r2, [r3, #8]
		{Error_condition::TEMPERATURE_HIGH,55,120,(float)data.temperatures.highest_temperature,500,6},
 8001922:	4a18      	ldr	r2, [pc, #96]	; (8001984 <_Z41__static_initialization_and_destruction_0ii+0x184>)
 8001924:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
 8001928:	ee07 2a90 	vmov	s15, r2
 800192c:	eef8 7a67 	vcvt.f32.u32	s15, s15
};
 8001930:	edc3 7a03 	vstr	s15, [r3, #12]
 8001934:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001938:	611a      	str	r2, [r3, #16]
 800193a:	2206      	movs	r2, #6
 800193c:	751a      	strb	r2, [r3, #20]
 800193e:	2200      	movs	r2, #0
 8001940:	619a      	str	r2, [r3, #24]
 8001942:	2200      	movs	r2, #0
 8001944:	771a      	strb	r2, [r3, #28]
 8001946:	3320      	adds	r3, #32
 8001948:	2205      	movs	r2, #5
 800194a:	601a      	str	r2, [r3, #0]
 800194c:	4a17      	ldr	r2, [pc, #92]	; (80019ac <_Z41__static_initialization_and_destruction_0ii+0x1ac>)
 800194e:	605a      	str	r2, [r3, #4]
 8001950:	4a17      	ldr	r2, [pc, #92]	; (80019b0 <_Z41__static_initialization_and_destruction_0ii+0x1b0>)
 8001952:	609a      	str	r2, [r3, #8]
		{Error_condition::CURRENT_HIGH,20,100,data.current.value,500,7}
 8001954:	4a0b      	ldr	r2, [pc, #44]	; (8001984 <_Z41__static_initialization_and_destruction_0ii+0x184>)
 8001956:	f202 42e4 	addw	r2, r2, #1252	; 0x4e4
 800195a:	6812      	ldr	r2, [r2, #0]
};
 800195c:	60da      	str	r2, [r3, #12]
 800195e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001962:	611a      	str	r2, [r3, #16]
 8001964:	2207      	movs	r2, #7
 8001966:	751a      	strb	r2, [r3, #20]
 8001968:	2200      	movs	r2, #0
 800196a:	619a      	str	r2, [r3, #24]
 800196c:	2200      	movs	r2, #0
 800196e:	771a      	strb	r2, [r3, #28]
}
 8001970:	bf00      	nop
 8001972:	370c      	adds	r7, #12
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr
 800197c:	20000504 	.word	0x20000504
 8001980:	3e99999a 	.word	0x3e99999a
 8001984:	200005ec 	.word	0x200005ec
 8001988:	00124f80 	.word	0x00124f80
 800198c:	44fa0000 	.word	0x44fa0000
 8001990:	47435000 	.word	0x47435000
 8001994:	42400000 	.word	0x42400000
 8001998:	425c0000 	.word	0x425c0000
 800199c:	46ea6000 	.word	0x46ea6000
 80019a0:	4724d800 	.word	0x4724d800
 80019a4:	48f42400 	.word	0x48f42400
 80019a8:	42f00000 	.word	0x42f00000
 80019ac:	41a00000 	.word	0x41a00000
 80019b0:	42c80000 	.word	0x42c80000

080019b4 <_ZN8PUTM_CAN6DeviceI14Telemetry_MainE8set_dataERKNS_14Can_rx_messageE>:
  explicit constexpr Device(uint32_t ide)
      : Device_base(ide, sizeof(Device_data_type)){};

  Device_data_type data{};

  void set_data(const Can_rx_message &m) override {
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	6039      	str	r1, [r7, #0]
    new_data = true;
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	7993      	ldrb	r3, [r2, #6]
 80019c2:	f043 0301 	orr.w	r3, r3, #1
 80019c6:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	3307      	adds	r3, #7
 80019cc:	683a      	ldr	r2, [r7, #0]
 80019ce:	321c      	adds	r2, #28
 80019d0:	7812      	ldrb	r2, [r2, #0]
 80019d2:	701a      	strb	r2, [r3, #0]
  }
 80019d4:	bf00      	nop
 80019d6:	370c      	adds	r7, #12
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr

080019e0 <_ZN8PUTM_CAN6DeviceI18TS_rear_suspensionE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
 80019e8:	6039      	str	r1, [r7, #0]
    new_data = true;
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	7993      	ldrb	r3, [r2, #6]
 80019ee:	f043 0301 	orr.w	r3, r3, #1
 80019f2:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	1dd8      	adds	r0, r3, #7
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	331c      	adds	r3, #28
 80019fc:	2208      	movs	r2, #8
 80019fe:	4619      	mov	r1, r3
 8001a00:	f010 fbf6 	bl	80121f0 <memcpy>
  }
 8001a04:	bf00      	nop
 8001a06:	3708      	adds	r7, #8
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}

08001a0c <_ZN8PUTM_CAN6DeviceI7TS_mainE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
 8001a14:	6039      	str	r1, [r7, #0]
    new_data = true;
 8001a16:	687a      	ldr	r2, [r7, #4]
 8001a18:	7993      	ldrb	r3, [r2, #6]
 8001a1a:	f043 0301 	orr.w	r3, r3, #1
 8001a1e:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	1dd8      	adds	r0, r3, #7
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	331c      	adds	r3, #28
 8001a28:	2208      	movs	r2, #8
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	f010 fbe0 	bl	80121f0 <memcpy>
  }
 8001a30:	bf00      	nop
 8001a32:	3708      	adds	r7, #8
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}

08001a38 <_ZN8PUTM_CAN6DeviceI20Steering_Wheel_eventE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	6039      	str	r1, [r7, #0]
    new_data = true;
 8001a42:	687a      	ldr	r2, [r7, #4]
 8001a44:	7993      	ldrb	r3, [r2, #6]
 8001a46:	f043 0301 	orr.w	r3, r3, #1
 8001a4a:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	1dd8      	adds	r0, r3, #7
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	331c      	adds	r3, #28
 8001a54:	2203      	movs	r2, #3
 8001a56:	4619      	mov	r1, r3
 8001a58:	f010 fbca 	bl	80121f0 <memcpy>
  }
 8001a5c:	bf00      	nop
 8001a5e:	3708      	adds	r7, #8
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}

08001a64 <_ZN8PUTM_CAN6DeviceI19Steering_Wheel_mainE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	6039      	str	r1, [r7, #0]
    new_data = true;
 8001a6e:	687a      	ldr	r2, [r7, #4]
 8001a70:	7993      	ldrb	r3, [r2, #6]
 8001a72:	f043 0301 	orr.w	r3, r3, #1
 8001a76:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	1dd8      	adds	r0, r3, #7
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	331c      	adds	r3, #28
 8001a80:	2203      	movs	r2, #3
 8001a82:	4619      	mov	r1, r3
 8001a84:	f010 fbb4 	bl	80121f0 <memcpy>
  }
 8001a88:	bf00      	nop
 8001a8a:	3708      	adds	r7, #8
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}

08001a90 <_ZN8PUTM_CAN6DeviceI7SF_NUCSE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	6039      	str	r1, [r7, #0]
    new_data = true;
 8001a9a:	687a      	ldr	r2, [r7, #4]
 8001a9c:	7993      	ldrb	r3, [r2, #6]
 8001a9e:	f043 0301 	orr.w	r3, r3, #1
 8001aa2:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	3307      	adds	r3, #7
 8001aa8:	683a      	ldr	r2, [r7, #0]
 8001aaa:	321c      	adds	r2, #28
 8001aac:	6812      	ldr	r2, [r2, #0]
 8001aae:	601a      	str	r2, [r3, #0]
  }
 8001ab0:	bf00      	nop
 8001ab2:	370c      	adds	r7, #12
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr

08001abc <_ZN8PUTM_CAN6DeviceI5SF_WSE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
 8001ac4:	6039      	str	r1, [r7, #0]
    new_data = true;
 8001ac6:	687a      	ldr	r2, [r7, #4]
 8001ac8:	7993      	ldrb	r3, [r2, #6]
 8001aca:	f043 0301 	orr.w	r3, r3, #1
 8001ace:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	1dd8      	adds	r0, r3, #7
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	331c      	adds	r3, #28
 8001ad8:	2208      	movs	r2, #8
 8001ada:	4619      	mov	r1, r3
 8001adc:	f010 fb88 	bl	80121f0 <memcpy>
  }
 8001ae0:	bf00      	nop
 8001ae2:	3708      	adds	r7, #8
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}

08001ae8 <_ZN8PUTM_CAN6DeviceI5SF_DVE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	6039      	str	r1, [r7, #0]
    new_data = true;
 8001af2:	687a      	ldr	r2, [r7, #4]
 8001af4:	7993      	ldrb	r3, [r2, #6]
 8001af6:	f043 0301 	orr.w	r3, r3, #1
 8001afa:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	1dd8      	adds	r0, r3, #7
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	331c      	adds	r3, #28
 8001b04:	2208      	movs	r2, #8
 8001b06:	4619      	mov	r1, r3
 8001b08:	f010 fb72 	bl	80121f0 <memcpy>
  }
 8001b0c:	bf00      	nop
 8001b0e:	3708      	adds	r7, #8
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}

08001b14 <_ZN8PUTM_CAN6DeviceI20SF_CoolingAndVSafetyE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
 8001b1c:	6039      	str	r1, [r7, #0]
    new_data = true;
 8001b1e:	687a      	ldr	r2, [r7, #4]
 8001b20:	7993      	ldrb	r3, [r2, #6]
 8001b22:	f043 0301 	orr.w	r3, r3, #1
 8001b26:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	1dd8      	adds	r0, r3, #7
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	331c      	adds	r3, #28
 8001b30:	2208      	movs	r2, #8
 8001b32:	4619      	mov	r1, r3
 8001b34:	f010 fb5c 	bl	80121f0 <memcpy>
  }
 8001b38:	bf00      	nop
 8001b3a:	3708      	adds	r7, #8
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}

08001b40 <_ZN8PUTM_CAN6DeviceI11SF_FrontBoxE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	6039      	str	r1, [r7, #0]
    new_data = true;
 8001b4a:	687a      	ldr	r2, [r7, #4]
 8001b4c:	7993      	ldrb	r3, [r2, #6]
 8001b4e:	f043 0301 	orr.w	r3, r3, #1
 8001b52:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	1dd8      	adds	r0, r3, #7
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	331c      	adds	r3, #28
 8001b5c:	2208      	movs	r2, #8
 8001b5e:	4619      	mov	r1, r3
 8001b60:	f010 fb46 	bl	80121f0 <memcpy>
  }
 8001b64:	bf00      	nop
 8001b66:	3708      	adds	r7, #8
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}

08001b6c <_ZN8PUTM_CAN6DeviceI7SF_mainE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	6039      	str	r1, [r7, #0]
    new_data = true;
 8001b76:	687a      	ldr	r2, [r7, #4]
 8001b78:	7993      	ldrb	r3, [r2, #6]
 8001b7a:	f043 0301 	orr.w	r3, r3, #1
 8001b7e:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	1dd8      	adds	r0, r3, #7
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	331c      	adds	r3, #28
 8001b88:	2203      	movs	r2, #3
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	f010 fb30 	bl	80121f0 <memcpy>
  }
 8001b90:	bf00      	nop
 8001b92:	3708      	adds	r7, #8
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}

08001b98 <_ZN8PUTM_CAN6DeviceI14Lap_timer_PassE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	6039      	str	r1, [r7, #0]
    new_data = true;
 8001ba2:	687a      	ldr	r2, [r7, #4]
 8001ba4:	7993      	ldrb	r3, [r2, #6]
 8001ba6:	f043 0301 	orr.w	r3, r3, #1
 8001baa:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	3307      	adds	r3, #7
 8001bb0:	683a      	ldr	r2, [r7, #0]
 8001bb2:	321c      	adds	r2, #28
 8001bb4:	8812      	ldrh	r2, [r2, #0]
 8001bb6:	b292      	uxth	r2, r2
 8001bb8:	801a      	strh	r2, [r3, #0]
  }
 8001bba:	bf00      	nop
 8001bbc:	370c      	adds	r7, #12
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr

08001bc6 <_ZN8PUTM_CAN6DeviceI14Lap_timer_MainE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8001bc6:	b480      	push	{r7}
 8001bc8:	b083      	sub	sp, #12
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	6078      	str	r0, [r7, #4]
 8001bce:	6039      	str	r1, [r7, #0]
    new_data = true;
 8001bd0:	687a      	ldr	r2, [r7, #4]
 8001bd2:	7993      	ldrb	r3, [r2, #6]
 8001bd4:	f043 0301 	orr.w	r3, r3, #1
 8001bd8:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	3307      	adds	r3, #7
 8001bde:	683a      	ldr	r2, [r7, #0]
 8001be0:	321c      	adds	r2, #28
 8001be2:	7812      	ldrb	r2, [r2, #0]
 8001be4:	701a      	strb	r2, [r3, #0]
  }
 8001be6:	bf00      	nop
 8001be8:	370c      	adds	r7, #12
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr

08001bf2 <_ZN8PUTM_CAN6DeviceI17Dash_lap_finishedE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8001bf2:	b480      	push	{r7}
 8001bf4:	b083      	sub	sp, #12
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
 8001bfa:	6039      	str	r1, [r7, #0]
    new_data = true;
 8001bfc:	687a      	ldr	r2, [r7, #4]
 8001bfe:	7993      	ldrb	r3, [r2, #6]
 8001c00:	f043 0301 	orr.w	r3, r3, #1
 8001c04:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	3307      	adds	r3, #7
 8001c0a:	683a      	ldr	r2, [r7, #0]
 8001c0c:	321c      	adds	r2, #28
 8001c0e:	6812      	ldr	r2, [r2, #0]
 8001c10:	601a      	str	r2, [r3, #0]
  }
 8001c12:	bf00      	nop
 8001c14:	370c      	adds	r7, #12
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr

08001c1e <_ZN8PUTM_CAN6DeviceI27Dash_steering_wheel_requestE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8001c1e:	b480      	push	{r7}
 8001c20:	b083      	sub	sp, #12
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	6078      	str	r0, [r7, #4]
 8001c26:	6039      	str	r1, [r7, #0]
    new_data = true;
 8001c28:	687a      	ldr	r2, [r7, #4]
 8001c2a:	7993      	ldrb	r3, [r2, #6]
 8001c2c:	f043 0301 	orr.w	r3, r3, #1
 8001c30:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	3307      	adds	r3, #7
 8001c36:	683a      	ldr	r2, [r7, #0]
 8001c38:	321c      	adds	r2, #28
 8001c3a:	7812      	ldrb	r2, [r2, #0]
 8001c3c:	701a      	strb	r2, [r3, #0]
  }
 8001c3e:	bf00      	nop
 8001c40:	370c      	adds	r7, #12
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr

08001c4a <_ZN8PUTM_CAN6DeviceI26Dash_Smart_Fuses_FAN_speedE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8001c4a:	b480      	push	{r7}
 8001c4c:	b083      	sub	sp, #12
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	6078      	str	r0, [r7, #4]
 8001c52:	6039      	str	r1, [r7, #0]
    new_data = true;
 8001c54:	687a      	ldr	r2, [r7, #4]
 8001c56:	7993      	ldrb	r3, [r2, #6]
 8001c58:	f043 0301 	orr.w	r3, r3, #1
 8001c5c:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	3307      	adds	r3, #7
 8001c62:	683a      	ldr	r2, [r7, #0]
 8001c64:	321c      	adds	r2, #28
 8001c66:	8812      	ldrh	r2, [r2, #0]
 8001c68:	b292      	uxth	r2, r2
 8001c6a:	801a      	strh	r2, [r3, #0]
  }
 8001c6c:	bf00      	nop
 8001c6e:	370c      	adds	r7, #12
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr

08001c78 <_ZN8PUTM_CAN6DeviceI8Dash_TCSE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
 8001c80:	6039      	str	r1, [r7, #0]
    new_data = true;
 8001c82:	687a      	ldr	r2, [r7, #4]
 8001c84:	7993      	ldrb	r3, [r2, #6]
 8001c86:	f043 0301 	orr.w	r3, r3, #1
 8001c8a:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	1dd8      	adds	r0, r3, #7
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	331c      	adds	r3, #28
 8001c94:	2208      	movs	r2, #8
 8001c96:	4619      	mov	r1, r3
 8001c98:	f010 faaa 	bl	80121f0 <memcpy>
  }
 8001c9c:	bf00      	nop
 8001c9e:	3708      	adds	r7, #8
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}

08001ca4 <_ZN8PUTM_CAN6DeviceI9Dash_MainE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	6039      	str	r1, [r7, #0]
    new_data = true;
 8001cae:	687a      	ldr	r2, [r7, #4]
 8001cb0:	7993      	ldrb	r3, [r2, #6]
 8001cb2:	f043 0301 	orr.w	r3, r3, #1
 8001cb6:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	3307      	adds	r3, #7
 8001cbc:	683a      	ldr	r2, [r7, #0]
 8001cbe:	321c      	adds	r2, #28
 8001cc0:	7812      	ldrb	r2, [r2, #0]
 8001cc2:	701a      	strb	r2, [r3, #0]
  }
 8001cc4:	bf00      	nop
 8001cc6:	370c      	adds	r7, #12
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr

08001cd0 <_ZN8PUTM_CAN6DeviceI18BMS_LV_temperatureE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
 8001cd8:	6039      	str	r1, [r7, #0]
    new_data = true;
 8001cda:	687a      	ldr	r2, [r7, #4]
 8001cdc:	7993      	ldrb	r3, [r2, #6]
 8001cde:	f043 0301 	orr.w	r3, r3, #1
 8001ce2:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	1dd8      	adds	r0, r3, #7
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	331c      	adds	r3, #28
 8001cec:	2208      	movs	r2, #8
 8001cee:	4619      	mov	r1, r3
 8001cf0:	f010 fa7e 	bl	80121f0 <memcpy>
  }
 8001cf4:	bf00      	nop
 8001cf6:	3708      	adds	r7, #8
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}

08001cfc <_ZN8PUTM_CAN6DeviceI11BMS_LV_mainE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	6039      	str	r1, [r7, #0]
    new_data = true;
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	7993      	ldrb	r3, [r2, #6]
 8001d0a:	f043 0301 	orr.w	r3, r3, #1
 8001d0e:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	1dd8      	adds	r0, r3, #7
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	331c      	adds	r3, #28
 8001d18:	2206      	movs	r2, #6
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	f010 fa68 	bl	80121f0 <memcpy>
  }
 8001d20:	bf00      	nop
 8001d22:	3708      	adds	r7, #8
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}

08001d28 <_ZN8PUTM_CAN6DeviceI11BMS_HV_mainE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	6039      	str	r1, [r7, #0]
    new_data = true;
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	7993      	ldrb	r3, [r2, #6]
 8001d36:	f043 0301 	orr.w	r3, r3, #1
 8001d3a:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	1dd8      	adds	r0, r3, #7
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	331c      	adds	r3, #28
 8001d44:	2207      	movs	r2, #7
 8001d46:	4619      	mov	r1, r3
 8001d48:	f010 fa52 	bl	80121f0 <memcpy>
  }
 8001d4c:	bf00      	nop
 8001d4e:	3708      	adds	r7, #8
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <_ZN8PUTM_CAN6DeviceI7AQ_mainE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	6039      	str	r1, [r7, #0]
    new_data = true;
 8001d5e:	687a      	ldr	r2, [r7, #4]
 8001d60:	7993      	ldrb	r3, [r2, #6]
 8001d62:	f043 0301 	orr.w	r3, r3, #1
 8001d66:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	1dd8      	adds	r0, r3, #7
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	331c      	adds	r3, #28
 8001d70:	2206      	movs	r2, #6
 8001d72:	4619      	mov	r1, r3
 8001d74:	f010 fa3c 	bl	80121f0 <memcpy>
  }
 8001d78:	bf00      	nop
 8001d7a:	3708      	adds	r7, #8
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}

08001d80 <_ZN8PUTM_CAN6DeviceI9Apps_mainE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	6039      	str	r1, [r7, #0]
    new_data = true;
 8001d8a:	687a      	ldr	r2, [r7, #4]
 8001d8c:	7993      	ldrb	r3, [r2, #6]
 8001d8e:	f043 0301 	orr.w	r3, r3, #1
 8001d92:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	1dd8      	adds	r0, r3, #7
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	331c      	adds	r3, #28
 8001d9c:	2205      	movs	r2, #5
 8001d9e:	4619      	mov	r1, r3
 8001da0:	f010 fa26 	bl	80121f0 <memcpy>
  }
 8001da4:	bf00      	nop
 8001da6:	3708      	adds	r7, #8
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}

08001dac <_GLOBAL__sub_I__ZN8PUTM_CAN3canE>:
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001db4:	2001      	movs	r0, #1
 8001db6:	f7ff fd23 	bl	8001800 <_Z41__static_initialization_and_destruction_0ii>
 8001dba:	bd80      	pop	{r7, pc}

08001dbc <_ZN22Battery_characteristicC1Ev>:
    Vttc2
};

float horner(const float *arry,unsigned int n, const float *x);

struct Battery_characteristic{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	601a      	str	r2, [r3, #0]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2201      	movs	r2, #1
 8001dce:	605a      	str	r2, [r3, #4]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	370c      	adds	r7, #12
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr

08001dde <_ZN7SoC_EKFC1Ev>:
    float _Q_matrix[3];
    float _State_vector[3];
    

public:
    SoC_EKF() = default;
 8001dde:	b580      	push	{r7, lr}
 8001de0:	b082      	sub	sp, #8
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	6078      	str	r0, [r7, #4]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4618      	mov	r0, r3
 8001dea:	f7ff ffe7 	bl	8001dbc <_ZN22Battery_characteristicC1Ev>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4618      	mov	r0, r3
 8001df2:	3708      	adds	r7, #8
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}

08001df8 <_ZN15State_of_ChargeC1Ev>:
	float value_max;
	float value_min;

};

struct State_of_Charge{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	4618      	mov	r0, r3
 8001e04:	f7ff ffeb 	bl	8001dde <_ZN7SoC_EKFC1Ev>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3708      	adds	r7, #8
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}

08001e12 <_ZN4DataC1Ev>:
	bool charging_state;
	bool discharge_activation;
	uint32_t discharge_tick_end;
};

struct Data{
 8001e12:	b580      	push	{r7, lr}
 8001e14:	b082      	sub	sp, #8
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	6078      	str	r0, [r7, #4]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	f503 639e 	add.w	r3, r3, #1264	; 0x4f0
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7ff ffe9 	bl	8001df8 <_ZN15State_of_ChargeC1Ev>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3708      	adds	r7, #8
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}

08001e30 <_Z41__static_initialization_and_destruction_0ii>:
 *  Created on: May 22, 2022
 *      Author: Maks
 */
#include <global_variables.hpp>

Data data;
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	6039      	str	r1, [r7, #0]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d107      	bne.n	8001e50 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d102      	bne.n	8001e50 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8001e4a:	4803      	ldr	r0, [pc, #12]	; (8001e58 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8001e4c:	f7ff ffe1 	bl	8001e12 <_ZN4DataC1Ev>
 8001e50:	bf00      	nop
 8001e52:	3708      	adds	r7, #8
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	200005ec 	.word	0x200005ec

08001e5c <_GLOBAL__sub_I_data>:
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001e64:	2001      	movs	r0, #1
 8001e66:	f7ff ffe3 	bl	8001e30 <_Z41__static_initialization_and_destruction_0ii>
 8001e6a:	bd80      	pop	{r7, pc}

08001e6c <_Z16init_PEC15_Tablev>:
uint16_t pec15Table[256];
uint16_t CRC15_POLY = 0x4599;
uint8_t ltcConfig[6] = {0xFC, (uint8_t)(1874 & 0xff), (uint8_t)((1874>>4)|(2625<<4)), (uint8_t)(2625>>4), 0, 0};

void init_PEC15_Table()
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b085      	sub	sp, #20
 8001e70:	af00      	add	r7, sp, #0
	uint16_t remainder;
	for (int i = 0; i < 256; i++)
 8001e72:	2300      	movs	r3, #0
 8001e74:	60bb      	str	r3, [r7, #8]
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	2bff      	cmp	r3, #255	; 0xff
 8001e7a:	dc26      	bgt.n	8001eca <_Z16init_PEC15_Tablev+0x5e>
	{
		remainder = i << 7;
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	b29b      	uxth	r3, r3
 8001e80:	01db      	lsls	r3, r3, #7
 8001e82:	81fb      	strh	r3, [r7, #14]
		for (int bit = 8; bit > 0; --bit)
 8001e84:	2308      	movs	r3, #8
 8001e86:	607b      	str	r3, [r7, #4]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	dd14      	ble.n	8001eb8 <_Z16init_PEC15_Tablev+0x4c>
		{
			if (remainder & 0x4000)
 8001e8e:	89fb      	ldrh	r3, [r7, #14]
 8001e90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d008      	beq.n	8001eaa <_Z16init_PEC15_Tablev+0x3e>
			{
				remainder = ((remainder << 1));
 8001e98:	89fb      	ldrh	r3, [r7, #14]
 8001e9a:	005b      	lsls	r3, r3, #1
 8001e9c:	81fb      	strh	r3, [r7, #14]
				remainder = (remainder ^ CRC15_POLY);
 8001e9e:	4b0e      	ldr	r3, [pc, #56]	; (8001ed8 <_Z16init_PEC15_Tablev+0x6c>)
 8001ea0:	881a      	ldrh	r2, [r3, #0]
 8001ea2:	89fb      	ldrh	r3, [r7, #14]
 8001ea4:	4053      	eors	r3, r2
 8001ea6:	81fb      	strh	r3, [r7, #14]
 8001ea8:	e002      	b.n	8001eb0 <_Z16init_PEC15_Tablev+0x44>
			}
			else
			{
				remainder = ((remainder << 1));
 8001eaa:	89fb      	ldrh	r3, [r7, #14]
 8001eac:	005b      	lsls	r3, r3, #1
 8001eae:	81fb      	strh	r3, [r7, #14]
		for (int bit = 8; bit > 0; --bit)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	3b01      	subs	r3, #1
 8001eb4:	607b      	str	r3, [r7, #4]
 8001eb6:	e7e7      	b.n	8001e88 <_Z16init_PEC15_Tablev+0x1c>
			}
		}
		pec15Table[i] = remainder&0xFFFF;
 8001eb8:	4908      	ldr	r1, [pc, #32]	; (8001edc <_Z16init_PEC15_Tablev+0x70>)
 8001eba:	68bb      	ldr	r3, [r7, #8]
 8001ebc:	89fa      	ldrh	r2, [r7, #14]
 8001ebe:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for (int i = 0; i < 256; i++)
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	3301      	adds	r3, #1
 8001ec6:	60bb      	str	r3, [r7, #8]
 8001ec8:	e7d5      	b.n	8001e76 <_Z16init_PEC15_Tablev+0xa>
	}
}
 8001eca:	bf00      	nop
 8001ecc:	3714      	adds	r7, #20
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
 8001ed6:	bf00      	nop
 8001ed8:	20000170 	.word	0x20000170
 8001edc:	20000bac 	.word	0x20000bac

08001ee0 <_Z5pec15Pci>:

uint16_t pec15(char *data , int len)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b087      	sub	sp, #28
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
 8001ee8:	6039      	str	r1, [r7, #0]
	uint16_t remainder,address;
	remainder = 16;//PEC seed
 8001eea:	2310      	movs	r3, #16
 8001eec:	82fb      	strh	r3, [r7, #22]
	for (int i = 0; i < len; i++)
 8001eee:	2300      	movs	r3, #0
 8001ef0:	613b      	str	r3, [r7, #16]
 8001ef2:	693a      	ldr	r2, [r7, #16]
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	da1a      	bge.n	8001f30 <_Z5pec15Pci+0x50>
	{
		address = ((remainder >> 7) ^ data[i]) & 0xff;//calculate PEC table address
 8001efa:	8afb      	ldrh	r3, [r7, #22]
 8001efc:	09db      	lsrs	r3, r3, #7
 8001efe:	b29a      	uxth	r2, r3
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	6879      	ldr	r1, [r7, #4]
 8001f04:	440b      	add	r3, r1
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	b29b      	uxth	r3, r3
 8001f0a:	4053      	eors	r3, r2
 8001f0c:	b29b      	uxth	r3, r3
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	81fb      	strh	r3, [r7, #14]
		remainder = (remainder << 8 ) ^ pec15Table[address];
 8001f12:	8afb      	ldrh	r3, [r7, #22]
 8001f14:	021b      	lsls	r3, r3, #8
 8001f16:	b21a      	sxth	r2, r3
 8001f18:	89fb      	ldrh	r3, [r7, #14]
 8001f1a:	490a      	ldr	r1, [pc, #40]	; (8001f44 <_Z5pec15Pci+0x64>)
 8001f1c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001f20:	b21b      	sxth	r3, r3
 8001f22:	4053      	eors	r3, r2
 8001f24:	b21b      	sxth	r3, r3
 8001f26:	82fb      	strh	r3, [r7, #22]
	for (int i = 0; i < len; i++)
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	3301      	adds	r3, #1
 8001f2c:	613b      	str	r3, [r7, #16]
 8001f2e:	e7e0      	b.n	8001ef2 <_Z5pec15Pci+0x12>
	}
	return (remainder*2);//The CRC15 has a 0 in the LSB so the final value must be multiplied by 2
 8001f30:	8afb      	ldrh	r3, [r7, #22]
 8001f32:	005b      	lsls	r3, r3, #1
 8001f34:	b29b      	uxth	r3, r3
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	371c      	adds	r7, #28
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop
 8001f44:	20000bac 	.word	0x20000bac

08001f48 <_Z11LTC_wake_upv>:
 * Brief:	Send wakeup for LTC, BLOCKING MODE
 * Param:	None
 * Retval:	None
 */
void LTC_wake_up()
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
	uint8_t tab[2] = {0xFF};
 8001f4e:	23ff      	movs	r3, #255	; 0xff
 8001f50:	80bb      	strh	r3, [r7, #4]

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8001f52:	2200      	movs	r2, #0
 8001f54:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f5c:	f004 fffc 	bl	8006f58 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, tab, 2, 1);
 8001f60:	1d39      	adds	r1, r7, #4
 8001f62:	2301      	movs	r3, #1
 8001f64:	2202      	movs	r2, #2
 8001f66:	4807      	ldr	r0, [pc, #28]	; (8001f84 <_Z11LTC_wake_upv+0x3c>)
 8001f68:	f008 facb 	bl	800a502 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f76:	f004 ffef 	bl	8006f58 <HAL_GPIO_WritePin>
}
 8001f7a:	bf00      	nop
 8001f7c:	3708      	adds	r7, #8
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	20000f98 	.word	0x20000f98

08001f88 <_Z18LTC_start_cell_adcv>:
 * Brief:	Send adc config for ltc and start conversion, BLOCKING MODE
 * Param:	None
 * Retval:	None
 */
void LTC_start_cell_adc()
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b084      	sub	sp, #16
 8001f8c:	af00      	add	r7, sp, #0
	uint8_t tab[12];
	uint16_t pec;

	uint16_t cmd = (1<<15) | 0x01;
 8001f8e:	f248 0301 	movw	r3, #32769	; 0x8001
 8001f92:	81fb      	strh	r3, [r7, #14]
	// configuration
	tab[0] = (cmd>>8);
 8001f94:	89fb      	ldrh	r3, [r7, #14]
 8001f96:	0a1b      	lsrs	r3, r3, #8
 8001f98:	b29b      	uxth	r3, r3
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	703b      	strb	r3, [r7, #0]
	tab[1] = cmd;
 8001f9e:	89fb      	ldrh	r3, [r7, #14]
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	707b      	strb	r3, [r7, #1]
	pec = pec15((char*)tab, 2);
 8001fa4:	463b      	mov	r3, r7
 8001fa6:	2102      	movs	r1, #2
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7ff ff99 	bl	8001ee0 <_Z5pec15Pci>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	81bb      	strh	r3, [r7, #12]
	tab[2] = pec >> 8;
 8001fb2:	89bb      	ldrh	r3, [r7, #12]
 8001fb4:	0a1b      	lsrs	r3, r3, #8
 8001fb6:	b29b      	uxth	r3, r3
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	70bb      	strb	r3, [r7, #2]
	tab[3] = pec;
 8001fbc:	89bb      	ldrh	r3, [r7, #12]
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	70fb      	strb	r3, [r7, #3]

	tab[4] = ltcConfig[0];
 8001fc2:	4b38      	ldr	r3, [pc, #224]	; (80020a4 <_Z18LTC_start_cell_adcv+0x11c>)
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	713b      	strb	r3, [r7, #4]
	tab[5] = ltcConfig[1];
 8001fc8:	4b36      	ldr	r3, [pc, #216]	; (80020a4 <_Z18LTC_start_cell_adcv+0x11c>)
 8001fca:	785b      	ldrb	r3, [r3, #1]
 8001fcc:	717b      	strb	r3, [r7, #5]
	tab[6] = ltcConfig[2];
 8001fce:	4b35      	ldr	r3, [pc, #212]	; (80020a4 <_Z18LTC_start_cell_adcv+0x11c>)
 8001fd0:	789b      	ldrb	r3, [r3, #2]
 8001fd2:	71bb      	strb	r3, [r7, #6]
	tab[7] = ltcConfig[3];
 8001fd4:	4b33      	ldr	r3, [pc, #204]	; (80020a4 <_Z18LTC_start_cell_adcv+0x11c>)
 8001fd6:	78db      	ldrb	r3, [r3, #3]
 8001fd8:	71fb      	strb	r3, [r7, #7]
	tab[8] = ltcConfig[4];
 8001fda:	4b32      	ldr	r3, [pc, #200]	; (80020a4 <_Z18LTC_start_cell_adcv+0x11c>)
 8001fdc:	791b      	ldrb	r3, [r3, #4]
 8001fde:	723b      	strb	r3, [r7, #8]
	tab[9] = ltcConfig[5];
 8001fe0:	4b30      	ldr	r3, [pc, #192]	; (80020a4 <_Z18LTC_start_cell_adcv+0x11c>)
 8001fe2:	795b      	ldrb	r3, [r3, #5]
 8001fe4:	727b      	strb	r3, [r7, #9]
	pec = pec15((char*)&tab[4], 6);
 8001fe6:	463b      	mov	r3, r7
 8001fe8:	3304      	adds	r3, #4
 8001fea:	2106      	movs	r1, #6
 8001fec:	4618      	mov	r0, r3
 8001fee:	f7ff ff77 	bl	8001ee0 <_Z5pec15Pci>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	81bb      	strh	r3, [r7, #12]
	tab[10] = pec >> 8;
 8001ff6:	89bb      	ldrh	r3, [r7, #12]
 8001ff8:	0a1b      	lsrs	r3, r3, #8
 8001ffa:	b29b      	uxth	r3, r3
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	72bb      	strb	r3, [r7, #10]
	tab[11] = pec;
 8002000:	89bb      	ldrh	r3, [r7, #12]
 8002002:	b2db      	uxtb	r3, r3
 8002004:	72fb      	strb	r3, [r7, #11]

	LTC_wake_up();
 8002006:	f7ff ff9f 	bl	8001f48 <_Z11LTC_wake_upv>

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 800200a:	2200      	movs	r2, #0
 800200c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002010:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002014:	f004 ffa0 	bl	8006f58 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, tab, 12, 20);
 8002018:	4639      	mov	r1, r7
 800201a:	2314      	movs	r3, #20
 800201c:	220c      	movs	r2, #12
 800201e:	4822      	ldr	r0, [pc, #136]	; (80020a8 <_Z18LTC_start_cell_adcv+0x120>)
 8002020:	f008 fa6f 	bl	800a502 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8002024:	2201      	movs	r2, #1
 8002026:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800202a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800202e:	f004 ff93 	bl	8006f58 <HAL_GPIO_WritePin>


	// adc conversion

	memset(tab, 0, 12);
 8002032:	463b      	mov	r3, r7
 8002034:	220c      	movs	r2, #12
 8002036:	2100      	movs	r1, #0
 8002038:	4618      	mov	r0, r3
 800203a:	f010 f901 	bl	8012240 <memset>

	//cmd = 0b1001100000 | (0b00 << 7); // discharge not permitted
	cmd = 0b1001110000 | (0b00 << 7); // discharge permitted
 800203e:	f44f 731c 	mov.w	r3, #624	; 0x270
 8002042:	81fb      	strh	r3, [r7, #14]
	tab[0] = cmd>>8;
 8002044:	89fb      	ldrh	r3, [r7, #14]
 8002046:	0a1b      	lsrs	r3, r3, #8
 8002048:	b29b      	uxth	r3, r3
 800204a:	b2db      	uxtb	r3, r3
 800204c:	703b      	strb	r3, [r7, #0]
	tab[1] = cmd;
 800204e:	89fb      	ldrh	r3, [r7, #14]
 8002050:	b2db      	uxtb	r3, r3
 8002052:	707b      	strb	r3, [r7, #1]
	pec = pec15((char*)tab, 2);
 8002054:	463b      	mov	r3, r7
 8002056:	2102      	movs	r1, #2
 8002058:	4618      	mov	r0, r3
 800205a:	f7ff ff41 	bl	8001ee0 <_Z5pec15Pci>
 800205e:	4603      	mov	r3, r0
 8002060:	81bb      	strh	r3, [r7, #12]
	tab[2] = pec >> 8;
 8002062:	89bb      	ldrh	r3, [r7, #12]
 8002064:	0a1b      	lsrs	r3, r3, #8
 8002066:	b29b      	uxth	r3, r3
 8002068:	b2db      	uxtb	r3, r3
 800206a:	70bb      	strb	r3, [r7, #2]
	tab[3] = pec;
 800206c:	89bb      	ldrh	r3, [r7, #12]
 800206e:	b2db      	uxtb	r3, r3
 8002070:	70fb      	strb	r3, [r7, #3]

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8002072:	2200      	movs	r2, #0
 8002074:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002078:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800207c:	f004 ff6c 	bl	8006f58 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, tab, 4, 20);
 8002080:	4639      	mov	r1, r7
 8002082:	2314      	movs	r3, #20
 8002084:	2204      	movs	r2, #4
 8002086:	4808      	ldr	r0, [pc, #32]	; (80020a8 <_Z18LTC_start_cell_adcv+0x120>)
 8002088:	f008 fa3b 	bl	800a502 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 800208c:	2201      	movs	r2, #1
 800208e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002092:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002096:	f004 ff5f 	bl	8006f58 <HAL_GPIO_WritePin>
}
 800209a:	bf00      	nop
 800209c:	3710      	adds	r7, #16
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	20000174 	.word	0x20000174
 80020a8:	20000f98 	.word	0x20000f98

080020ac <_Z18LTC_get_values_adcPt>:
 * Brief:	Receveing adc data from ltc, BLOCKING MODE
 * Param:	None
 * Retval:	None
 */
void LTC_get_values_adc(uint16_t *cell_values)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b0b8      	sub	sp, #224	; 0xe0
 80020b0:	af02      	add	r7, sp, #8
 80020b2:	6078      	str	r0, [r7, #4]
	uint8_t tab[100], rx_tab[100];
	uint16_t pec;

	// read cell voltage group A
	uint16_t cmd = (1<<15) | 0b100;
 80020b4:	f248 0304 	movw	r3, #32772	; 0x8004
 80020b8:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
	memset(tab, 0, 12);
 80020bc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80020c0:	220c      	movs	r2, #12
 80020c2:	2100      	movs	r1, #0
 80020c4:	4618      	mov	r0, r3
 80020c6:	f010 f8bb 	bl	8012240 <memset>
	tab[0] = (cmd>>8);
 80020ca:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 80020ce:	0a1b      	lsrs	r3, r3, #8
 80020d0:	b29b      	uxth	r3, r3
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
	tab[1] = cmd;
 80020d8:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
	pec = pec15((char*)tab, 2);
 80020e2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80020e6:	2102      	movs	r1, #2
 80020e8:	4618      	mov	r0, r3
 80020ea:	f7ff fef9 	bl	8001ee0 <_Z5pec15Pci>
 80020ee:	4603      	mov	r3, r0
 80020f0:	f8a7 30d4 	strh.w	r3, [r7, #212]	; 0xd4
	tab[2] = pec >> 8;
 80020f4:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 80020f8:	0a1b      	lsrs	r3, r3, #8
 80020fa:	b29b      	uxth	r3, r3
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
	tab[3] = pec;
 8002102:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 8002106:	b2db      	uxtb	r3, r3
 8002108:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

	LTC_wake_up();
 800210c:	f7ff ff1c 	bl	8001f48 <_Z11LTC_wake_upv>

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8002110:	2200      	movs	r2, #0
 8002112:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002116:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800211a:	f004 ff1d 	bl	8006f58 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, tab, rx_tab, 12, 20);
 800211e:	f107 020c 	add.w	r2, r7, #12
 8002122:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8002126:	2314      	movs	r3, #20
 8002128:	9300      	str	r3, [sp, #0]
 800212a:	230c      	movs	r3, #12
 800212c:	4849      	ldr	r0, [pc, #292]	; (8002254 <_Z18LTC_get_values_adcPt+0x1a8>)
 800212e:	f008 fb56 	bl	800a7de <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8002132:	2201      	movs	r2, #1
 8002134:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002138:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800213c:	f004 ff0c 	bl	8006f58 <HAL_GPIO_WritePin>


	cell_values[0] = (uint16_t)rx_tab[4] | (((uint16_t)rx_tab[5])<<8);
 8002140:	7c3b      	ldrb	r3, [r7, #16]
 8002142:	b21a      	sxth	r2, r3
 8002144:	7c7b      	ldrb	r3, [r7, #17]
 8002146:	021b      	lsls	r3, r3, #8
 8002148:	b21b      	sxth	r3, r3
 800214a:	4313      	orrs	r3, r2
 800214c:	b21b      	sxth	r3, r3
 800214e:	b29a      	uxth	r2, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	801a      	strh	r2, [r3, #0]
	cell_values[1] = (uint16_t)rx_tab[6] | (((uint16_t)rx_tab[7])<<8);
 8002154:	7cbb      	ldrb	r3, [r7, #18]
 8002156:	b21a      	sxth	r2, r3
 8002158:	7cfb      	ldrb	r3, [r7, #19]
 800215a:	021b      	lsls	r3, r3, #8
 800215c:	b21b      	sxth	r3, r3
 800215e:	4313      	orrs	r3, r2
 8002160:	b21a      	sxth	r2, r3
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	3302      	adds	r3, #2
 8002166:	b292      	uxth	r2, r2
 8002168:	801a      	strh	r2, [r3, #0]
	cell_values[2] = (uint16_t)rx_tab[8] | (((uint16_t)rx_tab[9])<<8);
 800216a:	7d3b      	ldrb	r3, [r7, #20]
 800216c:	b21a      	sxth	r2, r3
 800216e:	7d7b      	ldrb	r3, [r7, #21]
 8002170:	021b      	lsls	r3, r3, #8
 8002172:	b21b      	sxth	r3, r3
 8002174:	4313      	orrs	r3, r2
 8002176:	b21a      	sxth	r2, r3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	3304      	adds	r3, #4
 800217c:	b292      	uxth	r2, r2
 800217e:	801a      	strh	r2, [r3, #0]


	// read cell voltage group B
	cmd = (1<<15) | 0b110;
 8002180:	f248 0306 	movw	r3, #32774	; 0x8006
 8002184:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
	memset(tab, 0, 12);
 8002188:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800218c:	220c      	movs	r2, #12
 800218e:	2100      	movs	r1, #0
 8002190:	4618      	mov	r0, r3
 8002192:	f010 f855 	bl	8012240 <memset>
	tab[0] = (cmd>>8);
 8002196:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 800219a:	0a1b      	lsrs	r3, r3, #8
 800219c:	b29b      	uxth	r3, r3
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
	tab[1] = cmd;
 80021a4:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
	pec = pec15((char*)tab, 2);
 80021ae:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80021b2:	2102      	movs	r1, #2
 80021b4:	4618      	mov	r0, r3
 80021b6:	f7ff fe93 	bl	8001ee0 <_Z5pec15Pci>
 80021ba:	4603      	mov	r3, r0
 80021bc:	f8a7 30d4 	strh.w	r3, [r7, #212]	; 0xd4
	tab[2] = pec >> 8;
 80021c0:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 80021c4:	0a1b      	lsrs	r3, r3, #8
 80021c6:	b29b      	uxth	r3, r3
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
	tab[3] = pec;
 80021ce:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80021d8:	2200      	movs	r2, #0
 80021da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80021de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021e2:	f004 feb9 	bl	8006f58 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, tab, rx_tab, 12, 20);
 80021e6:	f107 020c 	add.w	r2, r7, #12
 80021ea:	f107 0170 	add.w	r1, r7, #112	; 0x70
 80021ee:	2314      	movs	r3, #20
 80021f0:	9300      	str	r3, [sp, #0]
 80021f2:	230c      	movs	r3, #12
 80021f4:	4817      	ldr	r0, [pc, #92]	; (8002254 <_Z18LTC_get_values_adcPt+0x1a8>)
 80021f6:	f008 faf2 	bl	800a7de <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 80021fa:	2201      	movs	r2, #1
 80021fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002200:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002204:	f004 fea8 	bl	8006f58 <HAL_GPIO_WritePin>

	cell_values[3] = (uint16_t)rx_tab[4] | (((uint16_t)rx_tab[5])<<8);
 8002208:	7c3b      	ldrb	r3, [r7, #16]
 800220a:	b21a      	sxth	r2, r3
 800220c:	7c7b      	ldrb	r3, [r7, #17]
 800220e:	021b      	lsls	r3, r3, #8
 8002210:	b21b      	sxth	r3, r3
 8002212:	4313      	orrs	r3, r2
 8002214:	b21a      	sxth	r2, r3
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	3306      	adds	r3, #6
 800221a:	b292      	uxth	r2, r2
 800221c:	801a      	strh	r2, [r3, #0]
	cell_values[4] = (uint16_t)rx_tab[6] | (((uint16_t)rx_tab[7])<<8);
 800221e:	7cbb      	ldrb	r3, [r7, #18]
 8002220:	b21a      	sxth	r2, r3
 8002222:	7cfb      	ldrb	r3, [r7, #19]
 8002224:	021b      	lsls	r3, r3, #8
 8002226:	b21b      	sxth	r3, r3
 8002228:	4313      	orrs	r3, r2
 800222a:	b21a      	sxth	r2, r3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	3308      	adds	r3, #8
 8002230:	b292      	uxth	r2, r2
 8002232:	801a      	strh	r2, [r3, #0]
	cell_values[5] = (uint16_t)rx_tab[8] | (((uint16_t)rx_tab[9])<<8);
 8002234:	7d3b      	ldrb	r3, [r7, #20]
 8002236:	b21a      	sxth	r2, r3
 8002238:	7d7b      	ldrb	r3, [r7, #21]
 800223a:	021b      	lsls	r3, r3, #8
 800223c:	b21b      	sxth	r3, r3
 800223e:	4313      	orrs	r3, r2
 8002240:	b21a      	sxth	r2, r3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	330a      	adds	r3, #10
 8002246:	b292      	uxth	r2, r2
 8002248:	801a      	strh	r2, [r3, #0]


}
 800224a:	bf00      	nop
 800224c:	37d8      	adds	r7, #216	; 0xd8
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	20000f98 	.word	0x20000f98

08002258 <_Z8mute_disv>:
 * Brief:	Muting discharge
 * Param:	None
 * Retval:	None
 */
void mute_dis()
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
	uint8_t tab[4];
	uint16_t pec;


	uint16_t cmd = (1<<15) | 0b101000;
 800225e:	f248 0328 	movw	r3, #32808	; 0x8028
 8002262:	80fb      	strh	r3, [r7, #6]
	memset(tab, 0, 4);
 8002264:	463b      	mov	r3, r7
 8002266:	2204      	movs	r2, #4
 8002268:	2100      	movs	r1, #0
 800226a:	4618      	mov	r0, r3
 800226c:	f00f ffe8 	bl	8012240 <memset>
	tab[0] = (cmd>>8);
 8002270:	88fb      	ldrh	r3, [r7, #6]
 8002272:	0a1b      	lsrs	r3, r3, #8
 8002274:	b29b      	uxth	r3, r3
 8002276:	b2db      	uxtb	r3, r3
 8002278:	703b      	strb	r3, [r7, #0]
	tab[1] = cmd;
 800227a:	88fb      	ldrh	r3, [r7, #6]
 800227c:	b2db      	uxtb	r3, r3
 800227e:	707b      	strb	r3, [r7, #1]
	pec = pec15((char*)tab, 2);
 8002280:	463b      	mov	r3, r7
 8002282:	2102      	movs	r1, #2
 8002284:	4618      	mov	r0, r3
 8002286:	f7ff fe2b 	bl	8001ee0 <_Z5pec15Pci>
 800228a:	4603      	mov	r3, r0
 800228c:	80bb      	strh	r3, [r7, #4]
	tab[2] = pec >> 8;
 800228e:	88bb      	ldrh	r3, [r7, #4]
 8002290:	0a1b      	lsrs	r3, r3, #8
 8002292:	b29b      	uxth	r3, r3
 8002294:	b2db      	uxtb	r3, r3
 8002296:	70bb      	strb	r3, [r7, #2]
	tab[3] = pec;
 8002298:	88bb      	ldrh	r3, [r7, #4]
 800229a:	b2db      	uxtb	r3, r3
 800229c:	70fb      	strb	r3, [r7, #3]

	LTC_wake_up();
 800229e:	f7ff fe53 	bl	8001f48 <_Z11LTC_wake_upv>

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80022a2:	2200      	movs	r2, #0
 80022a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80022a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022ac:	f004 fe54 	bl	8006f58 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, tab, 4, 100);
 80022b0:	4639      	mov	r1, r7
 80022b2:	2364      	movs	r3, #100	; 0x64
 80022b4:	2204      	movs	r2, #4
 80022b6:	4807      	ldr	r0, [pc, #28]	; (80022d4 <_Z8mute_disv+0x7c>)
 80022b8:	f008 f923 	bl	800a502 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 80022bc:	2201      	movs	r2, #1
 80022be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80022c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022c6:	f004 fe47 	bl	8006f58 <HAL_GPIO_WritePin>
}
 80022ca:	bf00      	nop
 80022cc:	3708      	adds	r7, #8
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	20000f98 	.word	0x20000f98

080022d8 <_Z10unmute_disv>:
 * Brief:	Unmuting discharge
 * Param:	None
 * Retval:	None
 */
void unmute_dis()
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
	uint8_t tab[4];
	uint16_t pec;


	uint16_t cmd = (1<<15) | 0b101001;
 80022de:	f248 0329 	movw	r3, #32809	; 0x8029
 80022e2:	80fb      	strh	r3, [r7, #6]
	memset(tab, 0, 4);
 80022e4:	463b      	mov	r3, r7
 80022e6:	2204      	movs	r2, #4
 80022e8:	2100      	movs	r1, #0
 80022ea:	4618      	mov	r0, r3
 80022ec:	f00f ffa8 	bl	8012240 <memset>
	tab[0] = (cmd>>8);
 80022f0:	88fb      	ldrh	r3, [r7, #6]
 80022f2:	0a1b      	lsrs	r3, r3, #8
 80022f4:	b29b      	uxth	r3, r3
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	703b      	strb	r3, [r7, #0]
	tab[1] = cmd;
 80022fa:	88fb      	ldrh	r3, [r7, #6]
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	707b      	strb	r3, [r7, #1]
	pec = pec15((char*)tab, 2);
 8002300:	463b      	mov	r3, r7
 8002302:	2102      	movs	r1, #2
 8002304:	4618      	mov	r0, r3
 8002306:	f7ff fdeb 	bl	8001ee0 <_Z5pec15Pci>
 800230a:	4603      	mov	r3, r0
 800230c:	80bb      	strh	r3, [r7, #4]
	tab[2] = pec >> 8;
 800230e:	88bb      	ldrh	r3, [r7, #4]
 8002310:	0a1b      	lsrs	r3, r3, #8
 8002312:	b29b      	uxth	r3, r3
 8002314:	b2db      	uxtb	r3, r3
 8002316:	70bb      	strb	r3, [r7, #2]
	tab[3] = pec;
 8002318:	88bb      	ldrh	r3, [r7, #4]
 800231a:	b2db      	uxtb	r3, r3
 800231c:	70fb      	strb	r3, [r7, #3]

	LTC_wake_up();
 800231e:	f7ff fe13 	bl	8001f48 <_Z11LTC_wake_upv>

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8002322:	2200      	movs	r2, #0
 8002324:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002328:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800232c:	f004 fe14 	bl	8006f58 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, tab, 4, 100);
 8002330:	4639      	mov	r1, r7
 8002332:	2364      	movs	r3, #100	; 0x64
 8002334:	2204      	movs	r2, #4
 8002336:	4807      	ldr	r0, [pc, #28]	; (8002354 <_Z10unmute_disv+0x7c>)
 8002338:	f008 f8e3 	bl	800a502 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 800233c:	2201      	movs	r2, #1
 800233e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002342:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002346:	f004 fe07 	bl	8006f58 <HAL_GPIO_WritePin>
}
 800234a:	bf00      	nop
 800234c:	3708      	adds	r7, #8
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	20000f98 	.word	0x20000f98

08002358 <_Z21LTC_turn_on_dischargeiPb>:
 * Brief:	Send discharge configuration and start the discharge, BLOCKING MODE
 * Param:	cell: number of cell wanted to be discharged
 * Retval:	None
 */
void LTC_turn_on_discharge(int cell, bool *cellDischarge)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b086      	sub	sp, #24
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	6039      	str	r1, [r7, #0]
	uint8_t tab[12];
	uint16_t pec;

	unmute_dis();
 8002362:	f7ff ffb9 	bl	80022d8 <_Z10unmute_disv>

	uint16_t cmd = (1<<15) | 0b10100;
 8002366:	f248 0314 	movw	r3, #32788	; 0x8014
 800236a:	82fb      	strh	r3, [r7, #22]
	memset(tab, 0, 12);
 800236c:	f107 0308 	add.w	r3, r7, #8
 8002370:	220c      	movs	r2, #12
 8002372:	2100      	movs	r1, #0
 8002374:	4618      	mov	r0, r3
 8002376:	f00f ff63 	bl	8012240 <memset>
	tab[0] = (cmd>>8);
 800237a:	8afb      	ldrh	r3, [r7, #22]
 800237c:	0a1b      	lsrs	r3, r3, #8
 800237e:	b29b      	uxth	r3, r3
 8002380:	b2db      	uxtb	r3, r3
 8002382:	723b      	strb	r3, [r7, #8]
	tab[1] = cmd;
 8002384:	8afb      	ldrh	r3, [r7, #22]
 8002386:	b2db      	uxtb	r3, r3
 8002388:	727b      	strb	r3, [r7, #9]
	pec = pec15((char*)tab, 2);
 800238a:	f107 0308 	add.w	r3, r7, #8
 800238e:	2102      	movs	r1, #2
 8002390:	4618      	mov	r0, r3
 8002392:	f7ff fda5 	bl	8001ee0 <_Z5pec15Pci>
 8002396:	4603      	mov	r3, r0
 8002398:	82bb      	strh	r3, [r7, #20]
	tab[2] = pec >> 8;
 800239a:	8abb      	ldrh	r3, [r7, #20]
 800239c:	0a1b      	lsrs	r3, r3, #8
 800239e:	b29b      	uxth	r3, r3
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	72bb      	strb	r3, [r7, #10]
	tab[3] = pec;
 80023a4:	8abb      	ldrh	r3, [r7, #20]
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	72fb      	strb	r3, [r7, #11]


	tab[4] = (cellDischarge[0]) | (cellDischarge[1] << 4); // 1, 2
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	b25a      	sxtb	r2, r3
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	3301      	adds	r3, #1
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	011b      	lsls	r3, r3, #4
 80023b8:	b25b      	sxtb	r3, r3
 80023ba:	4313      	orrs	r3, r2
 80023bc:	b25b      	sxtb	r3, r3
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	733b      	strb	r3, [r7, #12]
	tab[5] = (cellDischarge[2]) | (cellDischarge[3] << 4); // 3, 4
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	3302      	adds	r3, #2
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	b25a      	sxtb	r2, r3
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	3303      	adds	r3, #3
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	011b      	lsls	r3, r3, #4
 80023d2:	b25b      	sxtb	r3, r3
 80023d4:	4313      	orrs	r3, r2
 80023d6:	b25b      	sxtb	r3, r3
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	737b      	strb	r3, [r7, #13]
	tab[6] = (cellDischarge[4]) | (cellDischarge[5] << 4); // 5, 6
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	3304      	adds	r3, #4
 80023e0:	781b      	ldrb	r3, [r3, #0]
 80023e2:	b25a      	sxtb	r2, r3
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	3305      	adds	r3, #5
 80023e8:	781b      	ldrb	r3, [r3, #0]
 80023ea:	011b      	lsls	r3, r3, #4
 80023ec:	b25b      	sxtb	r3, r3
 80023ee:	4313      	orrs	r3, r2
 80023f0:	b25b      	sxtb	r3, r3
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	73bb      	strb	r3, [r7, #14]
	tab[7] = 0;
 80023f6:	2300      	movs	r3, #0
 80023f8:	73fb      	strb	r3, [r7, #15]
	tab[8] = 0;
 80023fa:	2300      	movs	r3, #0
 80023fc:	743b      	strb	r3, [r7, #16]
	tab[9] = 0;
 80023fe:	2300      	movs	r3, #0
 8002400:	747b      	strb	r3, [r7, #17]
	pec = pec15((char*)&tab[4], 6);
 8002402:	f107 0308 	add.w	r3, r7, #8
 8002406:	3304      	adds	r3, #4
 8002408:	2106      	movs	r1, #6
 800240a:	4618      	mov	r0, r3
 800240c:	f7ff fd68 	bl	8001ee0 <_Z5pec15Pci>
 8002410:	4603      	mov	r3, r0
 8002412:	82bb      	strh	r3, [r7, #20]
	tab[10] = pec >> 8;
 8002414:	8abb      	ldrh	r3, [r7, #20]
 8002416:	0a1b      	lsrs	r3, r3, #8
 8002418:	b29b      	uxth	r3, r3
 800241a:	b2db      	uxtb	r3, r3
 800241c:	74bb      	strb	r3, [r7, #18]
	tab[11] = pec;
 800241e:	8abb      	ldrh	r3, [r7, #20]
 8002420:	b2db      	uxtb	r3, r3
 8002422:	74fb      	strb	r3, [r7, #19]

	LTC_wake_up();
 8002424:	f7ff fd90 	bl	8001f48 <_Z11LTC_wake_upv>

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8002428:	2200      	movs	r2, #0
 800242a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800242e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002432:	f004 fd91 	bl	8006f58 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, tab, 12, 100);
 8002436:	f107 0108 	add.w	r1, r7, #8
 800243a:	2364      	movs	r3, #100	; 0x64
 800243c:	220c      	movs	r2, #12
 800243e:	483c      	ldr	r0, [pc, #240]	; (8002530 <_Z21LTC_turn_on_dischargeiPb+0x1d8>)
 8002440:	f008 f85f 	bl	800a502 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8002444:	2201      	movs	r2, #1
 8002446:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800244a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800244e:	f004 fd83 	bl	8006f58 <HAL_GPIO_WritePin>

	cmd = (1<<15) | 0x01;
 8002452:	f248 0301 	movw	r3, #32769	; 0x8001
 8002456:	82fb      	strh	r3, [r7, #22]
	memset(tab, 0, 12);
 8002458:	f107 0308 	add.w	r3, r7, #8
 800245c:	220c      	movs	r2, #12
 800245e:	2100      	movs	r1, #0
 8002460:	4618      	mov	r0, r3
 8002462:	f00f feed 	bl	8012240 <memset>
	// configuration
	tab[0] = (cmd>>8);
 8002466:	8afb      	ldrh	r3, [r7, #22]
 8002468:	0a1b      	lsrs	r3, r3, #8
 800246a:	b29b      	uxth	r3, r3
 800246c:	b2db      	uxtb	r3, r3
 800246e:	723b      	strb	r3, [r7, #8]
	tab[1] = cmd;
 8002470:	8afb      	ldrh	r3, [r7, #22]
 8002472:	b2db      	uxtb	r3, r3
 8002474:	727b      	strb	r3, [r7, #9]
	pec = pec15((char*)tab, 2);
 8002476:	f107 0308 	add.w	r3, r7, #8
 800247a:	2102      	movs	r1, #2
 800247c:	4618      	mov	r0, r3
 800247e:	f7ff fd2f 	bl	8001ee0 <_Z5pec15Pci>
 8002482:	4603      	mov	r3, r0
 8002484:	82bb      	strh	r3, [r7, #20]
	tab[2] = pec >> 8;
 8002486:	8abb      	ldrh	r3, [r7, #20]
 8002488:	0a1b      	lsrs	r3, r3, #8
 800248a:	b29b      	uxth	r3, r3
 800248c:	b2db      	uxtb	r3, r3
 800248e:	72bb      	strb	r3, [r7, #10]
	tab[3] = pec;
 8002490:	8abb      	ldrh	r3, [r7, #20]
 8002492:	b2db      	uxtb	r3, r3
 8002494:	72fb      	strb	r3, [r7, #11]

	tab[4] = ltcConfig[0];
 8002496:	4b27      	ldr	r3, [pc, #156]	; (8002534 <_Z21LTC_turn_on_dischargeiPb+0x1dc>)
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	733b      	strb	r3, [r7, #12]
	tab[5] = ltcConfig[1];
 800249c:	4b25      	ldr	r3, [pc, #148]	; (8002534 <_Z21LTC_turn_on_dischargeiPb+0x1dc>)
 800249e:	785b      	ldrb	r3, [r3, #1]
 80024a0:	737b      	strb	r3, [r7, #13]
	tab[6] = ltcConfig[2];
 80024a2:	4b24      	ldr	r3, [pc, #144]	; (8002534 <_Z21LTC_turn_on_dischargeiPb+0x1dc>)
 80024a4:	789b      	ldrb	r3, [r3, #2]
 80024a6:	73bb      	strb	r3, [r7, #14]
	tab[7] = ltcConfig[3];
 80024a8:	4b22      	ldr	r3, [pc, #136]	; (8002534 <_Z21LTC_turn_on_dischargeiPb+0x1dc>)
 80024aa:	78db      	ldrb	r3, [r3, #3]
 80024ac:	73fb      	strb	r3, [r7, #15]
	if(cell<7){
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2b06      	cmp	r3, #6
 80024b2:	dc0c      	bgt.n	80024ce <_Z21LTC_turn_on_dischargeiPb+0x176>
		ltcConfig[4] = ltcConfig[4] | (1 << (cell));
 80024b4:	4b1f      	ldr	r3, [pc, #124]	; (8002534 <_Z21LTC_turn_on_dischargeiPb+0x1dc>)
 80024b6:	791b      	ldrb	r3, [r3, #4]
 80024b8:	b25a      	sxtb	r2, r3
 80024ba:	2101      	movs	r1, #1
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	fa01 f303 	lsl.w	r3, r1, r3
 80024c2:	b25b      	sxtb	r3, r3
 80024c4:	4313      	orrs	r3, r2
 80024c6:	b25b      	sxtb	r3, r3
 80024c8:	b2da      	uxtb	r2, r3
 80024ca:	4b1a      	ldr	r3, [pc, #104]	; (8002534 <_Z21LTC_turn_on_dischargeiPb+0x1dc>)
 80024cc:	711a      	strb	r2, [r3, #4]
	}
	tab[8] = ltcConfig[4];
 80024ce:	4b19      	ldr	r3, [pc, #100]	; (8002534 <_Z21LTC_turn_on_dischargeiPb+0x1dc>)
 80024d0:	791b      	ldrb	r3, [r3, #4]
 80024d2:	743b      	strb	r3, [r7, #16]
	tab[9] = ltcConfig[5];
 80024d4:	4b17      	ldr	r3, [pc, #92]	; (8002534 <_Z21LTC_turn_on_dischargeiPb+0x1dc>)
 80024d6:	795b      	ldrb	r3, [r3, #5]
 80024d8:	747b      	strb	r3, [r7, #17]
	pec = pec15((char*)&tab[4], 6);
 80024da:	f107 0308 	add.w	r3, r7, #8
 80024de:	3304      	adds	r3, #4
 80024e0:	2106      	movs	r1, #6
 80024e2:	4618      	mov	r0, r3
 80024e4:	f7ff fcfc 	bl	8001ee0 <_Z5pec15Pci>
 80024e8:	4603      	mov	r3, r0
 80024ea:	82bb      	strh	r3, [r7, #20]
	tab[10] = pec >> 8;
 80024ec:	8abb      	ldrh	r3, [r7, #20]
 80024ee:	0a1b      	lsrs	r3, r3, #8
 80024f0:	b29b      	uxth	r3, r3
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	74bb      	strb	r3, [r7, #18]
	tab[11] = pec;
 80024f6:	8abb      	ldrh	r3, [r7, #20]
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	74fb      	strb	r3, [r7, #19]


	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80024fc:	2200      	movs	r2, #0
 80024fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002502:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002506:	f004 fd27 	bl	8006f58 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, tab, 12, 100);
 800250a:	f107 0108 	add.w	r1, r7, #8
 800250e:	2364      	movs	r3, #100	; 0x64
 8002510:	220c      	movs	r2, #12
 8002512:	4807      	ldr	r0, [pc, #28]	; (8002530 <_Z21LTC_turn_on_dischargeiPb+0x1d8>)
 8002514:	f007 fff5 	bl	800a502 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8002518:	2201      	movs	r2, #1
 800251a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800251e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002522:	f004 fd19 	bl	8006f58 <HAL_GPIO_WritePin>


}
 8002526:	bf00      	nop
 8002528:	3718      	adds	r7, #24
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	20000f98 	.word	0x20000f98
 8002534:	20000174 	.word	0x20000174

08002538 <_Z22LTC_turn_off_dischargev>:
 * Brief:	Turn off discharge, BLOCKING MODE
 * Param:	None
 * Retval:	None
 */
void LTC_turn_off_discharge()
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b09a      	sub	sp, #104	; 0x68
 800253c:	af00      	add	r7, sp, #0

	uint8_t tab[100];
	uint16_t pec;


	uint16_t cmd = (1<<15) | 0b10100;
 800253e:	f248 0314 	movw	r3, #32788	; 0x8014
 8002542:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
	memset(tab, 0, 12);
 8002546:	463b      	mov	r3, r7
 8002548:	220c      	movs	r2, #12
 800254a:	2100      	movs	r1, #0
 800254c:	4618      	mov	r0, r3
 800254e:	f00f fe77 	bl	8012240 <memset>
	tab[0] = (cmd>>8);
 8002552:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8002556:	0a1b      	lsrs	r3, r3, #8
 8002558:	b29b      	uxth	r3, r3
 800255a:	b2db      	uxtb	r3, r3
 800255c:	703b      	strb	r3, [r7, #0]
	tab[1] = cmd;
 800255e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8002562:	b2db      	uxtb	r3, r3
 8002564:	707b      	strb	r3, [r7, #1]
	pec = pec15((char*)tab, 2);
 8002566:	463b      	mov	r3, r7
 8002568:	2102      	movs	r1, #2
 800256a:	4618      	mov	r0, r3
 800256c:	f7ff fcb8 	bl	8001ee0 <_Z5pec15Pci>
 8002570:	4603      	mov	r3, r0
 8002572:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
	tab[2] = pec >> 8;
 8002576:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800257a:	0a1b      	lsrs	r3, r3, #8
 800257c:	b29b      	uxth	r3, r3
 800257e:	b2db      	uxtb	r3, r3
 8002580:	70bb      	strb	r3, [r7, #2]
	tab[3] = pec;
 8002582:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002586:	b2db      	uxtb	r3, r3
 8002588:	70fb      	strb	r3, [r7, #3]


	tab[4] = 0;
 800258a:	2300      	movs	r3, #0
 800258c:	713b      	strb	r3, [r7, #4]
	tab[5] = 0;
 800258e:	2300      	movs	r3, #0
 8002590:	717b      	strb	r3, [r7, #5]
	tab[6] = 0;
 8002592:	2300      	movs	r3, #0
 8002594:	71bb      	strb	r3, [r7, #6]
	tab[7] = 0;
 8002596:	2300      	movs	r3, #0
 8002598:	71fb      	strb	r3, [r7, #7]
	tab[8] = 0;
 800259a:	2300      	movs	r3, #0
 800259c:	723b      	strb	r3, [r7, #8]
	tab[9] = 0;
 800259e:	2300      	movs	r3, #0
 80025a0:	727b      	strb	r3, [r7, #9]
	pec = pec15((char*)&tab[4], 6);
 80025a2:	463b      	mov	r3, r7
 80025a4:	3304      	adds	r3, #4
 80025a6:	2106      	movs	r1, #6
 80025a8:	4618      	mov	r0, r3
 80025aa:	f7ff fc99 	bl	8001ee0 <_Z5pec15Pci>
 80025ae:	4603      	mov	r3, r0
 80025b0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
	tab[10] = pec >> 8;
 80025b4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80025b8:	0a1b      	lsrs	r3, r3, #8
 80025ba:	b29b      	uxth	r3, r3
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	72bb      	strb	r3, [r7, #10]
	tab[11] = pec;
 80025c0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	72fb      	strb	r3, [r7, #11]

	LTC_wake_up();
 80025c8:	f7ff fcbe 	bl	8001f48 <_Z11LTC_wake_upv>

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80025cc:	2200      	movs	r2, #0
 80025ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80025d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025d6:	f004 fcbf 	bl	8006f58 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, tab, 12, 100);
 80025da:	4639      	mov	r1, r7
 80025dc:	2364      	movs	r3, #100	; 0x64
 80025de:	220c      	movs	r2, #12
 80025e0:	4838      	ldr	r0, [pc, #224]	; (80026c4 <_Z22LTC_turn_off_dischargev+0x18c>)
 80025e2:	f007 ff8e 	bl	800a502 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 80025e6:	2201      	movs	r2, #1
 80025e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80025ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025f0:	f004 fcb2 	bl	8006f58 <HAL_GPIO_WritePin>


	cmd = (1<<15) | 0x01;
 80025f4:	f248 0301 	movw	r3, #32769	; 0x8001
 80025f8:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
	memset(tab, 0, 12);
 80025fc:	463b      	mov	r3, r7
 80025fe:	220c      	movs	r2, #12
 8002600:	2100      	movs	r1, #0
 8002602:	4618      	mov	r0, r3
 8002604:	f00f fe1c 	bl	8012240 <memset>
	// configuration
	tab[0] = (cmd>>8);
 8002608:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800260c:	0a1b      	lsrs	r3, r3, #8
 800260e:	b29b      	uxth	r3, r3
 8002610:	b2db      	uxtb	r3, r3
 8002612:	703b      	strb	r3, [r7, #0]
	tab[1] = cmd;
 8002614:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8002618:	b2db      	uxtb	r3, r3
 800261a:	707b      	strb	r3, [r7, #1]
	pec = pec15((char*)tab, 2);
 800261c:	463b      	mov	r3, r7
 800261e:	2102      	movs	r1, #2
 8002620:	4618      	mov	r0, r3
 8002622:	f7ff fc5d 	bl	8001ee0 <_Z5pec15Pci>
 8002626:	4603      	mov	r3, r0
 8002628:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
	tab[2] = pec >> 8;
 800262c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002630:	0a1b      	lsrs	r3, r3, #8
 8002632:	b29b      	uxth	r3, r3
 8002634:	b2db      	uxtb	r3, r3
 8002636:	70bb      	strb	r3, [r7, #2]
	tab[3] = pec;
 8002638:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800263c:	b2db      	uxtb	r3, r3
 800263e:	70fb      	strb	r3, [r7, #3]

	ltcConfig[4] = 0;
 8002640:	4b21      	ldr	r3, [pc, #132]	; (80026c8 <_Z22LTC_turn_off_dischargev+0x190>)
 8002642:	2200      	movs	r2, #0
 8002644:	711a      	strb	r2, [r3, #4]

	tab[4] = ltcConfig[0];
 8002646:	4b20      	ldr	r3, [pc, #128]	; (80026c8 <_Z22LTC_turn_off_dischargev+0x190>)
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	713b      	strb	r3, [r7, #4]
	tab[5] = ltcConfig[1];
 800264c:	4b1e      	ldr	r3, [pc, #120]	; (80026c8 <_Z22LTC_turn_off_dischargev+0x190>)
 800264e:	785b      	ldrb	r3, [r3, #1]
 8002650:	717b      	strb	r3, [r7, #5]
	tab[6] = ltcConfig[2];
 8002652:	4b1d      	ldr	r3, [pc, #116]	; (80026c8 <_Z22LTC_turn_off_dischargev+0x190>)
 8002654:	789b      	ldrb	r3, [r3, #2]
 8002656:	71bb      	strb	r3, [r7, #6]
	tab[7] = ltcConfig[3];
 8002658:	4b1b      	ldr	r3, [pc, #108]	; (80026c8 <_Z22LTC_turn_off_dischargev+0x190>)
 800265a:	78db      	ldrb	r3, [r3, #3]
 800265c:	71fb      	strb	r3, [r7, #7]
	tab[8] = ltcConfig[4];
 800265e:	4b1a      	ldr	r3, [pc, #104]	; (80026c8 <_Z22LTC_turn_off_dischargev+0x190>)
 8002660:	791b      	ldrb	r3, [r3, #4]
 8002662:	723b      	strb	r3, [r7, #8]
	tab[9] = ltcConfig[5];
 8002664:	4b18      	ldr	r3, [pc, #96]	; (80026c8 <_Z22LTC_turn_off_dischargev+0x190>)
 8002666:	795b      	ldrb	r3, [r3, #5]
 8002668:	727b      	strb	r3, [r7, #9]
	pec = pec15((char*)&tab[4], 6);
 800266a:	463b      	mov	r3, r7
 800266c:	3304      	adds	r3, #4
 800266e:	2106      	movs	r1, #6
 8002670:	4618      	mov	r0, r3
 8002672:	f7ff fc35 	bl	8001ee0 <_Z5pec15Pci>
 8002676:	4603      	mov	r3, r0
 8002678:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
	tab[10] = pec >> 8;
 800267c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002680:	0a1b      	lsrs	r3, r3, #8
 8002682:	b29b      	uxth	r3, r3
 8002684:	b2db      	uxtb	r3, r3
 8002686:	72bb      	strb	r3, [r7, #10]
	tab[11] = pec;
 8002688:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800268c:	b2db      	uxtb	r3, r3
 800268e:	72fb      	strb	r3, [r7, #11]

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8002690:	2200      	movs	r2, #0
 8002692:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002696:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800269a:	f004 fc5d 	bl	8006f58 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, tab, 12, 100);
 800269e:	4639      	mov	r1, r7
 80026a0:	2364      	movs	r3, #100	; 0x64
 80026a2:	220c      	movs	r2, #12
 80026a4:	4807      	ldr	r0, [pc, #28]	; (80026c4 <_Z22LTC_turn_off_dischargev+0x18c>)
 80026a6:	f007 ff2c 	bl	800a502 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 80026aa:	2201      	movs	r2, #1
 80026ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80026b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026b4:	f004 fc50 	bl	8006f58 <HAL_GPIO_WritePin>

	mute_dis();
 80026b8:	f7ff fdce 	bl	8002258 <_Z8mute_disv>
}
 80026bc:	bf00      	nop
 80026be:	3768      	adds	r7, #104	; 0x68
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	20000f98 	.word	0x20000f98
 80026c8:	20000174 	.word	0x20000174

080026cc <_Z24temperature_calculationst>:
 * Brief:	Calculation of temperature, from value of measured voltage
 * Param:	value:	Value of voltage, LSB -> 0.1 mV
 * Retval:	Temperature in *C
 */
float temperature_calculations(uint16_t value)
{
 80026cc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80026d0:	b084      	sub	sp, #16
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	4603      	mov	r3, r0
 80026d6:	80fb      	strh	r3, [r7, #6]
	float retval = 0.0;
 80026d8:	f04f 0300 	mov.w	r3, #0
 80026dc:	60fb      	str	r3, [r7, #12]
	for(unsigned int i = 1; i < 28; i++)
 80026de:	2301      	movs	r3, #1
 80026e0:	60bb      	str	r3, [r7, #8]
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	2b1b      	cmp	r3, #27
 80026e6:	d862      	bhi.n	80027ae <_Z24temperature_calculationst+0xe2>
	{
		if(value >= (uint16_t)temperature_map[i][0])
 80026e8:	4a35      	ldr	r2, [pc, #212]	; (80027c0 <_Z24temperature_calculationst+0xf4>)
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	88fa      	ldrh	r2, [r7, #6]
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d356      	bcc.n	80027a6 <_Z24temperature_calculationst+0xda>
		{
			// approximation
			retval = (float)temperature_map[i][1] - 5.0 * ((float)value-(float)temperature_map[i][0]) / ((float)temperature_map[i-1][0] - (float)temperature_map[i][0]);
 80026f8:	4a31      	ldr	r2, [pc, #196]	; (80027c0 <_Z24temperature_calculationst+0xf4>)
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	00db      	lsls	r3, r3, #3
 80026fe:	4413      	add	r3, r2
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	ee07 3a90 	vmov	s15, r3
 8002706:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800270a:	ee17 0a90 	vmov	r0, s15
 800270e:	f7fd ff33 	bl	8000578 <__aeabi_f2d>
 8002712:	4604      	mov	r4, r0
 8002714:	460d      	mov	r5, r1
 8002716:	88fb      	ldrh	r3, [r7, #6]
 8002718:	ee07 3a90 	vmov	s15, r3
 800271c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002720:	4a27      	ldr	r2, [pc, #156]	; (80027c0 <_Z24temperature_calculationst+0xf4>)
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002728:	ee07 3a90 	vmov	s15, r3
 800272c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002730:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002734:	ee17 0a90 	vmov	r0, s15
 8002738:	f7fd ff1e 	bl	8000578 <__aeabi_f2d>
 800273c:	f04f 0200 	mov.w	r2, #0
 8002740:	4b20      	ldr	r3, [pc, #128]	; (80027c4 <_Z24temperature_calculationst+0xf8>)
 8002742:	f7fd ff71 	bl	8000628 <__aeabi_dmul>
 8002746:	4602      	mov	r2, r0
 8002748:	460b      	mov	r3, r1
 800274a:	4690      	mov	r8, r2
 800274c:	4699      	mov	r9, r3
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	3b01      	subs	r3, #1
 8002752:	4a1b      	ldr	r2, [pc, #108]	; (80027c0 <_Z24temperature_calculationst+0xf4>)
 8002754:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002758:	ee07 3a90 	vmov	s15, r3
 800275c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002760:	4a17      	ldr	r2, [pc, #92]	; (80027c0 <_Z24temperature_calculationst+0xf4>)
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002768:	ee07 3a90 	vmov	s15, r3
 800276c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002770:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002774:	ee17 0a90 	vmov	r0, s15
 8002778:	f7fd fefe 	bl	8000578 <__aeabi_f2d>
 800277c:	4602      	mov	r2, r0
 800277e:	460b      	mov	r3, r1
 8002780:	4640      	mov	r0, r8
 8002782:	4649      	mov	r1, r9
 8002784:	f7fe f87a 	bl	800087c <__aeabi_ddiv>
 8002788:	4602      	mov	r2, r0
 800278a:	460b      	mov	r3, r1
 800278c:	4620      	mov	r0, r4
 800278e:	4629      	mov	r1, r5
 8002790:	f7fd fd92 	bl	80002b8 <__aeabi_dsub>
 8002794:	4602      	mov	r2, r0
 8002796:	460b      	mov	r3, r1
 8002798:	4610      	mov	r0, r2
 800279a:	4619      	mov	r1, r3
 800279c:	f7fe fa1c 	bl	8000bd8 <__aeabi_d2f>
 80027a0:	4603      	mov	r3, r0
 80027a2:	60fb      	str	r3, [r7, #12]
			break;
 80027a4:	e003      	b.n	80027ae <_Z24temperature_calculationst+0xe2>
	for(unsigned int i = 1; i < 28; i++)
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	3301      	adds	r3, #1
 80027aa:	60bb      	str	r3, [r7, #8]
 80027ac:	e799      	b.n	80026e2 <_Z24temperature_calculationst+0x16>
		}
	}
	return retval;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	ee07 3a90 	vmov	s15, r3
}
 80027b4:	eeb0 0a67 	vmov.f32	s0, s15
 80027b8:	3710      	adds	r7, #16
 80027ba:	46bd      	mov	sp, r7
 80027bc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80027c0:	08014e6c 	.word	0x08014e6c
 80027c4:	40140000 	.word	0x40140000

080027c8 <_Z16get_temperaturesv>:
 * Brief:	Getting proper values of temperatures on every cell in *C
 * Param:	None
 * Retval:	None
 */
void get_temperatures()
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b082      	sub	sp, #8
 80027cc:	af00      	add	r7, sp, #0
	data.temperatures.average = 0;
 80027ce:	4b20      	ldr	r3, [pc, #128]	; (8002850 <_Z16get_temperaturesv+0x88>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	for(unsigned int i = 0; i < NUMBER_OF_TEMPERATURES; i++)
 80027d6:	2300      	movs	r3, #0
 80027d8:	607b      	str	r3, [r7, #4]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2b04      	cmp	r3, #4
 80027de:	d827      	bhi.n	8002830 <_Z16get_temperaturesv+0x68>
	{
		data.temperatures.values[i] = (uint16_t)temperature_calculations(data.temperatures.adc[i]);
 80027e0:	4a1b      	ldr	r2, [pc, #108]	; (8002850 <_Z16get_temperaturesv+0x88>)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	3314      	adds	r3, #20
 80027e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80027ea:	b29b      	uxth	r3, r3
 80027ec:	4618      	mov	r0, r3
 80027ee:	f7ff ff6d 	bl	80026cc <_Z24temperature_calculationst>
 80027f2:	eef0 7a40 	vmov.f32	s15, s0
 80027f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80027fa:	ee17 3a90 	vmov	r3, s15
 80027fe:	b29b      	uxth	r3, r3
 8002800:	b2d9      	uxtb	r1, r3
 8002802:	4a13      	ldr	r2, [pc, #76]	; (8002850 <_Z16get_temperaturesv+0x88>)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	4413      	add	r3, r2
 8002808:	3320      	adds	r3, #32
 800280a:	460a      	mov	r2, r1
 800280c:	701a      	strb	r2, [r3, #0]
		data.temperatures.average += data.temperatures.values[i];
 800280e:	4b10      	ldr	r3, [pc, #64]	; (8002850 <_Z16get_temperaturesv+0x88>)
 8002810:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8002814:	490e      	ldr	r1, [pc, #56]	; (8002850 <_Z16get_temperaturesv+0x88>)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	440b      	add	r3, r1
 800281a:	3320      	adds	r3, #32
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	4413      	add	r3, r2
 8002820:	b2da      	uxtb	r2, r3
 8002822:	4b0b      	ldr	r3, [pc, #44]	; (8002850 <_Z16get_temperaturesv+0x88>)
 8002824:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	for(unsigned int i = 0; i < NUMBER_OF_TEMPERATURES; i++)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	3301      	adds	r3, #1
 800282c:	607b      	str	r3, [r7, #4]
 800282e:	e7d4      	b.n	80027da <_Z16get_temperaturesv+0x12>
	}
	data.temperatures.average = data.temperatures.average / 6;
 8002830:	4b07      	ldr	r3, [pc, #28]	; (8002850 <_Z16get_temperaturesv+0x88>)
 8002832:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8002836:	4a07      	ldr	r2, [pc, #28]	; (8002854 <_Z16get_temperaturesv+0x8c>)
 8002838:	fba2 2303 	umull	r2, r3, r2, r3
 800283c:	089b      	lsrs	r3, r3, #2
 800283e:	b2da      	uxtb	r2, r3
 8002840:	4b03      	ldr	r3, [pc, #12]	; (8002850 <_Z16get_temperaturesv+0x88>)
 8002842:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8002846:	bf00      	nop
 8002848:	3708      	adds	r7, #8
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	200005ec 	.word	0x200005ec
 8002854:	aaaaaaab 	.word	0xaaaaaaab

08002858 <_Z15min_max_voltagev>:
/*
 * Brief:	Finding the highest and the lowest cell voltage and index of the highest one
 * Param:	None
 * Retval:	data.voltages.lowest_cell_voltage, data.voltages.highest_cell_voltage, data.voltages.highest_cell_voltage_index
 */
void min_max_voltage(){
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
	data.voltages.lowest_cell_voltage = data.voltages.cells[0];
 800285e:	4b1b      	ldr	r3, [pc, #108]	; (80028cc <_Z15min_max_voltagev+0x74>)
 8002860:	881a      	ldrh	r2, [r3, #0]
 8002862:	4b1a      	ldr	r3, [pc, #104]	; (80028cc <_Z15min_max_voltagev+0x74>)
 8002864:	835a      	strh	r2, [r3, #26]
	data.voltages.highest_cell_voltage = data.voltages.cells[0];
 8002866:	4b19      	ldr	r3, [pc, #100]	; (80028cc <_Z15min_max_voltagev+0x74>)
 8002868:	881a      	ldrh	r2, [r3, #0]
 800286a:	4b18      	ldr	r3, [pc, #96]	; (80028cc <_Z15min_max_voltagev+0x74>)
 800286c:	839a      	strh	r2, [r3, #28]
	for(unsigned int i = 1; i < NUMBER_OF_CELLS; i++)
 800286e:	2301      	movs	r3, #1
 8002870:	607b      	str	r3, [r7, #4]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2b05      	cmp	r3, #5
 8002876:	d823      	bhi.n	80028c0 <_Z15min_max_voltagev+0x68>
	{
		if(data.voltages.lowest_cell_voltage > data.voltages.cells[i])
 8002878:	4b14      	ldr	r3, [pc, #80]	; (80028cc <_Z15min_max_voltagev+0x74>)
 800287a:	8b5a      	ldrh	r2, [r3, #26]
 800287c:	4913      	ldr	r1, [pc, #76]	; (80028cc <_Z15min_max_voltagev+0x74>)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002884:	429a      	cmp	r2, r3
 8002886:	d905      	bls.n	8002894 <_Z15min_max_voltagev+0x3c>
		{
			data.voltages.lowest_cell_voltage = data.voltages.cells[i];
 8002888:	4a10      	ldr	r2, [pc, #64]	; (80028cc <_Z15min_max_voltagev+0x74>)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002890:	4b0e      	ldr	r3, [pc, #56]	; (80028cc <_Z15min_max_voltagev+0x74>)
 8002892:	835a      	strh	r2, [r3, #26]
		}
		if(data.voltages.highest_cell_voltage < data.voltages.cells[i])
 8002894:	4b0d      	ldr	r3, [pc, #52]	; (80028cc <_Z15min_max_voltagev+0x74>)
 8002896:	8b9a      	ldrh	r2, [r3, #28]
 8002898:	490c      	ldr	r1, [pc, #48]	; (80028cc <_Z15min_max_voltagev+0x74>)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d209      	bcs.n	80028b8 <_Z15min_max_voltagev+0x60>
		{
			data.voltages.highest_cell_voltage = data.voltages.cells[i];
 80028a4:	4a09      	ldr	r2, [pc, #36]	; (80028cc <_Z15min_max_voltagev+0x74>)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80028ac:	4b07      	ldr	r3, [pc, #28]	; (80028cc <_Z15min_max_voltagev+0x74>)
 80028ae:	839a      	strh	r2, [r3, #28]
			data.voltages.highest_cell_voltage_index = i;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	b29a      	uxth	r2, r3
 80028b4:	4b05      	ldr	r3, [pc, #20]	; (80028cc <_Z15min_max_voltagev+0x74>)
 80028b6:	83da      	strh	r2, [r3, #30]
	for(unsigned int i = 1; i < NUMBER_OF_CELLS; i++)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	3301      	adds	r3, #1
 80028bc:	607b      	str	r3, [r7, #4]
 80028be:	e7d8      	b.n	8002872 <_Z15min_max_voltagev+0x1a>
		}
	}
}
 80028c0:	bf00      	nop
 80028c2:	370c      	adds	r7, #12
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr
 80028cc:	200005ec 	.word	0x200005ec

080028d0 <_Z19min_max_temperaturev>:


void min_max_temperature(){
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
	data.temperatures.lowest_temperature = data.temperatures.values[0];
 80028d6:	4b1f      	ldr	r3, [pc, #124]	; (8002954 <_Z19min_max_temperaturev+0x84>)
 80028d8:	f893 2020 	ldrb.w	r2, [r3, #32]
 80028dc:	4b1d      	ldr	r3, [pc, #116]	; (8002954 <_Z19min_max_temperaturev+0x84>)
 80028de:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	data.temperatures.highest_temperature = data.temperatures.values[0];
 80028e2:	4b1c      	ldr	r3, [pc, #112]	; (8002954 <_Z19min_max_temperaturev+0x84>)
 80028e4:	f893 2020 	ldrb.w	r2, [r3, #32]
 80028e8:	4b1a      	ldr	r3, [pc, #104]	; (8002954 <_Z19min_max_temperaturev+0x84>)
 80028ea:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	for(unsigned int i = 1; i < NUMBER_OF_TEMPERATURES; i++)
 80028ee:	2301      	movs	r3, #1
 80028f0:	607b      	str	r3, [r7, #4]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2b04      	cmp	r3, #4
 80028f6:	d827      	bhi.n	8002948 <_Z19min_max_temperaturev+0x78>
	{
		if(data.temperatures.lowest_temperature > data.temperatures.values[i])
 80028f8:	4b16      	ldr	r3, [pc, #88]	; (8002954 <_Z19min_max_temperaturev+0x84>)
 80028fa:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 80028fe:	4915      	ldr	r1, [pc, #84]	; (8002954 <_Z19min_max_temperaturev+0x84>)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	440b      	add	r3, r1
 8002904:	3320      	adds	r3, #32
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	429a      	cmp	r2, r3
 800290a:	d907      	bls.n	800291c <_Z19min_max_temperaturev+0x4c>
		{
			data.temperatures.lowest_temperature = data.temperatures.values[i];
 800290c:	4a11      	ldr	r2, [pc, #68]	; (8002954 <_Z19min_max_temperaturev+0x84>)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4413      	add	r3, r2
 8002912:	3320      	adds	r3, #32
 8002914:	781a      	ldrb	r2, [r3, #0]
 8002916:	4b0f      	ldr	r3, [pc, #60]	; (8002954 <_Z19min_max_temperaturev+0x84>)
 8002918:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		}
		if(data.temperatures.highest_temperature < data.temperatures.values[i])
 800291c:	4b0d      	ldr	r3, [pc, #52]	; (8002954 <_Z19min_max_temperaturev+0x84>)
 800291e:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8002922:	490c      	ldr	r1, [pc, #48]	; (8002954 <_Z19min_max_temperaturev+0x84>)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	440b      	add	r3, r1
 8002928:	3320      	adds	r3, #32
 800292a:	781b      	ldrb	r3, [r3, #0]
 800292c:	429a      	cmp	r2, r3
 800292e:	d207      	bcs.n	8002940 <_Z19min_max_temperaturev+0x70>
		{
			data.temperatures.highest_temperature = data.temperatures.values[i];
 8002930:	4a08      	ldr	r2, [pc, #32]	; (8002954 <_Z19min_max_temperaturev+0x84>)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4413      	add	r3, r2
 8002936:	3320      	adds	r3, #32
 8002938:	781a      	ldrb	r2, [r3, #0]
 800293a:	4b06      	ldr	r3, [pc, #24]	; (8002954 <_Z19min_max_temperaturev+0x84>)
 800293c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	for(unsigned int i = 1; i < NUMBER_OF_TEMPERATURES; i++)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	3301      	adds	r3, #1
 8002944:	607b      	str	r3, [r7, #4]
 8002946:	e7d4      	b.n	80028f2 <_Z19min_max_temperaturev+0x22>
		}
	}
}
 8002948:	bf00      	nop
 800294a:	370c      	adds	r7, #12
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr
 8002954:	200005ec 	.word	0x200005ec

08002958 <_Z16voltage_can_calcv>:

void voltage_can_calc(){
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
	//voltage calculations for CAN
	for(int i = 0; i < NUMBER_OF_CELLS; i++)
 800295e:	2300      	movs	r3, #0
 8002960:	607b      	str	r3, [r7, #4]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2b05      	cmp	r3, #5
 8002966:	dc1e      	bgt.n	80029a6 <_Z16voltage_can_calcv+0x4e>
	{
		data.voltages.total += (uint32_t)data.voltages.cells[i];
 8002968:	4b16      	ldr	r3, [pc, #88]	; (80029c4 <_Z16voltage_can_calcv+0x6c>)
 800296a:	695b      	ldr	r3, [r3, #20]
 800296c:	4915      	ldr	r1, [pc, #84]	; (80029c4 <_Z16voltage_can_calcv+0x6c>)
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8002974:	4413      	add	r3, r2
 8002976:	4a13      	ldr	r2, [pc, #76]	; (80029c4 <_Z16voltage_can_calcv+0x6c>)
 8002978:	6153      	str	r3, [r2, #20]
		data.voltages.cells_can[i] = (uint8_t)data.voltages.cells[i] / 1000;
 800297a:	4a12      	ldr	r2, [pc, #72]	; (80029c4 <_Z16voltage_can_calcv+0x6c>)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002982:	b2db      	uxtb	r3, r3
 8002984:	4a10      	ldr	r2, [pc, #64]	; (80029c8 <_Z16voltage_can_calcv+0x70>)
 8002986:	fb82 1203 	smull	r1, r2, r2, r3
 800298a:	1192      	asrs	r2, r2, #6
 800298c:	17db      	asrs	r3, r3, #31
 800298e:	1ad3      	subs	r3, r2, r3
 8002990:	b2d9      	uxtb	r1, r3
 8002992:	4a0c      	ldr	r2, [pc, #48]	; (80029c4 <_Z16voltage_can_calcv+0x6c>)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	4413      	add	r3, r2
 8002998:	330c      	adds	r3, #12
 800299a:	460a      	mov	r2, r1
 800299c:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < NUMBER_OF_CELLS; i++)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	3301      	adds	r3, #1
 80029a2:	607b      	str	r3, [r7, #4]
 80029a4:	e7dd      	b.n	8002962 <_Z16voltage_can_calcv+0xa>
	}

	data.voltages.total_can = data.voltages.total / 100;
 80029a6:	4b07      	ldr	r3, [pc, #28]	; (80029c4 <_Z16voltage_can_calcv+0x6c>)
 80029a8:	695b      	ldr	r3, [r3, #20]
 80029aa:	4a08      	ldr	r2, [pc, #32]	; (80029cc <_Z16voltage_can_calcv+0x74>)
 80029ac:	fba2 2303 	umull	r2, r3, r2, r3
 80029b0:	095b      	lsrs	r3, r3, #5
 80029b2:	b29a      	uxth	r2, r3
 80029b4:	4b03      	ldr	r3, [pc, #12]	; (80029c4 <_Z16voltage_can_calcv+0x6c>)
 80029b6:	831a      	strh	r2, [r3, #24]
}
 80029b8:	bf00      	nop
 80029ba:	370c      	adds	r7, #12
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr
 80029c4:	200005ec 	.word	0x200005ec
 80029c8:	10624dd3 	.word	0x10624dd3
 80029cc:	51eb851f 	.word	0x51eb851f

080029d0 <_Z18start_ltc_functionPv>:
/**
 * Brief:	ltc_task main function
 * Param:	None
 * Retval:	None
 */
void start_ltc_function(void *argument){
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b082      	sub	sp, #8
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
	  init_PEC15_Table();
 80029d8:	f7ff fa48 	bl	8001e6c <_Z16init_PEC15_Tablev>
	for(;;){

		osDelay(1);
 80029dc:	2001      	movs	r0, #1
 80029de:	f00c f80d 	bl	800e9fc <osDelay>
		LTC_start_cell_adc();
 80029e2:	f7ff fad1 	bl	8001f88 <_Z18LTC_start_cell_adcv>
		osDelay(30);
 80029e6:	201e      	movs	r0, #30
 80029e8:	f00c f808 	bl	800e9fc <osDelay>

		LTC_get_values_adc(data.voltages.cells);
 80029ec:	4805      	ldr	r0, [pc, #20]	; (8002a04 <_Z18start_ltc_functionPv+0x34>)
 80029ee:	f7ff fb5d 	bl	80020ac <_Z18LTC_get_values_adcPt>

		voltage_can_calc();
 80029f2:	f7ff ffb1 	bl	8002958 <_Z16voltage_can_calcv>

		min_max_voltage();
 80029f6:	f7ff ff2f 	bl	8002858 <_Z15min_max_voltagev>

		get_temperatures();
 80029fa:	f7ff fee5 	bl	80027c8 <_Z16get_temperaturesv>

		min_max_temperature();
 80029fe:	f7ff ff67 	bl	80028d0 <_Z19min_max_temperaturev>
		osDelay(1);
 8002a02:	e7eb      	b.n	80029dc <_Z18start_ltc_functionPv+0xc>
 8002a04:	200005ec 	.word	0x200005ec

08002a08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002a0c:	f001 fe91 	bl	8004732 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002a10:	f000 f860 	bl	8002ad4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002a14:	f000 fbe2 	bl	80031dc <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8002a18:	f000 fba2 	bl	8003160 <_ZL11MX_DMA_Initv>
  MX_ADC1_Init();
 8002a1c:	f000 f8be 	bl	8002b9c <_ZL12MX_ADC1_Initv>
  MX_ADC2_Init();
 8002a20:	f000 f942 	bl	8002ca8 <_ZL12MX_ADC2_Initv>
  MX_CAN1_Init();
 8002a24:	f000 f9ae 	bl	8002d84 <_ZL12MX_CAN1_Initv>
  MX_RTC_Init();
 8002a28:	f000 f9e8 	bl	8002dfc <_ZL11MX_RTC_Initv>
  MX_SPI1_Init();
 8002a2c:	f000 fa56 	bl	8002edc <_ZL12MX_SPI1_Initv>
  MX_TIM3_Init();
 8002a30:	f000 fa96 	bl	8002f60 <_ZL12MX_TIM3_Initv>
  MX_TIM6_Init();
 8002a34:	f000 faf2 	bl	800301c <_ZL12MX_TIM6_Initv>
  MX_TIM8_Init();
 8002a38:	f000 fb30 	bl	800309c <_ZL12MX_TIM8_Initv>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002a3c:	f00b ff02 	bl	800e844 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8002a40:	4a15      	ldr	r2, [pc, #84]	; (8002a98 <main+0x90>)
 8002a42:	2100      	movs	r1, #0
 8002a44:	4815      	ldr	r0, [pc, #84]	; (8002a9c <main+0x94>)
 8002a46:	f00b ff47 	bl	800e8d8 <osThreadNew>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	4a14      	ldr	r2, [pc, #80]	; (8002aa0 <main+0x98>)
 8002a4e:	6013      	str	r3, [r2, #0]

  /* creation of ltc_task */
  ltc_taskHandle = osThreadNew(start_ltc_function, NULL, &ltc_task_attributes);
 8002a50:	4a14      	ldr	r2, [pc, #80]	; (8002aa4 <main+0x9c>)
 8002a52:	2100      	movs	r1, #0
 8002a54:	4814      	ldr	r0, [pc, #80]	; (8002aa8 <main+0xa0>)
 8002a56:	f00b ff3f 	bl	800e8d8 <osThreadNew>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	4a13      	ldr	r2, [pc, #76]	; (8002aac <main+0xa4>)
 8002a5e:	6013      	str	r3, [r2, #0]

  /* creation of soc_update_task */
  soc_update_taskHandle = osThreadNew(start_soc_function, NULL, &soc_update_task_attributes);
 8002a60:	4a13      	ldr	r2, [pc, #76]	; (8002ab0 <main+0xa8>)
 8002a62:	2100      	movs	r1, #0
 8002a64:	4813      	ldr	r0, [pc, #76]	; (8002ab4 <main+0xac>)
 8002a66:	f00b ff37 	bl	800e8d8 <osThreadNew>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	4a12      	ldr	r2, [pc, #72]	; (8002ab8 <main+0xb0>)
 8002a6e:	6013      	str	r3, [r2, #0]

  /* creation of balance_task */
  balance_taskHandle = osThreadNew(start_balance_function, NULL, &balance_task_attributes);
 8002a70:	4a12      	ldr	r2, [pc, #72]	; (8002abc <main+0xb4>)
 8002a72:	2100      	movs	r1, #0
 8002a74:	4812      	ldr	r0, [pc, #72]	; (8002ac0 <main+0xb8>)
 8002a76:	f00b ff2f 	bl	800e8d8 <osThreadNew>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	4a11      	ldr	r2, [pc, #68]	; (8002ac4 <main+0xbc>)
 8002a7e:	6013      	str	r3, [r2, #0]

  /* creation of comm_err_task */
  comm_err_taskHandle = osThreadNew(start_comm_err_function, NULL, &comm_err_task_attributes);
 8002a80:	4a11      	ldr	r2, [pc, #68]	; (8002ac8 <main+0xc0>)
 8002a82:	2100      	movs	r1, #0
 8002a84:	4811      	ldr	r0, [pc, #68]	; (8002acc <main+0xc4>)
 8002a86:	f00b ff27 	bl	800e8d8 <osThreadNew>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	4a10      	ldr	r2, [pc, #64]	; (8002ad0 <main+0xc8>)
 8002a8e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8002a90:	f00b fefc 	bl	800e88c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002a94:	e7fe      	b.n	8002a94 <main+0x8c>
 8002a96:	bf00      	nop
 8002a98:	08014f3c 	.word	0x08014f3c
 8002a9c:	080032e9 	.word	0x080032e9
 8002aa0:	200010e0 	.word	0x200010e0
 8002aa4:	08014f60 	.word	0x08014f60
 8002aa8:	080029d1 	.word	0x080029d1
 8002aac:	200010e4 	.word	0x200010e4
 8002ab0:	08014f84 	.word	0x08014f84
 8002ab4:	08003ca5 	.word	0x08003ca5
 8002ab8:	20001344 	.word	0x20001344
 8002abc:	08014fa8 	.word	0x08014fa8
 8002ac0:	08001089 	.word	0x08001089
 8002ac4:	200015a4 	.word	0x200015a4
 8002ac8:	08014fcc 	.word	0x08014fcc
 8002acc:	0800143d 	.word	0x0800143d
 8002ad0:	20001804 	.word	0x20001804

08002ad4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b098      	sub	sp, #96	; 0x60
 8002ad8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002ada:	f107 0318 	add.w	r3, r7, #24
 8002ade:	2248      	movs	r2, #72	; 0x48
 8002ae0:	2100      	movs	r1, #0
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f00f fbac 	bl	8012240 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ae8:	1d3b      	adds	r3, r7, #4
 8002aea:	2200      	movs	r2, #0
 8002aec:	601a      	str	r2, [r3, #0]
 8002aee:	605a      	str	r2, [r3, #4]
 8002af0:	609a      	str	r2, [r3, #8]
 8002af2:	60da      	str	r2, [r3, #12]
 8002af4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002af6:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002afa:	f005 fc3d 	bl	8008378 <HAL_PWREx_ControlVoltageScaling>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	bf14      	ite	ne
 8002b04:	2301      	movne	r3, #1
 8002b06:	2300      	moveq	r3, #0
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d001      	beq.n	8002b12 <SystemClock_Config+0x3e>
  {
    Error_Handler();
 8002b0e:	f000 fc07 	bl	8003320 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSI
 8002b12:	2329      	movs	r3, #41	; 0x29
 8002b14:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002b16:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b1a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002b20:	2301      	movs	r3, #1
 8002b22:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b24:	2302      	movs	r3, #2
 8002b26:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002b28:	2303      	movs	r3, #3
 8002b2a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 2;
 8002b2c:	2302      	movs	r3, #2
 8002b2e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 16;
 8002b30:	2310      	movs	r3, #16
 8002b32:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002b34:	2302      	movs	r3, #2
 8002b36:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002b38:	2302      	movs	r3, #2
 8002b3a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002b3c:	2302      	movs	r3, #2
 8002b3e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b40:	f107 0318 	add.w	r3, r7, #24
 8002b44:	4618      	mov	r0, r3
 8002b46:	f005 fd21 	bl	800858c <HAL_RCC_OscConfig>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	bf14      	ite	ne
 8002b50:	2301      	movne	r3, #1
 8002b52:	2300      	moveq	r3, #0
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d001      	beq.n	8002b5e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8002b5a:	f000 fbe1 	bl	8003320 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b5e:	230f      	movs	r3, #15
 8002b60:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002b62:	2303      	movs	r3, #3
 8002b64:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b66:	2300      	movs	r3, #0
 8002b68:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002b6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b6e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002b70:	2300      	movs	r3, #0
 8002b72:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002b74:	1d3b      	adds	r3, r7, #4
 8002b76:	2103      	movs	r1, #3
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f006 f983 	bl	8008e84 <HAL_RCC_ClockConfig>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	bf14      	ite	ne
 8002b84:	2301      	movne	r3, #1
 8002b86:	2300      	moveq	r3, #0
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d001      	beq.n	8002b92 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8002b8e:	f000 fbc7 	bl	8003320 <Error_Handler>
  }
}
 8002b92:	bf00      	nop
 8002b94:	3760      	adds	r7, #96	; 0x60
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
	...

08002b9c <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b08a      	sub	sp, #40	; 0x28
 8002ba0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8002ba2:	f107 031c 	add.w	r3, r7, #28
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	601a      	str	r2, [r3, #0]
 8002baa:	605a      	str	r2, [r3, #4]
 8002bac:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8002bae:	1d3b      	adds	r3, r7, #4
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	601a      	str	r2, [r3, #0]
 8002bb4:	605a      	str	r2, [r3, #4]
 8002bb6:	609a      	str	r2, [r3, #8]
 8002bb8:	60da      	str	r2, [r3, #12]
 8002bba:	611a      	str	r2, [r3, #16]
 8002bbc:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002bbe:	4b37      	ldr	r3, [pc, #220]	; (8002c9c <_ZL12MX_ADC1_Initv+0x100>)
 8002bc0:	4a37      	ldr	r2, [pc, #220]	; (8002ca0 <_ZL12MX_ADC1_Initv+0x104>)
 8002bc2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8002bc4:	4b35      	ldr	r3, [pc, #212]	; (8002c9c <_ZL12MX_ADC1_Initv+0x100>)
 8002bc6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002bca:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002bcc:	4b33      	ldr	r3, [pc, #204]	; (8002c9c <_ZL12MX_ADC1_Initv+0x100>)
 8002bce:	2200      	movs	r2, #0
 8002bd0:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002bd2:	4b32      	ldr	r3, [pc, #200]	; (8002c9c <_ZL12MX_ADC1_Initv+0x100>)
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002bd8:	4b30      	ldr	r3, [pc, #192]	; (8002c9c <_ZL12MX_ADC1_Initv+0x100>)
 8002bda:	2200      	movs	r2, #0
 8002bdc:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002bde:	4b2f      	ldr	r3, [pc, #188]	; (8002c9c <_ZL12MX_ADC1_Initv+0x100>)
 8002be0:	2204      	movs	r2, #4
 8002be2:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002be4:	4b2d      	ldr	r3, [pc, #180]	; (8002c9c <_ZL12MX_ADC1_Initv+0x100>)
 8002be6:	2200      	movs	r2, #0
 8002be8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002bea:	4b2c      	ldr	r3, [pc, #176]	; (8002c9c <_ZL12MX_ADC1_Initv+0x100>)
 8002bec:	2200      	movs	r2, #0
 8002bee:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8002bf0:	4b2a      	ldr	r3, [pc, #168]	; (8002c9c <_ZL12MX_ADC1_Initv+0x100>)
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002bf6:	4b29      	ldr	r3, [pc, #164]	; (8002c9c <_ZL12MX_ADC1_Initv+0x100>)
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002bfe:	4b27      	ldr	r3, [pc, #156]	; (8002c9c <_ZL12MX_ADC1_Initv+0x100>)
 8002c00:	2200      	movs	r2, #0
 8002c02:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002c04:	4b25      	ldr	r3, [pc, #148]	; (8002c9c <_ZL12MX_ADC1_Initv+0x100>)
 8002c06:	2200      	movs	r2, #0
 8002c08:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002c0a:	4b24      	ldr	r3, [pc, #144]	; (8002c9c <_ZL12MX_ADC1_Initv+0x100>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002c12:	4b22      	ldr	r3, [pc, #136]	; (8002c9c <_ZL12MX_ADC1_Initv+0x100>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8002c18:	4b20      	ldr	r3, [pc, #128]	; (8002c9c <_ZL12MX_ADC1_Initv+0x100>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002c20:	481e      	ldr	r0, [pc, #120]	; (8002c9c <_ZL12MX_ADC1_Initv+0x100>)
 8002c22:	f001 ffc5 	bl	8004bb0 <HAL_ADC_Init>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	bf14      	ite	ne
 8002c2c:	2301      	movne	r3, #1
 8002c2e:	2300      	moveq	r3, #0
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d001      	beq.n	8002c3a <_ZL12MX_ADC1_Initv+0x9e>
  {
    Error_Handler();
 8002c36:	f000 fb73 	bl	8003320 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002c3e:	f107 031c 	add.w	r3, r7, #28
 8002c42:	4619      	mov	r1, r3
 8002c44:	4815      	ldr	r0, [pc, #84]	; (8002c9c <_ZL12MX_ADC1_Initv+0x100>)
 8002c46:	f002 ff91 	bl	8005b6c <HAL_ADCEx_MultiModeConfigChannel>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	bf14      	ite	ne
 8002c50:	2301      	movne	r3, #1
 8002c52:	2300      	moveq	r3, #0
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d001      	beq.n	8002c5e <_ZL12MX_ADC1_Initv+0xc2>
  {
    Error_Handler();
 8002c5a:	f000 fb61 	bl	8003320 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8002c5e:	4b11      	ldr	r3, [pc, #68]	; (8002ca4 <_ZL12MX_ADC1_Initv+0x108>)
 8002c60:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002c62:	2306      	movs	r3, #6
 8002c64:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002c66:	2300      	movs	r3, #0
 8002c68:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002c6a:	237f      	movs	r3, #127	; 0x7f
 8002c6c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002c6e:	2304      	movs	r3, #4
 8002c70:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8002c72:	2300      	movs	r3, #0
 8002c74:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002c76:	1d3b      	adds	r3, r7, #4
 8002c78:	4619      	mov	r1, r3
 8002c7a:	4808      	ldr	r0, [pc, #32]	; (8002c9c <_ZL12MX_ADC1_Initv+0x100>)
 8002c7c:	f002 fb22 	bl	80052c4 <HAL_ADC_ConfigChannel>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	bf14      	ite	ne
 8002c86:	2301      	movne	r3, #1
 8002c88:	2300      	moveq	r3, #0
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d001      	beq.n	8002c94 <_ZL12MX_ADC1_Initv+0xf8>
  {
    Error_Handler();
 8002c90:	f000 fb46 	bl	8003320 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002c94:	bf00      	nop
 8002c96:	3728      	adds	r7, #40	; 0x28
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	20000dac 	.word	0x20000dac
 8002ca0:	50040000 	.word	0x50040000
 8002ca4:	21800100 	.word	0x21800100

08002ca8 <_ZL12MX_ADC2_Initv>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b086      	sub	sp, #24
 8002cac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002cae:	463b      	mov	r3, r7
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	601a      	str	r2, [r3, #0]
 8002cb4:	605a      	str	r2, [r3, #4]
 8002cb6:	609a      	str	r2, [r3, #8]
 8002cb8:	60da      	str	r2, [r3, #12]
 8002cba:	611a      	str	r2, [r3, #16]
 8002cbc:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8002cbe:	4b2e      	ldr	r3, [pc, #184]	; (8002d78 <_ZL12MX_ADC2_Initv+0xd0>)
 8002cc0:	4a2e      	ldr	r2, [pc, #184]	; (8002d7c <_ZL12MX_ADC2_Initv+0xd4>)
 8002cc2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8002cc4:	4b2c      	ldr	r3, [pc, #176]	; (8002d78 <_ZL12MX_ADC2_Initv+0xd0>)
 8002cc6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002cca:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8002ccc:	4b2a      	ldr	r3, [pc, #168]	; (8002d78 <_ZL12MX_ADC2_Initv+0xd0>)
 8002cce:	2200      	movs	r2, #0
 8002cd0:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002cd2:	4b29      	ldr	r3, [pc, #164]	; (8002d78 <_ZL12MX_ADC2_Initv+0xd0>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002cd8:	4b27      	ldr	r3, [pc, #156]	; (8002d78 <_ZL12MX_ADC2_Initv+0xd0>)
 8002cda:	2200      	movs	r2, #0
 8002cdc:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002cde:	4b26      	ldr	r3, [pc, #152]	; (8002d78 <_ZL12MX_ADC2_Initv+0xd0>)
 8002ce0:	2204      	movs	r2, #4
 8002ce2:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8002ce4:	4b24      	ldr	r3, [pc, #144]	; (8002d78 <_ZL12MX_ADC2_Initv+0xd0>)
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8002cea:	4b23      	ldr	r3, [pc, #140]	; (8002d78 <_ZL12MX_ADC2_Initv+0xd0>)
 8002cec:	2200      	movs	r2, #0
 8002cee:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8002cf0:	4b21      	ldr	r3, [pc, #132]	; (8002d78 <_ZL12MX_ADC2_Initv+0xd0>)
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8002cf6:	4b20      	ldr	r3, [pc, #128]	; (8002d78 <_ZL12MX_ADC2_Initv+0xd0>)
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002cfe:	4b1e      	ldr	r3, [pc, #120]	; (8002d78 <_ZL12MX_ADC2_Initv+0xd0>)
 8002d00:	2200      	movs	r2, #0
 8002d02:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002d04:	4b1c      	ldr	r3, [pc, #112]	; (8002d78 <_ZL12MX_ADC2_Initv+0xd0>)
 8002d06:	2200      	movs	r2, #0
 8002d08:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8002d0a:	4b1b      	ldr	r3, [pc, #108]	; (8002d78 <_ZL12MX_ADC2_Initv+0xd0>)
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002d12:	4b19      	ldr	r3, [pc, #100]	; (8002d78 <_ZL12MX_ADC2_Initv+0xd0>)
 8002d14:	2200      	movs	r2, #0
 8002d16:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8002d18:	4b17      	ldr	r3, [pc, #92]	; (8002d78 <_ZL12MX_ADC2_Initv+0xd0>)
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002d20:	4815      	ldr	r0, [pc, #84]	; (8002d78 <_ZL12MX_ADC2_Initv+0xd0>)
 8002d22:	f001 ff45 	bl	8004bb0 <HAL_ADC_Init>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	bf14      	ite	ne
 8002d2c:	2301      	movne	r3, #1
 8002d2e:	2300      	moveq	r3, #0
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d001      	beq.n	8002d3a <_ZL12MX_ADC2_Initv+0x92>
  {
    Error_Handler();
 8002d36:	f000 faf3 	bl	8003320 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8002d3a:	4b11      	ldr	r3, [pc, #68]	; (8002d80 <_ZL12MX_ADC2_Initv+0xd8>)
 8002d3c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002d3e:	2306      	movs	r3, #6
 8002d40:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002d42:	2300      	movs	r3, #0
 8002d44:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002d46:	237f      	movs	r3, #127	; 0x7f
 8002d48:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002d4a:	2304      	movs	r3, #4
 8002d4c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002d52:	463b      	mov	r3, r7
 8002d54:	4619      	mov	r1, r3
 8002d56:	4808      	ldr	r0, [pc, #32]	; (8002d78 <_ZL12MX_ADC2_Initv+0xd0>)
 8002d58:	f002 fab4 	bl	80052c4 <HAL_ADC_ConfigChannel>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	bf14      	ite	ne
 8002d62:	2301      	movne	r3, #1
 8002d64:	2300      	moveq	r3, #0
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d001      	beq.n	8002d70 <_ZL12MX_ADC2_Initv+0xc8>
  {
    Error_Handler();
 8002d6c:	f000 fad8 	bl	8003320 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8002d70:	bf00      	nop
 8002d72:	3718      	adds	r7, #24
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	20000e14 	.word	0x20000e14
 8002d7c:	50040100 	.word	0x50040100
 8002d80:	43210000 	.word	0x43210000

08002d84 <_ZL12MX_CAN1_Initv>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8002d88:	4b1a      	ldr	r3, [pc, #104]	; (8002df4 <_ZL12MX_CAN1_Initv+0x70>)
 8002d8a:	4a1b      	ldr	r2, [pc, #108]	; (8002df8 <_ZL12MX_CAN1_Initv+0x74>)
 8002d8c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 2;
 8002d8e:	4b19      	ldr	r3, [pc, #100]	; (8002df4 <_ZL12MX_CAN1_Initv+0x70>)
 8002d90:	2202      	movs	r2, #2
 8002d92:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8002d94:	4b17      	ldr	r3, [pc, #92]	; (8002df4 <_ZL12MX_CAN1_Initv+0x70>)
 8002d96:	2200      	movs	r2, #0
 8002d98:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002d9a:	4b16      	ldr	r3, [pc, #88]	; (8002df4 <_ZL12MX_CAN1_Initv+0x70>)
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8002da0:	4b14      	ldr	r3, [pc, #80]	; (8002df4 <_ZL12MX_CAN1_Initv+0x70>)
 8002da2:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8002da6:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8002da8:	4b12      	ldr	r3, [pc, #72]	; (8002df4 <_ZL12MX_CAN1_Initv+0x70>)
 8002daa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002dae:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8002db0:	4b10      	ldr	r3, [pc, #64]	; (8002df4 <_ZL12MX_CAN1_Initv+0x70>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8002db6:	4b0f      	ldr	r3, [pc, #60]	; (8002df4 <_ZL12MX_CAN1_Initv+0x70>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8002dbc:	4b0d      	ldr	r3, [pc, #52]	; (8002df4 <_ZL12MX_CAN1_Initv+0x70>)
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8002dc2:	4b0c      	ldr	r3, [pc, #48]	; (8002df4 <_ZL12MX_CAN1_Initv+0x70>)
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8002dc8:	4b0a      	ldr	r3, [pc, #40]	; (8002df4 <_ZL12MX_CAN1_Initv+0x70>)
 8002dca:	2200      	movs	r2, #0
 8002dcc:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8002dce:	4b09      	ldr	r3, [pc, #36]	; (8002df4 <_ZL12MX_CAN1_Initv+0x70>)
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8002dd4:	4807      	ldr	r0, [pc, #28]	; (8002df4 <_ZL12MX_CAN1_Initv+0x70>)
 8002dd6:	f002 ff6d 	bl	8005cb4 <HAL_CAN_Init>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	bf14      	ite	ne
 8002de0:	2301      	movne	r3, #1
 8002de2:	2300      	moveq	r3, #0
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d001      	beq.n	8002dee <_ZL12MX_CAN1_Initv+0x6a>
  {
    Error_Handler();
 8002dea:	f000 fa99 	bl	8003320 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8002dee:	bf00      	nop
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	20000f3c 	.word	0x20000f3c
 8002df8:	40006400 	.word	0x40006400

08002dfc <_ZL11MX_RTC_Initv>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b086      	sub	sp, #24
 8002e00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002e02:	1d3b      	adds	r3, r7, #4
 8002e04:	2200      	movs	r2, #0
 8002e06:	601a      	str	r2, [r3, #0]
 8002e08:	605a      	str	r2, [r3, #4]
 8002e0a:	609a      	str	r2, [r3, #8]
 8002e0c:	60da      	str	r2, [r3, #12]
 8002e0e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8002e10:	2300      	movs	r3, #0
 8002e12:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002e14:	4b2f      	ldr	r3, [pc, #188]	; (8002ed4 <_ZL11MX_RTC_Initv+0xd8>)
 8002e16:	4a30      	ldr	r2, [pc, #192]	; (8002ed8 <_ZL11MX_RTC_Initv+0xdc>)
 8002e18:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002e1a:	4b2e      	ldr	r3, [pc, #184]	; (8002ed4 <_ZL11MX_RTC_Initv+0xd8>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8002e20:	4b2c      	ldr	r3, [pc, #176]	; (8002ed4 <_ZL11MX_RTC_Initv+0xd8>)
 8002e22:	227f      	movs	r2, #127	; 0x7f
 8002e24:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8002e26:	4b2b      	ldr	r3, [pc, #172]	; (8002ed4 <_ZL11MX_RTC_Initv+0xd8>)
 8002e28:	22ff      	movs	r2, #255	; 0xff
 8002e2a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002e2c:	4b29      	ldr	r3, [pc, #164]	; (8002ed4 <_ZL11MX_RTC_Initv+0xd8>)
 8002e2e:	2200      	movs	r2, #0
 8002e30:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002e32:	4b28      	ldr	r3, [pc, #160]	; (8002ed4 <_ZL11MX_RTC_Initv+0xd8>)
 8002e34:	2200      	movs	r2, #0
 8002e36:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002e38:	4b26      	ldr	r3, [pc, #152]	; (8002ed4 <_ZL11MX_RTC_Initv+0xd8>)
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002e3e:	4b25      	ldr	r3, [pc, #148]	; (8002ed4 <_ZL11MX_RTC_Initv+0xd8>)
 8002e40:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002e44:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8002e46:	4b23      	ldr	r3, [pc, #140]	; (8002ed4 <_ZL11MX_RTC_Initv+0xd8>)
 8002e48:	2200      	movs	r2, #0
 8002e4a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002e4c:	4821      	ldr	r0, [pc, #132]	; (8002ed4 <_ZL11MX_RTC_Initv+0xd8>)
 8002e4e:	f007 f843 	bl	8009ed8 <HAL_RTC_Init>
 8002e52:	4603      	mov	r3, r0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	bf14      	ite	ne
 8002e58:	2301      	movne	r3, #1
 8002e5a:	2300      	moveq	r3, #0
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d001      	beq.n	8002e66 <_ZL11MX_RTC_Initv+0x6a>
  {
    Error_Handler();
 8002e62:	f000 fa5d 	bl	8003320 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8002e66:	2300      	movs	r3, #0
 8002e68:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002e72:	2300      	movs	r3, #0
 8002e74:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002e76:	2300      	movs	r3, #0
 8002e78:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002e7a:	1d3b      	adds	r3, r7, #4
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	4619      	mov	r1, r3
 8002e80:	4814      	ldr	r0, [pc, #80]	; (8002ed4 <_ZL11MX_RTC_Initv+0xd8>)
 8002e82:	f007 f8b9 	bl	8009ff8 <HAL_RTC_SetTime>
 8002e86:	4603      	mov	r3, r0
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	bf14      	ite	ne
 8002e8c:	2301      	movne	r3, #1
 8002e8e:	2300      	moveq	r3, #0
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d001      	beq.n	8002e9a <_ZL11MX_RTC_Initv+0x9e>
  {
    Error_Handler();
 8002e96:	f000 fa43 	bl	8003320 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002eaa:	463b      	mov	r3, r7
 8002eac:	2201      	movs	r2, #1
 8002eae:	4619      	mov	r1, r3
 8002eb0:	4808      	ldr	r0, [pc, #32]	; (8002ed4 <_ZL11MX_RTC_Initv+0xd8>)
 8002eb2:	f007 f941 	bl	800a138 <HAL_RTC_SetDate>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	bf14      	ite	ne
 8002ebc:	2301      	movne	r3, #1
 8002ebe:	2300      	moveq	r3, #0
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d001      	beq.n	8002eca <_ZL11MX_RTC_Initv+0xce>
  {
    Error_Handler();
 8002ec6:	f000 fa2b 	bl	8003320 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002eca:	bf00      	nop
 8002ecc:	3718      	adds	r7, #24
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	20000f64 	.word	0x20000f64
 8002ed8:	40002800 	.word	0x40002800

08002edc <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002ee0:	4b1d      	ldr	r3, [pc, #116]	; (8002f58 <_ZL12MX_SPI1_Initv+0x7c>)
 8002ee2:	4a1e      	ldr	r2, [pc, #120]	; (8002f5c <_ZL12MX_SPI1_Initv+0x80>)
 8002ee4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002ee6:	4b1c      	ldr	r3, [pc, #112]	; (8002f58 <_ZL12MX_SPI1_Initv+0x7c>)
 8002ee8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002eec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002eee:	4b1a      	ldr	r3, [pc, #104]	; (8002f58 <_ZL12MX_SPI1_Initv+0x7c>)
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002ef4:	4b18      	ldr	r3, [pc, #96]	; (8002f58 <_ZL12MX_SPI1_Initv+0x7c>)
 8002ef6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002efa:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002efc:	4b16      	ldr	r3, [pc, #88]	; (8002f58 <_ZL12MX_SPI1_Initv+0x7c>)
 8002efe:	2202      	movs	r2, #2
 8002f00:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002f02:	4b15      	ldr	r3, [pc, #84]	; (8002f58 <_ZL12MX_SPI1_Initv+0x7c>)
 8002f04:	2201      	movs	r2, #1
 8002f06:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002f08:	4b13      	ldr	r3, [pc, #76]	; (8002f58 <_ZL12MX_SPI1_Initv+0x7c>)
 8002f0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f0e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8002f10:	4b11      	ldr	r3, [pc, #68]	; (8002f58 <_ZL12MX_SPI1_Initv+0x7c>)
 8002f12:	2228      	movs	r2, #40	; 0x28
 8002f14:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002f16:	4b10      	ldr	r3, [pc, #64]	; (8002f58 <_ZL12MX_SPI1_Initv+0x7c>)
 8002f18:	2200      	movs	r2, #0
 8002f1a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002f1c:	4b0e      	ldr	r3, [pc, #56]	; (8002f58 <_ZL12MX_SPI1_Initv+0x7c>)
 8002f1e:	2200      	movs	r2, #0
 8002f20:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f22:	4b0d      	ldr	r3, [pc, #52]	; (8002f58 <_ZL12MX_SPI1_Initv+0x7c>)
 8002f24:	2200      	movs	r2, #0
 8002f26:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002f28:	4b0b      	ldr	r3, [pc, #44]	; (8002f58 <_ZL12MX_SPI1_Initv+0x7c>)
 8002f2a:	2207      	movs	r2, #7
 8002f2c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002f2e:	4b0a      	ldr	r3, [pc, #40]	; (8002f58 <_ZL12MX_SPI1_Initv+0x7c>)
 8002f30:	2200      	movs	r2, #0
 8002f32:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002f34:	4b08      	ldr	r3, [pc, #32]	; (8002f58 <_ZL12MX_SPI1_Initv+0x7c>)
 8002f36:	2200      	movs	r2, #0
 8002f38:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002f3a:	4807      	ldr	r0, [pc, #28]	; (8002f58 <_ZL12MX_SPI1_Initv+0x7c>)
 8002f3c:	f007 fa3e 	bl	800a3bc <HAL_SPI_Init>
 8002f40:	4603      	mov	r3, r0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	bf14      	ite	ne
 8002f46:	2301      	movne	r3, #1
 8002f48:	2300      	moveq	r3, #0
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d001      	beq.n	8002f54 <_ZL12MX_SPI1_Initv+0x78>
  {
    Error_Handler();
 8002f50:	f000 f9e6 	bl	8003320 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002f54:	bf00      	nop
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	20000f98 	.word	0x20000f98
 8002f5c:	40013000 	.word	0x40013000

08002f60 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b088      	sub	sp, #32
 8002f64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f66:	f107 0310 	add.w	r3, r7, #16
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	601a      	str	r2, [r3, #0]
 8002f6e:	605a      	str	r2, [r3, #4]
 8002f70:	609a      	str	r2, [r3, #8]
 8002f72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f74:	1d3b      	adds	r3, r7, #4
 8002f76:	2200      	movs	r2, #0
 8002f78:	601a      	str	r2, [r3, #0]
 8002f7a:	605a      	str	r2, [r3, #4]
 8002f7c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002f7e:	4b25      	ldr	r3, [pc, #148]	; (8003014 <_ZL12MX_TIM3_Initv+0xb4>)
 8002f80:	4a25      	ldr	r2, [pc, #148]	; (8003018 <_ZL12MX_TIM3_Initv+0xb8>)
 8002f82:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 6399;
 8002f84:	4b23      	ldr	r3, [pc, #140]	; (8003014 <_ZL12MX_TIM3_Initv+0xb4>)
 8002f86:	f641 02ff 	movw	r2, #6399	; 0x18ff
 8002f8a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f8c:	4b21      	ldr	r3, [pc, #132]	; (8003014 <_ZL12MX_TIM3_Initv+0xb4>)
 8002f8e:	2200      	movs	r2, #0
 8002f90:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 49;
 8002f92:	4b20      	ldr	r3, [pc, #128]	; (8003014 <_ZL12MX_TIM3_Initv+0xb4>)
 8002f94:	2231      	movs	r2, #49	; 0x31
 8002f96:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f98:	4b1e      	ldr	r3, [pc, #120]	; (8003014 <_ZL12MX_TIM3_Initv+0xb4>)
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f9e:	4b1d      	ldr	r3, [pc, #116]	; (8003014 <_ZL12MX_TIM3_Initv+0xb4>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002fa4:	481b      	ldr	r0, [pc, #108]	; (8003014 <_ZL12MX_TIM3_Initv+0xb4>)
 8002fa6:	f007 ff91 	bl	800aecc <HAL_TIM_Base_Init>
 8002faa:	4603      	mov	r3, r0
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	bf14      	ite	ne
 8002fb0:	2301      	movne	r3, #1
 8002fb2:	2300      	moveq	r3, #0
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d001      	beq.n	8002fbe <_ZL12MX_TIM3_Initv+0x5e>
  {
    Error_Handler();
 8002fba:	f000 f9b1 	bl	8003320 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002fbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002fc2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002fc4:	f107 0310 	add.w	r3, r7, #16
 8002fc8:	4619      	mov	r1, r3
 8002fca:	4812      	ldr	r0, [pc, #72]	; (8003014 <_ZL12MX_TIM3_Initv+0xb4>)
 8002fcc:	f008 f965 	bl	800b29a <HAL_TIM_ConfigClockSource>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	bf14      	ite	ne
 8002fd6:	2301      	movne	r3, #1
 8002fd8:	2300      	moveq	r3, #0
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d001      	beq.n	8002fe4 <_ZL12MX_TIM3_Initv+0x84>
  {
    Error_Handler();
 8002fe0:	f000 f99e 	bl	8003320 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002fec:	1d3b      	adds	r3, r7, #4
 8002fee:	4619      	mov	r1, r3
 8002ff0:	4808      	ldr	r0, [pc, #32]	; (8003014 <_ZL12MX_TIM3_Initv+0xb4>)
 8002ff2:	f008 fb77 	bl	800b6e4 <HAL_TIMEx_MasterConfigSynchronization>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	bf14      	ite	ne
 8002ffc:	2301      	movne	r3, #1
 8002ffe:	2300      	moveq	r3, #0
 8003000:	b2db      	uxtb	r3, r3
 8003002:	2b00      	cmp	r3, #0
 8003004:	d001      	beq.n	800300a <_ZL12MX_TIM3_Initv+0xaa>
  {
    Error_Handler();
 8003006:	f000 f98b 	bl	8003320 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800300a:	bf00      	nop
 800300c:	3720      	adds	r7, #32
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	20000ffc 	.word	0x20000ffc
 8003018:	40000400 	.word	0x40000400

0800301c <_ZL12MX_TIM6_Initv>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b084      	sub	sp, #16
 8003020:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003022:	1d3b      	adds	r3, r7, #4
 8003024:	2200      	movs	r2, #0
 8003026:	601a      	str	r2, [r3, #0]
 8003028:	605a      	str	r2, [r3, #4]
 800302a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800302c:	4b19      	ldr	r3, [pc, #100]	; (8003094 <_ZL12MX_TIM6_Initv+0x78>)
 800302e:	4a1a      	ldr	r2, [pc, #104]	; (8003098 <_ZL12MX_TIM6_Initv+0x7c>)
 8003030:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 2399;
 8003032:	4b18      	ldr	r3, [pc, #96]	; (8003094 <_ZL12MX_TIM6_Initv+0x78>)
 8003034:	f640 125f 	movw	r2, #2399	; 0x95f
 8003038:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800303a:	4b16      	ldr	r3, [pc, #88]	; (8003094 <_ZL12MX_TIM6_Initv+0x78>)
 800303c:	2200      	movs	r2, #0
 800303e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9;
 8003040:	4b14      	ldr	r3, [pc, #80]	; (8003094 <_ZL12MX_TIM6_Initv+0x78>)
 8003042:	2209      	movs	r2, #9
 8003044:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003046:	4b13      	ldr	r3, [pc, #76]	; (8003094 <_ZL12MX_TIM6_Initv+0x78>)
 8003048:	2200      	movs	r2, #0
 800304a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800304c:	4811      	ldr	r0, [pc, #68]	; (8003094 <_ZL12MX_TIM6_Initv+0x78>)
 800304e:	f007 ff3d 	bl	800aecc <HAL_TIM_Base_Init>
 8003052:	4603      	mov	r3, r0
 8003054:	2b00      	cmp	r3, #0
 8003056:	bf14      	ite	ne
 8003058:	2301      	movne	r3, #1
 800305a:	2300      	moveq	r3, #0
 800305c:	b2db      	uxtb	r3, r3
 800305e:	2b00      	cmp	r3, #0
 8003060:	d001      	beq.n	8003066 <_ZL12MX_TIM6_Initv+0x4a>
  {
    Error_Handler();
 8003062:	f000 f95d 	bl	8003320 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003066:	2320      	movs	r3, #32
 8003068:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800306a:	2300      	movs	r3, #0
 800306c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800306e:	1d3b      	adds	r3, r7, #4
 8003070:	4619      	mov	r1, r3
 8003072:	4808      	ldr	r0, [pc, #32]	; (8003094 <_ZL12MX_TIM6_Initv+0x78>)
 8003074:	f008 fb36 	bl	800b6e4 <HAL_TIMEx_MasterConfigSynchronization>
 8003078:	4603      	mov	r3, r0
 800307a:	2b00      	cmp	r3, #0
 800307c:	bf14      	ite	ne
 800307e:	2301      	movne	r3, #1
 8003080:	2300      	moveq	r3, #0
 8003082:	b2db      	uxtb	r3, r3
 8003084:	2b00      	cmp	r3, #0
 8003086:	d001      	beq.n	800308c <_ZL12MX_TIM6_Initv+0x70>
  {
    Error_Handler();
 8003088:	f000 f94a 	bl	8003320 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800308c:	bf00      	nop
 800308e:	3710      	adds	r7, #16
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}
 8003094:	20001048 	.word	0x20001048
 8003098:	40001000 	.word	0x40001000

0800309c <_ZL12MX_TIM8_Initv>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b088      	sub	sp, #32
 80030a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80030a2:	f107 0310 	add.w	r3, r7, #16
 80030a6:	2200      	movs	r2, #0
 80030a8:	601a      	str	r2, [r3, #0]
 80030aa:	605a      	str	r2, [r3, #4]
 80030ac:	609a      	str	r2, [r3, #8]
 80030ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80030b0:	1d3b      	adds	r3, r7, #4
 80030b2:	2200      	movs	r2, #0
 80030b4:	601a      	str	r2, [r3, #0]
 80030b6:	605a      	str	r2, [r3, #4]
 80030b8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80030ba:	4b27      	ldr	r3, [pc, #156]	; (8003158 <_ZL12MX_TIM8_Initv+0xbc>)
 80030bc:	4a27      	ldr	r2, [pc, #156]	; (800315c <_ZL12MX_TIM8_Initv+0xc0>)
 80030be:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 95;
 80030c0:	4b25      	ldr	r3, [pc, #148]	; (8003158 <_ZL12MX_TIM8_Initv+0xbc>)
 80030c2:	225f      	movs	r2, #95	; 0x5f
 80030c4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030c6:	4b24      	ldr	r3, [pc, #144]	; (8003158 <_ZL12MX_TIM8_Initv+0xbc>)
 80030c8:	2200      	movs	r2, #0
 80030ca:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 49;
 80030cc:	4b22      	ldr	r3, [pc, #136]	; (8003158 <_ZL12MX_TIM8_Initv+0xbc>)
 80030ce:	2231      	movs	r2, #49	; 0x31
 80030d0:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030d2:	4b21      	ldr	r3, [pc, #132]	; (8003158 <_ZL12MX_TIM8_Initv+0xbc>)
 80030d4:	2200      	movs	r2, #0
 80030d6:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80030d8:	4b1f      	ldr	r3, [pc, #124]	; (8003158 <_ZL12MX_TIM8_Initv+0xbc>)
 80030da:	2200      	movs	r2, #0
 80030dc:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030de:	4b1e      	ldr	r3, [pc, #120]	; (8003158 <_ZL12MX_TIM8_Initv+0xbc>)
 80030e0:	2200      	movs	r2, #0
 80030e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80030e4:	481c      	ldr	r0, [pc, #112]	; (8003158 <_ZL12MX_TIM8_Initv+0xbc>)
 80030e6:	f007 fef1 	bl	800aecc <HAL_TIM_Base_Init>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	bf14      	ite	ne
 80030f0:	2301      	movne	r3, #1
 80030f2:	2300      	moveq	r3, #0
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d001      	beq.n	80030fe <_ZL12MX_TIM8_Initv+0x62>
  {
    Error_Handler();
 80030fa:	f000 f911 	bl	8003320 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80030fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003102:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8003104:	f107 0310 	add.w	r3, r7, #16
 8003108:	4619      	mov	r1, r3
 800310a:	4813      	ldr	r0, [pc, #76]	; (8003158 <_ZL12MX_TIM8_Initv+0xbc>)
 800310c:	f008 f8c5 	bl	800b29a <HAL_TIM_ConfigClockSource>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	bf14      	ite	ne
 8003116:	2301      	movne	r3, #1
 8003118:	2300      	moveq	r3, #0
 800311a:	b2db      	uxtb	r3, r3
 800311c:	2b00      	cmp	r3, #0
 800311e:	d001      	beq.n	8003124 <_ZL12MX_TIM8_Initv+0x88>
  {
    Error_Handler();
 8003120:	f000 f8fe 	bl	8003320 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003124:	2320      	movs	r3, #32
 8003126:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_UPDATE;
 8003128:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800312c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800312e:	2300      	movs	r3, #0
 8003130:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003132:	1d3b      	adds	r3, r7, #4
 8003134:	4619      	mov	r1, r3
 8003136:	4808      	ldr	r0, [pc, #32]	; (8003158 <_ZL12MX_TIM8_Initv+0xbc>)
 8003138:	f008 fad4 	bl	800b6e4 <HAL_TIMEx_MasterConfigSynchronization>
 800313c:	4603      	mov	r3, r0
 800313e:	2b00      	cmp	r3, #0
 8003140:	bf14      	ite	ne
 8003142:	2301      	movne	r3, #1
 8003144:	2300      	moveq	r3, #0
 8003146:	b2db      	uxtb	r3, r3
 8003148:	2b00      	cmp	r3, #0
 800314a:	d001      	beq.n	8003150 <_ZL12MX_TIM8_Initv+0xb4>
  {
    Error_Handler();
 800314c:	f000 f8e8 	bl	8003320 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8003150:	bf00      	nop
 8003152:	3720      	adds	r7, #32
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}
 8003158:	20001094 	.word	0x20001094
 800315c:	40013400 	.word	0x40013400

08003160 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b084      	sub	sp, #16
 8003164:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8003166:	4b1c      	ldr	r3, [pc, #112]	; (80031d8 <_ZL11MX_DMA_Initv+0x78>)
 8003168:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800316a:	4a1b      	ldr	r2, [pc, #108]	; (80031d8 <_ZL11MX_DMA_Initv+0x78>)
 800316c:	f043 0304 	orr.w	r3, r3, #4
 8003170:	6493      	str	r3, [r2, #72]	; 0x48
 8003172:	4b19      	ldr	r3, [pc, #100]	; (80031d8 <_ZL11MX_DMA_Initv+0x78>)
 8003174:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003176:	f003 0304 	and.w	r3, r3, #4
 800317a:	60fb      	str	r3, [r7, #12]
 800317c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800317e:	4b16      	ldr	r3, [pc, #88]	; (80031d8 <_ZL11MX_DMA_Initv+0x78>)
 8003180:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003182:	4a15      	ldr	r2, [pc, #84]	; (80031d8 <_ZL11MX_DMA_Initv+0x78>)
 8003184:	f043 0301 	orr.w	r3, r3, #1
 8003188:	6493      	str	r3, [r2, #72]	; 0x48
 800318a:	4b13      	ldr	r3, [pc, #76]	; (80031d8 <_ZL11MX_DMA_Initv+0x78>)
 800318c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800318e:	f003 0301 	and.w	r3, r3, #1
 8003192:	60bb      	str	r3, [r7, #8]
 8003194:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003196:	4b10      	ldr	r3, [pc, #64]	; (80031d8 <_ZL11MX_DMA_Initv+0x78>)
 8003198:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800319a:	4a0f      	ldr	r2, [pc, #60]	; (80031d8 <_ZL11MX_DMA_Initv+0x78>)
 800319c:	f043 0302 	orr.w	r3, r3, #2
 80031a0:	6493      	str	r3, [r2, #72]	; 0x48
 80031a2:	4b0d      	ldr	r3, [pc, #52]	; (80031d8 <_ZL11MX_DMA_Initv+0x78>)
 80031a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031a6:	f003 0302 	and.w	r3, r3, #2
 80031aa:	607b      	str	r3, [r7, #4]
 80031ac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80031ae:	2200      	movs	r2, #0
 80031b0:	2105      	movs	r1, #5
 80031b2:	200b      	movs	r0, #11
 80031b4:	f003 fb42 	bl	800683c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80031b8:	200b      	movs	r0, #11
 80031ba:	f003 fb5b 	bl	8006874 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 5, 0);
 80031be:	2200      	movs	r2, #0
 80031c0:	2105      	movs	r1, #5
 80031c2:	2038      	movs	r0, #56	; 0x38
 80031c4:	f003 fb3a 	bl	800683c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 80031c8:	2038      	movs	r0, #56	; 0x38
 80031ca:	f003 fb53 	bl	8006874 <HAL_NVIC_EnableIRQ>

}
 80031ce:	bf00      	nop
 80031d0:	3710      	adds	r7, #16
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	bf00      	nop
 80031d8:	40021000 	.word	0x40021000

080031dc <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b08a      	sub	sp, #40	; 0x28
 80031e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031e2:	f107 0314 	add.w	r3, r7, #20
 80031e6:	2200      	movs	r2, #0
 80031e8:	601a      	str	r2, [r3, #0]
 80031ea:	605a      	str	r2, [r3, #4]
 80031ec:	609a      	str	r2, [r3, #8]
 80031ee:	60da      	str	r2, [r3, #12]
 80031f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80031f2:	4b3a      	ldr	r3, [pc, #232]	; (80032dc <_ZL12MX_GPIO_Initv+0x100>)
 80031f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031f6:	4a39      	ldr	r2, [pc, #228]	; (80032dc <_ZL12MX_GPIO_Initv+0x100>)
 80031f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80031fe:	4b37      	ldr	r3, [pc, #220]	; (80032dc <_ZL12MX_GPIO_Initv+0x100>)
 8003200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003202:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003206:	613b      	str	r3, [r7, #16]
 8003208:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800320a:	4b34      	ldr	r3, [pc, #208]	; (80032dc <_ZL12MX_GPIO_Initv+0x100>)
 800320c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800320e:	4a33      	ldr	r2, [pc, #204]	; (80032dc <_ZL12MX_GPIO_Initv+0x100>)
 8003210:	f043 0301 	orr.w	r3, r3, #1
 8003214:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003216:	4b31      	ldr	r3, [pc, #196]	; (80032dc <_ZL12MX_GPIO_Initv+0x100>)
 8003218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800321a:	f003 0301 	and.w	r3, r3, #1
 800321e:	60fb      	str	r3, [r7, #12]
 8003220:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003222:	4b2e      	ldr	r3, [pc, #184]	; (80032dc <_ZL12MX_GPIO_Initv+0x100>)
 8003224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003226:	4a2d      	ldr	r2, [pc, #180]	; (80032dc <_ZL12MX_GPIO_Initv+0x100>)
 8003228:	f043 0304 	orr.w	r3, r3, #4
 800322c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800322e:	4b2b      	ldr	r3, [pc, #172]	; (80032dc <_ZL12MX_GPIO_Initv+0x100>)
 8003230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003232:	f003 0304 	and.w	r3, r3, #4
 8003236:	60bb      	str	r3, [r7, #8]
 8003238:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800323a:	4b28      	ldr	r3, [pc, #160]	; (80032dc <_ZL12MX_GPIO_Initv+0x100>)
 800323c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800323e:	4a27      	ldr	r2, [pc, #156]	; (80032dc <_ZL12MX_GPIO_Initv+0x100>)
 8003240:	f043 0302 	orr.w	r3, r3, #2
 8003244:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003246:	4b25      	ldr	r3, [pc, #148]	; (80032dc <_ZL12MX_GPIO_Initv+0x100>)
 8003248:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800324a:	f003 0302 	and.w	r3, r3, #2
 800324e:	607b      	str	r3, [r7, #4]
 8003250:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EFUSE_Pin|SPI1_CS_Pin, GPIO_PIN_RESET);
 8003252:	2200      	movs	r2, #0
 8003254:	f248 0104 	movw	r1, #32772	; 0x8004
 8003258:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800325c:	f003 fe7c 	bl	8006f58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, INTERLOCK_Pin|FUSE_VOLTAGE_Pin, GPIO_PIN_RESET);
 8003260:	2200      	movs	r2, #0
 8003262:	f640 0104 	movw	r1, #2052	; 0x804
 8003266:	481e      	ldr	r0, [pc, #120]	; (80032e0 <_ZL12MX_GPIO_Initv+0x104>)
 8003268:	f003 fe76 	bl	8006f58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin, GPIO_PIN_RESET);
 800326c:	2200      	movs	r2, #0
 800326e:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8003272:	481c      	ldr	r0, [pc, #112]	; (80032e4 <_ZL12MX_GPIO_Initv+0x108>)
 8003274:	f003 fe70 	bl	8006f58 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : EFUSE_Pin SPI1_CS_Pin */
  GPIO_InitStruct.Pin = EFUSE_Pin|SPI1_CS_Pin;
 8003278:	f248 0304 	movw	r3, #32772	; 0x8004
 800327c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800327e:	2301      	movs	r3, #1
 8003280:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003282:	2300      	movs	r3, #0
 8003284:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003286:	2300      	movs	r3, #0
 8003288:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800328a:	f107 0314 	add.w	r3, r7, #20
 800328e:	4619      	mov	r1, r3
 8003290:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003294:	f003 fcb6 	bl	8006c04 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERLOCK_Pin FUSE_VOLTAGE_Pin */
  GPIO_InitStruct.Pin = INTERLOCK_Pin|FUSE_VOLTAGE_Pin;
 8003298:	f640 0304 	movw	r3, #2052	; 0x804
 800329c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800329e:	2301      	movs	r3, #1
 80032a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032a2:	2300      	movs	r3, #0
 80032a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032a6:	2300      	movs	r3, #0
 80032a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032aa:	f107 0314 	add.w	r3, r7, #20
 80032ae:	4619      	mov	r1, r3
 80032b0:	480b      	ldr	r0, [pc, #44]	; (80032e0 <_ZL12MX_GPIO_Initv+0x104>)
 80032b2:	f003 fca7 	bl	8006c04 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_1_Pin LED_2_Pin LED_3_Pin LED_4_Pin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin;
 80032b6:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80032ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032bc:	2301      	movs	r3, #1
 80032be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032c0:	2300      	movs	r3, #0
 80032c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032c4:	2300      	movs	r3, #0
 80032c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032c8:	f107 0314 	add.w	r3, r7, #20
 80032cc:	4619      	mov	r1, r3
 80032ce:	4805      	ldr	r0, [pc, #20]	; (80032e4 <_ZL12MX_GPIO_Initv+0x108>)
 80032d0:	f003 fc98 	bl	8006c04 <HAL_GPIO_Init>

}
 80032d4:	bf00      	nop
 80032d6:	3728      	adds	r7, #40	; 0x28
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}
 80032dc:	40021000 	.word	0x40021000
 80032e0:	48000400 	.word	0x48000400
 80032e4:	48000800 	.word	0x48000800

080032e8 <_Z16StartDefaultTaskPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b082      	sub	sp, #8
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80032f0:	f00d fffc 	bl	80112ec <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80032f4:	2001      	movs	r0, #1
 80032f6:	f00b fb81 	bl	800e9fc <osDelay>
 80032fa:	e7fb      	b.n	80032f4 <_Z16StartDefaultTaskPv+0xc>

080032fc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b082      	sub	sp, #8
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM16) {
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a04      	ldr	r2, [pc, #16]	; (800331c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d101      	bne.n	8003312 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800330e:	f001 fa29 	bl	8004764 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003312:	bf00      	nop
 8003314:	3708      	adds	r7, #8
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
 800331a:	bf00      	nop
 800331c:	40014400 	.word	0x40014400

08003320 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003320:	b480      	push	{r7}
 8003322:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003324:	b672      	cpsid	i
}
 8003326:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003328:	e7fe      	b.n	8003328 <Error_Handler+0x8>
	...

0800332c <_ZN7SoC_EKF17set_update_matrixEv>:
#include "soc_ekf.h"
#include <math.h>
#include <algorithm>

void SoC_EKF::set_update_matrix()
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b082      	sub	sp, #8
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
    _State_vector[ttc1] = 0;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	f04f 0200 	mov.w	r2, #0
 800333a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
    _State_vector[ttc2] = 0;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	f04f 0200 	mov.w	r2, #0
 8003344:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

    _et1 = expf(-_Ts / _battery.battery_equivalent_model[ttc1]);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 800334e:	eeb1 7a67 	vneg.f32	s14, s15
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	edd3 7a03 	vldr	s15, [r3, #12]
 8003358:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800335c:	eeb0 0a66 	vmov.f32	s0, s13
 8003360:	f00e fde8 	bl	8011f34 <expf>
 8003364:	eef0 7a40 	vmov.f32	s15, s0
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
    _et2 = expf(-_Ts / _battery.battery_equivalent_model[ttc2]);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8003374:	eeb1 7a67 	vneg.f32	s14, s15
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	edd3 7a04 	vldr	s15, [r3, #16]
 800337e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003382:	eeb0 0a66 	vmov.f32	s0, s13
 8003386:	f00e fdd5 	bl	8011f34 <expf>
 800338a:	eef0 7a40 	vmov.f32	s15, s0
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c

    _A_matrix[SoC] = 1;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800339a:	675a      	str	r2, [r3, #116]	; 0x74
    _A_matrix[ttc1] = _et1;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	679a      	str	r2, [r3, #120]	; 0x78
    _A_matrix[ttc2] = _et2;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	67da      	str	r2, [r3, #124]	; 0x7c

    _B_matrix[SoC] = - _Ts/_battery.battery_equivalent_model[Qnom]/60/60
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 80033b2:	eef1 6a67 	vneg.f32	s13, s15
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	edd3 7a07 	vldr	s15, [r3, #28]
 80033bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033c0:	eddf 6a2a 	vldr	s13, [pc, #168]	; 800346c <_ZN7SoC_EKF17set_update_matrixEv+0x140>
 80033c4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80033c8:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800346c <_ZN7SoC_EKF17set_update_matrixEv+0x140>
 80033cc:	eec7 6a87 	vdiv.f32	s13, s15, s14
            /_battery.cell_in_parallel;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	ee07 3a90 	vmov	s15, r3
 80033d8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80033dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
    _B_matrix[SoC] = - _Ts/_battery.battery_equivalent_model[Qnom]/60/60
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80

    _B_matrix[ttc1] = _battery.battery_equivalent_model[Rttc1]*(1 - _et1);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	ed93 7a05 	vldr	s14, [r3, #20]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 80033f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80033f6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80033fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
    _B_matrix[ttc2] = _battery.battery_equivalent_model[Rttc2]*(1 - _et2);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	ed93 7a06 	vldr	s14, [r3, #24]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8003410:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003414:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003418:	ee67 7a27 	vmul.f32	s15, s14, s15
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88

    _P_matrix[SoC] = 0.005;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4a12      	ldr	r2, [pc, #72]	; (8003470 <_ZN7SoC_EKF17set_update_matrixEv+0x144>)
 8003426:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    _P_matrix[ttc1] = 0.1;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	4a11      	ldr	r2, [pc, #68]	; (8003474 <_ZN7SoC_EKF17set_update_matrixEv+0x148>)
 800342e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    _P_matrix[ttc2] = 0.1;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	4a0f      	ldr	r2, [pc, #60]	; (8003474 <_ZN7SoC_EKF17set_update_matrixEv+0x148>)
 8003436:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    _Q_matrix[SoC] = default_Q_value;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	4a0e      	ldr	r2, [pc, #56]	; (8003478 <_ZN7SoC_EKF17set_update_matrixEv+0x14c>)
 800343e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    _Q_matrix[ttc1] = _P_matrix[ttc1];
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    _Q_matrix[ttc2] = _P_matrix[ttc2];
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    _R_coeff = default_R_value;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4a07      	ldr	r2, [pc, #28]	; (800347c <_ZN7SoC_EKF17set_update_matrixEv+0x150>)
 800345e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
}
 8003462:	bf00      	nop
 8003464:	3708      	adds	r7, #8
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	42700000 	.word	0x42700000
 8003470:	3ba3d70a 	.word	0x3ba3d70a
 8003474:	3dcccccd 	.word	0x3dcccccd
 8003478:	3951b717 	.word	0x3951b717
 800347c:	48f42400 	.word	0x48f42400

08003480 <_ZN7SoC_EKF21set_filter_covarianceEffff>:

void SoC_EKF::set_filter_covariance(float R, float Q_soc, float Q_v1, float Q_v2)
{
 8003480:	b480      	push	{r7}
 8003482:	b087      	sub	sp, #28
 8003484:	af00      	add	r7, sp, #0
 8003486:	6178      	str	r0, [r7, #20]
 8003488:	ed87 0a04 	vstr	s0, [r7, #16]
 800348c:	edc7 0a03 	vstr	s1, [r7, #12]
 8003490:	ed87 1a02 	vstr	s2, [r7, #8]
 8003494:	edc7 1a01 	vstr	s3, [r7, #4]
    _R_coeff = R;
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	693a      	ldr	r2, [r7, #16]
 800349c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    _Q_matrix[SoC] = Q_soc;
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	68fa      	ldr	r2, [r7, #12]
 80034a4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    _Q_matrix[Vttc1] = Q_v1;
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	68ba      	ldr	r2, [r7, #8]
 80034ac:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    _Q_matrix[Vttc2] = Q_v2;
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	687a      	ldr	r2, [r7, #4]
 80034b4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
 80034b8:	bf00      	nop
 80034ba:	371c      	adds	r7, #28
 80034bc:	46bd      	mov	sp, r7
 80034be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c2:	4770      	bx	lr

080034c4 <_ZN7SoC_EKF6updateERKfS1_>:

void SoC_EKF::update(const float &Current, const float &Voltage)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b08c      	sub	sp, #48	; 0x30
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	60f8      	str	r0, [r7, #12]
 80034cc:	60b9      	str	r1, [r7, #8]
 80034ce:	607a      	str	r2, [r7, #4]
//    }
//    else {
//        set_filter_covariance(default_R_value, default_Q_value);
//    }
    // Predict
    _State_vector[SoC] =  _State_vector[SoC] * _A_matrix[SoC] + Current * _B_matrix[SoC];
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	ed93 7a2a 	vldr	s14, [r3, #168]	; 0xa8
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 80034dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	edd3 6a00 	vldr	s13, [r3]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 80034ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
    _State_vector[ttc1] =  _State_vector[ttc1] * _A_matrix[ttc1] + Current * _B_matrix[ttc1];
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	ed93 7a2b 	vldr	s14, [r3, #172]	; 0xac
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8003506:	ee27 7a27 	vmul.f32	s14, s14, s15
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	edd3 6a00 	vldr	s13, [r3]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8003516:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800351a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
    _State_vector[ttc2] =  _State_vector[ttc2] * _A_matrix[ttc2] + Current * _B_matrix[ttc2];
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	ed93 7a2c 	vldr	s14, [r3, #176]	; 0xb0
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8003530:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	edd3 6a00 	vldr	s13, [r3]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8003540:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003544:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0

    // Covariance matrix
    _P_matrix[SoC] =  _A_matrix[SoC]  * _A_matrix[SoC] *  _P_matrix[SoC]  + _Q_matrix[SoC];
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	ed93 7a1d 	vldr	s14, [r3, #116]	; 0x74
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 800355a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8003564:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800356e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
    _P_matrix[ttc1] = _A_matrix[ttc1] * _A_matrix[ttc1] * _P_matrix[ttc1] + _Q_matrix[ttc1];
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8003584:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 800358e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 8003598:	ee77 7a27 	vadd.f32	s15, s14, s15
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	edc3 7a24 	vstr	s15, [r3, #144]	; 0x90
    _P_matrix[ttc2] = _A_matrix[ttc2] * _A_matrix[ttc2] * _P_matrix[ttc2] + _Q_matrix[ttc2];
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	ed93 7a1f 	vldr	s14, [r3, #124]	; 0x7c
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 80035ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 80035b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	edd3 7a29 	vldr	s15, [r3, #164]	; 0xa4
 80035c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	edc3 7a25 	vstr	s15, [r3, #148]	; 0x94

    // Predict Opec circiut voltage single call voltage based on SoC
    float Voltage_predict_OCV = horner(_battery.battery_ocv_poli, SOC_OCV_poli_coeff_lenght, &_State_vector[SoC]);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	f103 0020 	add.w	r0, r3, #32
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	33a8      	adds	r3, #168	; 0xa8
 80035d6:	461a      	mov	r2, r3
 80035d8:	2109      	movs	r1, #9
 80035da:	f000 f99a 	bl	8003912 <_Z6hornerPKfjS0_>
 80035de:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c

    float Voltage_predict = Voltage_predict_OCV - _State_vector[Vttc1]/_battery.cell_in_parallel
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	edd3 6a2b 	vldr	s13, [r3, #172]	; 0xac
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	ee07 3a90 	vmov	s15, r3
 80035f0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80035f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80035f8:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80035fc:	ee37 7a67 	vsub.f32	s14, s14, s15
            - _State_vector[Vttc2]/_battery.cell_in_parallel
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	ed93 6a2c 	vldr	s12, [r3, #176]	; 0xb0
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	ee07 3a90 	vmov	s15, r3
 800360e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003612:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8003616:	ee37 7a67 	vsub.f32	s14, s14, s15
            - (Current) * _battery.battery_equivalent_model[Rs]
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	edd3 6a00 	vldr	s13, [r3]
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	edd3 7a02 	vldr	s15, [r3, #8]
 8003626:	ee66 6aa7 	vmul.f32	s13, s13, s15
                        *_battery.cell_in_series
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	ee07 3a90 	vmov	s15, r3
 8003632:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003636:	ee26 6aa7 	vmul.f32	s12, s13, s15
                        /_battery.cell_in_parallel; // for multiple cell voltage
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	ee07 3a90 	vmov	s15, r3
 8003642:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003646:	eec6 7a26 	vdiv.f32	s15, s12, s13
    float Voltage_predict = Voltage_predict_OCV - _State_vector[Vttc1]/_battery.cell_in_parallel
 800364a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800364e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

    float innovation = (Voltage) - Voltage_predict;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	ed93 7a00 	vldr	s14, [r3]
 8003658:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800365c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003660:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

    float H = horner(_battery.battery_d_ocv_poli, SOC_OCV_poli_coeff_lenght - 1, &_State_vector[SoC]);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	f103 0044 	add.w	r0, r3, #68	; 0x44
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	33a8      	adds	r3, #168	; 0xa8
 800366e:	461a      	mov	r2, r3
 8003670:	2108      	movs	r1, #8
 8003672:	f000 f94e 	bl	8003912 <_Z6hornerPKfjS0_>
 8003676:	ed87 0a08 	vstr	s0, [r7, #32]

    float S = H *  _P_matrix[SoC] * H + _R_coeff;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 8003680:	edd7 7a08 	vldr	s15, [r7, #32]
 8003684:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003688:	edd7 7a08 	vldr	s15, [r7, #32]
 800368c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 8003696:	ee77 7a27 	vadd.f32	s15, s14, s15
 800369a:	edc7 7a07 	vstr	s15, [r7, #28]

    float Kf = _P_matrix[SoC] * H * (1/S);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 80036a4:	edd7 7a08 	vldr	s15, [r7, #32]
 80036a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80036ac:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80036b0:	edd7 6a07 	vldr	s13, [r7, #28]
 80036b4:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80036b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036bc:	edc7 7a06 	vstr	s15, [r7, #24]

    _State_vector[SoC] += Kf*innovation;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	ed93 7a2a 	vldr	s14, [r3, #168]	; 0xa8
 80036c6:	edd7 6a06 	vldr	s13, [r7, #24]
 80036ca:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80036ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80036d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8

    _P_matrix[SoC] = (1 - Kf*H) * _P_matrix[SoC];
 80036dc:	ed97 7a06 	vldr	s14, [r7, #24]
 80036e0:	edd7 7a08 	vldr	s15, [r7, #32]
 80036e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80036ec:	ee37 7a67 	vsub.f32	s14, s14, s15
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 80036f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c

    // to ensure that (0.0 <= SoC <= 1.0)
    _State_vector[SoC] = std::clamp(_State_vector[SoC], 0.00f, 1.00f);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	33a8      	adds	r3, #168	; 0xa8
 8003704:	f04f 0200 	mov.w	r2, #0
 8003708:	613a      	str	r2, [r7, #16]
 800370a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800370e:	617a      	str	r2, [r7, #20]
 8003710:	f107 0214 	add.w	r2, r7, #20
 8003714:	f107 0110 	add.w	r1, r7, #16
 8003718:	4618      	mov	r0, r3
 800371a:	f000 f928 	bl	800396e <_ZSt5clampIfERKT_S2_S2_S2_>
 800371e:	4603      	mov	r3, r0
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
}
 8003728:	bf00      	nop
 800372a:	3730      	adds	r7, #48	; 0x30
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}

08003730 <_ZN7SoC_EKF27update_SoC_based_on_voltageERKf>:

void SoC_EKF::update_SoC_based_on_voltage(const float &Voltage)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b084      	sub	sp, #16
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
 8003738:	6039      	str	r1, [r7, #0]
    // set low observation noice covariance to calculate faster voltage soc prediction

    set_time_sampling(100.0f);
 800373a:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 80037b8 <_ZN7SoC_EKF27update_SoC_based_on_voltageERKf+0x88>
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f000 f88d 	bl	800385e <_ZN7SoC_EKF17set_time_samplingEf>
    set_update_matrix();
 8003744:	6878      	ldr	r0, [r7, #4]
 8003746:	f7ff fdf1 	bl	800332c <_ZN7SoC_EKF17set_update_matrixEv>
    set_filter_covariance(1);
 800374a:	eddf 1a1c 	vldr	s3, [pc, #112]	; 80037bc <_ZN7SoC_EKF27update_SoC_based_on_voltageERKf+0x8c>
 800374e:	ed9f 1a1b 	vldr	s2, [pc, #108]	; 80037bc <_ZN7SoC_EKF27update_SoC_based_on_voltageERKf+0x8c>
 8003752:	eddf 0a1b 	vldr	s1, [pc, #108]	; 80037c0 <_ZN7SoC_EKF27update_SoC_based_on_voltageERKf+0x90>
 8003756:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f7ff fe90 	bl	8003480 <_ZN7SoC_EKF21set_filter_covarianceEffff>

    for(int i=0; i < 10e3; ++i){
 8003760:	2300      	movs	r3, #0
 8003762:	60fb      	str	r3, [r7, #12]
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	f242 720f 	movw	r2, #9999	; 0x270f
 800376a:	4293      	cmp	r3, r2
 800376c:	dc0d      	bgt.n	800378a <_ZN7SoC_EKF27update_SoC_based_on_voltageERKf+0x5a>
        update(0, Voltage);
 800376e:	f04f 0300 	mov.w	r3, #0
 8003772:	60bb      	str	r3, [r7, #8]
 8003774:	f107 0308 	add.w	r3, r7, #8
 8003778:	683a      	ldr	r2, [r7, #0]
 800377a:	4619      	mov	r1, r3
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	f7ff fea1 	bl	80034c4 <_ZN7SoC_EKF6updateERKfS1_>
    for(int i=0; i < 10e3; ++i){
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	3301      	adds	r3, #1
 8003786:	60fb      	str	r3, [r7, #12]
 8003788:	e7ec      	b.n	8003764 <_ZN7SoC_EKF27update_SoC_based_on_voltageERKf+0x34>
    }

    set_filter_covariance();
 800378a:	eddf 1a0c 	vldr	s3, [pc, #48]	; 80037bc <_ZN7SoC_EKF27update_SoC_based_on_voltageERKf+0x8c>
 800378e:	ed9f 1a0b 	vldr	s2, [pc, #44]	; 80037bc <_ZN7SoC_EKF27update_SoC_based_on_voltageERKf+0x8c>
 8003792:	eddf 0a0b 	vldr	s1, [pc, #44]	; 80037c0 <_ZN7SoC_EKF27update_SoC_based_on_voltageERKf+0x90>
 8003796:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 80037c4 <_ZN7SoC_EKF27update_SoC_based_on_voltageERKf+0x94>
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f7ff fe70 	bl	8003480 <_ZN7SoC_EKF21set_filter_covarianceEffff>
    set_time_sampling(0.05f);
 80037a0:	ed9f 0a09 	vldr	s0, [pc, #36]	; 80037c8 <_ZN7SoC_EKF27update_SoC_based_on_voltageERKf+0x98>
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f000 f85a 	bl	800385e <_ZN7SoC_EKF17set_time_samplingEf>
    set_update_matrix();
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f7ff fdbe 	bl	800332c <_ZN7SoC_EKF17set_update_matrixEv>
}
 80037b0:	bf00      	nop
 80037b2:	3710      	adds	r7, #16
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}
 80037b8:	42c80000 	.word	0x42c80000
 80037bc:	3dcccccd 	.word	0x3dcccccd
 80037c0:	3951b717 	.word	0x3951b717
 80037c4:	48f42400 	.word	0x48f42400
 80037c8:	3d4ccccd 	.word	0x3d4ccccd

080037cc <_ZSt4copyIPKfPfET0_T_S4_S3_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 80037cc:	b590      	push	{r4, r7, lr}
 80037ce:	b085      	sub	sp, #20
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	60f8      	str	r0, [r7, #12]
 80037d4:	60b9      	str	r1, [r7, #8]
 80037d6:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80037d8:	68f8      	ldr	r0, [r7, #12]
 80037da:	f000 f8ef 	bl	80039bc <_ZSt12__miter_baseIPKfET_S2_>
 80037de:	4604      	mov	r4, r0
 80037e0:	68b8      	ldr	r0, [r7, #8]
 80037e2:	f000 f8eb 	bl	80039bc <_ZSt12__miter_baseIPKfET_S2_>
 80037e6:	4603      	mov	r3, r0
 80037e8:	687a      	ldr	r2, [r7, #4]
 80037ea:	4619      	mov	r1, r3
 80037ec:	4620      	mov	r0, r4
 80037ee:	f000 f8f0 	bl	80039d2 <_ZSt13__copy_move_aILb0EPKfPfET1_T0_S4_S3_>
 80037f2:	4603      	mov	r3, r0
    }
 80037f4:	4618      	mov	r0, r3
 80037f6:	3714      	adds	r7, #20
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd90      	pop	{r4, r7, pc}

080037fc <_ZN7SoC_EKF32set_single_cell_equivalent_modelEPKf>:

void SoC_EKF::set_single_cell_equivalent_model(const float *battery_model){
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b082      	sub	sp, #8
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	6039      	str	r1, [r7, #0]
    std::copy(battery_model, battery_model+6, _battery.battery_equivalent_model);
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	f103 0118 	add.w	r1, r3, #24
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	3308      	adds	r3, #8
 8003810:	461a      	mov	r2, r3
 8003812:	6838      	ldr	r0, [r7, #0]
 8003814:	f7ff ffda 	bl	80037cc <_ZSt4copyIPKfPfET0_T_S4_S3_>
};
 8003818:	bf00      	nop
 800381a:	3708      	adds	r7, #8
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}

08003820 <_ZN7SoC_EKF15set_initial_SoCEf>:

void SoC_EKF::set_initial_SoC(float aSoC){
 8003820:	b480      	push	{r7}
 8003822:	b083      	sub	sp, #12
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
 8003828:	ed87 0a00 	vstr	s0, [r7]
    _State_vector[SoC] = aSoC;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	683a      	ldr	r2, [r7, #0]
 8003830:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
}
 8003834:	bf00      	nop
 8003836:	370c      	adds	r7, #12
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr

08003840 <_ZN7SoC_EKF16set_full_batteryEv>:

void SoC_EKF::set_full_battery()
{
 8003840:	b480      	push	{r7}
 8003842:	b083      	sub	sp, #12
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
    _State_vector[SoC] = 1.00f;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800384e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
};
 8003852:	bf00      	nop
 8003854:	370c      	adds	r7, #12
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr

0800385e <_ZN7SoC_EKF17set_time_samplingEf>:

void SoC_EKF::set_time_sampling(float Ts){
 800385e:	b480      	push	{r7}
 8003860:	b083      	sub	sp, #12
 8003862:	af00      	add	r7, sp, #0
 8003864:	6078      	str	r0, [r7, #4]
 8003866:	ed87 0a00 	vstr	s0, [r7]
    _Ts = Ts;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	683a      	ldr	r2, [r7, #0]
 800386e:	671a      	str	r2, [r3, #112]	; 0x70
};
 8003870:	bf00      	nop
 8003872:	370c      	adds	r7, #12
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr

0800387c <_ZN7SoC_EKF25set_battery_configurationEOjS0_>:

void SoC_EKF::set_battery_configuration(unsigned int &&s, unsigned int &&p){
 800387c:	b480      	push	{r7}
 800387e:	b085      	sub	sp, #20
 8003880:	af00      	add	r7, sp, #0
 8003882:	60f8      	str	r0, [r7, #12]
 8003884:	60b9      	str	r1, [r7, #8]
 8003886:	607a      	str	r2, [r7, #4]
    _battery.cell_in_parallel = p;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	601a      	str	r2, [r3, #0]
    _battery.cell_in_series = s;
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	605a      	str	r2, [r3, #4]
};
 8003898:	bf00      	nop
 800389a:	3714      	adds	r7, #20
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr

080038a4 <_ZN7SoC_EKF30set_single_cell_ocv_polinomialEPKfj>:

void SoC_EKF::set_single_cell_ocv_polinomial(const float *battery_ocv, unsigned int number_of_coef){
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b086      	sub	sp, #24
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	60f8      	str	r0, [r7, #12]
 80038ac:	60b9      	str	r1, [r7, #8]
 80038ae:	607a      	str	r2, [r7, #4]

    std::copy(battery_ocv, battery_ocv + number_of_coef, _battery.battery_ocv_poli);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	68ba      	ldr	r2, [r7, #8]
 80038b6:	18d1      	adds	r1, r2, r3
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	3320      	adds	r3, #32
 80038bc:	461a      	mov	r2, r3
 80038be:	68b8      	ldr	r0, [r7, #8]
 80038c0:	f7ff ff84 	bl	80037cc <_ZSt4copyIPKfPfET0_T_S4_S3_>

    for(unsigned int ocv_poly_iter = 0; ocv_poly_iter < number_of_coef - 1; ocv_poly_iter++){
 80038c4:	2300      	movs	r3, #0
 80038c6:	617b      	str	r3, [r7, #20]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	3b01      	subs	r3, #1
 80038cc:	697a      	ldr	r2, [r7, #20]
 80038ce:	429a      	cmp	r2, r3
 80038d0:	d21b      	bcs.n	800390a <_ZN7SoC_EKF30set_single_cell_ocv_polinomialEPKfj+0x66>
        _battery.battery_d_ocv_poli[ocv_poly_iter] = static_cast<float>(number_of_coef - ocv_poly_iter - 1) * battery_ocv[ocv_poly_iter];
 80038d2:	687a      	ldr	r2, [r7, #4]
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	1ad3      	subs	r3, r2, r3
 80038d8:	3b01      	subs	r3, #1
 80038da:	ee07 3a90 	vmov	s15, r3
 80038de:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	68ba      	ldr	r2, [r7, #8]
 80038e8:	4413      	add	r3, r2
 80038ea:	edd3 7a00 	vldr	s15, [r3]
 80038ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038f2:	68fa      	ldr	r2, [r7, #12]
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	3310      	adds	r3, #16
 80038f8:	009b      	lsls	r3, r3, #2
 80038fa:	4413      	add	r3, r2
 80038fc:	3304      	adds	r3, #4
 80038fe:	edc3 7a00 	vstr	s15, [r3]
    for(unsigned int ocv_poly_iter = 0; ocv_poly_iter < number_of_coef - 1; ocv_poly_iter++){
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	3301      	adds	r3, #1
 8003906:	617b      	str	r3, [r7, #20]
 8003908:	e7de      	b.n	80038c8 <_ZN7SoC_EKF30set_single_cell_ocv_polinomialEPKfj+0x24>
    }
};
 800390a:	bf00      	nop
 800390c:	3718      	adds	r7, #24
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}

08003912 <_Z6hornerPKfjS0_>:
    //    std::cout<<"Kf: "<<Kf <<std::endl;
    //    std::cout<<"SoC: "<<State_vector[0]<<std::endl;
}

[[nodiscard]] float horner(const float *arry, unsigned int n, const float *x)
{
 8003912:	b480      	push	{r7}
 8003914:	b087      	sub	sp, #28
 8003916:	af00      	add	r7, sp, #0
 8003918:	60f8      	str	r0, [r7, #12]
 800391a:	60b9      	str	r1, [r7, #8]
 800391c:	607a      	str	r2, [r7, #4]
    float s = 0;
 800391e:	f04f 0300 	mov.w	r3, #0
 8003922:	617b      	str	r3, [r7, #20]
    for(unsigned int i = 0; i < n ; i++){
 8003924:	2300      	movs	r3, #0
 8003926:	613b      	str	r3, [r7, #16]
 8003928:	693a      	ldr	r2, [r7, #16]
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	429a      	cmp	r2, r3
 800392e:	d214      	bcs.n	800395a <_Z6hornerPKfjS0_+0x48>
        s = s*(*x) + arry[i];
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	ed93 7a00 	vldr	s14, [r3]
 8003936:	edd7 7a05 	vldr	s15, [r7, #20]
 800393a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	009b      	lsls	r3, r3, #2
 8003942:	68fa      	ldr	r2, [r7, #12]
 8003944:	4413      	add	r3, r2
 8003946:	edd3 7a00 	vldr	s15, [r3]
 800394a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800394e:	edc7 7a05 	vstr	s15, [r7, #20]
    for(unsigned int i = 0; i < n ; i++){
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	3301      	adds	r3, #1
 8003956:	613b      	str	r3, [r7, #16]
 8003958:	e7e6      	b.n	8003928 <_Z6hornerPKfjS0_+0x16>
    }
    return s;
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	ee07 3a90 	vmov	s15, r3
}
 8003960:	eeb0 0a67 	vmov.f32	s0, s15
 8003964:	371c      	adds	r7, #28
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr

0800396e <_ZSt5clampIfERKT_S2_S2_S2_>:
   *  @param  __hi   An upper limit of arbitrary type.
   *  @return max(__val, __lo) if __val < __hi or min(__val, __hi) otherwise.
   */
  template<typename _Tp>
    constexpr const _Tp&
    clamp(const _Tp& __val, const _Tp& __lo, const _Tp& __hi)
 800396e:	b480      	push	{r7}
 8003970:	b085      	sub	sp, #20
 8003972:	af00      	add	r7, sp, #0
 8003974:	60f8      	str	r0, [r7, #12]
 8003976:	60b9      	str	r1, [r7, #8]
 8003978:	607a      	str	r2, [r7, #4]
    {
      __glibcxx_assert(!(__hi < __lo));
      return (__val < __lo) ? __lo : (__hi < __val) ? __hi : __val;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	ed93 7a00 	vldr	s14, [r3]
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	edd3 7a00 	vldr	s15, [r3]
 8003986:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800398a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800398e:	d501      	bpl.n	8003994 <_ZSt5clampIfERKT_S2_S2_S2_+0x26>
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	e00d      	b.n	80039b0 <_ZSt5clampIfERKT_S2_S2_S2_+0x42>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	ed93 7a00 	vldr	s14, [r3]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	edd3 7a00 	vldr	s15, [r3]
 80039a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80039a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039a8:	d501      	bpl.n	80039ae <_ZSt5clampIfERKT_S2_S2_S2_+0x40>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	e000      	b.n	80039b0 <_ZSt5clampIfERKT_S2_S2_S2_+0x42>
 80039ae:	68fb      	ldr	r3, [r7, #12]
    }
 80039b0:	4618      	mov	r0, r3
 80039b2:	3714      	adds	r7, #20
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr

080039bc <_ZSt12__miter_baseIPKfET_S2_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 80039bc:	b480      	push	{r7}
 80039be:	b083      	sub	sp, #12
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
    { return __it; }
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	4618      	mov	r0, r3
 80039c8:	370c      	adds	r7, #12
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr

080039d2 <_ZSt13__copy_move_aILb0EPKfPfET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 80039d2:	b5b0      	push	{r4, r5, r7, lr}
 80039d4:	b084      	sub	sp, #16
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	60f8      	str	r0, [r7, #12]
 80039da:	60b9      	str	r1, [r7, #8]
 80039dc:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 80039de:	68f8      	ldr	r0, [r7, #12]
 80039e0:	f000 f81a 	bl	8003a18 <_ZSt12__niter_baseIPKfET_S2_>
 80039e4:	4604      	mov	r4, r0
 80039e6:	68b8      	ldr	r0, [r7, #8]
 80039e8:	f000 f816 	bl	8003a18 <_ZSt12__niter_baseIPKfET_S2_>
 80039ec:	4605      	mov	r5, r0
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	4618      	mov	r0, r3
 80039f2:	f000 f81c 	bl	8003a2e <_ZSt12__niter_baseIPfET_S1_>
 80039f6:	4603      	mov	r3, r0
 80039f8:	461a      	mov	r2, r3
 80039fa:	4629      	mov	r1, r5
 80039fc:	4620      	mov	r0, r4
 80039fe:	f000 f821 	bl	8003a44 <_ZSt14__copy_move_a1ILb0EPKfPfET1_T0_S4_S3_>
 8003a02:	4602      	mov	r2, r0
 8003a04:	1d3b      	adds	r3, r7, #4
 8003a06:	4611      	mov	r1, r2
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f000 f82b 	bl	8003a64 <_ZSt12__niter_wrapIPfET_RKS1_S1_>
 8003a0e:	4603      	mov	r3, r0
    }
 8003a10:	4618      	mov	r0, r3
 8003a12:	3710      	adds	r7, #16
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bdb0      	pop	{r4, r5, r7, pc}

08003a18 <_ZSt12__niter_baseIPKfET_S2_>:
    __niter_base(_Iterator __it)
 8003a18:	b480      	push	{r7}
 8003a1a:	b083      	sub	sp, #12
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
    { return __it; }
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	4618      	mov	r0, r3
 8003a24:	370c      	adds	r7, #12
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr

08003a2e <_ZSt12__niter_baseIPfET_S1_>:
    __niter_base(_Iterator __it)
 8003a2e:	b480      	push	{r7}
 8003a30:	b083      	sub	sp, #12
 8003a32:	af00      	add	r7, sp, #0
 8003a34:	6078      	str	r0, [r7, #4]
    { return __it; }
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4618      	mov	r0, r3
 8003a3a:	370c      	adds	r7, #12
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr

08003a44 <_ZSt14__copy_move_a1ILb0EPKfPfET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b084      	sub	sp, #16
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	60f8      	str	r0, [r7, #12]
 8003a4c:	60b9      	str	r1, [r7, #8]
 8003a4e:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	68b9      	ldr	r1, [r7, #8]
 8003a54:	68f8      	ldr	r0, [r7, #12]
 8003a56:	f000 f811 	bl	8003a7c <_ZSt14__copy_move_a2ILb0EPKfPfET1_T0_S4_S3_>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3710      	adds	r7, #16
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}

08003a64 <_ZSt12__niter_wrapIPfET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8003a64:	b480      	push	{r7}
 8003a66:	b083      	sub	sp, #12
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
 8003a6c:	6039      	str	r1, [r7, #0]
    { return __res; }
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	4618      	mov	r0, r3
 8003a72:	370c      	adds	r7, #12
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr

08003a7c <_ZSt14__copy_move_a2ILb0EPKfPfET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b084      	sub	sp, #16
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	60f8      	str	r0, [r7, #12]
 8003a84:	60b9      	str	r1, [r7, #8]
 8003a86:	607a      	str	r2, [r7, #4]
      if (std::is_constant_evaluated())
 8003a88:	f7fd fb30 	bl	80010ec <_ZSt21is_constant_evaluatedv>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d006      	beq.n	8003aa0 <_ZSt14__copy_move_a2ILb0EPKfPfET1_T0_S4_S3_+0x24>
	  __copy_m(__first, __last, __result);
 8003a92:	687a      	ldr	r2, [r7, #4]
 8003a94:	68b9      	ldr	r1, [r7, #8]
 8003a96:	68f8      	ldr	r0, [r7, #12]
 8003a98:	f000 f80d 	bl	8003ab6 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKfPfEET0_T_S7_S6_>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	e006      	b.n	8003aae <_ZSt14__copy_move_a2ILb0EPKfPfET1_T0_S4_S3_+0x32>
			      _Category>::__copy_m(__first, __last, __result);
 8003aa0:	687a      	ldr	r2, [r7, #4]
 8003aa2:	68b9      	ldr	r1, [r7, #8]
 8003aa4:	68f8      	ldr	r0, [r7, #12]
 8003aa6:	f000 f829 	bl	8003afc <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	bf00      	nop
    }
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3710      	adds	r7, #16
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}

08003ab6 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKfPfEET0_T_S7_S6_>:
	__copy_m(_II __first, _II __last, _OI __result)
 8003ab6:	b480      	push	{r7}
 8003ab8:	b087      	sub	sp, #28
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	60f8      	str	r0, [r7, #12]
 8003abe:	60b9      	str	r1, [r7, #8]
 8003ac0:	607a      	str	r2, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 8003ac2:	68ba      	ldr	r2, [r7, #8]
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	1ad3      	subs	r3, r2, r3
 8003ac8:	109b      	asrs	r3, r3, #2
 8003aca:	617b      	str	r3, [r7, #20]
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	dd0d      	ble.n	8003aee <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKfPfEET0_T_S7_S6_+0x38>
	      *__result = *__first;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	601a      	str	r2, [r3, #0]
	      ++__first;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	3304      	adds	r3, #4
 8003ade:	60fb      	str	r3, [r7, #12]
	      ++__result;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	3304      	adds	r3, #4
 8003ae4:	607b      	str	r3, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	3b01      	subs	r3, #1
 8003aea:	617b      	str	r3, [r7, #20]
 8003aec:	e7ee      	b.n	8003acc <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKfPfEET0_T_S7_S6_+0x16>
	  return __result;
 8003aee:	687b      	ldr	r3, [r7, #4]
	}
 8003af0:	4618      	mov	r0, r3
 8003af2:	371c      	adds	r7, #28
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr

08003afc <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b086      	sub	sp, #24
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	60f8      	str	r0, [r7, #12]
 8003b04:	60b9      	str	r1, [r7, #8]
 8003b06:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8003b08:	68ba      	ldr	r2, [r7, #8]
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	109b      	asrs	r3, r3, #2
 8003b10:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d006      	beq.n	8003b26 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	461a      	mov	r2, r3
 8003b1e:	68f9      	ldr	r1, [r7, #12]
 8003b20:	6878      	ldr	r0, [r7, #4]
 8003b22:	f00e fb73 	bl	801220c <memmove>
	  return __result + _Num;
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	009b      	lsls	r3, r3, #2
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	4413      	add	r3, r2
	}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3718      	adds	r7, #24
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}

08003b36 <_ZN7SoC_EKF7get_SoCEv>:
    // negative current -> charge
    void update(const float &Current, const float &Voltage);

    void update_SoC_based_on_voltage(const float &Voltage);
    
    [[nodiscard]] float get_SoC(){return _State_vector[SoC];};
 8003b36:	b480      	push	{r7}
 8003b38:	b083      	sub	sp, #12
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	6078      	str	r0, [r7, #4]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003b44:	ee07 3a90 	vmov	s15, r3
 8003b48:	eeb0 0a67 	vmov.f32	s0, s15
 8003b4c:	370c      	adds	r7, #12
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr
	...

08003b58 <_Z17calculate_currentv>:
float max_current_sensor_output_voltage = ((float)(CS_POWER_SUPLY * RESISTOR_2) / (float)(RESISTOR_1 + RESISTOR_2)) / 1000.0;
float current_sensor_volts_to_amper = ((float)(CS_MVOLT_TO_AMPER * RESISTOR_2) / (float)(RESISTOR_1 + RESISTOR_2)) / 1000.0;
float output_current_factor = max_current_sensor_output_voltage / 4096.0 * (1.0 / current_sensor_volts_to_amper);

void calculate_current()
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b087      	sub	sp, #28
 8003b5c:	af00      	add	r7, sp, #0
	float raw_sum = 0, raw_max = INT32_MIN, raw_min = INT32_MAX, avarage_adc;
 8003b5e:	f04f 0300 	mov.w	r3, #0
 8003b62:	617b      	str	r3, [r7, #20]
 8003b64:	f04f 434f 	mov.w	r3, #3472883712	; 0xcf000000
 8003b68:	613b      	str	r3, [r7, #16]
 8003b6a:	f04f 439e 	mov.w	r3, #1325400064	; 0x4f000000
 8003b6e:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < NUMBER_OF_CS_SAMPLES; i++)
 8003b70:	2300      	movs	r3, #0
 8003b72:	60bb      	str	r3, [r7, #8]
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8003b7a:	da40      	bge.n	8003bfe <_Z17calculate_currentv+0xa6>
	{
		int16_t raw_value = data.current.adc[i];
 8003b7c:	4a45      	ldr	r2, [pc, #276]	; (8003c94 <_Z17calculate_currentv+0x13c>)
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	330c      	adds	r3, #12
 8003b82:	009b      	lsls	r3, r3, #2
 8003b84:	4413      	add	r3, r2
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	80fb      	strh	r3, [r7, #6]
		raw_sum += raw_value;
 8003b8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003b8e:	ee07 3a90 	vmov	s15, r3
 8003b92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b96:	ed97 7a05 	vldr	s14, [r7, #20]
 8003b9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b9e:	edc7 7a05 	vstr	s15, [r7, #20]
		if(raw_value > raw_max) raw_max = raw_value;
 8003ba2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003ba6:	ee07 3a90 	vmov	s15, r3
 8003baa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003bae:	ed97 7a04 	vldr	s14, [r7, #16]
 8003bb2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003bb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bba:	d507      	bpl.n	8003bcc <_Z17calculate_currentv+0x74>
 8003bbc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003bc0:	ee07 3a90 	vmov	s15, r3
 8003bc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003bc8:	edc7 7a04 	vstr	s15, [r7, #16]
		if(raw_value < raw_min) raw_min = raw_value;
 8003bcc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003bd0:	ee07 3a90 	vmov	s15, r3
 8003bd4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003bd8:	ed97 7a03 	vldr	s14, [r7, #12]
 8003bdc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003be0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003be4:	dd07      	ble.n	8003bf6 <_Z17calculate_currentv+0x9e>
 8003be6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003bea:	ee07 3a90 	vmov	s15, r3
 8003bee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003bf2:	edc7 7a03 	vstr	s15, [r7, #12]
	for(int i = 0; i < NUMBER_OF_CS_SAMPLES; i++)
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	3301      	adds	r3, #1
 8003bfa:	60bb      	str	r3, [r7, #8]
 8003bfc:	e7ba      	b.n	8003b74 <_Z17calculate_currentv+0x1c>
	}
	avarage_adc = raw_sum / NUMBER_OF_CS_SAMPLES;
 8003bfe:	ed97 7a05 	vldr	s14, [r7, #20]
 8003c02:	eddf 6a25 	vldr	s13, [pc, #148]	; 8003c98 <_Z17calculate_currentv+0x140>
 8003c06:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003c0a:	edc7 7a00 	vstr	s15, [r7]

	avarage_adc -= NEUTRAL_CURRENT_SENSOR;
 8003c0e:	edd7 7a00 	vldr	s15, [r7]
 8003c12:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8003c9c <_Z17calculate_currentv+0x144>
 8003c16:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003c1a:	edc7 7a00 	vstr	s15, [r7]
	raw_max -= NEUTRAL_CURRENT_SENSOR;
 8003c1e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003c22:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8003c9c <_Z17calculate_currentv+0x144>
 8003c26:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003c2a:	edc7 7a04 	vstr	s15, [r7, #16]
	raw_min -= NEUTRAL_CURRENT_SENSOR;
 8003c2e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003c32:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8003c9c <_Z17calculate_currentv+0x144>
 8003c36:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003c3a:	edc7 7a03 	vstr	s15, [r7, #12]

	data.current.value = avarage_adc * output_current_factor;
 8003c3e:	4b18      	ldr	r3, [pc, #96]	; (8003ca0 <_Z17calculate_currentv+0x148>)
 8003c40:	ed93 7a00 	vldr	s14, [r3]
 8003c44:	edd7 7a00 	vldr	s15, [r7]
 8003c48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c4c:	4b11      	ldr	r3, [pc, #68]	; (8003c94 <_Z17calculate_currentv+0x13c>)
 8003c4e:	f203 43e4 	addw	r3, r3, #1252	; 0x4e4
 8003c52:	edc3 7a00 	vstr	s15, [r3]
	data.current.value_max = (float)raw_max * output_current_factor;
 8003c56:	4b12      	ldr	r3, [pc, #72]	; (8003ca0 <_Z17calculate_currentv+0x148>)
 8003c58:	ed93 7a00 	vldr	s14, [r3]
 8003c5c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003c60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c64:	4b0b      	ldr	r3, [pc, #44]	; (8003c94 <_Z17calculate_currentv+0x13c>)
 8003c66:	f503 639d 	add.w	r3, r3, #1256	; 0x4e8
 8003c6a:	edc3 7a00 	vstr	s15, [r3]
	data.current.value_min = (float)raw_min * output_current_factor;
 8003c6e:	4b0c      	ldr	r3, [pc, #48]	; (8003ca0 <_Z17calculate_currentv+0x148>)
 8003c70:	ed93 7a00 	vldr	s14, [r3]
 8003c74:	edd7 7a03 	vldr	s15, [r7, #12]
 8003c78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c7c:	4b05      	ldr	r3, [pc, #20]	; (8003c94 <_Z17calculate_currentv+0x13c>)
 8003c7e:	f203 43ec 	addw	r3, r3, #1260	; 0x4ec
 8003c82:	edc3 7a00 	vstr	s15, [r3]
		chargingState = 1;
	}else if (outputCurrent >= 0 || HAL_GPIO_ReadPin(LED_2_GPIO_Port, LED_2_Pin) == 1){
		chargingState = 0;
	}*/

}
 8003c86:	bf00      	nop
 8003c88:	371c      	adds	r7, #28
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr
 8003c92:	bf00      	nop
 8003c94:	200005ec 	.word	0x200005ec
 8003c98:	43960000 	.word	0x43960000
 8003c9c:	45070000 	.word	0x45070000
 8003ca0:	20001a64 	.word	0x20001a64

08003ca4 <_Z18start_soc_functionPv>:

void start_soc_function(void *argument){
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b088      	sub	sp, #32
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
	data.soc.main.set_single_cell_equivalent_model(ICR18650);
 8003cac:	4938      	ldr	r1, [pc, #224]	; (8003d90 <_Z18start_soc_functionPv+0xec>)
 8003cae:	4839      	ldr	r0, [pc, #228]	; (8003d94 <_Z18start_soc_functionPv+0xf0>)
 8003cb0:	f7ff fda4 	bl	80037fc <_ZN7SoC_EKF32set_single_cell_equivalent_modelEPKf>
	data.soc.main.set_single_cell_ocv_polinomial(Li_Ion_ocv, Li_Ion_ocv_length);
 8003cb4:	2209      	movs	r2, #9
 8003cb6:	4938      	ldr	r1, [pc, #224]	; (8003d98 <_Z18start_soc_functionPv+0xf4>)
 8003cb8:	4836      	ldr	r0, [pc, #216]	; (8003d94 <_Z18start_soc_functionPv+0xf0>)
 8003cba:	f7ff fdf3 	bl	80038a4 <_ZN7SoC_EKF30set_single_cell_ocv_polinomialEPKfj>
	data.soc.main.set_battery_configuration(1, 3);
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	617b      	str	r3, [r7, #20]
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	61bb      	str	r3, [r7, #24]
 8003cc6:	f107 0218 	add.w	r2, r7, #24
 8003cca:	f107 0314 	add.w	r3, r7, #20
 8003cce:	4619      	mov	r1, r3
 8003cd0:	4830      	ldr	r0, [pc, #192]	; (8003d94 <_Z18start_soc_functionPv+0xf0>)
 8003cd2:	f7ff fdd3 	bl	800387c <_ZN7SoC_EKF25set_battery_configurationEOjS0_>
	data.soc.main.set_time_sampling(0.05f);
 8003cd6:	ed9f 0a31 	vldr	s0, [pc, #196]	; 8003d9c <_Z18start_soc_functionPv+0xf8>
 8003cda:	482e      	ldr	r0, [pc, #184]	; (8003d94 <_Z18start_soc_functionPv+0xf0>)
 8003cdc:	f7ff fdbf 	bl	800385e <_ZN7SoC_EKF17set_time_samplingEf>
	data.soc.main.set_update_matrix();
 8003ce0:	482c      	ldr	r0, [pc, #176]	; (8003d94 <_Z18start_soc_functionPv+0xf0>)
 8003ce2:	f7ff fb23 	bl	800332c <_ZN7SoC_EKF17set_update_matrixEv>
	data.soc.main.set_initial_SoC(0.5);
 8003ce6:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8003cea:	482a      	ldr	r0, [pc, #168]	; (8003d94 <_Z18start_soc_functionPv+0xf0>)
 8003cec:	f7ff fd98 	bl	8003820 <_ZN7SoC_EKF15set_initial_SoCEf>
	bool first_init_soc = true;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	77fb      	strb	r3, [r7, #31]

	for(;;){
		osDelay(1);
 8003cf4:	2001      	movs	r0, #1
 8003cf6:	f00a fe81 	bl	800e9fc <osDelay>

		calculate_current();
 8003cfa:	f7ff ff2d 	bl	8003b58 <_Z17calculate_currentv>

		if(first_init_soc){
 8003cfe:	7ffb      	ldrb	r3, [r7, #31]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d014      	beq.n	8003d2e <_Z18start_soc_functionPv+0x8a>
			float temp_voltage = (float)data.voltages.cells[0] / 10000.0f;
 8003d04:	4b26      	ldr	r3, [pc, #152]	; (8003da0 <_Z18start_soc_functionPv+0xfc>)
 8003d06:	881b      	ldrh	r3, [r3, #0]
 8003d08:	ee07 3a90 	vmov	s15, r3
 8003d0c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003d10:	eddf 6a24 	vldr	s13, [pc, #144]	; 8003da4 <_Z18start_soc_functionPv+0x100>
 8003d14:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003d18:	edc7 7a04 	vstr	s15, [r7, #16]
			data.soc.main.update_SoC_based_on_voltage(temp_voltage);
 8003d1c:	f107 0310 	add.w	r3, r7, #16
 8003d20:	4619      	mov	r1, r3
 8003d22:	481c      	ldr	r0, [pc, #112]	; (8003d94 <_Z18start_soc_functionPv+0xf0>)
 8003d24:	f7ff fd04 	bl	8003730 <_ZN7SoC_EKF27update_SoC_based_on_voltageERKf>
			first_init_soc = false;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	77fb      	strb	r3, [r7, #31]
 8003d2c:	e7e2      	b.n	8003cf4 <_Z18start_soc_functionPv+0x50>
		}else{
			float temp_voltage = (float)data.voltages.cells[0] / 10000.0f;
 8003d2e:	4b1c      	ldr	r3, [pc, #112]	; (8003da0 <_Z18start_soc_functionPv+0xfc>)
 8003d30:	881b      	ldrh	r3, [r3, #0]
 8003d32:	ee07 3a90 	vmov	s15, r3
 8003d36:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003d3a:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8003da4 <_Z18start_soc_functionPv+0x100>
 8003d3e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003d42:	edc7 7a03 	vstr	s15, [r7, #12]
			data.soc.main.update(data.current.value, temp_voltage);
 8003d46:	f107 030c 	add.w	r3, r7, #12
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	4916      	ldr	r1, [pc, #88]	; (8003da8 <_Z18start_soc_functionPv+0x104>)
 8003d4e:	4811      	ldr	r0, [pc, #68]	; (8003d94 <_Z18start_soc_functionPv+0xf0>)
 8003d50:	f7ff fbb8 	bl	80034c4 <_ZN7SoC_EKF6updateERKfS1_>
			data.soc.value = data.soc.main.get_SoC();
 8003d54:	480f      	ldr	r0, [pc, #60]	; (8003d94 <_Z18start_soc_functionPv+0xf0>)
 8003d56:	f7ff feee 	bl	8003b36 <_ZN7SoC_EKF7get_SoCEv>
 8003d5a:	eef0 7a40 	vmov.f32	s15, s0
 8003d5e:	4b10      	ldr	r3, [pc, #64]	; (8003da0 <_Z18start_soc_functionPv+0xfc>)
 8003d60:	f203 53a4 	addw	r3, r3, #1444	; 0x5a4
 8003d64:	edc3 7a00 	vstr	s15, [r3]
			data.soc.value_can = (uint8_t)(data.soc.value * 100);
 8003d68:	4b0d      	ldr	r3, [pc, #52]	; (8003da0 <_Z18start_soc_functionPv+0xfc>)
 8003d6a:	f203 53a4 	addw	r3, r3, #1444	; 0x5a4
 8003d6e:	edd3 7a00 	vldr	s15, [r3]
 8003d72:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8003dac <_Z18start_soc_functionPv+0x108>
 8003d76:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d7e:	edc7 7a00 	vstr	s15, [r7]
 8003d82:	783b      	ldrb	r3, [r7, #0]
 8003d84:	b2da      	uxtb	r2, r3
 8003d86:	4b06      	ldr	r3, [pc, #24]	; (8003da0 <_Z18start_soc_functionPv+0xfc>)
 8003d88:	f883 25a8 	strb.w	r2, [r3, #1448]	; 0x5a8
		}

	}
 8003d8c:	e7b2      	b.n	8003cf4 <_Z18start_soc_functionPv+0x50>
 8003d8e:	bf00      	nop
 8003d90:	08014ff0 	.word	0x08014ff0
 8003d94:	20000adc 	.word	0x20000adc
 8003d98:	08015008 	.word	0x08015008
 8003d9c:	3d4ccccd 	.word	0x3d4ccccd
 8003da0:	200005ec 	.word	0x200005ec
 8003da4:	461c4000 	.word	0x461c4000
 8003da8:	20000ad0 	.word	0x20000ad0
 8003dac:	42c80000 	.word	0x42c80000

08003db0 <_Z41__static_initialization_and_destruction_0ii>:
}
 8003db0:	b5b0      	push	{r4, r5, r7, lr}
 8003db2:	b082      	sub	sp, #8
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	6039      	str	r1, [r7, #0]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d12d      	bne.n	8003e1c <_Z41__static_initialization_and_destruction_0ii+0x6c>
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d128      	bne.n	8003e1c <_Z41__static_initialization_and_destruction_0ii+0x6c>
float output_current_factor = max_current_sensor_output_voltage / 4096.0 * (1.0 / current_sensor_volts_to_amper);
 8003dca:	4b16      	ldr	r3, [pc, #88]	; (8003e24 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f7fc fbd2 	bl	8000578 <__aeabi_f2d>
 8003dd4:	f04f 0200 	mov.w	r2, #0
 8003dd8:	4b13      	ldr	r3, [pc, #76]	; (8003e28 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8003dda:	f7fc fd4f 	bl	800087c <__aeabi_ddiv>
 8003dde:	4602      	mov	r2, r0
 8003de0:	460b      	mov	r3, r1
 8003de2:	4614      	mov	r4, r2
 8003de4:	461d      	mov	r5, r3
 8003de6:	4b11      	ldr	r3, [pc, #68]	; (8003e2c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4618      	mov	r0, r3
 8003dec:	f7fc fbc4 	bl	8000578 <__aeabi_f2d>
 8003df0:	4602      	mov	r2, r0
 8003df2:	460b      	mov	r3, r1
 8003df4:	f04f 0000 	mov.w	r0, #0
 8003df8:	490d      	ldr	r1, [pc, #52]	; (8003e30 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8003dfa:	f7fc fd3f 	bl	800087c <__aeabi_ddiv>
 8003dfe:	4602      	mov	r2, r0
 8003e00:	460b      	mov	r3, r1
 8003e02:	4620      	mov	r0, r4
 8003e04:	4629      	mov	r1, r5
 8003e06:	f7fc fc0f 	bl	8000628 <__aeabi_dmul>
 8003e0a:	4602      	mov	r2, r0
 8003e0c:	460b      	mov	r3, r1
 8003e0e:	4610      	mov	r0, r2
 8003e10:	4619      	mov	r1, r3
 8003e12:	f7fc fee1 	bl	8000bd8 <__aeabi_d2f>
 8003e16:	4603      	mov	r3, r0
 8003e18:	4a06      	ldr	r2, [pc, #24]	; (8003e34 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8003e1a:	6013      	str	r3, [r2, #0]
}
 8003e1c:	bf00      	nop
 8003e1e:	3708      	adds	r7, #8
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bdb0      	pop	{r4, r5, r7, pc}
 8003e24:	2000017c 	.word	0x2000017c
 8003e28:	40b00000 	.word	0x40b00000
 8003e2c:	20000180 	.word	0x20000180
 8003e30:	3ff00000 	.word	0x3ff00000
 8003e34:	20001a64 	.word	0x20001a64

08003e38 <_GLOBAL__sub_I_max_current_sensor_output_voltage>:
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	af00      	add	r7, sp, #0
 8003e3c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003e40:	2001      	movs	r0, #1
 8003e42:	f7ff ffb5 	bl	8003db0 <_Z41__static_initialization_and_destruction_0ii>
 8003e46:	bd80      	pop	{r7, pc}

08003e48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b082      	sub	sp, #8
 8003e4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e4e:	4b11      	ldr	r3, [pc, #68]	; (8003e94 <HAL_MspInit+0x4c>)
 8003e50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e52:	4a10      	ldr	r2, [pc, #64]	; (8003e94 <HAL_MspInit+0x4c>)
 8003e54:	f043 0301 	orr.w	r3, r3, #1
 8003e58:	6613      	str	r3, [r2, #96]	; 0x60
 8003e5a:	4b0e      	ldr	r3, [pc, #56]	; (8003e94 <HAL_MspInit+0x4c>)
 8003e5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e5e:	f003 0301 	and.w	r3, r3, #1
 8003e62:	607b      	str	r3, [r7, #4]
 8003e64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003e66:	4b0b      	ldr	r3, [pc, #44]	; (8003e94 <HAL_MspInit+0x4c>)
 8003e68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e6a:	4a0a      	ldr	r2, [pc, #40]	; (8003e94 <HAL_MspInit+0x4c>)
 8003e6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e70:	6593      	str	r3, [r2, #88]	; 0x58
 8003e72:	4b08      	ldr	r3, [pc, #32]	; (8003e94 <HAL_MspInit+0x4c>)
 8003e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e7a:	603b      	str	r3, [r7, #0]
 8003e7c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003e7e:	2200      	movs	r2, #0
 8003e80:	210f      	movs	r1, #15
 8003e82:	f06f 0001 	mvn.w	r0, #1
 8003e86:	f002 fcd9 	bl	800683c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003e8a:	bf00      	nop
 8003e8c:	3708      	adds	r7, #8
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}
 8003e92:	bf00      	nop
 8003e94:	40021000 	.word	0x40021000

08003e98 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b0b4      	sub	sp, #208	; 0xd0
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ea0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	601a      	str	r2, [r3, #0]
 8003ea8:	605a      	str	r2, [r3, #4]
 8003eaa:	609a      	str	r2, [r3, #8]
 8003eac:	60da      	str	r2, [r3, #12]
 8003eae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003eb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003eb4:	2298      	movs	r2, #152	; 0x98
 8003eb6:	2100      	movs	r1, #0
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f00e f9c1 	bl	8012240 <memset>
  if(hadc->Instance==ADC1)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a97      	ldr	r2, [pc, #604]	; (8004120 <HAL_ADC_MspInit+0x288>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	f040 80ad 	bne.w	8004024 <HAL_ADC_MspInit+0x18c>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8003eca:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003ece:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8003ed0:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8003ed4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003ed8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003edc:	4618      	mov	r0, r3
 8003ede:	f005 faa7 	bl	8009430 <HAL_RCCEx_PeriphCLKConfig>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d001      	beq.n	8003eec <HAL_ADC_MspInit+0x54>
    {
      Error_Handler();
 8003ee8:	f7ff fa1a 	bl	8003320 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 8003eec:	4b8d      	ldr	r3, [pc, #564]	; (8004124 <HAL_ADC_MspInit+0x28c>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	3301      	adds	r3, #1
 8003ef2:	4a8c      	ldr	r2, [pc, #560]	; (8004124 <HAL_ADC_MspInit+0x28c>)
 8003ef4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8003ef6:	4b8b      	ldr	r3, [pc, #556]	; (8004124 <HAL_ADC_MspInit+0x28c>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	d10b      	bne.n	8003f16 <HAL_ADC_MspInit+0x7e>
      __HAL_RCC_ADC_CLK_ENABLE();
 8003efe:	4b8a      	ldr	r3, [pc, #552]	; (8004128 <HAL_ADC_MspInit+0x290>)
 8003f00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f02:	4a89      	ldr	r2, [pc, #548]	; (8004128 <HAL_ADC_MspInit+0x290>)
 8003f04:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003f08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003f0a:	4b87      	ldr	r3, [pc, #540]	; (8004128 <HAL_ADC_MspInit+0x290>)
 8003f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f0e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f12:	623b      	str	r3, [r7, #32]
 8003f14:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f16:	4b84      	ldr	r3, [pc, #528]	; (8004128 <HAL_ADC_MspInit+0x290>)
 8003f18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f1a:	4a83      	ldr	r2, [pc, #524]	; (8004128 <HAL_ADC_MspInit+0x290>)
 8003f1c:	f043 0301 	orr.w	r3, r3, #1
 8003f20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003f22:	4b81      	ldr	r3, [pc, #516]	; (8004128 <HAL_ADC_MspInit+0x290>)
 8003f24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f26:	f003 0301 	and.w	r3, r3, #1
 8003f2a:	61fb      	str	r3, [r7, #28]
 8003f2c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f2e:	4b7e      	ldr	r3, [pc, #504]	; (8004128 <HAL_ADC_MspInit+0x290>)
 8003f30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f32:	4a7d      	ldr	r2, [pc, #500]	; (8004128 <HAL_ADC_MspInit+0x290>)
 8003f34:	f043 0304 	orr.w	r3, r3, #4
 8003f38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003f3a:	4b7b      	ldr	r3, [pc, #492]	; (8004128 <HAL_ADC_MspInit+0x290>)
 8003f3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f3e:	f003 0304 	and.w	r3, r3, #4
 8003f42:	61bb      	str	r3, [r7, #24]
 8003f44:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f46:	4b78      	ldr	r3, [pc, #480]	; (8004128 <HAL_ADC_MspInit+0x290>)
 8003f48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f4a:	4a77      	ldr	r2, [pc, #476]	; (8004128 <HAL_ADC_MspInit+0x290>)
 8003f4c:	f043 0302 	orr.w	r3, r3, #2
 8003f50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003f52:	4b75      	ldr	r3, [pc, #468]	; (8004128 <HAL_ADC_MspInit+0x290>)
 8003f54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f56:	f003 0302 	and.w	r3, r3, #2
 8003f5a:	617b      	str	r3, [r7, #20]
 8003f5c:	697b      	ldr	r3, [r7, #20]
    PA7     ------> ADC1_IN12
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = THERM_1_Pin|THERM_2_Pin|THERM_3_Pin|THERM_4_Pin
 8003f5e:	23f8      	movs	r3, #248	; 0xf8
 8003f60:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
                          |THERM_5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003f64:	230b      	movs	r3, #11
 8003f66:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f70:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003f74:	4619      	mov	r1, r3
 8003f76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f7a:	f002 fe43 	bl	8006c04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = THERM_6_Pin|THERM_7_Pin;
 8003f7e:	2330      	movs	r3, #48	; 0x30
 8003f80:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003f84:	230b      	movs	r3, #11
 8003f86:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f90:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003f94:	4619      	mov	r1, r3
 8003f96:	4865      	ldr	r0, [pc, #404]	; (800412c <HAL_ADC_MspInit+0x294>)
 8003f98:	f002 fe34 	bl	8006c04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = THERM_8_Pin;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003fa2:	230b      	movs	r3, #11
 8003fa4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(THERM_8_GPIO_Port, &GPIO_InitStruct);
 8003fae:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003fb2:	4619      	mov	r1, r3
 8003fb4:	485e      	ldr	r0, [pc, #376]	; (8004130 <HAL_ADC_MspInit+0x298>)
 8003fb6:	f002 fe25 	bl	8006c04 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8003fba:	4b5e      	ldr	r3, [pc, #376]	; (8004134 <HAL_ADC_MspInit+0x29c>)
 8003fbc:	4a5e      	ldr	r2, [pc, #376]	; (8004138 <HAL_ADC_MspInit+0x2a0>)
 8003fbe:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8003fc0:	4b5c      	ldr	r3, [pc, #368]	; (8004134 <HAL_ADC_MspInit+0x29c>)
 8003fc2:	2205      	movs	r2, #5
 8003fc4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003fc6:	4b5b      	ldr	r3, [pc, #364]	; (8004134 <HAL_ADC_MspInit+0x29c>)
 8003fc8:	2200      	movs	r2, #0
 8003fca:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003fcc:	4b59      	ldr	r3, [pc, #356]	; (8004134 <HAL_ADC_MspInit+0x29c>)
 8003fce:	2200      	movs	r2, #0
 8003fd0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003fd2:	4b58      	ldr	r3, [pc, #352]	; (8004134 <HAL_ADC_MspInit+0x29c>)
 8003fd4:	2280      	movs	r2, #128	; 0x80
 8003fd6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003fd8:	4b56      	ldr	r3, [pc, #344]	; (8004134 <HAL_ADC_MspInit+0x29c>)
 8003fda:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003fde:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003fe0:	4b54      	ldr	r3, [pc, #336]	; (8004134 <HAL_ADC_MspInit+0x29c>)
 8003fe2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003fe6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003fe8:	4b52      	ldr	r3, [pc, #328]	; (8004134 <HAL_ADC_MspInit+0x29c>)
 8003fea:	2220      	movs	r2, #32
 8003fec:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8003fee:	4b51      	ldr	r3, [pc, #324]	; (8004134 <HAL_ADC_MspInit+0x29c>)
 8003ff0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003ff4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003ff6:	484f      	ldr	r0, [pc, #316]	; (8004134 <HAL_ADC_MspInit+0x29c>)
 8003ff8:	f002 fc4a 	bl	8006890 <HAL_DMA_Init>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d001      	beq.n	8004006 <HAL_ADC_MspInit+0x16e>
    {
      Error_Handler();
 8004002:	f7ff f98d 	bl	8003320 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	4a4a      	ldr	r2, [pc, #296]	; (8004134 <HAL_ADC_MspInit+0x29c>)
 800400a:	651a      	str	r2, [r3, #80]	; 0x50
 800400c:	4a49      	ldr	r2, [pc, #292]	; (8004134 <HAL_ADC_MspInit+0x29c>)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8004012:	2200      	movs	r2, #0
 8004014:	2105      	movs	r1, #5
 8004016:	2012      	movs	r0, #18
 8004018:	f002 fc10 	bl	800683c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800401c:	2012      	movs	r0, #18
 800401e:	f002 fc29 	bl	8006874 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8004022:	e079      	b.n	8004118 <HAL_ADC_MspInit+0x280>
  else if(hadc->Instance==ADC2)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a44      	ldr	r2, [pc, #272]	; (800413c <HAL_ADC_MspInit+0x2a4>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d174      	bne.n	8004118 <HAL_ADC_MspInit+0x280>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800402e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004032:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8004034:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8004038:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800403c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004040:	4618      	mov	r0, r3
 8004042:	f005 f9f5 	bl	8009430 <HAL_RCCEx_PeriphCLKConfig>
 8004046:	4603      	mov	r3, r0
 8004048:	2b00      	cmp	r3, #0
 800404a:	d001      	beq.n	8004050 <HAL_ADC_MspInit+0x1b8>
      Error_Handler();
 800404c:	f7ff f968 	bl	8003320 <Error_Handler>
    HAL_RCC_ADC_CLK_ENABLED++;
 8004050:	4b34      	ldr	r3, [pc, #208]	; (8004124 <HAL_ADC_MspInit+0x28c>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	3301      	adds	r3, #1
 8004056:	4a33      	ldr	r2, [pc, #204]	; (8004124 <HAL_ADC_MspInit+0x28c>)
 8004058:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 800405a:	4b32      	ldr	r3, [pc, #200]	; (8004124 <HAL_ADC_MspInit+0x28c>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	2b01      	cmp	r3, #1
 8004060:	d10b      	bne.n	800407a <HAL_ADC_MspInit+0x1e2>
      __HAL_RCC_ADC_CLK_ENABLE();
 8004062:	4b31      	ldr	r3, [pc, #196]	; (8004128 <HAL_ADC_MspInit+0x290>)
 8004064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004066:	4a30      	ldr	r2, [pc, #192]	; (8004128 <HAL_ADC_MspInit+0x290>)
 8004068:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800406c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800406e:	4b2e      	ldr	r3, [pc, #184]	; (8004128 <HAL_ADC_MspInit+0x290>)
 8004070:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004072:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004076:	613b      	str	r3, [r7, #16]
 8004078:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800407a:	4b2b      	ldr	r3, [pc, #172]	; (8004128 <HAL_ADC_MspInit+0x290>)
 800407c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800407e:	4a2a      	ldr	r2, [pc, #168]	; (8004128 <HAL_ADC_MspInit+0x290>)
 8004080:	f043 0302 	orr.w	r3, r3, #2
 8004084:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004086:	4b28      	ldr	r3, [pc, #160]	; (8004128 <HAL_ADC_MspInit+0x290>)
 8004088:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800408a:	f003 0302 	and.w	r3, r3, #2
 800408e:	60fb      	str	r3, [r7, #12]
 8004090:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = CURRENT_SENSOR_Pin;
 8004092:	2302      	movs	r3, #2
 8004094:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8004098:	230b      	movs	r3, #11
 800409a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800409e:	2300      	movs	r3, #0
 80040a0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(CURRENT_SENSOR_GPIO_Port, &GPIO_InitStruct);
 80040a4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80040a8:	4619      	mov	r1, r3
 80040aa:	4821      	ldr	r0, [pc, #132]	; (8004130 <HAL_ADC_MspInit+0x298>)
 80040ac:	f002 fdaa 	bl	8006c04 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Channel1;
 80040b0:	4b23      	ldr	r3, [pc, #140]	; (8004140 <HAL_ADC_MspInit+0x2a8>)
 80040b2:	4a24      	ldr	r2, [pc, #144]	; (8004144 <HAL_ADC_MspInit+0x2ac>)
 80040b4:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 80040b6:	4b22      	ldr	r3, [pc, #136]	; (8004140 <HAL_ADC_MspInit+0x2a8>)
 80040b8:	2206      	movs	r2, #6
 80040ba:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80040bc:	4b20      	ldr	r3, [pc, #128]	; (8004140 <HAL_ADC_MspInit+0x2a8>)
 80040be:	2200      	movs	r2, #0
 80040c0:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80040c2:	4b1f      	ldr	r3, [pc, #124]	; (8004140 <HAL_ADC_MspInit+0x2a8>)
 80040c4:	2200      	movs	r2, #0
 80040c6:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80040c8:	4b1d      	ldr	r3, [pc, #116]	; (8004140 <HAL_ADC_MspInit+0x2a8>)
 80040ca:	2280      	movs	r2, #128	; 0x80
 80040cc:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80040ce:	4b1c      	ldr	r3, [pc, #112]	; (8004140 <HAL_ADC_MspInit+0x2a8>)
 80040d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040d4:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80040d6:	4b1a      	ldr	r3, [pc, #104]	; (8004140 <HAL_ADC_MspInit+0x2a8>)
 80040d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80040dc:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 80040de:	4b18      	ldr	r3, [pc, #96]	; (8004140 <HAL_ADC_MspInit+0x2a8>)
 80040e0:	2200      	movs	r2, #0
 80040e2:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_HIGH;
 80040e4:	4b16      	ldr	r3, [pc, #88]	; (8004140 <HAL_ADC_MspInit+0x2a8>)
 80040e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80040ea:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80040ec:	4814      	ldr	r0, [pc, #80]	; (8004140 <HAL_ADC_MspInit+0x2a8>)
 80040ee:	f002 fbcf 	bl	8006890 <HAL_DMA_Init>
 80040f2:	4603      	mov	r3, r0
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d001      	beq.n	80040fc <HAL_ADC_MspInit+0x264>
      Error_Handler();
 80040f8:	f7ff f912 	bl	8003320 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	4a10      	ldr	r2, [pc, #64]	; (8004140 <HAL_ADC_MspInit+0x2a8>)
 8004100:	651a      	str	r2, [r3, #80]	; 0x50
 8004102:	4a0f      	ldr	r2, [pc, #60]	; (8004140 <HAL_ADC_MspInit+0x2a8>)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8004108:	2200      	movs	r2, #0
 800410a:	2105      	movs	r1, #5
 800410c:	2012      	movs	r0, #18
 800410e:	f002 fb95 	bl	800683c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8004112:	2012      	movs	r0, #18
 8004114:	f002 fbae 	bl	8006874 <HAL_NVIC_EnableIRQ>
}
 8004118:	bf00      	nop
 800411a:	37d0      	adds	r7, #208	; 0xd0
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}
 8004120:	50040000 	.word	0x50040000
 8004124:	20001a68 	.word	0x20001a68
 8004128:	40021000 	.word	0x40021000
 800412c:	48000800 	.word	0x48000800
 8004130:	48000400 	.word	0x48000400
 8004134:	20000e7c 	.word	0x20000e7c
 8004138:	40020008 	.word	0x40020008
 800413c:	50040100 	.word	0x50040100
 8004140:	20000edc 	.word	0x20000edc
 8004144:	40020408 	.word	0x40020408

08004148 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b08a      	sub	sp, #40	; 0x28
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004150:	f107 0314 	add.w	r3, r7, #20
 8004154:	2200      	movs	r2, #0
 8004156:	601a      	str	r2, [r3, #0]
 8004158:	605a      	str	r2, [r3, #4]
 800415a:	609a      	str	r2, [r3, #8]
 800415c:	60da      	str	r2, [r3, #12]
 800415e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a1b      	ldr	r2, [pc, #108]	; (80041d4 <HAL_CAN_MspInit+0x8c>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d130      	bne.n	80041cc <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800416a:	4b1b      	ldr	r3, [pc, #108]	; (80041d8 <HAL_CAN_MspInit+0x90>)
 800416c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800416e:	4a1a      	ldr	r2, [pc, #104]	; (80041d8 <HAL_CAN_MspInit+0x90>)
 8004170:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004174:	6593      	str	r3, [r2, #88]	; 0x58
 8004176:	4b18      	ldr	r3, [pc, #96]	; (80041d8 <HAL_CAN_MspInit+0x90>)
 8004178:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800417a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800417e:	613b      	str	r3, [r7, #16]
 8004180:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004182:	4b15      	ldr	r3, [pc, #84]	; (80041d8 <HAL_CAN_MspInit+0x90>)
 8004184:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004186:	4a14      	ldr	r2, [pc, #80]	; (80041d8 <HAL_CAN_MspInit+0x90>)
 8004188:	f043 0302 	orr.w	r3, r3, #2
 800418c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800418e:	4b12      	ldr	r3, [pc, #72]	; (80041d8 <HAL_CAN_MspInit+0x90>)
 8004190:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004192:	f003 0302 	and.w	r3, r3, #2
 8004196:	60fb      	str	r3, [r7, #12]
 8004198:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800419a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800419e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041a0:	2302      	movs	r3, #2
 80041a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041a4:	2300      	movs	r3, #0
 80041a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041a8:	2303      	movs	r3, #3
 80041aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80041ac:	2309      	movs	r3, #9
 80041ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041b0:	f107 0314 	add.w	r3, r7, #20
 80041b4:	4619      	mov	r1, r3
 80041b6:	4809      	ldr	r0, [pc, #36]	; (80041dc <HAL_CAN_MspInit+0x94>)
 80041b8:	f002 fd24 	bl	8006c04 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 80041bc:	2200      	movs	r2, #0
 80041be:	2105      	movs	r1, #5
 80041c0:	2013      	movs	r0, #19
 80041c2:	f002 fb3b 	bl	800683c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 80041c6:	2013      	movs	r0, #19
 80041c8:	f002 fb54 	bl	8006874 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80041cc:	bf00      	nop
 80041ce:	3728      	adds	r7, #40	; 0x28
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}
 80041d4:	40006400 	.word	0x40006400
 80041d8:	40021000 	.word	0x40021000
 80041dc:	48000400 	.word	0x48000400

080041e0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b0aa      	sub	sp, #168	; 0xa8
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80041e8:	f107 0310 	add.w	r3, r7, #16
 80041ec:	2298      	movs	r2, #152	; 0x98
 80041ee:	2100      	movs	r1, #0
 80041f0:	4618      	mov	r0, r3
 80041f2:	f00e f825 	bl	8012240 <memset>
  if(hrtc->Instance==RTC)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a16      	ldr	r2, [pc, #88]	; (8004254 <HAL_RTC_MspInit+0x74>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d124      	bne.n	800424a <HAL_RTC_MspInit+0x6a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004200:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004204:	613b      	str	r3, [r7, #16]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8004206:	f44f 7300 	mov.w	r3, #512	; 0x200
 800420a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800420e:	f107 0310 	add.w	r3, r7, #16
 8004212:	4618      	mov	r0, r3
 8004214:	f005 f90c 	bl	8009430 <HAL_RCCEx_PeriphCLKConfig>
 8004218:	4603      	mov	r3, r0
 800421a:	2b00      	cmp	r3, #0
 800421c:	d001      	beq.n	8004222 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800421e:	f7ff f87f 	bl	8003320 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004222:	4b0d      	ldr	r3, [pc, #52]	; (8004258 <HAL_RTC_MspInit+0x78>)
 8004224:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004228:	4a0b      	ldr	r2, [pc, #44]	; (8004258 <HAL_RTC_MspInit+0x78>)
 800422a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800422e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8004232:	4b09      	ldr	r3, [pc, #36]	; (8004258 <HAL_RTC_MspInit+0x78>)
 8004234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004236:	4a08      	ldr	r2, [pc, #32]	; (8004258 <HAL_RTC_MspInit+0x78>)
 8004238:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800423c:	6593      	str	r3, [r2, #88]	; 0x58
 800423e:	4b06      	ldr	r3, [pc, #24]	; (8004258 <HAL_RTC_MspInit+0x78>)
 8004240:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004242:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004246:	60fb      	str	r3, [r7, #12]
 8004248:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800424a:	bf00      	nop
 800424c:	37a8      	adds	r7, #168	; 0xa8
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}
 8004252:	bf00      	nop
 8004254:	40002800 	.word	0x40002800
 8004258:	40021000 	.word	0x40021000

0800425c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b08a      	sub	sp, #40	; 0x28
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004264:	f107 0314 	add.w	r3, r7, #20
 8004268:	2200      	movs	r2, #0
 800426a:	601a      	str	r2, [r3, #0]
 800426c:	605a      	str	r2, [r3, #4]
 800426e:	609a      	str	r2, [r3, #8]
 8004270:	60da      	str	r2, [r3, #12]
 8004272:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a1f      	ldr	r2, [pc, #124]	; (80042f8 <HAL_SPI_MspInit+0x9c>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d137      	bne.n	80042ee <HAL_SPI_MspInit+0x92>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800427e:	4b1f      	ldr	r3, [pc, #124]	; (80042fc <HAL_SPI_MspInit+0xa0>)
 8004280:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004282:	4a1e      	ldr	r2, [pc, #120]	; (80042fc <HAL_SPI_MspInit+0xa0>)
 8004284:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004288:	6613      	str	r3, [r2, #96]	; 0x60
 800428a:	4b1c      	ldr	r3, [pc, #112]	; (80042fc <HAL_SPI_MspInit+0xa0>)
 800428c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800428e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004292:	613b      	str	r3, [r7, #16]
 8004294:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004296:	4b19      	ldr	r3, [pc, #100]	; (80042fc <HAL_SPI_MspInit+0xa0>)
 8004298:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800429a:	4a18      	ldr	r2, [pc, #96]	; (80042fc <HAL_SPI_MspInit+0xa0>)
 800429c:	f043 0302 	orr.w	r3, r3, #2
 80042a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80042a2:	4b16      	ldr	r3, [pc, #88]	; (80042fc <HAL_SPI_MspInit+0xa0>)
 80042a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042a6:	f003 0302 	and.w	r3, r3, #2
 80042aa:	60fb      	str	r3, [r7, #12]
 80042ac:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80042ae:	2328      	movs	r3, #40	; 0x28
 80042b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042b2:	2302      	movs	r3, #2
 80042b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042b6:	2300      	movs	r3, #0
 80042b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042ba:	2303      	movs	r3, #3
 80042bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80042be:	2305      	movs	r3, #5
 80042c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042c2:	f107 0314 	add.w	r3, r7, #20
 80042c6:	4619      	mov	r1, r3
 80042c8:	480d      	ldr	r0, [pc, #52]	; (8004300 <HAL_SPI_MspInit+0xa4>)
 80042ca:	f002 fc9b 	bl	8006c04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80042ce:	2310      	movs	r3, #16
 80042d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042d2:	2302      	movs	r3, #2
 80042d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80042d6:	2301      	movs	r3, #1
 80042d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042da:	2303      	movs	r3, #3
 80042dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80042de:	2305      	movs	r3, #5
 80042e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042e2:	f107 0314 	add.w	r3, r7, #20
 80042e6:	4619      	mov	r1, r3
 80042e8:	4805      	ldr	r0, [pc, #20]	; (8004300 <HAL_SPI_MspInit+0xa4>)
 80042ea:	f002 fc8b 	bl	8006c04 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80042ee:	bf00      	nop
 80042f0:	3728      	adds	r7, #40	; 0x28
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}
 80042f6:	bf00      	nop
 80042f8:	40013000 	.word	0x40013000
 80042fc:	40021000 	.word	0x40021000
 8004300:	48000400 	.word	0x48000400

08004304 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b086      	sub	sp, #24
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a23      	ldr	r2, [pc, #140]	; (80043a0 <HAL_TIM_Base_MspInit+0x9c>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d114      	bne.n	8004340 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004316:	4b23      	ldr	r3, [pc, #140]	; (80043a4 <HAL_TIM_Base_MspInit+0xa0>)
 8004318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800431a:	4a22      	ldr	r2, [pc, #136]	; (80043a4 <HAL_TIM_Base_MspInit+0xa0>)
 800431c:	f043 0302 	orr.w	r3, r3, #2
 8004320:	6593      	str	r3, [r2, #88]	; 0x58
 8004322:	4b20      	ldr	r3, [pc, #128]	; (80043a4 <HAL_TIM_Base_MspInit+0xa0>)
 8004324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004326:	f003 0302 	and.w	r3, r3, #2
 800432a:	617b      	str	r3, [r7, #20]
 800432c:	697b      	ldr	r3, [r7, #20]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800432e:	2200      	movs	r2, #0
 8004330:	2105      	movs	r1, #5
 8004332:	201d      	movs	r0, #29
 8004334:	f002 fa82 	bl	800683c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004338:	201d      	movs	r0, #29
 800433a:	f002 fa9b 	bl	8006874 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800433e:	e02a      	b.n	8004396 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM6)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a18      	ldr	r2, [pc, #96]	; (80043a8 <HAL_TIM_Base_MspInit+0xa4>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d114      	bne.n	8004374 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800434a:	4b16      	ldr	r3, [pc, #88]	; (80043a4 <HAL_TIM_Base_MspInit+0xa0>)
 800434c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800434e:	4a15      	ldr	r2, [pc, #84]	; (80043a4 <HAL_TIM_Base_MspInit+0xa0>)
 8004350:	f043 0310 	orr.w	r3, r3, #16
 8004354:	6593      	str	r3, [r2, #88]	; 0x58
 8004356:	4b13      	ldr	r3, [pc, #76]	; (80043a4 <HAL_TIM_Base_MspInit+0xa0>)
 8004358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800435a:	f003 0310 	and.w	r3, r3, #16
 800435e:	613b      	str	r3, [r7, #16]
 8004360:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8004362:	2200      	movs	r2, #0
 8004364:	2105      	movs	r1, #5
 8004366:	2036      	movs	r0, #54	; 0x36
 8004368:	f002 fa68 	bl	800683c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800436c:	2036      	movs	r0, #54	; 0x36
 800436e:	f002 fa81 	bl	8006874 <HAL_NVIC_EnableIRQ>
}
 8004372:	e010      	b.n	8004396 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM8)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a0c      	ldr	r2, [pc, #48]	; (80043ac <HAL_TIM_Base_MspInit+0xa8>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d10b      	bne.n	8004396 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800437e:	4b09      	ldr	r3, [pc, #36]	; (80043a4 <HAL_TIM_Base_MspInit+0xa0>)
 8004380:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004382:	4a08      	ldr	r2, [pc, #32]	; (80043a4 <HAL_TIM_Base_MspInit+0xa0>)
 8004384:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004388:	6613      	str	r3, [r2, #96]	; 0x60
 800438a:	4b06      	ldr	r3, [pc, #24]	; (80043a4 <HAL_TIM_Base_MspInit+0xa0>)
 800438c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800438e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004392:	60fb      	str	r3, [r7, #12]
 8004394:	68fb      	ldr	r3, [r7, #12]
}
 8004396:	bf00      	nop
 8004398:	3718      	adds	r7, #24
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}
 800439e:	bf00      	nop
 80043a0:	40000400 	.word	0x40000400
 80043a4:	40021000 	.word	0x40021000
 80043a8:	40001000 	.word	0x40001000
 80043ac:	40013400 	.word	0x40013400

080043b0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b08c      	sub	sp, #48	; 0x30
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80043b8:	2300      	movs	r3, #0
 80043ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80043bc:	2300      	movs	r3, #0
 80043be:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM16 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 80043c0:	2200      	movs	r2, #0
 80043c2:	6879      	ldr	r1, [r7, #4]
 80043c4:	2019      	movs	r0, #25
 80043c6:	f002 fa39 	bl	800683c <HAL_NVIC_SetPriority>

  /* Enable the TIM16 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80043ca:	2019      	movs	r0, #25
 80043cc:	f002 fa52 	bl	8006874 <HAL_NVIC_EnableIRQ>

  /* Enable TIM16 clock */
  __HAL_RCC_TIM16_CLK_ENABLE();
 80043d0:	4b1e      	ldr	r3, [pc, #120]	; (800444c <HAL_InitTick+0x9c>)
 80043d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043d4:	4a1d      	ldr	r2, [pc, #116]	; (800444c <HAL_InitTick+0x9c>)
 80043d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043da:	6613      	str	r3, [r2, #96]	; 0x60
 80043dc:	4b1b      	ldr	r3, [pc, #108]	; (800444c <HAL_InitTick+0x9c>)
 80043de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043e4:	60fb      	str	r3, [r7, #12]
 80043e6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80043e8:	f107 0210 	add.w	r2, r7, #16
 80043ec:	f107 0314 	add.w	r3, r7, #20
 80043f0:	4611      	mov	r1, r2
 80043f2:	4618      	mov	r0, r3
 80043f4:	f004 ff2c 	bl	8009250 <HAL_RCC_GetClockConfig>

  /* Compute TIM16 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80043f8:	f004 ff14 	bl	8009224 <HAL_RCC_GetPCLK2Freq>
 80043fc:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM16 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80043fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004400:	4a13      	ldr	r2, [pc, #76]	; (8004450 <HAL_InitTick+0xa0>)
 8004402:	fba2 2303 	umull	r2, r3, r2, r3
 8004406:	0c9b      	lsrs	r3, r3, #18
 8004408:	3b01      	subs	r3, #1
 800440a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM16 */
  htim16.Instance = TIM16;
 800440c:	4b11      	ldr	r3, [pc, #68]	; (8004454 <HAL_InitTick+0xa4>)
 800440e:	4a12      	ldr	r2, [pc, #72]	; (8004458 <HAL_InitTick+0xa8>)
 8004410:	601a      	str	r2, [r3, #0]
  + Period = [(TIM16CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim16.Init.Period = (1000000U / 1000U) - 1U;
 8004412:	4b10      	ldr	r3, [pc, #64]	; (8004454 <HAL_InitTick+0xa4>)
 8004414:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004418:	60da      	str	r2, [r3, #12]
  htim16.Init.Prescaler = uwPrescalerValue;
 800441a:	4a0e      	ldr	r2, [pc, #56]	; (8004454 <HAL_InitTick+0xa4>)
 800441c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800441e:	6053      	str	r3, [r2, #4]
  htim16.Init.ClockDivision = 0;
 8004420:	4b0c      	ldr	r3, [pc, #48]	; (8004454 <HAL_InitTick+0xa4>)
 8004422:	2200      	movs	r2, #0
 8004424:	611a      	str	r2, [r3, #16]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004426:	4b0b      	ldr	r3, [pc, #44]	; (8004454 <HAL_InitTick+0xa4>)
 8004428:	2200      	movs	r2, #0
 800442a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim16) == HAL_OK)
 800442c:	4809      	ldr	r0, [pc, #36]	; (8004454 <HAL_InitTick+0xa4>)
 800442e:	f006 fd4d 	bl	800aecc <HAL_TIM_Base_Init>
 8004432:	4603      	mov	r3, r0
 8004434:	2b00      	cmp	r3, #0
 8004436:	d104      	bne.n	8004442 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim16);
 8004438:	4806      	ldr	r0, [pc, #24]	; (8004454 <HAL_InitTick+0xa4>)
 800443a:	f006 fd9f 	bl	800af7c <HAL_TIM_Base_Start_IT>
 800443e:	4603      	mov	r3, r0
 8004440:	e000      	b.n	8004444 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8004442:	2301      	movs	r3, #1
}
 8004444:	4618      	mov	r0, r3
 8004446:	3730      	adds	r7, #48	; 0x30
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}
 800444c:	40021000 	.word	0x40021000
 8004450:	431bde83 	.word	0x431bde83
 8004454:	20001a6c 	.word	0x20001a6c
 8004458:	40014400 	.word	0x40014400

0800445c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800445c:	b480      	push	{r7}
 800445e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004460:	e7fe      	b.n	8004460 <NMI_Handler+0x4>

08004462 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004462:	b480      	push	{r7}
 8004464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004466:	e7fe      	b.n	8004466 <HardFault_Handler+0x4>

08004468 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004468:	b480      	push	{r7}
 800446a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800446c:	e7fe      	b.n	800446c <MemManage_Handler+0x4>

0800446e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800446e:	b480      	push	{r7}
 8004470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004472:	e7fe      	b.n	8004472 <BusFault_Handler+0x4>

08004474 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004474:	b480      	push	{r7}
 8004476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004478:	e7fe      	b.n	8004478 <UsageFault_Handler+0x4>

0800447a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800447a:	b480      	push	{r7}
 800447c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800447e:	bf00      	nop
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr

08004488 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800448c:	4802      	ldr	r0, [pc, #8]	; (8004498 <DMA1_Channel1_IRQHandler+0x10>)
 800448e:	f002 faa7 	bl	80069e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004492:	bf00      	nop
 8004494:	bd80      	pop	{r7, pc}
 8004496:	bf00      	nop
 8004498:	20000e7c 	.word	0x20000e7c

0800449c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80044a0:	4803      	ldr	r0, [pc, #12]	; (80044b0 <ADC1_2_IRQHandler+0x14>)
 80044a2:	f000 fcd7 	bl	8004e54 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80044a6:	4803      	ldr	r0, [pc, #12]	; (80044b4 <ADC1_2_IRQHandler+0x18>)
 80044a8:	f000 fcd4 	bl	8004e54 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80044ac:	bf00      	nop
 80044ae:	bd80      	pop	{r7, pc}
 80044b0:	20000dac 	.word	0x20000dac
 80044b4:	20000e14 	.word	0x20000e14

080044b8 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80044bc:	4802      	ldr	r0, [pc, #8]	; (80044c8 <CAN1_TX_IRQHandler+0x10>)
 80044be:	f001 fed6 	bl	800626e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 80044c2:	bf00      	nop
 80044c4:	bd80      	pop	{r7, pc}
 80044c6:	bf00      	nop
 80044c8:	20000f3c 	.word	0x20000f3c

080044cc <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80044d0:	4802      	ldr	r0, [pc, #8]	; (80044dc <TIM1_UP_TIM16_IRQHandler+0x10>)
 80044d2:	f006 fdc3 	bl	800b05c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80044d6:	bf00      	nop
 80044d8:	bd80      	pop	{r7, pc}
 80044da:	bf00      	nop
 80044dc:	20001a6c 	.word	0x20001a6c

080044e0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80044e4:	4802      	ldr	r0, [pc, #8]	; (80044f0 <TIM3_IRQHandler+0x10>)
 80044e6:	f006 fdb9 	bl	800b05c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80044ea:	bf00      	nop
 80044ec:	bd80      	pop	{r7, pc}
 80044ee:	bf00      	nop
 80044f0:	20000ffc 	.word	0x20000ffc

080044f4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80044f8:	4802      	ldr	r0, [pc, #8]	; (8004504 <TIM6_DAC_IRQHandler+0x10>)
 80044fa:	f006 fdaf 	bl	800b05c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80044fe:	bf00      	nop
 8004500:	bd80      	pop	{r7, pc}
 8004502:	bf00      	nop
 8004504:	20001048 	.word	0x20001048

08004508 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800450c:	4802      	ldr	r0, [pc, #8]	; (8004518 <DMA2_Channel1_IRQHandler+0x10>)
 800450e:	f002 fa67 	bl	80069e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8004512:	bf00      	nop
 8004514:	bd80      	pop	{r7, pc}
 8004516:	bf00      	nop
 8004518:	20000edc 	.word	0x20000edc

0800451c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8004520:	4802      	ldr	r0, [pc, #8]	; (800452c <OTG_FS_IRQHandler+0x10>)
 8004522:	f002 fe84 	bl	800722e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8004526:	bf00      	nop
 8004528:	bd80      	pop	{r7, pc}
 800452a:	bf00      	nop
 800452c:	2000489c 	.word	0x2000489c

08004530 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004530:	b480      	push	{r7}
 8004532:	af00      	add	r7, sp, #0
	return 1;
 8004534:	2301      	movs	r3, #1
}
 8004536:	4618      	mov	r0, r3
 8004538:	46bd      	mov	sp, r7
 800453a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453e:	4770      	bx	lr

08004540 <_kill>:

int _kill(int pid, int sig)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b082      	sub	sp, #8
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
 8004548:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800454a:	f00d fe27 	bl	801219c <__errno>
 800454e:	4603      	mov	r3, r0
 8004550:	2216      	movs	r2, #22
 8004552:	601a      	str	r2, [r3, #0]
	return -1;
 8004554:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004558:	4618      	mov	r0, r3
 800455a:	3708      	adds	r7, #8
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}

08004560 <_exit>:

void _exit (int status)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b082      	sub	sp, #8
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004568:	f04f 31ff 	mov.w	r1, #4294967295
 800456c:	6878      	ldr	r0, [r7, #4]
 800456e:	f7ff ffe7 	bl	8004540 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004572:	e7fe      	b.n	8004572 <_exit+0x12>

08004574 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b086      	sub	sp, #24
 8004578:	af00      	add	r7, sp, #0
 800457a:	60f8      	str	r0, [r7, #12]
 800457c:	60b9      	str	r1, [r7, #8]
 800457e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004580:	2300      	movs	r3, #0
 8004582:	617b      	str	r3, [r7, #20]
 8004584:	e00a      	b.n	800459c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004586:	f3af 8000 	nop.w
 800458a:	4601      	mov	r1, r0
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	1c5a      	adds	r2, r3, #1
 8004590:	60ba      	str	r2, [r7, #8]
 8004592:	b2ca      	uxtb	r2, r1
 8004594:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	3301      	adds	r3, #1
 800459a:	617b      	str	r3, [r7, #20]
 800459c:	697a      	ldr	r2, [r7, #20]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	429a      	cmp	r2, r3
 80045a2:	dbf0      	blt.n	8004586 <_read+0x12>
	}

return len;
 80045a4:	687b      	ldr	r3, [r7, #4]
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3718      	adds	r7, #24
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}

080045ae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80045ae:	b580      	push	{r7, lr}
 80045b0:	b086      	sub	sp, #24
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	60f8      	str	r0, [r7, #12]
 80045b6:	60b9      	str	r1, [r7, #8]
 80045b8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80045ba:	2300      	movs	r3, #0
 80045bc:	617b      	str	r3, [r7, #20]
 80045be:	e009      	b.n	80045d4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	1c5a      	adds	r2, r3, #1
 80045c4:	60ba      	str	r2, [r7, #8]
 80045c6:	781b      	ldrb	r3, [r3, #0]
 80045c8:	4618      	mov	r0, r3
 80045ca:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	3301      	adds	r3, #1
 80045d2:	617b      	str	r3, [r7, #20]
 80045d4:	697a      	ldr	r2, [r7, #20]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	429a      	cmp	r2, r3
 80045da:	dbf1      	blt.n	80045c0 <_write+0x12>
	}
	return len;
 80045dc:	687b      	ldr	r3, [r7, #4]
}
 80045de:	4618      	mov	r0, r3
 80045e0:	3718      	adds	r7, #24
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}

080045e6 <_close>:

int _close(int file)
{
 80045e6:	b480      	push	{r7}
 80045e8:	b083      	sub	sp, #12
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	6078      	str	r0, [r7, #4]
	return -1;
 80045ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	370c      	adds	r7, #12
 80045f6:	46bd      	mov	sp, r7
 80045f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fc:	4770      	bx	lr

080045fe <_fstat>:


int _fstat(int file, struct stat *st)
{
 80045fe:	b480      	push	{r7}
 8004600:	b083      	sub	sp, #12
 8004602:	af00      	add	r7, sp, #0
 8004604:	6078      	str	r0, [r7, #4]
 8004606:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800460e:	605a      	str	r2, [r3, #4]
	return 0;
 8004610:	2300      	movs	r3, #0
}
 8004612:	4618      	mov	r0, r3
 8004614:	370c      	adds	r7, #12
 8004616:	46bd      	mov	sp, r7
 8004618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461c:	4770      	bx	lr

0800461e <_isatty>:

int _isatty(int file)
{
 800461e:	b480      	push	{r7}
 8004620:	b083      	sub	sp, #12
 8004622:	af00      	add	r7, sp, #0
 8004624:	6078      	str	r0, [r7, #4]
	return 1;
 8004626:	2301      	movs	r3, #1
}
 8004628:	4618      	mov	r0, r3
 800462a:	370c      	adds	r7, #12
 800462c:	46bd      	mov	sp, r7
 800462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004632:	4770      	bx	lr

08004634 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004634:	b480      	push	{r7}
 8004636:	b085      	sub	sp, #20
 8004638:	af00      	add	r7, sp, #0
 800463a:	60f8      	str	r0, [r7, #12]
 800463c:	60b9      	str	r1, [r7, #8]
 800463e:	607a      	str	r2, [r7, #4]
	return 0;
 8004640:	2300      	movs	r3, #0
}
 8004642:	4618      	mov	r0, r3
 8004644:	3714      	adds	r7, #20
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr
	...

08004650 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b086      	sub	sp, #24
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004658:	4a14      	ldr	r2, [pc, #80]	; (80046ac <_sbrk+0x5c>)
 800465a:	4b15      	ldr	r3, [pc, #84]	; (80046b0 <_sbrk+0x60>)
 800465c:	1ad3      	subs	r3, r2, r3
 800465e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004664:	4b13      	ldr	r3, [pc, #76]	; (80046b4 <_sbrk+0x64>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d102      	bne.n	8004672 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800466c:	4b11      	ldr	r3, [pc, #68]	; (80046b4 <_sbrk+0x64>)
 800466e:	4a12      	ldr	r2, [pc, #72]	; (80046b8 <_sbrk+0x68>)
 8004670:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004672:	4b10      	ldr	r3, [pc, #64]	; (80046b4 <_sbrk+0x64>)
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	4413      	add	r3, r2
 800467a:	693a      	ldr	r2, [r7, #16]
 800467c:	429a      	cmp	r2, r3
 800467e:	d207      	bcs.n	8004690 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004680:	f00d fd8c 	bl	801219c <__errno>
 8004684:	4603      	mov	r3, r0
 8004686:	220c      	movs	r2, #12
 8004688:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800468a:	f04f 33ff 	mov.w	r3, #4294967295
 800468e:	e009      	b.n	80046a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004690:	4b08      	ldr	r3, [pc, #32]	; (80046b4 <_sbrk+0x64>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004696:	4b07      	ldr	r3, [pc, #28]	; (80046b4 <_sbrk+0x64>)
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	4413      	add	r3, r2
 800469e:	4a05      	ldr	r2, [pc, #20]	; (80046b4 <_sbrk+0x64>)
 80046a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80046a2:	68fb      	ldr	r3, [r7, #12]
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	3718      	adds	r7, #24
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}
 80046ac:	20050000 	.word	0x20050000
 80046b0:	00000400 	.word	0x00000400
 80046b4:	20001ab8 	.word	0x20001ab8
 80046b8:	20004fd8 	.word	0x20004fd8

080046bc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80046bc:	b480      	push	{r7}
 80046be:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80046c0:	4b06      	ldr	r3, [pc, #24]	; (80046dc <SystemInit+0x20>)
 80046c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046c6:	4a05      	ldr	r2, [pc, #20]	; (80046dc <SystemInit+0x20>)
 80046c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80046cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80046d0:	bf00      	nop
 80046d2:	46bd      	mov	sp, r7
 80046d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d8:	4770      	bx	lr
 80046da:	bf00      	nop
 80046dc:	e000ed00 	.word	0xe000ed00

080046e0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80046e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004718 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80046e4:	f7ff ffea 	bl	80046bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80046e8:	480c      	ldr	r0, [pc, #48]	; (800471c <LoopForever+0x6>)
  ldr r1, =_edata
 80046ea:	490d      	ldr	r1, [pc, #52]	; (8004720 <LoopForever+0xa>)
  ldr r2, =_sidata
 80046ec:	4a0d      	ldr	r2, [pc, #52]	; (8004724 <LoopForever+0xe>)
  movs r3, #0
 80046ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80046f0:	e002      	b.n	80046f8 <LoopCopyDataInit>

080046f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80046f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80046f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80046f6:	3304      	adds	r3, #4

080046f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80046f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80046fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80046fc:	d3f9      	bcc.n	80046f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80046fe:	4a0a      	ldr	r2, [pc, #40]	; (8004728 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004700:	4c0a      	ldr	r4, [pc, #40]	; (800472c <LoopForever+0x16>)
  movs r3, #0
 8004702:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004704:	e001      	b.n	800470a <LoopFillZerobss>

08004706 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004706:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004708:	3204      	adds	r2, #4

0800470a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800470a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800470c:	d3fb      	bcc.n	8004706 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800470e:	f00d fd4b 	bl	80121a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004712:	f7fe f979 	bl	8002a08 <main>

08004716 <LoopForever>:

LoopForever:
    b LoopForever
 8004716:	e7fe      	b.n	8004716 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8004718:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800471c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004720:	200004e8 	.word	0x200004e8
  ldr r2, =_sidata
 8004724:	08015478 	.word	0x08015478
  ldr r2, =_sbss
 8004728:	200004e8 	.word	0x200004e8
  ldr r4, =_ebss
 800472c:	20004fd8 	.word	0x20004fd8

08004730 <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004730:	e7fe      	b.n	8004730 <CAN1_RX0_IRQHandler>

08004732 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004732:	b580      	push	{r7, lr}
 8004734:	b082      	sub	sp, #8
 8004736:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004738:	2300      	movs	r3, #0
 800473a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800473c:	2003      	movs	r0, #3
 800473e:	f002 f872 	bl	8006826 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004742:	200f      	movs	r0, #15
 8004744:	f7ff fe34 	bl	80043b0 <HAL_InitTick>
 8004748:	4603      	mov	r3, r0
 800474a:	2b00      	cmp	r3, #0
 800474c:	d002      	beq.n	8004754 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	71fb      	strb	r3, [r7, #7]
 8004752:	e001      	b.n	8004758 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004754:	f7ff fb78 	bl	8003e48 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004758:	79fb      	ldrb	r3, [r7, #7]
}
 800475a:	4618      	mov	r0, r3
 800475c:	3708      	adds	r7, #8
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}
	...

08004764 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004764:	b480      	push	{r7}
 8004766:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004768:	4b06      	ldr	r3, [pc, #24]	; (8004784 <HAL_IncTick+0x20>)
 800476a:	781b      	ldrb	r3, [r3, #0]
 800476c:	461a      	mov	r2, r3
 800476e:	4b06      	ldr	r3, [pc, #24]	; (8004788 <HAL_IncTick+0x24>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4413      	add	r3, r2
 8004774:	4a04      	ldr	r2, [pc, #16]	; (8004788 <HAL_IncTick+0x24>)
 8004776:	6013      	str	r3, [r2, #0]
}
 8004778:	bf00      	nop
 800477a:	46bd      	mov	sp, r7
 800477c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004780:	4770      	bx	lr
 8004782:	bf00      	nop
 8004784:	2000018c 	.word	0x2000018c
 8004788:	20001abc 	.word	0x20001abc

0800478c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800478c:	b480      	push	{r7}
 800478e:	af00      	add	r7, sp, #0
  return uwTick;
 8004790:	4b03      	ldr	r3, [pc, #12]	; (80047a0 <HAL_GetTick+0x14>)
 8004792:	681b      	ldr	r3, [r3, #0]
}
 8004794:	4618      	mov	r0, r3
 8004796:	46bd      	mov	sp, r7
 8004798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479c:	4770      	bx	lr
 800479e:	bf00      	nop
 80047a0:	20001abc 	.word	0x20001abc

080047a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b084      	sub	sp, #16
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80047ac:	f7ff ffee 	bl	800478c <HAL_GetTick>
 80047b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047bc:	d005      	beq.n	80047ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80047be:	4b0a      	ldr	r3, [pc, #40]	; (80047e8 <HAL_Delay+0x44>)
 80047c0:	781b      	ldrb	r3, [r3, #0]
 80047c2:	461a      	mov	r2, r3
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	4413      	add	r3, r2
 80047c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80047ca:	bf00      	nop
 80047cc:	f7ff ffde 	bl	800478c <HAL_GetTick>
 80047d0:	4602      	mov	r2, r0
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	1ad3      	subs	r3, r2, r3
 80047d6:	68fa      	ldr	r2, [r7, #12]
 80047d8:	429a      	cmp	r2, r3
 80047da:	d8f7      	bhi.n	80047cc <HAL_Delay+0x28>
  {
  }
}
 80047dc:	bf00      	nop
 80047de:	bf00      	nop
 80047e0:	3710      	adds	r7, #16
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}
 80047e6:	bf00      	nop
 80047e8:	2000018c 	.word	0x2000018c

080047ec <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b083      	sub	sp, #12
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
 80047f4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	431a      	orrs	r2, r3
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	609a      	str	r2, [r3, #8]
}
 8004806:	bf00      	nop
 8004808:	370c      	adds	r7, #12
 800480a:	46bd      	mov	sp, r7
 800480c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004810:	4770      	bx	lr

08004812 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004812:	b480      	push	{r7}
 8004814:	b083      	sub	sp, #12
 8004816:	af00      	add	r7, sp, #0
 8004818:	6078      	str	r0, [r7, #4]
 800481a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	431a      	orrs	r2, r3
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	609a      	str	r2, [r3, #8]
}
 800482c:	bf00      	nop
 800482e:	370c      	adds	r7, #12
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr

08004838 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004838:	b480      	push	{r7}
 800483a:	b083      	sub	sp, #12
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8004848:	4618      	mov	r0, r3
 800484a:	370c      	adds	r7, #12
 800484c:	46bd      	mov	sp, r7
 800484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004852:	4770      	bx	lr

08004854 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004854:	b480      	push	{r7}
 8004856:	b087      	sub	sp, #28
 8004858:	af00      	add	r7, sp, #0
 800485a:	60f8      	str	r0, [r7, #12]
 800485c:	60b9      	str	r1, [r7, #8]
 800485e:	607a      	str	r2, [r7, #4]
 8004860:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	3360      	adds	r3, #96	; 0x60
 8004866:	461a      	mov	r2, r3
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	009b      	lsls	r3, r3, #2
 800486c:	4413      	add	r3, r2
 800486e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	4b08      	ldr	r3, [pc, #32]	; (8004898 <LL_ADC_SetOffset+0x44>)
 8004876:	4013      	ands	r3, r2
 8004878:	687a      	ldr	r2, [r7, #4]
 800487a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800487e:	683a      	ldr	r2, [r7, #0]
 8004880:	430a      	orrs	r2, r1
 8004882:	4313      	orrs	r3, r2
 8004884:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800488c:	bf00      	nop
 800488e:	371c      	adds	r7, #28
 8004890:	46bd      	mov	sp, r7
 8004892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004896:	4770      	bx	lr
 8004898:	03fff000 	.word	0x03fff000

0800489c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800489c:	b480      	push	{r7}
 800489e:	b085      	sub	sp, #20
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
 80048a4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	3360      	adds	r3, #96	; 0x60
 80048aa:	461a      	mov	r2, r3
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	4413      	add	r3, r2
 80048b2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80048bc:	4618      	mov	r0, r3
 80048be:	3714      	adds	r7, #20
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr

080048c8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b087      	sub	sp, #28
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	60f8      	str	r0, [r7, #12]
 80048d0:	60b9      	str	r1, [r7, #8]
 80048d2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	3360      	adds	r3, #96	; 0x60
 80048d8:	461a      	mov	r2, r3
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	009b      	lsls	r3, r3, #2
 80048de:	4413      	add	r3, r2
 80048e0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	431a      	orrs	r2, r3
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80048f2:	bf00      	nop
 80048f4:	371c      	adds	r7, #28
 80048f6:	46bd      	mov	sp, r7
 80048f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fc:	4770      	bx	lr

080048fe <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80048fe:	b480      	push	{r7}
 8004900:	b083      	sub	sp, #12
 8004902:	af00      	add	r7, sp, #0
 8004904:	6078      	str	r0, [r7, #4]
 8004906:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	695b      	ldr	r3, [r3, #20]
 800490c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	431a      	orrs	r2, r3
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	615a      	str	r2, [r3, #20]
}
 8004918:	bf00      	nop
 800491a:	370c      	adds	r7, #12
 800491c:	46bd      	mov	sp, r7
 800491e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004922:	4770      	bx	lr

08004924 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8004924:	b480      	push	{r7}
 8004926:	b083      	sub	sp, #12
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	68db      	ldr	r3, [r3, #12]
 8004930:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004934:	2b00      	cmp	r3, #0
 8004936:	d101      	bne.n	800493c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004938:	2301      	movs	r3, #1
 800493a:	e000      	b.n	800493e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800493c:	2300      	movs	r3, #0
}
 800493e:	4618      	mov	r0, r3
 8004940:	370c      	adds	r7, #12
 8004942:	46bd      	mov	sp, r7
 8004944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004948:	4770      	bx	lr

0800494a <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800494a:	b480      	push	{r7}
 800494c:	b087      	sub	sp, #28
 800494e:	af00      	add	r7, sp, #0
 8004950:	60f8      	str	r0, [r7, #12]
 8004952:	60b9      	str	r1, [r7, #8]
 8004954:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	3330      	adds	r3, #48	; 0x30
 800495a:	461a      	mov	r2, r3
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	0a1b      	lsrs	r3, r3, #8
 8004960:	009b      	lsls	r3, r3, #2
 8004962:	f003 030c 	and.w	r3, r3, #12
 8004966:	4413      	add	r3, r2
 8004968:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	f003 031f 	and.w	r3, r3, #31
 8004974:	211f      	movs	r1, #31
 8004976:	fa01 f303 	lsl.w	r3, r1, r3
 800497a:	43db      	mvns	r3, r3
 800497c:	401a      	ands	r2, r3
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	0e9b      	lsrs	r3, r3, #26
 8004982:	f003 011f 	and.w	r1, r3, #31
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	f003 031f 	and.w	r3, r3, #31
 800498c:	fa01 f303 	lsl.w	r3, r1, r3
 8004990:	431a      	orrs	r2, r3
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004996:	bf00      	nop
 8004998:	371c      	adds	r7, #28
 800499a:	46bd      	mov	sp, r7
 800499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a0:	4770      	bx	lr

080049a2 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80049a2:	b480      	push	{r7}
 80049a4:	b083      	sub	sp, #12
 80049a6:	af00      	add	r7, sp, #0
 80049a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049ae:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d101      	bne.n	80049ba <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80049b6:	2301      	movs	r3, #1
 80049b8:	e000      	b.n	80049bc <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80049ba:	2300      	movs	r3, #0
}
 80049bc:	4618      	mov	r0, r3
 80049be:	370c      	adds	r7, #12
 80049c0:	46bd      	mov	sp, r7
 80049c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c6:	4770      	bx	lr

080049c8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b087      	sub	sp, #28
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	60f8      	str	r0, [r7, #12]
 80049d0:	60b9      	str	r1, [r7, #8]
 80049d2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	3314      	adds	r3, #20
 80049d8:	461a      	mov	r2, r3
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	0e5b      	lsrs	r3, r3, #25
 80049de:	009b      	lsls	r3, r3, #2
 80049e0:	f003 0304 	and.w	r3, r3, #4
 80049e4:	4413      	add	r3, r2
 80049e6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	0d1b      	lsrs	r3, r3, #20
 80049f0:	f003 031f 	and.w	r3, r3, #31
 80049f4:	2107      	movs	r1, #7
 80049f6:	fa01 f303 	lsl.w	r3, r1, r3
 80049fa:	43db      	mvns	r3, r3
 80049fc:	401a      	ands	r2, r3
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	0d1b      	lsrs	r3, r3, #20
 8004a02:	f003 031f 	and.w	r3, r3, #31
 8004a06:	6879      	ldr	r1, [r7, #4]
 8004a08:	fa01 f303 	lsl.w	r3, r1, r3
 8004a0c:	431a      	orrs	r2, r3
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004a12:	bf00      	nop
 8004a14:	371c      	adds	r7, #28
 8004a16:	46bd      	mov	sp, r7
 8004a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1c:	4770      	bx	lr
	...

08004a20 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b085      	sub	sp, #20
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	60f8      	str	r0, [r7, #12]
 8004a28:	60b9      	str	r1, [r7, #8]
 8004a2a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a38:	43db      	mvns	r3, r3
 8004a3a:	401a      	ands	r2, r3
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	f003 0318 	and.w	r3, r3, #24
 8004a42:	4908      	ldr	r1, [pc, #32]	; (8004a64 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004a44:	40d9      	lsrs	r1, r3
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	400b      	ands	r3, r1
 8004a4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a4e:	431a      	orrs	r2, r3
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8004a56:	bf00      	nop
 8004a58:	3714      	adds	r7, #20
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr
 8004a62:	bf00      	nop
 8004a64:	0007ffff 	.word	0x0007ffff

08004a68 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b083      	sub	sp, #12
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	f003 031f 	and.w	r3, r3, #31
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	370c      	adds	r7, #12
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a82:	4770      	bx	lr

08004a84 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b083      	sub	sp, #12
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	370c      	adds	r7, #12
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr

08004aa0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b083      	sub	sp, #12
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8004ab0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004ab4:	687a      	ldr	r2, [r7, #4]
 8004ab6:	6093      	str	r3, [r2, #8]
}
 8004ab8:	bf00      	nop
 8004aba:	370c      	adds	r7, #12
 8004abc:	46bd      	mov	sp, r7
 8004abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac2:	4770      	bx	lr

08004ac4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b083      	sub	sp, #12
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ad4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ad8:	d101      	bne.n	8004ade <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004ada:	2301      	movs	r3, #1
 8004adc:	e000      	b.n	8004ae0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004ade:	2300      	movs	r3, #0
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	370c      	adds	r7, #12
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aea:	4770      	bx	lr

08004aec <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b083      	sub	sp, #12
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8004afc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004b00:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004b08:	bf00      	nop
 8004b0a:	370c      	adds	r7, #12
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b12:	4770      	bx	lr

08004b14 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b083      	sub	sp, #12
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b24:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b28:	d101      	bne.n	8004b2e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e000      	b.n	8004b30 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004b2e:	2300      	movs	r3, #0
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	370c      	adds	r7, #12
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr

08004b3c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b083      	sub	sp, #12
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	f003 0301 	and.w	r3, r3, #1
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d101      	bne.n	8004b54 <LL_ADC_IsEnabled+0x18>
 8004b50:	2301      	movs	r3, #1
 8004b52:	e000      	b.n	8004b56 <LL_ADC_IsEnabled+0x1a>
 8004b54:	2300      	movs	r3, #0
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	370c      	adds	r7, #12
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b60:	4770      	bx	lr

08004b62 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004b62:	b480      	push	{r7}
 8004b64:	b083      	sub	sp, #12
 8004b66:	af00      	add	r7, sp, #0
 8004b68:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	f003 0304 	and.w	r3, r3, #4
 8004b72:	2b04      	cmp	r3, #4
 8004b74:	d101      	bne.n	8004b7a <LL_ADC_REG_IsConversionOngoing+0x18>
 8004b76:	2301      	movs	r3, #1
 8004b78:	e000      	b.n	8004b7c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004b7a:	2300      	movs	r3, #0
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	370c      	adds	r7, #12
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr

08004b88 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b083      	sub	sp, #12
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	f003 0308 	and.w	r3, r3, #8
 8004b98:	2b08      	cmp	r3, #8
 8004b9a:	d101      	bne.n	8004ba0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	e000      	b.n	8004ba2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004ba0:	2300      	movs	r3, #0
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	370c      	adds	r7, #12
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bac:	4770      	bx	lr
	...

08004bb0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004bb0:	b590      	push	{r4, r7, lr}
 8004bb2:	b089      	sub	sp, #36	; 0x24
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d101      	bne.n	8004bca <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e134      	b.n	8004e34 <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	691b      	ldr	r3, [r3, #16]
 8004bce:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d109      	bne.n	8004bec <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	f7ff f95d 	bl	8003e98 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2200      	movs	r2, #0
 8004be2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2200      	movs	r2, #0
 8004be8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	f7ff ff67 	bl	8004ac4 <LL_ADC_IsDeepPowerDownEnabled>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d004      	beq.n	8004c06 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4618      	mov	r0, r3
 8004c02:	f7ff ff4d 	bl	8004aa0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f7ff ff82 	bl	8004b14 <LL_ADC_IsInternalRegulatorEnabled>
 8004c10:	4603      	mov	r3, r0
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d115      	bne.n	8004c42 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f7ff ff66 	bl	8004aec <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004c20:	4b86      	ldr	r3, [pc, #536]	; (8004e3c <HAL_ADC_Init+0x28c>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	099b      	lsrs	r3, r3, #6
 8004c26:	4a86      	ldr	r2, [pc, #536]	; (8004e40 <HAL_ADC_Init+0x290>)
 8004c28:	fba2 2303 	umull	r2, r3, r2, r3
 8004c2c:	099b      	lsrs	r3, r3, #6
 8004c2e:	3301      	adds	r3, #1
 8004c30:	005b      	lsls	r3, r3, #1
 8004c32:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004c34:	e002      	b.n	8004c3c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	3b01      	subs	r3, #1
 8004c3a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d1f9      	bne.n	8004c36 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4618      	mov	r0, r3
 8004c48:	f7ff ff64 	bl	8004b14 <LL_ADC_IsInternalRegulatorEnabled>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d10d      	bne.n	8004c6e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c56:	f043 0210 	orr.w	r2, r3, #16
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c62:	f043 0201 	orr.w	r2, r3, #1
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4618      	mov	r0, r3
 8004c74:	f7ff ff75 	bl	8004b62 <LL_ADC_REG_IsConversionOngoing>
 8004c78:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c7e:	f003 0310 	and.w	r3, r3, #16
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	f040 80cd 	bne.w	8004e22 <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	f040 80c9 	bne.w	8004e22 <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c94:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004c98:	f043 0202 	orr.w	r2, r3, #2
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	f7ff ff49 	bl	8004b3c <LL_ADC_IsEnabled>
 8004caa:	4603      	mov	r3, r0
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d110      	bne.n	8004cd2 <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004cb0:	4864      	ldr	r0, [pc, #400]	; (8004e44 <HAL_ADC_Init+0x294>)
 8004cb2:	f7ff ff43 	bl	8004b3c <LL_ADC_IsEnabled>
 8004cb6:	4604      	mov	r4, r0
 8004cb8:	4863      	ldr	r0, [pc, #396]	; (8004e48 <HAL_ADC_Init+0x298>)
 8004cba:	f7ff ff3f 	bl	8004b3c <LL_ADC_IsEnabled>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	4323      	orrs	r3, r4
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d105      	bne.n	8004cd2 <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	4619      	mov	r1, r3
 8004ccc:	485f      	ldr	r0, [pc, #380]	; (8004e4c <HAL_ADC_Init+0x29c>)
 8004cce:	f7ff fd8d 	bl	80047ec <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	7e5b      	ldrb	r3, [r3, #25]
 8004cd6:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004cdc:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8004ce2:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8004ce8:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004cf0:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d106      	bne.n	8004d0e <HAL_ADC_Init+0x15e>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d04:	3b01      	subs	r3, #1
 8004d06:	045b      	lsls	r3, r3, #17
 8004d08:	69ba      	ldr	r2, [r7, #24]
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d009      	beq.n	8004d2a <HAL_ADC_Init+0x17a>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d1a:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d22:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004d24:	69ba      	ldr	r2, [r7, #24]
 8004d26:	4313      	orrs	r3, r2
 8004d28:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	68da      	ldr	r2, [r3, #12]
 8004d30:	4b47      	ldr	r3, [pc, #284]	; (8004e50 <HAL_ADC_Init+0x2a0>)
 8004d32:	4013      	ands	r3, r2
 8004d34:	687a      	ldr	r2, [r7, #4]
 8004d36:	6812      	ldr	r2, [r2, #0]
 8004d38:	69b9      	ldr	r1, [r7, #24]
 8004d3a:	430b      	orrs	r3, r1
 8004d3c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4618      	mov	r0, r3
 8004d44:	f7ff ff0d 	bl	8004b62 <LL_ADC_REG_IsConversionOngoing>
 8004d48:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f7ff ff1a 	bl	8004b88 <LL_ADC_INJ_IsConversionOngoing>
 8004d54:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d140      	bne.n	8004dde <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d13d      	bne.n	8004dde <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	7e1b      	ldrb	r3, [r3, #24]
 8004d6a:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004d6c:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004d74:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004d76:	4313      	orrs	r3, r2
 8004d78:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	68db      	ldr	r3, [r3, #12]
 8004d80:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d84:	f023 0306 	bic.w	r3, r3, #6
 8004d88:	687a      	ldr	r2, [r7, #4]
 8004d8a:	6812      	ldr	r2, [r2, #0]
 8004d8c:	69b9      	ldr	r1, [r7, #24]
 8004d8e:	430b      	orrs	r3, r1
 8004d90:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004d98:	2b01      	cmp	r3, #1
 8004d9a:	d118      	bne.n	8004dce <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	691b      	ldr	r3, [r3, #16]
 8004da2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004da6:	f023 0304 	bic.w	r3, r3, #4
 8004daa:	687a      	ldr	r2, [r7, #4]
 8004dac:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8004dae:	687a      	ldr	r2, [r7, #4]
 8004db0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004db2:	4311      	orrs	r1, r2
 8004db4:	687a      	ldr	r2, [r7, #4]
 8004db6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004db8:	4311      	orrs	r1, r2
 8004dba:	687a      	ldr	r2, [r7, #4]
 8004dbc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004dbe:	430a      	orrs	r2, r1
 8004dc0:	431a      	orrs	r2, r3
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f042 0201 	orr.w	r2, r2, #1
 8004dca:	611a      	str	r2, [r3, #16]
 8004dcc:	e007      	b.n	8004dde <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	691a      	ldr	r2, [r3, #16]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f022 0201 	bic.w	r2, r2, #1
 8004ddc:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	691b      	ldr	r3, [r3, #16]
 8004de2:	2b01      	cmp	r3, #1
 8004de4:	d10c      	bne.n	8004e00 <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dec:	f023 010f 	bic.w	r1, r3, #15
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	69db      	ldr	r3, [r3, #28]
 8004df4:	1e5a      	subs	r2, r3, #1
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	430a      	orrs	r2, r1
 8004dfc:	631a      	str	r2, [r3, #48]	; 0x30
 8004dfe:	e007      	b.n	8004e10 <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f022 020f 	bic.w	r2, r2, #15
 8004e0e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e14:	f023 0303 	bic.w	r3, r3, #3
 8004e18:	f043 0201 	orr.w	r2, r3, #1
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	659a      	str	r2, [r3, #88]	; 0x58
 8004e20:	e007      	b.n	8004e32 <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e26:	f043 0210 	orr.w	r2, r3, #16
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004e32:	7ffb      	ldrb	r3, [r7, #31]
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	3724      	adds	r7, #36	; 0x24
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd90      	pop	{r4, r7, pc}
 8004e3c:	20000184 	.word	0x20000184
 8004e40:	053e2d63 	.word	0x053e2d63
 8004e44:	50040000 	.word	0x50040000
 8004e48:	50040100 	.word	0x50040100
 8004e4c:	50040300 	.word	0x50040300
 8004e50:	fff0c007 	.word	0xfff0c007

08004e54 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b08a      	sub	sp, #40	; 0x28
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004e70:	4882      	ldr	r0, [pc, #520]	; (800507c <HAL_ADC_IRQHandler+0x228>)
 8004e72:	f7ff fdf9 	bl	8004a68 <LL_ADC_GetMultimode>
 8004e76:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8004e78:	69fb      	ldr	r3, [r7, #28]
 8004e7a:	f003 0302 	and.w	r3, r3, #2
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d017      	beq.n	8004eb2 <HAL_ADC_IRQHandler+0x5e>
 8004e82:	69bb      	ldr	r3, [r7, #24]
 8004e84:	f003 0302 	and.w	r3, r3, #2
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d012      	beq.n	8004eb2 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e90:	f003 0310 	and.w	r3, r3, #16
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d105      	bne.n	8004ea4 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e9c:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	659a      	str	r2, [r3, #88]	; 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8004ea4:	6878      	ldr	r0, [r7, #4]
 8004ea6:	f000 fe57 	bl	8005b58 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	2202      	movs	r2, #2
 8004eb0:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004eb2:	69fb      	ldr	r3, [r7, #28]
 8004eb4:	f003 0304 	and.w	r3, r3, #4
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d004      	beq.n	8004ec6 <HAL_ADC_IRQHandler+0x72>
 8004ebc:	69bb      	ldr	r3, [r7, #24]
 8004ebe:	f003 0304 	and.w	r3, r3, #4
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d10a      	bne.n	8004edc <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004ec6:	69fb      	ldr	r3, [r7, #28]
 8004ec8:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	f000 8083 	beq.w	8004fd8 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004ed2:	69bb      	ldr	r3, [r7, #24]
 8004ed4:	f003 0308 	and.w	r3, r3, #8
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d07d      	beq.n	8004fd8 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ee0:	f003 0310 	and.w	r3, r3, #16
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d105      	bne.n	8004ef4 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eec:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f7ff fd13 	bl	8004924 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004efe:	4603      	mov	r3, r0
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d062      	beq.n	8004fca <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a5d      	ldr	r2, [pc, #372]	; (8005080 <HAL_ADC_IRQHandler+0x22c>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d002      	beq.n	8004f14 <HAL_ADC_IRQHandler+0xc0>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	e000      	b.n	8004f16 <HAL_ADC_IRQHandler+0xc2>
 8004f14:	4b5b      	ldr	r3, [pc, #364]	; (8005084 <HAL_ADC_IRQHandler+0x230>)
 8004f16:	687a      	ldr	r2, [r7, #4]
 8004f18:	6812      	ldr	r2, [r2, #0]
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d008      	beq.n	8004f30 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d005      	beq.n	8004f30 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	2b05      	cmp	r3, #5
 8004f28:	d002      	beq.n	8004f30 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	2b09      	cmp	r3, #9
 8004f2e:	d104      	bne.n	8004f3a <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	68db      	ldr	r3, [r3, #12]
 8004f36:	623b      	str	r3, [r7, #32]
 8004f38:	e00c      	b.n	8004f54 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a50      	ldr	r2, [pc, #320]	; (8005080 <HAL_ADC_IRQHandler+0x22c>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d002      	beq.n	8004f4a <HAL_ADC_IRQHandler+0xf6>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	e000      	b.n	8004f4c <HAL_ADC_IRQHandler+0xf8>
 8004f4a:	4b4e      	ldr	r3, [pc, #312]	; (8005084 <HAL_ADC_IRQHandler+0x230>)
 8004f4c:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	68db      	ldr	r3, [r3, #12]
 8004f52:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8004f54:	6a3b      	ldr	r3, [r7, #32]
 8004f56:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d135      	bne.n	8004fca <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f003 0308 	and.w	r3, r3, #8
 8004f68:	2b08      	cmp	r3, #8
 8004f6a:	d12e      	bne.n	8004fca <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4618      	mov	r0, r3
 8004f72:	f7ff fdf6 	bl	8004b62 <LL_ADC_REG_IsConversionOngoing>
 8004f76:	4603      	mov	r3, r0
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d11a      	bne.n	8004fb2 <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	685a      	ldr	r2, [r3, #4]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f022 020c 	bic.w	r2, r2, #12
 8004f8a:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f90:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	659a      	str	r2, [r3, #88]	; 0x58

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d112      	bne.n	8004fca <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fa8:	f043 0201 	orr.w	r2, r3, #1
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	659a      	str	r2, [r3, #88]	; 0x58
 8004fb0:	e00b      	b.n	8004fca <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fb6:	f043 0210 	orr.w	r2, r3, #16
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fc2:	f043 0201 	orr.w	r2, r3, #1
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	65da      	str	r2, [r3, #92]	; 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f000 f95c 	bl	8005288 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	220c      	movs	r2, #12
 8004fd6:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004fd8:	69fb      	ldr	r3, [r7, #28]
 8004fda:	f003 0320 	and.w	r3, r3, #32
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d004      	beq.n	8004fec <HAL_ADC_IRQHandler+0x198>
 8004fe2:	69bb      	ldr	r3, [r7, #24]
 8004fe4:	f003 0320 	and.w	r3, r3, #32
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d10b      	bne.n	8005004 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004fec:	69fb      	ldr	r3, [r7, #28]
 8004fee:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	f000 809f 	beq.w	8005136 <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004ff8:	69bb      	ldr	r3, [r7, #24]
 8004ffa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	f000 8099 	beq.w	8005136 <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005008:	f003 0310 	and.w	r3, r3, #16
 800500c:	2b00      	cmp	r3, #0
 800500e:	d105      	bne.n	800501c <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005014:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4618      	mov	r0, r3
 8005022:	f7ff fcbe 	bl	80049a2 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8005026:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4618      	mov	r0, r3
 800502e:	f7ff fc79 	bl	8004924 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005032:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a11      	ldr	r2, [pc, #68]	; (8005080 <HAL_ADC_IRQHandler+0x22c>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d002      	beq.n	8005044 <HAL_ADC_IRQHandler+0x1f0>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	e000      	b.n	8005046 <HAL_ADC_IRQHandler+0x1f2>
 8005044:	4b0f      	ldr	r3, [pc, #60]	; (8005084 <HAL_ADC_IRQHandler+0x230>)
 8005046:	687a      	ldr	r2, [r7, #4]
 8005048:	6812      	ldr	r2, [r2, #0]
 800504a:	4293      	cmp	r3, r2
 800504c:	d008      	beq.n	8005060 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d005      	beq.n	8005060 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	2b06      	cmp	r3, #6
 8005058:	d002      	beq.n	8005060 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	2b07      	cmp	r3, #7
 800505e:	d104      	bne.n	800506a <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	68db      	ldr	r3, [r3, #12]
 8005066:	623b      	str	r3, [r7, #32]
 8005068:	e013      	b.n	8005092 <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a04      	ldr	r2, [pc, #16]	; (8005080 <HAL_ADC_IRQHandler+0x22c>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d009      	beq.n	8005088 <HAL_ADC_IRQHandler+0x234>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	e007      	b.n	800508a <HAL_ADC_IRQHandler+0x236>
 800507a:	bf00      	nop
 800507c:	50040300 	.word	0x50040300
 8005080:	50040100 	.word	0x50040100
 8005084:	50040000 	.word	0x50040000
 8005088:	4b7d      	ldr	r3, [pc, #500]	; (8005280 <HAL_ADC_IRQHandler+0x42c>)
 800508a:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	68db      	ldr	r3, [r3, #12]
 8005090:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d047      	beq.n	8005128 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8005098:	6a3b      	ldr	r3, [r7, #32]
 800509a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d007      	beq.n	80050b2 <HAL_ADC_IRQHandler+0x25e>
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d03f      	beq.n	8005128 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80050a8:	6a3b      	ldr	r3, [r7, #32]
 80050aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d13a      	bne.n	8005128 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050bc:	2b40      	cmp	r3, #64	; 0x40
 80050be:	d133      	bne.n	8005128 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80050c0:	6a3b      	ldr	r3, [r7, #32]
 80050c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d12e      	bne.n	8005128 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4618      	mov	r0, r3
 80050d0:	f7ff fd5a 	bl	8004b88 <LL_ADC_INJ_IsConversionOngoing>
 80050d4:	4603      	mov	r3, r0
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d11a      	bne.n	8005110 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	685a      	ldr	r2, [r3, #4]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80050e8:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	659a      	str	r2, [r3, #88]	; 0x58

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d112      	bne.n	8005128 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005106:	f043 0201 	orr.w	r2, r3, #1
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	659a      	str	r2, [r3, #88]	; 0x58
 800510e:	e00b      	b.n	8005128 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005114:	f043 0210 	orr.w	r2, r3, #16
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	659a      	str	r2, [r3, #88]	; 0x58

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005120:	f043 0201 	orr.w	r2, r3, #1
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	65da      	str	r2, [r3, #92]	; 0x5c
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8005128:	6878      	ldr	r0, [r7, #4]
 800512a:	f000 fced 	bl	8005b08 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	2260      	movs	r2, #96	; 0x60
 8005134:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8005136:	69fb      	ldr	r3, [r7, #28]
 8005138:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800513c:	2b00      	cmp	r3, #0
 800513e:	d011      	beq.n	8005164 <HAL_ADC_IRQHandler+0x310>
 8005140:	69bb      	ldr	r3, [r7, #24]
 8005142:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005146:	2b00      	cmp	r3, #0
 8005148:	d00c      	beq.n	8005164 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800514e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f000 f8a0 	bl	800529c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	2280      	movs	r2, #128	; 0x80
 8005162:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8005164:	69fb      	ldr	r3, [r7, #28]
 8005166:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800516a:	2b00      	cmp	r3, #0
 800516c:	d012      	beq.n	8005194 <HAL_ADC_IRQHandler+0x340>
 800516e:	69bb      	ldr	r3, [r7, #24]
 8005170:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005174:	2b00      	cmp	r3, #0
 8005176:	d00d      	beq.n	8005194 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800517c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8005184:	6878      	ldr	r0, [r7, #4]
 8005186:	f000 fcd3 	bl	8005b30 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005192:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8005194:	69fb      	ldr	r3, [r7, #28]
 8005196:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800519a:	2b00      	cmp	r3, #0
 800519c:	d012      	beq.n	80051c4 <HAL_ADC_IRQHandler+0x370>
 800519e:	69bb      	ldr	r3, [r7, #24]
 80051a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d00d      	beq.n	80051c4 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051ac:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80051b4:	6878      	ldr	r0, [r7, #4]
 80051b6:	f000 fcc5 	bl	8005b44 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80051c2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80051c4:	69fb      	ldr	r3, [r7, #28]
 80051c6:	f003 0310 	and.w	r3, r3, #16
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d036      	beq.n	800523c <HAL_ADC_IRQHandler+0x3e8>
 80051ce:	69bb      	ldr	r3, [r7, #24]
 80051d0:	f003 0310 	and.w	r3, r3, #16
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d031      	beq.n	800523c <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d102      	bne.n	80051e6 <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 80051e0:	2301      	movs	r3, #1
 80051e2:	627b      	str	r3, [r7, #36]	; 0x24
 80051e4:	e014      	b.n	8005210 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d008      	beq.n	80051fe <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80051ec:	4825      	ldr	r0, [pc, #148]	; (8005284 <HAL_ADC_IRQHandler+0x430>)
 80051ee:	f7ff fc49 	bl	8004a84 <LL_ADC_GetMultiDMATransfer>
 80051f2:	4603      	mov	r3, r0
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d00b      	beq.n	8005210 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 80051f8:	2301      	movs	r3, #1
 80051fa:	627b      	str	r3, [r7, #36]	; 0x24
 80051fc:	e008      	b.n	8005210 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	68db      	ldr	r3, [r3, #12]
 8005204:	f003 0301 	and.w	r3, r3, #1
 8005208:	2b00      	cmp	r3, #0
 800520a:	d001      	beq.n	8005210 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 800520c:	2301      	movs	r3, #1
 800520e:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8005210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005212:	2b01      	cmp	r3, #1
 8005214:	d10e      	bne.n	8005234 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800521a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005226:	f043 0202 	orr.w	r2, r3, #2
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	65da      	str	r2, [r3, #92]	; 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f000 f83e 	bl	80052b0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	2210      	movs	r2, #16
 800523a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800523c:	69fb      	ldr	r3, [r7, #28]
 800523e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005242:	2b00      	cmp	r3, #0
 8005244:	d018      	beq.n	8005278 <HAL_ADC_IRQHandler+0x424>
 8005246:	69bb      	ldr	r3, [r7, #24]
 8005248:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800524c:	2b00      	cmp	r3, #0
 800524e:	d013      	beq.n	8005278 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005254:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005260:	f043 0208 	orr.w	r2, r3, #8
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005270:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	f000 fc52 	bl	8005b1c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8005278:	bf00      	nop
 800527a:	3728      	adds	r7, #40	; 0x28
 800527c:	46bd      	mov	sp, r7
 800527e:	bd80      	pop	{r7, pc}
 8005280:	50040000 	.word	0x50040000
 8005284:	50040300 	.word	0x50040300

08005288 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005288:	b480      	push	{r7}
 800528a:	b083      	sub	sp, #12
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8005290:	bf00      	nop
 8005292:	370c      	adds	r7, #12
 8005294:	46bd      	mov	sp, r7
 8005296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529a:	4770      	bx	lr

0800529c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800529c:	b480      	push	{r7}
 800529e:	b083      	sub	sp, #12
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80052a4:	bf00      	nop
 80052a6:	370c      	adds	r7, #12
 80052a8:	46bd      	mov	sp, r7
 80052aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ae:	4770      	bx	lr

080052b0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b083      	sub	sp, #12
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80052b8:	bf00      	nop
 80052ba:	370c      	adds	r7, #12
 80052bc:	46bd      	mov	sp, r7
 80052be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c2:	4770      	bx	lr

080052c4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b0b6      	sub	sp, #216	; 0xd8
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
 80052cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80052ce:	2300      	movs	r3, #0
 80052d0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80052d4:	2300      	movs	r3, #0
 80052d6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80052de:	2b01      	cmp	r3, #1
 80052e0:	d101      	bne.n	80052e6 <HAL_ADC_ConfigChannel+0x22>
 80052e2:	2302      	movs	r3, #2
 80052e4:	e3d5      	b.n	8005a92 <HAL_ADC_ConfigChannel+0x7ce>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2201      	movs	r2, #1
 80052ea:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4618      	mov	r0, r3
 80052f4:	f7ff fc35 	bl	8004b62 <LL_ADC_REG_IsConversionOngoing>
 80052f8:	4603      	mov	r3, r0
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	f040 83ba 	bne.w	8005a74 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	2b05      	cmp	r3, #5
 8005306:	d824      	bhi.n	8005352 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	3b02      	subs	r3, #2
 800530e:	2b03      	cmp	r3, #3
 8005310:	d81b      	bhi.n	800534a <HAL_ADC_ConfigChannel+0x86>
 8005312:	a201      	add	r2, pc, #4	; (adr r2, 8005318 <HAL_ADC_ConfigChannel+0x54>)
 8005314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005318:	08005329 	.word	0x08005329
 800531c:	08005331 	.word	0x08005331
 8005320:	08005339 	.word	0x08005339
 8005324:	08005341 	.word	0x08005341
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	220c      	movs	r2, #12
 800532c:	605a      	str	r2, [r3, #4]
          break;
 800532e:	e011      	b.n	8005354 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	2212      	movs	r2, #18
 8005334:	605a      	str	r2, [r3, #4]
          break;
 8005336:	e00d      	b.n	8005354 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	2218      	movs	r2, #24
 800533c:	605a      	str	r2, [r3, #4]
          break;
 800533e:	e009      	b.n	8005354 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005346:	605a      	str	r2, [r3, #4]
          break;
 8005348:	e004      	b.n	8005354 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	2206      	movs	r2, #6
 800534e:	605a      	str	r2, [r3, #4]
          break;
 8005350:	e000      	b.n	8005354 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8005352:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6818      	ldr	r0, [r3, #0]
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	6859      	ldr	r1, [r3, #4]
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	461a      	mov	r2, r3
 8005362:	f7ff faf2 	bl	800494a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4618      	mov	r0, r3
 800536c:	f7ff fbf9 	bl	8004b62 <LL_ADC_REG_IsConversionOngoing>
 8005370:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4618      	mov	r0, r3
 800537a:	f7ff fc05 	bl	8004b88 <LL_ADC_INJ_IsConversionOngoing>
 800537e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005382:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005386:	2b00      	cmp	r3, #0
 8005388:	f040 81c1 	bne.w	800570e <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800538c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005390:	2b00      	cmp	r3, #0
 8005392:	f040 81bc 	bne.w	800570e <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	689b      	ldr	r3, [r3, #8]
 800539a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800539e:	d10f      	bne.n	80053c0 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6818      	ldr	r0, [r3, #0]
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	2200      	movs	r2, #0
 80053aa:	4619      	mov	r1, r3
 80053ac:	f7ff fb0c 	bl	80049c8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80053b8:	4618      	mov	r0, r3
 80053ba:	f7ff faa0 	bl	80048fe <LL_ADC_SetSamplingTimeCommonConfig>
 80053be:	e00e      	b.n	80053de <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6818      	ldr	r0, [r3, #0]
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	6819      	ldr	r1, [r3, #0]
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	689b      	ldr	r3, [r3, #8]
 80053cc:	461a      	mov	r2, r3
 80053ce:	f7ff fafb 	bl	80049c8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	2100      	movs	r1, #0
 80053d8:	4618      	mov	r0, r3
 80053da:	f7ff fa90 	bl	80048fe <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	695a      	ldr	r2, [r3, #20]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	68db      	ldr	r3, [r3, #12]
 80053e8:	08db      	lsrs	r3, r3, #3
 80053ea:	f003 0303 	and.w	r3, r3, #3
 80053ee:	005b      	lsls	r3, r3, #1
 80053f0:	fa02 f303 	lsl.w	r3, r2, r3
 80053f4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	691b      	ldr	r3, [r3, #16]
 80053fc:	2b04      	cmp	r3, #4
 80053fe:	d00a      	beq.n	8005416 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6818      	ldr	r0, [r3, #0]
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	6919      	ldr	r1, [r3, #16]
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	681a      	ldr	r2, [r3, #0]
 800540c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005410:	f7ff fa20 	bl	8004854 <LL_ADC_SetOffset>
 8005414:	e17b      	b.n	800570e <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	2100      	movs	r1, #0
 800541c:	4618      	mov	r0, r3
 800541e:	f7ff fa3d 	bl	800489c <LL_ADC_GetOffsetChannel>
 8005422:	4603      	mov	r3, r0
 8005424:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005428:	2b00      	cmp	r3, #0
 800542a:	d10a      	bne.n	8005442 <HAL_ADC_ConfigChannel+0x17e>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	2100      	movs	r1, #0
 8005432:	4618      	mov	r0, r3
 8005434:	f7ff fa32 	bl	800489c <LL_ADC_GetOffsetChannel>
 8005438:	4603      	mov	r3, r0
 800543a:	0e9b      	lsrs	r3, r3, #26
 800543c:	f003 021f 	and.w	r2, r3, #31
 8005440:	e01e      	b.n	8005480 <HAL_ADC_ConfigChannel+0x1bc>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	2100      	movs	r1, #0
 8005448:	4618      	mov	r0, r3
 800544a:	f7ff fa27 	bl	800489c <LL_ADC_GetOffsetChannel>
 800544e:	4603      	mov	r3, r0
 8005450:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005454:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005458:	fa93 f3a3 	rbit	r3, r3
 800545c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005460:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005464:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005468:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800546c:	2b00      	cmp	r3, #0
 800546e:	d101      	bne.n	8005474 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8005470:	2320      	movs	r3, #32
 8005472:	e004      	b.n	800547e <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8005474:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005478:	fab3 f383 	clz	r3, r3
 800547c:	b2db      	uxtb	r3, r3
 800547e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005488:	2b00      	cmp	r3, #0
 800548a:	d105      	bne.n	8005498 <HAL_ADC_ConfigChannel+0x1d4>
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	0e9b      	lsrs	r3, r3, #26
 8005492:	f003 031f 	and.w	r3, r3, #31
 8005496:	e018      	b.n	80054ca <HAL_ADC_ConfigChannel+0x206>
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054a0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80054a4:	fa93 f3a3 	rbit	r3, r3
 80054a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80054ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80054b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80054b4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d101      	bne.n	80054c0 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 80054bc:	2320      	movs	r3, #32
 80054be:	e004      	b.n	80054ca <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 80054c0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80054c4:	fab3 f383 	clz	r3, r3
 80054c8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80054ca:	429a      	cmp	r2, r3
 80054cc:	d106      	bne.n	80054dc <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	2200      	movs	r2, #0
 80054d4:	2100      	movs	r1, #0
 80054d6:	4618      	mov	r0, r3
 80054d8:	f7ff f9f6 	bl	80048c8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	2101      	movs	r1, #1
 80054e2:	4618      	mov	r0, r3
 80054e4:	f7ff f9da 	bl	800489c <LL_ADC_GetOffsetChannel>
 80054e8:	4603      	mov	r3, r0
 80054ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d10a      	bne.n	8005508 <HAL_ADC_ConfigChannel+0x244>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	2101      	movs	r1, #1
 80054f8:	4618      	mov	r0, r3
 80054fa:	f7ff f9cf 	bl	800489c <LL_ADC_GetOffsetChannel>
 80054fe:	4603      	mov	r3, r0
 8005500:	0e9b      	lsrs	r3, r3, #26
 8005502:	f003 021f 	and.w	r2, r3, #31
 8005506:	e01e      	b.n	8005546 <HAL_ADC_ConfigChannel+0x282>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	2101      	movs	r1, #1
 800550e:	4618      	mov	r0, r3
 8005510:	f7ff f9c4 	bl	800489c <LL_ADC_GetOffsetChannel>
 8005514:	4603      	mov	r3, r0
 8005516:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800551a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800551e:	fa93 f3a3 	rbit	r3, r3
 8005522:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8005526:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800552a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800552e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005532:	2b00      	cmp	r3, #0
 8005534:	d101      	bne.n	800553a <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8005536:	2320      	movs	r3, #32
 8005538:	e004      	b.n	8005544 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 800553a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800553e:	fab3 f383 	clz	r3, r3
 8005542:	b2db      	uxtb	r3, r3
 8005544:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800554e:	2b00      	cmp	r3, #0
 8005550:	d105      	bne.n	800555e <HAL_ADC_ConfigChannel+0x29a>
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	0e9b      	lsrs	r3, r3, #26
 8005558:	f003 031f 	and.w	r3, r3, #31
 800555c:	e018      	b.n	8005590 <HAL_ADC_ConfigChannel+0x2cc>
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005566:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800556a:	fa93 f3a3 	rbit	r3, r3
 800556e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8005572:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005576:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800557a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800557e:	2b00      	cmp	r3, #0
 8005580:	d101      	bne.n	8005586 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8005582:	2320      	movs	r3, #32
 8005584:	e004      	b.n	8005590 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8005586:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800558a:	fab3 f383 	clz	r3, r3
 800558e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005590:	429a      	cmp	r2, r3
 8005592:	d106      	bne.n	80055a2 <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	2200      	movs	r2, #0
 800559a:	2101      	movs	r1, #1
 800559c:	4618      	mov	r0, r3
 800559e:	f7ff f993 	bl	80048c8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	2102      	movs	r1, #2
 80055a8:	4618      	mov	r0, r3
 80055aa:	f7ff f977 	bl	800489c <LL_ADC_GetOffsetChannel>
 80055ae:	4603      	mov	r3, r0
 80055b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d10a      	bne.n	80055ce <HAL_ADC_ConfigChannel+0x30a>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	2102      	movs	r1, #2
 80055be:	4618      	mov	r0, r3
 80055c0:	f7ff f96c 	bl	800489c <LL_ADC_GetOffsetChannel>
 80055c4:	4603      	mov	r3, r0
 80055c6:	0e9b      	lsrs	r3, r3, #26
 80055c8:	f003 021f 	and.w	r2, r3, #31
 80055cc:	e01e      	b.n	800560c <HAL_ADC_ConfigChannel+0x348>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	2102      	movs	r1, #2
 80055d4:	4618      	mov	r0, r3
 80055d6:	f7ff f961 	bl	800489c <LL_ADC_GetOffsetChannel>
 80055da:	4603      	mov	r3, r0
 80055dc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80055e4:	fa93 f3a3 	rbit	r3, r3
 80055e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80055ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80055f0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80055f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d101      	bne.n	8005600 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 80055fc:	2320      	movs	r3, #32
 80055fe:	e004      	b.n	800560a <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8005600:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005604:	fab3 f383 	clz	r3, r3
 8005608:	b2db      	uxtb	r3, r3
 800560a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005614:	2b00      	cmp	r3, #0
 8005616:	d105      	bne.n	8005624 <HAL_ADC_ConfigChannel+0x360>
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	0e9b      	lsrs	r3, r3, #26
 800561e:	f003 031f 	and.w	r3, r3, #31
 8005622:	e016      	b.n	8005652 <HAL_ADC_ConfigChannel+0x38e>
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800562c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005630:	fa93 f3a3 	rbit	r3, r3
 8005634:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8005636:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005638:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800563c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005640:	2b00      	cmp	r3, #0
 8005642:	d101      	bne.n	8005648 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8005644:	2320      	movs	r3, #32
 8005646:	e004      	b.n	8005652 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8005648:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800564c:	fab3 f383 	clz	r3, r3
 8005650:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005652:	429a      	cmp	r2, r3
 8005654:	d106      	bne.n	8005664 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	2200      	movs	r2, #0
 800565c:	2102      	movs	r1, #2
 800565e:	4618      	mov	r0, r3
 8005660:	f7ff f932 	bl	80048c8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	2103      	movs	r1, #3
 800566a:	4618      	mov	r0, r3
 800566c:	f7ff f916 	bl	800489c <LL_ADC_GetOffsetChannel>
 8005670:	4603      	mov	r3, r0
 8005672:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005676:	2b00      	cmp	r3, #0
 8005678:	d10a      	bne.n	8005690 <HAL_ADC_ConfigChannel+0x3cc>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	2103      	movs	r1, #3
 8005680:	4618      	mov	r0, r3
 8005682:	f7ff f90b 	bl	800489c <LL_ADC_GetOffsetChannel>
 8005686:	4603      	mov	r3, r0
 8005688:	0e9b      	lsrs	r3, r3, #26
 800568a:	f003 021f 	and.w	r2, r3, #31
 800568e:	e017      	b.n	80056c0 <HAL_ADC_ConfigChannel+0x3fc>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	2103      	movs	r1, #3
 8005696:	4618      	mov	r0, r3
 8005698:	f7ff f900 	bl	800489c <LL_ADC_GetOffsetChannel>
 800569c:	4603      	mov	r3, r0
 800569e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80056a2:	fa93 f3a3 	rbit	r3, r3
 80056a6:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80056a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80056aa:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80056ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d101      	bne.n	80056b6 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 80056b2:	2320      	movs	r3, #32
 80056b4:	e003      	b.n	80056be <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 80056b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80056b8:	fab3 f383 	clz	r3, r3
 80056bc:	b2db      	uxtb	r3, r3
 80056be:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d105      	bne.n	80056d8 <HAL_ADC_ConfigChannel+0x414>
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	0e9b      	lsrs	r3, r3, #26
 80056d2:	f003 031f 	and.w	r3, r3, #31
 80056d6:	e011      	b.n	80056fc <HAL_ADC_ConfigChannel+0x438>
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80056e0:	fa93 f3a3 	rbit	r3, r3
 80056e4:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80056e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80056e8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80056ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d101      	bne.n	80056f4 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 80056f0:	2320      	movs	r3, #32
 80056f2:	e003      	b.n	80056fc <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 80056f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056f6:	fab3 f383 	clz	r3, r3
 80056fa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80056fc:	429a      	cmp	r2, r3
 80056fe:	d106      	bne.n	800570e <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	2200      	movs	r2, #0
 8005706:	2103      	movs	r1, #3
 8005708:	4618      	mov	r0, r3
 800570a:	f7ff f8dd 	bl	80048c8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4618      	mov	r0, r3
 8005714:	f7ff fa12 	bl	8004b3c <LL_ADC_IsEnabled>
 8005718:	4603      	mov	r3, r0
 800571a:	2b00      	cmp	r3, #0
 800571c:	f040 8140 	bne.w	80059a0 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6818      	ldr	r0, [r3, #0]
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	6819      	ldr	r1, [r3, #0]
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	68db      	ldr	r3, [r3, #12]
 800572c:	461a      	mov	r2, r3
 800572e:	f7ff f977 	bl	8004a20 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	68db      	ldr	r3, [r3, #12]
 8005736:	4a8f      	ldr	r2, [pc, #572]	; (8005974 <HAL_ADC_ConfigChannel+0x6b0>)
 8005738:	4293      	cmp	r3, r2
 800573a:	f040 8131 	bne.w	80059a0 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800574a:	2b00      	cmp	r3, #0
 800574c:	d10b      	bne.n	8005766 <HAL_ADC_ConfigChannel+0x4a2>
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	0e9b      	lsrs	r3, r3, #26
 8005754:	3301      	adds	r3, #1
 8005756:	f003 031f 	and.w	r3, r3, #31
 800575a:	2b09      	cmp	r3, #9
 800575c:	bf94      	ite	ls
 800575e:	2301      	movls	r3, #1
 8005760:	2300      	movhi	r3, #0
 8005762:	b2db      	uxtb	r3, r3
 8005764:	e019      	b.n	800579a <HAL_ADC_ConfigChannel+0x4d6>
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800576c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800576e:	fa93 f3a3 	rbit	r3, r3
 8005772:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8005774:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005776:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8005778:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800577a:	2b00      	cmp	r3, #0
 800577c:	d101      	bne.n	8005782 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 800577e:	2320      	movs	r3, #32
 8005780:	e003      	b.n	800578a <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8005782:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005784:	fab3 f383 	clz	r3, r3
 8005788:	b2db      	uxtb	r3, r3
 800578a:	3301      	adds	r3, #1
 800578c:	f003 031f 	and.w	r3, r3, #31
 8005790:	2b09      	cmp	r3, #9
 8005792:	bf94      	ite	ls
 8005794:	2301      	movls	r3, #1
 8005796:	2300      	movhi	r3, #0
 8005798:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800579a:	2b00      	cmp	r3, #0
 800579c:	d079      	beq.n	8005892 <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d107      	bne.n	80057ba <HAL_ADC_ConfigChannel+0x4f6>
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	0e9b      	lsrs	r3, r3, #26
 80057b0:	3301      	adds	r3, #1
 80057b2:	069b      	lsls	r3, r3, #26
 80057b4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80057b8:	e015      	b.n	80057e6 <HAL_ADC_ConfigChannel+0x522>
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057c2:	fa93 f3a3 	rbit	r3, r3
 80057c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80057c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057ca:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80057cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d101      	bne.n	80057d6 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 80057d2:	2320      	movs	r3, #32
 80057d4:	e003      	b.n	80057de <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 80057d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057d8:	fab3 f383 	clz	r3, r3
 80057dc:	b2db      	uxtb	r3, r3
 80057de:	3301      	adds	r3, #1
 80057e0:	069b      	lsls	r3, r3, #26
 80057e2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d109      	bne.n	8005806 <HAL_ADC_ConfigChannel+0x542>
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	0e9b      	lsrs	r3, r3, #26
 80057f8:	3301      	adds	r3, #1
 80057fa:	f003 031f 	and.w	r3, r3, #31
 80057fe:	2101      	movs	r1, #1
 8005800:	fa01 f303 	lsl.w	r3, r1, r3
 8005804:	e017      	b.n	8005836 <HAL_ADC_ConfigChannel+0x572>
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800580c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800580e:	fa93 f3a3 	rbit	r3, r3
 8005812:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8005814:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005816:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8005818:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800581a:	2b00      	cmp	r3, #0
 800581c:	d101      	bne.n	8005822 <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 800581e:	2320      	movs	r3, #32
 8005820:	e003      	b.n	800582a <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8005822:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005824:	fab3 f383 	clz	r3, r3
 8005828:	b2db      	uxtb	r3, r3
 800582a:	3301      	adds	r3, #1
 800582c:	f003 031f 	and.w	r3, r3, #31
 8005830:	2101      	movs	r1, #1
 8005832:	fa01 f303 	lsl.w	r3, r1, r3
 8005836:	ea42 0103 	orr.w	r1, r2, r3
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005842:	2b00      	cmp	r3, #0
 8005844:	d10a      	bne.n	800585c <HAL_ADC_ConfigChannel+0x598>
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	0e9b      	lsrs	r3, r3, #26
 800584c:	3301      	adds	r3, #1
 800584e:	f003 021f 	and.w	r2, r3, #31
 8005852:	4613      	mov	r3, r2
 8005854:	005b      	lsls	r3, r3, #1
 8005856:	4413      	add	r3, r2
 8005858:	051b      	lsls	r3, r3, #20
 800585a:	e018      	b.n	800588e <HAL_ADC_ConfigChannel+0x5ca>
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005864:	fa93 f3a3 	rbit	r3, r3
 8005868:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800586a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800586c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800586e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005870:	2b00      	cmp	r3, #0
 8005872:	d101      	bne.n	8005878 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8005874:	2320      	movs	r3, #32
 8005876:	e003      	b.n	8005880 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8005878:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800587a:	fab3 f383 	clz	r3, r3
 800587e:	b2db      	uxtb	r3, r3
 8005880:	3301      	adds	r3, #1
 8005882:	f003 021f 	and.w	r2, r3, #31
 8005886:	4613      	mov	r3, r2
 8005888:	005b      	lsls	r3, r3, #1
 800588a:	4413      	add	r3, r2
 800588c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800588e:	430b      	orrs	r3, r1
 8005890:	e081      	b.n	8005996 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800589a:	2b00      	cmp	r3, #0
 800589c:	d107      	bne.n	80058ae <HAL_ADC_ConfigChannel+0x5ea>
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	0e9b      	lsrs	r3, r3, #26
 80058a4:	3301      	adds	r3, #1
 80058a6:	069b      	lsls	r3, r3, #26
 80058a8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80058ac:	e015      	b.n	80058da <HAL_ADC_ConfigChannel+0x616>
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058b6:	fa93 f3a3 	rbit	r3, r3
 80058ba:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80058bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058be:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80058c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d101      	bne.n	80058ca <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 80058c6:	2320      	movs	r3, #32
 80058c8:	e003      	b.n	80058d2 <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 80058ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058cc:	fab3 f383 	clz	r3, r3
 80058d0:	b2db      	uxtb	r3, r3
 80058d2:	3301      	adds	r3, #1
 80058d4:	069b      	lsls	r3, r3, #26
 80058d6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d109      	bne.n	80058fa <HAL_ADC_ConfigChannel+0x636>
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	0e9b      	lsrs	r3, r3, #26
 80058ec:	3301      	adds	r3, #1
 80058ee:	f003 031f 	and.w	r3, r3, #31
 80058f2:	2101      	movs	r1, #1
 80058f4:	fa01 f303 	lsl.w	r3, r1, r3
 80058f8:	e017      	b.n	800592a <HAL_ADC_ConfigChannel+0x666>
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005900:	6a3b      	ldr	r3, [r7, #32]
 8005902:	fa93 f3a3 	rbit	r3, r3
 8005906:	61fb      	str	r3, [r7, #28]
  return result;
 8005908:	69fb      	ldr	r3, [r7, #28]
 800590a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800590c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800590e:	2b00      	cmp	r3, #0
 8005910:	d101      	bne.n	8005916 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8005912:	2320      	movs	r3, #32
 8005914:	e003      	b.n	800591e <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8005916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005918:	fab3 f383 	clz	r3, r3
 800591c:	b2db      	uxtb	r3, r3
 800591e:	3301      	adds	r3, #1
 8005920:	f003 031f 	and.w	r3, r3, #31
 8005924:	2101      	movs	r1, #1
 8005926:	fa01 f303 	lsl.w	r3, r1, r3
 800592a:	ea42 0103 	orr.w	r1, r2, r3
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005936:	2b00      	cmp	r3, #0
 8005938:	d10d      	bne.n	8005956 <HAL_ADC_ConfigChannel+0x692>
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	0e9b      	lsrs	r3, r3, #26
 8005940:	3301      	adds	r3, #1
 8005942:	f003 021f 	and.w	r2, r3, #31
 8005946:	4613      	mov	r3, r2
 8005948:	005b      	lsls	r3, r3, #1
 800594a:	4413      	add	r3, r2
 800594c:	3b1e      	subs	r3, #30
 800594e:	051b      	lsls	r3, r3, #20
 8005950:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005954:	e01e      	b.n	8005994 <HAL_ADC_ConfigChannel+0x6d0>
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	fa93 f3a3 	rbit	r3, r3
 8005962:	613b      	str	r3, [r7, #16]
  return result;
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005968:	69bb      	ldr	r3, [r7, #24]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d104      	bne.n	8005978 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 800596e:	2320      	movs	r3, #32
 8005970:	e006      	b.n	8005980 <HAL_ADC_ConfigChannel+0x6bc>
 8005972:	bf00      	nop
 8005974:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8005978:	69bb      	ldr	r3, [r7, #24]
 800597a:	fab3 f383 	clz	r3, r3
 800597e:	b2db      	uxtb	r3, r3
 8005980:	3301      	adds	r3, #1
 8005982:	f003 021f 	and.w	r2, r3, #31
 8005986:	4613      	mov	r3, r2
 8005988:	005b      	lsls	r3, r3, #1
 800598a:	4413      	add	r3, r2
 800598c:	3b1e      	subs	r3, #30
 800598e:	051b      	lsls	r3, r3, #20
 8005990:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005994:	430b      	orrs	r3, r1
 8005996:	683a      	ldr	r2, [r7, #0]
 8005998:	6892      	ldr	r2, [r2, #8]
 800599a:	4619      	mov	r1, r3
 800599c:	f7ff f814 	bl	80049c8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	681a      	ldr	r2, [r3, #0]
 80059a4:	4b3d      	ldr	r3, [pc, #244]	; (8005a9c <HAL_ADC_ConfigChannel+0x7d8>)
 80059a6:	4013      	ands	r3, r2
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d06c      	beq.n	8005a86 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80059ac:	483c      	ldr	r0, [pc, #240]	; (8005aa0 <HAL_ADC_ConfigChannel+0x7dc>)
 80059ae:	f7fe ff43 	bl	8004838 <LL_ADC_GetCommonPathInternalCh>
 80059b2:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a3a      	ldr	r2, [pc, #232]	; (8005aa4 <HAL_ADC_ConfigChannel+0x7e0>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d127      	bne.n	8005a10 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80059c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80059c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d121      	bne.n	8005a10 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a35      	ldr	r2, [pc, #212]	; (8005aa8 <HAL_ADC_ConfigChannel+0x7e4>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d157      	bne.n	8005a86 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80059d6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80059da:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80059de:	4619      	mov	r1, r3
 80059e0:	482f      	ldr	r0, [pc, #188]	; (8005aa0 <HAL_ADC_ConfigChannel+0x7dc>)
 80059e2:	f7fe ff16 	bl	8004812 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80059e6:	4b31      	ldr	r3, [pc, #196]	; (8005aac <HAL_ADC_ConfigChannel+0x7e8>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	099b      	lsrs	r3, r3, #6
 80059ec:	4a30      	ldr	r2, [pc, #192]	; (8005ab0 <HAL_ADC_ConfigChannel+0x7ec>)
 80059ee:	fba2 2303 	umull	r2, r3, r2, r3
 80059f2:	099b      	lsrs	r3, r3, #6
 80059f4:	1c5a      	adds	r2, r3, #1
 80059f6:	4613      	mov	r3, r2
 80059f8:	005b      	lsls	r3, r3, #1
 80059fa:	4413      	add	r3, r2
 80059fc:	009b      	lsls	r3, r3, #2
 80059fe:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005a00:	e002      	b.n	8005a08 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	3b01      	subs	r3, #1
 8005a06:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d1f9      	bne.n	8005a02 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005a0e:	e03a      	b.n	8005a86 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a27      	ldr	r2, [pc, #156]	; (8005ab4 <HAL_ADC_ConfigChannel+0x7f0>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d113      	bne.n	8005a42 <HAL_ADC_ConfigChannel+0x77e>
 8005a1a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005a1e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d10d      	bne.n	8005a42 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a1f      	ldr	r2, [pc, #124]	; (8005aa8 <HAL_ADC_ConfigChannel+0x7e4>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d12a      	bne.n	8005a86 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005a30:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005a34:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005a38:	4619      	mov	r1, r3
 8005a3a:	4819      	ldr	r0, [pc, #100]	; (8005aa0 <HAL_ADC_ConfigChannel+0x7dc>)
 8005a3c:	f7fe fee9 	bl	8004812 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005a40:	e021      	b.n	8005a86 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a1c      	ldr	r2, [pc, #112]	; (8005ab8 <HAL_ADC_ConfigChannel+0x7f4>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d11c      	bne.n	8005a86 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005a4c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005a50:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d116      	bne.n	8005a86 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a12      	ldr	r2, [pc, #72]	; (8005aa8 <HAL_ADC_ConfigChannel+0x7e4>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d111      	bne.n	8005a86 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005a62:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005a66:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005a6a:	4619      	mov	r1, r3
 8005a6c:	480c      	ldr	r0, [pc, #48]	; (8005aa0 <HAL_ADC_ConfigChannel+0x7dc>)
 8005a6e:	f7fe fed0 	bl	8004812 <LL_ADC_SetCommonPathInternalCh>
 8005a72:	e008      	b.n	8005a86 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a78:	f043 0220 	orr.w	r2, r3, #32
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8005a80:	2301      	movs	r3, #1
 8005a82:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8005a8e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	37d8      	adds	r7, #216	; 0xd8
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}
 8005a9a:	bf00      	nop
 8005a9c:	80080000 	.word	0x80080000
 8005aa0:	50040300 	.word	0x50040300
 8005aa4:	c7520000 	.word	0xc7520000
 8005aa8:	50040000 	.word	0x50040000
 8005aac:	20000184 	.word	0x20000184
 8005ab0:	053e2d63 	.word	0x053e2d63
 8005ab4:	cb840000 	.word	0xcb840000
 8005ab8:	80000001 	.word	0x80000001

08005abc <LL_ADC_IsEnabled>:
{
 8005abc:	b480      	push	{r7}
 8005abe:	b083      	sub	sp, #12
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	689b      	ldr	r3, [r3, #8]
 8005ac8:	f003 0301 	and.w	r3, r3, #1
 8005acc:	2b01      	cmp	r3, #1
 8005ace:	d101      	bne.n	8005ad4 <LL_ADC_IsEnabled+0x18>
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	e000      	b.n	8005ad6 <LL_ADC_IsEnabled+0x1a>
 8005ad4:	2300      	movs	r3, #0
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	370c      	adds	r7, #12
 8005ada:	46bd      	mov	sp, r7
 8005adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae0:	4770      	bx	lr

08005ae2 <LL_ADC_REG_IsConversionOngoing>:
{
 8005ae2:	b480      	push	{r7}
 8005ae4:	b083      	sub	sp, #12
 8005ae6:	af00      	add	r7, sp, #0
 8005ae8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	f003 0304 	and.w	r3, r3, #4
 8005af2:	2b04      	cmp	r3, #4
 8005af4:	d101      	bne.n	8005afa <LL_ADC_REG_IsConversionOngoing+0x18>
 8005af6:	2301      	movs	r3, #1
 8005af8:	e000      	b.n	8005afc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005afa:	2300      	movs	r3, #0
}
 8005afc:	4618      	mov	r0, r3
 8005afe:	370c      	adds	r7, #12
 8005b00:	46bd      	mov	sp, r7
 8005b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b06:	4770      	bx	lr

08005b08 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b083      	sub	sp, #12
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8005b10:	bf00      	nop
 8005b12:	370c      	adds	r7, #12
 8005b14:	46bd      	mov	sp, r7
 8005b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1a:	4770      	bx	lr

08005b1c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b083      	sub	sp, #12
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8005b24:	bf00      	nop
 8005b26:	370c      	adds	r7, #12
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2e:	4770      	bx	lr

08005b30 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b083      	sub	sp, #12
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8005b38:	bf00      	nop
 8005b3a:	370c      	adds	r7, #12
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b42:	4770      	bx	lr

08005b44 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b083      	sub	sp, #12
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8005b4c:	bf00      	nop
 8005b4e:	370c      	adds	r7, #12
 8005b50:	46bd      	mov	sp, r7
 8005b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b56:	4770      	bx	lr

08005b58 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b083      	sub	sp, #12
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8005b60:	bf00      	nop
 8005b62:	370c      	adds	r7, #12
 8005b64:	46bd      	mov	sp, r7
 8005b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6a:	4770      	bx	lr

08005b6c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8005b6c:	b590      	push	{r4, r7, lr}
 8005b6e:	b0a1      	sub	sp, #132	; 0x84
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
 8005b74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005b76:	2300      	movs	r3, #0
 8005b78:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8005b82:	2b01      	cmp	r3, #1
 8005b84:	d101      	bne.n	8005b8a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005b86:	2302      	movs	r3, #2
 8005b88:	e089      	b.n	8005c9e <HAL_ADCEx_MultiModeConfigChannel+0x132>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2201      	movs	r2, #1
 8005b8e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8005b92:	2300      	movs	r3, #0
 8005b94:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8005b96:	2300      	movs	r3, #0
 8005b98:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a42      	ldr	r2, [pc, #264]	; (8005ca8 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d102      	bne.n	8005baa <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005ba4:	4b41      	ldr	r3, [pc, #260]	; (8005cac <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8005ba6:	60fb      	str	r3, [r7, #12]
 8005ba8:	e001      	b.n	8005bae <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8005baa:	2300      	movs	r3, #0
 8005bac:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d10b      	bne.n	8005bcc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bb8:	f043 0220 	orr.w	r2, r3, #32
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 8005bc8:	2301      	movs	r3, #1
 8005bca:	e068      	b.n	8005c9e <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f7ff ff87 	bl	8005ae2 <LL_ADC_REG_IsConversionOngoing>
 8005bd4:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4618      	mov	r0, r3
 8005bdc:	f7ff ff81 	bl	8005ae2 <LL_ADC_REG_IsConversionOngoing>
 8005be0:	4603      	mov	r3, r0
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d14a      	bne.n	8005c7c <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8005be6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d147      	bne.n	8005c7c <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005bec:	4b30      	ldr	r3, [pc, #192]	; (8005cb0 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8005bee:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d027      	beq.n	8005c48 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005bf8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005bfa:	689b      	ldr	r3, [r3, #8]
 8005bfc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	6859      	ldr	r1, [r3, #4]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005c0a:	035b      	lsls	r3, r3, #13
 8005c0c:	430b      	orrs	r3, r1
 8005c0e:	431a      	orrs	r2, r3
 8005c10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c12:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005c14:	4824      	ldr	r0, [pc, #144]	; (8005ca8 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8005c16:	f7ff ff51 	bl	8005abc <LL_ADC_IsEnabled>
 8005c1a:	4604      	mov	r4, r0
 8005c1c:	4823      	ldr	r0, [pc, #140]	; (8005cac <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8005c1e:	f7ff ff4d 	bl	8005abc <LL_ADC_IsEnabled>
 8005c22:	4603      	mov	r3, r0
 8005c24:	4323      	orrs	r3, r4
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d132      	bne.n	8005c90 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005c2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c2c:	689b      	ldr	r3, [r3, #8]
 8005c2e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8005c32:	f023 030f 	bic.w	r3, r3, #15
 8005c36:	683a      	ldr	r2, [r7, #0]
 8005c38:	6811      	ldr	r1, [r2, #0]
 8005c3a:	683a      	ldr	r2, [r7, #0]
 8005c3c:	6892      	ldr	r2, [r2, #8]
 8005c3e:	430a      	orrs	r2, r1
 8005c40:	431a      	orrs	r2, r3
 8005c42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c44:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005c46:	e023      	b.n	8005c90 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005c48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c4a:	689b      	ldr	r3, [r3, #8]
 8005c4c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005c50:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c52:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005c54:	4814      	ldr	r0, [pc, #80]	; (8005ca8 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8005c56:	f7ff ff31 	bl	8005abc <LL_ADC_IsEnabled>
 8005c5a:	4604      	mov	r4, r0
 8005c5c:	4813      	ldr	r0, [pc, #76]	; (8005cac <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8005c5e:	f7ff ff2d 	bl	8005abc <LL_ADC_IsEnabled>
 8005c62:	4603      	mov	r3, r0
 8005c64:	4323      	orrs	r3, r4
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d112      	bne.n	8005c90 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005c6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c6c:	689b      	ldr	r3, [r3, #8]
 8005c6e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8005c72:	f023 030f 	bic.w	r3, r3, #15
 8005c76:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8005c78:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005c7a:	e009      	b.n	8005c90 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c80:	f043 0220 	orr.w	r2, r3, #32
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8005c88:	2301      	movs	r3, #1
 8005c8a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8005c8e:	e000      	b.n	8005c92 <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005c90:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2200      	movs	r2, #0
 8005c96:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8005c9a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3784      	adds	r7, #132	; 0x84
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd90      	pop	{r4, r7, pc}
 8005ca6:	bf00      	nop
 8005ca8:	50040000 	.word	0x50040000
 8005cac:	50040100 	.word	0x50040100
 8005cb0:	50040300 	.word	0x50040300

08005cb4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b084      	sub	sp, #16
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d101      	bne.n	8005cc6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	e0ed      	b.n	8005ea2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005ccc:	b2db      	uxtb	r3, r3
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d102      	bne.n	8005cd8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f7fe fa38 	bl	8004148 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	681a      	ldr	r2, [r3, #0]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f042 0201 	orr.w	r2, r2, #1
 8005ce6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005ce8:	f7fe fd50 	bl	800478c <HAL_GetTick>
 8005cec:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8005cee:	e012      	b.n	8005d16 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005cf0:	f7fe fd4c 	bl	800478c <HAL_GetTick>
 8005cf4:	4602      	mov	r2, r0
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	1ad3      	subs	r3, r2, r3
 8005cfa:	2b0a      	cmp	r3, #10
 8005cfc:	d90b      	bls.n	8005d16 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d02:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2205      	movs	r2, #5
 8005d0e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8005d12:	2301      	movs	r3, #1
 8005d14:	e0c5      	b.n	8005ea2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	f003 0301 	and.w	r3, r3, #1
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d0e5      	beq.n	8005cf0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	681a      	ldr	r2, [r3, #0]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f022 0202 	bic.w	r2, r2, #2
 8005d32:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005d34:	f7fe fd2a 	bl	800478c <HAL_GetTick>
 8005d38:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8005d3a:	e012      	b.n	8005d62 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005d3c:	f7fe fd26 	bl	800478c <HAL_GetTick>
 8005d40:	4602      	mov	r2, r0
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	1ad3      	subs	r3, r2, r3
 8005d46:	2b0a      	cmp	r3, #10
 8005d48:	d90b      	bls.n	8005d62 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d4e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2205      	movs	r2, #5
 8005d5a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8005d5e:	2301      	movs	r3, #1
 8005d60:	e09f      	b.n	8005ea2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	f003 0302 	and.w	r3, r3, #2
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d1e5      	bne.n	8005d3c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	7e1b      	ldrb	r3, [r3, #24]
 8005d74:	2b01      	cmp	r3, #1
 8005d76:	d108      	bne.n	8005d8a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	681a      	ldr	r2, [r3, #0]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005d86:	601a      	str	r2, [r3, #0]
 8005d88:	e007      	b.n	8005d9a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	681a      	ldr	r2, [r3, #0]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005d98:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	7e5b      	ldrb	r3, [r3, #25]
 8005d9e:	2b01      	cmp	r3, #1
 8005da0:	d108      	bne.n	8005db4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	681a      	ldr	r2, [r3, #0]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005db0:	601a      	str	r2, [r3, #0]
 8005db2:	e007      	b.n	8005dc4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	681a      	ldr	r2, [r3, #0]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005dc2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	7e9b      	ldrb	r3, [r3, #26]
 8005dc8:	2b01      	cmp	r3, #1
 8005dca:	d108      	bne.n	8005dde <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	681a      	ldr	r2, [r3, #0]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f042 0220 	orr.w	r2, r2, #32
 8005dda:	601a      	str	r2, [r3, #0]
 8005ddc:	e007      	b.n	8005dee <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	681a      	ldr	r2, [r3, #0]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f022 0220 	bic.w	r2, r2, #32
 8005dec:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	7edb      	ldrb	r3, [r3, #27]
 8005df2:	2b01      	cmp	r3, #1
 8005df4:	d108      	bne.n	8005e08 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	681a      	ldr	r2, [r3, #0]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f022 0210 	bic.w	r2, r2, #16
 8005e04:	601a      	str	r2, [r3, #0]
 8005e06:	e007      	b.n	8005e18 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	681a      	ldr	r2, [r3, #0]
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f042 0210 	orr.w	r2, r2, #16
 8005e16:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	7f1b      	ldrb	r3, [r3, #28]
 8005e1c:	2b01      	cmp	r3, #1
 8005e1e:	d108      	bne.n	8005e32 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	681a      	ldr	r2, [r3, #0]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f042 0208 	orr.w	r2, r2, #8
 8005e2e:	601a      	str	r2, [r3, #0]
 8005e30:	e007      	b.n	8005e42 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	681a      	ldr	r2, [r3, #0]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f022 0208 	bic.w	r2, r2, #8
 8005e40:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	7f5b      	ldrb	r3, [r3, #29]
 8005e46:	2b01      	cmp	r3, #1
 8005e48:	d108      	bne.n	8005e5c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	681a      	ldr	r2, [r3, #0]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f042 0204 	orr.w	r2, r2, #4
 8005e58:	601a      	str	r2, [r3, #0]
 8005e5a:	e007      	b.n	8005e6c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	681a      	ldr	r2, [r3, #0]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f022 0204 	bic.w	r2, r2, #4
 8005e6a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	689a      	ldr	r2, [r3, #8]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	68db      	ldr	r3, [r3, #12]
 8005e74:	431a      	orrs	r2, r3
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	691b      	ldr	r3, [r3, #16]
 8005e7a:	431a      	orrs	r2, r3
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	695b      	ldr	r3, [r3, #20]
 8005e80:	ea42 0103 	orr.w	r1, r2, r3
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	1e5a      	subs	r2, r3, #1
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	430a      	orrs	r2, r1
 8005e90:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2200      	movs	r2, #0
 8005e96:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8005ea0:	2300      	movs	r3, #0
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	3710      	adds	r7, #16
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}

08005eaa <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8005eaa:	b480      	push	{r7}
 8005eac:	b089      	sub	sp, #36	; 0x24
 8005eae:	af00      	add	r7, sp, #0
 8005eb0:	60f8      	str	r0, [r7, #12]
 8005eb2:	60b9      	str	r1, [r7, #8]
 8005eb4:	607a      	str	r2, [r7, #4]
 8005eb6:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005ebe:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	689b      	ldr	r3, [r3, #8]
 8005ec6:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8005ec8:	7ffb      	ldrb	r3, [r7, #31]
 8005eca:	2b01      	cmp	r3, #1
 8005ecc:	d003      	beq.n	8005ed6 <HAL_CAN_AddTxMessage+0x2c>
 8005ece:	7ffb      	ldrb	r3, [r7, #31]
 8005ed0:	2b02      	cmp	r3, #2
 8005ed2:	f040 80ad 	bne.w	8006030 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8005ed6:	69bb      	ldr	r3, [r7, #24]
 8005ed8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d10a      	bne.n	8005ef6 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8005ee0:	69bb      	ldr	r3, [r7, #24]
 8005ee2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d105      	bne.n	8005ef6 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8005eea:	69bb      	ldr	r3, [r7, #24]
 8005eec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	f000 8095 	beq.w	8006020 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8005ef6:	69bb      	ldr	r3, [r7, #24]
 8005ef8:	0e1b      	lsrs	r3, r3, #24
 8005efa:	f003 0303 	and.w	r3, r3, #3
 8005efe:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8005f00:	2201      	movs	r2, #1
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	409a      	lsls	r2, r3
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	689b      	ldr	r3, [r3, #8]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d10d      	bne.n	8005f2e <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8005f1c:	68f9      	ldr	r1, [r7, #12]
 8005f1e:	6809      	ldr	r1, [r1, #0]
 8005f20:	431a      	orrs	r2, r3
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	3318      	adds	r3, #24
 8005f26:	011b      	lsls	r3, r3, #4
 8005f28:	440b      	add	r3, r1
 8005f2a:	601a      	str	r2, [r3, #0]
 8005f2c:	e00f      	b.n	8005f4e <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	685b      	ldr	r3, [r3, #4]
 8005f32:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005f38:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005f3e:	68f9      	ldr	r1, [r7, #12]
 8005f40:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8005f42:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	3318      	adds	r3, #24
 8005f48:	011b      	lsls	r3, r3, #4
 8005f4a:	440b      	add	r3, r1
 8005f4c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	6819      	ldr	r1, [r3, #0]
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	691a      	ldr	r2, [r3, #16]
 8005f56:	697b      	ldr	r3, [r7, #20]
 8005f58:	3318      	adds	r3, #24
 8005f5a:	011b      	lsls	r3, r3, #4
 8005f5c:	440b      	add	r3, r1
 8005f5e:	3304      	adds	r3, #4
 8005f60:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	7d1b      	ldrb	r3, [r3, #20]
 8005f66:	2b01      	cmp	r3, #1
 8005f68:	d111      	bne.n	8005f8e <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681a      	ldr	r2, [r3, #0]
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	3318      	adds	r3, #24
 8005f72:	011b      	lsls	r3, r3, #4
 8005f74:	4413      	add	r3, r2
 8005f76:	3304      	adds	r3, #4
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	68fa      	ldr	r2, [r7, #12]
 8005f7c:	6811      	ldr	r1, [r2, #0]
 8005f7e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	3318      	adds	r3, #24
 8005f86:	011b      	lsls	r3, r3, #4
 8005f88:	440b      	add	r3, r1
 8005f8a:	3304      	adds	r3, #4
 8005f8c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	3307      	adds	r3, #7
 8005f92:	781b      	ldrb	r3, [r3, #0]
 8005f94:	061a      	lsls	r2, r3, #24
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	3306      	adds	r3, #6
 8005f9a:	781b      	ldrb	r3, [r3, #0]
 8005f9c:	041b      	lsls	r3, r3, #16
 8005f9e:	431a      	orrs	r2, r3
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	3305      	adds	r3, #5
 8005fa4:	781b      	ldrb	r3, [r3, #0]
 8005fa6:	021b      	lsls	r3, r3, #8
 8005fa8:	4313      	orrs	r3, r2
 8005faa:	687a      	ldr	r2, [r7, #4]
 8005fac:	3204      	adds	r2, #4
 8005fae:	7812      	ldrb	r2, [r2, #0]
 8005fb0:	4610      	mov	r0, r2
 8005fb2:	68fa      	ldr	r2, [r7, #12]
 8005fb4:	6811      	ldr	r1, [r2, #0]
 8005fb6:	ea43 0200 	orr.w	r2, r3, r0
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	011b      	lsls	r3, r3, #4
 8005fbe:	440b      	add	r3, r1
 8005fc0:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8005fc4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	3303      	adds	r3, #3
 8005fca:	781b      	ldrb	r3, [r3, #0]
 8005fcc:	061a      	lsls	r2, r3, #24
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	3302      	adds	r3, #2
 8005fd2:	781b      	ldrb	r3, [r3, #0]
 8005fd4:	041b      	lsls	r3, r3, #16
 8005fd6:	431a      	orrs	r2, r3
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	3301      	adds	r3, #1
 8005fdc:	781b      	ldrb	r3, [r3, #0]
 8005fde:	021b      	lsls	r3, r3, #8
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	687a      	ldr	r2, [r7, #4]
 8005fe4:	7812      	ldrb	r2, [r2, #0]
 8005fe6:	4610      	mov	r0, r2
 8005fe8:	68fa      	ldr	r2, [r7, #12]
 8005fea:	6811      	ldr	r1, [r2, #0]
 8005fec:	ea43 0200 	orr.w	r2, r3, r0
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	011b      	lsls	r3, r3, #4
 8005ff4:	440b      	add	r3, r1
 8005ff6:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8005ffa:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681a      	ldr	r2, [r3, #0]
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	3318      	adds	r3, #24
 8006004:	011b      	lsls	r3, r3, #4
 8006006:	4413      	add	r3, r2
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	68fa      	ldr	r2, [r7, #12]
 800600c:	6811      	ldr	r1, [r2, #0]
 800600e:	f043 0201 	orr.w	r2, r3, #1
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	3318      	adds	r3, #24
 8006016:	011b      	lsls	r3, r3, #4
 8006018:	440b      	add	r3, r1
 800601a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800601c:	2300      	movs	r3, #0
 800601e:	e00e      	b.n	800603e <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006024:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800602c:	2301      	movs	r3, #1
 800602e:	e006      	b.n	800603e <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006034:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800603c:	2301      	movs	r3, #1
  }
}
 800603e:	4618      	mov	r0, r3
 8006040:	3724      	adds	r7, #36	; 0x24
 8006042:	46bd      	mov	sp, r7
 8006044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006048:	4770      	bx	lr

0800604a <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800604a:	b480      	push	{r7}
 800604c:	b087      	sub	sp, #28
 800604e:	af00      	add	r7, sp, #0
 8006050:	60f8      	str	r0, [r7, #12]
 8006052:	60b9      	str	r1, [r7, #8]
 8006054:	607a      	str	r2, [r7, #4]
 8006056:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800605e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8006060:	7dfb      	ldrb	r3, [r7, #23]
 8006062:	2b01      	cmp	r3, #1
 8006064:	d003      	beq.n	800606e <HAL_CAN_GetRxMessage+0x24>
 8006066:	7dfb      	ldrb	r3, [r7, #23]
 8006068:	2b02      	cmp	r3, #2
 800606a:	f040 80f3 	bne.w	8006254 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d10e      	bne.n	8006092 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	68db      	ldr	r3, [r3, #12]
 800607a:	f003 0303 	and.w	r3, r3, #3
 800607e:	2b00      	cmp	r3, #0
 8006080:	d116      	bne.n	80060b0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006086:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800608e:	2301      	movs	r3, #1
 8006090:	e0e7      	b.n	8006262 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	691b      	ldr	r3, [r3, #16]
 8006098:	f003 0303 	and.w	r3, r3, #3
 800609c:	2b00      	cmp	r3, #0
 800609e:	d107      	bne.n	80060b0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80060ac:	2301      	movs	r3, #1
 80060ae:	e0d8      	b.n	8006262 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681a      	ldr	r2, [r3, #0]
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	331b      	adds	r3, #27
 80060b8:	011b      	lsls	r3, r3, #4
 80060ba:	4413      	add	r3, r2
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f003 0204 	and.w	r2, r3, #4
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	689b      	ldr	r3, [r3, #8]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d10c      	bne.n	80060e8 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681a      	ldr	r2, [r3, #0]
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	331b      	adds	r3, #27
 80060d6:	011b      	lsls	r3, r3, #4
 80060d8:	4413      	add	r3, r2
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	0d5b      	lsrs	r3, r3, #21
 80060de:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	601a      	str	r2, [r3, #0]
 80060e6:	e00b      	b.n	8006100 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681a      	ldr	r2, [r3, #0]
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	331b      	adds	r3, #27
 80060f0:	011b      	lsls	r3, r3, #4
 80060f2:	4413      	add	r3, r2
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	08db      	lsrs	r3, r3, #3
 80060f8:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681a      	ldr	r2, [r3, #0]
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	331b      	adds	r3, #27
 8006108:	011b      	lsls	r3, r3, #4
 800610a:	4413      	add	r3, r2
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f003 0202 	and.w	r2, r3, #2
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681a      	ldr	r2, [r3, #0]
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	331b      	adds	r3, #27
 800611e:	011b      	lsls	r3, r3, #4
 8006120:	4413      	add	r3, r2
 8006122:	3304      	adds	r3, #4
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f003 020f 	and.w	r2, r3, #15
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681a      	ldr	r2, [r3, #0]
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	331b      	adds	r3, #27
 8006136:	011b      	lsls	r3, r3, #4
 8006138:	4413      	add	r3, r2
 800613a:	3304      	adds	r3, #4
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	0a1b      	lsrs	r3, r3, #8
 8006140:	b2da      	uxtb	r2, r3
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681a      	ldr	r2, [r3, #0]
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	331b      	adds	r3, #27
 800614e:	011b      	lsls	r3, r3, #4
 8006150:	4413      	add	r3, r2
 8006152:	3304      	adds	r3, #4
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	0c1b      	lsrs	r3, r3, #16
 8006158:	b29a      	uxth	r2, r3
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681a      	ldr	r2, [r3, #0]
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	011b      	lsls	r3, r3, #4
 8006166:	4413      	add	r3, r2
 8006168:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	b2da      	uxtb	r2, r3
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681a      	ldr	r2, [r3, #0]
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	011b      	lsls	r3, r3, #4
 800617c:	4413      	add	r3, r2
 800617e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	0a1a      	lsrs	r2, r3, #8
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	3301      	adds	r3, #1
 800618a:	b2d2      	uxtb	r2, r2
 800618c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681a      	ldr	r2, [r3, #0]
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	011b      	lsls	r3, r3, #4
 8006196:	4413      	add	r3, r2
 8006198:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	0c1a      	lsrs	r2, r3, #16
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	3302      	adds	r3, #2
 80061a4:	b2d2      	uxtb	r2, r2
 80061a6:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681a      	ldr	r2, [r3, #0]
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	011b      	lsls	r3, r3, #4
 80061b0:	4413      	add	r3, r2
 80061b2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	0e1a      	lsrs	r2, r3, #24
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	3303      	adds	r3, #3
 80061be:	b2d2      	uxtb	r2, r2
 80061c0:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681a      	ldr	r2, [r3, #0]
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	011b      	lsls	r3, r3, #4
 80061ca:	4413      	add	r3, r2
 80061cc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80061d0:	681a      	ldr	r2, [r3, #0]
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	3304      	adds	r3, #4
 80061d6:	b2d2      	uxtb	r2, r2
 80061d8:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681a      	ldr	r2, [r3, #0]
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	011b      	lsls	r3, r3, #4
 80061e2:	4413      	add	r3, r2
 80061e4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	0a1a      	lsrs	r2, r3, #8
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	3305      	adds	r3, #5
 80061f0:	b2d2      	uxtb	r2, r2
 80061f2:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681a      	ldr	r2, [r3, #0]
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	011b      	lsls	r3, r3, #4
 80061fc:	4413      	add	r3, r2
 80061fe:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	0c1a      	lsrs	r2, r3, #16
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	3306      	adds	r3, #6
 800620a:	b2d2      	uxtb	r2, r2
 800620c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681a      	ldr	r2, [r3, #0]
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	011b      	lsls	r3, r3, #4
 8006216:	4413      	add	r3, r2
 8006218:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	0e1a      	lsrs	r2, r3, #24
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	3307      	adds	r3, #7
 8006224:	b2d2      	uxtb	r2, r2
 8006226:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d108      	bne.n	8006240 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	68da      	ldr	r2, [r3, #12]
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f042 0220 	orr.w	r2, r2, #32
 800623c:	60da      	str	r2, [r3, #12]
 800623e:	e007      	b.n	8006250 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	691a      	ldr	r2, [r3, #16]
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f042 0220 	orr.w	r2, r2, #32
 800624e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8006250:	2300      	movs	r3, #0
 8006252:	e006      	b.n	8006262 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006258:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006260:	2301      	movs	r3, #1
  }
}
 8006262:	4618      	mov	r0, r3
 8006264:	371c      	adds	r7, #28
 8006266:	46bd      	mov	sp, r7
 8006268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626c:	4770      	bx	lr

0800626e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800626e:	b580      	push	{r7, lr}
 8006270:	b08a      	sub	sp, #40	; 0x28
 8006272:	af00      	add	r7, sp, #0
 8006274:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8006276:	2300      	movs	r3, #0
 8006278:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	695b      	ldr	r3, [r3, #20]
 8006280:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	685b      	ldr	r3, [r3, #4]
 8006288:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	689b      	ldr	r3, [r3, #8]
 8006290:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	68db      	ldr	r3, [r3, #12]
 8006298:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	691b      	ldr	r3, [r3, #16]
 80062a0:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	699b      	ldr	r3, [r3, #24]
 80062a8:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80062aa:	6a3b      	ldr	r3, [r7, #32]
 80062ac:	f003 0301 	and.w	r3, r3, #1
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d07c      	beq.n	80063ae <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80062b4:	69bb      	ldr	r3, [r7, #24]
 80062b6:	f003 0301 	and.w	r3, r3, #1
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d023      	beq.n	8006306 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	2201      	movs	r2, #1
 80062c4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80062c6:	69bb      	ldr	r3, [r7, #24]
 80062c8:	f003 0302 	and.w	r3, r3, #2
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d003      	beq.n	80062d8 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	f000 f983 	bl	80065dc <HAL_CAN_TxMailbox0CompleteCallback>
 80062d6:	e016      	b.n	8006306 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80062d8:	69bb      	ldr	r3, [r7, #24]
 80062da:	f003 0304 	and.w	r3, r3, #4
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d004      	beq.n	80062ec <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80062e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80062e8:	627b      	str	r3, [r7, #36]	; 0x24
 80062ea:	e00c      	b.n	8006306 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80062ec:	69bb      	ldr	r3, [r7, #24]
 80062ee:	f003 0308 	and.w	r3, r3, #8
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d004      	beq.n	8006300 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80062f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80062fc:	627b      	str	r3, [r7, #36]	; 0x24
 80062fe:	e002      	b.n	8006306 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	f000 f989 	bl	8006618 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8006306:	69bb      	ldr	r3, [r7, #24]
 8006308:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800630c:	2b00      	cmp	r3, #0
 800630e:	d024      	beq.n	800635a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006318:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800631a:	69bb      	ldr	r3, [r7, #24]
 800631c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006320:	2b00      	cmp	r3, #0
 8006322:	d003      	beq.n	800632c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8006324:	6878      	ldr	r0, [r7, #4]
 8006326:	f000 f963 	bl	80065f0 <HAL_CAN_TxMailbox1CompleteCallback>
 800632a:	e016      	b.n	800635a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800632c:	69bb      	ldr	r3, [r7, #24]
 800632e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006332:	2b00      	cmp	r3, #0
 8006334:	d004      	beq.n	8006340 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8006336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006338:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800633c:	627b      	str	r3, [r7, #36]	; 0x24
 800633e:	e00c      	b.n	800635a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8006340:	69bb      	ldr	r3, [r7, #24]
 8006342:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006346:	2b00      	cmp	r3, #0
 8006348:	d004      	beq.n	8006354 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800634a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800634c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006350:	627b      	str	r3, [r7, #36]	; 0x24
 8006352:	e002      	b.n	800635a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	f000 f969 	bl	800662c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800635a:	69bb      	ldr	r3, [r7, #24]
 800635c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006360:	2b00      	cmp	r3, #0
 8006362:	d024      	beq.n	80063ae <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800636c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800636e:	69bb      	ldr	r3, [r7, #24]
 8006370:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006374:	2b00      	cmp	r3, #0
 8006376:	d003      	beq.n	8006380 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8006378:	6878      	ldr	r0, [r7, #4]
 800637a:	f000 f943 	bl	8006604 <HAL_CAN_TxMailbox2CompleteCallback>
 800637e:	e016      	b.n	80063ae <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8006380:	69bb      	ldr	r3, [r7, #24]
 8006382:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006386:	2b00      	cmp	r3, #0
 8006388:	d004      	beq.n	8006394 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800638a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800638c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006390:	627b      	str	r3, [r7, #36]	; 0x24
 8006392:	e00c      	b.n	80063ae <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8006394:	69bb      	ldr	r3, [r7, #24]
 8006396:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800639a:	2b00      	cmp	r3, #0
 800639c:	d004      	beq.n	80063a8 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800639e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063a4:	627b      	str	r3, [r7, #36]	; 0x24
 80063a6:	e002      	b.n	80063ae <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	f000 f949 	bl	8006640 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80063ae:	6a3b      	ldr	r3, [r7, #32]
 80063b0:	f003 0308 	and.w	r3, r3, #8
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d00c      	beq.n	80063d2 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80063b8:	697b      	ldr	r3, [r7, #20]
 80063ba:	f003 0310 	and.w	r3, r3, #16
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d007      	beq.n	80063d2 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80063c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80063c8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	2210      	movs	r2, #16
 80063d0:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80063d2:	6a3b      	ldr	r3, [r7, #32]
 80063d4:	f003 0304 	and.w	r3, r3, #4
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d00b      	beq.n	80063f4 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	f003 0308 	and.w	r3, r3, #8
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d006      	beq.n	80063f4 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	2208      	movs	r2, #8
 80063ec:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f000 f930 	bl	8006654 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80063f4:	6a3b      	ldr	r3, [r7, #32]
 80063f6:	f003 0302 	and.w	r3, r3, #2
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d009      	beq.n	8006412 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	68db      	ldr	r3, [r3, #12]
 8006404:	f003 0303 	and.w	r3, r3, #3
 8006408:	2b00      	cmp	r3, #0
 800640a:	d002      	beq.n	8006412 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800640c:	6878      	ldr	r0, [r7, #4]
 800640e:	f7fa ff0d 	bl	800122c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8006412:	6a3b      	ldr	r3, [r7, #32]
 8006414:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006418:	2b00      	cmp	r3, #0
 800641a:	d00c      	beq.n	8006436 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800641c:	693b      	ldr	r3, [r7, #16]
 800641e:	f003 0310 	and.w	r3, r3, #16
 8006422:	2b00      	cmp	r3, #0
 8006424:	d007      	beq.n	8006436 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8006426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006428:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800642c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	2210      	movs	r2, #16
 8006434:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8006436:	6a3b      	ldr	r3, [r7, #32]
 8006438:	f003 0320 	and.w	r3, r3, #32
 800643c:	2b00      	cmp	r3, #0
 800643e:	d00b      	beq.n	8006458 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8006440:	693b      	ldr	r3, [r7, #16]
 8006442:	f003 0308 	and.w	r3, r3, #8
 8006446:	2b00      	cmp	r3, #0
 8006448:	d006      	beq.n	8006458 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	2208      	movs	r2, #8
 8006450:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f000 f912 	bl	800667c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8006458:	6a3b      	ldr	r3, [r7, #32]
 800645a:	f003 0310 	and.w	r3, r3, #16
 800645e:	2b00      	cmp	r3, #0
 8006460:	d009      	beq.n	8006476 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	691b      	ldr	r3, [r3, #16]
 8006468:	f003 0303 	and.w	r3, r3, #3
 800646c:	2b00      	cmp	r3, #0
 800646e:	d002      	beq.n	8006476 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f000 f8f9 	bl	8006668 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8006476:	6a3b      	ldr	r3, [r7, #32]
 8006478:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800647c:	2b00      	cmp	r3, #0
 800647e:	d00b      	beq.n	8006498 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8006480:	69fb      	ldr	r3, [r7, #28]
 8006482:	f003 0310 	and.w	r3, r3, #16
 8006486:	2b00      	cmp	r3, #0
 8006488:	d006      	beq.n	8006498 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	2210      	movs	r2, #16
 8006490:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f000 f8fc 	bl	8006690 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8006498:	6a3b      	ldr	r3, [r7, #32]
 800649a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d00b      	beq.n	80064ba <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80064a2:	69fb      	ldr	r3, [r7, #28]
 80064a4:	f003 0308 	and.w	r3, r3, #8
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d006      	beq.n	80064ba <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	2208      	movs	r2, #8
 80064b2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f000 f8f5 	bl	80066a4 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80064ba:	6a3b      	ldr	r3, [r7, #32]
 80064bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d07b      	beq.n	80065bc <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80064c4:	69fb      	ldr	r3, [r7, #28]
 80064c6:	f003 0304 	and.w	r3, r3, #4
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d072      	beq.n	80065b4 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80064ce:	6a3b      	ldr	r3, [r7, #32]
 80064d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d008      	beq.n	80064ea <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d003      	beq.n	80064ea <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80064e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e4:	f043 0301 	orr.w	r3, r3, #1
 80064e8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80064ea:	6a3b      	ldr	r3, [r7, #32]
 80064ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d008      	beq.n	8006506 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d003      	beq.n	8006506 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80064fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006500:	f043 0302 	orr.w	r3, r3, #2
 8006504:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8006506:	6a3b      	ldr	r3, [r7, #32]
 8006508:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800650c:	2b00      	cmp	r3, #0
 800650e:	d008      	beq.n	8006522 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8006516:	2b00      	cmp	r3, #0
 8006518:	d003      	beq.n	8006522 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800651a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800651c:	f043 0304 	orr.w	r3, r3, #4
 8006520:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8006522:	6a3b      	ldr	r3, [r7, #32]
 8006524:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006528:	2b00      	cmp	r3, #0
 800652a:	d043      	beq.n	80065b4 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8006532:	2b00      	cmp	r3, #0
 8006534:	d03e      	beq.n	80065b4 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800653c:	2b60      	cmp	r3, #96	; 0x60
 800653e:	d02b      	beq.n	8006598 <HAL_CAN_IRQHandler+0x32a>
 8006540:	2b60      	cmp	r3, #96	; 0x60
 8006542:	d82e      	bhi.n	80065a2 <HAL_CAN_IRQHandler+0x334>
 8006544:	2b50      	cmp	r3, #80	; 0x50
 8006546:	d022      	beq.n	800658e <HAL_CAN_IRQHandler+0x320>
 8006548:	2b50      	cmp	r3, #80	; 0x50
 800654a:	d82a      	bhi.n	80065a2 <HAL_CAN_IRQHandler+0x334>
 800654c:	2b40      	cmp	r3, #64	; 0x40
 800654e:	d019      	beq.n	8006584 <HAL_CAN_IRQHandler+0x316>
 8006550:	2b40      	cmp	r3, #64	; 0x40
 8006552:	d826      	bhi.n	80065a2 <HAL_CAN_IRQHandler+0x334>
 8006554:	2b30      	cmp	r3, #48	; 0x30
 8006556:	d010      	beq.n	800657a <HAL_CAN_IRQHandler+0x30c>
 8006558:	2b30      	cmp	r3, #48	; 0x30
 800655a:	d822      	bhi.n	80065a2 <HAL_CAN_IRQHandler+0x334>
 800655c:	2b10      	cmp	r3, #16
 800655e:	d002      	beq.n	8006566 <HAL_CAN_IRQHandler+0x2f8>
 8006560:	2b20      	cmp	r3, #32
 8006562:	d005      	beq.n	8006570 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8006564:	e01d      	b.n	80065a2 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8006566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006568:	f043 0308 	orr.w	r3, r3, #8
 800656c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800656e:	e019      	b.n	80065a4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8006570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006572:	f043 0310 	orr.w	r3, r3, #16
 8006576:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006578:	e014      	b.n	80065a4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800657a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800657c:	f043 0320 	orr.w	r3, r3, #32
 8006580:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006582:	e00f      	b.n	80065a4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8006584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006586:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800658a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800658c:	e00a      	b.n	80065a4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800658e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006590:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006594:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006596:	e005      	b.n	80065a4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8006598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800659a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800659e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80065a0:	e000      	b.n	80065a4 <HAL_CAN_IRQHandler+0x336>
            break;
 80065a2:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	699a      	ldr	r2, [r3, #24]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80065b2:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	2204      	movs	r2, #4
 80065ba:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80065bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d008      	beq.n	80065d4 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80065c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c8:	431a      	orrs	r2, r3
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	f000 f872 	bl	80066b8 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80065d4:	bf00      	nop
 80065d6:	3728      	adds	r7, #40	; 0x28
 80065d8:	46bd      	mov	sp, r7
 80065da:	bd80      	pop	{r7, pc}

080065dc <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80065dc:	b480      	push	{r7}
 80065de:	b083      	sub	sp, #12
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80065e4:	bf00      	nop
 80065e6:	370c      	adds	r7, #12
 80065e8:	46bd      	mov	sp, r7
 80065ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ee:	4770      	bx	lr

080065f0 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80065f0:	b480      	push	{r7}
 80065f2:	b083      	sub	sp, #12
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80065f8:	bf00      	nop
 80065fa:	370c      	adds	r7, #12
 80065fc:	46bd      	mov	sp, r7
 80065fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006602:	4770      	bx	lr

08006604 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8006604:	b480      	push	{r7}
 8006606:	b083      	sub	sp, #12
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800660c:	bf00      	nop
 800660e:	370c      	adds	r7, #12
 8006610:	46bd      	mov	sp, r7
 8006612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006616:	4770      	bx	lr

08006618 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8006618:	b480      	push	{r7}
 800661a:	b083      	sub	sp, #12
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8006620:	bf00      	nop
 8006622:	370c      	adds	r7, #12
 8006624:	46bd      	mov	sp, r7
 8006626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662a:	4770      	bx	lr

0800662c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800662c:	b480      	push	{r7}
 800662e:	b083      	sub	sp, #12
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8006634:	bf00      	nop
 8006636:	370c      	adds	r7, #12
 8006638:	46bd      	mov	sp, r7
 800663a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663e:	4770      	bx	lr

08006640 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8006640:	b480      	push	{r7}
 8006642:	b083      	sub	sp, #12
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8006648:	bf00      	nop
 800664a:	370c      	adds	r7, #12
 800664c:	46bd      	mov	sp, r7
 800664e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006652:	4770      	bx	lr

08006654 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8006654:	b480      	push	{r7}
 8006656:	b083      	sub	sp, #12
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800665c:	bf00      	nop
 800665e:	370c      	adds	r7, #12
 8006660:	46bd      	mov	sp, r7
 8006662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006666:	4770      	bx	lr

08006668 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8006668:	b480      	push	{r7}
 800666a:	b083      	sub	sp, #12
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8006670:	bf00      	nop
 8006672:	370c      	adds	r7, #12
 8006674:	46bd      	mov	sp, r7
 8006676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667a:	4770      	bx	lr

0800667c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800667c:	b480      	push	{r7}
 800667e:	b083      	sub	sp, #12
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8006684:	bf00      	nop
 8006686:	370c      	adds	r7, #12
 8006688:	46bd      	mov	sp, r7
 800668a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668e:	4770      	bx	lr

08006690 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8006690:	b480      	push	{r7}
 8006692:	b083      	sub	sp, #12
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8006698:	bf00      	nop
 800669a:	370c      	adds	r7, #12
 800669c:	46bd      	mov	sp, r7
 800669e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a2:	4770      	bx	lr

080066a4 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80066a4:	b480      	push	{r7}
 80066a6:	b083      	sub	sp, #12
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80066ac:	bf00      	nop
 80066ae:	370c      	adds	r7, #12
 80066b0:	46bd      	mov	sp, r7
 80066b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b6:	4770      	bx	lr

080066b8 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80066b8:	b480      	push	{r7}
 80066ba:	b083      	sub	sp, #12
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80066c0:	bf00      	nop
 80066c2:	370c      	adds	r7, #12
 80066c4:	46bd      	mov	sp, r7
 80066c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ca:	4770      	bx	lr

080066cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80066cc:	b480      	push	{r7}
 80066ce:	b085      	sub	sp, #20
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	f003 0307 	and.w	r3, r3, #7
 80066da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80066dc:	4b0c      	ldr	r3, [pc, #48]	; (8006710 <__NVIC_SetPriorityGrouping+0x44>)
 80066de:	68db      	ldr	r3, [r3, #12]
 80066e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80066e2:	68ba      	ldr	r2, [r7, #8]
 80066e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80066e8:	4013      	ands	r3, r2
 80066ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80066f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80066f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80066fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80066fe:	4a04      	ldr	r2, [pc, #16]	; (8006710 <__NVIC_SetPriorityGrouping+0x44>)
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	60d3      	str	r3, [r2, #12]
}
 8006704:	bf00      	nop
 8006706:	3714      	adds	r7, #20
 8006708:	46bd      	mov	sp, r7
 800670a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670e:	4770      	bx	lr
 8006710:	e000ed00 	.word	0xe000ed00

08006714 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006714:	b480      	push	{r7}
 8006716:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006718:	4b04      	ldr	r3, [pc, #16]	; (800672c <__NVIC_GetPriorityGrouping+0x18>)
 800671a:	68db      	ldr	r3, [r3, #12]
 800671c:	0a1b      	lsrs	r3, r3, #8
 800671e:	f003 0307 	and.w	r3, r3, #7
}
 8006722:	4618      	mov	r0, r3
 8006724:	46bd      	mov	sp, r7
 8006726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672a:	4770      	bx	lr
 800672c:	e000ed00 	.word	0xe000ed00

08006730 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006730:	b480      	push	{r7}
 8006732:	b083      	sub	sp, #12
 8006734:	af00      	add	r7, sp, #0
 8006736:	4603      	mov	r3, r0
 8006738:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800673a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800673e:	2b00      	cmp	r3, #0
 8006740:	db0b      	blt.n	800675a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006742:	79fb      	ldrb	r3, [r7, #7]
 8006744:	f003 021f 	and.w	r2, r3, #31
 8006748:	4907      	ldr	r1, [pc, #28]	; (8006768 <__NVIC_EnableIRQ+0x38>)
 800674a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800674e:	095b      	lsrs	r3, r3, #5
 8006750:	2001      	movs	r0, #1
 8006752:	fa00 f202 	lsl.w	r2, r0, r2
 8006756:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800675a:	bf00      	nop
 800675c:	370c      	adds	r7, #12
 800675e:	46bd      	mov	sp, r7
 8006760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006764:	4770      	bx	lr
 8006766:	bf00      	nop
 8006768:	e000e100 	.word	0xe000e100

0800676c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800676c:	b480      	push	{r7}
 800676e:	b083      	sub	sp, #12
 8006770:	af00      	add	r7, sp, #0
 8006772:	4603      	mov	r3, r0
 8006774:	6039      	str	r1, [r7, #0]
 8006776:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006778:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800677c:	2b00      	cmp	r3, #0
 800677e:	db0a      	blt.n	8006796 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	b2da      	uxtb	r2, r3
 8006784:	490c      	ldr	r1, [pc, #48]	; (80067b8 <__NVIC_SetPriority+0x4c>)
 8006786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800678a:	0112      	lsls	r2, r2, #4
 800678c:	b2d2      	uxtb	r2, r2
 800678e:	440b      	add	r3, r1
 8006790:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006794:	e00a      	b.n	80067ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	b2da      	uxtb	r2, r3
 800679a:	4908      	ldr	r1, [pc, #32]	; (80067bc <__NVIC_SetPriority+0x50>)
 800679c:	79fb      	ldrb	r3, [r7, #7]
 800679e:	f003 030f 	and.w	r3, r3, #15
 80067a2:	3b04      	subs	r3, #4
 80067a4:	0112      	lsls	r2, r2, #4
 80067a6:	b2d2      	uxtb	r2, r2
 80067a8:	440b      	add	r3, r1
 80067aa:	761a      	strb	r2, [r3, #24]
}
 80067ac:	bf00      	nop
 80067ae:	370c      	adds	r7, #12
 80067b0:	46bd      	mov	sp, r7
 80067b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b6:	4770      	bx	lr
 80067b8:	e000e100 	.word	0xe000e100
 80067bc:	e000ed00 	.word	0xe000ed00

080067c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80067c0:	b480      	push	{r7}
 80067c2:	b089      	sub	sp, #36	; 0x24
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	60f8      	str	r0, [r7, #12]
 80067c8:	60b9      	str	r1, [r7, #8]
 80067ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	f003 0307 	and.w	r3, r3, #7
 80067d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80067d4:	69fb      	ldr	r3, [r7, #28]
 80067d6:	f1c3 0307 	rsb	r3, r3, #7
 80067da:	2b04      	cmp	r3, #4
 80067dc:	bf28      	it	cs
 80067de:	2304      	movcs	r3, #4
 80067e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80067e2:	69fb      	ldr	r3, [r7, #28]
 80067e4:	3304      	adds	r3, #4
 80067e6:	2b06      	cmp	r3, #6
 80067e8:	d902      	bls.n	80067f0 <NVIC_EncodePriority+0x30>
 80067ea:	69fb      	ldr	r3, [r7, #28]
 80067ec:	3b03      	subs	r3, #3
 80067ee:	e000      	b.n	80067f2 <NVIC_EncodePriority+0x32>
 80067f0:	2300      	movs	r3, #0
 80067f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80067f4:	f04f 32ff 	mov.w	r2, #4294967295
 80067f8:	69bb      	ldr	r3, [r7, #24]
 80067fa:	fa02 f303 	lsl.w	r3, r2, r3
 80067fe:	43da      	mvns	r2, r3
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	401a      	ands	r2, r3
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006808:	f04f 31ff 	mov.w	r1, #4294967295
 800680c:	697b      	ldr	r3, [r7, #20]
 800680e:	fa01 f303 	lsl.w	r3, r1, r3
 8006812:	43d9      	mvns	r1, r3
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006818:	4313      	orrs	r3, r2
         );
}
 800681a:	4618      	mov	r0, r3
 800681c:	3724      	adds	r7, #36	; 0x24
 800681e:	46bd      	mov	sp, r7
 8006820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006824:	4770      	bx	lr

08006826 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006826:	b580      	push	{r7, lr}
 8006828:	b082      	sub	sp, #8
 800682a:	af00      	add	r7, sp, #0
 800682c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f7ff ff4c 	bl	80066cc <__NVIC_SetPriorityGrouping>
}
 8006834:	bf00      	nop
 8006836:	3708      	adds	r7, #8
 8006838:	46bd      	mov	sp, r7
 800683a:	bd80      	pop	{r7, pc}

0800683c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b086      	sub	sp, #24
 8006840:	af00      	add	r7, sp, #0
 8006842:	4603      	mov	r3, r0
 8006844:	60b9      	str	r1, [r7, #8]
 8006846:	607a      	str	r2, [r7, #4]
 8006848:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800684a:	2300      	movs	r3, #0
 800684c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800684e:	f7ff ff61 	bl	8006714 <__NVIC_GetPriorityGrouping>
 8006852:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006854:	687a      	ldr	r2, [r7, #4]
 8006856:	68b9      	ldr	r1, [r7, #8]
 8006858:	6978      	ldr	r0, [r7, #20]
 800685a:	f7ff ffb1 	bl	80067c0 <NVIC_EncodePriority>
 800685e:	4602      	mov	r2, r0
 8006860:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006864:	4611      	mov	r1, r2
 8006866:	4618      	mov	r0, r3
 8006868:	f7ff ff80 	bl	800676c <__NVIC_SetPriority>
}
 800686c:	bf00      	nop
 800686e:	3718      	adds	r7, #24
 8006870:	46bd      	mov	sp, r7
 8006872:	bd80      	pop	{r7, pc}

08006874 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b082      	sub	sp, #8
 8006878:	af00      	add	r7, sp, #0
 800687a:	4603      	mov	r3, r0
 800687c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800687e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006882:	4618      	mov	r0, r3
 8006884:	f7ff ff54 	bl	8006730 <__NVIC_EnableIRQ>
}
 8006888:	bf00      	nop
 800688a:	3708      	adds	r7, #8
 800688c:	46bd      	mov	sp, r7
 800688e:	bd80      	pop	{r7, pc}

08006890 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b084      	sub	sp, #16
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d101      	bne.n	80068a2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800689e:	2301      	movs	r3, #1
 80068a0:	e08d      	b.n	80069be <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	461a      	mov	r2, r3
 80068a8:	4b47      	ldr	r3, [pc, #284]	; (80069c8 <HAL_DMA_Init+0x138>)
 80068aa:	429a      	cmp	r2, r3
 80068ac:	d80f      	bhi.n	80068ce <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	461a      	mov	r2, r3
 80068b4:	4b45      	ldr	r3, [pc, #276]	; (80069cc <HAL_DMA_Init+0x13c>)
 80068b6:	4413      	add	r3, r2
 80068b8:	4a45      	ldr	r2, [pc, #276]	; (80069d0 <HAL_DMA_Init+0x140>)
 80068ba:	fba2 2303 	umull	r2, r3, r2, r3
 80068be:	091b      	lsrs	r3, r3, #4
 80068c0:	009a      	lsls	r2, r3, #2
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	4a42      	ldr	r2, [pc, #264]	; (80069d4 <HAL_DMA_Init+0x144>)
 80068ca:	641a      	str	r2, [r3, #64]	; 0x40
 80068cc:	e00e      	b.n	80068ec <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	461a      	mov	r2, r3
 80068d4:	4b40      	ldr	r3, [pc, #256]	; (80069d8 <HAL_DMA_Init+0x148>)
 80068d6:	4413      	add	r3, r2
 80068d8:	4a3d      	ldr	r2, [pc, #244]	; (80069d0 <HAL_DMA_Init+0x140>)
 80068da:	fba2 2303 	umull	r2, r3, r2, r3
 80068de:	091b      	lsrs	r3, r3, #4
 80068e0:	009a      	lsls	r2, r3, #2
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	4a3c      	ldr	r2, [pc, #240]	; (80069dc <HAL_DMA_Init+0x14c>)
 80068ea:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2202      	movs	r2, #2
 80068f0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006902:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006906:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8006910:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	691b      	ldr	r3, [r3, #16]
 8006916:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800691c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	699b      	ldr	r3, [r3, #24]
 8006922:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006928:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6a1b      	ldr	r3, [r3, #32]
 800692e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006930:	68fa      	ldr	r2, [r7, #12]
 8006932:	4313      	orrs	r3, r2
 8006934:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	68fa      	ldr	r2, [r7, #12]
 800693c:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f000 f8fe 	bl	8006b40 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	689b      	ldr	r3, [r3, #8]
 8006948:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800694c:	d102      	bne.n	8006954 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2200      	movs	r2, #0
 8006952:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	685a      	ldr	r2, [r3, #4]
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800695c:	b2d2      	uxtb	r2, r2
 800695e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006964:	687a      	ldr	r2, [r7, #4]
 8006966:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006968:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d010      	beq.n	8006994 <HAL_DMA_Init+0x104>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	685b      	ldr	r3, [r3, #4]
 8006976:	2b04      	cmp	r3, #4
 8006978:	d80c      	bhi.n	8006994 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f000 f91e 	bl	8006bbc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006984:	2200      	movs	r2, #0
 8006986:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800698c:	687a      	ldr	r2, [r7, #4]
 800698e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006990:	605a      	str	r2, [r3, #4]
 8006992:	e008      	b.n	80069a6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2200      	movs	r2, #0
 8006998:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2200      	movs	r2, #0
 800699e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2200      	movs	r2, #0
 80069a4:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2200      	movs	r2, #0
 80069aa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2201      	movs	r2, #1
 80069b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2200      	movs	r2, #0
 80069b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80069bc:	2300      	movs	r3, #0
}
 80069be:	4618      	mov	r0, r3
 80069c0:	3710      	adds	r7, #16
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd80      	pop	{r7, pc}
 80069c6:	bf00      	nop
 80069c8:	40020407 	.word	0x40020407
 80069cc:	bffdfff8 	.word	0xbffdfff8
 80069d0:	cccccccd 	.word	0xcccccccd
 80069d4:	40020000 	.word	0x40020000
 80069d8:	bffdfbf8 	.word	0xbffdfbf8
 80069dc:	40020400 	.word	0x40020400

080069e0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b084      	sub	sp, #16
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069fc:	f003 031c 	and.w	r3, r3, #28
 8006a00:	2204      	movs	r2, #4
 8006a02:	409a      	lsls	r2, r3
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	4013      	ands	r3, r2
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d026      	beq.n	8006a5a <HAL_DMA_IRQHandler+0x7a>
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	f003 0304 	and.w	r3, r3, #4
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d021      	beq.n	8006a5a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f003 0320 	and.w	r3, r3, #32
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d107      	bne.n	8006a34 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	681a      	ldr	r2, [r3, #0]
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f022 0204 	bic.w	r2, r2, #4
 8006a32:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a38:	f003 021c 	and.w	r2, r3, #28
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a40:	2104      	movs	r1, #4
 8006a42:	fa01 f202 	lsl.w	r2, r1, r2
 8006a46:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d071      	beq.n	8006b34 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8006a58:	e06c      	b.n	8006b34 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a5e:	f003 031c 	and.w	r3, r3, #28
 8006a62:	2202      	movs	r2, #2
 8006a64:	409a      	lsls	r2, r3
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	4013      	ands	r3, r2
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d02e      	beq.n	8006acc <HAL_DMA_IRQHandler+0xec>
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	f003 0302 	and.w	r3, r3, #2
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d029      	beq.n	8006acc <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f003 0320 	and.w	r3, r3, #32
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d10b      	bne.n	8006a9e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	681a      	ldr	r2, [r3, #0]
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f022 020a 	bic.w	r2, r2, #10
 8006a94:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2201      	movs	r2, #1
 8006a9a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006aa2:	f003 021c 	and.w	r2, r3, #28
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aaa:	2102      	movs	r1, #2
 8006aac:	fa01 f202 	lsl.w	r2, r1, r2
 8006ab0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d038      	beq.n	8006b34 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8006aca:	e033      	b.n	8006b34 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ad0:	f003 031c 	and.w	r3, r3, #28
 8006ad4:	2208      	movs	r2, #8
 8006ad6:	409a      	lsls	r2, r3
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	4013      	ands	r3, r2
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d02a      	beq.n	8006b36 <HAL_DMA_IRQHandler+0x156>
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	f003 0308 	and.w	r3, r3, #8
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d025      	beq.n	8006b36 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	681a      	ldr	r2, [r3, #0]
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f022 020e 	bic.w	r2, r2, #14
 8006af8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006afe:	f003 021c 	and.w	r2, r3, #28
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b06:	2101      	movs	r1, #1
 8006b08:	fa01 f202 	lsl.w	r2, r1, r2
 8006b0c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2201      	movs	r2, #1
 8006b12:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2201      	movs	r2, #1
 8006b18:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d004      	beq.n	8006b36 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006b34:	bf00      	nop
 8006b36:	bf00      	nop
}
 8006b38:	3710      	adds	r7, #16
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}
	...

08006b40 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006b40:	b480      	push	{r7}
 8006b42:	b085      	sub	sp, #20
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	461a      	mov	r2, r3
 8006b4e:	4b17      	ldr	r3, [pc, #92]	; (8006bac <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8006b50:	429a      	cmp	r2, r3
 8006b52:	d80a      	bhi.n	8006b6a <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b58:	089b      	lsrs	r3, r3, #2
 8006b5a:	009b      	lsls	r3, r3, #2
 8006b5c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006b60:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8006b64:	687a      	ldr	r2, [r7, #4]
 8006b66:	6493      	str	r3, [r2, #72]	; 0x48
 8006b68:	e007      	b.n	8006b7a <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b6e:	089b      	lsrs	r3, r3, #2
 8006b70:	009a      	lsls	r2, r3, #2
 8006b72:	4b0f      	ldr	r3, [pc, #60]	; (8006bb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8006b74:	4413      	add	r3, r2
 8006b76:	687a      	ldr	r2, [r7, #4]
 8006b78:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	b2db      	uxtb	r3, r3
 8006b80:	3b08      	subs	r3, #8
 8006b82:	4a0c      	ldr	r2, [pc, #48]	; (8006bb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8006b84:	fba2 2303 	umull	r2, r3, r2, r3
 8006b88:	091b      	lsrs	r3, r3, #4
 8006b8a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	4a0a      	ldr	r2, [pc, #40]	; (8006bb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8006b90:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	f003 031f 	and.w	r3, r3, #31
 8006b98:	2201      	movs	r2, #1
 8006b9a:	409a      	lsls	r2, r3
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006ba0:	bf00      	nop
 8006ba2:	3714      	adds	r7, #20
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006baa:	4770      	bx	lr
 8006bac:	40020407 	.word	0x40020407
 8006bb0:	4002081c 	.word	0x4002081c
 8006bb4:	cccccccd 	.word	0xcccccccd
 8006bb8:	40020880 	.word	0x40020880

08006bbc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b085      	sub	sp, #20
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	685b      	ldr	r3, [r3, #4]
 8006bc8:	b2db      	uxtb	r3, r3
 8006bca:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006bcc:	68fa      	ldr	r2, [r7, #12]
 8006bce:	4b0b      	ldr	r3, [pc, #44]	; (8006bfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8006bd0:	4413      	add	r3, r2
 8006bd2:	009b      	lsls	r3, r3, #2
 8006bd4:	461a      	mov	r2, r3
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	4a08      	ldr	r2, [pc, #32]	; (8006c00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8006bde:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	3b01      	subs	r3, #1
 8006be4:	f003 0303 	and.w	r3, r3, #3
 8006be8:	2201      	movs	r2, #1
 8006bea:	409a      	lsls	r2, r3
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8006bf0:	bf00      	nop
 8006bf2:	3714      	adds	r7, #20
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfa:	4770      	bx	lr
 8006bfc:	1000823f 	.word	0x1000823f
 8006c00:	40020940 	.word	0x40020940

08006c04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006c04:	b480      	push	{r7}
 8006c06:	b087      	sub	sp, #28
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
 8006c0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006c0e:	2300      	movs	r3, #0
 8006c10:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006c12:	e166      	b.n	8006ee2 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	681a      	ldr	r2, [r3, #0]
 8006c18:	2101      	movs	r1, #1
 8006c1a:	697b      	ldr	r3, [r7, #20]
 8006c1c:	fa01 f303 	lsl.w	r3, r1, r3
 8006c20:	4013      	ands	r3, r2
 8006c22:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	f000 8158 	beq.w	8006edc <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	685b      	ldr	r3, [r3, #4]
 8006c30:	f003 0303 	and.w	r3, r3, #3
 8006c34:	2b01      	cmp	r3, #1
 8006c36:	d005      	beq.n	8006c44 <HAL_GPIO_Init+0x40>
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	685b      	ldr	r3, [r3, #4]
 8006c3c:	f003 0303 	and.w	r3, r3, #3
 8006c40:	2b02      	cmp	r3, #2
 8006c42:	d130      	bne.n	8006ca6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	689b      	ldr	r3, [r3, #8]
 8006c48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006c4a:	697b      	ldr	r3, [r7, #20]
 8006c4c:	005b      	lsls	r3, r3, #1
 8006c4e:	2203      	movs	r2, #3
 8006c50:	fa02 f303 	lsl.w	r3, r2, r3
 8006c54:	43db      	mvns	r3, r3
 8006c56:	693a      	ldr	r2, [r7, #16]
 8006c58:	4013      	ands	r3, r2
 8006c5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	68da      	ldr	r2, [r3, #12]
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	005b      	lsls	r3, r3, #1
 8006c64:	fa02 f303 	lsl.w	r3, r2, r3
 8006c68:	693a      	ldr	r2, [r7, #16]
 8006c6a:	4313      	orrs	r3, r2
 8006c6c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	693a      	ldr	r2, [r7, #16]
 8006c72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	685b      	ldr	r3, [r3, #4]
 8006c78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006c7a:	2201      	movs	r2, #1
 8006c7c:	697b      	ldr	r3, [r7, #20]
 8006c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8006c82:	43db      	mvns	r3, r3
 8006c84:	693a      	ldr	r2, [r7, #16]
 8006c86:	4013      	ands	r3, r2
 8006c88:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	685b      	ldr	r3, [r3, #4]
 8006c8e:	091b      	lsrs	r3, r3, #4
 8006c90:	f003 0201 	and.w	r2, r3, #1
 8006c94:	697b      	ldr	r3, [r7, #20]
 8006c96:	fa02 f303 	lsl.w	r3, r2, r3
 8006c9a:	693a      	ldr	r2, [r7, #16]
 8006c9c:	4313      	orrs	r3, r2
 8006c9e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	693a      	ldr	r2, [r7, #16]
 8006ca4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	685b      	ldr	r3, [r3, #4]
 8006caa:	f003 0303 	and.w	r3, r3, #3
 8006cae:	2b03      	cmp	r3, #3
 8006cb0:	d017      	beq.n	8006ce2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	68db      	ldr	r3, [r3, #12]
 8006cb6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	005b      	lsls	r3, r3, #1
 8006cbc:	2203      	movs	r2, #3
 8006cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8006cc2:	43db      	mvns	r3, r3
 8006cc4:	693a      	ldr	r2, [r7, #16]
 8006cc6:	4013      	ands	r3, r2
 8006cc8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	689a      	ldr	r2, [r3, #8]
 8006cce:	697b      	ldr	r3, [r7, #20]
 8006cd0:	005b      	lsls	r3, r3, #1
 8006cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8006cd6:	693a      	ldr	r2, [r7, #16]
 8006cd8:	4313      	orrs	r3, r2
 8006cda:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	693a      	ldr	r2, [r7, #16]
 8006ce0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	685b      	ldr	r3, [r3, #4]
 8006ce6:	f003 0303 	and.w	r3, r3, #3
 8006cea:	2b02      	cmp	r3, #2
 8006cec:	d123      	bne.n	8006d36 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	08da      	lsrs	r2, r3, #3
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	3208      	adds	r2, #8
 8006cf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cfa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	f003 0307 	and.w	r3, r3, #7
 8006d02:	009b      	lsls	r3, r3, #2
 8006d04:	220f      	movs	r2, #15
 8006d06:	fa02 f303 	lsl.w	r3, r2, r3
 8006d0a:	43db      	mvns	r3, r3
 8006d0c:	693a      	ldr	r2, [r7, #16]
 8006d0e:	4013      	ands	r3, r2
 8006d10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	691a      	ldr	r2, [r3, #16]
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	f003 0307 	and.w	r3, r3, #7
 8006d1c:	009b      	lsls	r3, r3, #2
 8006d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8006d22:	693a      	ldr	r2, [r7, #16]
 8006d24:	4313      	orrs	r3, r2
 8006d26:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006d28:	697b      	ldr	r3, [r7, #20]
 8006d2a:	08da      	lsrs	r2, r3, #3
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	3208      	adds	r2, #8
 8006d30:	6939      	ldr	r1, [r7, #16]
 8006d32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006d3c:	697b      	ldr	r3, [r7, #20]
 8006d3e:	005b      	lsls	r3, r3, #1
 8006d40:	2203      	movs	r2, #3
 8006d42:	fa02 f303 	lsl.w	r3, r2, r3
 8006d46:	43db      	mvns	r3, r3
 8006d48:	693a      	ldr	r2, [r7, #16]
 8006d4a:	4013      	ands	r3, r2
 8006d4c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	685b      	ldr	r3, [r3, #4]
 8006d52:	f003 0203 	and.w	r2, r3, #3
 8006d56:	697b      	ldr	r3, [r7, #20]
 8006d58:	005b      	lsls	r3, r3, #1
 8006d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8006d5e:	693a      	ldr	r2, [r7, #16]
 8006d60:	4313      	orrs	r3, r2
 8006d62:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	693a      	ldr	r2, [r7, #16]
 8006d68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	685b      	ldr	r3, [r3, #4]
 8006d6e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	f000 80b2 	beq.w	8006edc <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006d78:	4b61      	ldr	r3, [pc, #388]	; (8006f00 <HAL_GPIO_Init+0x2fc>)
 8006d7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d7c:	4a60      	ldr	r2, [pc, #384]	; (8006f00 <HAL_GPIO_Init+0x2fc>)
 8006d7e:	f043 0301 	orr.w	r3, r3, #1
 8006d82:	6613      	str	r3, [r2, #96]	; 0x60
 8006d84:	4b5e      	ldr	r3, [pc, #376]	; (8006f00 <HAL_GPIO_Init+0x2fc>)
 8006d86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d88:	f003 0301 	and.w	r3, r3, #1
 8006d8c:	60bb      	str	r3, [r7, #8]
 8006d8e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8006d90:	4a5c      	ldr	r2, [pc, #368]	; (8006f04 <HAL_GPIO_Init+0x300>)
 8006d92:	697b      	ldr	r3, [r7, #20]
 8006d94:	089b      	lsrs	r3, r3, #2
 8006d96:	3302      	adds	r3, #2
 8006d98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d9c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	f003 0303 	and.w	r3, r3, #3
 8006da4:	009b      	lsls	r3, r3, #2
 8006da6:	220f      	movs	r2, #15
 8006da8:	fa02 f303 	lsl.w	r3, r2, r3
 8006dac:	43db      	mvns	r3, r3
 8006dae:	693a      	ldr	r2, [r7, #16]
 8006db0:	4013      	ands	r3, r2
 8006db2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006dba:	d02b      	beq.n	8006e14 <HAL_GPIO_Init+0x210>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	4a52      	ldr	r2, [pc, #328]	; (8006f08 <HAL_GPIO_Init+0x304>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d025      	beq.n	8006e10 <HAL_GPIO_Init+0x20c>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	4a51      	ldr	r2, [pc, #324]	; (8006f0c <HAL_GPIO_Init+0x308>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d01f      	beq.n	8006e0c <HAL_GPIO_Init+0x208>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	4a50      	ldr	r2, [pc, #320]	; (8006f10 <HAL_GPIO_Init+0x30c>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d019      	beq.n	8006e08 <HAL_GPIO_Init+0x204>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	4a4f      	ldr	r2, [pc, #316]	; (8006f14 <HAL_GPIO_Init+0x310>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d013      	beq.n	8006e04 <HAL_GPIO_Init+0x200>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	4a4e      	ldr	r2, [pc, #312]	; (8006f18 <HAL_GPIO_Init+0x314>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d00d      	beq.n	8006e00 <HAL_GPIO_Init+0x1fc>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	4a4d      	ldr	r2, [pc, #308]	; (8006f1c <HAL_GPIO_Init+0x318>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d007      	beq.n	8006dfc <HAL_GPIO_Init+0x1f8>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	4a4c      	ldr	r2, [pc, #304]	; (8006f20 <HAL_GPIO_Init+0x31c>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d101      	bne.n	8006df8 <HAL_GPIO_Init+0x1f4>
 8006df4:	2307      	movs	r3, #7
 8006df6:	e00e      	b.n	8006e16 <HAL_GPIO_Init+0x212>
 8006df8:	2308      	movs	r3, #8
 8006dfa:	e00c      	b.n	8006e16 <HAL_GPIO_Init+0x212>
 8006dfc:	2306      	movs	r3, #6
 8006dfe:	e00a      	b.n	8006e16 <HAL_GPIO_Init+0x212>
 8006e00:	2305      	movs	r3, #5
 8006e02:	e008      	b.n	8006e16 <HAL_GPIO_Init+0x212>
 8006e04:	2304      	movs	r3, #4
 8006e06:	e006      	b.n	8006e16 <HAL_GPIO_Init+0x212>
 8006e08:	2303      	movs	r3, #3
 8006e0a:	e004      	b.n	8006e16 <HAL_GPIO_Init+0x212>
 8006e0c:	2302      	movs	r3, #2
 8006e0e:	e002      	b.n	8006e16 <HAL_GPIO_Init+0x212>
 8006e10:	2301      	movs	r3, #1
 8006e12:	e000      	b.n	8006e16 <HAL_GPIO_Init+0x212>
 8006e14:	2300      	movs	r3, #0
 8006e16:	697a      	ldr	r2, [r7, #20]
 8006e18:	f002 0203 	and.w	r2, r2, #3
 8006e1c:	0092      	lsls	r2, r2, #2
 8006e1e:	4093      	lsls	r3, r2
 8006e20:	693a      	ldr	r2, [r7, #16]
 8006e22:	4313      	orrs	r3, r2
 8006e24:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006e26:	4937      	ldr	r1, [pc, #220]	; (8006f04 <HAL_GPIO_Init+0x300>)
 8006e28:	697b      	ldr	r3, [r7, #20]
 8006e2a:	089b      	lsrs	r3, r3, #2
 8006e2c:	3302      	adds	r3, #2
 8006e2e:	693a      	ldr	r2, [r7, #16]
 8006e30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006e34:	4b3b      	ldr	r3, [pc, #236]	; (8006f24 <HAL_GPIO_Init+0x320>)
 8006e36:	689b      	ldr	r3, [r3, #8]
 8006e38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	43db      	mvns	r3, r3
 8006e3e:	693a      	ldr	r2, [r7, #16]
 8006e40:	4013      	ands	r3, r2
 8006e42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	685b      	ldr	r3, [r3, #4]
 8006e48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d003      	beq.n	8006e58 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8006e50:	693a      	ldr	r2, [r7, #16]
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	4313      	orrs	r3, r2
 8006e56:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006e58:	4a32      	ldr	r2, [pc, #200]	; (8006f24 <HAL_GPIO_Init+0x320>)
 8006e5a:	693b      	ldr	r3, [r7, #16]
 8006e5c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006e5e:	4b31      	ldr	r3, [pc, #196]	; (8006f24 <HAL_GPIO_Init+0x320>)
 8006e60:	68db      	ldr	r3, [r3, #12]
 8006e62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	43db      	mvns	r3, r3
 8006e68:	693a      	ldr	r2, [r7, #16]
 8006e6a:	4013      	ands	r3, r2
 8006e6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	685b      	ldr	r3, [r3, #4]
 8006e72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d003      	beq.n	8006e82 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8006e7a:	693a      	ldr	r2, [r7, #16]
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	4313      	orrs	r3, r2
 8006e80:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006e82:	4a28      	ldr	r2, [pc, #160]	; (8006f24 <HAL_GPIO_Init+0x320>)
 8006e84:	693b      	ldr	r3, [r7, #16]
 8006e86:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8006e88:	4b26      	ldr	r3, [pc, #152]	; (8006f24 <HAL_GPIO_Init+0x320>)
 8006e8a:	685b      	ldr	r3, [r3, #4]
 8006e8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	43db      	mvns	r3, r3
 8006e92:	693a      	ldr	r2, [r7, #16]
 8006e94:	4013      	ands	r3, r2
 8006e96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	685b      	ldr	r3, [r3, #4]
 8006e9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d003      	beq.n	8006eac <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8006ea4:	693a      	ldr	r2, [r7, #16]
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	4313      	orrs	r3, r2
 8006eaa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006eac:	4a1d      	ldr	r2, [pc, #116]	; (8006f24 <HAL_GPIO_Init+0x320>)
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8006eb2:	4b1c      	ldr	r3, [pc, #112]	; (8006f24 <HAL_GPIO_Init+0x320>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	43db      	mvns	r3, r3
 8006ebc:	693a      	ldr	r2, [r7, #16]
 8006ebe:	4013      	ands	r3, r2
 8006ec0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	685b      	ldr	r3, [r3, #4]
 8006ec6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d003      	beq.n	8006ed6 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8006ece:	693a      	ldr	r2, [r7, #16]
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	4313      	orrs	r3, r2
 8006ed4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006ed6:	4a13      	ldr	r2, [pc, #76]	; (8006f24 <HAL_GPIO_Init+0x320>)
 8006ed8:	693b      	ldr	r3, [r7, #16]
 8006eda:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006edc:	697b      	ldr	r3, [r7, #20]
 8006ede:	3301      	adds	r3, #1
 8006ee0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	681a      	ldr	r2, [r3, #0]
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	fa22 f303 	lsr.w	r3, r2, r3
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	f47f ae91 	bne.w	8006c14 <HAL_GPIO_Init+0x10>
  }
}
 8006ef2:	bf00      	nop
 8006ef4:	bf00      	nop
 8006ef6:	371c      	adds	r7, #28
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efe:	4770      	bx	lr
 8006f00:	40021000 	.word	0x40021000
 8006f04:	40010000 	.word	0x40010000
 8006f08:	48000400 	.word	0x48000400
 8006f0c:	48000800 	.word	0x48000800
 8006f10:	48000c00 	.word	0x48000c00
 8006f14:	48001000 	.word	0x48001000
 8006f18:	48001400 	.word	0x48001400
 8006f1c:	48001800 	.word	0x48001800
 8006f20:	48001c00 	.word	0x48001c00
 8006f24:	40010400 	.word	0x40010400

08006f28 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b085      	sub	sp, #20
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
 8006f30:	460b      	mov	r3, r1
 8006f32:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	691a      	ldr	r2, [r3, #16]
 8006f38:	887b      	ldrh	r3, [r7, #2]
 8006f3a:	4013      	ands	r3, r2
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d002      	beq.n	8006f46 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006f40:	2301      	movs	r3, #1
 8006f42:	73fb      	strb	r3, [r7, #15]
 8006f44:	e001      	b.n	8006f4a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006f46:	2300      	movs	r3, #0
 8006f48:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006f4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	3714      	adds	r7, #20
 8006f50:	46bd      	mov	sp, r7
 8006f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f56:	4770      	bx	lr

08006f58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006f58:	b480      	push	{r7}
 8006f5a:	b083      	sub	sp, #12
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
 8006f60:	460b      	mov	r3, r1
 8006f62:	807b      	strh	r3, [r7, #2]
 8006f64:	4613      	mov	r3, r2
 8006f66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006f68:	787b      	ldrb	r3, [r7, #1]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d003      	beq.n	8006f76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006f6e:	887a      	ldrh	r2, [r7, #2]
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006f74:	e002      	b.n	8006f7c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006f76:	887a      	ldrh	r2, [r7, #2]
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006f7c:	bf00      	nop
 8006f7e:	370c      	adds	r7, #12
 8006f80:	46bd      	mov	sp, r7
 8006f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f86:	4770      	bx	lr

08006f88 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006f88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f8a:	b08f      	sub	sp, #60	; 0x3c
 8006f8c:	af0a      	add	r7, sp, #40	; 0x28
 8006f8e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d101      	bne.n	8006f9a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006f96:	2301      	movs	r3, #1
 8006f98:	e116      	b.n	80071c8 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8006fa6:	b2db      	uxtb	r3, r3
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d106      	bne.n	8006fba <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2200      	movs	r2, #0
 8006fb0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	f00a fb8b 	bl	80116d0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2203      	movs	r2, #3
 8006fbe:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d102      	bne.n	8006fd4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4618      	mov	r0, r3
 8006fda:	f004 fd02 	bl	800b9e2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	603b      	str	r3, [r7, #0]
 8006fe4:	687e      	ldr	r6, [r7, #4]
 8006fe6:	466d      	mov	r5, sp
 8006fe8:	f106 0410 	add.w	r4, r6, #16
 8006fec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006fee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006ff0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006ff2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006ff4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006ff8:	e885 0003 	stmia.w	r5, {r0, r1}
 8006ffc:	1d33      	adds	r3, r6, #4
 8006ffe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007000:	6838      	ldr	r0, [r7, #0]
 8007002:	f004 fc15 	bl	800b830 <USB_CoreInit>
 8007006:	4603      	mov	r3, r0
 8007008:	2b00      	cmp	r3, #0
 800700a:	d005      	beq.n	8007018 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2202      	movs	r2, #2
 8007010:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8007014:	2301      	movs	r3, #1
 8007016:	e0d7      	b.n	80071c8 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	2100      	movs	r1, #0
 800701e:	4618      	mov	r0, r3
 8007020:	f004 fcf0 	bl	800ba04 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007024:	2300      	movs	r3, #0
 8007026:	73fb      	strb	r3, [r7, #15]
 8007028:	e04a      	b.n	80070c0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800702a:	7bfa      	ldrb	r2, [r7, #15]
 800702c:	6879      	ldr	r1, [r7, #4]
 800702e:	4613      	mov	r3, r2
 8007030:	00db      	lsls	r3, r3, #3
 8007032:	4413      	add	r3, r2
 8007034:	009b      	lsls	r3, r3, #2
 8007036:	440b      	add	r3, r1
 8007038:	333d      	adds	r3, #61	; 0x3d
 800703a:	2201      	movs	r2, #1
 800703c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800703e:	7bfa      	ldrb	r2, [r7, #15]
 8007040:	6879      	ldr	r1, [r7, #4]
 8007042:	4613      	mov	r3, r2
 8007044:	00db      	lsls	r3, r3, #3
 8007046:	4413      	add	r3, r2
 8007048:	009b      	lsls	r3, r3, #2
 800704a:	440b      	add	r3, r1
 800704c:	333c      	adds	r3, #60	; 0x3c
 800704e:	7bfa      	ldrb	r2, [r7, #15]
 8007050:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8007052:	7bfa      	ldrb	r2, [r7, #15]
 8007054:	7bfb      	ldrb	r3, [r7, #15]
 8007056:	b298      	uxth	r0, r3
 8007058:	6879      	ldr	r1, [r7, #4]
 800705a:	4613      	mov	r3, r2
 800705c:	00db      	lsls	r3, r3, #3
 800705e:	4413      	add	r3, r2
 8007060:	009b      	lsls	r3, r3, #2
 8007062:	440b      	add	r3, r1
 8007064:	3344      	adds	r3, #68	; 0x44
 8007066:	4602      	mov	r2, r0
 8007068:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800706a:	7bfa      	ldrb	r2, [r7, #15]
 800706c:	6879      	ldr	r1, [r7, #4]
 800706e:	4613      	mov	r3, r2
 8007070:	00db      	lsls	r3, r3, #3
 8007072:	4413      	add	r3, r2
 8007074:	009b      	lsls	r3, r3, #2
 8007076:	440b      	add	r3, r1
 8007078:	3340      	adds	r3, #64	; 0x40
 800707a:	2200      	movs	r2, #0
 800707c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800707e:	7bfa      	ldrb	r2, [r7, #15]
 8007080:	6879      	ldr	r1, [r7, #4]
 8007082:	4613      	mov	r3, r2
 8007084:	00db      	lsls	r3, r3, #3
 8007086:	4413      	add	r3, r2
 8007088:	009b      	lsls	r3, r3, #2
 800708a:	440b      	add	r3, r1
 800708c:	3348      	adds	r3, #72	; 0x48
 800708e:	2200      	movs	r2, #0
 8007090:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007092:	7bfa      	ldrb	r2, [r7, #15]
 8007094:	6879      	ldr	r1, [r7, #4]
 8007096:	4613      	mov	r3, r2
 8007098:	00db      	lsls	r3, r3, #3
 800709a:	4413      	add	r3, r2
 800709c:	009b      	lsls	r3, r3, #2
 800709e:	440b      	add	r3, r1
 80070a0:	334c      	adds	r3, #76	; 0x4c
 80070a2:	2200      	movs	r2, #0
 80070a4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80070a6:	7bfa      	ldrb	r2, [r7, #15]
 80070a8:	6879      	ldr	r1, [r7, #4]
 80070aa:	4613      	mov	r3, r2
 80070ac:	00db      	lsls	r3, r3, #3
 80070ae:	4413      	add	r3, r2
 80070b0:	009b      	lsls	r3, r3, #2
 80070b2:	440b      	add	r3, r1
 80070b4:	3354      	adds	r3, #84	; 0x54
 80070b6:	2200      	movs	r2, #0
 80070b8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80070ba:	7bfb      	ldrb	r3, [r7, #15]
 80070bc:	3301      	adds	r3, #1
 80070be:	73fb      	strb	r3, [r7, #15]
 80070c0:	7bfa      	ldrb	r2, [r7, #15]
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	429a      	cmp	r2, r3
 80070c8:	d3af      	bcc.n	800702a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80070ca:	2300      	movs	r3, #0
 80070cc:	73fb      	strb	r3, [r7, #15]
 80070ce:	e044      	b.n	800715a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80070d0:	7bfa      	ldrb	r2, [r7, #15]
 80070d2:	6879      	ldr	r1, [r7, #4]
 80070d4:	4613      	mov	r3, r2
 80070d6:	00db      	lsls	r3, r3, #3
 80070d8:	4413      	add	r3, r2
 80070da:	009b      	lsls	r3, r3, #2
 80070dc:	440b      	add	r3, r1
 80070de:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80070e2:	2200      	movs	r2, #0
 80070e4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80070e6:	7bfa      	ldrb	r2, [r7, #15]
 80070e8:	6879      	ldr	r1, [r7, #4]
 80070ea:	4613      	mov	r3, r2
 80070ec:	00db      	lsls	r3, r3, #3
 80070ee:	4413      	add	r3, r2
 80070f0:	009b      	lsls	r3, r3, #2
 80070f2:	440b      	add	r3, r1
 80070f4:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80070f8:	7bfa      	ldrb	r2, [r7, #15]
 80070fa:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80070fc:	7bfa      	ldrb	r2, [r7, #15]
 80070fe:	6879      	ldr	r1, [r7, #4]
 8007100:	4613      	mov	r3, r2
 8007102:	00db      	lsls	r3, r3, #3
 8007104:	4413      	add	r3, r2
 8007106:	009b      	lsls	r3, r3, #2
 8007108:	440b      	add	r3, r1
 800710a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800710e:	2200      	movs	r2, #0
 8007110:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007112:	7bfa      	ldrb	r2, [r7, #15]
 8007114:	6879      	ldr	r1, [r7, #4]
 8007116:	4613      	mov	r3, r2
 8007118:	00db      	lsls	r3, r3, #3
 800711a:	4413      	add	r3, r2
 800711c:	009b      	lsls	r3, r3, #2
 800711e:	440b      	add	r3, r1
 8007120:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8007124:	2200      	movs	r2, #0
 8007126:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007128:	7bfa      	ldrb	r2, [r7, #15]
 800712a:	6879      	ldr	r1, [r7, #4]
 800712c:	4613      	mov	r3, r2
 800712e:	00db      	lsls	r3, r3, #3
 8007130:	4413      	add	r3, r2
 8007132:	009b      	lsls	r3, r3, #2
 8007134:	440b      	add	r3, r1
 8007136:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800713a:	2200      	movs	r2, #0
 800713c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800713e:	7bfa      	ldrb	r2, [r7, #15]
 8007140:	6879      	ldr	r1, [r7, #4]
 8007142:	4613      	mov	r3, r2
 8007144:	00db      	lsls	r3, r3, #3
 8007146:	4413      	add	r3, r2
 8007148:	009b      	lsls	r3, r3, #2
 800714a:	440b      	add	r3, r1
 800714c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8007150:	2200      	movs	r2, #0
 8007152:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007154:	7bfb      	ldrb	r3, [r7, #15]
 8007156:	3301      	adds	r3, #1
 8007158:	73fb      	strb	r3, [r7, #15]
 800715a:	7bfa      	ldrb	r2, [r7, #15]
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	685b      	ldr	r3, [r3, #4]
 8007160:	429a      	cmp	r2, r3
 8007162:	d3b5      	bcc.n	80070d0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	603b      	str	r3, [r7, #0]
 800716a:	687e      	ldr	r6, [r7, #4]
 800716c:	466d      	mov	r5, sp
 800716e:	f106 0410 	add.w	r4, r6, #16
 8007172:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007174:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007176:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007178:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800717a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800717e:	e885 0003 	stmia.w	r5, {r0, r1}
 8007182:	1d33      	adds	r3, r6, #4
 8007184:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007186:	6838      	ldr	r0, [r7, #0]
 8007188:	f004 fc88 	bl	800ba9c <USB_DevInit>
 800718c:	4603      	mov	r3, r0
 800718e:	2b00      	cmp	r3, #0
 8007190:	d005      	beq.n	800719e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2202      	movs	r2, #2
 8007196:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800719a:	2301      	movs	r3, #1
 800719c:	e014      	b.n	80071c8 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2200      	movs	r2, #0
 80071a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2201      	movs	r2, #1
 80071aa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071b2:	2b01      	cmp	r3, #1
 80071b4:	d102      	bne.n	80071bc <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f001 f882 	bl	80082c0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	4618      	mov	r0, r3
 80071c2:	f005 fd10 	bl	800cbe6 <USB_DevDisconnect>

  return HAL_OK;
 80071c6:	2300      	movs	r3, #0
}
 80071c8:	4618      	mov	r0, r3
 80071ca:	3714      	adds	r7, #20
 80071cc:	46bd      	mov	sp, r7
 80071ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

080071d0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b084      	sub	sp, #16
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80071e4:	2b01      	cmp	r3, #1
 80071e6:	d101      	bne.n	80071ec <HAL_PCD_Start+0x1c>
 80071e8:	2302      	movs	r3, #2
 80071ea:	e01c      	b.n	8007226 <HAL_PCD_Start+0x56>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2201      	movs	r2, #1
 80071f0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071f8:	2b01      	cmp	r3, #1
 80071fa:	d105      	bne.n	8007208 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007200:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	4618      	mov	r0, r3
 800720e:	f004 fbd7 	bl	800b9c0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	4618      	mov	r0, r3
 8007218:	f005 fcc4 	bl	800cba4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2200      	movs	r2, #0
 8007220:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8007224:	2300      	movs	r3, #0
}
 8007226:	4618      	mov	r0, r3
 8007228:	3710      	adds	r7, #16
 800722a:	46bd      	mov	sp, r7
 800722c:	bd80      	pop	{r7, pc}

0800722e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800722e:	b590      	push	{r4, r7, lr}
 8007230:	b08d      	sub	sp, #52	; 0x34
 8007232:	af00      	add	r7, sp, #0
 8007234:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800723c:	6a3b      	ldr	r3, [r7, #32]
 800723e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	4618      	mov	r0, r3
 8007246:	f005 fd82 	bl	800cd4e <USB_GetMode>
 800724a:	4603      	mov	r3, r0
 800724c:	2b00      	cmp	r3, #0
 800724e:	f040 847e 	bne.w	8007b4e <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	4618      	mov	r0, r3
 8007258:	f005 fce6 	bl	800cc28 <USB_ReadInterrupts>
 800725c:	4603      	mov	r3, r0
 800725e:	2b00      	cmp	r3, #0
 8007260:	f000 8474 	beq.w	8007b4c <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8007264:	69fb      	ldr	r3, [r7, #28]
 8007266:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800726a:	689b      	ldr	r3, [r3, #8]
 800726c:	0a1b      	lsrs	r3, r3, #8
 800726e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4618      	mov	r0, r3
 800727e:	f005 fcd3 	bl	800cc28 <USB_ReadInterrupts>
 8007282:	4603      	mov	r3, r0
 8007284:	f003 0302 	and.w	r3, r3, #2
 8007288:	2b02      	cmp	r3, #2
 800728a:	d107      	bne.n	800729c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	695a      	ldr	r2, [r3, #20]
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f002 0202 	and.w	r2, r2, #2
 800729a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	4618      	mov	r0, r3
 80072a2:	f005 fcc1 	bl	800cc28 <USB_ReadInterrupts>
 80072a6:	4603      	mov	r3, r0
 80072a8:	f003 0310 	and.w	r3, r3, #16
 80072ac:	2b10      	cmp	r3, #16
 80072ae:	d161      	bne.n	8007374 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	699a      	ldr	r2, [r3, #24]
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f022 0210 	bic.w	r2, r2, #16
 80072be:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80072c0:	6a3b      	ldr	r3, [r7, #32]
 80072c2:	6a1b      	ldr	r3, [r3, #32]
 80072c4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80072c6:	69bb      	ldr	r3, [r7, #24]
 80072c8:	f003 020f 	and.w	r2, r3, #15
 80072cc:	4613      	mov	r3, r2
 80072ce:	00db      	lsls	r3, r3, #3
 80072d0:	4413      	add	r3, r2
 80072d2:	009b      	lsls	r3, r3, #2
 80072d4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80072d8:	687a      	ldr	r2, [r7, #4]
 80072da:	4413      	add	r3, r2
 80072dc:	3304      	adds	r3, #4
 80072de:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80072e0:	69bb      	ldr	r3, [r7, #24]
 80072e2:	0c5b      	lsrs	r3, r3, #17
 80072e4:	f003 030f 	and.w	r3, r3, #15
 80072e8:	2b02      	cmp	r3, #2
 80072ea:	d124      	bne.n	8007336 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80072ec:	69ba      	ldr	r2, [r7, #24]
 80072ee:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80072f2:	4013      	ands	r3, r2
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d035      	beq.n	8007364 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80072f8:	697b      	ldr	r3, [r7, #20]
 80072fa:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80072fc:	69bb      	ldr	r3, [r7, #24]
 80072fe:	091b      	lsrs	r3, r3, #4
 8007300:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007302:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007306:	b29b      	uxth	r3, r3
 8007308:	461a      	mov	r2, r3
 800730a:	6a38      	ldr	r0, [r7, #32]
 800730c:	f005 faf8 	bl	800c900 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007310:	697b      	ldr	r3, [r7, #20]
 8007312:	691a      	ldr	r2, [r3, #16]
 8007314:	69bb      	ldr	r3, [r7, #24]
 8007316:	091b      	lsrs	r3, r3, #4
 8007318:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800731c:	441a      	add	r2, r3
 800731e:	697b      	ldr	r3, [r7, #20]
 8007320:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007322:	697b      	ldr	r3, [r7, #20]
 8007324:	6a1a      	ldr	r2, [r3, #32]
 8007326:	69bb      	ldr	r3, [r7, #24]
 8007328:	091b      	lsrs	r3, r3, #4
 800732a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800732e:	441a      	add	r2, r3
 8007330:	697b      	ldr	r3, [r7, #20]
 8007332:	621a      	str	r2, [r3, #32]
 8007334:	e016      	b.n	8007364 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8007336:	69bb      	ldr	r3, [r7, #24]
 8007338:	0c5b      	lsrs	r3, r3, #17
 800733a:	f003 030f 	and.w	r3, r3, #15
 800733e:	2b06      	cmp	r3, #6
 8007340:	d110      	bne.n	8007364 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007348:	2208      	movs	r2, #8
 800734a:	4619      	mov	r1, r3
 800734c:	6a38      	ldr	r0, [r7, #32]
 800734e:	f005 fad7 	bl	800c900 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007352:	697b      	ldr	r3, [r7, #20]
 8007354:	6a1a      	ldr	r2, [r3, #32]
 8007356:	69bb      	ldr	r3, [r7, #24]
 8007358:	091b      	lsrs	r3, r3, #4
 800735a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800735e:	441a      	add	r2, r3
 8007360:	697b      	ldr	r3, [r7, #20]
 8007362:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	699a      	ldr	r2, [r3, #24]
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f042 0210 	orr.w	r2, r2, #16
 8007372:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4618      	mov	r0, r3
 800737a:	f005 fc55 	bl	800cc28 <USB_ReadInterrupts>
 800737e:	4603      	mov	r3, r0
 8007380:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007384:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007388:	f040 80a7 	bne.w	80074da <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800738c:	2300      	movs	r3, #0
 800738e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	4618      	mov	r0, r3
 8007396:	f005 fc5a 	bl	800cc4e <USB_ReadDevAllOutEpInterrupt>
 800739a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800739c:	e099      	b.n	80074d2 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800739e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073a0:	f003 0301 	and.w	r3, r3, #1
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	f000 808e 	beq.w	80074c6 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073b0:	b2d2      	uxtb	r2, r2
 80073b2:	4611      	mov	r1, r2
 80073b4:	4618      	mov	r0, r3
 80073b6:	f005 fc7e 	bl	800ccb6 <USB_ReadDevOutEPInterrupt>
 80073ba:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80073bc:	693b      	ldr	r3, [r7, #16]
 80073be:	f003 0301 	and.w	r3, r3, #1
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d00c      	beq.n	80073e0 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80073c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073c8:	015a      	lsls	r2, r3, #5
 80073ca:	69fb      	ldr	r3, [r7, #28]
 80073cc:	4413      	add	r3, r2
 80073ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073d2:	461a      	mov	r2, r3
 80073d4:	2301      	movs	r3, #1
 80073d6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80073d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f000 fe96 	bl	800810c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80073e0:	693b      	ldr	r3, [r7, #16]
 80073e2:	f003 0308 	and.w	r3, r3, #8
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d00c      	beq.n	8007404 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80073ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ec:	015a      	lsls	r2, r3, #5
 80073ee:	69fb      	ldr	r3, [r7, #28]
 80073f0:	4413      	add	r3, r2
 80073f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073f6:	461a      	mov	r2, r3
 80073f8:	2308      	movs	r3, #8
 80073fa:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80073fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f000 fed2 	bl	80081a8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8007404:	693b      	ldr	r3, [r7, #16]
 8007406:	f003 0310 	and.w	r3, r3, #16
 800740a:	2b00      	cmp	r3, #0
 800740c:	d008      	beq.n	8007420 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800740e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007410:	015a      	lsls	r2, r3, #5
 8007412:	69fb      	ldr	r3, [r7, #28]
 8007414:	4413      	add	r3, r2
 8007416:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800741a:	461a      	mov	r2, r3
 800741c:	2310      	movs	r3, #16
 800741e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8007420:	693b      	ldr	r3, [r7, #16]
 8007422:	f003 0302 	and.w	r3, r3, #2
 8007426:	2b00      	cmp	r3, #0
 8007428:	d030      	beq.n	800748c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800742a:	6a3b      	ldr	r3, [r7, #32]
 800742c:	695b      	ldr	r3, [r3, #20]
 800742e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007432:	2b80      	cmp	r3, #128	; 0x80
 8007434:	d109      	bne.n	800744a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8007436:	69fb      	ldr	r3, [r7, #28]
 8007438:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800743c:	685b      	ldr	r3, [r3, #4]
 800743e:	69fa      	ldr	r2, [r7, #28]
 8007440:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007444:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007448:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800744a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800744c:	4613      	mov	r3, r2
 800744e:	00db      	lsls	r3, r3, #3
 8007450:	4413      	add	r3, r2
 8007452:	009b      	lsls	r3, r3, #2
 8007454:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007458:	687a      	ldr	r2, [r7, #4]
 800745a:	4413      	add	r3, r2
 800745c:	3304      	adds	r3, #4
 800745e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8007460:	697b      	ldr	r3, [r7, #20]
 8007462:	78db      	ldrb	r3, [r3, #3]
 8007464:	2b01      	cmp	r3, #1
 8007466:	d108      	bne.n	800747a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8007468:	697b      	ldr	r3, [r7, #20]
 800746a:	2200      	movs	r2, #0
 800746c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800746e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007470:	b2db      	uxtb	r3, r3
 8007472:	4619      	mov	r1, r3
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	f00a fa6f 	bl	8011958 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800747a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800747c:	015a      	lsls	r2, r3, #5
 800747e:	69fb      	ldr	r3, [r7, #28]
 8007480:	4413      	add	r3, r2
 8007482:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007486:	461a      	mov	r2, r3
 8007488:	2302      	movs	r3, #2
 800748a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800748c:	693b      	ldr	r3, [r7, #16]
 800748e:	f003 0320 	and.w	r3, r3, #32
 8007492:	2b00      	cmp	r3, #0
 8007494:	d008      	beq.n	80074a8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007498:	015a      	lsls	r2, r3, #5
 800749a:	69fb      	ldr	r3, [r7, #28]
 800749c:	4413      	add	r3, r2
 800749e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074a2:	461a      	mov	r2, r3
 80074a4:	2320      	movs	r3, #32
 80074a6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80074a8:	693b      	ldr	r3, [r7, #16]
 80074aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d009      	beq.n	80074c6 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80074b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b4:	015a      	lsls	r2, r3, #5
 80074b6:	69fb      	ldr	r3, [r7, #28]
 80074b8:	4413      	add	r3, r2
 80074ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074be:	461a      	mov	r2, r3
 80074c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80074c4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80074c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074c8:	3301      	adds	r3, #1
 80074ca:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80074cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ce:	085b      	lsrs	r3, r3, #1
 80074d0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80074d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	f47f af62 	bne.w	800739e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	4618      	mov	r0, r3
 80074e0:	f005 fba2 	bl	800cc28 <USB_ReadInterrupts>
 80074e4:	4603      	mov	r3, r0
 80074e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80074ea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80074ee:	f040 80a4 	bne.w	800763a <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	4618      	mov	r0, r3
 80074f8:	f005 fbc3 	bl	800cc82 <USB_ReadDevAllInEpInterrupt>
 80074fc:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80074fe:	2300      	movs	r3, #0
 8007500:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8007502:	e096      	b.n	8007632 <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8007504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007506:	f003 0301 	and.w	r3, r3, #1
 800750a:	2b00      	cmp	r3, #0
 800750c:	f000 808b 	beq.w	8007626 <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007516:	b2d2      	uxtb	r2, r2
 8007518:	4611      	mov	r1, r2
 800751a:	4618      	mov	r0, r3
 800751c:	f005 fbe9 	bl	800ccf2 <USB_ReadDevInEPInterrupt>
 8007520:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8007522:	693b      	ldr	r3, [r7, #16]
 8007524:	f003 0301 	and.w	r3, r3, #1
 8007528:	2b00      	cmp	r3, #0
 800752a:	d020      	beq.n	800756e <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800752c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800752e:	f003 030f 	and.w	r3, r3, #15
 8007532:	2201      	movs	r2, #1
 8007534:	fa02 f303 	lsl.w	r3, r2, r3
 8007538:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800753a:	69fb      	ldr	r3, [r7, #28]
 800753c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007540:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	43db      	mvns	r3, r3
 8007546:	69f9      	ldr	r1, [r7, #28]
 8007548:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800754c:	4013      	ands	r3, r2
 800754e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8007550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007552:	015a      	lsls	r2, r3, #5
 8007554:	69fb      	ldr	r3, [r7, #28]
 8007556:	4413      	add	r3, r2
 8007558:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800755c:	461a      	mov	r2, r3
 800755e:	2301      	movs	r3, #1
 8007560:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8007562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007564:	b2db      	uxtb	r3, r3
 8007566:	4619      	mov	r1, r3
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	f00a f960 	bl	801182e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800756e:	693b      	ldr	r3, [r7, #16]
 8007570:	f003 0308 	and.w	r3, r3, #8
 8007574:	2b00      	cmp	r3, #0
 8007576:	d008      	beq.n	800758a <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8007578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800757a:	015a      	lsls	r2, r3, #5
 800757c:	69fb      	ldr	r3, [r7, #28]
 800757e:	4413      	add	r3, r2
 8007580:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007584:	461a      	mov	r2, r3
 8007586:	2308      	movs	r3, #8
 8007588:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800758a:	693b      	ldr	r3, [r7, #16]
 800758c:	f003 0310 	and.w	r3, r3, #16
 8007590:	2b00      	cmp	r3, #0
 8007592:	d008      	beq.n	80075a6 <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8007594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007596:	015a      	lsls	r2, r3, #5
 8007598:	69fb      	ldr	r3, [r7, #28]
 800759a:	4413      	add	r3, r2
 800759c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075a0:	461a      	mov	r2, r3
 80075a2:	2310      	movs	r3, #16
 80075a4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80075a6:	693b      	ldr	r3, [r7, #16]
 80075a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d008      	beq.n	80075c2 <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80075b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075b2:	015a      	lsls	r2, r3, #5
 80075b4:	69fb      	ldr	r3, [r7, #28]
 80075b6:	4413      	add	r3, r2
 80075b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075bc:	461a      	mov	r2, r3
 80075be:	2340      	movs	r3, #64	; 0x40
 80075c0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80075c2:	693b      	ldr	r3, [r7, #16]
 80075c4:	f003 0302 	and.w	r3, r3, #2
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d023      	beq.n	8007614 <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80075cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80075ce:	6a38      	ldr	r0, [r7, #32]
 80075d0:	f004 fbb0 	bl	800bd34 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80075d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075d6:	4613      	mov	r3, r2
 80075d8:	00db      	lsls	r3, r3, #3
 80075da:	4413      	add	r3, r2
 80075dc:	009b      	lsls	r3, r3, #2
 80075de:	3338      	adds	r3, #56	; 0x38
 80075e0:	687a      	ldr	r2, [r7, #4]
 80075e2:	4413      	add	r3, r2
 80075e4:	3304      	adds	r3, #4
 80075e6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80075e8:	697b      	ldr	r3, [r7, #20]
 80075ea:	78db      	ldrb	r3, [r3, #3]
 80075ec:	2b01      	cmp	r3, #1
 80075ee:	d108      	bne.n	8007602 <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 80075f0:	697b      	ldr	r3, [r7, #20]
 80075f2:	2200      	movs	r2, #0
 80075f4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80075f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075f8:	b2db      	uxtb	r3, r3
 80075fa:	4619      	mov	r1, r3
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f00a f9bd 	bl	801197c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8007602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007604:	015a      	lsls	r2, r3, #5
 8007606:	69fb      	ldr	r3, [r7, #28]
 8007608:	4413      	add	r3, r2
 800760a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800760e:	461a      	mov	r2, r3
 8007610:	2302      	movs	r3, #2
 8007612:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8007614:	693b      	ldr	r3, [r7, #16]
 8007616:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800761a:	2b00      	cmp	r3, #0
 800761c:	d003      	beq.n	8007626 <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800761e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f000 fcea 	bl	8007ffa <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8007626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007628:	3301      	adds	r3, #1
 800762a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800762c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800762e:	085b      	lsrs	r3, r3, #1
 8007630:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8007632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007634:	2b00      	cmp	r3, #0
 8007636:	f47f af65 	bne.w	8007504 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	4618      	mov	r0, r3
 8007640:	f005 faf2 	bl	800cc28 <USB_ReadInterrupts>
 8007644:	4603      	mov	r3, r0
 8007646:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800764a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800764e:	d122      	bne.n	8007696 <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007650:	69fb      	ldr	r3, [r7, #28]
 8007652:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007656:	685b      	ldr	r3, [r3, #4]
 8007658:	69fa      	ldr	r2, [r7, #28]
 800765a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800765e:	f023 0301 	bic.w	r3, r3, #1
 8007662:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800766a:	2b01      	cmp	r3, #1
 800766c:	d108      	bne.n	8007680 <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2200      	movs	r2, #0
 8007672:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8007676:	2100      	movs	r1, #0
 8007678:	6878      	ldr	r0, [r7, #4]
 800767a:	f00a fbef 	bl	8011e5c <HAL_PCDEx_LPM_Callback>
 800767e:	e002      	b.n	8007686 <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	f00a f941 	bl	8011908 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	695a      	ldr	r2, [r3, #20]
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8007694:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	4618      	mov	r0, r3
 800769c:	f005 fac4 	bl	800cc28 <USB_ReadInterrupts>
 80076a0:	4603      	mov	r3, r0
 80076a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80076a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80076aa:	d112      	bne.n	80076d2 <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80076ac:	69fb      	ldr	r3, [r7, #28]
 80076ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076b2:	689b      	ldr	r3, [r3, #8]
 80076b4:	f003 0301 	and.w	r3, r3, #1
 80076b8:	2b01      	cmp	r3, #1
 80076ba:	d102      	bne.n	80076c2 <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	f00a f8fd 	bl	80118bc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	695a      	ldr	r2, [r3, #20]
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80076d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	4618      	mov	r0, r3
 80076d8:	f005 faa6 	bl	800cc28 <USB_ReadInterrupts>
 80076dc:	4603      	mov	r3, r0
 80076de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80076e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80076e6:	d121      	bne.n	800772c <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	695a      	ldr	r2, [r3, #20]
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80076f6:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d111      	bne.n	8007726 <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2201      	movs	r2, #1
 8007706:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007710:	089b      	lsrs	r3, r3, #2
 8007712:	f003 020f 	and.w	r2, r3, #15
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800771c:	2101      	movs	r1, #1
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f00a fb9c 	bl	8011e5c <HAL_PCDEx_LPM_Callback>
 8007724:	e002      	b.n	800772c <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	f00a f8c8 	bl	80118bc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	4618      	mov	r0, r3
 8007732:	f005 fa79 	bl	800cc28 <USB_ReadInterrupts>
 8007736:	4603      	mov	r3, r0
 8007738:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800773c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007740:	f040 80b5 	bne.w	80078ae <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007744:	69fb      	ldr	r3, [r7, #28]
 8007746:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800774a:	685b      	ldr	r3, [r3, #4]
 800774c:	69fa      	ldr	r2, [r7, #28]
 800774e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007752:	f023 0301 	bic.w	r3, r3, #1
 8007756:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	2110      	movs	r1, #16
 800775e:	4618      	mov	r0, r3
 8007760:	f004 fae8 	bl	800bd34 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007764:	2300      	movs	r3, #0
 8007766:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007768:	e046      	b.n	80077f8 <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800776a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800776c:	015a      	lsls	r2, r3, #5
 800776e:	69fb      	ldr	r3, [r7, #28]
 8007770:	4413      	add	r3, r2
 8007772:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007776:	461a      	mov	r2, r3
 8007778:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800777c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800777e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007780:	015a      	lsls	r2, r3, #5
 8007782:	69fb      	ldr	r3, [r7, #28]
 8007784:	4413      	add	r3, r2
 8007786:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800778e:	0151      	lsls	r1, r2, #5
 8007790:	69fa      	ldr	r2, [r7, #28]
 8007792:	440a      	add	r2, r1
 8007794:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007798:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800779c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800779e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077a0:	015a      	lsls	r2, r3, #5
 80077a2:	69fb      	ldr	r3, [r7, #28]
 80077a4:	4413      	add	r3, r2
 80077a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077aa:	461a      	mov	r2, r3
 80077ac:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80077b0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80077b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077b4:	015a      	lsls	r2, r3, #5
 80077b6:	69fb      	ldr	r3, [r7, #28]
 80077b8:	4413      	add	r3, r2
 80077ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80077c2:	0151      	lsls	r1, r2, #5
 80077c4:	69fa      	ldr	r2, [r7, #28]
 80077c6:	440a      	add	r2, r1
 80077c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80077cc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80077d0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80077d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077d4:	015a      	lsls	r2, r3, #5
 80077d6:	69fb      	ldr	r3, [r7, #28]
 80077d8:	4413      	add	r3, r2
 80077da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80077e2:	0151      	lsls	r1, r2, #5
 80077e4:	69fa      	ldr	r2, [r7, #28]
 80077e6:	440a      	add	r2, r1
 80077e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80077ec:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80077f0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80077f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077f4:	3301      	adds	r3, #1
 80077f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	685b      	ldr	r3, [r3, #4]
 80077fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80077fe:	429a      	cmp	r2, r3
 8007800:	d3b3      	bcc.n	800776a <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8007802:	69fb      	ldr	r3, [r7, #28]
 8007804:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007808:	69db      	ldr	r3, [r3, #28]
 800780a:	69fa      	ldr	r2, [r7, #28]
 800780c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007810:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8007814:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800781a:	2b00      	cmp	r3, #0
 800781c:	d016      	beq.n	800784c <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800781e:	69fb      	ldr	r3, [r7, #28]
 8007820:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007824:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007828:	69fa      	ldr	r2, [r7, #28]
 800782a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800782e:	f043 030b 	orr.w	r3, r3, #11
 8007832:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8007836:	69fb      	ldr	r3, [r7, #28]
 8007838:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800783c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800783e:	69fa      	ldr	r2, [r7, #28]
 8007840:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007844:	f043 030b 	orr.w	r3, r3, #11
 8007848:	6453      	str	r3, [r2, #68]	; 0x44
 800784a:	e015      	b.n	8007878 <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800784c:	69fb      	ldr	r3, [r7, #28]
 800784e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007852:	695b      	ldr	r3, [r3, #20]
 8007854:	69fa      	ldr	r2, [r7, #28]
 8007856:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800785a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800785e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8007862:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8007864:	69fb      	ldr	r3, [r7, #28]
 8007866:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800786a:	691b      	ldr	r3, [r3, #16]
 800786c:	69fa      	ldr	r2, [r7, #28]
 800786e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007872:	f043 030b 	orr.w	r3, r3, #11
 8007876:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8007878:	69fb      	ldr	r3, [r7, #28]
 800787a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	69fa      	ldr	r2, [r7, #28]
 8007882:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007886:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800788a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681a      	ldr	r2, [r3, #0]
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007896:	4619      	mov	r1, r3
 8007898:	4610      	mov	r0, r2
 800789a:	f005 fa89 	bl	800cdb0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	695a      	ldr	r2, [r3, #20]
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80078ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	4618      	mov	r0, r3
 80078b4:	f005 f9b8 	bl	800cc28 <USB_ReadInterrupts>
 80078b8:	4603      	mov	r3, r0
 80078ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80078be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80078c2:	d124      	bne.n	800790e <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	4618      	mov	r0, r3
 80078ca:	f005 fa4e 	bl	800cd6a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	4618      	mov	r0, r3
 80078d4:	f004 faab 	bl	800be2e <USB_GetDevSpeed>
 80078d8:	4603      	mov	r3, r0
 80078da:	461a      	mov	r2, r3
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681c      	ldr	r4, [r3, #0]
 80078e4:	f001 fc92 	bl	800920c <HAL_RCC_GetHCLKFreq>
 80078e8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80078ee:	b2db      	uxtb	r3, r3
 80078f0:	461a      	mov	r2, r3
 80078f2:	4620      	mov	r0, r4
 80078f4:	f003 ffc8 	bl	800b888 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f009 ffc0 	bl	801187e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	695a      	ldr	r2, [r3, #20]
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800790c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	4618      	mov	r0, r3
 8007914:	f005 f988 	bl	800cc28 <USB_ReadInterrupts>
 8007918:	4603      	mov	r3, r0
 800791a:	f003 0308 	and.w	r3, r3, #8
 800791e:	2b08      	cmp	r3, #8
 8007920:	d10a      	bne.n	8007938 <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f009 ff9d 	bl	8011862 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	695a      	ldr	r2, [r3, #20]
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f002 0208 	and.w	r2, r2, #8
 8007936:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	4618      	mov	r0, r3
 800793e:	f005 f973 	bl	800cc28 <USB_ReadInterrupts>
 8007942:	4603      	mov	r3, r0
 8007944:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007948:	2b80      	cmp	r3, #128	; 0x80
 800794a:	d122      	bne.n	8007992 <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800794c:	6a3b      	ldr	r3, [r7, #32]
 800794e:	699b      	ldr	r3, [r3, #24]
 8007950:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007954:	6a3b      	ldr	r3, [r7, #32]
 8007956:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007958:	2301      	movs	r3, #1
 800795a:	627b      	str	r3, [r7, #36]	; 0x24
 800795c:	e014      	b.n	8007988 <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800795e:	6879      	ldr	r1, [r7, #4]
 8007960:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007962:	4613      	mov	r3, r2
 8007964:	00db      	lsls	r3, r3, #3
 8007966:	4413      	add	r3, r2
 8007968:	009b      	lsls	r3, r3, #2
 800796a:	440b      	add	r3, r1
 800796c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8007970:	781b      	ldrb	r3, [r3, #0]
 8007972:	2b01      	cmp	r3, #1
 8007974:	d105      	bne.n	8007982 <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8007976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007978:	b2db      	uxtb	r3, r3
 800797a:	4619      	mov	r1, r3
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	f000 fb0b 	bl	8007f98 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007984:	3301      	adds	r3, #1
 8007986:	627b      	str	r3, [r7, #36]	; 0x24
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	685b      	ldr	r3, [r3, #4]
 800798c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800798e:	429a      	cmp	r2, r3
 8007990:	d3e5      	bcc.n	800795e <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	4618      	mov	r0, r3
 8007998:	f005 f946 	bl	800cc28 <USB_ReadInterrupts>
 800799c:	4603      	mov	r3, r0
 800799e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80079a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80079a6:	d13b      	bne.n	8007a20 <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80079a8:	2301      	movs	r3, #1
 80079aa:	627b      	str	r3, [r7, #36]	; 0x24
 80079ac:	e02b      	b.n	8007a06 <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80079ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079b0:	015a      	lsls	r2, r3, #5
 80079b2:	69fb      	ldr	r3, [r7, #28]
 80079b4:	4413      	add	r3, r2
 80079b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80079be:	6879      	ldr	r1, [r7, #4]
 80079c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079c2:	4613      	mov	r3, r2
 80079c4:	00db      	lsls	r3, r3, #3
 80079c6:	4413      	add	r3, r2
 80079c8:	009b      	lsls	r3, r3, #2
 80079ca:	440b      	add	r3, r1
 80079cc:	3340      	adds	r3, #64	; 0x40
 80079ce:	781b      	ldrb	r3, [r3, #0]
 80079d0:	2b01      	cmp	r3, #1
 80079d2:	d115      	bne.n	8007a00 <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80079d4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	da12      	bge.n	8007a00 <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80079da:	6879      	ldr	r1, [r7, #4]
 80079dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079de:	4613      	mov	r3, r2
 80079e0:	00db      	lsls	r3, r3, #3
 80079e2:	4413      	add	r3, r2
 80079e4:	009b      	lsls	r3, r3, #2
 80079e6:	440b      	add	r3, r1
 80079e8:	333f      	adds	r3, #63	; 0x3f
 80079ea:	2201      	movs	r2, #1
 80079ec:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80079ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079f0:	b2db      	uxtb	r3, r3
 80079f2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80079f6:	b2db      	uxtb	r3, r3
 80079f8:	4619      	mov	r1, r3
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	f000 facc 	bl	8007f98 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a02:	3301      	adds	r3, #1
 8007a04:	627b      	str	r3, [r7, #36]	; 0x24
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	685b      	ldr	r3, [r3, #4]
 8007a0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a0c:	429a      	cmp	r2, r3
 8007a0e:	d3ce      	bcc.n	80079ae <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	695a      	ldr	r2, [r3, #20]
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8007a1e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	4618      	mov	r0, r3
 8007a26:	f005 f8ff 	bl	800cc28 <USB_ReadInterrupts>
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007a30:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007a34:	d155      	bne.n	8007ae2 <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007a36:	2301      	movs	r3, #1
 8007a38:	627b      	str	r3, [r7, #36]	; 0x24
 8007a3a:	e045      	b.n	8007ac8 <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8007a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a3e:	015a      	lsls	r2, r3, #5
 8007a40:	69fb      	ldr	r3, [r7, #28]
 8007a42:	4413      	add	r3, r2
 8007a44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8007a4c:	6879      	ldr	r1, [r7, #4]
 8007a4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a50:	4613      	mov	r3, r2
 8007a52:	00db      	lsls	r3, r3, #3
 8007a54:	4413      	add	r3, r2
 8007a56:	009b      	lsls	r3, r3, #2
 8007a58:	440b      	add	r3, r1
 8007a5a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8007a5e:	781b      	ldrb	r3, [r3, #0]
 8007a60:	2b01      	cmp	r3, #1
 8007a62:	d12e      	bne.n	8007ac2 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8007a64:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	da2b      	bge.n	8007ac2 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8007a6a:	69bb      	ldr	r3, [r7, #24]
 8007a6c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8007a76:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8007a7a:	429a      	cmp	r2, r3
 8007a7c:	d121      	bne.n	8007ac2 <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8007a7e:	6879      	ldr	r1, [r7, #4]
 8007a80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a82:	4613      	mov	r3, r2
 8007a84:	00db      	lsls	r3, r3, #3
 8007a86:	4413      	add	r3, r2
 8007a88:	009b      	lsls	r3, r3, #2
 8007a8a:	440b      	add	r3, r1
 8007a8c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8007a90:	2201      	movs	r2, #1
 8007a92:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8007a94:	6a3b      	ldr	r3, [r7, #32]
 8007a96:	699b      	ldr	r3, [r3, #24]
 8007a98:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007a9c:	6a3b      	ldr	r3, [r7, #32]
 8007a9e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8007aa0:	6a3b      	ldr	r3, [r7, #32]
 8007aa2:	695b      	ldr	r3, [r3, #20]
 8007aa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d10a      	bne.n	8007ac2 <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8007aac:	69fb      	ldr	r3, [r7, #28]
 8007aae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ab2:	685b      	ldr	r3, [r3, #4]
 8007ab4:	69fa      	ldr	r2, [r7, #28]
 8007ab6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007aba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007abe:	6053      	str	r3, [r2, #4]
            break;
 8007ac0:	e007      	b.n	8007ad2 <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ac4:	3301      	adds	r3, #1
 8007ac6:	627b      	str	r3, [r7, #36]	; 0x24
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	685b      	ldr	r3, [r3, #4]
 8007acc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ace:	429a      	cmp	r2, r3
 8007ad0:	d3b4      	bcc.n	8007a3c <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	695a      	ldr	r2, [r3, #20]
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8007ae0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	f005 f89e 	bl	800cc28 <USB_ReadInterrupts>
 8007aec:	4603      	mov	r3, r0
 8007aee:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007af2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007af6:	d10a      	bne.n	8007b0e <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	f009 ff51 	bl	80119a0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	695a      	ldr	r2, [r3, #20]
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8007b0c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	4618      	mov	r0, r3
 8007b14:	f005 f888 	bl	800cc28 <USB_ReadInterrupts>
 8007b18:	4603      	mov	r3, r0
 8007b1a:	f003 0304 	and.w	r3, r3, #4
 8007b1e:	2b04      	cmp	r3, #4
 8007b20:	d115      	bne.n	8007b4e <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	685b      	ldr	r3, [r3, #4]
 8007b28:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8007b2a:	69bb      	ldr	r3, [r7, #24]
 8007b2c:	f003 0304 	and.w	r3, r3, #4
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d002      	beq.n	8007b3a <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8007b34:	6878      	ldr	r0, [r7, #4]
 8007b36:	f009 ff41 	bl	80119bc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	6859      	ldr	r1, [r3, #4]
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	69ba      	ldr	r2, [r7, #24]
 8007b46:	430a      	orrs	r2, r1
 8007b48:	605a      	str	r2, [r3, #4]
 8007b4a:	e000      	b.n	8007b4e <HAL_PCD_IRQHandler+0x920>
      return;
 8007b4c:	bf00      	nop
    }
  }
}
 8007b4e:	3734      	adds	r7, #52	; 0x34
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bd90      	pop	{r4, r7, pc}

08007b54 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b082      	sub	sp, #8
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
 8007b5c:	460b      	mov	r3, r1
 8007b5e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007b66:	2b01      	cmp	r3, #1
 8007b68:	d101      	bne.n	8007b6e <HAL_PCD_SetAddress+0x1a>
 8007b6a:	2302      	movs	r3, #2
 8007b6c:	e013      	b.n	8007b96 <HAL_PCD_SetAddress+0x42>
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2201      	movs	r2, #1
 8007b72:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	78fa      	ldrb	r2, [r7, #3]
 8007b7a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	78fa      	ldrb	r2, [r7, #3]
 8007b84:	4611      	mov	r1, r2
 8007b86:	4618      	mov	r0, r3
 8007b88:	f004 ffe6 	bl	800cb58 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2200      	movs	r2, #0
 8007b90:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8007b94:	2300      	movs	r3, #0
}
 8007b96:	4618      	mov	r0, r3
 8007b98:	3708      	adds	r7, #8
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	bd80      	pop	{r7, pc}

08007b9e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8007b9e:	b580      	push	{r7, lr}
 8007ba0:	b084      	sub	sp, #16
 8007ba2:	af00      	add	r7, sp, #0
 8007ba4:	6078      	str	r0, [r7, #4]
 8007ba6:	4608      	mov	r0, r1
 8007ba8:	4611      	mov	r1, r2
 8007baa:	461a      	mov	r2, r3
 8007bac:	4603      	mov	r3, r0
 8007bae:	70fb      	strb	r3, [r7, #3]
 8007bb0:	460b      	mov	r3, r1
 8007bb2:	803b      	strh	r3, [r7, #0]
 8007bb4:	4613      	mov	r3, r2
 8007bb6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8007bb8:	2300      	movs	r3, #0
 8007bba:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007bbc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	da0f      	bge.n	8007be4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007bc4:	78fb      	ldrb	r3, [r7, #3]
 8007bc6:	f003 020f 	and.w	r2, r3, #15
 8007bca:	4613      	mov	r3, r2
 8007bcc:	00db      	lsls	r3, r3, #3
 8007bce:	4413      	add	r3, r2
 8007bd0:	009b      	lsls	r3, r3, #2
 8007bd2:	3338      	adds	r3, #56	; 0x38
 8007bd4:	687a      	ldr	r2, [r7, #4]
 8007bd6:	4413      	add	r3, r2
 8007bd8:	3304      	adds	r3, #4
 8007bda:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	2201      	movs	r2, #1
 8007be0:	705a      	strb	r2, [r3, #1]
 8007be2:	e00f      	b.n	8007c04 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007be4:	78fb      	ldrb	r3, [r7, #3]
 8007be6:	f003 020f 	and.w	r2, r3, #15
 8007bea:	4613      	mov	r3, r2
 8007bec:	00db      	lsls	r3, r3, #3
 8007bee:	4413      	add	r3, r2
 8007bf0:	009b      	lsls	r3, r3, #2
 8007bf2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007bf6:	687a      	ldr	r2, [r7, #4]
 8007bf8:	4413      	add	r3, r2
 8007bfa:	3304      	adds	r3, #4
 8007bfc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	2200      	movs	r2, #0
 8007c02:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8007c04:	78fb      	ldrb	r3, [r7, #3]
 8007c06:	f003 030f 	and.w	r3, r3, #15
 8007c0a:	b2da      	uxtb	r2, r3
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8007c10:	883a      	ldrh	r2, [r7, #0]
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	78ba      	ldrb	r2, [r7, #2]
 8007c1a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	785b      	ldrb	r3, [r3, #1]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d004      	beq.n	8007c2e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	781b      	ldrb	r3, [r3, #0]
 8007c28:	b29a      	uxth	r2, r3
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8007c2e:	78bb      	ldrb	r3, [r7, #2]
 8007c30:	2b02      	cmp	r3, #2
 8007c32:	d102      	bne.n	8007c3a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	2200      	movs	r2, #0
 8007c38:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007c40:	2b01      	cmp	r3, #1
 8007c42:	d101      	bne.n	8007c48 <HAL_PCD_EP_Open+0xaa>
 8007c44:	2302      	movs	r3, #2
 8007c46:	e00e      	b.n	8007c66 <HAL_PCD_EP_Open+0xc8>
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2201      	movs	r2, #1
 8007c4c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	68f9      	ldr	r1, [r7, #12]
 8007c56:	4618      	mov	r0, r3
 8007c58:	f004 f908 	bl	800be6c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2200      	movs	r2, #0
 8007c60:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8007c64:	7afb      	ldrb	r3, [r7, #11]
}
 8007c66:	4618      	mov	r0, r3
 8007c68:	3710      	adds	r7, #16
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	bd80      	pop	{r7, pc}

08007c6e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007c6e:	b580      	push	{r7, lr}
 8007c70:	b084      	sub	sp, #16
 8007c72:	af00      	add	r7, sp, #0
 8007c74:	6078      	str	r0, [r7, #4]
 8007c76:	460b      	mov	r3, r1
 8007c78:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007c7a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	da0f      	bge.n	8007ca2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007c82:	78fb      	ldrb	r3, [r7, #3]
 8007c84:	f003 020f 	and.w	r2, r3, #15
 8007c88:	4613      	mov	r3, r2
 8007c8a:	00db      	lsls	r3, r3, #3
 8007c8c:	4413      	add	r3, r2
 8007c8e:	009b      	lsls	r3, r3, #2
 8007c90:	3338      	adds	r3, #56	; 0x38
 8007c92:	687a      	ldr	r2, [r7, #4]
 8007c94:	4413      	add	r3, r2
 8007c96:	3304      	adds	r3, #4
 8007c98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	2201      	movs	r2, #1
 8007c9e:	705a      	strb	r2, [r3, #1]
 8007ca0:	e00f      	b.n	8007cc2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007ca2:	78fb      	ldrb	r3, [r7, #3]
 8007ca4:	f003 020f 	and.w	r2, r3, #15
 8007ca8:	4613      	mov	r3, r2
 8007caa:	00db      	lsls	r3, r3, #3
 8007cac:	4413      	add	r3, r2
 8007cae:	009b      	lsls	r3, r3, #2
 8007cb0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007cb4:	687a      	ldr	r2, [r7, #4]
 8007cb6:	4413      	add	r3, r2
 8007cb8:	3304      	adds	r3, #4
 8007cba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8007cc2:	78fb      	ldrb	r3, [r7, #3]
 8007cc4:	f003 030f 	and.w	r3, r3, #15
 8007cc8:	b2da      	uxtb	r2, r3
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007cd4:	2b01      	cmp	r3, #1
 8007cd6:	d101      	bne.n	8007cdc <HAL_PCD_EP_Close+0x6e>
 8007cd8:	2302      	movs	r3, #2
 8007cda:	e00e      	b.n	8007cfa <HAL_PCD_EP_Close+0x8c>
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2201      	movs	r2, #1
 8007ce0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	68f9      	ldr	r1, [r7, #12]
 8007cea:	4618      	mov	r0, r3
 8007cec:	f004 f946 	bl	800bf7c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8007cf8:	2300      	movs	r3, #0
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	3710      	adds	r7, #16
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bd80      	pop	{r7, pc}

08007d02 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007d02:	b580      	push	{r7, lr}
 8007d04:	b086      	sub	sp, #24
 8007d06:	af00      	add	r7, sp, #0
 8007d08:	60f8      	str	r0, [r7, #12]
 8007d0a:	607a      	str	r2, [r7, #4]
 8007d0c:	603b      	str	r3, [r7, #0]
 8007d0e:	460b      	mov	r3, r1
 8007d10:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007d12:	7afb      	ldrb	r3, [r7, #11]
 8007d14:	f003 020f 	and.w	r2, r3, #15
 8007d18:	4613      	mov	r3, r2
 8007d1a:	00db      	lsls	r3, r3, #3
 8007d1c:	4413      	add	r3, r2
 8007d1e:	009b      	lsls	r3, r3, #2
 8007d20:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007d24:	68fa      	ldr	r2, [r7, #12]
 8007d26:	4413      	add	r3, r2
 8007d28:	3304      	adds	r3, #4
 8007d2a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007d2c:	697b      	ldr	r3, [r7, #20]
 8007d2e:	687a      	ldr	r2, [r7, #4]
 8007d30:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8007d32:	697b      	ldr	r3, [r7, #20]
 8007d34:	683a      	ldr	r2, [r7, #0]
 8007d36:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8007d38:	697b      	ldr	r3, [r7, #20]
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8007d3e:	697b      	ldr	r3, [r7, #20]
 8007d40:	2200      	movs	r2, #0
 8007d42:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007d44:	7afb      	ldrb	r3, [r7, #11]
 8007d46:	f003 030f 	and.w	r3, r3, #15
 8007d4a:	b2da      	uxtb	r2, r3
 8007d4c:	697b      	ldr	r3, [r7, #20]
 8007d4e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007d50:	7afb      	ldrb	r3, [r7, #11]
 8007d52:	f003 030f 	and.w	r3, r3, #15
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d106      	bne.n	8007d68 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	6979      	ldr	r1, [r7, #20]
 8007d60:	4618      	mov	r0, r3
 8007d62:	f004 fbc7 	bl	800c4f4 <USB_EP0StartXfer>
 8007d66:	e005      	b.n	8007d74 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	6979      	ldr	r1, [r7, #20]
 8007d6e:	4618      	mov	r0, r3
 8007d70:	f004 f9e0 	bl	800c134 <USB_EPStartXfer>
  }

  return HAL_OK;
 8007d74:	2300      	movs	r3, #0
}
 8007d76:	4618      	mov	r0, r3
 8007d78:	3718      	adds	r7, #24
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bd80      	pop	{r7, pc}

08007d7e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007d7e:	b480      	push	{r7}
 8007d80:	b083      	sub	sp, #12
 8007d82:	af00      	add	r7, sp, #0
 8007d84:	6078      	str	r0, [r7, #4]
 8007d86:	460b      	mov	r3, r1
 8007d88:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8007d8a:	78fb      	ldrb	r3, [r7, #3]
 8007d8c:	f003 020f 	and.w	r2, r3, #15
 8007d90:	6879      	ldr	r1, [r7, #4]
 8007d92:	4613      	mov	r3, r2
 8007d94:	00db      	lsls	r3, r3, #3
 8007d96:	4413      	add	r3, r2
 8007d98:	009b      	lsls	r3, r3, #2
 8007d9a:	440b      	add	r3, r1
 8007d9c:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8007da0:	681b      	ldr	r3, [r3, #0]
}
 8007da2:	4618      	mov	r0, r3
 8007da4:	370c      	adds	r7, #12
 8007da6:	46bd      	mov	sp, r7
 8007da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dac:	4770      	bx	lr

08007dae <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007dae:	b580      	push	{r7, lr}
 8007db0:	b086      	sub	sp, #24
 8007db2:	af00      	add	r7, sp, #0
 8007db4:	60f8      	str	r0, [r7, #12]
 8007db6:	607a      	str	r2, [r7, #4]
 8007db8:	603b      	str	r3, [r7, #0]
 8007dba:	460b      	mov	r3, r1
 8007dbc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007dbe:	7afb      	ldrb	r3, [r7, #11]
 8007dc0:	f003 020f 	and.w	r2, r3, #15
 8007dc4:	4613      	mov	r3, r2
 8007dc6:	00db      	lsls	r3, r3, #3
 8007dc8:	4413      	add	r3, r2
 8007dca:	009b      	lsls	r3, r3, #2
 8007dcc:	3338      	adds	r3, #56	; 0x38
 8007dce:	68fa      	ldr	r2, [r7, #12]
 8007dd0:	4413      	add	r3, r2
 8007dd2:	3304      	adds	r3, #4
 8007dd4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007dd6:	697b      	ldr	r3, [r7, #20]
 8007dd8:	687a      	ldr	r2, [r7, #4]
 8007dda:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8007ddc:	697b      	ldr	r3, [r7, #20]
 8007dde:	683a      	ldr	r2, [r7, #0]
 8007de0:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8007de2:	697b      	ldr	r3, [r7, #20]
 8007de4:	2200      	movs	r2, #0
 8007de6:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8007de8:	697b      	ldr	r3, [r7, #20]
 8007dea:	2201      	movs	r2, #1
 8007dec:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007dee:	7afb      	ldrb	r3, [r7, #11]
 8007df0:	f003 030f 	and.w	r3, r3, #15
 8007df4:	b2da      	uxtb	r2, r3
 8007df6:	697b      	ldr	r3, [r7, #20]
 8007df8:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007dfa:	7afb      	ldrb	r3, [r7, #11]
 8007dfc:	f003 030f 	and.w	r3, r3, #15
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d106      	bne.n	8007e12 <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	6979      	ldr	r1, [r7, #20]
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	f004 fb72 	bl	800c4f4 <USB_EP0StartXfer>
 8007e10:	e005      	b.n	8007e1e <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	6979      	ldr	r1, [r7, #20]
 8007e18:	4618      	mov	r0, r3
 8007e1a:	f004 f98b 	bl	800c134 <USB_EPStartXfer>
  }

  return HAL_OK;
 8007e1e:	2300      	movs	r3, #0
}
 8007e20:	4618      	mov	r0, r3
 8007e22:	3718      	adds	r7, #24
 8007e24:	46bd      	mov	sp, r7
 8007e26:	bd80      	pop	{r7, pc}

08007e28 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b084      	sub	sp, #16
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
 8007e30:	460b      	mov	r3, r1
 8007e32:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007e34:	78fb      	ldrb	r3, [r7, #3]
 8007e36:	f003 020f 	and.w	r2, r3, #15
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	685b      	ldr	r3, [r3, #4]
 8007e3e:	429a      	cmp	r2, r3
 8007e40:	d901      	bls.n	8007e46 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8007e42:	2301      	movs	r3, #1
 8007e44:	e04e      	b.n	8007ee4 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007e46:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	da0f      	bge.n	8007e6e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007e4e:	78fb      	ldrb	r3, [r7, #3]
 8007e50:	f003 020f 	and.w	r2, r3, #15
 8007e54:	4613      	mov	r3, r2
 8007e56:	00db      	lsls	r3, r3, #3
 8007e58:	4413      	add	r3, r2
 8007e5a:	009b      	lsls	r3, r3, #2
 8007e5c:	3338      	adds	r3, #56	; 0x38
 8007e5e:	687a      	ldr	r2, [r7, #4]
 8007e60:	4413      	add	r3, r2
 8007e62:	3304      	adds	r3, #4
 8007e64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	2201      	movs	r2, #1
 8007e6a:	705a      	strb	r2, [r3, #1]
 8007e6c:	e00d      	b.n	8007e8a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007e6e:	78fa      	ldrb	r2, [r7, #3]
 8007e70:	4613      	mov	r3, r2
 8007e72:	00db      	lsls	r3, r3, #3
 8007e74:	4413      	add	r3, r2
 8007e76:	009b      	lsls	r3, r3, #2
 8007e78:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007e7c:	687a      	ldr	r2, [r7, #4]
 8007e7e:	4413      	add	r3, r2
 8007e80:	3304      	adds	r3, #4
 8007e82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	2200      	movs	r2, #0
 8007e88:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	2201      	movs	r2, #1
 8007e8e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007e90:	78fb      	ldrb	r3, [r7, #3]
 8007e92:	f003 030f 	and.w	r3, r3, #15
 8007e96:	b2da      	uxtb	r2, r3
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007ea2:	2b01      	cmp	r3, #1
 8007ea4:	d101      	bne.n	8007eaa <HAL_PCD_EP_SetStall+0x82>
 8007ea6:	2302      	movs	r3, #2
 8007ea8:	e01c      	b.n	8007ee4 <HAL_PCD_EP_SetStall+0xbc>
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2201      	movs	r2, #1
 8007eae:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	68f9      	ldr	r1, [r7, #12]
 8007eb8:	4618      	mov	r0, r3
 8007eba:	f004 fd79 	bl	800c9b0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007ebe:	78fb      	ldrb	r3, [r7, #3]
 8007ec0:	f003 030f 	and.w	r3, r3, #15
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d108      	bne.n	8007eda <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681a      	ldr	r2, [r3, #0]
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007ed2:	4619      	mov	r1, r3
 8007ed4:	4610      	mov	r0, r2
 8007ed6:	f004 ff6b 	bl	800cdb0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2200      	movs	r2, #0
 8007ede:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8007ee2:	2300      	movs	r3, #0
}
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	3710      	adds	r7, #16
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	bd80      	pop	{r7, pc}

08007eec <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b084      	sub	sp, #16
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
 8007ef4:	460b      	mov	r3, r1
 8007ef6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007ef8:	78fb      	ldrb	r3, [r7, #3]
 8007efa:	f003 020f 	and.w	r2, r3, #15
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	685b      	ldr	r3, [r3, #4]
 8007f02:	429a      	cmp	r2, r3
 8007f04:	d901      	bls.n	8007f0a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8007f06:	2301      	movs	r3, #1
 8007f08:	e042      	b.n	8007f90 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007f0a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	da0f      	bge.n	8007f32 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007f12:	78fb      	ldrb	r3, [r7, #3]
 8007f14:	f003 020f 	and.w	r2, r3, #15
 8007f18:	4613      	mov	r3, r2
 8007f1a:	00db      	lsls	r3, r3, #3
 8007f1c:	4413      	add	r3, r2
 8007f1e:	009b      	lsls	r3, r3, #2
 8007f20:	3338      	adds	r3, #56	; 0x38
 8007f22:	687a      	ldr	r2, [r7, #4]
 8007f24:	4413      	add	r3, r2
 8007f26:	3304      	adds	r3, #4
 8007f28:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	2201      	movs	r2, #1
 8007f2e:	705a      	strb	r2, [r3, #1]
 8007f30:	e00f      	b.n	8007f52 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007f32:	78fb      	ldrb	r3, [r7, #3]
 8007f34:	f003 020f 	and.w	r2, r3, #15
 8007f38:	4613      	mov	r3, r2
 8007f3a:	00db      	lsls	r3, r3, #3
 8007f3c:	4413      	add	r3, r2
 8007f3e:	009b      	lsls	r3, r3, #2
 8007f40:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007f44:	687a      	ldr	r2, [r7, #4]
 8007f46:	4413      	add	r3, r2
 8007f48:	3304      	adds	r3, #4
 8007f4a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	2200      	movs	r2, #0
 8007f50:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	2200      	movs	r2, #0
 8007f56:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007f58:	78fb      	ldrb	r3, [r7, #3]
 8007f5a:	f003 030f 	and.w	r3, r3, #15
 8007f5e:	b2da      	uxtb	r2, r3
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007f6a:	2b01      	cmp	r3, #1
 8007f6c:	d101      	bne.n	8007f72 <HAL_PCD_EP_ClrStall+0x86>
 8007f6e:	2302      	movs	r3, #2
 8007f70:	e00e      	b.n	8007f90 <HAL_PCD_EP_ClrStall+0xa4>
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2201      	movs	r2, #1
 8007f76:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	68f9      	ldr	r1, [r7, #12]
 8007f80:	4618      	mov	r0, r3
 8007f82:	f004 fd83 	bl	800ca8c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2200      	movs	r2, #0
 8007f8a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8007f8e:	2300      	movs	r3, #0
}
 8007f90:	4618      	mov	r0, r3
 8007f92:	3710      	adds	r7, #16
 8007f94:	46bd      	mov	sp, r7
 8007f96:	bd80      	pop	{r7, pc}

08007f98 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b084      	sub	sp, #16
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
 8007fa0:	460b      	mov	r3, r1
 8007fa2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8007fa4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	da0c      	bge.n	8007fc6 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007fac:	78fb      	ldrb	r3, [r7, #3]
 8007fae:	f003 020f 	and.w	r2, r3, #15
 8007fb2:	4613      	mov	r3, r2
 8007fb4:	00db      	lsls	r3, r3, #3
 8007fb6:	4413      	add	r3, r2
 8007fb8:	009b      	lsls	r3, r3, #2
 8007fba:	3338      	adds	r3, #56	; 0x38
 8007fbc:	687a      	ldr	r2, [r7, #4]
 8007fbe:	4413      	add	r3, r2
 8007fc0:	3304      	adds	r3, #4
 8007fc2:	60fb      	str	r3, [r7, #12]
 8007fc4:	e00c      	b.n	8007fe0 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007fc6:	78fb      	ldrb	r3, [r7, #3]
 8007fc8:	f003 020f 	and.w	r2, r3, #15
 8007fcc:	4613      	mov	r3, r2
 8007fce:	00db      	lsls	r3, r3, #3
 8007fd0:	4413      	add	r3, r2
 8007fd2:	009b      	lsls	r3, r3, #2
 8007fd4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007fd8:	687a      	ldr	r2, [r7, #4]
 8007fda:	4413      	add	r3, r2
 8007fdc:	3304      	adds	r3, #4
 8007fde:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	68f9      	ldr	r1, [r7, #12]
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	f004 fba6 	bl	800c738 <USB_EPStopXfer>
 8007fec:	4603      	mov	r3, r0
 8007fee:	72fb      	strb	r3, [r7, #11]

  return ret;
 8007ff0:	7afb      	ldrb	r3, [r7, #11]
}
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	3710      	adds	r7, #16
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bd80      	pop	{r7, pc}

08007ffa <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007ffa:	b580      	push	{r7, lr}
 8007ffc:	b088      	sub	sp, #32
 8007ffe:	af00      	add	r7, sp, #0
 8008000:	6078      	str	r0, [r7, #4]
 8008002:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800800a:	697b      	ldr	r3, [r7, #20]
 800800c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800800e:	683a      	ldr	r2, [r7, #0]
 8008010:	4613      	mov	r3, r2
 8008012:	00db      	lsls	r3, r3, #3
 8008014:	4413      	add	r3, r2
 8008016:	009b      	lsls	r3, r3, #2
 8008018:	3338      	adds	r3, #56	; 0x38
 800801a:	687a      	ldr	r2, [r7, #4]
 800801c:	4413      	add	r3, r2
 800801e:	3304      	adds	r3, #4
 8008020:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	6a1a      	ldr	r2, [r3, #32]
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	699b      	ldr	r3, [r3, #24]
 800802a:	429a      	cmp	r2, r3
 800802c:	d901      	bls.n	8008032 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800802e:	2301      	movs	r3, #1
 8008030:	e067      	b.n	8008102 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	699a      	ldr	r2, [r3, #24]
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	6a1b      	ldr	r3, [r3, #32]
 800803a:	1ad3      	subs	r3, r2, r3
 800803c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	68db      	ldr	r3, [r3, #12]
 8008042:	69fa      	ldr	r2, [r7, #28]
 8008044:	429a      	cmp	r2, r3
 8008046:	d902      	bls.n	800804e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	68db      	ldr	r3, [r3, #12]
 800804c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800804e:	69fb      	ldr	r3, [r7, #28]
 8008050:	3303      	adds	r3, #3
 8008052:	089b      	lsrs	r3, r3, #2
 8008054:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008056:	e026      	b.n	80080a6 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	699a      	ldr	r2, [r3, #24]
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	6a1b      	ldr	r3, [r3, #32]
 8008060:	1ad3      	subs	r3, r2, r3
 8008062:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	68db      	ldr	r3, [r3, #12]
 8008068:	69fa      	ldr	r2, [r7, #28]
 800806a:	429a      	cmp	r2, r3
 800806c:	d902      	bls.n	8008074 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	68db      	ldr	r3, [r3, #12]
 8008072:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8008074:	69fb      	ldr	r3, [r7, #28]
 8008076:	3303      	adds	r3, #3
 8008078:	089b      	lsrs	r3, r3, #2
 800807a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	6919      	ldr	r1, [r3, #16]
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	b2da      	uxtb	r2, r3
 8008084:	69fb      	ldr	r3, [r7, #28]
 8008086:	b29b      	uxth	r3, r3
 8008088:	6978      	ldr	r0, [r7, #20]
 800808a:	f004 fbff 	bl	800c88c <USB_WritePacket>

    ep->xfer_buff  += len;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	691a      	ldr	r2, [r3, #16]
 8008092:	69fb      	ldr	r3, [r7, #28]
 8008094:	441a      	add	r2, r3
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	6a1a      	ldr	r2, [r3, #32]
 800809e:	69fb      	ldr	r3, [r7, #28]
 80080a0:	441a      	add	r2, r3
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	015a      	lsls	r2, r3, #5
 80080aa:	693b      	ldr	r3, [r7, #16]
 80080ac:	4413      	add	r3, r2
 80080ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080b2:	699b      	ldr	r3, [r3, #24]
 80080b4:	b29b      	uxth	r3, r3
 80080b6:	69ba      	ldr	r2, [r7, #24]
 80080b8:	429a      	cmp	r2, r3
 80080ba:	d809      	bhi.n	80080d0 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	6a1a      	ldr	r2, [r3, #32]
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80080c4:	429a      	cmp	r2, r3
 80080c6:	d203      	bcs.n	80080d0 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	699b      	ldr	r3, [r3, #24]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d1c3      	bne.n	8008058 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	699a      	ldr	r2, [r3, #24]
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	6a1b      	ldr	r3, [r3, #32]
 80080d8:	429a      	cmp	r2, r3
 80080da:	d811      	bhi.n	8008100 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	f003 030f 	and.w	r3, r3, #15
 80080e2:	2201      	movs	r2, #1
 80080e4:	fa02 f303 	lsl.w	r3, r2, r3
 80080e8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80080ea:	693b      	ldr	r3, [r7, #16]
 80080ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80080f2:	68bb      	ldr	r3, [r7, #8]
 80080f4:	43db      	mvns	r3, r3
 80080f6:	6939      	ldr	r1, [r7, #16]
 80080f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80080fc:	4013      	ands	r3, r2
 80080fe:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8008100:	2300      	movs	r3, #0
}
 8008102:	4618      	mov	r0, r3
 8008104:	3720      	adds	r7, #32
 8008106:	46bd      	mov	sp, r7
 8008108:	bd80      	pop	{r7, pc}
	...

0800810c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b086      	sub	sp, #24
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
 8008114:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800811c:	697b      	ldr	r3, [r7, #20]
 800811e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008120:	697b      	ldr	r3, [r7, #20]
 8008122:	333c      	adds	r3, #60	; 0x3c
 8008124:	3304      	adds	r3, #4
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	015a      	lsls	r2, r3, #5
 800812e:	693b      	ldr	r3, [r7, #16]
 8008130:	4413      	add	r3, r2
 8008132:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008136:	689b      	ldr	r3, [r3, #8]
 8008138:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	4a19      	ldr	r2, [pc, #100]	; (80081a4 <PCD_EP_OutXfrComplete_int+0x98>)
 800813e:	4293      	cmp	r3, r2
 8008140:	d124      	bne.n	800818c <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8008142:	68bb      	ldr	r3, [r7, #8]
 8008144:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008148:	2b00      	cmp	r3, #0
 800814a:	d00a      	beq.n	8008162 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	015a      	lsls	r2, r3, #5
 8008150:	693b      	ldr	r3, [r7, #16]
 8008152:	4413      	add	r3, r2
 8008154:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008158:	461a      	mov	r2, r3
 800815a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800815e:	6093      	str	r3, [r2, #8]
 8008160:	e01a      	b.n	8008198 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008162:	68bb      	ldr	r3, [r7, #8]
 8008164:	f003 0320 	and.w	r3, r3, #32
 8008168:	2b00      	cmp	r3, #0
 800816a:	d008      	beq.n	800817e <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	015a      	lsls	r2, r3, #5
 8008170:	693b      	ldr	r3, [r7, #16]
 8008172:	4413      	add	r3, r2
 8008174:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008178:	461a      	mov	r2, r3
 800817a:	2320      	movs	r3, #32
 800817c:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	b2db      	uxtb	r3, r3
 8008182:	4619      	mov	r1, r3
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	f009 fb37 	bl	80117f8 <HAL_PCD_DataOutStageCallback>
 800818a:	e005      	b.n	8008198 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	b2db      	uxtb	r3, r3
 8008190:	4619      	mov	r1, r3
 8008192:	6878      	ldr	r0, [r7, #4]
 8008194:	f009 fb30 	bl	80117f8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8008198:	2300      	movs	r3, #0
}
 800819a:	4618      	mov	r0, r3
 800819c:	3718      	adds	r7, #24
 800819e:	46bd      	mov	sp, r7
 80081a0:	bd80      	pop	{r7, pc}
 80081a2:	bf00      	nop
 80081a4:	4f54310a 	.word	0x4f54310a

080081a8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b086      	sub	sp, #24
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
 80081b0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081b8:	697b      	ldr	r3, [r7, #20]
 80081ba:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80081bc:	697b      	ldr	r3, [r7, #20]
 80081be:	333c      	adds	r3, #60	; 0x3c
 80081c0:	3304      	adds	r3, #4
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	015a      	lsls	r2, r3, #5
 80081ca:	693b      	ldr	r3, [r7, #16]
 80081cc:	4413      	add	r3, r2
 80081ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081d2:	689b      	ldr	r3, [r3, #8]
 80081d4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	4a0c      	ldr	r2, [pc, #48]	; (800820c <PCD_EP_OutSetupPacket_int+0x64>)
 80081da:	4293      	cmp	r3, r2
 80081dc:	d90e      	bls.n	80081fc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80081de:	68bb      	ldr	r3, [r7, #8]
 80081e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d009      	beq.n	80081fc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	015a      	lsls	r2, r3, #5
 80081ec:	693b      	ldr	r3, [r7, #16]
 80081ee:	4413      	add	r3, r2
 80081f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081f4:	461a      	mov	r2, r3
 80081f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80081fa:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80081fc:	6878      	ldr	r0, [r7, #4]
 80081fe:	f009 fae9 	bl	80117d4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8008202:	2300      	movs	r3, #0
}
 8008204:	4618      	mov	r0, r3
 8008206:	3718      	adds	r7, #24
 8008208:	46bd      	mov	sp, r7
 800820a:	bd80      	pop	{r7, pc}
 800820c:	4f54300a 	.word	0x4f54300a

08008210 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8008210:	b480      	push	{r7}
 8008212:	b085      	sub	sp, #20
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
 8008218:	460b      	mov	r3, r1
 800821a:	70fb      	strb	r3, [r7, #3]
 800821c:	4613      	mov	r3, r2
 800821e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008226:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8008228:	78fb      	ldrb	r3, [r7, #3]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d107      	bne.n	800823e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800822e:	883b      	ldrh	r3, [r7, #0]
 8008230:	0419      	lsls	r1, r3, #16
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	68ba      	ldr	r2, [r7, #8]
 8008238:	430a      	orrs	r2, r1
 800823a:	629a      	str	r2, [r3, #40]	; 0x28
 800823c:	e028      	b.n	8008290 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008244:	0c1b      	lsrs	r3, r3, #16
 8008246:	68ba      	ldr	r2, [r7, #8]
 8008248:	4413      	add	r3, r2
 800824a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800824c:	2300      	movs	r3, #0
 800824e:	73fb      	strb	r3, [r7, #15]
 8008250:	e00d      	b.n	800826e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681a      	ldr	r2, [r3, #0]
 8008256:	7bfb      	ldrb	r3, [r7, #15]
 8008258:	3340      	adds	r3, #64	; 0x40
 800825a:	009b      	lsls	r3, r3, #2
 800825c:	4413      	add	r3, r2
 800825e:	685b      	ldr	r3, [r3, #4]
 8008260:	0c1b      	lsrs	r3, r3, #16
 8008262:	68ba      	ldr	r2, [r7, #8]
 8008264:	4413      	add	r3, r2
 8008266:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008268:	7bfb      	ldrb	r3, [r7, #15]
 800826a:	3301      	adds	r3, #1
 800826c:	73fb      	strb	r3, [r7, #15]
 800826e:	7bfa      	ldrb	r2, [r7, #15]
 8008270:	78fb      	ldrb	r3, [r7, #3]
 8008272:	3b01      	subs	r3, #1
 8008274:	429a      	cmp	r2, r3
 8008276:	d3ec      	bcc.n	8008252 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8008278:	883b      	ldrh	r3, [r7, #0]
 800827a:	0418      	lsls	r0, r3, #16
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	6819      	ldr	r1, [r3, #0]
 8008280:	78fb      	ldrb	r3, [r7, #3]
 8008282:	3b01      	subs	r3, #1
 8008284:	68ba      	ldr	r2, [r7, #8]
 8008286:	4302      	orrs	r2, r0
 8008288:	3340      	adds	r3, #64	; 0x40
 800828a:	009b      	lsls	r3, r3, #2
 800828c:	440b      	add	r3, r1
 800828e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8008290:	2300      	movs	r3, #0
}
 8008292:	4618      	mov	r0, r3
 8008294:	3714      	adds	r7, #20
 8008296:	46bd      	mov	sp, r7
 8008298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829c:	4770      	bx	lr

0800829e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800829e:	b480      	push	{r7}
 80082a0:	b083      	sub	sp, #12
 80082a2:	af00      	add	r7, sp, #0
 80082a4:	6078      	str	r0, [r7, #4]
 80082a6:	460b      	mov	r3, r1
 80082a8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	887a      	ldrh	r2, [r7, #2]
 80082b0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80082b2:	2300      	movs	r3, #0
}
 80082b4:	4618      	mov	r0, r3
 80082b6:	370c      	adds	r7, #12
 80082b8:	46bd      	mov	sp, r7
 80082ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082be:	4770      	bx	lr

080082c0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80082c0:	b480      	push	{r7}
 80082c2:	b085      	sub	sp, #20
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2201      	movs	r2, #1
 80082d2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2200      	movs	r2, #0
 80082da:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	699b      	ldr	r3, [r3, #24]
 80082e2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80082f2:	f043 0303 	orr.w	r3, r3, #3
 80082f6:	68fa      	ldr	r2, [r7, #12]
 80082f8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80082fa:	2300      	movs	r3, #0
}
 80082fc:	4618      	mov	r0, r3
 80082fe:	3714      	adds	r7, #20
 8008300:	46bd      	mov	sp, r7
 8008302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008306:	4770      	bx	lr

08008308 <HAL_PWR_EnterSTOPMode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop 0 or Stop 1 mode with WFI instruction.
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop 0 or Stop 1 mode with WFE instruction.
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b082      	sub	sp, #8
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
 8008310:	460b      	mov	r3, r1
 8008312:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));

  if(Regulator == PWR_LOWPOWERREGULATOR_ON)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800831a:	d104      	bne.n	8008326 <HAL_PWR_EnterSTOPMode+0x1e>
  {
    HAL_PWREx_EnterSTOP1Mode(STOPEntry);
 800831c:	78fb      	ldrb	r3, [r7, #3]
 800831e:	4618      	mov	r0, r3
 8008320:	f000 f908 	bl	8008534 <HAL_PWREx_EnterSTOP1Mode>
  }
  else
  {
    HAL_PWREx_EnterSTOP0Mode(STOPEntry);
  }
}
 8008324:	e003      	b.n	800832e <HAL_PWR_EnterSTOPMode+0x26>
    HAL_PWREx_EnterSTOP0Mode(STOPEntry);
 8008326:	78fb      	ldrb	r3, [r7, #3]
 8008328:	4618      	mov	r0, r3
 800832a:	f000 f8d9 	bl	80084e0 <HAL_PWREx_EnterSTOP0Mode>
}
 800832e:	bf00      	nop
 8008330:	3708      	adds	r7, #8
 8008332:	46bd      	mov	sp, r7
 8008334:	bd80      	pop	{r7, pc}
	...

08008338 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8008338:	b480      	push	{r7}
 800833a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800833c:	4b0d      	ldr	r3, [pc, #52]	; (8008374 <HAL_PWREx_GetVoltageRange+0x3c>)
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008344:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008348:	d102      	bne.n	8008350 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800834a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800834e:	e00b      	b.n	8008368 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8008350:	4b08      	ldr	r3, [pc, #32]	; (8008374 <HAL_PWREx_GetVoltageRange+0x3c>)
 8008352:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008356:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800835a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800835e:	d102      	bne.n	8008366 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8008360:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008364:	e000      	b.n	8008368 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8008366:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8008368:	4618      	mov	r0, r3
 800836a:	46bd      	mov	sp, r7
 800836c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008370:	4770      	bx	lr
 8008372:	bf00      	nop
 8008374:	40007000 	.word	0x40007000

08008378 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008378:	b480      	push	{r7}
 800837a:	b085      	sub	sp, #20
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d141      	bne.n	800840a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008386:	4b4b      	ldr	r3, [pc, #300]	; (80084b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800838e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008392:	d131      	bne.n	80083f8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008394:	4b47      	ldr	r3, [pc, #284]	; (80084b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008396:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800839a:	4a46      	ldr	r2, [pc, #280]	; (80084b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800839c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80083a0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80083a4:	4b43      	ldr	r3, [pc, #268]	; (80084b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80083ac:	4a41      	ldr	r2, [pc, #260]	; (80084b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80083ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80083b2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80083b4:	4b40      	ldr	r3, [pc, #256]	; (80084b8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	2232      	movs	r2, #50	; 0x32
 80083ba:	fb02 f303 	mul.w	r3, r2, r3
 80083be:	4a3f      	ldr	r2, [pc, #252]	; (80084bc <HAL_PWREx_ControlVoltageScaling+0x144>)
 80083c0:	fba2 2303 	umull	r2, r3, r2, r3
 80083c4:	0c9b      	lsrs	r3, r3, #18
 80083c6:	3301      	adds	r3, #1
 80083c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80083ca:	e002      	b.n	80083d2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	3b01      	subs	r3, #1
 80083d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80083d2:	4b38      	ldr	r3, [pc, #224]	; (80084b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80083d4:	695b      	ldr	r3, [r3, #20]
 80083d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80083da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80083de:	d102      	bne.n	80083e6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d1f2      	bne.n	80083cc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80083e6:	4b33      	ldr	r3, [pc, #204]	; (80084b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80083e8:	695b      	ldr	r3, [r3, #20]
 80083ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80083ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80083f2:	d158      	bne.n	80084a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80083f4:	2303      	movs	r3, #3
 80083f6:	e057      	b.n	80084a8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80083f8:	4b2e      	ldr	r3, [pc, #184]	; (80084b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80083fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80083fe:	4a2d      	ldr	r2, [pc, #180]	; (80084b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008400:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008404:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8008408:	e04d      	b.n	80084a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008410:	d141      	bne.n	8008496 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008412:	4b28      	ldr	r3, [pc, #160]	; (80084b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800841a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800841e:	d131      	bne.n	8008484 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008420:	4b24      	ldr	r3, [pc, #144]	; (80084b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008422:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008426:	4a23      	ldr	r2, [pc, #140]	; (80084b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008428:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800842c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008430:	4b20      	ldr	r3, [pc, #128]	; (80084b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008438:	4a1e      	ldr	r2, [pc, #120]	; (80084b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800843a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800843e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8008440:	4b1d      	ldr	r3, [pc, #116]	; (80084b8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	2232      	movs	r2, #50	; 0x32
 8008446:	fb02 f303 	mul.w	r3, r2, r3
 800844a:	4a1c      	ldr	r2, [pc, #112]	; (80084bc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800844c:	fba2 2303 	umull	r2, r3, r2, r3
 8008450:	0c9b      	lsrs	r3, r3, #18
 8008452:	3301      	adds	r3, #1
 8008454:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008456:	e002      	b.n	800845e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	3b01      	subs	r3, #1
 800845c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800845e:	4b15      	ldr	r3, [pc, #84]	; (80084b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008460:	695b      	ldr	r3, [r3, #20]
 8008462:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008466:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800846a:	d102      	bne.n	8008472 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d1f2      	bne.n	8008458 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008472:	4b10      	ldr	r3, [pc, #64]	; (80084b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008474:	695b      	ldr	r3, [r3, #20]
 8008476:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800847a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800847e:	d112      	bne.n	80084a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008480:	2303      	movs	r3, #3
 8008482:	e011      	b.n	80084a8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008484:	4b0b      	ldr	r3, [pc, #44]	; (80084b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008486:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800848a:	4a0a      	ldr	r2, [pc, #40]	; (80084b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800848c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008490:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8008494:	e007      	b.n	80084a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8008496:	4b07      	ldr	r3, [pc, #28]	; (80084b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800849e:	4a05      	ldr	r2, [pc, #20]	; (80084b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80084a0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80084a4:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80084a6:	2300      	movs	r3, #0
}
 80084a8:	4618      	mov	r0, r3
 80084aa:	3714      	adds	r7, #20
 80084ac:	46bd      	mov	sp, r7
 80084ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b2:	4770      	bx	lr
 80084b4:	40007000 	.word	0x40007000
 80084b8:	20000184 	.word	0x20000184
 80084bc:	431bde83 	.word	0x431bde83

080084c0 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80084c0:	b480      	push	{r7}
 80084c2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80084c4:	4b05      	ldr	r3, [pc, #20]	; (80084dc <HAL_PWREx_EnableVddUSB+0x1c>)
 80084c6:	685b      	ldr	r3, [r3, #4]
 80084c8:	4a04      	ldr	r2, [pc, #16]	; (80084dc <HAL_PWREx_EnableVddUSB+0x1c>)
 80084ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80084ce:	6053      	str	r3, [r2, #4]
}
 80084d0:	bf00      	nop
 80084d2:	46bd      	mov	sp, r7
 80084d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d8:	4770      	bx	lr
 80084da:	bf00      	nop
 80084dc:	40007000 	.word	0x40007000

080084e0 <HAL_PWREx_EnterSTOP0Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP0Mode(uint8_t STOPEntry)
{
 80084e0:	b480      	push	{r7}
 80084e2:	b083      	sub	sp, #12
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	4603      	mov	r3, r0
 80084e8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Stop 0 mode with Main Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP0);
 80084ea:	4b10      	ldr	r3, [pc, #64]	; (800852c <HAL_PWREx_EnterSTOP0Mode+0x4c>)
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	4a0f      	ldr	r2, [pc, #60]	; (800852c <HAL_PWREx_EnterSTOP0Mode+0x4c>)
 80084f0:	f023 0307 	bic.w	r3, r3, #7
 80084f4:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80084f6:	4b0e      	ldr	r3, [pc, #56]	; (8008530 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 80084f8:	691b      	ldr	r3, [r3, #16]
 80084fa:	4a0d      	ldr	r2, [pc, #52]	; (8008530 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 80084fc:	f043 0304 	orr.w	r3, r3, #4
 8008500:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8008502:	79fb      	ldrb	r3, [r7, #7]
 8008504:	2b01      	cmp	r3, #1
 8008506:	d101      	bne.n	800850c <HAL_PWREx_EnterSTOP0Mode+0x2c>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8008508:	bf30      	wfi
 800850a:	e002      	b.n	8008512 <HAL_PWREx_EnterSTOP0Mode+0x32>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800850c:	bf40      	sev
    __WFE();
 800850e:	bf20      	wfe
    __WFE();
 8008510:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8008512:	4b07      	ldr	r3, [pc, #28]	; (8008530 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8008514:	691b      	ldr	r3, [r3, #16]
 8008516:	4a06      	ldr	r2, [pc, #24]	; (8008530 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8008518:	f023 0304 	bic.w	r3, r3, #4
 800851c:	6113      	str	r3, [r2, #16]
}
 800851e:	bf00      	nop
 8008520:	370c      	adds	r7, #12
 8008522:	46bd      	mov	sp, r7
 8008524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008528:	4770      	bx	lr
 800852a:	bf00      	nop
 800852c:	40007000 	.word	0x40007000
 8008530:	e000ed00 	.word	0xe000ed00

08008534 <HAL_PWREx_EnterSTOP1Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP1Mode(uint8_t STOPEntry)
{
 8008534:	b480      	push	{r7}
 8008536:	b083      	sub	sp, #12
 8008538:	af00      	add	r7, sp, #0
 800853a:	4603      	mov	r3, r0
 800853c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Stop 1 mode with Low-Power Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP1);
 800853e:	4b11      	ldr	r3, [pc, #68]	; (8008584 <HAL_PWREx_EnterSTOP1Mode+0x50>)
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f023 0307 	bic.w	r3, r3, #7
 8008546:	4a0f      	ldr	r2, [pc, #60]	; (8008584 <HAL_PWREx_EnterSTOP1Mode+0x50>)
 8008548:	f043 0301 	orr.w	r3, r3, #1
 800854c:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800854e:	4b0e      	ldr	r3, [pc, #56]	; (8008588 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8008550:	691b      	ldr	r3, [r3, #16]
 8008552:	4a0d      	ldr	r2, [pc, #52]	; (8008588 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8008554:	f043 0304 	orr.w	r3, r3, #4
 8008558:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 800855a:	79fb      	ldrb	r3, [r7, #7]
 800855c:	2b01      	cmp	r3, #1
 800855e:	d101      	bne.n	8008564 <HAL_PWREx_EnterSTOP1Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8008560:	bf30      	wfi
 8008562:	e002      	b.n	800856a <HAL_PWREx_EnterSTOP1Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8008564:	bf40      	sev
    __WFE();
 8008566:	bf20      	wfe
    __WFE();
 8008568:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800856a:	4b07      	ldr	r3, [pc, #28]	; (8008588 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 800856c:	691b      	ldr	r3, [r3, #16]
 800856e:	4a06      	ldr	r2, [pc, #24]	; (8008588 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8008570:	f023 0304 	bic.w	r3, r3, #4
 8008574:	6113      	str	r3, [r2, #16]
}
 8008576:	bf00      	nop
 8008578:	370c      	adds	r7, #12
 800857a:	46bd      	mov	sp, r7
 800857c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008580:	4770      	bx	lr
 8008582:	bf00      	nop
 8008584:	40007000 	.word	0x40007000
 8008588:	e000ed00 	.word	0xe000ed00

0800858c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b08a      	sub	sp, #40	; 0x28
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d102      	bne.n	80085a0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800859a:	2301      	movs	r3, #1
 800859c:	f000 bc68 	b.w	8008e70 <HAL_RCC_OscConfig+0x8e4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80085a0:	4b97      	ldr	r3, [pc, #604]	; (8008800 <HAL_RCC_OscConfig+0x274>)
 80085a2:	689b      	ldr	r3, [r3, #8]
 80085a4:	f003 030c 	and.w	r3, r3, #12
 80085a8:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80085aa:	4b95      	ldr	r3, [pc, #596]	; (8008800 <HAL_RCC_OscConfig+0x274>)
 80085ac:	68db      	ldr	r3, [r3, #12]
 80085ae:	f003 0303 	and.w	r3, r3, #3
 80085b2:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	f003 0310 	and.w	r3, r3, #16
 80085bc:	2b00      	cmp	r3, #0
 80085be:	f000 80e6 	beq.w	800878e <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80085c2:	6a3b      	ldr	r3, [r7, #32]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d007      	beq.n	80085d8 <HAL_RCC_OscConfig+0x4c>
 80085c8:	6a3b      	ldr	r3, [r7, #32]
 80085ca:	2b0c      	cmp	r3, #12
 80085cc:	f040 808d 	bne.w	80086ea <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80085d0:	69fb      	ldr	r3, [r7, #28]
 80085d2:	2b01      	cmp	r3, #1
 80085d4:	f040 8089 	bne.w	80086ea <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80085d8:	4b89      	ldr	r3, [pc, #548]	; (8008800 <HAL_RCC_OscConfig+0x274>)
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	f003 0302 	and.w	r3, r3, #2
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d006      	beq.n	80085f2 <HAL_RCC_OscConfig+0x66>
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	69db      	ldr	r3, [r3, #28]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d102      	bne.n	80085f2 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 80085ec:	2301      	movs	r3, #1
 80085ee:	f000 bc3f 	b.w	8008e70 <HAL_RCC_OscConfig+0x8e4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80085f6:	4b82      	ldr	r3, [pc, #520]	; (8008800 <HAL_RCC_OscConfig+0x274>)
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	f003 0308 	and.w	r3, r3, #8
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d004      	beq.n	800860c <HAL_RCC_OscConfig+0x80>
 8008602:	4b7f      	ldr	r3, [pc, #508]	; (8008800 <HAL_RCC_OscConfig+0x274>)
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800860a:	e005      	b.n	8008618 <HAL_RCC_OscConfig+0x8c>
 800860c:	4b7c      	ldr	r3, [pc, #496]	; (8008800 <HAL_RCC_OscConfig+0x274>)
 800860e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008612:	091b      	lsrs	r3, r3, #4
 8008614:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008618:	4293      	cmp	r3, r2
 800861a:	d224      	bcs.n	8008666 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008620:	4618      	mov	r0, r3
 8008622:	f000 fe47 	bl	80092b4 <RCC_SetFlashLatencyFromMSIRange>
 8008626:	4603      	mov	r3, r0
 8008628:	2b00      	cmp	r3, #0
 800862a:	d002      	beq.n	8008632 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 800862c:	2301      	movs	r3, #1
 800862e:	f000 bc1f 	b.w	8008e70 <HAL_RCC_OscConfig+0x8e4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008632:	4b73      	ldr	r3, [pc, #460]	; (8008800 <HAL_RCC_OscConfig+0x274>)
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	4a72      	ldr	r2, [pc, #456]	; (8008800 <HAL_RCC_OscConfig+0x274>)
 8008638:	f043 0308 	orr.w	r3, r3, #8
 800863c:	6013      	str	r3, [r2, #0]
 800863e:	4b70      	ldr	r3, [pc, #448]	; (8008800 <HAL_RCC_OscConfig+0x274>)
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800864a:	496d      	ldr	r1, [pc, #436]	; (8008800 <HAL_RCC_OscConfig+0x274>)
 800864c:	4313      	orrs	r3, r2
 800864e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008650:	4b6b      	ldr	r3, [pc, #428]	; (8008800 <HAL_RCC_OscConfig+0x274>)
 8008652:	685b      	ldr	r3, [r3, #4]
 8008654:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	6a1b      	ldr	r3, [r3, #32]
 800865c:	021b      	lsls	r3, r3, #8
 800865e:	4968      	ldr	r1, [pc, #416]	; (8008800 <HAL_RCC_OscConfig+0x274>)
 8008660:	4313      	orrs	r3, r2
 8008662:	604b      	str	r3, [r1, #4]
 8008664:	e025      	b.n	80086b2 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008666:	4b66      	ldr	r3, [pc, #408]	; (8008800 <HAL_RCC_OscConfig+0x274>)
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	4a65      	ldr	r2, [pc, #404]	; (8008800 <HAL_RCC_OscConfig+0x274>)
 800866c:	f043 0308 	orr.w	r3, r3, #8
 8008670:	6013      	str	r3, [r2, #0]
 8008672:	4b63      	ldr	r3, [pc, #396]	; (8008800 <HAL_RCC_OscConfig+0x274>)
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800867e:	4960      	ldr	r1, [pc, #384]	; (8008800 <HAL_RCC_OscConfig+0x274>)
 8008680:	4313      	orrs	r3, r2
 8008682:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008684:	4b5e      	ldr	r3, [pc, #376]	; (8008800 <HAL_RCC_OscConfig+0x274>)
 8008686:	685b      	ldr	r3, [r3, #4]
 8008688:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	6a1b      	ldr	r3, [r3, #32]
 8008690:	021b      	lsls	r3, r3, #8
 8008692:	495b      	ldr	r1, [pc, #364]	; (8008800 <HAL_RCC_OscConfig+0x274>)
 8008694:	4313      	orrs	r3, r2
 8008696:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008698:	6a3b      	ldr	r3, [r7, #32]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d109      	bne.n	80086b2 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086a2:	4618      	mov	r0, r3
 80086a4:	f000 fe06 	bl	80092b4 <RCC_SetFlashLatencyFromMSIRange>
 80086a8:	4603      	mov	r3, r0
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d001      	beq.n	80086b2 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 80086ae:	2301      	movs	r3, #1
 80086b0:	e3de      	b.n	8008e70 <HAL_RCC_OscConfig+0x8e4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80086b2:	f000 fd21 	bl	80090f8 <HAL_RCC_GetSysClockFreq>
 80086b6:	4602      	mov	r2, r0
 80086b8:	4b51      	ldr	r3, [pc, #324]	; (8008800 <HAL_RCC_OscConfig+0x274>)
 80086ba:	689b      	ldr	r3, [r3, #8]
 80086bc:	091b      	lsrs	r3, r3, #4
 80086be:	f003 030f 	and.w	r3, r3, #15
 80086c2:	4950      	ldr	r1, [pc, #320]	; (8008804 <HAL_RCC_OscConfig+0x278>)
 80086c4:	5ccb      	ldrb	r3, [r1, r3]
 80086c6:	f003 031f 	and.w	r3, r3, #31
 80086ca:	fa22 f303 	lsr.w	r3, r2, r3
 80086ce:	4a4e      	ldr	r2, [pc, #312]	; (8008808 <HAL_RCC_OscConfig+0x27c>)
 80086d0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80086d2:	4b4e      	ldr	r3, [pc, #312]	; (800880c <HAL_RCC_OscConfig+0x280>)
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	4618      	mov	r0, r3
 80086d8:	f7fb fe6a 	bl	80043b0 <HAL_InitTick>
 80086dc:	4603      	mov	r3, r0
 80086de:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 80086e0:	7dfb      	ldrb	r3, [r7, #23]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d052      	beq.n	800878c <HAL_RCC_OscConfig+0x200>
        {
          return status;
 80086e6:	7dfb      	ldrb	r3, [r7, #23]
 80086e8:	e3c2      	b.n	8008e70 <HAL_RCC_OscConfig+0x8e4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	69db      	ldr	r3, [r3, #28]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d032      	beq.n	8008758 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80086f2:	4b43      	ldr	r3, [pc, #268]	; (8008800 <HAL_RCC_OscConfig+0x274>)
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	4a42      	ldr	r2, [pc, #264]	; (8008800 <HAL_RCC_OscConfig+0x274>)
 80086f8:	f043 0301 	orr.w	r3, r3, #1
 80086fc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80086fe:	f7fc f845 	bl	800478c <HAL_GetTick>
 8008702:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008704:	e008      	b.n	8008718 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008706:	f7fc f841 	bl	800478c <HAL_GetTick>
 800870a:	4602      	mov	r2, r0
 800870c:	69bb      	ldr	r3, [r7, #24]
 800870e:	1ad3      	subs	r3, r2, r3
 8008710:	2b02      	cmp	r3, #2
 8008712:	d901      	bls.n	8008718 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8008714:	2303      	movs	r3, #3
 8008716:	e3ab      	b.n	8008e70 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008718:	4b39      	ldr	r3, [pc, #228]	; (8008800 <HAL_RCC_OscConfig+0x274>)
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f003 0302 	and.w	r3, r3, #2
 8008720:	2b00      	cmp	r3, #0
 8008722:	d0f0      	beq.n	8008706 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008724:	4b36      	ldr	r3, [pc, #216]	; (8008800 <HAL_RCC_OscConfig+0x274>)
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	4a35      	ldr	r2, [pc, #212]	; (8008800 <HAL_RCC_OscConfig+0x274>)
 800872a:	f043 0308 	orr.w	r3, r3, #8
 800872e:	6013      	str	r3, [r2, #0]
 8008730:	4b33      	ldr	r3, [pc, #204]	; (8008800 <HAL_RCC_OscConfig+0x274>)
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800873c:	4930      	ldr	r1, [pc, #192]	; (8008800 <HAL_RCC_OscConfig+0x274>)
 800873e:	4313      	orrs	r3, r2
 8008740:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008742:	4b2f      	ldr	r3, [pc, #188]	; (8008800 <HAL_RCC_OscConfig+0x274>)
 8008744:	685b      	ldr	r3, [r3, #4]
 8008746:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	6a1b      	ldr	r3, [r3, #32]
 800874e:	021b      	lsls	r3, r3, #8
 8008750:	492b      	ldr	r1, [pc, #172]	; (8008800 <HAL_RCC_OscConfig+0x274>)
 8008752:	4313      	orrs	r3, r2
 8008754:	604b      	str	r3, [r1, #4]
 8008756:	e01a      	b.n	800878e <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8008758:	4b29      	ldr	r3, [pc, #164]	; (8008800 <HAL_RCC_OscConfig+0x274>)
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	4a28      	ldr	r2, [pc, #160]	; (8008800 <HAL_RCC_OscConfig+0x274>)
 800875e:	f023 0301 	bic.w	r3, r3, #1
 8008762:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008764:	f7fc f812 	bl	800478c <HAL_GetTick>
 8008768:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800876a:	e008      	b.n	800877e <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800876c:	f7fc f80e 	bl	800478c <HAL_GetTick>
 8008770:	4602      	mov	r2, r0
 8008772:	69bb      	ldr	r3, [r7, #24]
 8008774:	1ad3      	subs	r3, r2, r3
 8008776:	2b02      	cmp	r3, #2
 8008778:	d901      	bls.n	800877e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800877a:	2303      	movs	r3, #3
 800877c:	e378      	b.n	8008e70 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800877e:	4b20      	ldr	r3, [pc, #128]	; (8008800 <HAL_RCC_OscConfig+0x274>)
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	f003 0302 	and.w	r3, r3, #2
 8008786:	2b00      	cmp	r3, #0
 8008788:	d1f0      	bne.n	800876c <HAL_RCC_OscConfig+0x1e0>
 800878a:	e000      	b.n	800878e <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800878c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f003 0301 	and.w	r3, r3, #1
 8008796:	2b00      	cmp	r3, #0
 8008798:	d073      	beq.n	8008882 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800879a:	6a3b      	ldr	r3, [r7, #32]
 800879c:	2b08      	cmp	r3, #8
 800879e:	d005      	beq.n	80087ac <HAL_RCC_OscConfig+0x220>
 80087a0:	6a3b      	ldr	r3, [r7, #32]
 80087a2:	2b0c      	cmp	r3, #12
 80087a4:	d10e      	bne.n	80087c4 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80087a6:	69fb      	ldr	r3, [r7, #28]
 80087a8:	2b03      	cmp	r3, #3
 80087aa:	d10b      	bne.n	80087c4 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80087ac:	4b14      	ldr	r3, [pc, #80]	; (8008800 <HAL_RCC_OscConfig+0x274>)
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d063      	beq.n	8008880 <HAL_RCC_OscConfig+0x2f4>
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	685b      	ldr	r3, [r3, #4]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d15f      	bne.n	8008880 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 80087c0:	2301      	movs	r3, #1
 80087c2:	e355      	b.n	8008e70 <HAL_RCC_OscConfig+0x8e4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	685b      	ldr	r3, [r3, #4]
 80087c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087cc:	d106      	bne.n	80087dc <HAL_RCC_OscConfig+0x250>
 80087ce:	4b0c      	ldr	r3, [pc, #48]	; (8008800 <HAL_RCC_OscConfig+0x274>)
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	4a0b      	ldr	r2, [pc, #44]	; (8008800 <HAL_RCC_OscConfig+0x274>)
 80087d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80087d8:	6013      	str	r3, [r2, #0]
 80087da:	e025      	b.n	8008828 <HAL_RCC_OscConfig+0x29c>
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	685b      	ldr	r3, [r3, #4]
 80087e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80087e4:	d114      	bne.n	8008810 <HAL_RCC_OscConfig+0x284>
 80087e6:	4b06      	ldr	r3, [pc, #24]	; (8008800 <HAL_RCC_OscConfig+0x274>)
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	4a05      	ldr	r2, [pc, #20]	; (8008800 <HAL_RCC_OscConfig+0x274>)
 80087ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80087f0:	6013      	str	r3, [r2, #0]
 80087f2:	4b03      	ldr	r3, [pc, #12]	; (8008800 <HAL_RCC_OscConfig+0x274>)
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	4a02      	ldr	r2, [pc, #8]	; (8008800 <HAL_RCC_OscConfig+0x274>)
 80087f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80087fc:	6013      	str	r3, [r2, #0]
 80087fe:	e013      	b.n	8008828 <HAL_RCC_OscConfig+0x29c>
 8008800:	40021000 	.word	0x40021000
 8008804:	0801502c 	.word	0x0801502c
 8008808:	20000184 	.word	0x20000184
 800880c:	20000188 	.word	0x20000188
 8008810:	4b8f      	ldr	r3, [pc, #572]	; (8008a50 <HAL_RCC_OscConfig+0x4c4>)
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	4a8e      	ldr	r2, [pc, #568]	; (8008a50 <HAL_RCC_OscConfig+0x4c4>)
 8008816:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800881a:	6013      	str	r3, [r2, #0]
 800881c:	4b8c      	ldr	r3, [pc, #560]	; (8008a50 <HAL_RCC_OscConfig+0x4c4>)
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	4a8b      	ldr	r2, [pc, #556]	; (8008a50 <HAL_RCC_OscConfig+0x4c4>)
 8008822:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008826:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	685b      	ldr	r3, [r3, #4]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d013      	beq.n	8008858 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008830:	f7fb ffac 	bl	800478c <HAL_GetTick>
 8008834:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008836:	e008      	b.n	800884a <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008838:	f7fb ffa8 	bl	800478c <HAL_GetTick>
 800883c:	4602      	mov	r2, r0
 800883e:	69bb      	ldr	r3, [r7, #24]
 8008840:	1ad3      	subs	r3, r2, r3
 8008842:	2b64      	cmp	r3, #100	; 0x64
 8008844:	d901      	bls.n	800884a <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8008846:	2303      	movs	r3, #3
 8008848:	e312      	b.n	8008e70 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800884a:	4b81      	ldr	r3, [pc, #516]	; (8008a50 <HAL_RCC_OscConfig+0x4c4>)
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008852:	2b00      	cmp	r3, #0
 8008854:	d0f0      	beq.n	8008838 <HAL_RCC_OscConfig+0x2ac>
 8008856:	e014      	b.n	8008882 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008858:	f7fb ff98 	bl	800478c <HAL_GetTick>
 800885c:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800885e:	e008      	b.n	8008872 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008860:	f7fb ff94 	bl	800478c <HAL_GetTick>
 8008864:	4602      	mov	r2, r0
 8008866:	69bb      	ldr	r3, [r7, #24]
 8008868:	1ad3      	subs	r3, r2, r3
 800886a:	2b64      	cmp	r3, #100	; 0x64
 800886c:	d901      	bls.n	8008872 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 800886e:	2303      	movs	r3, #3
 8008870:	e2fe      	b.n	8008e70 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008872:	4b77      	ldr	r3, [pc, #476]	; (8008a50 <HAL_RCC_OscConfig+0x4c4>)
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800887a:	2b00      	cmp	r3, #0
 800887c:	d1f0      	bne.n	8008860 <HAL_RCC_OscConfig+0x2d4>
 800887e:	e000      	b.n	8008882 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008880:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	f003 0302 	and.w	r3, r3, #2
 800888a:	2b00      	cmp	r3, #0
 800888c:	d060      	beq.n	8008950 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800888e:	6a3b      	ldr	r3, [r7, #32]
 8008890:	2b04      	cmp	r3, #4
 8008892:	d005      	beq.n	80088a0 <HAL_RCC_OscConfig+0x314>
 8008894:	6a3b      	ldr	r3, [r7, #32]
 8008896:	2b0c      	cmp	r3, #12
 8008898:	d119      	bne.n	80088ce <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800889a:	69fb      	ldr	r3, [r7, #28]
 800889c:	2b02      	cmp	r3, #2
 800889e:	d116      	bne.n	80088ce <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80088a0:	4b6b      	ldr	r3, [pc, #428]	; (8008a50 <HAL_RCC_OscConfig+0x4c4>)
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d005      	beq.n	80088b8 <HAL_RCC_OscConfig+0x32c>
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	68db      	ldr	r3, [r3, #12]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d101      	bne.n	80088b8 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 80088b4:	2301      	movs	r3, #1
 80088b6:	e2db      	b.n	8008e70 <HAL_RCC_OscConfig+0x8e4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80088b8:	4b65      	ldr	r3, [pc, #404]	; (8008a50 <HAL_RCC_OscConfig+0x4c4>)
 80088ba:	685b      	ldr	r3, [r3, #4]
 80088bc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	691b      	ldr	r3, [r3, #16]
 80088c4:	061b      	lsls	r3, r3, #24
 80088c6:	4962      	ldr	r1, [pc, #392]	; (8008a50 <HAL_RCC_OscConfig+0x4c4>)
 80088c8:	4313      	orrs	r3, r2
 80088ca:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80088cc:	e040      	b.n	8008950 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	68db      	ldr	r3, [r3, #12]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d023      	beq.n	800891e <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80088d6:	4b5e      	ldr	r3, [pc, #376]	; (8008a50 <HAL_RCC_OscConfig+0x4c4>)
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	4a5d      	ldr	r2, [pc, #372]	; (8008a50 <HAL_RCC_OscConfig+0x4c4>)
 80088dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80088e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088e2:	f7fb ff53 	bl	800478c <HAL_GetTick>
 80088e6:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80088e8:	e008      	b.n	80088fc <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80088ea:	f7fb ff4f 	bl	800478c <HAL_GetTick>
 80088ee:	4602      	mov	r2, r0
 80088f0:	69bb      	ldr	r3, [r7, #24]
 80088f2:	1ad3      	subs	r3, r2, r3
 80088f4:	2b02      	cmp	r3, #2
 80088f6:	d901      	bls.n	80088fc <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80088f8:	2303      	movs	r3, #3
 80088fa:	e2b9      	b.n	8008e70 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80088fc:	4b54      	ldr	r3, [pc, #336]	; (8008a50 <HAL_RCC_OscConfig+0x4c4>)
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008904:	2b00      	cmp	r3, #0
 8008906:	d0f0      	beq.n	80088ea <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008908:	4b51      	ldr	r3, [pc, #324]	; (8008a50 <HAL_RCC_OscConfig+0x4c4>)
 800890a:	685b      	ldr	r3, [r3, #4]
 800890c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	691b      	ldr	r3, [r3, #16]
 8008914:	061b      	lsls	r3, r3, #24
 8008916:	494e      	ldr	r1, [pc, #312]	; (8008a50 <HAL_RCC_OscConfig+0x4c4>)
 8008918:	4313      	orrs	r3, r2
 800891a:	604b      	str	r3, [r1, #4]
 800891c:	e018      	b.n	8008950 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800891e:	4b4c      	ldr	r3, [pc, #304]	; (8008a50 <HAL_RCC_OscConfig+0x4c4>)
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	4a4b      	ldr	r2, [pc, #300]	; (8008a50 <HAL_RCC_OscConfig+0x4c4>)
 8008924:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008928:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800892a:	f7fb ff2f 	bl	800478c <HAL_GetTick>
 800892e:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008930:	e008      	b.n	8008944 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008932:	f7fb ff2b 	bl	800478c <HAL_GetTick>
 8008936:	4602      	mov	r2, r0
 8008938:	69bb      	ldr	r3, [r7, #24]
 800893a:	1ad3      	subs	r3, r2, r3
 800893c:	2b02      	cmp	r3, #2
 800893e:	d901      	bls.n	8008944 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8008940:	2303      	movs	r3, #3
 8008942:	e295      	b.n	8008e70 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008944:	4b42      	ldr	r3, [pc, #264]	; (8008a50 <HAL_RCC_OscConfig+0x4c4>)
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800894c:	2b00      	cmp	r3, #0
 800894e:	d1f0      	bne.n	8008932 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	f003 0308 	and.w	r3, r3, #8
 8008958:	2b00      	cmp	r3, #0
 800895a:	f000 8082 	beq.w	8008a62 <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	695b      	ldr	r3, [r3, #20]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d05f      	beq.n	8008a26 <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8008966:	4b3a      	ldr	r3, [pc, #232]	; (8008a50 <HAL_RCC_OscConfig+0x4c4>)
 8008968:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800896c:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	699a      	ldr	r2, [r3, #24]
 8008972:	693b      	ldr	r3, [r7, #16]
 8008974:	f003 0310 	and.w	r3, r3, #16
 8008978:	429a      	cmp	r2, r3
 800897a:	d037      	beq.n	80089ec <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800897c:	693b      	ldr	r3, [r7, #16]
 800897e:	f003 0302 	and.w	r3, r3, #2
 8008982:	2b00      	cmp	r3, #0
 8008984:	d006      	beq.n	8008994 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8008986:	693b      	ldr	r3, [r7, #16]
 8008988:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800898c:	2b00      	cmp	r3, #0
 800898e:	d101      	bne.n	8008994 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8008990:	2301      	movs	r3, #1
 8008992:	e26d      	b.n	8008e70 <HAL_RCC_OscConfig+0x8e4>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8008994:	693b      	ldr	r3, [r7, #16]
 8008996:	f003 0301 	and.w	r3, r3, #1
 800899a:	2b00      	cmp	r3, #0
 800899c:	d01b      	beq.n	80089d6 <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 800899e:	4b2c      	ldr	r3, [pc, #176]	; (8008a50 <HAL_RCC_OscConfig+0x4c4>)
 80089a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80089a4:	4a2a      	ldr	r2, [pc, #168]	; (8008a50 <HAL_RCC_OscConfig+0x4c4>)
 80089a6:	f023 0301 	bic.w	r3, r3, #1
 80089aa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80089ae:	f7fb feed 	bl	800478c <HAL_GetTick>
 80089b2:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80089b4:	e008      	b.n	80089c8 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80089b6:	f7fb fee9 	bl	800478c <HAL_GetTick>
 80089ba:	4602      	mov	r2, r0
 80089bc:	69bb      	ldr	r3, [r7, #24]
 80089be:	1ad3      	subs	r3, r2, r3
 80089c0:	2b11      	cmp	r3, #17
 80089c2:	d901      	bls.n	80089c8 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 80089c4:	2303      	movs	r3, #3
 80089c6:	e253      	b.n	8008e70 <HAL_RCC_OscConfig+0x8e4>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80089c8:	4b21      	ldr	r3, [pc, #132]	; (8008a50 <HAL_RCC_OscConfig+0x4c4>)
 80089ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80089ce:	f003 0302 	and.w	r3, r3, #2
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d1ef      	bne.n	80089b6 <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 80089d6:	4b1e      	ldr	r3, [pc, #120]	; (8008a50 <HAL_RCC_OscConfig+0x4c4>)
 80089d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80089dc:	f023 0210 	bic.w	r2, r3, #16
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	699b      	ldr	r3, [r3, #24]
 80089e4:	491a      	ldr	r1, [pc, #104]	; (8008a50 <HAL_RCC_OscConfig+0x4c4>)
 80089e6:	4313      	orrs	r3, r2
 80089e8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80089ec:	4b18      	ldr	r3, [pc, #96]	; (8008a50 <HAL_RCC_OscConfig+0x4c4>)
 80089ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80089f2:	4a17      	ldr	r2, [pc, #92]	; (8008a50 <HAL_RCC_OscConfig+0x4c4>)
 80089f4:	f043 0301 	orr.w	r3, r3, #1
 80089f8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80089fc:	f7fb fec6 	bl	800478c <HAL_GetTick>
 8008a00:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008a02:	e008      	b.n	8008a16 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008a04:	f7fb fec2 	bl	800478c <HAL_GetTick>
 8008a08:	4602      	mov	r2, r0
 8008a0a:	69bb      	ldr	r3, [r7, #24]
 8008a0c:	1ad3      	subs	r3, r2, r3
 8008a0e:	2b11      	cmp	r3, #17
 8008a10:	d901      	bls.n	8008a16 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8008a12:	2303      	movs	r3, #3
 8008a14:	e22c      	b.n	8008e70 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008a16:	4b0e      	ldr	r3, [pc, #56]	; (8008a50 <HAL_RCC_OscConfig+0x4c4>)
 8008a18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008a1c:	f003 0302 	and.w	r3, r3, #2
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d0ef      	beq.n	8008a04 <HAL_RCC_OscConfig+0x478>
 8008a24:	e01d      	b.n	8008a62 <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008a26:	4b0a      	ldr	r3, [pc, #40]	; (8008a50 <HAL_RCC_OscConfig+0x4c4>)
 8008a28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008a2c:	4a08      	ldr	r2, [pc, #32]	; (8008a50 <HAL_RCC_OscConfig+0x4c4>)
 8008a2e:	f023 0301 	bic.w	r3, r3, #1
 8008a32:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a36:	f7fb fea9 	bl	800478c <HAL_GetTick>
 8008a3a:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008a3c:	e00a      	b.n	8008a54 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008a3e:	f7fb fea5 	bl	800478c <HAL_GetTick>
 8008a42:	4602      	mov	r2, r0
 8008a44:	69bb      	ldr	r3, [r7, #24]
 8008a46:	1ad3      	subs	r3, r2, r3
 8008a48:	2b11      	cmp	r3, #17
 8008a4a:	d903      	bls.n	8008a54 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8008a4c:	2303      	movs	r3, #3
 8008a4e:	e20f      	b.n	8008e70 <HAL_RCC_OscConfig+0x8e4>
 8008a50:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008a54:	4b83      	ldr	r3, [pc, #524]	; (8008c64 <HAL_RCC_OscConfig+0x6d8>)
 8008a56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008a5a:	f003 0302 	and.w	r3, r3, #2
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d1ed      	bne.n	8008a3e <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	f003 0304 	and.w	r3, r3, #4
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	f000 80bd 	beq.w	8008bea <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008a70:	2300      	movs	r3, #0
 8008a72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8008a76:	4b7b      	ldr	r3, [pc, #492]	; (8008c64 <HAL_RCC_OscConfig+0x6d8>)
 8008a78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d10e      	bne.n	8008aa0 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008a82:	4b78      	ldr	r3, [pc, #480]	; (8008c64 <HAL_RCC_OscConfig+0x6d8>)
 8008a84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a86:	4a77      	ldr	r2, [pc, #476]	; (8008c64 <HAL_RCC_OscConfig+0x6d8>)
 8008a88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a8c:	6593      	str	r3, [r2, #88]	; 0x58
 8008a8e:	4b75      	ldr	r3, [pc, #468]	; (8008c64 <HAL_RCC_OscConfig+0x6d8>)
 8008a90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a96:	60fb      	str	r3, [r7, #12]
 8008a98:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8008a9a:	2301      	movs	r3, #1
 8008a9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008aa0:	4b71      	ldr	r3, [pc, #452]	; (8008c68 <HAL_RCC_OscConfig+0x6dc>)
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d118      	bne.n	8008ade <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008aac:	4b6e      	ldr	r3, [pc, #440]	; (8008c68 <HAL_RCC_OscConfig+0x6dc>)
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	4a6d      	ldr	r2, [pc, #436]	; (8008c68 <HAL_RCC_OscConfig+0x6dc>)
 8008ab2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008ab6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008ab8:	f7fb fe68 	bl	800478c <HAL_GetTick>
 8008abc:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008abe:	e008      	b.n	8008ad2 <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008ac0:	f7fb fe64 	bl	800478c <HAL_GetTick>
 8008ac4:	4602      	mov	r2, r0
 8008ac6:	69bb      	ldr	r3, [r7, #24]
 8008ac8:	1ad3      	subs	r3, r2, r3
 8008aca:	2b02      	cmp	r3, #2
 8008acc:	d901      	bls.n	8008ad2 <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 8008ace:	2303      	movs	r3, #3
 8008ad0:	e1ce      	b.n	8008e70 <HAL_RCC_OscConfig+0x8e4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008ad2:	4b65      	ldr	r3, [pc, #404]	; (8008c68 <HAL_RCC_OscConfig+0x6dc>)
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d0f0      	beq.n	8008ac0 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	689b      	ldr	r3, [r3, #8]
 8008ae2:	f003 0301 	and.w	r3, r3, #1
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d02c      	beq.n	8008b44 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8008aea:	4b5e      	ldr	r3, [pc, #376]	; (8008c64 <HAL_RCC_OscConfig+0x6d8>)
 8008aec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008af0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	689b      	ldr	r3, [r3, #8]
 8008af8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008afc:	4959      	ldr	r1, [pc, #356]	; (8008c64 <HAL_RCC_OscConfig+0x6d8>)
 8008afe:	4313      	orrs	r3, r2
 8008b00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	689b      	ldr	r3, [r3, #8]
 8008b08:	f003 0304 	and.w	r3, r3, #4
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d010      	beq.n	8008b32 <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8008b10:	4b54      	ldr	r3, [pc, #336]	; (8008c64 <HAL_RCC_OscConfig+0x6d8>)
 8008b12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b16:	4a53      	ldr	r2, [pc, #332]	; (8008c64 <HAL_RCC_OscConfig+0x6d8>)
 8008b18:	f043 0304 	orr.w	r3, r3, #4
 8008b1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8008b20:	4b50      	ldr	r3, [pc, #320]	; (8008c64 <HAL_RCC_OscConfig+0x6d8>)
 8008b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b26:	4a4f      	ldr	r2, [pc, #316]	; (8008c64 <HAL_RCC_OscConfig+0x6d8>)
 8008b28:	f043 0301 	orr.w	r3, r3, #1
 8008b2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008b30:	e018      	b.n	8008b64 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8008b32:	4b4c      	ldr	r3, [pc, #304]	; (8008c64 <HAL_RCC_OscConfig+0x6d8>)
 8008b34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b38:	4a4a      	ldr	r2, [pc, #296]	; (8008c64 <HAL_RCC_OscConfig+0x6d8>)
 8008b3a:	f043 0301 	orr.w	r3, r3, #1
 8008b3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008b42:	e00f      	b.n	8008b64 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8008b44:	4b47      	ldr	r3, [pc, #284]	; (8008c64 <HAL_RCC_OscConfig+0x6d8>)
 8008b46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b4a:	4a46      	ldr	r2, [pc, #280]	; (8008c64 <HAL_RCC_OscConfig+0x6d8>)
 8008b4c:	f023 0301 	bic.w	r3, r3, #1
 8008b50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8008b54:	4b43      	ldr	r3, [pc, #268]	; (8008c64 <HAL_RCC_OscConfig+0x6d8>)
 8008b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b5a:	4a42      	ldr	r2, [pc, #264]	; (8008c64 <HAL_RCC_OscConfig+0x6d8>)
 8008b5c:	f023 0304 	bic.w	r3, r3, #4
 8008b60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	689b      	ldr	r3, [r3, #8]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d016      	beq.n	8008b9a <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b6c:	f7fb fe0e 	bl	800478c <HAL_GetTick>
 8008b70:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008b72:	e00a      	b.n	8008b8a <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008b74:	f7fb fe0a 	bl	800478c <HAL_GetTick>
 8008b78:	4602      	mov	r2, r0
 8008b7a:	69bb      	ldr	r3, [r7, #24]
 8008b7c:	1ad3      	subs	r3, r2, r3
 8008b7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b82:	4293      	cmp	r3, r2
 8008b84:	d901      	bls.n	8008b8a <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 8008b86:	2303      	movs	r3, #3
 8008b88:	e172      	b.n	8008e70 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008b8a:	4b36      	ldr	r3, [pc, #216]	; (8008c64 <HAL_RCC_OscConfig+0x6d8>)
 8008b8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b90:	f003 0302 	and.w	r3, r3, #2
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d0ed      	beq.n	8008b74 <HAL_RCC_OscConfig+0x5e8>
 8008b98:	e01d      	b.n	8008bd6 <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b9a:	f7fb fdf7 	bl	800478c <HAL_GetTick>
 8008b9e:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008ba0:	e00a      	b.n	8008bb8 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008ba2:	f7fb fdf3 	bl	800478c <HAL_GetTick>
 8008ba6:	4602      	mov	r2, r0
 8008ba8:	69bb      	ldr	r3, [r7, #24]
 8008baa:	1ad3      	subs	r3, r2, r3
 8008bac:	f241 3288 	movw	r2, #5000	; 0x1388
 8008bb0:	4293      	cmp	r3, r2
 8008bb2:	d901      	bls.n	8008bb8 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8008bb4:	2303      	movs	r3, #3
 8008bb6:	e15b      	b.n	8008e70 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008bb8:	4b2a      	ldr	r3, [pc, #168]	; (8008c64 <HAL_RCC_OscConfig+0x6d8>)
 8008bba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008bbe:	f003 0302 	and.w	r3, r3, #2
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d1ed      	bne.n	8008ba2 <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8008bc6:	4b27      	ldr	r3, [pc, #156]	; (8008c64 <HAL_RCC_OscConfig+0x6d8>)
 8008bc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008bcc:	4a25      	ldr	r2, [pc, #148]	; (8008c64 <HAL_RCC_OscConfig+0x6d8>)
 8008bce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008bd2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008bd6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008bda:	2b01      	cmp	r3, #1
 8008bdc:	d105      	bne.n	8008bea <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008bde:	4b21      	ldr	r3, [pc, #132]	; (8008c64 <HAL_RCC_OscConfig+0x6d8>)
 8008be0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008be2:	4a20      	ldr	r2, [pc, #128]	; (8008c64 <HAL_RCC_OscConfig+0x6d8>)
 8008be4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008be8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	f003 0320 	and.w	r3, r3, #32
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d041      	beq.n	8008c7a <HAL_RCC_OscConfig+0x6ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d01c      	beq.n	8008c38 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008bfe:	4b19      	ldr	r3, [pc, #100]	; (8008c64 <HAL_RCC_OscConfig+0x6d8>)
 8008c00:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008c04:	4a17      	ldr	r2, [pc, #92]	; (8008c64 <HAL_RCC_OscConfig+0x6d8>)
 8008c06:	f043 0301 	orr.w	r3, r3, #1
 8008c0a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c0e:	f7fb fdbd 	bl	800478c <HAL_GetTick>
 8008c12:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008c14:	e008      	b.n	8008c28 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008c16:	f7fb fdb9 	bl	800478c <HAL_GetTick>
 8008c1a:	4602      	mov	r2, r0
 8008c1c:	69bb      	ldr	r3, [r7, #24]
 8008c1e:	1ad3      	subs	r3, r2, r3
 8008c20:	2b02      	cmp	r3, #2
 8008c22:	d901      	bls.n	8008c28 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8008c24:	2303      	movs	r3, #3
 8008c26:	e123      	b.n	8008e70 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008c28:	4b0e      	ldr	r3, [pc, #56]	; (8008c64 <HAL_RCC_OscConfig+0x6d8>)
 8008c2a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008c2e:	f003 0302 	and.w	r3, r3, #2
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d0ef      	beq.n	8008c16 <HAL_RCC_OscConfig+0x68a>
 8008c36:	e020      	b.n	8008c7a <HAL_RCC_OscConfig+0x6ee>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008c38:	4b0a      	ldr	r3, [pc, #40]	; (8008c64 <HAL_RCC_OscConfig+0x6d8>)
 8008c3a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008c3e:	4a09      	ldr	r2, [pc, #36]	; (8008c64 <HAL_RCC_OscConfig+0x6d8>)
 8008c40:	f023 0301 	bic.w	r3, r3, #1
 8008c44:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c48:	f7fb fda0 	bl	800478c <HAL_GetTick>
 8008c4c:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008c4e:	e00d      	b.n	8008c6c <HAL_RCC_OscConfig+0x6e0>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008c50:	f7fb fd9c 	bl	800478c <HAL_GetTick>
 8008c54:	4602      	mov	r2, r0
 8008c56:	69bb      	ldr	r3, [r7, #24]
 8008c58:	1ad3      	subs	r3, r2, r3
 8008c5a:	2b02      	cmp	r3, #2
 8008c5c:	d906      	bls.n	8008c6c <HAL_RCC_OscConfig+0x6e0>
        {
          return HAL_TIMEOUT;
 8008c5e:	2303      	movs	r3, #3
 8008c60:	e106      	b.n	8008e70 <HAL_RCC_OscConfig+0x8e4>
 8008c62:	bf00      	nop
 8008c64:	40021000 	.word	0x40021000
 8008c68:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008c6c:	4b82      	ldr	r3, [pc, #520]	; (8008e78 <HAL_RCC_OscConfig+0x8ec>)
 8008c6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008c72:	f003 0302 	and.w	r3, r3, #2
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d1ea      	bne.n	8008c50 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	f000 80f5 	beq.w	8008e6e <HAL_RCC_OscConfig+0x8e2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c88:	2b02      	cmp	r3, #2
 8008c8a:	f040 80cb 	bne.w	8008e24 <HAL_RCC_OscConfig+0x898>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8008c8e:	4b7a      	ldr	r3, [pc, #488]	; (8008e78 <HAL_RCC_OscConfig+0x8ec>)
 8008c90:	68db      	ldr	r3, [r3, #12]
 8008c92:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8008c94:	69fb      	ldr	r3, [r7, #28]
 8008c96:	f003 0203 	and.w	r2, r3, #3
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c9e:	429a      	cmp	r2, r3
 8008ca0:	d12c      	bne.n	8008cfc <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008ca2:	69fb      	ldr	r3, [r7, #28]
 8008ca4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cac:	3b01      	subs	r3, #1
 8008cae:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8008cb0:	429a      	cmp	r2, r3
 8008cb2:	d123      	bne.n	8008cfc <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008cb4:	69fb      	ldr	r3, [r7, #28]
 8008cb6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cbe:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008cc0:	429a      	cmp	r2, r3
 8008cc2:	d11b      	bne.n	8008cfc <HAL_RCC_OscConfig+0x770>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008cc4:	69fb      	ldr	r3, [r7, #28]
 8008cc6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cce:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008cd0:	429a      	cmp	r2, r3
 8008cd2:	d113      	bne.n	8008cfc <HAL_RCC_OscConfig+0x770>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008cd4:	69fb      	ldr	r3, [r7, #28]
 8008cd6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cde:	085b      	lsrs	r3, r3, #1
 8008ce0:	3b01      	subs	r3, #1
 8008ce2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008ce4:	429a      	cmp	r2, r3
 8008ce6:	d109      	bne.n	8008cfc <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8008ce8:	69fb      	ldr	r3, [r7, #28]
 8008cea:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cf2:	085b      	lsrs	r3, r3, #1
 8008cf4:	3b01      	subs	r3, #1
 8008cf6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008cf8:	429a      	cmp	r2, r3
 8008cfa:	d06d      	beq.n	8008dd8 <HAL_RCC_OscConfig+0x84c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008cfc:	6a3b      	ldr	r3, [r7, #32]
 8008cfe:	2b0c      	cmp	r3, #12
 8008d00:	d068      	beq.n	8008dd4 <HAL_RCC_OscConfig+0x848>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8008d02:	4b5d      	ldr	r3, [pc, #372]	; (8008e78 <HAL_RCC_OscConfig+0x8ec>)
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d105      	bne.n	8008d1a <HAL_RCC_OscConfig+0x78e>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8008d0e:	4b5a      	ldr	r3, [pc, #360]	; (8008e78 <HAL_RCC_OscConfig+0x8ec>)
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d001      	beq.n	8008d1e <HAL_RCC_OscConfig+0x792>
#endif
            )
          {
            return HAL_ERROR;
 8008d1a:	2301      	movs	r3, #1
 8008d1c:	e0a8      	b.n	8008e70 <HAL_RCC_OscConfig+0x8e4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8008d1e:	4b56      	ldr	r3, [pc, #344]	; (8008e78 <HAL_RCC_OscConfig+0x8ec>)
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	4a55      	ldr	r2, [pc, #340]	; (8008e78 <HAL_RCC_OscConfig+0x8ec>)
 8008d24:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008d28:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008d2a:	f7fb fd2f 	bl	800478c <HAL_GetTick>
 8008d2e:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008d30:	e008      	b.n	8008d44 <HAL_RCC_OscConfig+0x7b8>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008d32:	f7fb fd2b 	bl	800478c <HAL_GetTick>
 8008d36:	4602      	mov	r2, r0
 8008d38:	69bb      	ldr	r3, [r7, #24]
 8008d3a:	1ad3      	subs	r3, r2, r3
 8008d3c:	2b02      	cmp	r3, #2
 8008d3e:	d901      	bls.n	8008d44 <HAL_RCC_OscConfig+0x7b8>
              {
                return HAL_TIMEOUT;
 8008d40:	2303      	movs	r3, #3
 8008d42:	e095      	b.n	8008e70 <HAL_RCC_OscConfig+0x8e4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008d44:	4b4c      	ldr	r3, [pc, #304]	; (8008e78 <HAL_RCC_OscConfig+0x8ec>)
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d1f0      	bne.n	8008d32 <HAL_RCC_OscConfig+0x7a6>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008d50:	4b49      	ldr	r3, [pc, #292]	; (8008e78 <HAL_RCC_OscConfig+0x8ec>)
 8008d52:	68da      	ldr	r2, [r3, #12]
 8008d54:	4b49      	ldr	r3, [pc, #292]	; (8008e7c <HAL_RCC_OscConfig+0x8f0>)
 8008d56:	4013      	ands	r3, r2
 8008d58:	687a      	ldr	r2, [r7, #4]
 8008d5a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8008d5c:	687a      	ldr	r2, [r7, #4]
 8008d5e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008d60:	3a01      	subs	r2, #1
 8008d62:	0112      	lsls	r2, r2, #4
 8008d64:	4311      	orrs	r1, r2
 8008d66:	687a      	ldr	r2, [r7, #4]
 8008d68:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008d6a:	0212      	lsls	r2, r2, #8
 8008d6c:	4311      	orrs	r1, r2
 8008d6e:	687a      	ldr	r2, [r7, #4]
 8008d70:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8008d72:	0852      	lsrs	r2, r2, #1
 8008d74:	3a01      	subs	r2, #1
 8008d76:	0552      	lsls	r2, r2, #21
 8008d78:	4311      	orrs	r1, r2
 8008d7a:	687a      	ldr	r2, [r7, #4]
 8008d7c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8008d7e:	0852      	lsrs	r2, r2, #1
 8008d80:	3a01      	subs	r2, #1
 8008d82:	0652      	lsls	r2, r2, #25
 8008d84:	4311      	orrs	r1, r2
 8008d86:	687a      	ldr	r2, [r7, #4]
 8008d88:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8008d8a:	06d2      	lsls	r2, r2, #27
 8008d8c:	430a      	orrs	r2, r1
 8008d8e:	493a      	ldr	r1, [pc, #232]	; (8008e78 <HAL_RCC_OscConfig+0x8ec>)
 8008d90:	4313      	orrs	r3, r2
 8008d92:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8008d94:	4b38      	ldr	r3, [pc, #224]	; (8008e78 <HAL_RCC_OscConfig+0x8ec>)
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	4a37      	ldr	r2, [pc, #220]	; (8008e78 <HAL_RCC_OscConfig+0x8ec>)
 8008d9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008d9e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008da0:	4b35      	ldr	r3, [pc, #212]	; (8008e78 <HAL_RCC_OscConfig+0x8ec>)
 8008da2:	68db      	ldr	r3, [r3, #12]
 8008da4:	4a34      	ldr	r2, [pc, #208]	; (8008e78 <HAL_RCC_OscConfig+0x8ec>)
 8008da6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008daa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008dac:	f7fb fcee 	bl	800478c <HAL_GetTick>
 8008db0:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008db2:	e008      	b.n	8008dc6 <HAL_RCC_OscConfig+0x83a>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008db4:	f7fb fcea 	bl	800478c <HAL_GetTick>
 8008db8:	4602      	mov	r2, r0
 8008dba:	69bb      	ldr	r3, [r7, #24]
 8008dbc:	1ad3      	subs	r3, r2, r3
 8008dbe:	2b02      	cmp	r3, #2
 8008dc0:	d901      	bls.n	8008dc6 <HAL_RCC_OscConfig+0x83a>
              {
                return HAL_TIMEOUT;
 8008dc2:	2303      	movs	r3, #3
 8008dc4:	e054      	b.n	8008e70 <HAL_RCC_OscConfig+0x8e4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008dc6:	4b2c      	ldr	r3, [pc, #176]	; (8008e78 <HAL_RCC_OscConfig+0x8ec>)
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d0f0      	beq.n	8008db4 <HAL_RCC_OscConfig+0x828>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008dd2:	e04c      	b.n	8008e6e <HAL_RCC_OscConfig+0x8e2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8008dd4:	2301      	movs	r3, #1
 8008dd6:	e04b      	b.n	8008e70 <HAL_RCC_OscConfig+0x8e4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008dd8:	4b27      	ldr	r3, [pc, #156]	; (8008e78 <HAL_RCC_OscConfig+0x8ec>)
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d144      	bne.n	8008e6e <HAL_RCC_OscConfig+0x8e2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8008de4:	4b24      	ldr	r3, [pc, #144]	; (8008e78 <HAL_RCC_OscConfig+0x8ec>)
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	4a23      	ldr	r2, [pc, #140]	; (8008e78 <HAL_RCC_OscConfig+0x8ec>)
 8008dea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008dee:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008df0:	4b21      	ldr	r3, [pc, #132]	; (8008e78 <HAL_RCC_OscConfig+0x8ec>)
 8008df2:	68db      	ldr	r3, [r3, #12]
 8008df4:	4a20      	ldr	r2, [pc, #128]	; (8008e78 <HAL_RCC_OscConfig+0x8ec>)
 8008df6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008dfa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008dfc:	f7fb fcc6 	bl	800478c <HAL_GetTick>
 8008e00:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008e02:	e008      	b.n	8008e16 <HAL_RCC_OscConfig+0x88a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008e04:	f7fb fcc2 	bl	800478c <HAL_GetTick>
 8008e08:	4602      	mov	r2, r0
 8008e0a:	69bb      	ldr	r3, [r7, #24]
 8008e0c:	1ad3      	subs	r3, r2, r3
 8008e0e:	2b02      	cmp	r3, #2
 8008e10:	d901      	bls.n	8008e16 <HAL_RCC_OscConfig+0x88a>
            {
              return HAL_TIMEOUT;
 8008e12:	2303      	movs	r3, #3
 8008e14:	e02c      	b.n	8008e70 <HAL_RCC_OscConfig+0x8e4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008e16:	4b18      	ldr	r3, [pc, #96]	; (8008e78 <HAL_RCC_OscConfig+0x8ec>)
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d0f0      	beq.n	8008e04 <HAL_RCC_OscConfig+0x878>
 8008e22:	e024      	b.n	8008e6e <HAL_RCC_OscConfig+0x8e2>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008e24:	6a3b      	ldr	r3, [r7, #32]
 8008e26:	2b0c      	cmp	r3, #12
 8008e28:	d01f      	beq.n	8008e6a <HAL_RCC_OscConfig+0x8de>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008e2a:	4b13      	ldr	r3, [pc, #76]	; (8008e78 <HAL_RCC_OscConfig+0x8ec>)
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	4a12      	ldr	r2, [pc, #72]	; (8008e78 <HAL_RCC_OscConfig+0x8ec>)
 8008e30:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008e34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e36:	f7fb fca9 	bl	800478c <HAL_GetTick>
 8008e3a:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008e3c:	e008      	b.n	8008e50 <HAL_RCC_OscConfig+0x8c4>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008e3e:	f7fb fca5 	bl	800478c <HAL_GetTick>
 8008e42:	4602      	mov	r2, r0
 8008e44:	69bb      	ldr	r3, [r7, #24]
 8008e46:	1ad3      	subs	r3, r2, r3
 8008e48:	2b02      	cmp	r3, #2
 8008e4a:	d901      	bls.n	8008e50 <HAL_RCC_OscConfig+0x8c4>
          {
            return HAL_TIMEOUT;
 8008e4c:	2303      	movs	r3, #3
 8008e4e:	e00f      	b.n	8008e70 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008e50:	4b09      	ldr	r3, [pc, #36]	; (8008e78 <HAL_RCC_OscConfig+0x8ec>)
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d1f0      	bne.n	8008e3e <HAL_RCC_OscConfig+0x8b2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8008e5c:	4b06      	ldr	r3, [pc, #24]	; (8008e78 <HAL_RCC_OscConfig+0x8ec>)
 8008e5e:	68da      	ldr	r2, [r3, #12]
 8008e60:	4905      	ldr	r1, [pc, #20]	; (8008e78 <HAL_RCC_OscConfig+0x8ec>)
 8008e62:	4b07      	ldr	r3, [pc, #28]	; (8008e80 <HAL_RCC_OscConfig+0x8f4>)
 8008e64:	4013      	ands	r3, r2
 8008e66:	60cb      	str	r3, [r1, #12]
 8008e68:	e001      	b.n	8008e6e <HAL_RCC_OscConfig+0x8e2>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8008e6a:	2301      	movs	r3, #1
 8008e6c:	e000      	b.n	8008e70 <HAL_RCC_OscConfig+0x8e4>
      }
    }
  }
  return HAL_OK;
 8008e6e:	2300      	movs	r3, #0
}
 8008e70:	4618      	mov	r0, r3
 8008e72:	3728      	adds	r7, #40	; 0x28
 8008e74:	46bd      	mov	sp, r7
 8008e76:	bd80      	pop	{r7, pc}
 8008e78:	40021000 	.word	0x40021000
 8008e7c:	019d800c 	.word	0x019d800c
 8008e80:	feeefffc 	.word	0xfeeefffc

08008e84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b086      	sub	sp, #24
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
 8008e8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8008e8e:	2300      	movs	r3, #0
 8008e90:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d101      	bne.n	8008e9c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008e98:	2301      	movs	r3, #1
 8008e9a:	e11d      	b.n	80090d8 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008e9c:	4b90      	ldr	r3, [pc, #576]	; (80090e0 <HAL_RCC_ClockConfig+0x25c>)
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	f003 030f 	and.w	r3, r3, #15
 8008ea4:	683a      	ldr	r2, [r7, #0]
 8008ea6:	429a      	cmp	r2, r3
 8008ea8:	d910      	bls.n	8008ecc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008eaa:	4b8d      	ldr	r3, [pc, #564]	; (80090e0 <HAL_RCC_ClockConfig+0x25c>)
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	f023 020f 	bic.w	r2, r3, #15
 8008eb2:	498b      	ldr	r1, [pc, #556]	; (80090e0 <HAL_RCC_ClockConfig+0x25c>)
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	4313      	orrs	r3, r2
 8008eb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008eba:	4b89      	ldr	r3, [pc, #548]	; (80090e0 <HAL_RCC_ClockConfig+0x25c>)
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	f003 030f 	and.w	r3, r3, #15
 8008ec2:	683a      	ldr	r2, [r7, #0]
 8008ec4:	429a      	cmp	r2, r3
 8008ec6:	d001      	beq.n	8008ecc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008ec8:	2301      	movs	r3, #1
 8008eca:	e105      	b.n	80090d8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	f003 0302 	and.w	r3, r3, #2
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d010      	beq.n	8008efa <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	689a      	ldr	r2, [r3, #8]
 8008edc:	4b81      	ldr	r3, [pc, #516]	; (80090e4 <HAL_RCC_ClockConfig+0x260>)
 8008ede:	689b      	ldr	r3, [r3, #8]
 8008ee0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008ee4:	429a      	cmp	r2, r3
 8008ee6:	d908      	bls.n	8008efa <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008ee8:	4b7e      	ldr	r3, [pc, #504]	; (80090e4 <HAL_RCC_ClockConfig+0x260>)
 8008eea:	689b      	ldr	r3, [r3, #8]
 8008eec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	689b      	ldr	r3, [r3, #8]
 8008ef4:	497b      	ldr	r1, [pc, #492]	; (80090e4 <HAL_RCC_ClockConfig+0x260>)
 8008ef6:	4313      	orrs	r3, r2
 8008ef8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	f003 0301 	and.w	r3, r3, #1
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d079      	beq.n	8008ffa <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	685b      	ldr	r3, [r3, #4]
 8008f0a:	2b03      	cmp	r3, #3
 8008f0c:	d11e      	bne.n	8008f4c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008f0e:	4b75      	ldr	r3, [pc, #468]	; (80090e4 <HAL_RCC_ClockConfig+0x260>)
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d101      	bne.n	8008f1e <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8008f1a:	2301      	movs	r3, #1
 8008f1c:	e0dc      	b.n	80090d8 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8008f1e:	f000 fa23 	bl	8009368 <RCC_GetSysClockFreqFromPLLSource>
 8008f22:	4603      	mov	r3, r0
 8008f24:	4a70      	ldr	r2, [pc, #448]	; (80090e8 <HAL_RCC_ClockConfig+0x264>)
 8008f26:	4293      	cmp	r3, r2
 8008f28:	d946      	bls.n	8008fb8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8008f2a:	4b6e      	ldr	r3, [pc, #440]	; (80090e4 <HAL_RCC_ClockConfig+0x260>)
 8008f2c:	689b      	ldr	r3, [r3, #8]
 8008f2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d140      	bne.n	8008fb8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008f36:	4b6b      	ldr	r3, [pc, #428]	; (80090e4 <HAL_RCC_ClockConfig+0x260>)
 8008f38:	689b      	ldr	r3, [r3, #8]
 8008f3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008f3e:	4a69      	ldr	r2, [pc, #420]	; (80090e4 <HAL_RCC_ClockConfig+0x260>)
 8008f40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f44:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8008f46:	2380      	movs	r3, #128	; 0x80
 8008f48:	617b      	str	r3, [r7, #20]
 8008f4a:	e035      	b.n	8008fb8 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	685b      	ldr	r3, [r3, #4]
 8008f50:	2b02      	cmp	r3, #2
 8008f52:	d107      	bne.n	8008f64 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008f54:	4b63      	ldr	r3, [pc, #396]	; (80090e4 <HAL_RCC_ClockConfig+0x260>)
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d115      	bne.n	8008f8c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8008f60:	2301      	movs	r3, #1
 8008f62:	e0b9      	b.n	80090d8 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	685b      	ldr	r3, [r3, #4]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d107      	bne.n	8008f7c <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008f6c:	4b5d      	ldr	r3, [pc, #372]	; (80090e4 <HAL_RCC_ClockConfig+0x260>)
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	f003 0302 	and.w	r3, r3, #2
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d109      	bne.n	8008f8c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8008f78:	2301      	movs	r3, #1
 8008f7a:	e0ad      	b.n	80090d8 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008f7c:	4b59      	ldr	r3, [pc, #356]	; (80090e4 <HAL_RCC_ClockConfig+0x260>)
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d101      	bne.n	8008f8c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8008f88:	2301      	movs	r3, #1
 8008f8a:	e0a5      	b.n	80090d8 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8008f8c:	f000 f8b4 	bl	80090f8 <HAL_RCC_GetSysClockFreq>
 8008f90:	4603      	mov	r3, r0
 8008f92:	4a55      	ldr	r2, [pc, #340]	; (80090e8 <HAL_RCC_ClockConfig+0x264>)
 8008f94:	4293      	cmp	r3, r2
 8008f96:	d90f      	bls.n	8008fb8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8008f98:	4b52      	ldr	r3, [pc, #328]	; (80090e4 <HAL_RCC_ClockConfig+0x260>)
 8008f9a:	689b      	ldr	r3, [r3, #8]
 8008f9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d109      	bne.n	8008fb8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008fa4:	4b4f      	ldr	r3, [pc, #316]	; (80090e4 <HAL_RCC_ClockConfig+0x260>)
 8008fa6:	689b      	ldr	r3, [r3, #8]
 8008fa8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008fac:	4a4d      	ldr	r2, [pc, #308]	; (80090e4 <HAL_RCC_ClockConfig+0x260>)
 8008fae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008fb2:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8008fb4:	2380      	movs	r3, #128	; 0x80
 8008fb6:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008fb8:	4b4a      	ldr	r3, [pc, #296]	; (80090e4 <HAL_RCC_ClockConfig+0x260>)
 8008fba:	689b      	ldr	r3, [r3, #8]
 8008fbc:	f023 0203 	bic.w	r2, r3, #3
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	685b      	ldr	r3, [r3, #4]
 8008fc4:	4947      	ldr	r1, [pc, #284]	; (80090e4 <HAL_RCC_ClockConfig+0x260>)
 8008fc6:	4313      	orrs	r3, r2
 8008fc8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008fca:	f7fb fbdf 	bl	800478c <HAL_GetTick>
 8008fce:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008fd0:	e00a      	b.n	8008fe8 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008fd2:	f7fb fbdb 	bl	800478c <HAL_GetTick>
 8008fd6:	4602      	mov	r2, r0
 8008fd8:	693b      	ldr	r3, [r7, #16]
 8008fda:	1ad3      	subs	r3, r2, r3
 8008fdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8008fe0:	4293      	cmp	r3, r2
 8008fe2:	d901      	bls.n	8008fe8 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8008fe4:	2303      	movs	r3, #3
 8008fe6:	e077      	b.n	80090d8 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008fe8:	4b3e      	ldr	r3, [pc, #248]	; (80090e4 <HAL_RCC_ClockConfig+0x260>)
 8008fea:	689b      	ldr	r3, [r3, #8]
 8008fec:	f003 020c 	and.w	r2, r3, #12
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	685b      	ldr	r3, [r3, #4]
 8008ff4:	009b      	lsls	r3, r3, #2
 8008ff6:	429a      	cmp	r2, r3
 8008ff8:	d1eb      	bne.n	8008fd2 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8008ffa:	697b      	ldr	r3, [r7, #20]
 8008ffc:	2b80      	cmp	r3, #128	; 0x80
 8008ffe:	d105      	bne.n	800900c <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8009000:	4b38      	ldr	r3, [pc, #224]	; (80090e4 <HAL_RCC_ClockConfig+0x260>)
 8009002:	689b      	ldr	r3, [r3, #8]
 8009004:	4a37      	ldr	r2, [pc, #220]	; (80090e4 <HAL_RCC_ClockConfig+0x260>)
 8009006:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800900a:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	f003 0302 	and.w	r3, r3, #2
 8009014:	2b00      	cmp	r3, #0
 8009016:	d010      	beq.n	800903a <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	689a      	ldr	r2, [r3, #8]
 800901c:	4b31      	ldr	r3, [pc, #196]	; (80090e4 <HAL_RCC_ClockConfig+0x260>)
 800901e:	689b      	ldr	r3, [r3, #8]
 8009020:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009024:	429a      	cmp	r2, r3
 8009026:	d208      	bcs.n	800903a <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009028:	4b2e      	ldr	r3, [pc, #184]	; (80090e4 <HAL_RCC_ClockConfig+0x260>)
 800902a:	689b      	ldr	r3, [r3, #8]
 800902c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	689b      	ldr	r3, [r3, #8]
 8009034:	492b      	ldr	r1, [pc, #172]	; (80090e4 <HAL_RCC_ClockConfig+0x260>)
 8009036:	4313      	orrs	r3, r2
 8009038:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800903a:	4b29      	ldr	r3, [pc, #164]	; (80090e0 <HAL_RCC_ClockConfig+0x25c>)
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	f003 030f 	and.w	r3, r3, #15
 8009042:	683a      	ldr	r2, [r7, #0]
 8009044:	429a      	cmp	r2, r3
 8009046:	d210      	bcs.n	800906a <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009048:	4b25      	ldr	r3, [pc, #148]	; (80090e0 <HAL_RCC_ClockConfig+0x25c>)
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	f023 020f 	bic.w	r2, r3, #15
 8009050:	4923      	ldr	r1, [pc, #140]	; (80090e0 <HAL_RCC_ClockConfig+0x25c>)
 8009052:	683b      	ldr	r3, [r7, #0]
 8009054:	4313      	orrs	r3, r2
 8009056:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009058:	4b21      	ldr	r3, [pc, #132]	; (80090e0 <HAL_RCC_ClockConfig+0x25c>)
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	f003 030f 	and.w	r3, r3, #15
 8009060:	683a      	ldr	r2, [r7, #0]
 8009062:	429a      	cmp	r2, r3
 8009064:	d001      	beq.n	800906a <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8009066:	2301      	movs	r3, #1
 8009068:	e036      	b.n	80090d8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	f003 0304 	and.w	r3, r3, #4
 8009072:	2b00      	cmp	r3, #0
 8009074:	d008      	beq.n	8009088 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009076:	4b1b      	ldr	r3, [pc, #108]	; (80090e4 <HAL_RCC_ClockConfig+0x260>)
 8009078:	689b      	ldr	r3, [r3, #8]
 800907a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	68db      	ldr	r3, [r3, #12]
 8009082:	4918      	ldr	r1, [pc, #96]	; (80090e4 <HAL_RCC_ClockConfig+0x260>)
 8009084:	4313      	orrs	r3, r2
 8009086:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	f003 0308 	and.w	r3, r3, #8
 8009090:	2b00      	cmp	r3, #0
 8009092:	d009      	beq.n	80090a8 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009094:	4b13      	ldr	r3, [pc, #76]	; (80090e4 <HAL_RCC_ClockConfig+0x260>)
 8009096:	689b      	ldr	r3, [r3, #8]
 8009098:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	691b      	ldr	r3, [r3, #16]
 80090a0:	00db      	lsls	r3, r3, #3
 80090a2:	4910      	ldr	r1, [pc, #64]	; (80090e4 <HAL_RCC_ClockConfig+0x260>)
 80090a4:	4313      	orrs	r3, r2
 80090a6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80090a8:	f000 f826 	bl	80090f8 <HAL_RCC_GetSysClockFreq>
 80090ac:	4602      	mov	r2, r0
 80090ae:	4b0d      	ldr	r3, [pc, #52]	; (80090e4 <HAL_RCC_ClockConfig+0x260>)
 80090b0:	689b      	ldr	r3, [r3, #8]
 80090b2:	091b      	lsrs	r3, r3, #4
 80090b4:	f003 030f 	and.w	r3, r3, #15
 80090b8:	490c      	ldr	r1, [pc, #48]	; (80090ec <HAL_RCC_ClockConfig+0x268>)
 80090ba:	5ccb      	ldrb	r3, [r1, r3]
 80090bc:	f003 031f 	and.w	r3, r3, #31
 80090c0:	fa22 f303 	lsr.w	r3, r2, r3
 80090c4:	4a0a      	ldr	r2, [pc, #40]	; (80090f0 <HAL_RCC_ClockConfig+0x26c>)
 80090c6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80090c8:	4b0a      	ldr	r3, [pc, #40]	; (80090f4 <HAL_RCC_ClockConfig+0x270>)
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	4618      	mov	r0, r3
 80090ce:	f7fb f96f 	bl	80043b0 <HAL_InitTick>
 80090d2:	4603      	mov	r3, r0
 80090d4:	73fb      	strb	r3, [r7, #15]

  return status;
 80090d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80090d8:	4618      	mov	r0, r3
 80090da:	3718      	adds	r7, #24
 80090dc:	46bd      	mov	sp, r7
 80090de:	bd80      	pop	{r7, pc}
 80090e0:	40022000 	.word	0x40022000
 80090e4:	40021000 	.word	0x40021000
 80090e8:	04c4b400 	.word	0x04c4b400
 80090ec:	0801502c 	.word	0x0801502c
 80090f0:	20000184 	.word	0x20000184
 80090f4:	20000188 	.word	0x20000188

080090f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80090f8:	b480      	push	{r7}
 80090fa:	b089      	sub	sp, #36	; 0x24
 80090fc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80090fe:	2300      	movs	r3, #0
 8009100:	61fb      	str	r3, [r7, #28]
 8009102:	2300      	movs	r3, #0
 8009104:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009106:	4b3e      	ldr	r3, [pc, #248]	; (8009200 <HAL_RCC_GetSysClockFreq+0x108>)
 8009108:	689b      	ldr	r3, [r3, #8]
 800910a:	f003 030c 	and.w	r3, r3, #12
 800910e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009110:	4b3b      	ldr	r3, [pc, #236]	; (8009200 <HAL_RCC_GetSysClockFreq+0x108>)
 8009112:	68db      	ldr	r3, [r3, #12]
 8009114:	f003 0303 	and.w	r3, r3, #3
 8009118:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800911a:	693b      	ldr	r3, [r7, #16]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d005      	beq.n	800912c <HAL_RCC_GetSysClockFreq+0x34>
 8009120:	693b      	ldr	r3, [r7, #16]
 8009122:	2b0c      	cmp	r3, #12
 8009124:	d121      	bne.n	800916a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	2b01      	cmp	r3, #1
 800912a:	d11e      	bne.n	800916a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800912c:	4b34      	ldr	r3, [pc, #208]	; (8009200 <HAL_RCC_GetSysClockFreq+0x108>)
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	f003 0308 	and.w	r3, r3, #8
 8009134:	2b00      	cmp	r3, #0
 8009136:	d107      	bne.n	8009148 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8009138:	4b31      	ldr	r3, [pc, #196]	; (8009200 <HAL_RCC_GetSysClockFreq+0x108>)
 800913a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800913e:	0a1b      	lsrs	r3, r3, #8
 8009140:	f003 030f 	and.w	r3, r3, #15
 8009144:	61fb      	str	r3, [r7, #28]
 8009146:	e005      	b.n	8009154 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8009148:	4b2d      	ldr	r3, [pc, #180]	; (8009200 <HAL_RCC_GetSysClockFreq+0x108>)
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	091b      	lsrs	r3, r3, #4
 800914e:	f003 030f 	and.w	r3, r3, #15
 8009152:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8009154:	4a2b      	ldr	r2, [pc, #172]	; (8009204 <HAL_RCC_GetSysClockFreq+0x10c>)
 8009156:	69fb      	ldr	r3, [r7, #28]
 8009158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800915c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800915e:	693b      	ldr	r3, [r7, #16]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d10d      	bne.n	8009180 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8009164:	69fb      	ldr	r3, [r7, #28]
 8009166:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8009168:	e00a      	b.n	8009180 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800916a:	693b      	ldr	r3, [r7, #16]
 800916c:	2b04      	cmp	r3, #4
 800916e:	d102      	bne.n	8009176 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8009170:	4b25      	ldr	r3, [pc, #148]	; (8009208 <HAL_RCC_GetSysClockFreq+0x110>)
 8009172:	61bb      	str	r3, [r7, #24]
 8009174:	e004      	b.n	8009180 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8009176:	693b      	ldr	r3, [r7, #16]
 8009178:	2b08      	cmp	r3, #8
 800917a:	d101      	bne.n	8009180 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800917c:	4b22      	ldr	r3, [pc, #136]	; (8009208 <HAL_RCC_GetSysClockFreq+0x110>)
 800917e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8009180:	693b      	ldr	r3, [r7, #16]
 8009182:	2b0c      	cmp	r3, #12
 8009184:	d134      	bne.n	80091f0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009186:	4b1e      	ldr	r3, [pc, #120]	; (8009200 <HAL_RCC_GetSysClockFreq+0x108>)
 8009188:	68db      	ldr	r3, [r3, #12]
 800918a:	f003 0303 	and.w	r3, r3, #3
 800918e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8009190:	68bb      	ldr	r3, [r7, #8]
 8009192:	2b02      	cmp	r3, #2
 8009194:	d003      	beq.n	800919e <HAL_RCC_GetSysClockFreq+0xa6>
 8009196:	68bb      	ldr	r3, [r7, #8]
 8009198:	2b03      	cmp	r3, #3
 800919a:	d003      	beq.n	80091a4 <HAL_RCC_GetSysClockFreq+0xac>
 800919c:	e005      	b.n	80091aa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800919e:	4b1a      	ldr	r3, [pc, #104]	; (8009208 <HAL_RCC_GetSysClockFreq+0x110>)
 80091a0:	617b      	str	r3, [r7, #20]
      break;
 80091a2:	e005      	b.n	80091b0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80091a4:	4b18      	ldr	r3, [pc, #96]	; (8009208 <HAL_RCC_GetSysClockFreq+0x110>)
 80091a6:	617b      	str	r3, [r7, #20]
      break;
 80091a8:	e002      	b.n	80091b0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80091aa:	69fb      	ldr	r3, [r7, #28]
 80091ac:	617b      	str	r3, [r7, #20]
      break;
 80091ae:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80091b0:	4b13      	ldr	r3, [pc, #76]	; (8009200 <HAL_RCC_GetSysClockFreq+0x108>)
 80091b2:	68db      	ldr	r3, [r3, #12]
 80091b4:	091b      	lsrs	r3, r3, #4
 80091b6:	f003 030f 	and.w	r3, r3, #15
 80091ba:	3301      	adds	r3, #1
 80091bc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80091be:	4b10      	ldr	r3, [pc, #64]	; (8009200 <HAL_RCC_GetSysClockFreq+0x108>)
 80091c0:	68db      	ldr	r3, [r3, #12]
 80091c2:	0a1b      	lsrs	r3, r3, #8
 80091c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80091c8:	697a      	ldr	r2, [r7, #20]
 80091ca:	fb03 f202 	mul.w	r2, r3, r2
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80091d4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80091d6:	4b0a      	ldr	r3, [pc, #40]	; (8009200 <HAL_RCC_GetSysClockFreq+0x108>)
 80091d8:	68db      	ldr	r3, [r3, #12]
 80091da:	0e5b      	lsrs	r3, r3, #25
 80091dc:	f003 0303 	and.w	r3, r3, #3
 80091e0:	3301      	adds	r3, #1
 80091e2:	005b      	lsls	r3, r3, #1
 80091e4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80091e6:	697a      	ldr	r2, [r7, #20]
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80091ee:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80091f0:	69bb      	ldr	r3, [r7, #24]
}
 80091f2:	4618      	mov	r0, r3
 80091f4:	3724      	adds	r7, #36	; 0x24
 80091f6:	46bd      	mov	sp, r7
 80091f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fc:	4770      	bx	lr
 80091fe:	bf00      	nop
 8009200:	40021000 	.word	0x40021000
 8009204:	08015044 	.word	0x08015044
 8009208:	00f42400 	.word	0x00f42400

0800920c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800920c:	b480      	push	{r7}
 800920e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009210:	4b03      	ldr	r3, [pc, #12]	; (8009220 <HAL_RCC_GetHCLKFreq+0x14>)
 8009212:	681b      	ldr	r3, [r3, #0]
}
 8009214:	4618      	mov	r0, r3
 8009216:	46bd      	mov	sp, r7
 8009218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921c:	4770      	bx	lr
 800921e:	bf00      	nop
 8009220:	20000184 	.word	0x20000184

08009224 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009224:	b580      	push	{r7, lr}
 8009226:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8009228:	f7ff fff0 	bl	800920c <HAL_RCC_GetHCLKFreq>
 800922c:	4602      	mov	r2, r0
 800922e:	4b06      	ldr	r3, [pc, #24]	; (8009248 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009230:	689b      	ldr	r3, [r3, #8]
 8009232:	0adb      	lsrs	r3, r3, #11
 8009234:	f003 0307 	and.w	r3, r3, #7
 8009238:	4904      	ldr	r1, [pc, #16]	; (800924c <HAL_RCC_GetPCLK2Freq+0x28>)
 800923a:	5ccb      	ldrb	r3, [r1, r3]
 800923c:	f003 031f 	and.w	r3, r3, #31
 8009240:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009244:	4618      	mov	r0, r3
 8009246:	bd80      	pop	{r7, pc}
 8009248:	40021000 	.word	0x40021000
 800924c:	0801503c 	.word	0x0801503c

08009250 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009250:	b480      	push	{r7}
 8009252:	b083      	sub	sp, #12
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
 8009258:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	220f      	movs	r2, #15
 800925e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8009260:	4b12      	ldr	r3, [pc, #72]	; (80092ac <HAL_RCC_GetClockConfig+0x5c>)
 8009262:	689b      	ldr	r3, [r3, #8]
 8009264:	f003 0203 	and.w	r2, r3, #3
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800926c:	4b0f      	ldr	r3, [pc, #60]	; (80092ac <HAL_RCC_GetClockConfig+0x5c>)
 800926e:	689b      	ldr	r3, [r3, #8]
 8009270:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8009278:	4b0c      	ldr	r3, [pc, #48]	; (80092ac <HAL_RCC_GetClockConfig+0x5c>)
 800927a:	689b      	ldr	r3, [r3, #8]
 800927c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8009284:	4b09      	ldr	r3, [pc, #36]	; (80092ac <HAL_RCC_GetClockConfig+0x5c>)
 8009286:	689b      	ldr	r3, [r3, #8]
 8009288:	08db      	lsrs	r3, r3, #3
 800928a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8009292:	4b07      	ldr	r3, [pc, #28]	; (80092b0 <HAL_RCC_GetClockConfig+0x60>)
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	f003 020f 	and.w	r2, r3, #15
 800929a:	683b      	ldr	r3, [r7, #0]
 800929c:	601a      	str	r2, [r3, #0]
}
 800929e:	bf00      	nop
 80092a0:	370c      	adds	r7, #12
 80092a2:	46bd      	mov	sp, r7
 80092a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a8:	4770      	bx	lr
 80092aa:	bf00      	nop
 80092ac:	40021000 	.word	0x40021000
 80092b0:	40022000 	.word	0x40022000

080092b4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	b086      	sub	sp, #24
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80092bc:	2300      	movs	r3, #0
 80092be:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80092c0:	4b27      	ldr	r3, [pc, #156]	; (8009360 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80092c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d003      	beq.n	80092d4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80092cc:	f7ff f834 	bl	8008338 <HAL_PWREx_GetVoltageRange>
 80092d0:	6178      	str	r0, [r7, #20]
 80092d2:	e014      	b.n	80092fe <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80092d4:	4b22      	ldr	r3, [pc, #136]	; (8009360 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80092d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092d8:	4a21      	ldr	r2, [pc, #132]	; (8009360 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80092da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80092de:	6593      	str	r3, [r2, #88]	; 0x58
 80092e0:	4b1f      	ldr	r3, [pc, #124]	; (8009360 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80092e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80092e8:	60fb      	str	r3, [r7, #12]
 80092ea:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80092ec:	f7ff f824 	bl	8008338 <HAL_PWREx_GetVoltageRange>
 80092f0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80092f2:	4b1b      	ldr	r3, [pc, #108]	; (8009360 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80092f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092f6:	4a1a      	ldr	r2, [pc, #104]	; (8009360 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80092f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80092fc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80092fe:	697b      	ldr	r3, [r7, #20]
 8009300:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009304:	d10b      	bne.n	800931e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2b80      	cmp	r3, #128	; 0x80
 800930a:	d913      	bls.n	8009334 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2ba0      	cmp	r3, #160	; 0xa0
 8009310:	d902      	bls.n	8009318 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8009312:	2302      	movs	r3, #2
 8009314:	613b      	str	r3, [r7, #16]
 8009316:	e00d      	b.n	8009334 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8009318:	2301      	movs	r3, #1
 800931a:	613b      	str	r3, [r7, #16]
 800931c:	e00a      	b.n	8009334 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	2b7f      	cmp	r3, #127	; 0x7f
 8009322:	d902      	bls.n	800932a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8009324:	2302      	movs	r3, #2
 8009326:	613b      	str	r3, [r7, #16]
 8009328:	e004      	b.n	8009334 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	2b70      	cmp	r3, #112	; 0x70
 800932e:	d101      	bne.n	8009334 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8009330:	2301      	movs	r3, #1
 8009332:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8009334:	4b0b      	ldr	r3, [pc, #44]	; (8009364 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	f023 020f 	bic.w	r2, r3, #15
 800933c:	4909      	ldr	r1, [pc, #36]	; (8009364 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800933e:	693b      	ldr	r3, [r7, #16]
 8009340:	4313      	orrs	r3, r2
 8009342:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8009344:	4b07      	ldr	r3, [pc, #28]	; (8009364 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	f003 030f 	and.w	r3, r3, #15
 800934c:	693a      	ldr	r2, [r7, #16]
 800934e:	429a      	cmp	r2, r3
 8009350:	d001      	beq.n	8009356 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8009352:	2301      	movs	r3, #1
 8009354:	e000      	b.n	8009358 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8009356:	2300      	movs	r3, #0
}
 8009358:	4618      	mov	r0, r3
 800935a:	3718      	adds	r7, #24
 800935c:	46bd      	mov	sp, r7
 800935e:	bd80      	pop	{r7, pc}
 8009360:	40021000 	.word	0x40021000
 8009364:	40022000 	.word	0x40022000

08009368 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8009368:	b480      	push	{r7}
 800936a:	b087      	sub	sp, #28
 800936c:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800936e:	4b2d      	ldr	r3, [pc, #180]	; (8009424 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8009370:	68db      	ldr	r3, [r3, #12]
 8009372:	f003 0303 	and.w	r3, r3, #3
 8009376:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	2b03      	cmp	r3, #3
 800937c:	d00b      	beq.n	8009396 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	2b03      	cmp	r3, #3
 8009382:	d825      	bhi.n	80093d0 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	2b01      	cmp	r3, #1
 8009388:	d008      	beq.n	800939c <RCC_GetSysClockFreqFromPLLSource+0x34>
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	2b02      	cmp	r3, #2
 800938e:	d11f      	bne.n	80093d0 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8009390:	4b25      	ldr	r3, [pc, #148]	; (8009428 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8009392:	613b      	str	r3, [r7, #16]
    break;
 8009394:	e01f      	b.n	80093d6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8009396:	4b24      	ldr	r3, [pc, #144]	; (8009428 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8009398:	613b      	str	r3, [r7, #16]
    break;
 800939a:	e01c      	b.n	80093d6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800939c:	4b21      	ldr	r3, [pc, #132]	; (8009424 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	f003 0308 	and.w	r3, r3, #8
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d107      	bne.n	80093b8 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80093a8:	4b1e      	ldr	r3, [pc, #120]	; (8009424 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80093aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80093ae:	0a1b      	lsrs	r3, r3, #8
 80093b0:	f003 030f 	and.w	r3, r3, #15
 80093b4:	617b      	str	r3, [r7, #20]
 80093b6:	e005      	b.n	80093c4 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80093b8:	4b1a      	ldr	r3, [pc, #104]	; (8009424 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	091b      	lsrs	r3, r3, #4
 80093be:	f003 030f 	and.w	r3, r3, #15
 80093c2:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80093c4:	4a19      	ldr	r2, [pc, #100]	; (800942c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80093c6:	697b      	ldr	r3, [r7, #20]
 80093c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80093cc:	613b      	str	r3, [r7, #16]
    break;
 80093ce:	e002      	b.n	80093d6 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80093d0:	2300      	movs	r3, #0
 80093d2:	613b      	str	r3, [r7, #16]
    break;
 80093d4:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80093d6:	4b13      	ldr	r3, [pc, #76]	; (8009424 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80093d8:	68db      	ldr	r3, [r3, #12]
 80093da:	091b      	lsrs	r3, r3, #4
 80093dc:	f003 030f 	and.w	r3, r3, #15
 80093e0:	3301      	adds	r3, #1
 80093e2:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80093e4:	4b0f      	ldr	r3, [pc, #60]	; (8009424 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80093e6:	68db      	ldr	r3, [r3, #12]
 80093e8:	0a1b      	lsrs	r3, r3, #8
 80093ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80093ee:	693a      	ldr	r2, [r7, #16]
 80093f0:	fb03 f202 	mul.w	r2, r3, r2
 80093f4:	68bb      	ldr	r3, [r7, #8]
 80093f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80093fa:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80093fc:	4b09      	ldr	r3, [pc, #36]	; (8009424 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80093fe:	68db      	ldr	r3, [r3, #12]
 8009400:	0e5b      	lsrs	r3, r3, #25
 8009402:	f003 0303 	and.w	r3, r3, #3
 8009406:	3301      	adds	r3, #1
 8009408:	005b      	lsls	r3, r3, #1
 800940a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800940c:	693a      	ldr	r2, [r7, #16]
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	fbb2 f3f3 	udiv	r3, r2, r3
 8009414:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8009416:	683b      	ldr	r3, [r7, #0]
}
 8009418:	4618      	mov	r0, r3
 800941a:	371c      	adds	r7, #28
 800941c:	46bd      	mov	sp, r7
 800941e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009422:	4770      	bx	lr
 8009424:	40021000 	.word	0x40021000
 8009428:	00f42400 	.word	0x00f42400
 800942c:	08015044 	.word	0x08015044

08009430 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009430:	b580      	push	{r7, lr}
 8009432:	b086      	sub	sp, #24
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009438:	2300      	movs	r3, #0
 800943a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800943c:	2300      	movs	r3, #0
 800943e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009448:	2b00      	cmp	r3, #0
 800944a:	d040      	beq.n	80094ce <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009450:	2b80      	cmp	r3, #128	; 0x80
 8009452:	d02a      	beq.n	80094aa <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009454:	2b80      	cmp	r3, #128	; 0x80
 8009456:	d825      	bhi.n	80094a4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8009458:	2b60      	cmp	r3, #96	; 0x60
 800945a:	d026      	beq.n	80094aa <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800945c:	2b60      	cmp	r3, #96	; 0x60
 800945e:	d821      	bhi.n	80094a4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8009460:	2b40      	cmp	r3, #64	; 0x40
 8009462:	d006      	beq.n	8009472 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8009464:	2b40      	cmp	r3, #64	; 0x40
 8009466:	d81d      	bhi.n	80094a4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8009468:	2b00      	cmp	r3, #0
 800946a:	d009      	beq.n	8009480 <HAL_RCCEx_PeriphCLKConfig+0x50>
 800946c:	2b20      	cmp	r3, #32
 800946e:	d010      	beq.n	8009492 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8009470:	e018      	b.n	80094a4 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8009472:	4b89      	ldr	r3, [pc, #548]	; (8009698 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009474:	68db      	ldr	r3, [r3, #12]
 8009476:	4a88      	ldr	r2, [pc, #544]	; (8009698 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009478:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800947c:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800947e:	e015      	b.n	80094ac <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	3304      	adds	r3, #4
 8009484:	2100      	movs	r1, #0
 8009486:	4618      	mov	r0, r3
 8009488:	f000 fb3e 	bl	8009b08 <RCCEx_PLLSAI1_Config>
 800948c:	4603      	mov	r3, r0
 800948e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8009490:	e00c      	b.n	80094ac <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	3320      	adds	r3, #32
 8009496:	2100      	movs	r1, #0
 8009498:	4618      	mov	r0, r3
 800949a:	f000 fc29 	bl	8009cf0 <RCCEx_PLLSAI2_Config>
 800949e:	4603      	mov	r3, r0
 80094a0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80094a2:	e003      	b.n	80094ac <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80094a4:	2301      	movs	r3, #1
 80094a6:	74fb      	strb	r3, [r7, #19]
      break;
 80094a8:	e000      	b.n	80094ac <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80094aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80094ac:	7cfb      	ldrb	r3, [r7, #19]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d10b      	bne.n	80094ca <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80094b2:	4b79      	ldr	r3, [pc, #484]	; (8009698 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80094b4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80094b8:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80094c0:	4975      	ldr	r1, [pc, #468]	; (8009698 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80094c2:	4313      	orrs	r3, r2
 80094c4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80094c8:	e001      	b.n	80094ce <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094ca:	7cfb      	ldrb	r3, [r7, #19]
 80094cc:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d047      	beq.n	800956a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80094e2:	d030      	beq.n	8009546 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80094e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80094e8:	d82a      	bhi.n	8009540 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80094ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80094ee:	d02a      	beq.n	8009546 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80094f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80094f4:	d824      	bhi.n	8009540 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80094f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80094fa:	d008      	beq.n	800950e <HAL_RCCEx_PeriphCLKConfig+0xde>
 80094fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009500:	d81e      	bhi.n	8009540 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8009502:	2b00      	cmp	r3, #0
 8009504:	d00a      	beq.n	800951c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8009506:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800950a:	d010      	beq.n	800952e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800950c:	e018      	b.n	8009540 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800950e:	4b62      	ldr	r3, [pc, #392]	; (8009698 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009510:	68db      	ldr	r3, [r3, #12]
 8009512:	4a61      	ldr	r2, [pc, #388]	; (8009698 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009514:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009518:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800951a:	e015      	b.n	8009548 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	3304      	adds	r3, #4
 8009520:	2100      	movs	r1, #0
 8009522:	4618      	mov	r0, r3
 8009524:	f000 faf0 	bl	8009b08 <RCCEx_PLLSAI1_Config>
 8009528:	4603      	mov	r3, r0
 800952a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800952c:	e00c      	b.n	8009548 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	3320      	adds	r3, #32
 8009532:	2100      	movs	r1, #0
 8009534:	4618      	mov	r0, r3
 8009536:	f000 fbdb 	bl	8009cf0 <RCCEx_PLLSAI2_Config>
 800953a:	4603      	mov	r3, r0
 800953c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800953e:	e003      	b.n	8009548 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009540:	2301      	movs	r3, #1
 8009542:	74fb      	strb	r3, [r7, #19]
      break;
 8009544:	e000      	b.n	8009548 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8009546:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009548:	7cfb      	ldrb	r3, [r7, #19]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d10b      	bne.n	8009566 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800954e:	4b52      	ldr	r3, [pc, #328]	; (8009698 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009550:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009554:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800955c:	494e      	ldr	r1, [pc, #312]	; (8009698 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800955e:	4313      	orrs	r3, r2
 8009560:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8009564:	e001      	b.n	800956a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009566:	7cfb      	ldrb	r3, [r7, #19]
 8009568:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009572:	2b00      	cmp	r3, #0
 8009574:	f000 809f 	beq.w	80096b6 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009578:	2300      	movs	r3, #0
 800957a:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800957c:	4b46      	ldr	r3, [pc, #280]	; (8009698 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800957e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009580:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009584:	2b00      	cmp	r3, #0
 8009586:	d101      	bne.n	800958c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8009588:	2301      	movs	r3, #1
 800958a:	e000      	b.n	800958e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800958c:	2300      	movs	r3, #0
 800958e:	2b00      	cmp	r3, #0
 8009590:	d00d      	beq.n	80095ae <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009592:	4b41      	ldr	r3, [pc, #260]	; (8009698 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009594:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009596:	4a40      	ldr	r2, [pc, #256]	; (8009698 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009598:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800959c:	6593      	str	r3, [r2, #88]	; 0x58
 800959e:	4b3e      	ldr	r3, [pc, #248]	; (8009698 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80095a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80095a6:	60bb      	str	r3, [r7, #8]
 80095a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80095aa:	2301      	movs	r3, #1
 80095ac:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80095ae:	4b3b      	ldr	r3, [pc, #236]	; (800969c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	4a3a      	ldr	r2, [pc, #232]	; (800969c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80095b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80095b8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80095ba:	f7fb f8e7 	bl	800478c <HAL_GetTick>
 80095be:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80095c0:	e009      	b.n	80095d6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80095c2:	f7fb f8e3 	bl	800478c <HAL_GetTick>
 80095c6:	4602      	mov	r2, r0
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	1ad3      	subs	r3, r2, r3
 80095cc:	2b02      	cmp	r3, #2
 80095ce:	d902      	bls.n	80095d6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80095d0:	2303      	movs	r3, #3
 80095d2:	74fb      	strb	r3, [r7, #19]
        break;
 80095d4:	e005      	b.n	80095e2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80095d6:	4b31      	ldr	r3, [pc, #196]	; (800969c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d0ef      	beq.n	80095c2 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80095e2:	7cfb      	ldrb	r3, [r7, #19]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d15b      	bne.n	80096a0 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80095e8:	4b2b      	ldr	r3, [pc, #172]	; (8009698 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80095ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80095ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80095f2:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80095f4:	697b      	ldr	r3, [r7, #20]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d01f      	beq.n	800963a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009600:	697a      	ldr	r2, [r7, #20]
 8009602:	429a      	cmp	r2, r3
 8009604:	d019      	beq.n	800963a <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009606:	4b24      	ldr	r3, [pc, #144]	; (8009698 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009608:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800960c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009610:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009612:	4b21      	ldr	r3, [pc, #132]	; (8009698 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009614:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009618:	4a1f      	ldr	r2, [pc, #124]	; (8009698 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800961a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800961e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009622:	4b1d      	ldr	r3, [pc, #116]	; (8009698 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009624:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009628:	4a1b      	ldr	r2, [pc, #108]	; (8009698 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800962a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800962e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009632:	4a19      	ldr	r2, [pc, #100]	; (8009698 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009634:	697b      	ldr	r3, [r7, #20]
 8009636:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800963a:	697b      	ldr	r3, [r7, #20]
 800963c:	f003 0301 	and.w	r3, r3, #1
 8009640:	2b00      	cmp	r3, #0
 8009642:	d016      	beq.n	8009672 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009644:	f7fb f8a2 	bl	800478c <HAL_GetTick>
 8009648:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800964a:	e00b      	b.n	8009664 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800964c:	f7fb f89e 	bl	800478c <HAL_GetTick>
 8009650:	4602      	mov	r2, r0
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	1ad3      	subs	r3, r2, r3
 8009656:	f241 3288 	movw	r2, #5000	; 0x1388
 800965a:	4293      	cmp	r3, r2
 800965c:	d902      	bls.n	8009664 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800965e:	2303      	movs	r3, #3
 8009660:	74fb      	strb	r3, [r7, #19]
            break;
 8009662:	e006      	b.n	8009672 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009664:	4b0c      	ldr	r3, [pc, #48]	; (8009698 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009666:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800966a:	f003 0302 	and.w	r3, r3, #2
 800966e:	2b00      	cmp	r3, #0
 8009670:	d0ec      	beq.n	800964c <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8009672:	7cfb      	ldrb	r3, [r7, #19]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d10c      	bne.n	8009692 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009678:	4b07      	ldr	r3, [pc, #28]	; (8009698 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800967a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800967e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009688:	4903      	ldr	r1, [pc, #12]	; (8009698 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800968a:	4313      	orrs	r3, r2
 800968c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8009690:	e008      	b.n	80096a4 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009692:	7cfb      	ldrb	r3, [r7, #19]
 8009694:	74bb      	strb	r3, [r7, #18]
 8009696:	e005      	b.n	80096a4 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8009698:	40021000 	.word	0x40021000
 800969c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096a0:	7cfb      	ldrb	r3, [r7, #19]
 80096a2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80096a4:	7c7b      	ldrb	r3, [r7, #17]
 80096a6:	2b01      	cmp	r3, #1
 80096a8:	d105      	bne.n	80096b6 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80096aa:	4ba0      	ldr	r3, [pc, #640]	; (800992c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80096ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096ae:	4a9f      	ldr	r2, [pc, #636]	; (800992c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80096b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80096b4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	f003 0301 	and.w	r3, r3, #1
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d00a      	beq.n	80096d8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80096c2:	4b9a      	ldr	r3, [pc, #616]	; (800992c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80096c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096c8:	f023 0203 	bic.w	r2, r3, #3
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096d0:	4996      	ldr	r1, [pc, #600]	; (800992c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80096d2:	4313      	orrs	r3, r2
 80096d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	f003 0302 	and.w	r3, r3, #2
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d00a      	beq.n	80096fa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80096e4:	4b91      	ldr	r3, [pc, #580]	; (800992c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80096e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096ea:	f023 020c 	bic.w	r2, r3, #12
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096f2:	498e      	ldr	r1, [pc, #568]	; (800992c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80096f4:	4313      	orrs	r3, r2
 80096f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	f003 0304 	and.w	r3, r3, #4
 8009702:	2b00      	cmp	r3, #0
 8009704:	d00a      	beq.n	800971c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009706:	4b89      	ldr	r3, [pc, #548]	; (800992c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009708:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800970c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009714:	4985      	ldr	r1, [pc, #532]	; (800992c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009716:	4313      	orrs	r3, r2
 8009718:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	f003 0308 	and.w	r3, r3, #8
 8009724:	2b00      	cmp	r3, #0
 8009726:	d00a      	beq.n	800973e <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009728:	4b80      	ldr	r3, [pc, #512]	; (800992c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800972a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800972e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009736:	497d      	ldr	r1, [pc, #500]	; (800992c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009738:	4313      	orrs	r3, r2
 800973a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	f003 0310 	and.w	r3, r3, #16
 8009746:	2b00      	cmp	r3, #0
 8009748:	d00a      	beq.n	8009760 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800974a:	4b78      	ldr	r3, [pc, #480]	; (800992c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800974c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009750:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009758:	4974      	ldr	r1, [pc, #464]	; (800992c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800975a:	4313      	orrs	r3, r2
 800975c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	f003 0320 	and.w	r3, r3, #32
 8009768:	2b00      	cmp	r3, #0
 800976a:	d00a      	beq.n	8009782 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800976c:	4b6f      	ldr	r3, [pc, #444]	; (800992c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800976e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009772:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800977a:	496c      	ldr	r1, [pc, #432]	; (800992c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800977c:	4313      	orrs	r3, r2
 800977e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800978a:	2b00      	cmp	r3, #0
 800978c:	d00a      	beq.n	80097a4 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800978e:	4b67      	ldr	r3, [pc, #412]	; (800992c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009790:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009794:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800979c:	4963      	ldr	r1, [pc, #396]	; (800992c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800979e:	4313      	orrs	r3, r2
 80097a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d00a      	beq.n	80097c6 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80097b0:	4b5e      	ldr	r3, [pc, #376]	; (800992c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80097b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097b6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80097be:	495b      	ldr	r1, [pc, #364]	; (800992c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80097c0:	4313      	orrs	r3, r2
 80097c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d00a      	beq.n	80097e8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80097d2:	4b56      	ldr	r3, [pc, #344]	; (800992c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80097d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097d8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097e0:	4952      	ldr	r1, [pc, #328]	; (800992c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80097e2:	4313      	orrs	r3, r2
 80097e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d00a      	beq.n	800980a <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80097f4:	4b4d      	ldr	r3, [pc, #308]	; (800992c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80097f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097fa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009802:	494a      	ldr	r1, [pc, #296]	; (800992c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009804:	4313      	orrs	r3, r2
 8009806:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009812:	2b00      	cmp	r3, #0
 8009814:	d00a      	beq.n	800982c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009816:	4b45      	ldr	r3, [pc, #276]	; (800992c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009818:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800981c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009824:	4941      	ldr	r1, [pc, #260]	; (800992c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009826:	4313      	orrs	r3, r2
 8009828:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009834:	2b00      	cmp	r3, #0
 8009836:	d00a      	beq.n	800984e <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009838:	4b3c      	ldr	r3, [pc, #240]	; (800992c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800983a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800983e:	f023 0203 	bic.w	r2, r3, #3
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009846:	4939      	ldr	r1, [pc, #228]	; (800992c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009848:	4313      	orrs	r3, r2
 800984a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009856:	2b00      	cmp	r3, #0
 8009858:	d028      	beq.n	80098ac <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800985a:	4b34      	ldr	r3, [pc, #208]	; (800992c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800985c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009860:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009868:	4930      	ldr	r1, [pc, #192]	; (800992c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800986a:	4313      	orrs	r3, r2
 800986c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009874:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009878:	d106      	bne.n	8009888 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800987a:	4b2c      	ldr	r3, [pc, #176]	; (800992c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800987c:	68db      	ldr	r3, [r3, #12]
 800987e:	4a2b      	ldr	r2, [pc, #172]	; (800992c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009880:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009884:	60d3      	str	r3, [r2, #12]
 8009886:	e011      	b.n	80098ac <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800988c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009890:	d10c      	bne.n	80098ac <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	3304      	adds	r3, #4
 8009896:	2101      	movs	r1, #1
 8009898:	4618      	mov	r0, r3
 800989a:	f000 f935 	bl	8009b08 <RCCEx_PLLSAI1_Config>
 800989e:	4603      	mov	r3, r0
 80098a0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80098a2:	7cfb      	ldrb	r3, [r7, #19]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d001      	beq.n	80098ac <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80098a8:	7cfb      	ldrb	r3, [r7, #19]
 80098aa:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d04d      	beq.n	8009954 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80098bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80098c0:	d108      	bne.n	80098d4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80098c2:	4b1a      	ldr	r3, [pc, #104]	; (800992c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80098c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80098c8:	4a18      	ldr	r2, [pc, #96]	; (800992c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80098ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80098ce:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80098d2:	e012      	b.n	80098fa <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80098d4:	4b15      	ldr	r3, [pc, #84]	; (800992c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80098d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80098da:	4a14      	ldr	r2, [pc, #80]	; (800992c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80098dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80098e0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80098e4:	4b11      	ldr	r3, [pc, #68]	; (800992c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80098e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80098ea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80098f2:	490e      	ldr	r1, [pc, #56]	; (800992c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80098f4:	4313      	orrs	r3, r2
 80098f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80098fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009902:	d106      	bne.n	8009912 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009904:	4b09      	ldr	r3, [pc, #36]	; (800992c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009906:	68db      	ldr	r3, [r3, #12]
 8009908:	4a08      	ldr	r2, [pc, #32]	; (800992c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800990a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800990e:	60d3      	str	r3, [r2, #12]
 8009910:	e020      	b.n	8009954 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009916:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800991a:	d109      	bne.n	8009930 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800991c:	4b03      	ldr	r3, [pc, #12]	; (800992c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800991e:	68db      	ldr	r3, [r3, #12]
 8009920:	4a02      	ldr	r2, [pc, #8]	; (800992c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009922:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009926:	60d3      	str	r3, [r2, #12]
 8009928:	e014      	b.n	8009954 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800992a:	bf00      	nop
 800992c:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009934:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009938:	d10c      	bne.n	8009954 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	3304      	adds	r3, #4
 800993e:	2101      	movs	r1, #1
 8009940:	4618      	mov	r0, r3
 8009942:	f000 f8e1 	bl	8009b08 <RCCEx_PLLSAI1_Config>
 8009946:	4603      	mov	r3, r0
 8009948:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800994a:	7cfb      	ldrb	r3, [r7, #19]
 800994c:	2b00      	cmp	r3, #0
 800994e:	d001      	beq.n	8009954 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8009950:	7cfb      	ldrb	r3, [r7, #19]
 8009952:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800995c:	2b00      	cmp	r3, #0
 800995e:	d028      	beq.n	80099b2 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009960:	4b68      	ldr	r3, [pc, #416]	; (8009b04 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009962:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009966:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800996e:	4965      	ldr	r1, [pc, #404]	; (8009b04 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009970:	4313      	orrs	r3, r2
 8009972:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800997a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800997e:	d106      	bne.n	800998e <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009980:	4b60      	ldr	r3, [pc, #384]	; (8009b04 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009982:	68db      	ldr	r3, [r3, #12]
 8009984:	4a5f      	ldr	r2, [pc, #380]	; (8009b04 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009986:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800998a:	60d3      	str	r3, [r2, #12]
 800998c:	e011      	b.n	80099b2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009992:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009996:	d10c      	bne.n	80099b2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	3304      	adds	r3, #4
 800999c:	2101      	movs	r1, #1
 800999e:	4618      	mov	r0, r3
 80099a0:	f000 f8b2 	bl	8009b08 <RCCEx_PLLSAI1_Config>
 80099a4:	4603      	mov	r3, r0
 80099a6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80099a8:	7cfb      	ldrb	r3, [r7, #19]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d001      	beq.n	80099b2 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80099ae:	7cfb      	ldrb	r3, [r7, #19]
 80099b0:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d01e      	beq.n	80099fc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80099be:	4b51      	ldr	r3, [pc, #324]	; (8009b04 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80099c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80099c4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80099ce:	494d      	ldr	r1, [pc, #308]	; (8009b04 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80099d0:	4313      	orrs	r3, r2
 80099d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80099dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80099e0:	d10c      	bne.n	80099fc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	3304      	adds	r3, #4
 80099e6:	2102      	movs	r1, #2
 80099e8:	4618      	mov	r0, r3
 80099ea:	f000 f88d 	bl	8009b08 <RCCEx_PLLSAI1_Config>
 80099ee:	4603      	mov	r3, r0
 80099f0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80099f2:	7cfb      	ldrb	r3, [r7, #19]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d001      	beq.n	80099fc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80099f8:	7cfb      	ldrb	r3, [r7, #19]
 80099fa:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d00b      	beq.n	8009a20 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009a08:	4b3e      	ldr	r3, [pc, #248]	; (8009b04 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009a0a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009a0e:	f023 0204 	bic.w	r2, r3, #4
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009a18:	493a      	ldr	r1, [pc, #232]	; (8009b04 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009a1a:	4313      	orrs	r3, r2
 8009a1c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d00b      	beq.n	8009a44 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8009a2c:	4b35      	ldr	r3, [pc, #212]	; (8009b04 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009a2e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009a32:	f023 0218 	bic.w	r2, r3, #24
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a3c:	4931      	ldr	r1, [pc, #196]	; (8009b04 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009a3e:	4313      	orrs	r3, r2
 8009a40:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d035      	beq.n	8009abc <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8009a50:	4b2c      	ldr	r3, [pc, #176]	; (8009b04 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	4a2b      	ldr	r2, [pc, #172]	; (8009b04 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009a56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009a5a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009a5c:	f7fa fe96 	bl	800478c <HAL_GetTick>
 8009a60:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8009a62:	e009      	b.n	8009a78 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8009a64:	f7fa fe92 	bl	800478c <HAL_GetTick>
 8009a68:	4602      	mov	r2, r0
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	1ad3      	subs	r3, r2, r3
 8009a6e:	2b02      	cmp	r3, #2
 8009a70:	d902      	bls.n	8009a78 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 8009a72:	2303      	movs	r3, #3
 8009a74:	74fb      	strb	r3, [r7, #19]
        break;
 8009a76:	e005      	b.n	8009a84 <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8009a78:	4b22      	ldr	r3, [pc, #136]	; (8009b04 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d1ef      	bne.n	8009a64 <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 8009a84:	7cfb      	ldrb	r3, [r7, #19]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d113      	bne.n	8009ab2 <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 8009a8a:	4b1e      	ldr	r3, [pc, #120]	; (8009b04 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009a8c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009a90:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009a9a:	491a      	ldr	r1, [pc, #104]	; (8009b04 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009a9c:	4313      	orrs	r3, r2
 8009a9e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	3320      	adds	r3, #32
 8009aa6:	2102      	movs	r1, #2
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	f000 f921 	bl	8009cf0 <RCCEx_PLLSAI2_Config>
 8009aae:	4603      	mov	r3, r0
 8009ab0:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 8009ab2:	7cfb      	ldrb	r3, [r7, #19]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d001      	beq.n	8009abc <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 8009ab8:	7cfb      	ldrb	r3, [r7, #19]
 8009aba:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d017      	beq.n	8009af8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8009ac8:	4b0e      	ldr	r3, [pc, #56]	; (8009b04 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009aca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009ace:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ad8:	490a      	ldr	r1, [pc, #40]	; (8009b04 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009ada:	4313      	orrs	r3, r2
 8009adc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ae6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009aea:	d105      	bne.n	8009af8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009aec:	4b05      	ldr	r3, [pc, #20]	; (8009b04 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009aee:	68db      	ldr	r3, [r3, #12]
 8009af0:	4a04      	ldr	r2, [pc, #16]	; (8009b04 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009af2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009af6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8009af8:	7cbb      	ldrb	r3, [r7, #18]
}
 8009afa:	4618      	mov	r0, r3
 8009afc:	3718      	adds	r7, #24
 8009afe:	46bd      	mov	sp, r7
 8009b00:	bd80      	pop	{r7, pc}
 8009b02:	bf00      	nop
 8009b04:	40021000 	.word	0x40021000

08009b08 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b084      	sub	sp, #16
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]
 8009b10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009b12:	2300      	movs	r3, #0
 8009b14:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8009b16:	4b72      	ldr	r3, [pc, #456]	; (8009ce0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009b18:	68db      	ldr	r3, [r3, #12]
 8009b1a:	f003 0303 	and.w	r3, r3, #3
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d00e      	beq.n	8009b40 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8009b22:	4b6f      	ldr	r3, [pc, #444]	; (8009ce0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009b24:	68db      	ldr	r3, [r3, #12]
 8009b26:	f003 0203 	and.w	r2, r3, #3
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	429a      	cmp	r2, r3
 8009b30:	d103      	bne.n	8009b3a <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
       ||
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d142      	bne.n	8009bc0 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8009b3a:	2301      	movs	r3, #1
 8009b3c:	73fb      	strb	r3, [r7, #15]
 8009b3e:	e03f      	b.n	8009bc0 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	2b03      	cmp	r3, #3
 8009b46:	d018      	beq.n	8009b7a <RCCEx_PLLSAI1_Config+0x72>
 8009b48:	2b03      	cmp	r3, #3
 8009b4a:	d825      	bhi.n	8009b98 <RCCEx_PLLSAI1_Config+0x90>
 8009b4c:	2b01      	cmp	r3, #1
 8009b4e:	d002      	beq.n	8009b56 <RCCEx_PLLSAI1_Config+0x4e>
 8009b50:	2b02      	cmp	r3, #2
 8009b52:	d009      	beq.n	8009b68 <RCCEx_PLLSAI1_Config+0x60>
 8009b54:	e020      	b.n	8009b98 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8009b56:	4b62      	ldr	r3, [pc, #392]	; (8009ce0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	f003 0302 	and.w	r3, r3, #2
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d11d      	bne.n	8009b9e <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8009b62:	2301      	movs	r3, #1
 8009b64:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009b66:	e01a      	b.n	8009b9e <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8009b68:	4b5d      	ldr	r3, [pc, #372]	; (8009ce0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d116      	bne.n	8009ba2 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8009b74:	2301      	movs	r3, #1
 8009b76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009b78:	e013      	b.n	8009ba2 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8009b7a:	4b59      	ldr	r3, [pc, #356]	; (8009ce0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d10f      	bne.n	8009ba6 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8009b86:	4b56      	ldr	r3, [pc, #344]	; (8009ce0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d109      	bne.n	8009ba6 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8009b92:	2301      	movs	r3, #1
 8009b94:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009b96:	e006      	b.n	8009ba6 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8009b98:	2301      	movs	r3, #1
 8009b9a:	73fb      	strb	r3, [r7, #15]
      break;
 8009b9c:	e004      	b.n	8009ba8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8009b9e:	bf00      	nop
 8009ba0:	e002      	b.n	8009ba8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8009ba2:	bf00      	nop
 8009ba4:	e000      	b.n	8009ba8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8009ba6:	bf00      	nop
    }

    if(status == HAL_OK)
 8009ba8:	7bfb      	ldrb	r3, [r7, #15]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d108      	bne.n	8009bc0 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8009bae:	4b4c      	ldr	r3, [pc, #304]	; (8009ce0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009bb0:	68db      	ldr	r3, [r3, #12]
 8009bb2:	f023 0203 	bic.w	r2, r3, #3
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	4949      	ldr	r1, [pc, #292]	; (8009ce0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009bbc:	4313      	orrs	r3, r2
 8009bbe:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8009bc0:	7bfb      	ldrb	r3, [r7, #15]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	f040 8086 	bne.w	8009cd4 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8009bc8:	4b45      	ldr	r3, [pc, #276]	; (8009ce0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	4a44      	ldr	r2, [pc, #272]	; (8009ce0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009bce:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009bd2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009bd4:	f7fa fdda 	bl	800478c <HAL_GetTick>
 8009bd8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8009bda:	e009      	b.n	8009bf0 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009bdc:	f7fa fdd6 	bl	800478c <HAL_GetTick>
 8009be0:	4602      	mov	r2, r0
 8009be2:	68bb      	ldr	r3, [r7, #8]
 8009be4:	1ad3      	subs	r3, r2, r3
 8009be6:	2b02      	cmp	r3, #2
 8009be8:	d902      	bls.n	8009bf0 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8009bea:	2303      	movs	r3, #3
 8009bec:	73fb      	strb	r3, [r7, #15]
        break;
 8009bee:	e005      	b.n	8009bfc <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8009bf0:	4b3b      	ldr	r3, [pc, #236]	; (8009ce0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d1ef      	bne.n	8009bdc <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8009bfc:	7bfb      	ldrb	r3, [r7, #15]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d168      	bne.n	8009cd4 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8009c02:	683b      	ldr	r3, [r7, #0]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d113      	bne.n	8009c30 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009c08:	4b35      	ldr	r3, [pc, #212]	; (8009ce0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009c0a:	691a      	ldr	r2, [r3, #16]
 8009c0c:	4b35      	ldr	r3, [pc, #212]	; (8009ce4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8009c0e:	4013      	ands	r3, r2
 8009c10:	687a      	ldr	r2, [r7, #4]
 8009c12:	6892      	ldr	r2, [r2, #8]
 8009c14:	0211      	lsls	r1, r2, #8
 8009c16:	687a      	ldr	r2, [r7, #4]
 8009c18:	68d2      	ldr	r2, [r2, #12]
 8009c1a:	06d2      	lsls	r2, r2, #27
 8009c1c:	4311      	orrs	r1, r2
 8009c1e:	687a      	ldr	r2, [r7, #4]
 8009c20:	6852      	ldr	r2, [r2, #4]
 8009c22:	3a01      	subs	r2, #1
 8009c24:	0112      	lsls	r2, r2, #4
 8009c26:	430a      	orrs	r2, r1
 8009c28:	492d      	ldr	r1, [pc, #180]	; (8009ce0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009c2a:	4313      	orrs	r3, r2
 8009c2c:	610b      	str	r3, [r1, #16]
 8009c2e:	e02d      	b.n	8009c8c <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8009c30:	683b      	ldr	r3, [r7, #0]
 8009c32:	2b01      	cmp	r3, #1
 8009c34:	d115      	bne.n	8009c62 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009c36:	4b2a      	ldr	r3, [pc, #168]	; (8009ce0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009c38:	691a      	ldr	r2, [r3, #16]
 8009c3a:	4b2b      	ldr	r3, [pc, #172]	; (8009ce8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009c3c:	4013      	ands	r3, r2
 8009c3e:	687a      	ldr	r2, [r7, #4]
 8009c40:	6892      	ldr	r2, [r2, #8]
 8009c42:	0211      	lsls	r1, r2, #8
 8009c44:	687a      	ldr	r2, [r7, #4]
 8009c46:	6912      	ldr	r2, [r2, #16]
 8009c48:	0852      	lsrs	r2, r2, #1
 8009c4a:	3a01      	subs	r2, #1
 8009c4c:	0552      	lsls	r2, r2, #21
 8009c4e:	4311      	orrs	r1, r2
 8009c50:	687a      	ldr	r2, [r7, #4]
 8009c52:	6852      	ldr	r2, [r2, #4]
 8009c54:	3a01      	subs	r2, #1
 8009c56:	0112      	lsls	r2, r2, #4
 8009c58:	430a      	orrs	r2, r1
 8009c5a:	4921      	ldr	r1, [pc, #132]	; (8009ce0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009c5c:	4313      	orrs	r3, r2
 8009c5e:	610b      	str	r3, [r1, #16]
 8009c60:	e014      	b.n	8009c8c <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009c62:	4b1f      	ldr	r3, [pc, #124]	; (8009ce0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009c64:	691a      	ldr	r2, [r3, #16]
 8009c66:	4b21      	ldr	r3, [pc, #132]	; (8009cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8009c68:	4013      	ands	r3, r2
 8009c6a:	687a      	ldr	r2, [r7, #4]
 8009c6c:	6892      	ldr	r2, [r2, #8]
 8009c6e:	0211      	lsls	r1, r2, #8
 8009c70:	687a      	ldr	r2, [r7, #4]
 8009c72:	6952      	ldr	r2, [r2, #20]
 8009c74:	0852      	lsrs	r2, r2, #1
 8009c76:	3a01      	subs	r2, #1
 8009c78:	0652      	lsls	r2, r2, #25
 8009c7a:	4311      	orrs	r1, r2
 8009c7c:	687a      	ldr	r2, [r7, #4]
 8009c7e:	6852      	ldr	r2, [r2, #4]
 8009c80:	3a01      	subs	r2, #1
 8009c82:	0112      	lsls	r2, r2, #4
 8009c84:	430a      	orrs	r2, r1
 8009c86:	4916      	ldr	r1, [pc, #88]	; (8009ce0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009c88:	4313      	orrs	r3, r2
 8009c8a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8009c8c:	4b14      	ldr	r3, [pc, #80]	; (8009ce0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	4a13      	ldr	r2, [pc, #76]	; (8009ce0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009c92:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009c96:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009c98:	f7fa fd78 	bl	800478c <HAL_GetTick>
 8009c9c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8009c9e:	e009      	b.n	8009cb4 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009ca0:	f7fa fd74 	bl	800478c <HAL_GetTick>
 8009ca4:	4602      	mov	r2, r0
 8009ca6:	68bb      	ldr	r3, [r7, #8]
 8009ca8:	1ad3      	subs	r3, r2, r3
 8009caa:	2b02      	cmp	r3, #2
 8009cac:	d902      	bls.n	8009cb4 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8009cae:	2303      	movs	r3, #3
 8009cb0:	73fb      	strb	r3, [r7, #15]
          break;
 8009cb2:	e005      	b.n	8009cc0 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8009cb4:	4b0a      	ldr	r3, [pc, #40]	; (8009ce0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d0ef      	beq.n	8009ca0 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8009cc0:	7bfb      	ldrb	r3, [r7, #15]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d106      	bne.n	8009cd4 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8009cc6:	4b06      	ldr	r3, [pc, #24]	; (8009ce0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009cc8:	691a      	ldr	r2, [r3, #16]
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	699b      	ldr	r3, [r3, #24]
 8009cce:	4904      	ldr	r1, [pc, #16]	; (8009ce0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009cd0:	4313      	orrs	r3, r2
 8009cd2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8009cd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	3710      	adds	r7, #16
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	bd80      	pop	{r7, pc}
 8009cde:	bf00      	nop
 8009ce0:	40021000 	.word	0x40021000
 8009ce4:	07ff800f 	.word	0x07ff800f
 8009ce8:	ff9f800f 	.word	0xff9f800f
 8009cec:	f9ff800f 	.word	0xf9ff800f

08009cf0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b084      	sub	sp, #16
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]
 8009cf8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8009cfe:	4b72      	ldr	r3, [pc, #456]	; (8009ec8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009d00:	68db      	ldr	r3, [r3, #12]
 8009d02:	f003 0303 	and.w	r3, r3, #3
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d00e      	beq.n	8009d28 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8009d0a:	4b6f      	ldr	r3, [pc, #444]	; (8009ec8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009d0c:	68db      	ldr	r3, [r3, #12]
 8009d0e:	f003 0203 	and.w	r2, r3, #3
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	429a      	cmp	r2, r3
 8009d18:	d103      	bne.n	8009d22 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
       ||
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d142      	bne.n	8009da8 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8009d22:	2301      	movs	r3, #1
 8009d24:	73fb      	strb	r3, [r7, #15]
 8009d26:	e03f      	b.n	8009da8 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	2b03      	cmp	r3, #3
 8009d2e:	d018      	beq.n	8009d62 <RCCEx_PLLSAI2_Config+0x72>
 8009d30:	2b03      	cmp	r3, #3
 8009d32:	d825      	bhi.n	8009d80 <RCCEx_PLLSAI2_Config+0x90>
 8009d34:	2b01      	cmp	r3, #1
 8009d36:	d002      	beq.n	8009d3e <RCCEx_PLLSAI2_Config+0x4e>
 8009d38:	2b02      	cmp	r3, #2
 8009d3a:	d009      	beq.n	8009d50 <RCCEx_PLLSAI2_Config+0x60>
 8009d3c:	e020      	b.n	8009d80 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8009d3e:	4b62      	ldr	r3, [pc, #392]	; (8009ec8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	f003 0302 	and.w	r3, r3, #2
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d11d      	bne.n	8009d86 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8009d4a:	2301      	movs	r3, #1
 8009d4c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009d4e:	e01a      	b.n	8009d86 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8009d50:	4b5d      	ldr	r3, [pc, #372]	; (8009ec8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d116      	bne.n	8009d8a <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8009d5c:	2301      	movs	r3, #1
 8009d5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009d60:	e013      	b.n	8009d8a <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8009d62:	4b59      	ldr	r3, [pc, #356]	; (8009ec8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d10f      	bne.n	8009d8e <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8009d6e:	4b56      	ldr	r3, [pc, #344]	; (8009ec8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d109      	bne.n	8009d8e <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8009d7a:	2301      	movs	r3, #1
 8009d7c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009d7e:	e006      	b.n	8009d8e <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8009d80:	2301      	movs	r3, #1
 8009d82:	73fb      	strb	r3, [r7, #15]
      break;
 8009d84:	e004      	b.n	8009d90 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8009d86:	bf00      	nop
 8009d88:	e002      	b.n	8009d90 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8009d8a:	bf00      	nop
 8009d8c:	e000      	b.n	8009d90 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8009d8e:	bf00      	nop
    }

    if(status == HAL_OK)
 8009d90:	7bfb      	ldrb	r3, [r7, #15]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d108      	bne.n	8009da8 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8009d96:	4b4c      	ldr	r3, [pc, #304]	; (8009ec8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009d98:	68db      	ldr	r3, [r3, #12]
 8009d9a:	f023 0203 	bic.w	r2, r3, #3
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	4949      	ldr	r1, [pc, #292]	; (8009ec8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009da4:	4313      	orrs	r3, r2
 8009da6:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8009da8:	7bfb      	ldrb	r3, [r7, #15]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	f040 8086 	bne.w	8009ebc <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8009db0:	4b45      	ldr	r3, [pc, #276]	; (8009ec8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	4a44      	ldr	r2, [pc, #272]	; (8009ec8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009db6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009dba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009dbc:	f7fa fce6 	bl	800478c <HAL_GetTick>
 8009dc0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8009dc2:	e009      	b.n	8009dd8 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8009dc4:	f7fa fce2 	bl	800478c <HAL_GetTick>
 8009dc8:	4602      	mov	r2, r0
 8009dca:	68bb      	ldr	r3, [r7, #8]
 8009dcc:	1ad3      	subs	r3, r2, r3
 8009dce:	2b02      	cmp	r3, #2
 8009dd0:	d902      	bls.n	8009dd8 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8009dd2:	2303      	movs	r3, #3
 8009dd4:	73fb      	strb	r3, [r7, #15]
        break;
 8009dd6:	e005      	b.n	8009de4 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8009dd8:	4b3b      	ldr	r3, [pc, #236]	; (8009ec8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d1ef      	bne.n	8009dc4 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8009de4:	7bfb      	ldrb	r3, [r7, #15]
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d168      	bne.n	8009ebc <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8009dea:	683b      	ldr	r3, [r7, #0]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d113      	bne.n	8009e18 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8009df0:	4b35      	ldr	r3, [pc, #212]	; (8009ec8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009df2:	695a      	ldr	r2, [r3, #20]
 8009df4:	4b35      	ldr	r3, [pc, #212]	; (8009ecc <RCCEx_PLLSAI2_Config+0x1dc>)
 8009df6:	4013      	ands	r3, r2
 8009df8:	687a      	ldr	r2, [r7, #4]
 8009dfa:	6892      	ldr	r2, [r2, #8]
 8009dfc:	0211      	lsls	r1, r2, #8
 8009dfe:	687a      	ldr	r2, [r7, #4]
 8009e00:	68d2      	ldr	r2, [r2, #12]
 8009e02:	06d2      	lsls	r2, r2, #27
 8009e04:	4311      	orrs	r1, r2
 8009e06:	687a      	ldr	r2, [r7, #4]
 8009e08:	6852      	ldr	r2, [r2, #4]
 8009e0a:	3a01      	subs	r2, #1
 8009e0c:	0112      	lsls	r2, r2, #4
 8009e0e:	430a      	orrs	r2, r1
 8009e10:	492d      	ldr	r1, [pc, #180]	; (8009ec8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009e12:	4313      	orrs	r3, r2
 8009e14:	614b      	str	r3, [r1, #20]
 8009e16:	e02d      	b.n	8009e74 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8009e18:	683b      	ldr	r3, [r7, #0]
 8009e1a:	2b01      	cmp	r3, #1
 8009e1c:	d115      	bne.n	8009e4a <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8009e1e:	4b2a      	ldr	r3, [pc, #168]	; (8009ec8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009e20:	695a      	ldr	r2, [r3, #20]
 8009e22:	4b2b      	ldr	r3, [pc, #172]	; (8009ed0 <RCCEx_PLLSAI2_Config+0x1e0>)
 8009e24:	4013      	ands	r3, r2
 8009e26:	687a      	ldr	r2, [r7, #4]
 8009e28:	6892      	ldr	r2, [r2, #8]
 8009e2a:	0211      	lsls	r1, r2, #8
 8009e2c:	687a      	ldr	r2, [r7, #4]
 8009e2e:	6912      	ldr	r2, [r2, #16]
 8009e30:	0852      	lsrs	r2, r2, #1
 8009e32:	3a01      	subs	r2, #1
 8009e34:	0552      	lsls	r2, r2, #21
 8009e36:	4311      	orrs	r1, r2
 8009e38:	687a      	ldr	r2, [r7, #4]
 8009e3a:	6852      	ldr	r2, [r2, #4]
 8009e3c:	3a01      	subs	r2, #1
 8009e3e:	0112      	lsls	r2, r2, #4
 8009e40:	430a      	orrs	r2, r1
 8009e42:	4921      	ldr	r1, [pc, #132]	; (8009ec8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009e44:	4313      	orrs	r3, r2
 8009e46:	614b      	str	r3, [r1, #20]
 8009e48:	e014      	b.n	8009e74 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8009e4a:	4b1f      	ldr	r3, [pc, #124]	; (8009ec8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009e4c:	695a      	ldr	r2, [r3, #20]
 8009e4e:	4b21      	ldr	r3, [pc, #132]	; (8009ed4 <RCCEx_PLLSAI2_Config+0x1e4>)
 8009e50:	4013      	ands	r3, r2
 8009e52:	687a      	ldr	r2, [r7, #4]
 8009e54:	6892      	ldr	r2, [r2, #8]
 8009e56:	0211      	lsls	r1, r2, #8
 8009e58:	687a      	ldr	r2, [r7, #4]
 8009e5a:	6952      	ldr	r2, [r2, #20]
 8009e5c:	0852      	lsrs	r2, r2, #1
 8009e5e:	3a01      	subs	r2, #1
 8009e60:	0652      	lsls	r2, r2, #25
 8009e62:	4311      	orrs	r1, r2
 8009e64:	687a      	ldr	r2, [r7, #4]
 8009e66:	6852      	ldr	r2, [r2, #4]
 8009e68:	3a01      	subs	r2, #1
 8009e6a:	0112      	lsls	r2, r2, #4
 8009e6c:	430a      	orrs	r2, r1
 8009e6e:	4916      	ldr	r1, [pc, #88]	; (8009ec8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009e70:	4313      	orrs	r3, r2
 8009e72:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8009e74:	4b14      	ldr	r3, [pc, #80]	; (8009ec8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	4a13      	ldr	r2, [pc, #76]	; (8009ec8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009e7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009e7e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009e80:	f7fa fc84 	bl	800478c <HAL_GetTick>
 8009e84:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8009e86:	e009      	b.n	8009e9c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8009e88:	f7fa fc80 	bl	800478c <HAL_GetTick>
 8009e8c:	4602      	mov	r2, r0
 8009e8e:	68bb      	ldr	r3, [r7, #8]
 8009e90:	1ad3      	subs	r3, r2, r3
 8009e92:	2b02      	cmp	r3, #2
 8009e94:	d902      	bls.n	8009e9c <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8009e96:	2303      	movs	r3, #3
 8009e98:	73fb      	strb	r3, [r7, #15]
          break;
 8009e9a:	e005      	b.n	8009ea8 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8009e9c:	4b0a      	ldr	r3, [pc, #40]	; (8009ec8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d0ef      	beq.n	8009e88 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8009ea8:	7bfb      	ldrb	r3, [r7, #15]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d106      	bne.n	8009ebc <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8009eae:	4b06      	ldr	r3, [pc, #24]	; (8009ec8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009eb0:	695a      	ldr	r2, [r3, #20]
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	699b      	ldr	r3, [r3, #24]
 8009eb6:	4904      	ldr	r1, [pc, #16]	; (8009ec8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009eb8:	4313      	orrs	r3, r2
 8009eba:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8009ebc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ebe:	4618      	mov	r0, r3
 8009ec0:	3710      	adds	r7, #16
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	bd80      	pop	{r7, pc}
 8009ec6:	bf00      	nop
 8009ec8:	40021000 	.word	0x40021000
 8009ecc:	07ff800f 	.word	0x07ff800f
 8009ed0:	ff9f800f 	.word	0xff9f800f
 8009ed4:	f9ff800f 	.word	0xf9ff800f

08009ed8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009ed8:	b580      	push	{r7, lr}
 8009eda:	b084      	sub	sp, #16
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8009ee0:	2301      	movs	r3, #1
 8009ee2:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d07f      	beq.n	8009fea <HAL_RTC_Init+0x112>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8009ef0:	b2db      	uxtb	r3, r3
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d106      	bne.n	8009f04 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	2200      	movs	r2, #0
 8009efa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8009efe:	6878      	ldr	r0, [r7, #4]
 8009f00:	f7fa f96e 	bl	80041e0 <HAL_RTC_MspInit>
    }
#endif /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8009f0a:	605a      	str	r2, [r3, #4]
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	2202      	movs	r2, #2
 8009f10:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	22ca      	movs	r2, #202	; 0xca
 8009f1a:	625a      	str	r2, [r3, #36]	; 0x24
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	2253      	movs	r2, #83	; 0x53
 8009f22:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8009f24:	6878      	ldr	r0, [r7, #4]
 8009f26:	f000 f9b5 	bl	800a294 <RTC_EnterInitMode>
 8009f2a:	4603      	mov	r3, r0
 8009f2c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8009f2e:	7bfb      	ldrb	r3, [r7, #15]
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d15a      	bne.n	8009fea <HAL_RTC_Init+0x112>
    {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	699b      	ldr	r3, [r3, #24]
 8009f3a:	687a      	ldr	r2, [r7, #4]
 8009f3c:	6812      	ldr	r2, [r2, #0]
 8009f3e:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8009f42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009f46:	6193      	str	r3, [r2, #24]
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	6999      	ldr	r1, [r3, #24]
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	689a      	ldr	r2, [r3, #8]
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	695b      	ldr	r3, [r3, #20]
 8009f56:	431a      	orrs	r2, r3
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	69db      	ldr	r3, [r3, #28]
 8009f5c:	431a      	orrs	r2, r3
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	430a      	orrs	r2, r1
 8009f64:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	687a      	ldr	r2, [r7, #4]
 8009f6c:	6912      	ldr	r2, [r2, #16]
 8009f6e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	6919      	ldr	r1, [r3, #16]
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	68db      	ldr	r3, [r3, #12]
 8009f7a:	041a      	lsls	r2, r3, #16
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	430a      	orrs	r2, r1
 8009f82:	611a      	str	r2, [r3, #16]

#if defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8009f84:	4b1b      	ldr	r3, [pc, #108]	; (8009ff4 <HAL_RTC_Init+0x11c>)
 8009f86:	68db      	ldr	r3, [r3, #12]
 8009f88:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f94:	430b      	orrs	r3, r1
 8009f96:	4917      	ldr	r1, [pc, #92]	; (8009ff4 <HAL_RTC_Init+0x11c>)
 8009f98:	4313      	orrs	r3, r2
 8009f9a:	60cb      	str	r3, [r1, #12]
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8009f9c:	6878      	ldr	r0, [r7, #4]
 8009f9e:	f000 f9af 	bl	800a300 <RTC_ExitInitMode>
 8009fa2:	4603      	mov	r3, r0
 8009fa4:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8009fa6:	7bfb      	ldrb	r3, [r7, #15]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d11e      	bne.n	8009fea <HAL_RTC_Init+0x112>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	699a      	ldr	r2, [r3, #24]
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 8009fba:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	6999      	ldr	r1, [r3, #24]
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	6a1b      	ldr	r3, [r3, #32]
 8009fca:	431a      	orrs	r2, r3
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	699b      	ldr	r3, [r3, #24]
 8009fd0:	431a      	orrs	r2, r3
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	430a      	orrs	r2, r1
 8009fd8:	619a      	str	r2, [r3, #24]
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	22ff      	movs	r2, #255	; 0xff
 8009fe0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	2201      	movs	r2, #1
 8009fe6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      }
    }
  }

  return status;
 8009fea:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fec:	4618      	mov	r0, r3
 8009fee:	3710      	adds	r7, #16
 8009ff0:	46bd      	mov	sp, r7
 8009ff2:	bd80      	pop	{r7, pc}
 8009ff4:	40002800 	.word	0x40002800

08009ff8 <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009ff8:	b590      	push	{r4, r7, lr}
 8009ffa:	b087      	sub	sp, #28
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	60f8      	str	r0, [r7, #12]
 800a000:	60b9      	str	r1, [r7, #8]
 800a002:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));
  }
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a00a:	2b01      	cmp	r3, #1
 800a00c:	d101      	bne.n	800a012 <HAL_RTC_SetTime+0x1a>
 800a00e:	2302      	movs	r3, #2
 800a010:	e08b      	b.n	800a12a <HAL_RTC_SetTime+0x132>
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	2201      	movs	r2, #1
 800a016:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	2202      	movs	r2, #2
 800a01e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	22ca      	movs	r2, #202	; 0xca
 800a028:	625a      	str	r2, [r3, #36]	; 0x24
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	2253      	movs	r2, #83	; 0x53
 800a030:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800a032:	68f8      	ldr	r0, [r7, #12]
 800a034:	f000 f92e 	bl	800a294 <RTC_EnterInitMode>
 800a038:	4603      	mov	r3, r0
 800a03a:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800a03c:	7cfb      	ldrb	r3, [r7, #19]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d15e      	bne.n	800a100 <HAL_RTC_SetTime+0x108>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 800a042:	4b3c      	ldr	r3, [pc, #240]	; (800a134 <HAL_RTC_SetTime+0x13c>)
 800a044:	68db      	ldr	r3, [r3, #12]
 800a046:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a04a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a04e:	d057      	beq.n	800a100 <HAL_RTC_SetTime+0x108>
    {
      if (Format == RTC_FORMAT_BIN)
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d125      	bne.n	800a0a2 <HAL_RTC_SetTime+0xaa>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800a056:	4b37      	ldr	r3, [pc, #220]	; (800a134 <HAL_RTC_SetTime+0x13c>)
 800a058:	699b      	ldr	r3, [r3, #24]
 800a05a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d102      	bne.n	800a068 <HAL_RTC_SetTime+0x70>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800a062:	68bb      	ldr	r3, [r7, #8]
 800a064:	2200      	movs	r2, #0
 800a066:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a068:	68bb      	ldr	r3, [r7, #8]
 800a06a:	781b      	ldrb	r3, [r3, #0]
 800a06c:	4618      	mov	r0, r3
 800a06e:	f000 f985 	bl	800a37c <RTC_ByteToBcd2>
 800a072:	4603      	mov	r3, r0
 800a074:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a076:	68bb      	ldr	r3, [r7, #8]
 800a078:	785b      	ldrb	r3, [r3, #1]
 800a07a:	4618      	mov	r0, r3
 800a07c:	f000 f97e 	bl	800a37c <RTC_ByteToBcd2>
 800a080:	4603      	mov	r3, r0
 800a082:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a084:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800a086:	68bb      	ldr	r3, [r7, #8]
 800a088:	789b      	ldrb	r3, [r3, #2]
 800a08a:	4618      	mov	r0, r3
 800a08c:	f000 f976 	bl	800a37c <RTC_ByteToBcd2>
 800a090:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a092:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800a096:	68bb      	ldr	r3, [r7, #8]
 800a098:	78db      	ldrb	r3, [r3, #3]
 800a09a:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a09c:	4313      	orrs	r3, r2
 800a09e:	617b      	str	r3, [r7, #20]
 800a0a0:	e017      	b.n	800a0d2 <HAL_RTC_SetTime+0xda>

      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800a0a2:	4b24      	ldr	r3, [pc, #144]	; (800a134 <HAL_RTC_SetTime+0x13c>)
 800a0a4:	699b      	ldr	r3, [r3, #24]
 800a0a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d102      	bne.n	800a0b4 <HAL_RTC_SetTime+0xbc>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800a0ae:	68bb      	ldr	r3, [r7, #8]
 800a0b0:	2200      	movs	r2, #0
 800a0b2:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a0b4:	68bb      	ldr	r3, [r7, #8]
 800a0b6:	781b      	ldrb	r3, [r3, #0]
 800a0b8:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a0ba:	68bb      	ldr	r3, [r7, #8]
 800a0bc:	785b      	ldrb	r3, [r3, #1]
 800a0be:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a0c0:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800a0c2:	68ba      	ldr	r2, [r7, #8]
 800a0c4:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a0c6:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800a0c8:	68bb      	ldr	r3, [r7, #8]
 800a0ca:	78db      	ldrb	r3, [r3, #3]
 800a0cc:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a0ce:	4313      	orrs	r3, r2
 800a0d0:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 800a0d2:	4a18      	ldr	r2, [pc, #96]	; (800a134 <HAL_RTC_SetTime+0x13c>)
 800a0d4:	697b      	ldr	r3, [r7, #20]
 800a0d6:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800a0da:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800a0de:	6013      	str	r3, [r2, #0]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 800a0e0:	4b14      	ldr	r3, [pc, #80]	; (800a134 <HAL_RTC_SetTime+0x13c>)
 800a0e2:	699b      	ldr	r3, [r3, #24]
 800a0e4:	4a13      	ldr	r2, [pc, #76]	; (800a134 <HAL_RTC_SetTime+0x13c>)
 800a0e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a0ea:	6193      	str	r3, [r2, #24]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 800a0ec:	4b11      	ldr	r3, [pc, #68]	; (800a134 <HAL_RTC_SetTime+0x13c>)
 800a0ee:	699a      	ldr	r2, [r3, #24]
 800a0f0:	68bb      	ldr	r3, [r7, #8]
 800a0f2:	68d9      	ldr	r1, [r3, #12]
 800a0f4:	68bb      	ldr	r3, [r7, #8]
 800a0f6:	691b      	ldr	r3, [r3, #16]
 800a0f8:	430b      	orrs	r3, r1
 800a0fa:	490e      	ldr	r1, [pc, #56]	; (800a134 <HAL_RTC_SetTime+0x13c>)
 800a0fc:	4313      	orrs	r3, r2
 800a0fe:	618b      	str	r3, [r1, #24]
    }
  }

  /* Exit Initialization mode */
  status = RTC_ExitInitMode(hrtc);
 800a100:	68f8      	ldr	r0, [r7, #12]
 800a102:	f000 f8fd 	bl	800a300 <RTC_ExitInitMode>
 800a106:	4603      	mov	r3, r0
 800a108:	74fb      	strb	r3, [r7, #19]


  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	22ff      	movs	r2, #255	; 0xff
 800a110:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800a112:	7cfb      	ldrb	r3, [r7, #19]
 800a114:	2b00      	cmp	r3, #0
 800a116:	d103      	bne.n	800a120 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	2201      	movs	r2, #1
 800a11c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	2200      	movs	r2, #0
 800a124:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800a128:	7cfb      	ldrb	r3, [r7, #19]
}
 800a12a:	4618      	mov	r0, r3
 800a12c:	371c      	adds	r7, #28
 800a12e:	46bd      	mov	sp, r7
 800a130:	bd90      	pop	{r4, r7, pc}
 800a132:	bf00      	nop
 800a134:	40002800 	.word	0x40002800

0800a138 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800a138:	b590      	push	{r4, r7, lr}
 800a13a:	b087      	sub	sp, #28
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	60f8      	str	r0, [r7, #12]
 800a140:	60b9      	str	r1, [r7, #8]
 800a142:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a14a:	2b01      	cmp	r3, #1
 800a14c:	d101      	bne.n	800a152 <HAL_RTC_SetDate+0x1a>
 800a14e:	2302      	movs	r3, #2
 800a150:	e074      	b.n	800a23c <HAL_RTC_SetDate+0x104>
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	2201      	movs	r2, #1
 800a156:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	2202      	movs	r2, #2
 800a15e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	2b00      	cmp	r3, #0
 800a166:	d10e      	bne.n	800a186 <HAL_RTC_SetDate+0x4e>
 800a168:	68bb      	ldr	r3, [r7, #8]
 800a16a:	785b      	ldrb	r3, [r3, #1]
 800a16c:	f003 0310 	and.w	r3, r3, #16
 800a170:	2b00      	cmp	r3, #0
 800a172:	d008      	beq.n	800a186 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800a174:	68bb      	ldr	r3, [r7, #8]
 800a176:	785b      	ldrb	r3, [r3, #1]
 800a178:	f023 0310 	bic.w	r3, r3, #16
 800a17c:	b2db      	uxtb	r3, r3
 800a17e:	330a      	adds	r3, #10
 800a180:	b2da      	uxtb	r2, r3
 800a182:	68bb      	ldr	r3, [r7, #8]
 800a184:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d11c      	bne.n	800a1c6 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800a18c:	68bb      	ldr	r3, [r7, #8]
 800a18e:	78db      	ldrb	r3, [r3, #3]
 800a190:	4618      	mov	r0, r3
 800a192:	f000 f8f3 	bl	800a37c <RTC_ByteToBcd2>
 800a196:	4603      	mov	r3, r0
 800a198:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800a19a:	68bb      	ldr	r3, [r7, #8]
 800a19c:	785b      	ldrb	r3, [r3, #1]
 800a19e:	4618      	mov	r0, r3
 800a1a0:	f000 f8ec 	bl	800a37c <RTC_ByteToBcd2>
 800a1a4:	4603      	mov	r3, r0
 800a1a6:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800a1a8:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800a1aa:	68bb      	ldr	r3, [r7, #8]
 800a1ac:	789b      	ldrb	r3, [r3, #2]
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	f000 f8e4 	bl	800a37c <RTC_ByteToBcd2>
 800a1b4:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800a1b6:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800a1ba:	68bb      	ldr	r3, [r7, #8]
 800a1bc:	781b      	ldrb	r3, [r3, #0]
 800a1be:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800a1c0:	4313      	orrs	r3, r2
 800a1c2:	617b      	str	r3, [r7, #20]
 800a1c4:	e00e      	b.n	800a1e4 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800a1c6:	68bb      	ldr	r3, [r7, #8]
 800a1c8:	78db      	ldrb	r3, [r3, #3]
 800a1ca:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800a1cc:	68bb      	ldr	r3, [r7, #8]
 800a1ce:	785b      	ldrb	r3, [r3, #1]
 800a1d0:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800a1d2:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800a1d4:	68ba      	ldr	r2, [r7, #8]
 800a1d6:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800a1d8:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800a1da:	68bb      	ldr	r3, [r7, #8]
 800a1dc:	781b      	ldrb	r3, [r3, #0]
 800a1de:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800a1e0:	4313      	orrs	r3, r2
 800a1e2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	22ca      	movs	r2, #202	; 0xca
 800a1ea:	625a      	str	r2, [r3, #36]	; 0x24
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	2253      	movs	r2, #83	; 0x53
 800a1f2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800a1f4:	68f8      	ldr	r0, [r7, #12]
 800a1f6:	f000 f84d 	bl	800a294 <RTC_EnterInitMode>
 800a1fa:	4603      	mov	r3, r0
 800a1fc:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800a1fe:	7cfb      	ldrb	r3, [r7, #19]
 800a200:	2b00      	cmp	r3, #0
 800a202:	d10b      	bne.n	800a21c <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 800a204:	4a0f      	ldr	r2, [pc, #60]	; (800a244 <HAL_RTC_SetDate+0x10c>)
 800a206:	697b      	ldr	r3, [r7, #20]
 800a208:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a20c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a210:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800a212:	68f8      	ldr	r0, [r7, #12]
 800a214:	f000 f874 	bl	800a300 <RTC_ExitInitMode>
 800a218:	4603      	mov	r3, r0
 800a21a:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	22ff      	movs	r2, #255	; 0xff
 800a222:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800a224:	7cfb      	ldrb	r3, [r7, #19]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d103      	bne.n	800a232 <HAL_RTC_SetDate+0xfa>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	2201      	movs	r2, #1
 800a22e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	2200      	movs	r2, #0
 800a236:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800a23a:	7cfb      	ldrb	r3, [r7, #19]
}
 800a23c:	4618      	mov	r0, r3
 800a23e:	371c      	adds	r7, #28
 800a240:	46bd      	mov	sp, r7
 800a242:	bd90      	pop	{r4, r7, pc}
 800a244:	40002800 	.word	0x40002800

0800a248 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800a248:	b580      	push	{r7, lr}
 800a24a:	b084      	sub	sp, #16
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	68da      	ldr	r2, [r3, #12]
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800a25e:	60da      	str	r2, [r3, #12]
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
#endif

  tickstart = HAL_GetTick();
 800a260:	f7fa fa94 	bl	800478c <HAL_GetTick>
 800a264:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800a266:	e009      	b.n	800a27c <HAL_RTC_WaitForSynchro+0x34>
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a268:	f7fa fa90 	bl	800478c <HAL_GetTick>
 800a26c:	4602      	mov	r2, r0
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	1ad3      	subs	r3, r2, r3
 800a272:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a276:	d901      	bls.n	800a27c <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800a278:	2303      	movs	r3, #3
 800a27a:	e007      	b.n	800a28c <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	68db      	ldr	r3, [r3, #12]
 800a282:	f003 0320 	and.w	r3, r3, #32
 800a286:	2b00      	cmp	r3, #0
 800a288:	d0ee      	beq.n	800a268 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800a28a:	2300      	movs	r3, #0
}
 800a28c:	4618      	mov	r0, r3
 800a28e:	3710      	adds	r7, #16
 800a290:	46bd      	mov	sp, r7
 800a292:	bd80      	pop	{r7, pc}

0800a294 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800a294:	b580      	push	{r7, lr}
 800a296:	b084      	sub	sp, #16
 800a298:	af00      	add	r7, sp, #0
 800a29a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a29c:	2300      	movs	r3, #0
 800a29e:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if ((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	68db      	ldr	r3, [r3, #12]
 800a2a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d123      	bne.n	800a2f6 <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	68da      	ldr	r2, [r3, #12]
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a2bc:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800a2be:	f7fa fa65 	bl	800478c <HAL_GetTick>
 800a2c2:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800a2c4:	e00d      	b.n	800a2e2 <RTC_EnterInitMode+0x4e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800a2c6:	f7fa fa61 	bl	800478c <HAL_GetTick>
 800a2ca:	4602      	mov	r2, r0
 800a2cc:	68bb      	ldr	r3, [r7, #8]
 800a2ce:	1ad3      	subs	r3, r2, r3
 800a2d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a2d4:	d905      	bls.n	800a2e2 <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 800a2d6:	2303      	movs	r3, #3
 800a2d8:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	2203      	movs	r2, #3
 800a2de:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	68db      	ldr	r3, [r3, #12]
 800a2e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d102      	bne.n	800a2f6 <RTC_EnterInitMode+0x62>
 800a2f0:	7bfb      	ldrb	r3, [r7, #15]
 800a2f2:	2b03      	cmp	r3, #3
 800a2f4:	d1e7      	bne.n	800a2c6 <RTC_EnterInitMode+0x32>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800a2f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	3710      	adds	r7, #16
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	bd80      	pop	{r7, pc}

0800a300 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800a300:	b580      	push	{r7, lr}
 800a302:	b084      	sub	sp, #16
 800a304:	af00      	add	r7, sp, #0
 800a306:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a308:	2300      	movs	r3, #0
 800a30a:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800a30c:	4b1a      	ldr	r3, [pc, #104]	; (800a378 <RTC_ExitInitMode+0x78>)
 800a30e:	68db      	ldr	r3, [r3, #12]
 800a310:	4a19      	ldr	r2, [pc, #100]	; (800a378 <RTC_ExitInitMode+0x78>)
 800a312:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a316:	60d3      	str	r3, [r2, #12]
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800a318:	4b17      	ldr	r3, [pc, #92]	; (800a378 <RTC_ExitInitMode+0x78>)
 800a31a:	699b      	ldr	r3, [r3, #24]
 800a31c:	f003 0320 	and.w	r3, r3, #32
 800a320:	2b00      	cmp	r3, #0
 800a322:	d10c      	bne.n	800a33e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a324:	6878      	ldr	r0, [r7, #4]
 800a326:	f7ff ff8f 	bl	800a248 <HAL_RTC_WaitForSynchro>
 800a32a:	4603      	mov	r3, r0
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d01e      	beq.n	800a36e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	2203      	movs	r2, #3
 800a334:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      status = HAL_TIMEOUT;
 800a338:	2303      	movs	r3, #3
 800a33a:	73fb      	strb	r3, [r7, #15]
 800a33c:	e017      	b.n	800a36e <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800a33e:	4b0e      	ldr	r3, [pc, #56]	; (800a378 <RTC_ExitInitMode+0x78>)
 800a340:	699b      	ldr	r3, [r3, #24]
 800a342:	4a0d      	ldr	r2, [pc, #52]	; (800a378 <RTC_ExitInitMode+0x78>)
 800a344:	f023 0320 	bic.w	r3, r3, #32
 800a348:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a34a:	6878      	ldr	r0, [r7, #4]
 800a34c:	f7ff ff7c 	bl	800a248 <HAL_RTC_WaitForSynchro>
 800a350:	4603      	mov	r3, r0
 800a352:	2b00      	cmp	r3, #0
 800a354:	d005      	beq.n	800a362 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	2203      	movs	r2, #3
 800a35a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      status = HAL_TIMEOUT;
 800a35e:	2303      	movs	r3, #3
 800a360:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800a362:	4b05      	ldr	r3, [pc, #20]	; (800a378 <RTC_ExitInitMode+0x78>)
 800a364:	699b      	ldr	r3, [r3, #24]
 800a366:	4a04      	ldr	r2, [pc, #16]	; (800a378 <RTC_ExitInitMode+0x78>)
 800a368:	f043 0320 	orr.w	r3, r3, #32
 800a36c:	6193      	str	r3, [r2, #24]
  }

  return status;
 800a36e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a370:	4618      	mov	r0, r3
 800a372:	3710      	adds	r7, #16
 800a374:	46bd      	mov	sp, r7
 800a376:	bd80      	pop	{r7, pc}
 800a378:	40002800 	.word	0x40002800

0800a37c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800a37c:	b480      	push	{r7}
 800a37e:	b085      	sub	sp, #20
 800a380:	af00      	add	r7, sp, #0
 800a382:	4603      	mov	r3, r0
 800a384:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800a386:	2300      	movs	r3, #0
 800a388:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 800a38a:	79fb      	ldrb	r3, [r7, #7]
 800a38c:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 800a38e:	e005      	b.n	800a39c <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	3301      	adds	r3, #1
 800a394:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 800a396:	7afb      	ldrb	r3, [r7, #11]
 800a398:	3b0a      	subs	r3, #10
 800a39a:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 800a39c:	7afb      	ldrb	r3, [r7, #11]
 800a39e:	2b09      	cmp	r3, #9
 800a3a0:	d8f6      	bhi.n	800a390 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	b2db      	uxtb	r3, r3
 800a3a6:	011b      	lsls	r3, r3, #4
 800a3a8:	b2da      	uxtb	r2, r3
 800a3aa:	7afb      	ldrb	r3, [r7, #11]
 800a3ac:	4313      	orrs	r3, r2
 800a3ae:	b2db      	uxtb	r3, r3
}
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	3714      	adds	r7, #20
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ba:	4770      	bx	lr

0800a3bc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a3bc:	b580      	push	{r7, lr}
 800a3be:	b084      	sub	sp, #16
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d101      	bne.n	800a3ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a3ca:	2301      	movs	r3, #1
 800a3cc:	e095      	b.n	800a4fa <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d108      	bne.n	800a3e8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	685b      	ldr	r3, [r3, #4]
 800a3da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a3de:	d009      	beq.n	800a3f4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	2200      	movs	r2, #0
 800a3e4:	61da      	str	r2, [r3, #28]
 800a3e6:	e005      	b.n	800a3f4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	2200      	movs	r2, #0
 800a3f8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a400:	b2db      	uxtb	r3, r3
 800a402:	2b00      	cmp	r3, #0
 800a404:	d106      	bne.n	800a414 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	2200      	movs	r2, #0
 800a40a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a40e:	6878      	ldr	r0, [r7, #4]
 800a410:	f7f9 ff24 	bl	800425c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	2202      	movs	r2, #2
 800a418:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	681a      	ldr	r2, [r3, #0]
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a42a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	68db      	ldr	r3, [r3, #12]
 800a430:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a434:	d902      	bls.n	800a43c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800a436:	2300      	movs	r3, #0
 800a438:	60fb      	str	r3, [r7, #12]
 800a43a:	e002      	b.n	800a442 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800a43c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a440:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	68db      	ldr	r3, [r3, #12]
 800a446:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800a44a:	d007      	beq.n	800a45c <HAL_SPI_Init+0xa0>
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	68db      	ldr	r3, [r3, #12]
 800a450:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a454:	d002      	beq.n	800a45c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	2200      	movs	r2, #0
 800a45a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	685b      	ldr	r3, [r3, #4]
 800a460:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	689b      	ldr	r3, [r3, #8]
 800a468:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800a46c:	431a      	orrs	r2, r3
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	691b      	ldr	r3, [r3, #16]
 800a472:	f003 0302 	and.w	r3, r3, #2
 800a476:	431a      	orrs	r2, r3
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	695b      	ldr	r3, [r3, #20]
 800a47c:	f003 0301 	and.w	r3, r3, #1
 800a480:	431a      	orrs	r2, r3
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	699b      	ldr	r3, [r3, #24]
 800a486:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a48a:	431a      	orrs	r2, r3
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	69db      	ldr	r3, [r3, #28]
 800a490:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a494:	431a      	orrs	r2, r3
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	6a1b      	ldr	r3, [r3, #32]
 800a49a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a49e:	ea42 0103 	orr.w	r1, r2, r3
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4a6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	430a      	orrs	r2, r1
 800a4b0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	699b      	ldr	r3, [r3, #24]
 800a4b6:	0c1b      	lsrs	r3, r3, #16
 800a4b8:	f003 0204 	and.w	r2, r3, #4
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4c0:	f003 0310 	and.w	r3, r3, #16
 800a4c4:	431a      	orrs	r2, r3
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4ca:	f003 0308 	and.w	r3, r3, #8
 800a4ce:	431a      	orrs	r2, r3
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	68db      	ldr	r3, [r3, #12]
 800a4d4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800a4d8:	ea42 0103 	orr.w	r1, r2, r3
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	430a      	orrs	r2, r1
 800a4e8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	2200      	movs	r2, #0
 800a4ee:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	2201      	movs	r2, #1
 800a4f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800a4f8:	2300      	movs	r3, #0
}
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	3710      	adds	r7, #16
 800a4fe:	46bd      	mov	sp, r7
 800a500:	bd80      	pop	{r7, pc}

0800a502 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a502:	b580      	push	{r7, lr}
 800a504:	b088      	sub	sp, #32
 800a506:	af00      	add	r7, sp, #0
 800a508:	60f8      	str	r0, [r7, #12]
 800a50a:	60b9      	str	r1, [r7, #8]
 800a50c:	603b      	str	r3, [r7, #0]
 800a50e:	4613      	mov	r3, r2
 800a510:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a512:	2300      	movs	r3, #0
 800a514:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800a51c:	2b01      	cmp	r3, #1
 800a51e:	d101      	bne.n	800a524 <HAL_SPI_Transmit+0x22>
 800a520:	2302      	movs	r3, #2
 800a522:	e158      	b.n	800a7d6 <HAL_SPI_Transmit+0x2d4>
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	2201      	movs	r2, #1
 800a528:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a52c:	f7fa f92e 	bl	800478c <HAL_GetTick>
 800a530:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800a532:	88fb      	ldrh	r3, [r7, #6]
 800a534:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a53c:	b2db      	uxtb	r3, r3
 800a53e:	2b01      	cmp	r3, #1
 800a540:	d002      	beq.n	800a548 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800a542:	2302      	movs	r3, #2
 800a544:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a546:	e13d      	b.n	800a7c4 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800a548:	68bb      	ldr	r3, [r7, #8]
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d002      	beq.n	800a554 <HAL_SPI_Transmit+0x52>
 800a54e:	88fb      	ldrh	r3, [r7, #6]
 800a550:	2b00      	cmp	r3, #0
 800a552:	d102      	bne.n	800a55a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800a554:	2301      	movs	r3, #1
 800a556:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a558:	e134      	b.n	800a7c4 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	2203      	movs	r2, #3
 800a55e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	2200      	movs	r2, #0
 800a566:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	68ba      	ldr	r2, [r7, #8]
 800a56c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	88fa      	ldrh	r2, [r7, #6]
 800a572:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	88fa      	ldrh	r2, [r7, #6]
 800a578:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	2200      	movs	r2, #0
 800a57e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	2200      	movs	r2, #0
 800a584:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	2200      	movs	r2, #0
 800a58c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	2200      	movs	r2, #0
 800a594:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	2200      	movs	r2, #0
 800a59a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	689b      	ldr	r3, [r3, #8]
 800a5a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a5a4:	d10f      	bne.n	800a5c6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	681a      	ldr	r2, [r3, #0]
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a5b4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	681a      	ldr	r2, [r3, #0]
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a5c4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5d0:	2b40      	cmp	r3, #64	; 0x40
 800a5d2:	d007      	beq.n	800a5e4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	681a      	ldr	r2, [r3, #0]
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a5e2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	68db      	ldr	r3, [r3, #12]
 800a5e8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a5ec:	d94b      	bls.n	800a686 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	685b      	ldr	r3, [r3, #4]
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d002      	beq.n	800a5fc <HAL_SPI_Transmit+0xfa>
 800a5f6:	8afb      	ldrh	r3, [r7, #22]
 800a5f8:	2b01      	cmp	r3, #1
 800a5fa:	d13e      	bne.n	800a67a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a600:	881a      	ldrh	r2, [r3, #0]
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a60c:	1c9a      	adds	r2, r3, #2
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a616:	b29b      	uxth	r3, r3
 800a618:	3b01      	subs	r3, #1
 800a61a:	b29a      	uxth	r2, r3
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800a620:	e02b      	b.n	800a67a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	689b      	ldr	r3, [r3, #8]
 800a628:	f003 0302 	and.w	r3, r3, #2
 800a62c:	2b02      	cmp	r3, #2
 800a62e:	d112      	bne.n	800a656 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a634:	881a      	ldrh	r2, [r3, #0]
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a640:	1c9a      	adds	r2, r3, #2
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a64a:	b29b      	uxth	r3, r3
 800a64c:	3b01      	subs	r3, #1
 800a64e:	b29a      	uxth	r2, r3
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a654:	e011      	b.n	800a67a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a656:	f7fa f899 	bl	800478c <HAL_GetTick>
 800a65a:	4602      	mov	r2, r0
 800a65c:	69bb      	ldr	r3, [r7, #24]
 800a65e:	1ad3      	subs	r3, r2, r3
 800a660:	683a      	ldr	r2, [r7, #0]
 800a662:	429a      	cmp	r2, r3
 800a664:	d803      	bhi.n	800a66e <HAL_SPI_Transmit+0x16c>
 800a666:	683b      	ldr	r3, [r7, #0]
 800a668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a66c:	d102      	bne.n	800a674 <HAL_SPI_Transmit+0x172>
 800a66e:	683b      	ldr	r3, [r7, #0]
 800a670:	2b00      	cmp	r3, #0
 800a672:	d102      	bne.n	800a67a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800a674:	2303      	movs	r3, #3
 800a676:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a678:	e0a4      	b.n	800a7c4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a67e:	b29b      	uxth	r3, r3
 800a680:	2b00      	cmp	r3, #0
 800a682:	d1ce      	bne.n	800a622 <HAL_SPI_Transmit+0x120>
 800a684:	e07c      	b.n	800a780 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	685b      	ldr	r3, [r3, #4]
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d002      	beq.n	800a694 <HAL_SPI_Transmit+0x192>
 800a68e:	8afb      	ldrh	r3, [r7, #22]
 800a690:	2b01      	cmp	r3, #1
 800a692:	d170      	bne.n	800a776 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a698:	b29b      	uxth	r3, r3
 800a69a:	2b01      	cmp	r3, #1
 800a69c:	d912      	bls.n	800a6c4 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6a2:	881a      	ldrh	r2, [r3, #0]
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6ae:	1c9a      	adds	r2, r3, #2
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a6b8:	b29b      	uxth	r3, r3
 800a6ba:	3b02      	subs	r3, #2
 800a6bc:	b29a      	uxth	r2, r3
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a6c2:	e058      	b.n	800a776 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	330c      	adds	r3, #12
 800a6ce:	7812      	ldrb	r2, [r2, #0]
 800a6d0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6d6:	1c5a      	adds	r2, r3, #1
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a6e0:	b29b      	uxth	r3, r3
 800a6e2:	3b01      	subs	r3, #1
 800a6e4:	b29a      	uxth	r2, r3
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800a6ea:	e044      	b.n	800a776 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	689b      	ldr	r3, [r3, #8]
 800a6f2:	f003 0302 	and.w	r3, r3, #2
 800a6f6:	2b02      	cmp	r3, #2
 800a6f8:	d12b      	bne.n	800a752 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a6fe:	b29b      	uxth	r3, r3
 800a700:	2b01      	cmp	r3, #1
 800a702:	d912      	bls.n	800a72a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a708:	881a      	ldrh	r2, [r3, #0]
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a714:	1c9a      	adds	r2, r3, #2
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a71e:	b29b      	uxth	r3, r3
 800a720:	3b02      	subs	r3, #2
 800a722:	b29a      	uxth	r2, r3
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a728:	e025      	b.n	800a776 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	330c      	adds	r3, #12
 800a734:	7812      	ldrb	r2, [r2, #0]
 800a736:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a73c:	1c5a      	adds	r2, r3, #1
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a746:	b29b      	uxth	r3, r3
 800a748:	3b01      	subs	r3, #1
 800a74a:	b29a      	uxth	r2, r3
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a750:	e011      	b.n	800a776 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a752:	f7fa f81b 	bl	800478c <HAL_GetTick>
 800a756:	4602      	mov	r2, r0
 800a758:	69bb      	ldr	r3, [r7, #24]
 800a75a:	1ad3      	subs	r3, r2, r3
 800a75c:	683a      	ldr	r2, [r7, #0]
 800a75e:	429a      	cmp	r2, r3
 800a760:	d803      	bhi.n	800a76a <HAL_SPI_Transmit+0x268>
 800a762:	683b      	ldr	r3, [r7, #0]
 800a764:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a768:	d102      	bne.n	800a770 <HAL_SPI_Transmit+0x26e>
 800a76a:	683b      	ldr	r3, [r7, #0]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d102      	bne.n	800a776 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800a770:	2303      	movs	r3, #3
 800a772:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a774:	e026      	b.n	800a7c4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a77a:	b29b      	uxth	r3, r3
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d1b5      	bne.n	800a6ec <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a780:	69ba      	ldr	r2, [r7, #24]
 800a782:	6839      	ldr	r1, [r7, #0]
 800a784:	68f8      	ldr	r0, [r7, #12]
 800a786:	f000 fb5b 	bl	800ae40 <SPI_EndRxTxTransaction>
 800a78a:	4603      	mov	r3, r0
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d002      	beq.n	800a796 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	2220      	movs	r2, #32
 800a794:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	689b      	ldr	r3, [r3, #8]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d10a      	bne.n	800a7b4 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a79e:	2300      	movs	r3, #0
 800a7a0:	613b      	str	r3, [r7, #16]
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	68db      	ldr	r3, [r3, #12]
 800a7a8:	613b      	str	r3, [r7, #16]
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	689b      	ldr	r3, [r3, #8]
 800a7b0:	613b      	str	r3, [r7, #16]
 800a7b2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d002      	beq.n	800a7c2 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800a7bc:	2301      	movs	r3, #1
 800a7be:	77fb      	strb	r3, [r7, #31]
 800a7c0:	e000      	b.n	800a7c4 <HAL_SPI_Transmit+0x2c2>
  }

error:
 800a7c2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	2201      	movs	r2, #1
 800a7c8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	2200      	movs	r2, #0
 800a7d0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800a7d4:	7ffb      	ldrb	r3, [r7, #31]
}
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	3720      	adds	r7, #32
 800a7da:	46bd      	mov	sp, r7
 800a7dc:	bd80      	pop	{r7, pc}

0800a7de <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800a7de:	b580      	push	{r7, lr}
 800a7e0:	b08a      	sub	sp, #40	; 0x28
 800a7e2:	af00      	add	r7, sp, #0
 800a7e4:	60f8      	str	r0, [r7, #12]
 800a7e6:	60b9      	str	r1, [r7, #8]
 800a7e8:	607a      	str	r2, [r7, #4]
 800a7ea:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800a7ec:	2301      	movs	r3, #1
 800a7ee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800a7fc:	2b01      	cmp	r3, #1
 800a7fe:	d101      	bne.n	800a804 <HAL_SPI_TransmitReceive+0x26>
 800a800:	2302      	movs	r3, #2
 800a802:	e1fb      	b.n	800abfc <HAL_SPI_TransmitReceive+0x41e>
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	2201      	movs	r2, #1
 800a808:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a80c:	f7f9 ffbe 	bl	800478c <HAL_GetTick>
 800a810:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a818:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	685b      	ldr	r3, [r3, #4]
 800a81e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800a820:	887b      	ldrh	r3, [r7, #2]
 800a822:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800a824:	887b      	ldrh	r3, [r7, #2]
 800a826:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a828:	7efb      	ldrb	r3, [r7, #27]
 800a82a:	2b01      	cmp	r3, #1
 800a82c:	d00e      	beq.n	800a84c <HAL_SPI_TransmitReceive+0x6e>
 800a82e:	697b      	ldr	r3, [r7, #20]
 800a830:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a834:	d106      	bne.n	800a844 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	689b      	ldr	r3, [r3, #8]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d102      	bne.n	800a844 <HAL_SPI_TransmitReceive+0x66>
 800a83e:	7efb      	ldrb	r3, [r7, #27]
 800a840:	2b04      	cmp	r3, #4
 800a842:	d003      	beq.n	800a84c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800a844:	2302      	movs	r3, #2
 800a846:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800a84a:	e1cd      	b.n	800abe8 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a84c:	68bb      	ldr	r3, [r7, #8]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d005      	beq.n	800a85e <HAL_SPI_TransmitReceive+0x80>
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	2b00      	cmp	r3, #0
 800a856:	d002      	beq.n	800a85e <HAL_SPI_TransmitReceive+0x80>
 800a858:	887b      	ldrh	r3, [r7, #2]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d103      	bne.n	800a866 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800a85e:	2301      	movs	r3, #1
 800a860:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800a864:	e1c0      	b.n	800abe8 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a86c:	b2db      	uxtb	r3, r3
 800a86e:	2b04      	cmp	r3, #4
 800a870:	d003      	beq.n	800a87a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	2205      	movs	r2, #5
 800a876:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	2200      	movs	r2, #0
 800a87e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	687a      	ldr	r2, [r7, #4]
 800a884:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	887a      	ldrh	r2, [r7, #2]
 800a88a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	887a      	ldrh	r2, [r7, #2]
 800a892:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	68ba      	ldr	r2, [r7, #8]
 800a89a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	887a      	ldrh	r2, [r7, #2]
 800a8a0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	887a      	ldrh	r2, [r7, #2]
 800a8a6:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	2200      	movs	r2, #0
 800a8ac:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	2200      	movs	r2, #0
 800a8b2:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	68db      	ldr	r3, [r3, #12]
 800a8b8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a8bc:	d802      	bhi.n	800a8c4 <HAL_SPI_TransmitReceive+0xe6>
 800a8be:	8a3b      	ldrh	r3, [r7, #16]
 800a8c0:	2b01      	cmp	r3, #1
 800a8c2:	d908      	bls.n	800a8d6 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	685a      	ldr	r2, [r3, #4]
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a8d2:	605a      	str	r2, [r3, #4]
 800a8d4:	e007      	b.n	800a8e6 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	685a      	ldr	r2, [r3, #4]
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a8e4:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8f0:	2b40      	cmp	r3, #64	; 0x40
 800a8f2:	d007      	beq.n	800a904 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	681a      	ldr	r2, [r3, #0]
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a902:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	68db      	ldr	r3, [r3, #12]
 800a908:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a90c:	d97c      	bls.n	800aa08 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	685b      	ldr	r3, [r3, #4]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d002      	beq.n	800a91c <HAL_SPI_TransmitReceive+0x13e>
 800a916:	8a7b      	ldrh	r3, [r7, #18]
 800a918:	2b01      	cmp	r3, #1
 800a91a:	d169      	bne.n	800a9f0 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a920:	881a      	ldrh	r2, [r3, #0]
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a92c:	1c9a      	adds	r2, r3, #2
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a936:	b29b      	uxth	r3, r3
 800a938:	3b01      	subs	r3, #1
 800a93a:	b29a      	uxth	r2, r3
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a940:	e056      	b.n	800a9f0 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	689b      	ldr	r3, [r3, #8]
 800a948:	f003 0302 	and.w	r3, r3, #2
 800a94c:	2b02      	cmp	r3, #2
 800a94e:	d11b      	bne.n	800a988 <HAL_SPI_TransmitReceive+0x1aa>
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a954:	b29b      	uxth	r3, r3
 800a956:	2b00      	cmp	r3, #0
 800a958:	d016      	beq.n	800a988 <HAL_SPI_TransmitReceive+0x1aa>
 800a95a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a95c:	2b01      	cmp	r3, #1
 800a95e:	d113      	bne.n	800a988 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a964:	881a      	ldrh	r2, [r3, #0]
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a970:	1c9a      	adds	r2, r3, #2
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a97a:	b29b      	uxth	r3, r3
 800a97c:	3b01      	subs	r3, #1
 800a97e:	b29a      	uxth	r2, r3
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a984:	2300      	movs	r3, #0
 800a986:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	689b      	ldr	r3, [r3, #8]
 800a98e:	f003 0301 	and.w	r3, r3, #1
 800a992:	2b01      	cmp	r3, #1
 800a994:	d11c      	bne.n	800a9d0 <HAL_SPI_TransmitReceive+0x1f2>
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a99c:	b29b      	uxth	r3, r3
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d016      	beq.n	800a9d0 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	68da      	ldr	r2, [r3, #12]
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9ac:	b292      	uxth	r2, r2
 800a9ae:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9b4:	1c9a      	adds	r2, r3, #2
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a9c0:	b29b      	uxth	r3, r3
 800a9c2:	3b01      	subs	r3, #1
 800a9c4:	b29a      	uxth	r2, r3
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a9cc:	2301      	movs	r3, #1
 800a9ce:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a9d0:	f7f9 fedc 	bl	800478c <HAL_GetTick>
 800a9d4:	4602      	mov	r2, r0
 800a9d6:	69fb      	ldr	r3, [r7, #28]
 800a9d8:	1ad3      	subs	r3, r2, r3
 800a9da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a9dc:	429a      	cmp	r2, r3
 800a9de:	d807      	bhi.n	800a9f0 <HAL_SPI_TransmitReceive+0x212>
 800a9e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9e6:	d003      	beq.n	800a9f0 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800a9e8:	2303      	movs	r3, #3
 800a9ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800a9ee:	e0fb      	b.n	800abe8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a9f4:	b29b      	uxth	r3, r3
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d1a3      	bne.n	800a942 <HAL_SPI_TransmitReceive+0x164>
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800aa00:	b29b      	uxth	r3, r3
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d19d      	bne.n	800a942 <HAL_SPI_TransmitReceive+0x164>
 800aa06:	e0df      	b.n	800abc8 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	685b      	ldr	r3, [r3, #4]
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d003      	beq.n	800aa18 <HAL_SPI_TransmitReceive+0x23a>
 800aa10:	8a7b      	ldrh	r3, [r7, #18]
 800aa12:	2b01      	cmp	r3, #1
 800aa14:	f040 80cb 	bne.w	800abae <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aa1c:	b29b      	uxth	r3, r3
 800aa1e:	2b01      	cmp	r3, #1
 800aa20:	d912      	bls.n	800aa48 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa26:	881a      	ldrh	r2, [r3, #0]
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa32:	1c9a      	adds	r2, r3, #2
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aa3c:	b29b      	uxth	r3, r3
 800aa3e:	3b02      	subs	r3, #2
 800aa40:	b29a      	uxth	r2, r3
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	87da      	strh	r2, [r3, #62]	; 0x3e
 800aa46:	e0b2      	b.n	800abae <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	330c      	adds	r3, #12
 800aa52:	7812      	ldrb	r2, [r2, #0]
 800aa54:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa5a:	1c5a      	adds	r2, r3, #1
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aa64:	b29b      	uxth	r3, r3
 800aa66:	3b01      	subs	r3, #1
 800aa68:	b29a      	uxth	r2, r3
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800aa6e:	e09e      	b.n	800abae <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	689b      	ldr	r3, [r3, #8]
 800aa76:	f003 0302 	and.w	r3, r3, #2
 800aa7a:	2b02      	cmp	r3, #2
 800aa7c:	d134      	bne.n	800aae8 <HAL_SPI_TransmitReceive+0x30a>
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aa82:	b29b      	uxth	r3, r3
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d02f      	beq.n	800aae8 <HAL_SPI_TransmitReceive+0x30a>
 800aa88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa8a:	2b01      	cmp	r3, #1
 800aa8c:	d12c      	bne.n	800aae8 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aa92:	b29b      	uxth	r3, r3
 800aa94:	2b01      	cmp	r3, #1
 800aa96:	d912      	bls.n	800aabe <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa9c:	881a      	ldrh	r2, [r3, #0]
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aaa8:	1c9a      	adds	r2, r3, #2
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aab2:	b29b      	uxth	r3, r3
 800aab4:	3b02      	subs	r3, #2
 800aab6:	b29a      	uxth	r2, r3
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	87da      	strh	r2, [r3, #62]	; 0x3e
 800aabc:	e012      	b.n	800aae4 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	330c      	adds	r3, #12
 800aac8:	7812      	ldrb	r2, [r2, #0]
 800aaca:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aad0:	1c5a      	adds	r2, r3, #1
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aada:	b29b      	uxth	r3, r3
 800aadc:	3b01      	subs	r3, #1
 800aade:	b29a      	uxth	r2, r3
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800aae4:	2300      	movs	r3, #0
 800aae6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	689b      	ldr	r3, [r3, #8]
 800aaee:	f003 0301 	and.w	r3, r3, #1
 800aaf2:	2b01      	cmp	r3, #1
 800aaf4:	d148      	bne.n	800ab88 <HAL_SPI_TransmitReceive+0x3aa>
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800aafc:	b29b      	uxth	r3, r3
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d042      	beq.n	800ab88 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ab08:	b29b      	uxth	r3, r3
 800ab0a:	2b01      	cmp	r3, #1
 800ab0c:	d923      	bls.n	800ab56 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	68da      	ldr	r2, [r3, #12]
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab18:	b292      	uxth	r2, r2
 800ab1a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab20:	1c9a      	adds	r2, r3, #2
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ab2c:	b29b      	uxth	r3, r3
 800ab2e:	3b02      	subs	r3, #2
 800ab30:	b29a      	uxth	r2, r3
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ab3e:	b29b      	uxth	r3, r3
 800ab40:	2b01      	cmp	r3, #1
 800ab42:	d81f      	bhi.n	800ab84 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	685a      	ldr	r2, [r3, #4]
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800ab52:	605a      	str	r2, [r3, #4]
 800ab54:	e016      	b.n	800ab84 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	f103 020c 	add.w	r2, r3, #12
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab62:	7812      	ldrb	r2, [r2, #0]
 800ab64:	b2d2      	uxtb	r2, r2
 800ab66:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab6c:	1c5a      	adds	r2, r3, #1
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ab78:	b29b      	uxth	r3, r3
 800ab7a:	3b01      	subs	r3, #1
 800ab7c:	b29a      	uxth	r2, r3
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ab84:	2301      	movs	r3, #1
 800ab86:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800ab88:	f7f9 fe00 	bl	800478c <HAL_GetTick>
 800ab8c:	4602      	mov	r2, r0
 800ab8e:	69fb      	ldr	r3, [r7, #28]
 800ab90:	1ad3      	subs	r3, r2, r3
 800ab92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab94:	429a      	cmp	r2, r3
 800ab96:	d803      	bhi.n	800aba0 <HAL_SPI_TransmitReceive+0x3c2>
 800ab98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab9e:	d102      	bne.n	800aba6 <HAL_SPI_TransmitReceive+0x3c8>
 800aba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d103      	bne.n	800abae <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800aba6:	2303      	movs	r3, #3
 800aba8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800abac:	e01c      	b.n	800abe8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800abb2:	b29b      	uxth	r3, r3
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	f47f af5b 	bne.w	800aa70 <HAL_SPI_TransmitReceive+0x292>
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800abc0:	b29b      	uxth	r3, r3
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	f47f af54 	bne.w	800aa70 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800abc8:	69fa      	ldr	r2, [r7, #28]
 800abca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800abcc:	68f8      	ldr	r0, [r7, #12]
 800abce:	f000 f937 	bl	800ae40 <SPI_EndRxTxTransaction>
 800abd2:	4603      	mov	r3, r0
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d006      	beq.n	800abe6 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800abd8:	2301      	movs	r3, #1
 800abda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	2220      	movs	r2, #32
 800abe2:	661a      	str	r2, [r3, #96]	; 0x60
 800abe4:	e000      	b.n	800abe8 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800abe6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	2201      	movs	r2, #1
 800abec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	2200      	movs	r2, #0
 800abf4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800abf8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800abfc:	4618      	mov	r0, r3
 800abfe:	3728      	adds	r7, #40	; 0x28
 800ac00:	46bd      	mov	sp, r7
 800ac02:	bd80      	pop	{r7, pc}

0800ac04 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ac04:	b580      	push	{r7, lr}
 800ac06:	b088      	sub	sp, #32
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	60f8      	str	r0, [r7, #12]
 800ac0c:	60b9      	str	r1, [r7, #8]
 800ac0e:	603b      	str	r3, [r7, #0]
 800ac10:	4613      	mov	r3, r2
 800ac12:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800ac14:	f7f9 fdba 	bl	800478c <HAL_GetTick>
 800ac18:	4602      	mov	r2, r0
 800ac1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac1c:	1a9b      	subs	r3, r3, r2
 800ac1e:	683a      	ldr	r2, [r7, #0]
 800ac20:	4413      	add	r3, r2
 800ac22:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800ac24:	f7f9 fdb2 	bl	800478c <HAL_GetTick>
 800ac28:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800ac2a:	4b39      	ldr	r3, [pc, #228]	; (800ad10 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	015b      	lsls	r3, r3, #5
 800ac30:	0d1b      	lsrs	r3, r3, #20
 800ac32:	69fa      	ldr	r2, [r7, #28]
 800ac34:	fb02 f303 	mul.w	r3, r2, r3
 800ac38:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ac3a:	e054      	b.n	800ace6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800ac3c:	683b      	ldr	r3, [r7, #0]
 800ac3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac42:	d050      	beq.n	800ace6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800ac44:	f7f9 fda2 	bl	800478c <HAL_GetTick>
 800ac48:	4602      	mov	r2, r0
 800ac4a:	69bb      	ldr	r3, [r7, #24]
 800ac4c:	1ad3      	subs	r3, r2, r3
 800ac4e:	69fa      	ldr	r2, [r7, #28]
 800ac50:	429a      	cmp	r2, r3
 800ac52:	d902      	bls.n	800ac5a <SPI_WaitFlagStateUntilTimeout+0x56>
 800ac54:	69fb      	ldr	r3, [r7, #28]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d13d      	bne.n	800acd6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	685a      	ldr	r2, [r3, #4]
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800ac68:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	685b      	ldr	r3, [r3, #4]
 800ac6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ac72:	d111      	bne.n	800ac98 <SPI_WaitFlagStateUntilTimeout+0x94>
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	689b      	ldr	r3, [r3, #8]
 800ac78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ac7c:	d004      	beq.n	800ac88 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	689b      	ldr	r3, [r3, #8]
 800ac82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ac86:	d107      	bne.n	800ac98 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	681a      	ldr	r2, [r3, #0]
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ac96:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aca0:	d10f      	bne.n	800acc2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	681a      	ldr	r2, [r3, #0]
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800acb0:	601a      	str	r2, [r3, #0]
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	681a      	ldr	r2, [r3, #0]
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800acc0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	2201      	movs	r2, #1
 800acc6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	2200      	movs	r2, #0
 800acce:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800acd2:	2303      	movs	r3, #3
 800acd4:	e017      	b.n	800ad06 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800acd6:	697b      	ldr	r3, [r7, #20]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d101      	bne.n	800ace0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800acdc:	2300      	movs	r3, #0
 800acde:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800ace0:	697b      	ldr	r3, [r7, #20]
 800ace2:	3b01      	subs	r3, #1
 800ace4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	689a      	ldr	r2, [r3, #8]
 800acec:	68bb      	ldr	r3, [r7, #8]
 800acee:	4013      	ands	r3, r2
 800acf0:	68ba      	ldr	r2, [r7, #8]
 800acf2:	429a      	cmp	r2, r3
 800acf4:	bf0c      	ite	eq
 800acf6:	2301      	moveq	r3, #1
 800acf8:	2300      	movne	r3, #0
 800acfa:	b2db      	uxtb	r3, r3
 800acfc:	461a      	mov	r2, r3
 800acfe:	79fb      	ldrb	r3, [r7, #7]
 800ad00:	429a      	cmp	r2, r3
 800ad02:	d19b      	bne.n	800ac3c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800ad04:	2300      	movs	r3, #0
}
 800ad06:	4618      	mov	r0, r3
 800ad08:	3720      	adds	r7, #32
 800ad0a:	46bd      	mov	sp, r7
 800ad0c:	bd80      	pop	{r7, pc}
 800ad0e:	bf00      	nop
 800ad10:	20000184 	.word	0x20000184

0800ad14 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b08a      	sub	sp, #40	; 0x28
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	60f8      	str	r0, [r7, #12]
 800ad1c:	60b9      	str	r1, [r7, #8]
 800ad1e:	607a      	str	r2, [r7, #4]
 800ad20:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800ad22:	2300      	movs	r3, #0
 800ad24:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800ad26:	f7f9 fd31 	bl	800478c <HAL_GetTick>
 800ad2a:	4602      	mov	r2, r0
 800ad2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad2e:	1a9b      	subs	r3, r3, r2
 800ad30:	683a      	ldr	r2, [r7, #0]
 800ad32:	4413      	add	r3, r2
 800ad34:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800ad36:	f7f9 fd29 	bl	800478c <HAL_GetTick>
 800ad3a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	330c      	adds	r3, #12
 800ad42:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800ad44:	4b3d      	ldr	r3, [pc, #244]	; (800ae3c <SPI_WaitFifoStateUntilTimeout+0x128>)
 800ad46:	681a      	ldr	r2, [r3, #0]
 800ad48:	4613      	mov	r3, r2
 800ad4a:	009b      	lsls	r3, r3, #2
 800ad4c:	4413      	add	r3, r2
 800ad4e:	00da      	lsls	r2, r3, #3
 800ad50:	1ad3      	subs	r3, r2, r3
 800ad52:	0d1b      	lsrs	r3, r3, #20
 800ad54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad56:	fb02 f303 	mul.w	r3, r2, r3
 800ad5a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800ad5c:	e060      	b.n	800ae20 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800ad5e:	68bb      	ldr	r3, [r7, #8]
 800ad60:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800ad64:	d107      	bne.n	800ad76 <SPI_WaitFifoStateUntilTimeout+0x62>
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d104      	bne.n	800ad76 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800ad6c:	69fb      	ldr	r3, [r7, #28]
 800ad6e:	781b      	ldrb	r3, [r3, #0]
 800ad70:	b2db      	uxtb	r3, r3
 800ad72:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800ad74:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800ad76:	683b      	ldr	r3, [r7, #0]
 800ad78:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad7c:	d050      	beq.n	800ae20 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800ad7e:	f7f9 fd05 	bl	800478c <HAL_GetTick>
 800ad82:	4602      	mov	r2, r0
 800ad84:	6a3b      	ldr	r3, [r7, #32]
 800ad86:	1ad3      	subs	r3, r2, r3
 800ad88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad8a:	429a      	cmp	r2, r3
 800ad8c:	d902      	bls.n	800ad94 <SPI_WaitFifoStateUntilTimeout+0x80>
 800ad8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d13d      	bne.n	800ae10 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	685a      	ldr	r2, [r3, #4]
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800ada2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	685b      	ldr	r3, [r3, #4]
 800ada8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800adac:	d111      	bne.n	800add2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	689b      	ldr	r3, [r3, #8]
 800adb2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800adb6:	d004      	beq.n	800adc2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	689b      	ldr	r3, [r3, #8]
 800adbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800adc0:	d107      	bne.n	800add2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	681a      	ldr	r2, [r3, #0]
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800add0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800add6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800adda:	d10f      	bne.n	800adfc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	681a      	ldr	r2, [r3, #0]
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800adea:	601a      	str	r2, [r3, #0]
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	681a      	ldr	r2, [r3, #0]
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800adfa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	2201      	movs	r2, #1
 800ae00:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	2200      	movs	r2, #0
 800ae08:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800ae0c:	2303      	movs	r3, #3
 800ae0e:	e010      	b.n	800ae32 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800ae10:	69bb      	ldr	r3, [r7, #24]
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d101      	bne.n	800ae1a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800ae16:	2300      	movs	r3, #0
 800ae18:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800ae1a:	69bb      	ldr	r3, [r7, #24]
 800ae1c:	3b01      	subs	r3, #1
 800ae1e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	689a      	ldr	r2, [r3, #8]
 800ae26:	68bb      	ldr	r3, [r7, #8]
 800ae28:	4013      	ands	r3, r2
 800ae2a:	687a      	ldr	r2, [r7, #4]
 800ae2c:	429a      	cmp	r2, r3
 800ae2e:	d196      	bne.n	800ad5e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800ae30:	2300      	movs	r3, #0
}
 800ae32:	4618      	mov	r0, r3
 800ae34:	3728      	adds	r7, #40	; 0x28
 800ae36:	46bd      	mov	sp, r7
 800ae38:	bd80      	pop	{r7, pc}
 800ae3a:	bf00      	nop
 800ae3c:	20000184 	.word	0x20000184

0800ae40 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800ae40:	b580      	push	{r7, lr}
 800ae42:	b086      	sub	sp, #24
 800ae44:	af02      	add	r7, sp, #8
 800ae46:	60f8      	str	r0, [r7, #12]
 800ae48:	60b9      	str	r1, [r7, #8]
 800ae4a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	9300      	str	r3, [sp, #0]
 800ae50:	68bb      	ldr	r3, [r7, #8]
 800ae52:	2200      	movs	r2, #0
 800ae54:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800ae58:	68f8      	ldr	r0, [r7, #12]
 800ae5a:	f7ff ff5b 	bl	800ad14 <SPI_WaitFifoStateUntilTimeout>
 800ae5e:	4603      	mov	r3, r0
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d007      	beq.n	800ae74 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ae68:	f043 0220 	orr.w	r2, r3, #32
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800ae70:	2303      	movs	r3, #3
 800ae72:	e027      	b.n	800aec4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	9300      	str	r3, [sp, #0]
 800ae78:	68bb      	ldr	r3, [r7, #8]
 800ae7a:	2200      	movs	r2, #0
 800ae7c:	2180      	movs	r1, #128	; 0x80
 800ae7e:	68f8      	ldr	r0, [r7, #12]
 800ae80:	f7ff fec0 	bl	800ac04 <SPI_WaitFlagStateUntilTimeout>
 800ae84:	4603      	mov	r3, r0
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d007      	beq.n	800ae9a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ae8e:	f043 0220 	orr.w	r2, r3, #32
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800ae96:	2303      	movs	r3, #3
 800ae98:	e014      	b.n	800aec4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	9300      	str	r3, [sp, #0]
 800ae9e:	68bb      	ldr	r3, [r7, #8]
 800aea0:	2200      	movs	r2, #0
 800aea2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800aea6:	68f8      	ldr	r0, [r7, #12]
 800aea8:	f7ff ff34 	bl	800ad14 <SPI_WaitFifoStateUntilTimeout>
 800aeac:	4603      	mov	r3, r0
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d007      	beq.n	800aec2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aeb6:	f043 0220 	orr.w	r2, r3, #32
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800aebe:	2303      	movs	r3, #3
 800aec0:	e000      	b.n	800aec4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800aec2:	2300      	movs	r3, #0
}
 800aec4:	4618      	mov	r0, r3
 800aec6:	3710      	adds	r7, #16
 800aec8:	46bd      	mov	sp, r7
 800aeca:	bd80      	pop	{r7, pc}

0800aecc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800aecc:	b580      	push	{r7, lr}
 800aece:	b082      	sub	sp, #8
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d101      	bne.n	800aede <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800aeda:	2301      	movs	r3, #1
 800aedc:	e049      	b.n	800af72 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aee4:	b2db      	uxtb	r3, r3
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d106      	bne.n	800aef8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	2200      	movs	r2, #0
 800aeee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800aef2:	6878      	ldr	r0, [r7, #4]
 800aef4:	f7f9 fa06 	bl	8004304 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	2202      	movs	r2, #2
 800aefc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	681a      	ldr	r2, [r3, #0]
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	3304      	adds	r3, #4
 800af08:	4619      	mov	r1, r3
 800af0a:	4610      	mov	r0, r2
 800af0c:	f000 fab6 	bl	800b47c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	2201      	movs	r2, #1
 800af14:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	2201      	movs	r2, #1
 800af1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	2201      	movs	r2, #1
 800af24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	2201      	movs	r2, #1
 800af2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	2201      	movs	r2, #1
 800af34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	2201      	movs	r2, #1
 800af3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	2201      	movs	r2, #1
 800af44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	2201      	movs	r2, #1
 800af4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	2201      	movs	r2, #1
 800af54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	2201      	movs	r2, #1
 800af5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	2201      	movs	r2, #1
 800af64:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	2201      	movs	r2, #1
 800af6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800af70:	2300      	movs	r3, #0
}
 800af72:	4618      	mov	r0, r3
 800af74:	3708      	adds	r7, #8
 800af76:	46bd      	mov	sp, r7
 800af78:	bd80      	pop	{r7, pc}
	...

0800af7c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800af7c:	b480      	push	{r7}
 800af7e:	b085      	sub	sp, #20
 800af80:	af00      	add	r7, sp, #0
 800af82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800af8a:	b2db      	uxtb	r3, r3
 800af8c:	2b01      	cmp	r3, #1
 800af8e:	d001      	beq.n	800af94 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800af90:	2301      	movs	r3, #1
 800af92:	e04f      	b.n	800b034 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	2202      	movs	r2, #2
 800af98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	68da      	ldr	r2, [r3, #12]
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	f042 0201 	orr.w	r2, r2, #1
 800afaa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	4a23      	ldr	r2, [pc, #140]	; (800b040 <HAL_TIM_Base_Start_IT+0xc4>)
 800afb2:	4293      	cmp	r3, r2
 800afb4:	d01d      	beq.n	800aff2 <HAL_TIM_Base_Start_IT+0x76>
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800afbe:	d018      	beq.n	800aff2 <HAL_TIM_Base_Start_IT+0x76>
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	4a1f      	ldr	r2, [pc, #124]	; (800b044 <HAL_TIM_Base_Start_IT+0xc8>)
 800afc6:	4293      	cmp	r3, r2
 800afc8:	d013      	beq.n	800aff2 <HAL_TIM_Base_Start_IT+0x76>
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	4a1e      	ldr	r2, [pc, #120]	; (800b048 <HAL_TIM_Base_Start_IT+0xcc>)
 800afd0:	4293      	cmp	r3, r2
 800afd2:	d00e      	beq.n	800aff2 <HAL_TIM_Base_Start_IT+0x76>
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	4a1c      	ldr	r2, [pc, #112]	; (800b04c <HAL_TIM_Base_Start_IT+0xd0>)
 800afda:	4293      	cmp	r3, r2
 800afdc:	d009      	beq.n	800aff2 <HAL_TIM_Base_Start_IT+0x76>
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	4a1b      	ldr	r2, [pc, #108]	; (800b050 <HAL_TIM_Base_Start_IT+0xd4>)
 800afe4:	4293      	cmp	r3, r2
 800afe6:	d004      	beq.n	800aff2 <HAL_TIM_Base_Start_IT+0x76>
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	4a19      	ldr	r2, [pc, #100]	; (800b054 <HAL_TIM_Base_Start_IT+0xd8>)
 800afee:	4293      	cmp	r3, r2
 800aff0:	d115      	bne.n	800b01e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	689a      	ldr	r2, [r3, #8]
 800aff8:	4b17      	ldr	r3, [pc, #92]	; (800b058 <HAL_TIM_Base_Start_IT+0xdc>)
 800affa:	4013      	ands	r3, r2
 800affc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	2b06      	cmp	r3, #6
 800b002:	d015      	beq.n	800b030 <HAL_TIM_Base_Start_IT+0xb4>
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b00a:	d011      	beq.n	800b030 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	681a      	ldr	r2, [r3, #0]
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	f042 0201 	orr.w	r2, r2, #1
 800b01a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b01c:	e008      	b.n	800b030 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	681a      	ldr	r2, [r3, #0]
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	f042 0201 	orr.w	r2, r2, #1
 800b02c:	601a      	str	r2, [r3, #0]
 800b02e:	e000      	b.n	800b032 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b030:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b032:	2300      	movs	r3, #0
}
 800b034:	4618      	mov	r0, r3
 800b036:	3714      	adds	r7, #20
 800b038:	46bd      	mov	sp, r7
 800b03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b03e:	4770      	bx	lr
 800b040:	40012c00 	.word	0x40012c00
 800b044:	40000400 	.word	0x40000400
 800b048:	40000800 	.word	0x40000800
 800b04c:	40000c00 	.word	0x40000c00
 800b050:	40013400 	.word	0x40013400
 800b054:	40014000 	.word	0x40014000
 800b058:	00010007 	.word	0x00010007

0800b05c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b05c:	b580      	push	{r7, lr}
 800b05e:	b082      	sub	sp, #8
 800b060:	af00      	add	r7, sp, #0
 800b062:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	691b      	ldr	r3, [r3, #16]
 800b06a:	f003 0302 	and.w	r3, r3, #2
 800b06e:	2b02      	cmp	r3, #2
 800b070:	d122      	bne.n	800b0b8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	68db      	ldr	r3, [r3, #12]
 800b078:	f003 0302 	and.w	r3, r3, #2
 800b07c:	2b02      	cmp	r3, #2
 800b07e:	d11b      	bne.n	800b0b8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	f06f 0202 	mvn.w	r2, #2
 800b088:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	2201      	movs	r2, #1
 800b08e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	699b      	ldr	r3, [r3, #24]
 800b096:	f003 0303 	and.w	r3, r3, #3
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d003      	beq.n	800b0a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b09e:	6878      	ldr	r0, [r7, #4]
 800b0a0:	f000 f9ce 	bl	800b440 <HAL_TIM_IC_CaptureCallback>
 800b0a4:	e005      	b.n	800b0b2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b0a6:	6878      	ldr	r0, [r7, #4]
 800b0a8:	f000 f9c0 	bl	800b42c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b0ac:	6878      	ldr	r0, [r7, #4]
 800b0ae:	f000 f9d1 	bl	800b454 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	2200      	movs	r2, #0
 800b0b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	691b      	ldr	r3, [r3, #16]
 800b0be:	f003 0304 	and.w	r3, r3, #4
 800b0c2:	2b04      	cmp	r3, #4
 800b0c4:	d122      	bne.n	800b10c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	68db      	ldr	r3, [r3, #12]
 800b0cc:	f003 0304 	and.w	r3, r3, #4
 800b0d0:	2b04      	cmp	r3, #4
 800b0d2:	d11b      	bne.n	800b10c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	f06f 0204 	mvn.w	r2, #4
 800b0dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	2202      	movs	r2, #2
 800b0e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	699b      	ldr	r3, [r3, #24]
 800b0ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d003      	beq.n	800b0fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b0f2:	6878      	ldr	r0, [r7, #4]
 800b0f4:	f000 f9a4 	bl	800b440 <HAL_TIM_IC_CaptureCallback>
 800b0f8:	e005      	b.n	800b106 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b0fa:	6878      	ldr	r0, [r7, #4]
 800b0fc:	f000 f996 	bl	800b42c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b100:	6878      	ldr	r0, [r7, #4]
 800b102:	f000 f9a7 	bl	800b454 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	2200      	movs	r2, #0
 800b10a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	691b      	ldr	r3, [r3, #16]
 800b112:	f003 0308 	and.w	r3, r3, #8
 800b116:	2b08      	cmp	r3, #8
 800b118:	d122      	bne.n	800b160 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	68db      	ldr	r3, [r3, #12]
 800b120:	f003 0308 	and.w	r3, r3, #8
 800b124:	2b08      	cmp	r3, #8
 800b126:	d11b      	bne.n	800b160 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	f06f 0208 	mvn.w	r2, #8
 800b130:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	2204      	movs	r2, #4
 800b136:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	69db      	ldr	r3, [r3, #28]
 800b13e:	f003 0303 	and.w	r3, r3, #3
 800b142:	2b00      	cmp	r3, #0
 800b144:	d003      	beq.n	800b14e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b146:	6878      	ldr	r0, [r7, #4]
 800b148:	f000 f97a 	bl	800b440 <HAL_TIM_IC_CaptureCallback>
 800b14c:	e005      	b.n	800b15a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b14e:	6878      	ldr	r0, [r7, #4]
 800b150:	f000 f96c 	bl	800b42c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b154:	6878      	ldr	r0, [r7, #4]
 800b156:	f000 f97d 	bl	800b454 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	2200      	movs	r2, #0
 800b15e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	691b      	ldr	r3, [r3, #16]
 800b166:	f003 0310 	and.w	r3, r3, #16
 800b16a:	2b10      	cmp	r3, #16
 800b16c:	d122      	bne.n	800b1b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	68db      	ldr	r3, [r3, #12]
 800b174:	f003 0310 	and.w	r3, r3, #16
 800b178:	2b10      	cmp	r3, #16
 800b17a:	d11b      	bne.n	800b1b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	f06f 0210 	mvn.w	r2, #16
 800b184:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	2208      	movs	r2, #8
 800b18a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	69db      	ldr	r3, [r3, #28]
 800b192:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b196:	2b00      	cmp	r3, #0
 800b198:	d003      	beq.n	800b1a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b19a:	6878      	ldr	r0, [r7, #4]
 800b19c:	f000 f950 	bl	800b440 <HAL_TIM_IC_CaptureCallback>
 800b1a0:	e005      	b.n	800b1ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b1a2:	6878      	ldr	r0, [r7, #4]
 800b1a4:	f000 f942 	bl	800b42c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b1a8:	6878      	ldr	r0, [r7, #4]
 800b1aa:	f000 f953 	bl	800b454 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	2200      	movs	r2, #0
 800b1b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	691b      	ldr	r3, [r3, #16]
 800b1ba:	f003 0301 	and.w	r3, r3, #1
 800b1be:	2b01      	cmp	r3, #1
 800b1c0:	d10e      	bne.n	800b1e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	68db      	ldr	r3, [r3, #12]
 800b1c8:	f003 0301 	and.w	r3, r3, #1
 800b1cc:	2b01      	cmp	r3, #1
 800b1ce:	d107      	bne.n	800b1e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	f06f 0201 	mvn.w	r2, #1
 800b1d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b1da:	6878      	ldr	r0, [r7, #4]
 800b1dc:	f7f8 f88e 	bl	80032fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	691b      	ldr	r3, [r3, #16]
 800b1e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b1ea:	2b80      	cmp	r3, #128	; 0x80
 800b1ec:	d10e      	bne.n	800b20c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	68db      	ldr	r3, [r3, #12]
 800b1f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b1f8:	2b80      	cmp	r3, #128	; 0x80
 800b1fa:	d107      	bne.n	800b20c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b204:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b206:	6878      	ldr	r0, [r7, #4]
 800b208:	f000 fafe 	bl	800b808 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	691b      	ldr	r3, [r3, #16]
 800b212:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b216:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b21a:	d10e      	bne.n	800b23a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	68db      	ldr	r3, [r3, #12]
 800b222:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b226:	2b80      	cmp	r3, #128	; 0x80
 800b228:	d107      	bne.n	800b23a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800b232:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b234:	6878      	ldr	r0, [r7, #4]
 800b236:	f000 faf1 	bl	800b81c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	691b      	ldr	r3, [r3, #16]
 800b240:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b244:	2b40      	cmp	r3, #64	; 0x40
 800b246:	d10e      	bne.n	800b266 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	68db      	ldr	r3, [r3, #12]
 800b24e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b252:	2b40      	cmp	r3, #64	; 0x40
 800b254:	d107      	bne.n	800b266 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b25e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b260:	6878      	ldr	r0, [r7, #4]
 800b262:	f000 f901 	bl	800b468 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	691b      	ldr	r3, [r3, #16]
 800b26c:	f003 0320 	and.w	r3, r3, #32
 800b270:	2b20      	cmp	r3, #32
 800b272:	d10e      	bne.n	800b292 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	68db      	ldr	r3, [r3, #12]
 800b27a:	f003 0320 	and.w	r3, r3, #32
 800b27e:	2b20      	cmp	r3, #32
 800b280:	d107      	bne.n	800b292 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	f06f 0220 	mvn.w	r2, #32
 800b28a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b28c:	6878      	ldr	r0, [r7, #4]
 800b28e:	f000 fab1 	bl	800b7f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b292:	bf00      	nop
 800b294:	3708      	adds	r7, #8
 800b296:	46bd      	mov	sp, r7
 800b298:	bd80      	pop	{r7, pc}

0800b29a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b29a:	b580      	push	{r7, lr}
 800b29c:	b084      	sub	sp, #16
 800b29e:	af00      	add	r7, sp, #0
 800b2a0:	6078      	str	r0, [r7, #4]
 800b2a2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b2ae:	2b01      	cmp	r3, #1
 800b2b0:	d101      	bne.n	800b2b6 <HAL_TIM_ConfigClockSource+0x1c>
 800b2b2:	2302      	movs	r3, #2
 800b2b4:	e0b6      	b.n	800b424 <HAL_TIM_ConfigClockSource+0x18a>
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	2201      	movs	r2, #1
 800b2ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	2202      	movs	r2, #2
 800b2c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	689b      	ldr	r3, [r3, #8]
 800b2cc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b2ce:	68bb      	ldr	r3, [r7, #8]
 800b2d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b2d4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b2d8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b2da:	68bb      	ldr	r3, [r7, #8]
 800b2dc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b2e0:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	68ba      	ldr	r2, [r7, #8]
 800b2e8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b2ea:	683b      	ldr	r3, [r7, #0]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b2f2:	d03e      	beq.n	800b372 <HAL_TIM_ConfigClockSource+0xd8>
 800b2f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b2f8:	f200 8087 	bhi.w	800b40a <HAL_TIM_ConfigClockSource+0x170>
 800b2fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b300:	f000 8086 	beq.w	800b410 <HAL_TIM_ConfigClockSource+0x176>
 800b304:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b308:	d87f      	bhi.n	800b40a <HAL_TIM_ConfigClockSource+0x170>
 800b30a:	2b70      	cmp	r3, #112	; 0x70
 800b30c:	d01a      	beq.n	800b344 <HAL_TIM_ConfigClockSource+0xaa>
 800b30e:	2b70      	cmp	r3, #112	; 0x70
 800b310:	d87b      	bhi.n	800b40a <HAL_TIM_ConfigClockSource+0x170>
 800b312:	2b60      	cmp	r3, #96	; 0x60
 800b314:	d050      	beq.n	800b3b8 <HAL_TIM_ConfigClockSource+0x11e>
 800b316:	2b60      	cmp	r3, #96	; 0x60
 800b318:	d877      	bhi.n	800b40a <HAL_TIM_ConfigClockSource+0x170>
 800b31a:	2b50      	cmp	r3, #80	; 0x50
 800b31c:	d03c      	beq.n	800b398 <HAL_TIM_ConfigClockSource+0xfe>
 800b31e:	2b50      	cmp	r3, #80	; 0x50
 800b320:	d873      	bhi.n	800b40a <HAL_TIM_ConfigClockSource+0x170>
 800b322:	2b40      	cmp	r3, #64	; 0x40
 800b324:	d058      	beq.n	800b3d8 <HAL_TIM_ConfigClockSource+0x13e>
 800b326:	2b40      	cmp	r3, #64	; 0x40
 800b328:	d86f      	bhi.n	800b40a <HAL_TIM_ConfigClockSource+0x170>
 800b32a:	2b30      	cmp	r3, #48	; 0x30
 800b32c:	d064      	beq.n	800b3f8 <HAL_TIM_ConfigClockSource+0x15e>
 800b32e:	2b30      	cmp	r3, #48	; 0x30
 800b330:	d86b      	bhi.n	800b40a <HAL_TIM_ConfigClockSource+0x170>
 800b332:	2b20      	cmp	r3, #32
 800b334:	d060      	beq.n	800b3f8 <HAL_TIM_ConfigClockSource+0x15e>
 800b336:	2b20      	cmp	r3, #32
 800b338:	d867      	bhi.n	800b40a <HAL_TIM_ConfigClockSource+0x170>
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d05c      	beq.n	800b3f8 <HAL_TIM_ConfigClockSource+0x15e>
 800b33e:	2b10      	cmp	r3, #16
 800b340:	d05a      	beq.n	800b3f8 <HAL_TIM_ConfigClockSource+0x15e>
 800b342:	e062      	b.n	800b40a <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	6818      	ldr	r0, [r3, #0]
 800b348:	683b      	ldr	r3, [r7, #0]
 800b34a:	6899      	ldr	r1, [r3, #8]
 800b34c:	683b      	ldr	r3, [r7, #0]
 800b34e:	685a      	ldr	r2, [r3, #4]
 800b350:	683b      	ldr	r3, [r7, #0]
 800b352:	68db      	ldr	r3, [r3, #12]
 800b354:	f000 f9a6 	bl	800b6a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	689b      	ldr	r3, [r3, #8]
 800b35e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b360:	68bb      	ldr	r3, [r7, #8]
 800b362:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b366:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	68ba      	ldr	r2, [r7, #8]
 800b36e:	609a      	str	r2, [r3, #8]
      break;
 800b370:	e04f      	b.n	800b412 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	6818      	ldr	r0, [r3, #0]
 800b376:	683b      	ldr	r3, [r7, #0]
 800b378:	6899      	ldr	r1, [r3, #8]
 800b37a:	683b      	ldr	r3, [r7, #0]
 800b37c:	685a      	ldr	r2, [r3, #4]
 800b37e:	683b      	ldr	r3, [r7, #0]
 800b380:	68db      	ldr	r3, [r3, #12]
 800b382:	f000 f98f 	bl	800b6a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	689a      	ldr	r2, [r3, #8]
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b394:	609a      	str	r2, [r3, #8]
      break;
 800b396:	e03c      	b.n	800b412 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	6818      	ldr	r0, [r3, #0]
 800b39c:	683b      	ldr	r3, [r7, #0]
 800b39e:	6859      	ldr	r1, [r3, #4]
 800b3a0:	683b      	ldr	r3, [r7, #0]
 800b3a2:	68db      	ldr	r3, [r3, #12]
 800b3a4:	461a      	mov	r2, r3
 800b3a6:	f000 f903 	bl	800b5b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	2150      	movs	r1, #80	; 0x50
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	f000 f95c 	bl	800b66e <TIM_ITRx_SetConfig>
      break;
 800b3b6:	e02c      	b.n	800b412 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	6818      	ldr	r0, [r3, #0]
 800b3bc:	683b      	ldr	r3, [r7, #0]
 800b3be:	6859      	ldr	r1, [r3, #4]
 800b3c0:	683b      	ldr	r3, [r7, #0]
 800b3c2:	68db      	ldr	r3, [r3, #12]
 800b3c4:	461a      	mov	r2, r3
 800b3c6:	f000 f922 	bl	800b60e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	2160      	movs	r1, #96	; 0x60
 800b3d0:	4618      	mov	r0, r3
 800b3d2:	f000 f94c 	bl	800b66e <TIM_ITRx_SetConfig>
      break;
 800b3d6:	e01c      	b.n	800b412 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	6818      	ldr	r0, [r3, #0]
 800b3dc:	683b      	ldr	r3, [r7, #0]
 800b3de:	6859      	ldr	r1, [r3, #4]
 800b3e0:	683b      	ldr	r3, [r7, #0]
 800b3e2:	68db      	ldr	r3, [r3, #12]
 800b3e4:	461a      	mov	r2, r3
 800b3e6:	f000 f8e3 	bl	800b5b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	2140      	movs	r1, #64	; 0x40
 800b3f0:	4618      	mov	r0, r3
 800b3f2:	f000 f93c 	bl	800b66e <TIM_ITRx_SetConfig>
      break;
 800b3f6:	e00c      	b.n	800b412 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	681a      	ldr	r2, [r3, #0]
 800b3fc:	683b      	ldr	r3, [r7, #0]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	4619      	mov	r1, r3
 800b402:	4610      	mov	r0, r2
 800b404:	f000 f933 	bl	800b66e <TIM_ITRx_SetConfig>
      break;
 800b408:	e003      	b.n	800b412 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800b40a:	2301      	movs	r3, #1
 800b40c:	73fb      	strb	r3, [r7, #15]
      break;
 800b40e:	e000      	b.n	800b412 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800b410:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	2201      	movs	r2, #1
 800b416:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	2200      	movs	r2, #0
 800b41e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b422:	7bfb      	ldrb	r3, [r7, #15]
}
 800b424:	4618      	mov	r0, r3
 800b426:	3710      	adds	r7, #16
 800b428:	46bd      	mov	sp, r7
 800b42a:	bd80      	pop	{r7, pc}

0800b42c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b42c:	b480      	push	{r7}
 800b42e:	b083      	sub	sp, #12
 800b430:	af00      	add	r7, sp, #0
 800b432:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b434:	bf00      	nop
 800b436:	370c      	adds	r7, #12
 800b438:	46bd      	mov	sp, r7
 800b43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b43e:	4770      	bx	lr

0800b440 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b440:	b480      	push	{r7}
 800b442:	b083      	sub	sp, #12
 800b444:	af00      	add	r7, sp, #0
 800b446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b448:	bf00      	nop
 800b44a:	370c      	adds	r7, #12
 800b44c:	46bd      	mov	sp, r7
 800b44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b452:	4770      	bx	lr

0800b454 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b454:	b480      	push	{r7}
 800b456:	b083      	sub	sp, #12
 800b458:	af00      	add	r7, sp, #0
 800b45a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b45c:	bf00      	nop
 800b45e:	370c      	adds	r7, #12
 800b460:	46bd      	mov	sp, r7
 800b462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b466:	4770      	bx	lr

0800b468 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b468:	b480      	push	{r7}
 800b46a:	b083      	sub	sp, #12
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b470:	bf00      	nop
 800b472:	370c      	adds	r7, #12
 800b474:	46bd      	mov	sp, r7
 800b476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b47a:	4770      	bx	lr

0800b47c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b47c:	b480      	push	{r7}
 800b47e:	b085      	sub	sp, #20
 800b480:	af00      	add	r7, sp, #0
 800b482:	6078      	str	r0, [r7, #4]
 800b484:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	4a40      	ldr	r2, [pc, #256]	; (800b590 <TIM_Base_SetConfig+0x114>)
 800b490:	4293      	cmp	r3, r2
 800b492:	d013      	beq.n	800b4bc <TIM_Base_SetConfig+0x40>
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b49a:	d00f      	beq.n	800b4bc <TIM_Base_SetConfig+0x40>
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	4a3d      	ldr	r2, [pc, #244]	; (800b594 <TIM_Base_SetConfig+0x118>)
 800b4a0:	4293      	cmp	r3, r2
 800b4a2:	d00b      	beq.n	800b4bc <TIM_Base_SetConfig+0x40>
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	4a3c      	ldr	r2, [pc, #240]	; (800b598 <TIM_Base_SetConfig+0x11c>)
 800b4a8:	4293      	cmp	r3, r2
 800b4aa:	d007      	beq.n	800b4bc <TIM_Base_SetConfig+0x40>
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	4a3b      	ldr	r2, [pc, #236]	; (800b59c <TIM_Base_SetConfig+0x120>)
 800b4b0:	4293      	cmp	r3, r2
 800b4b2:	d003      	beq.n	800b4bc <TIM_Base_SetConfig+0x40>
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	4a3a      	ldr	r2, [pc, #232]	; (800b5a0 <TIM_Base_SetConfig+0x124>)
 800b4b8:	4293      	cmp	r3, r2
 800b4ba:	d108      	bne.n	800b4ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b4c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b4c4:	683b      	ldr	r3, [r7, #0]
 800b4c6:	685b      	ldr	r3, [r3, #4]
 800b4c8:	68fa      	ldr	r2, [r7, #12]
 800b4ca:	4313      	orrs	r3, r2
 800b4cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	4a2f      	ldr	r2, [pc, #188]	; (800b590 <TIM_Base_SetConfig+0x114>)
 800b4d2:	4293      	cmp	r3, r2
 800b4d4:	d01f      	beq.n	800b516 <TIM_Base_SetConfig+0x9a>
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b4dc:	d01b      	beq.n	800b516 <TIM_Base_SetConfig+0x9a>
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	4a2c      	ldr	r2, [pc, #176]	; (800b594 <TIM_Base_SetConfig+0x118>)
 800b4e2:	4293      	cmp	r3, r2
 800b4e4:	d017      	beq.n	800b516 <TIM_Base_SetConfig+0x9a>
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	4a2b      	ldr	r2, [pc, #172]	; (800b598 <TIM_Base_SetConfig+0x11c>)
 800b4ea:	4293      	cmp	r3, r2
 800b4ec:	d013      	beq.n	800b516 <TIM_Base_SetConfig+0x9a>
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	4a2a      	ldr	r2, [pc, #168]	; (800b59c <TIM_Base_SetConfig+0x120>)
 800b4f2:	4293      	cmp	r3, r2
 800b4f4:	d00f      	beq.n	800b516 <TIM_Base_SetConfig+0x9a>
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	4a29      	ldr	r2, [pc, #164]	; (800b5a0 <TIM_Base_SetConfig+0x124>)
 800b4fa:	4293      	cmp	r3, r2
 800b4fc:	d00b      	beq.n	800b516 <TIM_Base_SetConfig+0x9a>
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	4a28      	ldr	r2, [pc, #160]	; (800b5a4 <TIM_Base_SetConfig+0x128>)
 800b502:	4293      	cmp	r3, r2
 800b504:	d007      	beq.n	800b516 <TIM_Base_SetConfig+0x9a>
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	4a27      	ldr	r2, [pc, #156]	; (800b5a8 <TIM_Base_SetConfig+0x12c>)
 800b50a:	4293      	cmp	r3, r2
 800b50c:	d003      	beq.n	800b516 <TIM_Base_SetConfig+0x9a>
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	4a26      	ldr	r2, [pc, #152]	; (800b5ac <TIM_Base_SetConfig+0x130>)
 800b512:	4293      	cmp	r3, r2
 800b514:	d108      	bne.n	800b528 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b51c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b51e:	683b      	ldr	r3, [r7, #0]
 800b520:	68db      	ldr	r3, [r3, #12]
 800b522:	68fa      	ldr	r2, [r7, #12]
 800b524:	4313      	orrs	r3, r2
 800b526:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b52e:	683b      	ldr	r3, [r7, #0]
 800b530:	695b      	ldr	r3, [r3, #20]
 800b532:	4313      	orrs	r3, r2
 800b534:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	68fa      	ldr	r2, [r7, #12]
 800b53a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b53c:	683b      	ldr	r3, [r7, #0]
 800b53e:	689a      	ldr	r2, [r3, #8]
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b544:	683b      	ldr	r3, [r7, #0]
 800b546:	681a      	ldr	r2, [r3, #0]
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	4a10      	ldr	r2, [pc, #64]	; (800b590 <TIM_Base_SetConfig+0x114>)
 800b550:	4293      	cmp	r3, r2
 800b552:	d00f      	beq.n	800b574 <TIM_Base_SetConfig+0xf8>
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	4a12      	ldr	r2, [pc, #72]	; (800b5a0 <TIM_Base_SetConfig+0x124>)
 800b558:	4293      	cmp	r3, r2
 800b55a:	d00b      	beq.n	800b574 <TIM_Base_SetConfig+0xf8>
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	4a11      	ldr	r2, [pc, #68]	; (800b5a4 <TIM_Base_SetConfig+0x128>)
 800b560:	4293      	cmp	r3, r2
 800b562:	d007      	beq.n	800b574 <TIM_Base_SetConfig+0xf8>
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	4a10      	ldr	r2, [pc, #64]	; (800b5a8 <TIM_Base_SetConfig+0x12c>)
 800b568:	4293      	cmp	r3, r2
 800b56a:	d003      	beq.n	800b574 <TIM_Base_SetConfig+0xf8>
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	4a0f      	ldr	r2, [pc, #60]	; (800b5ac <TIM_Base_SetConfig+0x130>)
 800b570:	4293      	cmp	r3, r2
 800b572:	d103      	bne.n	800b57c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b574:	683b      	ldr	r3, [r7, #0]
 800b576:	691a      	ldr	r2, [r3, #16]
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	2201      	movs	r2, #1
 800b580:	615a      	str	r2, [r3, #20]
}
 800b582:	bf00      	nop
 800b584:	3714      	adds	r7, #20
 800b586:	46bd      	mov	sp, r7
 800b588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b58c:	4770      	bx	lr
 800b58e:	bf00      	nop
 800b590:	40012c00 	.word	0x40012c00
 800b594:	40000400 	.word	0x40000400
 800b598:	40000800 	.word	0x40000800
 800b59c:	40000c00 	.word	0x40000c00
 800b5a0:	40013400 	.word	0x40013400
 800b5a4:	40014000 	.word	0x40014000
 800b5a8:	40014400 	.word	0x40014400
 800b5ac:	40014800 	.word	0x40014800

0800b5b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b5b0:	b480      	push	{r7}
 800b5b2:	b087      	sub	sp, #28
 800b5b4:	af00      	add	r7, sp, #0
 800b5b6:	60f8      	str	r0, [r7, #12]
 800b5b8:	60b9      	str	r1, [r7, #8]
 800b5ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	6a1b      	ldr	r3, [r3, #32]
 800b5c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	6a1b      	ldr	r3, [r3, #32]
 800b5c6:	f023 0201 	bic.w	r2, r3, #1
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	699b      	ldr	r3, [r3, #24]
 800b5d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b5d4:	693b      	ldr	r3, [r7, #16]
 800b5d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b5da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	011b      	lsls	r3, r3, #4
 800b5e0:	693a      	ldr	r2, [r7, #16]
 800b5e2:	4313      	orrs	r3, r2
 800b5e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b5e6:	697b      	ldr	r3, [r7, #20]
 800b5e8:	f023 030a 	bic.w	r3, r3, #10
 800b5ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b5ee:	697a      	ldr	r2, [r7, #20]
 800b5f0:	68bb      	ldr	r3, [r7, #8]
 800b5f2:	4313      	orrs	r3, r2
 800b5f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	693a      	ldr	r2, [r7, #16]
 800b5fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	697a      	ldr	r2, [r7, #20]
 800b600:	621a      	str	r2, [r3, #32]
}
 800b602:	bf00      	nop
 800b604:	371c      	adds	r7, #28
 800b606:	46bd      	mov	sp, r7
 800b608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60c:	4770      	bx	lr

0800b60e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b60e:	b480      	push	{r7}
 800b610:	b087      	sub	sp, #28
 800b612:	af00      	add	r7, sp, #0
 800b614:	60f8      	str	r0, [r7, #12]
 800b616:	60b9      	str	r1, [r7, #8]
 800b618:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	6a1b      	ldr	r3, [r3, #32]
 800b61e:	f023 0210 	bic.w	r2, r3, #16
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	699b      	ldr	r3, [r3, #24]
 800b62a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	6a1b      	ldr	r3, [r3, #32]
 800b630:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b632:	697b      	ldr	r3, [r7, #20]
 800b634:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b638:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	031b      	lsls	r3, r3, #12
 800b63e:	697a      	ldr	r2, [r7, #20]
 800b640:	4313      	orrs	r3, r2
 800b642:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b644:	693b      	ldr	r3, [r7, #16]
 800b646:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b64a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b64c:	68bb      	ldr	r3, [r7, #8]
 800b64e:	011b      	lsls	r3, r3, #4
 800b650:	693a      	ldr	r2, [r7, #16]
 800b652:	4313      	orrs	r3, r2
 800b654:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	697a      	ldr	r2, [r7, #20]
 800b65a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	693a      	ldr	r2, [r7, #16]
 800b660:	621a      	str	r2, [r3, #32]
}
 800b662:	bf00      	nop
 800b664:	371c      	adds	r7, #28
 800b666:	46bd      	mov	sp, r7
 800b668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b66c:	4770      	bx	lr

0800b66e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b66e:	b480      	push	{r7}
 800b670:	b085      	sub	sp, #20
 800b672:	af00      	add	r7, sp, #0
 800b674:	6078      	str	r0, [r7, #4]
 800b676:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	689b      	ldr	r3, [r3, #8]
 800b67c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b684:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b686:	683a      	ldr	r2, [r7, #0]
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	4313      	orrs	r3, r2
 800b68c:	f043 0307 	orr.w	r3, r3, #7
 800b690:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	68fa      	ldr	r2, [r7, #12]
 800b696:	609a      	str	r2, [r3, #8]
}
 800b698:	bf00      	nop
 800b69a:	3714      	adds	r7, #20
 800b69c:	46bd      	mov	sp, r7
 800b69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a2:	4770      	bx	lr

0800b6a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b6a4:	b480      	push	{r7}
 800b6a6:	b087      	sub	sp, #28
 800b6a8:	af00      	add	r7, sp, #0
 800b6aa:	60f8      	str	r0, [r7, #12]
 800b6ac:	60b9      	str	r1, [r7, #8]
 800b6ae:	607a      	str	r2, [r7, #4]
 800b6b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	689b      	ldr	r3, [r3, #8]
 800b6b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b6b8:	697b      	ldr	r3, [r7, #20]
 800b6ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b6be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b6c0:	683b      	ldr	r3, [r7, #0]
 800b6c2:	021a      	lsls	r2, r3, #8
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	431a      	orrs	r2, r3
 800b6c8:	68bb      	ldr	r3, [r7, #8]
 800b6ca:	4313      	orrs	r3, r2
 800b6cc:	697a      	ldr	r2, [r7, #20]
 800b6ce:	4313      	orrs	r3, r2
 800b6d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	697a      	ldr	r2, [r7, #20]
 800b6d6:	609a      	str	r2, [r3, #8]
}
 800b6d8:	bf00      	nop
 800b6da:	371c      	adds	r7, #28
 800b6dc:	46bd      	mov	sp, r7
 800b6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e2:	4770      	bx	lr

0800b6e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b6e4:	b480      	push	{r7}
 800b6e6:	b085      	sub	sp, #20
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	6078      	str	r0, [r7, #4]
 800b6ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b6f4:	2b01      	cmp	r3, #1
 800b6f6:	d101      	bne.n	800b6fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b6f8:	2302      	movs	r3, #2
 800b6fa:	e068      	b.n	800b7ce <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	2201      	movs	r2, #1
 800b700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	2202      	movs	r2, #2
 800b708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	685b      	ldr	r3, [r3, #4]
 800b712:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	689b      	ldr	r3, [r3, #8]
 800b71a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	4a2e      	ldr	r2, [pc, #184]	; (800b7dc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800b722:	4293      	cmp	r3, r2
 800b724:	d004      	beq.n	800b730 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	4a2d      	ldr	r2, [pc, #180]	; (800b7e0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800b72c:	4293      	cmp	r3, r2
 800b72e:	d108      	bne.n	800b742 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b736:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b738:	683b      	ldr	r3, [r7, #0]
 800b73a:	685b      	ldr	r3, [r3, #4]
 800b73c:	68fa      	ldr	r2, [r7, #12]
 800b73e:	4313      	orrs	r3, r2
 800b740:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b748:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b74a:	683b      	ldr	r3, [r7, #0]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	68fa      	ldr	r2, [r7, #12]
 800b750:	4313      	orrs	r3, r2
 800b752:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	68fa      	ldr	r2, [r7, #12]
 800b75a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	4a1e      	ldr	r2, [pc, #120]	; (800b7dc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800b762:	4293      	cmp	r3, r2
 800b764:	d01d      	beq.n	800b7a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b76e:	d018      	beq.n	800b7a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	4a1b      	ldr	r2, [pc, #108]	; (800b7e4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b776:	4293      	cmp	r3, r2
 800b778:	d013      	beq.n	800b7a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	4a1a      	ldr	r2, [pc, #104]	; (800b7e8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b780:	4293      	cmp	r3, r2
 800b782:	d00e      	beq.n	800b7a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	4a18      	ldr	r2, [pc, #96]	; (800b7ec <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b78a:	4293      	cmp	r3, r2
 800b78c:	d009      	beq.n	800b7a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	4a13      	ldr	r2, [pc, #76]	; (800b7e0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800b794:	4293      	cmp	r3, r2
 800b796:	d004      	beq.n	800b7a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	4a14      	ldr	r2, [pc, #80]	; (800b7f0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b79e:	4293      	cmp	r3, r2
 800b7a0:	d10c      	bne.n	800b7bc <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b7a2:	68bb      	ldr	r3, [r7, #8]
 800b7a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b7a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b7aa:	683b      	ldr	r3, [r7, #0]
 800b7ac:	689b      	ldr	r3, [r3, #8]
 800b7ae:	68ba      	ldr	r2, [r7, #8]
 800b7b0:	4313      	orrs	r3, r2
 800b7b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	68ba      	ldr	r2, [r7, #8]
 800b7ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	2201      	movs	r2, #1
 800b7c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	2200      	movs	r2, #0
 800b7c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b7cc:	2300      	movs	r3, #0
}
 800b7ce:	4618      	mov	r0, r3
 800b7d0:	3714      	adds	r7, #20
 800b7d2:	46bd      	mov	sp, r7
 800b7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d8:	4770      	bx	lr
 800b7da:	bf00      	nop
 800b7dc:	40012c00 	.word	0x40012c00
 800b7e0:	40013400 	.word	0x40013400
 800b7e4:	40000400 	.word	0x40000400
 800b7e8:	40000800 	.word	0x40000800
 800b7ec:	40000c00 	.word	0x40000c00
 800b7f0:	40014000 	.word	0x40014000

0800b7f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b7f4:	b480      	push	{r7}
 800b7f6:	b083      	sub	sp, #12
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b7fc:	bf00      	nop
 800b7fe:	370c      	adds	r7, #12
 800b800:	46bd      	mov	sp, r7
 800b802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b806:	4770      	bx	lr

0800b808 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b808:	b480      	push	{r7}
 800b80a:	b083      	sub	sp, #12
 800b80c:	af00      	add	r7, sp, #0
 800b80e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b810:	bf00      	nop
 800b812:	370c      	adds	r7, #12
 800b814:	46bd      	mov	sp, r7
 800b816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b81a:	4770      	bx	lr

0800b81c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b81c:	b480      	push	{r7}
 800b81e:	b083      	sub	sp, #12
 800b820:	af00      	add	r7, sp, #0
 800b822:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b824:	bf00      	nop
 800b826:	370c      	adds	r7, #12
 800b828:	46bd      	mov	sp, r7
 800b82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b82e:	4770      	bx	lr

0800b830 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b830:	b084      	sub	sp, #16
 800b832:	b580      	push	{r7, lr}
 800b834:	b084      	sub	sp, #16
 800b836:	af00      	add	r7, sp, #0
 800b838:	6078      	str	r0, [r7, #4]
 800b83a:	f107 001c 	add.w	r0, r7, #28
 800b83e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	68db      	ldr	r3, [r3, #12]
 800b846:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800b84e:	6878      	ldr	r0, [r7, #4]
 800b850:	f001 faf6 	bl	800ce40 <USB_CoreReset>
 800b854:	4603      	mov	r3, r0
 800b856:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800b858:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d106      	bne.n	800b86c <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b862:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	639a      	str	r2, [r3, #56]	; 0x38
 800b86a:	e005      	b.n	800b878 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b870:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 800b878:	7bfb      	ldrb	r3, [r7, #15]
}
 800b87a:	4618      	mov	r0, r3
 800b87c:	3710      	adds	r7, #16
 800b87e:	46bd      	mov	sp, r7
 800b880:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b884:	b004      	add	sp, #16
 800b886:	4770      	bx	lr

0800b888 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800b888:	b480      	push	{r7}
 800b88a:	b087      	sub	sp, #28
 800b88c:	af00      	add	r7, sp, #0
 800b88e:	60f8      	str	r0, [r7, #12]
 800b890:	60b9      	str	r1, [r7, #8]
 800b892:	4613      	mov	r3, r2
 800b894:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800b896:	79fb      	ldrb	r3, [r7, #7]
 800b898:	2b02      	cmp	r3, #2
 800b89a:	d165      	bne.n	800b968 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800b89c:	68bb      	ldr	r3, [r7, #8]
 800b89e:	4a3e      	ldr	r2, [pc, #248]	; (800b998 <USB_SetTurnaroundTime+0x110>)
 800b8a0:	4293      	cmp	r3, r2
 800b8a2:	d906      	bls.n	800b8b2 <USB_SetTurnaroundTime+0x2a>
 800b8a4:	68bb      	ldr	r3, [r7, #8]
 800b8a6:	4a3d      	ldr	r2, [pc, #244]	; (800b99c <USB_SetTurnaroundTime+0x114>)
 800b8a8:	4293      	cmp	r3, r2
 800b8aa:	d202      	bcs.n	800b8b2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800b8ac:	230f      	movs	r3, #15
 800b8ae:	617b      	str	r3, [r7, #20]
 800b8b0:	e05c      	b.n	800b96c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800b8b2:	68bb      	ldr	r3, [r7, #8]
 800b8b4:	4a39      	ldr	r2, [pc, #228]	; (800b99c <USB_SetTurnaroundTime+0x114>)
 800b8b6:	4293      	cmp	r3, r2
 800b8b8:	d306      	bcc.n	800b8c8 <USB_SetTurnaroundTime+0x40>
 800b8ba:	68bb      	ldr	r3, [r7, #8]
 800b8bc:	4a38      	ldr	r2, [pc, #224]	; (800b9a0 <USB_SetTurnaroundTime+0x118>)
 800b8be:	4293      	cmp	r3, r2
 800b8c0:	d202      	bcs.n	800b8c8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800b8c2:	230e      	movs	r3, #14
 800b8c4:	617b      	str	r3, [r7, #20]
 800b8c6:	e051      	b.n	800b96c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800b8c8:	68bb      	ldr	r3, [r7, #8]
 800b8ca:	4a35      	ldr	r2, [pc, #212]	; (800b9a0 <USB_SetTurnaroundTime+0x118>)
 800b8cc:	4293      	cmp	r3, r2
 800b8ce:	d306      	bcc.n	800b8de <USB_SetTurnaroundTime+0x56>
 800b8d0:	68bb      	ldr	r3, [r7, #8]
 800b8d2:	4a34      	ldr	r2, [pc, #208]	; (800b9a4 <USB_SetTurnaroundTime+0x11c>)
 800b8d4:	4293      	cmp	r3, r2
 800b8d6:	d202      	bcs.n	800b8de <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800b8d8:	230d      	movs	r3, #13
 800b8da:	617b      	str	r3, [r7, #20]
 800b8dc:	e046      	b.n	800b96c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800b8de:	68bb      	ldr	r3, [r7, #8]
 800b8e0:	4a30      	ldr	r2, [pc, #192]	; (800b9a4 <USB_SetTurnaroundTime+0x11c>)
 800b8e2:	4293      	cmp	r3, r2
 800b8e4:	d306      	bcc.n	800b8f4 <USB_SetTurnaroundTime+0x6c>
 800b8e6:	68bb      	ldr	r3, [r7, #8]
 800b8e8:	4a2f      	ldr	r2, [pc, #188]	; (800b9a8 <USB_SetTurnaroundTime+0x120>)
 800b8ea:	4293      	cmp	r3, r2
 800b8ec:	d802      	bhi.n	800b8f4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800b8ee:	230c      	movs	r3, #12
 800b8f0:	617b      	str	r3, [r7, #20]
 800b8f2:	e03b      	b.n	800b96c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800b8f4:	68bb      	ldr	r3, [r7, #8]
 800b8f6:	4a2c      	ldr	r2, [pc, #176]	; (800b9a8 <USB_SetTurnaroundTime+0x120>)
 800b8f8:	4293      	cmp	r3, r2
 800b8fa:	d906      	bls.n	800b90a <USB_SetTurnaroundTime+0x82>
 800b8fc:	68bb      	ldr	r3, [r7, #8]
 800b8fe:	4a2b      	ldr	r2, [pc, #172]	; (800b9ac <USB_SetTurnaroundTime+0x124>)
 800b900:	4293      	cmp	r3, r2
 800b902:	d802      	bhi.n	800b90a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800b904:	230b      	movs	r3, #11
 800b906:	617b      	str	r3, [r7, #20]
 800b908:	e030      	b.n	800b96c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800b90a:	68bb      	ldr	r3, [r7, #8]
 800b90c:	4a27      	ldr	r2, [pc, #156]	; (800b9ac <USB_SetTurnaroundTime+0x124>)
 800b90e:	4293      	cmp	r3, r2
 800b910:	d906      	bls.n	800b920 <USB_SetTurnaroundTime+0x98>
 800b912:	68bb      	ldr	r3, [r7, #8]
 800b914:	4a26      	ldr	r2, [pc, #152]	; (800b9b0 <USB_SetTurnaroundTime+0x128>)
 800b916:	4293      	cmp	r3, r2
 800b918:	d802      	bhi.n	800b920 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800b91a:	230a      	movs	r3, #10
 800b91c:	617b      	str	r3, [r7, #20]
 800b91e:	e025      	b.n	800b96c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800b920:	68bb      	ldr	r3, [r7, #8]
 800b922:	4a23      	ldr	r2, [pc, #140]	; (800b9b0 <USB_SetTurnaroundTime+0x128>)
 800b924:	4293      	cmp	r3, r2
 800b926:	d906      	bls.n	800b936 <USB_SetTurnaroundTime+0xae>
 800b928:	68bb      	ldr	r3, [r7, #8]
 800b92a:	4a22      	ldr	r2, [pc, #136]	; (800b9b4 <USB_SetTurnaroundTime+0x12c>)
 800b92c:	4293      	cmp	r3, r2
 800b92e:	d202      	bcs.n	800b936 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800b930:	2309      	movs	r3, #9
 800b932:	617b      	str	r3, [r7, #20]
 800b934:	e01a      	b.n	800b96c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800b936:	68bb      	ldr	r3, [r7, #8]
 800b938:	4a1e      	ldr	r2, [pc, #120]	; (800b9b4 <USB_SetTurnaroundTime+0x12c>)
 800b93a:	4293      	cmp	r3, r2
 800b93c:	d306      	bcc.n	800b94c <USB_SetTurnaroundTime+0xc4>
 800b93e:	68bb      	ldr	r3, [r7, #8]
 800b940:	4a1d      	ldr	r2, [pc, #116]	; (800b9b8 <USB_SetTurnaroundTime+0x130>)
 800b942:	4293      	cmp	r3, r2
 800b944:	d802      	bhi.n	800b94c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800b946:	2308      	movs	r3, #8
 800b948:	617b      	str	r3, [r7, #20]
 800b94a:	e00f      	b.n	800b96c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800b94c:	68bb      	ldr	r3, [r7, #8]
 800b94e:	4a1a      	ldr	r2, [pc, #104]	; (800b9b8 <USB_SetTurnaroundTime+0x130>)
 800b950:	4293      	cmp	r3, r2
 800b952:	d906      	bls.n	800b962 <USB_SetTurnaroundTime+0xda>
 800b954:	68bb      	ldr	r3, [r7, #8]
 800b956:	4a19      	ldr	r2, [pc, #100]	; (800b9bc <USB_SetTurnaroundTime+0x134>)
 800b958:	4293      	cmp	r3, r2
 800b95a:	d202      	bcs.n	800b962 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800b95c:	2307      	movs	r3, #7
 800b95e:	617b      	str	r3, [r7, #20]
 800b960:	e004      	b.n	800b96c <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800b962:	2306      	movs	r3, #6
 800b964:	617b      	str	r3, [r7, #20]
 800b966:	e001      	b.n	800b96c <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800b968:	2309      	movs	r3, #9
 800b96a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	68db      	ldr	r3, [r3, #12]
 800b970:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	68da      	ldr	r2, [r3, #12]
 800b97c:	697b      	ldr	r3, [r7, #20]
 800b97e:	029b      	lsls	r3, r3, #10
 800b980:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800b984:	431a      	orrs	r2, r3
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b98a:	2300      	movs	r3, #0
}
 800b98c:	4618      	mov	r0, r3
 800b98e:	371c      	adds	r7, #28
 800b990:	46bd      	mov	sp, r7
 800b992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b996:	4770      	bx	lr
 800b998:	00d8acbf 	.word	0x00d8acbf
 800b99c:	00e4e1c0 	.word	0x00e4e1c0
 800b9a0:	00f42400 	.word	0x00f42400
 800b9a4:	01067380 	.word	0x01067380
 800b9a8:	011a499f 	.word	0x011a499f
 800b9ac:	01312cff 	.word	0x01312cff
 800b9b0:	014ca43f 	.word	0x014ca43f
 800b9b4:	016e3600 	.word	0x016e3600
 800b9b8:	01a6ab1f 	.word	0x01a6ab1f
 800b9bc:	01e84800 	.word	0x01e84800

0800b9c0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b9c0:	b480      	push	{r7}
 800b9c2:	b083      	sub	sp, #12
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	689b      	ldr	r3, [r3, #8]
 800b9cc:	f043 0201 	orr.w	r2, r3, #1
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b9d4:	2300      	movs	r3, #0
}
 800b9d6:	4618      	mov	r0, r3
 800b9d8:	370c      	adds	r7, #12
 800b9da:	46bd      	mov	sp, r7
 800b9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e0:	4770      	bx	lr

0800b9e2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b9e2:	b480      	push	{r7}
 800b9e4:	b083      	sub	sp, #12
 800b9e6:	af00      	add	r7, sp, #0
 800b9e8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	689b      	ldr	r3, [r3, #8]
 800b9ee:	f023 0201 	bic.w	r2, r3, #1
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b9f6:	2300      	movs	r3, #0
}
 800b9f8:	4618      	mov	r0, r3
 800b9fa:	370c      	adds	r7, #12
 800b9fc:	46bd      	mov	sp, r7
 800b9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba02:	4770      	bx	lr

0800ba04 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800ba04:	b580      	push	{r7, lr}
 800ba06:	b084      	sub	sp, #16
 800ba08:	af00      	add	r7, sp, #0
 800ba0a:	6078      	str	r0, [r7, #4]
 800ba0c:	460b      	mov	r3, r1
 800ba0e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800ba10:	2300      	movs	r3, #0
 800ba12:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	68db      	ldr	r3, [r3, #12]
 800ba18:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800ba20:	78fb      	ldrb	r3, [r7, #3]
 800ba22:	2b01      	cmp	r3, #1
 800ba24:	d115      	bne.n	800ba52 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	68db      	ldr	r3, [r3, #12]
 800ba2a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800ba32:	2001      	movs	r0, #1
 800ba34:	f7f8 feb6 	bl	80047a4 <HAL_Delay>
      ms++;
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	3301      	adds	r3, #1
 800ba3c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800ba3e:	6878      	ldr	r0, [r7, #4]
 800ba40:	f001 f985 	bl	800cd4e <USB_GetMode>
 800ba44:	4603      	mov	r3, r0
 800ba46:	2b01      	cmp	r3, #1
 800ba48:	d01e      	beq.n	800ba88 <USB_SetCurrentMode+0x84>
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	2b31      	cmp	r3, #49	; 0x31
 800ba4e:	d9f0      	bls.n	800ba32 <USB_SetCurrentMode+0x2e>
 800ba50:	e01a      	b.n	800ba88 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800ba52:	78fb      	ldrb	r3, [r7, #3]
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d115      	bne.n	800ba84 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	68db      	ldr	r3, [r3, #12]
 800ba5c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800ba64:	2001      	movs	r0, #1
 800ba66:	f7f8 fe9d 	bl	80047a4 <HAL_Delay>
      ms++;
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	3301      	adds	r3, #1
 800ba6e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800ba70:	6878      	ldr	r0, [r7, #4]
 800ba72:	f001 f96c 	bl	800cd4e <USB_GetMode>
 800ba76:	4603      	mov	r3, r0
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d005      	beq.n	800ba88 <USB_SetCurrentMode+0x84>
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	2b31      	cmp	r3, #49	; 0x31
 800ba80:	d9f0      	bls.n	800ba64 <USB_SetCurrentMode+0x60>
 800ba82:	e001      	b.n	800ba88 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800ba84:	2301      	movs	r3, #1
 800ba86:	e005      	b.n	800ba94 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	2b32      	cmp	r3, #50	; 0x32
 800ba8c:	d101      	bne.n	800ba92 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800ba8e:	2301      	movs	r3, #1
 800ba90:	e000      	b.n	800ba94 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800ba92:	2300      	movs	r3, #0
}
 800ba94:	4618      	mov	r0, r3
 800ba96:	3710      	adds	r7, #16
 800ba98:	46bd      	mov	sp, r7
 800ba9a:	bd80      	pop	{r7, pc}

0800ba9c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ba9c:	b084      	sub	sp, #16
 800ba9e:	b580      	push	{r7, lr}
 800baa0:	b086      	sub	sp, #24
 800baa2:	af00      	add	r7, sp, #0
 800baa4:	6078      	str	r0, [r7, #4]
 800baa6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800baaa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800baae:	2300      	movs	r3, #0
 800bab0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800bab6:	2300      	movs	r3, #0
 800bab8:	613b      	str	r3, [r7, #16]
 800baba:	e009      	b.n	800bad0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800babc:	687a      	ldr	r2, [r7, #4]
 800babe:	693b      	ldr	r3, [r7, #16]
 800bac0:	3340      	adds	r3, #64	; 0x40
 800bac2:	009b      	lsls	r3, r3, #2
 800bac4:	4413      	add	r3, r2
 800bac6:	2200      	movs	r2, #0
 800bac8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800baca:	693b      	ldr	r3, [r7, #16]
 800bacc:	3301      	adds	r3, #1
 800bace:	613b      	str	r3, [r7, #16]
 800bad0:	693b      	ldr	r3, [r7, #16]
 800bad2:	2b0e      	cmp	r3, #14
 800bad4:	d9f2      	bls.n	800babc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800bad6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d11c      	bne.n	800bb16 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bae2:	685b      	ldr	r3, [r3, #4]
 800bae4:	68fa      	ldr	r2, [r7, #12]
 800bae6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800baea:	f043 0302 	orr.w	r3, r3, #2
 800baee:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800baf4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	601a      	str	r2, [r3, #0]
 800bb14:	e005      	b.n	800bb22 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb1a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bb28:	461a      	mov	r2, r3
 800bb2a:	2300      	movs	r3, #0
 800bb2c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb34:	4619      	mov	r1, r3
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb3c:	461a      	mov	r2, r3
 800bb3e:	680b      	ldr	r3, [r1, #0]
 800bb40:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800bb42:	2103      	movs	r1, #3
 800bb44:	6878      	ldr	r0, [r7, #4]
 800bb46:	f000 f959 	bl	800bdfc <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800bb4a:	2110      	movs	r1, #16
 800bb4c:	6878      	ldr	r0, [r7, #4]
 800bb4e:	f000 f8f1 	bl	800bd34 <USB_FlushTxFifo>
 800bb52:	4603      	mov	r3, r0
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d001      	beq.n	800bb5c <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 800bb58:	2301      	movs	r3, #1
 800bb5a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800bb5c:	6878      	ldr	r0, [r7, #4]
 800bb5e:	f000 f91d 	bl	800bd9c <USB_FlushRxFifo>
 800bb62:	4603      	mov	r3, r0
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d001      	beq.n	800bb6c <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 800bb68:	2301      	movs	r3, #1
 800bb6a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb72:	461a      	mov	r2, r3
 800bb74:	2300      	movs	r3, #0
 800bb76:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb7e:	461a      	mov	r2, r3
 800bb80:	2300      	movs	r3, #0
 800bb82:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb8a:	461a      	mov	r2, r3
 800bb8c:	2300      	movs	r3, #0
 800bb8e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bb90:	2300      	movs	r3, #0
 800bb92:	613b      	str	r3, [r7, #16]
 800bb94:	e043      	b.n	800bc1e <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800bb96:	693b      	ldr	r3, [r7, #16]
 800bb98:	015a      	lsls	r2, r3, #5
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	4413      	add	r3, r2
 800bb9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bba8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bbac:	d118      	bne.n	800bbe0 <USB_DevInit+0x144>
    {
      if (i == 0U)
 800bbae:	693b      	ldr	r3, [r7, #16]
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d10a      	bne.n	800bbca <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800bbb4:	693b      	ldr	r3, [r7, #16]
 800bbb6:	015a      	lsls	r2, r3, #5
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	4413      	add	r3, r2
 800bbbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bbc0:	461a      	mov	r2, r3
 800bbc2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800bbc6:	6013      	str	r3, [r2, #0]
 800bbc8:	e013      	b.n	800bbf2 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800bbca:	693b      	ldr	r3, [r7, #16]
 800bbcc:	015a      	lsls	r2, r3, #5
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	4413      	add	r3, r2
 800bbd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bbd6:	461a      	mov	r2, r3
 800bbd8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800bbdc:	6013      	str	r3, [r2, #0]
 800bbde:	e008      	b.n	800bbf2 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800bbe0:	693b      	ldr	r3, [r7, #16]
 800bbe2:	015a      	lsls	r2, r3, #5
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	4413      	add	r3, r2
 800bbe8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bbec:	461a      	mov	r2, r3
 800bbee:	2300      	movs	r3, #0
 800bbf0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800bbf2:	693b      	ldr	r3, [r7, #16]
 800bbf4:	015a      	lsls	r2, r3, #5
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	4413      	add	r3, r2
 800bbfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bbfe:	461a      	mov	r2, r3
 800bc00:	2300      	movs	r3, #0
 800bc02:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800bc04:	693b      	ldr	r3, [r7, #16]
 800bc06:	015a      	lsls	r2, r3, #5
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	4413      	add	r3, r2
 800bc0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc10:	461a      	mov	r2, r3
 800bc12:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800bc16:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bc18:	693b      	ldr	r3, [r7, #16]
 800bc1a:	3301      	adds	r3, #1
 800bc1c:	613b      	str	r3, [r7, #16]
 800bc1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc20:	693a      	ldr	r2, [r7, #16]
 800bc22:	429a      	cmp	r2, r3
 800bc24:	d3b7      	bcc.n	800bb96 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bc26:	2300      	movs	r3, #0
 800bc28:	613b      	str	r3, [r7, #16]
 800bc2a:	e043      	b.n	800bcb4 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bc2c:	693b      	ldr	r3, [r7, #16]
 800bc2e:	015a      	lsls	r2, r3, #5
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	4413      	add	r3, r2
 800bc34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bc3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bc42:	d118      	bne.n	800bc76 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 800bc44:	693b      	ldr	r3, [r7, #16]
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d10a      	bne.n	800bc60 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800bc4a:	693b      	ldr	r3, [r7, #16]
 800bc4c:	015a      	lsls	r2, r3, #5
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	4413      	add	r3, r2
 800bc52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc56:	461a      	mov	r2, r3
 800bc58:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800bc5c:	6013      	str	r3, [r2, #0]
 800bc5e:	e013      	b.n	800bc88 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800bc60:	693b      	ldr	r3, [r7, #16]
 800bc62:	015a      	lsls	r2, r3, #5
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	4413      	add	r3, r2
 800bc68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc6c:	461a      	mov	r2, r3
 800bc6e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800bc72:	6013      	str	r3, [r2, #0]
 800bc74:	e008      	b.n	800bc88 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800bc76:	693b      	ldr	r3, [r7, #16]
 800bc78:	015a      	lsls	r2, r3, #5
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	4413      	add	r3, r2
 800bc7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc82:	461a      	mov	r2, r3
 800bc84:	2300      	movs	r3, #0
 800bc86:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800bc88:	693b      	ldr	r3, [r7, #16]
 800bc8a:	015a      	lsls	r2, r3, #5
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	4413      	add	r3, r2
 800bc90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc94:	461a      	mov	r2, r3
 800bc96:	2300      	movs	r3, #0
 800bc98:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800bc9a:	693b      	ldr	r3, [r7, #16]
 800bc9c:	015a      	lsls	r2, r3, #5
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	4413      	add	r3, r2
 800bca2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bca6:	461a      	mov	r2, r3
 800bca8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800bcac:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bcae:	693b      	ldr	r3, [r7, #16]
 800bcb0:	3301      	adds	r3, #1
 800bcb2:	613b      	str	r3, [r7, #16]
 800bcb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcb6:	693a      	ldr	r2, [r7, #16]
 800bcb8:	429a      	cmp	r2, r3
 800bcba:	d3b7      	bcc.n	800bc2c <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bcc2:	691b      	ldr	r3, [r3, #16]
 800bcc4:	68fa      	ldr	r2, [r7, #12]
 800bcc6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bcca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bcce:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	2200      	movs	r2, #0
 800bcd4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800bcdc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	699b      	ldr	r3, [r3, #24]
 800bce2:	f043 0210 	orr.w	r2, r3, #16
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	699a      	ldr	r2, [r3, #24]
 800bcee:	4b10      	ldr	r3, [pc, #64]	; (800bd30 <USB_DevInit+0x294>)
 800bcf0:	4313      	orrs	r3, r2
 800bcf2:	687a      	ldr	r2, [r7, #4]
 800bcf4:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800bcf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d005      	beq.n	800bd08 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	699b      	ldr	r3, [r3, #24]
 800bd00:	f043 0208 	orr.w	r2, r3, #8
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800bd08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd0a:	2b01      	cmp	r3, #1
 800bd0c:	d107      	bne.n	800bd1e <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	699b      	ldr	r3, [r3, #24]
 800bd12:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bd16:	f043 0304 	orr.w	r3, r3, #4
 800bd1a:	687a      	ldr	r2, [r7, #4]
 800bd1c:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800bd1e:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd20:	4618      	mov	r0, r3
 800bd22:	3718      	adds	r7, #24
 800bd24:	46bd      	mov	sp, r7
 800bd26:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bd2a:	b004      	add	sp, #16
 800bd2c:	4770      	bx	lr
 800bd2e:	bf00      	nop
 800bd30:	803c3800 	.word	0x803c3800

0800bd34 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800bd34:	b480      	push	{r7}
 800bd36:	b085      	sub	sp, #20
 800bd38:	af00      	add	r7, sp, #0
 800bd3a:	6078      	str	r0, [r7, #4]
 800bd3c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800bd3e:	2300      	movs	r3, #0
 800bd40:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	3301      	adds	r3, #1
 800bd46:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	4a13      	ldr	r2, [pc, #76]	; (800bd98 <USB_FlushTxFifo+0x64>)
 800bd4c:	4293      	cmp	r3, r2
 800bd4e:	d901      	bls.n	800bd54 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800bd50:	2303      	movs	r3, #3
 800bd52:	e01b      	b.n	800bd8c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	691b      	ldr	r3, [r3, #16]
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	daf2      	bge.n	800bd42 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800bd5c:	2300      	movs	r3, #0
 800bd5e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800bd60:	683b      	ldr	r3, [r7, #0]
 800bd62:	019b      	lsls	r3, r3, #6
 800bd64:	f043 0220 	orr.w	r2, r3, #32
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	3301      	adds	r3, #1
 800bd70:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	4a08      	ldr	r2, [pc, #32]	; (800bd98 <USB_FlushTxFifo+0x64>)
 800bd76:	4293      	cmp	r3, r2
 800bd78:	d901      	bls.n	800bd7e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800bd7a:	2303      	movs	r3, #3
 800bd7c:	e006      	b.n	800bd8c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	691b      	ldr	r3, [r3, #16]
 800bd82:	f003 0320 	and.w	r3, r3, #32
 800bd86:	2b20      	cmp	r3, #32
 800bd88:	d0f0      	beq.n	800bd6c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800bd8a:	2300      	movs	r3, #0
}
 800bd8c:	4618      	mov	r0, r3
 800bd8e:	3714      	adds	r7, #20
 800bd90:	46bd      	mov	sp, r7
 800bd92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd96:	4770      	bx	lr
 800bd98:	00030d40 	.word	0x00030d40

0800bd9c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800bd9c:	b480      	push	{r7}
 800bd9e:	b085      	sub	sp, #20
 800bda0:	af00      	add	r7, sp, #0
 800bda2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bda4:	2300      	movs	r3, #0
 800bda6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	3301      	adds	r3, #1
 800bdac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	4a11      	ldr	r2, [pc, #68]	; (800bdf8 <USB_FlushRxFifo+0x5c>)
 800bdb2:	4293      	cmp	r3, r2
 800bdb4:	d901      	bls.n	800bdba <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800bdb6:	2303      	movs	r3, #3
 800bdb8:	e018      	b.n	800bdec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	691b      	ldr	r3, [r3, #16]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	daf2      	bge.n	800bda8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800bdc2:	2300      	movs	r3, #0
 800bdc4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	2210      	movs	r2, #16
 800bdca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	3301      	adds	r3, #1
 800bdd0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	4a08      	ldr	r2, [pc, #32]	; (800bdf8 <USB_FlushRxFifo+0x5c>)
 800bdd6:	4293      	cmp	r3, r2
 800bdd8:	d901      	bls.n	800bdde <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800bdda:	2303      	movs	r3, #3
 800bddc:	e006      	b.n	800bdec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	691b      	ldr	r3, [r3, #16]
 800bde2:	f003 0310 	and.w	r3, r3, #16
 800bde6:	2b10      	cmp	r3, #16
 800bde8:	d0f0      	beq.n	800bdcc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800bdea:	2300      	movs	r3, #0
}
 800bdec:	4618      	mov	r0, r3
 800bdee:	3714      	adds	r7, #20
 800bdf0:	46bd      	mov	sp, r7
 800bdf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf6:	4770      	bx	lr
 800bdf8:	00030d40 	.word	0x00030d40

0800bdfc <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800bdfc:	b480      	push	{r7}
 800bdfe:	b085      	sub	sp, #20
 800be00:	af00      	add	r7, sp, #0
 800be02:	6078      	str	r0, [r7, #4]
 800be04:	460b      	mov	r3, r1
 800be06:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be12:	681a      	ldr	r2, [r3, #0]
 800be14:	78fb      	ldrb	r3, [r7, #3]
 800be16:	68f9      	ldr	r1, [r7, #12]
 800be18:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800be1c:	4313      	orrs	r3, r2
 800be1e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800be20:	2300      	movs	r3, #0
}
 800be22:	4618      	mov	r0, r3
 800be24:	3714      	adds	r7, #20
 800be26:	46bd      	mov	sp, r7
 800be28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be2c:	4770      	bx	lr

0800be2e <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800be2e:	b480      	push	{r7}
 800be30:	b087      	sub	sp, #28
 800be32:	af00      	add	r7, sp, #0
 800be34:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800be3a:	693b      	ldr	r3, [r7, #16]
 800be3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be40:	689b      	ldr	r3, [r3, #8]
 800be42:	f003 0306 	and.w	r3, r3, #6
 800be46:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	2b02      	cmp	r3, #2
 800be4c:	d002      	beq.n	800be54 <USB_GetDevSpeed+0x26>
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	2b06      	cmp	r3, #6
 800be52:	d102      	bne.n	800be5a <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800be54:	2302      	movs	r3, #2
 800be56:	75fb      	strb	r3, [r7, #23]
 800be58:	e001      	b.n	800be5e <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 800be5a:	230f      	movs	r3, #15
 800be5c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800be5e:	7dfb      	ldrb	r3, [r7, #23]
}
 800be60:	4618      	mov	r0, r3
 800be62:	371c      	adds	r7, #28
 800be64:	46bd      	mov	sp, r7
 800be66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be6a:	4770      	bx	lr

0800be6c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800be6c:	b480      	push	{r7}
 800be6e:	b085      	sub	sp, #20
 800be70:	af00      	add	r7, sp, #0
 800be72:	6078      	str	r0, [r7, #4]
 800be74:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800be7a:	683b      	ldr	r3, [r7, #0]
 800be7c:	781b      	ldrb	r3, [r3, #0]
 800be7e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800be80:	683b      	ldr	r3, [r7, #0]
 800be82:	785b      	ldrb	r3, [r3, #1]
 800be84:	2b01      	cmp	r3, #1
 800be86:	d13a      	bne.n	800befe <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be8e:	69da      	ldr	r2, [r3, #28]
 800be90:	683b      	ldr	r3, [r7, #0]
 800be92:	781b      	ldrb	r3, [r3, #0]
 800be94:	f003 030f 	and.w	r3, r3, #15
 800be98:	2101      	movs	r1, #1
 800be9a:	fa01 f303 	lsl.w	r3, r1, r3
 800be9e:	b29b      	uxth	r3, r3
 800bea0:	68f9      	ldr	r1, [r7, #12]
 800bea2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bea6:	4313      	orrs	r3, r2
 800bea8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800beaa:	68bb      	ldr	r3, [r7, #8]
 800beac:	015a      	lsls	r2, r3, #5
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	4413      	add	r3, r2
 800beb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d155      	bne.n	800bf6c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bec0:	68bb      	ldr	r3, [r7, #8]
 800bec2:	015a      	lsls	r2, r3, #5
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	4413      	add	r3, r2
 800bec8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800becc:	681a      	ldr	r2, [r3, #0]
 800bece:	683b      	ldr	r3, [r7, #0]
 800bed0:	68db      	ldr	r3, [r3, #12]
 800bed2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800bed6:	683b      	ldr	r3, [r7, #0]
 800bed8:	791b      	ldrb	r3, [r3, #4]
 800beda:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bedc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800bede:	68bb      	ldr	r3, [r7, #8]
 800bee0:	059b      	lsls	r3, r3, #22
 800bee2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bee4:	4313      	orrs	r3, r2
 800bee6:	68ba      	ldr	r2, [r7, #8]
 800bee8:	0151      	lsls	r1, r2, #5
 800beea:	68fa      	ldr	r2, [r7, #12]
 800beec:	440a      	add	r2, r1
 800beee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bef2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bef6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800befa:	6013      	str	r3, [r2, #0]
 800befc:	e036      	b.n	800bf6c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf04:	69da      	ldr	r2, [r3, #28]
 800bf06:	683b      	ldr	r3, [r7, #0]
 800bf08:	781b      	ldrb	r3, [r3, #0]
 800bf0a:	f003 030f 	and.w	r3, r3, #15
 800bf0e:	2101      	movs	r1, #1
 800bf10:	fa01 f303 	lsl.w	r3, r1, r3
 800bf14:	041b      	lsls	r3, r3, #16
 800bf16:	68f9      	ldr	r1, [r7, #12]
 800bf18:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bf1c:	4313      	orrs	r3, r2
 800bf1e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800bf20:	68bb      	ldr	r3, [r7, #8]
 800bf22:	015a      	lsls	r2, r3, #5
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	4413      	add	r3, r2
 800bf28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d11a      	bne.n	800bf6c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800bf36:	68bb      	ldr	r3, [r7, #8]
 800bf38:	015a      	lsls	r2, r3, #5
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	4413      	add	r3, r2
 800bf3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf42:	681a      	ldr	r2, [r3, #0]
 800bf44:	683b      	ldr	r3, [r7, #0]
 800bf46:	68db      	ldr	r3, [r3, #12]
 800bf48:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800bf4c:	683b      	ldr	r3, [r7, #0]
 800bf4e:	791b      	ldrb	r3, [r3, #4]
 800bf50:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800bf52:	430b      	orrs	r3, r1
 800bf54:	4313      	orrs	r3, r2
 800bf56:	68ba      	ldr	r2, [r7, #8]
 800bf58:	0151      	lsls	r1, r2, #5
 800bf5a:	68fa      	ldr	r2, [r7, #12]
 800bf5c:	440a      	add	r2, r1
 800bf5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bf62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bf66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bf6a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800bf6c:	2300      	movs	r3, #0
}
 800bf6e:	4618      	mov	r0, r3
 800bf70:	3714      	adds	r7, #20
 800bf72:	46bd      	mov	sp, r7
 800bf74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf78:	4770      	bx	lr
	...

0800bf7c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bf7c:	b480      	push	{r7}
 800bf7e:	b085      	sub	sp, #20
 800bf80:	af00      	add	r7, sp, #0
 800bf82:	6078      	str	r0, [r7, #4]
 800bf84:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bf8a:	683b      	ldr	r3, [r7, #0]
 800bf8c:	781b      	ldrb	r3, [r3, #0]
 800bf8e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800bf90:	683b      	ldr	r3, [r7, #0]
 800bf92:	785b      	ldrb	r3, [r3, #1]
 800bf94:	2b01      	cmp	r3, #1
 800bf96:	d161      	bne.n	800c05c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800bf98:	68bb      	ldr	r3, [r7, #8]
 800bf9a:	015a      	lsls	r2, r3, #5
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	4413      	add	r3, r2
 800bfa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bfaa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bfae:	d11f      	bne.n	800bff0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800bfb0:	68bb      	ldr	r3, [r7, #8]
 800bfb2:	015a      	lsls	r2, r3, #5
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	4413      	add	r3, r2
 800bfb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	68ba      	ldr	r2, [r7, #8]
 800bfc0:	0151      	lsls	r1, r2, #5
 800bfc2:	68fa      	ldr	r2, [r7, #12]
 800bfc4:	440a      	add	r2, r1
 800bfc6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bfca:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800bfce:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800bfd0:	68bb      	ldr	r3, [r7, #8]
 800bfd2:	015a      	lsls	r2, r3, #5
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	4413      	add	r3, r2
 800bfd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	68ba      	ldr	r2, [r7, #8]
 800bfe0:	0151      	lsls	r1, r2, #5
 800bfe2:	68fa      	ldr	r2, [r7, #12]
 800bfe4:	440a      	add	r2, r1
 800bfe6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bfea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bfee:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bff6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bff8:	683b      	ldr	r3, [r7, #0]
 800bffa:	781b      	ldrb	r3, [r3, #0]
 800bffc:	f003 030f 	and.w	r3, r3, #15
 800c000:	2101      	movs	r1, #1
 800c002:	fa01 f303 	lsl.w	r3, r1, r3
 800c006:	b29b      	uxth	r3, r3
 800c008:	43db      	mvns	r3, r3
 800c00a:	68f9      	ldr	r1, [r7, #12]
 800c00c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c010:	4013      	ands	r3, r2
 800c012:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c01a:	69da      	ldr	r2, [r3, #28]
 800c01c:	683b      	ldr	r3, [r7, #0]
 800c01e:	781b      	ldrb	r3, [r3, #0]
 800c020:	f003 030f 	and.w	r3, r3, #15
 800c024:	2101      	movs	r1, #1
 800c026:	fa01 f303 	lsl.w	r3, r1, r3
 800c02a:	b29b      	uxth	r3, r3
 800c02c:	43db      	mvns	r3, r3
 800c02e:	68f9      	ldr	r1, [r7, #12]
 800c030:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c034:	4013      	ands	r3, r2
 800c036:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800c038:	68bb      	ldr	r3, [r7, #8]
 800c03a:	015a      	lsls	r2, r3, #5
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	4413      	add	r3, r2
 800c040:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c044:	681a      	ldr	r2, [r3, #0]
 800c046:	68bb      	ldr	r3, [r7, #8]
 800c048:	0159      	lsls	r1, r3, #5
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	440b      	add	r3, r1
 800c04e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c052:	4619      	mov	r1, r3
 800c054:	4b35      	ldr	r3, [pc, #212]	; (800c12c <USB_DeactivateEndpoint+0x1b0>)
 800c056:	4013      	ands	r3, r2
 800c058:	600b      	str	r3, [r1, #0]
 800c05a:	e060      	b.n	800c11e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c05c:	68bb      	ldr	r3, [r7, #8]
 800c05e:	015a      	lsls	r2, r3, #5
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	4413      	add	r3, r2
 800c064:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c06e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c072:	d11f      	bne.n	800c0b4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800c074:	68bb      	ldr	r3, [r7, #8]
 800c076:	015a      	lsls	r2, r3, #5
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	4413      	add	r3, r2
 800c07c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	68ba      	ldr	r2, [r7, #8]
 800c084:	0151      	lsls	r1, r2, #5
 800c086:	68fa      	ldr	r2, [r7, #12]
 800c088:	440a      	add	r2, r1
 800c08a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c08e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c092:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800c094:	68bb      	ldr	r3, [r7, #8]
 800c096:	015a      	lsls	r2, r3, #5
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	4413      	add	r3, r2
 800c09c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	68ba      	ldr	r2, [r7, #8]
 800c0a4:	0151      	lsls	r1, r2, #5
 800c0a6:	68fa      	ldr	r2, [r7, #12]
 800c0a8:	440a      	add	r2, r1
 800c0aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c0ae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c0b2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c0ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c0bc:	683b      	ldr	r3, [r7, #0]
 800c0be:	781b      	ldrb	r3, [r3, #0]
 800c0c0:	f003 030f 	and.w	r3, r3, #15
 800c0c4:	2101      	movs	r1, #1
 800c0c6:	fa01 f303 	lsl.w	r3, r1, r3
 800c0ca:	041b      	lsls	r3, r3, #16
 800c0cc:	43db      	mvns	r3, r3
 800c0ce:	68f9      	ldr	r1, [r7, #12]
 800c0d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c0d4:	4013      	ands	r3, r2
 800c0d6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c0de:	69da      	ldr	r2, [r3, #28]
 800c0e0:	683b      	ldr	r3, [r7, #0]
 800c0e2:	781b      	ldrb	r3, [r3, #0]
 800c0e4:	f003 030f 	and.w	r3, r3, #15
 800c0e8:	2101      	movs	r1, #1
 800c0ea:	fa01 f303 	lsl.w	r3, r1, r3
 800c0ee:	041b      	lsls	r3, r3, #16
 800c0f0:	43db      	mvns	r3, r3
 800c0f2:	68f9      	ldr	r1, [r7, #12]
 800c0f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c0f8:	4013      	ands	r3, r2
 800c0fa:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800c0fc:	68bb      	ldr	r3, [r7, #8]
 800c0fe:	015a      	lsls	r2, r3, #5
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	4413      	add	r3, r2
 800c104:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c108:	681a      	ldr	r2, [r3, #0]
 800c10a:	68bb      	ldr	r3, [r7, #8]
 800c10c:	0159      	lsls	r1, r3, #5
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	440b      	add	r3, r1
 800c112:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c116:	4619      	mov	r1, r3
 800c118:	4b05      	ldr	r3, [pc, #20]	; (800c130 <USB_DeactivateEndpoint+0x1b4>)
 800c11a:	4013      	ands	r3, r2
 800c11c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800c11e:	2300      	movs	r3, #0
}
 800c120:	4618      	mov	r0, r3
 800c122:	3714      	adds	r7, #20
 800c124:	46bd      	mov	sp, r7
 800c126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c12a:	4770      	bx	lr
 800c12c:	ec337800 	.word	0xec337800
 800c130:	eff37800 	.word	0xeff37800

0800c134 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c134:	b580      	push	{r7, lr}
 800c136:	b086      	sub	sp, #24
 800c138:	af00      	add	r7, sp, #0
 800c13a:	6078      	str	r0, [r7, #4]
 800c13c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800c142:	683b      	ldr	r3, [r7, #0]
 800c144:	781b      	ldrb	r3, [r3, #0]
 800c146:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c148:	683b      	ldr	r3, [r7, #0]
 800c14a:	785b      	ldrb	r3, [r3, #1]
 800c14c:	2b01      	cmp	r3, #1
 800c14e:	f040 810a 	bne.w	800c366 <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800c152:	683b      	ldr	r3, [r7, #0]
 800c154:	699b      	ldr	r3, [r3, #24]
 800c156:	2b00      	cmp	r3, #0
 800c158:	d132      	bne.n	800c1c0 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c15a:	693b      	ldr	r3, [r7, #16]
 800c15c:	015a      	lsls	r2, r3, #5
 800c15e:	697b      	ldr	r3, [r7, #20]
 800c160:	4413      	add	r3, r2
 800c162:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c166:	691b      	ldr	r3, [r3, #16]
 800c168:	693a      	ldr	r2, [r7, #16]
 800c16a:	0151      	lsls	r1, r2, #5
 800c16c:	697a      	ldr	r2, [r7, #20]
 800c16e:	440a      	add	r2, r1
 800c170:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c174:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c178:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c17c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c17e:	693b      	ldr	r3, [r7, #16]
 800c180:	015a      	lsls	r2, r3, #5
 800c182:	697b      	ldr	r3, [r7, #20]
 800c184:	4413      	add	r3, r2
 800c186:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c18a:	691b      	ldr	r3, [r3, #16]
 800c18c:	693a      	ldr	r2, [r7, #16]
 800c18e:	0151      	lsls	r1, r2, #5
 800c190:	697a      	ldr	r2, [r7, #20]
 800c192:	440a      	add	r2, r1
 800c194:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c198:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c19c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c19e:	693b      	ldr	r3, [r7, #16]
 800c1a0:	015a      	lsls	r2, r3, #5
 800c1a2:	697b      	ldr	r3, [r7, #20]
 800c1a4:	4413      	add	r3, r2
 800c1a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c1aa:	691b      	ldr	r3, [r3, #16]
 800c1ac:	693a      	ldr	r2, [r7, #16]
 800c1ae:	0151      	lsls	r1, r2, #5
 800c1b0:	697a      	ldr	r2, [r7, #20]
 800c1b2:	440a      	add	r2, r1
 800c1b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c1b8:	0cdb      	lsrs	r3, r3, #19
 800c1ba:	04db      	lsls	r3, r3, #19
 800c1bc:	6113      	str	r3, [r2, #16]
 800c1be:	e074      	b.n	800c2aa <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c1c0:	693b      	ldr	r3, [r7, #16]
 800c1c2:	015a      	lsls	r2, r3, #5
 800c1c4:	697b      	ldr	r3, [r7, #20]
 800c1c6:	4413      	add	r3, r2
 800c1c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c1cc:	691b      	ldr	r3, [r3, #16]
 800c1ce:	693a      	ldr	r2, [r7, #16]
 800c1d0:	0151      	lsls	r1, r2, #5
 800c1d2:	697a      	ldr	r2, [r7, #20]
 800c1d4:	440a      	add	r2, r1
 800c1d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c1da:	0cdb      	lsrs	r3, r3, #19
 800c1dc:	04db      	lsls	r3, r3, #19
 800c1de:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c1e0:	693b      	ldr	r3, [r7, #16]
 800c1e2:	015a      	lsls	r2, r3, #5
 800c1e4:	697b      	ldr	r3, [r7, #20]
 800c1e6:	4413      	add	r3, r2
 800c1e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c1ec:	691b      	ldr	r3, [r3, #16]
 800c1ee:	693a      	ldr	r2, [r7, #16]
 800c1f0:	0151      	lsls	r1, r2, #5
 800c1f2:	697a      	ldr	r2, [r7, #20]
 800c1f4:	440a      	add	r2, r1
 800c1f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c1fa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c1fe:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c202:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800c204:	693b      	ldr	r3, [r7, #16]
 800c206:	015a      	lsls	r2, r3, #5
 800c208:	697b      	ldr	r3, [r7, #20]
 800c20a:	4413      	add	r3, r2
 800c20c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c210:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800c212:	683b      	ldr	r3, [r7, #0]
 800c214:	6999      	ldr	r1, [r3, #24]
 800c216:	683b      	ldr	r3, [r7, #0]
 800c218:	68db      	ldr	r3, [r3, #12]
 800c21a:	440b      	add	r3, r1
 800c21c:	1e59      	subs	r1, r3, #1
 800c21e:	683b      	ldr	r3, [r7, #0]
 800c220:	68db      	ldr	r3, [r3, #12]
 800c222:	fbb1 f3f3 	udiv	r3, r1, r3
 800c226:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800c228:	4b9e      	ldr	r3, [pc, #632]	; (800c4a4 <USB_EPStartXfer+0x370>)
 800c22a:	400b      	ands	r3, r1
 800c22c:	6939      	ldr	r1, [r7, #16]
 800c22e:	0148      	lsls	r0, r1, #5
 800c230:	6979      	ldr	r1, [r7, #20]
 800c232:	4401      	add	r1, r0
 800c234:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c238:	4313      	orrs	r3, r2
 800c23a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c23c:	693b      	ldr	r3, [r7, #16]
 800c23e:	015a      	lsls	r2, r3, #5
 800c240:	697b      	ldr	r3, [r7, #20]
 800c242:	4413      	add	r3, r2
 800c244:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c248:	691a      	ldr	r2, [r3, #16]
 800c24a:	683b      	ldr	r3, [r7, #0]
 800c24c:	699b      	ldr	r3, [r3, #24]
 800c24e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c252:	6939      	ldr	r1, [r7, #16]
 800c254:	0148      	lsls	r0, r1, #5
 800c256:	6979      	ldr	r1, [r7, #20]
 800c258:	4401      	add	r1, r0
 800c25a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c25e:	4313      	orrs	r3, r2
 800c260:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800c262:	683b      	ldr	r3, [r7, #0]
 800c264:	791b      	ldrb	r3, [r3, #4]
 800c266:	2b01      	cmp	r3, #1
 800c268:	d11f      	bne.n	800c2aa <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800c26a:	693b      	ldr	r3, [r7, #16]
 800c26c:	015a      	lsls	r2, r3, #5
 800c26e:	697b      	ldr	r3, [r7, #20]
 800c270:	4413      	add	r3, r2
 800c272:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c276:	691b      	ldr	r3, [r3, #16]
 800c278:	693a      	ldr	r2, [r7, #16]
 800c27a:	0151      	lsls	r1, r2, #5
 800c27c:	697a      	ldr	r2, [r7, #20]
 800c27e:	440a      	add	r2, r1
 800c280:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c284:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800c288:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800c28a:	693b      	ldr	r3, [r7, #16]
 800c28c:	015a      	lsls	r2, r3, #5
 800c28e:	697b      	ldr	r3, [r7, #20]
 800c290:	4413      	add	r3, r2
 800c292:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c296:	691b      	ldr	r3, [r3, #16]
 800c298:	693a      	ldr	r2, [r7, #16]
 800c29a:	0151      	lsls	r1, r2, #5
 800c29c:	697a      	ldr	r2, [r7, #20]
 800c29e:	440a      	add	r2, r1
 800c2a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c2a4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c2a8:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c2aa:	693b      	ldr	r3, [r7, #16]
 800c2ac:	015a      	lsls	r2, r3, #5
 800c2ae:	697b      	ldr	r3, [r7, #20]
 800c2b0:	4413      	add	r3, r2
 800c2b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	693a      	ldr	r2, [r7, #16]
 800c2ba:	0151      	lsls	r1, r2, #5
 800c2bc:	697a      	ldr	r2, [r7, #20]
 800c2be:	440a      	add	r2, r1
 800c2c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c2c4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c2c8:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800c2ca:	683b      	ldr	r3, [r7, #0]
 800c2cc:	791b      	ldrb	r3, [r3, #4]
 800c2ce:	2b01      	cmp	r3, #1
 800c2d0:	d015      	beq.n	800c2fe <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800c2d2:	683b      	ldr	r3, [r7, #0]
 800c2d4:	699b      	ldr	r3, [r3, #24]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	f000 8106 	beq.w	800c4e8 <USB_EPStartXfer+0x3b4>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c2dc:	697b      	ldr	r3, [r7, #20]
 800c2de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c2e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c2e4:	683b      	ldr	r3, [r7, #0]
 800c2e6:	781b      	ldrb	r3, [r3, #0]
 800c2e8:	f003 030f 	and.w	r3, r3, #15
 800c2ec:	2101      	movs	r1, #1
 800c2ee:	fa01 f303 	lsl.w	r3, r1, r3
 800c2f2:	6979      	ldr	r1, [r7, #20]
 800c2f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c2f8:	4313      	orrs	r3, r2
 800c2fa:	634b      	str	r3, [r1, #52]	; 0x34
 800c2fc:	e0f4      	b.n	800c4e8 <USB_EPStartXfer+0x3b4>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c2fe:	697b      	ldr	r3, [r7, #20]
 800c300:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c304:	689b      	ldr	r3, [r3, #8]
 800c306:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d110      	bne.n	800c330 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c30e:	693b      	ldr	r3, [r7, #16]
 800c310:	015a      	lsls	r2, r3, #5
 800c312:	697b      	ldr	r3, [r7, #20]
 800c314:	4413      	add	r3, r2
 800c316:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	693a      	ldr	r2, [r7, #16]
 800c31e:	0151      	lsls	r1, r2, #5
 800c320:	697a      	ldr	r2, [r7, #20]
 800c322:	440a      	add	r2, r1
 800c324:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c328:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c32c:	6013      	str	r3, [r2, #0]
 800c32e:	e00f      	b.n	800c350 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c330:	693b      	ldr	r3, [r7, #16]
 800c332:	015a      	lsls	r2, r3, #5
 800c334:	697b      	ldr	r3, [r7, #20]
 800c336:	4413      	add	r3, r2
 800c338:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	693a      	ldr	r2, [r7, #16]
 800c340:	0151      	lsls	r1, r2, #5
 800c342:	697a      	ldr	r2, [r7, #20]
 800c344:	440a      	add	r2, r1
 800c346:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c34a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c34e:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 800c350:	683b      	ldr	r3, [r7, #0]
 800c352:	6919      	ldr	r1, [r3, #16]
 800c354:	683b      	ldr	r3, [r7, #0]
 800c356:	781a      	ldrb	r2, [r3, #0]
 800c358:	683b      	ldr	r3, [r7, #0]
 800c35a:	699b      	ldr	r3, [r3, #24]
 800c35c:	b29b      	uxth	r3, r3
 800c35e:	6878      	ldr	r0, [r7, #4]
 800c360:	f000 fa94 	bl	800c88c <USB_WritePacket>
 800c364:	e0c0      	b.n	800c4e8 <USB_EPStartXfer+0x3b4>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c366:	693b      	ldr	r3, [r7, #16]
 800c368:	015a      	lsls	r2, r3, #5
 800c36a:	697b      	ldr	r3, [r7, #20]
 800c36c:	4413      	add	r3, r2
 800c36e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c372:	691b      	ldr	r3, [r3, #16]
 800c374:	693a      	ldr	r2, [r7, #16]
 800c376:	0151      	lsls	r1, r2, #5
 800c378:	697a      	ldr	r2, [r7, #20]
 800c37a:	440a      	add	r2, r1
 800c37c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c380:	0cdb      	lsrs	r3, r3, #19
 800c382:	04db      	lsls	r3, r3, #19
 800c384:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c386:	693b      	ldr	r3, [r7, #16]
 800c388:	015a      	lsls	r2, r3, #5
 800c38a:	697b      	ldr	r3, [r7, #20]
 800c38c:	4413      	add	r3, r2
 800c38e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c392:	691b      	ldr	r3, [r3, #16]
 800c394:	693a      	ldr	r2, [r7, #16]
 800c396:	0151      	lsls	r1, r2, #5
 800c398:	697a      	ldr	r2, [r7, #20]
 800c39a:	440a      	add	r2, r1
 800c39c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c3a0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c3a4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c3a8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800c3aa:	683b      	ldr	r3, [r7, #0]
 800c3ac:	699b      	ldr	r3, [r3, #24]
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d123      	bne.n	800c3fa <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800c3b2:	693b      	ldr	r3, [r7, #16]
 800c3b4:	015a      	lsls	r2, r3, #5
 800c3b6:	697b      	ldr	r3, [r7, #20]
 800c3b8:	4413      	add	r3, r2
 800c3ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3be:	691a      	ldr	r2, [r3, #16]
 800c3c0:	683b      	ldr	r3, [r7, #0]
 800c3c2:	68db      	ldr	r3, [r3, #12]
 800c3c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c3c8:	6939      	ldr	r1, [r7, #16]
 800c3ca:	0148      	lsls	r0, r1, #5
 800c3cc:	6979      	ldr	r1, [r7, #20]
 800c3ce:	4401      	add	r1, r0
 800c3d0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c3d4:	4313      	orrs	r3, r2
 800c3d6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c3d8:	693b      	ldr	r3, [r7, #16]
 800c3da:	015a      	lsls	r2, r3, #5
 800c3dc:	697b      	ldr	r3, [r7, #20]
 800c3de:	4413      	add	r3, r2
 800c3e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3e4:	691b      	ldr	r3, [r3, #16]
 800c3e6:	693a      	ldr	r2, [r7, #16]
 800c3e8:	0151      	lsls	r1, r2, #5
 800c3ea:	697a      	ldr	r2, [r7, #20]
 800c3ec:	440a      	add	r2, r1
 800c3ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c3f2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c3f6:	6113      	str	r3, [r2, #16]
 800c3f8:	e037      	b.n	800c46a <USB_EPStartXfer+0x336>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800c3fa:	683b      	ldr	r3, [r7, #0]
 800c3fc:	699a      	ldr	r2, [r3, #24]
 800c3fe:	683b      	ldr	r3, [r7, #0]
 800c400:	68db      	ldr	r3, [r3, #12]
 800c402:	4413      	add	r3, r2
 800c404:	1e5a      	subs	r2, r3, #1
 800c406:	683b      	ldr	r3, [r7, #0]
 800c408:	68db      	ldr	r3, [r3, #12]
 800c40a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c40e:	81fb      	strh	r3, [r7, #14]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800c410:	683b      	ldr	r3, [r7, #0]
 800c412:	68db      	ldr	r3, [r3, #12]
 800c414:	89fa      	ldrh	r2, [r7, #14]
 800c416:	fb03 f202 	mul.w	r2, r3, r2
 800c41a:	683b      	ldr	r3, [r7, #0]
 800c41c:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800c41e:	693b      	ldr	r3, [r7, #16]
 800c420:	015a      	lsls	r2, r3, #5
 800c422:	697b      	ldr	r3, [r7, #20]
 800c424:	4413      	add	r3, r2
 800c426:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c42a:	691a      	ldr	r2, [r3, #16]
 800c42c:	89fb      	ldrh	r3, [r7, #14]
 800c42e:	04d9      	lsls	r1, r3, #19
 800c430:	4b1c      	ldr	r3, [pc, #112]	; (800c4a4 <USB_EPStartXfer+0x370>)
 800c432:	400b      	ands	r3, r1
 800c434:	6939      	ldr	r1, [r7, #16]
 800c436:	0148      	lsls	r0, r1, #5
 800c438:	6979      	ldr	r1, [r7, #20]
 800c43a:	4401      	add	r1, r0
 800c43c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c440:	4313      	orrs	r3, r2
 800c442:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800c444:	693b      	ldr	r3, [r7, #16]
 800c446:	015a      	lsls	r2, r3, #5
 800c448:	697b      	ldr	r3, [r7, #20]
 800c44a:	4413      	add	r3, r2
 800c44c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c450:	691a      	ldr	r2, [r3, #16]
 800c452:	683b      	ldr	r3, [r7, #0]
 800c454:	69db      	ldr	r3, [r3, #28]
 800c456:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c45a:	6939      	ldr	r1, [r7, #16]
 800c45c:	0148      	lsls	r0, r1, #5
 800c45e:	6979      	ldr	r1, [r7, #20]
 800c460:	4401      	add	r1, r0
 800c462:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c466:	4313      	orrs	r3, r2
 800c468:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 800c46a:	683b      	ldr	r3, [r7, #0]
 800c46c:	791b      	ldrb	r3, [r3, #4]
 800c46e:	2b01      	cmp	r3, #1
 800c470:	d12a      	bne.n	800c4c8 <USB_EPStartXfer+0x394>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c472:	697b      	ldr	r3, [r7, #20]
 800c474:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c478:	689b      	ldr	r3, [r3, #8]
 800c47a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d112      	bne.n	800c4a8 <USB_EPStartXfer+0x374>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800c482:	693b      	ldr	r3, [r7, #16]
 800c484:	015a      	lsls	r2, r3, #5
 800c486:	697b      	ldr	r3, [r7, #20]
 800c488:	4413      	add	r3, r2
 800c48a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	693a      	ldr	r2, [r7, #16]
 800c492:	0151      	lsls	r1, r2, #5
 800c494:	697a      	ldr	r2, [r7, #20]
 800c496:	440a      	add	r2, r1
 800c498:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c49c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c4a0:	6013      	str	r3, [r2, #0]
 800c4a2:	e011      	b.n	800c4c8 <USB_EPStartXfer+0x394>
 800c4a4:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800c4a8:	693b      	ldr	r3, [r7, #16]
 800c4aa:	015a      	lsls	r2, r3, #5
 800c4ac:	697b      	ldr	r3, [r7, #20]
 800c4ae:	4413      	add	r3, r2
 800c4b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	693a      	ldr	r2, [r7, #16]
 800c4b8:	0151      	lsls	r1, r2, #5
 800c4ba:	697a      	ldr	r2, [r7, #20]
 800c4bc:	440a      	add	r2, r1
 800c4be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c4c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c4c6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c4c8:	693b      	ldr	r3, [r7, #16]
 800c4ca:	015a      	lsls	r2, r3, #5
 800c4cc:	697b      	ldr	r3, [r7, #20]
 800c4ce:	4413      	add	r3, r2
 800c4d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	693a      	ldr	r2, [r7, #16]
 800c4d8:	0151      	lsls	r1, r2, #5
 800c4da:	697a      	ldr	r2, [r7, #20]
 800c4dc:	440a      	add	r2, r1
 800c4de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c4e2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c4e6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c4e8:	2300      	movs	r3, #0
}
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	3718      	adds	r7, #24
 800c4ee:	46bd      	mov	sp, r7
 800c4f0:	bd80      	pop	{r7, pc}
 800c4f2:	bf00      	nop

0800c4f4 <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c4f4:	b480      	push	{r7}
 800c4f6:	b085      	sub	sp, #20
 800c4f8:	af00      	add	r7, sp, #0
 800c4fa:	6078      	str	r0, [r7, #4]
 800c4fc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c502:	683b      	ldr	r3, [r7, #0]
 800c504:	781b      	ldrb	r3, [r3, #0]
 800c506:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c508:	683b      	ldr	r3, [r7, #0]
 800c50a:	785b      	ldrb	r3, [r3, #1]
 800c50c:	2b01      	cmp	r3, #1
 800c50e:	f040 80ab 	bne.w	800c668 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800c512:	683b      	ldr	r3, [r7, #0]
 800c514:	699b      	ldr	r3, [r3, #24]
 800c516:	2b00      	cmp	r3, #0
 800c518:	d132      	bne.n	800c580 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c51a:	68bb      	ldr	r3, [r7, #8]
 800c51c:	015a      	lsls	r2, r3, #5
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	4413      	add	r3, r2
 800c522:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c526:	691b      	ldr	r3, [r3, #16]
 800c528:	68ba      	ldr	r2, [r7, #8]
 800c52a:	0151      	lsls	r1, r2, #5
 800c52c:	68fa      	ldr	r2, [r7, #12]
 800c52e:	440a      	add	r2, r1
 800c530:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c534:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c538:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c53c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c53e:	68bb      	ldr	r3, [r7, #8]
 800c540:	015a      	lsls	r2, r3, #5
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	4413      	add	r3, r2
 800c546:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c54a:	691b      	ldr	r3, [r3, #16]
 800c54c:	68ba      	ldr	r2, [r7, #8]
 800c54e:	0151      	lsls	r1, r2, #5
 800c550:	68fa      	ldr	r2, [r7, #12]
 800c552:	440a      	add	r2, r1
 800c554:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c558:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c55c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c55e:	68bb      	ldr	r3, [r7, #8]
 800c560:	015a      	lsls	r2, r3, #5
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	4413      	add	r3, r2
 800c566:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c56a:	691b      	ldr	r3, [r3, #16]
 800c56c:	68ba      	ldr	r2, [r7, #8]
 800c56e:	0151      	lsls	r1, r2, #5
 800c570:	68fa      	ldr	r2, [r7, #12]
 800c572:	440a      	add	r2, r1
 800c574:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c578:	0cdb      	lsrs	r3, r3, #19
 800c57a:	04db      	lsls	r3, r3, #19
 800c57c:	6113      	str	r3, [r2, #16]
 800c57e:	e04e      	b.n	800c61e <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c580:	68bb      	ldr	r3, [r7, #8]
 800c582:	015a      	lsls	r2, r3, #5
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	4413      	add	r3, r2
 800c588:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c58c:	691b      	ldr	r3, [r3, #16]
 800c58e:	68ba      	ldr	r2, [r7, #8]
 800c590:	0151      	lsls	r1, r2, #5
 800c592:	68fa      	ldr	r2, [r7, #12]
 800c594:	440a      	add	r2, r1
 800c596:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c59a:	0cdb      	lsrs	r3, r3, #19
 800c59c:	04db      	lsls	r3, r3, #19
 800c59e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c5a0:	68bb      	ldr	r3, [r7, #8]
 800c5a2:	015a      	lsls	r2, r3, #5
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	4413      	add	r3, r2
 800c5a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c5ac:	691b      	ldr	r3, [r3, #16]
 800c5ae:	68ba      	ldr	r2, [r7, #8]
 800c5b0:	0151      	lsls	r1, r2, #5
 800c5b2:	68fa      	ldr	r2, [r7, #12]
 800c5b4:	440a      	add	r2, r1
 800c5b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c5ba:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c5be:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c5c2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800c5c4:	683b      	ldr	r3, [r7, #0]
 800c5c6:	699a      	ldr	r2, [r3, #24]
 800c5c8:	683b      	ldr	r3, [r7, #0]
 800c5ca:	68db      	ldr	r3, [r3, #12]
 800c5cc:	429a      	cmp	r2, r3
 800c5ce:	d903      	bls.n	800c5d8 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 800c5d0:	683b      	ldr	r3, [r7, #0]
 800c5d2:	68da      	ldr	r2, [r3, #12]
 800c5d4:	683b      	ldr	r3, [r7, #0]
 800c5d6:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c5d8:	68bb      	ldr	r3, [r7, #8]
 800c5da:	015a      	lsls	r2, r3, #5
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	4413      	add	r3, r2
 800c5e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c5e4:	691b      	ldr	r3, [r3, #16]
 800c5e6:	68ba      	ldr	r2, [r7, #8]
 800c5e8:	0151      	lsls	r1, r2, #5
 800c5ea:	68fa      	ldr	r2, [r7, #12]
 800c5ec:	440a      	add	r2, r1
 800c5ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c5f2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c5f6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c5f8:	68bb      	ldr	r3, [r7, #8]
 800c5fa:	015a      	lsls	r2, r3, #5
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	4413      	add	r3, r2
 800c600:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c604:	691a      	ldr	r2, [r3, #16]
 800c606:	683b      	ldr	r3, [r7, #0]
 800c608:	699b      	ldr	r3, [r3, #24]
 800c60a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c60e:	68b9      	ldr	r1, [r7, #8]
 800c610:	0148      	lsls	r0, r1, #5
 800c612:	68f9      	ldr	r1, [r7, #12]
 800c614:	4401      	add	r1, r0
 800c616:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c61a:	4313      	orrs	r3, r2
 800c61c:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c61e:	68bb      	ldr	r3, [r7, #8]
 800c620:	015a      	lsls	r2, r3, #5
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	4413      	add	r3, r2
 800c626:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	68ba      	ldr	r2, [r7, #8]
 800c62e:	0151      	lsls	r1, r2, #5
 800c630:	68fa      	ldr	r2, [r7, #12]
 800c632:	440a      	add	r2, r1
 800c634:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c638:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c63c:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 800c63e:	683b      	ldr	r3, [r7, #0]
 800c640:	699b      	ldr	r3, [r3, #24]
 800c642:	2b00      	cmp	r3, #0
 800c644:	d071      	beq.n	800c72a <USB_EP0StartXfer+0x236>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c64c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c64e:	683b      	ldr	r3, [r7, #0]
 800c650:	781b      	ldrb	r3, [r3, #0]
 800c652:	f003 030f 	and.w	r3, r3, #15
 800c656:	2101      	movs	r1, #1
 800c658:	fa01 f303 	lsl.w	r3, r1, r3
 800c65c:	68f9      	ldr	r1, [r7, #12]
 800c65e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c662:	4313      	orrs	r3, r2
 800c664:	634b      	str	r3, [r1, #52]	; 0x34
 800c666:	e060      	b.n	800c72a <USB_EP0StartXfer+0x236>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c668:	68bb      	ldr	r3, [r7, #8]
 800c66a:	015a      	lsls	r2, r3, #5
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	4413      	add	r3, r2
 800c670:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c674:	691b      	ldr	r3, [r3, #16]
 800c676:	68ba      	ldr	r2, [r7, #8]
 800c678:	0151      	lsls	r1, r2, #5
 800c67a:	68fa      	ldr	r2, [r7, #12]
 800c67c:	440a      	add	r2, r1
 800c67e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c682:	0cdb      	lsrs	r3, r3, #19
 800c684:	04db      	lsls	r3, r3, #19
 800c686:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c688:	68bb      	ldr	r3, [r7, #8]
 800c68a:	015a      	lsls	r2, r3, #5
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	4413      	add	r3, r2
 800c690:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c694:	691b      	ldr	r3, [r3, #16]
 800c696:	68ba      	ldr	r2, [r7, #8]
 800c698:	0151      	lsls	r1, r2, #5
 800c69a:	68fa      	ldr	r2, [r7, #12]
 800c69c:	440a      	add	r2, r1
 800c69e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c6a2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c6a6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c6aa:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800c6ac:	683b      	ldr	r3, [r7, #0]
 800c6ae:	699b      	ldr	r3, [r3, #24]
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d003      	beq.n	800c6bc <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 800c6b4:	683b      	ldr	r3, [r7, #0]
 800c6b6:	68da      	ldr	r2, [r3, #12]
 800c6b8:	683b      	ldr	r3, [r7, #0]
 800c6ba:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800c6bc:	683b      	ldr	r3, [r7, #0]
 800c6be:	68da      	ldr	r2, [r3, #12]
 800c6c0:	683b      	ldr	r3, [r7, #0]
 800c6c2:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c6c4:	68bb      	ldr	r3, [r7, #8]
 800c6c6:	015a      	lsls	r2, r3, #5
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	4413      	add	r3, r2
 800c6cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c6d0:	691b      	ldr	r3, [r3, #16]
 800c6d2:	68ba      	ldr	r2, [r7, #8]
 800c6d4:	0151      	lsls	r1, r2, #5
 800c6d6:	68fa      	ldr	r2, [r7, #12]
 800c6d8:	440a      	add	r2, r1
 800c6da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c6de:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c6e2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800c6e4:	68bb      	ldr	r3, [r7, #8]
 800c6e6:	015a      	lsls	r2, r3, #5
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	4413      	add	r3, r2
 800c6ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c6f0:	691a      	ldr	r2, [r3, #16]
 800c6f2:	683b      	ldr	r3, [r7, #0]
 800c6f4:	69db      	ldr	r3, [r3, #28]
 800c6f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c6fa:	68b9      	ldr	r1, [r7, #8]
 800c6fc:	0148      	lsls	r0, r1, #5
 800c6fe:	68f9      	ldr	r1, [r7, #12]
 800c700:	4401      	add	r1, r0
 800c702:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c706:	4313      	orrs	r3, r2
 800c708:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c70a:	68bb      	ldr	r3, [r7, #8]
 800c70c:	015a      	lsls	r2, r3, #5
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	4413      	add	r3, r2
 800c712:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	68ba      	ldr	r2, [r7, #8]
 800c71a:	0151      	lsls	r1, r2, #5
 800c71c:	68fa      	ldr	r2, [r7, #12]
 800c71e:	440a      	add	r2, r1
 800c720:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c724:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c728:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c72a:	2300      	movs	r3, #0
}
 800c72c:	4618      	mov	r0, r3
 800c72e:	3714      	adds	r7, #20
 800c730:	46bd      	mov	sp, r7
 800c732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c736:	4770      	bx	lr

0800c738 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c738:	b480      	push	{r7}
 800c73a:	b087      	sub	sp, #28
 800c73c:	af00      	add	r7, sp, #0
 800c73e:	6078      	str	r0, [r7, #4]
 800c740:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c742:	2300      	movs	r3, #0
 800c744:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800c746:	2300      	movs	r3, #0
 800c748:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c74e:	683b      	ldr	r3, [r7, #0]
 800c750:	785b      	ldrb	r3, [r3, #1]
 800c752:	2b01      	cmp	r3, #1
 800c754:	d14a      	bne.n	800c7ec <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c756:	683b      	ldr	r3, [r7, #0]
 800c758:	781b      	ldrb	r3, [r3, #0]
 800c75a:	015a      	lsls	r2, r3, #5
 800c75c:	693b      	ldr	r3, [r7, #16]
 800c75e:	4413      	add	r3, r2
 800c760:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c76a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c76e:	f040 8086 	bne.w	800c87e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800c772:	683b      	ldr	r3, [r7, #0]
 800c774:	781b      	ldrb	r3, [r3, #0]
 800c776:	015a      	lsls	r2, r3, #5
 800c778:	693b      	ldr	r3, [r7, #16]
 800c77a:	4413      	add	r3, r2
 800c77c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	683a      	ldr	r2, [r7, #0]
 800c784:	7812      	ldrb	r2, [r2, #0]
 800c786:	0151      	lsls	r1, r2, #5
 800c788:	693a      	ldr	r2, [r7, #16]
 800c78a:	440a      	add	r2, r1
 800c78c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c790:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c794:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800c796:	683b      	ldr	r3, [r7, #0]
 800c798:	781b      	ldrb	r3, [r3, #0]
 800c79a:	015a      	lsls	r2, r3, #5
 800c79c:	693b      	ldr	r3, [r7, #16]
 800c79e:	4413      	add	r3, r2
 800c7a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	683a      	ldr	r2, [r7, #0]
 800c7a8:	7812      	ldrb	r2, [r2, #0]
 800c7aa:	0151      	lsls	r1, r2, #5
 800c7ac:	693a      	ldr	r2, [r7, #16]
 800c7ae:	440a      	add	r2, r1
 800c7b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c7b4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c7b8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	3301      	adds	r3, #1
 800c7be:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	f242 7210 	movw	r2, #10000	; 0x2710
 800c7c6:	4293      	cmp	r3, r2
 800c7c8:	d902      	bls.n	800c7d0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800c7ca:	2301      	movs	r3, #1
 800c7cc:	75fb      	strb	r3, [r7, #23]
          break;
 800c7ce:	e056      	b.n	800c87e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800c7d0:	683b      	ldr	r3, [r7, #0]
 800c7d2:	781b      	ldrb	r3, [r3, #0]
 800c7d4:	015a      	lsls	r2, r3, #5
 800c7d6:	693b      	ldr	r3, [r7, #16]
 800c7d8:	4413      	add	r3, r2
 800c7da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c7e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c7e8:	d0e7      	beq.n	800c7ba <USB_EPStopXfer+0x82>
 800c7ea:	e048      	b.n	800c87e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c7ec:	683b      	ldr	r3, [r7, #0]
 800c7ee:	781b      	ldrb	r3, [r3, #0]
 800c7f0:	015a      	lsls	r2, r3, #5
 800c7f2:	693b      	ldr	r3, [r7, #16]
 800c7f4:	4413      	add	r3, r2
 800c7f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c800:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c804:	d13b      	bne.n	800c87e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800c806:	683b      	ldr	r3, [r7, #0]
 800c808:	781b      	ldrb	r3, [r3, #0]
 800c80a:	015a      	lsls	r2, r3, #5
 800c80c:	693b      	ldr	r3, [r7, #16]
 800c80e:	4413      	add	r3, r2
 800c810:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	683a      	ldr	r2, [r7, #0]
 800c818:	7812      	ldrb	r2, [r2, #0]
 800c81a:	0151      	lsls	r1, r2, #5
 800c81c:	693a      	ldr	r2, [r7, #16]
 800c81e:	440a      	add	r2, r1
 800c820:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c824:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c828:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800c82a:	683b      	ldr	r3, [r7, #0]
 800c82c:	781b      	ldrb	r3, [r3, #0]
 800c82e:	015a      	lsls	r2, r3, #5
 800c830:	693b      	ldr	r3, [r7, #16]
 800c832:	4413      	add	r3, r2
 800c834:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	683a      	ldr	r2, [r7, #0]
 800c83c:	7812      	ldrb	r2, [r2, #0]
 800c83e:	0151      	lsls	r1, r2, #5
 800c840:	693a      	ldr	r2, [r7, #16]
 800c842:	440a      	add	r2, r1
 800c844:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c848:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c84c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	3301      	adds	r3, #1
 800c852:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	f242 7210 	movw	r2, #10000	; 0x2710
 800c85a:	4293      	cmp	r3, r2
 800c85c:	d902      	bls.n	800c864 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800c85e:	2301      	movs	r3, #1
 800c860:	75fb      	strb	r3, [r7, #23]
          break;
 800c862:	e00c      	b.n	800c87e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800c864:	683b      	ldr	r3, [r7, #0]
 800c866:	781b      	ldrb	r3, [r3, #0]
 800c868:	015a      	lsls	r2, r3, #5
 800c86a:	693b      	ldr	r3, [r7, #16]
 800c86c:	4413      	add	r3, r2
 800c86e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c878:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c87c:	d0e7      	beq.n	800c84e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800c87e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c880:	4618      	mov	r0, r3
 800c882:	371c      	adds	r7, #28
 800c884:	46bd      	mov	sp, r7
 800c886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c88a:	4770      	bx	lr

0800c88c <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 800c88c:	b480      	push	{r7}
 800c88e:	b089      	sub	sp, #36	; 0x24
 800c890:	af00      	add	r7, sp, #0
 800c892:	60f8      	str	r0, [r7, #12]
 800c894:	60b9      	str	r1, [r7, #8]
 800c896:	4611      	mov	r1, r2
 800c898:	461a      	mov	r2, r3
 800c89a:	460b      	mov	r3, r1
 800c89c:	71fb      	strb	r3, [r7, #7]
 800c89e:	4613      	mov	r3, r2
 800c8a0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800c8a6:	68bb      	ldr	r3, [r7, #8]
 800c8a8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 800c8aa:	88bb      	ldrh	r3, [r7, #4]
 800c8ac:	3303      	adds	r3, #3
 800c8ae:	089b      	lsrs	r3, r3, #2
 800c8b0:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800c8b2:	2300      	movs	r3, #0
 800c8b4:	61bb      	str	r3, [r7, #24]
 800c8b6:	e018      	b.n	800c8ea <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800c8b8:	79fb      	ldrb	r3, [r7, #7]
 800c8ba:	031a      	lsls	r2, r3, #12
 800c8bc:	697b      	ldr	r3, [r7, #20]
 800c8be:	4413      	add	r3, r2
 800c8c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c8c4:	461a      	mov	r2, r3
 800c8c6:	69fb      	ldr	r3, [r7, #28]
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	6013      	str	r3, [r2, #0]
    pSrc++;
 800c8cc:	69fb      	ldr	r3, [r7, #28]
 800c8ce:	3301      	adds	r3, #1
 800c8d0:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800c8d2:	69fb      	ldr	r3, [r7, #28]
 800c8d4:	3301      	adds	r3, #1
 800c8d6:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800c8d8:	69fb      	ldr	r3, [r7, #28]
 800c8da:	3301      	adds	r3, #1
 800c8dc:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800c8de:	69fb      	ldr	r3, [r7, #28]
 800c8e0:	3301      	adds	r3, #1
 800c8e2:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800c8e4:	69bb      	ldr	r3, [r7, #24]
 800c8e6:	3301      	adds	r3, #1
 800c8e8:	61bb      	str	r3, [r7, #24]
 800c8ea:	69ba      	ldr	r2, [r7, #24]
 800c8ec:	693b      	ldr	r3, [r7, #16]
 800c8ee:	429a      	cmp	r2, r3
 800c8f0:	d3e2      	bcc.n	800c8b8 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800c8f2:	2300      	movs	r3, #0
}
 800c8f4:	4618      	mov	r0, r3
 800c8f6:	3724      	adds	r7, #36	; 0x24
 800c8f8:	46bd      	mov	sp, r7
 800c8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8fe:	4770      	bx	lr

0800c900 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800c900:	b480      	push	{r7}
 800c902:	b08b      	sub	sp, #44	; 0x2c
 800c904:	af00      	add	r7, sp, #0
 800c906:	60f8      	str	r0, [r7, #12]
 800c908:	60b9      	str	r1, [r7, #8]
 800c90a:	4613      	mov	r3, r2
 800c90c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800c912:	68bb      	ldr	r3, [r7, #8]
 800c914:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800c916:	88fb      	ldrh	r3, [r7, #6]
 800c918:	089b      	lsrs	r3, r3, #2
 800c91a:	b29b      	uxth	r3, r3
 800c91c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800c91e:	88fb      	ldrh	r3, [r7, #6]
 800c920:	f003 0303 	and.w	r3, r3, #3
 800c924:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800c926:	2300      	movs	r3, #0
 800c928:	623b      	str	r3, [r7, #32]
 800c92a:	e014      	b.n	800c956 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800c92c:	69bb      	ldr	r3, [r7, #24]
 800c92e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c932:	681a      	ldr	r2, [r3, #0]
 800c934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c936:	601a      	str	r2, [r3, #0]
    pDest++;
 800c938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c93a:	3301      	adds	r3, #1
 800c93c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c93e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c940:	3301      	adds	r3, #1
 800c942:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c946:	3301      	adds	r3, #1
 800c948:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c94a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c94c:	3301      	adds	r3, #1
 800c94e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800c950:	6a3b      	ldr	r3, [r7, #32]
 800c952:	3301      	adds	r3, #1
 800c954:	623b      	str	r3, [r7, #32]
 800c956:	6a3a      	ldr	r2, [r7, #32]
 800c958:	697b      	ldr	r3, [r7, #20]
 800c95a:	429a      	cmp	r2, r3
 800c95c:	d3e6      	bcc.n	800c92c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800c95e:	8bfb      	ldrh	r3, [r7, #30]
 800c960:	2b00      	cmp	r3, #0
 800c962:	d01e      	beq.n	800c9a2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800c964:	2300      	movs	r3, #0
 800c966:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800c968:	69bb      	ldr	r3, [r7, #24]
 800c96a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c96e:	461a      	mov	r2, r3
 800c970:	f107 0310 	add.w	r3, r7, #16
 800c974:	6812      	ldr	r2, [r2, #0]
 800c976:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800c978:	693a      	ldr	r2, [r7, #16]
 800c97a:	6a3b      	ldr	r3, [r7, #32]
 800c97c:	b2db      	uxtb	r3, r3
 800c97e:	00db      	lsls	r3, r3, #3
 800c980:	fa22 f303 	lsr.w	r3, r2, r3
 800c984:	b2da      	uxtb	r2, r3
 800c986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c988:	701a      	strb	r2, [r3, #0]
      i++;
 800c98a:	6a3b      	ldr	r3, [r7, #32]
 800c98c:	3301      	adds	r3, #1
 800c98e:	623b      	str	r3, [r7, #32]
      pDest++;
 800c990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c992:	3301      	adds	r3, #1
 800c994:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800c996:	8bfb      	ldrh	r3, [r7, #30]
 800c998:	3b01      	subs	r3, #1
 800c99a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800c99c:	8bfb      	ldrh	r3, [r7, #30]
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d1ea      	bne.n	800c978 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800c9a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c9a4:	4618      	mov	r0, r3
 800c9a6:	372c      	adds	r7, #44	; 0x2c
 800c9a8:	46bd      	mov	sp, r7
 800c9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ae:	4770      	bx	lr

0800c9b0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c9b0:	b480      	push	{r7}
 800c9b2:	b085      	sub	sp, #20
 800c9b4:	af00      	add	r7, sp, #0
 800c9b6:	6078      	str	r0, [r7, #4]
 800c9b8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c9be:	683b      	ldr	r3, [r7, #0]
 800c9c0:	781b      	ldrb	r3, [r3, #0]
 800c9c2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c9c4:	683b      	ldr	r3, [r7, #0]
 800c9c6:	785b      	ldrb	r3, [r3, #1]
 800c9c8:	2b01      	cmp	r3, #1
 800c9ca:	d12c      	bne.n	800ca26 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c9cc:	68bb      	ldr	r3, [r7, #8]
 800c9ce:	015a      	lsls	r2, r3, #5
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	4413      	add	r3, r2
 800c9d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	db12      	blt.n	800ca04 <USB_EPSetStall+0x54>
 800c9de:	68bb      	ldr	r3, [r7, #8]
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d00f      	beq.n	800ca04 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800c9e4:	68bb      	ldr	r3, [r7, #8]
 800c9e6:	015a      	lsls	r2, r3, #5
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	4413      	add	r3, r2
 800c9ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	68ba      	ldr	r2, [r7, #8]
 800c9f4:	0151      	lsls	r1, r2, #5
 800c9f6:	68fa      	ldr	r2, [r7, #12]
 800c9f8:	440a      	add	r2, r1
 800c9fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c9fe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ca02:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800ca04:	68bb      	ldr	r3, [r7, #8]
 800ca06:	015a      	lsls	r2, r3, #5
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	4413      	add	r3, r2
 800ca0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	68ba      	ldr	r2, [r7, #8]
 800ca14:	0151      	lsls	r1, r2, #5
 800ca16:	68fa      	ldr	r2, [r7, #12]
 800ca18:	440a      	add	r2, r1
 800ca1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ca1e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ca22:	6013      	str	r3, [r2, #0]
 800ca24:	e02b      	b.n	800ca7e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ca26:	68bb      	ldr	r3, [r7, #8]
 800ca28:	015a      	lsls	r2, r3, #5
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	4413      	add	r3, r2
 800ca2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	db12      	blt.n	800ca5e <USB_EPSetStall+0xae>
 800ca38:	68bb      	ldr	r3, [r7, #8]
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d00f      	beq.n	800ca5e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800ca3e:	68bb      	ldr	r3, [r7, #8]
 800ca40:	015a      	lsls	r2, r3, #5
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	4413      	add	r3, r2
 800ca46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	68ba      	ldr	r2, [r7, #8]
 800ca4e:	0151      	lsls	r1, r2, #5
 800ca50:	68fa      	ldr	r2, [r7, #12]
 800ca52:	440a      	add	r2, r1
 800ca54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ca58:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ca5c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800ca5e:	68bb      	ldr	r3, [r7, #8]
 800ca60:	015a      	lsls	r2, r3, #5
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	4413      	add	r3, r2
 800ca66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	68ba      	ldr	r2, [r7, #8]
 800ca6e:	0151      	lsls	r1, r2, #5
 800ca70:	68fa      	ldr	r2, [r7, #12]
 800ca72:	440a      	add	r2, r1
 800ca74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ca78:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ca7c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ca7e:	2300      	movs	r3, #0
}
 800ca80:	4618      	mov	r0, r3
 800ca82:	3714      	adds	r7, #20
 800ca84:	46bd      	mov	sp, r7
 800ca86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca8a:	4770      	bx	lr

0800ca8c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ca8c:	b480      	push	{r7}
 800ca8e:	b085      	sub	sp, #20
 800ca90:	af00      	add	r7, sp, #0
 800ca92:	6078      	str	r0, [r7, #4]
 800ca94:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ca9a:	683b      	ldr	r3, [r7, #0]
 800ca9c:	781b      	ldrb	r3, [r3, #0]
 800ca9e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800caa0:	683b      	ldr	r3, [r7, #0]
 800caa2:	785b      	ldrb	r3, [r3, #1]
 800caa4:	2b01      	cmp	r3, #1
 800caa6:	d128      	bne.n	800cafa <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800caa8:	68bb      	ldr	r3, [r7, #8]
 800caaa:	015a      	lsls	r2, r3, #5
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	4413      	add	r3, r2
 800cab0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	68ba      	ldr	r2, [r7, #8]
 800cab8:	0151      	lsls	r1, r2, #5
 800caba:	68fa      	ldr	r2, [r7, #12]
 800cabc:	440a      	add	r2, r1
 800cabe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cac2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800cac6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800cac8:	683b      	ldr	r3, [r7, #0]
 800caca:	791b      	ldrb	r3, [r3, #4]
 800cacc:	2b03      	cmp	r3, #3
 800cace:	d003      	beq.n	800cad8 <USB_EPClearStall+0x4c>
 800cad0:	683b      	ldr	r3, [r7, #0]
 800cad2:	791b      	ldrb	r3, [r3, #4]
 800cad4:	2b02      	cmp	r3, #2
 800cad6:	d138      	bne.n	800cb4a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800cad8:	68bb      	ldr	r3, [r7, #8]
 800cada:	015a      	lsls	r2, r3, #5
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	4413      	add	r3, r2
 800cae0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	68ba      	ldr	r2, [r7, #8]
 800cae8:	0151      	lsls	r1, r2, #5
 800caea:	68fa      	ldr	r2, [r7, #12]
 800caec:	440a      	add	r2, r1
 800caee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800caf2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800caf6:	6013      	str	r3, [r2, #0]
 800caf8:	e027      	b.n	800cb4a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800cafa:	68bb      	ldr	r3, [r7, #8]
 800cafc:	015a      	lsls	r2, r3, #5
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	4413      	add	r3, r2
 800cb02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	68ba      	ldr	r2, [r7, #8]
 800cb0a:	0151      	lsls	r1, r2, #5
 800cb0c:	68fa      	ldr	r2, [r7, #12]
 800cb0e:	440a      	add	r2, r1
 800cb10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cb14:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800cb18:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800cb1a:	683b      	ldr	r3, [r7, #0]
 800cb1c:	791b      	ldrb	r3, [r3, #4]
 800cb1e:	2b03      	cmp	r3, #3
 800cb20:	d003      	beq.n	800cb2a <USB_EPClearStall+0x9e>
 800cb22:	683b      	ldr	r3, [r7, #0]
 800cb24:	791b      	ldrb	r3, [r3, #4]
 800cb26:	2b02      	cmp	r3, #2
 800cb28:	d10f      	bne.n	800cb4a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800cb2a:	68bb      	ldr	r3, [r7, #8]
 800cb2c:	015a      	lsls	r2, r3, #5
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	4413      	add	r3, r2
 800cb32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	68ba      	ldr	r2, [r7, #8]
 800cb3a:	0151      	lsls	r1, r2, #5
 800cb3c:	68fa      	ldr	r2, [r7, #12]
 800cb3e:	440a      	add	r2, r1
 800cb40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cb44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cb48:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800cb4a:	2300      	movs	r3, #0
}
 800cb4c:	4618      	mov	r0, r3
 800cb4e:	3714      	adds	r7, #20
 800cb50:	46bd      	mov	sp, r7
 800cb52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb56:	4770      	bx	lr

0800cb58 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800cb58:	b480      	push	{r7}
 800cb5a:	b085      	sub	sp, #20
 800cb5c:	af00      	add	r7, sp, #0
 800cb5e:	6078      	str	r0, [r7, #4]
 800cb60:	460b      	mov	r3, r1
 800cb62:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	68fa      	ldr	r2, [r7, #12]
 800cb72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cb76:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800cb7a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb82:	681a      	ldr	r2, [r3, #0]
 800cb84:	78fb      	ldrb	r3, [r7, #3]
 800cb86:	011b      	lsls	r3, r3, #4
 800cb88:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800cb8c:	68f9      	ldr	r1, [r7, #12]
 800cb8e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cb92:	4313      	orrs	r3, r2
 800cb94:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800cb96:	2300      	movs	r3, #0
}
 800cb98:	4618      	mov	r0, r3
 800cb9a:	3714      	adds	r7, #20
 800cb9c:	46bd      	mov	sp, r7
 800cb9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cba2:	4770      	bx	lr

0800cba4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800cba4:	b480      	push	{r7}
 800cba6:	b085      	sub	sp, #20
 800cba8:	af00      	add	r7, sp, #0
 800cbaa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	68fa      	ldr	r2, [r7, #12]
 800cbba:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800cbbe:	f023 0303 	bic.w	r3, r3, #3
 800cbc2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cbca:	685b      	ldr	r3, [r3, #4]
 800cbcc:	68fa      	ldr	r2, [r7, #12]
 800cbce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cbd2:	f023 0302 	bic.w	r3, r3, #2
 800cbd6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800cbd8:	2300      	movs	r3, #0
}
 800cbda:	4618      	mov	r0, r3
 800cbdc:	3714      	adds	r7, #20
 800cbde:	46bd      	mov	sp, r7
 800cbe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbe4:	4770      	bx	lr

0800cbe6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800cbe6:	b480      	push	{r7}
 800cbe8:	b085      	sub	sp, #20
 800cbea:	af00      	add	r7, sp, #0
 800cbec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	68fa      	ldr	r2, [r7, #12]
 800cbfc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800cc00:	f023 0303 	bic.w	r3, r3, #3
 800cc04:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc0c:	685b      	ldr	r3, [r3, #4]
 800cc0e:	68fa      	ldr	r2, [r7, #12]
 800cc10:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cc14:	f043 0302 	orr.w	r3, r3, #2
 800cc18:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800cc1a:	2300      	movs	r3, #0
}
 800cc1c:	4618      	mov	r0, r3
 800cc1e:	3714      	adds	r7, #20
 800cc20:	46bd      	mov	sp, r7
 800cc22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc26:	4770      	bx	lr

0800cc28 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800cc28:	b480      	push	{r7}
 800cc2a:	b085      	sub	sp, #20
 800cc2c:	af00      	add	r7, sp, #0
 800cc2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	695b      	ldr	r3, [r3, #20]
 800cc34:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	699b      	ldr	r3, [r3, #24]
 800cc3a:	68fa      	ldr	r2, [r7, #12]
 800cc3c:	4013      	ands	r3, r2
 800cc3e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800cc40:	68fb      	ldr	r3, [r7, #12]
}
 800cc42:	4618      	mov	r0, r3
 800cc44:	3714      	adds	r7, #20
 800cc46:	46bd      	mov	sp, r7
 800cc48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc4c:	4770      	bx	lr

0800cc4e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800cc4e:	b480      	push	{r7}
 800cc50:	b085      	sub	sp, #20
 800cc52:	af00      	add	r7, sp, #0
 800cc54:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc60:	699b      	ldr	r3, [r3, #24]
 800cc62:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc6a:	69db      	ldr	r3, [r3, #28]
 800cc6c:	68ba      	ldr	r2, [r7, #8]
 800cc6e:	4013      	ands	r3, r2
 800cc70:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800cc72:	68bb      	ldr	r3, [r7, #8]
 800cc74:	0c1b      	lsrs	r3, r3, #16
}
 800cc76:	4618      	mov	r0, r3
 800cc78:	3714      	adds	r7, #20
 800cc7a:	46bd      	mov	sp, r7
 800cc7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc80:	4770      	bx	lr

0800cc82 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800cc82:	b480      	push	{r7}
 800cc84:	b085      	sub	sp, #20
 800cc86:	af00      	add	r7, sp, #0
 800cc88:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc94:	699b      	ldr	r3, [r3, #24]
 800cc96:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc9e:	69db      	ldr	r3, [r3, #28]
 800cca0:	68ba      	ldr	r2, [r7, #8]
 800cca2:	4013      	ands	r3, r2
 800cca4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800cca6:	68bb      	ldr	r3, [r7, #8]
 800cca8:	b29b      	uxth	r3, r3
}
 800ccaa:	4618      	mov	r0, r3
 800ccac:	3714      	adds	r7, #20
 800ccae:	46bd      	mov	sp, r7
 800ccb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccb4:	4770      	bx	lr

0800ccb6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ccb6:	b480      	push	{r7}
 800ccb8:	b085      	sub	sp, #20
 800ccba:	af00      	add	r7, sp, #0
 800ccbc:	6078      	str	r0, [r7, #4]
 800ccbe:	460b      	mov	r3, r1
 800ccc0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800ccc6:	78fb      	ldrb	r3, [r7, #3]
 800ccc8:	015a      	lsls	r2, r3, #5
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	4413      	add	r3, r2
 800ccce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ccd2:	689b      	ldr	r3, [r3, #8]
 800ccd4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ccdc:	695b      	ldr	r3, [r3, #20]
 800ccde:	68ba      	ldr	r2, [r7, #8]
 800cce0:	4013      	ands	r3, r2
 800cce2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800cce4:	68bb      	ldr	r3, [r7, #8]
}
 800cce6:	4618      	mov	r0, r3
 800cce8:	3714      	adds	r7, #20
 800ccea:	46bd      	mov	sp, r7
 800ccec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf0:	4770      	bx	lr

0800ccf2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ccf2:	b480      	push	{r7}
 800ccf4:	b087      	sub	sp, #28
 800ccf6:	af00      	add	r7, sp, #0
 800ccf8:	6078      	str	r0, [r7, #4]
 800ccfa:	460b      	mov	r3, r1
 800ccfc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800cd02:	697b      	ldr	r3, [r7, #20]
 800cd04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd08:	691b      	ldr	r3, [r3, #16]
 800cd0a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800cd0c:	697b      	ldr	r3, [r7, #20]
 800cd0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd14:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800cd16:	78fb      	ldrb	r3, [r7, #3]
 800cd18:	f003 030f 	and.w	r3, r3, #15
 800cd1c:	68fa      	ldr	r2, [r7, #12]
 800cd1e:	fa22 f303 	lsr.w	r3, r2, r3
 800cd22:	01db      	lsls	r3, r3, #7
 800cd24:	b2db      	uxtb	r3, r3
 800cd26:	693a      	ldr	r2, [r7, #16]
 800cd28:	4313      	orrs	r3, r2
 800cd2a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800cd2c:	78fb      	ldrb	r3, [r7, #3]
 800cd2e:	015a      	lsls	r2, r3, #5
 800cd30:	697b      	ldr	r3, [r7, #20]
 800cd32:	4413      	add	r3, r2
 800cd34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd38:	689b      	ldr	r3, [r3, #8]
 800cd3a:	693a      	ldr	r2, [r7, #16]
 800cd3c:	4013      	ands	r3, r2
 800cd3e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800cd40:	68bb      	ldr	r3, [r7, #8]
}
 800cd42:	4618      	mov	r0, r3
 800cd44:	371c      	adds	r7, #28
 800cd46:	46bd      	mov	sp, r7
 800cd48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd4c:	4770      	bx	lr

0800cd4e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800cd4e:	b480      	push	{r7}
 800cd50:	b083      	sub	sp, #12
 800cd52:	af00      	add	r7, sp, #0
 800cd54:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	695b      	ldr	r3, [r3, #20]
 800cd5a:	f003 0301 	and.w	r3, r3, #1
}
 800cd5e:	4618      	mov	r0, r3
 800cd60:	370c      	adds	r7, #12
 800cd62:	46bd      	mov	sp, r7
 800cd64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd68:	4770      	bx	lr

0800cd6a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800cd6a:	b480      	push	{r7}
 800cd6c:	b085      	sub	sp, #20
 800cd6e:	af00      	add	r7, sp, #0
 800cd70:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	68fa      	ldr	r2, [r7, #12]
 800cd80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cd84:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800cd88:	f023 0307 	bic.w	r3, r3, #7
 800cd8c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd94:	685b      	ldr	r3, [r3, #4]
 800cd96:	68fa      	ldr	r2, [r7, #12]
 800cd98:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cd9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cda0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800cda2:	2300      	movs	r3, #0
}
 800cda4:	4618      	mov	r0, r3
 800cda6:	3714      	adds	r7, #20
 800cda8:	46bd      	mov	sp, r7
 800cdaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdae:	4770      	bx	lr

0800cdb0 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 800cdb0:	b480      	push	{r7}
 800cdb2:	b085      	sub	sp, #20
 800cdb4:	af00      	add	r7, sp, #0
 800cdb6:	6078      	str	r0, [r7, #4]
 800cdb8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	333c      	adds	r3, #60	; 0x3c
 800cdc2:	3304      	adds	r3, #4
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800cdc8:	68bb      	ldr	r3, [r7, #8]
 800cdca:	4a1c      	ldr	r2, [pc, #112]	; (800ce3c <USB_EP0_OutStart+0x8c>)
 800cdcc:	4293      	cmp	r3, r2
 800cdce:	d90a      	bls.n	800cde6 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cddc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cde0:	d101      	bne.n	800cde6 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800cde2:	2300      	movs	r3, #0
 800cde4:	e024      	b.n	800ce30 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cdec:	461a      	mov	r2, r3
 800cdee:	2300      	movs	r3, #0
 800cdf0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cdf8:	691b      	ldr	r3, [r3, #16]
 800cdfa:	68fa      	ldr	r2, [r7, #12]
 800cdfc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ce00:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ce04:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce0c:	691b      	ldr	r3, [r3, #16]
 800ce0e:	68fa      	ldr	r2, [r7, #12]
 800ce10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ce14:	f043 0318 	orr.w	r3, r3, #24
 800ce18:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce20:	691b      	ldr	r3, [r3, #16]
 800ce22:	68fa      	ldr	r2, [r7, #12]
 800ce24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ce28:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800ce2c:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800ce2e:	2300      	movs	r3, #0
}
 800ce30:	4618      	mov	r0, r3
 800ce32:	3714      	adds	r7, #20
 800ce34:	46bd      	mov	sp, r7
 800ce36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce3a:	4770      	bx	lr
 800ce3c:	4f54300a 	.word	0x4f54300a

0800ce40 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ce40:	b480      	push	{r7}
 800ce42:	b085      	sub	sp, #20
 800ce44:	af00      	add	r7, sp, #0
 800ce46:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ce48:	2300      	movs	r3, #0
 800ce4a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	3301      	adds	r3, #1
 800ce50:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	4a13      	ldr	r2, [pc, #76]	; (800cea4 <USB_CoreReset+0x64>)
 800ce56:	4293      	cmp	r3, r2
 800ce58:	d901      	bls.n	800ce5e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ce5a:	2303      	movs	r3, #3
 800ce5c:	e01b      	b.n	800ce96 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	691b      	ldr	r3, [r3, #16]
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	daf2      	bge.n	800ce4c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ce66:	2300      	movs	r3, #0
 800ce68:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	691b      	ldr	r3, [r3, #16]
 800ce6e:	f043 0201 	orr.w	r2, r3, #1
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	3301      	adds	r3, #1
 800ce7a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	4a09      	ldr	r2, [pc, #36]	; (800cea4 <USB_CoreReset+0x64>)
 800ce80:	4293      	cmp	r3, r2
 800ce82:	d901      	bls.n	800ce88 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800ce84:	2303      	movs	r3, #3
 800ce86:	e006      	b.n	800ce96 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	691b      	ldr	r3, [r3, #16]
 800ce8c:	f003 0301 	and.w	r3, r3, #1
 800ce90:	2b01      	cmp	r3, #1
 800ce92:	d0f0      	beq.n	800ce76 <USB_CoreReset+0x36>

  return HAL_OK;
 800ce94:	2300      	movs	r3, #0
}
 800ce96:	4618      	mov	r0, r3
 800ce98:	3714      	adds	r7, #20
 800ce9a:	46bd      	mov	sp, r7
 800ce9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cea0:	4770      	bx	lr
 800cea2:	bf00      	nop
 800cea4:	00030d40 	.word	0x00030d40

0800cea8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cea8:	b580      	push	{r7, lr}
 800ceaa:	b084      	sub	sp, #16
 800ceac:	af00      	add	r7, sp, #0
 800ceae:	6078      	str	r0, [r7, #4]
 800ceb0:	460b      	mov	r3, r1
 800ceb2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800ceb4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800ceb8:	f005 f81e 	bl	8011ef8 <USBD_static_malloc>
 800cebc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d105      	bne.n	800ced0 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	2200      	movs	r2, #0
 800cec8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800cecc:	2302      	movs	r3, #2
 800cece:	e066      	b.n	800cf9e <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	68fa      	ldr	r2, [r7, #12]
 800ced4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	7c1b      	ldrb	r3, [r3, #16]
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d119      	bne.n	800cf14 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800cee0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cee4:	2202      	movs	r2, #2
 800cee6:	2181      	movs	r1, #129	; 0x81
 800cee8:	6878      	ldr	r0, [r7, #4]
 800ceea:	f004 fdf1 	bl	8011ad0 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	2201      	movs	r2, #1
 800cef2:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800cef4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cef8:	2202      	movs	r2, #2
 800cefa:	2101      	movs	r1, #1
 800cefc:	6878      	ldr	r0, [r7, #4]
 800cefe:	f004 fde7 	bl	8011ad0 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	2201      	movs	r2, #1
 800cf06:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	2210      	movs	r2, #16
 800cf0e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800cf12:	e016      	b.n	800cf42 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800cf14:	2340      	movs	r3, #64	; 0x40
 800cf16:	2202      	movs	r2, #2
 800cf18:	2181      	movs	r1, #129	; 0x81
 800cf1a:	6878      	ldr	r0, [r7, #4]
 800cf1c:	f004 fdd8 	bl	8011ad0 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	2201      	movs	r2, #1
 800cf24:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800cf26:	2340      	movs	r3, #64	; 0x40
 800cf28:	2202      	movs	r2, #2
 800cf2a:	2101      	movs	r1, #1
 800cf2c:	6878      	ldr	r0, [r7, #4]
 800cf2e:	f004 fdcf 	bl	8011ad0 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	2201      	movs	r2, #1
 800cf36:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	2210      	movs	r2, #16
 800cf3e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800cf42:	2308      	movs	r3, #8
 800cf44:	2203      	movs	r2, #3
 800cf46:	2182      	movs	r1, #130	; 0x82
 800cf48:	6878      	ldr	r0, [r7, #4]
 800cf4a:	f004 fdc1 	bl	8011ad0 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	2201      	movs	r2, #1
 800cf52:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	2200      	movs	r2, #0
 800cf64:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	2200      	movs	r2, #0
 800cf6c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	7c1b      	ldrb	r3, [r3, #16]
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d109      	bne.n	800cf8c <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800cf78:	68fb      	ldr	r3, [r7, #12]
 800cf7a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800cf7e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cf82:	2101      	movs	r1, #1
 800cf84:	6878      	ldr	r0, [r7, #4]
 800cf86:	f004 ff1d 	bl	8011dc4 <USBD_LL_PrepareReceive>
 800cf8a:	e007      	b.n	800cf9c <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800cf92:	2340      	movs	r3, #64	; 0x40
 800cf94:	2101      	movs	r1, #1
 800cf96:	6878      	ldr	r0, [r7, #4]
 800cf98:	f004 ff14 	bl	8011dc4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800cf9c:	2300      	movs	r3, #0
}
 800cf9e:	4618      	mov	r0, r3
 800cfa0:	3710      	adds	r7, #16
 800cfa2:	46bd      	mov	sp, r7
 800cfa4:	bd80      	pop	{r7, pc}

0800cfa6 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cfa6:	b580      	push	{r7, lr}
 800cfa8:	b082      	sub	sp, #8
 800cfaa:	af00      	add	r7, sp, #0
 800cfac:	6078      	str	r0, [r7, #4]
 800cfae:	460b      	mov	r3, r1
 800cfb0:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800cfb2:	2181      	movs	r1, #129	; 0x81
 800cfb4:	6878      	ldr	r0, [r7, #4]
 800cfb6:	f004 fdc9 	bl	8011b4c <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	2200      	movs	r2, #0
 800cfbe:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800cfc0:	2101      	movs	r1, #1
 800cfc2:	6878      	ldr	r0, [r7, #4]
 800cfc4:	f004 fdc2 	bl	8011b4c <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	2200      	movs	r2, #0
 800cfcc:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800cfd0:	2182      	movs	r1, #130	; 0x82
 800cfd2:	6878      	ldr	r0, [r7, #4]
 800cfd4:	f004 fdba 	bl	8011b4c <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	2200      	movs	r2, #0
 800cfdc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	2200      	movs	r2, #0
 800cfe4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d00e      	beq.n	800d010 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cff8:	685b      	ldr	r3, [r3, #4]
 800cffa:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d002:	4618      	mov	r0, r3
 800d004:	f004 ff86 	bl	8011f14 <USBD_static_free>
    pdev->pClassData = NULL;
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	2200      	movs	r2, #0
 800d00c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800d010:	2300      	movs	r3, #0
}
 800d012:	4618      	mov	r0, r3
 800d014:	3708      	adds	r7, #8
 800d016:	46bd      	mov	sp, r7
 800d018:	bd80      	pop	{r7, pc}
	...

0800d01c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800d01c:	b580      	push	{r7, lr}
 800d01e:	b086      	sub	sp, #24
 800d020:	af00      	add	r7, sp, #0
 800d022:	6078      	str	r0, [r7, #4]
 800d024:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d02c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800d02e:	2300      	movs	r3, #0
 800d030:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800d032:	2300      	movs	r3, #0
 800d034:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800d036:	2300      	movs	r3, #0
 800d038:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800d03a:	693b      	ldr	r3, [r7, #16]
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d101      	bne.n	800d044 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800d040:	2303      	movs	r3, #3
 800d042:	e0af      	b.n	800d1a4 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d044:	683b      	ldr	r3, [r7, #0]
 800d046:	781b      	ldrb	r3, [r3, #0]
 800d048:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d03f      	beq.n	800d0d0 <USBD_CDC_Setup+0xb4>
 800d050:	2b20      	cmp	r3, #32
 800d052:	f040 809f 	bne.w	800d194 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800d056:	683b      	ldr	r3, [r7, #0]
 800d058:	88db      	ldrh	r3, [r3, #6]
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d02e      	beq.n	800d0bc <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800d05e:	683b      	ldr	r3, [r7, #0]
 800d060:	781b      	ldrb	r3, [r3, #0]
 800d062:	b25b      	sxtb	r3, r3
 800d064:	2b00      	cmp	r3, #0
 800d066:	da16      	bge.n	800d096 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d06e:	689b      	ldr	r3, [r3, #8]
 800d070:	683a      	ldr	r2, [r7, #0]
 800d072:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800d074:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d076:	683a      	ldr	r2, [r7, #0]
 800d078:	88d2      	ldrh	r2, [r2, #6]
 800d07a:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800d07c:	683b      	ldr	r3, [r7, #0]
 800d07e:	88db      	ldrh	r3, [r3, #6]
 800d080:	2b07      	cmp	r3, #7
 800d082:	bf28      	it	cs
 800d084:	2307      	movcs	r3, #7
 800d086:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800d088:	693b      	ldr	r3, [r7, #16]
 800d08a:	89fa      	ldrh	r2, [r7, #14]
 800d08c:	4619      	mov	r1, r3
 800d08e:	6878      	ldr	r0, [r7, #4]
 800d090:	f001 fb13 	bl	800e6ba <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800d094:	e085      	b.n	800d1a2 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800d096:	683b      	ldr	r3, [r7, #0]
 800d098:	785a      	ldrb	r2, [r3, #1]
 800d09a:	693b      	ldr	r3, [r7, #16]
 800d09c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800d0a0:	683b      	ldr	r3, [r7, #0]
 800d0a2:	88db      	ldrh	r3, [r3, #6]
 800d0a4:	b2da      	uxtb	r2, r3
 800d0a6:	693b      	ldr	r3, [r7, #16]
 800d0a8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800d0ac:	6939      	ldr	r1, [r7, #16]
 800d0ae:	683b      	ldr	r3, [r7, #0]
 800d0b0:	88db      	ldrh	r3, [r3, #6]
 800d0b2:	461a      	mov	r2, r3
 800d0b4:	6878      	ldr	r0, [r7, #4]
 800d0b6:	f001 fb2c 	bl	800e712 <USBD_CtlPrepareRx>
      break;
 800d0ba:	e072      	b.n	800d1a2 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d0c2:	689b      	ldr	r3, [r3, #8]
 800d0c4:	683a      	ldr	r2, [r7, #0]
 800d0c6:	7850      	ldrb	r0, [r2, #1]
 800d0c8:	2200      	movs	r2, #0
 800d0ca:	6839      	ldr	r1, [r7, #0]
 800d0cc:	4798      	blx	r3
      break;
 800d0ce:	e068      	b.n	800d1a2 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d0d0:	683b      	ldr	r3, [r7, #0]
 800d0d2:	785b      	ldrb	r3, [r3, #1]
 800d0d4:	2b0b      	cmp	r3, #11
 800d0d6:	d852      	bhi.n	800d17e <USBD_CDC_Setup+0x162>
 800d0d8:	a201      	add	r2, pc, #4	; (adr r2, 800d0e0 <USBD_CDC_Setup+0xc4>)
 800d0da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0de:	bf00      	nop
 800d0e0:	0800d111 	.word	0x0800d111
 800d0e4:	0800d18d 	.word	0x0800d18d
 800d0e8:	0800d17f 	.word	0x0800d17f
 800d0ec:	0800d17f 	.word	0x0800d17f
 800d0f0:	0800d17f 	.word	0x0800d17f
 800d0f4:	0800d17f 	.word	0x0800d17f
 800d0f8:	0800d17f 	.word	0x0800d17f
 800d0fc:	0800d17f 	.word	0x0800d17f
 800d100:	0800d17f 	.word	0x0800d17f
 800d104:	0800d17f 	.word	0x0800d17f
 800d108:	0800d13b 	.word	0x0800d13b
 800d10c:	0800d165 	.word	0x0800d165
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d116:	b2db      	uxtb	r3, r3
 800d118:	2b03      	cmp	r3, #3
 800d11a:	d107      	bne.n	800d12c <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800d11c:	f107 030a 	add.w	r3, r7, #10
 800d120:	2202      	movs	r2, #2
 800d122:	4619      	mov	r1, r3
 800d124:	6878      	ldr	r0, [r7, #4]
 800d126:	f001 fac8 	bl	800e6ba <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d12a:	e032      	b.n	800d192 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800d12c:	6839      	ldr	r1, [r7, #0]
 800d12e:	6878      	ldr	r0, [r7, #4]
 800d130:	f001 fa52 	bl	800e5d8 <USBD_CtlError>
            ret = USBD_FAIL;
 800d134:	2303      	movs	r3, #3
 800d136:	75fb      	strb	r3, [r7, #23]
          break;
 800d138:	e02b      	b.n	800d192 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d140:	b2db      	uxtb	r3, r3
 800d142:	2b03      	cmp	r3, #3
 800d144:	d107      	bne.n	800d156 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800d146:	f107 030d 	add.w	r3, r7, #13
 800d14a:	2201      	movs	r2, #1
 800d14c:	4619      	mov	r1, r3
 800d14e:	6878      	ldr	r0, [r7, #4]
 800d150:	f001 fab3 	bl	800e6ba <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d154:	e01d      	b.n	800d192 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800d156:	6839      	ldr	r1, [r7, #0]
 800d158:	6878      	ldr	r0, [r7, #4]
 800d15a:	f001 fa3d 	bl	800e5d8 <USBD_CtlError>
            ret = USBD_FAIL;
 800d15e:	2303      	movs	r3, #3
 800d160:	75fb      	strb	r3, [r7, #23]
          break;
 800d162:	e016      	b.n	800d192 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d16a:	b2db      	uxtb	r3, r3
 800d16c:	2b03      	cmp	r3, #3
 800d16e:	d00f      	beq.n	800d190 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800d170:	6839      	ldr	r1, [r7, #0]
 800d172:	6878      	ldr	r0, [r7, #4]
 800d174:	f001 fa30 	bl	800e5d8 <USBD_CtlError>
            ret = USBD_FAIL;
 800d178:	2303      	movs	r3, #3
 800d17a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800d17c:	e008      	b.n	800d190 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800d17e:	6839      	ldr	r1, [r7, #0]
 800d180:	6878      	ldr	r0, [r7, #4]
 800d182:	f001 fa29 	bl	800e5d8 <USBD_CtlError>
          ret = USBD_FAIL;
 800d186:	2303      	movs	r3, #3
 800d188:	75fb      	strb	r3, [r7, #23]
          break;
 800d18a:	e002      	b.n	800d192 <USBD_CDC_Setup+0x176>
          break;
 800d18c:	bf00      	nop
 800d18e:	e008      	b.n	800d1a2 <USBD_CDC_Setup+0x186>
          break;
 800d190:	bf00      	nop
      }
      break;
 800d192:	e006      	b.n	800d1a2 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800d194:	6839      	ldr	r1, [r7, #0]
 800d196:	6878      	ldr	r0, [r7, #4]
 800d198:	f001 fa1e 	bl	800e5d8 <USBD_CtlError>
      ret = USBD_FAIL;
 800d19c:	2303      	movs	r3, #3
 800d19e:	75fb      	strb	r3, [r7, #23]
      break;
 800d1a0:	bf00      	nop
  }

  return (uint8_t)ret;
 800d1a2:	7dfb      	ldrb	r3, [r7, #23]
}
 800d1a4:	4618      	mov	r0, r3
 800d1a6:	3718      	adds	r7, #24
 800d1a8:	46bd      	mov	sp, r7
 800d1aa:	bd80      	pop	{r7, pc}

0800d1ac <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d1ac:	b580      	push	{r7, lr}
 800d1ae:	b084      	sub	sp, #16
 800d1b0:	af00      	add	r7, sp, #0
 800d1b2:	6078      	str	r0, [r7, #4]
 800d1b4:	460b      	mov	r3, r1
 800d1b6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d1be:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d101      	bne.n	800d1ce <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d1ca:	2303      	movs	r3, #3
 800d1cc:	e04f      	b.n	800d26e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d1d4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800d1d6:	78fa      	ldrb	r2, [r7, #3]
 800d1d8:	6879      	ldr	r1, [r7, #4]
 800d1da:	4613      	mov	r3, r2
 800d1dc:	009b      	lsls	r3, r3, #2
 800d1de:	4413      	add	r3, r2
 800d1e0:	009b      	lsls	r3, r3, #2
 800d1e2:	440b      	add	r3, r1
 800d1e4:	3318      	adds	r3, #24
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d029      	beq.n	800d240 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800d1ec:	78fa      	ldrb	r2, [r7, #3]
 800d1ee:	6879      	ldr	r1, [r7, #4]
 800d1f0:	4613      	mov	r3, r2
 800d1f2:	009b      	lsls	r3, r3, #2
 800d1f4:	4413      	add	r3, r2
 800d1f6:	009b      	lsls	r3, r3, #2
 800d1f8:	440b      	add	r3, r1
 800d1fa:	3318      	adds	r3, #24
 800d1fc:	681a      	ldr	r2, [r3, #0]
 800d1fe:	78f9      	ldrb	r1, [r7, #3]
 800d200:	68f8      	ldr	r0, [r7, #12]
 800d202:	460b      	mov	r3, r1
 800d204:	00db      	lsls	r3, r3, #3
 800d206:	440b      	add	r3, r1
 800d208:	009b      	lsls	r3, r3, #2
 800d20a:	4403      	add	r3, r0
 800d20c:	3348      	adds	r3, #72	; 0x48
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	fbb2 f1f3 	udiv	r1, r2, r3
 800d214:	fb01 f303 	mul.w	r3, r1, r3
 800d218:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d110      	bne.n	800d240 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800d21e:	78fa      	ldrb	r2, [r7, #3]
 800d220:	6879      	ldr	r1, [r7, #4]
 800d222:	4613      	mov	r3, r2
 800d224:	009b      	lsls	r3, r3, #2
 800d226:	4413      	add	r3, r2
 800d228:	009b      	lsls	r3, r3, #2
 800d22a:	440b      	add	r3, r1
 800d22c:	3318      	adds	r3, #24
 800d22e:	2200      	movs	r2, #0
 800d230:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800d232:	78f9      	ldrb	r1, [r7, #3]
 800d234:	2300      	movs	r3, #0
 800d236:	2200      	movs	r2, #0
 800d238:	6878      	ldr	r0, [r7, #4]
 800d23a:	f004 fd8b 	bl	8011d54 <USBD_LL_Transmit>
 800d23e:	e015      	b.n	800d26c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800d240:	68bb      	ldr	r3, [r7, #8]
 800d242:	2200      	movs	r2, #0
 800d244:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d24e:	691b      	ldr	r3, [r3, #16]
 800d250:	2b00      	cmp	r3, #0
 800d252:	d00b      	beq.n	800d26c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d25a:	691b      	ldr	r3, [r3, #16]
 800d25c:	68ba      	ldr	r2, [r7, #8]
 800d25e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800d262:	68ba      	ldr	r2, [r7, #8]
 800d264:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800d268:	78fa      	ldrb	r2, [r7, #3]
 800d26a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800d26c:	2300      	movs	r3, #0
}
 800d26e:	4618      	mov	r0, r3
 800d270:	3710      	adds	r7, #16
 800d272:	46bd      	mov	sp, r7
 800d274:	bd80      	pop	{r7, pc}

0800d276 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d276:	b580      	push	{r7, lr}
 800d278:	b084      	sub	sp, #16
 800d27a:	af00      	add	r7, sp, #0
 800d27c:	6078      	str	r0, [r7, #4]
 800d27e:	460b      	mov	r3, r1
 800d280:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d288:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d290:	2b00      	cmp	r3, #0
 800d292:	d101      	bne.n	800d298 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d294:	2303      	movs	r3, #3
 800d296:	e015      	b.n	800d2c4 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800d298:	78fb      	ldrb	r3, [r7, #3]
 800d29a:	4619      	mov	r1, r3
 800d29c:	6878      	ldr	r0, [r7, #4]
 800d29e:	f004 fdc9 	bl	8011e34 <USBD_LL_GetRxDataSize>
 800d2a2:	4602      	mov	r2, r0
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d2b0:	68db      	ldr	r3, [r3, #12]
 800d2b2:	68fa      	ldr	r2, [r7, #12]
 800d2b4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800d2b8:	68fa      	ldr	r2, [r7, #12]
 800d2ba:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800d2be:	4611      	mov	r1, r2
 800d2c0:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800d2c2:	2300      	movs	r3, #0
}
 800d2c4:	4618      	mov	r0, r3
 800d2c6:	3710      	adds	r7, #16
 800d2c8:	46bd      	mov	sp, r7
 800d2ca:	bd80      	pop	{r7, pc}

0800d2cc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800d2cc:	b580      	push	{r7, lr}
 800d2ce:	b084      	sub	sp, #16
 800d2d0:	af00      	add	r7, sp, #0
 800d2d2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d2da:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d101      	bne.n	800d2e6 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800d2e2:	2303      	movs	r3, #3
 800d2e4:	e01b      	b.n	800d31e <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d015      	beq.n	800d31c <USBD_CDC_EP0_RxReady+0x50>
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800d2f6:	2bff      	cmp	r3, #255	; 0xff
 800d2f8:	d010      	beq.n	800d31c <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d300:	689b      	ldr	r3, [r3, #8]
 800d302:	68fa      	ldr	r2, [r7, #12]
 800d304:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800d308:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800d30a:	68fa      	ldr	r2, [r7, #12]
 800d30c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800d310:	b292      	uxth	r2, r2
 800d312:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	22ff      	movs	r2, #255	; 0xff
 800d318:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800d31c:	2300      	movs	r3, #0
}
 800d31e:	4618      	mov	r0, r3
 800d320:	3710      	adds	r7, #16
 800d322:	46bd      	mov	sp, r7
 800d324:	bd80      	pop	{r7, pc}
	...

0800d328 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800d328:	b480      	push	{r7}
 800d32a:	b083      	sub	sp, #12
 800d32c:	af00      	add	r7, sp, #0
 800d32e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	2243      	movs	r2, #67	; 0x43
 800d334:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800d336:	4b03      	ldr	r3, [pc, #12]	; (800d344 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800d338:	4618      	mov	r0, r3
 800d33a:	370c      	adds	r7, #12
 800d33c:	46bd      	mov	sp, r7
 800d33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d342:	4770      	bx	lr
 800d344:	20000218 	.word	0x20000218

0800d348 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800d348:	b480      	push	{r7}
 800d34a:	b083      	sub	sp, #12
 800d34c:	af00      	add	r7, sp, #0
 800d34e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	2243      	movs	r2, #67	; 0x43
 800d354:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800d356:	4b03      	ldr	r3, [pc, #12]	; (800d364 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800d358:	4618      	mov	r0, r3
 800d35a:	370c      	adds	r7, #12
 800d35c:	46bd      	mov	sp, r7
 800d35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d362:	4770      	bx	lr
 800d364:	200001d4 	.word	0x200001d4

0800d368 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800d368:	b480      	push	{r7}
 800d36a:	b083      	sub	sp, #12
 800d36c:	af00      	add	r7, sp, #0
 800d36e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	2243      	movs	r2, #67	; 0x43
 800d374:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800d376:	4b03      	ldr	r3, [pc, #12]	; (800d384 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800d378:	4618      	mov	r0, r3
 800d37a:	370c      	adds	r7, #12
 800d37c:	46bd      	mov	sp, r7
 800d37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d382:	4770      	bx	lr
 800d384:	2000025c 	.word	0x2000025c

0800d388 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800d388:	b480      	push	{r7}
 800d38a:	b083      	sub	sp, #12
 800d38c:	af00      	add	r7, sp, #0
 800d38e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	220a      	movs	r2, #10
 800d394:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800d396:	4b03      	ldr	r3, [pc, #12]	; (800d3a4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800d398:	4618      	mov	r0, r3
 800d39a:	370c      	adds	r7, #12
 800d39c:	46bd      	mov	sp, r7
 800d39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3a2:	4770      	bx	lr
 800d3a4:	20000190 	.word	0x20000190

0800d3a8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800d3a8:	b480      	push	{r7}
 800d3aa:	b083      	sub	sp, #12
 800d3ac:	af00      	add	r7, sp, #0
 800d3ae:	6078      	str	r0, [r7, #4]
 800d3b0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800d3b2:	683b      	ldr	r3, [r7, #0]
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d101      	bne.n	800d3bc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800d3b8:	2303      	movs	r3, #3
 800d3ba:	e004      	b.n	800d3c6 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	683a      	ldr	r2, [r7, #0]
 800d3c0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800d3c4:	2300      	movs	r3, #0
}
 800d3c6:	4618      	mov	r0, r3
 800d3c8:	370c      	adds	r7, #12
 800d3ca:	46bd      	mov	sp, r7
 800d3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3d0:	4770      	bx	lr

0800d3d2 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800d3d2:	b480      	push	{r7}
 800d3d4:	b087      	sub	sp, #28
 800d3d6:	af00      	add	r7, sp, #0
 800d3d8:	60f8      	str	r0, [r7, #12]
 800d3da:	60b9      	str	r1, [r7, #8]
 800d3dc:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d3e4:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800d3e6:	697b      	ldr	r3, [r7, #20]
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d101      	bne.n	800d3f0 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800d3ec:	2303      	movs	r3, #3
 800d3ee:	e008      	b.n	800d402 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800d3f0:	697b      	ldr	r3, [r7, #20]
 800d3f2:	68ba      	ldr	r2, [r7, #8]
 800d3f4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800d3f8:	697b      	ldr	r3, [r7, #20]
 800d3fa:	687a      	ldr	r2, [r7, #4]
 800d3fc:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800d400:	2300      	movs	r3, #0
}
 800d402:	4618      	mov	r0, r3
 800d404:	371c      	adds	r7, #28
 800d406:	46bd      	mov	sp, r7
 800d408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d40c:	4770      	bx	lr

0800d40e <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800d40e:	b480      	push	{r7}
 800d410:	b085      	sub	sp, #20
 800d412:	af00      	add	r7, sp, #0
 800d414:	6078      	str	r0, [r7, #4]
 800d416:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d41e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	2b00      	cmp	r3, #0
 800d424:	d101      	bne.n	800d42a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800d426:	2303      	movs	r3, #3
 800d428:	e004      	b.n	800d434 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	683a      	ldr	r2, [r7, #0]
 800d42e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800d432:	2300      	movs	r3, #0
}
 800d434:	4618      	mov	r0, r3
 800d436:	3714      	adds	r7, #20
 800d438:	46bd      	mov	sp, r7
 800d43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d43e:	4770      	bx	lr

0800d440 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800d440:	b580      	push	{r7, lr}
 800d442:	b084      	sub	sp, #16
 800d444:	af00      	add	r7, sp, #0
 800d446:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d44e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d456:	2b00      	cmp	r3, #0
 800d458:	d101      	bne.n	800d45e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800d45a:	2303      	movs	r3, #3
 800d45c:	e016      	b.n	800d48c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	7c1b      	ldrb	r3, [r3, #16]
 800d462:	2b00      	cmp	r3, #0
 800d464:	d109      	bne.n	800d47a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d46c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d470:	2101      	movs	r1, #1
 800d472:	6878      	ldr	r0, [r7, #4]
 800d474:	f004 fca6 	bl	8011dc4 <USBD_LL_PrepareReceive>
 800d478:	e007      	b.n	800d48a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d480:	2340      	movs	r3, #64	; 0x40
 800d482:	2101      	movs	r1, #1
 800d484:	6878      	ldr	r0, [r7, #4]
 800d486:	f004 fc9d 	bl	8011dc4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d48a:	2300      	movs	r3, #0
}
 800d48c:	4618      	mov	r0, r3
 800d48e:	3710      	adds	r7, #16
 800d490:	46bd      	mov	sp, r7
 800d492:	bd80      	pop	{r7, pc}

0800d494 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800d494:	b580      	push	{r7, lr}
 800d496:	b086      	sub	sp, #24
 800d498:	af00      	add	r7, sp, #0
 800d49a:	60f8      	str	r0, [r7, #12]
 800d49c:	60b9      	str	r1, [r7, #8]
 800d49e:	4613      	mov	r3, r2
 800d4a0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d101      	bne.n	800d4ac <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800d4a8:	2303      	movs	r3, #3
 800d4aa:	e01f      	b.n	800d4ec <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	2200      	movs	r2, #0
 800d4b0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	2200      	movs	r2, #0
 800d4b8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	2200      	movs	r2, #0
 800d4c0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800d4c4:	68bb      	ldr	r3, [r7, #8]
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d003      	beq.n	800d4d2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	68ba      	ldr	r2, [r7, #8]
 800d4ce:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	2201      	movs	r2, #1
 800d4d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	79fa      	ldrb	r2, [r7, #7]
 800d4de:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800d4e0:	68f8      	ldr	r0, [r7, #12]
 800d4e2:	f004 fa79 	bl	80119d8 <USBD_LL_Init>
 800d4e6:	4603      	mov	r3, r0
 800d4e8:	75fb      	strb	r3, [r7, #23]

  return ret;
 800d4ea:	7dfb      	ldrb	r3, [r7, #23]
}
 800d4ec:	4618      	mov	r0, r3
 800d4ee:	3718      	adds	r7, #24
 800d4f0:	46bd      	mov	sp, r7
 800d4f2:	bd80      	pop	{r7, pc}

0800d4f4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800d4f4:	b580      	push	{r7, lr}
 800d4f6:	b084      	sub	sp, #16
 800d4f8:	af00      	add	r7, sp, #0
 800d4fa:	6078      	str	r0, [r7, #4]
 800d4fc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d4fe:	2300      	movs	r3, #0
 800d500:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800d502:	683b      	ldr	r3, [r7, #0]
 800d504:	2b00      	cmp	r3, #0
 800d506:	d101      	bne.n	800d50c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800d508:	2303      	movs	r3, #3
 800d50a:	e016      	b.n	800d53a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	683a      	ldr	r2, [r7, #0]
 800d510:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d51a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d00b      	beq.n	800d538 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d528:	f107 020e 	add.w	r2, r7, #14
 800d52c:	4610      	mov	r0, r2
 800d52e:	4798      	blx	r3
 800d530:	4602      	mov	r2, r0
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800d538:	2300      	movs	r3, #0
}
 800d53a:	4618      	mov	r0, r3
 800d53c:	3710      	adds	r7, #16
 800d53e:	46bd      	mov	sp, r7
 800d540:	bd80      	pop	{r7, pc}

0800d542 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800d542:	b580      	push	{r7, lr}
 800d544:	b082      	sub	sp, #8
 800d546:	af00      	add	r7, sp, #0
 800d548:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800d54a:	6878      	ldr	r0, [r7, #4]
 800d54c:	f004 fa8e 	bl	8011a6c <USBD_LL_Start>
 800d550:	4603      	mov	r3, r0
}
 800d552:	4618      	mov	r0, r3
 800d554:	3708      	adds	r7, #8
 800d556:	46bd      	mov	sp, r7
 800d558:	bd80      	pop	{r7, pc}

0800d55a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800d55a:	b480      	push	{r7}
 800d55c:	b083      	sub	sp, #12
 800d55e:	af00      	add	r7, sp, #0
 800d560:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d562:	2300      	movs	r3, #0
}
 800d564:	4618      	mov	r0, r3
 800d566:	370c      	adds	r7, #12
 800d568:	46bd      	mov	sp, r7
 800d56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d56e:	4770      	bx	lr

0800d570 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d570:	b580      	push	{r7, lr}
 800d572:	b084      	sub	sp, #16
 800d574:	af00      	add	r7, sp, #0
 800d576:	6078      	str	r0, [r7, #4]
 800d578:	460b      	mov	r3, r1
 800d57a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800d57c:	2303      	movs	r3, #3
 800d57e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d586:	2b00      	cmp	r3, #0
 800d588:	d009      	beq.n	800d59e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	78fa      	ldrb	r2, [r7, #3]
 800d594:	4611      	mov	r1, r2
 800d596:	6878      	ldr	r0, [r7, #4]
 800d598:	4798      	blx	r3
 800d59a:	4603      	mov	r3, r0
 800d59c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800d59e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5a0:	4618      	mov	r0, r3
 800d5a2:	3710      	adds	r7, #16
 800d5a4:	46bd      	mov	sp, r7
 800d5a6:	bd80      	pop	{r7, pc}

0800d5a8 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d5a8:	b580      	push	{r7, lr}
 800d5aa:	b082      	sub	sp, #8
 800d5ac:	af00      	add	r7, sp, #0
 800d5ae:	6078      	str	r0, [r7, #4]
 800d5b0:	460b      	mov	r3, r1
 800d5b2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d007      	beq.n	800d5ce <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d5c4:	685b      	ldr	r3, [r3, #4]
 800d5c6:	78fa      	ldrb	r2, [r7, #3]
 800d5c8:	4611      	mov	r1, r2
 800d5ca:	6878      	ldr	r0, [r7, #4]
 800d5cc:	4798      	blx	r3
  }

  return USBD_OK;
 800d5ce:	2300      	movs	r3, #0
}
 800d5d0:	4618      	mov	r0, r3
 800d5d2:	3708      	adds	r7, #8
 800d5d4:	46bd      	mov	sp, r7
 800d5d6:	bd80      	pop	{r7, pc}

0800d5d8 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800d5d8:	b580      	push	{r7, lr}
 800d5da:	b084      	sub	sp, #16
 800d5dc:	af00      	add	r7, sp, #0
 800d5de:	6078      	str	r0, [r7, #4]
 800d5e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d5e8:	6839      	ldr	r1, [r7, #0]
 800d5ea:	4618      	mov	r0, r3
 800d5ec:	f000 ffba 	bl	800e564 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	2201      	movs	r2, #1
 800d5f4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800d5fe:	461a      	mov	r2, r3
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d60c:	f003 031f 	and.w	r3, r3, #31
 800d610:	2b02      	cmp	r3, #2
 800d612:	d01a      	beq.n	800d64a <USBD_LL_SetupStage+0x72>
 800d614:	2b02      	cmp	r3, #2
 800d616:	d822      	bhi.n	800d65e <USBD_LL_SetupStage+0x86>
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d002      	beq.n	800d622 <USBD_LL_SetupStage+0x4a>
 800d61c:	2b01      	cmp	r3, #1
 800d61e:	d00a      	beq.n	800d636 <USBD_LL_SetupStage+0x5e>
 800d620:	e01d      	b.n	800d65e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d628:	4619      	mov	r1, r3
 800d62a:	6878      	ldr	r0, [r7, #4]
 800d62c:	f000 fa62 	bl	800daf4 <USBD_StdDevReq>
 800d630:	4603      	mov	r3, r0
 800d632:	73fb      	strb	r3, [r7, #15]
      break;
 800d634:	e020      	b.n	800d678 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d63c:	4619      	mov	r1, r3
 800d63e:	6878      	ldr	r0, [r7, #4]
 800d640:	f000 fac6 	bl	800dbd0 <USBD_StdItfReq>
 800d644:	4603      	mov	r3, r0
 800d646:	73fb      	strb	r3, [r7, #15]
      break;
 800d648:	e016      	b.n	800d678 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d650:	4619      	mov	r1, r3
 800d652:	6878      	ldr	r0, [r7, #4]
 800d654:	f000 fb05 	bl	800dc62 <USBD_StdEPReq>
 800d658:	4603      	mov	r3, r0
 800d65a:	73fb      	strb	r3, [r7, #15]
      break;
 800d65c:	e00c      	b.n	800d678 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d664:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d668:	b2db      	uxtb	r3, r3
 800d66a:	4619      	mov	r1, r3
 800d66c:	6878      	ldr	r0, [r7, #4]
 800d66e:	f004 faa3 	bl	8011bb8 <USBD_LL_StallEP>
 800d672:	4603      	mov	r3, r0
 800d674:	73fb      	strb	r3, [r7, #15]
      break;
 800d676:	bf00      	nop
  }

  return ret;
 800d678:	7bfb      	ldrb	r3, [r7, #15]
}
 800d67a:	4618      	mov	r0, r3
 800d67c:	3710      	adds	r7, #16
 800d67e:	46bd      	mov	sp, r7
 800d680:	bd80      	pop	{r7, pc}

0800d682 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800d682:	b580      	push	{r7, lr}
 800d684:	b086      	sub	sp, #24
 800d686:	af00      	add	r7, sp, #0
 800d688:	60f8      	str	r0, [r7, #12]
 800d68a:	460b      	mov	r3, r1
 800d68c:	607a      	str	r2, [r7, #4]
 800d68e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800d690:	7afb      	ldrb	r3, [r7, #11]
 800d692:	2b00      	cmp	r3, #0
 800d694:	d138      	bne.n	800d708 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800d69c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d6a4:	2b03      	cmp	r3, #3
 800d6a6:	d14a      	bne.n	800d73e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800d6a8:	693b      	ldr	r3, [r7, #16]
 800d6aa:	689a      	ldr	r2, [r3, #8]
 800d6ac:	693b      	ldr	r3, [r7, #16]
 800d6ae:	68db      	ldr	r3, [r3, #12]
 800d6b0:	429a      	cmp	r2, r3
 800d6b2:	d913      	bls.n	800d6dc <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d6b4:	693b      	ldr	r3, [r7, #16]
 800d6b6:	689a      	ldr	r2, [r3, #8]
 800d6b8:	693b      	ldr	r3, [r7, #16]
 800d6ba:	68db      	ldr	r3, [r3, #12]
 800d6bc:	1ad2      	subs	r2, r2, r3
 800d6be:	693b      	ldr	r3, [r7, #16]
 800d6c0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800d6c2:	693b      	ldr	r3, [r7, #16]
 800d6c4:	68da      	ldr	r2, [r3, #12]
 800d6c6:	693b      	ldr	r3, [r7, #16]
 800d6c8:	689b      	ldr	r3, [r3, #8]
 800d6ca:	4293      	cmp	r3, r2
 800d6cc:	bf28      	it	cs
 800d6ce:	4613      	movcs	r3, r2
 800d6d0:	461a      	mov	r2, r3
 800d6d2:	6879      	ldr	r1, [r7, #4]
 800d6d4:	68f8      	ldr	r0, [r7, #12]
 800d6d6:	f001 f839 	bl	800e74c <USBD_CtlContinueRx>
 800d6da:	e030      	b.n	800d73e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d6e2:	b2db      	uxtb	r3, r3
 800d6e4:	2b03      	cmp	r3, #3
 800d6e6:	d10b      	bne.n	800d700 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d6ee:	691b      	ldr	r3, [r3, #16]
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d005      	beq.n	800d700 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d6fa:	691b      	ldr	r3, [r3, #16]
 800d6fc:	68f8      	ldr	r0, [r7, #12]
 800d6fe:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800d700:	68f8      	ldr	r0, [r7, #12]
 800d702:	f001 f834 	bl	800e76e <USBD_CtlSendStatus>
 800d706:	e01a      	b.n	800d73e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d70e:	b2db      	uxtb	r3, r3
 800d710:	2b03      	cmp	r3, #3
 800d712:	d114      	bne.n	800d73e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d71a:	699b      	ldr	r3, [r3, #24]
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d00e      	beq.n	800d73e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d726:	699b      	ldr	r3, [r3, #24]
 800d728:	7afa      	ldrb	r2, [r7, #11]
 800d72a:	4611      	mov	r1, r2
 800d72c:	68f8      	ldr	r0, [r7, #12]
 800d72e:	4798      	blx	r3
 800d730:	4603      	mov	r3, r0
 800d732:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800d734:	7dfb      	ldrb	r3, [r7, #23]
 800d736:	2b00      	cmp	r3, #0
 800d738:	d001      	beq.n	800d73e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800d73a:	7dfb      	ldrb	r3, [r7, #23]
 800d73c:	e000      	b.n	800d740 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800d73e:	2300      	movs	r3, #0
}
 800d740:	4618      	mov	r0, r3
 800d742:	3718      	adds	r7, #24
 800d744:	46bd      	mov	sp, r7
 800d746:	bd80      	pop	{r7, pc}

0800d748 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800d748:	b580      	push	{r7, lr}
 800d74a:	b086      	sub	sp, #24
 800d74c:	af00      	add	r7, sp, #0
 800d74e:	60f8      	str	r0, [r7, #12]
 800d750:	460b      	mov	r3, r1
 800d752:	607a      	str	r2, [r7, #4]
 800d754:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800d756:	7afb      	ldrb	r3, [r7, #11]
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d16b      	bne.n	800d834 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800d75c:	68fb      	ldr	r3, [r7, #12]
 800d75e:	3314      	adds	r3, #20
 800d760:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d768:	2b02      	cmp	r3, #2
 800d76a:	d156      	bne.n	800d81a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800d76c:	693b      	ldr	r3, [r7, #16]
 800d76e:	689a      	ldr	r2, [r3, #8]
 800d770:	693b      	ldr	r3, [r7, #16]
 800d772:	68db      	ldr	r3, [r3, #12]
 800d774:	429a      	cmp	r2, r3
 800d776:	d914      	bls.n	800d7a2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d778:	693b      	ldr	r3, [r7, #16]
 800d77a:	689a      	ldr	r2, [r3, #8]
 800d77c:	693b      	ldr	r3, [r7, #16]
 800d77e:	68db      	ldr	r3, [r3, #12]
 800d780:	1ad2      	subs	r2, r2, r3
 800d782:	693b      	ldr	r3, [r7, #16]
 800d784:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800d786:	693b      	ldr	r3, [r7, #16]
 800d788:	689b      	ldr	r3, [r3, #8]
 800d78a:	461a      	mov	r2, r3
 800d78c:	6879      	ldr	r1, [r7, #4]
 800d78e:	68f8      	ldr	r0, [r7, #12]
 800d790:	f000 ffae 	bl	800e6f0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d794:	2300      	movs	r3, #0
 800d796:	2200      	movs	r2, #0
 800d798:	2100      	movs	r1, #0
 800d79a:	68f8      	ldr	r0, [r7, #12]
 800d79c:	f004 fb12 	bl	8011dc4 <USBD_LL_PrepareReceive>
 800d7a0:	e03b      	b.n	800d81a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800d7a2:	693b      	ldr	r3, [r7, #16]
 800d7a4:	68da      	ldr	r2, [r3, #12]
 800d7a6:	693b      	ldr	r3, [r7, #16]
 800d7a8:	689b      	ldr	r3, [r3, #8]
 800d7aa:	429a      	cmp	r2, r3
 800d7ac:	d11c      	bne.n	800d7e8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800d7ae:	693b      	ldr	r3, [r7, #16]
 800d7b0:	685a      	ldr	r2, [r3, #4]
 800d7b2:	693b      	ldr	r3, [r7, #16]
 800d7b4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800d7b6:	429a      	cmp	r2, r3
 800d7b8:	d316      	bcc.n	800d7e8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800d7ba:	693b      	ldr	r3, [r7, #16]
 800d7bc:	685a      	ldr	r2, [r3, #4]
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800d7c4:	429a      	cmp	r2, r3
 800d7c6:	d20f      	bcs.n	800d7e8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800d7c8:	2200      	movs	r2, #0
 800d7ca:	2100      	movs	r1, #0
 800d7cc:	68f8      	ldr	r0, [r7, #12]
 800d7ce:	f000 ff8f 	bl	800e6f0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800d7d2:	68fb      	ldr	r3, [r7, #12]
 800d7d4:	2200      	movs	r2, #0
 800d7d6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d7da:	2300      	movs	r3, #0
 800d7dc:	2200      	movs	r2, #0
 800d7de:	2100      	movs	r1, #0
 800d7e0:	68f8      	ldr	r0, [r7, #12]
 800d7e2:	f004 faef 	bl	8011dc4 <USBD_LL_PrepareReceive>
 800d7e6:	e018      	b.n	800d81a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d7ee:	b2db      	uxtb	r3, r3
 800d7f0:	2b03      	cmp	r3, #3
 800d7f2:	d10b      	bne.n	800d80c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d7fa:	68db      	ldr	r3, [r3, #12]
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d005      	beq.n	800d80c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800d800:	68fb      	ldr	r3, [r7, #12]
 800d802:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d806:	68db      	ldr	r3, [r3, #12]
 800d808:	68f8      	ldr	r0, [r7, #12]
 800d80a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800d80c:	2180      	movs	r1, #128	; 0x80
 800d80e:	68f8      	ldr	r0, [r7, #12]
 800d810:	f004 f9d2 	bl	8011bb8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800d814:	68f8      	ldr	r0, [r7, #12]
 800d816:	f000 ffbd 	bl	800e794 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800d81a:	68fb      	ldr	r3, [r7, #12]
 800d81c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800d820:	2b01      	cmp	r3, #1
 800d822:	d122      	bne.n	800d86a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800d824:	68f8      	ldr	r0, [r7, #12]
 800d826:	f7ff fe98 	bl	800d55a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	2200      	movs	r2, #0
 800d82e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800d832:	e01a      	b.n	800d86a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d83a:	b2db      	uxtb	r3, r3
 800d83c:	2b03      	cmp	r3, #3
 800d83e:	d114      	bne.n	800d86a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d846:	695b      	ldr	r3, [r3, #20]
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d00e      	beq.n	800d86a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d852:	695b      	ldr	r3, [r3, #20]
 800d854:	7afa      	ldrb	r2, [r7, #11]
 800d856:	4611      	mov	r1, r2
 800d858:	68f8      	ldr	r0, [r7, #12]
 800d85a:	4798      	blx	r3
 800d85c:	4603      	mov	r3, r0
 800d85e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800d860:	7dfb      	ldrb	r3, [r7, #23]
 800d862:	2b00      	cmp	r3, #0
 800d864:	d001      	beq.n	800d86a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800d866:	7dfb      	ldrb	r3, [r7, #23]
 800d868:	e000      	b.n	800d86c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800d86a:	2300      	movs	r3, #0
}
 800d86c:	4618      	mov	r0, r3
 800d86e:	3718      	adds	r7, #24
 800d870:	46bd      	mov	sp, r7
 800d872:	bd80      	pop	{r7, pc}

0800d874 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800d874:	b580      	push	{r7, lr}
 800d876:	b082      	sub	sp, #8
 800d878:	af00      	add	r7, sp, #0
 800d87a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	2201      	movs	r2, #1
 800d880:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	2200      	movs	r2, #0
 800d888:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	2200      	movs	r2, #0
 800d890:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	2200      	movs	r2, #0
 800d896:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d101      	bne.n	800d8a8 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800d8a4:	2303      	movs	r3, #3
 800d8a6:	e02f      	b.n	800d908 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d00f      	beq.n	800d8d2 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d8b8:	685b      	ldr	r3, [r3, #4]
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d009      	beq.n	800d8d2 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d8c4:	685b      	ldr	r3, [r3, #4]
 800d8c6:	687a      	ldr	r2, [r7, #4]
 800d8c8:	6852      	ldr	r2, [r2, #4]
 800d8ca:	b2d2      	uxtb	r2, r2
 800d8cc:	4611      	mov	r1, r2
 800d8ce:	6878      	ldr	r0, [r7, #4]
 800d8d0:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d8d2:	2340      	movs	r3, #64	; 0x40
 800d8d4:	2200      	movs	r2, #0
 800d8d6:	2100      	movs	r1, #0
 800d8d8:	6878      	ldr	r0, [r7, #4]
 800d8da:	f004 f8f9 	bl	8011ad0 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	2201      	movs	r2, #1
 800d8e2:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	2240      	movs	r2, #64	; 0x40
 800d8ea:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d8ee:	2340      	movs	r3, #64	; 0x40
 800d8f0:	2200      	movs	r2, #0
 800d8f2:	2180      	movs	r1, #128	; 0x80
 800d8f4:	6878      	ldr	r0, [r7, #4]
 800d8f6:	f004 f8eb 	bl	8011ad0 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	2201      	movs	r2, #1
 800d8fe:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	2240      	movs	r2, #64	; 0x40
 800d904:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800d906:	2300      	movs	r3, #0
}
 800d908:	4618      	mov	r0, r3
 800d90a:	3708      	adds	r7, #8
 800d90c:	46bd      	mov	sp, r7
 800d90e:	bd80      	pop	{r7, pc}

0800d910 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800d910:	b480      	push	{r7}
 800d912:	b083      	sub	sp, #12
 800d914:	af00      	add	r7, sp, #0
 800d916:	6078      	str	r0, [r7, #4]
 800d918:	460b      	mov	r3, r1
 800d91a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	78fa      	ldrb	r2, [r7, #3]
 800d920:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800d922:	2300      	movs	r3, #0
}
 800d924:	4618      	mov	r0, r3
 800d926:	370c      	adds	r7, #12
 800d928:	46bd      	mov	sp, r7
 800d92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d92e:	4770      	bx	lr

0800d930 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800d930:	b480      	push	{r7}
 800d932:	b083      	sub	sp, #12
 800d934:	af00      	add	r7, sp, #0
 800d936:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d93e:	b2da      	uxtb	r2, r3
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	2204      	movs	r2, #4
 800d94a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800d94e:	2300      	movs	r3, #0
}
 800d950:	4618      	mov	r0, r3
 800d952:	370c      	adds	r7, #12
 800d954:	46bd      	mov	sp, r7
 800d956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d95a:	4770      	bx	lr

0800d95c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800d95c:	b480      	push	{r7}
 800d95e:	b083      	sub	sp, #12
 800d960:	af00      	add	r7, sp, #0
 800d962:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d96a:	b2db      	uxtb	r3, r3
 800d96c:	2b04      	cmp	r3, #4
 800d96e:	d106      	bne.n	800d97e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800d976:	b2da      	uxtb	r2, r3
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800d97e:	2300      	movs	r3, #0
}
 800d980:	4618      	mov	r0, r3
 800d982:	370c      	adds	r7, #12
 800d984:	46bd      	mov	sp, r7
 800d986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d98a:	4770      	bx	lr

0800d98c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800d98c:	b580      	push	{r7, lr}
 800d98e:	b082      	sub	sp, #8
 800d990:	af00      	add	r7, sp, #0
 800d992:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d101      	bne.n	800d9a2 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800d99e:	2303      	movs	r3, #3
 800d9a0:	e012      	b.n	800d9c8 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d9a8:	b2db      	uxtb	r3, r3
 800d9aa:	2b03      	cmp	r3, #3
 800d9ac:	d10b      	bne.n	800d9c6 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d9b4:	69db      	ldr	r3, [r3, #28]
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d005      	beq.n	800d9c6 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d9c0:	69db      	ldr	r3, [r3, #28]
 800d9c2:	6878      	ldr	r0, [r7, #4]
 800d9c4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d9c6:	2300      	movs	r3, #0
}
 800d9c8:	4618      	mov	r0, r3
 800d9ca:	3708      	adds	r7, #8
 800d9cc:	46bd      	mov	sp, r7
 800d9ce:	bd80      	pop	{r7, pc}

0800d9d0 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800d9d0:	b580      	push	{r7, lr}
 800d9d2:	b082      	sub	sp, #8
 800d9d4:	af00      	add	r7, sp, #0
 800d9d6:	6078      	str	r0, [r7, #4]
 800d9d8:	460b      	mov	r3, r1
 800d9da:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d101      	bne.n	800d9ea <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800d9e6:	2303      	movs	r3, #3
 800d9e8:	e014      	b.n	800da14 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d9f0:	b2db      	uxtb	r3, r3
 800d9f2:	2b03      	cmp	r3, #3
 800d9f4:	d10d      	bne.n	800da12 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d9fc:	6a1b      	ldr	r3, [r3, #32]
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d007      	beq.n	800da12 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800da08:	6a1b      	ldr	r3, [r3, #32]
 800da0a:	78fa      	ldrb	r2, [r7, #3]
 800da0c:	4611      	mov	r1, r2
 800da0e:	6878      	ldr	r0, [r7, #4]
 800da10:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800da12:	2300      	movs	r3, #0
}
 800da14:	4618      	mov	r0, r3
 800da16:	3708      	adds	r7, #8
 800da18:	46bd      	mov	sp, r7
 800da1a:	bd80      	pop	{r7, pc}

0800da1c <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800da1c:	b580      	push	{r7, lr}
 800da1e:	b082      	sub	sp, #8
 800da20:	af00      	add	r7, sp, #0
 800da22:	6078      	str	r0, [r7, #4]
 800da24:	460b      	mov	r3, r1
 800da26:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d101      	bne.n	800da36 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800da32:	2303      	movs	r3, #3
 800da34:	e014      	b.n	800da60 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800da3c:	b2db      	uxtb	r3, r3
 800da3e:	2b03      	cmp	r3, #3
 800da40:	d10d      	bne.n	800da5e <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800da48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d007      	beq.n	800da5e <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800da54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da56:	78fa      	ldrb	r2, [r7, #3]
 800da58:	4611      	mov	r1, r2
 800da5a:	6878      	ldr	r0, [r7, #4]
 800da5c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800da5e:	2300      	movs	r3, #0
}
 800da60:	4618      	mov	r0, r3
 800da62:	3708      	adds	r7, #8
 800da64:	46bd      	mov	sp, r7
 800da66:	bd80      	pop	{r7, pc}

0800da68 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800da68:	b480      	push	{r7}
 800da6a:	b083      	sub	sp, #12
 800da6c:	af00      	add	r7, sp, #0
 800da6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800da70:	2300      	movs	r3, #0
}
 800da72:	4618      	mov	r0, r3
 800da74:	370c      	adds	r7, #12
 800da76:	46bd      	mov	sp, r7
 800da78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da7c:	4770      	bx	lr

0800da7e <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800da7e:	b580      	push	{r7, lr}
 800da80:	b082      	sub	sp, #8
 800da82:	af00      	add	r7, sp, #0
 800da84:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	2201      	movs	r2, #1
 800da8a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800da94:	2b00      	cmp	r3, #0
 800da96:	d009      	beq.n	800daac <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800da9e:	685b      	ldr	r3, [r3, #4]
 800daa0:	687a      	ldr	r2, [r7, #4]
 800daa2:	6852      	ldr	r2, [r2, #4]
 800daa4:	b2d2      	uxtb	r2, r2
 800daa6:	4611      	mov	r1, r2
 800daa8:	6878      	ldr	r0, [r7, #4]
 800daaa:	4798      	blx	r3
  }

  return USBD_OK;
 800daac:	2300      	movs	r3, #0
}
 800daae:	4618      	mov	r0, r3
 800dab0:	3708      	adds	r7, #8
 800dab2:	46bd      	mov	sp, r7
 800dab4:	bd80      	pop	{r7, pc}

0800dab6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800dab6:	b480      	push	{r7}
 800dab8:	b087      	sub	sp, #28
 800daba:	af00      	add	r7, sp, #0
 800dabc:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800dac2:	697b      	ldr	r3, [r7, #20]
 800dac4:	781b      	ldrb	r3, [r3, #0]
 800dac6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800dac8:	697b      	ldr	r3, [r7, #20]
 800daca:	3301      	adds	r3, #1
 800dacc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800dace:	697b      	ldr	r3, [r7, #20]
 800dad0:	781b      	ldrb	r3, [r3, #0]
 800dad2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800dad4:	8a3b      	ldrh	r3, [r7, #16]
 800dad6:	021b      	lsls	r3, r3, #8
 800dad8:	b21a      	sxth	r2, r3
 800dada:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800dade:	4313      	orrs	r3, r2
 800dae0:	b21b      	sxth	r3, r3
 800dae2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800dae4:	89fb      	ldrh	r3, [r7, #14]
}
 800dae6:	4618      	mov	r0, r3
 800dae8:	371c      	adds	r7, #28
 800daea:	46bd      	mov	sp, r7
 800daec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daf0:	4770      	bx	lr
	...

0800daf4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800daf4:	b580      	push	{r7, lr}
 800daf6:	b084      	sub	sp, #16
 800daf8:	af00      	add	r7, sp, #0
 800dafa:	6078      	str	r0, [r7, #4]
 800dafc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800dafe:	2300      	movs	r3, #0
 800db00:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800db02:	683b      	ldr	r3, [r7, #0]
 800db04:	781b      	ldrb	r3, [r3, #0]
 800db06:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800db0a:	2b40      	cmp	r3, #64	; 0x40
 800db0c:	d005      	beq.n	800db1a <USBD_StdDevReq+0x26>
 800db0e:	2b40      	cmp	r3, #64	; 0x40
 800db10:	d853      	bhi.n	800dbba <USBD_StdDevReq+0xc6>
 800db12:	2b00      	cmp	r3, #0
 800db14:	d00b      	beq.n	800db2e <USBD_StdDevReq+0x3a>
 800db16:	2b20      	cmp	r3, #32
 800db18:	d14f      	bne.n	800dbba <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800db20:	689b      	ldr	r3, [r3, #8]
 800db22:	6839      	ldr	r1, [r7, #0]
 800db24:	6878      	ldr	r0, [r7, #4]
 800db26:	4798      	blx	r3
 800db28:	4603      	mov	r3, r0
 800db2a:	73fb      	strb	r3, [r7, #15]
      break;
 800db2c:	e04a      	b.n	800dbc4 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800db2e:	683b      	ldr	r3, [r7, #0]
 800db30:	785b      	ldrb	r3, [r3, #1]
 800db32:	2b09      	cmp	r3, #9
 800db34:	d83b      	bhi.n	800dbae <USBD_StdDevReq+0xba>
 800db36:	a201      	add	r2, pc, #4	; (adr r2, 800db3c <USBD_StdDevReq+0x48>)
 800db38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db3c:	0800db91 	.word	0x0800db91
 800db40:	0800dba5 	.word	0x0800dba5
 800db44:	0800dbaf 	.word	0x0800dbaf
 800db48:	0800db9b 	.word	0x0800db9b
 800db4c:	0800dbaf 	.word	0x0800dbaf
 800db50:	0800db6f 	.word	0x0800db6f
 800db54:	0800db65 	.word	0x0800db65
 800db58:	0800dbaf 	.word	0x0800dbaf
 800db5c:	0800db87 	.word	0x0800db87
 800db60:	0800db79 	.word	0x0800db79
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800db64:	6839      	ldr	r1, [r7, #0]
 800db66:	6878      	ldr	r0, [r7, #4]
 800db68:	f000 f9de 	bl	800df28 <USBD_GetDescriptor>
          break;
 800db6c:	e024      	b.n	800dbb8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800db6e:	6839      	ldr	r1, [r7, #0]
 800db70:	6878      	ldr	r0, [r7, #4]
 800db72:	f000 fb6d 	bl	800e250 <USBD_SetAddress>
          break;
 800db76:	e01f      	b.n	800dbb8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800db78:	6839      	ldr	r1, [r7, #0]
 800db7a:	6878      	ldr	r0, [r7, #4]
 800db7c:	f000 fbac 	bl	800e2d8 <USBD_SetConfig>
 800db80:	4603      	mov	r3, r0
 800db82:	73fb      	strb	r3, [r7, #15]
          break;
 800db84:	e018      	b.n	800dbb8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800db86:	6839      	ldr	r1, [r7, #0]
 800db88:	6878      	ldr	r0, [r7, #4]
 800db8a:	f000 fc4b 	bl	800e424 <USBD_GetConfig>
          break;
 800db8e:	e013      	b.n	800dbb8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800db90:	6839      	ldr	r1, [r7, #0]
 800db92:	6878      	ldr	r0, [r7, #4]
 800db94:	f000 fc7c 	bl	800e490 <USBD_GetStatus>
          break;
 800db98:	e00e      	b.n	800dbb8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800db9a:	6839      	ldr	r1, [r7, #0]
 800db9c:	6878      	ldr	r0, [r7, #4]
 800db9e:	f000 fcab 	bl	800e4f8 <USBD_SetFeature>
          break;
 800dba2:	e009      	b.n	800dbb8 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800dba4:	6839      	ldr	r1, [r7, #0]
 800dba6:	6878      	ldr	r0, [r7, #4]
 800dba8:	f000 fcba 	bl	800e520 <USBD_ClrFeature>
          break;
 800dbac:	e004      	b.n	800dbb8 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800dbae:	6839      	ldr	r1, [r7, #0]
 800dbb0:	6878      	ldr	r0, [r7, #4]
 800dbb2:	f000 fd11 	bl	800e5d8 <USBD_CtlError>
          break;
 800dbb6:	bf00      	nop
      }
      break;
 800dbb8:	e004      	b.n	800dbc4 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800dbba:	6839      	ldr	r1, [r7, #0]
 800dbbc:	6878      	ldr	r0, [r7, #4]
 800dbbe:	f000 fd0b 	bl	800e5d8 <USBD_CtlError>
      break;
 800dbc2:	bf00      	nop
  }

  return ret;
 800dbc4:	7bfb      	ldrb	r3, [r7, #15]
}
 800dbc6:	4618      	mov	r0, r3
 800dbc8:	3710      	adds	r7, #16
 800dbca:	46bd      	mov	sp, r7
 800dbcc:	bd80      	pop	{r7, pc}
 800dbce:	bf00      	nop

0800dbd0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dbd0:	b580      	push	{r7, lr}
 800dbd2:	b084      	sub	sp, #16
 800dbd4:	af00      	add	r7, sp, #0
 800dbd6:	6078      	str	r0, [r7, #4]
 800dbd8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800dbda:	2300      	movs	r3, #0
 800dbdc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dbde:	683b      	ldr	r3, [r7, #0]
 800dbe0:	781b      	ldrb	r3, [r3, #0]
 800dbe2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800dbe6:	2b40      	cmp	r3, #64	; 0x40
 800dbe8:	d005      	beq.n	800dbf6 <USBD_StdItfReq+0x26>
 800dbea:	2b40      	cmp	r3, #64	; 0x40
 800dbec:	d82f      	bhi.n	800dc4e <USBD_StdItfReq+0x7e>
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d001      	beq.n	800dbf6 <USBD_StdItfReq+0x26>
 800dbf2:	2b20      	cmp	r3, #32
 800dbf4:	d12b      	bne.n	800dc4e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dbfc:	b2db      	uxtb	r3, r3
 800dbfe:	3b01      	subs	r3, #1
 800dc00:	2b02      	cmp	r3, #2
 800dc02:	d81d      	bhi.n	800dc40 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800dc04:	683b      	ldr	r3, [r7, #0]
 800dc06:	889b      	ldrh	r3, [r3, #4]
 800dc08:	b2db      	uxtb	r3, r3
 800dc0a:	2b01      	cmp	r3, #1
 800dc0c:	d813      	bhi.n	800dc36 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dc14:	689b      	ldr	r3, [r3, #8]
 800dc16:	6839      	ldr	r1, [r7, #0]
 800dc18:	6878      	ldr	r0, [r7, #4]
 800dc1a:	4798      	blx	r3
 800dc1c:	4603      	mov	r3, r0
 800dc1e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800dc20:	683b      	ldr	r3, [r7, #0]
 800dc22:	88db      	ldrh	r3, [r3, #6]
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d110      	bne.n	800dc4a <USBD_StdItfReq+0x7a>
 800dc28:	7bfb      	ldrb	r3, [r7, #15]
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d10d      	bne.n	800dc4a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800dc2e:	6878      	ldr	r0, [r7, #4]
 800dc30:	f000 fd9d 	bl	800e76e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800dc34:	e009      	b.n	800dc4a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800dc36:	6839      	ldr	r1, [r7, #0]
 800dc38:	6878      	ldr	r0, [r7, #4]
 800dc3a:	f000 fccd 	bl	800e5d8 <USBD_CtlError>
          break;
 800dc3e:	e004      	b.n	800dc4a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800dc40:	6839      	ldr	r1, [r7, #0]
 800dc42:	6878      	ldr	r0, [r7, #4]
 800dc44:	f000 fcc8 	bl	800e5d8 <USBD_CtlError>
          break;
 800dc48:	e000      	b.n	800dc4c <USBD_StdItfReq+0x7c>
          break;
 800dc4a:	bf00      	nop
      }
      break;
 800dc4c:	e004      	b.n	800dc58 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800dc4e:	6839      	ldr	r1, [r7, #0]
 800dc50:	6878      	ldr	r0, [r7, #4]
 800dc52:	f000 fcc1 	bl	800e5d8 <USBD_CtlError>
      break;
 800dc56:	bf00      	nop
  }

  return ret;
 800dc58:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc5a:	4618      	mov	r0, r3
 800dc5c:	3710      	adds	r7, #16
 800dc5e:	46bd      	mov	sp, r7
 800dc60:	bd80      	pop	{r7, pc}

0800dc62 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dc62:	b580      	push	{r7, lr}
 800dc64:	b084      	sub	sp, #16
 800dc66:	af00      	add	r7, sp, #0
 800dc68:	6078      	str	r0, [r7, #4]
 800dc6a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800dc6c:	2300      	movs	r3, #0
 800dc6e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800dc70:	683b      	ldr	r3, [r7, #0]
 800dc72:	889b      	ldrh	r3, [r3, #4]
 800dc74:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dc76:	683b      	ldr	r3, [r7, #0]
 800dc78:	781b      	ldrb	r3, [r3, #0]
 800dc7a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800dc7e:	2b40      	cmp	r3, #64	; 0x40
 800dc80:	d007      	beq.n	800dc92 <USBD_StdEPReq+0x30>
 800dc82:	2b40      	cmp	r3, #64	; 0x40
 800dc84:	f200 8145 	bhi.w	800df12 <USBD_StdEPReq+0x2b0>
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d00c      	beq.n	800dca6 <USBD_StdEPReq+0x44>
 800dc8c:	2b20      	cmp	r3, #32
 800dc8e:	f040 8140 	bne.w	800df12 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dc98:	689b      	ldr	r3, [r3, #8]
 800dc9a:	6839      	ldr	r1, [r7, #0]
 800dc9c:	6878      	ldr	r0, [r7, #4]
 800dc9e:	4798      	blx	r3
 800dca0:	4603      	mov	r3, r0
 800dca2:	73fb      	strb	r3, [r7, #15]
      break;
 800dca4:	e13a      	b.n	800df1c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800dca6:	683b      	ldr	r3, [r7, #0]
 800dca8:	785b      	ldrb	r3, [r3, #1]
 800dcaa:	2b03      	cmp	r3, #3
 800dcac:	d007      	beq.n	800dcbe <USBD_StdEPReq+0x5c>
 800dcae:	2b03      	cmp	r3, #3
 800dcb0:	f300 8129 	bgt.w	800df06 <USBD_StdEPReq+0x2a4>
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d07f      	beq.n	800ddb8 <USBD_StdEPReq+0x156>
 800dcb8:	2b01      	cmp	r3, #1
 800dcba:	d03c      	beq.n	800dd36 <USBD_StdEPReq+0xd4>
 800dcbc:	e123      	b.n	800df06 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dcc4:	b2db      	uxtb	r3, r3
 800dcc6:	2b02      	cmp	r3, #2
 800dcc8:	d002      	beq.n	800dcd0 <USBD_StdEPReq+0x6e>
 800dcca:	2b03      	cmp	r3, #3
 800dccc:	d016      	beq.n	800dcfc <USBD_StdEPReq+0x9a>
 800dcce:	e02c      	b.n	800dd2a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800dcd0:	7bbb      	ldrb	r3, [r7, #14]
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d00d      	beq.n	800dcf2 <USBD_StdEPReq+0x90>
 800dcd6:	7bbb      	ldrb	r3, [r7, #14]
 800dcd8:	2b80      	cmp	r3, #128	; 0x80
 800dcda:	d00a      	beq.n	800dcf2 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800dcdc:	7bbb      	ldrb	r3, [r7, #14]
 800dcde:	4619      	mov	r1, r3
 800dce0:	6878      	ldr	r0, [r7, #4]
 800dce2:	f003 ff69 	bl	8011bb8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800dce6:	2180      	movs	r1, #128	; 0x80
 800dce8:	6878      	ldr	r0, [r7, #4]
 800dcea:	f003 ff65 	bl	8011bb8 <USBD_LL_StallEP>
 800dcee:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800dcf0:	e020      	b.n	800dd34 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800dcf2:	6839      	ldr	r1, [r7, #0]
 800dcf4:	6878      	ldr	r0, [r7, #4]
 800dcf6:	f000 fc6f 	bl	800e5d8 <USBD_CtlError>
              break;
 800dcfa:	e01b      	b.n	800dd34 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800dcfc:	683b      	ldr	r3, [r7, #0]
 800dcfe:	885b      	ldrh	r3, [r3, #2]
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d10e      	bne.n	800dd22 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800dd04:	7bbb      	ldrb	r3, [r7, #14]
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d00b      	beq.n	800dd22 <USBD_StdEPReq+0xc0>
 800dd0a:	7bbb      	ldrb	r3, [r7, #14]
 800dd0c:	2b80      	cmp	r3, #128	; 0x80
 800dd0e:	d008      	beq.n	800dd22 <USBD_StdEPReq+0xc0>
 800dd10:	683b      	ldr	r3, [r7, #0]
 800dd12:	88db      	ldrh	r3, [r3, #6]
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d104      	bne.n	800dd22 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800dd18:	7bbb      	ldrb	r3, [r7, #14]
 800dd1a:	4619      	mov	r1, r3
 800dd1c:	6878      	ldr	r0, [r7, #4]
 800dd1e:	f003 ff4b 	bl	8011bb8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800dd22:	6878      	ldr	r0, [r7, #4]
 800dd24:	f000 fd23 	bl	800e76e <USBD_CtlSendStatus>

              break;
 800dd28:	e004      	b.n	800dd34 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800dd2a:	6839      	ldr	r1, [r7, #0]
 800dd2c:	6878      	ldr	r0, [r7, #4]
 800dd2e:	f000 fc53 	bl	800e5d8 <USBD_CtlError>
              break;
 800dd32:	bf00      	nop
          }
          break;
 800dd34:	e0ec      	b.n	800df10 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dd3c:	b2db      	uxtb	r3, r3
 800dd3e:	2b02      	cmp	r3, #2
 800dd40:	d002      	beq.n	800dd48 <USBD_StdEPReq+0xe6>
 800dd42:	2b03      	cmp	r3, #3
 800dd44:	d016      	beq.n	800dd74 <USBD_StdEPReq+0x112>
 800dd46:	e030      	b.n	800ddaa <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800dd48:	7bbb      	ldrb	r3, [r7, #14]
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d00d      	beq.n	800dd6a <USBD_StdEPReq+0x108>
 800dd4e:	7bbb      	ldrb	r3, [r7, #14]
 800dd50:	2b80      	cmp	r3, #128	; 0x80
 800dd52:	d00a      	beq.n	800dd6a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800dd54:	7bbb      	ldrb	r3, [r7, #14]
 800dd56:	4619      	mov	r1, r3
 800dd58:	6878      	ldr	r0, [r7, #4]
 800dd5a:	f003 ff2d 	bl	8011bb8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800dd5e:	2180      	movs	r1, #128	; 0x80
 800dd60:	6878      	ldr	r0, [r7, #4]
 800dd62:	f003 ff29 	bl	8011bb8 <USBD_LL_StallEP>
 800dd66:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800dd68:	e025      	b.n	800ddb6 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800dd6a:	6839      	ldr	r1, [r7, #0]
 800dd6c:	6878      	ldr	r0, [r7, #4]
 800dd6e:	f000 fc33 	bl	800e5d8 <USBD_CtlError>
              break;
 800dd72:	e020      	b.n	800ddb6 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800dd74:	683b      	ldr	r3, [r7, #0]
 800dd76:	885b      	ldrh	r3, [r3, #2]
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d11b      	bne.n	800ddb4 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800dd7c:	7bbb      	ldrb	r3, [r7, #14]
 800dd7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d004      	beq.n	800dd90 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800dd86:	7bbb      	ldrb	r3, [r7, #14]
 800dd88:	4619      	mov	r1, r3
 800dd8a:	6878      	ldr	r0, [r7, #4]
 800dd8c:	f003 ff4a 	bl	8011c24 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800dd90:	6878      	ldr	r0, [r7, #4]
 800dd92:	f000 fcec 	bl	800e76e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dd9c:	689b      	ldr	r3, [r3, #8]
 800dd9e:	6839      	ldr	r1, [r7, #0]
 800dda0:	6878      	ldr	r0, [r7, #4]
 800dda2:	4798      	blx	r3
 800dda4:	4603      	mov	r3, r0
 800dda6:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800dda8:	e004      	b.n	800ddb4 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800ddaa:	6839      	ldr	r1, [r7, #0]
 800ddac:	6878      	ldr	r0, [r7, #4]
 800ddae:	f000 fc13 	bl	800e5d8 <USBD_CtlError>
              break;
 800ddb2:	e000      	b.n	800ddb6 <USBD_StdEPReq+0x154>
              break;
 800ddb4:	bf00      	nop
          }
          break;
 800ddb6:	e0ab      	b.n	800df10 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ddbe:	b2db      	uxtb	r3, r3
 800ddc0:	2b02      	cmp	r3, #2
 800ddc2:	d002      	beq.n	800ddca <USBD_StdEPReq+0x168>
 800ddc4:	2b03      	cmp	r3, #3
 800ddc6:	d032      	beq.n	800de2e <USBD_StdEPReq+0x1cc>
 800ddc8:	e097      	b.n	800defa <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ddca:	7bbb      	ldrb	r3, [r7, #14]
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d007      	beq.n	800dde0 <USBD_StdEPReq+0x17e>
 800ddd0:	7bbb      	ldrb	r3, [r7, #14]
 800ddd2:	2b80      	cmp	r3, #128	; 0x80
 800ddd4:	d004      	beq.n	800dde0 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800ddd6:	6839      	ldr	r1, [r7, #0]
 800ddd8:	6878      	ldr	r0, [r7, #4]
 800ddda:	f000 fbfd 	bl	800e5d8 <USBD_CtlError>
                break;
 800ddde:	e091      	b.n	800df04 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800dde0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	da0b      	bge.n	800de00 <USBD_StdEPReq+0x19e>
 800dde8:	7bbb      	ldrb	r3, [r7, #14]
 800ddea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ddee:	4613      	mov	r3, r2
 800ddf0:	009b      	lsls	r3, r3, #2
 800ddf2:	4413      	add	r3, r2
 800ddf4:	009b      	lsls	r3, r3, #2
 800ddf6:	3310      	adds	r3, #16
 800ddf8:	687a      	ldr	r2, [r7, #4]
 800ddfa:	4413      	add	r3, r2
 800ddfc:	3304      	adds	r3, #4
 800ddfe:	e00b      	b.n	800de18 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800de00:	7bbb      	ldrb	r3, [r7, #14]
 800de02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800de06:	4613      	mov	r3, r2
 800de08:	009b      	lsls	r3, r3, #2
 800de0a:	4413      	add	r3, r2
 800de0c:	009b      	lsls	r3, r3, #2
 800de0e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800de12:	687a      	ldr	r2, [r7, #4]
 800de14:	4413      	add	r3, r2
 800de16:	3304      	adds	r3, #4
 800de18:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800de1a:	68bb      	ldr	r3, [r7, #8]
 800de1c:	2200      	movs	r2, #0
 800de1e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800de20:	68bb      	ldr	r3, [r7, #8]
 800de22:	2202      	movs	r2, #2
 800de24:	4619      	mov	r1, r3
 800de26:	6878      	ldr	r0, [r7, #4]
 800de28:	f000 fc47 	bl	800e6ba <USBD_CtlSendData>
              break;
 800de2c:	e06a      	b.n	800df04 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800de2e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800de32:	2b00      	cmp	r3, #0
 800de34:	da11      	bge.n	800de5a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800de36:	7bbb      	ldrb	r3, [r7, #14]
 800de38:	f003 020f 	and.w	r2, r3, #15
 800de3c:	6879      	ldr	r1, [r7, #4]
 800de3e:	4613      	mov	r3, r2
 800de40:	009b      	lsls	r3, r3, #2
 800de42:	4413      	add	r3, r2
 800de44:	009b      	lsls	r3, r3, #2
 800de46:	440b      	add	r3, r1
 800de48:	3324      	adds	r3, #36	; 0x24
 800de4a:	881b      	ldrh	r3, [r3, #0]
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d117      	bne.n	800de80 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800de50:	6839      	ldr	r1, [r7, #0]
 800de52:	6878      	ldr	r0, [r7, #4]
 800de54:	f000 fbc0 	bl	800e5d8 <USBD_CtlError>
                  break;
 800de58:	e054      	b.n	800df04 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800de5a:	7bbb      	ldrb	r3, [r7, #14]
 800de5c:	f003 020f 	and.w	r2, r3, #15
 800de60:	6879      	ldr	r1, [r7, #4]
 800de62:	4613      	mov	r3, r2
 800de64:	009b      	lsls	r3, r3, #2
 800de66:	4413      	add	r3, r2
 800de68:	009b      	lsls	r3, r3, #2
 800de6a:	440b      	add	r3, r1
 800de6c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800de70:	881b      	ldrh	r3, [r3, #0]
 800de72:	2b00      	cmp	r3, #0
 800de74:	d104      	bne.n	800de80 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800de76:	6839      	ldr	r1, [r7, #0]
 800de78:	6878      	ldr	r0, [r7, #4]
 800de7a:	f000 fbad 	bl	800e5d8 <USBD_CtlError>
                  break;
 800de7e:	e041      	b.n	800df04 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800de80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800de84:	2b00      	cmp	r3, #0
 800de86:	da0b      	bge.n	800dea0 <USBD_StdEPReq+0x23e>
 800de88:	7bbb      	ldrb	r3, [r7, #14]
 800de8a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800de8e:	4613      	mov	r3, r2
 800de90:	009b      	lsls	r3, r3, #2
 800de92:	4413      	add	r3, r2
 800de94:	009b      	lsls	r3, r3, #2
 800de96:	3310      	adds	r3, #16
 800de98:	687a      	ldr	r2, [r7, #4]
 800de9a:	4413      	add	r3, r2
 800de9c:	3304      	adds	r3, #4
 800de9e:	e00b      	b.n	800deb8 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800dea0:	7bbb      	ldrb	r3, [r7, #14]
 800dea2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800dea6:	4613      	mov	r3, r2
 800dea8:	009b      	lsls	r3, r3, #2
 800deaa:	4413      	add	r3, r2
 800deac:	009b      	lsls	r3, r3, #2
 800deae:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800deb2:	687a      	ldr	r2, [r7, #4]
 800deb4:	4413      	add	r3, r2
 800deb6:	3304      	adds	r3, #4
 800deb8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800deba:	7bbb      	ldrb	r3, [r7, #14]
 800debc:	2b00      	cmp	r3, #0
 800debe:	d002      	beq.n	800dec6 <USBD_StdEPReq+0x264>
 800dec0:	7bbb      	ldrb	r3, [r7, #14]
 800dec2:	2b80      	cmp	r3, #128	; 0x80
 800dec4:	d103      	bne.n	800dece <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800dec6:	68bb      	ldr	r3, [r7, #8]
 800dec8:	2200      	movs	r2, #0
 800deca:	601a      	str	r2, [r3, #0]
 800decc:	e00e      	b.n	800deec <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800dece:	7bbb      	ldrb	r3, [r7, #14]
 800ded0:	4619      	mov	r1, r3
 800ded2:	6878      	ldr	r0, [r7, #4]
 800ded4:	f003 fedc 	bl	8011c90 <USBD_LL_IsStallEP>
 800ded8:	4603      	mov	r3, r0
 800deda:	2b00      	cmp	r3, #0
 800dedc:	d003      	beq.n	800dee6 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800dede:	68bb      	ldr	r3, [r7, #8]
 800dee0:	2201      	movs	r2, #1
 800dee2:	601a      	str	r2, [r3, #0]
 800dee4:	e002      	b.n	800deec <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800dee6:	68bb      	ldr	r3, [r7, #8]
 800dee8:	2200      	movs	r2, #0
 800deea:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800deec:	68bb      	ldr	r3, [r7, #8]
 800deee:	2202      	movs	r2, #2
 800def0:	4619      	mov	r1, r3
 800def2:	6878      	ldr	r0, [r7, #4]
 800def4:	f000 fbe1 	bl	800e6ba <USBD_CtlSendData>
              break;
 800def8:	e004      	b.n	800df04 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800defa:	6839      	ldr	r1, [r7, #0]
 800defc:	6878      	ldr	r0, [r7, #4]
 800defe:	f000 fb6b 	bl	800e5d8 <USBD_CtlError>
              break;
 800df02:	bf00      	nop
          }
          break;
 800df04:	e004      	b.n	800df10 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800df06:	6839      	ldr	r1, [r7, #0]
 800df08:	6878      	ldr	r0, [r7, #4]
 800df0a:	f000 fb65 	bl	800e5d8 <USBD_CtlError>
          break;
 800df0e:	bf00      	nop
      }
      break;
 800df10:	e004      	b.n	800df1c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800df12:	6839      	ldr	r1, [r7, #0]
 800df14:	6878      	ldr	r0, [r7, #4]
 800df16:	f000 fb5f 	bl	800e5d8 <USBD_CtlError>
      break;
 800df1a:	bf00      	nop
  }

  return ret;
 800df1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800df1e:	4618      	mov	r0, r3
 800df20:	3710      	adds	r7, #16
 800df22:	46bd      	mov	sp, r7
 800df24:	bd80      	pop	{r7, pc}
	...

0800df28 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800df28:	b580      	push	{r7, lr}
 800df2a:	b084      	sub	sp, #16
 800df2c:	af00      	add	r7, sp, #0
 800df2e:	6078      	str	r0, [r7, #4]
 800df30:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800df32:	2300      	movs	r3, #0
 800df34:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800df36:	2300      	movs	r3, #0
 800df38:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800df3a:	2300      	movs	r3, #0
 800df3c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800df3e:	683b      	ldr	r3, [r7, #0]
 800df40:	885b      	ldrh	r3, [r3, #2]
 800df42:	0a1b      	lsrs	r3, r3, #8
 800df44:	b29b      	uxth	r3, r3
 800df46:	3b01      	subs	r3, #1
 800df48:	2b0e      	cmp	r3, #14
 800df4a:	f200 8152 	bhi.w	800e1f2 <USBD_GetDescriptor+0x2ca>
 800df4e:	a201      	add	r2, pc, #4	; (adr r2, 800df54 <USBD_GetDescriptor+0x2c>)
 800df50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df54:	0800dfc5 	.word	0x0800dfc5
 800df58:	0800dfdd 	.word	0x0800dfdd
 800df5c:	0800e01d 	.word	0x0800e01d
 800df60:	0800e1f3 	.word	0x0800e1f3
 800df64:	0800e1f3 	.word	0x0800e1f3
 800df68:	0800e193 	.word	0x0800e193
 800df6c:	0800e1bf 	.word	0x0800e1bf
 800df70:	0800e1f3 	.word	0x0800e1f3
 800df74:	0800e1f3 	.word	0x0800e1f3
 800df78:	0800e1f3 	.word	0x0800e1f3
 800df7c:	0800e1f3 	.word	0x0800e1f3
 800df80:	0800e1f3 	.word	0x0800e1f3
 800df84:	0800e1f3 	.word	0x0800e1f3
 800df88:	0800e1f3 	.word	0x0800e1f3
 800df8c:	0800df91 	.word	0x0800df91
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800df96:	69db      	ldr	r3, [r3, #28]
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d00b      	beq.n	800dfb4 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dfa2:	69db      	ldr	r3, [r3, #28]
 800dfa4:	687a      	ldr	r2, [r7, #4]
 800dfa6:	7c12      	ldrb	r2, [r2, #16]
 800dfa8:	f107 0108 	add.w	r1, r7, #8
 800dfac:	4610      	mov	r0, r2
 800dfae:	4798      	blx	r3
 800dfb0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800dfb2:	e126      	b.n	800e202 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800dfb4:	6839      	ldr	r1, [r7, #0]
 800dfb6:	6878      	ldr	r0, [r7, #4]
 800dfb8:	f000 fb0e 	bl	800e5d8 <USBD_CtlError>
        err++;
 800dfbc:	7afb      	ldrb	r3, [r7, #11]
 800dfbe:	3301      	adds	r3, #1
 800dfc0:	72fb      	strb	r3, [r7, #11]
      break;
 800dfc2:	e11e      	b.n	800e202 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dfca:	681b      	ldr	r3, [r3, #0]
 800dfcc:	687a      	ldr	r2, [r7, #4]
 800dfce:	7c12      	ldrb	r2, [r2, #16]
 800dfd0:	f107 0108 	add.w	r1, r7, #8
 800dfd4:	4610      	mov	r0, r2
 800dfd6:	4798      	blx	r3
 800dfd8:	60f8      	str	r0, [r7, #12]
      break;
 800dfda:	e112      	b.n	800e202 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	7c1b      	ldrb	r3, [r3, #16]
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d10d      	bne.n	800e000 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dfea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dfec:	f107 0208 	add.w	r2, r7, #8
 800dff0:	4610      	mov	r0, r2
 800dff2:	4798      	blx	r3
 800dff4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800dff6:	68fb      	ldr	r3, [r7, #12]
 800dff8:	3301      	adds	r3, #1
 800dffa:	2202      	movs	r2, #2
 800dffc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800dffe:	e100      	b.n	800e202 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e008:	f107 0208 	add.w	r2, r7, #8
 800e00c:	4610      	mov	r0, r2
 800e00e:	4798      	blx	r3
 800e010:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	3301      	adds	r3, #1
 800e016:	2202      	movs	r2, #2
 800e018:	701a      	strb	r2, [r3, #0]
      break;
 800e01a:	e0f2      	b.n	800e202 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800e01c:	683b      	ldr	r3, [r7, #0]
 800e01e:	885b      	ldrh	r3, [r3, #2]
 800e020:	b2db      	uxtb	r3, r3
 800e022:	2b05      	cmp	r3, #5
 800e024:	f200 80ac 	bhi.w	800e180 <USBD_GetDescriptor+0x258>
 800e028:	a201      	add	r2, pc, #4	; (adr r2, 800e030 <USBD_GetDescriptor+0x108>)
 800e02a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e02e:	bf00      	nop
 800e030:	0800e049 	.word	0x0800e049
 800e034:	0800e07d 	.word	0x0800e07d
 800e038:	0800e0b1 	.word	0x0800e0b1
 800e03c:	0800e0e5 	.word	0x0800e0e5
 800e040:	0800e119 	.word	0x0800e119
 800e044:	0800e14d 	.word	0x0800e14d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e04e:	685b      	ldr	r3, [r3, #4]
 800e050:	2b00      	cmp	r3, #0
 800e052:	d00b      	beq.n	800e06c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e05a:	685b      	ldr	r3, [r3, #4]
 800e05c:	687a      	ldr	r2, [r7, #4]
 800e05e:	7c12      	ldrb	r2, [r2, #16]
 800e060:	f107 0108 	add.w	r1, r7, #8
 800e064:	4610      	mov	r0, r2
 800e066:	4798      	blx	r3
 800e068:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e06a:	e091      	b.n	800e190 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e06c:	6839      	ldr	r1, [r7, #0]
 800e06e:	6878      	ldr	r0, [r7, #4]
 800e070:	f000 fab2 	bl	800e5d8 <USBD_CtlError>
            err++;
 800e074:	7afb      	ldrb	r3, [r7, #11]
 800e076:	3301      	adds	r3, #1
 800e078:	72fb      	strb	r3, [r7, #11]
          break;
 800e07a:	e089      	b.n	800e190 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e082:	689b      	ldr	r3, [r3, #8]
 800e084:	2b00      	cmp	r3, #0
 800e086:	d00b      	beq.n	800e0a0 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e08e:	689b      	ldr	r3, [r3, #8]
 800e090:	687a      	ldr	r2, [r7, #4]
 800e092:	7c12      	ldrb	r2, [r2, #16]
 800e094:	f107 0108 	add.w	r1, r7, #8
 800e098:	4610      	mov	r0, r2
 800e09a:	4798      	blx	r3
 800e09c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e09e:	e077      	b.n	800e190 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e0a0:	6839      	ldr	r1, [r7, #0]
 800e0a2:	6878      	ldr	r0, [r7, #4]
 800e0a4:	f000 fa98 	bl	800e5d8 <USBD_CtlError>
            err++;
 800e0a8:	7afb      	ldrb	r3, [r7, #11]
 800e0aa:	3301      	adds	r3, #1
 800e0ac:	72fb      	strb	r3, [r7, #11]
          break;
 800e0ae:	e06f      	b.n	800e190 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e0b6:	68db      	ldr	r3, [r3, #12]
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	d00b      	beq.n	800e0d4 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e0c2:	68db      	ldr	r3, [r3, #12]
 800e0c4:	687a      	ldr	r2, [r7, #4]
 800e0c6:	7c12      	ldrb	r2, [r2, #16]
 800e0c8:	f107 0108 	add.w	r1, r7, #8
 800e0cc:	4610      	mov	r0, r2
 800e0ce:	4798      	blx	r3
 800e0d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e0d2:	e05d      	b.n	800e190 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e0d4:	6839      	ldr	r1, [r7, #0]
 800e0d6:	6878      	ldr	r0, [r7, #4]
 800e0d8:	f000 fa7e 	bl	800e5d8 <USBD_CtlError>
            err++;
 800e0dc:	7afb      	ldrb	r3, [r7, #11]
 800e0de:	3301      	adds	r3, #1
 800e0e0:	72fb      	strb	r3, [r7, #11]
          break;
 800e0e2:	e055      	b.n	800e190 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e0ea:	691b      	ldr	r3, [r3, #16]
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d00b      	beq.n	800e108 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e0f6:	691b      	ldr	r3, [r3, #16]
 800e0f8:	687a      	ldr	r2, [r7, #4]
 800e0fa:	7c12      	ldrb	r2, [r2, #16]
 800e0fc:	f107 0108 	add.w	r1, r7, #8
 800e100:	4610      	mov	r0, r2
 800e102:	4798      	blx	r3
 800e104:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e106:	e043      	b.n	800e190 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e108:	6839      	ldr	r1, [r7, #0]
 800e10a:	6878      	ldr	r0, [r7, #4]
 800e10c:	f000 fa64 	bl	800e5d8 <USBD_CtlError>
            err++;
 800e110:	7afb      	ldrb	r3, [r7, #11]
 800e112:	3301      	adds	r3, #1
 800e114:	72fb      	strb	r3, [r7, #11]
          break;
 800e116:	e03b      	b.n	800e190 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e11e:	695b      	ldr	r3, [r3, #20]
 800e120:	2b00      	cmp	r3, #0
 800e122:	d00b      	beq.n	800e13c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e12a:	695b      	ldr	r3, [r3, #20]
 800e12c:	687a      	ldr	r2, [r7, #4]
 800e12e:	7c12      	ldrb	r2, [r2, #16]
 800e130:	f107 0108 	add.w	r1, r7, #8
 800e134:	4610      	mov	r0, r2
 800e136:	4798      	blx	r3
 800e138:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e13a:	e029      	b.n	800e190 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e13c:	6839      	ldr	r1, [r7, #0]
 800e13e:	6878      	ldr	r0, [r7, #4]
 800e140:	f000 fa4a 	bl	800e5d8 <USBD_CtlError>
            err++;
 800e144:	7afb      	ldrb	r3, [r7, #11]
 800e146:	3301      	adds	r3, #1
 800e148:	72fb      	strb	r3, [r7, #11]
          break;
 800e14a:	e021      	b.n	800e190 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e152:	699b      	ldr	r3, [r3, #24]
 800e154:	2b00      	cmp	r3, #0
 800e156:	d00b      	beq.n	800e170 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e15e:	699b      	ldr	r3, [r3, #24]
 800e160:	687a      	ldr	r2, [r7, #4]
 800e162:	7c12      	ldrb	r2, [r2, #16]
 800e164:	f107 0108 	add.w	r1, r7, #8
 800e168:	4610      	mov	r0, r2
 800e16a:	4798      	blx	r3
 800e16c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e16e:	e00f      	b.n	800e190 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e170:	6839      	ldr	r1, [r7, #0]
 800e172:	6878      	ldr	r0, [r7, #4]
 800e174:	f000 fa30 	bl	800e5d8 <USBD_CtlError>
            err++;
 800e178:	7afb      	ldrb	r3, [r7, #11]
 800e17a:	3301      	adds	r3, #1
 800e17c:	72fb      	strb	r3, [r7, #11]
          break;
 800e17e:	e007      	b.n	800e190 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800e180:	6839      	ldr	r1, [r7, #0]
 800e182:	6878      	ldr	r0, [r7, #4]
 800e184:	f000 fa28 	bl	800e5d8 <USBD_CtlError>
          err++;
 800e188:	7afb      	ldrb	r3, [r7, #11]
 800e18a:	3301      	adds	r3, #1
 800e18c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800e18e:	bf00      	nop
      }
      break;
 800e190:	e037      	b.n	800e202 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	7c1b      	ldrb	r3, [r3, #16]
 800e196:	2b00      	cmp	r3, #0
 800e198:	d109      	bne.n	800e1ae <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e1a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e1a2:	f107 0208 	add.w	r2, r7, #8
 800e1a6:	4610      	mov	r0, r2
 800e1a8:	4798      	blx	r3
 800e1aa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e1ac:	e029      	b.n	800e202 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e1ae:	6839      	ldr	r1, [r7, #0]
 800e1b0:	6878      	ldr	r0, [r7, #4]
 800e1b2:	f000 fa11 	bl	800e5d8 <USBD_CtlError>
        err++;
 800e1b6:	7afb      	ldrb	r3, [r7, #11]
 800e1b8:	3301      	adds	r3, #1
 800e1ba:	72fb      	strb	r3, [r7, #11]
      break;
 800e1bc:	e021      	b.n	800e202 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	7c1b      	ldrb	r3, [r3, #16]
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d10d      	bne.n	800e1e2 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e1cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e1ce:	f107 0208 	add.w	r2, r7, #8
 800e1d2:	4610      	mov	r0, r2
 800e1d4:	4798      	blx	r3
 800e1d6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	3301      	adds	r3, #1
 800e1dc:	2207      	movs	r2, #7
 800e1de:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e1e0:	e00f      	b.n	800e202 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e1e2:	6839      	ldr	r1, [r7, #0]
 800e1e4:	6878      	ldr	r0, [r7, #4]
 800e1e6:	f000 f9f7 	bl	800e5d8 <USBD_CtlError>
        err++;
 800e1ea:	7afb      	ldrb	r3, [r7, #11]
 800e1ec:	3301      	adds	r3, #1
 800e1ee:	72fb      	strb	r3, [r7, #11]
      break;
 800e1f0:	e007      	b.n	800e202 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800e1f2:	6839      	ldr	r1, [r7, #0]
 800e1f4:	6878      	ldr	r0, [r7, #4]
 800e1f6:	f000 f9ef 	bl	800e5d8 <USBD_CtlError>
      err++;
 800e1fa:	7afb      	ldrb	r3, [r7, #11]
 800e1fc:	3301      	adds	r3, #1
 800e1fe:	72fb      	strb	r3, [r7, #11]
      break;
 800e200:	bf00      	nop
  }

  if (err != 0U)
 800e202:	7afb      	ldrb	r3, [r7, #11]
 800e204:	2b00      	cmp	r3, #0
 800e206:	d11e      	bne.n	800e246 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800e208:	683b      	ldr	r3, [r7, #0]
 800e20a:	88db      	ldrh	r3, [r3, #6]
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d016      	beq.n	800e23e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800e210:	893b      	ldrh	r3, [r7, #8]
 800e212:	2b00      	cmp	r3, #0
 800e214:	d00e      	beq.n	800e234 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800e216:	683b      	ldr	r3, [r7, #0]
 800e218:	88da      	ldrh	r2, [r3, #6]
 800e21a:	893b      	ldrh	r3, [r7, #8]
 800e21c:	4293      	cmp	r3, r2
 800e21e:	bf28      	it	cs
 800e220:	4613      	movcs	r3, r2
 800e222:	b29b      	uxth	r3, r3
 800e224:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800e226:	893b      	ldrh	r3, [r7, #8]
 800e228:	461a      	mov	r2, r3
 800e22a:	68f9      	ldr	r1, [r7, #12]
 800e22c:	6878      	ldr	r0, [r7, #4]
 800e22e:	f000 fa44 	bl	800e6ba <USBD_CtlSendData>
 800e232:	e009      	b.n	800e248 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800e234:	6839      	ldr	r1, [r7, #0]
 800e236:	6878      	ldr	r0, [r7, #4]
 800e238:	f000 f9ce 	bl	800e5d8 <USBD_CtlError>
 800e23c:	e004      	b.n	800e248 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800e23e:	6878      	ldr	r0, [r7, #4]
 800e240:	f000 fa95 	bl	800e76e <USBD_CtlSendStatus>
 800e244:	e000      	b.n	800e248 <USBD_GetDescriptor+0x320>
    return;
 800e246:	bf00      	nop
  }
}
 800e248:	3710      	adds	r7, #16
 800e24a:	46bd      	mov	sp, r7
 800e24c:	bd80      	pop	{r7, pc}
 800e24e:	bf00      	nop

0800e250 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e250:	b580      	push	{r7, lr}
 800e252:	b084      	sub	sp, #16
 800e254:	af00      	add	r7, sp, #0
 800e256:	6078      	str	r0, [r7, #4]
 800e258:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800e25a:	683b      	ldr	r3, [r7, #0]
 800e25c:	889b      	ldrh	r3, [r3, #4]
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d131      	bne.n	800e2c6 <USBD_SetAddress+0x76>
 800e262:	683b      	ldr	r3, [r7, #0]
 800e264:	88db      	ldrh	r3, [r3, #6]
 800e266:	2b00      	cmp	r3, #0
 800e268:	d12d      	bne.n	800e2c6 <USBD_SetAddress+0x76>
 800e26a:	683b      	ldr	r3, [r7, #0]
 800e26c:	885b      	ldrh	r3, [r3, #2]
 800e26e:	2b7f      	cmp	r3, #127	; 0x7f
 800e270:	d829      	bhi.n	800e2c6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800e272:	683b      	ldr	r3, [r7, #0]
 800e274:	885b      	ldrh	r3, [r3, #2]
 800e276:	b2db      	uxtb	r3, r3
 800e278:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e27c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e284:	b2db      	uxtb	r3, r3
 800e286:	2b03      	cmp	r3, #3
 800e288:	d104      	bne.n	800e294 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800e28a:	6839      	ldr	r1, [r7, #0]
 800e28c:	6878      	ldr	r0, [r7, #4]
 800e28e:	f000 f9a3 	bl	800e5d8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e292:	e01d      	b.n	800e2d0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	7bfa      	ldrb	r2, [r7, #15]
 800e298:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800e29c:	7bfb      	ldrb	r3, [r7, #15]
 800e29e:	4619      	mov	r1, r3
 800e2a0:	6878      	ldr	r0, [r7, #4]
 800e2a2:	f003 fd21 	bl	8011ce8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800e2a6:	6878      	ldr	r0, [r7, #4]
 800e2a8:	f000 fa61 	bl	800e76e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800e2ac:	7bfb      	ldrb	r3, [r7, #15]
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d004      	beq.n	800e2bc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	2202      	movs	r2, #2
 800e2b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e2ba:	e009      	b.n	800e2d0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	2201      	movs	r2, #1
 800e2c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e2c4:	e004      	b.n	800e2d0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800e2c6:	6839      	ldr	r1, [r7, #0]
 800e2c8:	6878      	ldr	r0, [r7, #4]
 800e2ca:	f000 f985 	bl	800e5d8 <USBD_CtlError>
  }
}
 800e2ce:	bf00      	nop
 800e2d0:	bf00      	nop
 800e2d2:	3710      	adds	r7, #16
 800e2d4:	46bd      	mov	sp, r7
 800e2d6:	bd80      	pop	{r7, pc}

0800e2d8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e2d8:	b580      	push	{r7, lr}
 800e2da:	b084      	sub	sp, #16
 800e2dc:	af00      	add	r7, sp, #0
 800e2de:	6078      	str	r0, [r7, #4]
 800e2e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e2e2:	2300      	movs	r3, #0
 800e2e4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800e2e6:	683b      	ldr	r3, [r7, #0]
 800e2e8:	885b      	ldrh	r3, [r3, #2]
 800e2ea:	b2da      	uxtb	r2, r3
 800e2ec:	4b4c      	ldr	r3, [pc, #304]	; (800e420 <USBD_SetConfig+0x148>)
 800e2ee:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e2f0:	4b4b      	ldr	r3, [pc, #300]	; (800e420 <USBD_SetConfig+0x148>)
 800e2f2:	781b      	ldrb	r3, [r3, #0]
 800e2f4:	2b01      	cmp	r3, #1
 800e2f6:	d905      	bls.n	800e304 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800e2f8:	6839      	ldr	r1, [r7, #0]
 800e2fa:	6878      	ldr	r0, [r7, #4]
 800e2fc:	f000 f96c 	bl	800e5d8 <USBD_CtlError>
    return USBD_FAIL;
 800e300:	2303      	movs	r3, #3
 800e302:	e088      	b.n	800e416 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e30a:	b2db      	uxtb	r3, r3
 800e30c:	2b02      	cmp	r3, #2
 800e30e:	d002      	beq.n	800e316 <USBD_SetConfig+0x3e>
 800e310:	2b03      	cmp	r3, #3
 800e312:	d025      	beq.n	800e360 <USBD_SetConfig+0x88>
 800e314:	e071      	b.n	800e3fa <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800e316:	4b42      	ldr	r3, [pc, #264]	; (800e420 <USBD_SetConfig+0x148>)
 800e318:	781b      	ldrb	r3, [r3, #0]
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d01c      	beq.n	800e358 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800e31e:	4b40      	ldr	r3, [pc, #256]	; (800e420 <USBD_SetConfig+0x148>)
 800e320:	781b      	ldrb	r3, [r3, #0]
 800e322:	461a      	mov	r2, r3
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e328:	4b3d      	ldr	r3, [pc, #244]	; (800e420 <USBD_SetConfig+0x148>)
 800e32a:	781b      	ldrb	r3, [r3, #0]
 800e32c:	4619      	mov	r1, r3
 800e32e:	6878      	ldr	r0, [r7, #4]
 800e330:	f7ff f91e 	bl	800d570 <USBD_SetClassConfig>
 800e334:	4603      	mov	r3, r0
 800e336:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800e338:	7bfb      	ldrb	r3, [r7, #15]
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	d004      	beq.n	800e348 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800e33e:	6839      	ldr	r1, [r7, #0]
 800e340:	6878      	ldr	r0, [r7, #4]
 800e342:	f000 f949 	bl	800e5d8 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e346:	e065      	b.n	800e414 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800e348:	6878      	ldr	r0, [r7, #4]
 800e34a:	f000 fa10 	bl	800e76e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	2203      	movs	r2, #3
 800e352:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800e356:	e05d      	b.n	800e414 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800e358:	6878      	ldr	r0, [r7, #4]
 800e35a:	f000 fa08 	bl	800e76e <USBD_CtlSendStatus>
      break;
 800e35e:	e059      	b.n	800e414 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800e360:	4b2f      	ldr	r3, [pc, #188]	; (800e420 <USBD_SetConfig+0x148>)
 800e362:	781b      	ldrb	r3, [r3, #0]
 800e364:	2b00      	cmp	r3, #0
 800e366:	d112      	bne.n	800e38e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	2202      	movs	r2, #2
 800e36c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800e370:	4b2b      	ldr	r3, [pc, #172]	; (800e420 <USBD_SetConfig+0x148>)
 800e372:	781b      	ldrb	r3, [r3, #0]
 800e374:	461a      	mov	r2, r3
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e37a:	4b29      	ldr	r3, [pc, #164]	; (800e420 <USBD_SetConfig+0x148>)
 800e37c:	781b      	ldrb	r3, [r3, #0]
 800e37e:	4619      	mov	r1, r3
 800e380:	6878      	ldr	r0, [r7, #4]
 800e382:	f7ff f911 	bl	800d5a8 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800e386:	6878      	ldr	r0, [r7, #4]
 800e388:	f000 f9f1 	bl	800e76e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e38c:	e042      	b.n	800e414 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800e38e:	4b24      	ldr	r3, [pc, #144]	; (800e420 <USBD_SetConfig+0x148>)
 800e390:	781b      	ldrb	r3, [r3, #0]
 800e392:	461a      	mov	r2, r3
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	685b      	ldr	r3, [r3, #4]
 800e398:	429a      	cmp	r2, r3
 800e39a:	d02a      	beq.n	800e3f2 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	685b      	ldr	r3, [r3, #4]
 800e3a0:	b2db      	uxtb	r3, r3
 800e3a2:	4619      	mov	r1, r3
 800e3a4:	6878      	ldr	r0, [r7, #4]
 800e3a6:	f7ff f8ff 	bl	800d5a8 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800e3aa:	4b1d      	ldr	r3, [pc, #116]	; (800e420 <USBD_SetConfig+0x148>)
 800e3ac:	781b      	ldrb	r3, [r3, #0]
 800e3ae:	461a      	mov	r2, r3
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e3b4:	4b1a      	ldr	r3, [pc, #104]	; (800e420 <USBD_SetConfig+0x148>)
 800e3b6:	781b      	ldrb	r3, [r3, #0]
 800e3b8:	4619      	mov	r1, r3
 800e3ba:	6878      	ldr	r0, [r7, #4]
 800e3bc:	f7ff f8d8 	bl	800d570 <USBD_SetClassConfig>
 800e3c0:	4603      	mov	r3, r0
 800e3c2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800e3c4:	7bfb      	ldrb	r3, [r7, #15]
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d00f      	beq.n	800e3ea <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800e3ca:	6839      	ldr	r1, [r7, #0]
 800e3cc:	6878      	ldr	r0, [r7, #4]
 800e3ce:	f000 f903 	bl	800e5d8 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	685b      	ldr	r3, [r3, #4]
 800e3d6:	b2db      	uxtb	r3, r3
 800e3d8:	4619      	mov	r1, r3
 800e3da:	6878      	ldr	r0, [r7, #4]
 800e3dc:	f7ff f8e4 	bl	800d5a8 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	2202      	movs	r2, #2
 800e3e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800e3e8:	e014      	b.n	800e414 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800e3ea:	6878      	ldr	r0, [r7, #4]
 800e3ec:	f000 f9bf 	bl	800e76e <USBD_CtlSendStatus>
      break;
 800e3f0:	e010      	b.n	800e414 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800e3f2:	6878      	ldr	r0, [r7, #4]
 800e3f4:	f000 f9bb 	bl	800e76e <USBD_CtlSendStatus>
      break;
 800e3f8:	e00c      	b.n	800e414 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800e3fa:	6839      	ldr	r1, [r7, #0]
 800e3fc:	6878      	ldr	r0, [r7, #4]
 800e3fe:	f000 f8eb 	bl	800e5d8 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e402:	4b07      	ldr	r3, [pc, #28]	; (800e420 <USBD_SetConfig+0x148>)
 800e404:	781b      	ldrb	r3, [r3, #0]
 800e406:	4619      	mov	r1, r3
 800e408:	6878      	ldr	r0, [r7, #4]
 800e40a:	f7ff f8cd 	bl	800d5a8 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800e40e:	2303      	movs	r3, #3
 800e410:	73fb      	strb	r3, [r7, #15]
      break;
 800e412:	bf00      	nop
  }

  return ret;
 800e414:	7bfb      	ldrb	r3, [r7, #15]
}
 800e416:	4618      	mov	r0, r3
 800e418:	3710      	adds	r7, #16
 800e41a:	46bd      	mov	sp, r7
 800e41c:	bd80      	pop	{r7, pc}
 800e41e:	bf00      	nop
 800e420:	20001ac0 	.word	0x20001ac0

0800e424 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e424:	b580      	push	{r7, lr}
 800e426:	b082      	sub	sp, #8
 800e428:	af00      	add	r7, sp, #0
 800e42a:	6078      	str	r0, [r7, #4]
 800e42c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800e42e:	683b      	ldr	r3, [r7, #0]
 800e430:	88db      	ldrh	r3, [r3, #6]
 800e432:	2b01      	cmp	r3, #1
 800e434:	d004      	beq.n	800e440 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800e436:	6839      	ldr	r1, [r7, #0]
 800e438:	6878      	ldr	r0, [r7, #4]
 800e43a:	f000 f8cd 	bl	800e5d8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800e43e:	e023      	b.n	800e488 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e446:	b2db      	uxtb	r3, r3
 800e448:	2b02      	cmp	r3, #2
 800e44a:	dc02      	bgt.n	800e452 <USBD_GetConfig+0x2e>
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	dc03      	bgt.n	800e458 <USBD_GetConfig+0x34>
 800e450:	e015      	b.n	800e47e <USBD_GetConfig+0x5a>
 800e452:	2b03      	cmp	r3, #3
 800e454:	d00b      	beq.n	800e46e <USBD_GetConfig+0x4a>
 800e456:	e012      	b.n	800e47e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	2200      	movs	r2, #0
 800e45c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	3308      	adds	r3, #8
 800e462:	2201      	movs	r2, #1
 800e464:	4619      	mov	r1, r3
 800e466:	6878      	ldr	r0, [r7, #4]
 800e468:	f000 f927 	bl	800e6ba <USBD_CtlSendData>
        break;
 800e46c:	e00c      	b.n	800e488 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	3304      	adds	r3, #4
 800e472:	2201      	movs	r2, #1
 800e474:	4619      	mov	r1, r3
 800e476:	6878      	ldr	r0, [r7, #4]
 800e478:	f000 f91f 	bl	800e6ba <USBD_CtlSendData>
        break;
 800e47c:	e004      	b.n	800e488 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800e47e:	6839      	ldr	r1, [r7, #0]
 800e480:	6878      	ldr	r0, [r7, #4]
 800e482:	f000 f8a9 	bl	800e5d8 <USBD_CtlError>
        break;
 800e486:	bf00      	nop
}
 800e488:	bf00      	nop
 800e48a:	3708      	adds	r7, #8
 800e48c:	46bd      	mov	sp, r7
 800e48e:	bd80      	pop	{r7, pc}

0800e490 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e490:	b580      	push	{r7, lr}
 800e492:	b082      	sub	sp, #8
 800e494:	af00      	add	r7, sp, #0
 800e496:	6078      	str	r0, [r7, #4]
 800e498:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e4a0:	b2db      	uxtb	r3, r3
 800e4a2:	3b01      	subs	r3, #1
 800e4a4:	2b02      	cmp	r3, #2
 800e4a6:	d81e      	bhi.n	800e4e6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800e4a8:	683b      	ldr	r3, [r7, #0]
 800e4aa:	88db      	ldrh	r3, [r3, #6]
 800e4ac:	2b02      	cmp	r3, #2
 800e4ae:	d004      	beq.n	800e4ba <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800e4b0:	6839      	ldr	r1, [r7, #0]
 800e4b2:	6878      	ldr	r0, [r7, #4]
 800e4b4:	f000 f890 	bl	800e5d8 <USBD_CtlError>
        break;
 800e4b8:	e01a      	b.n	800e4f0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	2201      	movs	r2, #1
 800e4be:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d005      	beq.n	800e4d6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	68db      	ldr	r3, [r3, #12]
 800e4ce:	f043 0202 	orr.w	r2, r3, #2
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	330c      	adds	r3, #12
 800e4da:	2202      	movs	r2, #2
 800e4dc:	4619      	mov	r1, r3
 800e4de:	6878      	ldr	r0, [r7, #4]
 800e4e0:	f000 f8eb 	bl	800e6ba <USBD_CtlSendData>
      break;
 800e4e4:	e004      	b.n	800e4f0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800e4e6:	6839      	ldr	r1, [r7, #0]
 800e4e8:	6878      	ldr	r0, [r7, #4]
 800e4ea:	f000 f875 	bl	800e5d8 <USBD_CtlError>
      break;
 800e4ee:	bf00      	nop
  }
}
 800e4f0:	bf00      	nop
 800e4f2:	3708      	adds	r7, #8
 800e4f4:	46bd      	mov	sp, r7
 800e4f6:	bd80      	pop	{r7, pc}

0800e4f8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e4f8:	b580      	push	{r7, lr}
 800e4fa:	b082      	sub	sp, #8
 800e4fc:	af00      	add	r7, sp, #0
 800e4fe:	6078      	str	r0, [r7, #4]
 800e500:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e502:	683b      	ldr	r3, [r7, #0]
 800e504:	885b      	ldrh	r3, [r3, #2]
 800e506:	2b01      	cmp	r3, #1
 800e508:	d106      	bne.n	800e518 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	2201      	movs	r2, #1
 800e50e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800e512:	6878      	ldr	r0, [r7, #4]
 800e514:	f000 f92b 	bl	800e76e <USBD_CtlSendStatus>
  }
}
 800e518:	bf00      	nop
 800e51a:	3708      	adds	r7, #8
 800e51c:	46bd      	mov	sp, r7
 800e51e:	bd80      	pop	{r7, pc}

0800e520 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e520:	b580      	push	{r7, lr}
 800e522:	b082      	sub	sp, #8
 800e524:	af00      	add	r7, sp, #0
 800e526:	6078      	str	r0, [r7, #4]
 800e528:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e530:	b2db      	uxtb	r3, r3
 800e532:	3b01      	subs	r3, #1
 800e534:	2b02      	cmp	r3, #2
 800e536:	d80b      	bhi.n	800e550 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e538:	683b      	ldr	r3, [r7, #0]
 800e53a:	885b      	ldrh	r3, [r3, #2]
 800e53c:	2b01      	cmp	r3, #1
 800e53e:	d10c      	bne.n	800e55a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	2200      	movs	r2, #0
 800e544:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800e548:	6878      	ldr	r0, [r7, #4]
 800e54a:	f000 f910 	bl	800e76e <USBD_CtlSendStatus>
      }
      break;
 800e54e:	e004      	b.n	800e55a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800e550:	6839      	ldr	r1, [r7, #0]
 800e552:	6878      	ldr	r0, [r7, #4]
 800e554:	f000 f840 	bl	800e5d8 <USBD_CtlError>
      break;
 800e558:	e000      	b.n	800e55c <USBD_ClrFeature+0x3c>
      break;
 800e55a:	bf00      	nop
  }
}
 800e55c:	bf00      	nop
 800e55e:	3708      	adds	r7, #8
 800e560:	46bd      	mov	sp, r7
 800e562:	bd80      	pop	{r7, pc}

0800e564 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800e564:	b580      	push	{r7, lr}
 800e566:	b084      	sub	sp, #16
 800e568:	af00      	add	r7, sp, #0
 800e56a:	6078      	str	r0, [r7, #4]
 800e56c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800e56e:	683b      	ldr	r3, [r7, #0]
 800e570:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	781a      	ldrb	r2, [r3, #0]
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	3301      	adds	r3, #1
 800e57e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800e580:	68fb      	ldr	r3, [r7, #12]
 800e582:	781a      	ldrb	r2, [r3, #0]
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	3301      	adds	r3, #1
 800e58c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800e58e:	68f8      	ldr	r0, [r7, #12]
 800e590:	f7ff fa91 	bl	800dab6 <SWAPBYTE>
 800e594:	4603      	mov	r3, r0
 800e596:	461a      	mov	r2, r3
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	3301      	adds	r3, #1
 800e5a0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	3301      	adds	r3, #1
 800e5a6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800e5a8:	68f8      	ldr	r0, [r7, #12]
 800e5aa:	f7ff fa84 	bl	800dab6 <SWAPBYTE>
 800e5ae:	4603      	mov	r3, r0
 800e5b0:	461a      	mov	r2, r3
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800e5b6:	68fb      	ldr	r3, [r7, #12]
 800e5b8:	3301      	adds	r3, #1
 800e5ba:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e5bc:	68fb      	ldr	r3, [r7, #12]
 800e5be:	3301      	adds	r3, #1
 800e5c0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800e5c2:	68f8      	ldr	r0, [r7, #12]
 800e5c4:	f7ff fa77 	bl	800dab6 <SWAPBYTE>
 800e5c8:	4603      	mov	r3, r0
 800e5ca:	461a      	mov	r2, r3
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	80da      	strh	r2, [r3, #6]
}
 800e5d0:	bf00      	nop
 800e5d2:	3710      	adds	r7, #16
 800e5d4:	46bd      	mov	sp, r7
 800e5d6:	bd80      	pop	{r7, pc}

0800e5d8 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e5d8:	b580      	push	{r7, lr}
 800e5da:	b082      	sub	sp, #8
 800e5dc:	af00      	add	r7, sp, #0
 800e5de:	6078      	str	r0, [r7, #4]
 800e5e0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800e5e2:	2180      	movs	r1, #128	; 0x80
 800e5e4:	6878      	ldr	r0, [r7, #4]
 800e5e6:	f003 fae7 	bl	8011bb8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800e5ea:	2100      	movs	r1, #0
 800e5ec:	6878      	ldr	r0, [r7, #4]
 800e5ee:	f003 fae3 	bl	8011bb8 <USBD_LL_StallEP>
}
 800e5f2:	bf00      	nop
 800e5f4:	3708      	adds	r7, #8
 800e5f6:	46bd      	mov	sp, r7
 800e5f8:	bd80      	pop	{r7, pc}

0800e5fa <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800e5fa:	b580      	push	{r7, lr}
 800e5fc:	b086      	sub	sp, #24
 800e5fe:	af00      	add	r7, sp, #0
 800e600:	60f8      	str	r0, [r7, #12]
 800e602:	60b9      	str	r1, [r7, #8]
 800e604:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800e606:	2300      	movs	r3, #0
 800e608:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	d036      	beq.n	800e67e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800e614:	6938      	ldr	r0, [r7, #16]
 800e616:	f000 f836 	bl	800e686 <USBD_GetLen>
 800e61a:	4603      	mov	r3, r0
 800e61c:	3301      	adds	r3, #1
 800e61e:	b29b      	uxth	r3, r3
 800e620:	005b      	lsls	r3, r3, #1
 800e622:	b29a      	uxth	r2, r3
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800e628:	7dfb      	ldrb	r3, [r7, #23]
 800e62a:	68ba      	ldr	r2, [r7, #8]
 800e62c:	4413      	add	r3, r2
 800e62e:	687a      	ldr	r2, [r7, #4]
 800e630:	7812      	ldrb	r2, [r2, #0]
 800e632:	701a      	strb	r2, [r3, #0]
  idx++;
 800e634:	7dfb      	ldrb	r3, [r7, #23]
 800e636:	3301      	adds	r3, #1
 800e638:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800e63a:	7dfb      	ldrb	r3, [r7, #23]
 800e63c:	68ba      	ldr	r2, [r7, #8]
 800e63e:	4413      	add	r3, r2
 800e640:	2203      	movs	r2, #3
 800e642:	701a      	strb	r2, [r3, #0]
  idx++;
 800e644:	7dfb      	ldrb	r3, [r7, #23]
 800e646:	3301      	adds	r3, #1
 800e648:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800e64a:	e013      	b.n	800e674 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800e64c:	7dfb      	ldrb	r3, [r7, #23]
 800e64e:	68ba      	ldr	r2, [r7, #8]
 800e650:	4413      	add	r3, r2
 800e652:	693a      	ldr	r2, [r7, #16]
 800e654:	7812      	ldrb	r2, [r2, #0]
 800e656:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800e658:	693b      	ldr	r3, [r7, #16]
 800e65a:	3301      	adds	r3, #1
 800e65c:	613b      	str	r3, [r7, #16]
    idx++;
 800e65e:	7dfb      	ldrb	r3, [r7, #23]
 800e660:	3301      	adds	r3, #1
 800e662:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800e664:	7dfb      	ldrb	r3, [r7, #23]
 800e666:	68ba      	ldr	r2, [r7, #8]
 800e668:	4413      	add	r3, r2
 800e66a:	2200      	movs	r2, #0
 800e66c:	701a      	strb	r2, [r3, #0]
    idx++;
 800e66e:	7dfb      	ldrb	r3, [r7, #23]
 800e670:	3301      	adds	r3, #1
 800e672:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800e674:	693b      	ldr	r3, [r7, #16]
 800e676:	781b      	ldrb	r3, [r3, #0]
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d1e7      	bne.n	800e64c <USBD_GetString+0x52>
 800e67c:	e000      	b.n	800e680 <USBD_GetString+0x86>
    return;
 800e67e:	bf00      	nop
  }
}
 800e680:	3718      	adds	r7, #24
 800e682:	46bd      	mov	sp, r7
 800e684:	bd80      	pop	{r7, pc}

0800e686 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800e686:	b480      	push	{r7}
 800e688:	b085      	sub	sp, #20
 800e68a:	af00      	add	r7, sp, #0
 800e68c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800e68e:	2300      	movs	r3, #0
 800e690:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800e696:	e005      	b.n	800e6a4 <USBD_GetLen+0x1e>
  {
    len++;
 800e698:	7bfb      	ldrb	r3, [r7, #15]
 800e69a:	3301      	adds	r3, #1
 800e69c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800e69e:	68bb      	ldr	r3, [r7, #8]
 800e6a0:	3301      	adds	r3, #1
 800e6a2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800e6a4:	68bb      	ldr	r3, [r7, #8]
 800e6a6:	781b      	ldrb	r3, [r3, #0]
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	d1f5      	bne.n	800e698 <USBD_GetLen+0x12>
  }

  return len;
 800e6ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800e6ae:	4618      	mov	r0, r3
 800e6b0:	3714      	adds	r7, #20
 800e6b2:	46bd      	mov	sp, r7
 800e6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6b8:	4770      	bx	lr

0800e6ba <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800e6ba:	b580      	push	{r7, lr}
 800e6bc:	b084      	sub	sp, #16
 800e6be:	af00      	add	r7, sp, #0
 800e6c0:	60f8      	str	r0, [r7, #12]
 800e6c2:	60b9      	str	r1, [r7, #8]
 800e6c4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e6c6:	68fb      	ldr	r3, [r7, #12]
 800e6c8:	2202      	movs	r2, #2
 800e6ca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	687a      	ldr	r2, [r7, #4]
 800e6d2:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	687a      	ldr	r2, [r7, #4]
 800e6d8:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	68ba      	ldr	r2, [r7, #8]
 800e6de:	2100      	movs	r1, #0
 800e6e0:	68f8      	ldr	r0, [r7, #12]
 800e6e2:	f003 fb37 	bl	8011d54 <USBD_LL_Transmit>

  return USBD_OK;
 800e6e6:	2300      	movs	r3, #0
}
 800e6e8:	4618      	mov	r0, r3
 800e6ea:	3710      	adds	r7, #16
 800e6ec:	46bd      	mov	sp, r7
 800e6ee:	bd80      	pop	{r7, pc}

0800e6f0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800e6f0:	b580      	push	{r7, lr}
 800e6f2:	b084      	sub	sp, #16
 800e6f4:	af00      	add	r7, sp, #0
 800e6f6:	60f8      	str	r0, [r7, #12]
 800e6f8:	60b9      	str	r1, [r7, #8]
 800e6fa:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	68ba      	ldr	r2, [r7, #8]
 800e700:	2100      	movs	r1, #0
 800e702:	68f8      	ldr	r0, [r7, #12]
 800e704:	f003 fb26 	bl	8011d54 <USBD_LL_Transmit>

  return USBD_OK;
 800e708:	2300      	movs	r3, #0
}
 800e70a:	4618      	mov	r0, r3
 800e70c:	3710      	adds	r7, #16
 800e70e:	46bd      	mov	sp, r7
 800e710:	bd80      	pop	{r7, pc}

0800e712 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800e712:	b580      	push	{r7, lr}
 800e714:	b084      	sub	sp, #16
 800e716:	af00      	add	r7, sp, #0
 800e718:	60f8      	str	r0, [r7, #12]
 800e71a:	60b9      	str	r1, [r7, #8]
 800e71c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800e71e:	68fb      	ldr	r3, [r7, #12]
 800e720:	2203      	movs	r2, #3
 800e722:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800e726:	68fb      	ldr	r3, [r7, #12]
 800e728:	687a      	ldr	r2, [r7, #4]
 800e72a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800e72e:	68fb      	ldr	r3, [r7, #12]
 800e730:	687a      	ldr	r2, [r7, #4]
 800e732:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	68ba      	ldr	r2, [r7, #8]
 800e73a:	2100      	movs	r1, #0
 800e73c:	68f8      	ldr	r0, [r7, #12]
 800e73e:	f003 fb41 	bl	8011dc4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e742:	2300      	movs	r3, #0
}
 800e744:	4618      	mov	r0, r3
 800e746:	3710      	adds	r7, #16
 800e748:	46bd      	mov	sp, r7
 800e74a:	bd80      	pop	{r7, pc}

0800e74c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800e74c:	b580      	push	{r7, lr}
 800e74e:	b084      	sub	sp, #16
 800e750:	af00      	add	r7, sp, #0
 800e752:	60f8      	str	r0, [r7, #12]
 800e754:	60b9      	str	r1, [r7, #8]
 800e756:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	68ba      	ldr	r2, [r7, #8]
 800e75c:	2100      	movs	r1, #0
 800e75e:	68f8      	ldr	r0, [r7, #12]
 800e760:	f003 fb30 	bl	8011dc4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e764:	2300      	movs	r3, #0
}
 800e766:	4618      	mov	r0, r3
 800e768:	3710      	adds	r7, #16
 800e76a:	46bd      	mov	sp, r7
 800e76c:	bd80      	pop	{r7, pc}

0800e76e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800e76e:	b580      	push	{r7, lr}
 800e770:	b082      	sub	sp, #8
 800e772:	af00      	add	r7, sp, #0
 800e774:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	2204      	movs	r2, #4
 800e77a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e77e:	2300      	movs	r3, #0
 800e780:	2200      	movs	r2, #0
 800e782:	2100      	movs	r1, #0
 800e784:	6878      	ldr	r0, [r7, #4]
 800e786:	f003 fae5 	bl	8011d54 <USBD_LL_Transmit>

  return USBD_OK;
 800e78a:	2300      	movs	r3, #0
}
 800e78c:	4618      	mov	r0, r3
 800e78e:	3708      	adds	r7, #8
 800e790:	46bd      	mov	sp, r7
 800e792:	bd80      	pop	{r7, pc}

0800e794 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800e794:	b580      	push	{r7, lr}
 800e796:	b082      	sub	sp, #8
 800e798:	af00      	add	r7, sp, #0
 800e79a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	2205      	movs	r2, #5
 800e7a0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e7a4:	2300      	movs	r3, #0
 800e7a6:	2200      	movs	r2, #0
 800e7a8:	2100      	movs	r1, #0
 800e7aa:	6878      	ldr	r0, [r7, #4]
 800e7ac:	f003 fb0a 	bl	8011dc4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e7b0:	2300      	movs	r3, #0
}
 800e7b2:	4618      	mov	r0, r3
 800e7b4:	3708      	adds	r7, #8
 800e7b6:	46bd      	mov	sp, r7
 800e7b8:	bd80      	pop	{r7, pc}
	...

0800e7bc <__NVIC_SetPriority>:
{
 800e7bc:	b480      	push	{r7}
 800e7be:	b083      	sub	sp, #12
 800e7c0:	af00      	add	r7, sp, #0
 800e7c2:	4603      	mov	r3, r0
 800e7c4:	6039      	str	r1, [r7, #0]
 800e7c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800e7c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	db0a      	blt.n	800e7e6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e7d0:	683b      	ldr	r3, [r7, #0]
 800e7d2:	b2da      	uxtb	r2, r3
 800e7d4:	490c      	ldr	r1, [pc, #48]	; (800e808 <__NVIC_SetPriority+0x4c>)
 800e7d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e7da:	0112      	lsls	r2, r2, #4
 800e7dc:	b2d2      	uxtb	r2, r2
 800e7de:	440b      	add	r3, r1
 800e7e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800e7e4:	e00a      	b.n	800e7fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e7e6:	683b      	ldr	r3, [r7, #0]
 800e7e8:	b2da      	uxtb	r2, r3
 800e7ea:	4908      	ldr	r1, [pc, #32]	; (800e80c <__NVIC_SetPriority+0x50>)
 800e7ec:	79fb      	ldrb	r3, [r7, #7]
 800e7ee:	f003 030f 	and.w	r3, r3, #15
 800e7f2:	3b04      	subs	r3, #4
 800e7f4:	0112      	lsls	r2, r2, #4
 800e7f6:	b2d2      	uxtb	r2, r2
 800e7f8:	440b      	add	r3, r1
 800e7fa:	761a      	strb	r2, [r3, #24]
}
 800e7fc:	bf00      	nop
 800e7fe:	370c      	adds	r7, #12
 800e800:	46bd      	mov	sp, r7
 800e802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e806:	4770      	bx	lr
 800e808:	e000e100 	.word	0xe000e100
 800e80c:	e000ed00 	.word	0xe000ed00

0800e810 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800e810:	b580      	push	{r7, lr}
 800e812:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800e814:	4b05      	ldr	r3, [pc, #20]	; (800e82c <SysTick_Handler+0x1c>)
 800e816:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800e818:	f001 fcfe 	bl	8010218 <xTaskGetSchedulerState>
 800e81c:	4603      	mov	r3, r0
 800e81e:	2b01      	cmp	r3, #1
 800e820:	d001      	beq.n	800e826 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800e822:	f002 fae9 	bl	8010df8 <xPortSysTickHandler>
  }
}
 800e826:	bf00      	nop
 800e828:	bd80      	pop	{r7, pc}
 800e82a:	bf00      	nop
 800e82c:	e000e010 	.word	0xe000e010

0800e830 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800e830:	b580      	push	{r7, lr}
 800e832:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800e834:	2100      	movs	r1, #0
 800e836:	f06f 0004 	mvn.w	r0, #4
 800e83a:	f7ff ffbf 	bl	800e7bc <__NVIC_SetPriority>
#endif
}
 800e83e:	bf00      	nop
 800e840:	bd80      	pop	{r7, pc}
	...

0800e844 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800e844:	b480      	push	{r7}
 800e846:	b083      	sub	sp, #12
 800e848:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e84a:	f3ef 8305 	mrs	r3, IPSR
 800e84e:	603b      	str	r3, [r7, #0]
  return(result);
 800e850:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e852:	2b00      	cmp	r3, #0
 800e854:	d003      	beq.n	800e85e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800e856:	f06f 0305 	mvn.w	r3, #5
 800e85a:	607b      	str	r3, [r7, #4]
 800e85c:	e00c      	b.n	800e878 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800e85e:	4b0a      	ldr	r3, [pc, #40]	; (800e888 <osKernelInitialize+0x44>)
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	2b00      	cmp	r3, #0
 800e864:	d105      	bne.n	800e872 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800e866:	4b08      	ldr	r3, [pc, #32]	; (800e888 <osKernelInitialize+0x44>)
 800e868:	2201      	movs	r2, #1
 800e86a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800e86c:	2300      	movs	r3, #0
 800e86e:	607b      	str	r3, [r7, #4]
 800e870:	e002      	b.n	800e878 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800e872:	f04f 33ff 	mov.w	r3, #4294967295
 800e876:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800e878:	687b      	ldr	r3, [r7, #4]
}
 800e87a:	4618      	mov	r0, r3
 800e87c:	370c      	adds	r7, #12
 800e87e:	46bd      	mov	sp, r7
 800e880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e884:	4770      	bx	lr
 800e886:	bf00      	nop
 800e888:	20001ac4 	.word	0x20001ac4

0800e88c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800e88c:	b580      	push	{r7, lr}
 800e88e:	b082      	sub	sp, #8
 800e890:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e892:	f3ef 8305 	mrs	r3, IPSR
 800e896:	603b      	str	r3, [r7, #0]
  return(result);
 800e898:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d003      	beq.n	800e8a6 <osKernelStart+0x1a>
    stat = osErrorISR;
 800e89e:	f06f 0305 	mvn.w	r3, #5
 800e8a2:	607b      	str	r3, [r7, #4]
 800e8a4:	e010      	b.n	800e8c8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800e8a6:	4b0b      	ldr	r3, [pc, #44]	; (800e8d4 <osKernelStart+0x48>)
 800e8a8:	681b      	ldr	r3, [r3, #0]
 800e8aa:	2b01      	cmp	r3, #1
 800e8ac:	d109      	bne.n	800e8c2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800e8ae:	f7ff ffbf 	bl	800e830 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800e8b2:	4b08      	ldr	r3, [pc, #32]	; (800e8d4 <osKernelStart+0x48>)
 800e8b4:	2202      	movs	r2, #2
 800e8b6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800e8b8:	f001 f866 	bl	800f988 <vTaskStartScheduler>
      stat = osOK;
 800e8bc:	2300      	movs	r3, #0
 800e8be:	607b      	str	r3, [r7, #4]
 800e8c0:	e002      	b.n	800e8c8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800e8c2:	f04f 33ff 	mov.w	r3, #4294967295
 800e8c6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800e8c8:	687b      	ldr	r3, [r7, #4]
}
 800e8ca:	4618      	mov	r0, r3
 800e8cc:	3708      	adds	r7, #8
 800e8ce:	46bd      	mov	sp, r7
 800e8d0:	bd80      	pop	{r7, pc}
 800e8d2:	bf00      	nop
 800e8d4:	20001ac4 	.word	0x20001ac4

0800e8d8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800e8d8:	b580      	push	{r7, lr}
 800e8da:	b08e      	sub	sp, #56	; 0x38
 800e8dc:	af04      	add	r7, sp, #16
 800e8de:	60f8      	str	r0, [r7, #12]
 800e8e0:	60b9      	str	r1, [r7, #8]
 800e8e2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800e8e4:	2300      	movs	r3, #0
 800e8e6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e8e8:	f3ef 8305 	mrs	r3, IPSR
 800e8ec:	617b      	str	r3, [r7, #20]
  return(result);
 800e8ee:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	d17e      	bne.n	800e9f2 <osThreadNew+0x11a>
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d07b      	beq.n	800e9f2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800e8fa:	2380      	movs	r3, #128	; 0x80
 800e8fc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800e8fe:	2318      	movs	r3, #24
 800e900:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800e902:	2300      	movs	r3, #0
 800e904:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800e906:	f04f 33ff 	mov.w	r3, #4294967295
 800e90a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d045      	beq.n	800e99e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	681b      	ldr	r3, [r3, #0]
 800e916:	2b00      	cmp	r3, #0
 800e918:	d002      	beq.n	800e920 <osThreadNew+0x48>
        name = attr->name;
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	699b      	ldr	r3, [r3, #24]
 800e924:	2b00      	cmp	r3, #0
 800e926:	d002      	beq.n	800e92e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	699b      	ldr	r3, [r3, #24]
 800e92c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800e92e:	69fb      	ldr	r3, [r7, #28]
 800e930:	2b00      	cmp	r3, #0
 800e932:	d008      	beq.n	800e946 <osThreadNew+0x6e>
 800e934:	69fb      	ldr	r3, [r7, #28]
 800e936:	2b38      	cmp	r3, #56	; 0x38
 800e938:	d805      	bhi.n	800e946 <osThreadNew+0x6e>
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	685b      	ldr	r3, [r3, #4]
 800e93e:	f003 0301 	and.w	r3, r3, #1
 800e942:	2b00      	cmp	r3, #0
 800e944:	d001      	beq.n	800e94a <osThreadNew+0x72>
        return (NULL);
 800e946:	2300      	movs	r3, #0
 800e948:	e054      	b.n	800e9f4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	695b      	ldr	r3, [r3, #20]
 800e94e:	2b00      	cmp	r3, #0
 800e950:	d003      	beq.n	800e95a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	695b      	ldr	r3, [r3, #20]
 800e956:	089b      	lsrs	r3, r3, #2
 800e958:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	689b      	ldr	r3, [r3, #8]
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d00e      	beq.n	800e980 <osThreadNew+0xa8>
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	68db      	ldr	r3, [r3, #12]
 800e966:	2b5b      	cmp	r3, #91	; 0x5b
 800e968:	d90a      	bls.n	800e980 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d006      	beq.n	800e980 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	695b      	ldr	r3, [r3, #20]
 800e976:	2b00      	cmp	r3, #0
 800e978:	d002      	beq.n	800e980 <osThreadNew+0xa8>
        mem = 1;
 800e97a:	2301      	movs	r3, #1
 800e97c:	61bb      	str	r3, [r7, #24]
 800e97e:	e010      	b.n	800e9a2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	689b      	ldr	r3, [r3, #8]
 800e984:	2b00      	cmp	r3, #0
 800e986:	d10c      	bne.n	800e9a2 <osThreadNew+0xca>
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	68db      	ldr	r3, [r3, #12]
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d108      	bne.n	800e9a2 <osThreadNew+0xca>
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	691b      	ldr	r3, [r3, #16]
 800e994:	2b00      	cmp	r3, #0
 800e996:	d104      	bne.n	800e9a2 <osThreadNew+0xca>
          mem = 0;
 800e998:	2300      	movs	r3, #0
 800e99a:	61bb      	str	r3, [r7, #24]
 800e99c:	e001      	b.n	800e9a2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800e99e:	2300      	movs	r3, #0
 800e9a0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800e9a2:	69bb      	ldr	r3, [r7, #24]
 800e9a4:	2b01      	cmp	r3, #1
 800e9a6:	d110      	bne.n	800e9ca <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800e9ac:	687a      	ldr	r2, [r7, #4]
 800e9ae:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e9b0:	9202      	str	r2, [sp, #8]
 800e9b2:	9301      	str	r3, [sp, #4]
 800e9b4:	69fb      	ldr	r3, [r7, #28]
 800e9b6:	9300      	str	r3, [sp, #0]
 800e9b8:	68bb      	ldr	r3, [r7, #8]
 800e9ba:	6a3a      	ldr	r2, [r7, #32]
 800e9bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e9be:	68f8      	ldr	r0, [r7, #12]
 800e9c0:	f000 fe0c 	bl	800f5dc <xTaskCreateStatic>
 800e9c4:	4603      	mov	r3, r0
 800e9c6:	613b      	str	r3, [r7, #16]
 800e9c8:	e013      	b.n	800e9f2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800e9ca:	69bb      	ldr	r3, [r7, #24]
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d110      	bne.n	800e9f2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800e9d0:	6a3b      	ldr	r3, [r7, #32]
 800e9d2:	b29a      	uxth	r2, r3
 800e9d4:	f107 0310 	add.w	r3, r7, #16
 800e9d8:	9301      	str	r3, [sp, #4]
 800e9da:	69fb      	ldr	r3, [r7, #28]
 800e9dc:	9300      	str	r3, [sp, #0]
 800e9de:	68bb      	ldr	r3, [r7, #8]
 800e9e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e9e2:	68f8      	ldr	r0, [r7, #12]
 800e9e4:	f000 fe57 	bl	800f696 <xTaskCreate>
 800e9e8:	4603      	mov	r3, r0
 800e9ea:	2b01      	cmp	r3, #1
 800e9ec:	d001      	beq.n	800e9f2 <osThreadNew+0x11a>
            hTask = NULL;
 800e9ee:	2300      	movs	r3, #0
 800e9f0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800e9f2:	693b      	ldr	r3, [r7, #16]
}
 800e9f4:	4618      	mov	r0, r3
 800e9f6:	3728      	adds	r7, #40	; 0x28
 800e9f8:	46bd      	mov	sp, r7
 800e9fa:	bd80      	pop	{r7, pc}

0800e9fc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800e9fc:	b580      	push	{r7, lr}
 800e9fe:	b084      	sub	sp, #16
 800ea00:	af00      	add	r7, sp, #0
 800ea02:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ea04:	f3ef 8305 	mrs	r3, IPSR
 800ea08:	60bb      	str	r3, [r7, #8]
  return(result);
 800ea0a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	d003      	beq.n	800ea18 <osDelay+0x1c>
    stat = osErrorISR;
 800ea10:	f06f 0305 	mvn.w	r3, #5
 800ea14:	60fb      	str	r3, [r7, #12]
 800ea16:	e007      	b.n	800ea28 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800ea18:	2300      	movs	r3, #0
 800ea1a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d002      	beq.n	800ea28 <osDelay+0x2c>
      vTaskDelay(ticks);
 800ea22:	6878      	ldr	r0, [r7, #4]
 800ea24:	f000 ff7c 	bl	800f920 <vTaskDelay>
    }
  }

  return (stat);
 800ea28:	68fb      	ldr	r3, [r7, #12]
}
 800ea2a:	4618      	mov	r0, r3
 800ea2c:	3710      	adds	r7, #16
 800ea2e:	46bd      	mov	sp, r7
 800ea30:	bd80      	pop	{r7, pc}
	...

0800ea34 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800ea34:	b480      	push	{r7}
 800ea36:	b085      	sub	sp, #20
 800ea38:	af00      	add	r7, sp, #0
 800ea3a:	60f8      	str	r0, [r7, #12]
 800ea3c:	60b9      	str	r1, [r7, #8]
 800ea3e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800ea40:	68fb      	ldr	r3, [r7, #12]
 800ea42:	4a07      	ldr	r2, [pc, #28]	; (800ea60 <vApplicationGetIdleTaskMemory+0x2c>)
 800ea44:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800ea46:	68bb      	ldr	r3, [r7, #8]
 800ea48:	4a06      	ldr	r2, [pc, #24]	; (800ea64 <vApplicationGetIdleTaskMemory+0x30>)
 800ea4a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	2280      	movs	r2, #128	; 0x80
 800ea50:	601a      	str	r2, [r3, #0]
}
 800ea52:	bf00      	nop
 800ea54:	3714      	adds	r7, #20
 800ea56:	46bd      	mov	sp, r7
 800ea58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea5c:	4770      	bx	lr
 800ea5e:	bf00      	nop
 800ea60:	20001ac8 	.word	0x20001ac8
 800ea64:	20001b24 	.word	0x20001b24

0800ea68 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800ea68:	b480      	push	{r7}
 800ea6a:	b085      	sub	sp, #20
 800ea6c:	af00      	add	r7, sp, #0
 800ea6e:	60f8      	str	r0, [r7, #12]
 800ea70:	60b9      	str	r1, [r7, #8]
 800ea72:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	4a07      	ldr	r2, [pc, #28]	; (800ea94 <vApplicationGetTimerTaskMemory+0x2c>)
 800ea78:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800ea7a:	68bb      	ldr	r3, [r7, #8]
 800ea7c:	4a06      	ldr	r2, [pc, #24]	; (800ea98 <vApplicationGetTimerTaskMemory+0x30>)
 800ea7e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ea86:	601a      	str	r2, [r3, #0]
}
 800ea88:	bf00      	nop
 800ea8a:	3714      	adds	r7, #20
 800ea8c:	46bd      	mov	sp, r7
 800ea8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea92:	4770      	bx	lr
 800ea94:	20001d24 	.word	0x20001d24
 800ea98:	20001d80 	.word	0x20001d80

0800ea9c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ea9c:	b480      	push	{r7}
 800ea9e:	b083      	sub	sp, #12
 800eaa0:	af00      	add	r7, sp, #0
 800eaa2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	f103 0208 	add.w	r2, r3, #8
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	f04f 32ff 	mov.w	r2, #4294967295
 800eab4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	f103 0208 	add.w	r2, r3, #8
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	f103 0208 	add.w	r2, r3, #8
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	2200      	movs	r2, #0
 800eace:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ead0:	bf00      	nop
 800ead2:	370c      	adds	r7, #12
 800ead4:	46bd      	mov	sp, r7
 800ead6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eada:	4770      	bx	lr

0800eadc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800eadc:	b480      	push	{r7}
 800eade:	b083      	sub	sp, #12
 800eae0:	af00      	add	r7, sp, #0
 800eae2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	2200      	movs	r2, #0
 800eae8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800eaea:	bf00      	nop
 800eaec:	370c      	adds	r7, #12
 800eaee:	46bd      	mov	sp, r7
 800eaf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaf4:	4770      	bx	lr

0800eaf6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800eaf6:	b480      	push	{r7}
 800eaf8:	b085      	sub	sp, #20
 800eafa:	af00      	add	r7, sp, #0
 800eafc:	6078      	str	r0, [r7, #4]
 800eafe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	685b      	ldr	r3, [r3, #4]
 800eb04:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800eb06:	683b      	ldr	r3, [r7, #0]
 800eb08:	68fa      	ldr	r2, [r7, #12]
 800eb0a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800eb0c:	68fb      	ldr	r3, [r7, #12]
 800eb0e:	689a      	ldr	r2, [r3, #8]
 800eb10:	683b      	ldr	r3, [r7, #0]
 800eb12:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	689b      	ldr	r3, [r3, #8]
 800eb18:	683a      	ldr	r2, [r7, #0]
 800eb1a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800eb1c:	68fb      	ldr	r3, [r7, #12]
 800eb1e:	683a      	ldr	r2, [r7, #0]
 800eb20:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800eb22:	683b      	ldr	r3, [r7, #0]
 800eb24:	687a      	ldr	r2, [r7, #4]
 800eb26:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	1c5a      	adds	r2, r3, #1
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	601a      	str	r2, [r3, #0]
}
 800eb32:	bf00      	nop
 800eb34:	3714      	adds	r7, #20
 800eb36:	46bd      	mov	sp, r7
 800eb38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb3c:	4770      	bx	lr

0800eb3e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800eb3e:	b480      	push	{r7}
 800eb40:	b085      	sub	sp, #20
 800eb42:	af00      	add	r7, sp, #0
 800eb44:	6078      	str	r0, [r7, #4]
 800eb46:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800eb48:	683b      	ldr	r3, [r7, #0]
 800eb4a:	681b      	ldr	r3, [r3, #0]
 800eb4c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800eb4e:	68bb      	ldr	r3, [r7, #8]
 800eb50:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb54:	d103      	bne.n	800eb5e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	691b      	ldr	r3, [r3, #16]
 800eb5a:	60fb      	str	r3, [r7, #12]
 800eb5c:	e00c      	b.n	800eb78 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	3308      	adds	r3, #8
 800eb62:	60fb      	str	r3, [r7, #12]
 800eb64:	e002      	b.n	800eb6c <vListInsert+0x2e>
 800eb66:	68fb      	ldr	r3, [r7, #12]
 800eb68:	685b      	ldr	r3, [r3, #4]
 800eb6a:	60fb      	str	r3, [r7, #12]
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	685b      	ldr	r3, [r3, #4]
 800eb70:	681b      	ldr	r3, [r3, #0]
 800eb72:	68ba      	ldr	r2, [r7, #8]
 800eb74:	429a      	cmp	r2, r3
 800eb76:	d2f6      	bcs.n	800eb66 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800eb78:	68fb      	ldr	r3, [r7, #12]
 800eb7a:	685a      	ldr	r2, [r3, #4]
 800eb7c:	683b      	ldr	r3, [r7, #0]
 800eb7e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800eb80:	683b      	ldr	r3, [r7, #0]
 800eb82:	685b      	ldr	r3, [r3, #4]
 800eb84:	683a      	ldr	r2, [r7, #0]
 800eb86:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800eb88:	683b      	ldr	r3, [r7, #0]
 800eb8a:	68fa      	ldr	r2, [r7, #12]
 800eb8c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800eb8e:	68fb      	ldr	r3, [r7, #12]
 800eb90:	683a      	ldr	r2, [r7, #0]
 800eb92:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800eb94:	683b      	ldr	r3, [r7, #0]
 800eb96:	687a      	ldr	r2, [r7, #4]
 800eb98:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	681b      	ldr	r3, [r3, #0]
 800eb9e:	1c5a      	adds	r2, r3, #1
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	601a      	str	r2, [r3, #0]
}
 800eba4:	bf00      	nop
 800eba6:	3714      	adds	r7, #20
 800eba8:	46bd      	mov	sp, r7
 800ebaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebae:	4770      	bx	lr

0800ebb0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ebb0:	b480      	push	{r7}
 800ebb2:	b085      	sub	sp, #20
 800ebb4:	af00      	add	r7, sp, #0
 800ebb6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	691b      	ldr	r3, [r3, #16]
 800ebbc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	685b      	ldr	r3, [r3, #4]
 800ebc2:	687a      	ldr	r2, [r7, #4]
 800ebc4:	6892      	ldr	r2, [r2, #8]
 800ebc6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	689b      	ldr	r3, [r3, #8]
 800ebcc:	687a      	ldr	r2, [r7, #4]
 800ebce:	6852      	ldr	r2, [r2, #4]
 800ebd0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ebd2:	68fb      	ldr	r3, [r7, #12]
 800ebd4:	685b      	ldr	r3, [r3, #4]
 800ebd6:	687a      	ldr	r2, [r7, #4]
 800ebd8:	429a      	cmp	r2, r3
 800ebda:	d103      	bne.n	800ebe4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	689a      	ldr	r2, [r3, #8]
 800ebe0:	68fb      	ldr	r3, [r7, #12]
 800ebe2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	2200      	movs	r2, #0
 800ebe8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ebea:	68fb      	ldr	r3, [r7, #12]
 800ebec:	681b      	ldr	r3, [r3, #0]
 800ebee:	1e5a      	subs	r2, r3, #1
 800ebf0:	68fb      	ldr	r3, [r7, #12]
 800ebf2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	681b      	ldr	r3, [r3, #0]
}
 800ebf8:	4618      	mov	r0, r3
 800ebfa:	3714      	adds	r7, #20
 800ebfc:	46bd      	mov	sp, r7
 800ebfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec02:	4770      	bx	lr

0800ec04 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ec04:	b580      	push	{r7, lr}
 800ec06:	b084      	sub	sp, #16
 800ec08:	af00      	add	r7, sp, #0
 800ec0a:	6078      	str	r0, [r7, #4]
 800ec0c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ec12:	68fb      	ldr	r3, [r7, #12]
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	d10a      	bne.n	800ec2e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ec18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec1c:	f383 8811 	msr	BASEPRI, r3
 800ec20:	f3bf 8f6f 	isb	sy
 800ec24:	f3bf 8f4f 	dsb	sy
 800ec28:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800ec2a:	bf00      	nop
 800ec2c:	e7fe      	b.n	800ec2c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800ec2e:	f002 f851 	bl	8010cd4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ec32:	68fb      	ldr	r3, [r7, #12]
 800ec34:	681a      	ldr	r2, [r3, #0]
 800ec36:	68fb      	ldr	r3, [r7, #12]
 800ec38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ec3a:	68f9      	ldr	r1, [r7, #12]
 800ec3c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ec3e:	fb01 f303 	mul.w	r3, r1, r3
 800ec42:	441a      	add	r2, r3
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ec48:	68fb      	ldr	r3, [r7, #12]
 800ec4a:	2200      	movs	r2, #0
 800ec4c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ec4e:	68fb      	ldr	r3, [r7, #12]
 800ec50:	681a      	ldr	r2, [r3, #0]
 800ec52:	68fb      	ldr	r3, [r7, #12]
 800ec54:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ec56:	68fb      	ldr	r3, [r7, #12]
 800ec58:	681a      	ldr	r2, [r3, #0]
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ec5e:	3b01      	subs	r3, #1
 800ec60:	68f9      	ldr	r1, [r7, #12]
 800ec62:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ec64:	fb01 f303 	mul.w	r3, r1, r3
 800ec68:	441a      	add	r2, r3
 800ec6a:	68fb      	ldr	r3, [r7, #12]
 800ec6c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ec6e:	68fb      	ldr	r3, [r7, #12]
 800ec70:	22ff      	movs	r2, #255	; 0xff
 800ec72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	22ff      	movs	r2, #255	; 0xff
 800ec7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800ec7e:	683b      	ldr	r3, [r7, #0]
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	d114      	bne.n	800ecae <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	691b      	ldr	r3, [r3, #16]
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d01a      	beq.n	800ecc2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	3310      	adds	r3, #16
 800ec90:	4618      	mov	r0, r3
 800ec92:	f001 f903 	bl	800fe9c <xTaskRemoveFromEventList>
 800ec96:	4603      	mov	r3, r0
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	d012      	beq.n	800ecc2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ec9c:	4b0c      	ldr	r3, [pc, #48]	; (800ecd0 <xQueueGenericReset+0xcc>)
 800ec9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eca2:	601a      	str	r2, [r3, #0]
 800eca4:	f3bf 8f4f 	dsb	sy
 800eca8:	f3bf 8f6f 	isb	sy
 800ecac:	e009      	b.n	800ecc2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ecae:	68fb      	ldr	r3, [r7, #12]
 800ecb0:	3310      	adds	r3, #16
 800ecb2:	4618      	mov	r0, r3
 800ecb4:	f7ff fef2 	bl	800ea9c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ecb8:	68fb      	ldr	r3, [r7, #12]
 800ecba:	3324      	adds	r3, #36	; 0x24
 800ecbc:	4618      	mov	r0, r3
 800ecbe:	f7ff feed 	bl	800ea9c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ecc2:	f002 f837 	bl	8010d34 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ecc6:	2301      	movs	r3, #1
}
 800ecc8:	4618      	mov	r0, r3
 800ecca:	3710      	adds	r7, #16
 800eccc:	46bd      	mov	sp, r7
 800ecce:	bd80      	pop	{r7, pc}
 800ecd0:	e000ed04 	.word	0xe000ed04

0800ecd4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ecd4:	b580      	push	{r7, lr}
 800ecd6:	b08e      	sub	sp, #56	; 0x38
 800ecd8:	af02      	add	r7, sp, #8
 800ecda:	60f8      	str	r0, [r7, #12]
 800ecdc:	60b9      	str	r1, [r7, #8]
 800ecde:	607a      	str	r2, [r7, #4]
 800ece0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	d10a      	bne.n	800ecfe <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800ece8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecec:	f383 8811 	msr	BASEPRI, r3
 800ecf0:	f3bf 8f6f 	isb	sy
 800ecf4:	f3bf 8f4f 	dsb	sy
 800ecf8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ecfa:	bf00      	nop
 800ecfc:	e7fe      	b.n	800ecfc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ecfe:	683b      	ldr	r3, [r7, #0]
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	d10a      	bne.n	800ed1a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800ed04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed08:	f383 8811 	msr	BASEPRI, r3
 800ed0c:	f3bf 8f6f 	isb	sy
 800ed10:	f3bf 8f4f 	dsb	sy
 800ed14:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ed16:	bf00      	nop
 800ed18:	e7fe      	b.n	800ed18 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	d002      	beq.n	800ed26 <xQueueGenericCreateStatic+0x52>
 800ed20:	68bb      	ldr	r3, [r7, #8]
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d001      	beq.n	800ed2a <xQueueGenericCreateStatic+0x56>
 800ed26:	2301      	movs	r3, #1
 800ed28:	e000      	b.n	800ed2c <xQueueGenericCreateStatic+0x58>
 800ed2a:	2300      	movs	r3, #0
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	d10a      	bne.n	800ed46 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800ed30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed34:	f383 8811 	msr	BASEPRI, r3
 800ed38:	f3bf 8f6f 	isb	sy
 800ed3c:	f3bf 8f4f 	dsb	sy
 800ed40:	623b      	str	r3, [r7, #32]
}
 800ed42:	bf00      	nop
 800ed44:	e7fe      	b.n	800ed44 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d102      	bne.n	800ed52 <xQueueGenericCreateStatic+0x7e>
 800ed4c:	68bb      	ldr	r3, [r7, #8]
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	d101      	bne.n	800ed56 <xQueueGenericCreateStatic+0x82>
 800ed52:	2301      	movs	r3, #1
 800ed54:	e000      	b.n	800ed58 <xQueueGenericCreateStatic+0x84>
 800ed56:	2300      	movs	r3, #0
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d10a      	bne.n	800ed72 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800ed5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed60:	f383 8811 	msr	BASEPRI, r3
 800ed64:	f3bf 8f6f 	isb	sy
 800ed68:	f3bf 8f4f 	dsb	sy
 800ed6c:	61fb      	str	r3, [r7, #28]
}
 800ed6e:	bf00      	nop
 800ed70:	e7fe      	b.n	800ed70 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ed72:	2350      	movs	r3, #80	; 0x50
 800ed74:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ed76:	697b      	ldr	r3, [r7, #20]
 800ed78:	2b50      	cmp	r3, #80	; 0x50
 800ed7a:	d00a      	beq.n	800ed92 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800ed7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed80:	f383 8811 	msr	BASEPRI, r3
 800ed84:	f3bf 8f6f 	isb	sy
 800ed88:	f3bf 8f4f 	dsb	sy
 800ed8c:	61bb      	str	r3, [r7, #24]
}
 800ed8e:	bf00      	nop
 800ed90:	e7fe      	b.n	800ed90 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ed92:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ed94:	683b      	ldr	r3, [r7, #0]
 800ed96:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800ed98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	d00d      	beq.n	800edba <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ed9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eda0:	2201      	movs	r2, #1
 800eda2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800eda6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800edaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edac:	9300      	str	r3, [sp, #0]
 800edae:	4613      	mov	r3, r2
 800edb0:	687a      	ldr	r2, [r7, #4]
 800edb2:	68b9      	ldr	r1, [r7, #8]
 800edb4:	68f8      	ldr	r0, [r7, #12]
 800edb6:	f000 f805 	bl	800edc4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800edba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800edbc:	4618      	mov	r0, r3
 800edbe:	3730      	adds	r7, #48	; 0x30
 800edc0:	46bd      	mov	sp, r7
 800edc2:	bd80      	pop	{r7, pc}

0800edc4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800edc4:	b580      	push	{r7, lr}
 800edc6:	b084      	sub	sp, #16
 800edc8:	af00      	add	r7, sp, #0
 800edca:	60f8      	str	r0, [r7, #12]
 800edcc:	60b9      	str	r1, [r7, #8]
 800edce:	607a      	str	r2, [r7, #4]
 800edd0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800edd2:	68bb      	ldr	r3, [r7, #8]
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	d103      	bne.n	800ede0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800edd8:	69bb      	ldr	r3, [r7, #24]
 800edda:	69ba      	ldr	r2, [r7, #24]
 800eddc:	601a      	str	r2, [r3, #0]
 800edde:	e002      	b.n	800ede6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ede0:	69bb      	ldr	r3, [r7, #24]
 800ede2:	687a      	ldr	r2, [r7, #4]
 800ede4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ede6:	69bb      	ldr	r3, [r7, #24]
 800ede8:	68fa      	ldr	r2, [r7, #12]
 800edea:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800edec:	69bb      	ldr	r3, [r7, #24]
 800edee:	68ba      	ldr	r2, [r7, #8]
 800edf0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800edf2:	2101      	movs	r1, #1
 800edf4:	69b8      	ldr	r0, [r7, #24]
 800edf6:	f7ff ff05 	bl	800ec04 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800edfa:	69bb      	ldr	r3, [r7, #24]
 800edfc:	78fa      	ldrb	r2, [r7, #3]
 800edfe:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ee02:	bf00      	nop
 800ee04:	3710      	adds	r7, #16
 800ee06:	46bd      	mov	sp, r7
 800ee08:	bd80      	pop	{r7, pc}
	...

0800ee0c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ee0c:	b580      	push	{r7, lr}
 800ee0e:	b08e      	sub	sp, #56	; 0x38
 800ee10:	af00      	add	r7, sp, #0
 800ee12:	60f8      	str	r0, [r7, #12]
 800ee14:	60b9      	str	r1, [r7, #8]
 800ee16:	607a      	str	r2, [r7, #4]
 800ee18:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ee1a:	2300      	movs	r3, #0
 800ee1c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ee1e:	68fb      	ldr	r3, [r7, #12]
 800ee20:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ee22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d10a      	bne.n	800ee3e <xQueueGenericSend+0x32>
	__asm volatile
 800ee28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee2c:	f383 8811 	msr	BASEPRI, r3
 800ee30:	f3bf 8f6f 	isb	sy
 800ee34:	f3bf 8f4f 	dsb	sy
 800ee38:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ee3a:	bf00      	nop
 800ee3c:	e7fe      	b.n	800ee3c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ee3e:	68bb      	ldr	r3, [r7, #8]
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	d103      	bne.n	800ee4c <xQueueGenericSend+0x40>
 800ee44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d101      	bne.n	800ee50 <xQueueGenericSend+0x44>
 800ee4c:	2301      	movs	r3, #1
 800ee4e:	e000      	b.n	800ee52 <xQueueGenericSend+0x46>
 800ee50:	2300      	movs	r3, #0
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	d10a      	bne.n	800ee6c <xQueueGenericSend+0x60>
	__asm volatile
 800ee56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee5a:	f383 8811 	msr	BASEPRI, r3
 800ee5e:	f3bf 8f6f 	isb	sy
 800ee62:	f3bf 8f4f 	dsb	sy
 800ee66:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ee68:	bf00      	nop
 800ee6a:	e7fe      	b.n	800ee6a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ee6c:	683b      	ldr	r3, [r7, #0]
 800ee6e:	2b02      	cmp	r3, #2
 800ee70:	d103      	bne.n	800ee7a <xQueueGenericSend+0x6e>
 800ee72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ee76:	2b01      	cmp	r3, #1
 800ee78:	d101      	bne.n	800ee7e <xQueueGenericSend+0x72>
 800ee7a:	2301      	movs	r3, #1
 800ee7c:	e000      	b.n	800ee80 <xQueueGenericSend+0x74>
 800ee7e:	2300      	movs	r3, #0
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	d10a      	bne.n	800ee9a <xQueueGenericSend+0x8e>
	__asm volatile
 800ee84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee88:	f383 8811 	msr	BASEPRI, r3
 800ee8c:	f3bf 8f6f 	isb	sy
 800ee90:	f3bf 8f4f 	dsb	sy
 800ee94:	623b      	str	r3, [r7, #32]
}
 800ee96:	bf00      	nop
 800ee98:	e7fe      	b.n	800ee98 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ee9a:	f001 f9bd 	bl	8010218 <xTaskGetSchedulerState>
 800ee9e:	4603      	mov	r3, r0
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	d102      	bne.n	800eeaa <xQueueGenericSend+0x9e>
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	d101      	bne.n	800eeae <xQueueGenericSend+0xa2>
 800eeaa:	2301      	movs	r3, #1
 800eeac:	e000      	b.n	800eeb0 <xQueueGenericSend+0xa4>
 800eeae:	2300      	movs	r3, #0
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	d10a      	bne.n	800eeca <xQueueGenericSend+0xbe>
	__asm volatile
 800eeb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eeb8:	f383 8811 	msr	BASEPRI, r3
 800eebc:	f3bf 8f6f 	isb	sy
 800eec0:	f3bf 8f4f 	dsb	sy
 800eec4:	61fb      	str	r3, [r7, #28]
}
 800eec6:	bf00      	nop
 800eec8:	e7fe      	b.n	800eec8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800eeca:	f001 ff03 	bl	8010cd4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800eece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eed0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800eed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eed4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eed6:	429a      	cmp	r2, r3
 800eed8:	d302      	bcc.n	800eee0 <xQueueGenericSend+0xd4>
 800eeda:	683b      	ldr	r3, [r7, #0]
 800eedc:	2b02      	cmp	r3, #2
 800eede:	d129      	bne.n	800ef34 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800eee0:	683a      	ldr	r2, [r7, #0]
 800eee2:	68b9      	ldr	r1, [r7, #8]
 800eee4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800eee6:	f000 fa0b 	bl	800f300 <prvCopyDataToQueue>
 800eeea:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800eeec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eeee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	d010      	beq.n	800ef16 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800eef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eef6:	3324      	adds	r3, #36	; 0x24
 800eef8:	4618      	mov	r0, r3
 800eefa:	f000 ffcf 	bl	800fe9c <xTaskRemoveFromEventList>
 800eefe:	4603      	mov	r3, r0
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	d013      	beq.n	800ef2c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ef04:	4b3f      	ldr	r3, [pc, #252]	; (800f004 <xQueueGenericSend+0x1f8>)
 800ef06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ef0a:	601a      	str	r2, [r3, #0]
 800ef0c:	f3bf 8f4f 	dsb	sy
 800ef10:	f3bf 8f6f 	isb	sy
 800ef14:	e00a      	b.n	800ef2c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ef16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	d007      	beq.n	800ef2c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ef1c:	4b39      	ldr	r3, [pc, #228]	; (800f004 <xQueueGenericSend+0x1f8>)
 800ef1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ef22:	601a      	str	r2, [r3, #0]
 800ef24:	f3bf 8f4f 	dsb	sy
 800ef28:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ef2c:	f001 ff02 	bl	8010d34 <vPortExitCritical>
				return pdPASS;
 800ef30:	2301      	movs	r3, #1
 800ef32:	e063      	b.n	800effc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	d103      	bne.n	800ef42 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ef3a:	f001 fefb 	bl	8010d34 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ef3e:	2300      	movs	r3, #0
 800ef40:	e05c      	b.n	800effc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ef42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d106      	bne.n	800ef56 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ef48:	f107 0314 	add.w	r3, r7, #20
 800ef4c:	4618      	mov	r0, r3
 800ef4e:	f001 f809 	bl	800ff64 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ef52:	2301      	movs	r3, #1
 800ef54:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ef56:	f001 feed 	bl	8010d34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ef5a:	f000 fd7b 	bl	800fa54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ef5e:	f001 feb9 	bl	8010cd4 <vPortEnterCritical>
 800ef62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef64:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ef68:	b25b      	sxtb	r3, r3
 800ef6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef6e:	d103      	bne.n	800ef78 <xQueueGenericSend+0x16c>
 800ef70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef72:	2200      	movs	r2, #0
 800ef74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ef78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef7a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ef7e:	b25b      	sxtb	r3, r3
 800ef80:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef84:	d103      	bne.n	800ef8e <xQueueGenericSend+0x182>
 800ef86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef88:	2200      	movs	r2, #0
 800ef8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ef8e:	f001 fed1 	bl	8010d34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ef92:	1d3a      	adds	r2, r7, #4
 800ef94:	f107 0314 	add.w	r3, r7, #20
 800ef98:	4611      	mov	r1, r2
 800ef9a:	4618      	mov	r0, r3
 800ef9c:	f000 fff8 	bl	800ff90 <xTaskCheckForTimeOut>
 800efa0:	4603      	mov	r3, r0
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	d124      	bne.n	800eff0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800efa6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800efa8:	f000 faa2 	bl	800f4f0 <prvIsQueueFull>
 800efac:	4603      	mov	r3, r0
 800efae:	2b00      	cmp	r3, #0
 800efb0:	d018      	beq.n	800efe4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800efb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efb4:	3310      	adds	r3, #16
 800efb6:	687a      	ldr	r2, [r7, #4]
 800efb8:	4611      	mov	r1, r2
 800efba:	4618      	mov	r0, r3
 800efbc:	f000 ff1e 	bl	800fdfc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800efc0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800efc2:	f000 fa2d 	bl	800f420 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800efc6:	f000 fd53 	bl	800fa70 <xTaskResumeAll>
 800efca:	4603      	mov	r3, r0
 800efcc:	2b00      	cmp	r3, #0
 800efce:	f47f af7c 	bne.w	800eeca <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800efd2:	4b0c      	ldr	r3, [pc, #48]	; (800f004 <xQueueGenericSend+0x1f8>)
 800efd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800efd8:	601a      	str	r2, [r3, #0]
 800efda:	f3bf 8f4f 	dsb	sy
 800efde:	f3bf 8f6f 	isb	sy
 800efe2:	e772      	b.n	800eeca <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800efe4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800efe6:	f000 fa1b 	bl	800f420 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800efea:	f000 fd41 	bl	800fa70 <xTaskResumeAll>
 800efee:	e76c      	b.n	800eeca <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800eff0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800eff2:	f000 fa15 	bl	800f420 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800eff6:	f000 fd3b 	bl	800fa70 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800effa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800effc:	4618      	mov	r0, r3
 800effe:	3738      	adds	r7, #56	; 0x38
 800f000:	46bd      	mov	sp, r7
 800f002:	bd80      	pop	{r7, pc}
 800f004:	e000ed04 	.word	0xe000ed04

0800f008 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800f008:	b580      	push	{r7, lr}
 800f00a:	b090      	sub	sp, #64	; 0x40
 800f00c:	af00      	add	r7, sp, #0
 800f00e:	60f8      	str	r0, [r7, #12]
 800f010:	60b9      	str	r1, [r7, #8]
 800f012:	607a      	str	r2, [r7, #4]
 800f014:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f016:	68fb      	ldr	r3, [r7, #12]
 800f018:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800f01a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d10a      	bne.n	800f036 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800f020:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f024:	f383 8811 	msr	BASEPRI, r3
 800f028:	f3bf 8f6f 	isb	sy
 800f02c:	f3bf 8f4f 	dsb	sy
 800f030:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f032:	bf00      	nop
 800f034:	e7fe      	b.n	800f034 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f036:	68bb      	ldr	r3, [r7, #8]
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d103      	bne.n	800f044 <xQueueGenericSendFromISR+0x3c>
 800f03c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f03e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f040:	2b00      	cmp	r3, #0
 800f042:	d101      	bne.n	800f048 <xQueueGenericSendFromISR+0x40>
 800f044:	2301      	movs	r3, #1
 800f046:	e000      	b.n	800f04a <xQueueGenericSendFromISR+0x42>
 800f048:	2300      	movs	r3, #0
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d10a      	bne.n	800f064 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800f04e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f052:	f383 8811 	msr	BASEPRI, r3
 800f056:	f3bf 8f6f 	isb	sy
 800f05a:	f3bf 8f4f 	dsb	sy
 800f05e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f060:	bf00      	nop
 800f062:	e7fe      	b.n	800f062 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f064:	683b      	ldr	r3, [r7, #0]
 800f066:	2b02      	cmp	r3, #2
 800f068:	d103      	bne.n	800f072 <xQueueGenericSendFromISR+0x6a>
 800f06a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f06c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f06e:	2b01      	cmp	r3, #1
 800f070:	d101      	bne.n	800f076 <xQueueGenericSendFromISR+0x6e>
 800f072:	2301      	movs	r3, #1
 800f074:	e000      	b.n	800f078 <xQueueGenericSendFromISR+0x70>
 800f076:	2300      	movs	r3, #0
 800f078:	2b00      	cmp	r3, #0
 800f07a:	d10a      	bne.n	800f092 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800f07c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f080:	f383 8811 	msr	BASEPRI, r3
 800f084:	f3bf 8f6f 	isb	sy
 800f088:	f3bf 8f4f 	dsb	sy
 800f08c:	623b      	str	r3, [r7, #32]
}
 800f08e:	bf00      	nop
 800f090:	e7fe      	b.n	800f090 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f092:	f001 ff01 	bl	8010e98 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800f096:	f3ef 8211 	mrs	r2, BASEPRI
 800f09a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f09e:	f383 8811 	msr	BASEPRI, r3
 800f0a2:	f3bf 8f6f 	isb	sy
 800f0a6:	f3bf 8f4f 	dsb	sy
 800f0aa:	61fa      	str	r2, [r7, #28]
 800f0ac:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800f0ae:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f0b0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f0b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f0b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f0ba:	429a      	cmp	r2, r3
 800f0bc:	d302      	bcc.n	800f0c4 <xQueueGenericSendFromISR+0xbc>
 800f0be:	683b      	ldr	r3, [r7, #0]
 800f0c0:	2b02      	cmp	r3, #2
 800f0c2:	d12f      	bne.n	800f124 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800f0c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f0ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f0ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f0d2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f0d4:	683a      	ldr	r2, [r7, #0]
 800f0d6:	68b9      	ldr	r1, [r7, #8]
 800f0d8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f0da:	f000 f911 	bl	800f300 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800f0de:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800f0e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f0e6:	d112      	bne.n	800f10e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f0e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d016      	beq.n	800f11e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f0f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0f2:	3324      	adds	r3, #36	; 0x24
 800f0f4:	4618      	mov	r0, r3
 800f0f6:	f000 fed1 	bl	800fe9c <xTaskRemoveFromEventList>
 800f0fa:	4603      	mov	r3, r0
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d00e      	beq.n	800f11e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	2b00      	cmp	r3, #0
 800f104:	d00b      	beq.n	800f11e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	2201      	movs	r2, #1
 800f10a:	601a      	str	r2, [r3, #0]
 800f10c:	e007      	b.n	800f11e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800f10e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800f112:	3301      	adds	r3, #1
 800f114:	b2db      	uxtb	r3, r3
 800f116:	b25a      	sxtb	r2, r3
 800f118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f11a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800f11e:	2301      	movs	r3, #1
 800f120:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800f122:	e001      	b.n	800f128 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800f124:	2300      	movs	r3, #0
 800f126:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f128:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f12a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800f12c:	697b      	ldr	r3, [r7, #20]
 800f12e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800f132:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f134:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800f136:	4618      	mov	r0, r3
 800f138:	3740      	adds	r7, #64	; 0x40
 800f13a:	46bd      	mov	sp, r7
 800f13c:	bd80      	pop	{r7, pc}
	...

0800f140 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800f140:	b580      	push	{r7, lr}
 800f142:	b08c      	sub	sp, #48	; 0x30
 800f144:	af00      	add	r7, sp, #0
 800f146:	60f8      	str	r0, [r7, #12]
 800f148:	60b9      	str	r1, [r7, #8]
 800f14a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800f14c:	2300      	movs	r3, #0
 800f14e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f150:	68fb      	ldr	r3, [r7, #12]
 800f152:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f156:	2b00      	cmp	r3, #0
 800f158:	d10a      	bne.n	800f170 <xQueueReceive+0x30>
	__asm volatile
 800f15a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f15e:	f383 8811 	msr	BASEPRI, r3
 800f162:	f3bf 8f6f 	isb	sy
 800f166:	f3bf 8f4f 	dsb	sy
 800f16a:	623b      	str	r3, [r7, #32]
}
 800f16c:	bf00      	nop
 800f16e:	e7fe      	b.n	800f16e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f170:	68bb      	ldr	r3, [r7, #8]
 800f172:	2b00      	cmp	r3, #0
 800f174:	d103      	bne.n	800f17e <xQueueReceive+0x3e>
 800f176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	d101      	bne.n	800f182 <xQueueReceive+0x42>
 800f17e:	2301      	movs	r3, #1
 800f180:	e000      	b.n	800f184 <xQueueReceive+0x44>
 800f182:	2300      	movs	r3, #0
 800f184:	2b00      	cmp	r3, #0
 800f186:	d10a      	bne.n	800f19e <xQueueReceive+0x5e>
	__asm volatile
 800f188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f18c:	f383 8811 	msr	BASEPRI, r3
 800f190:	f3bf 8f6f 	isb	sy
 800f194:	f3bf 8f4f 	dsb	sy
 800f198:	61fb      	str	r3, [r7, #28]
}
 800f19a:	bf00      	nop
 800f19c:	e7fe      	b.n	800f19c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f19e:	f001 f83b 	bl	8010218 <xTaskGetSchedulerState>
 800f1a2:	4603      	mov	r3, r0
 800f1a4:	2b00      	cmp	r3, #0
 800f1a6:	d102      	bne.n	800f1ae <xQueueReceive+0x6e>
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	d101      	bne.n	800f1b2 <xQueueReceive+0x72>
 800f1ae:	2301      	movs	r3, #1
 800f1b0:	e000      	b.n	800f1b4 <xQueueReceive+0x74>
 800f1b2:	2300      	movs	r3, #0
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	d10a      	bne.n	800f1ce <xQueueReceive+0x8e>
	__asm volatile
 800f1b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1bc:	f383 8811 	msr	BASEPRI, r3
 800f1c0:	f3bf 8f6f 	isb	sy
 800f1c4:	f3bf 8f4f 	dsb	sy
 800f1c8:	61bb      	str	r3, [r7, #24]
}
 800f1ca:	bf00      	nop
 800f1cc:	e7fe      	b.n	800f1cc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f1ce:	f001 fd81 	bl	8010cd4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f1d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f1d6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f1d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d01f      	beq.n	800f21e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f1de:	68b9      	ldr	r1, [r7, #8]
 800f1e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f1e2:	f000 f8f7 	bl	800f3d4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f1e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1e8:	1e5a      	subs	r2, r3, #1
 800f1ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1ec:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f1ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1f0:	691b      	ldr	r3, [r3, #16]
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	d00f      	beq.n	800f216 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f1f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1f8:	3310      	adds	r3, #16
 800f1fa:	4618      	mov	r0, r3
 800f1fc:	f000 fe4e 	bl	800fe9c <xTaskRemoveFromEventList>
 800f200:	4603      	mov	r3, r0
 800f202:	2b00      	cmp	r3, #0
 800f204:	d007      	beq.n	800f216 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f206:	4b3d      	ldr	r3, [pc, #244]	; (800f2fc <xQueueReceive+0x1bc>)
 800f208:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f20c:	601a      	str	r2, [r3, #0]
 800f20e:	f3bf 8f4f 	dsb	sy
 800f212:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f216:	f001 fd8d 	bl	8010d34 <vPortExitCritical>
				return pdPASS;
 800f21a:	2301      	movs	r3, #1
 800f21c:	e069      	b.n	800f2f2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	2b00      	cmp	r3, #0
 800f222:	d103      	bne.n	800f22c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f224:	f001 fd86 	bl	8010d34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f228:	2300      	movs	r3, #0
 800f22a:	e062      	b.n	800f2f2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f22c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f22e:	2b00      	cmp	r3, #0
 800f230:	d106      	bne.n	800f240 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f232:	f107 0310 	add.w	r3, r7, #16
 800f236:	4618      	mov	r0, r3
 800f238:	f000 fe94 	bl	800ff64 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f23c:	2301      	movs	r3, #1
 800f23e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f240:	f001 fd78 	bl	8010d34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f244:	f000 fc06 	bl	800fa54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f248:	f001 fd44 	bl	8010cd4 <vPortEnterCritical>
 800f24c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f24e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f252:	b25b      	sxtb	r3, r3
 800f254:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f258:	d103      	bne.n	800f262 <xQueueReceive+0x122>
 800f25a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f25c:	2200      	movs	r2, #0
 800f25e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f264:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f268:	b25b      	sxtb	r3, r3
 800f26a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f26e:	d103      	bne.n	800f278 <xQueueReceive+0x138>
 800f270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f272:	2200      	movs	r2, #0
 800f274:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f278:	f001 fd5c 	bl	8010d34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f27c:	1d3a      	adds	r2, r7, #4
 800f27e:	f107 0310 	add.w	r3, r7, #16
 800f282:	4611      	mov	r1, r2
 800f284:	4618      	mov	r0, r3
 800f286:	f000 fe83 	bl	800ff90 <xTaskCheckForTimeOut>
 800f28a:	4603      	mov	r3, r0
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	d123      	bne.n	800f2d8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f290:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f292:	f000 f917 	bl	800f4c4 <prvIsQueueEmpty>
 800f296:	4603      	mov	r3, r0
 800f298:	2b00      	cmp	r3, #0
 800f29a:	d017      	beq.n	800f2cc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f29c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f29e:	3324      	adds	r3, #36	; 0x24
 800f2a0:	687a      	ldr	r2, [r7, #4]
 800f2a2:	4611      	mov	r1, r2
 800f2a4:	4618      	mov	r0, r3
 800f2a6:	f000 fda9 	bl	800fdfc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f2aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f2ac:	f000 f8b8 	bl	800f420 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f2b0:	f000 fbde 	bl	800fa70 <xTaskResumeAll>
 800f2b4:	4603      	mov	r3, r0
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d189      	bne.n	800f1ce <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800f2ba:	4b10      	ldr	r3, [pc, #64]	; (800f2fc <xQueueReceive+0x1bc>)
 800f2bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f2c0:	601a      	str	r2, [r3, #0]
 800f2c2:	f3bf 8f4f 	dsb	sy
 800f2c6:	f3bf 8f6f 	isb	sy
 800f2ca:	e780      	b.n	800f1ce <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800f2cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f2ce:	f000 f8a7 	bl	800f420 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f2d2:	f000 fbcd 	bl	800fa70 <xTaskResumeAll>
 800f2d6:	e77a      	b.n	800f1ce <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800f2d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f2da:	f000 f8a1 	bl	800f420 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f2de:	f000 fbc7 	bl	800fa70 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f2e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f2e4:	f000 f8ee 	bl	800f4c4 <prvIsQueueEmpty>
 800f2e8:	4603      	mov	r3, r0
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	f43f af6f 	beq.w	800f1ce <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f2f0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f2f2:	4618      	mov	r0, r3
 800f2f4:	3730      	adds	r7, #48	; 0x30
 800f2f6:	46bd      	mov	sp, r7
 800f2f8:	bd80      	pop	{r7, pc}
 800f2fa:	bf00      	nop
 800f2fc:	e000ed04 	.word	0xe000ed04

0800f300 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800f300:	b580      	push	{r7, lr}
 800f302:	b086      	sub	sp, #24
 800f304:	af00      	add	r7, sp, #0
 800f306:	60f8      	str	r0, [r7, #12]
 800f308:	60b9      	str	r1, [r7, #8]
 800f30a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800f30c:	2300      	movs	r3, #0
 800f30e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f310:	68fb      	ldr	r3, [r7, #12]
 800f312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f314:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800f316:	68fb      	ldr	r3, [r7, #12]
 800f318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	d10d      	bne.n	800f33a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f31e:	68fb      	ldr	r3, [r7, #12]
 800f320:	681b      	ldr	r3, [r3, #0]
 800f322:	2b00      	cmp	r3, #0
 800f324:	d14d      	bne.n	800f3c2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f326:	68fb      	ldr	r3, [r7, #12]
 800f328:	689b      	ldr	r3, [r3, #8]
 800f32a:	4618      	mov	r0, r3
 800f32c:	f000 ff92 	bl	8010254 <xTaskPriorityDisinherit>
 800f330:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800f332:	68fb      	ldr	r3, [r7, #12]
 800f334:	2200      	movs	r2, #0
 800f336:	609a      	str	r2, [r3, #8]
 800f338:	e043      	b.n	800f3c2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	d119      	bne.n	800f374 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f340:	68fb      	ldr	r3, [r7, #12]
 800f342:	6858      	ldr	r0, [r3, #4]
 800f344:	68fb      	ldr	r3, [r7, #12]
 800f346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f348:	461a      	mov	r2, r3
 800f34a:	68b9      	ldr	r1, [r7, #8]
 800f34c:	f002 ff50 	bl	80121f0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f350:	68fb      	ldr	r3, [r7, #12]
 800f352:	685a      	ldr	r2, [r3, #4]
 800f354:	68fb      	ldr	r3, [r7, #12]
 800f356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f358:	441a      	add	r2, r3
 800f35a:	68fb      	ldr	r3, [r7, #12]
 800f35c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f35e:	68fb      	ldr	r3, [r7, #12]
 800f360:	685a      	ldr	r2, [r3, #4]
 800f362:	68fb      	ldr	r3, [r7, #12]
 800f364:	689b      	ldr	r3, [r3, #8]
 800f366:	429a      	cmp	r2, r3
 800f368:	d32b      	bcc.n	800f3c2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800f36a:	68fb      	ldr	r3, [r7, #12]
 800f36c:	681a      	ldr	r2, [r3, #0]
 800f36e:	68fb      	ldr	r3, [r7, #12]
 800f370:	605a      	str	r2, [r3, #4]
 800f372:	e026      	b.n	800f3c2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800f374:	68fb      	ldr	r3, [r7, #12]
 800f376:	68d8      	ldr	r0, [r3, #12]
 800f378:	68fb      	ldr	r3, [r7, #12]
 800f37a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f37c:	461a      	mov	r2, r3
 800f37e:	68b9      	ldr	r1, [r7, #8]
 800f380:	f002 ff36 	bl	80121f0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800f384:	68fb      	ldr	r3, [r7, #12]
 800f386:	68da      	ldr	r2, [r3, #12]
 800f388:	68fb      	ldr	r3, [r7, #12]
 800f38a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f38c:	425b      	negs	r3, r3
 800f38e:	441a      	add	r2, r3
 800f390:	68fb      	ldr	r3, [r7, #12]
 800f392:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f394:	68fb      	ldr	r3, [r7, #12]
 800f396:	68da      	ldr	r2, [r3, #12]
 800f398:	68fb      	ldr	r3, [r7, #12]
 800f39a:	681b      	ldr	r3, [r3, #0]
 800f39c:	429a      	cmp	r2, r3
 800f39e:	d207      	bcs.n	800f3b0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800f3a0:	68fb      	ldr	r3, [r7, #12]
 800f3a2:	689a      	ldr	r2, [r3, #8]
 800f3a4:	68fb      	ldr	r3, [r7, #12]
 800f3a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f3a8:	425b      	negs	r3, r3
 800f3aa:	441a      	add	r2, r3
 800f3ac:	68fb      	ldr	r3, [r7, #12]
 800f3ae:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	2b02      	cmp	r3, #2
 800f3b4:	d105      	bne.n	800f3c2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f3b6:	693b      	ldr	r3, [r7, #16]
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	d002      	beq.n	800f3c2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800f3bc:	693b      	ldr	r3, [r7, #16]
 800f3be:	3b01      	subs	r3, #1
 800f3c0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f3c2:	693b      	ldr	r3, [r7, #16]
 800f3c4:	1c5a      	adds	r2, r3, #1
 800f3c6:	68fb      	ldr	r3, [r7, #12]
 800f3c8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800f3ca:	697b      	ldr	r3, [r7, #20]
}
 800f3cc:	4618      	mov	r0, r3
 800f3ce:	3718      	adds	r7, #24
 800f3d0:	46bd      	mov	sp, r7
 800f3d2:	bd80      	pop	{r7, pc}

0800f3d4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800f3d4:	b580      	push	{r7, lr}
 800f3d6:	b082      	sub	sp, #8
 800f3d8:	af00      	add	r7, sp, #0
 800f3da:	6078      	str	r0, [r7, #4]
 800f3dc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	d018      	beq.n	800f418 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	68da      	ldr	r2, [r3, #12]
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f3ee:	441a      	add	r2, r3
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	68da      	ldr	r2, [r3, #12]
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	689b      	ldr	r3, [r3, #8]
 800f3fc:	429a      	cmp	r2, r3
 800f3fe:	d303      	bcc.n	800f408 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	681a      	ldr	r2, [r3, #0]
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	68d9      	ldr	r1, [r3, #12]
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f410:	461a      	mov	r2, r3
 800f412:	6838      	ldr	r0, [r7, #0]
 800f414:	f002 feec 	bl	80121f0 <memcpy>
	}
}
 800f418:	bf00      	nop
 800f41a:	3708      	adds	r7, #8
 800f41c:	46bd      	mov	sp, r7
 800f41e:	bd80      	pop	{r7, pc}

0800f420 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800f420:	b580      	push	{r7, lr}
 800f422:	b084      	sub	sp, #16
 800f424:	af00      	add	r7, sp, #0
 800f426:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800f428:	f001 fc54 	bl	8010cd4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f432:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f434:	e011      	b.n	800f45a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d012      	beq.n	800f464 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	3324      	adds	r3, #36	; 0x24
 800f442:	4618      	mov	r0, r3
 800f444:	f000 fd2a 	bl	800fe9c <xTaskRemoveFromEventList>
 800f448:	4603      	mov	r3, r0
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	d001      	beq.n	800f452 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800f44e:	f000 fe01 	bl	8010054 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800f452:	7bfb      	ldrb	r3, [r7, #15]
 800f454:	3b01      	subs	r3, #1
 800f456:	b2db      	uxtb	r3, r3
 800f458:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f45a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f45e:	2b00      	cmp	r3, #0
 800f460:	dce9      	bgt.n	800f436 <prvUnlockQueue+0x16>
 800f462:	e000      	b.n	800f466 <prvUnlockQueue+0x46>
					break;
 800f464:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	22ff      	movs	r2, #255	; 0xff
 800f46a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800f46e:	f001 fc61 	bl	8010d34 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800f472:	f001 fc2f 	bl	8010cd4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f47c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f47e:	e011      	b.n	800f4a4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	691b      	ldr	r3, [r3, #16]
 800f484:	2b00      	cmp	r3, #0
 800f486:	d012      	beq.n	800f4ae <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	3310      	adds	r3, #16
 800f48c:	4618      	mov	r0, r3
 800f48e:	f000 fd05 	bl	800fe9c <xTaskRemoveFromEventList>
 800f492:	4603      	mov	r3, r0
 800f494:	2b00      	cmp	r3, #0
 800f496:	d001      	beq.n	800f49c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800f498:	f000 fddc 	bl	8010054 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800f49c:	7bbb      	ldrb	r3, [r7, #14]
 800f49e:	3b01      	subs	r3, #1
 800f4a0:	b2db      	uxtb	r3, r3
 800f4a2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f4a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	dce9      	bgt.n	800f480 <prvUnlockQueue+0x60>
 800f4ac:	e000      	b.n	800f4b0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800f4ae:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	22ff      	movs	r2, #255	; 0xff
 800f4b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800f4b8:	f001 fc3c 	bl	8010d34 <vPortExitCritical>
}
 800f4bc:	bf00      	nop
 800f4be:	3710      	adds	r7, #16
 800f4c0:	46bd      	mov	sp, r7
 800f4c2:	bd80      	pop	{r7, pc}

0800f4c4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800f4c4:	b580      	push	{r7, lr}
 800f4c6:	b084      	sub	sp, #16
 800f4c8:	af00      	add	r7, sp, #0
 800f4ca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f4cc:	f001 fc02 	bl	8010cd4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	d102      	bne.n	800f4de <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800f4d8:	2301      	movs	r3, #1
 800f4da:	60fb      	str	r3, [r7, #12]
 800f4dc:	e001      	b.n	800f4e2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800f4de:	2300      	movs	r3, #0
 800f4e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f4e2:	f001 fc27 	bl	8010d34 <vPortExitCritical>

	return xReturn;
 800f4e6:	68fb      	ldr	r3, [r7, #12]
}
 800f4e8:	4618      	mov	r0, r3
 800f4ea:	3710      	adds	r7, #16
 800f4ec:	46bd      	mov	sp, r7
 800f4ee:	bd80      	pop	{r7, pc}

0800f4f0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800f4f0:	b580      	push	{r7, lr}
 800f4f2:	b084      	sub	sp, #16
 800f4f4:	af00      	add	r7, sp, #0
 800f4f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f4f8:	f001 fbec 	bl	8010cd4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f504:	429a      	cmp	r2, r3
 800f506:	d102      	bne.n	800f50e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800f508:	2301      	movs	r3, #1
 800f50a:	60fb      	str	r3, [r7, #12]
 800f50c:	e001      	b.n	800f512 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800f50e:	2300      	movs	r3, #0
 800f510:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f512:	f001 fc0f 	bl	8010d34 <vPortExitCritical>

	return xReturn;
 800f516:	68fb      	ldr	r3, [r7, #12]
}
 800f518:	4618      	mov	r0, r3
 800f51a:	3710      	adds	r7, #16
 800f51c:	46bd      	mov	sp, r7
 800f51e:	bd80      	pop	{r7, pc}

0800f520 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800f520:	b480      	push	{r7}
 800f522:	b085      	sub	sp, #20
 800f524:	af00      	add	r7, sp, #0
 800f526:	6078      	str	r0, [r7, #4]
 800f528:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f52a:	2300      	movs	r3, #0
 800f52c:	60fb      	str	r3, [r7, #12]
 800f52e:	e014      	b.n	800f55a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800f530:	4a0f      	ldr	r2, [pc, #60]	; (800f570 <vQueueAddToRegistry+0x50>)
 800f532:	68fb      	ldr	r3, [r7, #12]
 800f534:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800f538:	2b00      	cmp	r3, #0
 800f53a:	d10b      	bne.n	800f554 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800f53c:	490c      	ldr	r1, [pc, #48]	; (800f570 <vQueueAddToRegistry+0x50>)
 800f53e:	68fb      	ldr	r3, [r7, #12]
 800f540:	683a      	ldr	r2, [r7, #0]
 800f542:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800f546:	4a0a      	ldr	r2, [pc, #40]	; (800f570 <vQueueAddToRegistry+0x50>)
 800f548:	68fb      	ldr	r3, [r7, #12]
 800f54a:	00db      	lsls	r3, r3, #3
 800f54c:	4413      	add	r3, r2
 800f54e:	687a      	ldr	r2, [r7, #4]
 800f550:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800f552:	e006      	b.n	800f562 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f554:	68fb      	ldr	r3, [r7, #12]
 800f556:	3301      	adds	r3, #1
 800f558:	60fb      	str	r3, [r7, #12]
 800f55a:	68fb      	ldr	r3, [r7, #12]
 800f55c:	2b07      	cmp	r3, #7
 800f55e:	d9e7      	bls.n	800f530 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800f560:	bf00      	nop
 800f562:	bf00      	nop
 800f564:	3714      	adds	r7, #20
 800f566:	46bd      	mov	sp, r7
 800f568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f56c:	4770      	bx	lr
 800f56e:	bf00      	nop
 800f570:	20002180 	.word	0x20002180

0800f574 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f574:	b580      	push	{r7, lr}
 800f576:	b086      	sub	sp, #24
 800f578:	af00      	add	r7, sp, #0
 800f57a:	60f8      	str	r0, [r7, #12]
 800f57c:	60b9      	str	r1, [r7, #8]
 800f57e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800f580:	68fb      	ldr	r3, [r7, #12]
 800f582:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800f584:	f001 fba6 	bl	8010cd4 <vPortEnterCritical>
 800f588:	697b      	ldr	r3, [r7, #20]
 800f58a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f58e:	b25b      	sxtb	r3, r3
 800f590:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f594:	d103      	bne.n	800f59e <vQueueWaitForMessageRestricted+0x2a>
 800f596:	697b      	ldr	r3, [r7, #20]
 800f598:	2200      	movs	r2, #0
 800f59a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f59e:	697b      	ldr	r3, [r7, #20]
 800f5a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f5a4:	b25b      	sxtb	r3, r3
 800f5a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f5aa:	d103      	bne.n	800f5b4 <vQueueWaitForMessageRestricted+0x40>
 800f5ac:	697b      	ldr	r3, [r7, #20]
 800f5ae:	2200      	movs	r2, #0
 800f5b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f5b4:	f001 fbbe 	bl	8010d34 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800f5b8:	697b      	ldr	r3, [r7, #20]
 800f5ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	d106      	bne.n	800f5ce <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800f5c0:	697b      	ldr	r3, [r7, #20]
 800f5c2:	3324      	adds	r3, #36	; 0x24
 800f5c4:	687a      	ldr	r2, [r7, #4]
 800f5c6:	68b9      	ldr	r1, [r7, #8]
 800f5c8:	4618      	mov	r0, r3
 800f5ca:	f000 fc3b 	bl	800fe44 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800f5ce:	6978      	ldr	r0, [r7, #20]
 800f5d0:	f7ff ff26 	bl	800f420 <prvUnlockQueue>
	}
 800f5d4:	bf00      	nop
 800f5d6:	3718      	adds	r7, #24
 800f5d8:	46bd      	mov	sp, r7
 800f5da:	bd80      	pop	{r7, pc}

0800f5dc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800f5dc:	b580      	push	{r7, lr}
 800f5de:	b08e      	sub	sp, #56	; 0x38
 800f5e0:	af04      	add	r7, sp, #16
 800f5e2:	60f8      	str	r0, [r7, #12]
 800f5e4:	60b9      	str	r1, [r7, #8]
 800f5e6:	607a      	str	r2, [r7, #4]
 800f5e8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800f5ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	d10a      	bne.n	800f606 <xTaskCreateStatic+0x2a>
	__asm volatile
 800f5f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5f4:	f383 8811 	msr	BASEPRI, r3
 800f5f8:	f3bf 8f6f 	isb	sy
 800f5fc:	f3bf 8f4f 	dsb	sy
 800f600:	623b      	str	r3, [r7, #32]
}
 800f602:	bf00      	nop
 800f604:	e7fe      	b.n	800f604 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800f606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f608:	2b00      	cmp	r3, #0
 800f60a:	d10a      	bne.n	800f622 <xTaskCreateStatic+0x46>
	__asm volatile
 800f60c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f610:	f383 8811 	msr	BASEPRI, r3
 800f614:	f3bf 8f6f 	isb	sy
 800f618:	f3bf 8f4f 	dsb	sy
 800f61c:	61fb      	str	r3, [r7, #28]
}
 800f61e:	bf00      	nop
 800f620:	e7fe      	b.n	800f620 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800f622:	235c      	movs	r3, #92	; 0x5c
 800f624:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800f626:	693b      	ldr	r3, [r7, #16]
 800f628:	2b5c      	cmp	r3, #92	; 0x5c
 800f62a:	d00a      	beq.n	800f642 <xTaskCreateStatic+0x66>
	__asm volatile
 800f62c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f630:	f383 8811 	msr	BASEPRI, r3
 800f634:	f3bf 8f6f 	isb	sy
 800f638:	f3bf 8f4f 	dsb	sy
 800f63c:	61bb      	str	r3, [r7, #24]
}
 800f63e:	bf00      	nop
 800f640:	e7fe      	b.n	800f640 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800f642:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800f644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f646:	2b00      	cmp	r3, #0
 800f648:	d01e      	beq.n	800f688 <xTaskCreateStatic+0xac>
 800f64a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	d01b      	beq.n	800f688 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f652:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800f654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f656:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f658:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800f65a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f65c:	2202      	movs	r2, #2
 800f65e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800f662:	2300      	movs	r3, #0
 800f664:	9303      	str	r3, [sp, #12]
 800f666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f668:	9302      	str	r3, [sp, #8]
 800f66a:	f107 0314 	add.w	r3, r7, #20
 800f66e:	9301      	str	r3, [sp, #4]
 800f670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f672:	9300      	str	r3, [sp, #0]
 800f674:	683b      	ldr	r3, [r7, #0]
 800f676:	687a      	ldr	r2, [r7, #4]
 800f678:	68b9      	ldr	r1, [r7, #8]
 800f67a:	68f8      	ldr	r0, [r7, #12]
 800f67c:	f000 f850 	bl	800f720 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f680:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f682:	f000 f8dd 	bl	800f840 <prvAddNewTaskToReadyList>
 800f686:	e001      	b.n	800f68c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800f688:	2300      	movs	r3, #0
 800f68a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800f68c:	697b      	ldr	r3, [r7, #20]
	}
 800f68e:	4618      	mov	r0, r3
 800f690:	3728      	adds	r7, #40	; 0x28
 800f692:	46bd      	mov	sp, r7
 800f694:	bd80      	pop	{r7, pc}

0800f696 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800f696:	b580      	push	{r7, lr}
 800f698:	b08c      	sub	sp, #48	; 0x30
 800f69a:	af04      	add	r7, sp, #16
 800f69c:	60f8      	str	r0, [r7, #12]
 800f69e:	60b9      	str	r1, [r7, #8]
 800f6a0:	603b      	str	r3, [r7, #0]
 800f6a2:	4613      	mov	r3, r2
 800f6a4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f6a6:	88fb      	ldrh	r3, [r7, #6]
 800f6a8:	009b      	lsls	r3, r3, #2
 800f6aa:	4618      	mov	r0, r3
 800f6ac:	f001 fc34 	bl	8010f18 <pvPortMalloc>
 800f6b0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800f6b2:	697b      	ldr	r3, [r7, #20]
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	d00e      	beq.n	800f6d6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800f6b8:	205c      	movs	r0, #92	; 0x5c
 800f6ba:	f001 fc2d 	bl	8010f18 <pvPortMalloc>
 800f6be:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800f6c0:	69fb      	ldr	r3, [r7, #28]
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	d003      	beq.n	800f6ce <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800f6c6:	69fb      	ldr	r3, [r7, #28]
 800f6c8:	697a      	ldr	r2, [r7, #20]
 800f6ca:	631a      	str	r2, [r3, #48]	; 0x30
 800f6cc:	e005      	b.n	800f6da <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800f6ce:	6978      	ldr	r0, [r7, #20]
 800f6d0:	f001 fcee 	bl	80110b0 <vPortFree>
 800f6d4:	e001      	b.n	800f6da <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800f6d6:	2300      	movs	r3, #0
 800f6d8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800f6da:	69fb      	ldr	r3, [r7, #28]
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	d017      	beq.n	800f710 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f6e0:	69fb      	ldr	r3, [r7, #28]
 800f6e2:	2200      	movs	r2, #0
 800f6e4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f6e8:	88fa      	ldrh	r2, [r7, #6]
 800f6ea:	2300      	movs	r3, #0
 800f6ec:	9303      	str	r3, [sp, #12]
 800f6ee:	69fb      	ldr	r3, [r7, #28]
 800f6f0:	9302      	str	r3, [sp, #8]
 800f6f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6f4:	9301      	str	r3, [sp, #4]
 800f6f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6f8:	9300      	str	r3, [sp, #0]
 800f6fa:	683b      	ldr	r3, [r7, #0]
 800f6fc:	68b9      	ldr	r1, [r7, #8]
 800f6fe:	68f8      	ldr	r0, [r7, #12]
 800f700:	f000 f80e 	bl	800f720 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f704:	69f8      	ldr	r0, [r7, #28]
 800f706:	f000 f89b 	bl	800f840 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f70a:	2301      	movs	r3, #1
 800f70c:	61bb      	str	r3, [r7, #24]
 800f70e:	e002      	b.n	800f716 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f710:	f04f 33ff 	mov.w	r3, #4294967295
 800f714:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f716:	69bb      	ldr	r3, [r7, #24]
	}
 800f718:	4618      	mov	r0, r3
 800f71a:	3720      	adds	r7, #32
 800f71c:	46bd      	mov	sp, r7
 800f71e:	bd80      	pop	{r7, pc}

0800f720 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800f720:	b580      	push	{r7, lr}
 800f722:	b088      	sub	sp, #32
 800f724:	af00      	add	r7, sp, #0
 800f726:	60f8      	str	r0, [r7, #12]
 800f728:	60b9      	str	r1, [r7, #8]
 800f72a:	607a      	str	r2, [r7, #4]
 800f72c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800f72e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f730:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	009b      	lsls	r3, r3, #2
 800f736:	461a      	mov	r2, r3
 800f738:	21a5      	movs	r1, #165	; 0xa5
 800f73a:	f002 fd81 	bl	8012240 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f73e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f740:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800f748:	3b01      	subs	r3, #1
 800f74a:	009b      	lsls	r3, r3, #2
 800f74c:	4413      	add	r3, r2
 800f74e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800f750:	69bb      	ldr	r3, [r7, #24]
 800f752:	f023 0307 	bic.w	r3, r3, #7
 800f756:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800f758:	69bb      	ldr	r3, [r7, #24]
 800f75a:	f003 0307 	and.w	r3, r3, #7
 800f75e:	2b00      	cmp	r3, #0
 800f760:	d00a      	beq.n	800f778 <prvInitialiseNewTask+0x58>
	__asm volatile
 800f762:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f766:	f383 8811 	msr	BASEPRI, r3
 800f76a:	f3bf 8f6f 	isb	sy
 800f76e:	f3bf 8f4f 	dsb	sy
 800f772:	617b      	str	r3, [r7, #20]
}
 800f774:	bf00      	nop
 800f776:	e7fe      	b.n	800f776 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800f778:	68bb      	ldr	r3, [r7, #8]
 800f77a:	2b00      	cmp	r3, #0
 800f77c:	d01f      	beq.n	800f7be <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f77e:	2300      	movs	r3, #0
 800f780:	61fb      	str	r3, [r7, #28]
 800f782:	e012      	b.n	800f7aa <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f784:	68ba      	ldr	r2, [r7, #8]
 800f786:	69fb      	ldr	r3, [r7, #28]
 800f788:	4413      	add	r3, r2
 800f78a:	7819      	ldrb	r1, [r3, #0]
 800f78c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f78e:	69fb      	ldr	r3, [r7, #28]
 800f790:	4413      	add	r3, r2
 800f792:	3334      	adds	r3, #52	; 0x34
 800f794:	460a      	mov	r2, r1
 800f796:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800f798:	68ba      	ldr	r2, [r7, #8]
 800f79a:	69fb      	ldr	r3, [r7, #28]
 800f79c:	4413      	add	r3, r2
 800f79e:	781b      	ldrb	r3, [r3, #0]
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	d006      	beq.n	800f7b2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f7a4:	69fb      	ldr	r3, [r7, #28]
 800f7a6:	3301      	adds	r3, #1
 800f7a8:	61fb      	str	r3, [r7, #28]
 800f7aa:	69fb      	ldr	r3, [r7, #28]
 800f7ac:	2b0f      	cmp	r3, #15
 800f7ae:	d9e9      	bls.n	800f784 <prvInitialiseNewTask+0x64>
 800f7b0:	e000      	b.n	800f7b4 <prvInitialiseNewTask+0x94>
			{
				break;
 800f7b2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f7b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7b6:	2200      	movs	r2, #0
 800f7b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f7bc:	e003      	b.n	800f7c6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800f7be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7c0:	2200      	movs	r2, #0
 800f7c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f7c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7c8:	2b37      	cmp	r3, #55	; 0x37
 800f7ca:	d901      	bls.n	800f7d0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f7cc:	2337      	movs	r3, #55	; 0x37
 800f7ce:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800f7d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f7d4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800f7d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f7da:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800f7dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7de:	2200      	movs	r2, #0
 800f7e0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f7e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7e4:	3304      	adds	r3, #4
 800f7e6:	4618      	mov	r0, r3
 800f7e8:	f7ff f978 	bl	800eadc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f7ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7ee:	3318      	adds	r3, #24
 800f7f0:	4618      	mov	r0, r3
 800f7f2:	f7ff f973 	bl	800eadc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f7f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f7fa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f7fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7fe:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f804:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f808:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f80a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800f80c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f80e:	2200      	movs	r2, #0
 800f810:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f814:	2200      	movs	r2, #0
 800f816:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f81a:	683a      	ldr	r2, [r7, #0]
 800f81c:	68f9      	ldr	r1, [r7, #12]
 800f81e:	69b8      	ldr	r0, [r7, #24]
 800f820:	f001 f928 	bl	8010a74 <pxPortInitialiseStack>
 800f824:	4602      	mov	r2, r0
 800f826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f828:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800f82a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	d002      	beq.n	800f836 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f832:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f834:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f836:	bf00      	nop
 800f838:	3720      	adds	r7, #32
 800f83a:	46bd      	mov	sp, r7
 800f83c:	bd80      	pop	{r7, pc}
	...

0800f840 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f840:	b580      	push	{r7, lr}
 800f842:	b082      	sub	sp, #8
 800f844:	af00      	add	r7, sp, #0
 800f846:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f848:	f001 fa44 	bl	8010cd4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f84c:	4b2d      	ldr	r3, [pc, #180]	; (800f904 <prvAddNewTaskToReadyList+0xc4>)
 800f84e:	681b      	ldr	r3, [r3, #0]
 800f850:	3301      	adds	r3, #1
 800f852:	4a2c      	ldr	r2, [pc, #176]	; (800f904 <prvAddNewTaskToReadyList+0xc4>)
 800f854:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800f856:	4b2c      	ldr	r3, [pc, #176]	; (800f908 <prvAddNewTaskToReadyList+0xc8>)
 800f858:	681b      	ldr	r3, [r3, #0]
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	d109      	bne.n	800f872 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f85e:	4a2a      	ldr	r2, [pc, #168]	; (800f908 <prvAddNewTaskToReadyList+0xc8>)
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f864:	4b27      	ldr	r3, [pc, #156]	; (800f904 <prvAddNewTaskToReadyList+0xc4>)
 800f866:	681b      	ldr	r3, [r3, #0]
 800f868:	2b01      	cmp	r3, #1
 800f86a:	d110      	bne.n	800f88e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800f86c:	f000 fc16 	bl	801009c <prvInitialiseTaskLists>
 800f870:	e00d      	b.n	800f88e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800f872:	4b26      	ldr	r3, [pc, #152]	; (800f90c <prvAddNewTaskToReadyList+0xcc>)
 800f874:	681b      	ldr	r3, [r3, #0]
 800f876:	2b00      	cmp	r3, #0
 800f878:	d109      	bne.n	800f88e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f87a:	4b23      	ldr	r3, [pc, #140]	; (800f908 <prvAddNewTaskToReadyList+0xc8>)
 800f87c:	681b      	ldr	r3, [r3, #0]
 800f87e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f884:	429a      	cmp	r2, r3
 800f886:	d802      	bhi.n	800f88e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800f888:	4a1f      	ldr	r2, [pc, #124]	; (800f908 <prvAddNewTaskToReadyList+0xc8>)
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800f88e:	4b20      	ldr	r3, [pc, #128]	; (800f910 <prvAddNewTaskToReadyList+0xd0>)
 800f890:	681b      	ldr	r3, [r3, #0]
 800f892:	3301      	adds	r3, #1
 800f894:	4a1e      	ldr	r2, [pc, #120]	; (800f910 <prvAddNewTaskToReadyList+0xd0>)
 800f896:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800f898:	4b1d      	ldr	r3, [pc, #116]	; (800f910 <prvAddNewTaskToReadyList+0xd0>)
 800f89a:	681a      	ldr	r2, [r3, #0]
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f8a4:	4b1b      	ldr	r3, [pc, #108]	; (800f914 <prvAddNewTaskToReadyList+0xd4>)
 800f8a6:	681b      	ldr	r3, [r3, #0]
 800f8a8:	429a      	cmp	r2, r3
 800f8aa:	d903      	bls.n	800f8b4 <prvAddNewTaskToReadyList+0x74>
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f8b0:	4a18      	ldr	r2, [pc, #96]	; (800f914 <prvAddNewTaskToReadyList+0xd4>)
 800f8b2:	6013      	str	r3, [r2, #0]
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f8b8:	4613      	mov	r3, r2
 800f8ba:	009b      	lsls	r3, r3, #2
 800f8bc:	4413      	add	r3, r2
 800f8be:	009b      	lsls	r3, r3, #2
 800f8c0:	4a15      	ldr	r2, [pc, #84]	; (800f918 <prvAddNewTaskToReadyList+0xd8>)
 800f8c2:	441a      	add	r2, r3
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	3304      	adds	r3, #4
 800f8c8:	4619      	mov	r1, r3
 800f8ca:	4610      	mov	r0, r2
 800f8cc:	f7ff f913 	bl	800eaf6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800f8d0:	f001 fa30 	bl	8010d34 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800f8d4:	4b0d      	ldr	r3, [pc, #52]	; (800f90c <prvAddNewTaskToReadyList+0xcc>)
 800f8d6:	681b      	ldr	r3, [r3, #0]
 800f8d8:	2b00      	cmp	r3, #0
 800f8da:	d00e      	beq.n	800f8fa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f8dc:	4b0a      	ldr	r3, [pc, #40]	; (800f908 <prvAddNewTaskToReadyList+0xc8>)
 800f8de:	681b      	ldr	r3, [r3, #0]
 800f8e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f8e6:	429a      	cmp	r2, r3
 800f8e8:	d207      	bcs.n	800f8fa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800f8ea:	4b0c      	ldr	r3, [pc, #48]	; (800f91c <prvAddNewTaskToReadyList+0xdc>)
 800f8ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f8f0:	601a      	str	r2, [r3, #0]
 800f8f2:	f3bf 8f4f 	dsb	sy
 800f8f6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f8fa:	bf00      	nop
 800f8fc:	3708      	adds	r7, #8
 800f8fe:	46bd      	mov	sp, r7
 800f900:	bd80      	pop	{r7, pc}
 800f902:	bf00      	nop
 800f904:	20002694 	.word	0x20002694
 800f908:	200021c0 	.word	0x200021c0
 800f90c:	200026a0 	.word	0x200026a0
 800f910:	200026b0 	.word	0x200026b0
 800f914:	2000269c 	.word	0x2000269c
 800f918:	200021c4 	.word	0x200021c4
 800f91c:	e000ed04 	.word	0xe000ed04

0800f920 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800f920:	b580      	push	{r7, lr}
 800f922:	b084      	sub	sp, #16
 800f924:	af00      	add	r7, sp, #0
 800f926:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800f928:	2300      	movs	r3, #0
 800f92a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	2b00      	cmp	r3, #0
 800f930:	d017      	beq.n	800f962 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800f932:	4b13      	ldr	r3, [pc, #76]	; (800f980 <vTaskDelay+0x60>)
 800f934:	681b      	ldr	r3, [r3, #0]
 800f936:	2b00      	cmp	r3, #0
 800f938:	d00a      	beq.n	800f950 <vTaskDelay+0x30>
	__asm volatile
 800f93a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f93e:	f383 8811 	msr	BASEPRI, r3
 800f942:	f3bf 8f6f 	isb	sy
 800f946:	f3bf 8f4f 	dsb	sy
 800f94a:	60bb      	str	r3, [r7, #8]
}
 800f94c:	bf00      	nop
 800f94e:	e7fe      	b.n	800f94e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800f950:	f000 f880 	bl	800fa54 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800f954:	2100      	movs	r1, #0
 800f956:	6878      	ldr	r0, [r7, #4]
 800f958:	f000 fcea 	bl	8010330 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800f95c:	f000 f888 	bl	800fa70 <xTaskResumeAll>
 800f960:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800f962:	68fb      	ldr	r3, [r7, #12]
 800f964:	2b00      	cmp	r3, #0
 800f966:	d107      	bne.n	800f978 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800f968:	4b06      	ldr	r3, [pc, #24]	; (800f984 <vTaskDelay+0x64>)
 800f96a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f96e:	601a      	str	r2, [r3, #0]
 800f970:	f3bf 8f4f 	dsb	sy
 800f974:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f978:	bf00      	nop
 800f97a:	3710      	adds	r7, #16
 800f97c:	46bd      	mov	sp, r7
 800f97e:	bd80      	pop	{r7, pc}
 800f980:	200026bc 	.word	0x200026bc
 800f984:	e000ed04 	.word	0xe000ed04

0800f988 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800f988:	b580      	push	{r7, lr}
 800f98a:	b08a      	sub	sp, #40	; 0x28
 800f98c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800f98e:	2300      	movs	r3, #0
 800f990:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800f992:	2300      	movs	r3, #0
 800f994:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800f996:	463a      	mov	r2, r7
 800f998:	1d39      	adds	r1, r7, #4
 800f99a:	f107 0308 	add.w	r3, r7, #8
 800f99e:	4618      	mov	r0, r3
 800f9a0:	f7ff f848 	bl	800ea34 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800f9a4:	6839      	ldr	r1, [r7, #0]
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	68ba      	ldr	r2, [r7, #8]
 800f9aa:	9202      	str	r2, [sp, #8]
 800f9ac:	9301      	str	r3, [sp, #4]
 800f9ae:	2300      	movs	r3, #0
 800f9b0:	9300      	str	r3, [sp, #0]
 800f9b2:	2300      	movs	r3, #0
 800f9b4:	460a      	mov	r2, r1
 800f9b6:	4921      	ldr	r1, [pc, #132]	; (800fa3c <vTaskStartScheduler+0xb4>)
 800f9b8:	4821      	ldr	r0, [pc, #132]	; (800fa40 <vTaskStartScheduler+0xb8>)
 800f9ba:	f7ff fe0f 	bl	800f5dc <xTaskCreateStatic>
 800f9be:	4603      	mov	r3, r0
 800f9c0:	4a20      	ldr	r2, [pc, #128]	; (800fa44 <vTaskStartScheduler+0xbc>)
 800f9c2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800f9c4:	4b1f      	ldr	r3, [pc, #124]	; (800fa44 <vTaskStartScheduler+0xbc>)
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d002      	beq.n	800f9d2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800f9cc:	2301      	movs	r3, #1
 800f9ce:	617b      	str	r3, [r7, #20]
 800f9d0:	e001      	b.n	800f9d6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800f9d2:	2300      	movs	r3, #0
 800f9d4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800f9d6:	697b      	ldr	r3, [r7, #20]
 800f9d8:	2b01      	cmp	r3, #1
 800f9da:	d102      	bne.n	800f9e2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800f9dc:	f000 fcfc 	bl	80103d8 <xTimerCreateTimerTask>
 800f9e0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800f9e2:	697b      	ldr	r3, [r7, #20]
 800f9e4:	2b01      	cmp	r3, #1
 800f9e6:	d116      	bne.n	800fa16 <vTaskStartScheduler+0x8e>
	__asm volatile
 800f9e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9ec:	f383 8811 	msr	BASEPRI, r3
 800f9f0:	f3bf 8f6f 	isb	sy
 800f9f4:	f3bf 8f4f 	dsb	sy
 800f9f8:	613b      	str	r3, [r7, #16]
}
 800f9fa:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800f9fc:	4b12      	ldr	r3, [pc, #72]	; (800fa48 <vTaskStartScheduler+0xc0>)
 800f9fe:	f04f 32ff 	mov.w	r2, #4294967295
 800fa02:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800fa04:	4b11      	ldr	r3, [pc, #68]	; (800fa4c <vTaskStartScheduler+0xc4>)
 800fa06:	2201      	movs	r2, #1
 800fa08:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800fa0a:	4b11      	ldr	r3, [pc, #68]	; (800fa50 <vTaskStartScheduler+0xc8>)
 800fa0c:	2200      	movs	r2, #0
 800fa0e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800fa10:	f001 f8be 	bl	8010b90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800fa14:	e00e      	b.n	800fa34 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800fa16:	697b      	ldr	r3, [r7, #20]
 800fa18:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa1c:	d10a      	bne.n	800fa34 <vTaskStartScheduler+0xac>
	__asm volatile
 800fa1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa22:	f383 8811 	msr	BASEPRI, r3
 800fa26:	f3bf 8f6f 	isb	sy
 800fa2a:	f3bf 8f4f 	dsb	sy
 800fa2e:	60fb      	str	r3, [r7, #12]
}
 800fa30:	bf00      	nop
 800fa32:	e7fe      	b.n	800fa32 <vTaskStartScheduler+0xaa>
}
 800fa34:	bf00      	nop
 800fa36:	3718      	adds	r7, #24
 800fa38:	46bd      	mov	sp, r7
 800fa3a:	bd80      	pop	{r7, pc}
 800fa3c:	08014cc8 	.word	0x08014cc8
 800fa40:	0801006d 	.word	0x0801006d
 800fa44:	200026b8 	.word	0x200026b8
 800fa48:	200026b4 	.word	0x200026b4
 800fa4c:	200026a0 	.word	0x200026a0
 800fa50:	20002698 	.word	0x20002698

0800fa54 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800fa54:	b480      	push	{r7}
 800fa56:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800fa58:	4b04      	ldr	r3, [pc, #16]	; (800fa6c <vTaskSuspendAll+0x18>)
 800fa5a:	681b      	ldr	r3, [r3, #0]
 800fa5c:	3301      	adds	r3, #1
 800fa5e:	4a03      	ldr	r2, [pc, #12]	; (800fa6c <vTaskSuspendAll+0x18>)
 800fa60:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800fa62:	bf00      	nop
 800fa64:	46bd      	mov	sp, r7
 800fa66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa6a:	4770      	bx	lr
 800fa6c:	200026bc 	.word	0x200026bc

0800fa70 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800fa70:	b580      	push	{r7, lr}
 800fa72:	b084      	sub	sp, #16
 800fa74:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800fa76:	2300      	movs	r3, #0
 800fa78:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800fa7a:	2300      	movs	r3, #0
 800fa7c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800fa7e:	4b42      	ldr	r3, [pc, #264]	; (800fb88 <xTaskResumeAll+0x118>)
 800fa80:	681b      	ldr	r3, [r3, #0]
 800fa82:	2b00      	cmp	r3, #0
 800fa84:	d10a      	bne.n	800fa9c <xTaskResumeAll+0x2c>
	__asm volatile
 800fa86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa8a:	f383 8811 	msr	BASEPRI, r3
 800fa8e:	f3bf 8f6f 	isb	sy
 800fa92:	f3bf 8f4f 	dsb	sy
 800fa96:	603b      	str	r3, [r7, #0]
}
 800fa98:	bf00      	nop
 800fa9a:	e7fe      	b.n	800fa9a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800fa9c:	f001 f91a 	bl	8010cd4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800faa0:	4b39      	ldr	r3, [pc, #228]	; (800fb88 <xTaskResumeAll+0x118>)
 800faa2:	681b      	ldr	r3, [r3, #0]
 800faa4:	3b01      	subs	r3, #1
 800faa6:	4a38      	ldr	r2, [pc, #224]	; (800fb88 <xTaskResumeAll+0x118>)
 800faa8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800faaa:	4b37      	ldr	r3, [pc, #220]	; (800fb88 <xTaskResumeAll+0x118>)
 800faac:	681b      	ldr	r3, [r3, #0]
 800faae:	2b00      	cmp	r3, #0
 800fab0:	d162      	bne.n	800fb78 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800fab2:	4b36      	ldr	r3, [pc, #216]	; (800fb8c <xTaskResumeAll+0x11c>)
 800fab4:	681b      	ldr	r3, [r3, #0]
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	d05e      	beq.n	800fb78 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800faba:	e02f      	b.n	800fb1c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fabc:	4b34      	ldr	r3, [pc, #208]	; (800fb90 <xTaskResumeAll+0x120>)
 800fabe:	68db      	ldr	r3, [r3, #12]
 800fac0:	68db      	ldr	r3, [r3, #12]
 800fac2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fac4:	68fb      	ldr	r3, [r7, #12]
 800fac6:	3318      	adds	r3, #24
 800fac8:	4618      	mov	r0, r3
 800faca:	f7ff f871 	bl	800ebb0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800face:	68fb      	ldr	r3, [r7, #12]
 800fad0:	3304      	adds	r3, #4
 800fad2:	4618      	mov	r0, r3
 800fad4:	f7ff f86c 	bl	800ebb0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800fad8:	68fb      	ldr	r3, [r7, #12]
 800fada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fadc:	4b2d      	ldr	r3, [pc, #180]	; (800fb94 <xTaskResumeAll+0x124>)
 800fade:	681b      	ldr	r3, [r3, #0]
 800fae0:	429a      	cmp	r2, r3
 800fae2:	d903      	bls.n	800faec <xTaskResumeAll+0x7c>
 800fae4:	68fb      	ldr	r3, [r7, #12]
 800fae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fae8:	4a2a      	ldr	r2, [pc, #168]	; (800fb94 <xTaskResumeAll+0x124>)
 800faea:	6013      	str	r3, [r2, #0]
 800faec:	68fb      	ldr	r3, [r7, #12]
 800faee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800faf0:	4613      	mov	r3, r2
 800faf2:	009b      	lsls	r3, r3, #2
 800faf4:	4413      	add	r3, r2
 800faf6:	009b      	lsls	r3, r3, #2
 800faf8:	4a27      	ldr	r2, [pc, #156]	; (800fb98 <xTaskResumeAll+0x128>)
 800fafa:	441a      	add	r2, r3
 800fafc:	68fb      	ldr	r3, [r7, #12]
 800fafe:	3304      	adds	r3, #4
 800fb00:	4619      	mov	r1, r3
 800fb02:	4610      	mov	r0, r2
 800fb04:	f7fe fff7 	bl	800eaf6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fb08:	68fb      	ldr	r3, [r7, #12]
 800fb0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb0c:	4b23      	ldr	r3, [pc, #140]	; (800fb9c <xTaskResumeAll+0x12c>)
 800fb0e:	681b      	ldr	r3, [r3, #0]
 800fb10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb12:	429a      	cmp	r2, r3
 800fb14:	d302      	bcc.n	800fb1c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800fb16:	4b22      	ldr	r3, [pc, #136]	; (800fba0 <xTaskResumeAll+0x130>)
 800fb18:	2201      	movs	r2, #1
 800fb1a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fb1c:	4b1c      	ldr	r3, [pc, #112]	; (800fb90 <xTaskResumeAll+0x120>)
 800fb1e:	681b      	ldr	r3, [r3, #0]
 800fb20:	2b00      	cmp	r3, #0
 800fb22:	d1cb      	bne.n	800fabc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800fb24:	68fb      	ldr	r3, [r7, #12]
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	d001      	beq.n	800fb2e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800fb2a:	f000 fb55 	bl	80101d8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800fb2e:	4b1d      	ldr	r3, [pc, #116]	; (800fba4 <xTaskResumeAll+0x134>)
 800fb30:	681b      	ldr	r3, [r3, #0]
 800fb32:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	2b00      	cmp	r3, #0
 800fb38:	d010      	beq.n	800fb5c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800fb3a:	f000 f847 	bl	800fbcc <xTaskIncrementTick>
 800fb3e:	4603      	mov	r3, r0
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	d002      	beq.n	800fb4a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800fb44:	4b16      	ldr	r3, [pc, #88]	; (800fba0 <xTaskResumeAll+0x130>)
 800fb46:	2201      	movs	r2, #1
 800fb48:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	3b01      	subs	r3, #1
 800fb4e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	2b00      	cmp	r3, #0
 800fb54:	d1f1      	bne.n	800fb3a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800fb56:	4b13      	ldr	r3, [pc, #76]	; (800fba4 <xTaskResumeAll+0x134>)
 800fb58:	2200      	movs	r2, #0
 800fb5a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800fb5c:	4b10      	ldr	r3, [pc, #64]	; (800fba0 <xTaskResumeAll+0x130>)
 800fb5e:	681b      	ldr	r3, [r3, #0]
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	d009      	beq.n	800fb78 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800fb64:	2301      	movs	r3, #1
 800fb66:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800fb68:	4b0f      	ldr	r3, [pc, #60]	; (800fba8 <xTaskResumeAll+0x138>)
 800fb6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fb6e:	601a      	str	r2, [r3, #0]
 800fb70:	f3bf 8f4f 	dsb	sy
 800fb74:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800fb78:	f001 f8dc 	bl	8010d34 <vPortExitCritical>

	return xAlreadyYielded;
 800fb7c:	68bb      	ldr	r3, [r7, #8]
}
 800fb7e:	4618      	mov	r0, r3
 800fb80:	3710      	adds	r7, #16
 800fb82:	46bd      	mov	sp, r7
 800fb84:	bd80      	pop	{r7, pc}
 800fb86:	bf00      	nop
 800fb88:	200026bc 	.word	0x200026bc
 800fb8c:	20002694 	.word	0x20002694
 800fb90:	20002654 	.word	0x20002654
 800fb94:	2000269c 	.word	0x2000269c
 800fb98:	200021c4 	.word	0x200021c4
 800fb9c:	200021c0 	.word	0x200021c0
 800fba0:	200026a8 	.word	0x200026a8
 800fba4:	200026a4 	.word	0x200026a4
 800fba8:	e000ed04 	.word	0xe000ed04

0800fbac <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800fbac:	b480      	push	{r7}
 800fbae:	b083      	sub	sp, #12
 800fbb0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800fbb2:	4b05      	ldr	r3, [pc, #20]	; (800fbc8 <xTaskGetTickCount+0x1c>)
 800fbb4:	681b      	ldr	r3, [r3, #0]
 800fbb6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800fbb8:	687b      	ldr	r3, [r7, #4]
}
 800fbba:	4618      	mov	r0, r3
 800fbbc:	370c      	adds	r7, #12
 800fbbe:	46bd      	mov	sp, r7
 800fbc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbc4:	4770      	bx	lr
 800fbc6:	bf00      	nop
 800fbc8:	20002698 	.word	0x20002698

0800fbcc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800fbcc:	b580      	push	{r7, lr}
 800fbce:	b086      	sub	sp, #24
 800fbd0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800fbd2:	2300      	movs	r3, #0
 800fbd4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fbd6:	4b4f      	ldr	r3, [pc, #316]	; (800fd14 <xTaskIncrementTick+0x148>)
 800fbd8:	681b      	ldr	r3, [r3, #0]
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	f040 808f 	bne.w	800fcfe <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800fbe0:	4b4d      	ldr	r3, [pc, #308]	; (800fd18 <xTaskIncrementTick+0x14c>)
 800fbe2:	681b      	ldr	r3, [r3, #0]
 800fbe4:	3301      	adds	r3, #1
 800fbe6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800fbe8:	4a4b      	ldr	r2, [pc, #300]	; (800fd18 <xTaskIncrementTick+0x14c>)
 800fbea:	693b      	ldr	r3, [r7, #16]
 800fbec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800fbee:	693b      	ldr	r3, [r7, #16]
 800fbf0:	2b00      	cmp	r3, #0
 800fbf2:	d120      	bne.n	800fc36 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800fbf4:	4b49      	ldr	r3, [pc, #292]	; (800fd1c <xTaskIncrementTick+0x150>)
 800fbf6:	681b      	ldr	r3, [r3, #0]
 800fbf8:	681b      	ldr	r3, [r3, #0]
 800fbfa:	2b00      	cmp	r3, #0
 800fbfc:	d00a      	beq.n	800fc14 <xTaskIncrementTick+0x48>
	__asm volatile
 800fbfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc02:	f383 8811 	msr	BASEPRI, r3
 800fc06:	f3bf 8f6f 	isb	sy
 800fc0a:	f3bf 8f4f 	dsb	sy
 800fc0e:	603b      	str	r3, [r7, #0]
}
 800fc10:	bf00      	nop
 800fc12:	e7fe      	b.n	800fc12 <xTaskIncrementTick+0x46>
 800fc14:	4b41      	ldr	r3, [pc, #260]	; (800fd1c <xTaskIncrementTick+0x150>)
 800fc16:	681b      	ldr	r3, [r3, #0]
 800fc18:	60fb      	str	r3, [r7, #12]
 800fc1a:	4b41      	ldr	r3, [pc, #260]	; (800fd20 <xTaskIncrementTick+0x154>)
 800fc1c:	681b      	ldr	r3, [r3, #0]
 800fc1e:	4a3f      	ldr	r2, [pc, #252]	; (800fd1c <xTaskIncrementTick+0x150>)
 800fc20:	6013      	str	r3, [r2, #0]
 800fc22:	4a3f      	ldr	r2, [pc, #252]	; (800fd20 <xTaskIncrementTick+0x154>)
 800fc24:	68fb      	ldr	r3, [r7, #12]
 800fc26:	6013      	str	r3, [r2, #0]
 800fc28:	4b3e      	ldr	r3, [pc, #248]	; (800fd24 <xTaskIncrementTick+0x158>)
 800fc2a:	681b      	ldr	r3, [r3, #0]
 800fc2c:	3301      	adds	r3, #1
 800fc2e:	4a3d      	ldr	r2, [pc, #244]	; (800fd24 <xTaskIncrementTick+0x158>)
 800fc30:	6013      	str	r3, [r2, #0]
 800fc32:	f000 fad1 	bl	80101d8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800fc36:	4b3c      	ldr	r3, [pc, #240]	; (800fd28 <xTaskIncrementTick+0x15c>)
 800fc38:	681b      	ldr	r3, [r3, #0]
 800fc3a:	693a      	ldr	r2, [r7, #16]
 800fc3c:	429a      	cmp	r2, r3
 800fc3e:	d349      	bcc.n	800fcd4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fc40:	4b36      	ldr	r3, [pc, #216]	; (800fd1c <xTaskIncrementTick+0x150>)
 800fc42:	681b      	ldr	r3, [r3, #0]
 800fc44:	681b      	ldr	r3, [r3, #0]
 800fc46:	2b00      	cmp	r3, #0
 800fc48:	d104      	bne.n	800fc54 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fc4a:	4b37      	ldr	r3, [pc, #220]	; (800fd28 <xTaskIncrementTick+0x15c>)
 800fc4c:	f04f 32ff 	mov.w	r2, #4294967295
 800fc50:	601a      	str	r2, [r3, #0]
					break;
 800fc52:	e03f      	b.n	800fcd4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fc54:	4b31      	ldr	r3, [pc, #196]	; (800fd1c <xTaskIncrementTick+0x150>)
 800fc56:	681b      	ldr	r3, [r3, #0]
 800fc58:	68db      	ldr	r3, [r3, #12]
 800fc5a:	68db      	ldr	r3, [r3, #12]
 800fc5c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800fc5e:	68bb      	ldr	r3, [r7, #8]
 800fc60:	685b      	ldr	r3, [r3, #4]
 800fc62:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800fc64:	693a      	ldr	r2, [r7, #16]
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	429a      	cmp	r2, r3
 800fc6a:	d203      	bcs.n	800fc74 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800fc6c:	4a2e      	ldr	r2, [pc, #184]	; (800fd28 <xTaskIncrementTick+0x15c>)
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800fc72:	e02f      	b.n	800fcd4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fc74:	68bb      	ldr	r3, [r7, #8]
 800fc76:	3304      	adds	r3, #4
 800fc78:	4618      	mov	r0, r3
 800fc7a:	f7fe ff99 	bl	800ebb0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800fc7e:	68bb      	ldr	r3, [r7, #8]
 800fc80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	d004      	beq.n	800fc90 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fc86:	68bb      	ldr	r3, [r7, #8]
 800fc88:	3318      	adds	r3, #24
 800fc8a:	4618      	mov	r0, r3
 800fc8c:	f7fe ff90 	bl	800ebb0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800fc90:	68bb      	ldr	r3, [r7, #8]
 800fc92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc94:	4b25      	ldr	r3, [pc, #148]	; (800fd2c <xTaskIncrementTick+0x160>)
 800fc96:	681b      	ldr	r3, [r3, #0]
 800fc98:	429a      	cmp	r2, r3
 800fc9a:	d903      	bls.n	800fca4 <xTaskIncrementTick+0xd8>
 800fc9c:	68bb      	ldr	r3, [r7, #8]
 800fc9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fca0:	4a22      	ldr	r2, [pc, #136]	; (800fd2c <xTaskIncrementTick+0x160>)
 800fca2:	6013      	str	r3, [r2, #0]
 800fca4:	68bb      	ldr	r3, [r7, #8]
 800fca6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fca8:	4613      	mov	r3, r2
 800fcaa:	009b      	lsls	r3, r3, #2
 800fcac:	4413      	add	r3, r2
 800fcae:	009b      	lsls	r3, r3, #2
 800fcb0:	4a1f      	ldr	r2, [pc, #124]	; (800fd30 <xTaskIncrementTick+0x164>)
 800fcb2:	441a      	add	r2, r3
 800fcb4:	68bb      	ldr	r3, [r7, #8]
 800fcb6:	3304      	adds	r3, #4
 800fcb8:	4619      	mov	r1, r3
 800fcba:	4610      	mov	r0, r2
 800fcbc:	f7fe ff1b 	bl	800eaf6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fcc0:	68bb      	ldr	r3, [r7, #8]
 800fcc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fcc4:	4b1b      	ldr	r3, [pc, #108]	; (800fd34 <xTaskIncrementTick+0x168>)
 800fcc6:	681b      	ldr	r3, [r3, #0]
 800fcc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fcca:	429a      	cmp	r2, r3
 800fccc:	d3b8      	bcc.n	800fc40 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800fcce:	2301      	movs	r3, #1
 800fcd0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fcd2:	e7b5      	b.n	800fc40 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800fcd4:	4b17      	ldr	r3, [pc, #92]	; (800fd34 <xTaskIncrementTick+0x168>)
 800fcd6:	681b      	ldr	r3, [r3, #0]
 800fcd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fcda:	4915      	ldr	r1, [pc, #84]	; (800fd30 <xTaskIncrementTick+0x164>)
 800fcdc:	4613      	mov	r3, r2
 800fcde:	009b      	lsls	r3, r3, #2
 800fce0:	4413      	add	r3, r2
 800fce2:	009b      	lsls	r3, r3, #2
 800fce4:	440b      	add	r3, r1
 800fce6:	681b      	ldr	r3, [r3, #0]
 800fce8:	2b01      	cmp	r3, #1
 800fcea:	d901      	bls.n	800fcf0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800fcec:	2301      	movs	r3, #1
 800fcee:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800fcf0:	4b11      	ldr	r3, [pc, #68]	; (800fd38 <xTaskIncrementTick+0x16c>)
 800fcf2:	681b      	ldr	r3, [r3, #0]
 800fcf4:	2b00      	cmp	r3, #0
 800fcf6:	d007      	beq.n	800fd08 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800fcf8:	2301      	movs	r3, #1
 800fcfa:	617b      	str	r3, [r7, #20]
 800fcfc:	e004      	b.n	800fd08 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800fcfe:	4b0f      	ldr	r3, [pc, #60]	; (800fd3c <xTaskIncrementTick+0x170>)
 800fd00:	681b      	ldr	r3, [r3, #0]
 800fd02:	3301      	adds	r3, #1
 800fd04:	4a0d      	ldr	r2, [pc, #52]	; (800fd3c <xTaskIncrementTick+0x170>)
 800fd06:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800fd08:	697b      	ldr	r3, [r7, #20]
}
 800fd0a:	4618      	mov	r0, r3
 800fd0c:	3718      	adds	r7, #24
 800fd0e:	46bd      	mov	sp, r7
 800fd10:	bd80      	pop	{r7, pc}
 800fd12:	bf00      	nop
 800fd14:	200026bc 	.word	0x200026bc
 800fd18:	20002698 	.word	0x20002698
 800fd1c:	2000264c 	.word	0x2000264c
 800fd20:	20002650 	.word	0x20002650
 800fd24:	200026ac 	.word	0x200026ac
 800fd28:	200026b4 	.word	0x200026b4
 800fd2c:	2000269c 	.word	0x2000269c
 800fd30:	200021c4 	.word	0x200021c4
 800fd34:	200021c0 	.word	0x200021c0
 800fd38:	200026a8 	.word	0x200026a8
 800fd3c:	200026a4 	.word	0x200026a4

0800fd40 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800fd40:	b480      	push	{r7}
 800fd42:	b085      	sub	sp, #20
 800fd44:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800fd46:	4b28      	ldr	r3, [pc, #160]	; (800fde8 <vTaskSwitchContext+0xa8>)
 800fd48:	681b      	ldr	r3, [r3, #0]
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	d003      	beq.n	800fd56 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800fd4e:	4b27      	ldr	r3, [pc, #156]	; (800fdec <vTaskSwitchContext+0xac>)
 800fd50:	2201      	movs	r2, #1
 800fd52:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800fd54:	e041      	b.n	800fdda <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800fd56:	4b25      	ldr	r3, [pc, #148]	; (800fdec <vTaskSwitchContext+0xac>)
 800fd58:	2200      	movs	r2, #0
 800fd5a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fd5c:	4b24      	ldr	r3, [pc, #144]	; (800fdf0 <vTaskSwitchContext+0xb0>)
 800fd5e:	681b      	ldr	r3, [r3, #0]
 800fd60:	60fb      	str	r3, [r7, #12]
 800fd62:	e010      	b.n	800fd86 <vTaskSwitchContext+0x46>
 800fd64:	68fb      	ldr	r3, [r7, #12]
 800fd66:	2b00      	cmp	r3, #0
 800fd68:	d10a      	bne.n	800fd80 <vTaskSwitchContext+0x40>
	__asm volatile
 800fd6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd6e:	f383 8811 	msr	BASEPRI, r3
 800fd72:	f3bf 8f6f 	isb	sy
 800fd76:	f3bf 8f4f 	dsb	sy
 800fd7a:	607b      	str	r3, [r7, #4]
}
 800fd7c:	bf00      	nop
 800fd7e:	e7fe      	b.n	800fd7e <vTaskSwitchContext+0x3e>
 800fd80:	68fb      	ldr	r3, [r7, #12]
 800fd82:	3b01      	subs	r3, #1
 800fd84:	60fb      	str	r3, [r7, #12]
 800fd86:	491b      	ldr	r1, [pc, #108]	; (800fdf4 <vTaskSwitchContext+0xb4>)
 800fd88:	68fa      	ldr	r2, [r7, #12]
 800fd8a:	4613      	mov	r3, r2
 800fd8c:	009b      	lsls	r3, r3, #2
 800fd8e:	4413      	add	r3, r2
 800fd90:	009b      	lsls	r3, r3, #2
 800fd92:	440b      	add	r3, r1
 800fd94:	681b      	ldr	r3, [r3, #0]
 800fd96:	2b00      	cmp	r3, #0
 800fd98:	d0e4      	beq.n	800fd64 <vTaskSwitchContext+0x24>
 800fd9a:	68fa      	ldr	r2, [r7, #12]
 800fd9c:	4613      	mov	r3, r2
 800fd9e:	009b      	lsls	r3, r3, #2
 800fda0:	4413      	add	r3, r2
 800fda2:	009b      	lsls	r3, r3, #2
 800fda4:	4a13      	ldr	r2, [pc, #76]	; (800fdf4 <vTaskSwitchContext+0xb4>)
 800fda6:	4413      	add	r3, r2
 800fda8:	60bb      	str	r3, [r7, #8]
 800fdaa:	68bb      	ldr	r3, [r7, #8]
 800fdac:	685b      	ldr	r3, [r3, #4]
 800fdae:	685a      	ldr	r2, [r3, #4]
 800fdb0:	68bb      	ldr	r3, [r7, #8]
 800fdb2:	605a      	str	r2, [r3, #4]
 800fdb4:	68bb      	ldr	r3, [r7, #8]
 800fdb6:	685a      	ldr	r2, [r3, #4]
 800fdb8:	68bb      	ldr	r3, [r7, #8]
 800fdba:	3308      	adds	r3, #8
 800fdbc:	429a      	cmp	r2, r3
 800fdbe:	d104      	bne.n	800fdca <vTaskSwitchContext+0x8a>
 800fdc0:	68bb      	ldr	r3, [r7, #8]
 800fdc2:	685b      	ldr	r3, [r3, #4]
 800fdc4:	685a      	ldr	r2, [r3, #4]
 800fdc6:	68bb      	ldr	r3, [r7, #8]
 800fdc8:	605a      	str	r2, [r3, #4]
 800fdca:	68bb      	ldr	r3, [r7, #8]
 800fdcc:	685b      	ldr	r3, [r3, #4]
 800fdce:	68db      	ldr	r3, [r3, #12]
 800fdd0:	4a09      	ldr	r2, [pc, #36]	; (800fdf8 <vTaskSwitchContext+0xb8>)
 800fdd2:	6013      	str	r3, [r2, #0]
 800fdd4:	4a06      	ldr	r2, [pc, #24]	; (800fdf0 <vTaskSwitchContext+0xb0>)
 800fdd6:	68fb      	ldr	r3, [r7, #12]
 800fdd8:	6013      	str	r3, [r2, #0]
}
 800fdda:	bf00      	nop
 800fddc:	3714      	adds	r7, #20
 800fdde:	46bd      	mov	sp, r7
 800fde0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fde4:	4770      	bx	lr
 800fde6:	bf00      	nop
 800fde8:	200026bc 	.word	0x200026bc
 800fdec:	200026a8 	.word	0x200026a8
 800fdf0:	2000269c 	.word	0x2000269c
 800fdf4:	200021c4 	.word	0x200021c4
 800fdf8:	200021c0 	.word	0x200021c0

0800fdfc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800fdfc:	b580      	push	{r7, lr}
 800fdfe:	b084      	sub	sp, #16
 800fe00:	af00      	add	r7, sp, #0
 800fe02:	6078      	str	r0, [r7, #4]
 800fe04:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	2b00      	cmp	r3, #0
 800fe0a:	d10a      	bne.n	800fe22 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800fe0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe10:	f383 8811 	msr	BASEPRI, r3
 800fe14:	f3bf 8f6f 	isb	sy
 800fe18:	f3bf 8f4f 	dsb	sy
 800fe1c:	60fb      	str	r3, [r7, #12]
}
 800fe1e:	bf00      	nop
 800fe20:	e7fe      	b.n	800fe20 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fe22:	4b07      	ldr	r3, [pc, #28]	; (800fe40 <vTaskPlaceOnEventList+0x44>)
 800fe24:	681b      	ldr	r3, [r3, #0]
 800fe26:	3318      	adds	r3, #24
 800fe28:	4619      	mov	r1, r3
 800fe2a:	6878      	ldr	r0, [r7, #4]
 800fe2c:	f7fe fe87 	bl	800eb3e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800fe30:	2101      	movs	r1, #1
 800fe32:	6838      	ldr	r0, [r7, #0]
 800fe34:	f000 fa7c 	bl	8010330 <prvAddCurrentTaskToDelayedList>
}
 800fe38:	bf00      	nop
 800fe3a:	3710      	adds	r7, #16
 800fe3c:	46bd      	mov	sp, r7
 800fe3e:	bd80      	pop	{r7, pc}
 800fe40:	200021c0 	.word	0x200021c0

0800fe44 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800fe44:	b580      	push	{r7, lr}
 800fe46:	b086      	sub	sp, #24
 800fe48:	af00      	add	r7, sp, #0
 800fe4a:	60f8      	str	r0, [r7, #12]
 800fe4c:	60b9      	str	r1, [r7, #8]
 800fe4e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800fe50:	68fb      	ldr	r3, [r7, #12]
 800fe52:	2b00      	cmp	r3, #0
 800fe54:	d10a      	bne.n	800fe6c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800fe56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe5a:	f383 8811 	msr	BASEPRI, r3
 800fe5e:	f3bf 8f6f 	isb	sy
 800fe62:	f3bf 8f4f 	dsb	sy
 800fe66:	617b      	str	r3, [r7, #20]
}
 800fe68:	bf00      	nop
 800fe6a:	e7fe      	b.n	800fe6a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fe6c:	4b0a      	ldr	r3, [pc, #40]	; (800fe98 <vTaskPlaceOnEventListRestricted+0x54>)
 800fe6e:	681b      	ldr	r3, [r3, #0]
 800fe70:	3318      	adds	r3, #24
 800fe72:	4619      	mov	r1, r3
 800fe74:	68f8      	ldr	r0, [r7, #12]
 800fe76:	f7fe fe3e 	bl	800eaf6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	2b00      	cmp	r3, #0
 800fe7e:	d002      	beq.n	800fe86 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800fe80:	f04f 33ff 	mov.w	r3, #4294967295
 800fe84:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800fe86:	6879      	ldr	r1, [r7, #4]
 800fe88:	68b8      	ldr	r0, [r7, #8]
 800fe8a:	f000 fa51 	bl	8010330 <prvAddCurrentTaskToDelayedList>
	}
 800fe8e:	bf00      	nop
 800fe90:	3718      	adds	r7, #24
 800fe92:	46bd      	mov	sp, r7
 800fe94:	bd80      	pop	{r7, pc}
 800fe96:	bf00      	nop
 800fe98:	200021c0 	.word	0x200021c0

0800fe9c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800fe9c:	b580      	push	{r7, lr}
 800fe9e:	b086      	sub	sp, #24
 800fea0:	af00      	add	r7, sp, #0
 800fea2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	68db      	ldr	r3, [r3, #12]
 800fea8:	68db      	ldr	r3, [r3, #12]
 800feaa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800feac:	693b      	ldr	r3, [r7, #16]
 800feae:	2b00      	cmp	r3, #0
 800feb0:	d10a      	bne.n	800fec8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800feb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800feb6:	f383 8811 	msr	BASEPRI, r3
 800feba:	f3bf 8f6f 	isb	sy
 800febe:	f3bf 8f4f 	dsb	sy
 800fec2:	60fb      	str	r3, [r7, #12]
}
 800fec4:	bf00      	nop
 800fec6:	e7fe      	b.n	800fec6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800fec8:	693b      	ldr	r3, [r7, #16]
 800feca:	3318      	adds	r3, #24
 800fecc:	4618      	mov	r0, r3
 800fece:	f7fe fe6f 	bl	800ebb0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fed2:	4b1e      	ldr	r3, [pc, #120]	; (800ff4c <xTaskRemoveFromEventList+0xb0>)
 800fed4:	681b      	ldr	r3, [r3, #0]
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	d11d      	bne.n	800ff16 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800feda:	693b      	ldr	r3, [r7, #16]
 800fedc:	3304      	adds	r3, #4
 800fede:	4618      	mov	r0, r3
 800fee0:	f7fe fe66 	bl	800ebb0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800fee4:	693b      	ldr	r3, [r7, #16]
 800fee6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fee8:	4b19      	ldr	r3, [pc, #100]	; (800ff50 <xTaskRemoveFromEventList+0xb4>)
 800feea:	681b      	ldr	r3, [r3, #0]
 800feec:	429a      	cmp	r2, r3
 800feee:	d903      	bls.n	800fef8 <xTaskRemoveFromEventList+0x5c>
 800fef0:	693b      	ldr	r3, [r7, #16]
 800fef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fef4:	4a16      	ldr	r2, [pc, #88]	; (800ff50 <xTaskRemoveFromEventList+0xb4>)
 800fef6:	6013      	str	r3, [r2, #0]
 800fef8:	693b      	ldr	r3, [r7, #16]
 800fefa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fefc:	4613      	mov	r3, r2
 800fefe:	009b      	lsls	r3, r3, #2
 800ff00:	4413      	add	r3, r2
 800ff02:	009b      	lsls	r3, r3, #2
 800ff04:	4a13      	ldr	r2, [pc, #76]	; (800ff54 <xTaskRemoveFromEventList+0xb8>)
 800ff06:	441a      	add	r2, r3
 800ff08:	693b      	ldr	r3, [r7, #16]
 800ff0a:	3304      	adds	r3, #4
 800ff0c:	4619      	mov	r1, r3
 800ff0e:	4610      	mov	r0, r2
 800ff10:	f7fe fdf1 	bl	800eaf6 <vListInsertEnd>
 800ff14:	e005      	b.n	800ff22 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ff16:	693b      	ldr	r3, [r7, #16]
 800ff18:	3318      	adds	r3, #24
 800ff1a:	4619      	mov	r1, r3
 800ff1c:	480e      	ldr	r0, [pc, #56]	; (800ff58 <xTaskRemoveFromEventList+0xbc>)
 800ff1e:	f7fe fdea 	bl	800eaf6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ff22:	693b      	ldr	r3, [r7, #16]
 800ff24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff26:	4b0d      	ldr	r3, [pc, #52]	; (800ff5c <xTaskRemoveFromEventList+0xc0>)
 800ff28:	681b      	ldr	r3, [r3, #0]
 800ff2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff2c:	429a      	cmp	r2, r3
 800ff2e:	d905      	bls.n	800ff3c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ff30:	2301      	movs	r3, #1
 800ff32:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ff34:	4b0a      	ldr	r3, [pc, #40]	; (800ff60 <xTaskRemoveFromEventList+0xc4>)
 800ff36:	2201      	movs	r2, #1
 800ff38:	601a      	str	r2, [r3, #0]
 800ff3a:	e001      	b.n	800ff40 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800ff3c:	2300      	movs	r3, #0
 800ff3e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ff40:	697b      	ldr	r3, [r7, #20]
}
 800ff42:	4618      	mov	r0, r3
 800ff44:	3718      	adds	r7, #24
 800ff46:	46bd      	mov	sp, r7
 800ff48:	bd80      	pop	{r7, pc}
 800ff4a:	bf00      	nop
 800ff4c:	200026bc 	.word	0x200026bc
 800ff50:	2000269c 	.word	0x2000269c
 800ff54:	200021c4 	.word	0x200021c4
 800ff58:	20002654 	.word	0x20002654
 800ff5c:	200021c0 	.word	0x200021c0
 800ff60:	200026a8 	.word	0x200026a8

0800ff64 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ff64:	b480      	push	{r7}
 800ff66:	b083      	sub	sp, #12
 800ff68:	af00      	add	r7, sp, #0
 800ff6a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ff6c:	4b06      	ldr	r3, [pc, #24]	; (800ff88 <vTaskInternalSetTimeOutState+0x24>)
 800ff6e:	681a      	ldr	r2, [r3, #0]
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ff74:	4b05      	ldr	r3, [pc, #20]	; (800ff8c <vTaskInternalSetTimeOutState+0x28>)
 800ff76:	681a      	ldr	r2, [r3, #0]
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	605a      	str	r2, [r3, #4]
}
 800ff7c:	bf00      	nop
 800ff7e:	370c      	adds	r7, #12
 800ff80:	46bd      	mov	sp, r7
 800ff82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff86:	4770      	bx	lr
 800ff88:	200026ac 	.word	0x200026ac
 800ff8c:	20002698 	.word	0x20002698

0800ff90 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ff90:	b580      	push	{r7, lr}
 800ff92:	b088      	sub	sp, #32
 800ff94:	af00      	add	r7, sp, #0
 800ff96:	6078      	str	r0, [r7, #4]
 800ff98:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	d10a      	bne.n	800ffb6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800ffa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffa4:	f383 8811 	msr	BASEPRI, r3
 800ffa8:	f3bf 8f6f 	isb	sy
 800ffac:	f3bf 8f4f 	dsb	sy
 800ffb0:	613b      	str	r3, [r7, #16]
}
 800ffb2:	bf00      	nop
 800ffb4:	e7fe      	b.n	800ffb4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ffb6:	683b      	ldr	r3, [r7, #0]
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	d10a      	bne.n	800ffd2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800ffbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffc0:	f383 8811 	msr	BASEPRI, r3
 800ffc4:	f3bf 8f6f 	isb	sy
 800ffc8:	f3bf 8f4f 	dsb	sy
 800ffcc:	60fb      	str	r3, [r7, #12]
}
 800ffce:	bf00      	nop
 800ffd0:	e7fe      	b.n	800ffd0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800ffd2:	f000 fe7f 	bl	8010cd4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ffd6:	4b1d      	ldr	r3, [pc, #116]	; (801004c <xTaskCheckForTimeOut+0xbc>)
 800ffd8:	681b      	ldr	r3, [r3, #0]
 800ffda:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	685b      	ldr	r3, [r3, #4]
 800ffe0:	69ba      	ldr	r2, [r7, #24]
 800ffe2:	1ad3      	subs	r3, r2, r3
 800ffe4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ffe6:	683b      	ldr	r3, [r7, #0]
 800ffe8:	681b      	ldr	r3, [r3, #0]
 800ffea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ffee:	d102      	bne.n	800fff6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800fff0:	2300      	movs	r3, #0
 800fff2:	61fb      	str	r3, [r7, #28]
 800fff4:	e023      	b.n	801003e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	681a      	ldr	r2, [r3, #0]
 800fffa:	4b15      	ldr	r3, [pc, #84]	; (8010050 <xTaskCheckForTimeOut+0xc0>)
 800fffc:	681b      	ldr	r3, [r3, #0]
 800fffe:	429a      	cmp	r2, r3
 8010000:	d007      	beq.n	8010012 <xTaskCheckForTimeOut+0x82>
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	685b      	ldr	r3, [r3, #4]
 8010006:	69ba      	ldr	r2, [r7, #24]
 8010008:	429a      	cmp	r2, r3
 801000a:	d302      	bcc.n	8010012 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801000c:	2301      	movs	r3, #1
 801000e:	61fb      	str	r3, [r7, #28]
 8010010:	e015      	b.n	801003e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8010012:	683b      	ldr	r3, [r7, #0]
 8010014:	681b      	ldr	r3, [r3, #0]
 8010016:	697a      	ldr	r2, [r7, #20]
 8010018:	429a      	cmp	r2, r3
 801001a:	d20b      	bcs.n	8010034 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801001c:	683b      	ldr	r3, [r7, #0]
 801001e:	681a      	ldr	r2, [r3, #0]
 8010020:	697b      	ldr	r3, [r7, #20]
 8010022:	1ad2      	subs	r2, r2, r3
 8010024:	683b      	ldr	r3, [r7, #0]
 8010026:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8010028:	6878      	ldr	r0, [r7, #4]
 801002a:	f7ff ff9b 	bl	800ff64 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801002e:	2300      	movs	r3, #0
 8010030:	61fb      	str	r3, [r7, #28]
 8010032:	e004      	b.n	801003e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8010034:	683b      	ldr	r3, [r7, #0]
 8010036:	2200      	movs	r2, #0
 8010038:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801003a:	2301      	movs	r3, #1
 801003c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801003e:	f000 fe79 	bl	8010d34 <vPortExitCritical>

	return xReturn;
 8010042:	69fb      	ldr	r3, [r7, #28]
}
 8010044:	4618      	mov	r0, r3
 8010046:	3720      	adds	r7, #32
 8010048:	46bd      	mov	sp, r7
 801004a:	bd80      	pop	{r7, pc}
 801004c:	20002698 	.word	0x20002698
 8010050:	200026ac 	.word	0x200026ac

08010054 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8010054:	b480      	push	{r7}
 8010056:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8010058:	4b03      	ldr	r3, [pc, #12]	; (8010068 <vTaskMissedYield+0x14>)
 801005a:	2201      	movs	r2, #1
 801005c:	601a      	str	r2, [r3, #0]
}
 801005e:	bf00      	nop
 8010060:	46bd      	mov	sp, r7
 8010062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010066:	4770      	bx	lr
 8010068:	200026a8 	.word	0x200026a8

0801006c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801006c:	b580      	push	{r7, lr}
 801006e:	b082      	sub	sp, #8
 8010070:	af00      	add	r7, sp, #0
 8010072:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8010074:	f000 f852 	bl	801011c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8010078:	4b06      	ldr	r3, [pc, #24]	; (8010094 <prvIdleTask+0x28>)
 801007a:	681b      	ldr	r3, [r3, #0]
 801007c:	2b01      	cmp	r3, #1
 801007e:	d9f9      	bls.n	8010074 <prvIdleTask+0x8>
			{
				taskYIELD();
 8010080:	4b05      	ldr	r3, [pc, #20]	; (8010098 <prvIdleTask+0x2c>)
 8010082:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010086:	601a      	str	r2, [r3, #0]
 8010088:	f3bf 8f4f 	dsb	sy
 801008c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8010090:	e7f0      	b.n	8010074 <prvIdleTask+0x8>
 8010092:	bf00      	nop
 8010094:	200021c4 	.word	0x200021c4
 8010098:	e000ed04 	.word	0xe000ed04

0801009c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801009c:	b580      	push	{r7, lr}
 801009e:	b082      	sub	sp, #8
 80100a0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80100a2:	2300      	movs	r3, #0
 80100a4:	607b      	str	r3, [r7, #4]
 80100a6:	e00c      	b.n	80100c2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80100a8:	687a      	ldr	r2, [r7, #4]
 80100aa:	4613      	mov	r3, r2
 80100ac:	009b      	lsls	r3, r3, #2
 80100ae:	4413      	add	r3, r2
 80100b0:	009b      	lsls	r3, r3, #2
 80100b2:	4a12      	ldr	r2, [pc, #72]	; (80100fc <prvInitialiseTaskLists+0x60>)
 80100b4:	4413      	add	r3, r2
 80100b6:	4618      	mov	r0, r3
 80100b8:	f7fe fcf0 	bl	800ea9c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	3301      	adds	r3, #1
 80100c0:	607b      	str	r3, [r7, #4]
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	2b37      	cmp	r3, #55	; 0x37
 80100c6:	d9ef      	bls.n	80100a8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80100c8:	480d      	ldr	r0, [pc, #52]	; (8010100 <prvInitialiseTaskLists+0x64>)
 80100ca:	f7fe fce7 	bl	800ea9c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80100ce:	480d      	ldr	r0, [pc, #52]	; (8010104 <prvInitialiseTaskLists+0x68>)
 80100d0:	f7fe fce4 	bl	800ea9c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80100d4:	480c      	ldr	r0, [pc, #48]	; (8010108 <prvInitialiseTaskLists+0x6c>)
 80100d6:	f7fe fce1 	bl	800ea9c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80100da:	480c      	ldr	r0, [pc, #48]	; (801010c <prvInitialiseTaskLists+0x70>)
 80100dc:	f7fe fcde 	bl	800ea9c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80100e0:	480b      	ldr	r0, [pc, #44]	; (8010110 <prvInitialiseTaskLists+0x74>)
 80100e2:	f7fe fcdb 	bl	800ea9c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80100e6:	4b0b      	ldr	r3, [pc, #44]	; (8010114 <prvInitialiseTaskLists+0x78>)
 80100e8:	4a05      	ldr	r2, [pc, #20]	; (8010100 <prvInitialiseTaskLists+0x64>)
 80100ea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80100ec:	4b0a      	ldr	r3, [pc, #40]	; (8010118 <prvInitialiseTaskLists+0x7c>)
 80100ee:	4a05      	ldr	r2, [pc, #20]	; (8010104 <prvInitialiseTaskLists+0x68>)
 80100f0:	601a      	str	r2, [r3, #0]
}
 80100f2:	bf00      	nop
 80100f4:	3708      	adds	r7, #8
 80100f6:	46bd      	mov	sp, r7
 80100f8:	bd80      	pop	{r7, pc}
 80100fa:	bf00      	nop
 80100fc:	200021c4 	.word	0x200021c4
 8010100:	20002624 	.word	0x20002624
 8010104:	20002638 	.word	0x20002638
 8010108:	20002654 	.word	0x20002654
 801010c:	20002668 	.word	0x20002668
 8010110:	20002680 	.word	0x20002680
 8010114:	2000264c 	.word	0x2000264c
 8010118:	20002650 	.word	0x20002650

0801011c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801011c:	b580      	push	{r7, lr}
 801011e:	b082      	sub	sp, #8
 8010120:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010122:	e019      	b.n	8010158 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8010124:	f000 fdd6 	bl	8010cd4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010128:	4b10      	ldr	r3, [pc, #64]	; (801016c <prvCheckTasksWaitingTermination+0x50>)
 801012a:	68db      	ldr	r3, [r3, #12]
 801012c:	68db      	ldr	r3, [r3, #12]
 801012e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	3304      	adds	r3, #4
 8010134:	4618      	mov	r0, r3
 8010136:	f7fe fd3b 	bl	800ebb0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801013a:	4b0d      	ldr	r3, [pc, #52]	; (8010170 <prvCheckTasksWaitingTermination+0x54>)
 801013c:	681b      	ldr	r3, [r3, #0]
 801013e:	3b01      	subs	r3, #1
 8010140:	4a0b      	ldr	r2, [pc, #44]	; (8010170 <prvCheckTasksWaitingTermination+0x54>)
 8010142:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8010144:	4b0b      	ldr	r3, [pc, #44]	; (8010174 <prvCheckTasksWaitingTermination+0x58>)
 8010146:	681b      	ldr	r3, [r3, #0]
 8010148:	3b01      	subs	r3, #1
 801014a:	4a0a      	ldr	r2, [pc, #40]	; (8010174 <prvCheckTasksWaitingTermination+0x58>)
 801014c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801014e:	f000 fdf1 	bl	8010d34 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8010152:	6878      	ldr	r0, [r7, #4]
 8010154:	f000 f810 	bl	8010178 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010158:	4b06      	ldr	r3, [pc, #24]	; (8010174 <prvCheckTasksWaitingTermination+0x58>)
 801015a:	681b      	ldr	r3, [r3, #0]
 801015c:	2b00      	cmp	r3, #0
 801015e:	d1e1      	bne.n	8010124 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8010160:	bf00      	nop
 8010162:	bf00      	nop
 8010164:	3708      	adds	r7, #8
 8010166:	46bd      	mov	sp, r7
 8010168:	bd80      	pop	{r7, pc}
 801016a:	bf00      	nop
 801016c:	20002668 	.word	0x20002668
 8010170:	20002694 	.word	0x20002694
 8010174:	2000267c 	.word	0x2000267c

08010178 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8010178:	b580      	push	{r7, lr}
 801017a:	b084      	sub	sp, #16
 801017c:	af00      	add	r7, sp, #0
 801017e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8010186:	2b00      	cmp	r3, #0
 8010188:	d108      	bne.n	801019c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801018e:	4618      	mov	r0, r3
 8010190:	f000 ff8e 	bl	80110b0 <vPortFree>
				vPortFree( pxTCB );
 8010194:	6878      	ldr	r0, [r7, #4]
 8010196:	f000 ff8b 	bl	80110b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801019a:	e018      	b.n	80101ce <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80101a2:	2b01      	cmp	r3, #1
 80101a4:	d103      	bne.n	80101ae <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80101a6:	6878      	ldr	r0, [r7, #4]
 80101a8:	f000 ff82 	bl	80110b0 <vPortFree>
	}
 80101ac:	e00f      	b.n	80101ce <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80101b4:	2b02      	cmp	r3, #2
 80101b6:	d00a      	beq.n	80101ce <prvDeleteTCB+0x56>
	__asm volatile
 80101b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101bc:	f383 8811 	msr	BASEPRI, r3
 80101c0:	f3bf 8f6f 	isb	sy
 80101c4:	f3bf 8f4f 	dsb	sy
 80101c8:	60fb      	str	r3, [r7, #12]
}
 80101ca:	bf00      	nop
 80101cc:	e7fe      	b.n	80101cc <prvDeleteTCB+0x54>
	}
 80101ce:	bf00      	nop
 80101d0:	3710      	adds	r7, #16
 80101d2:	46bd      	mov	sp, r7
 80101d4:	bd80      	pop	{r7, pc}
	...

080101d8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80101d8:	b480      	push	{r7}
 80101da:	b083      	sub	sp, #12
 80101dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80101de:	4b0c      	ldr	r3, [pc, #48]	; (8010210 <prvResetNextTaskUnblockTime+0x38>)
 80101e0:	681b      	ldr	r3, [r3, #0]
 80101e2:	681b      	ldr	r3, [r3, #0]
 80101e4:	2b00      	cmp	r3, #0
 80101e6:	d104      	bne.n	80101f2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80101e8:	4b0a      	ldr	r3, [pc, #40]	; (8010214 <prvResetNextTaskUnblockTime+0x3c>)
 80101ea:	f04f 32ff 	mov.w	r2, #4294967295
 80101ee:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80101f0:	e008      	b.n	8010204 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80101f2:	4b07      	ldr	r3, [pc, #28]	; (8010210 <prvResetNextTaskUnblockTime+0x38>)
 80101f4:	681b      	ldr	r3, [r3, #0]
 80101f6:	68db      	ldr	r3, [r3, #12]
 80101f8:	68db      	ldr	r3, [r3, #12]
 80101fa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	685b      	ldr	r3, [r3, #4]
 8010200:	4a04      	ldr	r2, [pc, #16]	; (8010214 <prvResetNextTaskUnblockTime+0x3c>)
 8010202:	6013      	str	r3, [r2, #0]
}
 8010204:	bf00      	nop
 8010206:	370c      	adds	r7, #12
 8010208:	46bd      	mov	sp, r7
 801020a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801020e:	4770      	bx	lr
 8010210:	2000264c 	.word	0x2000264c
 8010214:	200026b4 	.word	0x200026b4

08010218 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8010218:	b480      	push	{r7}
 801021a:	b083      	sub	sp, #12
 801021c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801021e:	4b0b      	ldr	r3, [pc, #44]	; (801024c <xTaskGetSchedulerState+0x34>)
 8010220:	681b      	ldr	r3, [r3, #0]
 8010222:	2b00      	cmp	r3, #0
 8010224:	d102      	bne.n	801022c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8010226:	2301      	movs	r3, #1
 8010228:	607b      	str	r3, [r7, #4]
 801022a:	e008      	b.n	801023e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801022c:	4b08      	ldr	r3, [pc, #32]	; (8010250 <xTaskGetSchedulerState+0x38>)
 801022e:	681b      	ldr	r3, [r3, #0]
 8010230:	2b00      	cmp	r3, #0
 8010232:	d102      	bne.n	801023a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8010234:	2302      	movs	r3, #2
 8010236:	607b      	str	r3, [r7, #4]
 8010238:	e001      	b.n	801023e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801023a:	2300      	movs	r3, #0
 801023c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801023e:	687b      	ldr	r3, [r7, #4]
	}
 8010240:	4618      	mov	r0, r3
 8010242:	370c      	adds	r7, #12
 8010244:	46bd      	mov	sp, r7
 8010246:	f85d 7b04 	ldr.w	r7, [sp], #4
 801024a:	4770      	bx	lr
 801024c:	200026a0 	.word	0x200026a0
 8010250:	200026bc 	.word	0x200026bc

08010254 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8010254:	b580      	push	{r7, lr}
 8010256:	b086      	sub	sp, #24
 8010258:	af00      	add	r7, sp, #0
 801025a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8010260:	2300      	movs	r3, #0
 8010262:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	2b00      	cmp	r3, #0
 8010268:	d056      	beq.n	8010318 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801026a:	4b2e      	ldr	r3, [pc, #184]	; (8010324 <xTaskPriorityDisinherit+0xd0>)
 801026c:	681b      	ldr	r3, [r3, #0]
 801026e:	693a      	ldr	r2, [r7, #16]
 8010270:	429a      	cmp	r2, r3
 8010272:	d00a      	beq.n	801028a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8010274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010278:	f383 8811 	msr	BASEPRI, r3
 801027c:	f3bf 8f6f 	isb	sy
 8010280:	f3bf 8f4f 	dsb	sy
 8010284:	60fb      	str	r3, [r7, #12]
}
 8010286:	bf00      	nop
 8010288:	e7fe      	b.n	8010288 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801028a:	693b      	ldr	r3, [r7, #16]
 801028c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801028e:	2b00      	cmp	r3, #0
 8010290:	d10a      	bne.n	80102a8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8010292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010296:	f383 8811 	msr	BASEPRI, r3
 801029a:	f3bf 8f6f 	isb	sy
 801029e:	f3bf 8f4f 	dsb	sy
 80102a2:	60bb      	str	r3, [r7, #8]
}
 80102a4:	bf00      	nop
 80102a6:	e7fe      	b.n	80102a6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80102a8:	693b      	ldr	r3, [r7, #16]
 80102aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80102ac:	1e5a      	subs	r2, r3, #1
 80102ae:	693b      	ldr	r3, [r7, #16]
 80102b0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80102b2:	693b      	ldr	r3, [r7, #16]
 80102b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80102b6:	693b      	ldr	r3, [r7, #16]
 80102b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80102ba:	429a      	cmp	r2, r3
 80102bc:	d02c      	beq.n	8010318 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80102be:	693b      	ldr	r3, [r7, #16]
 80102c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80102c2:	2b00      	cmp	r3, #0
 80102c4:	d128      	bne.n	8010318 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80102c6:	693b      	ldr	r3, [r7, #16]
 80102c8:	3304      	adds	r3, #4
 80102ca:	4618      	mov	r0, r3
 80102cc:	f7fe fc70 	bl	800ebb0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80102d0:	693b      	ldr	r3, [r7, #16]
 80102d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80102d4:	693b      	ldr	r3, [r7, #16]
 80102d6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80102d8:	693b      	ldr	r3, [r7, #16]
 80102da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80102dc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80102e0:	693b      	ldr	r3, [r7, #16]
 80102e2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80102e4:	693b      	ldr	r3, [r7, #16]
 80102e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80102e8:	4b0f      	ldr	r3, [pc, #60]	; (8010328 <xTaskPriorityDisinherit+0xd4>)
 80102ea:	681b      	ldr	r3, [r3, #0]
 80102ec:	429a      	cmp	r2, r3
 80102ee:	d903      	bls.n	80102f8 <xTaskPriorityDisinherit+0xa4>
 80102f0:	693b      	ldr	r3, [r7, #16]
 80102f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80102f4:	4a0c      	ldr	r2, [pc, #48]	; (8010328 <xTaskPriorityDisinherit+0xd4>)
 80102f6:	6013      	str	r3, [r2, #0]
 80102f8:	693b      	ldr	r3, [r7, #16]
 80102fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80102fc:	4613      	mov	r3, r2
 80102fe:	009b      	lsls	r3, r3, #2
 8010300:	4413      	add	r3, r2
 8010302:	009b      	lsls	r3, r3, #2
 8010304:	4a09      	ldr	r2, [pc, #36]	; (801032c <xTaskPriorityDisinherit+0xd8>)
 8010306:	441a      	add	r2, r3
 8010308:	693b      	ldr	r3, [r7, #16]
 801030a:	3304      	adds	r3, #4
 801030c:	4619      	mov	r1, r3
 801030e:	4610      	mov	r0, r2
 8010310:	f7fe fbf1 	bl	800eaf6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8010314:	2301      	movs	r3, #1
 8010316:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010318:	697b      	ldr	r3, [r7, #20]
	}
 801031a:	4618      	mov	r0, r3
 801031c:	3718      	adds	r7, #24
 801031e:	46bd      	mov	sp, r7
 8010320:	bd80      	pop	{r7, pc}
 8010322:	bf00      	nop
 8010324:	200021c0 	.word	0x200021c0
 8010328:	2000269c 	.word	0x2000269c
 801032c:	200021c4 	.word	0x200021c4

08010330 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010330:	b580      	push	{r7, lr}
 8010332:	b084      	sub	sp, #16
 8010334:	af00      	add	r7, sp, #0
 8010336:	6078      	str	r0, [r7, #4]
 8010338:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801033a:	4b21      	ldr	r3, [pc, #132]	; (80103c0 <prvAddCurrentTaskToDelayedList+0x90>)
 801033c:	681b      	ldr	r3, [r3, #0]
 801033e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010340:	4b20      	ldr	r3, [pc, #128]	; (80103c4 <prvAddCurrentTaskToDelayedList+0x94>)
 8010342:	681b      	ldr	r3, [r3, #0]
 8010344:	3304      	adds	r3, #4
 8010346:	4618      	mov	r0, r3
 8010348:	f7fe fc32 	bl	800ebb0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010352:	d10a      	bne.n	801036a <prvAddCurrentTaskToDelayedList+0x3a>
 8010354:	683b      	ldr	r3, [r7, #0]
 8010356:	2b00      	cmp	r3, #0
 8010358:	d007      	beq.n	801036a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801035a:	4b1a      	ldr	r3, [pc, #104]	; (80103c4 <prvAddCurrentTaskToDelayedList+0x94>)
 801035c:	681b      	ldr	r3, [r3, #0]
 801035e:	3304      	adds	r3, #4
 8010360:	4619      	mov	r1, r3
 8010362:	4819      	ldr	r0, [pc, #100]	; (80103c8 <prvAddCurrentTaskToDelayedList+0x98>)
 8010364:	f7fe fbc7 	bl	800eaf6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8010368:	e026      	b.n	80103b8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801036a:	68fa      	ldr	r2, [r7, #12]
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	4413      	add	r3, r2
 8010370:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8010372:	4b14      	ldr	r3, [pc, #80]	; (80103c4 <prvAddCurrentTaskToDelayedList+0x94>)
 8010374:	681b      	ldr	r3, [r3, #0]
 8010376:	68ba      	ldr	r2, [r7, #8]
 8010378:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801037a:	68ba      	ldr	r2, [r7, #8]
 801037c:	68fb      	ldr	r3, [r7, #12]
 801037e:	429a      	cmp	r2, r3
 8010380:	d209      	bcs.n	8010396 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010382:	4b12      	ldr	r3, [pc, #72]	; (80103cc <prvAddCurrentTaskToDelayedList+0x9c>)
 8010384:	681a      	ldr	r2, [r3, #0]
 8010386:	4b0f      	ldr	r3, [pc, #60]	; (80103c4 <prvAddCurrentTaskToDelayedList+0x94>)
 8010388:	681b      	ldr	r3, [r3, #0]
 801038a:	3304      	adds	r3, #4
 801038c:	4619      	mov	r1, r3
 801038e:	4610      	mov	r0, r2
 8010390:	f7fe fbd5 	bl	800eb3e <vListInsert>
}
 8010394:	e010      	b.n	80103b8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010396:	4b0e      	ldr	r3, [pc, #56]	; (80103d0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8010398:	681a      	ldr	r2, [r3, #0]
 801039a:	4b0a      	ldr	r3, [pc, #40]	; (80103c4 <prvAddCurrentTaskToDelayedList+0x94>)
 801039c:	681b      	ldr	r3, [r3, #0]
 801039e:	3304      	adds	r3, #4
 80103a0:	4619      	mov	r1, r3
 80103a2:	4610      	mov	r0, r2
 80103a4:	f7fe fbcb 	bl	800eb3e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80103a8:	4b0a      	ldr	r3, [pc, #40]	; (80103d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80103aa:	681b      	ldr	r3, [r3, #0]
 80103ac:	68ba      	ldr	r2, [r7, #8]
 80103ae:	429a      	cmp	r2, r3
 80103b0:	d202      	bcs.n	80103b8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80103b2:	4a08      	ldr	r2, [pc, #32]	; (80103d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80103b4:	68bb      	ldr	r3, [r7, #8]
 80103b6:	6013      	str	r3, [r2, #0]
}
 80103b8:	bf00      	nop
 80103ba:	3710      	adds	r7, #16
 80103bc:	46bd      	mov	sp, r7
 80103be:	bd80      	pop	{r7, pc}
 80103c0:	20002698 	.word	0x20002698
 80103c4:	200021c0 	.word	0x200021c0
 80103c8:	20002680 	.word	0x20002680
 80103cc:	20002650 	.word	0x20002650
 80103d0:	2000264c 	.word	0x2000264c
 80103d4:	200026b4 	.word	0x200026b4

080103d8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80103d8:	b580      	push	{r7, lr}
 80103da:	b08a      	sub	sp, #40	; 0x28
 80103dc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80103de:	2300      	movs	r3, #0
 80103e0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80103e2:	f000 fb07 	bl	80109f4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80103e6:	4b1c      	ldr	r3, [pc, #112]	; (8010458 <xTimerCreateTimerTask+0x80>)
 80103e8:	681b      	ldr	r3, [r3, #0]
 80103ea:	2b00      	cmp	r3, #0
 80103ec:	d021      	beq.n	8010432 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80103ee:	2300      	movs	r3, #0
 80103f0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80103f2:	2300      	movs	r3, #0
 80103f4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80103f6:	1d3a      	adds	r2, r7, #4
 80103f8:	f107 0108 	add.w	r1, r7, #8
 80103fc:	f107 030c 	add.w	r3, r7, #12
 8010400:	4618      	mov	r0, r3
 8010402:	f7fe fb31 	bl	800ea68 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8010406:	6879      	ldr	r1, [r7, #4]
 8010408:	68bb      	ldr	r3, [r7, #8]
 801040a:	68fa      	ldr	r2, [r7, #12]
 801040c:	9202      	str	r2, [sp, #8]
 801040e:	9301      	str	r3, [sp, #4]
 8010410:	2302      	movs	r3, #2
 8010412:	9300      	str	r3, [sp, #0]
 8010414:	2300      	movs	r3, #0
 8010416:	460a      	mov	r2, r1
 8010418:	4910      	ldr	r1, [pc, #64]	; (801045c <xTimerCreateTimerTask+0x84>)
 801041a:	4811      	ldr	r0, [pc, #68]	; (8010460 <xTimerCreateTimerTask+0x88>)
 801041c:	f7ff f8de 	bl	800f5dc <xTaskCreateStatic>
 8010420:	4603      	mov	r3, r0
 8010422:	4a10      	ldr	r2, [pc, #64]	; (8010464 <xTimerCreateTimerTask+0x8c>)
 8010424:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8010426:	4b0f      	ldr	r3, [pc, #60]	; (8010464 <xTimerCreateTimerTask+0x8c>)
 8010428:	681b      	ldr	r3, [r3, #0]
 801042a:	2b00      	cmp	r3, #0
 801042c:	d001      	beq.n	8010432 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801042e:	2301      	movs	r3, #1
 8010430:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8010432:	697b      	ldr	r3, [r7, #20]
 8010434:	2b00      	cmp	r3, #0
 8010436:	d10a      	bne.n	801044e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8010438:	f04f 0350 	mov.w	r3, #80	; 0x50
 801043c:	f383 8811 	msr	BASEPRI, r3
 8010440:	f3bf 8f6f 	isb	sy
 8010444:	f3bf 8f4f 	dsb	sy
 8010448:	613b      	str	r3, [r7, #16]
}
 801044a:	bf00      	nop
 801044c:	e7fe      	b.n	801044c <xTimerCreateTimerTask+0x74>
	return xReturn;
 801044e:	697b      	ldr	r3, [r7, #20]
}
 8010450:	4618      	mov	r0, r3
 8010452:	3718      	adds	r7, #24
 8010454:	46bd      	mov	sp, r7
 8010456:	bd80      	pop	{r7, pc}
 8010458:	200026f0 	.word	0x200026f0
 801045c:	08014cd0 	.word	0x08014cd0
 8010460:	0801059d 	.word	0x0801059d
 8010464:	200026f4 	.word	0x200026f4

08010468 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8010468:	b580      	push	{r7, lr}
 801046a:	b08a      	sub	sp, #40	; 0x28
 801046c:	af00      	add	r7, sp, #0
 801046e:	60f8      	str	r0, [r7, #12]
 8010470:	60b9      	str	r1, [r7, #8]
 8010472:	607a      	str	r2, [r7, #4]
 8010474:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8010476:	2300      	movs	r3, #0
 8010478:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801047a:	68fb      	ldr	r3, [r7, #12]
 801047c:	2b00      	cmp	r3, #0
 801047e:	d10a      	bne.n	8010496 <xTimerGenericCommand+0x2e>
	__asm volatile
 8010480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010484:	f383 8811 	msr	BASEPRI, r3
 8010488:	f3bf 8f6f 	isb	sy
 801048c:	f3bf 8f4f 	dsb	sy
 8010490:	623b      	str	r3, [r7, #32]
}
 8010492:	bf00      	nop
 8010494:	e7fe      	b.n	8010494 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8010496:	4b1a      	ldr	r3, [pc, #104]	; (8010500 <xTimerGenericCommand+0x98>)
 8010498:	681b      	ldr	r3, [r3, #0]
 801049a:	2b00      	cmp	r3, #0
 801049c:	d02a      	beq.n	80104f4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801049e:	68bb      	ldr	r3, [r7, #8]
 80104a0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80104a6:	68fb      	ldr	r3, [r7, #12]
 80104a8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80104aa:	68bb      	ldr	r3, [r7, #8]
 80104ac:	2b05      	cmp	r3, #5
 80104ae:	dc18      	bgt.n	80104e2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80104b0:	f7ff feb2 	bl	8010218 <xTaskGetSchedulerState>
 80104b4:	4603      	mov	r3, r0
 80104b6:	2b02      	cmp	r3, #2
 80104b8:	d109      	bne.n	80104ce <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80104ba:	4b11      	ldr	r3, [pc, #68]	; (8010500 <xTimerGenericCommand+0x98>)
 80104bc:	6818      	ldr	r0, [r3, #0]
 80104be:	f107 0110 	add.w	r1, r7, #16
 80104c2:	2300      	movs	r3, #0
 80104c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80104c6:	f7fe fca1 	bl	800ee0c <xQueueGenericSend>
 80104ca:	6278      	str	r0, [r7, #36]	; 0x24
 80104cc:	e012      	b.n	80104f4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80104ce:	4b0c      	ldr	r3, [pc, #48]	; (8010500 <xTimerGenericCommand+0x98>)
 80104d0:	6818      	ldr	r0, [r3, #0]
 80104d2:	f107 0110 	add.w	r1, r7, #16
 80104d6:	2300      	movs	r3, #0
 80104d8:	2200      	movs	r2, #0
 80104da:	f7fe fc97 	bl	800ee0c <xQueueGenericSend>
 80104de:	6278      	str	r0, [r7, #36]	; 0x24
 80104e0:	e008      	b.n	80104f4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80104e2:	4b07      	ldr	r3, [pc, #28]	; (8010500 <xTimerGenericCommand+0x98>)
 80104e4:	6818      	ldr	r0, [r3, #0]
 80104e6:	f107 0110 	add.w	r1, r7, #16
 80104ea:	2300      	movs	r3, #0
 80104ec:	683a      	ldr	r2, [r7, #0]
 80104ee:	f7fe fd8b 	bl	800f008 <xQueueGenericSendFromISR>
 80104f2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80104f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80104f6:	4618      	mov	r0, r3
 80104f8:	3728      	adds	r7, #40	; 0x28
 80104fa:	46bd      	mov	sp, r7
 80104fc:	bd80      	pop	{r7, pc}
 80104fe:	bf00      	nop
 8010500:	200026f0 	.word	0x200026f0

08010504 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8010504:	b580      	push	{r7, lr}
 8010506:	b088      	sub	sp, #32
 8010508:	af02      	add	r7, sp, #8
 801050a:	6078      	str	r0, [r7, #4]
 801050c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801050e:	4b22      	ldr	r3, [pc, #136]	; (8010598 <prvProcessExpiredTimer+0x94>)
 8010510:	681b      	ldr	r3, [r3, #0]
 8010512:	68db      	ldr	r3, [r3, #12]
 8010514:	68db      	ldr	r3, [r3, #12]
 8010516:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010518:	697b      	ldr	r3, [r7, #20]
 801051a:	3304      	adds	r3, #4
 801051c:	4618      	mov	r0, r3
 801051e:	f7fe fb47 	bl	800ebb0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010522:	697b      	ldr	r3, [r7, #20]
 8010524:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010528:	f003 0304 	and.w	r3, r3, #4
 801052c:	2b00      	cmp	r3, #0
 801052e:	d022      	beq.n	8010576 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8010530:	697b      	ldr	r3, [r7, #20]
 8010532:	699a      	ldr	r2, [r3, #24]
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	18d1      	adds	r1, r2, r3
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	683a      	ldr	r2, [r7, #0]
 801053c:	6978      	ldr	r0, [r7, #20]
 801053e:	f000 f8d1 	bl	80106e4 <prvInsertTimerInActiveList>
 8010542:	4603      	mov	r3, r0
 8010544:	2b00      	cmp	r3, #0
 8010546:	d01f      	beq.n	8010588 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010548:	2300      	movs	r3, #0
 801054a:	9300      	str	r3, [sp, #0]
 801054c:	2300      	movs	r3, #0
 801054e:	687a      	ldr	r2, [r7, #4]
 8010550:	2100      	movs	r1, #0
 8010552:	6978      	ldr	r0, [r7, #20]
 8010554:	f7ff ff88 	bl	8010468 <xTimerGenericCommand>
 8010558:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801055a:	693b      	ldr	r3, [r7, #16]
 801055c:	2b00      	cmp	r3, #0
 801055e:	d113      	bne.n	8010588 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8010560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010564:	f383 8811 	msr	BASEPRI, r3
 8010568:	f3bf 8f6f 	isb	sy
 801056c:	f3bf 8f4f 	dsb	sy
 8010570:	60fb      	str	r3, [r7, #12]
}
 8010572:	bf00      	nop
 8010574:	e7fe      	b.n	8010574 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010576:	697b      	ldr	r3, [r7, #20]
 8010578:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801057c:	f023 0301 	bic.w	r3, r3, #1
 8010580:	b2da      	uxtb	r2, r3
 8010582:	697b      	ldr	r3, [r7, #20]
 8010584:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010588:	697b      	ldr	r3, [r7, #20]
 801058a:	6a1b      	ldr	r3, [r3, #32]
 801058c:	6978      	ldr	r0, [r7, #20]
 801058e:	4798      	blx	r3
}
 8010590:	bf00      	nop
 8010592:	3718      	adds	r7, #24
 8010594:	46bd      	mov	sp, r7
 8010596:	bd80      	pop	{r7, pc}
 8010598:	200026e8 	.word	0x200026e8

0801059c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 801059c:	b580      	push	{r7, lr}
 801059e:	b084      	sub	sp, #16
 80105a0:	af00      	add	r7, sp, #0
 80105a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80105a4:	f107 0308 	add.w	r3, r7, #8
 80105a8:	4618      	mov	r0, r3
 80105aa:	f000 f857 	bl	801065c <prvGetNextExpireTime>
 80105ae:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80105b0:	68bb      	ldr	r3, [r7, #8]
 80105b2:	4619      	mov	r1, r3
 80105b4:	68f8      	ldr	r0, [r7, #12]
 80105b6:	f000 f803 	bl	80105c0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80105ba:	f000 f8d5 	bl	8010768 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80105be:	e7f1      	b.n	80105a4 <prvTimerTask+0x8>

080105c0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80105c0:	b580      	push	{r7, lr}
 80105c2:	b084      	sub	sp, #16
 80105c4:	af00      	add	r7, sp, #0
 80105c6:	6078      	str	r0, [r7, #4]
 80105c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80105ca:	f7ff fa43 	bl	800fa54 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80105ce:	f107 0308 	add.w	r3, r7, #8
 80105d2:	4618      	mov	r0, r3
 80105d4:	f000 f866 	bl	80106a4 <prvSampleTimeNow>
 80105d8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80105da:	68bb      	ldr	r3, [r7, #8]
 80105dc:	2b00      	cmp	r3, #0
 80105de:	d130      	bne.n	8010642 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80105e0:	683b      	ldr	r3, [r7, #0]
 80105e2:	2b00      	cmp	r3, #0
 80105e4:	d10a      	bne.n	80105fc <prvProcessTimerOrBlockTask+0x3c>
 80105e6:	687a      	ldr	r2, [r7, #4]
 80105e8:	68fb      	ldr	r3, [r7, #12]
 80105ea:	429a      	cmp	r2, r3
 80105ec:	d806      	bhi.n	80105fc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80105ee:	f7ff fa3f 	bl	800fa70 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80105f2:	68f9      	ldr	r1, [r7, #12]
 80105f4:	6878      	ldr	r0, [r7, #4]
 80105f6:	f7ff ff85 	bl	8010504 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80105fa:	e024      	b.n	8010646 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80105fc:	683b      	ldr	r3, [r7, #0]
 80105fe:	2b00      	cmp	r3, #0
 8010600:	d008      	beq.n	8010614 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8010602:	4b13      	ldr	r3, [pc, #76]	; (8010650 <prvProcessTimerOrBlockTask+0x90>)
 8010604:	681b      	ldr	r3, [r3, #0]
 8010606:	681b      	ldr	r3, [r3, #0]
 8010608:	2b00      	cmp	r3, #0
 801060a:	d101      	bne.n	8010610 <prvProcessTimerOrBlockTask+0x50>
 801060c:	2301      	movs	r3, #1
 801060e:	e000      	b.n	8010612 <prvProcessTimerOrBlockTask+0x52>
 8010610:	2300      	movs	r3, #0
 8010612:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8010614:	4b0f      	ldr	r3, [pc, #60]	; (8010654 <prvProcessTimerOrBlockTask+0x94>)
 8010616:	6818      	ldr	r0, [r3, #0]
 8010618:	687a      	ldr	r2, [r7, #4]
 801061a:	68fb      	ldr	r3, [r7, #12]
 801061c:	1ad3      	subs	r3, r2, r3
 801061e:	683a      	ldr	r2, [r7, #0]
 8010620:	4619      	mov	r1, r3
 8010622:	f7fe ffa7 	bl	800f574 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8010626:	f7ff fa23 	bl	800fa70 <xTaskResumeAll>
 801062a:	4603      	mov	r3, r0
 801062c:	2b00      	cmp	r3, #0
 801062e:	d10a      	bne.n	8010646 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8010630:	4b09      	ldr	r3, [pc, #36]	; (8010658 <prvProcessTimerOrBlockTask+0x98>)
 8010632:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010636:	601a      	str	r2, [r3, #0]
 8010638:	f3bf 8f4f 	dsb	sy
 801063c:	f3bf 8f6f 	isb	sy
}
 8010640:	e001      	b.n	8010646 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8010642:	f7ff fa15 	bl	800fa70 <xTaskResumeAll>
}
 8010646:	bf00      	nop
 8010648:	3710      	adds	r7, #16
 801064a:	46bd      	mov	sp, r7
 801064c:	bd80      	pop	{r7, pc}
 801064e:	bf00      	nop
 8010650:	200026ec 	.word	0x200026ec
 8010654:	200026f0 	.word	0x200026f0
 8010658:	e000ed04 	.word	0xe000ed04

0801065c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 801065c:	b480      	push	{r7}
 801065e:	b085      	sub	sp, #20
 8010660:	af00      	add	r7, sp, #0
 8010662:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8010664:	4b0e      	ldr	r3, [pc, #56]	; (80106a0 <prvGetNextExpireTime+0x44>)
 8010666:	681b      	ldr	r3, [r3, #0]
 8010668:	681b      	ldr	r3, [r3, #0]
 801066a:	2b00      	cmp	r3, #0
 801066c:	d101      	bne.n	8010672 <prvGetNextExpireTime+0x16>
 801066e:	2201      	movs	r2, #1
 8010670:	e000      	b.n	8010674 <prvGetNextExpireTime+0x18>
 8010672:	2200      	movs	r2, #0
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	681b      	ldr	r3, [r3, #0]
 801067c:	2b00      	cmp	r3, #0
 801067e:	d105      	bne.n	801068c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010680:	4b07      	ldr	r3, [pc, #28]	; (80106a0 <prvGetNextExpireTime+0x44>)
 8010682:	681b      	ldr	r3, [r3, #0]
 8010684:	68db      	ldr	r3, [r3, #12]
 8010686:	681b      	ldr	r3, [r3, #0]
 8010688:	60fb      	str	r3, [r7, #12]
 801068a:	e001      	b.n	8010690 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 801068c:	2300      	movs	r3, #0
 801068e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8010690:	68fb      	ldr	r3, [r7, #12]
}
 8010692:	4618      	mov	r0, r3
 8010694:	3714      	adds	r7, #20
 8010696:	46bd      	mov	sp, r7
 8010698:	f85d 7b04 	ldr.w	r7, [sp], #4
 801069c:	4770      	bx	lr
 801069e:	bf00      	nop
 80106a0:	200026e8 	.word	0x200026e8

080106a4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80106a4:	b580      	push	{r7, lr}
 80106a6:	b084      	sub	sp, #16
 80106a8:	af00      	add	r7, sp, #0
 80106aa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80106ac:	f7ff fa7e 	bl	800fbac <xTaskGetTickCount>
 80106b0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80106b2:	4b0b      	ldr	r3, [pc, #44]	; (80106e0 <prvSampleTimeNow+0x3c>)
 80106b4:	681b      	ldr	r3, [r3, #0]
 80106b6:	68fa      	ldr	r2, [r7, #12]
 80106b8:	429a      	cmp	r2, r3
 80106ba:	d205      	bcs.n	80106c8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80106bc:	f000 f936 	bl	801092c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	2201      	movs	r2, #1
 80106c4:	601a      	str	r2, [r3, #0]
 80106c6:	e002      	b.n	80106ce <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	2200      	movs	r2, #0
 80106cc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80106ce:	4a04      	ldr	r2, [pc, #16]	; (80106e0 <prvSampleTimeNow+0x3c>)
 80106d0:	68fb      	ldr	r3, [r7, #12]
 80106d2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80106d4:	68fb      	ldr	r3, [r7, #12]
}
 80106d6:	4618      	mov	r0, r3
 80106d8:	3710      	adds	r7, #16
 80106da:	46bd      	mov	sp, r7
 80106dc:	bd80      	pop	{r7, pc}
 80106de:	bf00      	nop
 80106e0:	200026f8 	.word	0x200026f8

080106e4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80106e4:	b580      	push	{r7, lr}
 80106e6:	b086      	sub	sp, #24
 80106e8:	af00      	add	r7, sp, #0
 80106ea:	60f8      	str	r0, [r7, #12]
 80106ec:	60b9      	str	r1, [r7, #8]
 80106ee:	607a      	str	r2, [r7, #4]
 80106f0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80106f2:	2300      	movs	r3, #0
 80106f4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80106f6:	68fb      	ldr	r3, [r7, #12]
 80106f8:	68ba      	ldr	r2, [r7, #8]
 80106fa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80106fc:	68fb      	ldr	r3, [r7, #12]
 80106fe:	68fa      	ldr	r2, [r7, #12]
 8010700:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8010702:	68ba      	ldr	r2, [r7, #8]
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	429a      	cmp	r2, r3
 8010708:	d812      	bhi.n	8010730 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801070a:	687a      	ldr	r2, [r7, #4]
 801070c:	683b      	ldr	r3, [r7, #0]
 801070e:	1ad2      	subs	r2, r2, r3
 8010710:	68fb      	ldr	r3, [r7, #12]
 8010712:	699b      	ldr	r3, [r3, #24]
 8010714:	429a      	cmp	r2, r3
 8010716:	d302      	bcc.n	801071e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8010718:	2301      	movs	r3, #1
 801071a:	617b      	str	r3, [r7, #20]
 801071c:	e01b      	b.n	8010756 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801071e:	4b10      	ldr	r3, [pc, #64]	; (8010760 <prvInsertTimerInActiveList+0x7c>)
 8010720:	681a      	ldr	r2, [r3, #0]
 8010722:	68fb      	ldr	r3, [r7, #12]
 8010724:	3304      	adds	r3, #4
 8010726:	4619      	mov	r1, r3
 8010728:	4610      	mov	r0, r2
 801072a:	f7fe fa08 	bl	800eb3e <vListInsert>
 801072e:	e012      	b.n	8010756 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8010730:	687a      	ldr	r2, [r7, #4]
 8010732:	683b      	ldr	r3, [r7, #0]
 8010734:	429a      	cmp	r2, r3
 8010736:	d206      	bcs.n	8010746 <prvInsertTimerInActiveList+0x62>
 8010738:	68ba      	ldr	r2, [r7, #8]
 801073a:	683b      	ldr	r3, [r7, #0]
 801073c:	429a      	cmp	r2, r3
 801073e:	d302      	bcc.n	8010746 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8010740:	2301      	movs	r3, #1
 8010742:	617b      	str	r3, [r7, #20]
 8010744:	e007      	b.n	8010756 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010746:	4b07      	ldr	r3, [pc, #28]	; (8010764 <prvInsertTimerInActiveList+0x80>)
 8010748:	681a      	ldr	r2, [r3, #0]
 801074a:	68fb      	ldr	r3, [r7, #12]
 801074c:	3304      	adds	r3, #4
 801074e:	4619      	mov	r1, r3
 8010750:	4610      	mov	r0, r2
 8010752:	f7fe f9f4 	bl	800eb3e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8010756:	697b      	ldr	r3, [r7, #20]
}
 8010758:	4618      	mov	r0, r3
 801075a:	3718      	adds	r7, #24
 801075c:	46bd      	mov	sp, r7
 801075e:	bd80      	pop	{r7, pc}
 8010760:	200026ec 	.word	0x200026ec
 8010764:	200026e8 	.word	0x200026e8

08010768 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8010768:	b580      	push	{r7, lr}
 801076a:	b08e      	sub	sp, #56	; 0x38
 801076c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801076e:	e0ca      	b.n	8010906 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	2b00      	cmp	r3, #0
 8010774:	da18      	bge.n	80107a8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8010776:	1d3b      	adds	r3, r7, #4
 8010778:	3304      	adds	r3, #4
 801077a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 801077c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801077e:	2b00      	cmp	r3, #0
 8010780:	d10a      	bne.n	8010798 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8010782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010786:	f383 8811 	msr	BASEPRI, r3
 801078a:	f3bf 8f6f 	isb	sy
 801078e:	f3bf 8f4f 	dsb	sy
 8010792:	61fb      	str	r3, [r7, #28]
}
 8010794:	bf00      	nop
 8010796:	e7fe      	b.n	8010796 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8010798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801079a:	681b      	ldr	r3, [r3, #0]
 801079c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801079e:	6850      	ldr	r0, [r2, #4]
 80107a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80107a2:	6892      	ldr	r2, [r2, #8]
 80107a4:	4611      	mov	r1, r2
 80107a6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	2b00      	cmp	r3, #0
 80107ac:	f2c0 80aa 	blt.w	8010904 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80107b0:	68fb      	ldr	r3, [r7, #12]
 80107b2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80107b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107b6:	695b      	ldr	r3, [r3, #20]
 80107b8:	2b00      	cmp	r3, #0
 80107ba:	d004      	beq.n	80107c6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80107bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107be:	3304      	adds	r3, #4
 80107c0:	4618      	mov	r0, r3
 80107c2:	f7fe f9f5 	bl	800ebb0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80107c6:	463b      	mov	r3, r7
 80107c8:	4618      	mov	r0, r3
 80107ca:	f7ff ff6b 	bl	80106a4 <prvSampleTimeNow>
 80107ce:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	2b09      	cmp	r3, #9
 80107d4:	f200 8097 	bhi.w	8010906 <prvProcessReceivedCommands+0x19e>
 80107d8:	a201      	add	r2, pc, #4	; (adr r2, 80107e0 <prvProcessReceivedCommands+0x78>)
 80107da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80107de:	bf00      	nop
 80107e0:	08010809 	.word	0x08010809
 80107e4:	08010809 	.word	0x08010809
 80107e8:	08010809 	.word	0x08010809
 80107ec:	0801087d 	.word	0x0801087d
 80107f0:	08010891 	.word	0x08010891
 80107f4:	080108db 	.word	0x080108db
 80107f8:	08010809 	.word	0x08010809
 80107fc:	08010809 	.word	0x08010809
 8010800:	0801087d 	.word	0x0801087d
 8010804:	08010891 	.word	0x08010891
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801080a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801080e:	f043 0301 	orr.w	r3, r3, #1
 8010812:	b2da      	uxtb	r2, r3
 8010814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010816:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801081a:	68ba      	ldr	r2, [r7, #8]
 801081c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801081e:	699b      	ldr	r3, [r3, #24]
 8010820:	18d1      	adds	r1, r2, r3
 8010822:	68bb      	ldr	r3, [r7, #8]
 8010824:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010826:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010828:	f7ff ff5c 	bl	80106e4 <prvInsertTimerInActiveList>
 801082c:	4603      	mov	r3, r0
 801082e:	2b00      	cmp	r3, #0
 8010830:	d069      	beq.n	8010906 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010834:	6a1b      	ldr	r3, [r3, #32]
 8010836:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010838:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801083a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801083c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010840:	f003 0304 	and.w	r3, r3, #4
 8010844:	2b00      	cmp	r3, #0
 8010846:	d05e      	beq.n	8010906 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8010848:	68ba      	ldr	r2, [r7, #8]
 801084a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801084c:	699b      	ldr	r3, [r3, #24]
 801084e:	441a      	add	r2, r3
 8010850:	2300      	movs	r3, #0
 8010852:	9300      	str	r3, [sp, #0]
 8010854:	2300      	movs	r3, #0
 8010856:	2100      	movs	r1, #0
 8010858:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801085a:	f7ff fe05 	bl	8010468 <xTimerGenericCommand>
 801085e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8010860:	6a3b      	ldr	r3, [r7, #32]
 8010862:	2b00      	cmp	r3, #0
 8010864:	d14f      	bne.n	8010906 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8010866:	f04f 0350 	mov.w	r3, #80	; 0x50
 801086a:	f383 8811 	msr	BASEPRI, r3
 801086e:	f3bf 8f6f 	isb	sy
 8010872:	f3bf 8f4f 	dsb	sy
 8010876:	61bb      	str	r3, [r7, #24]
}
 8010878:	bf00      	nop
 801087a:	e7fe      	b.n	801087a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801087c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801087e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010882:	f023 0301 	bic.w	r3, r3, #1
 8010886:	b2da      	uxtb	r2, r3
 8010888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801088a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 801088e:	e03a      	b.n	8010906 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010892:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010896:	f043 0301 	orr.w	r3, r3, #1
 801089a:	b2da      	uxtb	r2, r3
 801089c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801089e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80108a2:	68ba      	ldr	r2, [r7, #8]
 80108a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108a6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80108a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108aa:	699b      	ldr	r3, [r3, #24]
 80108ac:	2b00      	cmp	r3, #0
 80108ae:	d10a      	bne.n	80108c6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80108b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108b4:	f383 8811 	msr	BASEPRI, r3
 80108b8:	f3bf 8f6f 	isb	sy
 80108bc:	f3bf 8f4f 	dsb	sy
 80108c0:	617b      	str	r3, [r7, #20]
}
 80108c2:	bf00      	nop
 80108c4:	e7fe      	b.n	80108c4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80108c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108c8:	699a      	ldr	r2, [r3, #24]
 80108ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108cc:	18d1      	adds	r1, r2, r3
 80108ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80108d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80108d4:	f7ff ff06 	bl	80106e4 <prvInsertTimerInActiveList>
					break;
 80108d8:	e015      	b.n	8010906 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80108da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80108e0:	f003 0302 	and.w	r3, r3, #2
 80108e4:	2b00      	cmp	r3, #0
 80108e6:	d103      	bne.n	80108f0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80108e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80108ea:	f000 fbe1 	bl	80110b0 <vPortFree>
 80108ee:	e00a      	b.n	8010906 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80108f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80108f6:	f023 0301 	bic.w	r3, r3, #1
 80108fa:	b2da      	uxtb	r2, r3
 80108fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8010902:	e000      	b.n	8010906 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8010904:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010906:	4b08      	ldr	r3, [pc, #32]	; (8010928 <prvProcessReceivedCommands+0x1c0>)
 8010908:	681b      	ldr	r3, [r3, #0]
 801090a:	1d39      	adds	r1, r7, #4
 801090c:	2200      	movs	r2, #0
 801090e:	4618      	mov	r0, r3
 8010910:	f7fe fc16 	bl	800f140 <xQueueReceive>
 8010914:	4603      	mov	r3, r0
 8010916:	2b00      	cmp	r3, #0
 8010918:	f47f af2a 	bne.w	8010770 <prvProcessReceivedCommands+0x8>
	}
}
 801091c:	bf00      	nop
 801091e:	bf00      	nop
 8010920:	3730      	adds	r7, #48	; 0x30
 8010922:	46bd      	mov	sp, r7
 8010924:	bd80      	pop	{r7, pc}
 8010926:	bf00      	nop
 8010928:	200026f0 	.word	0x200026f0

0801092c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 801092c:	b580      	push	{r7, lr}
 801092e:	b088      	sub	sp, #32
 8010930:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010932:	e048      	b.n	80109c6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010934:	4b2d      	ldr	r3, [pc, #180]	; (80109ec <prvSwitchTimerLists+0xc0>)
 8010936:	681b      	ldr	r3, [r3, #0]
 8010938:	68db      	ldr	r3, [r3, #12]
 801093a:	681b      	ldr	r3, [r3, #0]
 801093c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801093e:	4b2b      	ldr	r3, [pc, #172]	; (80109ec <prvSwitchTimerLists+0xc0>)
 8010940:	681b      	ldr	r3, [r3, #0]
 8010942:	68db      	ldr	r3, [r3, #12]
 8010944:	68db      	ldr	r3, [r3, #12]
 8010946:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010948:	68fb      	ldr	r3, [r7, #12]
 801094a:	3304      	adds	r3, #4
 801094c:	4618      	mov	r0, r3
 801094e:	f7fe f92f 	bl	800ebb0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010952:	68fb      	ldr	r3, [r7, #12]
 8010954:	6a1b      	ldr	r3, [r3, #32]
 8010956:	68f8      	ldr	r0, [r7, #12]
 8010958:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801095a:	68fb      	ldr	r3, [r7, #12]
 801095c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010960:	f003 0304 	and.w	r3, r3, #4
 8010964:	2b00      	cmp	r3, #0
 8010966:	d02e      	beq.n	80109c6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8010968:	68fb      	ldr	r3, [r7, #12]
 801096a:	699b      	ldr	r3, [r3, #24]
 801096c:	693a      	ldr	r2, [r7, #16]
 801096e:	4413      	add	r3, r2
 8010970:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8010972:	68ba      	ldr	r2, [r7, #8]
 8010974:	693b      	ldr	r3, [r7, #16]
 8010976:	429a      	cmp	r2, r3
 8010978:	d90e      	bls.n	8010998 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801097a:	68fb      	ldr	r3, [r7, #12]
 801097c:	68ba      	ldr	r2, [r7, #8]
 801097e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010980:	68fb      	ldr	r3, [r7, #12]
 8010982:	68fa      	ldr	r2, [r7, #12]
 8010984:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010986:	4b19      	ldr	r3, [pc, #100]	; (80109ec <prvSwitchTimerLists+0xc0>)
 8010988:	681a      	ldr	r2, [r3, #0]
 801098a:	68fb      	ldr	r3, [r7, #12]
 801098c:	3304      	adds	r3, #4
 801098e:	4619      	mov	r1, r3
 8010990:	4610      	mov	r0, r2
 8010992:	f7fe f8d4 	bl	800eb3e <vListInsert>
 8010996:	e016      	b.n	80109c6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010998:	2300      	movs	r3, #0
 801099a:	9300      	str	r3, [sp, #0]
 801099c:	2300      	movs	r3, #0
 801099e:	693a      	ldr	r2, [r7, #16]
 80109a0:	2100      	movs	r1, #0
 80109a2:	68f8      	ldr	r0, [r7, #12]
 80109a4:	f7ff fd60 	bl	8010468 <xTimerGenericCommand>
 80109a8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	2b00      	cmp	r3, #0
 80109ae:	d10a      	bne.n	80109c6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80109b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109b4:	f383 8811 	msr	BASEPRI, r3
 80109b8:	f3bf 8f6f 	isb	sy
 80109bc:	f3bf 8f4f 	dsb	sy
 80109c0:	603b      	str	r3, [r7, #0]
}
 80109c2:	bf00      	nop
 80109c4:	e7fe      	b.n	80109c4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80109c6:	4b09      	ldr	r3, [pc, #36]	; (80109ec <prvSwitchTimerLists+0xc0>)
 80109c8:	681b      	ldr	r3, [r3, #0]
 80109ca:	681b      	ldr	r3, [r3, #0]
 80109cc:	2b00      	cmp	r3, #0
 80109ce:	d1b1      	bne.n	8010934 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80109d0:	4b06      	ldr	r3, [pc, #24]	; (80109ec <prvSwitchTimerLists+0xc0>)
 80109d2:	681b      	ldr	r3, [r3, #0]
 80109d4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80109d6:	4b06      	ldr	r3, [pc, #24]	; (80109f0 <prvSwitchTimerLists+0xc4>)
 80109d8:	681b      	ldr	r3, [r3, #0]
 80109da:	4a04      	ldr	r2, [pc, #16]	; (80109ec <prvSwitchTimerLists+0xc0>)
 80109dc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80109de:	4a04      	ldr	r2, [pc, #16]	; (80109f0 <prvSwitchTimerLists+0xc4>)
 80109e0:	697b      	ldr	r3, [r7, #20]
 80109e2:	6013      	str	r3, [r2, #0]
}
 80109e4:	bf00      	nop
 80109e6:	3718      	adds	r7, #24
 80109e8:	46bd      	mov	sp, r7
 80109ea:	bd80      	pop	{r7, pc}
 80109ec:	200026e8 	.word	0x200026e8
 80109f0:	200026ec 	.word	0x200026ec

080109f4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80109f4:	b580      	push	{r7, lr}
 80109f6:	b082      	sub	sp, #8
 80109f8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80109fa:	f000 f96b 	bl	8010cd4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80109fe:	4b15      	ldr	r3, [pc, #84]	; (8010a54 <prvCheckForValidListAndQueue+0x60>)
 8010a00:	681b      	ldr	r3, [r3, #0]
 8010a02:	2b00      	cmp	r3, #0
 8010a04:	d120      	bne.n	8010a48 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8010a06:	4814      	ldr	r0, [pc, #80]	; (8010a58 <prvCheckForValidListAndQueue+0x64>)
 8010a08:	f7fe f848 	bl	800ea9c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8010a0c:	4813      	ldr	r0, [pc, #76]	; (8010a5c <prvCheckForValidListAndQueue+0x68>)
 8010a0e:	f7fe f845 	bl	800ea9c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8010a12:	4b13      	ldr	r3, [pc, #76]	; (8010a60 <prvCheckForValidListAndQueue+0x6c>)
 8010a14:	4a10      	ldr	r2, [pc, #64]	; (8010a58 <prvCheckForValidListAndQueue+0x64>)
 8010a16:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8010a18:	4b12      	ldr	r3, [pc, #72]	; (8010a64 <prvCheckForValidListAndQueue+0x70>)
 8010a1a:	4a10      	ldr	r2, [pc, #64]	; (8010a5c <prvCheckForValidListAndQueue+0x68>)
 8010a1c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8010a1e:	2300      	movs	r3, #0
 8010a20:	9300      	str	r3, [sp, #0]
 8010a22:	4b11      	ldr	r3, [pc, #68]	; (8010a68 <prvCheckForValidListAndQueue+0x74>)
 8010a24:	4a11      	ldr	r2, [pc, #68]	; (8010a6c <prvCheckForValidListAndQueue+0x78>)
 8010a26:	2110      	movs	r1, #16
 8010a28:	200a      	movs	r0, #10
 8010a2a:	f7fe f953 	bl	800ecd4 <xQueueGenericCreateStatic>
 8010a2e:	4603      	mov	r3, r0
 8010a30:	4a08      	ldr	r2, [pc, #32]	; (8010a54 <prvCheckForValidListAndQueue+0x60>)
 8010a32:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8010a34:	4b07      	ldr	r3, [pc, #28]	; (8010a54 <prvCheckForValidListAndQueue+0x60>)
 8010a36:	681b      	ldr	r3, [r3, #0]
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	d005      	beq.n	8010a48 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8010a3c:	4b05      	ldr	r3, [pc, #20]	; (8010a54 <prvCheckForValidListAndQueue+0x60>)
 8010a3e:	681b      	ldr	r3, [r3, #0]
 8010a40:	490b      	ldr	r1, [pc, #44]	; (8010a70 <prvCheckForValidListAndQueue+0x7c>)
 8010a42:	4618      	mov	r0, r3
 8010a44:	f7fe fd6c 	bl	800f520 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010a48:	f000 f974 	bl	8010d34 <vPortExitCritical>
}
 8010a4c:	bf00      	nop
 8010a4e:	46bd      	mov	sp, r7
 8010a50:	bd80      	pop	{r7, pc}
 8010a52:	bf00      	nop
 8010a54:	200026f0 	.word	0x200026f0
 8010a58:	200026c0 	.word	0x200026c0
 8010a5c:	200026d4 	.word	0x200026d4
 8010a60:	200026e8 	.word	0x200026e8
 8010a64:	200026ec 	.word	0x200026ec
 8010a68:	2000279c 	.word	0x2000279c
 8010a6c:	200026fc 	.word	0x200026fc
 8010a70:	08014cd8 	.word	0x08014cd8

08010a74 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8010a74:	b480      	push	{r7}
 8010a76:	b085      	sub	sp, #20
 8010a78:	af00      	add	r7, sp, #0
 8010a7a:	60f8      	str	r0, [r7, #12]
 8010a7c:	60b9      	str	r1, [r7, #8]
 8010a7e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8010a80:	68fb      	ldr	r3, [r7, #12]
 8010a82:	3b04      	subs	r3, #4
 8010a84:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8010a86:	68fb      	ldr	r3, [r7, #12]
 8010a88:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8010a8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010a8e:	68fb      	ldr	r3, [r7, #12]
 8010a90:	3b04      	subs	r3, #4
 8010a92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010a94:	68bb      	ldr	r3, [r7, #8]
 8010a96:	f023 0201 	bic.w	r2, r3, #1
 8010a9a:	68fb      	ldr	r3, [r7, #12]
 8010a9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010a9e:	68fb      	ldr	r3, [r7, #12]
 8010aa0:	3b04      	subs	r3, #4
 8010aa2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010aa4:	4a0c      	ldr	r2, [pc, #48]	; (8010ad8 <pxPortInitialiseStack+0x64>)
 8010aa6:	68fb      	ldr	r3, [r7, #12]
 8010aa8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8010aaa:	68fb      	ldr	r3, [r7, #12]
 8010aac:	3b14      	subs	r3, #20
 8010aae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010ab0:	687a      	ldr	r2, [r7, #4]
 8010ab2:	68fb      	ldr	r3, [r7, #12]
 8010ab4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8010ab6:	68fb      	ldr	r3, [r7, #12]
 8010ab8:	3b04      	subs	r3, #4
 8010aba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010abc:	68fb      	ldr	r3, [r7, #12]
 8010abe:	f06f 0202 	mvn.w	r2, #2
 8010ac2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010ac4:	68fb      	ldr	r3, [r7, #12]
 8010ac6:	3b20      	subs	r3, #32
 8010ac8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8010aca:	68fb      	ldr	r3, [r7, #12]
}
 8010acc:	4618      	mov	r0, r3
 8010ace:	3714      	adds	r7, #20
 8010ad0:	46bd      	mov	sp, r7
 8010ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ad6:	4770      	bx	lr
 8010ad8:	08010add 	.word	0x08010add

08010adc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010adc:	b480      	push	{r7}
 8010ade:	b085      	sub	sp, #20
 8010ae0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8010ae2:	2300      	movs	r3, #0
 8010ae4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8010ae6:	4b12      	ldr	r3, [pc, #72]	; (8010b30 <prvTaskExitError+0x54>)
 8010ae8:	681b      	ldr	r3, [r3, #0]
 8010aea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010aee:	d00a      	beq.n	8010b06 <prvTaskExitError+0x2a>
	__asm volatile
 8010af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010af4:	f383 8811 	msr	BASEPRI, r3
 8010af8:	f3bf 8f6f 	isb	sy
 8010afc:	f3bf 8f4f 	dsb	sy
 8010b00:	60fb      	str	r3, [r7, #12]
}
 8010b02:	bf00      	nop
 8010b04:	e7fe      	b.n	8010b04 <prvTaskExitError+0x28>
	__asm volatile
 8010b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b0a:	f383 8811 	msr	BASEPRI, r3
 8010b0e:	f3bf 8f6f 	isb	sy
 8010b12:	f3bf 8f4f 	dsb	sy
 8010b16:	60bb      	str	r3, [r7, #8]
}
 8010b18:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8010b1a:	bf00      	nop
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	2b00      	cmp	r3, #0
 8010b20:	d0fc      	beq.n	8010b1c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8010b22:	bf00      	nop
 8010b24:	bf00      	nop
 8010b26:	3714      	adds	r7, #20
 8010b28:	46bd      	mov	sp, r7
 8010b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b2e:	4770      	bx	lr
 8010b30:	200002a0 	.word	0x200002a0
	...

08010b40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010b40:	4b07      	ldr	r3, [pc, #28]	; (8010b60 <pxCurrentTCBConst2>)
 8010b42:	6819      	ldr	r1, [r3, #0]
 8010b44:	6808      	ldr	r0, [r1, #0]
 8010b46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b4a:	f380 8809 	msr	PSP, r0
 8010b4e:	f3bf 8f6f 	isb	sy
 8010b52:	f04f 0000 	mov.w	r0, #0
 8010b56:	f380 8811 	msr	BASEPRI, r0
 8010b5a:	4770      	bx	lr
 8010b5c:	f3af 8000 	nop.w

08010b60 <pxCurrentTCBConst2>:
 8010b60:	200021c0 	.word	0x200021c0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010b64:	bf00      	nop
 8010b66:	bf00      	nop

08010b68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8010b68:	4808      	ldr	r0, [pc, #32]	; (8010b8c <prvPortStartFirstTask+0x24>)
 8010b6a:	6800      	ldr	r0, [r0, #0]
 8010b6c:	6800      	ldr	r0, [r0, #0]
 8010b6e:	f380 8808 	msr	MSP, r0
 8010b72:	f04f 0000 	mov.w	r0, #0
 8010b76:	f380 8814 	msr	CONTROL, r0
 8010b7a:	b662      	cpsie	i
 8010b7c:	b661      	cpsie	f
 8010b7e:	f3bf 8f4f 	dsb	sy
 8010b82:	f3bf 8f6f 	isb	sy
 8010b86:	df00      	svc	0
 8010b88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8010b8a:	bf00      	nop
 8010b8c:	e000ed08 	.word	0xe000ed08

08010b90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010b90:	b580      	push	{r7, lr}
 8010b92:	b086      	sub	sp, #24
 8010b94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8010b96:	4b46      	ldr	r3, [pc, #280]	; (8010cb0 <xPortStartScheduler+0x120>)
 8010b98:	681b      	ldr	r3, [r3, #0]
 8010b9a:	4a46      	ldr	r2, [pc, #280]	; (8010cb4 <xPortStartScheduler+0x124>)
 8010b9c:	4293      	cmp	r3, r2
 8010b9e:	d10a      	bne.n	8010bb6 <xPortStartScheduler+0x26>
	__asm volatile
 8010ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ba4:	f383 8811 	msr	BASEPRI, r3
 8010ba8:	f3bf 8f6f 	isb	sy
 8010bac:	f3bf 8f4f 	dsb	sy
 8010bb0:	613b      	str	r3, [r7, #16]
}
 8010bb2:	bf00      	nop
 8010bb4:	e7fe      	b.n	8010bb4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8010bb6:	4b3e      	ldr	r3, [pc, #248]	; (8010cb0 <xPortStartScheduler+0x120>)
 8010bb8:	681b      	ldr	r3, [r3, #0]
 8010bba:	4a3f      	ldr	r2, [pc, #252]	; (8010cb8 <xPortStartScheduler+0x128>)
 8010bbc:	4293      	cmp	r3, r2
 8010bbe:	d10a      	bne.n	8010bd6 <xPortStartScheduler+0x46>
	__asm volatile
 8010bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bc4:	f383 8811 	msr	BASEPRI, r3
 8010bc8:	f3bf 8f6f 	isb	sy
 8010bcc:	f3bf 8f4f 	dsb	sy
 8010bd0:	60fb      	str	r3, [r7, #12]
}
 8010bd2:	bf00      	nop
 8010bd4:	e7fe      	b.n	8010bd4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8010bd6:	4b39      	ldr	r3, [pc, #228]	; (8010cbc <xPortStartScheduler+0x12c>)
 8010bd8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8010bda:	697b      	ldr	r3, [r7, #20]
 8010bdc:	781b      	ldrb	r3, [r3, #0]
 8010bde:	b2db      	uxtb	r3, r3
 8010be0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010be2:	697b      	ldr	r3, [r7, #20]
 8010be4:	22ff      	movs	r2, #255	; 0xff
 8010be6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010be8:	697b      	ldr	r3, [r7, #20]
 8010bea:	781b      	ldrb	r3, [r3, #0]
 8010bec:	b2db      	uxtb	r3, r3
 8010bee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010bf0:	78fb      	ldrb	r3, [r7, #3]
 8010bf2:	b2db      	uxtb	r3, r3
 8010bf4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8010bf8:	b2da      	uxtb	r2, r3
 8010bfa:	4b31      	ldr	r3, [pc, #196]	; (8010cc0 <xPortStartScheduler+0x130>)
 8010bfc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8010bfe:	4b31      	ldr	r3, [pc, #196]	; (8010cc4 <xPortStartScheduler+0x134>)
 8010c00:	2207      	movs	r2, #7
 8010c02:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010c04:	e009      	b.n	8010c1a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8010c06:	4b2f      	ldr	r3, [pc, #188]	; (8010cc4 <xPortStartScheduler+0x134>)
 8010c08:	681b      	ldr	r3, [r3, #0]
 8010c0a:	3b01      	subs	r3, #1
 8010c0c:	4a2d      	ldr	r2, [pc, #180]	; (8010cc4 <xPortStartScheduler+0x134>)
 8010c0e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010c10:	78fb      	ldrb	r3, [r7, #3]
 8010c12:	b2db      	uxtb	r3, r3
 8010c14:	005b      	lsls	r3, r3, #1
 8010c16:	b2db      	uxtb	r3, r3
 8010c18:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010c1a:	78fb      	ldrb	r3, [r7, #3]
 8010c1c:	b2db      	uxtb	r3, r3
 8010c1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010c22:	2b80      	cmp	r3, #128	; 0x80
 8010c24:	d0ef      	beq.n	8010c06 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8010c26:	4b27      	ldr	r3, [pc, #156]	; (8010cc4 <xPortStartScheduler+0x134>)
 8010c28:	681b      	ldr	r3, [r3, #0]
 8010c2a:	f1c3 0307 	rsb	r3, r3, #7
 8010c2e:	2b04      	cmp	r3, #4
 8010c30:	d00a      	beq.n	8010c48 <xPortStartScheduler+0xb8>
	__asm volatile
 8010c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c36:	f383 8811 	msr	BASEPRI, r3
 8010c3a:	f3bf 8f6f 	isb	sy
 8010c3e:	f3bf 8f4f 	dsb	sy
 8010c42:	60bb      	str	r3, [r7, #8]
}
 8010c44:	bf00      	nop
 8010c46:	e7fe      	b.n	8010c46 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8010c48:	4b1e      	ldr	r3, [pc, #120]	; (8010cc4 <xPortStartScheduler+0x134>)
 8010c4a:	681b      	ldr	r3, [r3, #0]
 8010c4c:	021b      	lsls	r3, r3, #8
 8010c4e:	4a1d      	ldr	r2, [pc, #116]	; (8010cc4 <xPortStartScheduler+0x134>)
 8010c50:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010c52:	4b1c      	ldr	r3, [pc, #112]	; (8010cc4 <xPortStartScheduler+0x134>)
 8010c54:	681b      	ldr	r3, [r3, #0]
 8010c56:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8010c5a:	4a1a      	ldr	r2, [pc, #104]	; (8010cc4 <xPortStartScheduler+0x134>)
 8010c5c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	b2da      	uxtb	r2, r3
 8010c62:	697b      	ldr	r3, [r7, #20]
 8010c64:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8010c66:	4b18      	ldr	r3, [pc, #96]	; (8010cc8 <xPortStartScheduler+0x138>)
 8010c68:	681b      	ldr	r3, [r3, #0]
 8010c6a:	4a17      	ldr	r2, [pc, #92]	; (8010cc8 <xPortStartScheduler+0x138>)
 8010c6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010c70:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010c72:	4b15      	ldr	r3, [pc, #84]	; (8010cc8 <xPortStartScheduler+0x138>)
 8010c74:	681b      	ldr	r3, [r3, #0]
 8010c76:	4a14      	ldr	r2, [pc, #80]	; (8010cc8 <xPortStartScheduler+0x138>)
 8010c78:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8010c7c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8010c7e:	f000 f8dd 	bl	8010e3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010c82:	4b12      	ldr	r3, [pc, #72]	; (8010ccc <xPortStartScheduler+0x13c>)
 8010c84:	2200      	movs	r2, #0
 8010c86:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8010c88:	f000 f8fc 	bl	8010e84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8010c8c:	4b10      	ldr	r3, [pc, #64]	; (8010cd0 <xPortStartScheduler+0x140>)
 8010c8e:	681b      	ldr	r3, [r3, #0]
 8010c90:	4a0f      	ldr	r2, [pc, #60]	; (8010cd0 <xPortStartScheduler+0x140>)
 8010c92:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8010c96:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8010c98:	f7ff ff66 	bl	8010b68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8010c9c:	f7ff f850 	bl	800fd40 <vTaskSwitchContext>
	prvTaskExitError();
 8010ca0:	f7ff ff1c 	bl	8010adc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8010ca4:	2300      	movs	r3, #0
}
 8010ca6:	4618      	mov	r0, r3
 8010ca8:	3718      	adds	r7, #24
 8010caa:	46bd      	mov	sp, r7
 8010cac:	bd80      	pop	{r7, pc}
 8010cae:	bf00      	nop
 8010cb0:	e000ed00 	.word	0xe000ed00
 8010cb4:	410fc271 	.word	0x410fc271
 8010cb8:	410fc270 	.word	0x410fc270
 8010cbc:	e000e400 	.word	0xe000e400
 8010cc0:	200027ec 	.word	0x200027ec
 8010cc4:	200027f0 	.word	0x200027f0
 8010cc8:	e000ed20 	.word	0xe000ed20
 8010ccc:	200002a0 	.word	0x200002a0
 8010cd0:	e000ef34 	.word	0xe000ef34

08010cd4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010cd4:	b480      	push	{r7}
 8010cd6:	b083      	sub	sp, #12
 8010cd8:	af00      	add	r7, sp, #0
	__asm volatile
 8010cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cde:	f383 8811 	msr	BASEPRI, r3
 8010ce2:	f3bf 8f6f 	isb	sy
 8010ce6:	f3bf 8f4f 	dsb	sy
 8010cea:	607b      	str	r3, [r7, #4]
}
 8010cec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8010cee:	4b0f      	ldr	r3, [pc, #60]	; (8010d2c <vPortEnterCritical+0x58>)
 8010cf0:	681b      	ldr	r3, [r3, #0]
 8010cf2:	3301      	adds	r3, #1
 8010cf4:	4a0d      	ldr	r2, [pc, #52]	; (8010d2c <vPortEnterCritical+0x58>)
 8010cf6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8010cf8:	4b0c      	ldr	r3, [pc, #48]	; (8010d2c <vPortEnterCritical+0x58>)
 8010cfa:	681b      	ldr	r3, [r3, #0]
 8010cfc:	2b01      	cmp	r3, #1
 8010cfe:	d10f      	bne.n	8010d20 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010d00:	4b0b      	ldr	r3, [pc, #44]	; (8010d30 <vPortEnterCritical+0x5c>)
 8010d02:	681b      	ldr	r3, [r3, #0]
 8010d04:	b2db      	uxtb	r3, r3
 8010d06:	2b00      	cmp	r3, #0
 8010d08:	d00a      	beq.n	8010d20 <vPortEnterCritical+0x4c>
	__asm volatile
 8010d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d0e:	f383 8811 	msr	BASEPRI, r3
 8010d12:	f3bf 8f6f 	isb	sy
 8010d16:	f3bf 8f4f 	dsb	sy
 8010d1a:	603b      	str	r3, [r7, #0]
}
 8010d1c:	bf00      	nop
 8010d1e:	e7fe      	b.n	8010d1e <vPortEnterCritical+0x4a>
	}
}
 8010d20:	bf00      	nop
 8010d22:	370c      	adds	r7, #12
 8010d24:	46bd      	mov	sp, r7
 8010d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d2a:	4770      	bx	lr
 8010d2c:	200002a0 	.word	0x200002a0
 8010d30:	e000ed04 	.word	0xe000ed04

08010d34 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010d34:	b480      	push	{r7}
 8010d36:	b083      	sub	sp, #12
 8010d38:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8010d3a:	4b12      	ldr	r3, [pc, #72]	; (8010d84 <vPortExitCritical+0x50>)
 8010d3c:	681b      	ldr	r3, [r3, #0]
 8010d3e:	2b00      	cmp	r3, #0
 8010d40:	d10a      	bne.n	8010d58 <vPortExitCritical+0x24>
	__asm volatile
 8010d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d46:	f383 8811 	msr	BASEPRI, r3
 8010d4a:	f3bf 8f6f 	isb	sy
 8010d4e:	f3bf 8f4f 	dsb	sy
 8010d52:	607b      	str	r3, [r7, #4]
}
 8010d54:	bf00      	nop
 8010d56:	e7fe      	b.n	8010d56 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8010d58:	4b0a      	ldr	r3, [pc, #40]	; (8010d84 <vPortExitCritical+0x50>)
 8010d5a:	681b      	ldr	r3, [r3, #0]
 8010d5c:	3b01      	subs	r3, #1
 8010d5e:	4a09      	ldr	r2, [pc, #36]	; (8010d84 <vPortExitCritical+0x50>)
 8010d60:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8010d62:	4b08      	ldr	r3, [pc, #32]	; (8010d84 <vPortExitCritical+0x50>)
 8010d64:	681b      	ldr	r3, [r3, #0]
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	d105      	bne.n	8010d76 <vPortExitCritical+0x42>
 8010d6a:	2300      	movs	r3, #0
 8010d6c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010d6e:	683b      	ldr	r3, [r7, #0]
 8010d70:	f383 8811 	msr	BASEPRI, r3
}
 8010d74:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8010d76:	bf00      	nop
 8010d78:	370c      	adds	r7, #12
 8010d7a:	46bd      	mov	sp, r7
 8010d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d80:	4770      	bx	lr
 8010d82:	bf00      	nop
 8010d84:	200002a0 	.word	0x200002a0
	...

08010d90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010d90:	f3ef 8009 	mrs	r0, PSP
 8010d94:	f3bf 8f6f 	isb	sy
 8010d98:	4b15      	ldr	r3, [pc, #84]	; (8010df0 <pxCurrentTCBConst>)
 8010d9a:	681a      	ldr	r2, [r3, #0]
 8010d9c:	f01e 0f10 	tst.w	lr, #16
 8010da0:	bf08      	it	eq
 8010da2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010da6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010daa:	6010      	str	r0, [r2, #0]
 8010dac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010db0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8010db4:	f380 8811 	msr	BASEPRI, r0
 8010db8:	f3bf 8f4f 	dsb	sy
 8010dbc:	f3bf 8f6f 	isb	sy
 8010dc0:	f7fe ffbe 	bl	800fd40 <vTaskSwitchContext>
 8010dc4:	f04f 0000 	mov.w	r0, #0
 8010dc8:	f380 8811 	msr	BASEPRI, r0
 8010dcc:	bc09      	pop	{r0, r3}
 8010dce:	6819      	ldr	r1, [r3, #0]
 8010dd0:	6808      	ldr	r0, [r1, #0]
 8010dd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010dd6:	f01e 0f10 	tst.w	lr, #16
 8010dda:	bf08      	it	eq
 8010ddc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010de0:	f380 8809 	msr	PSP, r0
 8010de4:	f3bf 8f6f 	isb	sy
 8010de8:	4770      	bx	lr
 8010dea:	bf00      	nop
 8010dec:	f3af 8000 	nop.w

08010df0 <pxCurrentTCBConst>:
 8010df0:	200021c0 	.word	0x200021c0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010df4:	bf00      	nop
 8010df6:	bf00      	nop

08010df8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010df8:	b580      	push	{r7, lr}
 8010dfa:	b082      	sub	sp, #8
 8010dfc:	af00      	add	r7, sp, #0
	__asm volatile
 8010dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e02:	f383 8811 	msr	BASEPRI, r3
 8010e06:	f3bf 8f6f 	isb	sy
 8010e0a:	f3bf 8f4f 	dsb	sy
 8010e0e:	607b      	str	r3, [r7, #4]
}
 8010e10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010e12:	f7fe fedb 	bl	800fbcc <xTaskIncrementTick>
 8010e16:	4603      	mov	r3, r0
 8010e18:	2b00      	cmp	r3, #0
 8010e1a:	d003      	beq.n	8010e24 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8010e1c:	4b06      	ldr	r3, [pc, #24]	; (8010e38 <xPortSysTickHandler+0x40>)
 8010e1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010e22:	601a      	str	r2, [r3, #0]
 8010e24:	2300      	movs	r3, #0
 8010e26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010e28:	683b      	ldr	r3, [r7, #0]
 8010e2a:	f383 8811 	msr	BASEPRI, r3
}
 8010e2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8010e30:	bf00      	nop
 8010e32:	3708      	adds	r7, #8
 8010e34:	46bd      	mov	sp, r7
 8010e36:	bd80      	pop	{r7, pc}
 8010e38:	e000ed04 	.word	0xe000ed04

08010e3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8010e3c:	b480      	push	{r7}
 8010e3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010e40:	4b0b      	ldr	r3, [pc, #44]	; (8010e70 <vPortSetupTimerInterrupt+0x34>)
 8010e42:	2200      	movs	r2, #0
 8010e44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010e46:	4b0b      	ldr	r3, [pc, #44]	; (8010e74 <vPortSetupTimerInterrupt+0x38>)
 8010e48:	2200      	movs	r2, #0
 8010e4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8010e4c:	4b0a      	ldr	r3, [pc, #40]	; (8010e78 <vPortSetupTimerInterrupt+0x3c>)
 8010e4e:	681b      	ldr	r3, [r3, #0]
 8010e50:	4a0a      	ldr	r2, [pc, #40]	; (8010e7c <vPortSetupTimerInterrupt+0x40>)
 8010e52:	fba2 2303 	umull	r2, r3, r2, r3
 8010e56:	099b      	lsrs	r3, r3, #6
 8010e58:	4a09      	ldr	r2, [pc, #36]	; (8010e80 <vPortSetupTimerInterrupt+0x44>)
 8010e5a:	3b01      	subs	r3, #1
 8010e5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8010e5e:	4b04      	ldr	r3, [pc, #16]	; (8010e70 <vPortSetupTimerInterrupt+0x34>)
 8010e60:	2207      	movs	r2, #7
 8010e62:	601a      	str	r2, [r3, #0]
}
 8010e64:	bf00      	nop
 8010e66:	46bd      	mov	sp, r7
 8010e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e6c:	4770      	bx	lr
 8010e6e:	bf00      	nop
 8010e70:	e000e010 	.word	0xe000e010
 8010e74:	e000e018 	.word	0xe000e018
 8010e78:	20000184 	.word	0x20000184
 8010e7c:	10624dd3 	.word	0x10624dd3
 8010e80:	e000e014 	.word	0xe000e014

08010e84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010e84:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8010e94 <vPortEnableVFP+0x10>
 8010e88:	6801      	ldr	r1, [r0, #0]
 8010e8a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8010e8e:	6001      	str	r1, [r0, #0]
 8010e90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010e92:	bf00      	nop
 8010e94:	e000ed88 	.word	0xe000ed88

08010e98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8010e98:	b480      	push	{r7}
 8010e9a:	b085      	sub	sp, #20
 8010e9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8010e9e:	f3ef 8305 	mrs	r3, IPSR
 8010ea2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010ea4:	68fb      	ldr	r3, [r7, #12]
 8010ea6:	2b0f      	cmp	r3, #15
 8010ea8:	d914      	bls.n	8010ed4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8010eaa:	4a17      	ldr	r2, [pc, #92]	; (8010f08 <vPortValidateInterruptPriority+0x70>)
 8010eac:	68fb      	ldr	r3, [r7, #12]
 8010eae:	4413      	add	r3, r2
 8010eb0:	781b      	ldrb	r3, [r3, #0]
 8010eb2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010eb4:	4b15      	ldr	r3, [pc, #84]	; (8010f0c <vPortValidateInterruptPriority+0x74>)
 8010eb6:	781b      	ldrb	r3, [r3, #0]
 8010eb8:	7afa      	ldrb	r2, [r7, #11]
 8010eba:	429a      	cmp	r2, r3
 8010ebc:	d20a      	bcs.n	8010ed4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8010ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ec2:	f383 8811 	msr	BASEPRI, r3
 8010ec6:	f3bf 8f6f 	isb	sy
 8010eca:	f3bf 8f4f 	dsb	sy
 8010ece:	607b      	str	r3, [r7, #4]
}
 8010ed0:	bf00      	nop
 8010ed2:	e7fe      	b.n	8010ed2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8010ed4:	4b0e      	ldr	r3, [pc, #56]	; (8010f10 <vPortValidateInterruptPriority+0x78>)
 8010ed6:	681b      	ldr	r3, [r3, #0]
 8010ed8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8010edc:	4b0d      	ldr	r3, [pc, #52]	; (8010f14 <vPortValidateInterruptPriority+0x7c>)
 8010ede:	681b      	ldr	r3, [r3, #0]
 8010ee0:	429a      	cmp	r2, r3
 8010ee2:	d90a      	bls.n	8010efa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8010ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ee8:	f383 8811 	msr	BASEPRI, r3
 8010eec:	f3bf 8f6f 	isb	sy
 8010ef0:	f3bf 8f4f 	dsb	sy
 8010ef4:	603b      	str	r3, [r7, #0]
}
 8010ef6:	bf00      	nop
 8010ef8:	e7fe      	b.n	8010ef8 <vPortValidateInterruptPriority+0x60>
	}
 8010efa:	bf00      	nop
 8010efc:	3714      	adds	r7, #20
 8010efe:	46bd      	mov	sp, r7
 8010f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f04:	4770      	bx	lr
 8010f06:	bf00      	nop
 8010f08:	e000e3f0 	.word	0xe000e3f0
 8010f0c:	200027ec 	.word	0x200027ec
 8010f10:	e000ed0c 	.word	0xe000ed0c
 8010f14:	200027f0 	.word	0x200027f0

08010f18 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8010f18:	b580      	push	{r7, lr}
 8010f1a:	b08a      	sub	sp, #40	; 0x28
 8010f1c:	af00      	add	r7, sp, #0
 8010f1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010f20:	2300      	movs	r3, #0
 8010f22:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010f24:	f7fe fd96 	bl	800fa54 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8010f28:	4b5b      	ldr	r3, [pc, #364]	; (8011098 <pvPortMalloc+0x180>)
 8010f2a:	681b      	ldr	r3, [r3, #0]
 8010f2c:	2b00      	cmp	r3, #0
 8010f2e:	d101      	bne.n	8010f34 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010f30:	f000 f920 	bl	8011174 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010f34:	4b59      	ldr	r3, [pc, #356]	; (801109c <pvPortMalloc+0x184>)
 8010f36:	681a      	ldr	r2, [r3, #0]
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	4013      	ands	r3, r2
 8010f3c:	2b00      	cmp	r3, #0
 8010f3e:	f040 8093 	bne.w	8011068 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	2b00      	cmp	r3, #0
 8010f46:	d01d      	beq.n	8010f84 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8010f48:	2208      	movs	r2, #8
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	4413      	add	r3, r2
 8010f4e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010f50:	687b      	ldr	r3, [r7, #4]
 8010f52:	f003 0307 	and.w	r3, r3, #7
 8010f56:	2b00      	cmp	r3, #0
 8010f58:	d014      	beq.n	8010f84 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	f023 0307 	bic.w	r3, r3, #7
 8010f60:	3308      	adds	r3, #8
 8010f62:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	f003 0307 	and.w	r3, r3, #7
 8010f6a:	2b00      	cmp	r3, #0
 8010f6c:	d00a      	beq.n	8010f84 <pvPortMalloc+0x6c>
	__asm volatile
 8010f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f72:	f383 8811 	msr	BASEPRI, r3
 8010f76:	f3bf 8f6f 	isb	sy
 8010f7a:	f3bf 8f4f 	dsb	sy
 8010f7e:	617b      	str	r3, [r7, #20]
}
 8010f80:	bf00      	nop
 8010f82:	e7fe      	b.n	8010f82 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	2b00      	cmp	r3, #0
 8010f88:	d06e      	beq.n	8011068 <pvPortMalloc+0x150>
 8010f8a:	4b45      	ldr	r3, [pc, #276]	; (80110a0 <pvPortMalloc+0x188>)
 8010f8c:	681b      	ldr	r3, [r3, #0]
 8010f8e:	687a      	ldr	r2, [r7, #4]
 8010f90:	429a      	cmp	r2, r3
 8010f92:	d869      	bhi.n	8011068 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8010f94:	4b43      	ldr	r3, [pc, #268]	; (80110a4 <pvPortMalloc+0x18c>)
 8010f96:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8010f98:	4b42      	ldr	r3, [pc, #264]	; (80110a4 <pvPortMalloc+0x18c>)
 8010f9a:	681b      	ldr	r3, [r3, #0]
 8010f9c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010f9e:	e004      	b.n	8010faa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8010fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fa2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8010fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fa6:	681b      	ldr	r3, [r3, #0]
 8010fa8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fac:	685b      	ldr	r3, [r3, #4]
 8010fae:	687a      	ldr	r2, [r7, #4]
 8010fb0:	429a      	cmp	r2, r3
 8010fb2:	d903      	bls.n	8010fbc <pvPortMalloc+0xa4>
 8010fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fb6:	681b      	ldr	r3, [r3, #0]
 8010fb8:	2b00      	cmp	r3, #0
 8010fba:	d1f1      	bne.n	8010fa0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8010fbc:	4b36      	ldr	r3, [pc, #216]	; (8011098 <pvPortMalloc+0x180>)
 8010fbe:	681b      	ldr	r3, [r3, #0]
 8010fc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010fc2:	429a      	cmp	r2, r3
 8010fc4:	d050      	beq.n	8011068 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010fc6:	6a3b      	ldr	r3, [r7, #32]
 8010fc8:	681b      	ldr	r3, [r3, #0]
 8010fca:	2208      	movs	r2, #8
 8010fcc:	4413      	add	r3, r2
 8010fce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fd2:	681a      	ldr	r2, [r3, #0]
 8010fd4:	6a3b      	ldr	r3, [r7, #32]
 8010fd6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8010fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fda:	685a      	ldr	r2, [r3, #4]
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	1ad2      	subs	r2, r2, r3
 8010fe0:	2308      	movs	r3, #8
 8010fe2:	005b      	lsls	r3, r3, #1
 8010fe4:	429a      	cmp	r2, r3
 8010fe6:	d91f      	bls.n	8011028 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8010fe8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010fea:	687b      	ldr	r3, [r7, #4]
 8010fec:	4413      	add	r3, r2
 8010fee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010ff0:	69bb      	ldr	r3, [r7, #24]
 8010ff2:	f003 0307 	and.w	r3, r3, #7
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	d00a      	beq.n	8011010 <pvPortMalloc+0xf8>
	__asm volatile
 8010ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ffe:	f383 8811 	msr	BASEPRI, r3
 8011002:	f3bf 8f6f 	isb	sy
 8011006:	f3bf 8f4f 	dsb	sy
 801100a:	613b      	str	r3, [r7, #16]
}
 801100c:	bf00      	nop
 801100e:	e7fe      	b.n	801100e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8011010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011012:	685a      	ldr	r2, [r3, #4]
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	1ad2      	subs	r2, r2, r3
 8011018:	69bb      	ldr	r3, [r7, #24]
 801101a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801101c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801101e:	687a      	ldr	r2, [r7, #4]
 8011020:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8011022:	69b8      	ldr	r0, [r7, #24]
 8011024:	f000 f908 	bl	8011238 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8011028:	4b1d      	ldr	r3, [pc, #116]	; (80110a0 <pvPortMalloc+0x188>)
 801102a:	681a      	ldr	r2, [r3, #0]
 801102c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801102e:	685b      	ldr	r3, [r3, #4]
 8011030:	1ad3      	subs	r3, r2, r3
 8011032:	4a1b      	ldr	r2, [pc, #108]	; (80110a0 <pvPortMalloc+0x188>)
 8011034:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8011036:	4b1a      	ldr	r3, [pc, #104]	; (80110a0 <pvPortMalloc+0x188>)
 8011038:	681a      	ldr	r2, [r3, #0]
 801103a:	4b1b      	ldr	r3, [pc, #108]	; (80110a8 <pvPortMalloc+0x190>)
 801103c:	681b      	ldr	r3, [r3, #0]
 801103e:	429a      	cmp	r2, r3
 8011040:	d203      	bcs.n	801104a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8011042:	4b17      	ldr	r3, [pc, #92]	; (80110a0 <pvPortMalloc+0x188>)
 8011044:	681b      	ldr	r3, [r3, #0]
 8011046:	4a18      	ldr	r2, [pc, #96]	; (80110a8 <pvPortMalloc+0x190>)
 8011048:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801104a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801104c:	685a      	ldr	r2, [r3, #4]
 801104e:	4b13      	ldr	r3, [pc, #76]	; (801109c <pvPortMalloc+0x184>)
 8011050:	681b      	ldr	r3, [r3, #0]
 8011052:	431a      	orrs	r2, r3
 8011054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011056:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8011058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801105a:	2200      	movs	r2, #0
 801105c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801105e:	4b13      	ldr	r3, [pc, #76]	; (80110ac <pvPortMalloc+0x194>)
 8011060:	681b      	ldr	r3, [r3, #0]
 8011062:	3301      	adds	r3, #1
 8011064:	4a11      	ldr	r2, [pc, #68]	; (80110ac <pvPortMalloc+0x194>)
 8011066:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8011068:	f7fe fd02 	bl	800fa70 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801106c:	69fb      	ldr	r3, [r7, #28]
 801106e:	f003 0307 	and.w	r3, r3, #7
 8011072:	2b00      	cmp	r3, #0
 8011074:	d00a      	beq.n	801108c <pvPortMalloc+0x174>
	__asm volatile
 8011076:	f04f 0350 	mov.w	r3, #80	; 0x50
 801107a:	f383 8811 	msr	BASEPRI, r3
 801107e:	f3bf 8f6f 	isb	sy
 8011082:	f3bf 8f4f 	dsb	sy
 8011086:	60fb      	str	r3, [r7, #12]
}
 8011088:	bf00      	nop
 801108a:	e7fe      	b.n	801108a <pvPortMalloc+0x172>
	return pvReturn;
 801108c:	69fb      	ldr	r3, [r7, #28]
}
 801108e:	4618      	mov	r0, r3
 8011090:	3728      	adds	r7, #40	; 0x28
 8011092:	46bd      	mov	sp, r7
 8011094:	bd80      	pop	{r7, pc}
 8011096:	bf00      	nop
 8011098:	200033b4 	.word	0x200033b4
 801109c:	200033c8 	.word	0x200033c8
 80110a0:	200033b8 	.word	0x200033b8
 80110a4:	200033ac 	.word	0x200033ac
 80110a8:	200033bc 	.word	0x200033bc
 80110ac:	200033c0 	.word	0x200033c0

080110b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80110b0:	b580      	push	{r7, lr}
 80110b2:	b086      	sub	sp, #24
 80110b4:	af00      	add	r7, sp, #0
 80110b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	2b00      	cmp	r3, #0
 80110c0:	d04d      	beq.n	801115e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80110c2:	2308      	movs	r3, #8
 80110c4:	425b      	negs	r3, r3
 80110c6:	697a      	ldr	r2, [r7, #20]
 80110c8:	4413      	add	r3, r2
 80110ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80110cc:	697b      	ldr	r3, [r7, #20]
 80110ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80110d0:	693b      	ldr	r3, [r7, #16]
 80110d2:	685a      	ldr	r2, [r3, #4]
 80110d4:	4b24      	ldr	r3, [pc, #144]	; (8011168 <vPortFree+0xb8>)
 80110d6:	681b      	ldr	r3, [r3, #0]
 80110d8:	4013      	ands	r3, r2
 80110da:	2b00      	cmp	r3, #0
 80110dc:	d10a      	bne.n	80110f4 <vPortFree+0x44>
	__asm volatile
 80110de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110e2:	f383 8811 	msr	BASEPRI, r3
 80110e6:	f3bf 8f6f 	isb	sy
 80110ea:	f3bf 8f4f 	dsb	sy
 80110ee:	60fb      	str	r3, [r7, #12]
}
 80110f0:	bf00      	nop
 80110f2:	e7fe      	b.n	80110f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80110f4:	693b      	ldr	r3, [r7, #16]
 80110f6:	681b      	ldr	r3, [r3, #0]
 80110f8:	2b00      	cmp	r3, #0
 80110fa:	d00a      	beq.n	8011112 <vPortFree+0x62>
	__asm volatile
 80110fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011100:	f383 8811 	msr	BASEPRI, r3
 8011104:	f3bf 8f6f 	isb	sy
 8011108:	f3bf 8f4f 	dsb	sy
 801110c:	60bb      	str	r3, [r7, #8]
}
 801110e:	bf00      	nop
 8011110:	e7fe      	b.n	8011110 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8011112:	693b      	ldr	r3, [r7, #16]
 8011114:	685a      	ldr	r2, [r3, #4]
 8011116:	4b14      	ldr	r3, [pc, #80]	; (8011168 <vPortFree+0xb8>)
 8011118:	681b      	ldr	r3, [r3, #0]
 801111a:	4013      	ands	r3, r2
 801111c:	2b00      	cmp	r3, #0
 801111e:	d01e      	beq.n	801115e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8011120:	693b      	ldr	r3, [r7, #16]
 8011122:	681b      	ldr	r3, [r3, #0]
 8011124:	2b00      	cmp	r3, #0
 8011126:	d11a      	bne.n	801115e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011128:	693b      	ldr	r3, [r7, #16]
 801112a:	685a      	ldr	r2, [r3, #4]
 801112c:	4b0e      	ldr	r3, [pc, #56]	; (8011168 <vPortFree+0xb8>)
 801112e:	681b      	ldr	r3, [r3, #0]
 8011130:	43db      	mvns	r3, r3
 8011132:	401a      	ands	r2, r3
 8011134:	693b      	ldr	r3, [r7, #16]
 8011136:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8011138:	f7fe fc8c 	bl	800fa54 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801113c:	693b      	ldr	r3, [r7, #16]
 801113e:	685a      	ldr	r2, [r3, #4]
 8011140:	4b0a      	ldr	r3, [pc, #40]	; (801116c <vPortFree+0xbc>)
 8011142:	681b      	ldr	r3, [r3, #0]
 8011144:	4413      	add	r3, r2
 8011146:	4a09      	ldr	r2, [pc, #36]	; (801116c <vPortFree+0xbc>)
 8011148:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801114a:	6938      	ldr	r0, [r7, #16]
 801114c:	f000 f874 	bl	8011238 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8011150:	4b07      	ldr	r3, [pc, #28]	; (8011170 <vPortFree+0xc0>)
 8011152:	681b      	ldr	r3, [r3, #0]
 8011154:	3301      	adds	r3, #1
 8011156:	4a06      	ldr	r2, [pc, #24]	; (8011170 <vPortFree+0xc0>)
 8011158:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801115a:	f7fe fc89 	bl	800fa70 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801115e:	bf00      	nop
 8011160:	3718      	adds	r7, #24
 8011162:	46bd      	mov	sp, r7
 8011164:	bd80      	pop	{r7, pc}
 8011166:	bf00      	nop
 8011168:	200033c8 	.word	0x200033c8
 801116c:	200033b8 	.word	0x200033b8
 8011170:	200033c4 	.word	0x200033c4

08011174 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8011174:	b480      	push	{r7}
 8011176:	b085      	sub	sp, #20
 8011178:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801117a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 801117e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8011180:	4b27      	ldr	r3, [pc, #156]	; (8011220 <prvHeapInit+0xac>)
 8011182:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8011184:	68fb      	ldr	r3, [r7, #12]
 8011186:	f003 0307 	and.w	r3, r3, #7
 801118a:	2b00      	cmp	r3, #0
 801118c:	d00c      	beq.n	80111a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801118e:	68fb      	ldr	r3, [r7, #12]
 8011190:	3307      	adds	r3, #7
 8011192:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011194:	68fb      	ldr	r3, [r7, #12]
 8011196:	f023 0307 	bic.w	r3, r3, #7
 801119a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801119c:	68ba      	ldr	r2, [r7, #8]
 801119e:	68fb      	ldr	r3, [r7, #12]
 80111a0:	1ad3      	subs	r3, r2, r3
 80111a2:	4a1f      	ldr	r2, [pc, #124]	; (8011220 <prvHeapInit+0xac>)
 80111a4:	4413      	add	r3, r2
 80111a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80111a8:	68fb      	ldr	r3, [r7, #12]
 80111aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80111ac:	4a1d      	ldr	r2, [pc, #116]	; (8011224 <prvHeapInit+0xb0>)
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80111b2:	4b1c      	ldr	r3, [pc, #112]	; (8011224 <prvHeapInit+0xb0>)
 80111b4:	2200      	movs	r2, #0
 80111b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	68ba      	ldr	r2, [r7, #8]
 80111bc:	4413      	add	r3, r2
 80111be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80111c0:	2208      	movs	r2, #8
 80111c2:	68fb      	ldr	r3, [r7, #12]
 80111c4:	1a9b      	subs	r3, r3, r2
 80111c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80111c8:	68fb      	ldr	r3, [r7, #12]
 80111ca:	f023 0307 	bic.w	r3, r3, #7
 80111ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80111d0:	68fb      	ldr	r3, [r7, #12]
 80111d2:	4a15      	ldr	r2, [pc, #84]	; (8011228 <prvHeapInit+0xb4>)
 80111d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80111d6:	4b14      	ldr	r3, [pc, #80]	; (8011228 <prvHeapInit+0xb4>)
 80111d8:	681b      	ldr	r3, [r3, #0]
 80111da:	2200      	movs	r2, #0
 80111dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80111de:	4b12      	ldr	r3, [pc, #72]	; (8011228 <prvHeapInit+0xb4>)
 80111e0:	681b      	ldr	r3, [r3, #0]
 80111e2:	2200      	movs	r2, #0
 80111e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80111ea:	683b      	ldr	r3, [r7, #0]
 80111ec:	68fa      	ldr	r2, [r7, #12]
 80111ee:	1ad2      	subs	r2, r2, r3
 80111f0:	683b      	ldr	r3, [r7, #0]
 80111f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80111f4:	4b0c      	ldr	r3, [pc, #48]	; (8011228 <prvHeapInit+0xb4>)
 80111f6:	681a      	ldr	r2, [r3, #0]
 80111f8:	683b      	ldr	r3, [r7, #0]
 80111fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80111fc:	683b      	ldr	r3, [r7, #0]
 80111fe:	685b      	ldr	r3, [r3, #4]
 8011200:	4a0a      	ldr	r2, [pc, #40]	; (801122c <prvHeapInit+0xb8>)
 8011202:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011204:	683b      	ldr	r3, [r7, #0]
 8011206:	685b      	ldr	r3, [r3, #4]
 8011208:	4a09      	ldr	r2, [pc, #36]	; (8011230 <prvHeapInit+0xbc>)
 801120a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801120c:	4b09      	ldr	r3, [pc, #36]	; (8011234 <prvHeapInit+0xc0>)
 801120e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8011212:	601a      	str	r2, [r3, #0]
}
 8011214:	bf00      	nop
 8011216:	3714      	adds	r7, #20
 8011218:	46bd      	mov	sp, r7
 801121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801121e:	4770      	bx	lr
 8011220:	200027f4 	.word	0x200027f4
 8011224:	200033ac 	.word	0x200033ac
 8011228:	200033b4 	.word	0x200033b4
 801122c:	200033bc 	.word	0x200033bc
 8011230:	200033b8 	.word	0x200033b8
 8011234:	200033c8 	.word	0x200033c8

08011238 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8011238:	b480      	push	{r7}
 801123a:	b085      	sub	sp, #20
 801123c:	af00      	add	r7, sp, #0
 801123e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011240:	4b28      	ldr	r3, [pc, #160]	; (80112e4 <prvInsertBlockIntoFreeList+0xac>)
 8011242:	60fb      	str	r3, [r7, #12]
 8011244:	e002      	b.n	801124c <prvInsertBlockIntoFreeList+0x14>
 8011246:	68fb      	ldr	r3, [r7, #12]
 8011248:	681b      	ldr	r3, [r3, #0]
 801124a:	60fb      	str	r3, [r7, #12]
 801124c:	68fb      	ldr	r3, [r7, #12]
 801124e:	681b      	ldr	r3, [r3, #0]
 8011250:	687a      	ldr	r2, [r7, #4]
 8011252:	429a      	cmp	r2, r3
 8011254:	d8f7      	bhi.n	8011246 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8011256:	68fb      	ldr	r3, [r7, #12]
 8011258:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801125a:	68fb      	ldr	r3, [r7, #12]
 801125c:	685b      	ldr	r3, [r3, #4]
 801125e:	68ba      	ldr	r2, [r7, #8]
 8011260:	4413      	add	r3, r2
 8011262:	687a      	ldr	r2, [r7, #4]
 8011264:	429a      	cmp	r2, r3
 8011266:	d108      	bne.n	801127a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011268:	68fb      	ldr	r3, [r7, #12]
 801126a:	685a      	ldr	r2, [r3, #4]
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	685b      	ldr	r3, [r3, #4]
 8011270:	441a      	add	r2, r3
 8011272:	68fb      	ldr	r3, [r7, #12]
 8011274:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8011276:	68fb      	ldr	r3, [r7, #12]
 8011278:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801127e:	687b      	ldr	r3, [r7, #4]
 8011280:	685b      	ldr	r3, [r3, #4]
 8011282:	68ba      	ldr	r2, [r7, #8]
 8011284:	441a      	add	r2, r3
 8011286:	68fb      	ldr	r3, [r7, #12]
 8011288:	681b      	ldr	r3, [r3, #0]
 801128a:	429a      	cmp	r2, r3
 801128c:	d118      	bne.n	80112c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801128e:	68fb      	ldr	r3, [r7, #12]
 8011290:	681a      	ldr	r2, [r3, #0]
 8011292:	4b15      	ldr	r3, [pc, #84]	; (80112e8 <prvInsertBlockIntoFreeList+0xb0>)
 8011294:	681b      	ldr	r3, [r3, #0]
 8011296:	429a      	cmp	r2, r3
 8011298:	d00d      	beq.n	80112b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	685a      	ldr	r2, [r3, #4]
 801129e:	68fb      	ldr	r3, [r7, #12]
 80112a0:	681b      	ldr	r3, [r3, #0]
 80112a2:	685b      	ldr	r3, [r3, #4]
 80112a4:	441a      	add	r2, r3
 80112a6:	687b      	ldr	r3, [r7, #4]
 80112a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80112aa:	68fb      	ldr	r3, [r7, #12]
 80112ac:	681b      	ldr	r3, [r3, #0]
 80112ae:	681a      	ldr	r2, [r3, #0]
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	601a      	str	r2, [r3, #0]
 80112b4:	e008      	b.n	80112c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80112b6:	4b0c      	ldr	r3, [pc, #48]	; (80112e8 <prvInsertBlockIntoFreeList+0xb0>)
 80112b8:	681a      	ldr	r2, [r3, #0]
 80112ba:	687b      	ldr	r3, [r7, #4]
 80112bc:	601a      	str	r2, [r3, #0]
 80112be:	e003      	b.n	80112c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80112c0:	68fb      	ldr	r3, [r7, #12]
 80112c2:	681a      	ldr	r2, [r3, #0]
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80112c8:	68fa      	ldr	r2, [r7, #12]
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	429a      	cmp	r2, r3
 80112ce:	d002      	beq.n	80112d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80112d0:	68fb      	ldr	r3, [r7, #12]
 80112d2:	687a      	ldr	r2, [r7, #4]
 80112d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80112d6:	bf00      	nop
 80112d8:	3714      	adds	r7, #20
 80112da:	46bd      	mov	sp, r7
 80112dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112e0:	4770      	bx	lr
 80112e2:	bf00      	nop
 80112e4:	200033ac 	.word	0x200033ac
 80112e8:	200033b4 	.word	0x200033b4

080112ec <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80112ec:	b580      	push	{r7, lr}
 80112ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80112f0:	2200      	movs	r2, #0
 80112f2:	4912      	ldr	r1, [pc, #72]	; (801133c <MX_USB_DEVICE_Init+0x50>)
 80112f4:	4812      	ldr	r0, [pc, #72]	; (8011340 <MX_USB_DEVICE_Init+0x54>)
 80112f6:	f7fc f8cd 	bl	800d494 <USBD_Init>
 80112fa:	4603      	mov	r3, r0
 80112fc:	2b00      	cmp	r3, #0
 80112fe:	d001      	beq.n	8011304 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8011300:	f7f2 f80e 	bl	8003320 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8011304:	490f      	ldr	r1, [pc, #60]	; (8011344 <MX_USB_DEVICE_Init+0x58>)
 8011306:	480e      	ldr	r0, [pc, #56]	; (8011340 <MX_USB_DEVICE_Init+0x54>)
 8011308:	f7fc f8f4 	bl	800d4f4 <USBD_RegisterClass>
 801130c:	4603      	mov	r3, r0
 801130e:	2b00      	cmp	r3, #0
 8011310:	d001      	beq.n	8011316 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8011312:	f7f2 f805 	bl	8003320 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8011316:	490c      	ldr	r1, [pc, #48]	; (8011348 <MX_USB_DEVICE_Init+0x5c>)
 8011318:	4809      	ldr	r0, [pc, #36]	; (8011340 <MX_USB_DEVICE_Init+0x54>)
 801131a:	f7fc f845 	bl	800d3a8 <USBD_CDC_RegisterInterface>
 801131e:	4603      	mov	r3, r0
 8011320:	2b00      	cmp	r3, #0
 8011322:	d001      	beq.n	8011328 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8011324:	f7f1 fffc 	bl	8003320 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8011328:	4805      	ldr	r0, [pc, #20]	; (8011340 <MX_USB_DEVICE_Init+0x54>)
 801132a:	f7fc f90a 	bl	800d542 <USBD_Start>
 801132e:	4603      	mov	r3, r0
 8011330:	2b00      	cmp	r3, #0
 8011332:	d001      	beq.n	8011338 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8011334:	f7f1 fff4 	bl	8003320 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8011338:	bf00      	nop
 801133a:	bd80      	pop	{r7, pc}
 801133c:	200002b8 	.word	0x200002b8
 8011340:	200033cc 	.word	0x200033cc
 8011344:	2000019c 	.word	0x2000019c
 8011348:	200002a4 	.word	0x200002a4

0801134c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801134c:	b580      	push	{r7, lr}
 801134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8011350:	2200      	movs	r2, #0
 8011352:	4905      	ldr	r1, [pc, #20]	; (8011368 <CDC_Init_FS+0x1c>)
 8011354:	4805      	ldr	r0, [pc, #20]	; (801136c <CDC_Init_FS+0x20>)
 8011356:	f7fc f83c 	bl	800d3d2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801135a:	4905      	ldr	r1, [pc, #20]	; (8011370 <CDC_Init_FS+0x24>)
 801135c:	4803      	ldr	r0, [pc, #12]	; (801136c <CDC_Init_FS+0x20>)
 801135e:	f7fc f856 	bl	800d40e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8011362:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8011364:	4618      	mov	r0, r3
 8011366:	bd80      	pop	{r7, pc}
 8011368:	20003e9c 	.word	0x20003e9c
 801136c:	200033cc 	.word	0x200033cc
 8011370:	2000369c 	.word	0x2000369c

08011374 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8011374:	b480      	push	{r7}
 8011376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8011378:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801137a:	4618      	mov	r0, r3
 801137c:	46bd      	mov	sp, r7
 801137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011382:	4770      	bx	lr

08011384 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8011384:	b480      	push	{r7}
 8011386:	b083      	sub	sp, #12
 8011388:	af00      	add	r7, sp, #0
 801138a:	4603      	mov	r3, r0
 801138c:	6039      	str	r1, [r7, #0]
 801138e:	71fb      	strb	r3, [r7, #7]
 8011390:	4613      	mov	r3, r2
 8011392:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8011394:	79fb      	ldrb	r3, [r7, #7]
 8011396:	2b23      	cmp	r3, #35	; 0x23
 8011398:	d84a      	bhi.n	8011430 <CDC_Control_FS+0xac>
 801139a:	a201      	add	r2, pc, #4	; (adr r2, 80113a0 <CDC_Control_FS+0x1c>)
 801139c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80113a0:	08011431 	.word	0x08011431
 80113a4:	08011431 	.word	0x08011431
 80113a8:	08011431 	.word	0x08011431
 80113ac:	08011431 	.word	0x08011431
 80113b0:	08011431 	.word	0x08011431
 80113b4:	08011431 	.word	0x08011431
 80113b8:	08011431 	.word	0x08011431
 80113bc:	08011431 	.word	0x08011431
 80113c0:	08011431 	.word	0x08011431
 80113c4:	08011431 	.word	0x08011431
 80113c8:	08011431 	.word	0x08011431
 80113cc:	08011431 	.word	0x08011431
 80113d0:	08011431 	.word	0x08011431
 80113d4:	08011431 	.word	0x08011431
 80113d8:	08011431 	.word	0x08011431
 80113dc:	08011431 	.word	0x08011431
 80113e0:	08011431 	.word	0x08011431
 80113e4:	08011431 	.word	0x08011431
 80113e8:	08011431 	.word	0x08011431
 80113ec:	08011431 	.word	0x08011431
 80113f0:	08011431 	.word	0x08011431
 80113f4:	08011431 	.word	0x08011431
 80113f8:	08011431 	.word	0x08011431
 80113fc:	08011431 	.word	0x08011431
 8011400:	08011431 	.word	0x08011431
 8011404:	08011431 	.word	0x08011431
 8011408:	08011431 	.word	0x08011431
 801140c:	08011431 	.word	0x08011431
 8011410:	08011431 	.word	0x08011431
 8011414:	08011431 	.word	0x08011431
 8011418:	08011431 	.word	0x08011431
 801141c:	08011431 	.word	0x08011431
 8011420:	08011431 	.word	0x08011431
 8011424:	08011431 	.word	0x08011431
 8011428:	08011431 	.word	0x08011431
 801142c:	08011431 	.word	0x08011431
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8011430:	bf00      	nop
  }

  return (USBD_OK);
 8011432:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8011434:	4618      	mov	r0, r3
 8011436:	370c      	adds	r7, #12
 8011438:	46bd      	mov	sp, r7
 801143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801143e:	4770      	bx	lr

08011440 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8011440:	b580      	push	{r7, lr}
 8011442:	b082      	sub	sp, #8
 8011444:	af00      	add	r7, sp, #0
 8011446:	6078      	str	r0, [r7, #4]
 8011448:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801144a:	6879      	ldr	r1, [r7, #4]
 801144c:	4805      	ldr	r0, [pc, #20]	; (8011464 <CDC_Receive_FS+0x24>)
 801144e:	f7fb ffde 	bl	800d40e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8011452:	4804      	ldr	r0, [pc, #16]	; (8011464 <CDC_Receive_FS+0x24>)
 8011454:	f7fb fff4 	bl	800d440 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8011458:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801145a:	4618      	mov	r0, r3
 801145c:	3708      	adds	r7, #8
 801145e:	46bd      	mov	sp, r7
 8011460:	bd80      	pop	{r7, pc}
 8011462:	bf00      	nop
 8011464:	200033cc 	.word	0x200033cc

08011468 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8011468:	b480      	push	{r7}
 801146a:	b087      	sub	sp, #28
 801146c:	af00      	add	r7, sp, #0
 801146e:	60f8      	str	r0, [r7, #12]
 8011470:	60b9      	str	r1, [r7, #8]
 8011472:	4613      	mov	r3, r2
 8011474:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8011476:	2300      	movs	r3, #0
 8011478:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801147a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801147e:	4618      	mov	r0, r3
 8011480:	371c      	adds	r7, #28
 8011482:	46bd      	mov	sp, r7
 8011484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011488:	4770      	bx	lr
	...

0801148c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801148c:	b480      	push	{r7}
 801148e:	b083      	sub	sp, #12
 8011490:	af00      	add	r7, sp, #0
 8011492:	4603      	mov	r3, r0
 8011494:	6039      	str	r1, [r7, #0]
 8011496:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8011498:	683b      	ldr	r3, [r7, #0]
 801149a:	2212      	movs	r2, #18
 801149c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801149e:	4b03      	ldr	r3, [pc, #12]	; (80114ac <USBD_FS_DeviceDescriptor+0x20>)
}
 80114a0:	4618      	mov	r0, r3
 80114a2:	370c      	adds	r7, #12
 80114a4:	46bd      	mov	sp, r7
 80114a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114aa:	4770      	bx	lr
 80114ac:	200002d8 	.word	0x200002d8

080114b0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80114b0:	b480      	push	{r7}
 80114b2:	b083      	sub	sp, #12
 80114b4:	af00      	add	r7, sp, #0
 80114b6:	4603      	mov	r3, r0
 80114b8:	6039      	str	r1, [r7, #0]
 80114ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80114bc:	683b      	ldr	r3, [r7, #0]
 80114be:	2204      	movs	r2, #4
 80114c0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80114c2:	4b03      	ldr	r3, [pc, #12]	; (80114d0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80114c4:	4618      	mov	r0, r3
 80114c6:	370c      	adds	r7, #12
 80114c8:	46bd      	mov	sp, r7
 80114ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114ce:	4770      	bx	lr
 80114d0:	200002f8 	.word	0x200002f8

080114d4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80114d4:	b580      	push	{r7, lr}
 80114d6:	b082      	sub	sp, #8
 80114d8:	af00      	add	r7, sp, #0
 80114da:	4603      	mov	r3, r0
 80114dc:	6039      	str	r1, [r7, #0]
 80114de:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80114e0:	79fb      	ldrb	r3, [r7, #7]
 80114e2:	2b00      	cmp	r3, #0
 80114e4:	d105      	bne.n	80114f2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80114e6:	683a      	ldr	r2, [r7, #0]
 80114e8:	4907      	ldr	r1, [pc, #28]	; (8011508 <USBD_FS_ProductStrDescriptor+0x34>)
 80114ea:	4808      	ldr	r0, [pc, #32]	; (801150c <USBD_FS_ProductStrDescriptor+0x38>)
 80114ec:	f7fd f885 	bl	800e5fa <USBD_GetString>
 80114f0:	e004      	b.n	80114fc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80114f2:	683a      	ldr	r2, [r7, #0]
 80114f4:	4904      	ldr	r1, [pc, #16]	; (8011508 <USBD_FS_ProductStrDescriptor+0x34>)
 80114f6:	4805      	ldr	r0, [pc, #20]	; (801150c <USBD_FS_ProductStrDescriptor+0x38>)
 80114f8:	f7fd f87f 	bl	800e5fa <USBD_GetString>
  }
  return USBD_StrDesc;
 80114fc:	4b02      	ldr	r3, [pc, #8]	; (8011508 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80114fe:	4618      	mov	r0, r3
 8011500:	3708      	adds	r7, #8
 8011502:	46bd      	mov	sp, r7
 8011504:	bd80      	pop	{r7, pc}
 8011506:	bf00      	nop
 8011508:	2000469c 	.word	0x2000469c
 801150c:	08014ce0 	.word	0x08014ce0

08011510 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011510:	b580      	push	{r7, lr}
 8011512:	b082      	sub	sp, #8
 8011514:	af00      	add	r7, sp, #0
 8011516:	4603      	mov	r3, r0
 8011518:	6039      	str	r1, [r7, #0]
 801151a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801151c:	683a      	ldr	r2, [r7, #0]
 801151e:	4904      	ldr	r1, [pc, #16]	; (8011530 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8011520:	4804      	ldr	r0, [pc, #16]	; (8011534 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8011522:	f7fd f86a 	bl	800e5fa <USBD_GetString>
  return USBD_StrDesc;
 8011526:	4b02      	ldr	r3, [pc, #8]	; (8011530 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8011528:	4618      	mov	r0, r3
 801152a:	3708      	adds	r7, #8
 801152c:	46bd      	mov	sp, r7
 801152e:	bd80      	pop	{r7, pc}
 8011530:	2000469c 	.word	0x2000469c
 8011534:	08014cf8 	.word	0x08014cf8

08011538 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011538:	b580      	push	{r7, lr}
 801153a:	b082      	sub	sp, #8
 801153c:	af00      	add	r7, sp, #0
 801153e:	4603      	mov	r3, r0
 8011540:	6039      	str	r1, [r7, #0]
 8011542:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8011544:	683b      	ldr	r3, [r7, #0]
 8011546:	221a      	movs	r2, #26
 8011548:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801154a:	f000 f855 	bl	80115f8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801154e:	4b02      	ldr	r3, [pc, #8]	; (8011558 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8011550:	4618      	mov	r0, r3
 8011552:	3708      	adds	r7, #8
 8011554:	46bd      	mov	sp, r7
 8011556:	bd80      	pop	{r7, pc}
 8011558:	200002fc 	.word	0x200002fc

0801155c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801155c:	b580      	push	{r7, lr}
 801155e:	b082      	sub	sp, #8
 8011560:	af00      	add	r7, sp, #0
 8011562:	4603      	mov	r3, r0
 8011564:	6039      	str	r1, [r7, #0]
 8011566:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8011568:	79fb      	ldrb	r3, [r7, #7]
 801156a:	2b00      	cmp	r3, #0
 801156c:	d105      	bne.n	801157a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801156e:	683a      	ldr	r2, [r7, #0]
 8011570:	4907      	ldr	r1, [pc, #28]	; (8011590 <USBD_FS_ConfigStrDescriptor+0x34>)
 8011572:	4808      	ldr	r0, [pc, #32]	; (8011594 <USBD_FS_ConfigStrDescriptor+0x38>)
 8011574:	f7fd f841 	bl	800e5fa <USBD_GetString>
 8011578:	e004      	b.n	8011584 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801157a:	683a      	ldr	r2, [r7, #0]
 801157c:	4904      	ldr	r1, [pc, #16]	; (8011590 <USBD_FS_ConfigStrDescriptor+0x34>)
 801157e:	4805      	ldr	r0, [pc, #20]	; (8011594 <USBD_FS_ConfigStrDescriptor+0x38>)
 8011580:	f7fd f83b 	bl	800e5fa <USBD_GetString>
  }
  return USBD_StrDesc;
 8011584:	4b02      	ldr	r3, [pc, #8]	; (8011590 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8011586:	4618      	mov	r0, r3
 8011588:	3708      	adds	r7, #8
 801158a:	46bd      	mov	sp, r7
 801158c:	bd80      	pop	{r7, pc}
 801158e:	bf00      	nop
 8011590:	2000469c 	.word	0x2000469c
 8011594:	08014d0c 	.word	0x08014d0c

08011598 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011598:	b580      	push	{r7, lr}
 801159a:	b082      	sub	sp, #8
 801159c:	af00      	add	r7, sp, #0
 801159e:	4603      	mov	r3, r0
 80115a0:	6039      	str	r1, [r7, #0]
 80115a2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80115a4:	79fb      	ldrb	r3, [r7, #7]
 80115a6:	2b00      	cmp	r3, #0
 80115a8:	d105      	bne.n	80115b6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80115aa:	683a      	ldr	r2, [r7, #0]
 80115ac:	4907      	ldr	r1, [pc, #28]	; (80115cc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80115ae:	4808      	ldr	r0, [pc, #32]	; (80115d0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80115b0:	f7fd f823 	bl	800e5fa <USBD_GetString>
 80115b4:	e004      	b.n	80115c0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80115b6:	683a      	ldr	r2, [r7, #0]
 80115b8:	4904      	ldr	r1, [pc, #16]	; (80115cc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80115ba:	4805      	ldr	r0, [pc, #20]	; (80115d0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80115bc:	f7fd f81d 	bl	800e5fa <USBD_GetString>
  }
  return USBD_StrDesc;
 80115c0:	4b02      	ldr	r3, [pc, #8]	; (80115cc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80115c2:	4618      	mov	r0, r3
 80115c4:	3708      	adds	r7, #8
 80115c6:	46bd      	mov	sp, r7
 80115c8:	bd80      	pop	{r7, pc}
 80115ca:	bf00      	nop
 80115cc:	2000469c 	.word	0x2000469c
 80115d0:	08014d18 	.word	0x08014d18

080115d4 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80115d4:	b480      	push	{r7}
 80115d6:	b083      	sub	sp, #12
 80115d8:	af00      	add	r7, sp, #0
 80115da:	4603      	mov	r3, r0
 80115dc:	6039      	str	r1, [r7, #0]
 80115de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 80115e0:	683b      	ldr	r3, [r7, #0]
 80115e2:	220c      	movs	r2, #12
 80115e4:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 80115e6:	4b03      	ldr	r3, [pc, #12]	; (80115f4 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 80115e8:	4618      	mov	r0, r3
 80115ea:	370c      	adds	r7, #12
 80115ec:	46bd      	mov	sp, r7
 80115ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115f2:	4770      	bx	lr
 80115f4:	200002ec 	.word	0x200002ec

080115f8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80115f8:	b580      	push	{r7, lr}
 80115fa:	b084      	sub	sp, #16
 80115fc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80115fe:	4b0f      	ldr	r3, [pc, #60]	; (801163c <Get_SerialNum+0x44>)
 8011600:	681b      	ldr	r3, [r3, #0]
 8011602:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8011604:	4b0e      	ldr	r3, [pc, #56]	; (8011640 <Get_SerialNum+0x48>)
 8011606:	681b      	ldr	r3, [r3, #0]
 8011608:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801160a:	4b0e      	ldr	r3, [pc, #56]	; (8011644 <Get_SerialNum+0x4c>)
 801160c:	681b      	ldr	r3, [r3, #0]
 801160e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8011610:	68fa      	ldr	r2, [r7, #12]
 8011612:	687b      	ldr	r3, [r7, #4]
 8011614:	4413      	add	r3, r2
 8011616:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8011618:	68fb      	ldr	r3, [r7, #12]
 801161a:	2b00      	cmp	r3, #0
 801161c:	d009      	beq.n	8011632 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801161e:	2208      	movs	r2, #8
 8011620:	4909      	ldr	r1, [pc, #36]	; (8011648 <Get_SerialNum+0x50>)
 8011622:	68f8      	ldr	r0, [r7, #12]
 8011624:	f000 f814 	bl	8011650 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8011628:	2204      	movs	r2, #4
 801162a:	4908      	ldr	r1, [pc, #32]	; (801164c <Get_SerialNum+0x54>)
 801162c:	68b8      	ldr	r0, [r7, #8]
 801162e:	f000 f80f 	bl	8011650 <IntToUnicode>
  }
}
 8011632:	bf00      	nop
 8011634:	3710      	adds	r7, #16
 8011636:	46bd      	mov	sp, r7
 8011638:	bd80      	pop	{r7, pc}
 801163a:	bf00      	nop
 801163c:	1fff7590 	.word	0x1fff7590
 8011640:	1fff7594 	.word	0x1fff7594
 8011644:	1fff7598 	.word	0x1fff7598
 8011648:	200002fe 	.word	0x200002fe
 801164c:	2000030e 	.word	0x2000030e

08011650 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8011650:	b480      	push	{r7}
 8011652:	b087      	sub	sp, #28
 8011654:	af00      	add	r7, sp, #0
 8011656:	60f8      	str	r0, [r7, #12]
 8011658:	60b9      	str	r1, [r7, #8]
 801165a:	4613      	mov	r3, r2
 801165c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801165e:	2300      	movs	r3, #0
 8011660:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8011662:	2300      	movs	r3, #0
 8011664:	75fb      	strb	r3, [r7, #23]
 8011666:	e027      	b.n	80116b8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8011668:	68fb      	ldr	r3, [r7, #12]
 801166a:	0f1b      	lsrs	r3, r3, #28
 801166c:	2b09      	cmp	r3, #9
 801166e:	d80b      	bhi.n	8011688 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8011670:	68fb      	ldr	r3, [r7, #12]
 8011672:	0f1b      	lsrs	r3, r3, #28
 8011674:	b2da      	uxtb	r2, r3
 8011676:	7dfb      	ldrb	r3, [r7, #23]
 8011678:	005b      	lsls	r3, r3, #1
 801167a:	4619      	mov	r1, r3
 801167c:	68bb      	ldr	r3, [r7, #8]
 801167e:	440b      	add	r3, r1
 8011680:	3230      	adds	r2, #48	; 0x30
 8011682:	b2d2      	uxtb	r2, r2
 8011684:	701a      	strb	r2, [r3, #0]
 8011686:	e00a      	b.n	801169e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8011688:	68fb      	ldr	r3, [r7, #12]
 801168a:	0f1b      	lsrs	r3, r3, #28
 801168c:	b2da      	uxtb	r2, r3
 801168e:	7dfb      	ldrb	r3, [r7, #23]
 8011690:	005b      	lsls	r3, r3, #1
 8011692:	4619      	mov	r1, r3
 8011694:	68bb      	ldr	r3, [r7, #8]
 8011696:	440b      	add	r3, r1
 8011698:	3237      	adds	r2, #55	; 0x37
 801169a:	b2d2      	uxtb	r2, r2
 801169c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801169e:	68fb      	ldr	r3, [r7, #12]
 80116a0:	011b      	lsls	r3, r3, #4
 80116a2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80116a4:	7dfb      	ldrb	r3, [r7, #23]
 80116a6:	005b      	lsls	r3, r3, #1
 80116a8:	3301      	adds	r3, #1
 80116aa:	68ba      	ldr	r2, [r7, #8]
 80116ac:	4413      	add	r3, r2
 80116ae:	2200      	movs	r2, #0
 80116b0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80116b2:	7dfb      	ldrb	r3, [r7, #23]
 80116b4:	3301      	adds	r3, #1
 80116b6:	75fb      	strb	r3, [r7, #23]
 80116b8:	7dfa      	ldrb	r2, [r7, #23]
 80116ba:	79fb      	ldrb	r3, [r7, #7]
 80116bc:	429a      	cmp	r2, r3
 80116be:	d3d3      	bcc.n	8011668 <IntToUnicode+0x18>
  }
}
 80116c0:	bf00      	nop
 80116c2:	bf00      	nop
 80116c4:	371c      	adds	r7, #28
 80116c6:	46bd      	mov	sp, r7
 80116c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116cc:	4770      	bx	lr
	...

080116d0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80116d0:	b580      	push	{r7, lr}
 80116d2:	b0b0      	sub	sp, #192	; 0xc0
 80116d4:	af00      	add	r7, sp, #0
 80116d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80116d8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80116dc:	2200      	movs	r2, #0
 80116de:	601a      	str	r2, [r3, #0]
 80116e0:	605a      	str	r2, [r3, #4]
 80116e2:	609a      	str	r2, [r3, #8]
 80116e4:	60da      	str	r2, [r3, #12]
 80116e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80116e8:	f107 0314 	add.w	r3, r7, #20
 80116ec:	2298      	movs	r2, #152	; 0x98
 80116ee:	2100      	movs	r1, #0
 80116f0:	4618      	mov	r0, r3
 80116f2:	f000 fda5 	bl	8012240 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	681b      	ldr	r3, [r3, #0]
 80116fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80116fe:	d163      	bne.n	80117c8 <HAL_PCD_MspInit+0xf8>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8011700:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8011704:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8011706:	2300      	movs	r3, #0
 8011708:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 801170c:	f107 0314 	add.w	r3, r7, #20
 8011710:	4618      	mov	r0, r3
 8011712:	f7f7 fe8d 	bl	8009430 <HAL_RCCEx_PeriphCLKConfig>
 8011716:	4603      	mov	r3, r0
 8011718:	2b00      	cmp	r3, #0
 801171a:	d001      	beq.n	8011720 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 801171c:	f7f1 fe00 	bl	8003320 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8011720:	4b2b      	ldr	r3, [pc, #172]	; (80117d0 <HAL_PCD_MspInit+0x100>)
 8011722:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011724:	4a2a      	ldr	r2, [pc, #168]	; (80117d0 <HAL_PCD_MspInit+0x100>)
 8011726:	f043 0301 	orr.w	r3, r3, #1
 801172a:	64d3      	str	r3, [r2, #76]	; 0x4c
 801172c:	4b28      	ldr	r3, [pc, #160]	; (80117d0 <HAL_PCD_MspInit+0x100>)
 801172e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011730:	f003 0301 	and.w	r3, r3, #1
 8011734:	613b      	str	r3, [r7, #16]
 8011736:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8011738:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801173c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011740:	2302      	movs	r3, #2
 8011742:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011746:	2300      	movs	r3, #0
 8011748:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801174c:	2303      	movs	r3, #3
 801174e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8011752:	230a      	movs	r3, #10
 8011754:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011758:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 801175c:	4619      	mov	r1, r3
 801175e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8011762:	f7f5 fa4f 	bl	8006c04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8011766:	4b1a      	ldr	r3, [pc, #104]	; (80117d0 <HAL_PCD_MspInit+0x100>)
 8011768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801176a:	4a19      	ldr	r2, [pc, #100]	; (80117d0 <HAL_PCD_MspInit+0x100>)
 801176c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8011770:	64d3      	str	r3, [r2, #76]	; 0x4c
 8011772:	4b17      	ldr	r3, [pc, #92]	; (80117d0 <HAL_PCD_MspInit+0x100>)
 8011774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011776:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801177a:	60fb      	str	r3, [r7, #12]
 801177c:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801177e:	4b14      	ldr	r3, [pc, #80]	; (80117d0 <HAL_PCD_MspInit+0x100>)
 8011780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011782:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011786:	2b00      	cmp	r3, #0
 8011788:	d114      	bne.n	80117b4 <HAL_PCD_MspInit+0xe4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801178a:	4b11      	ldr	r3, [pc, #68]	; (80117d0 <HAL_PCD_MspInit+0x100>)
 801178c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801178e:	4a10      	ldr	r2, [pc, #64]	; (80117d0 <HAL_PCD_MspInit+0x100>)
 8011790:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011794:	6593      	str	r3, [r2, #88]	; 0x58
 8011796:	4b0e      	ldr	r3, [pc, #56]	; (80117d0 <HAL_PCD_MspInit+0x100>)
 8011798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801179a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801179e:	60bb      	str	r3, [r7, #8]
 80117a0:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 80117a2:	f7f6 fe8d 	bl	80084c0 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80117a6:	4b0a      	ldr	r3, [pc, #40]	; (80117d0 <HAL_PCD_MspInit+0x100>)
 80117a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80117aa:	4a09      	ldr	r2, [pc, #36]	; (80117d0 <HAL_PCD_MspInit+0x100>)
 80117ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80117b0:	6593      	str	r3, [r2, #88]	; 0x58
 80117b2:	e001      	b.n	80117b8 <HAL_PCD_MspInit+0xe8>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 80117b4:	f7f6 fe84 	bl	80084c0 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 80117b8:	2200      	movs	r2, #0
 80117ba:	2105      	movs	r1, #5
 80117bc:	2043      	movs	r0, #67	; 0x43
 80117be:	f7f5 f83d 	bl	800683c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80117c2:	2043      	movs	r0, #67	; 0x43
 80117c4:	f7f5 f856 	bl	8006874 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80117c8:	bf00      	nop
 80117ca:	37c0      	adds	r7, #192	; 0xc0
 80117cc:	46bd      	mov	sp, r7
 80117ce:	bd80      	pop	{r7, pc}
 80117d0:	40021000 	.word	0x40021000

080117d4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80117d4:	b580      	push	{r7, lr}
 80117d6:	b082      	sub	sp, #8
 80117d8:	af00      	add	r7, sp, #0
 80117da:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80117e8:	4619      	mov	r1, r3
 80117ea:	4610      	mov	r0, r2
 80117ec:	f7fb fef4 	bl	800d5d8 <USBD_LL_SetupStage>
}
 80117f0:	bf00      	nop
 80117f2:	3708      	adds	r7, #8
 80117f4:	46bd      	mov	sp, r7
 80117f6:	bd80      	pop	{r7, pc}

080117f8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80117f8:	b580      	push	{r7, lr}
 80117fa:	b082      	sub	sp, #8
 80117fc:	af00      	add	r7, sp, #0
 80117fe:	6078      	str	r0, [r7, #4]
 8011800:	460b      	mov	r3, r1
 8011802:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 801180a:	78fa      	ldrb	r2, [r7, #3]
 801180c:	6879      	ldr	r1, [r7, #4]
 801180e:	4613      	mov	r3, r2
 8011810:	00db      	lsls	r3, r3, #3
 8011812:	4413      	add	r3, r2
 8011814:	009b      	lsls	r3, r3, #2
 8011816:	440b      	add	r3, r1
 8011818:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 801181c:	681a      	ldr	r2, [r3, #0]
 801181e:	78fb      	ldrb	r3, [r7, #3]
 8011820:	4619      	mov	r1, r3
 8011822:	f7fb ff2e 	bl	800d682 <USBD_LL_DataOutStage>
}
 8011826:	bf00      	nop
 8011828:	3708      	adds	r7, #8
 801182a:	46bd      	mov	sp, r7
 801182c:	bd80      	pop	{r7, pc}

0801182e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801182e:	b580      	push	{r7, lr}
 8011830:	b082      	sub	sp, #8
 8011832:	af00      	add	r7, sp, #0
 8011834:	6078      	str	r0, [r7, #4]
 8011836:	460b      	mov	r3, r1
 8011838:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801183a:	687b      	ldr	r3, [r7, #4]
 801183c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8011840:	78fa      	ldrb	r2, [r7, #3]
 8011842:	6879      	ldr	r1, [r7, #4]
 8011844:	4613      	mov	r3, r2
 8011846:	00db      	lsls	r3, r3, #3
 8011848:	4413      	add	r3, r2
 801184a:	009b      	lsls	r3, r3, #2
 801184c:	440b      	add	r3, r1
 801184e:	334c      	adds	r3, #76	; 0x4c
 8011850:	681a      	ldr	r2, [r3, #0]
 8011852:	78fb      	ldrb	r3, [r7, #3]
 8011854:	4619      	mov	r1, r3
 8011856:	f7fb ff77 	bl	800d748 <USBD_LL_DataInStage>
}
 801185a:	bf00      	nop
 801185c:	3708      	adds	r7, #8
 801185e:	46bd      	mov	sp, r7
 8011860:	bd80      	pop	{r7, pc}

08011862 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011862:	b580      	push	{r7, lr}
 8011864:	b082      	sub	sp, #8
 8011866:	af00      	add	r7, sp, #0
 8011868:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8011870:	4618      	mov	r0, r3
 8011872:	f7fc f88b 	bl	800d98c <USBD_LL_SOF>
}
 8011876:	bf00      	nop
 8011878:	3708      	adds	r7, #8
 801187a:	46bd      	mov	sp, r7
 801187c:	bd80      	pop	{r7, pc}

0801187e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801187e:	b580      	push	{r7, lr}
 8011880:	b084      	sub	sp, #16
 8011882:	af00      	add	r7, sp, #0
 8011884:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8011886:	2301      	movs	r3, #1
 8011888:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801188a:	687b      	ldr	r3, [r7, #4]
 801188c:	68db      	ldr	r3, [r3, #12]
 801188e:	2b02      	cmp	r3, #2
 8011890:	d001      	beq.n	8011896 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8011892:	f7f1 fd45 	bl	8003320 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801189c:	7bfa      	ldrb	r2, [r7, #15]
 801189e:	4611      	mov	r1, r2
 80118a0:	4618      	mov	r0, r3
 80118a2:	f7fc f835 	bl	800d910 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80118ac:	4618      	mov	r0, r3
 80118ae:	f7fb ffe1 	bl	800d874 <USBD_LL_Reset>
}
 80118b2:	bf00      	nop
 80118b4:	3710      	adds	r7, #16
 80118b6:	46bd      	mov	sp, r7
 80118b8:	bd80      	pop	{r7, pc}
	...

080118bc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80118bc:	b580      	push	{r7, lr}
 80118be:	b082      	sub	sp, #8
 80118c0:	af00      	add	r7, sp, #0
 80118c2:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	681b      	ldr	r3, [r3, #0]
 80118c8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80118cc:	681b      	ldr	r3, [r3, #0]
 80118ce:	687a      	ldr	r2, [r7, #4]
 80118d0:	6812      	ldr	r2, [r2, #0]
 80118d2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80118d6:	f043 0301 	orr.w	r3, r3, #1
 80118da:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80118e2:	4618      	mov	r0, r3
 80118e4:	f7fc f824 	bl	800d930 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	6a1b      	ldr	r3, [r3, #32]
 80118ec:	2b00      	cmp	r3, #0
 80118ee:	d005      	beq.n	80118fc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80118f0:	4b04      	ldr	r3, [pc, #16]	; (8011904 <HAL_PCD_SuspendCallback+0x48>)
 80118f2:	691b      	ldr	r3, [r3, #16]
 80118f4:	4a03      	ldr	r2, [pc, #12]	; (8011904 <HAL_PCD_SuspendCallback+0x48>)
 80118f6:	f043 0306 	orr.w	r3, r3, #6
 80118fa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80118fc:	bf00      	nop
 80118fe:	3708      	adds	r7, #8
 8011900:	46bd      	mov	sp, r7
 8011902:	bd80      	pop	{r7, pc}
 8011904:	e000ed00 	.word	0xe000ed00

08011908 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011908:	b580      	push	{r7, lr}
 801190a:	b082      	sub	sp, #8
 801190c:	af00      	add	r7, sp, #0
 801190e:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	681b      	ldr	r3, [r3, #0]
 8011914:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011918:	681b      	ldr	r3, [r3, #0]
 801191a:	687a      	ldr	r2, [r7, #4]
 801191c:	6812      	ldr	r2, [r2, #0]
 801191e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8011922:	f023 0301 	bic.w	r3, r3, #1
 8011926:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8011928:	687b      	ldr	r3, [r7, #4]
 801192a:	6a1b      	ldr	r3, [r3, #32]
 801192c:	2b00      	cmp	r3, #0
 801192e:	d007      	beq.n	8011940 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011930:	4b08      	ldr	r3, [pc, #32]	; (8011954 <HAL_PCD_ResumeCallback+0x4c>)
 8011932:	691b      	ldr	r3, [r3, #16]
 8011934:	4a07      	ldr	r2, [pc, #28]	; (8011954 <HAL_PCD_ResumeCallback+0x4c>)
 8011936:	f023 0306 	bic.w	r3, r3, #6
 801193a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 801193c:	f000 faf4 	bl	8011f28 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8011946:	4618      	mov	r0, r3
 8011948:	f7fc f808 	bl	800d95c <USBD_LL_Resume>
}
 801194c:	bf00      	nop
 801194e:	3708      	adds	r7, #8
 8011950:	46bd      	mov	sp, r7
 8011952:	bd80      	pop	{r7, pc}
 8011954:	e000ed00 	.word	0xe000ed00

08011958 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011958:	b580      	push	{r7, lr}
 801195a:	b082      	sub	sp, #8
 801195c:	af00      	add	r7, sp, #0
 801195e:	6078      	str	r0, [r7, #4]
 8011960:	460b      	mov	r3, r1
 8011962:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801196a:	78fa      	ldrb	r2, [r7, #3]
 801196c:	4611      	mov	r1, r2
 801196e:	4618      	mov	r0, r3
 8011970:	f7fc f854 	bl	800da1c <USBD_LL_IsoOUTIncomplete>
}
 8011974:	bf00      	nop
 8011976:	3708      	adds	r7, #8
 8011978:	46bd      	mov	sp, r7
 801197a:	bd80      	pop	{r7, pc}

0801197c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801197c:	b580      	push	{r7, lr}
 801197e:	b082      	sub	sp, #8
 8011980:	af00      	add	r7, sp, #0
 8011982:	6078      	str	r0, [r7, #4]
 8011984:	460b      	mov	r3, r1
 8011986:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801198e:	78fa      	ldrb	r2, [r7, #3]
 8011990:	4611      	mov	r1, r2
 8011992:	4618      	mov	r0, r3
 8011994:	f7fc f81c 	bl	800d9d0 <USBD_LL_IsoINIncomplete>
}
 8011998:	bf00      	nop
 801199a:	3708      	adds	r7, #8
 801199c:	46bd      	mov	sp, r7
 801199e:	bd80      	pop	{r7, pc}

080119a0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80119a0:	b580      	push	{r7, lr}
 80119a2:	b082      	sub	sp, #8
 80119a4:	af00      	add	r7, sp, #0
 80119a6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80119ae:	4618      	mov	r0, r3
 80119b0:	f7fc f85a 	bl	800da68 <USBD_LL_DevConnected>
}
 80119b4:	bf00      	nop
 80119b6:	3708      	adds	r7, #8
 80119b8:	46bd      	mov	sp, r7
 80119ba:	bd80      	pop	{r7, pc}

080119bc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80119bc:	b580      	push	{r7, lr}
 80119be:	b082      	sub	sp, #8
 80119c0:	af00      	add	r7, sp, #0
 80119c2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80119ca:	4618      	mov	r0, r3
 80119cc:	f7fc f857 	bl	800da7e <USBD_LL_DevDisconnected>
}
 80119d0:	bf00      	nop
 80119d2:	3708      	adds	r7, #8
 80119d4:	46bd      	mov	sp, r7
 80119d6:	bd80      	pop	{r7, pc}

080119d8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80119d8:	b580      	push	{r7, lr}
 80119da:	b082      	sub	sp, #8
 80119dc:	af00      	add	r7, sp, #0
 80119de:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	781b      	ldrb	r3, [r3, #0]
 80119e4:	2b00      	cmp	r3, #0
 80119e6:	d139      	bne.n	8011a5c <USBD_LL_Init+0x84>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80119e8:	4a1f      	ldr	r2, [pc, #124]	; (8011a68 <USBD_LL_Init+0x90>)
 80119ea:	687b      	ldr	r3, [r7, #4]
 80119ec:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	4a1d      	ldr	r2, [pc, #116]	; (8011a68 <USBD_LL_Init+0x90>)
 80119f4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80119f8:	4b1b      	ldr	r3, [pc, #108]	; (8011a68 <USBD_LL_Init+0x90>)
 80119fa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80119fe:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8011a00:	4b19      	ldr	r3, [pc, #100]	; (8011a68 <USBD_LL_Init+0x90>)
 8011a02:	2206      	movs	r2, #6
 8011a04:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8011a06:	4b18      	ldr	r3, [pc, #96]	; (8011a68 <USBD_LL_Init+0x90>)
 8011a08:	2202      	movs	r2, #2
 8011a0a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8011a0c:	4b16      	ldr	r3, [pc, #88]	; (8011a68 <USBD_LL_Init+0x90>)
 8011a0e:	2200      	movs	r2, #0
 8011a10:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8011a12:	4b15      	ldr	r3, [pc, #84]	; (8011a68 <USBD_LL_Init+0x90>)
 8011a14:	2200      	movs	r2, #0
 8011a16:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8011a18:	4b13      	ldr	r3, [pc, #76]	; (8011a68 <USBD_LL_Init+0x90>)
 8011a1a:	2200      	movs	r2, #0
 8011a1c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8011a1e:	4b12      	ldr	r3, [pc, #72]	; (8011a68 <USBD_LL_Init+0x90>)
 8011a20:	2200      	movs	r2, #0
 8011a22:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8011a24:	4b10      	ldr	r3, [pc, #64]	; (8011a68 <USBD_LL_Init+0x90>)
 8011a26:	2200      	movs	r2, #0
 8011a28:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8011a2a:	4b0f      	ldr	r3, [pc, #60]	; (8011a68 <USBD_LL_Init+0x90>)
 8011a2c:	2200      	movs	r2, #0
 8011a2e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8011a30:	480d      	ldr	r0, [pc, #52]	; (8011a68 <USBD_LL_Init+0x90>)
 8011a32:	f7f5 faa9 	bl	8006f88 <HAL_PCD_Init>
 8011a36:	4603      	mov	r3, r0
 8011a38:	2b00      	cmp	r3, #0
 8011a3a:	d001      	beq.n	8011a40 <USBD_LL_Init+0x68>
  {
    Error_Handler( );
 8011a3c:	f7f1 fc70 	bl	8003320 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8011a40:	2180      	movs	r1, #128	; 0x80
 8011a42:	4809      	ldr	r0, [pc, #36]	; (8011a68 <USBD_LL_Init+0x90>)
 8011a44:	f7f6 fc2b 	bl	800829e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8011a48:	2240      	movs	r2, #64	; 0x40
 8011a4a:	2100      	movs	r1, #0
 8011a4c:	4806      	ldr	r0, [pc, #24]	; (8011a68 <USBD_LL_Init+0x90>)
 8011a4e:	f7f6 fbdf 	bl	8008210 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8011a52:	2280      	movs	r2, #128	; 0x80
 8011a54:	2101      	movs	r1, #1
 8011a56:	4804      	ldr	r0, [pc, #16]	; (8011a68 <USBD_LL_Init+0x90>)
 8011a58:	f7f6 fbda 	bl	8008210 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8011a5c:	2300      	movs	r3, #0
}
 8011a5e:	4618      	mov	r0, r3
 8011a60:	3708      	adds	r7, #8
 8011a62:	46bd      	mov	sp, r7
 8011a64:	bd80      	pop	{r7, pc}
 8011a66:	bf00      	nop
 8011a68:	2000489c 	.word	0x2000489c

08011a6c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8011a6c:	b580      	push	{r7, lr}
 8011a6e:	b084      	sub	sp, #16
 8011a70:	af00      	add	r7, sp, #0
 8011a72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011a74:	2300      	movs	r3, #0
 8011a76:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011a78:	2300      	movs	r3, #0
 8011a7a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 8011a7c:	687b      	ldr	r3, [r7, #4]
 8011a7e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011a82:	4618      	mov	r0, r3
 8011a84:	f7f5 fba4 	bl	80071d0 <HAL_PCD_Start>
 8011a88:	4603      	mov	r3, r0
 8011a8a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8011a8c:	7bbb      	ldrb	r3, [r7, #14]
 8011a8e:	2b03      	cmp	r3, #3
 8011a90:	d816      	bhi.n	8011ac0 <USBD_LL_Start+0x54>
 8011a92:	a201      	add	r2, pc, #4	; (adr r2, 8011a98 <USBD_LL_Start+0x2c>)
 8011a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011a98:	08011aa9 	.word	0x08011aa9
 8011a9c:	08011aaf 	.word	0x08011aaf
 8011aa0:	08011ab5 	.word	0x08011ab5
 8011aa4:	08011abb 	.word	0x08011abb
    case HAL_OK :
      usb_status = USBD_OK;
 8011aa8:	2300      	movs	r3, #0
 8011aaa:	73fb      	strb	r3, [r7, #15]
    break;
 8011aac:	e00b      	b.n	8011ac6 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011aae:	2303      	movs	r3, #3
 8011ab0:	73fb      	strb	r3, [r7, #15]
    break;
 8011ab2:	e008      	b.n	8011ac6 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011ab4:	2301      	movs	r3, #1
 8011ab6:	73fb      	strb	r3, [r7, #15]
    break;
 8011ab8:	e005      	b.n	8011ac6 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011aba:	2303      	movs	r3, #3
 8011abc:	73fb      	strb	r3, [r7, #15]
    break;
 8011abe:	e002      	b.n	8011ac6 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8011ac0:	2303      	movs	r3, #3
 8011ac2:	73fb      	strb	r3, [r7, #15]
    break;
 8011ac4:	bf00      	nop
  }
  return usb_status;
 8011ac6:	7bfb      	ldrb	r3, [r7, #15]
}
 8011ac8:	4618      	mov	r0, r3
 8011aca:	3710      	adds	r7, #16
 8011acc:	46bd      	mov	sp, r7
 8011ace:	bd80      	pop	{r7, pc}

08011ad0 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8011ad0:	b580      	push	{r7, lr}
 8011ad2:	b084      	sub	sp, #16
 8011ad4:	af00      	add	r7, sp, #0
 8011ad6:	6078      	str	r0, [r7, #4]
 8011ad8:	4608      	mov	r0, r1
 8011ada:	4611      	mov	r1, r2
 8011adc:	461a      	mov	r2, r3
 8011ade:	4603      	mov	r3, r0
 8011ae0:	70fb      	strb	r3, [r7, #3]
 8011ae2:	460b      	mov	r3, r1
 8011ae4:	70bb      	strb	r3, [r7, #2]
 8011ae6:	4613      	mov	r3, r2
 8011ae8:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011aea:	2300      	movs	r3, #0
 8011aec:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011aee:	2300      	movs	r3, #0
 8011af0:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8011af2:	687b      	ldr	r3, [r7, #4]
 8011af4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8011af8:	78bb      	ldrb	r3, [r7, #2]
 8011afa:	883a      	ldrh	r2, [r7, #0]
 8011afc:	78f9      	ldrb	r1, [r7, #3]
 8011afe:	f7f6 f84e 	bl	8007b9e <HAL_PCD_EP_Open>
 8011b02:	4603      	mov	r3, r0
 8011b04:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8011b06:	7bbb      	ldrb	r3, [r7, #14]
 8011b08:	2b03      	cmp	r3, #3
 8011b0a:	d817      	bhi.n	8011b3c <USBD_LL_OpenEP+0x6c>
 8011b0c:	a201      	add	r2, pc, #4	; (adr r2, 8011b14 <USBD_LL_OpenEP+0x44>)
 8011b0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011b12:	bf00      	nop
 8011b14:	08011b25 	.word	0x08011b25
 8011b18:	08011b2b 	.word	0x08011b2b
 8011b1c:	08011b31 	.word	0x08011b31
 8011b20:	08011b37 	.word	0x08011b37
    case HAL_OK :
      usb_status = USBD_OK;
 8011b24:	2300      	movs	r3, #0
 8011b26:	73fb      	strb	r3, [r7, #15]
    break;
 8011b28:	e00b      	b.n	8011b42 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011b2a:	2303      	movs	r3, #3
 8011b2c:	73fb      	strb	r3, [r7, #15]
    break;
 8011b2e:	e008      	b.n	8011b42 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011b30:	2301      	movs	r3, #1
 8011b32:	73fb      	strb	r3, [r7, #15]
    break;
 8011b34:	e005      	b.n	8011b42 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011b36:	2303      	movs	r3, #3
 8011b38:	73fb      	strb	r3, [r7, #15]
    break;
 8011b3a:	e002      	b.n	8011b42 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8011b3c:	2303      	movs	r3, #3
 8011b3e:	73fb      	strb	r3, [r7, #15]
    break;
 8011b40:	bf00      	nop
  }
  return usb_status;
 8011b42:	7bfb      	ldrb	r3, [r7, #15]
}
 8011b44:	4618      	mov	r0, r3
 8011b46:	3710      	adds	r7, #16
 8011b48:	46bd      	mov	sp, r7
 8011b4a:	bd80      	pop	{r7, pc}

08011b4c <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011b4c:	b580      	push	{r7, lr}
 8011b4e:	b084      	sub	sp, #16
 8011b50:	af00      	add	r7, sp, #0
 8011b52:	6078      	str	r0, [r7, #4]
 8011b54:	460b      	mov	r3, r1
 8011b56:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011b58:	2300      	movs	r3, #0
 8011b5a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011b5c:	2300      	movs	r3, #0
 8011b5e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011b66:	78fa      	ldrb	r2, [r7, #3]
 8011b68:	4611      	mov	r1, r2
 8011b6a:	4618      	mov	r0, r3
 8011b6c:	f7f6 f87f 	bl	8007c6e <HAL_PCD_EP_Close>
 8011b70:	4603      	mov	r3, r0
 8011b72:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8011b74:	7bbb      	ldrb	r3, [r7, #14]
 8011b76:	2b03      	cmp	r3, #3
 8011b78:	d816      	bhi.n	8011ba8 <USBD_LL_CloseEP+0x5c>
 8011b7a:	a201      	add	r2, pc, #4	; (adr r2, 8011b80 <USBD_LL_CloseEP+0x34>)
 8011b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011b80:	08011b91 	.word	0x08011b91
 8011b84:	08011b97 	.word	0x08011b97
 8011b88:	08011b9d 	.word	0x08011b9d
 8011b8c:	08011ba3 	.word	0x08011ba3
    case HAL_OK :
      usb_status = USBD_OK;
 8011b90:	2300      	movs	r3, #0
 8011b92:	73fb      	strb	r3, [r7, #15]
    break;
 8011b94:	e00b      	b.n	8011bae <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011b96:	2303      	movs	r3, #3
 8011b98:	73fb      	strb	r3, [r7, #15]
    break;
 8011b9a:	e008      	b.n	8011bae <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011b9c:	2301      	movs	r3, #1
 8011b9e:	73fb      	strb	r3, [r7, #15]
    break;
 8011ba0:	e005      	b.n	8011bae <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011ba2:	2303      	movs	r3, #3
 8011ba4:	73fb      	strb	r3, [r7, #15]
    break;
 8011ba6:	e002      	b.n	8011bae <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8011ba8:	2303      	movs	r3, #3
 8011baa:	73fb      	strb	r3, [r7, #15]
    break;
 8011bac:	bf00      	nop
  }
  return usb_status;
 8011bae:	7bfb      	ldrb	r3, [r7, #15]
}
 8011bb0:	4618      	mov	r0, r3
 8011bb2:	3710      	adds	r7, #16
 8011bb4:	46bd      	mov	sp, r7
 8011bb6:	bd80      	pop	{r7, pc}

08011bb8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011bb8:	b580      	push	{r7, lr}
 8011bba:	b084      	sub	sp, #16
 8011bbc:	af00      	add	r7, sp, #0
 8011bbe:	6078      	str	r0, [r7, #4]
 8011bc0:	460b      	mov	r3, r1
 8011bc2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011bc4:	2300      	movs	r3, #0
 8011bc6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011bc8:	2300      	movs	r3, #0
 8011bca:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8011bcc:	687b      	ldr	r3, [r7, #4]
 8011bce:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011bd2:	78fa      	ldrb	r2, [r7, #3]
 8011bd4:	4611      	mov	r1, r2
 8011bd6:	4618      	mov	r0, r3
 8011bd8:	f7f6 f926 	bl	8007e28 <HAL_PCD_EP_SetStall>
 8011bdc:	4603      	mov	r3, r0
 8011bde:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8011be0:	7bbb      	ldrb	r3, [r7, #14]
 8011be2:	2b03      	cmp	r3, #3
 8011be4:	d816      	bhi.n	8011c14 <USBD_LL_StallEP+0x5c>
 8011be6:	a201      	add	r2, pc, #4	; (adr r2, 8011bec <USBD_LL_StallEP+0x34>)
 8011be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011bec:	08011bfd 	.word	0x08011bfd
 8011bf0:	08011c03 	.word	0x08011c03
 8011bf4:	08011c09 	.word	0x08011c09
 8011bf8:	08011c0f 	.word	0x08011c0f
    case HAL_OK :
      usb_status = USBD_OK;
 8011bfc:	2300      	movs	r3, #0
 8011bfe:	73fb      	strb	r3, [r7, #15]
    break;
 8011c00:	e00b      	b.n	8011c1a <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011c02:	2303      	movs	r3, #3
 8011c04:	73fb      	strb	r3, [r7, #15]
    break;
 8011c06:	e008      	b.n	8011c1a <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011c08:	2301      	movs	r3, #1
 8011c0a:	73fb      	strb	r3, [r7, #15]
    break;
 8011c0c:	e005      	b.n	8011c1a <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011c0e:	2303      	movs	r3, #3
 8011c10:	73fb      	strb	r3, [r7, #15]
    break;
 8011c12:	e002      	b.n	8011c1a <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8011c14:	2303      	movs	r3, #3
 8011c16:	73fb      	strb	r3, [r7, #15]
    break;
 8011c18:	bf00      	nop
  }
  return usb_status;
 8011c1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8011c1c:	4618      	mov	r0, r3
 8011c1e:	3710      	adds	r7, #16
 8011c20:	46bd      	mov	sp, r7
 8011c22:	bd80      	pop	{r7, pc}

08011c24 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011c24:	b580      	push	{r7, lr}
 8011c26:	b084      	sub	sp, #16
 8011c28:	af00      	add	r7, sp, #0
 8011c2a:	6078      	str	r0, [r7, #4]
 8011c2c:	460b      	mov	r3, r1
 8011c2e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011c30:	2300      	movs	r3, #0
 8011c32:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011c34:	2300      	movs	r3, #0
 8011c36:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8011c38:	687b      	ldr	r3, [r7, #4]
 8011c3a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011c3e:	78fa      	ldrb	r2, [r7, #3]
 8011c40:	4611      	mov	r1, r2
 8011c42:	4618      	mov	r0, r3
 8011c44:	f7f6 f952 	bl	8007eec <HAL_PCD_EP_ClrStall>
 8011c48:	4603      	mov	r3, r0
 8011c4a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8011c4c:	7bbb      	ldrb	r3, [r7, #14]
 8011c4e:	2b03      	cmp	r3, #3
 8011c50:	d816      	bhi.n	8011c80 <USBD_LL_ClearStallEP+0x5c>
 8011c52:	a201      	add	r2, pc, #4	; (adr r2, 8011c58 <USBD_LL_ClearStallEP+0x34>)
 8011c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011c58:	08011c69 	.word	0x08011c69
 8011c5c:	08011c6f 	.word	0x08011c6f
 8011c60:	08011c75 	.word	0x08011c75
 8011c64:	08011c7b 	.word	0x08011c7b
    case HAL_OK :
      usb_status = USBD_OK;
 8011c68:	2300      	movs	r3, #0
 8011c6a:	73fb      	strb	r3, [r7, #15]
    break;
 8011c6c:	e00b      	b.n	8011c86 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011c6e:	2303      	movs	r3, #3
 8011c70:	73fb      	strb	r3, [r7, #15]
    break;
 8011c72:	e008      	b.n	8011c86 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011c74:	2301      	movs	r3, #1
 8011c76:	73fb      	strb	r3, [r7, #15]
    break;
 8011c78:	e005      	b.n	8011c86 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011c7a:	2303      	movs	r3, #3
 8011c7c:	73fb      	strb	r3, [r7, #15]
    break;
 8011c7e:	e002      	b.n	8011c86 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8011c80:	2303      	movs	r3, #3
 8011c82:	73fb      	strb	r3, [r7, #15]
    break;
 8011c84:	bf00      	nop
  }
  return usb_status;
 8011c86:	7bfb      	ldrb	r3, [r7, #15]
}
 8011c88:	4618      	mov	r0, r3
 8011c8a:	3710      	adds	r7, #16
 8011c8c:	46bd      	mov	sp, r7
 8011c8e:	bd80      	pop	{r7, pc}

08011c90 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011c90:	b480      	push	{r7}
 8011c92:	b085      	sub	sp, #20
 8011c94:	af00      	add	r7, sp, #0
 8011c96:	6078      	str	r0, [r7, #4]
 8011c98:	460b      	mov	r3, r1
 8011c9a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8011c9c:	687b      	ldr	r3, [r7, #4]
 8011c9e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011ca2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8011ca4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011ca8:	2b00      	cmp	r3, #0
 8011caa:	da0b      	bge.n	8011cc4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8011cac:	78fb      	ldrb	r3, [r7, #3]
 8011cae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011cb2:	68f9      	ldr	r1, [r7, #12]
 8011cb4:	4613      	mov	r3, r2
 8011cb6:	00db      	lsls	r3, r3, #3
 8011cb8:	4413      	add	r3, r2
 8011cba:	009b      	lsls	r3, r3, #2
 8011cbc:	440b      	add	r3, r1
 8011cbe:	333e      	adds	r3, #62	; 0x3e
 8011cc0:	781b      	ldrb	r3, [r3, #0]
 8011cc2:	e00b      	b.n	8011cdc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8011cc4:	78fb      	ldrb	r3, [r7, #3]
 8011cc6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011cca:	68f9      	ldr	r1, [r7, #12]
 8011ccc:	4613      	mov	r3, r2
 8011cce:	00db      	lsls	r3, r3, #3
 8011cd0:	4413      	add	r3, r2
 8011cd2:	009b      	lsls	r3, r3, #2
 8011cd4:	440b      	add	r3, r1
 8011cd6:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8011cda:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011cdc:	4618      	mov	r0, r3
 8011cde:	3714      	adds	r7, #20
 8011ce0:	46bd      	mov	sp, r7
 8011ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ce6:	4770      	bx	lr

08011ce8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8011ce8:	b580      	push	{r7, lr}
 8011cea:	b084      	sub	sp, #16
 8011cec:	af00      	add	r7, sp, #0
 8011cee:	6078      	str	r0, [r7, #4]
 8011cf0:	460b      	mov	r3, r1
 8011cf2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011cf4:	2300      	movs	r3, #0
 8011cf6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011cf8:	2300      	movs	r3, #0
 8011cfa:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8011cfc:	687b      	ldr	r3, [r7, #4]
 8011cfe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011d02:	78fa      	ldrb	r2, [r7, #3]
 8011d04:	4611      	mov	r1, r2
 8011d06:	4618      	mov	r0, r3
 8011d08:	f7f5 ff24 	bl	8007b54 <HAL_PCD_SetAddress>
 8011d0c:	4603      	mov	r3, r0
 8011d0e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8011d10:	7bbb      	ldrb	r3, [r7, #14]
 8011d12:	2b03      	cmp	r3, #3
 8011d14:	d816      	bhi.n	8011d44 <USBD_LL_SetUSBAddress+0x5c>
 8011d16:	a201      	add	r2, pc, #4	; (adr r2, 8011d1c <USBD_LL_SetUSBAddress+0x34>)
 8011d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d1c:	08011d2d 	.word	0x08011d2d
 8011d20:	08011d33 	.word	0x08011d33
 8011d24:	08011d39 	.word	0x08011d39
 8011d28:	08011d3f 	.word	0x08011d3f
    case HAL_OK :
      usb_status = USBD_OK;
 8011d2c:	2300      	movs	r3, #0
 8011d2e:	73fb      	strb	r3, [r7, #15]
    break;
 8011d30:	e00b      	b.n	8011d4a <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011d32:	2303      	movs	r3, #3
 8011d34:	73fb      	strb	r3, [r7, #15]
    break;
 8011d36:	e008      	b.n	8011d4a <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011d38:	2301      	movs	r3, #1
 8011d3a:	73fb      	strb	r3, [r7, #15]
    break;
 8011d3c:	e005      	b.n	8011d4a <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011d3e:	2303      	movs	r3, #3
 8011d40:	73fb      	strb	r3, [r7, #15]
    break;
 8011d42:	e002      	b.n	8011d4a <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8011d44:	2303      	movs	r3, #3
 8011d46:	73fb      	strb	r3, [r7, #15]
    break;
 8011d48:	bf00      	nop
  }
  return usb_status;
 8011d4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8011d4c:	4618      	mov	r0, r3
 8011d4e:	3710      	adds	r7, #16
 8011d50:	46bd      	mov	sp, r7
 8011d52:	bd80      	pop	{r7, pc}

08011d54 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011d54:	b580      	push	{r7, lr}
 8011d56:	b086      	sub	sp, #24
 8011d58:	af00      	add	r7, sp, #0
 8011d5a:	60f8      	str	r0, [r7, #12]
 8011d5c:	607a      	str	r2, [r7, #4]
 8011d5e:	603b      	str	r3, [r7, #0]
 8011d60:	460b      	mov	r3, r1
 8011d62:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011d64:	2300      	movs	r3, #0
 8011d66:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011d68:	2300      	movs	r3, #0
 8011d6a:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8011d6c:	68fb      	ldr	r3, [r7, #12]
 8011d6e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8011d72:	7af9      	ldrb	r1, [r7, #11]
 8011d74:	683b      	ldr	r3, [r7, #0]
 8011d76:	687a      	ldr	r2, [r7, #4]
 8011d78:	f7f6 f819 	bl	8007dae <HAL_PCD_EP_Transmit>
 8011d7c:	4603      	mov	r3, r0
 8011d7e:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8011d80:	7dbb      	ldrb	r3, [r7, #22]
 8011d82:	2b03      	cmp	r3, #3
 8011d84:	d816      	bhi.n	8011db4 <USBD_LL_Transmit+0x60>
 8011d86:	a201      	add	r2, pc, #4	; (adr r2, 8011d8c <USBD_LL_Transmit+0x38>)
 8011d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d8c:	08011d9d 	.word	0x08011d9d
 8011d90:	08011da3 	.word	0x08011da3
 8011d94:	08011da9 	.word	0x08011da9
 8011d98:	08011daf 	.word	0x08011daf
    case HAL_OK :
      usb_status = USBD_OK;
 8011d9c:	2300      	movs	r3, #0
 8011d9e:	75fb      	strb	r3, [r7, #23]
    break;
 8011da0:	e00b      	b.n	8011dba <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011da2:	2303      	movs	r3, #3
 8011da4:	75fb      	strb	r3, [r7, #23]
    break;
 8011da6:	e008      	b.n	8011dba <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011da8:	2301      	movs	r3, #1
 8011daa:	75fb      	strb	r3, [r7, #23]
    break;
 8011dac:	e005      	b.n	8011dba <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011dae:	2303      	movs	r3, #3
 8011db0:	75fb      	strb	r3, [r7, #23]
    break;
 8011db2:	e002      	b.n	8011dba <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8011db4:	2303      	movs	r3, #3
 8011db6:	75fb      	strb	r3, [r7, #23]
    break;
 8011db8:	bf00      	nop
  }
  return usb_status;
 8011dba:	7dfb      	ldrb	r3, [r7, #23]
}
 8011dbc:	4618      	mov	r0, r3
 8011dbe:	3718      	adds	r7, #24
 8011dc0:	46bd      	mov	sp, r7
 8011dc2:	bd80      	pop	{r7, pc}

08011dc4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011dc4:	b580      	push	{r7, lr}
 8011dc6:	b086      	sub	sp, #24
 8011dc8:	af00      	add	r7, sp, #0
 8011dca:	60f8      	str	r0, [r7, #12]
 8011dcc:	607a      	str	r2, [r7, #4]
 8011dce:	603b      	str	r3, [r7, #0]
 8011dd0:	460b      	mov	r3, r1
 8011dd2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011dd4:	2300      	movs	r3, #0
 8011dd6:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011dd8:	2300      	movs	r3, #0
 8011dda:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8011ddc:	68fb      	ldr	r3, [r7, #12]
 8011dde:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8011de2:	7af9      	ldrb	r1, [r7, #11]
 8011de4:	683b      	ldr	r3, [r7, #0]
 8011de6:	687a      	ldr	r2, [r7, #4]
 8011de8:	f7f5 ff8b 	bl	8007d02 <HAL_PCD_EP_Receive>
 8011dec:	4603      	mov	r3, r0
 8011dee:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8011df0:	7dbb      	ldrb	r3, [r7, #22]
 8011df2:	2b03      	cmp	r3, #3
 8011df4:	d816      	bhi.n	8011e24 <USBD_LL_PrepareReceive+0x60>
 8011df6:	a201      	add	r2, pc, #4	; (adr r2, 8011dfc <USBD_LL_PrepareReceive+0x38>)
 8011df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011dfc:	08011e0d 	.word	0x08011e0d
 8011e00:	08011e13 	.word	0x08011e13
 8011e04:	08011e19 	.word	0x08011e19
 8011e08:	08011e1f 	.word	0x08011e1f
    case HAL_OK :
      usb_status = USBD_OK;
 8011e0c:	2300      	movs	r3, #0
 8011e0e:	75fb      	strb	r3, [r7, #23]
    break;
 8011e10:	e00b      	b.n	8011e2a <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011e12:	2303      	movs	r3, #3
 8011e14:	75fb      	strb	r3, [r7, #23]
    break;
 8011e16:	e008      	b.n	8011e2a <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011e18:	2301      	movs	r3, #1
 8011e1a:	75fb      	strb	r3, [r7, #23]
    break;
 8011e1c:	e005      	b.n	8011e2a <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011e1e:	2303      	movs	r3, #3
 8011e20:	75fb      	strb	r3, [r7, #23]
    break;
 8011e22:	e002      	b.n	8011e2a <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8011e24:	2303      	movs	r3, #3
 8011e26:	75fb      	strb	r3, [r7, #23]
    break;
 8011e28:	bf00      	nop
  }
  return usb_status;
 8011e2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8011e2c:	4618      	mov	r0, r3
 8011e2e:	3718      	adds	r7, #24
 8011e30:	46bd      	mov	sp, r7
 8011e32:	bd80      	pop	{r7, pc}

08011e34 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011e34:	b580      	push	{r7, lr}
 8011e36:	b082      	sub	sp, #8
 8011e38:	af00      	add	r7, sp, #0
 8011e3a:	6078      	str	r0, [r7, #4]
 8011e3c:	460b      	mov	r3, r1
 8011e3e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011e46:	78fa      	ldrb	r2, [r7, #3]
 8011e48:	4611      	mov	r1, r2
 8011e4a:	4618      	mov	r0, r3
 8011e4c:	f7f5 ff97 	bl	8007d7e <HAL_PCD_EP_GetRxCount>
 8011e50:	4603      	mov	r3, r0
}
 8011e52:	4618      	mov	r0, r3
 8011e54:	3708      	adds	r7, #8
 8011e56:	46bd      	mov	sp, r7
 8011e58:	bd80      	pop	{r7, pc}
	...

08011e5c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8011e5c:	b580      	push	{r7, lr}
 8011e5e:	b082      	sub	sp, #8
 8011e60:	af00      	add	r7, sp, #0
 8011e62:	6078      	str	r0, [r7, #4]
 8011e64:	460b      	mov	r3, r1
 8011e66:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8011e68:	78fb      	ldrb	r3, [r7, #3]
 8011e6a:	2b00      	cmp	r3, #0
 8011e6c:	d002      	beq.n	8011e74 <HAL_PCDEx_LPM_Callback+0x18>
 8011e6e:	2b01      	cmp	r3, #1
 8011e70:	d01f      	beq.n	8011eb2 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8011e72:	e03b      	b.n	8011eec <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8011e74:	687b      	ldr	r3, [r7, #4]
 8011e76:	6a1b      	ldr	r3, [r3, #32]
 8011e78:	2b00      	cmp	r3, #0
 8011e7a:	d007      	beq.n	8011e8c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8011e7c:	f000 f854 	bl	8011f28 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011e80:	4b1c      	ldr	r3, [pc, #112]	; (8011ef4 <HAL_PCDEx_LPM_Callback+0x98>)
 8011e82:	691b      	ldr	r3, [r3, #16]
 8011e84:	4a1b      	ldr	r2, [pc, #108]	; (8011ef4 <HAL_PCDEx_LPM_Callback+0x98>)
 8011e86:	f023 0306 	bic.w	r3, r3, #6
 8011e8a:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8011e8c:	687b      	ldr	r3, [r7, #4]
 8011e8e:	681b      	ldr	r3, [r3, #0]
 8011e90:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011e94:	681b      	ldr	r3, [r3, #0]
 8011e96:	687a      	ldr	r2, [r7, #4]
 8011e98:	6812      	ldr	r2, [r2, #0]
 8011e9a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8011e9e:	f023 0301 	bic.w	r3, r3, #1
 8011ea2:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8011ea4:	687b      	ldr	r3, [r7, #4]
 8011ea6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8011eaa:	4618      	mov	r0, r3
 8011eac:	f7fb fd56 	bl	800d95c <USBD_LL_Resume>
    break;
 8011eb0:	e01c      	b.n	8011eec <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8011eb2:	687b      	ldr	r3, [r7, #4]
 8011eb4:	681b      	ldr	r3, [r3, #0]
 8011eb6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011eba:	681b      	ldr	r3, [r3, #0]
 8011ebc:	687a      	ldr	r2, [r7, #4]
 8011ebe:	6812      	ldr	r2, [r2, #0]
 8011ec0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8011ec4:	f043 0301 	orr.w	r3, r3, #1
 8011ec8:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8011ed0:	4618      	mov	r0, r3
 8011ed2:	f7fb fd2d 	bl	800d930 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8011ed6:	687b      	ldr	r3, [r7, #4]
 8011ed8:	6a1b      	ldr	r3, [r3, #32]
 8011eda:	2b00      	cmp	r3, #0
 8011edc:	d005      	beq.n	8011eea <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011ede:	4b05      	ldr	r3, [pc, #20]	; (8011ef4 <HAL_PCDEx_LPM_Callback+0x98>)
 8011ee0:	691b      	ldr	r3, [r3, #16]
 8011ee2:	4a04      	ldr	r2, [pc, #16]	; (8011ef4 <HAL_PCDEx_LPM_Callback+0x98>)
 8011ee4:	f043 0306 	orr.w	r3, r3, #6
 8011ee8:	6113      	str	r3, [r2, #16]
    break;
 8011eea:	bf00      	nop
}
 8011eec:	bf00      	nop
 8011eee:	3708      	adds	r7, #8
 8011ef0:	46bd      	mov	sp, r7
 8011ef2:	bd80      	pop	{r7, pc}
 8011ef4:	e000ed00 	.word	0xe000ed00

08011ef8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8011ef8:	b480      	push	{r7}
 8011efa:	b083      	sub	sp, #12
 8011efc:	af00      	add	r7, sp, #0
 8011efe:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8011f00:	4b03      	ldr	r3, [pc, #12]	; (8011f10 <USBD_static_malloc+0x18>)
}
 8011f02:	4618      	mov	r0, r3
 8011f04:	370c      	adds	r7, #12
 8011f06:	46bd      	mov	sp, r7
 8011f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f0c:	4770      	bx	lr
 8011f0e:	bf00      	nop
 8011f10:	20004da8 	.word	0x20004da8

08011f14 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8011f14:	b480      	push	{r7}
 8011f16:	b083      	sub	sp, #12
 8011f18:	af00      	add	r7, sp, #0
 8011f1a:	6078      	str	r0, [r7, #4]

}
 8011f1c:	bf00      	nop
 8011f1e:	370c      	adds	r7, #12
 8011f20:	46bd      	mov	sp, r7
 8011f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f26:	4770      	bx	lr

08011f28 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8011f28:	b580      	push	{r7, lr}
 8011f2a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8011f2c:	f7f0 fdd2 	bl	8002ad4 <SystemClock_Config>
}
 8011f30:	bf00      	nop
 8011f32:	bd80      	pop	{r7, pc}

08011f34 <expf>:
 8011f34:	b508      	push	{r3, lr}
 8011f36:	ed2d 8b02 	vpush	{d8}
 8011f3a:	eef0 8a40 	vmov.f32	s17, s0
 8011f3e:	f000 f82f 	bl	8011fa0 <__ieee754_expf>
 8011f42:	eeb0 8a40 	vmov.f32	s16, s0
 8011f46:	eeb0 0a68 	vmov.f32	s0, s17
 8011f4a:	f000 f919 	bl	8012180 <finitef>
 8011f4e:	b160      	cbz	r0, 8011f6a <expf+0x36>
 8011f50:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8011f90 <expf+0x5c>
 8011f54:	eef4 8ae7 	vcmpe.f32	s17, s15
 8011f58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f5c:	dd0a      	ble.n	8011f74 <expf+0x40>
 8011f5e:	f000 f91d 	bl	801219c <__errno>
 8011f62:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 8011f94 <expf+0x60>
 8011f66:	2322      	movs	r3, #34	; 0x22
 8011f68:	6003      	str	r3, [r0, #0]
 8011f6a:	eeb0 0a48 	vmov.f32	s0, s16
 8011f6e:	ecbd 8b02 	vpop	{d8}
 8011f72:	bd08      	pop	{r3, pc}
 8011f74:	eddf 7a08 	vldr	s15, [pc, #32]	; 8011f98 <expf+0x64>
 8011f78:	eef4 8ae7 	vcmpe.f32	s17, s15
 8011f7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f80:	d5f3      	bpl.n	8011f6a <expf+0x36>
 8011f82:	f000 f90b 	bl	801219c <__errno>
 8011f86:	2322      	movs	r3, #34	; 0x22
 8011f88:	ed9f 8a04 	vldr	s16, [pc, #16]	; 8011f9c <expf+0x68>
 8011f8c:	6003      	str	r3, [r0, #0]
 8011f8e:	e7ec      	b.n	8011f6a <expf+0x36>
 8011f90:	42b17180 	.word	0x42b17180
 8011f94:	7f800000 	.word	0x7f800000
 8011f98:	c2cff1b5 	.word	0xc2cff1b5
 8011f9c:	00000000 	.word	0x00000000

08011fa0 <__ieee754_expf>:
 8011fa0:	ee10 2a10 	vmov	r2, s0
 8011fa4:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8011fa8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8011fac:	d902      	bls.n	8011fb4 <__ieee754_expf+0x14>
 8011fae:	ee30 0a00 	vadd.f32	s0, s0, s0
 8011fb2:	4770      	bx	lr
 8011fb4:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 8011fb8:	d106      	bne.n	8011fc8 <__ieee754_expf+0x28>
 8011fba:	eddf 7a4e 	vldr	s15, [pc, #312]	; 80120f4 <__ieee754_expf+0x154>
 8011fbe:	2b00      	cmp	r3, #0
 8011fc0:	bf18      	it	ne
 8011fc2:	eeb0 0a67 	vmovne.f32	s0, s15
 8011fc6:	4770      	bx	lr
 8011fc8:	484b      	ldr	r0, [pc, #300]	; (80120f8 <__ieee754_expf+0x158>)
 8011fca:	4282      	cmp	r2, r0
 8011fcc:	dd02      	ble.n	8011fd4 <__ieee754_expf+0x34>
 8011fce:	2000      	movs	r0, #0
 8011fd0:	f000 b8d0 	b.w	8012174 <__math_oflowf>
 8011fd4:	2a00      	cmp	r2, #0
 8011fd6:	da05      	bge.n	8011fe4 <__ieee754_expf+0x44>
 8011fd8:	4a48      	ldr	r2, [pc, #288]	; (80120fc <__ieee754_expf+0x15c>)
 8011fda:	4291      	cmp	r1, r2
 8011fdc:	d902      	bls.n	8011fe4 <__ieee754_expf+0x44>
 8011fde:	2000      	movs	r0, #0
 8011fe0:	f000 b8c2 	b.w	8012168 <__math_uflowf>
 8011fe4:	4a46      	ldr	r2, [pc, #280]	; (8012100 <__ieee754_expf+0x160>)
 8011fe6:	4291      	cmp	r1, r2
 8011fe8:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8011fec:	d952      	bls.n	8012094 <__ieee754_expf+0xf4>
 8011fee:	4a45      	ldr	r2, [pc, #276]	; (8012104 <__ieee754_expf+0x164>)
 8011ff0:	4291      	cmp	r1, r2
 8011ff2:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8011ff6:	d834      	bhi.n	8012062 <__ieee754_expf+0xc2>
 8011ff8:	4943      	ldr	r1, [pc, #268]	; (8012108 <__ieee754_expf+0x168>)
 8011ffa:	4411      	add	r1, r2
 8011ffc:	ed91 7a00 	vldr	s14, [r1]
 8012000:	4942      	ldr	r1, [pc, #264]	; (801210c <__ieee754_expf+0x16c>)
 8012002:	440a      	add	r2, r1
 8012004:	edd2 7a00 	vldr	s15, [r2]
 8012008:	ee30 7a47 	vsub.f32	s14, s0, s14
 801200c:	f1c3 0201 	rsb	r2, r3, #1
 8012010:	1ad2      	subs	r2, r2, r3
 8012012:	ee37 0a67 	vsub.f32	s0, s14, s15
 8012016:	ee20 6a00 	vmul.f32	s12, s0, s0
 801201a:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 8012110 <__ieee754_expf+0x170>
 801201e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8012114 <__ieee754_expf+0x174>
 8012022:	eee6 6a05 	vfma.f32	s13, s12, s10
 8012026:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 8012118 <__ieee754_expf+0x178>
 801202a:	eea6 5a86 	vfma.f32	s10, s13, s12
 801202e:	eddf 6a3b 	vldr	s13, [pc, #236]	; 801211c <__ieee754_expf+0x17c>
 8012032:	eee5 6a06 	vfma.f32	s13, s10, s12
 8012036:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 8012120 <__ieee754_expf+0x180>
 801203a:	eea6 5a86 	vfma.f32	s10, s13, s12
 801203e:	eef0 6a40 	vmov.f32	s13, s0
 8012042:	eee5 6a46 	vfms.f32	s13, s10, s12
 8012046:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 801204a:	ee20 5a26 	vmul.f32	s10, s0, s13
 801204e:	bb92      	cbnz	r2, 80120b6 <__ieee754_expf+0x116>
 8012050:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8012054:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8012058:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801205c:	ee35 0ac0 	vsub.f32	s0, s11, s0
 8012060:	4770      	bx	lr
 8012062:	4b30      	ldr	r3, [pc, #192]	; (8012124 <__ieee754_expf+0x184>)
 8012064:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8012128 <__ieee754_expf+0x188>
 8012068:	eddf 6a30 	vldr	s13, [pc, #192]	; 801212c <__ieee754_expf+0x18c>
 801206c:	4413      	add	r3, r2
 801206e:	edd3 7a00 	vldr	s15, [r3]
 8012072:	eee0 7a07 	vfma.f32	s15, s0, s14
 8012076:	eeb0 7a40 	vmov.f32	s14, s0
 801207a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801207e:	ee17 2a90 	vmov	r2, s15
 8012082:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012086:	eea7 7ae6 	vfms.f32	s14, s15, s13
 801208a:	eddf 6a29 	vldr	s13, [pc, #164]	; 8012130 <__ieee754_expf+0x190>
 801208e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012092:	e7be      	b.n	8012012 <__ieee754_expf+0x72>
 8012094:	f1b1 5f50 	cmp.w	r1, #872415232	; 0x34000000
 8012098:	d20b      	bcs.n	80120b2 <__ieee754_expf+0x112>
 801209a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8012134 <__ieee754_expf+0x194>
 801209e:	ee70 6a26 	vadd.f32	s13, s0, s13
 80120a2:	eef4 6ae5 	vcmpe.f32	s13, s11
 80120a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120aa:	dd02      	ble.n	80120b2 <__ieee754_expf+0x112>
 80120ac:	ee30 0a25 	vadd.f32	s0, s0, s11
 80120b0:	4770      	bx	lr
 80120b2:	2200      	movs	r2, #0
 80120b4:	e7af      	b.n	8012016 <__ieee754_expf+0x76>
 80120b6:	ee76 6a66 	vsub.f32	s13, s12, s13
 80120ba:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 80120be:	ee85 0a26 	vdiv.f32	s0, s10, s13
 80120c2:	bfb8      	it	lt
 80120c4:	3264      	addlt	r2, #100	; 0x64
 80120c6:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80120ca:	ee37 0ac7 	vsub.f32	s0, s15, s14
 80120ce:	ee75 7ac0 	vsub.f32	s15, s11, s0
 80120d2:	ee17 3a90 	vmov	r3, s15
 80120d6:	bfab      	itete	ge
 80120d8:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 80120dc:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 80120e0:	ee00 3a10 	vmovge	s0, r3
 80120e4:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 8012138 <__ieee754_expf+0x198>
 80120e8:	bfbc      	itt	lt
 80120ea:	ee00 3a10 	vmovlt	s0, r3
 80120ee:	ee20 0a27 	vmullt.f32	s0, s0, s15
 80120f2:	4770      	bx	lr
 80120f4:	00000000 	.word	0x00000000
 80120f8:	42b17217 	.word	0x42b17217
 80120fc:	42cff1b5 	.word	0x42cff1b5
 8012100:	3eb17218 	.word	0x3eb17218
 8012104:	3f851591 	.word	0x3f851591
 8012108:	0801507c 	.word	0x0801507c
 801210c:	08015084 	.word	0x08015084
 8012110:	3331bb4c 	.word	0x3331bb4c
 8012114:	b5ddea0e 	.word	0xb5ddea0e
 8012118:	388ab355 	.word	0x388ab355
 801211c:	bb360b61 	.word	0xbb360b61
 8012120:	3e2aaaab 	.word	0x3e2aaaab
 8012124:	08015074 	.word	0x08015074
 8012128:	3fb8aa3b 	.word	0x3fb8aa3b
 801212c:	3f317180 	.word	0x3f317180
 8012130:	3717f7d1 	.word	0x3717f7d1
 8012134:	7149f2ca 	.word	0x7149f2ca
 8012138:	0d800000 	.word	0x0d800000

0801213c <with_errnof>:
 801213c:	b513      	push	{r0, r1, r4, lr}
 801213e:	4604      	mov	r4, r0
 8012140:	ed8d 0a01 	vstr	s0, [sp, #4]
 8012144:	f000 f82a 	bl	801219c <__errno>
 8012148:	ed9d 0a01 	vldr	s0, [sp, #4]
 801214c:	6004      	str	r4, [r0, #0]
 801214e:	b002      	add	sp, #8
 8012150:	bd10      	pop	{r4, pc}

08012152 <xflowf>:
 8012152:	b130      	cbz	r0, 8012162 <xflowf+0x10>
 8012154:	eef1 7a40 	vneg.f32	s15, s0
 8012158:	ee27 0a80 	vmul.f32	s0, s15, s0
 801215c:	2022      	movs	r0, #34	; 0x22
 801215e:	f7ff bfed 	b.w	801213c <with_errnof>
 8012162:	eef0 7a40 	vmov.f32	s15, s0
 8012166:	e7f7      	b.n	8012158 <xflowf+0x6>

08012168 <__math_uflowf>:
 8012168:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8012170 <__math_uflowf+0x8>
 801216c:	f7ff bff1 	b.w	8012152 <xflowf>
 8012170:	10000000 	.word	0x10000000

08012174 <__math_oflowf>:
 8012174:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801217c <__math_oflowf+0x8>
 8012178:	f7ff bfeb 	b.w	8012152 <xflowf>
 801217c:	70000000 	.word	0x70000000

08012180 <finitef>:
 8012180:	b082      	sub	sp, #8
 8012182:	ed8d 0a01 	vstr	s0, [sp, #4]
 8012186:	9801      	ldr	r0, [sp, #4]
 8012188:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801218c:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8012190:	bfac      	ite	ge
 8012192:	2000      	movge	r0, #0
 8012194:	2001      	movlt	r0, #1
 8012196:	b002      	add	sp, #8
 8012198:	4770      	bx	lr
	...

0801219c <__errno>:
 801219c:	4b01      	ldr	r3, [pc, #4]	; (80121a4 <__errno+0x8>)
 801219e:	6818      	ldr	r0, [r3, #0]
 80121a0:	4770      	bx	lr
 80121a2:	bf00      	nop
 80121a4:	20000318 	.word	0x20000318

080121a8 <__libc_init_array>:
 80121a8:	b570      	push	{r4, r5, r6, lr}
 80121aa:	4d0d      	ldr	r5, [pc, #52]	; (80121e0 <__libc_init_array+0x38>)
 80121ac:	4c0d      	ldr	r4, [pc, #52]	; (80121e4 <__libc_init_array+0x3c>)
 80121ae:	1b64      	subs	r4, r4, r5
 80121b0:	10a4      	asrs	r4, r4, #2
 80121b2:	2600      	movs	r6, #0
 80121b4:	42a6      	cmp	r6, r4
 80121b6:	d109      	bne.n	80121cc <__libc_init_array+0x24>
 80121b8:	4d0b      	ldr	r5, [pc, #44]	; (80121e8 <__libc_init_array+0x40>)
 80121ba:	4c0c      	ldr	r4, [pc, #48]	; (80121ec <__libc_init_array+0x44>)
 80121bc:	f002 fd52 	bl	8014c64 <_init>
 80121c0:	1b64      	subs	r4, r4, r5
 80121c2:	10a4      	asrs	r4, r4, #2
 80121c4:	2600      	movs	r6, #0
 80121c6:	42a6      	cmp	r6, r4
 80121c8:	d105      	bne.n	80121d6 <__libc_init_array+0x2e>
 80121ca:	bd70      	pop	{r4, r5, r6, pc}
 80121cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80121d0:	4798      	blx	r3
 80121d2:	3601      	adds	r6, #1
 80121d4:	e7ee      	b.n	80121b4 <__libc_init_array+0xc>
 80121d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80121da:	4798      	blx	r3
 80121dc:	3601      	adds	r6, #1
 80121de:	e7f2      	b.n	80121c6 <__libc_init_array+0x1e>
 80121e0:	08015464 	.word	0x08015464
 80121e4:	08015464 	.word	0x08015464
 80121e8:	08015464 	.word	0x08015464
 80121ec:	08015474 	.word	0x08015474

080121f0 <memcpy>:
 80121f0:	440a      	add	r2, r1
 80121f2:	4291      	cmp	r1, r2
 80121f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80121f8:	d100      	bne.n	80121fc <memcpy+0xc>
 80121fa:	4770      	bx	lr
 80121fc:	b510      	push	{r4, lr}
 80121fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012202:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012206:	4291      	cmp	r1, r2
 8012208:	d1f9      	bne.n	80121fe <memcpy+0xe>
 801220a:	bd10      	pop	{r4, pc}

0801220c <memmove>:
 801220c:	4288      	cmp	r0, r1
 801220e:	b510      	push	{r4, lr}
 8012210:	eb01 0402 	add.w	r4, r1, r2
 8012214:	d902      	bls.n	801221c <memmove+0x10>
 8012216:	4284      	cmp	r4, r0
 8012218:	4623      	mov	r3, r4
 801221a:	d807      	bhi.n	801222c <memmove+0x20>
 801221c:	1e43      	subs	r3, r0, #1
 801221e:	42a1      	cmp	r1, r4
 8012220:	d008      	beq.n	8012234 <memmove+0x28>
 8012222:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012226:	f803 2f01 	strb.w	r2, [r3, #1]!
 801222a:	e7f8      	b.n	801221e <memmove+0x12>
 801222c:	4402      	add	r2, r0
 801222e:	4601      	mov	r1, r0
 8012230:	428a      	cmp	r2, r1
 8012232:	d100      	bne.n	8012236 <memmove+0x2a>
 8012234:	bd10      	pop	{r4, pc}
 8012236:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801223a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801223e:	e7f7      	b.n	8012230 <memmove+0x24>

08012240 <memset>:
 8012240:	4402      	add	r2, r0
 8012242:	4603      	mov	r3, r0
 8012244:	4293      	cmp	r3, r2
 8012246:	d100      	bne.n	801224a <memset+0xa>
 8012248:	4770      	bx	lr
 801224a:	f803 1b01 	strb.w	r1, [r3], #1
 801224e:	e7f9      	b.n	8012244 <memset+0x4>

08012250 <__cvt>:
 8012250:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012254:	ec55 4b10 	vmov	r4, r5, d0
 8012258:	2d00      	cmp	r5, #0
 801225a:	460e      	mov	r6, r1
 801225c:	4619      	mov	r1, r3
 801225e:	462b      	mov	r3, r5
 8012260:	bfbb      	ittet	lt
 8012262:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8012266:	461d      	movlt	r5, r3
 8012268:	2300      	movge	r3, #0
 801226a:	232d      	movlt	r3, #45	; 0x2d
 801226c:	700b      	strb	r3, [r1, #0]
 801226e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012270:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8012274:	4691      	mov	r9, r2
 8012276:	f023 0820 	bic.w	r8, r3, #32
 801227a:	bfbc      	itt	lt
 801227c:	4622      	movlt	r2, r4
 801227e:	4614      	movlt	r4, r2
 8012280:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8012284:	d005      	beq.n	8012292 <__cvt+0x42>
 8012286:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801228a:	d100      	bne.n	801228e <__cvt+0x3e>
 801228c:	3601      	adds	r6, #1
 801228e:	2102      	movs	r1, #2
 8012290:	e000      	b.n	8012294 <__cvt+0x44>
 8012292:	2103      	movs	r1, #3
 8012294:	ab03      	add	r3, sp, #12
 8012296:	9301      	str	r3, [sp, #4]
 8012298:	ab02      	add	r3, sp, #8
 801229a:	9300      	str	r3, [sp, #0]
 801229c:	ec45 4b10 	vmov	d0, r4, r5
 80122a0:	4653      	mov	r3, sl
 80122a2:	4632      	mov	r2, r6
 80122a4:	f000 fccc 	bl	8012c40 <_dtoa_r>
 80122a8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80122ac:	4607      	mov	r7, r0
 80122ae:	d102      	bne.n	80122b6 <__cvt+0x66>
 80122b0:	f019 0f01 	tst.w	r9, #1
 80122b4:	d022      	beq.n	80122fc <__cvt+0xac>
 80122b6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80122ba:	eb07 0906 	add.w	r9, r7, r6
 80122be:	d110      	bne.n	80122e2 <__cvt+0x92>
 80122c0:	783b      	ldrb	r3, [r7, #0]
 80122c2:	2b30      	cmp	r3, #48	; 0x30
 80122c4:	d10a      	bne.n	80122dc <__cvt+0x8c>
 80122c6:	2200      	movs	r2, #0
 80122c8:	2300      	movs	r3, #0
 80122ca:	4620      	mov	r0, r4
 80122cc:	4629      	mov	r1, r5
 80122ce:	f7ee fc13 	bl	8000af8 <__aeabi_dcmpeq>
 80122d2:	b918      	cbnz	r0, 80122dc <__cvt+0x8c>
 80122d4:	f1c6 0601 	rsb	r6, r6, #1
 80122d8:	f8ca 6000 	str.w	r6, [sl]
 80122dc:	f8da 3000 	ldr.w	r3, [sl]
 80122e0:	4499      	add	r9, r3
 80122e2:	2200      	movs	r2, #0
 80122e4:	2300      	movs	r3, #0
 80122e6:	4620      	mov	r0, r4
 80122e8:	4629      	mov	r1, r5
 80122ea:	f7ee fc05 	bl	8000af8 <__aeabi_dcmpeq>
 80122ee:	b108      	cbz	r0, 80122f4 <__cvt+0xa4>
 80122f0:	f8cd 900c 	str.w	r9, [sp, #12]
 80122f4:	2230      	movs	r2, #48	; 0x30
 80122f6:	9b03      	ldr	r3, [sp, #12]
 80122f8:	454b      	cmp	r3, r9
 80122fa:	d307      	bcc.n	801230c <__cvt+0xbc>
 80122fc:	9b03      	ldr	r3, [sp, #12]
 80122fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012300:	1bdb      	subs	r3, r3, r7
 8012302:	4638      	mov	r0, r7
 8012304:	6013      	str	r3, [r2, #0]
 8012306:	b004      	add	sp, #16
 8012308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801230c:	1c59      	adds	r1, r3, #1
 801230e:	9103      	str	r1, [sp, #12]
 8012310:	701a      	strb	r2, [r3, #0]
 8012312:	e7f0      	b.n	80122f6 <__cvt+0xa6>

08012314 <__exponent>:
 8012314:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012316:	4603      	mov	r3, r0
 8012318:	2900      	cmp	r1, #0
 801231a:	bfb8      	it	lt
 801231c:	4249      	neglt	r1, r1
 801231e:	f803 2b02 	strb.w	r2, [r3], #2
 8012322:	bfb4      	ite	lt
 8012324:	222d      	movlt	r2, #45	; 0x2d
 8012326:	222b      	movge	r2, #43	; 0x2b
 8012328:	2909      	cmp	r1, #9
 801232a:	7042      	strb	r2, [r0, #1]
 801232c:	dd2a      	ble.n	8012384 <__exponent+0x70>
 801232e:	f10d 0407 	add.w	r4, sp, #7
 8012332:	46a4      	mov	ip, r4
 8012334:	270a      	movs	r7, #10
 8012336:	46a6      	mov	lr, r4
 8012338:	460a      	mov	r2, r1
 801233a:	fb91 f6f7 	sdiv	r6, r1, r7
 801233e:	fb07 1516 	mls	r5, r7, r6, r1
 8012342:	3530      	adds	r5, #48	; 0x30
 8012344:	2a63      	cmp	r2, #99	; 0x63
 8012346:	f104 34ff 	add.w	r4, r4, #4294967295
 801234a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801234e:	4631      	mov	r1, r6
 8012350:	dcf1      	bgt.n	8012336 <__exponent+0x22>
 8012352:	3130      	adds	r1, #48	; 0x30
 8012354:	f1ae 0502 	sub.w	r5, lr, #2
 8012358:	f804 1c01 	strb.w	r1, [r4, #-1]
 801235c:	1c44      	adds	r4, r0, #1
 801235e:	4629      	mov	r1, r5
 8012360:	4561      	cmp	r1, ip
 8012362:	d30a      	bcc.n	801237a <__exponent+0x66>
 8012364:	f10d 0209 	add.w	r2, sp, #9
 8012368:	eba2 020e 	sub.w	r2, r2, lr
 801236c:	4565      	cmp	r5, ip
 801236e:	bf88      	it	hi
 8012370:	2200      	movhi	r2, #0
 8012372:	4413      	add	r3, r2
 8012374:	1a18      	subs	r0, r3, r0
 8012376:	b003      	add	sp, #12
 8012378:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801237a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801237e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8012382:	e7ed      	b.n	8012360 <__exponent+0x4c>
 8012384:	2330      	movs	r3, #48	; 0x30
 8012386:	3130      	adds	r1, #48	; 0x30
 8012388:	7083      	strb	r3, [r0, #2]
 801238a:	70c1      	strb	r1, [r0, #3]
 801238c:	1d03      	adds	r3, r0, #4
 801238e:	e7f1      	b.n	8012374 <__exponent+0x60>

08012390 <_printf_float>:
 8012390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012394:	ed2d 8b02 	vpush	{d8}
 8012398:	b08d      	sub	sp, #52	; 0x34
 801239a:	460c      	mov	r4, r1
 801239c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80123a0:	4616      	mov	r6, r2
 80123a2:	461f      	mov	r7, r3
 80123a4:	4605      	mov	r5, r0
 80123a6:	f001 fa39 	bl	801381c <_localeconv_r>
 80123aa:	f8d0 a000 	ldr.w	sl, [r0]
 80123ae:	4650      	mov	r0, sl
 80123b0:	f7ed ff26 	bl	8000200 <strlen>
 80123b4:	2300      	movs	r3, #0
 80123b6:	930a      	str	r3, [sp, #40]	; 0x28
 80123b8:	6823      	ldr	r3, [r4, #0]
 80123ba:	9305      	str	r3, [sp, #20]
 80123bc:	f8d8 3000 	ldr.w	r3, [r8]
 80123c0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80123c4:	3307      	adds	r3, #7
 80123c6:	f023 0307 	bic.w	r3, r3, #7
 80123ca:	f103 0208 	add.w	r2, r3, #8
 80123ce:	f8c8 2000 	str.w	r2, [r8]
 80123d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123d6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80123da:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80123de:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80123e2:	9307      	str	r3, [sp, #28]
 80123e4:	f8cd 8018 	str.w	r8, [sp, #24]
 80123e8:	ee08 0a10 	vmov	s16, r0
 80123ec:	4b9f      	ldr	r3, [pc, #636]	; (801266c <_printf_float+0x2dc>)
 80123ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80123f2:	f04f 32ff 	mov.w	r2, #4294967295
 80123f6:	f7ee fbb1 	bl	8000b5c <__aeabi_dcmpun>
 80123fa:	bb88      	cbnz	r0, 8012460 <_printf_float+0xd0>
 80123fc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012400:	4b9a      	ldr	r3, [pc, #616]	; (801266c <_printf_float+0x2dc>)
 8012402:	f04f 32ff 	mov.w	r2, #4294967295
 8012406:	f7ee fb8b 	bl	8000b20 <__aeabi_dcmple>
 801240a:	bb48      	cbnz	r0, 8012460 <_printf_float+0xd0>
 801240c:	2200      	movs	r2, #0
 801240e:	2300      	movs	r3, #0
 8012410:	4640      	mov	r0, r8
 8012412:	4649      	mov	r1, r9
 8012414:	f7ee fb7a 	bl	8000b0c <__aeabi_dcmplt>
 8012418:	b110      	cbz	r0, 8012420 <_printf_float+0x90>
 801241a:	232d      	movs	r3, #45	; 0x2d
 801241c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012420:	4b93      	ldr	r3, [pc, #588]	; (8012670 <_printf_float+0x2e0>)
 8012422:	4894      	ldr	r0, [pc, #592]	; (8012674 <_printf_float+0x2e4>)
 8012424:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8012428:	bf94      	ite	ls
 801242a:	4698      	movls	r8, r3
 801242c:	4680      	movhi	r8, r0
 801242e:	2303      	movs	r3, #3
 8012430:	6123      	str	r3, [r4, #16]
 8012432:	9b05      	ldr	r3, [sp, #20]
 8012434:	f023 0204 	bic.w	r2, r3, #4
 8012438:	6022      	str	r2, [r4, #0]
 801243a:	f04f 0900 	mov.w	r9, #0
 801243e:	9700      	str	r7, [sp, #0]
 8012440:	4633      	mov	r3, r6
 8012442:	aa0b      	add	r2, sp, #44	; 0x2c
 8012444:	4621      	mov	r1, r4
 8012446:	4628      	mov	r0, r5
 8012448:	f000 f9d8 	bl	80127fc <_printf_common>
 801244c:	3001      	adds	r0, #1
 801244e:	f040 8090 	bne.w	8012572 <_printf_float+0x1e2>
 8012452:	f04f 30ff 	mov.w	r0, #4294967295
 8012456:	b00d      	add	sp, #52	; 0x34
 8012458:	ecbd 8b02 	vpop	{d8}
 801245c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012460:	4642      	mov	r2, r8
 8012462:	464b      	mov	r3, r9
 8012464:	4640      	mov	r0, r8
 8012466:	4649      	mov	r1, r9
 8012468:	f7ee fb78 	bl	8000b5c <__aeabi_dcmpun>
 801246c:	b140      	cbz	r0, 8012480 <_printf_float+0xf0>
 801246e:	464b      	mov	r3, r9
 8012470:	2b00      	cmp	r3, #0
 8012472:	bfbc      	itt	lt
 8012474:	232d      	movlt	r3, #45	; 0x2d
 8012476:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801247a:	487f      	ldr	r0, [pc, #508]	; (8012678 <_printf_float+0x2e8>)
 801247c:	4b7f      	ldr	r3, [pc, #508]	; (801267c <_printf_float+0x2ec>)
 801247e:	e7d1      	b.n	8012424 <_printf_float+0x94>
 8012480:	6863      	ldr	r3, [r4, #4]
 8012482:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8012486:	9206      	str	r2, [sp, #24]
 8012488:	1c5a      	adds	r2, r3, #1
 801248a:	d13f      	bne.n	801250c <_printf_float+0x17c>
 801248c:	2306      	movs	r3, #6
 801248e:	6063      	str	r3, [r4, #4]
 8012490:	9b05      	ldr	r3, [sp, #20]
 8012492:	6861      	ldr	r1, [r4, #4]
 8012494:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8012498:	2300      	movs	r3, #0
 801249a:	9303      	str	r3, [sp, #12]
 801249c:	ab0a      	add	r3, sp, #40	; 0x28
 801249e:	e9cd b301 	strd	fp, r3, [sp, #4]
 80124a2:	ab09      	add	r3, sp, #36	; 0x24
 80124a4:	ec49 8b10 	vmov	d0, r8, r9
 80124a8:	9300      	str	r3, [sp, #0]
 80124aa:	6022      	str	r2, [r4, #0]
 80124ac:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80124b0:	4628      	mov	r0, r5
 80124b2:	f7ff fecd 	bl	8012250 <__cvt>
 80124b6:	9b06      	ldr	r3, [sp, #24]
 80124b8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80124ba:	2b47      	cmp	r3, #71	; 0x47
 80124bc:	4680      	mov	r8, r0
 80124be:	d108      	bne.n	80124d2 <_printf_float+0x142>
 80124c0:	1cc8      	adds	r0, r1, #3
 80124c2:	db02      	blt.n	80124ca <_printf_float+0x13a>
 80124c4:	6863      	ldr	r3, [r4, #4]
 80124c6:	4299      	cmp	r1, r3
 80124c8:	dd41      	ble.n	801254e <_printf_float+0x1be>
 80124ca:	f1ab 0b02 	sub.w	fp, fp, #2
 80124ce:	fa5f fb8b 	uxtb.w	fp, fp
 80124d2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80124d6:	d820      	bhi.n	801251a <_printf_float+0x18a>
 80124d8:	3901      	subs	r1, #1
 80124da:	465a      	mov	r2, fp
 80124dc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80124e0:	9109      	str	r1, [sp, #36]	; 0x24
 80124e2:	f7ff ff17 	bl	8012314 <__exponent>
 80124e6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80124e8:	1813      	adds	r3, r2, r0
 80124ea:	2a01      	cmp	r2, #1
 80124ec:	4681      	mov	r9, r0
 80124ee:	6123      	str	r3, [r4, #16]
 80124f0:	dc02      	bgt.n	80124f8 <_printf_float+0x168>
 80124f2:	6822      	ldr	r2, [r4, #0]
 80124f4:	07d2      	lsls	r2, r2, #31
 80124f6:	d501      	bpl.n	80124fc <_printf_float+0x16c>
 80124f8:	3301      	adds	r3, #1
 80124fa:	6123      	str	r3, [r4, #16]
 80124fc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8012500:	2b00      	cmp	r3, #0
 8012502:	d09c      	beq.n	801243e <_printf_float+0xae>
 8012504:	232d      	movs	r3, #45	; 0x2d
 8012506:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801250a:	e798      	b.n	801243e <_printf_float+0xae>
 801250c:	9a06      	ldr	r2, [sp, #24]
 801250e:	2a47      	cmp	r2, #71	; 0x47
 8012510:	d1be      	bne.n	8012490 <_printf_float+0x100>
 8012512:	2b00      	cmp	r3, #0
 8012514:	d1bc      	bne.n	8012490 <_printf_float+0x100>
 8012516:	2301      	movs	r3, #1
 8012518:	e7b9      	b.n	801248e <_printf_float+0xfe>
 801251a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801251e:	d118      	bne.n	8012552 <_printf_float+0x1c2>
 8012520:	2900      	cmp	r1, #0
 8012522:	6863      	ldr	r3, [r4, #4]
 8012524:	dd0b      	ble.n	801253e <_printf_float+0x1ae>
 8012526:	6121      	str	r1, [r4, #16]
 8012528:	b913      	cbnz	r3, 8012530 <_printf_float+0x1a0>
 801252a:	6822      	ldr	r2, [r4, #0]
 801252c:	07d0      	lsls	r0, r2, #31
 801252e:	d502      	bpl.n	8012536 <_printf_float+0x1a6>
 8012530:	3301      	adds	r3, #1
 8012532:	440b      	add	r3, r1
 8012534:	6123      	str	r3, [r4, #16]
 8012536:	65a1      	str	r1, [r4, #88]	; 0x58
 8012538:	f04f 0900 	mov.w	r9, #0
 801253c:	e7de      	b.n	80124fc <_printf_float+0x16c>
 801253e:	b913      	cbnz	r3, 8012546 <_printf_float+0x1b6>
 8012540:	6822      	ldr	r2, [r4, #0]
 8012542:	07d2      	lsls	r2, r2, #31
 8012544:	d501      	bpl.n	801254a <_printf_float+0x1ba>
 8012546:	3302      	adds	r3, #2
 8012548:	e7f4      	b.n	8012534 <_printf_float+0x1a4>
 801254a:	2301      	movs	r3, #1
 801254c:	e7f2      	b.n	8012534 <_printf_float+0x1a4>
 801254e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8012552:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012554:	4299      	cmp	r1, r3
 8012556:	db05      	blt.n	8012564 <_printf_float+0x1d4>
 8012558:	6823      	ldr	r3, [r4, #0]
 801255a:	6121      	str	r1, [r4, #16]
 801255c:	07d8      	lsls	r0, r3, #31
 801255e:	d5ea      	bpl.n	8012536 <_printf_float+0x1a6>
 8012560:	1c4b      	adds	r3, r1, #1
 8012562:	e7e7      	b.n	8012534 <_printf_float+0x1a4>
 8012564:	2900      	cmp	r1, #0
 8012566:	bfd4      	ite	le
 8012568:	f1c1 0202 	rsble	r2, r1, #2
 801256c:	2201      	movgt	r2, #1
 801256e:	4413      	add	r3, r2
 8012570:	e7e0      	b.n	8012534 <_printf_float+0x1a4>
 8012572:	6823      	ldr	r3, [r4, #0]
 8012574:	055a      	lsls	r2, r3, #21
 8012576:	d407      	bmi.n	8012588 <_printf_float+0x1f8>
 8012578:	6923      	ldr	r3, [r4, #16]
 801257a:	4642      	mov	r2, r8
 801257c:	4631      	mov	r1, r6
 801257e:	4628      	mov	r0, r5
 8012580:	47b8      	blx	r7
 8012582:	3001      	adds	r0, #1
 8012584:	d12c      	bne.n	80125e0 <_printf_float+0x250>
 8012586:	e764      	b.n	8012452 <_printf_float+0xc2>
 8012588:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801258c:	f240 80e0 	bls.w	8012750 <_printf_float+0x3c0>
 8012590:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012594:	2200      	movs	r2, #0
 8012596:	2300      	movs	r3, #0
 8012598:	f7ee faae 	bl	8000af8 <__aeabi_dcmpeq>
 801259c:	2800      	cmp	r0, #0
 801259e:	d034      	beq.n	801260a <_printf_float+0x27a>
 80125a0:	4a37      	ldr	r2, [pc, #220]	; (8012680 <_printf_float+0x2f0>)
 80125a2:	2301      	movs	r3, #1
 80125a4:	4631      	mov	r1, r6
 80125a6:	4628      	mov	r0, r5
 80125a8:	47b8      	blx	r7
 80125aa:	3001      	adds	r0, #1
 80125ac:	f43f af51 	beq.w	8012452 <_printf_float+0xc2>
 80125b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80125b4:	429a      	cmp	r2, r3
 80125b6:	db02      	blt.n	80125be <_printf_float+0x22e>
 80125b8:	6823      	ldr	r3, [r4, #0]
 80125ba:	07d8      	lsls	r0, r3, #31
 80125bc:	d510      	bpl.n	80125e0 <_printf_float+0x250>
 80125be:	ee18 3a10 	vmov	r3, s16
 80125c2:	4652      	mov	r2, sl
 80125c4:	4631      	mov	r1, r6
 80125c6:	4628      	mov	r0, r5
 80125c8:	47b8      	blx	r7
 80125ca:	3001      	adds	r0, #1
 80125cc:	f43f af41 	beq.w	8012452 <_printf_float+0xc2>
 80125d0:	f04f 0800 	mov.w	r8, #0
 80125d4:	f104 091a 	add.w	r9, r4, #26
 80125d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80125da:	3b01      	subs	r3, #1
 80125dc:	4543      	cmp	r3, r8
 80125de:	dc09      	bgt.n	80125f4 <_printf_float+0x264>
 80125e0:	6823      	ldr	r3, [r4, #0]
 80125e2:	079b      	lsls	r3, r3, #30
 80125e4:	f100 8105 	bmi.w	80127f2 <_printf_float+0x462>
 80125e8:	68e0      	ldr	r0, [r4, #12]
 80125ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80125ec:	4298      	cmp	r0, r3
 80125ee:	bfb8      	it	lt
 80125f0:	4618      	movlt	r0, r3
 80125f2:	e730      	b.n	8012456 <_printf_float+0xc6>
 80125f4:	2301      	movs	r3, #1
 80125f6:	464a      	mov	r2, r9
 80125f8:	4631      	mov	r1, r6
 80125fa:	4628      	mov	r0, r5
 80125fc:	47b8      	blx	r7
 80125fe:	3001      	adds	r0, #1
 8012600:	f43f af27 	beq.w	8012452 <_printf_float+0xc2>
 8012604:	f108 0801 	add.w	r8, r8, #1
 8012608:	e7e6      	b.n	80125d8 <_printf_float+0x248>
 801260a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801260c:	2b00      	cmp	r3, #0
 801260e:	dc39      	bgt.n	8012684 <_printf_float+0x2f4>
 8012610:	4a1b      	ldr	r2, [pc, #108]	; (8012680 <_printf_float+0x2f0>)
 8012612:	2301      	movs	r3, #1
 8012614:	4631      	mov	r1, r6
 8012616:	4628      	mov	r0, r5
 8012618:	47b8      	blx	r7
 801261a:	3001      	adds	r0, #1
 801261c:	f43f af19 	beq.w	8012452 <_printf_float+0xc2>
 8012620:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012624:	4313      	orrs	r3, r2
 8012626:	d102      	bne.n	801262e <_printf_float+0x29e>
 8012628:	6823      	ldr	r3, [r4, #0]
 801262a:	07d9      	lsls	r1, r3, #31
 801262c:	d5d8      	bpl.n	80125e0 <_printf_float+0x250>
 801262e:	ee18 3a10 	vmov	r3, s16
 8012632:	4652      	mov	r2, sl
 8012634:	4631      	mov	r1, r6
 8012636:	4628      	mov	r0, r5
 8012638:	47b8      	blx	r7
 801263a:	3001      	adds	r0, #1
 801263c:	f43f af09 	beq.w	8012452 <_printf_float+0xc2>
 8012640:	f04f 0900 	mov.w	r9, #0
 8012644:	f104 0a1a 	add.w	sl, r4, #26
 8012648:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801264a:	425b      	negs	r3, r3
 801264c:	454b      	cmp	r3, r9
 801264e:	dc01      	bgt.n	8012654 <_printf_float+0x2c4>
 8012650:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012652:	e792      	b.n	801257a <_printf_float+0x1ea>
 8012654:	2301      	movs	r3, #1
 8012656:	4652      	mov	r2, sl
 8012658:	4631      	mov	r1, r6
 801265a:	4628      	mov	r0, r5
 801265c:	47b8      	blx	r7
 801265e:	3001      	adds	r0, #1
 8012660:	f43f aef7 	beq.w	8012452 <_printf_float+0xc2>
 8012664:	f109 0901 	add.w	r9, r9, #1
 8012668:	e7ee      	b.n	8012648 <_printf_float+0x2b8>
 801266a:	bf00      	nop
 801266c:	7fefffff 	.word	0x7fefffff
 8012670:	08015090 	.word	0x08015090
 8012674:	08015094 	.word	0x08015094
 8012678:	0801509c 	.word	0x0801509c
 801267c:	08015098 	.word	0x08015098
 8012680:	080150a0 	.word	0x080150a0
 8012684:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012686:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012688:	429a      	cmp	r2, r3
 801268a:	bfa8      	it	ge
 801268c:	461a      	movge	r2, r3
 801268e:	2a00      	cmp	r2, #0
 8012690:	4691      	mov	r9, r2
 8012692:	dc37      	bgt.n	8012704 <_printf_float+0x374>
 8012694:	f04f 0b00 	mov.w	fp, #0
 8012698:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801269c:	f104 021a 	add.w	r2, r4, #26
 80126a0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80126a2:	9305      	str	r3, [sp, #20]
 80126a4:	eba3 0309 	sub.w	r3, r3, r9
 80126a8:	455b      	cmp	r3, fp
 80126aa:	dc33      	bgt.n	8012714 <_printf_float+0x384>
 80126ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80126b0:	429a      	cmp	r2, r3
 80126b2:	db3b      	blt.n	801272c <_printf_float+0x39c>
 80126b4:	6823      	ldr	r3, [r4, #0]
 80126b6:	07da      	lsls	r2, r3, #31
 80126b8:	d438      	bmi.n	801272c <_printf_float+0x39c>
 80126ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80126bc:	9a05      	ldr	r2, [sp, #20]
 80126be:	9909      	ldr	r1, [sp, #36]	; 0x24
 80126c0:	1a9a      	subs	r2, r3, r2
 80126c2:	eba3 0901 	sub.w	r9, r3, r1
 80126c6:	4591      	cmp	r9, r2
 80126c8:	bfa8      	it	ge
 80126ca:	4691      	movge	r9, r2
 80126cc:	f1b9 0f00 	cmp.w	r9, #0
 80126d0:	dc35      	bgt.n	801273e <_printf_float+0x3ae>
 80126d2:	f04f 0800 	mov.w	r8, #0
 80126d6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80126da:	f104 0a1a 	add.w	sl, r4, #26
 80126de:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80126e2:	1a9b      	subs	r3, r3, r2
 80126e4:	eba3 0309 	sub.w	r3, r3, r9
 80126e8:	4543      	cmp	r3, r8
 80126ea:	f77f af79 	ble.w	80125e0 <_printf_float+0x250>
 80126ee:	2301      	movs	r3, #1
 80126f0:	4652      	mov	r2, sl
 80126f2:	4631      	mov	r1, r6
 80126f4:	4628      	mov	r0, r5
 80126f6:	47b8      	blx	r7
 80126f8:	3001      	adds	r0, #1
 80126fa:	f43f aeaa 	beq.w	8012452 <_printf_float+0xc2>
 80126fe:	f108 0801 	add.w	r8, r8, #1
 8012702:	e7ec      	b.n	80126de <_printf_float+0x34e>
 8012704:	4613      	mov	r3, r2
 8012706:	4631      	mov	r1, r6
 8012708:	4642      	mov	r2, r8
 801270a:	4628      	mov	r0, r5
 801270c:	47b8      	blx	r7
 801270e:	3001      	adds	r0, #1
 8012710:	d1c0      	bne.n	8012694 <_printf_float+0x304>
 8012712:	e69e      	b.n	8012452 <_printf_float+0xc2>
 8012714:	2301      	movs	r3, #1
 8012716:	4631      	mov	r1, r6
 8012718:	4628      	mov	r0, r5
 801271a:	9205      	str	r2, [sp, #20]
 801271c:	47b8      	blx	r7
 801271e:	3001      	adds	r0, #1
 8012720:	f43f ae97 	beq.w	8012452 <_printf_float+0xc2>
 8012724:	9a05      	ldr	r2, [sp, #20]
 8012726:	f10b 0b01 	add.w	fp, fp, #1
 801272a:	e7b9      	b.n	80126a0 <_printf_float+0x310>
 801272c:	ee18 3a10 	vmov	r3, s16
 8012730:	4652      	mov	r2, sl
 8012732:	4631      	mov	r1, r6
 8012734:	4628      	mov	r0, r5
 8012736:	47b8      	blx	r7
 8012738:	3001      	adds	r0, #1
 801273a:	d1be      	bne.n	80126ba <_printf_float+0x32a>
 801273c:	e689      	b.n	8012452 <_printf_float+0xc2>
 801273e:	9a05      	ldr	r2, [sp, #20]
 8012740:	464b      	mov	r3, r9
 8012742:	4442      	add	r2, r8
 8012744:	4631      	mov	r1, r6
 8012746:	4628      	mov	r0, r5
 8012748:	47b8      	blx	r7
 801274a:	3001      	adds	r0, #1
 801274c:	d1c1      	bne.n	80126d2 <_printf_float+0x342>
 801274e:	e680      	b.n	8012452 <_printf_float+0xc2>
 8012750:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012752:	2a01      	cmp	r2, #1
 8012754:	dc01      	bgt.n	801275a <_printf_float+0x3ca>
 8012756:	07db      	lsls	r3, r3, #31
 8012758:	d538      	bpl.n	80127cc <_printf_float+0x43c>
 801275a:	2301      	movs	r3, #1
 801275c:	4642      	mov	r2, r8
 801275e:	4631      	mov	r1, r6
 8012760:	4628      	mov	r0, r5
 8012762:	47b8      	blx	r7
 8012764:	3001      	adds	r0, #1
 8012766:	f43f ae74 	beq.w	8012452 <_printf_float+0xc2>
 801276a:	ee18 3a10 	vmov	r3, s16
 801276e:	4652      	mov	r2, sl
 8012770:	4631      	mov	r1, r6
 8012772:	4628      	mov	r0, r5
 8012774:	47b8      	blx	r7
 8012776:	3001      	adds	r0, #1
 8012778:	f43f ae6b 	beq.w	8012452 <_printf_float+0xc2>
 801277c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012780:	2200      	movs	r2, #0
 8012782:	2300      	movs	r3, #0
 8012784:	f7ee f9b8 	bl	8000af8 <__aeabi_dcmpeq>
 8012788:	b9d8      	cbnz	r0, 80127c2 <_printf_float+0x432>
 801278a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801278c:	f108 0201 	add.w	r2, r8, #1
 8012790:	3b01      	subs	r3, #1
 8012792:	4631      	mov	r1, r6
 8012794:	4628      	mov	r0, r5
 8012796:	47b8      	blx	r7
 8012798:	3001      	adds	r0, #1
 801279a:	d10e      	bne.n	80127ba <_printf_float+0x42a>
 801279c:	e659      	b.n	8012452 <_printf_float+0xc2>
 801279e:	2301      	movs	r3, #1
 80127a0:	4652      	mov	r2, sl
 80127a2:	4631      	mov	r1, r6
 80127a4:	4628      	mov	r0, r5
 80127a6:	47b8      	blx	r7
 80127a8:	3001      	adds	r0, #1
 80127aa:	f43f ae52 	beq.w	8012452 <_printf_float+0xc2>
 80127ae:	f108 0801 	add.w	r8, r8, #1
 80127b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80127b4:	3b01      	subs	r3, #1
 80127b6:	4543      	cmp	r3, r8
 80127b8:	dcf1      	bgt.n	801279e <_printf_float+0x40e>
 80127ba:	464b      	mov	r3, r9
 80127bc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80127c0:	e6dc      	b.n	801257c <_printf_float+0x1ec>
 80127c2:	f04f 0800 	mov.w	r8, #0
 80127c6:	f104 0a1a 	add.w	sl, r4, #26
 80127ca:	e7f2      	b.n	80127b2 <_printf_float+0x422>
 80127cc:	2301      	movs	r3, #1
 80127ce:	4642      	mov	r2, r8
 80127d0:	e7df      	b.n	8012792 <_printf_float+0x402>
 80127d2:	2301      	movs	r3, #1
 80127d4:	464a      	mov	r2, r9
 80127d6:	4631      	mov	r1, r6
 80127d8:	4628      	mov	r0, r5
 80127da:	47b8      	blx	r7
 80127dc:	3001      	adds	r0, #1
 80127de:	f43f ae38 	beq.w	8012452 <_printf_float+0xc2>
 80127e2:	f108 0801 	add.w	r8, r8, #1
 80127e6:	68e3      	ldr	r3, [r4, #12]
 80127e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80127ea:	1a5b      	subs	r3, r3, r1
 80127ec:	4543      	cmp	r3, r8
 80127ee:	dcf0      	bgt.n	80127d2 <_printf_float+0x442>
 80127f0:	e6fa      	b.n	80125e8 <_printf_float+0x258>
 80127f2:	f04f 0800 	mov.w	r8, #0
 80127f6:	f104 0919 	add.w	r9, r4, #25
 80127fa:	e7f4      	b.n	80127e6 <_printf_float+0x456>

080127fc <_printf_common>:
 80127fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012800:	4616      	mov	r6, r2
 8012802:	4699      	mov	r9, r3
 8012804:	688a      	ldr	r2, [r1, #8]
 8012806:	690b      	ldr	r3, [r1, #16]
 8012808:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801280c:	4293      	cmp	r3, r2
 801280e:	bfb8      	it	lt
 8012810:	4613      	movlt	r3, r2
 8012812:	6033      	str	r3, [r6, #0]
 8012814:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012818:	4607      	mov	r7, r0
 801281a:	460c      	mov	r4, r1
 801281c:	b10a      	cbz	r2, 8012822 <_printf_common+0x26>
 801281e:	3301      	adds	r3, #1
 8012820:	6033      	str	r3, [r6, #0]
 8012822:	6823      	ldr	r3, [r4, #0]
 8012824:	0699      	lsls	r1, r3, #26
 8012826:	bf42      	ittt	mi
 8012828:	6833      	ldrmi	r3, [r6, #0]
 801282a:	3302      	addmi	r3, #2
 801282c:	6033      	strmi	r3, [r6, #0]
 801282e:	6825      	ldr	r5, [r4, #0]
 8012830:	f015 0506 	ands.w	r5, r5, #6
 8012834:	d106      	bne.n	8012844 <_printf_common+0x48>
 8012836:	f104 0a19 	add.w	sl, r4, #25
 801283a:	68e3      	ldr	r3, [r4, #12]
 801283c:	6832      	ldr	r2, [r6, #0]
 801283e:	1a9b      	subs	r3, r3, r2
 8012840:	42ab      	cmp	r3, r5
 8012842:	dc26      	bgt.n	8012892 <_printf_common+0x96>
 8012844:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012848:	1e13      	subs	r3, r2, #0
 801284a:	6822      	ldr	r2, [r4, #0]
 801284c:	bf18      	it	ne
 801284e:	2301      	movne	r3, #1
 8012850:	0692      	lsls	r2, r2, #26
 8012852:	d42b      	bmi.n	80128ac <_printf_common+0xb0>
 8012854:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012858:	4649      	mov	r1, r9
 801285a:	4638      	mov	r0, r7
 801285c:	47c0      	blx	r8
 801285e:	3001      	adds	r0, #1
 8012860:	d01e      	beq.n	80128a0 <_printf_common+0xa4>
 8012862:	6823      	ldr	r3, [r4, #0]
 8012864:	68e5      	ldr	r5, [r4, #12]
 8012866:	6832      	ldr	r2, [r6, #0]
 8012868:	f003 0306 	and.w	r3, r3, #6
 801286c:	2b04      	cmp	r3, #4
 801286e:	bf08      	it	eq
 8012870:	1aad      	subeq	r5, r5, r2
 8012872:	68a3      	ldr	r3, [r4, #8]
 8012874:	6922      	ldr	r2, [r4, #16]
 8012876:	bf0c      	ite	eq
 8012878:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801287c:	2500      	movne	r5, #0
 801287e:	4293      	cmp	r3, r2
 8012880:	bfc4      	itt	gt
 8012882:	1a9b      	subgt	r3, r3, r2
 8012884:	18ed      	addgt	r5, r5, r3
 8012886:	2600      	movs	r6, #0
 8012888:	341a      	adds	r4, #26
 801288a:	42b5      	cmp	r5, r6
 801288c:	d11a      	bne.n	80128c4 <_printf_common+0xc8>
 801288e:	2000      	movs	r0, #0
 8012890:	e008      	b.n	80128a4 <_printf_common+0xa8>
 8012892:	2301      	movs	r3, #1
 8012894:	4652      	mov	r2, sl
 8012896:	4649      	mov	r1, r9
 8012898:	4638      	mov	r0, r7
 801289a:	47c0      	blx	r8
 801289c:	3001      	adds	r0, #1
 801289e:	d103      	bne.n	80128a8 <_printf_common+0xac>
 80128a0:	f04f 30ff 	mov.w	r0, #4294967295
 80128a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80128a8:	3501      	adds	r5, #1
 80128aa:	e7c6      	b.n	801283a <_printf_common+0x3e>
 80128ac:	18e1      	adds	r1, r4, r3
 80128ae:	1c5a      	adds	r2, r3, #1
 80128b0:	2030      	movs	r0, #48	; 0x30
 80128b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80128b6:	4422      	add	r2, r4
 80128b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80128bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80128c0:	3302      	adds	r3, #2
 80128c2:	e7c7      	b.n	8012854 <_printf_common+0x58>
 80128c4:	2301      	movs	r3, #1
 80128c6:	4622      	mov	r2, r4
 80128c8:	4649      	mov	r1, r9
 80128ca:	4638      	mov	r0, r7
 80128cc:	47c0      	blx	r8
 80128ce:	3001      	adds	r0, #1
 80128d0:	d0e6      	beq.n	80128a0 <_printf_common+0xa4>
 80128d2:	3601      	adds	r6, #1
 80128d4:	e7d9      	b.n	801288a <_printf_common+0x8e>
	...

080128d8 <_printf_i>:
 80128d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80128dc:	7e0f      	ldrb	r7, [r1, #24]
 80128de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80128e0:	2f78      	cmp	r7, #120	; 0x78
 80128e2:	4691      	mov	r9, r2
 80128e4:	4680      	mov	r8, r0
 80128e6:	460c      	mov	r4, r1
 80128e8:	469a      	mov	sl, r3
 80128ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80128ee:	d807      	bhi.n	8012900 <_printf_i+0x28>
 80128f0:	2f62      	cmp	r7, #98	; 0x62
 80128f2:	d80a      	bhi.n	801290a <_printf_i+0x32>
 80128f4:	2f00      	cmp	r7, #0
 80128f6:	f000 80d8 	beq.w	8012aaa <_printf_i+0x1d2>
 80128fa:	2f58      	cmp	r7, #88	; 0x58
 80128fc:	f000 80a3 	beq.w	8012a46 <_printf_i+0x16e>
 8012900:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012904:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012908:	e03a      	b.n	8012980 <_printf_i+0xa8>
 801290a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801290e:	2b15      	cmp	r3, #21
 8012910:	d8f6      	bhi.n	8012900 <_printf_i+0x28>
 8012912:	a101      	add	r1, pc, #4	; (adr r1, 8012918 <_printf_i+0x40>)
 8012914:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012918:	08012971 	.word	0x08012971
 801291c:	08012985 	.word	0x08012985
 8012920:	08012901 	.word	0x08012901
 8012924:	08012901 	.word	0x08012901
 8012928:	08012901 	.word	0x08012901
 801292c:	08012901 	.word	0x08012901
 8012930:	08012985 	.word	0x08012985
 8012934:	08012901 	.word	0x08012901
 8012938:	08012901 	.word	0x08012901
 801293c:	08012901 	.word	0x08012901
 8012940:	08012901 	.word	0x08012901
 8012944:	08012a91 	.word	0x08012a91
 8012948:	080129b5 	.word	0x080129b5
 801294c:	08012a73 	.word	0x08012a73
 8012950:	08012901 	.word	0x08012901
 8012954:	08012901 	.word	0x08012901
 8012958:	08012ab3 	.word	0x08012ab3
 801295c:	08012901 	.word	0x08012901
 8012960:	080129b5 	.word	0x080129b5
 8012964:	08012901 	.word	0x08012901
 8012968:	08012901 	.word	0x08012901
 801296c:	08012a7b 	.word	0x08012a7b
 8012970:	682b      	ldr	r3, [r5, #0]
 8012972:	1d1a      	adds	r2, r3, #4
 8012974:	681b      	ldr	r3, [r3, #0]
 8012976:	602a      	str	r2, [r5, #0]
 8012978:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801297c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012980:	2301      	movs	r3, #1
 8012982:	e0a3      	b.n	8012acc <_printf_i+0x1f4>
 8012984:	6820      	ldr	r0, [r4, #0]
 8012986:	6829      	ldr	r1, [r5, #0]
 8012988:	0606      	lsls	r6, r0, #24
 801298a:	f101 0304 	add.w	r3, r1, #4
 801298e:	d50a      	bpl.n	80129a6 <_printf_i+0xce>
 8012990:	680e      	ldr	r6, [r1, #0]
 8012992:	602b      	str	r3, [r5, #0]
 8012994:	2e00      	cmp	r6, #0
 8012996:	da03      	bge.n	80129a0 <_printf_i+0xc8>
 8012998:	232d      	movs	r3, #45	; 0x2d
 801299a:	4276      	negs	r6, r6
 801299c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80129a0:	485e      	ldr	r0, [pc, #376]	; (8012b1c <_printf_i+0x244>)
 80129a2:	230a      	movs	r3, #10
 80129a4:	e019      	b.n	80129da <_printf_i+0x102>
 80129a6:	680e      	ldr	r6, [r1, #0]
 80129a8:	602b      	str	r3, [r5, #0]
 80129aa:	f010 0f40 	tst.w	r0, #64	; 0x40
 80129ae:	bf18      	it	ne
 80129b0:	b236      	sxthne	r6, r6
 80129b2:	e7ef      	b.n	8012994 <_printf_i+0xbc>
 80129b4:	682b      	ldr	r3, [r5, #0]
 80129b6:	6820      	ldr	r0, [r4, #0]
 80129b8:	1d19      	adds	r1, r3, #4
 80129ba:	6029      	str	r1, [r5, #0]
 80129bc:	0601      	lsls	r1, r0, #24
 80129be:	d501      	bpl.n	80129c4 <_printf_i+0xec>
 80129c0:	681e      	ldr	r6, [r3, #0]
 80129c2:	e002      	b.n	80129ca <_printf_i+0xf2>
 80129c4:	0646      	lsls	r6, r0, #25
 80129c6:	d5fb      	bpl.n	80129c0 <_printf_i+0xe8>
 80129c8:	881e      	ldrh	r6, [r3, #0]
 80129ca:	4854      	ldr	r0, [pc, #336]	; (8012b1c <_printf_i+0x244>)
 80129cc:	2f6f      	cmp	r7, #111	; 0x6f
 80129ce:	bf0c      	ite	eq
 80129d0:	2308      	moveq	r3, #8
 80129d2:	230a      	movne	r3, #10
 80129d4:	2100      	movs	r1, #0
 80129d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80129da:	6865      	ldr	r5, [r4, #4]
 80129dc:	60a5      	str	r5, [r4, #8]
 80129de:	2d00      	cmp	r5, #0
 80129e0:	bfa2      	ittt	ge
 80129e2:	6821      	ldrge	r1, [r4, #0]
 80129e4:	f021 0104 	bicge.w	r1, r1, #4
 80129e8:	6021      	strge	r1, [r4, #0]
 80129ea:	b90e      	cbnz	r6, 80129f0 <_printf_i+0x118>
 80129ec:	2d00      	cmp	r5, #0
 80129ee:	d04d      	beq.n	8012a8c <_printf_i+0x1b4>
 80129f0:	4615      	mov	r5, r2
 80129f2:	fbb6 f1f3 	udiv	r1, r6, r3
 80129f6:	fb03 6711 	mls	r7, r3, r1, r6
 80129fa:	5dc7      	ldrb	r7, [r0, r7]
 80129fc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8012a00:	4637      	mov	r7, r6
 8012a02:	42bb      	cmp	r3, r7
 8012a04:	460e      	mov	r6, r1
 8012a06:	d9f4      	bls.n	80129f2 <_printf_i+0x11a>
 8012a08:	2b08      	cmp	r3, #8
 8012a0a:	d10b      	bne.n	8012a24 <_printf_i+0x14c>
 8012a0c:	6823      	ldr	r3, [r4, #0]
 8012a0e:	07de      	lsls	r6, r3, #31
 8012a10:	d508      	bpl.n	8012a24 <_printf_i+0x14c>
 8012a12:	6923      	ldr	r3, [r4, #16]
 8012a14:	6861      	ldr	r1, [r4, #4]
 8012a16:	4299      	cmp	r1, r3
 8012a18:	bfde      	ittt	le
 8012a1a:	2330      	movle	r3, #48	; 0x30
 8012a1c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012a20:	f105 35ff 	addle.w	r5, r5, #4294967295
 8012a24:	1b52      	subs	r2, r2, r5
 8012a26:	6122      	str	r2, [r4, #16]
 8012a28:	f8cd a000 	str.w	sl, [sp]
 8012a2c:	464b      	mov	r3, r9
 8012a2e:	aa03      	add	r2, sp, #12
 8012a30:	4621      	mov	r1, r4
 8012a32:	4640      	mov	r0, r8
 8012a34:	f7ff fee2 	bl	80127fc <_printf_common>
 8012a38:	3001      	adds	r0, #1
 8012a3a:	d14c      	bne.n	8012ad6 <_printf_i+0x1fe>
 8012a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8012a40:	b004      	add	sp, #16
 8012a42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012a46:	4835      	ldr	r0, [pc, #212]	; (8012b1c <_printf_i+0x244>)
 8012a48:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8012a4c:	6829      	ldr	r1, [r5, #0]
 8012a4e:	6823      	ldr	r3, [r4, #0]
 8012a50:	f851 6b04 	ldr.w	r6, [r1], #4
 8012a54:	6029      	str	r1, [r5, #0]
 8012a56:	061d      	lsls	r5, r3, #24
 8012a58:	d514      	bpl.n	8012a84 <_printf_i+0x1ac>
 8012a5a:	07df      	lsls	r7, r3, #31
 8012a5c:	bf44      	itt	mi
 8012a5e:	f043 0320 	orrmi.w	r3, r3, #32
 8012a62:	6023      	strmi	r3, [r4, #0]
 8012a64:	b91e      	cbnz	r6, 8012a6e <_printf_i+0x196>
 8012a66:	6823      	ldr	r3, [r4, #0]
 8012a68:	f023 0320 	bic.w	r3, r3, #32
 8012a6c:	6023      	str	r3, [r4, #0]
 8012a6e:	2310      	movs	r3, #16
 8012a70:	e7b0      	b.n	80129d4 <_printf_i+0xfc>
 8012a72:	6823      	ldr	r3, [r4, #0]
 8012a74:	f043 0320 	orr.w	r3, r3, #32
 8012a78:	6023      	str	r3, [r4, #0]
 8012a7a:	2378      	movs	r3, #120	; 0x78
 8012a7c:	4828      	ldr	r0, [pc, #160]	; (8012b20 <_printf_i+0x248>)
 8012a7e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012a82:	e7e3      	b.n	8012a4c <_printf_i+0x174>
 8012a84:	0659      	lsls	r1, r3, #25
 8012a86:	bf48      	it	mi
 8012a88:	b2b6      	uxthmi	r6, r6
 8012a8a:	e7e6      	b.n	8012a5a <_printf_i+0x182>
 8012a8c:	4615      	mov	r5, r2
 8012a8e:	e7bb      	b.n	8012a08 <_printf_i+0x130>
 8012a90:	682b      	ldr	r3, [r5, #0]
 8012a92:	6826      	ldr	r6, [r4, #0]
 8012a94:	6961      	ldr	r1, [r4, #20]
 8012a96:	1d18      	adds	r0, r3, #4
 8012a98:	6028      	str	r0, [r5, #0]
 8012a9a:	0635      	lsls	r5, r6, #24
 8012a9c:	681b      	ldr	r3, [r3, #0]
 8012a9e:	d501      	bpl.n	8012aa4 <_printf_i+0x1cc>
 8012aa0:	6019      	str	r1, [r3, #0]
 8012aa2:	e002      	b.n	8012aaa <_printf_i+0x1d2>
 8012aa4:	0670      	lsls	r0, r6, #25
 8012aa6:	d5fb      	bpl.n	8012aa0 <_printf_i+0x1c8>
 8012aa8:	8019      	strh	r1, [r3, #0]
 8012aaa:	2300      	movs	r3, #0
 8012aac:	6123      	str	r3, [r4, #16]
 8012aae:	4615      	mov	r5, r2
 8012ab0:	e7ba      	b.n	8012a28 <_printf_i+0x150>
 8012ab2:	682b      	ldr	r3, [r5, #0]
 8012ab4:	1d1a      	adds	r2, r3, #4
 8012ab6:	602a      	str	r2, [r5, #0]
 8012ab8:	681d      	ldr	r5, [r3, #0]
 8012aba:	6862      	ldr	r2, [r4, #4]
 8012abc:	2100      	movs	r1, #0
 8012abe:	4628      	mov	r0, r5
 8012ac0:	f7ed fba6 	bl	8000210 <memchr>
 8012ac4:	b108      	cbz	r0, 8012aca <_printf_i+0x1f2>
 8012ac6:	1b40      	subs	r0, r0, r5
 8012ac8:	6060      	str	r0, [r4, #4]
 8012aca:	6863      	ldr	r3, [r4, #4]
 8012acc:	6123      	str	r3, [r4, #16]
 8012ace:	2300      	movs	r3, #0
 8012ad0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012ad4:	e7a8      	b.n	8012a28 <_printf_i+0x150>
 8012ad6:	6923      	ldr	r3, [r4, #16]
 8012ad8:	462a      	mov	r2, r5
 8012ada:	4649      	mov	r1, r9
 8012adc:	4640      	mov	r0, r8
 8012ade:	47d0      	blx	sl
 8012ae0:	3001      	adds	r0, #1
 8012ae2:	d0ab      	beq.n	8012a3c <_printf_i+0x164>
 8012ae4:	6823      	ldr	r3, [r4, #0]
 8012ae6:	079b      	lsls	r3, r3, #30
 8012ae8:	d413      	bmi.n	8012b12 <_printf_i+0x23a>
 8012aea:	68e0      	ldr	r0, [r4, #12]
 8012aec:	9b03      	ldr	r3, [sp, #12]
 8012aee:	4298      	cmp	r0, r3
 8012af0:	bfb8      	it	lt
 8012af2:	4618      	movlt	r0, r3
 8012af4:	e7a4      	b.n	8012a40 <_printf_i+0x168>
 8012af6:	2301      	movs	r3, #1
 8012af8:	4632      	mov	r2, r6
 8012afa:	4649      	mov	r1, r9
 8012afc:	4640      	mov	r0, r8
 8012afe:	47d0      	blx	sl
 8012b00:	3001      	adds	r0, #1
 8012b02:	d09b      	beq.n	8012a3c <_printf_i+0x164>
 8012b04:	3501      	adds	r5, #1
 8012b06:	68e3      	ldr	r3, [r4, #12]
 8012b08:	9903      	ldr	r1, [sp, #12]
 8012b0a:	1a5b      	subs	r3, r3, r1
 8012b0c:	42ab      	cmp	r3, r5
 8012b0e:	dcf2      	bgt.n	8012af6 <_printf_i+0x21e>
 8012b10:	e7eb      	b.n	8012aea <_printf_i+0x212>
 8012b12:	2500      	movs	r5, #0
 8012b14:	f104 0619 	add.w	r6, r4, #25
 8012b18:	e7f5      	b.n	8012b06 <_printf_i+0x22e>
 8012b1a:	bf00      	nop
 8012b1c:	080150a2 	.word	0x080150a2
 8012b20:	080150b3 	.word	0x080150b3

08012b24 <quorem>:
 8012b24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b28:	6903      	ldr	r3, [r0, #16]
 8012b2a:	690c      	ldr	r4, [r1, #16]
 8012b2c:	42a3      	cmp	r3, r4
 8012b2e:	4607      	mov	r7, r0
 8012b30:	f2c0 8081 	blt.w	8012c36 <quorem+0x112>
 8012b34:	3c01      	subs	r4, #1
 8012b36:	f101 0814 	add.w	r8, r1, #20
 8012b3a:	f100 0514 	add.w	r5, r0, #20
 8012b3e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012b42:	9301      	str	r3, [sp, #4]
 8012b44:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8012b48:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012b4c:	3301      	adds	r3, #1
 8012b4e:	429a      	cmp	r2, r3
 8012b50:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8012b54:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8012b58:	fbb2 f6f3 	udiv	r6, r2, r3
 8012b5c:	d331      	bcc.n	8012bc2 <quorem+0x9e>
 8012b5e:	f04f 0e00 	mov.w	lr, #0
 8012b62:	4640      	mov	r0, r8
 8012b64:	46ac      	mov	ip, r5
 8012b66:	46f2      	mov	sl, lr
 8012b68:	f850 2b04 	ldr.w	r2, [r0], #4
 8012b6c:	b293      	uxth	r3, r2
 8012b6e:	fb06 e303 	mla	r3, r6, r3, lr
 8012b72:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8012b76:	b29b      	uxth	r3, r3
 8012b78:	ebaa 0303 	sub.w	r3, sl, r3
 8012b7c:	f8dc a000 	ldr.w	sl, [ip]
 8012b80:	0c12      	lsrs	r2, r2, #16
 8012b82:	fa13 f38a 	uxtah	r3, r3, sl
 8012b86:	fb06 e202 	mla	r2, r6, r2, lr
 8012b8a:	9300      	str	r3, [sp, #0]
 8012b8c:	9b00      	ldr	r3, [sp, #0]
 8012b8e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8012b92:	b292      	uxth	r2, r2
 8012b94:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8012b98:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012b9c:	f8bd 3000 	ldrh.w	r3, [sp]
 8012ba0:	4581      	cmp	r9, r0
 8012ba2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012ba6:	f84c 3b04 	str.w	r3, [ip], #4
 8012baa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8012bae:	d2db      	bcs.n	8012b68 <quorem+0x44>
 8012bb0:	f855 300b 	ldr.w	r3, [r5, fp]
 8012bb4:	b92b      	cbnz	r3, 8012bc2 <quorem+0x9e>
 8012bb6:	9b01      	ldr	r3, [sp, #4]
 8012bb8:	3b04      	subs	r3, #4
 8012bba:	429d      	cmp	r5, r3
 8012bbc:	461a      	mov	r2, r3
 8012bbe:	d32e      	bcc.n	8012c1e <quorem+0xfa>
 8012bc0:	613c      	str	r4, [r7, #16]
 8012bc2:	4638      	mov	r0, r7
 8012bc4:	f001 f8b8 	bl	8013d38 <__mcmp>
 8012bc8:	2800      	cmp	r0, #0
 8012bca:	db24      	blt.n	8012c16 <quorem+0xf2>
 8012bcc:	3601      	adds	r6, #1
 8012bce:	4628      	mov	r0, r5
 8012bd0:	f04f 0c00 	mov.w	ip, #0
 8012bd4:	f858 2b04 	ldr.w	r2, [r8], #4
 8012bd8:	f8d0 e000 	ldr.w	lr, [r0]
 8012bdc:	b293      	uxth	r3, r2
 8012bde:	ebac 0303 	sub.w	r3, ip, r3
 8012be2:	0c12      	lsrs	r2, r2, #16
 8012be4:	fa13 f38e 	uxtah	r3, r3, lr
 8012be8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8012bec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012bf0:	b29b      	uxth	r3, r3
 8012bf2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012bf6:	45c1      	cmp	r9, r8
 8012bf8:	f840 3b04 	str.w	r3, [r0], #4
 8012bfc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8012c00:	d2e8      	bcs.n	8012bd4 <quorem+0xb0>
 8012c02:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012c06:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012c0a:	b922      	cbnz	r2, 8012c16 <quorem+0xf2>
 8012c0c:	3b04      	subs	r3, #4
 8012c0e:	429d      	cmp	r5, r3
 8012c10:	461a      	mov	r2, r3
 8012c12:	d30a      	bcc.n	8012c2a <quorem+0x106>
 8012c14:	613c      	str	r4, [r7, #16]
 8012c16:	4630      	mov	r0, r6
 8012c18:	b003      	add	sp, #12
 8012c1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c1e:	6812      	ldr	r2, [r2, #0]
 8012c20:	3b04      	subs	r3, #4
 8012c22:	2a00      	cmp	r2, #0
 8012c24:	d1cc      	bne.n	8012bc0 <quorem+0x9c>
 8012c26:	3c01      	subs	r4, #1
 8012c28:	e7c7      	b.n	8012bba <quorem+0x96>
 8012c2a:	6812      	ldr	r2, [r2, #0]
 8012c2c:	3b04      	subs	r3, #4
 8012c2e:	2a00      	cmp	r2, #0
 8012c30:	d1f0      	bne.n	8012c14 <quorem+0xf0>
 8012c32:	3c01      	subs	r4, #1
 8012c34:	e7eb      	b.n	8012c0e <quorem+0xea>
 8012c36:	2000      	movs	r0, #0
 8012c38:	e7ee      	b.n	8012c18 <quorem+0xf4>
 8012c3a:	0000      	movs	r0, r0
 8012c3c:	0000      	movs	r0, r0
	...

08012c40 <_dtoa_r>:
 8012c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c44:	ed2d 8b04 	vpush	{d8-d9}
 8012c48:	ec57 6b10 	vmov	r6, r7, d0
 8012c4c:	b093      	sub	sp, #76	; 0x4c
 8012c4e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8012c50:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8012c54:	9106      	str	r1, [sp, #24]
 8012c56:	ee10 aa10 	vmov	sl, s0
 8012c5a:	4604      	mov	r4, r0
 8012c5c:	9209      	str	r2, [sp, #36]	; 0x24
 8012c5e:	930c      	str	r3, [sp, #48]	; 0x30
 8012c60:	46bb      	mov	fp, r7
 8012c62:	b975      	cbnz	r5, 8012c82 <_dtoa_r+0x42>
 8012c64:	2010      	movs	r0, #16
 8012c66:	f000 fddd 	bl	8013824 <malloc>
 8012c6a:	4602      	mov	r2, r0
 8012c6c:	6260      	str	r0, [r4, #36]	; 0x24
 8012c6e:	b920      	cbnz	r0, 8012c7a <_dtoa_r+0x3a>
 8012c70:	4ba7      	ldr	r3, [pc, #668]	; (8012f10 <_dtoa_r+0x2d0>)
 8012c72:	21ea      	movs	r1, #234	; 0xea
 8012c74:	48a7      	ldr	r0, [pc, #668]	; (8012f14 <_dtoa_r+0x2d4>)
 8012c76:	f001 fa67 	bl	8014148 <__assert_func>
 8012c7a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8012c7e:	6005      	str	r5, [r0, #0]
 8012c80:	60c5      	str	r5, [r0, #12]
 8012c82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012c84:	6819      	ldr	r1, [r3, #0]
 8012c86:	b151      	cbz	r1, 8012c9e <_dtoa_r+0x5e>
 8012c88:	685a      	ldr	r2, [r3, #4]
 8012c8a:	604a      	str	r2, [r1, #4]
 8012c8c:	2301      	movs	r3, #1
 8012c8e:	4093      	lsls	r3, r2
 8012c90:	608b      	str	r3, [r1, #8]
 8012c92:	4620      	mov	r0, r4
 8012c94:	f000 fe0e 	bl	80138b4 <_Bfree>
 8012c98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012c9a:	2200      	movs	r2, #0
 8012c9c:	601a      	str	r2, [r3, #0]
 8012c9e:	1e3b      	subs	r3, r7, #0
 8012ca0:	bfaa      	itet	ge
 8012ca2:	2300      	movge	r3, #0
 8012ca4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8012ca8:	f8c8 3000 	strge.w	r3, [r8]
 8012cac:	4b9a      	ldr	r3, [pc, #616]	; (8012f18 <_dtoa_r+0x2d8>)
 8012cae:	bfbc      	itt	lt
 8012cb0:	2201      	movlt	r2, #1
 8012cb2:	f8c8 2000 	strlt.w	r2, [r8]
 8012cb6:	ea33 030b 	bics.w	r3, r3, fp
 8012cba:	d11b      	bne.n	8012cf4 <_dtoa_r+0xb4>
 8012cbc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012cbe:	f242 730f 	movw	r3, #9999	; 0x270f
 8012cc2:	6013      	str	r3, [r2, #0]
 8012cc4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012cc8:	4333      	orrs	r3, r6
 8012cca:	f000 8592 	beq.w	80137f2 <_dtoa_r+0xbb2>
 8012cce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012cd0:	b963      	cbnz	r3, 8012cec <_dtoa_r+0xac>
 8012cd2:	4b92      	ldr	r3, [pc, #584]	; (8012f1c <_dtoa_r+0x2dc>)
 8012cd4:	e022      	b.n	8012d1c <_dtoa_r+0xdc>
 8012cd6:	4b92      	ldr	r3, [pc, #584]	; (8012f20 <_dtoa_r+0x2e0>)
 8012cd8:	9301      	str	r3, [sp, #4]
 8012cda:	3308      	adds	r3, #8
 8012cdc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012cde:	6013      	str	r3, [r2, #0]
 8012ce0:	9801      	ldr	r0, [sp, #4]
 8012ce2:	b013      	add	sp, #76	; 0x4c
 8012ce4:	ecbd 8b04 	vpop	{d8-d9}
 8012ce8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012cec:	4b8b      	ldr	r3, [pc, #556]	; (8012f1c <_dtoa_r+0x2dc>)
 8012cee:	9301      	str	r3, [sp, #4]
 8012cf0:	3303      	adds	r3, #3
 8012cf2:	e7f3      	b.n	8012cdc <_dtoa_r+0x9c>
 8012cf4:	2200      	movs	r2, #0
 8012cf6:	2300      	movs	r3, #0
 8012cf8:	4650      	mov	r0, sl
 8012cfa:	4659      	mov	r1, fp
 8012cfc:	f7ed fefc 	bl	8000af8 <__aeabi_dcmpeq>
 8012d00:	ec4b ab19 	vmov	d9, sl, fp
 8012d04:	4680      	mov	r8, r0
 8012d06:	b158      	cbz	r0, 8012d20 <_dtoa_r+0xe0>
 8012d08:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012d0a:	2301      	movs	r3, #1
 8012d0c:	6013      	str	r3, [r2, #0]
 8012d0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012d10:	2b00      	cmp	r3, #0
 8012d12:	f000 856b 	beq.w	80137ec <_dtoa_r+0xbac>
 8012d16:	4883      	ldr	r0, [pc, #524]	; (8012f24 <_dtoa_r+0x2e4>)
 8012d18:	6018      	str	r0, [r3, #0]
 8012d1a:	1e43      	subs	r3, r0, #1
 8012d1c:	9301      	str	r3, [sp, #4]
 8012d1e:	e7df      	b.n	8012ce0 <_dtoa_r+0xa0>
 8012d20:	ec4b ab10 	vmov	d0, sl, fp
 8012d24:	aa10      	add	r2, sp, #64	; 0x40
 8012d26:	a911      	add	r1, sp, #68	; 0x44
 8012d28:	4620      	mov	r0, r4
 8012d2a:	f001 f8ab 	bl	8013e84 <__d2b>
 8012d2e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8012d32:	ee08 0a10 	vmov	s16, r0
 8012d36:	2d00      	cmp	r5, #0
 8012d38:	f000 8084 	beq.w	8012e44 <_dtoa_r+0x204>
 8012d3c:	ee19 3a90 	vmov	r3, s19
 8012d40:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012d44:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8012d48:	4656      	mov	r6, sl
 8012d4a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8012d4e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8012d52:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8012d56:	4b74      	ldr	r3, [pc, #464]	; (8012f28 <_dtoa_r+0x2e8>)
 8012d58:	2200      	movs	r2, #0
 8012d5a:	4630      	mov	r0, r6
 8012d5c:	4639      	mov	r1, r7
 8012d5e:	f7ed faab 	bl	80002b8 <__aeabi_dsub>
 8012d62:	a365      	add	r3, pc, #404	; (adr r3, 8012ef8 <_dtoa_r+0x2b8>)
 8012d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d68:	f7ed fc5e 	bl	8000628 <__aeabi_dmul>
 8012d6c:	a364      	add	r3, pc, #400	; (adr r3, 8012f00 <_dtoa_r+0x2c0>)
 8012d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d72:	f7ed faa3 	bl	80002bc <__adddf3>
 8012d76:	4606      	mov	r6, r0
 8012d78:	4628      	mov	r0, r5
 8012d7a:	460f      	mov	r7, r1
 8012d7c:	f7ed fbea 	bl	8000554 <__aeabi_i2d>
 8012d80:	a361      	add	r3, pc, #388	; (adr r3, 8012f08 <_dtoa_r+0x2c8>)
 8012d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d86:	f7ed fc4f 	bl	8000628 <__aeabi_dmul>
 8012d8a:	4602      	mov	r2, r0
 8012d8c:	460b      	mov	r3, r1
 8012d8e:	4630      	mov	r0, r6
 8012d90:	4639      	mov	r1, r7
 8012d92:	f7ed fa93 	bl	80002bc <__adddf3>
 8012d96:	4606      	mov	r6, r0
 8012d98:	460f      	mov	r7, r1
 8012d9a:	f7ed fef5 	bl	8000b88 <__aeabi_d2iz>
 8012d9e:	2200      	movs	r2, #0
 8012da0:	9000      	str	r0, [sp, #0]
 8012da2:	2300      	movs	r3, #0
 8012da4:	4630      	mov	r0, r6
 8012da6:	4639      	mov	r1, r7
 8012da8:	f7ed feb0 	bl	8000b0c <__aeabi_dcmplt>
 8012dac:	b150      	cbz	r0, 8012dc4 <_dtoa_r+0x184>
 8012dae:	9800      	ldr	r0, [sp, #0]
 8012db0:	f7ed fbd0 	bl	8000554 <__aeabi_i2d>
 8012db4:	4632      	mov	r2, r6
 8012db6:	463b      	mov	r3, r7
 8012db8:	f7ed fe9e 	bl	8000af8 <__aeabi_dcmpeq>
 8012dbc:	b910      	cbnz	r0, 8012dc4 <_dtoa_r+0x184>
 8012dbe:	9b00      	ldr	r3, [sp, #0]
 8012dc0:	3b01      	subs	r3, #1
 8012dc2:	9300      	str	r3, [sp, #0]
 8012dc4:	9b00      	ldr	r3, [sp, #0]
 8012dc6:	2b16      	cmp	r3, #22
 8012dc8:	d85a      	bhi.n	8012e80 <_dtoa_r+0x240>
 8012dca:	9a00      	ldr	r2, [sp, #0]
 8012dcc:	4b57      	ldr	r3, [pc, #348]	; (8012f2c <_dtoa_r+0x2ec>)
 8012dce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012dd6:	ec51 0b19 	vmov	r0, r1, d9
 8012dda:	f7ed fe97 	bl	8000b0c <__aeabi_dcmplt>
 8012dde:	2800      	cmp	r0, #0
 8012de0:	d050      	beq.n	8012e84 <_dtoa_r+0x244>
 8012de2:	9b00      	ldr	r3, [sp, #0]
 8012de4:	3b01      	subs	r3, #1
 8012de6:	9300      	str	r3, [sp, #0]
 8012de8:	2300      	movs	r3, #0
 8012dea:	930b      	str	r3, [sp, #44]	; 0x2c
 8012dec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012dee:	1b5d      	subs	r5, r3, r5
 8012df0:	1e6b      	subs	r3, r5, #1
 8012df2:	9305      	str	r3, [sp, #20]
 8012df4:	bf45      	ittet	mi
 8012df6:	f1c5 0301 	rsbmi	r3, r5, #1
 8012dfa:	9304      	strmi	r3, [sp, #16]
 8012dfc:	2300      	movpl	r3, #0
 8012dfe:	2300      	movmi	r3, #0
 8012e00:	bf4c      	ite	mi
 8012e02:	9305      	strmi	r3, [sp, #20]
 8012e04:	9304      	strpl	r3, [sp, #16]
 8012e06:	9b00      	ldr	r3, [sp, #0]
 8012e08:	2b00      	cmp	r3, #0
 8012e0a:	db3d      	blt.n	8012e88 <_dtoa_r+0x248>
 8012e0c:	9b05      	ldr	r3, [sp, #20]
 8012e0e:	9a00      	ldr	r2, [sp, #0]
 8012e10:	920a      	str	r2, [sp, #40]	; 0x28
 8012e12:	4413      	add	r3, r2
 8012e14:	9305      	str	r3, [sp, #20]
 8012e16:	2300      	movs	r3, #0
 8012e18:	9307      	str	r3, [sp, #28]
 8012e1a:	9b06      	ldr	r3, [sp, #24]
 8012e1c:	2b09      	cmp	r3, #9
 8012e1e:	f200 8089 	bhi.w	8012f34 <_dtoa_r+0x2f4>
 8012e22:	2b05      	cmp	r3, #5
 8012e24:	bfc4      	itt	gt
 8012e26:	3b04      	subgt	r3, #4
 8012e28:	9306      	strgt	r3, [sp, #24]
 8012e2a:	9b06      	ldr	r3, [sp, #24]
 8012e2c:	f1a3 0302 	sub.w	r3, r3, #2
 8012e30:	bfcc      	ite	gt
 8012e32:	2500      	movgt	r5, #0
 8012e34:	2501      	movle	r5, #1
 8012e36:	2b03      	cmp	r3, #3
 8012e38:	f200 8087 	bhi.w	8012f4a <_dtoa_r+0x30a>
 8012e3c:	e8df f003 	tbb	[pc, r3]
 8012e40:	59383a2d 	.word	0x59383a2d
 8012e44:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8012e48:	441d      	add	r5, r3
 8012e4a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8012e4e:	2b20      	cmp	r3, #32
 8012e50:	bfc1      	itttt	gt
 8012e52:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8012e56:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8012e5a:	fa0b f303 	lslgt.w	r3, fp, r3
 8012e5e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8012e62:	bfda      	itte	le
 8012e64:	f1c3 0320 	rsble	r3, r3, #32
 8012e68:	fa06 f003 	lslle.w	r0, r6, r3
 8012e6c:	4318      	orrgt	r0, r3
 8012e6e:	f7ed fb61 	bl	8000534 <__aeabi_ui2d>
 8012e72:	2301      	movs	r3, #1
 8012e74:	4606      	mov	r6, r0
 8012e76:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8012e7a:	3d01      	subs	r5, #1
 8012e7c:	930e      	str	r3, [sp, #56]	; 0x38
 8012e7e:	e76a      	b.n	8012d56 <_dtoa_r+0x116>
 8012e80:	2301      	movs	r3, #1
 8012e82:	e7b2      	b.n	8012dea <_dtoa_r+0x1aa>
 8012e84:	900b      	str	r0, [sp, #44]	; 0x2c
 8012e86:	e7b1      	b.n	8012dec <_dtoa_r+0x1ac>
 8012e88:	9b04      	ldr	r3, [sp, #16]
 8012e8a:	9a00      	ldr	r2, [sp, #0]
 8012e8c:	1a9b      	subs	r3, r3, r2
 8012e8e:	9304      	str	r3, [sp, #16]
 8012e90:	4253      	negs	r3, r2
 8012e92:	9307      	str	r3, [sp, #28]
 8012e94:	2300      	movs	r3, #0
 8012e96:	930a      	str	r3, [sp, #40]	; 0x28
 8012e98:	e7bf      	b.n	8012e1a <_dtoa_r+0x1da>
 8012e9a:	2300      	movs	r3, #0
 8012e9c:	9308      	str	r3, [sp, #32]
 8012e9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012ea0:	2b00      	cmp	r3, #0
 8012ea2:	dc55      	bgt.n	8012f50 <_dtoa_r+0x310>
 8012ea4:	2301      	movs	r3, #1
 8012ea6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8012eaa:	461a      	mov	r2, r3
 8012eac:	9209      	str	r2, [sp, #36]	; 0x24
 8012eae:	e00c      	b.n	8012eca <_dtoa_r+0x28a>
 8012eb0:	2301      	movs	r3, #1
 8012eb2:	e7f3      	b.n	8012e9c <_dtoa_r+0x25c>
 8012eb4:	2300      	movs	r3, #0
 8012eb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012eb8:	9308      	str	r3, [sp, #32]
 8012eba:	9b00      	ldr	r3, [sp, #0]
 8012ebc:	4413      	add	r3, r2
 8012ebe:	9302      	str	r3, [sp, #8]
 8012ec0:	3301      	adds	r3, #1
 8012ec2:	2b01      	cmp	r3, #1
 8012ec4:	9303      	str	r3, [sp, #12]
 8012ec6:	bfb8      	it	lt
 8012ec8:	2301      	movlt	r3, #1
 8012eca:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8012ecc:	2200      	movs	r2, #0
 8012ece:	6042      	str	r2, [r0, #4]
 8012ed0:	2204      	movs	r2, #4
 8012ed2:	f102 0614 	add.w	r6, r2, #20
 8012ed6:	429e      	cmp	r6, r3
 8012ed8:	6841      	ldr	r1, [r0, #4]
 8012eda:	d93d      	bls.n	8012f58 <_dtoa_r+0x318>
 8012edc:	4620      	mov	r0, r4
 8012ede:	f000 fca9 	bl	8013834 <_Balloc>
 8012ee2:	9001      	str	r0, [sp, #4]
 8012ee4:	2800      	cmp	r0, #0
 8012ee6:	d13b      	bne.n	8012f60 <_dtoa_r+0x320>
 8012ee8:	4b11      	ldr	r3, [pc, #68]	; (8012f30 <_dtoa_r+0x2f0>)
 8012eea:	4602      	mov	r2, r0
 8012eec:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8012ef0:	e6c0      	b.n	8012c74 <_dtoa_r+0x34>
 8012ef2:	2301      	movs	r3, #1
 8012ef4:	e7df      	b.n	8012eb6 <_dtoa_r+0x276>
 8012ef6:	bf00      	nop
 8012ef8:	636f4361 	.word	0x636f4361
 8012efc:	3fd287a7 	.word	0x3fd287a7
 8012f00:	8b60c8b3 	.word	0x8b60c8b3
 8012f04:	3fc68a28 	.word	0x3fc68a28
 8012f08:	509f79fb 	.word	0x509f79fb
 8012f0c:	3fd34413 	.word	0x3fd34413
 8012f10:	080150d1 	.word	0x080150d1
 8012f14:	080150e8 	.word	0x080150e8
 8012f18:	7ff00000 	.word	0x7ff00000
 8012f1c:	080150cd 	.word	0x080150cd
 8012f20:	080150c4 	.word	0x080150c4
 8012f24:	080150a1 	.word	0x080150a1
 8012f28:	3ff80000 	.word	0x3ff80000
 8012f2c:	080151d8 	.word	0x080151d8
 8012f30:	08015143 	.word	0x08015143
 8012f34:	2501      	movs	r5, #1
 8012f36:	2300      	movs	r3, #0
 8012f38:	9306      	str	r3, [sp, #24]
 8012f3a:	9508      	str	r5, [sp, #32]
 8012f3c:	f04f 33ff 	mov.w	r3, #4294967295
 8012f40:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8012f44:	2200      	movs	r2, #0
 8012f46:	2312      	movs	r3, #18
 8012f48:	e7b0      	b.n	8012eac <_dtoa_r+0x26c>
 8012f4a:	2301      	movs	r3, #1
 8012f4c:	9308      	str	r3, [sp, #32]
 8012f4e:	e7f5      	b.n	8012f3c <_dtoa_r+0x2fc>
 8012f50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012f52:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8012f56:	e7b8      	b.n	8012eca <_dtoa_r+0x28a>
 8012f58:	3101      	adds	r1, #1
 8012f5a:	6041      	str	r1, [r0, #4]
 8012f5c:	0052      	lsls	r2, r2, #1
 8012f5e:	e7b8      	b.n	8012ed2 <_dtoa_r+0x292>
 8012f60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012f62:	9a01      	ldr	r2, [sp, #4]
 8012f64:	601a      	str	r2, [r3, #0]
 8012f66:	9b03      	ldr	r3, [sp, #12]
 8012f68:	2b0e      	cmp	r3, #14
 8012f6a:	f200 809d 	bhi.w	80130a8 <_dtoa_r+0x468>
 8012f6e:	2d00      	cmp	r5, #0
 8012f70:	f000 809a 	beq.w	80130a8 <_dtoa_r+0x468>
 8012f74:	9b00      	ldr	r3, [sp, #0]
 8012f76:	2b00      	cmp	r3, #0
 8012f78:	dd32      	ble.n	8012fe0 <_dtoa_r+0x3a0>
 8012f7a:	4ab7      	ldr	r2, [pc, #732]	; (8013258 <_dtoa_r+0x618>)
 8012f7c:	f003 030f 	and.w	r3, r3, #15
 8012f80:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8012f84:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012f88:	9b00      	ldr	r3, [sp, #0]
 8012f8a:	05d8      	lsls	r0, r3, #23
 8012f8c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8012f90:	d516      	bpl.n	8012fc0 <_dtoa_r+0x380>
 8012f92:	4bb2      	ldr	r3, [pc, #712]	; (801325c <_dtoa_r+0x61c>)
 8012f94:	ec51 0b19 	vmov	r0, r1, d9
 8012f98:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8012f9c:	f7ed fc6e 	bl	800087c <__aeabi_ddiv>
 8012fa0:	f007 070f 	and.w	r7, r7, #15
 8012fa4:	4682      	mov	sl, r0
 8012fa6:	468b      	mov	fp, r1
 8012fa8:	2503      	movs	r5, #3
 8012faa:	4eac      	ldr	r6, [pc, #688]	; (801325c <_dtoa_r+0x61c>)
 8012fac:	b957      	cbnz	r7, 8012fc4 <_dtoa_r+0x384>
 8012fae:	4642      	mov	r2, r8
 8012fb0:	464b      	mov	r3, r9
 8012fb2:	4650      	mov	r0, sl
 8012fb4:	4659      	mov	r1, fp
 8012fb6:	f7ed fc61 	bl	800087c <__aeabi_ddiv>
 8012fba:	4682      	mov	sl, r0
 8012fbc:	468b      	mov	fp, r1
 8012fbe:	e028      	b.n	8013012 <_dtoa_r+0x3d2>
 8012fc0:	2502      	movs	r5, #2
 8012fc2:	e7f2      	b.n	8012faa <_dtoa_r+0x36a>
 8012fc4:	07f9      	lsls	r1, r7, #31
 8012fc6:	d508      	bpl.n	8012fda <_dtoa_r+0x39a>
 8012fc8:	4640      	mov	r0, r8
 8012fca:	4649      	mov	r1, r9
 8012fcc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8012fd0:	f7ed fb2a 	bl	8000628 <__aeabi_dmul>
 8012fd4:	3501      	adds	r5, #1
 8012fd6:	4680      	mov	r8, r0
 8012fd8:	4689      	mov	r9, r1
 8012fda:	107f      	asrs	r7, r7, #1
 8012fdc:	3608      	adds	r6, #8
 8012fde:	e7e5      	b.n	8012fac <_dtoa_r+0x36c>
 8012fe0:	f000 809b 	beq.w	801311a <_dtoa_r+0x4da>
 8012fe4:	9b00      	ldr	r3, [sp, #0]
 8012fe6:	4f9d      	ldr	r7, [pc, #628]	; (801325c <_dtoa_r+0x61c>)
 8012fe8:	425e      	negs	r6, r3
 8012fea:	4b9b      	ldr	r3, [pc, #620]	; (8013258 <_dtoa_r+0x618>)
 8012fec:	f006 020f 	and.w	r2, r6, #15
 8012ff0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ff8:	ec51 0b19 	vmov	r0, r1, d9
 8012ffc:	f7ed fb14 	bl	8000628 <__aeabi_dmul>
 8013000:	1136      	asrs	r6, r6, #4
 8013002:	4682      	mov	sl, r0
 8013004:	468b      	mov	fp, r1
 8013006:	2300      	movs	r3, #0
 8013008:	2502      	movs	r5, #2
 801300a:	2e00      	cmp	r6, #0
 801300c:	d17a      	bne.n	8013104 <_dtoa_r+0x4c4>
 801300e:	2b00      	cmp	r3, #0
 8013010:	d1d3      	bne.n	8012fba <_dtoa_r+0x37a>
 8013012:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013014:	2b00      	cmp	r3, #0
 8013016:	f000 8082 	beq.w	801311e <_dtoa_r+0x4de>
 801301a:	4b91      	ldr	r3, [pc, #580]	; (8013260 <_dtoa_r+0x620>)
 801301c:	2200      	movs	r2, #0
 801301e:	4650      	mov	r0, sl
 8013020:	4659      	mov	r1, fp
 8013022:	f7ed fd73 	bl	8000b0c <__aeabi_dcmplt>
 8013026:	2800      	cmp	r0, #0
 8013028:	d079      	beq.n	801311e <_dtoa_r+0x4de>
 801302a:	9b03      	ldr	r3, [sp, #12]
 801302c:	2b00      	cmp	r3, #0
 801302e:	d076      	beq.n	801311e <_dtoa_r+0x4de>
 8013030:	9b02      	ldr	r3, [sp, #8]
 8013032:	2b00      	cmp	r3, #0
 8013034:	dd36      	ble.n	80130a4 <_dtoa_r+0x464>
 8013036:	9b00      	ldr	r3, [sp, #0]
 8013038:	4650      	mov	r0, sl
 801303a:	4659      	mov	r1, fp
 801303c:	1e5f      	subs	r7, r3, #1
 801303e:	2200      	movs	r2, #0
 8013040:	4b88      	ldr	r3, [pc, #544]	; (8013264 <_dtoa_r+0x624>)
 8013042:	f7ed faf1 	bl	8000628 <__aeabi_dmul>
 8013046:	9e02      	ldr	r6, [sp, #8]
 8013048:	4682      	mov	sl, r0
 801304a:	468b      	mov	fp, r1
 801304c:	3501      	adds	r5, #1
 801304e:	4628      	mov	r0, r5
 8013050:	f7ed fa80 	bl	8000554 <__aeabi_i2d>
 8013054:	4652      	mov	r2, sl
 8013056:	465b      	mov	r3, fp
 8013058:	f7ed fae6 	bl	8000628 <__aeabi_dmul>
 801305c:	4b82      	ldr	r3, [pc, #520]	; (8013268 <_dtoa_r+0x628>)
 801305e:	2200      	movs	r2, #0
 8013060:	f7ed f92c 	bl	80002bc <__adddf3>
 8013064:	46d0      	mov	r8, sl
 8013066:	46d9      	mov	r9, fp
 8013068:	4682      	mov	sl, r0
 801306a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 801306e:	2e00      	cmp	r6, #0
 8013070:	d158      	bne.n	8013124 <_dtoa_r+0x4e4>
 8013072:	4b7e      	ldr	r3, [pc, #504]	; (801326c <_dtoa_r+0x62c>)
 8013074:	2200      	movs	r2, #0
 8013076:	4640      	mov	r0, r8
 8013078:	4649      	mov	r1, r9
 801307a:	f7ed f91d 	bl	80002b8 <__aeabi_dsub>
 801307e:	4652      	mov	r2, sl
 8013080:	465b      	mov	r3, fp
 8013082:	4680      	mov	r8, r0
 8013084:	4689      	mov	r9, r1
 8013086:	f7ed fd5f 	bl	8000b48 <__aeabi_dcmpgt>
 801308a:	2800      	cmp	r0, #0
 801308c:	f040 8295 	bne.w	80135ba <_dtoa_r+0x97a>
 8013090:	4652      	mov	r2, sl
 8013092:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8013096:	4640      	mov	r0, r8
 8013098:	4649      	mov	r1, r9
 801309a:	f7ed fd37 	bl	8000b0c <__aeabi_dcmplt>
 801309e:	2800      	cmp	r0, #0
 80130a0:	f040 8289 	bne.w	80135b6 <_dtoa_r+0x976>
 80130a4:	ec5b ab19 	vmov	sl, fp, d9
 80130a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80130aa:	2b00      	cmp	r3, #0
 80130ac:	f2c0 8148 	blt.w	8013340 <_dtoa_r+0x700>
 80130b0:	9a00      	ldr	r2, [sp, #0]
 80130b2:	2a0e      	cmp	r2, #14
 80130b4:	f300 8144 	bgt.w	8013340 <_dtoa_r+0x700>
 80130b8:	4b67      	ldr	r3, [pc, #412]	; (8013258 <_dtoa_r+0x618>)
 80130ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80130be:	e9d3 8900 	ldrd	r8, r9, [r3]
 80130c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80130c4:	2b00      	cmp	r3, #0
 80130c6:	f280 80d5 	bge.w	8013274 <_dtoa_r+0x634>
 80130ca:	9b03      	ldr	r3, [sp, #12]
 80130cc:	2b00      	cmp	r3, #0
 80130ce:	f300 80d1 	bgt.w	8013274 <_dtoa_r+0x634>
 80130d2:	f040 826f 	bne.w	80135b4 <_dtoa_r+0x974>
 80130d6:	4b65      	ldr	r3, [pc, #404]	; (801326c <_dtoa_r+0x62c>)
 80130d8:	2200      	movs	r2, #0
 80130da:	4640      	mov	r0, r8
 80130dc:	4649      	mov	r1, r9
 80130de:	f7ed faa3 	bl	8000628 <__aeabi_dmul>
 80130e2:	4652      	mov	r2, sl
 80130e4:	465b      	mov	r3, fp
 80130e6:	f7ed fd25 	bl	8000b34 <__aeabi_dcmpge>
 80130ea:	9e03      	ldr	r6, [sp, #12]
 80130ec:	4637      	mov	r7, r6
 80130ee:	2800      	cmp	r0, #0
 80130f0:	f040 8245 	bne.w	801357e <_dtoa_r+0x93e>
 80130f4:	9d01      	ldr	r5, [sp, #4]
 80130f6:	2331      	movs	r3, #49	; 0x31
 80130f8:	f805 3b01 	strb.w	r3, [r5], #1
 80130fc:	9b00      	ldr	r3, [sp, #0]
 80130fe:	3301      	adds	r3, #1
 8013100:	9300      	str	r3, [sp, #0]
 8013102:	e240      	b.n	8013586 <_dtoa_r+0x946>
 8013104:	07f2      	lsls	r2, r6, #31
 8013106:	d505      	bpl.n	8013114 <_dtoa_r+0x4d4>
 8013108:	e9d7 2300 	ldrd	r2, r3, [r7]
 801310c:	f7ed fa8c 	bl	8000628 <__aeabi_dmul>
 8013110:	3501      	adds	r5, #1
 8013112:	2301      	movs	r3, #1
 8013114:	1076      	asrs	r6, r6, #1
 8013116:	3708      	adds	r7, #8
 8013118:	e777      	b.n	801300a <_dtoa_r+0x3ca>
 801311a:	2502      	movs	r5, #2
 801311c:	e779      	b.n	8013012 <_dtoa_r+0x3d2>
 801311e:	9f00      	ldr	r7, [sp, #0]
 8013120:	9e03      	ldr	r6, [sp, #12]
 8013122:	e794      	b.n	801304e <_dtoa_r+0x40e>
 8013124:	9901      	ldr	r1, [sp, #4]
 8013126:	4b4c      	ldr	r3, [pc, #304]	; (8013258 <_dtoa_r+0x618>)
 8013128:	4431      	add	r1, r6
 801312a:	910d      	str	r1, [sp, #52]	; 0x34
 801312c:	9908      	ldr	r1, [sp, #32]
 801312e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8013132:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8013136:	2900      	cmp	r1, #0
 8013138:	d043      	beq.n	80131c2 <_dtoa_r+0x582>
 801313a:	494d      	ldr	r1, [pc, #308]	; (8013270 <_dtoa_r+0x630>)
 801313c:	2000      	movs	r0, #0
 801313e:	f7ed fb9d 	bl	800087c <__aeabi_ddiv>
 8013142:	4652      	mov	r2, sl
 8013144:	465b      	mov	r3, fp
 8013146:	f7ed f8b7 	bl	80002b8 <__aeabi_dsub>
 801314a:	9d01      	ldr	r5, [sp, #4]
 801314c:	4682      	mov	sl, r0
 801314e:	468b      	mov	fp, r1
 8013150:	4649      	mov	r1, r9
 8013152:	4640      	mov	r0, r8
 8013154:	f7ed fd18 	bl	8000b88 <__aeabi_d2iz>
 8013158:	4606      	mov	r6, r0
 801315a:	f7ed f9fb 	bl	8000554 <__aeabi_i2d>
 801315e:	4602      	mov	r2, r0
 8013160:	460b      	mov	r3, r1
 8013162:	4640      	mov	r0, r8
 8013164:	4649      	mov	r1, r9
 8013166:	f7ed f8a7 	bl	80002b8 <__aeabi_dsub>
 801316a:	3630      	adds	r6, #48	; 0x30
 801316c:	f805 6b01 	strb.w	r6, [r5], #1
 8013170:	4652      	mov	r2, sl
 8013172:	465b      	mov	r3, fp
 8013174:	4680      	mov	r8, r0
 8013176:	4689      	mov	r9, r1
 8013178:	f7ed fcc8 	bl	8000b0c <__aeabi_dcmplt>
 801317c:	2800      	cmp	r0, #0
 801317e:	d163      	bne.n	8013248 <_dtoa_r+0x608>
 8013180:	4642      	mov	r2, r8
 8013182:	464b      	mov	r3, r9
 8013184:	4936      	ldr	r1, [pc, #216]	; (8013260 <_dtoa_r+0x620>)
 8013186:	2000      	movs	r0, #0
 8013188:	f7ed f896 	bl	80002b8 <__aeabi_dsub>
 801318c:	4652      	mov	r2, sl
 801318e:	465b      	mov	r3, fp
 8013190:	f7ed fcbc 	bl	8000b0c <__aeabi_dcmplt>
 8013194:	2800      	cmp	r0, #0
 8013196:	f040 80b5 	bne.w	8013304 <_dtoa_r+0x6c4>
 801319a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801319c:	429d      	cmp	r5, r3
 801319e:	d081      	beq.n	80130a4 <_dtoa_r+0x464>
 80131a0:	4b30      	ldr	r3, [pc, #192]	; (8013264 <_dtoa_r+0x624>)
 80131a2:	2200      	movs	r2, #0
 80131a4:	4650      	mov	r0, sl
 80131a6:	4659      	mov	r1, fp
 80131a8:	f7ed fa3e 	bl	8000628 <__aeabi_dmul>
 80131ac:	4b2d      	ldr	r3, [pc, #180]	; (8013264 <_dtoa_r+0x624>)
 80131ae:	4682      	mov	sl, r0
 80131b0:	468b      	mov	fp, r1
 80131b2:	4640      	mov	r0, r8
 80131b4:	4649      	mov	r1, r9
 80131b6:	2200      	movs	r2, #0
 80131b8:	f7ed fa36 	bl	8000628 <__aeabi_dmul>
 80131bc:	4680      	mov	r8, r0
 80131be:	4689      	mov	r9, r1
 80131c0:	e7c6      	b.n	8013150 <_dtoa_r+0x510>
 80131c2:	4650      	mov	r0, sl
 80131c4:	4659      	mov	r1, fp
 80131c6:	f7ed fa2f 	bl	8000628 <__aeabi_dmul>
 80131ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80131cc:	9d01      	ldr	r5, [sp, #4]
 80131ce:	930f      	str	r3, [sp, #60]	; 0x3c
 80131d0:	4682      	mov	sl, r0
 80131d2:	468b      	mov	fp, r1
 80131d4:	4649      	mov	r1, r9
 80131d6:	4640      	mov	r0, r8
 80131d8:	f7ed fcd6 	bl	8000b88 <__aeabi_d2iz>
 80131dc:	4606      	mov	r6, r0
 80131de:	f7ed f9b9 	bl	8000554 <__aeabi_i2d>
 80131e2:	3630      	adds	r6, #48	; 0x30
 80131e4:	4602      	mov	r2, r0
 80131e6:	460b      	mov	r3, r1
 80131e8:	4640      	mov	r0, r8
 80131ea:	4649      	mov	r1, r9
 80131ec:	f7ed f864 	bl	80002b8 <__aeabi_dsub>
 80131f0:	f805 6b01 	strb.w	r6, [r5], #1
 80131f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80131f6:	429d      	cmp	r5, r3
 80131f8:	4680      	mov	r8, r0
 80131fa:	4689      	mov	r9, r1
 80131fc:	f04f 0200 	mov.w	r2, #0
 8013200:	d124      	bne.n	801324c <_dtoa_r+0x60c>
 8013202:	4b1b      	ldr	r3, [pc, #108]	; (8013270 <_dtoa_r+0x630>)
 8013204:	4650      	mov	r0, sl
 8013206:	4659      	mov	r1, fp
 8013208:	f7ed f858 	bl	80002bc <__adddf3>
 801320c:	4602      	mov	r2, r0
 801320e:	460b      	mov	r3, r1
 8013210:	4640      	mov	r0, r8
 8013212:	4649      	mov	r1, r9
 8013214:	f7ed fc98 	bl	8000b48 <__aeabi_dcmpgt>
 8013218:	2800      	cmp	r0, #0
 801321a:	d173      	bne.n	8013304 <_dtoa_r+0x6c4>
 801321c:	4652      	mov	r2, sl
 801321e:	465b      	mov	r3, fp
 8013220:	4913      	ldr	r1, [pc, #76]	; (8013270 <_dtoa_r+0x630>)
 8013222:	2000      	movs	r0, #0
 8013224:	f7ed f848 	bl	80002b8 <__aeabi_dsub>
 8013228:	4602      	mov	r2, r0
 801322a:	460b      	mov	r3, r1
 801322c:	4640      	mov	r0, r8
 801322e:	4649      	mov	r1, r9
 8013230:	f7ed fc6c 	bl	8000b0c <__aeabi_dcmplt>
 8013234:	2800      	cmp	r0, #0
 8013236:	f43f af35 	beq.w	80130a4 <_dtoa_r+0x464>
 801323a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801323c:	1e6b      	subs	r3, r5, #1
 801323e:	930f      	str	r3, [sp, #60]	; 0x3c
 8013240:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8013244:	2b30      	cmp	r3, #48	; 0x30
 8013246:	d0f8      	beq.n	801323a <_dtoa_r+0x5fa>
 8013248:	9700      	str	r7, [sp, #0]
 801324a:	e049      	b.n	80132e0 <_dtoa_r+0x6a0>
 801324c:	4b05      	ldr	r3, [pc, #20]	; (8013264 <_dtoa_r+0x624>)
 801324e:	f7ed f9eb 	bl	8000628 <__aeabi_dmul>
 8013252:	4680      	mov	r8, r0
 8013254:	4689      	mov	r9, r1
 8013256:	e7bd      	b.n	80131d4 <_dtoa_r+0x594>
 8013258:	080151d8 	.word	0x080151d8
 801325c:	080151b0 	.word	0x080151b0
 8013260:	3ff00000 	.word	0x3ff00000
 8013264:	40240000 	.word	0x40240000
 8013268:	401c0000 	.word	0x401c0000
 801326c:	40140000 	.word	0x40140000
 8013270:	3fe00000 	.word	0x3fe00000
 8013274:	9d01      	ldr	r5, [sp, #4]
 8013276:	4656      	mov	r6, sl
 8013278:	465f      	mov	r7, fp
 801327a:	4642      	mov	r2, r8
 801327c:	464b      	mov	r3, r9
 801327e:	4630      	mov	r0, r6
 8013280:	4639      	mov	r1, r7
 8013282:	f7ed fafb 	bl	800087c <__aeabi_ddiv>
 8013286:	f7ed fc7f 	bl	8000b88 <__aeabi_d2iz>
 801328a:	4682      	mov	sl, r0
 801328c:	f7ed f962 	bl	8000554 <__aeabi_i2d>
 8013290:	4642      	mov	r2, r8
 8013292:	464b      	mov	r3, r9
 8013294:	f7ed f9c8 	bl	8000628 <__aeabi_dmul>
 8013298:	4602      	mov	r2, r0
 801329a:	460b      	mov	r3, r1
 801329c:	4630      	mov	r0, r6
 801329e:	4639      	mov	r1, r7
 80132a0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80132a4:	f7ed f808 	bl	80002b8 <__aeabi_dsub>
 80132a8:	f805 6b01 	strb.w	r6, [r5], #1
 80132ac:	9e01      	ldr	r6, [sp, #4]
 80132ae:	9f03      	ldr	r7, [sp, #12]
 80132b0:	1bae      	subs	r6, r5, r6
 80132b2:	42b7      	cmp	r7, r6
 80132b4:	4602      	mov	r2, r0
 80132b6:	460b      	mov	r3, r1
 80132b8:	d135      	bne.n	8013326 <_dtoa_r+0x6e6>
 80132ba:	f7ec ffff 	bl	80002bc <__adddf3>
 80132be:	4642      	mov	r2, r8
 80132c0:	464b      	mov	r3, r9
 80132c2:	4606      	mov	r6, r0
 80132c4:	460f      	mov	r7, r1
 80132c6:	f7ed fc3f 	bl	8000b48 <__aeabi_dcmpgt>
 80132ca:	b9d0      	cbnz	r0, 8013302 <_dtoa_r+0x6c2>
 80132cc:	4642      	mov	r2, r8
 80132ce:	464b      	mov	r3, r9
 80132d0:	4630      	mov	r0, r6
 80132d2:	4639      	mov	r1, r7
 80132d4:	f7ed fc10 	bl	8000af8 <__aeabi_dcmpeq>
 80132d8:	b110      	cbz	r0, 80132e0 <_dtoa_r+0x6a0>
 80132da:	f01a 0f01 	tst.w	sl, #1
 80132de:	d110      	bne.n	8013302 <_dtoa_r+0x6c2>
 80132e0:	4620      	mov	r0, r4
 80132e2:	ee18 1a10 	vmov	r1, s16
 80132e6:	f000 fae5 	bl	80138b4 <_Bfree>
 80132ea:	2300      	movs	r3, #0
 80132ec:	9800      	ldr	r0, [sp, #0]
 80132ee:	702b      	strb	r3, [r5, #0]
 80132f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80132f2:	3001      	adds	r0, #1
 80132f4:	6018      	str	r0, [r3, #0]
 80132f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80132f8:	2b00      	cmp	r3, #0
 80132fa:	f43f acf1 	beq.w	8012ce0 <_dtoa_r+0xa0>
 80132fe:	601d      	str	r5, [r3, #0]
 8013300:	e4ee      	b.n	8012ce0 <_dtoa_r+0xa0>
 8013302:	9f00      	ldr	r7, [sp, #0]
 8013304:	462b      	mov	r3, r5
 8013306:	461d      	mov	r5, r3
 8013308:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801330c:	2a39      	cmp	r2, #57	; 0x39
 801330e:	d106      	bne.n	801331e <_dtoa_r+0x6de>
 8013310:	9a01      	ldr	r2, [sp, #4]
 8013312:	429a      	cmp	r2, r3
 8013314:	d1f7      	bne.n	8013306 <_dtoa_r+0x6c6>
 8013316:	9901      	ldr	r1, [sp, #4]
 8013318:	2230      	movs	r2, #48	; 0x30
 801331a:	3701      	adds	r7, #1
 801331c:	700a      	strb	r2, [r1, #0]
 801331e:	781a      	ldrb	r2, [r3, #0]
 8013320:	3201      	adds	r2, #1
 8013322:	701a      	strb	r2, [r3, #0]
 8013324:	e790      	b.n	8013248 <_dtoa_r+0x608>
 8013326:	4ba6      	ldr	r3, [pc, #664]	; (80135c0 <_dtoa_r+0x980>)
 8013328:	2200      	movs	r2, #0
 801332a:	f7ed f97d 	bl	8000628 <__aeabi_dmul>
 801332e:	2200      	movs	r2, #0
 8013330:	2300      	movs	r3, #0
 8013332:	4606      	mov	r6, r0
 8013334:	460f      	mov	r7, r1
 8013336:	f7ed fbdf 	bl	8000af8 <__aeabi_dcmpeq>
 801333a:	2800      	cmp	r0, #0
 801333c:	d09d      	beq.n	801327a <_dtoa_r+0x63a>
 801333e:	e7cf      	b.n	80132e0 <_dtoa_r+0x6a0>
 8013340:	9a08      	ldr	r2, [sp, #32]
 8013342:	2a00      	cmp	r2, #0
 8013344:	f000 80d7 	beq.w	80134f6 <_dtoa_r+0x8b6>
 8013348:	9a06      	ldr	r2, [sp, #24]
 801334a:	2a01      	cmp	r2, #1
 801334c:	f300 80ba 	bgt.w	80134c4 <_dtoa_r+0x884>
 8013350:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013352:	2a00      	cmp	r2, #0
 8013354:	f000 80b2 	beq.w	80134bc <_dtoa_r+0x87c>
 8013358:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801335c:	9e07      	ldr	r6, [sp, #28]
 801335e:	9d04      	ldr	r5, [sp, #16]
 8013360:	9a04      	ldr	r2, [sp, #16]
 8013362:	441a      	add	r2, r3
 8013364:	9204      	str	r2, [sp, #16]
 8013366:	9a05      	ldr	r2, [sp, #20]
 8013368:	2101      	movs	r1, #1
 801336a:	441a      	add	r2, r3
 801336c:	4620      	mov	r0, r4
 801336e:	9205      	str	r2, [sp, #20]
 8013370:	f000 fb58 	bl	8013a24 <__i2b>
 8013374:	4607      	mov	r7, r0
 8013376:	2d00      	cmp	r5, #0
 8013378:	dd0c      	ble.n	8013394 <_dtoa_r+0x754>
 801337a:	9b05      	ldr	r3, [sp, #20]
 801337c:	2b00      	cmp	r3, #0
 801337e:	dd09      	ble.n	8013394 <_dtoa_r+0x754>
 8013380:	42ab      	cmp	r3, r5
 8013382:	9a04      	ldr	r2, [sp, #16]
 8013384:	bfa8      	it	ge
 8013386:	462b      	movge	r3, r5
 8013388:	1ad2      	subs	r2, r2, r3
 801338a:	9204      	str	r2, [sp, #16]
 801338c:	9a05      	ldr	r2, [sp, #20]
 801338e:	1aed      	subs	r5, r5, r3
 8013390:	1ad3      	subs	r3, r2, r3
 8013392:	9305      	str	r3, [sp, #20]
 8013394:	9b07      	ldr	r3, [sp, #28]
 8013396:	b31b      	cbz	r3, 80133e0 <_dtoa_r+0x7a0>
 8013398:	9b08      	ldr	r3, [sp, #32]
 801339a:	2b00      	cmp	r3, #0
 801339c:	f000 80af 	beq.w	80134fe <_dtoa_r+0x8be>
 80133a0:	2e00      	cmp	r6, #0
 80133a2:	dd13      	ble.n	80133cc <_dtoa_r+0x78c>
 80133a4:	4639      	mov	r1, r7
 80133a6:	4632      	mov	r2, r6
 80133a8:	4620      	mov	r0, r4
 80133aa:	f000 fbfb 	bl	8013ba4 <__pow5mult>
 80133ae:	ee18 2a10 	vmov	r2, s16
 80133b2:	4601      	mov	r1, r0
 80133b4:	4607      	mov	r7, r0
 80133b6:	4620      	mov	r0, r4
 80133b8:	f000 fb4a 	bl	8013a50 <__multiply>
 80133bc:	ee18 1a10 	vmov	r1, s16
 80133c0:	4680      	mov	r8, r0
 80133c2:	4620      	mov	r0, r4
 80133c4:	f000 fa76 	bl	80138b4 <_Bfree>
 80133c8:	ee08 8a10 	vmov	s16, r8
 80133cc:	9b07      	ldr	r3, [sp, #28]
 80133ce:	1b9a      	subs	r2, r3, r6
 80133d0:	d006      	beq.n	80133e0 <_dtoa_r+0x7a0>
 80133d2:	ee18 1a10 	vmov	r1, s16
 80133d6:	4620      	mov	r0, r4
 80133d8:	f000 fbe4 	bl	8013ba4 <__pow5mult>
 80133dc:	ee08 0a10 	vmov	s16, r0
 80133e0:	2101      	movs	r1, #1
 80133e2:	4620      	mov	r0, r4
 80133e4:	f000 fb1e 	bl	8013a24 <__i2b>
 80133e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80133ea:	2b00      	cmp	r3, #0
 80133ec:	4606      	mov	r6, r0
 80133ee:	f340 8088 	ble.w	8013502 <_dtoa_r+0x8c2>
 80133f2:	461a      	mov	r2, r3
 80133f4:	4601      	mov	r1, r0
 80133f6:	4620      	mov	r0, r4
 80133f8:	f000 fbd4 	bl	8013ba4 <__pow5mult>
 80133fc:	9b06      	ldr	r3, [sp, #24]
 80133fe:	2b01      	cmp	r3, #1
 8013400:	4606      	mov	r6, r0
 8013402:	f340 8081 	ble.w	8013508 <_dtoa_r+0x8c8>
 8013406:	f04f 0800 	mov.w	r8, #0
 801340a:	6933      	ldr	r3, [r6, #16]
 801340c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8013410:	6918      	ldr	r0, [r3, #16]
 8013412:	f000 fab7 	bl	8013984 <__hi0bits>
 8013416:	f1c0 0020 	rsb	r0, r0, #32
 801341a:	9b05      	ldr	r3, [sp, #20]
 801341c:	4418      	add	r0, r3
 801341e:	f010 001f 	ands.w	r0, r0, #31
 8013422:	f000 8092 	beq.w	801354a <_dtoa_r+0x90a>
 8013426:	f1c0 0320 	rsb	r3, r0, #32
 801342a:	2b04      	cmp	r3, #4
 801342c:	f340 808a 	ble.w	8013544 <_dtoa_r+0x904>
 8013430:	f1c0 001c 	rsb	r0, r0, #28
 8013434:	9b04      	ldr	r3, [sp, #16]
 8013436:	4403      	add	r3, r0
 8013438:	9304      	str	r3, [sp, #16]
 801343a:	9b05      	ldr	r3, [sp, #20]
 801343c:	4403      	add	r3, r0
 801343e:	4405      	add	r5, r0
 8013440:	9305      	str	r3, [sp, #20]
 8013442:	9b04      	ldr	r3, [sp, #16]
 8013444:	2b00      	cmp	r3, #0
 8013446:	dd07      	ble.n	8013458 <_dtoa_r+0x818>
 8013448:	ee18 1a10 	vmov	r1, s16
 801344c:	461a      	mov	r2, r3
 801344e:	4620      	mov	r0, r4
 8013450:	f000 fc02 	bl	8013c58 <__lshift>
 8013454:	ee08 0a10 	vmov	s16, r0
 8013458:	9b05      	ldr	r3, [sp, #20]
 801345a:	2b00      	cmp	r3, #0
 801345c:	dd05      	ble.n	801346a <_dtoa_r+0x82a>
 801345e:	4631      	mov	r1, r6
 8013460:	461a      	mov	r2, r3
 8013462:	4620      	mov	r0, r4
 8013464:	f000 fbf8 	bl	8013c58 <__lshift>
 8013468:	4606      	mov	r6, r0
 801346a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801346c:	2b00      	cmp	r3, #0
 801346e:	d06e      	beq.n	801354e <_dtoa_r+0x90e>
 8013470:	ee18 0a10 	vmov	r0, s16
 8013474:	4631      	mov	r1, r6
 8013476:	f000 fc5f 	bl	8013d38 <__mcmp>
 801347a:	2800      	cmp	r0, #0
 801347c:	da67      	bge.n	801354e <_dtoa_r+0x90e>
 801347e:	9b00      	ldr	r3, [sp, #0]
 8013480:	3b01      	subs	r3, #1
 8013482:	ee18 1a10 	vmov	r1, s16
 8013486:	9300      	str	r3, [sp, #0]
 8013488:	220a      	movs	r2, #10
 801348a:	2300      	movs	r3, #0
 801348c:	4620      	mov	r0, r4
 801348e:	f000 fa33 	bl	80138f8 <__multadd>
 8013492:	9b08      	ldr	r3, [sp, #32]
 8013494:	ee08 0a10 	vmov	s16, r0
 8013498:	2b00      	cmp	r3, #0
 801349a:	f000 81b1 	beq.w	8013800 <_dtoa_r+0xbc0>
 801349e:	2300      	movs	r3, #0
 80134a0:	4639      	mov	r1, r7
 80134a2:	220a      	movs	r2, #10
 80134a4:	4620      	mov	r0, r4
 80134a6:	f000 fa27 	bl	80138f8 <__multadd>
 80134aa:	9b02      	ldr	r3, [sp, #8]
 80134ac:	2b00      	cmp	r3, #0
 80134ae:	4607      	mov	r7, r0
 80134b0:	f300 808e 	bgt.w	80135d0 <_dtoa_r+0x990>
 80134b4:	9b06      	ldr	r3, [sp, #24]
 80134b6:	2b02      	cmp	r3, #2
 80134b8:	dc51      	bgt.n	801355e <_dtoa_r+0x91e>
 80134ba:	e089      	b.n	80135d0 <_dtoa_r+0x990>
 80134bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80134be:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80134c2:	e74b      	b.n	801335c <_dtoa_r+0x71c>
 80134c4:	9b03      	ldr	r3, [sp, #12]
 80134c6:	1e5e      	subs	r6, r3, #1
 80134c8:	9b07      	ldr	r3, [sp, #28]
 80134ca:	42b3      	cmp	r3, r6
 80134cc:	bfbf      	itttt	lt
 80134ce:	9b07      	ldrlt	r3, [sp, #28]
 80134d0:	9607      	strlt	r6, [sp, #28]
 80134d2:	1af2      	sublt	r2, r6, r3
 80134d4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80134d6:	bfb6      	itet	lt
 80134d8:	189b      	addlt	r3, r3, r2
 80134da:	1b9e      	subge	r6, r3, r6
 80134dc:	930a      	strlt	r3, [sp, #40]	; 0x28
 80134de:	9b03      	ldr	r3, [sp, #12]
 80134e0:	bfb8      	it	lt
 80134e2:	2600      	movlt	r6, #0
 80134e4:	2b00      	cmp	r3, #0
 80134e6:	bfb7      	itett	lt
 80134e8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80134ec:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80134f0:	1a9d      	sublt	r5, r3, r2
 80134f2:	2300      	movlt	r3, #0
 80134f4:	e734      	b.n	8013360 <_dtoa_r+0x720>
 80134f6:	9e07      	ldr	r6, [sp, #28]
 80134f8:	9d04      	ldr	r5, [sp, #16]
 80134fa:	9f08      	ldr	r7, [sp, #32]
 80134fc:	e73b      	b.n	8013376 <_dtoa_r+0x736>
 80134fe:	9a07      	ldr	r2, [sp, #28]
 8013500:	e767      	b.n	80133d2 <_dtoa_r+0x792>
 8013502:	9b06      	ldr	r3, [sp, #24]
 8013504:	2b01      	cmp	r3, #1
 8013506:	dc18      	bgt.n	801353a <_dtoa_r+0x8fa>
 8013508:	f1ba 0f00 	cmp.w	sl, #0
 801350c:	d115      	bne.n	801353a <_dtoa_r+0x8fa>
 801350e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013512:	b993      	cbnz	r3, 801353a <_dtoa_r+0x8fa>
 8013514:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8013518:	0d1b      	lsrs	r3, r3, #20
 801351a:	051b      	lsls	r3, r3, #20
 801351c:	b183      	cbz	r3, 8013540 <_dtoa_r+0x900>
 801351e:	9b04      	ldr	r3, [sp, #16]
 8013520:	3301      	adds	r3, #1
 8013522:	9304      	str	r3, [sp, #16]
 8013524:	9b05      	ldr	r3, [sp, #20]
 8013526:	3301      	adds	r3, #1
 8013528:	9305      	str	r3, [sp, #20]
 801352a:	f04f 0801 	mov.w	r8, #1
 801352e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013530:	2b00      	cmp	r3, #0
 8013532:	f47f af6a 	bne.w	801340a <_dtoa_r+0x7ca>
 8013536:	2001      	movs	r0, #1
 8013538:	e76f      	b.n	801341a <_dtoa_r+0x7da>
 801353a:	f04f 0800 	mov.w	r8, #0
 801353e:	e7f6      	b.n	801352e <_dtoa_r+0x8ee>
 8013540:	4698      	mov	r8, r3
 8013542:	e7f4      	b.n	801352e <_dtoa_r+0x8ee>
 8013544:	f43f af7d 	beq.w	8013442 <_dtoa_r+0x802>
 8013548:	4618      	mov	r0, r3
 801354a:	301c      	adds	r0, #28
 801354c:	e772      	b.n	8013434 <_dtoa_r+0x7f4>
 801354e:	9b03      	ldr	r3, [sp, #12]
 8013550:	2b00      	cmp	r3, #0
 8013552:	dc37      	bgt.n	80135c4 <_dtoa_r+0x984>
 8013554:	9b06      	ldr	r3, [sp, #24]
 8013556:	2b02      	cmp	r3, #2
 8013558:	dd34      	ble.n	80135c4 <_dtoa_r+0x984>
 801355a:	9b03      	ldr	r3, [sp, #12]
 801355c:	9302      	str	r3, [sp, #8]
 801355e:	9b02      	ldr	r3, [sp, #8]
 8013560:	b96b      	cbnz	r3, 801357e <_dtoa_r+0x93e>
 8013562:	4631      	mov	r1, r6
 8013564:	2205      	movs	r2, #5
 8013566:	4620      	mov	r0, r4
 8013568:	f000 f9c6 	bl	80138f8 <__multadd>
 801356c:	4601      	mov	r1, r0
 801356e:	4606      	mov	r6, r0
 8013570:	ee18 0a10 	vmov	r0, s16
 8013574:	f000 fbe0 	bl	8013d38 <__mcmp>
 8013578:	2800      	cmp	r0, #0
 801357a:	f73f adbb 	bgt.w	80130f4 <_dtoa_r+0x4b4>
 801357e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013580:	9d01      	ldr	r5, [sp, #4]
 8013582:	43db      	mvns	r3, r3
 8013584:	9300      	str	r3, [sp, #0]
 8013586:	f04f 0800 	mov.w	r8, #0
 801358a:	4631      	mov	r1, r6
 801358c:	4620      	mov	r0, r4
 801358e:	f000 f991 	bl	80138b4 <_Bfree>
 8013592:	2f00      	cmp	r7, #0
 8013594:	f43f aea4 	beq.w	80132e0 <_dtoa_r+0x6a0>
 8013598:	f1b8 0f00 	cmp.w	r8, #0
 801359c:	d005      	beq.n	80135aa <_dtoa_r+0x96a>
 801359e:	45b8      	cmp	r8, r7
 80135a0:	d003      	beq.n	80135aa <_dtoa_r+0x96a>
 80135a2:	4641      	mov	r1, r8
 80135a4:	4620      	mov	r0, r4
 80135a6:	f000 f985 	bl	80138b4 <_Bfree>
 80135aa:	4639      	mov	r1, r7
 80135ac:	4620      	mov	r0, r4
 80135ae:	f000 f981 	bl	80138b4 <_Bfree>
 80135b2:	e695      	b.n	80132e0 <_dtoa_r+0x6a0>
 80135b4:	2600      	movs	r6, #0
 80135b6:	4637      	mov	r7, r6
 80135b8:	e7e1      	b.n	801357e <_dtoa_r+0x93e>
 80135ba:	9700      	str	r7, [sp, #0]
 80135bc:	4637      	mov	r7, r6
 80135be:	e599      	b.n	80130f4 <_dtoa_r+0x4b4>
 80135c0:	40240000 	.word	0x40240000
 80135c4:	9b08      	ldr	r3, [sp, #32]
 80135c6:	2b00      	cmp	r3, #0
 80135c8:	f000 80ca 	beq.w	8013760 <_dtoa_r+0xb20>
 80135cc:	9b03      	ldr	r3, [sp, #12]
 80135ce:	9302      	str	r3, [sp, #8]
 80135d0:	2d00      	cmp	r5, #0
 80135d2:	dd05      	ble.n	80135e0 <_dtoa_r+0x9a0>
 80135d4:	4639      	mov	r1, r7
 80135d6:	462a      	mov	r2, r5
 80135d8:	4620      	mov	r0, r4
 80135da:	f000 fb3d 	bl	8013c58 <__lshift>
 80135de:	4607      	mov	r7, r0
 80135e0:	f1b8 0f00 	cmp.w	r8, #0
 80135e4:	d05b      	beq.n	801369e <_dtoa_r+0xa5e>
 80135e6:	6879      	ldr	r1, [r7, #4]
 80135e8:	4620      	mov	r0, r4
 80135ea:	f000 f923 	bl	8013834 <_Balloc>
 80135ee:	4605      	mov	r5, r0
 80135f0:	b928      	cbnz	r0, 80135fe <_dtoa_r+0x9be>
 80135f2:	4b87      	ldr	r3, [pc, #540]	; (8013810 <_dtoa_r+0xbd0>)
 80135f4:	4602      	mov	r2, r0
 80135f6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80135fa:	f7ff bb3b 	b.w	8012c74 <_dtoa_r+0x34>
 80135fe:	693a      	ldr	r2, [r7, #16]
 8013600:	3202      	adds	r2, #2
 8013602:	0092      	lsls	r2, r2, #2
 8013604:	f107 010c 	add.w	r1, r7, #12
 8013608:	300c      	adds	r0, #12
 801360a:	f7fe fdf1 	bl	80121f0 <memcpy>
 801360e:	2201      	movs	r2, #1
 8013610:	4629      	mov	r1, r5
 8013612:	4620      	mov	r0, r4
 8013614:	f000 fb20 	bl	8013c58 <__lshift>
 8013618:	9b01      	ldr	r3, [sp, #4]
 801361a:	f103 0901 	add.w	r9, r3, #1
 801361e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8013622:	4413      	add	r3, r2
 8013624:	9305      	str	r3, [sp, #20]
 8013626:	f00a 0301 	and.w	r3, sl, #1
 801362a:	46b8      	mov	r8, r7
 801362c:	9304      	str	r3, [sp, #16]
 801362e:	4607      	mov	r7, r0
 8013630:	4631      	mov	r1, r6
 8013632:	ee18 0a10 	vmov	r0, s16
 8013636:	f7ff fa75 	bl	8012b24 <quorem>
 801363a:	4641      	mov	r1, r8
 801363c:	9002      	str	r0, [sp, #8]
 801363e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8013642:	ee18 0a10 	vmov	r0, s16
 8013646:	f000 fb77 	bl	8013d38 <__mcmp>
 801364a:	463a      	mov	r2, r7
 801364c:	9003      	str	r0, [sp, #12]
 801364e:	4631      	mov	r1, r6
 8013650:	4620      	mov	r0, r4
 8013652:	f000 fb8d 	bl	8013d70 <__mdiff>
 8013656:	68c2      	ldr	r2, [r0, #12]
 8013658:	f109 3bff 	add.w	fp, r9, #4294967295
 801365c:	4605      	mov	r5, r0
 801365e:	bb02      	cbnz	r2, 80136a2 <_dtoa_r+0xa62>
 8013660:	4601      	mov	r1, r0
 8013662:	ee18 0a10 	vmov	r0, s16
 8013666:	f000 fb67 	bl	8013d38 <__mcmp>
 801366a:	4602      	mov	r2, r0
 801366c:	4629      	mov	r1, r5
 801366e:	4620      	mov	r0, r4
 8013670:	9207      	str	r2, [sp, #28]
 8013672:	f000 f91f 	bl	80138b4 <_Bfree>
 8013676:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801367a:	ea43 0102 	orr.w	r1, r3, r2
 801367e:	9b04      	ldr	r3, [sp, #16]
 8013680:	430b      	orrs	r3, r1
 8013682:	464d      	mov	r5, r9
 8013684:	d10f      	bne.n	80136a6 <_dtoa_r+0xa66>
 8013686:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801368a:	d02a      	beq.n	80136e2 <_dtoa_r+0xaa2>
 801368c:	9b03      	ldr	r3, [sp, #12]
 801368e:	2b00      	cmp	r3, #0
 8013690:	dd02      	ble.n	8013698 <_dtoa_r+0xa58>
 8013692:	9b02      	ldr	r3, [sp, #8]
 8013694:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8013698:	f88b a000 	strb.w	sl, [fp]
 801369c:	e775      	b.n	801358a <_dtoa_r+0x94a>
 801369e:	4638      	mov	r0, r7
 80136a0:	e7ba      	b.n	8013618 <_dtoa_r+0x9d8>
 80136a2:	2201      	movs	r2, #1
 80136a4:	e7e2      	b.n	801366c <_dtoa_r+0xa2c>
 80136a6:	9b03      	ldr	r3, [sp, #12]
 80136a8:	2b00      	cmp	r3, #0
 80136aa:	db04      	blt.n	80136b6 <_dtoa_r+0xa76>
 80136ac:	9906      	ldr	r1, [sp, #24]
 80136ae:	430b      	orrs	r3, r1
 80136b0:	9904      	ldr	r1, [sp, #16]
 80136b2:	430b      	orrs	r3, r1
 80136b4:	d122      	bne.n	80136fc <_dtoa_r+0xabc>
 80136b6:	2a00      	cmp	r2, #0
 80136b8:	ddee      	ble.n	8013698 <_dtoa_r+0xa58>
 80136ba:	ee18 1a10 	vmov	r1, s16
 80136be:	2201      	movs	r2, #1
 80136c0:	4620      	mov	r0, r4
 80136c2:	f000 fac9 	bl	8013c58 <__lshift>
 80136c6:	4631      	mov	r1, r6
 80136c8:	ee08 0a10 	vmov	s16, r0
 80136cc:	f000 fb34 	bl	8013d38 <__mcmp>
 80136d0:	2800      	cmp	r0, #0
 80136d2:	dc03      	bgt.n	80136dc <_dtoa_r+0xa9c>
 80136d4:	d1e0      	bne.n	8013698 <_dtoa_r+0xa58>
 80136d6:	f01a 0f01 	tst.w	sl, #1
 80136da:	d0dd      	beq.n	8013698 <_dtoa_r+0xa58>
 80136dc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80136e0:	d1d7      	bne.n	8013692 <_dtoa_r+0xa52>
 80136e2:	2339      	movs	r3, #57	; 0x39
 80136e4:	f88b 3000 	strb.w	r3, [fp]
 80136e8:	462b      	mov	r3, r5
 80136ea:	461d      	mov	r5, r3
 80136ec:	3b01      	subs	r3, #1
 80136ee:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80136f2:	2a39      	cmp	r2, #57	; 0x39
 80136f4:	d071      	beq.n	80137da <_dtoa_r+0xb9a>
 80136f6:	3201      	adds	r2, #1
 80136f8:	701a      	strb	r2, [r3, #0]
 80136fa:	e746      	b.n	801358a <_dtoa_r+0x94a>
 80136fc:	2a00      	cmp	r2, #0
 80136fe:	dd07      	ble.n	8013710 <_dtoa_r+0xad0>
 8013700:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8013704:	d0ed      	beq.n	80136e2 <_dtoa_r+0xaa2>
 8013706:	f10a 0301 	add.w	r3, sl, #1
 801370a:	f88b 3000 	strb.w	r3, [fp]
 801370e:	e73c      	b.n	801358a <_dtoa_r+0x94a>
 8013710:	9b05      	ldr	r3, [sp, #20]
 8013712:	f809 ac01 	strb.w	sl, [r9, #-1]
 8013716:	4599      	cmp	r9, r3
 8013718:	d047      	beq.n	80137aa <_dtoa_r+0xb6a>
 801371a:	ee18 1a10 	vmov	r1, s16
 801371e:	2300      	movs	r3, #0
 8013720:	220a      	movs	r2, #10
 8013722:	4620      	mov	r0, r4
 8013724:	f000 f8e8 	bl	80138f8 <__multadd>
 8013728:	45b8      	cmp	r8, r7
 801372a:	ee08 0a10 	vmov	s16, r0
 801372e:	f04f 0300 	mov.w	r3, #0
 8013732:	f04f 020a 	mov.w	r2, #10
 8013736:	4641      	mov	r1, r8
 8013738:	4620      	mov	r0, r4
 801373a:	d106      	bne.n	801374a <_dtoa_r+0xb0a>
 801373c:	f000 f8dc 	bl	80138f8 <__multadd>
 8013740:	4680      	mov	r8, r0
 8013742:	4607      	mov	r7, r0
 8013744:	f109 0901 	add.w	r9, r9, #1
 8013748:	e772      	b.n	8013630 <_dtoa_r+0x9f0>
 801374a:	f000 f8d5 	bl	80138f8 <__multadd>
 801374e:	4639      	mov	r1, r7
 8013750:	4680      	mov	r8, r0
 8013752:	2300      	movs	r3, #0
 8013754:	220a      	movs	r2, #10
 8013756:	4620      	mov	r0, r4
 8013758:	f000 f8ce 	bl	80138f8 <__multadd>
 801375c:	4607      	mov	r7, r0
 801375e:	e7f1      	b.n	8013744 <_dtoa_r+0xb04>
 8013760:	9b03      	ldr	r3, [sp, #12]
 8013762:	9302      	str	r3, [sp, #8]
 8013764:	9d01      	ldr	r5, [sp, #4]
 8013766:	ee18 0a10 	vmov	r0, s16
 801376a:	4631      	mov	r1, r6
 801376c:	f7ff f9da 	bl	8012b24 <quorem>
 8013770:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8013774:	9b01      	ldr	r3, [sp, #4]
 8013776:	f805 ab01 	strb.w	sl, [r5], #1
 801377a:	1aea      	subs	r2, r5, r3
 801377c:	9b02      	ldr	r3, [sp, #8]
 801377e:	4293      	cmp	r3, r2
 8013780:	dd09      	ble.n	8013796 <_dtoa_r+0xb56>
 8013782:	ee18 1a10 	vmov	r1, s16
 8013786:	2300      	movs	r3, #0
 8013788:	220a      	movs	r2, #10
 801378a:	4620      	mov	r0, r4
 801378c:	f000 f8b4 	bl	80138f8 <__multadd>
 8013790:	ee08 0a10 	vmov	s16, r0
 8013794:	e7e7      	b.n	8013766 <_dtoa_r+0xb26>
 8013796:	9b02      	ldr	r3, [sp, #8]
 8013798:	2b00      	cmp	r3, #0
 801379a:	bfc8      	it	gt
 801379c:	461d      	movgt	r5, r3
 801379e:	9b01      	ldr	r3, [sp, #4]
 80137a0:	bfd8      	it	le
 80137a2:	2501      	movle	r5, #1
 80137a4:	441d      	add	r5, r3
 80137a6:	f04f 0800 	mov.w	r8, #0
 80137aa:	ee18 1a10 	vmov	r1, s16
 80137ae:	2201      	movs	r2, #1
 80137b0:	4620      	mov	r0, r4
 80137b2:	f000 fa51 	bl	8013c58 <__lshift>
 80137b6:	4631      	mov	r1, r6
 80137b8:	ee08 0a10 	vmov	s16, r0
 80137bc:	f000 fabc 	bl	8013d38 <__mcmp>
 80137c0:	2800      	cmp	r0, #0
 80137c2:	dc91      	bgt.n	80136e8 <_dtoa_r+0xaa8>
 80137c4:	d102      	bne.n	80137cc <_dtoa_r+0xb8c>
 80137c6:	f01a 0f01 	tst.w	sl, #1
 80137ca:	d18d      	bne.n	80136e8 <_dtoa_r+0xaa8>
 80137cc:	462b      	mov	r3, r5
 80137ce:	461d      	mov	r5, r3
 80137d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80137d4:	2a30      	cmp	r2, #48	; 0x30
 80137d6:	d0fa      	beq.n	80137ce <_dtoa_r+0xb8e>
 80137d8:	e6d7      	b.n	801358a <_dtoa_r+0x94a>
 80137da:	9a01      	ldr	r2, [sp, #4]
 80137dc:	429a      	cmp	r2, r3
 80137de:	d184      	bne.n	80136ea <_dtoa_r+0xaaa>
 80137e0:	9b00      	ldr	r3, [sp, #0]
 80137e2:	3301      	adds	r3, #1
 80137e4:	9300      	str	r3, [sp, #0]
 80137e6:	2331      	movs	r3, #49	; 0x31
 80137e8:	7013      	strb	r3, [r2, #0]
 80137ea:	e6ce      	b.n	801358a <_dtoa_r+0x94a>
 80137ec:	4b09      	ldr	r3, [pc, #36]	; (8013814 <_dtoa_r+0xbd4>)
 80137ee:	f7ff ba95 	b.w	8012d1c <_dtoa_r+0xdc>
 80137f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80137f4:	2b00      	cmp	r3, #0
 80137f6:	f47f aa6e 	bne.w	8012cd6 <_dtoa_r+0x96>
 80137fa:	4b07      	ldr	r3, [pc, #28]	; (8013818 <_dtoa_r+0xbd8>)
 80137fc:	f7ff ba8e 	b.w	8012d1c <_dtoa_r+0xdc>
 8013800:	9b02      	ldr	r3, [sp, #8]
 8013802:	2b00      	cmp	r3, #0
 8013804:	dcae      	bgt.n	8013764 <_dtoa_r+0xb24>
 8013806:	9b06      	ldr	r3, [sp, #24]
 8013808:	2b02      	cmp	r3, #2
 801380a:	f73f aea8 	bgt.w	801355e <_dtoa_r+0x91e>
 801380e:	e7a9      	b.n	8013764 <_dtoa_r+0xb24>
 8013810:	08015143 	.word	0x08015143
 8013814:	080150a0 	.word	0x080150a0
 8013818:	080150c4 	.word	0x080150c4

0801381c <_localeconv_r>:
 801381c:	4800      	ldr	r0, [pc, #0]	; (8013820 <_localeconv_r+0x4>)
 801381e:	4770      	bx	lr
 8013820:	2000046c 	.word	0x2000046c

08013824 <malloc>:
 8013824:	4b02      	ldr	r3, [pc, #8]	; (8013830 <malloc+0xc>)
 8013826:	4601      	mov	r1, r0
 8013828:	6818      	ldr	r0, [r3, #0]
 801382a:	f000 bc09 	b.w	8014040 <_malloc_r>
 801382e:	bf00      	nop
 8013830:	20000318 	.word	0x20000318

08013834 <_Balloc>:
 8013834:	b570      	push	{r4, r5, r6, lr}
 8013836:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8013838:	4604      	mov	r4, r0
 801383a:	460d      	mov	r5, r1
 801383c:	b976      	cbnz	r6, 801385c <_Balloc+0x28>
 801383e:	2010      	movs	r0, #16
 8013840:	f7ff fff0 	bl	8013824 <malloc>
 8013844:	4602      	mov	r2, r0
 8013846:	6260      	str	r0, [r4, #36]	; 0x24
 8013848:	b920      	cbnz	r0, 8013854 <_Balloc+0x20>
 801384a:	4b18      	ldr	r3, [pc, #96]	; (80138ac <_Balloc+0x78>)
 801384c:	4818      	ldr	r0, [pc, #96]	; (80138b0 <_Balloc+0x7c>)
 801384e:	2166      	movs	r1, #102	; 0x66
 8013850:	f000 fc7a 	bl	8014148 <__assert_func>
 8013854:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013858:	6006      	str	r6, [r0, #0]
 801385a:	60c6      	str	r6, [r0, #12]
 801385c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801385e:	68f3      	ldr	r3, [r6, #12]
 8013860:	b183      	cbz	r3, 8013884 <_Balloc+0x50>
 8013862:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013864:	68db      	ldr	r3, [r3, #12]
 8013866:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801386a:	b9b8      	cbnz	r0, 801389c <_Balloc+0x68>
 801386c:	2101      	movs	r1, #1
 801386e:	fa01 f605 	lsl.w	r6, r1, r5
 8013872:	1d72      	adds	r2, r6, #5
 8013874:	0092      	lsls	r2, r2, #2
 8013876:	4620      	mov	r0, r4
 8013878:	f000 fb60 	bl	8013f3c <_calloc_r>
 801387c:	b160      	cbz	r0, 8013898 <_Balloc+0x64>
 801387e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8013882:	e00e      	b.n	80138a2 <_Balloc+0x6e>
 8013884:	2221      	movs	r2, #33	; 0x21
 8013886:	2104      	movs	r1, #4
 8013888:	4620      	mov	r0, r4
 801388a:	f000 fb57 	bl	8013f3c <_calloc_r>
 801388e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013890:	60f0      	str	r0, [r6, #12]
 8013892:	68db      	ldr	r3, [r3, #12]
 8013894:	2b00      	cmp	r3, #0
 8013896:	d1e4      	bne.n	8013862 <_Balloc+0x2e>
 8013898:	2000      	movs	r0, #0
 801389a:	bd70      	pop	{r4, r5, r6, pc}
 801389c:	6802      	ldr	r2, [r0, #0]
 801389e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80138a2:	2300      	movs	r3, #0
 80138a4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80138a8:	e7f7      	b.n	801389a <_Balloc+0x66>
 80138aa:	bf00      	nop
 80138ac:	080150d1 	.word	0x080150d1
 80138b0:	08015154 	.word	0x08015154

080138b4 <_Bfree>:
 80138b4:	b570      	push	{r4, r5, r6, lr}
 80138b6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80138b8:	4605      	mov	r5, r0
 80138ba:	460c      	mov	r4, r1
 80138bc:	b976      	cbnz	r6, 80138dc <_Bfree+0x28>
 80138be:	2010      	movs	r0, #16
 80138c0:	f7ff ffb0 	bl	8013824 <malloc>
 80138c4:	4602      	mov	r2, r0
 80138c6:	6268      	str	r0, [r5, #36]	; 0x24
 80138c8:	b920      	cbnz	r0, 80138d4 <_Bfree+0x20>
 80138ca:	4b09      	ldr	r3, [pc, #36]	; (80138f0 <_Bfree+0x3c>)
 80138cc:	4809      	ldr	r0, [pc, #36]	; (80138f4 <_Bfree+0x40>)
 80138ce:	218a      	movs	r1, #138	; 0x8a
 80138d0:	f000 fc3a 	bl	8014148 <__assert_func>
 80138d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80138d8:	6006      	str	r6, [r0, #0]
 80138da:	60c6      	str	r6, [r0, #12]
 80138dc:	b13c      	cbz	r4, 80138ee <_Bfree+0x3a>
 80138de:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80138e0:	6862      	ldr	r2, [r4, #4]
 80138e2:	68db      	ldr	r3, [r3, #12]
 80138e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80138e8:	6021      	str	r1, [r4, #0]
 80138ea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80138ee:	bd70      	pop	{r4, r5, r6, pc}
 80138f0:	080150d1 	.word	0x080150d1
 80138f4:	08015154 	.word	0x08015154

080138f8 <__multadd>:
 80138f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80138fc:	690d      	ldr	r5, [r1, #16]
 80138fe:	4607      	mov	r7, r0
 8013900:	460c      	mov	r4, r1
 8013902:	461e      	mov	r6, r3
 8013904:	f101 0c14 	add.w	ip, r1, #20
 8013908:	2000      	movs	r0, #0
 801390a:	f8dc 3000 	ldr.w	r3, [ip]
 801390e:	b299      	uxth	r1, r3
 8013910:	fb02 6101 	mla	r1, r2, r1, r6
 8013914:	0c1e      	lsrs	r6, r3, #16
 8013916:	0c0b      	lsrs	r3, r1, #16
 8013918:	fb02 3306 	mla	r3, r2, r6, r3
 801391c:	b289      	uxth	r1, r1
 801391e:	3001      	adds	r0, #1
 8013920:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8013924:	4285      	cmp	r5, r0
 8013926:	f84c 1b04 	str.w	r1, [ip], #4
 801392a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801392e:	dcec      	bgt.n	801390a <__multadd+0x12>
 8013930:	b30e      	cbz	r6, 8013976 <__multadd+0x7e>
 8013932:	68a3      	ldr	r3, [r4, #8]
 8013934:	42ab      	cmp	r3, r5
 8013936:	dc19      	bgt.n	801396c <__multadd+0x74>
 8013938:	6861      	ldr	r1, [r4, #4]
 801393a:	4638      	mov	r0, r7
 801393c:	3101      	adds	r1, #1
 801393e:	f7ff ff79 	bl	8013834 <_Balloc>
 8013942:	4680      	mov	r8, r0
 8013944:	b928      	cbnz	r0, 8013952 <__multadd+0x5a>
 8013946:	4602      	mov	r2, r0
 8013948:	4b0c      	ldr	r3, [pc, #48]	; (801397c <__multadd+0x84>)
 801394a:	480d      	ldr	r0, [pc, #52]	; (8013980 <__multadd+0x88>)
 801394c:	21b5      	movs	r1, #181	; 0xb5
 801394e:	f000 fbfb 	bl	8014148 <__assert_func>
 8013952:	6922      	ldr	r2, [r4, #16]
 8013954:	3202      	adds	r2, #2
 8013956:	f104 010c 	add.w	r1, r4, #12
 801395a:	0092      	lsls	r2, r2, #2
 801395c:	300c      	adds	r0, #12
 801395e:	f7fe fc47 	bl	80121f0 <memcpy>
 8013962:	4621      	mov	r1, r4
 8013964:	4638      	mov	r0, r7
 8013966:	f7ff ffa5 	bl	80138b4 <_Bfree>
 801396a:	4644      	mov	r4, r8
 801396c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013970:	3501      	adds	r5, #1
 8013972:	615e      	str	r6, [r3, #20]
 8013974:	6125      	str	r5, [r4, #16]
 8013976:	4620      	mov	r0, r4
 8013978:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801397c:	08015143 	.word	0x08015143
 8013980:	08015154 	.word	0x08015154

08013984 <__hi0bits>:
 8013984:	0c03      	lsrs	r3, r0, #16
 8013986:	041b      	lsls	r3, r3, #16
 8013988:	b9d3      	cbnz	r3, 80139c0 <__hi0bits+0x3c>
 801398a:	0400      	lsls	r0, r0, #16
 801398c:	2310      	movs	r3, #16
 801398e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8013992:	bf04      	itt	eq
 8013994:	0200      	lsleq	r0, r0, #8
 8013996:	3308      	addeq	r3, #8
 8013998:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801399c:	bf04      	itt	eq
 801399e:	0100      	lsleq	r0, r0, #4
 80139a0:	3304      	addeq	r3, #4
 80139a2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80139a6:	bf04      	itt	eq
 80139a8:	0080      	lsleq	r0, r0, #2
 80139aa:	3302      	addeq	r3, #2
 80139ac:	2800      	cmp	r0, #0
 80139ae:	db05      	blt.n	80139bc <__hi0bits+0x38>
 80139b0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80139b4:	f103 0301 	add.w	r3, r3, #1
 80139b8:	bf08      	it	eq
 80139ba:	2320      	moveq	r3, #32
 80139bc:	4618      	mov	r0, r3
 80139be:	4770      	bx	lr
 80139c0:	2300      	movs	r3, #0
 80139c2:	e7e4      	b.n	801398e <__hi0bits+0xa>

080139c4 <__lo0bits>:
 80139c4:	6803      	ldr	r3, [r0, #0]
 80139c6:	f013 0207 	ands.w	r2, r3, #7
 80139ca:	4601      	mov	r1, r0
 80139cc:	d00b      	beq.n	80139e6 <__lo0bits+0x22>
 80139ce:	07da      	lsls	r2, r3, #31
 80139d0:	d423      	bmi.n	8013a1a <__lo0bits+0x56>
 80139d2:	0798      	lsls	r0, r3, #30
 80139d4:	bf49      	itett	mi
 80139d6:	085b      	lsrmi	r3, r3, #1
 80139d8:	089b      	lsrpl	r3, r3, #2
 80139da:	2001      	movmi	r0, #1
 80139dc:	600b      	strmi	r3, [r1, #0]
 80139de:	bf5c      	itt	pl
 80139e0:	600b      	strpl	r3, [r1, #0]
 80139e2:	2002      	movpl	r0, #2
 80139e4:	4770      	bx	lr
 80139e6:	b298      	uxth	r0, r3
 80139e8:	b9a8      	cbnz	r0, 8013a16 <__lo0bits+0x52>
 80139ea:	0c1b      	lsrs	r3, r3, #16
 80139ec:	2010      	movs	r0, #16
 80139ee:	b2da      	uxtb	r2, r3
 80139f0:	b90a      	cbnz	r2, 80139f6 <__lo0bits+0x32>
 80139f2:	3008      	adds	r0, #8
 80139f4:	0a1b      	lsrs	r3, r3, #8
 80139f6:	071a      	lsls	r2, r3, #28
 80139f8:	bf04      	itt	eq
 80139fa:	091b      	lsreq	r3, r3, #4
 80139fc:	3004      	addeq	r0, #4
 80139fe:	079a      	lsls	r2, r3, #30
 8013a00:	bf04      	itt	eq
 8013a02:	089b      	lsreq	r3, r3, #2
 8013a04:	3002      	addeq	r0, #2
 8013a06:	07da      	lsls	r2, r3, #31
 8013a08:	d403      	bmi.n	8013a12 <__lo0bits+0x4e>
 8013a0a:	085b      	lsrs	r3, r3, #1
 8013a0c:	f100 0001 	add.w	r0, r0, #1
 8013a10:	d005      	beq.n	8013a1e <__lo0bits+0x5a>
 8013a12:	600b      	str	r3, [r1, #0]
 8013a14:	4770      	bx	lr
 8013a16:	4610      	mov	r0, r2
 8013a18:	e7e9      	b.n	80139ee <__lo0bits+0x2a>
 8013a1a:	2000      	movs	r0, #0
 8013a1c:	4770      	bx	lr
 8013a1e:	2020      	movs	r0, #32
 8013a20:	4770      	bx	lr
	...

08013a24 <__i2b>:
 8013a24:	b510      	push	{r4, lr}
 8013a26:	460c      	mov	r4, r1
 8013a28:	2101      	movs	r1, #1
 8013a2a:	f7ff ff03 	bl	8013834 <_Balloc>
 8013a2e:	4602      	mov	r2, r0
 8013a30:	b928      	cbnz	r0, 8013a3e <__i2b+0x1a>
 8013a32:	4b05      	ldr	r3, [pc, #20]	; (8013a48 <__i2b+0x24>)
 8013a34:	4805      	ldr	r0, [pc, #20]	; (8013a4c <__i2b+0x28>)
 8013a36:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8013a3a:	f000 fb85 	bl	8014148 <__assert_func>
 8013a3e:	2301      	movs	r3, #1
 8013a40:	6144      	str	r4, [r0, #20]
 8013a42:	6103      	str	r3, [r0, #16]
 8013a44:	bd10      	pop	{r4, pc}
 8013a46:	bf00      	nop
 8013a48:	08015143 	.word	0x08015143
 8013a4c:	08015154 	.word	0x08015154

08013a50 <__multiply>:
 8013a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a54:	4691      	mov	r9, r2
 8013a56:	690a      	ldr	r2, [r1, #16]
 8013a58:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8013a5c:	429a      	cmp	r2, r3
 8013a5e:	bfb8      	it	lt
 8013a60:	460b      	movlt	r3, r1
 8013a62:	460c      	mov	r4, r1
 8013a64:	bfbc      	itt	lt
 8013a66:	464c      	movlt	r4, r9
 8013a68:	4699      	movlt	r9, r3
 8013a6a:	6927      	ldr	r7, [r4, #16]
 8013a6c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8013a70:	68a3      	ldr	r3, [r4, #8]
 8013a72:	6861      	ldr	r1, [r4, #4]
 8013a74:	eb07 060a 	add.w	r6, r7, sl
 8013a78:	42b3      	cmp	r3, r6
 8013a7a:	b085      	sub	sp, #20
 8013a7c:	bfb8      	it	lt
 8013a7e:	3101      	addlt	r1, #1
 8013a80:	f7ff fed8 	bl	8013834 <_Balloc>
 8013a84:	b930      	cbnz	r0, 8013a94 <__multiply+0x44>
 8013a86:	4602      	mov	r2, r0
 8013a88:	4b44      	ldr	r3, [pc, #272]	; (8013b9c <__multiply+0x14c>)
 8013a8a:	4845      	ldr	r0, [pc, #276]	; (8013ba0 <__multiply+0x150>)
 8013a8c:	f240 115d 	movw	r1, #349	; 0x15d
 8013a90:	f000 fb5a 	bl	8014148 <__assert_func>
 8013a94:	f100 0514 	add.w	r5, r0, #20
 8013a98:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8013a9c:	462b      	mov	r3, r5
 8013a9e:	2200      	movs	r2, #0
 8013aa0:	4543      	cmp	r3, r8
 8013aa2:	d321      	bcc.n	8013ae8 <__multiply+0x98>
 8013aa4:	f104 0314 	add.w	r3, r4, #20
 8013aa8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8013aac:	f109 0314 	add.w	r3, r9, #20
 8013ab0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8013ab4:	9202      	str	r2, [sp, #8]
 8013ab6:	1b3a      	subs	r2, r7, r4
 8013ab8:	3a15      	subs	r2, #21
 8013aba:	f022 0203 	bic.w	r2, r2, #3
 8013abe:	3204      	adds	r2, #4
 8013ac0:	f104 0115 	add.w	r1, r4, #21
 8013ac4:	428f      	cmp	r7, r1
 8013ac6:	bf38      	it	cc
 8013ac8:	2204      	movcc	r2, #4
 8013aca:	9201      	str	r2, [sp, #4]
 8013acc:	9a02      	ldr	r2, [sp, #8]
 8013ace:	9303      	str	r3, [sp, #12]
 8013ad0:	429a      	cmp	r2, r3
 8013ad2:	d80c      	bhi.n	8013aee <__multiply+0x9e>
 8013ad4:	2e00      	cmp	r6, #0
 8013ad6:	dd03      	ble.n	8013ae0 <__multiply+0x90>
 8013ad8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8013adc:	2b00      	cmp	r3, #0
 8013ade:	d05a      	beq.n	8013b96 <__multiply+0x146>
 8013ae0:	6106      	str	r6, [r0, #16]
 8013ae2:	b005      	add	sp, #20
 8013ae4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ae8:	f843 2b04 	str.w	r2, [r3], #4
 8013aec:	e7d8      	b.n	8013aa0 <__multiply+0x50>
 8013aee:	f8b3 a000 	ldrh.w	sl, [r3]
 8013af2:	f1ba 0f00 	cmp.w	sl, #0
 8013af6:	d024      	beq.n	8013b42 <__multiply+0xf2>
 8013af8:	f104 0e14 	add.w	lr, r4, #20
 8013afc:	46a9      	mov	r9, r5
 8013afe:	f04f 0c00 	mov.w	ip, #0
 8013b02:	f85e 2b04 	ldr.w	r2, [lr], #4
 8013b06:	f8d9 1000 	ldr.w	r1, [r9]
 8013b0a:	fa1f fb82 	uxth.w	fp, r2
 8013b0e:	b289      	uxth	r1, r1
 8013b10:	fb0a 110b 	mla	r1, sl, fp, r1
 8013b14:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8013b18:	f8d9 2000 	ldr.w	r2, [r9]
 8013b1c:	4461      	add	r1, ip
 8013b1e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8013b22:	fb0a c20b 	mla	r2, sl, fp, ip
 8013b26:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8013b2a:	b289      	uxth	r1, r1
 8013b2c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8013b30:	4577      	cmp	r7, lr
 8013b32:	f849 1b04 	str.w	r1, [r9], #4
 8013b36:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8013b3a:	d8e2      	bhi.n	8013b02 <__multiply+0xb2>
 8013b3c:	9a01      	ldr	r2, [sp, #4]
 8013b3e:	f845 c002 	str.w	ip, [r5, r2]
 8013b42:	9a03      	ldr	r2, [sp, #12]
 8013b44:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8013b48:	3304      	adds	r3, #4
 8013b4a:	f1b9 0f00 	cmp.w	r9, #0
 8013b4e:	d020      	beq.n	8013b92 <__multiply+0x142>
 8013b50:	6829      	ldr	r1, [r5, #0]
 8013b52:	f104 0c14 	add.w	ip, r4, #20
 8013b56:	46ae      	mov	lr, r5
 8013b58:	f04f 0a00 	mov.w	sl, #0
 8013b5c:	f8bc b000 	ldrh.w	fp, [ip]
 8013b60:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8013b64:	fb09 220b 	mla	r2, r9, fp, r2
 8013b68:	4492      	add	sl, r2
 8013b6a:	b289      	uxth	r1, r1
 8013b6c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8013b70:	f84e 1b04 	str.w	r1, [lr], #4
 8013b74:	f85c 2b04 	ldr.w	r2, [ip], #4
 8013b78:	f8be 1000 	ldrh.w	r1, [lr]
 8013b7c:	0c12      	lsrs	r2, r2, #16
 8013b7e:	fb09 1102 	mla	r1, r9, r2, r1
 8013b82:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8013b86:	4567      	cmp	r7, ip
 8013b88:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8013b8c:	d8e6      	bhi.n	8013b5c <__multiply+0x10c>
 8013b8e:	9a01      	ldr	r2, [sp, #4]
 8013b90:	50a9      	str	r1, [r5, r2]
 8013b92:	3504      	adds	r5, #4
 8013b94:	e79a      	b.n	8013acc <__multiply+0x7c>
 8013b96:	3e01      	subs	r6, #1
 8013b98:	e79c      	b.n	8013ad4 <__multiply+0x84>
 8013b9a:	bf00      	nop
 8013b9c:	08015143 	.word	0x08015143
 8013ba0:	08015154 	.word	0x08015154

08013ba4 <__pow5mult>:
 8013ba4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013ba8:	4615      	mov	r5, r2
 8013baa:	f012 0203 	ands.w	r2, r2, #3
 8013bae:	4606      	mov	r6, r0
 8013bb0:	460f      	mov	r7, r1
 8013bb2:	d007      	beq.n	8013bc4 <__pow5mult+0x20>
 8013bb4:	4c25      	ldr	r4, [pc, #148]	; (8013c4c <__pow5mult+0xa8>)
 8013bb6:	3a01      	subs	r2, #1
 8013bb8:	2300      	movs	r3, #0
 8013bba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013bbe:	f7ff fe9b 	bl	80138f8 <__multadd>
 8013bc2:	4607      	mov	r7, r0
 8013bc4:	10ad      	asrs	r5, r5, #2
 8013bc6:	d03d      	beq.n	8013c44 <__pow5mult+0xa0>
 8013bc8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8013bca:	b97c      	cbnz	r4, 8013bec <__pow5mult+0x48>
 8013bcc:	2010      	movs	r0, #16
 8013bce:	f7ff fe29 	bl	8013824 <malloc>
 8013bd2:	4602      	mov	r2, r0
 8013bd4:	6270      	str	r0, [r6, #36]	; 0x24
 8013bd6:	b928      	cbnz	r0, 8013be4 <__pow5mult+0x40>
 8013bd8:	4b1d      	ldr	r3, [pc, #116]	; (8013c50 <__pow5mult+0xac>)
 8013bda:	481e      	ldr	r0, [pc, #120]	; (8013c54 <__pow5mult+0xb0>)
 8013bdc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8013be0:	f000 fab2 	bl	8014148 <__assert_func>
 8013be4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013be8:	6004      	str	r4, [r0, #0]
 8013bea:	60c4      	str	r4, [r0, #12]
 8013bec:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8013bf0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013bf4:	b94c      	cbnz	r4, 8013c0a <__pow5mult+0x66>
 8013bf6:	f240 2171 	movw	r1, #625	; 0x271
 8013bfa:	4630      	mov	r0, r6
 8013bfc:	f7ff ff12 	bl	8013a24 <__i2b>
 8013c00:	2300      	movs	r3, #0
 8013c02:	f8c8 0008 	str.w	r0, [r8, #8]
 8013c06:	4604      	mov	r4, r0
 8013c08:	6003      	str	r3, [r0, #0]
 8013c0a:	f04f 0900 	mov.w	r9, #0
 8013c0e:	07eb      	lsls	r3, r5, #31
 8013c10:	d50a      	bpl.n	8013c28 <__pow5mult+0x84>
 8013c12:	4639      	mov	r1, r7
 8013c14:	4622      	mov	r2, r4
 8013c16:	4630      	mov	r0, r6
 8013c18:	f7ff ff1a 	bl	8013a50 <__multiply>
 8013c1c:	4639      	mov	r1, r7
 8013c1e:	4680      	mov	r8, r0
 8013c20:	4630      	mov	r0, r6
 8013c22:	f7ff fe47 	bl	80138b4 <_Bfree>
 8013c26:	4647      	mov	r7, r8
 8013c28:	106d      	asrs	r5, r5, #1
 8013c2a:	d00b      	beq.n	8013c44 <__pow5mult+0xa0>
 8013c2c:	6820      	ldr	r0, [r4, #0]
 8013c2e:	b938      	cbnz	r0, 8013c40 <__pow5mult+0x9c>
 8013c30:	4622      	mov	r2, r4
 8013c32:	4621      	mov	r1, r4
 8013c34:	4630      	mov	r0, r6
 8013c36:	f7ff ff0b 	bl	8013a50 <__multiply>
 8013c3a:	6020      	str	r0, [r4, #0]
 8013c3c:	f8c0 9000 	str.w	r9, [r0]
 8013c40:	4604      	mov	r4, r0
 8013c42:	e7e4      	b.n	8013c0e <__pow5mult+0x6a>
 8013c44:	4638      	mov	r0, r7
 8013c46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013c4a:	bf00      	nop
 8013c4c:	080152a0 	.word	0x080152a0
 8013c50:	080150d1 	.word	0x080150d1
 8013c54:	08015154 	.word	0x08015154

08013c58 <__lshift>:
 8013c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013c5c:	460c      	mov	r4, r1
 8013c5e:	6849      	ldr	r1, [r1, #4]
 8013c60:	6923      	ldr	r3, [r4, #16]
 8013c62:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8013c66:	68a3      	ldr	r3, [r4, #8]
 8013c68:	4607      	mov	r7, r0
 8013c6a:	4691      	mov	r9, r2
 8013c6c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013c70:	f108 0601 	add.w	r6, r8, #1
 8013c74:	42b3      	cmp	r3, r6
 8013c76:	db0b      	blt.n	8013c90 <__lshift+0x38>
 8013c78:	4638      	mov	r0, r7
 8013c7a:	f7ff fddb 	bl	8013834 <_Balloc>
 8013c7e:	4605      	mov	r5, r0
 8013c80:	b948      	cbnz	r0, 8013c96 <__lshift+0x3e>
 8013c82:	4602      	mov	r2, r0
 8013c84:	4b2a      	ldr	r3, [pc, #168]	; (8013d30 <__lshift+0xd8>)
 8013c86:	482b      	ldr	r0, [pc, #172]	; (8013d34 <__lshift+0xdc>)
 8013c88:	f240 11d9 	movw	r1, #473	; 0x1d9
 8013c8c:	f000 fa5c 	bl	8014148 <__assert_func>
 8013c90:	3101      	adds	r1, #1
 8013c92:	005b      	lsls	r3, r3, #1
 8013c94:	e7ee      	b.n	8013c74 <__lshift+0x1c>
 8013c96:	2300      	movs	r3, #0
 8013c98:	f100 0114 	add.w	r1, r0, #20
 8013c9c:	f100 0210 	add.w	r2, r0, #16
 8013ca0:	4618      	mov	r0, r3
 8013ca2:	4553      	cmp	r3, sl
 8013ca4:	db37      	blt.n	8013d16 <__lshift+0xbe>
 8013ca6:	6920      	ldr	r0, [r4, #16]
 8013ca8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013cac:	f104 0314 	add.w	r3, r4, #20
 8013cb0:	f019 091f 	ands.w	r9, r9, #31
 8013cb4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013cb8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8013cbc:	d02f      	beq.n	8013d1e <__lshift+0xc6>
 8013cbe:	f1c9 0e20 	rsb	lr, r9, #32
 8013cc2:	468a      	mov	sl, r1
 8013cc4:	f04f 0c00 	mov.w	ip, #0
 8013cc8:	681a      	ldr	r2, [r3, #0]
 8013cca:	fa02 f209 	lsl.w	r2, r2, r9
 8013cce:	ea42 020c 	orr.w	r2, r2, ip
 8013cd2:	f84a 2b04 	str.w	r2, [sl], #4
 8013cd6:	f853 2b04 	ldr.w	r2, [r3], #4
 8013cda:	4298      	cmp	r0, r3
 8013cdc:	fa22 fc0e 	lsr.w	ip, r2, lr
 8013ce0:	d8f2      	bhi.n	8013cc8 <__lshift+0x70>
 8013ce2:	1b03      	subs	r3, r0, r4
 8013ce4:	3b15      	subs	r3, #21
 8013ce6:	f023 0303 	bic.w	r3, r3, #3
 8013cea:	3304      	adds	r3, #4
 8013cec:	f104 0215 	add.w	r2, r4, #21
 8013cf0:	4290      	cmp	r0, r2
 8013cf2:	bf38      	it	cc
 8013cf4:	2304      	movcc	r3, #4
 8013cf6:	f841 c003 	str.w	ip, [r1, r3]
 8013cfa:	f1bc 0f00 	cmp.w	ip, #0
 8013cfe:	d001      	beq.n	8013d04 <__lshift+0xac>
 8013d00:	f108 0602 	add.w	r6, r8, #2
 8013d04:	3e01      	subs	r6, #1
 8013d06:	4638      	mov	r0, r7
 8013d08:	612e      	str	r6, [r5, #16]
 8013d0a:	4621      	mov	r1, r4
 8013d0c:	f7ff fdd2 	bl	80138b4 <_Bfree>
 8013d10:	4628      	mov	r0, r5
 8013d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013d16:	f842 0f04 	str.w	r0, [r2, #4]!
 8013d1a:	3301      	adds	r3, #1
 8013d1c:	e7c1      	b.n	8013ca2 <__lshift+0x4a>
 8013d1e:	3904      	subs	r1, #4
 8013d20:	f853 2b04 	ldr.w	r2, [r3], #4
 8013d24:	f841 2f04 	str.w	r2, [r1, #4]!
 8013d28:	4298      	cmp	r0, r3
 8013d2a:	d8f9      	bhi.n	8013d20 <__lshift+0xc8>
 8013d2c:	e7ea      	b.n	8013d04 <__lshift+0xac>
 8013d2e:	bf00      	nop
 8013d30:	08015143 	.word	0x08015143
 8013d34:	08015154 	.word	0x08015154

08013d38 <__mcmp>:
 8013d38:	b530      	push	{r4, r5, lr}
 8013d3a:	6902      	ldr	r2, [r0, #16]
 8013d3c:	690c      	ldr	r4, [r1, #16]
 8013d3e:	1b12      	subs	r2, r2, r4
 8013d40:	d10e      	bne.n	8013d60 <__mcmp+0x28>
 8013d42:	f100 0314 	add.w	r3, r0, #20
 8013d46:	3114      	adds	r1, #20
 8013d48:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8013d4c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8013d50:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8013d54:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8013d58:	42a5      	cmp	r5, r4
 8013d5a:	d003      	beq.n	8013d64 <__mcmp+0x2c>
 8013d5c:	d305      	bcc.n	8013d6a <__mcmp+0x32>
 8013d5e:	2201      	movs	r2, #1
 8013d60:	4610      	mov	r0, r2
 8013d62:	bd30      	pop	{r4, r5, pc}
 8013d64:	4283      	cmp	r3, r0
 8013d66:	d3f3      	bcc.n	8013d50 <__mcmp+0x18>
 8013d68:	e7fa      	b.n	8013d60 <__mcmp+0x28>
 8013d6a:	f04f 32ff 	mov.w	r2, #4294967295
 8013d6e:	e7f7      	b.n	8013d60 <__mcmp+0x28>

08013d70 <__mdiff>:
 8013d70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d74:	460c      	mov	r4, r1
 8013d76:	4606      	mov	r6, r0
 8013d78:	4611      	mov	r1, r2
 8013d7a:	4620      	mov	r0, r4
 8013d7c:	4690      	mov	r8, r2
 8013d7e:	f7ff ffdb 	bl	8013d38 <__mcmp>
 8013d82:	1e05      	subs	r5, r0, #0
 8013d84:	d110      	bne.n	8013da8 <__mdiff+0x38>
 8013d86:	4629      	mov	r1, r5
 8013d88:	4630      	mov	r0, r6
 8013d8a:	f7ff fd53 	bl	8013834 <_Balloc>
 8013d8e:	b930      	cbnz	r0, 8013d9e <__mdiff+0x2e>
 8013d90:	4b3a      	ldr	r3, [pc, #232]	; (8013e7c <__mdiff+0x10c>)
 8013d92:	4602      	mov	r2, r0
 8013d94:	f240 2132 	movw	r1, #562	; 0x232
 8013d98:	4839      	ldr	r0, [pc, #228]	; (8013e80 <__mdiff+0x110>)
 8013d9a:	f000 f9d5 	bl	8014148 <__assert_func>
 8013d9e:	2301      	movs	r3, #1
 8013da0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8013da4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013da8:	bfa4      	itt	ge
 8013daa:	4643      	movge	r3, r8
 8013dac:	46a0      	movge	r8, r4
 8013dae:	4630      	mov	r0, r6
 8013db0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8013db4:	bfa6      	itte	ge
 8013db6:	461c      	movge	r4, r3
 8013db8:	2500      	movge	r5, #0
 8013dba:	2501      	movlt	r5, #1
 8013dbc:	f7ff fd3a 	bl	8013834 <_Balloc>
 8013dc0:	b920      	cbnz	r0, 8013dcc <__mdiff+0x5c>
 8013dc2:	4b2e      	ldr	r3, [pc, #184]	; (8013e7c <__mdiff+0x10c>)
 8013dc4:	4602      	mov	r2, r0
 8013dc6:	f44f 7110 	mov.w	r1, #576	; 0x240
 8013dca:	e7e5      	b.n	8013d98 <__mdiff+0x28>
 8013dcc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8013dd0:	6926      	ldr	r6, [r4, #16]
 8013dd2:	60c5      	str	r5, [r0, #12]
 8013dd4:	f104 0914 	add.w	r9, r4, #20
 8013dd8:	f108 0514 	add.w	r5, r8, #20
 8013ddc:	f100 0e14 	add.w	lr, r0, #20
 8013de0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8013de4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8013de8:	f108 0210 	add.w	r2, r8, #16
 8013dec:	46f2      	mov	sl, lr
 8013dee:	2100      	movs	r1, #0
 8013df0:	f859 3b04 	ldr.w	r3, [r9], #4
 8013df4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8013df8:	fa1f f883 	uxth.w	r8, r3
 8013dfc:	fa11 f18b 	uxtah	r1, r1, fp
 8013e00:	0c1b      	lsrs	r3, r3, #16
 8013e02:	eba1 0808 	sub.w	r8, r1, r8
 8013e06:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8013e0a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8013e0e:	fa1f f888 	uxth.w	r8, r8
 8013e12:	1419      	asrs	r1, r3, #16
 8013e14:	454e      	cmp	r6, r9
 8013e16:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8013e1a:	f84a 3b04 	str.w	r3, [sl], #4
 8013e1e:	d8e7      	bhi.n	8013df0 <__mdiff+0x80>
 8013e20:	1b33      	subs	r3, r6, r4
 8013e22:	3b15      	subs	r3, #21
 8013e24:	f023 0303 	bic.w	r3, r3, #3
 8013e28:	3304      	adds	r3, #4
 8013e2a:	3415      	adds	r4, #21
 8013e2c:	42a6      	cmp	r6, r4
 8013e2e:	bf38      	it	cc
 8013e30:	2304      	movcc	r3, #4
 8013e32:	441d      	add	r5, r3
 8013e34:	4473      	add	r3, lr
 8013e36:	469e      	mov	lr, r3
 8013e38:	462e      	mov	r6, r5
 8013e3a:	4566      	cmp	r6, ip
 8013e3c:	d30e      	bcc.n	8013e5c <__mdiff+0xec>
 8013e3e:	f10c 0203 	add.w	r2, ip, #3
 8013e42:	1b52      	subs	r2, r2, r5
 8013e44:	f022 0203 	bic.w	r2, r2, #3
 8013e48:	3d03      	subs	r5, #3
 8013e4a:	45ac      	cmp	ip, r5
 8013e4c:	bf38      	it	cc
 8013e4e:	2200      	movcc	r2, #0
 8013e50:	441a      	add	r2, r3
 8013e52:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8013e56:	b17b      	cbz	r3, 8013e78 <__mdiff+0x108>
 8013e58:	6107      	str	r7, [r0, #16]
 8013e5a:	e7a3      	b.n	8013da4 <__mdiff+0x34>
 8013e5c:	f856 8b04 	ldr.w	r8, [r6], #4
 8013e60:	fa11 f288 	uxtah	r2, r1, r8
 8013e64:	1414      	asrs	r4, r2, #16
 8013e66:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8013e6a:	b292      	uxth	r2, r2
 8013e6c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8013e70:	f84e 2b04 	str.w	r2, [lr], #4
 8013e74:	1421      	asrs	r1, r4, #16
 8013e76:	e7e0      	b.n	8013e3a <__mdiff+0xca>
 8013e78:	3f01      	subs	r7, #1
 8013e7a:	e7ea      	b.n	8013e52 <__mdiff+0xe2>
 8013e7c:	08015143 	.word	0x08015143
 8013e80:	08015154 	.word	0x08015154

08013e84 <__d2b>:
 8013e84:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013e88:	4689      	mov	r9, r1
 8013e8a:	2101      	movs	r1, #1
 8013e8c:	ec57 6b10 	vmov	r6, r7, d0
 8013e90:	4690      	mov	r8, r2
 8013e92:	f7ff fccf 	bl	8013834 <_Balloc>
 8013e96:	4604      	mov	r4, r0
 8013e98:	b930      	cbnz	r0, 8013ea8 <__d2b+0x24>
 8013e9a:	4602      	mov	r2, r0
 8013e9c:	4b25      	ldr	r3, [pc, #148]	; (8013f34 <__d2b+0xb0>)
 8013e9e:	4826      	ldr	r0, [pc, #152]	; (8013f38 <__d2b+0xb4>)
 8013ea0:	f240 310a 	movw	r1, #778	; 0x30a
 8013ea4:	f000 f950 	bl	8014148 <__assert_func>
 8013ea8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8013eac:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8013eb0:	bb35      	cbnz	r5, 8013f00 <__d2b+0x7c>
 8013eb2:	2e00      	cmp	r6, #0
 8013eb4:	9301      	str	r3, [sp, #4]
 8013eb6:	d028      	beq.n	8013f0a <__d2b+0x86>
 8013eb8:	4668      	mov	r0, sp
 8013eba:	9600      	str	r6, [sp, #0]
 8013ebc:	f7ff fd82 	bl	80139c4 <__lo0bits>
 8013ec0:	9900      	ldr	r1, [sp, #0]
 8013ec2:	b300      	cbz	r0, 8013f06 <__d2b+0x82>
 8013ec4:	9a01      	ldr	r2, [sp, #4]
 8013ec6:	f1c0 0320 	rsb	r3, r0, #32
 8013eca:	fa02 f303 	lsl.w	r3, r2, r3
 8013ece:	430b      	orrs	r3, r1
 8013ed0:	40c2      	lsrs	r2, r0
 8013ed2:	6163      	str	r3, [r4, #20]
 8013ed4:	9201      	str	r2, [sp, #4]
 8013ed6:	9b01      	ldr	r3, [sp, #4]
 8013ed8:	61a3      	str	r3, [r4, #24]
 8013eda:	2b00      	cmp	r3, #0
 8013edc:	bf14      	ite	ne
 8013ede:	2202      	movne	r2, #2
 8013ee0:	2201      	moveq	r2, #1
 8013ee2:	6122      	str	r2, [r4, #16]
 8013ee4:	b1d5      	cbz	r5, 8013f1c <__d2b+0x98>
 8013ee6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8013eea:	4405      	add	r5, r0
 8013eec:	f8c9 5000 	str.w	r5, [r9]
 8013ef0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8013ef4:	f8c8 0000 	str.w	r0, [r8]
 8013ef8:	4620      	mov	r0, r4
 8013efa:	b003      	add	sp, #12
 8013efc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013f00:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013f04:	e7d5      	b.n	8013eb2 <__d2b+0x2e>
 8013f06:	6161      	str	r1, [r4, #20]
 8013f08:	e7e5      	b.n	8013ed6 <__d2b+0x52>
 8013f0a:	a801      	add	r0, sp, #4
 8013f0c:	f7ff fd5a 	bl	80139c4 <__lo0bits>
 8013f10:	9b01      	ldr	r3, [sp, #4]
 8013f12:	6163      	str	r3, [r4, #20]
 8013f14:	2201      	movs	r2, #1
 8013f16:	6122      	str	r2, [r4, #16]
 8013f18:	3020      	adds	r0, #32
 8013f1a:	e7e3      	b.n	8013ee4 <__d2b+0x60>
 8013f1c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013f20:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8013f24:	f8c9 0000 	str.w	r0, [r9]
 8013f28:	6918      	ldr	r0, [r3, #16]
 8013f2a:	f7ff fd2b 	bl	8013984 <__hi0bits>
 8013f2e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8013f32:	e7df      	b.n	8013ef4 <__d2b+0x70>
 8013f34:	08015143 	.word	0x08015143
 8013f38:	08015154 	.word	0x08015154

08013f3c <_calloc_r>:
 8013f3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013f3e:	fba1 2402 	umull	r2, r4, r1, r2
 8013f42:	b94c      	cbnz	r4, 8013f58 <_calloc_r+0x1c>
 8013f44:	4611      	mov	r1, r2
 8013f46:	9201      	str	r2, [sp, #4]
 8013f48:	f000 f87a 	bl	8014040 <_malloc_r>
 8013f4c:	9a01      	ldr	r2, [sp, #4]
 8013f4e:	4605      	mov	r5, r0
 8013f50:	b930      	cbnz	r0, 8013f60 <_calloc_r+0x24>
 8013f52:	4628      	mov	r0, r5
 8013f54:	b003      	add	sp, #12
 8013f56:	bd30      	pop	{r4, r5, pc}
 8013f58:	220c      	movs	r2, #12
 8013f5a:	6002      	str	r2, [r0, #0]
 8013f5c:	2500      	movs	r5, #0
 8013f5e:	e7f8      	b.n	8013f52 <_calloc_r+0x16>
 8013f60:	4621      	mov	r1, r4
 8013f62:	f7fe f96d 	bl	8012240 <memset>
 8013f66:	e7f4      	b.n	8013f52 <_calloc_r+0x16>

08013f68 <_free_r>:
 8013f68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013f6a:	2900      	cmp	r1, #0
 8013f6c:	d044      	beq.n	8013ff8 <_free_r+0x90>
 8013f6e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013f72:	9001      	str	r0, [sp, #4]
 8013f74:	2b00      	cmp	r3, #0
 8013f76:	f1a1 0404 	sub.w	r4, r1, #4
 8013f7a:	bfb8      	it	lt
 8013f7c:	18e4      	addlt	r4, r4, r3
 8013f7e:	f000 f925 	bl	80141cc <__malloc_lock>
 8013f82:	4a1e      	ldr	r2, [pc, #120]	; (8013ffc <_free_r+0x94>)
 8013f84:	9801      	ldr	r0, [sp, #4]
 8013f86:	6813      	ldr	r3, [r2, #0]
 8013f88:	b933      	cbnz	r3, 8013f98 <_free_r+0x30>
 8013f8a:	6063      	str	r3, [r4, #4]
 8013f8c:	6014      	str	r4, [r2, #0]
 8013f8e:	b003      	add	sp, #12
 8013f90:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013f94:	f000 b920 	b.w	80141d8 <__malloc_unlock>
 8013f98:	42a3      	cmp	r3, r4
 8013f9a:	d908      	bls.n	8013fae <_free_r+0x46>
 8013f9c:	6825      	ldr	r5, [r4, #0]
 8013f9e:	1961      	adds	r1, r4, r5
 8013fa0:	428b      	cmp	r3, r1
 8013fa2:	bf01      	itttt	eq
 8013fa4:	6819      	ldreq	r1, [r3, #0]
 8013fa6:	685b      	ldreq	r3, [r3, #4]
 8013fa8:	1949      	addeq	r1, r1, r5
 8013faa:	6021      	streq	r1, [r4, #0]
 8013fac:	e7ed      	b.n	8013f8a <_free_r+0x22>
 8013fae:	461a      	mov	r2, r3
 8013fb0:	685b      	ldr	r3, [r3, #4]
 8013fb2:	b10b      	cbz	r3, 8013fb8 <_free_r+0x50>
 8013fb4:	42a3      	cmp	r3, r4
 8013fb6:	d9fa      	bls.n	8013fae <_free_r+0x46>
 8013fb8:	6811      	ldr	r1, [r2, #0]
 8013fba:	1855      	adds	r5, r2, r1
 8013fbc:	42a5      	cmp	r5, r4
 8013fbe:	d10b      	bne.n	8013fd8 <_free_r+0x70>
 8013fc0:	6824      	ldr	r4, [r4, #0]
 8013fc2:	4421      	add	r1, r4
 8013fc4:	1854      	adds	r4, r2, r1
 8013fc6:	42a3      	cmp	r3, r4
 8013fc8:	6011      	str	r1, [r2, #0]
 8013fca:	d1e0      	bne.n	8013f8e <_free_r+0x26>
 8013fcc:	681c      	ldr	r4, [r3, #0]
 8013fce:	685b      	ldr	r3, [r3, #4]
 8013fd0:	6053      	str	r3, [r2, #4]
 8013fd2:	4421      	add	r1, r4
 8013fd4:	6011      	str	r1, [r2, #0]
 8013fd6:	e7da      	b.n	8013f8e <_free_r+0x26>
 8013fd8:	d902      	bls.n	8013fe0 <_free_r+0x78>
 8013fda:	230c      	movs	r3, #12
 8013fdc:	6003      	str	r3, [r0, #0]
 8013fde:	e7d6      	b.n	8013f8e <_free_r+0x26>
 8013fe0:	6825      	ldr	r5, [r4, #0]
 8013fe2:	1961      	adds	r1, r4, r5
 8013fe4:	428b      	cmp	r3, r1
 8013fe6:	bf04      	itt	eq
 8013fe8:	6819      	ldreq	r1, [r3, #0]
 8013fea:	685b      	ldreq	r3, [r3, #4]
 8013fec:	6063      	str	r3, [r4, #4]
 8013fee:	bf04      	itt	eq
 8013ff0:	1949      	addeq	r1, r1, r5
 8013ff2:	6021      	streq	r1, [r4, #0]
 8013ff4:	6054      	str	r4, [r2, #4]
 8013ff6:	e7ca      	b.n	8013f8e <_free_r+0x26>
 8013ff8:	b003      	add	sp, #12
 8013ffa:	bd30      	pop	{r4, r5, pc}
 8013ffc:	20004fc8 	.word	0x20004fc8

08014000 <sbrk_aligned>:
 8014000:	b570      	push	{r4, r5, r6, lr}
 8014002:	4e0e      	ldr	r6, [pc, #56]	; (801403c <sbrk_aligned+0x3c>)
 8014004:	460c      	mov	r4, r1
 8014006:	6831      	ldr	r1, [r6, #0]
 8014008:	4605      	mov	r5, r0
 801400a:	b911      	cbnz	r1, 8014012 <sbrk_aligned+0x12>
 801400c:	f000 f88c 	bl	8014128 <_sbrk_r>
 8014010:	6030      	str	r0, [r6, #0]
 8014012:	4621      	mov	r1, r4
 8014014:	4628      	mov	r0, r5
 8014016:	f000 f887 	bl	8014128 <_sbrk_r>
 801401a:	1c43      	adds	r3, r0, #1
 801401c:	d00a      	beq.n	8014034 <sbrk_aligned+0x34>
 801401e:	1cc4      	adds	r4, r0, #3
 8014020:	f024 0403 	bic.w	r4, r4, #3
 8014024:	42a0      	cmp	r0, r4
 8014026:	d007      	beq.n	8014038 <sbrk_aligned+0x38>
 8014028:	1a21      	subs	r1, r4, r0
 801402a:	4628      	mov	r0, r5
 801402c:	f000 f87c 	bl	8014128 <_sbrk_r>
 8014030:	3001      	adds	r0, #1
 8014032:	d101      	bne.n	8014038 <sbrk_aligned+0x38>
 8014034:	f04f 34ff 	mov.w	r4, #4294967295
 8014038:	4620      	mov	r0, r4
 801403a:	bd70      	pop	{r4, r5, r6, pc}
 801403c:	20004fcc 	.word	0x20004fcc

08014040 <_malloc_r>:
 8014040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014044:	1ccd      	adds	r5, r1, #3
 8014046:	f025 0503 	bic.w	r5, r5, #3
 801404a:	3508      	adds	r5, #8
 801404c:	2d0c      	cmp	r5, #12
 801404e:	bf38      	it	cc
 8014050:	250c      	movcc	r5, #12
 8014052:	2d00      	cmp	r5, #0
 8014054:	4607      	mov	r7, r0
 8014056:	db01      	blt.n	801405c <_malloc_r+0x1c>
 8014058:	42a9      	cmp	r1, r5
 801405a:	d905      	bls.n	8014068 <_malloc_r+0x28>
 801405c:	230c      	movs	r3, #12
 801405e:	603b      	str	r3, [r7, #0]
 8014060:	2600      	movs	r6, #0
 8014062:	4630      	mov	r0, r6
 8014064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014068:	4e2e      	ldr	r6, [pc, #184]	; (8014124 <_malloc_r+0xe4>)
 801406a:	f000 f8af 	bl	80141cc <__malloc_lock>
 801406e:	6833      	ldr	r3, [r6, #0]
 8014070:	461c      	mov	r4, r3
 8014072:	bb34      	cbnz	r4, 80140c2 <_malloc_r+0x82>
 8014074:	4629      	mov	r1, r5
 8014076:	4638      	mov	r0, r7
 8014078:	f7ff ffc2 	bl	8014000 <sbrk_aligned>
 801407c:	1c43      	adds	r3, r0, #1
 801407e:	4604      	mov	r4, r0
 8014080:	d14d      	bne.n	801411e <_malloc_r+0xde>
 8014082:	6834      	ldr	r4, [r6, #0]
 8014084:	4626      	mov	r6, r4
 8014086:	2e00      	cmp	r6, #0
 8014088:	d140      	bne.n	801410c <_malloc_r+0xcc>
 801408a:	6823      	ldr	r3, [r4, #0]
 801408c:	4631      	mov	r1, r6
 801408e:	4638      	mov	r0, r7
 8014090:	eb04 0803 	add.w	r8, r4, r3
 8014094:	f000 f848 	bl	8014128 <_sbrk_r>
 8014098:	4580      	cmp	r8, r0
 801409a:	d13a      	bne.n	8014112 <_malloc_r+0xd2>
 801409c:	6821      	ldr	r1, [r4, #0]
 801409e:	3503      	adds	r5, #3
 80140a0:	1a6d      	subs	r5, r5, r1
 80140a2:	f025 0503 	bic.w	r5, r5, #3
 80140a6:	3508      	adds	r5, #8
 80140a8:	2d0c      	cmp	r5, #12
 80140aa:	bf38      	it	cc
 80140ac:	250c      	movcc	r5, #12
 80140ae:	4629      	mov	r1, r5
 80140b0:	4638      	mov	r0, r7
 80140b2:	f7ff ffa5 	bl	8014000 <sbrk_aligned>
 80140b6:	3001      	adds	r0, #1
 80140b8:	d02b      	beq.n	8014112 <_malloc_r+0xd2>
 80140ba:	6823      	ldr	r3, [r4, #0]
 80140bc:	442b      	add	r3, r5
 80140be:	6023      	str	r3, [r4, #0]
 80140c0:	e00e      	b.n	80140e0 <_malloc_r+0xa0>
 80140c2:	6822      	ldr	r2, [r4, #0]
 80140c4:	1b52      	subs	r2, r2, r5
 80140c6:	d41e      	bmi.n	8014106 <_malloc_r+0xc6>
 80140c8:	2a0b      	cmp	r2, #11
 80140ca:	d916      	bls.n	80140fa <_malloc_r+0xba>
 80140cc:	1961      	adds	r1, r4, r5
 80140ce:	42a3      	cmp	r3, r4
 80140d0:	6025      	str	r5, [r4, #0]
 80140d2:	bf18      	it	ne
 80140d4:	6059      	strne	r1, [r3, #4]
 80140d6:	6863      	ldr	r3, [r4, #4]
 80140d8:	bf08      	it	eq
 80140da:	6031      	streq	r1, [r6, #0]
 80140dc:	5162      	str	r2, [r4, r5]
 80140de:	604b      	str	r3, [r1, #4]
 80140e0:	4638      	mov	r0, r7
 80140e2:	f104 060b 	add.w	r6, r4, #11
 80140e6:	f000 f877 	bl	80141d8 <__malloc_unlock>
 80140ea:	f026 0607 	bic.w	r6, r6, #7
 80140ee:	1d23      	adds	r3, r4, #4
 80140f0:	1af2      	subs	r2, r6, r3
 80140f2:	d0b6      	beq.n	8014062 <_malloc_r+0x22>
 80140f4:	1b9b      	subs	r3, r3, r6
 80140f6:	50a3      	str	r3, [r4, r2]
 80140f8:	e7b3      	b.n	8014062 <_malloc_r+0x22>
 80140fa:	6862      	ldr	r2, [r4, #4]
 80140fc:	42a3      	cmp	r3, r4
 80140fe:	bf0c      	ite	eq
 8014100:	6032      	streq	r2, [r6, #0]
 8014102:	605a      	strne	r2, [r3, #4]
 8014104:	e7ec      	b.n	80140e0 <_malloc_r+0xa0>
 8014106:	4623      	mov	r3, r4
 8014108:	6864      	ldr	r4, [r4, #4]
 801410a:	e7b2      	b.n	8014072 <_malloc_r+0x32>
 801410c:	4634      	mov	r4, r6
 801410e:	6876      	ldr	r6, [r6, #4]
 8014110:	e7b9      	b.n	8014086 <_malloc_r+0x46>
 8014112:	230c      	movs	r3, #12
 8014114:	603b      	str	r3, [r7, #0]
 8014116:	4638      	mov	r0, r7
 8014118:	f000 f85e 	bl	80141d8 <__malloc_unlock>
 801411c:	e7a1      	b.n	8014062 <_malloc_r+0x22>
 801411e:	6025      	str	r5, [r4, #0]
 8014120:	e7de      	b.n	80140e0 <_malloc_r+0xa0>
 8014122:	bf00      	nop
 8014124:	20004fc8 	.word	0x20004fc8

08014128 <_sbrk_r>:
 8014128:	b538      	push	{r3, r4, r5, lr}
 801412a:	4d06      	ldr	r5, [pc, #24]	; (8014144 <_sbrk_r+0x1c>)
 801412c:	2300      	movs	r3, #0
 801412e:	4604      	mov	r4, r0
 8014130:	4608      	mov	r0, r1
 8014132:	602b      	str	r3, [r5, #0]
 8014134:	f7f0 fa8c 	bl	8004650 <_sbrk>
 8014138:	1c43      	adds	r3, r0, #1
 801413a:	d102      	bne.n	8014142 <_sbrk_r+0x1a>
 801413c:	682b      	ldr	r3, [r5, #0]
 801413e:	b103      	cbz	r3, 8014142 <_sbrk_r+0x1a>
 8014140:	6023      	str	r3, [r4, #0]
 8014142:	bd38      	pop	{r3, r4, r5, pc}
 8014144:	20004fd0 	.word	0x20004fd0

08014148 <__assert_func>:
 8014148:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801414a:	4614      	mov	r4, r2
 801414c:	461a      	mov	r2, r3
 801414e:	4b09      	ldr	r3, [pc, #36]	; (8014174 <__assert_func+0x2c>)
 8014150:	681b      	ldr	r3, [r3, #0]
 8014152:	4605      	mov	r5, r0
 8014154:	68d8      	ldr	r0, [r3, #12]
 8014156:	b14c      	cbz	r4, 801416c <__assert_func+0x24>
 8014158:	4b07      	ldr	r3, [pc, #28]	; (8014178 <__assert_func+0x30>)
 801415a:	9100      	str	r1, [sp, #0]
 801415c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014160:	4906      	ldr	r1, [pc, #24]	; (801417c <__assert_func+0x34>)
 8014162:	462b      	mov	r3, r5
 8014164:	f000 f80e 	bl	8014184 <fiprintf>
 8014168:	f000 fa64 	bl	8014634 <abort>
 801416c:	4b04      	ldr	r3, [pc, #16]	; (8014180 <__assert_func+0x38>)
 801416e:	461c      	mov	r4, r3
 8014170:	e7f3      	b.n	801415a <__assert_func+0x12>
 8014172:	bf00      	nop
 8014174:	20000318 	.word	0x20000318
 8014178:	080152ac 	.word	0x080152ac
 801417c:	080152b9 	.word	0x080152b9
 8014180:	080152e7 	.word	0x080152e7

08014184 <fiprintf>:
 8014184:	b40e      	push	{r1, r2, r3}
 8014186:	b503      	push	{r0, r1, lr}
 8014188:	4601      	mov	r1, r0
 801418a:	ab03      	add	r3, sp, #12
 801418c:	4805      	ldr	r0, [pc, #20]	; (80141a4 <fiprintf+0x20>)
 801418e:	f853 2b04 	ldr.w	r2, [r3], #4
 8014192:	6800      	ldr	r0, [r0, #0]
 8014194:	9301      	str	r3, [sp, #4]
 8014196:	f000 f84f 	bl	8014238 <_vfiprintf_r>
 801419a:	b002      	add	sp, #8
 801419c:	f85d eb04 	ldr.w	lr, [sp], #4
 80141a0:	b003      	add	sp, #12
 80141a2:	4770      	bx	lr
 80141a4:	20000318 	.word	0x20000318

080141a8 <__ascii_mbtowc>:
 80141a8:	b082      	sub	sp, #8
 80141aa:	b901      	cbnz	r1, 80141ae <__ascii_mbtowc+0x6>
 80141ac:	a901      	add	r1, sp, #4
 80141ae:	b142      	cbz	r2, 80141c2 <__ascii_mbtowc+0x1a>
 80141b0:	b14b      	cbz	r3, 80141c6 <__ascii_mbtowc+0x1e>
 80141b2:	7813      	ldrb	r3, [r2, #0]
 80141b4:	600b      	str	r3, [r1, #0]
 80141b6:	7812      	ldrb	r2, [r2, #0]
 80141b8:	1e10      	subs	r0, r2, #0
 80141ba:	bf18      	it	ne
 80141bc:	2001      	movne	r0, #1
 80141be:	b002      	add	sp, #8
 80141c0:	4770      	bx	lr
 80141c2:	4610      	mov	r0, r2
 80141c4:	e7fb      	b.n	80141be <__ascii_mbtowc+0x16>
 80141c6:	f06f 0001 	mvn.w	r0, #1
 80141ca:	e7f8      	b.n	80141be <__ascii_mbtowc+0x16>

080141cc <__malloc_lock>:
 80141cc:	4801      	ldr	r0, [pc, #4]	; (80141d4 <__malloc_lock+0x8>)
 80141ce:	f000 bbf1 	b.w	80149b4 <__retarget_lock_acquire_recursive>
 80141d2:	bf00      	nop
 80141d4:	20004fd4 	.word	0x20004fd4

080141d8 <__malloc_unlock>:
 80141d8:	4801      	ldr	r0, [pc, #4]	; (80141e0 <__malloc_unlock+0x8>)
 80141da:	f000 bbec 	b.w	80149b6 <__retarget_lock_release_recursive>
 80141de:	bf00      	nop
 80141e0:	20004fd4 	.word	0x20004fd4

080141e4 <__sfputc_r>:
 80141e4:	6893      	ldr	r3, [r2, #8]
 80141e6:	3b01      	subs	r3, #1
 80141e8:	2b00      	cmp	r3, #0
 80141ea:	b410      	push	{r4}
 80141ec:	6093      	str	r3, [r2, #8]
 80141ee:	da08      	bge.n	8014202 <__sfputc_r+0x1e>
 80141f0:	6994      	ldr	r4, [r2, #24]
 80141f2:	42a3      	cmp	r3, r4
 80141f4:	db01      	blt.n	80141fa <__sfputc_r+0x16>
 80141f6:	290a      	cmp	r1, #10
 80141f8:	d103      	bne.n	8014202 <__sfputc_r+0x1e>
 80141fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80141fe:	f000 b94b 	b.w	8014498 <__swbuf_r>
 8014202:	6813      	ldr	r3, [r2, #0]
 8014204:	1c58      	adds	r0, r3, #1
 8014206:	6010      	str	r0, [r2, #0]
 8014208:	7019      	strb	r1, [r3, #0]
 801420a:	4608      	mov	r0, r1
 801420c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014210:	4770      	bx	lr

08014212 <__sfputs_r>:
 8014212:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014214:	4606      	mov	r6, r0
 8014216:	460f      	mov	r7, r1
 8014218:	4614      	mov	r4, r2
 801421a:	18d5      	adds	r5, r2, r3
 801421c:	42ac      	cmp	r4, r5
 801421e:	d101      	bne.n	8014224 <__sfputs_r+0x12>
 8014220:	2000      	movs	r0, #0
 8014222:	e007      	b.n	8014234 <__sfputs_r+0x22>
 8014224:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014228:	463a      	mov	r2, r7
 801422a:	4630      	mov	r0, r6
 801422c:	f7ff ffda 	bl	80141e4 <__sfputc_r>
 8014230:	1c43      	adds	r3, r0, #1
 8014232:	d1f3      	bne.n	801421c <__sfputs_r+0xa>
 8014234:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014238 <_vfiprintf_r>:
 8014238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801423c:	460d      	mov	r5, r1
 801423e:	b09d      	sub	sp, #116	; 0x74
 8014240:	4614      	mov	r4, r2
 8014242:	4698      	mov	r8, r3
 8014244:	4606      	mov	r6, r0
 8014246:	b118      	cbz	r0, 8014250 <_vfiprintf_r+0x18>
 8014248:	6983      	ldr	r3, [r0, #24]
 801424a:	b90b      	cbnz	r3, 8014250 <_vfiprintf_r+0x18>
 801424c:	f000 fb14 	bl	8014878 <__sinit>
 8014250:	4b89      	ldr	r3, [pc, #548]	; (8014478 <_vfiprintf_r+0x240>)
 8014252:	429d      	cmp	r5, r3
 8014254:	d11b      	bne.n	801428e <_vfiprintf_r+0x56>
 8014256:	6875      	ldr	r5, [r6, #4]
 8014258:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801425a:	07d9      	lsls	r1, r3, #31
 801425c:	d405      	bmi.n	801426a <_vfiprintf_r+0x32>
 801425e:	89ab      	ldrh	r3, [r5, #12]
 8014260:	059a      	lsls	r2, r3, #22
 8014262:	d402      	bmi.n	801426a <_vfiprintf_r+0x32>
 8014264:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014266:	f000 fba5 	bl	80149b4 <__retarget_lock_acquire_recursive>
 801426a:	89ab      	ldrh	r3, [r5, #12]
 801426c:	071b      	lsls	r3, r3, #28
 801426e:	d501      	bpl.n	8014274 <_vfiprintf_r+0x3c>
 8014270:	692b      	ldr	r3, [r5, #16]
 8014272:	b9eb      	cbnz	r3, 80142b0 <_vfiprintf_r+0x78>
 8014274:	4629      	mov	r1, r5
 8014276:	4630      	mov	r0, r6
 8014278:	f000 f96e 	bl	8014558 <__swsetup_r>
 801427c:	b1c0      	cbz	r0, 80142b0 <_vfiprintf_r+0x78>
 801427e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014280:	07dc      	lsls	r4, r3, #31
 8014282:	d50e      	bpl.n	80142a2 <_vfiprintf_r+0x6a>
 8014284:	f04f 30ff 	mov.w	r0, #4294967295
 8014288:	b01d      	add	sp, #116	; 0x74
 801428a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801428e:	4b7b      	ldr	r3, [pc, #492]	; (801447c <_vfiprintf_r+0x244>)
 8014290:	429d      	cmp	r5, r3
 8014292:	d101      	bne.n	8014298 <_vfiprintf_r+0x60>
 8014294:	68b5      	ldr	r5, [r6, #8]
 8014296:	e7df      	b.n	8014258 <_vfiprintf_r+0x20>
 8014298:	4b79      	ldr	r3, [pc, #484]	; (8014480 <_vfiprintf_r+0x248>)
 801429a:	429d      	cmp	r5, r3
 801429c:	bf08      	it	eq
 801429e:	68f5      	ldreq	r5, [r6, #12]
 80142a0:	e7da      	b.n	8014258 <_vfiprintf_r+0x20>
 80142a2:	89ab      	ldrh	r3, [r5, #12]
 80142a4:	0598      	lsls	r0, r3, #22
 80142a6:	d4ed      	bmi.n	8014284 <_vfiprintf_r+0x4c>
 80142a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80142aa:	f000 fb84 	bl	80149b6 <__retarget_lock_release_recursive>
 80142ae:	e7e9      	b.n	8014284 <_vfiprintf_r+0x4c>
 80142b0:	2300      	movs	r3, #0
 80142b2:	9309      	str	r3, [sp, #36]	; 0x24
 80142b4:	2320      	movs	r3, #32
 80142b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80142ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80142be:	2330      	movs	r3, #48	; 0x30
 80142c0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8014484 <_vfiprintf_r+0x24c>
 80142c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80142c8:	f04f 0901 	mov.w	r9, #1
 80142cc:	4623      	mov	r3, r4
 80142ce:	469a      	mov	sl, r3
 80142d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80142d4:	b10a      	cbz	r2, 80142da <_vfiprintf_r+0xa2>
 80142d6:	2a25      	cmp	r2, #37	; 0x25
 80142d8:	d1f9      	bne.n	80142ce <_vfiprintf_r+0x96>
 80142da:	ebba 0b04 	subs.w	fp, sl, r4
 80142de:	d00b      	beq.n	80142f8 <_vfiprintf_r+0xc0>
 80142e0:	465b      	mov	r3, fp
 80142e2:	4622      	mov	r2, r4
 80142e4:	4629      	mov	r1, r5
 80142e6:	4630      	mov	r0, r6
 80142e8:	f7ff ff93 	bl	8014212 <__sfputs_r>
 80142ec:	3001      	adds	r0, #1
 80142ee:	f000 80aa 	beq.w	8014446 <_vfiprintf_r+0x20e>
 80142f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80142f4:	445a      	add	r2, fp
 80142f6:	9209      	str	r2, [sp, #36]	; 0x24
 80142f8:	f89a 3000 	ldrb.w	r3, [sl]
 80142fc:	2b00      	cmp	r3, #0
 80142fe:	f000 80a2 	beq.w	8014446 <_vfiprintf_r+0x20e>
 8014302:	2300      	movs	r3, #0
 8014304:	f04f 32ff 	mov.w	r2, #4294967295
 8014308:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801430c:	f10a 0a01 	add.w	sl, sl, #1
 8014310:	9304      	str	r3, [sp, #16]
 8014312:	9307      	str	r3, [sp, #28]
 8014314:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014318:	931a      	str	r3, [sp, #104]	; 0x68
 801431a:	4654      	mov	r4, sl
 801431c:	2205      	movs	r2, #5
 801431e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014322:	4858      	ldr	r0, [pc, #352]	; (8014484 <_vfiprintf_r+0x24c>)
 8014324:	f7eb ff74 	bl	8000210 <memchr>
 8014328:	9a04      	ldr	r2, [sp, #16]
 801432a:	b9d8      	cbnz	r0, 8014364 <_vfiprintf_r+0x12c>
 801432c:	06d1      	lsls	r1, r2, #27
 801432e:	bf44      	itt	mi
 8014330:	2320      	movmi	r3, #32
 8014332:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014336:	0713      	lsls	r3, r2, #28
 8014338:	bf44      	itt	mi
 801433a:	232b      	movmi	r3, #43	; 0x2b
 801433c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014340:	f89a 3000 	ldrb.w	r3, [sl]
 8014344:	2b2a      	cmp	r3, #42	; 0x2a
 8014346:	d015      	beq.n	8014374 <_vfiprintf_r+0x13c>
 8014348:	9a07      	ldr	r2, [sp, #28]
 801434a:	4654      	mov	r4, sl
 801434c:	2000      	movs	r0, #0
 801434e:	f04f 0c0a 	mov.w	ip, #10
 8014352:	4621      	mov	r1, r4
 8014354:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014358:	3b30      	subs	r3, #48	; 0x30
 801435a:	2b09      	cmp	r3, #9
 801435c:	d94e      	bls.n	80143fc <_vfiprintf_r+0x1c4>
 801435e:	b1b0      	cbz	r0, 801438e <_vfiprintf_r+0x156>
 8014360:	9207      	str	r2, [sp, #28]
 8014362:	e014      	b.n	801438e <_vfiprintf_r+0x156>
 8014364:	eba0 0308 	sub.w	r3, r0, r8
 8014368:	fa09 f303 	lsl.w	r3, r9, r3
 801436c:	4313      	orrs	r3, r2
 801436e:	9304      	str	r3, [sp, #16]
 8014370:	46a2      	mov	sl, r4
 8014372:	e7d2      	b.n	801431a <_vfiprintf_r+0xe2>
 8014374:	9b03      	ldr	r3, [sp, #12]
 8014376:	1d19      	adds	r1, r3, #4
 8014378:	681b      	ldr	r3, [r3, #0]
 801437a:	9103      	str	r1, [sp, #12]
 801437c:	2b00      	cmp	r3, #0
 801437e:	bfbb      	ittet	lt
 8014380:	425b      	neglt	r3, r3
 8014382:	f042 0202 	orrlt.w	r2, r2, #2
 8014386:	9307      	strge	r3, [sp, #28]
 8014388:	9307      	strlt	r3, [sp, #28]
 801438a:	bfb8      	it	lt
 801438c:	9204      	strlt	r2, [sp, #16]
 801438e:	7823      	ldrb	r3, [r4, #0]
 8014390:	2b2e      	cmp	r3, #46	; 0x2e
 8014392:	d10c      	bne.n	80143ae <_vfiprintf_r+0x176>
 8014394:	7863      	ldrb	r3, [r4, #1]
 8014396:	2b2a      	cmp	r3, #42	; 0x2a
 8014398:	d135      	bne.n	8014406 <_vfiprintf_r+0x1ce>
 801439a:	9b03      	ldr	r3, [sp, #12]
 801439c:	1d1a      	adds	r2, r3, #4
 801439e:	681b      	ldr	r3, [r3, #0]
 80143a0:	9203      	str	r2, [sp, #12]
 80143a2:	2b00      	cmp	r3, #0
 80143a4:	bfb8      	it	lt
 80143a6:	f04f 33ff 	movlt.w	r3, #4294967295
 80143aa:	3402      	adds	r4, #2
 80143ac:	9305      	str	r3, [sp, #20]
 80143ae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8014494 <_vfiprintf_r+0x25c>
 80143b2:	7821      	ldrb	r1, [r4, #0]
 80143b4:	2203      	movs	r2, #3
 80143b6:	4650      	mov	r0, sl
 80143b8:	f7eb ff2a 	bl	8000210 <memchr>
 80143bc:	b140      	cbz	r0, 80143d0 <_vfiprintf_r+0x198>
 80143be:	2340      	movs	r3, #64	; 0x40
 80143c0:	eba0 000a 	sub.w	r0, r0, sl
 80143c4:	fa03 f000 	lsl.w	r0, r3, r0
 80143c8:	9b04      	ldr	r3, [sp, #16]
 80143ca:	4303      	orrs	r3, r0
 80143cc:	3401      	adds	r4, #1
 80143ce:	9304      	str	r3, [sp, #16]
 80143d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80143d4:	482c      	ldr	r0, [pc, #176]	; (8014488 <_vfiprintf_r+0x250>)
 80143d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80143da:	2206      	movs	r2, #6
 80143dc:	f7eb ff18 	bl	8000210 <memchr>
 80143e0:	2800      	cmp	r0, #0
 80143e2:	d03f      	beq.n	8014464 <_vfiprintf_r+0x22c>
 80143e4:	4b29      	ldr	r3, [pc, #164]	; (801448c <_vfiprintf_r+0x254>)
 80143e6:	bb1b      	cbnz	r3, 8014430 <_vfiprintf_r+0x1f8>
 80143e8:	9b03      	ldr	r3, [sp, #12]
 80143ea:	3307      	adds	r3, #7
 80143ec:	f023 0307 	bic.w	r3, r3, #7
 80143f0:	3308      	adds	r3, #8
 80143f2:	9303      	str	r3, [sp, #12]
 80143f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80143f6:	443b      	add	r3, r7
 80143f8:	9309      	str	r3, [sp, #36]	; 0x24
 80143fa:	e767      	b.n	80142cc <_vfiprintf_r+0x94>
 80143fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8014400:	460c      	mov	r4, r1
 8014402:	2001      	movs	r0, #1
 8014404:	e7a5      	b.n	8014352 <_vfiprintf_r+0x11a>
 8014406:	2300      	movs	r3, #0
 8014408:	3401      	adds	r4, #1
 801440a:	9305      	str	r3, [sp, #20]
 801440c:	4619      	mov	r1, r3
 801440e:	f04f 0c0a 	mov.w	ip, #10
 8014412:	4620      	mov	r0, r4
 8014414:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014418:	3a30      	subs	r2, #48	; 0x30
 801441a:	2a09      	cmp	r2, #9
 801441c:	d903      	bls.n	8014426 <_vfiprintf_r+0x1ee>
 801441e:	2b00      	cmp	r3, #0
 8014420:	d0c5      	beq.n	80143ae <_vfiprintf_r+0x176>
 8014422:	9105      	str	r1, [sp, #20]
 8014424:	e7c3      	b.n	80143ae <_vfiprintf_r+0x176>
 8014426:	fb0c 2101 	mla	r1, ip, r1, r2
 801442a:	4604      	mov	r4, r0
 801442c:	2301      	movs	r3, #1
 801442e:	e7f0      	b.n	8014412 <_vfiprintf_r+0x1da>
 8014430:	ab03      	add	r3, sp, #12
 8014432:	9300      	str	r3, [sp, #0]
 8014434:	462a      	mov	r2, r5
 8014436:	4b16      	ldr	r3, [pc, #88]	; (8014490 <_vfiprintf_r+0x258>)
 8014438:	a904      	add	r1, sp, #16
 801443a:	4630      	mov	r0, r6
 801443c:	f7fd ffa8 	bl	8012390 <_printf_float>
 8014440:	4607      	mov	r7, r0
 8014442:	1c78      	adds	r0, r7, #1
 8014444:	d1d6      	bne.n	80143f4 <_vfiprintf_r+0x1bc>
 8014446:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014448:	07d9      	lsls	r1, r3, #31
 801444a:	d405      	bmi.n	8014458 <_vfiprintf_r+0x220>
 801444c:	89ab      	ldrh	r3, [r5, #12]
 801444e:	059a      	lsls	r2, r3, #22
 8014450:	d402      	bmi.n	8014458 <_vfiprintf_r+0x220>
 8014452:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014454:	f000 faaf 	bl	80149b6 <__retarget_lock_release_recursive>
 8014458:	89ab      	ldrh	r3, [r5, #12]
 801445a:	065b      	lsls	r3, r3, #25
 801445c:	f53f af12 	bmi.w	8014284 <_vfiprintf_r+0x4c>
 8014460:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014462:	e711      	b.n	8014288 <_vfiprintf_r+0x50>
 8014464:	ab03      	add	r3, sp, #12
 8014466:	9300      	str	r3, [sp, #0]
 8014468:	462a      	mov	r2, r5
 801446a:	4b09      	ldr	r3, [pc, #36]	; (8014490 <_vfiprintf_r+0x258>)
 801446c:	a904      	add	r1, sp, #16
 801446e:	4630      	mov	r0, r6
 8014470:	f7fe fa32 	bl	80128d8 <_printf_i>
 8014474:	e7e4      	b.n	8014440 <_vfiprintf_r+0x208>
 8014476:	bf00      	nop
 8014478:	08015424 	.word	0x08015424
 801447c:	08015444 	.word	0x08015444
 8014480:	08015404 	.word	0x08015404
 8014484:	080152f2 	.word	0x080152f2
 8014488:	080152fc 	.word	0x080152fc
 801448c:	08012391 	.word	0x08012391
 8014490:	08014213 	.word	0x08014213
 8014494:	080152f8 	.word	0x080152f8

08014498 <__swbuf_r>:
 8014498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801449a:	460e      	mov	r6, r1
 801449c:	4614      	mov	r4, r2
 801449e:	4605      	mov	r5, r0
 80144a0:	b118      	cbz	r0, 80144aa <__swbuf_r+0x12>
 80144a2:	6983      	ldr	r3, [r0, #24]
 80144a4:	b90b      	cbnz	r3, 80144aa <__swbuf_r+0x12>
 80144a6:	f000 f9e7 	bl	8014878 <__sinit>
 80144aa:	4b21      	ldr	r3, [pc, #132]	; (8014530 <__swbuf_r+0x98>)
 80144ac:	429c      	cmp	r4, r3
 80144ae:	d12b      	bne.n	8014508 <__swbuf_r+0x70>
 80144b0:	686c      	ldr	r4, [r5, #4]
 80144b2:	69a3      	ldr	r3, [r4, #24]
 80144b4:	60a3      	str	r3, [r4, #8]
 80144b6:	89a3      	ldrh	r3, [r4, #12]
 80144b8:	071a      	lsls	r2, r3, #28
 80144ba:	d52f      	bpl.n	801451c <__swbuf_r+0x84>
 80144bc:	6923      	ldr	r3, [r4, #16]
 80144be:	b36b      	cbz	r3, 801451c <__swbuf_r+0x84>
 80144c0:	6923      	ldr	r3, [r4, #16]
 80144c2:	6820      	ldr	r0, [r4, #0]
 80144c4:	1ac0      	subs	r0, r0, r3
 80144c6:	6963      	ldr	r3, [r4, #20]
 80144c8:	b2f6      	uxtb	r6, r6
 80144ca:	4283      	cmp	r3, r0
 80144cc:	4637      	mov	r7, r6
 80144ce:	dc04      	bgt.n	80144da <__swbuf_r+0x42>
 80144d0:	4621      	mov	r1, r4
 80144d2:	4628      	mov	r0, r5
 80144d4:	f000 f93c 	bl	8014750 <_fflush_r>
 80144d8:	bb30      	cbnz	r0, 8014528 <__swbuf_r+0x90>
 80144da:	68a3      	ldr	r3, [r4, #8]
 80144dc:	3b01      	subs	r3, #1
 80144de:	60a3      	str	r3, [r4, #8]
 80144e0:	6823      	ldr	r3, [r4, #0]
 80144e2:	1c5a      	adds	r2, r3, #1
 80144e4:	6022      	str	r2, [r4, #0]
 80144e6:	701e      	strb	r6, [r3, #0]
 80144e8:	6963      	ldr	r3, [r4, #20]
 80144ea:	3001      	adds	r0, #1
 80144ec:	4283      	cmp	r3, r0
 80144ee:	d004      	beq.n	80144fa <__swbuf_r+0x62>
 80144f0:	89a3      	ldrh	r3, [r4, #12]
 80144f2:	07db      	lsls	r3, r3, #31
 80144f4:	d506      	bpl.n	8014504 <__swbuf_r+0x6c>
 80144f6:	2e0a      	cmp	r6, #10
 80144f8:	d104      	bne.n	8014504 <__swbuf_r+0x6c>
 80144fa:	4621      	mov	r1, r4
 80144fc:	4628      	mov	r0, r5
 80144fe:	f000 f927 	bl	8014750 <_fflush_r>
 8014502:	b988      	cbnz	r0, 8014528 <__swbuf_r+0x90>
 8014504:	4638      	mov	r0, r7
 8014506:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014508:	4b0a      	ldr	r3, [pc, #40]	; (8014534 <__swbuf_r+0x9c>)
 801450a:	429c      	cmp	r4, r3
 801450c:	d101      	bne.n	8014512 <__swbuf_r+0x7a>
 801450e:	68ac      	ldr	r4, [r5, #8]
 8014510:	e7cf      	b.n	80144b2 <__swbuf_r+0x1a>
 8014512:	4b09      	ldr	r3, [pc, #36]	; (8014538 <__swbuf_r+0xa0>)
 8014514:	429c      	cmp	r4, r3
 8014516:	bf08      	it	eq
 8014518:	68ec      	ldreq	r4, [r5, #12]
 801451a:	e7ca      	b.n	80144b2 <__swbuf_r+0x1a>
 801451c:	4621      	mov	r1, r4
 801451e:	4628      	mov	r0, r5
 8014520:	f000 f81a 	bl	8014558 <__swsetup_r>
 8014524:	2800      	cmp	r0, #0
 8014526:	d0cb      	beq.n	80144c0 <__swbuf_r+0x28>
 8014528:	f04f 37ff 	mov.w	r7, #4294967295
 801452c:	e7ea      	b.n	8014504 <__swbuf_r+0x6c>
 801452e:	bf00      	nop
 8014530:	08015424 	.word	0x08015424
 8014534:	08015444 	.word	0x08015444
 8014538:	08015404 	.word	0x08015404

0801453c <__ascii_wctomb>:
 801453c:	b149      	cbz	r1, 8014552 <__ascii_wctomb+0x16>
 801453e:	2aff      	cmp	r2, #255	; 0xff
 8014540:	bf85      	ittet	hi
 8014542:	238a      	movhi	r3, #138	; 0x8a
 8014544:	6003      	strhi	r3, [r0, #0]
 8014546:	700a      	strbls	r2, [r1, #0]
 8014548:	f04f 30ff 	movhi.w	r0, #4294967295
 801454c:	bf98      	it	ls
 801454e:	2001      	movls	r0, #1
 8014550:	4770      	bx	lr
 8014552:	4608      	mov	r0, r1
 8014554:	4770      	bx	lr
	...

08014558 <__swsetup_r>:
 8014558:	4b32      	ldr	r3, [pc, #200]	; (8014624 <__swsetup_r+0xcc>)
 801455a:	b570      	push	{r4, r5, r6, lr}
 801455c:	681d      	ldr	r5, [r3, #0]
 801455e:	4606      	mov	r6, r0
 8014560:	460c      	mov	r4, r1
 8014562:	b125      	cbz	r5, 801456e <__swsetup_r+0x16>
 8014564:	69ab      	ldr	r3, [r5, #24]
 8014566:	b913      	cbnz	r3, 801456e <__swsetup_r+0x16>
 8014568:	4628      	mov	r0, r5
 801456a:	f000 f985 	bl	8014878 <__sinit>
 801456e:	4b2e      	ldr	r3, [pc, #184]	; (8014628 <__swsetup_r+0xd0>)
 8014570:	429c      	cmp	r4, r3
 8014572:	d10f      	bne.n	8014594 <__swsetup_r+0x3c>
 8014574:	686c      	ldr	r4, [r5, #4]
 8014576:	89a3      	ldrh	r3, [r4, #12]
 8014578:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801457c:	0719      	lsls	r1, r3, #28
 801457e:	d42c      	bmi.n	80145da <__swsetup_r+0x82>
 8014580:	06dd      	lsls	r5, r3, #27
 8014582:	d411      	bmi.n	80145a8 <__swsetup_r+0x50>
 8014584:	2309      	movs	r3, #9
 8014586:	6033      	str	r3, [r6, #0]
 8014588:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801458c:	81a3      	strh	r3, [r4, #12]
 801458e:	f04f 30ff 	mov.w	r0, #4294967295
 8014592:	e03e      	b.n	8014612 <__swsetup_r+0xba>
 8014594:	4b25      	ldr	r3, [pc, #148]	; (801462c <__swsetup_r+0xd4>)
 8014596:	429c      	cmp	r4, r3
 8014598:	d101      	bne.n	801459e <__swsetup_r+0x46>
 801459a:	68ac      	ldr	r4, [r5, #8]
 801459c:	e7eb      	b.n	8014576 <__swsetup_r+0x1e>
 801459e:	4b24      	ldr	r3, [pc, #144]	; (8014630 <__swsetup_r+0xd8>)
 80145a0:	429c      	cmp	r4, r3
 80145a2:	bf08      	it	eq
 80145a4:	68ec      	ldreq	r4, [r5, #12]
 80145a6:	e7e6      	b.n	8014576 <__swsetup_r+0x1e>
 80145a8:	0758      	lsls	r0, r3, #29
 80145aa:	d512      	bpl.n	80145d2 <__swsetup_r+0x7a>
 80145ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80145ae:	b141      	cbz	r1, 80145c2 <__swsetup_r+0x6a>
 80145b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80145b4:	4299      	cmp	r1, r3
 80145b6:	d002      	beq.n	80145be <__swsetup_r+0x66>
 80145b8:	4630      	mov	r0, r6
 80145ba:	f7ff fcd5 	bl	8013f68 <_free_r>
 80145be:	2300      	movs	r3, #0
 80145c0:	6363      	str	r3, [r4, #52]	; 0x34
 80145c2:	89a3      	ldrh	r3, [r4, #12]
 80145c4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80145c8:	81a3      	strh	r3, [r4, #12]
 80145ca:	2300      	movs	r3, #0
 80145cc:	6063      	str	r3, [r4, #4]
 80145ce:	6923      	ldr	r3, [r4, #16]
 80145d0:	6023      	str	r3, [r4, #0]
 80145d2:	89a3      	ldrh	r3, [r4, #12]
 80145d4:	f043 0308 	orr.w	r3, r3, #8
 80145d8:	81a3      	strh	r3, [r4, #12]
 80145da:	6923      	ldr	r3, [r4, #16]
 80145dc:	b94b      	cbnz	r3, 80145f2 <__swsetup_r+0x9a>
 80145de:	89a3      	ldrh	r3, [r4, #12]
 80145e0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80145e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80145e8:	d003      	beq.n	80145f2 <__swsetup_r+0x9a>
 80145ea:	4621      	mov	r1, r4
 80145ec:	4630      	mov	r0, r6
 80145ee:	f000 fa09 	bl	8014a04 <__smakebuf_r>
 80145f2:	89a0      	ldrh	r0, [r4, #12]
 80145f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80145f8:	f010 0301 	ands.w	r3, r0, #1
 80145fc:	d00a      	beq.n	8014614 <__swsetup_r+0xbc>
 80145fe:	2300      	movs	r3, #0
 8014600:	60a3      	str	r3, [r4, #8]
 8014602:	6963      	ldr	r3, [r4, #20]
 8014604:	425b      	negs	r3, r3
 8014606:	61a3      	str	r3, [r4, #24]
 8014608:	6923      	ldr	r3, [r4, #16]
 801460a:	b943      	cbnz	r3, 801461e <__swsetup_r+0xc6>
 801460c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8014610:	d1ba      	bne.n	8014588 <__swsetup_r+0x30>
 8014612:	bd70      	pop	{r4, r5, r6, pc}
 8014614:	0781      	lsls	r1, r0, #30
 8014616:	bf58      	it	pl
 8014618:	6963      	ldrpl	r3, [r4, #20]
 801461a:	60a3      	str	r3, [r4, #8]
 801461c:	e7f4      	b.n	8014608 <__swsetup_r+0xb0>
 801461e:	2000      	movs	r0, #0
 8014620:	e7f7      	b.n	8014612 <__swsetup_r+0xba>
 8014622:	bf00      	nop
 8014624:	20000318 	.word	0x20000318
 8014628:	08015424 	.word	0x08015424
 801462c:	08015444 	.word	0x08015444
 8014630:	08015404 	.word	0x08015404

08014634 <abort>:
 8014634:	b508      	push	{r3, lr}
 8014636:	2006      	movs	r0, #6
 8014638:	f000 fa4c 	bl	8014ad4 <raise>
 801463c:	2001      	movs	r0, #1
 801463e:	f7ef ff8f 	bl	8004560 <_exit>
	...

08014644 <__sflush_r>:
 8014644:	898a      	ldrh	r2, [r1, #12]
 8014646:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801464a:	4605      	mov	r5, r0
 801464c:	0710      	lsls	r0, r2, #28
 801464e:	460c      	mov	r4, r1
 8014650:	d458      	bmi.n	8014704 <__sflush_r+0xc0>
 8014652:	684b      	ldr	r3, [r1, #4]
 8014654:	2b00      	cmp	r3, #0
 8014656:	dc05      	bgt.n	8014664 <__sflush_r+0x20>
 8014658:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801465a:	2b00      	cmp	r3, #0
 801465c:	dc02      	bgt.n	8014664 <__sflush_r+0x20>
 801465e:	2000      	movs	r0, #0
 8014660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014664:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014666:	2e00      	cmp	r6, #0
 8014668:	d0f9      	beq.n	801465e <__sflush_r+0x1a>
 801466a:	2300      	movs	r3, #0
 801466c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014670:	682f      	ldr	r7, [r5, #0]
 8014672:	602b      	str	r3, [r5, #0]
 8014674:	d032      	beq.n	80146dc <__sflush_r+0x98>
 8014676:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014678:	89a3      	ldrh	r3, [r4, #12]
 801467a:	075a      	lsls	r2, r3, #29
 801467c:	d505      	bpl.n	801468a <__sflush_r+0x46>
 801467e:	6863      	ldr	r3, [r4, #4]
 8014680:	1ac0      	subs	r0, r0, r3
 8014682:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014684:	b10b      	cbz	r3, 801468a <__sflush_r+0x46>
 8014686:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014688:	1ac0      	subs	r0, r0, r3
 801468a:	2300      	movs	r3, #0
 801468c:	4602      	mov	r2, r0
 801468e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014690:	6a21      	ldr	r1, [r4, #32]
 8014692:	4628      	mov	r0, r5
 8014694:	47b0      	blx	r6
 8014696:	1c43      	adds	r3, r0, #1
 8014698:	89a3      	ldrh	r3, [r4, #12]
 801469a:	d106      	bne.n	80146aa <__sflush_r+0x66>
 801469c:	6829      	ldr	r1, [r5, #0]
 801469e:	291d      	cmp	r1, #29
 80146a0:	d82c      	bhi.n	80146fc <__sflush_r+0xb8>
 80146a2:	4a2a      	ldr	r2, [pc, #168]	; (801474c <__sflush_r+0x108>)
 80146a4:	40ca      	lsrs	r2, r1
 80146a6:	07d6      	lsls	r6, r2, #31
 80146a8:	d528      	bpl.n	80146fc <__sflush_r+0xb8>
 80146aa:	2200      	movs	r2, #0
 80146ac:	6062      	str	r2, [r4, #4]
 80146ae:	04d9      	lsls	r1, r3, #19
 80146b0:	6922      	ldr	r2, [r4, #16]
 80146b2:	6022      	str	r2, [r4, #0]
 80146b4:	d504      	bpl.n	80146c0 <__sflush_r+0x7c>
 80146b6:	1c42      	adds	r2, r0, #1
 80146b8:	d101      	bne.n	80146be <__sflush_r+0x7a>
 80146ba:	682b      	ldr	r3, [r5, #0]
 80146bc:	b903      	cbnz	r3, 80146c0 <__sflush_r+0x7c>
 80146be:	6560      	str	r0, [r4, #84]	; 0x54
 80146c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80146c2:	602f      	str	r7, [r5, #0]
 80146c4:	2900      	cmp	r1, #0
 80146c6:	d0ca      	beq.n	801465e <__sflush_r+0x1a>
 80146c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80146cc:	4299      	cmp	r1, r3
 80146ce:	d002      	beq.n	80146d6 <__sflush_r+0x92>
 80146d0:	4628      	mov	r0, r5
 80146d2:	f7ff fc49 	bl	8013f68 <_free_r>
 80146d6:	2000      	movs	r0, #0
 80146d8:	6360      	str	r0, [r4, #52]	; 0x34
 80146da:	e7c1      	b.n	8014660 <__sflush_r+0x1c>
 80146dc:	6a21      	ldr	r1, [r4, #32]
 80146de:	2301      	movs	r3, #1
 80146e0:	4628      	mov	r0, r5
 80146e2:	47b0      	blx	r6
 80146e4:	1c41      	adds	r1, r0, #1
 80146e6:	d1c7      	bne.n	8014678 <__sflush_r+0x34>
 80146e8:	682b      	ldr	r3, [r5, #0]
 80146ea:	2b00      	cmp	r3, #0
 80146ec:	d0c4      	beq.n	8014678 <__sflush_r+0x34>
 80146ee:	2b1d      	cmp	r3, #29
 80146f0:	d001      	beq.n	80146f6 <__sflush_r+0xb2>
 80146f2:	2b16      	cmp	r3, #22
 80146f4:	d101      	bne.n	80146fa <__sflush_r+0xb6>
 80146f6:	602f      	str	r7, [r5, #0]
 80146f8:	e7b1      	b.n	801465e <__sflush_r+0x1a>
 80146fa:	89a3      	ldrh	r3, [r4, #12]
 80146fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014700:	81a3      	strh	r3, [r4, #12]
 8014702:	e7ad      	b.n	8014660 <__sflush_r+0x1c>
 8014704:	690f      	ldr	r7, [r1, #16]
 8014706:	2f00      	cmp	r7, #0
 8014708:	d0a9      	beq.n	801465e <__sflush_r+0x1a>
 801470a:	0793      	lsls	r3, r2, #30
 801470c:	680e      	ldr	r6, [r1, #0]
 801470e:	bf08      	it	eq
 8014710:	694b      	ldreq	r3, [r1, #20]
 8014712:	600f      	str	r7, [r1, #0]
 8014714:	bf18      	it	ne
 8014716:	2300      	movne	r3, #0
 8014718:	eba6 0807 	sub.w	r8, r6, r7
 801471c:	608b      	str	r3, [r1, #8]
 801471e:	f1b8 0f00 	cmp.w	r8, #0
 8014722:	dd9c      	ble.n	801465e <__sflush_r+0x1a>
 8014724:	6a21      	ldr	r1, [r4, #32]
 8014726:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014728:	4643      	mov	r3, r8
 801472a:	463a      	mov	r2, r7
 801472c:	4628      	mov	r0, r5
 801472e:	47b0      	blx	r6
 8014730:	2800      	cmp	r0, #0
 8014732:	dc06      	bgt.n	8014742 <__sflush_r+0xfe>
 8014734:	89a3      	ldrh	r3, [r4, #12]
 8014736:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801473a:	81a3      	strh	r3, [r4, #12]
 801473c:	f04f 30ff 	mov.w	r0, #4294967295
 8014740:	e78e      	b.n	8014660 <__sflush_r+0x1c>
 8014742:	4407      	add	r7, r0
 8014744:	eba8 0800 	sub.w	r8, r8, r0
 8014748:	e7e9      	b.n	801471e <__sflush_r+0xda>
 801474a:	bf00      	nop
 801474c:	20400001 	.word	0x20400001

08014750 <_fflush_r>:
 8014750:	b538      	push	{r3, r4, r5, lr}
 8014752:	690b      	ldr	r3, [r1, #16]
 8014754:	4605      	mov	r5, r0
 8014756:	460c      	mov	r4, r1
 8014758:	b913      	cbnz	r3, 8014760 <_fflush_r+0x10>
 801475a:	2500      	movs	r5, #0
 801475c:	4628      	mov	r0, r5
 801475e:	bd38      	pop	{r3, r4, r5, pc}
 8014760:	b118      	cbz	r0, 801476a <_fflush_r+0x1a>
 8014762:	6983      	ldr	r3, [r0, #24]
 8014764:	b90b      	cbnz	r3, 801476a <_fflush_r+0x1a>
 8014766:	f000 f887 	bl	8014878 <__sinit>
 801476a:	4b14      	ldr	r3, [pc, #80]	; (80147bc <_fflush_r+0x6c>)
 801476c:	429c      	cmp	r4, r3
 801476e:	d11b      	bne.n	80147a8 <_fflush_r+0x58>
 8014770:	686c      	ldr	r4, [r5, #4]
 8014772:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014776:	2b00      	cmp	r3, #0
 8014778:	d0ef      	beq.n	801475a <_fflush_r+0xa>
 801477a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801477c:	07d0      	lsls	r0, r2, #31
 801477e:	d404      	bmi.n	801478a <_fflush_r+0x3a>
 8014780:	0599      	lsls	r1, r3, #22
 8014782:	d402      	bmi.n	801478a <_fflush_r+0x3a>
 8014784:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014786:	f000 f915 	bl	80149b4 <__retarget_lock_acquire_recursive>
 801478a:	4628      	mov	r0, r5
 801478c:	4621      	mov	r1, r4
 801478e:	f7ff ff59 	bl	8014644 <__sflush_r>
 8014792:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014794:	07da      	lsls	r2, r3, #31
 8014796:	4605      	mov	r5, r0
 8014798:	d4e0      	bmi.n	801475c <_fflush_r+0xc>
 801479a:	89a3      	ldrh	r3, [r4, #12]
 801479c:	059b      	lsls	r3, r3, #22
 801479e:	d4dd      	bmi.n	801475c <_fflush_r+0xc>
 80147a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80147a2:	f000 f908 	bl	80149b6 <__retarget_lock_release_recursive>
 80147a6:	e7d9      	b.n	801475c <_fflush_r+0xc>
 80147a8:	4b05      	ldr	r3, [pc, #20]	; (80147c0 <_fflush_r+0x70>)
 80147aa:	429c      	cmp	r4, r3
 80147ac:	d101      	bne.n	80147b2 <_fflush_r+0x62>
 80147ae:	68ac      	ldr	r4, [r5, #8]
 80147b0:	e7df      	b.n	8014772 <_fflush_r+0x22>
 80147b2:	4b04      	ldr	r3, [pc, #16]	; (80147c4 <_fflush_r+0x74>)
 80147b4:	429c      	cmp	r4, r3
 80147b6:	bf08      	it	eq
 80147b8:	68ec      	ldreq	r4, [r5, #12]
 80147ba:	e7da      	b.n	8014772 <_fflush_r+0x22>
 80147bc:	08015424 	.word	0x08015424
 80147c0:	08015444 	.word	0x08015444
 80147c4:	08015404 	.word	0x08015404

080147c8 <std>:
 80147c8:	2300      	movs	r3, #0
 80147ca:	b510      	push	{r4, lr}
 80147cc:	4604      	mov	r4, r0
 80147ce:	e9c0 3300 	strd	r3, r3, [r0]
 80147d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80147d6:	6083      	str	r3, [r0, #8]
 80147d8:	8181      	strh	r1, [r0, #12]
 80147da:	6643      	str	r3, [r0, #100]	; 0x64
 80147dc:	81c2      	strh	r2, [r0, #14]
 80147de:	6183      	str	r3, [r0, #24]
 80147e0:	4619      	mov	r1, r3
 80147e2:	2208      	movs	r2, #8
 80147e4:	305c      	adds	r0, #92	; 0x5c
 80147e6:	f7fd fd2b 	bl	8012240 <memset>
 80147ea:	4b05      	ldr	r3, [pc, #20]	; (8014800 <std+0x38>)
 80147ec:	6263      	str	r3, [r4, #36]	; 0x24
 80147ee:	4b05      	ldr	r3, [pc, #20]	; (8014804 <std+0x3c>)
 80147f0:	62a3      	str	r3, [r4, #40]	; 0x28
 80147f2:	4b05      	ldr	r3, [pc, #20]	; (8014808 <std+0x40>)
 80147f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80147f6:	4b05      	ldr	r3, [pc, #20]	; (801480c <std+0x44>)
 80147f8:	6224      	str	r4, [r4, #32]
 80147fa:	6323      	str	r3, [r4, #48]	; 0x30
 80147fc:	bd10      	pop	{r4, pc}
 80147fe:	bf00      	nop
 8014800:	08014b0d 	.word	0x08014b0d
 8014804:	08014b2f 	.word	0x08014b2f
 8014808:	08014b67 	.word	0x08014b67
 801480c:	08014b8b 	.word	0x08014b8b

08014810 <_cleanup_r>:
 8014810:	4901      	ldr	r1, [pc, #4]	; (8014818 <_cleanup_r+0x8>)
 8014812:	f000 b8af 	b.w	8014974 <_fwalk_reent>
 8014816:	bf00      	nop
 8014818:	08014751 	.word	0x08014751

0801481c <__sfmoreglue>:
 801481c:	b570      	push	{r4, r5, r6, lr}
 801481e:	2268      	movs	r2, #104	; 0x68
 8014820:	1e4d      	subs	r5, r1, #1
 8014822:	4355      	muls	r5, r2
 8014824:	460e      	mov	r6, r1
 8014826:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801482a:	f7ff fc09 	bl	8014040 <_malloc_r>
 801482e:	4604      	mov	r4, r0
 8014830:	b140      	cbz	r0, 8014844 <__sfmoreglue+0x28>
 8014832:	2100      	movs	r1, #0
 8014834:	e9c0 1600 	strd	r1, r6, [r0]
 8014838:	300c      	adds	r0, #12
 801483a:	60a0      	str	r0, [r4, #8]
 801483c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8014840:	f7fd fcfe 	bl	8012240 <memset>
 8014844:	4620      	mov	r0, r4
 8014846:	bd70      	pop	{r4, r5, r6, pc}

08014848 <__sfp_lock_acquire>:
 8014848:	4801      	ldr	r0, [pc, #4]	; (8014850 <__sfp_lock_acquire+0x8>)
 801484a:	f000 b8b3 	b.w	80149b4 <__retarget_lock_acquire_recursive>
 801484e:	bf00      	nop
 8014850:	20004fd5 	.word	0x20004fd5

08014854 <__sfp_lock_release>:
 8014854:	4801      	ldr	r0, [pc, #4]	; (801485c <__sfp_lock_release+0x8>)
 8014856:	f000 b8ae 	b.w	80149b6 <__retarget_lock_release_recursive>
 801485a:	bf00      	nop
 801485c:	20004fd5 	.word	0x20004fd5

08014860 <__sinit_lock_acquire>:
 8014860:	4801      	ldr	r0, [pc, #4]	; (8014868 <__sinit_lock_acquire+0x8>)
 8014862:	f000 b8a7 	b.w	80149b4 <__retarget_lock_acquire_recursive>
 8014866:	bf00      	nop
 8014868:	20004fd6 	.word	0x20004fd6

0801486c <__sinit_lock_release>:
 801486c:	4801      	ldr	r0, [pc, #4]	; (8014874 <__sinit_lock_release+0x8>)
 801486e:	f000 b8a2 	b.w	80149b6 <__retarget_lock_release_recursive>
 8014872:	bf00      	nop
 8014874:	20004fd6 	.word	0x20004fd6

08014878 <__sinit>:
 8014878:	b510      	push	{r4, lr}
 801487a:	4604      	mov	r4, r0
 801487c:	f7ff fff0 	bl	8014860 <__sinit_lock_acquire>
 8014880:	69a3      	ldr	r3, [r4, #24]
 8014882:	b11b      	cbz	r3, 801488c <__sinit+0x14>
 8014884:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014888:	f7ff bff0 	b.w	801486c <__sinit_lock_release>
 801488c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8014890:	6523      	str	r3, [r4, #80]	; 0x50
 8014892:	4b13      	ldr	r3, [pc, #76]	; (80148e0 <__sinit+0x68>)
 8014894:	4a13      	ldr	r2, [pc, #76]	; (80148e4 <__sinit+0x6c>)
 8014896:	681b      	ldr	r3, [r3, #0]
 8014898:	62a2      	str	r2, [r4, #40]	; 0x28
 801489a:	42a3      	cmp	r3, r4
 801489c:	bf04      	itt	eq
 801489e:	2301      	moveq	r3, #1
 80148a0:	61a3      	streq	r3, [r4, #24]
 80148a2:	4620      	mov	r0, r4
 80148a4:	f000 f820 	bl	80148e8 <__sfp>
 80148a8:	6060      	str	r0, [r4, #4]
 80148aa:	4620      	mov	r0, r4
 80148ac:	f000 f81c 	bl	80148e8 <__sfp>
 80148b0:	60a0      	str	r0, [r4, #8]
 80148b2:	4620      	mov	r0, r4
 80148b4:	f000 f818 	bl	80148e8 <__sfp>
 80148b8:	2200      	movs	r2, #0
 80148ba:	60e0      	str	r0, [r4, #12]
 80148bc:	2104      	movs	r1, #4
 80148be:	6860      	ldr	r0, [r4, #4]
 80148c0:	f7ff ff82 	bl	80147c8 <std>
 80148c4:	68a0      	ldr	r0, [r4, #8]
 80148c6:	2201      	movs	r2, #1
 80148c8:	2109      	movs	r1, #9
 80148ca:	f7ff ff7d 	bl	80147c8 <std>
 80148ce:	68e0      	ldr	r0, [r4, #12]
 80148d0:	2202      	movs	r2, #2
 80148d2:	2112      	movs	r1, #18
 80148d4:	f7ff ff78 	bl	80147c8 <std>
 80148d8:	2301      	movs	r3, #1
 80148da:	61a3      	str	r3, [r4, #24]
 80148dc:	e7d2      	b.n	8014884 <__sinit+0xc>
 80148de:	bf00      	nop
 80148e0:	0801508c 	.word	0x0801508c
 80148e4:	08014811 	.word	0x08014811

080148e8 <__sfp>:
 80148e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80148ea:	4607      	mov	r7, r0
 80148ec:	f7ff ffac 	bl	8014848 <__sfp_lock_acquire>
 80148f0:	4b1e      	ldr	r3, [pc, #120]	; (801496c <__sfp+0x84>)
 80148f2:	681e      	ldr	r6, [r3, #0]
 80148f4:	69b3      	ldr	r3, [r6, #24]
 80148f6:	b913      	cbnz	r3, 80148fe <__sfp+0x16>
 80148f8:	4630      	mov	r0, r6
 80148fa:	f7ff ffbd 	bl	8014878 <__sinit>
 80148fe:	3648      	adds	r6, #72	; 0x48
 8014900:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8014904:	3b01      	subs	r3, #1
 8014906:	d503      	bpl.n	8014910 <__sfp+0x28>
 8014908:	6833      	ldr	r3, [r6, #0]
 801490a:	b30b      	cbz	r3, 8014950 <__sfp+0x68>
 801490c:	6836      	ldr	r6, [r6, #0]
 801490e:	e7f7      	b.n	8014900 <__sfp+0x18>
 8014910:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8014914:	b9d5      	cbnz	r5, 801494c <__sfp+0x64>
 8014916:	4b16      	ldr	r3, [pc, #88]	; (8014970 <__sfp+0x88>)
 8014918:	60e3      	str	r3, [r4, #12]
 801491a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801491e:	6665      	str	r5, [r4, #100]	; 0x64
 8014920:	f000 f847 	bl	80149b2 <__retarget_lock_init_recursive>
 8014924:	f7ff ff96 	bl	8014854 <__sfp_lock_release>
 8014928:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801492c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8014930:	6025      	str	r5, [r4, #0]
 8014932:	61a5      	str	r5, [r4, #24]
 8014934:	2208      	movs	r2, #8
 8014936:	4629      	mov	r1, r5
 8014938:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801493c:	f7fd fc80 	bl	8012240 <memset>
 8014940:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8014944:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8014948:	4620      	mov	r0, r4
 801494a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801494c:	3468      	adds	r4, #104	; 0x68
 801494e:	e7d9      	b.n	8014904 <__sfp+0x1c>
 8014950:	2104      	movs	r1, #4
 8014952:	4638      	mov	r0, r7
 8014954:	f7ff ff62 	bl	801481c <__sfmoreglue>
 8014958:	4604      	mov	r4, r0
 801495a:	6030      	str	r0, [r6, #0]
 801495c:	2800      	cmp	r0, #0
 801495e:	d1d5      	bne.n	801490c <__sfp+0x24>
 8014960:	f7ff ff78 	bl	8014854 <__sfp_lock_release>
 8014964:	230c      	movs	r3, #12
 8014966:	603b      	str	r3, [r7, #0]
 8014968:	e7ee      	b.n	8014948 <__sfp+0x60>
 801496a:	bf00      	nop
 801496c:	0801508c 	.word	0x0801508c
 8014970:	ffff0001 	.word	0xffff0001

08014974 <_fwalk_reent>:
 8014974:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014978:	4606      	mov	r6, r0
 801497a:	4688      	mov	r8, r1
 801497c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8014980:	2700      	movs	r7, #0
 8014982:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014986:	f1b9 0901 	subs.w	r9, r9, #1
 801498a:	d505      	bpl.n	8014998 <_fwalk_reent+0x24>
 801498c:	6824      	ldr	r4, [r4, #0]
 801498e:	2c00      	cmp	r4, #0
 8014990:	d1f7      	bne.n	8014982 <_fwalk_reent+0xe>
 8014992:	4638      	mov	r0, r7
 8014994:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014998:	89ab      	ldrh	r3, [r5, #12]
 801499a:	2b01      	cmp	r3, #1
 801499c:	d907      	bls.n	80149ae <_fwalk_reent+0x3a>
 801499e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80149a2:	3301      	adds	r3, #1
 80149a4:	d003      	beq.n	80149ae <_fwalk_reent+0x3a>
 80149a6:	4629      	mov	r1, r5
 80149a8:	4630      	mov	r0, r6
 80149aa:	47c0      	blx	r8
 80149ac:	4307      	orrs	r7, r0
 80149ae:	3568      	adds	r5, #104	; 0x68
 80149b0:	e7e9      	b.n	8014986 <_fwalk_reent+0x12>

080149b2 <__retarget_lock_init_recursive>:
 80149b2:	4770      	bx	lr

080149b4 <__retarget_lock_acquire_recursive>:
 80149b4:	4770      	bx	lr

080149b6 <__retarget_lock_release_recursive>:
 80149b6:	4770      	bx	lr

080149b8 <__swhatbuf_r>:
 80149b8:	b570      	push	{r4, r5, r6, lr}
 80149ba:	460e      	mov	r6, r1
 80149bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80149c0:	2900      	cmp	r1, #0
 80149c2:	b096      	sub	sp, #88	; 0x58
 80149c4:	4614      	mov	r4, r2
 80149c6:	461d      	mov	r5, r3
 80149c8:	da08      	bge.n	80149dc <__swhatbuf_r+0x24>
 80149ca:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80149ce:	2200      	movs	r2, #0
 80149d0:	602a      	str	r2, [r5, #0]
 80149d2:	061a      	lsls	r2, r3, #24
 80149d4:	d410      	bmi.n	80149f8 <__swhatbuf_r+0x40>
 80149d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80149da:	e00e      	b.n	80149fa <__swhatbuf_r+0x42>
 80149dc:	466a      	mov	r2, sp
 80149de:	f000 f8fb 	bl	8014bd8 <_fstat_r>
 80149e2:	2800      	cmp	r0, #0
 80149e4:	dbf1      	blt.n	80149ca <__swhatbuf_r+0x12>
 80149e6:	9a01      	ldr	r2, [sp, #4]
 80149e8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80149ec:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80149f0:	425a      	negs	r2, r3
 80149f2:	415a      	adcs	r2, r3
 80149f4:	602a      	str	r2, [r5, #0]
 80149f6:	e7ee      	b.n	80149d6 <__swhatbuf_r+0x1e>
 80149f8:	2340      	movs	r3, #64	; 0x40
 80149fa:	2000      	movs	r0, #0
 80149fc:	6023      	str	r3, [r4, #0]
 80149fe:	b016      	add	sp, #88	; 0x58
 8014a00:	bd70      	pop	{r4, r5, r6, pc}
	...

08014a04 <__smakebuf_r>:
 8014a04:	898b      	ldrh	r3, [r1, #12]
 8014a06:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014a08:	079d      	lsls	r5, r3, #30
 8014a0a:	4606      	mov	r6, r0
 8014a0c:	460c      	mov	r4, r1
 8014a0e:	d507      	bpl.n	8014a20 <__smakebuf_r+0x1c>
 8014a10:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014a14:	6023      	str	r3, [r4, #0]
 8014a16:	6123      	str	r3, [r4, #16]
 8014a18:	2301      	movs	r3, #1
 8014a1a:	6163      	str	r3, [r4, #20]
 8014a1c:	b002      	add	sp, #8
 8014a1e:	bd70      	pop	{r4, r5, r6, pc}
 8014a20:	ab01      	add	r3, sp, #4
 8014a22:	466a      	mov	r2, sp
 8014a24:	f7ff ffc8 	bl	80149b8 <__swhatbuf_r>
 8014a28:	9900      	ldr	r1, [sp, #0]
 8014a2a:	4605      	mov	r5, r0
 8014a2c:	4630      	mov	r0, r6
 8014a2e:	f7ff fb07 	bl	8014040 <_malloc_r>
 8014a32:	b948      	cbnz	r0, 8014a48 <__smakebuf_r+0x44>
 8014a34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014a38:	059a      	lsls	r2, r3, #22
 8014a3a:	d4ef      	bmi.n	8014a1c <__smakebuf_r+0x18>
 8014a3c:	f023 0303 	bic.w	r3, r3, #3
 8014a40:	f043 0302 	orr.w	r3, r3, #2
 8014a44:	81a3      	strh	r3, [r4, #12]
 8014a46:	e7e3      	b.n	8014a10 <__smakebuf_r+0xc>
 8014a48:	4b0d      	ldr	r3, [pc, #52]	; (8014a80 <__smakebuf_r+0x7c>)
 8014a4a:	62b3      	str	r3, [r6, #40]	; 0x28
 8014a4c:	89a3      	ldrh	r3, [r4, #12]
 8014a4e:	6020      	str	r0, [r4, #0]
 8014a50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014a54:	81a3      	strh	r3, [r4, #12]
 8014a56:	9b00      	ldr	r3, [sp, #0]
 8014a58:	6163      	str	r3, [r4, #20]
 8014a5a:	9b01      	ldr	r3, [sp, #4]
 8014a5c:	6120      	str	r0, [r4, #16]
 8014a5e:	b15b      	cbz	r3, 8014a78 <__smakebuf_r+0x74>
 8014a60:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014a64:	4630      	mov	r0, r6
 8014a66:	f000 f8c9 	bl	8014bfc <_isatty_r>
 8014a6a:	b128      	cbz	r0, 8014a78 <__smakebuf_r+0x74>
 8014a6c:	89a3      	ldrh	r3, [r4, #12]
 8014a6e:	f023 0303 	bic.w	r3, r3, #3
 8014a72:	f043 0301 	orr.w	r3, r3, #1
 8014a76:	81a3      	strh	r3, [r4, #12]
 8014a78:	89a0      	ldrh	r0, [r4, #12]
 8014a7a:	4305      	orrs	r5, r0
 8014a7c:	81a5      	strh	r5, [r4, #12]
 8014a7e:	e7cd      	b.n	8014a1c <__smakebuf_r+0x18>
 8014a80:	08014811 	.word	0x08014811

08014a84 <_raise_r>:
 8014a84:	291f      	cmp	r1, #31
 8014a86:	b538      	push	{r3, r4, r5, lr}
 8014a88:	4604      	mov	r4, r0
 8014a8a:	460d      	mov	r5, r1
 8014a8c:	d904      	bls.n	8014a98 <_raise_r+0x14>
 8014a8e:	2316      	movs	r3, #22
 8014a90:	6003      	str	r3, [r0, #0]
 8014a92:	f04f 30ff 	mov.w	r0, #4294967295
 8014a96:	bd38      	pop	{r3, r4, r5, pc}
 8014a98:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8014a9a:	b112      	cbz	r2, 8014aa2 <_raise_r+0x1e>
 8014a9c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014aa0:	b94b      	cbnz	r3, 8014ab6 <_raise_r+0x32>
 8014aa2:	4620      	mov	r0, r4
 8014aa4:	f000 f830 	bl	8014b08 <_getpid_r>
 8014aa8:	462a      	mov	r2, r5
 8014aaa:	4601      	mov	r1, r0
 8014aac:	4620      	mov	r0, r4
 8014aae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014ab2:	f000 b817 	b.w	8014ae4 <_kill_r>
 8014ab6:	2b01      	cmp	r3, #1
 8014ab8:	d00a      	beq.n	8014ad0 <_raise_r+0x4c>
 8014aba:	1c59      	adds	r1, r3, #1
 8014abc:	d103      	bne.n	8014ac6 <_raise_r+0x42>
 8014abe:	2316      	movs	r3, #22
 8014ac0:	6003      	str	r3, [r0, #0]
 8014ac2:	2001      	movs	r0, #1
 8014ac4:	e7e7      	b.n	8014a96 <_raise_r+0x12>
 8014ac6:	2400      	movs	r4, #0
 8014ac8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014acc:	4628      	mov	r0, r5
 8014ace:	4798      	blx	r3
 8014ad0:	2000      	movs	r0, #0
 8014ad2:	e7e0      	b.n	8014a96 <_raise_r+0x12>

08014ad4 <raise>:
 8014ad4:	4b02      	ldr	r3, [pc, #8]	; (8014ae0 <raise+0xc>)
 8014ad6:	4601      	mov	r1, r0
 8014ad8:	6818      	ldr	r0, [r3, #0]
 8014ada:	f7ff bfd3 	b.w	8014a84 <_raise_r>
 8014ade:	bf00      	nop
 8014ae0:	20000318 	.word	0x20000318

08014ae4 <_kill_r>:
 8014ae4:	b538      	push	{r3, r4, r5, lr}
 8014ae6:	4d07      	ldr	r5, [pc, #28]	; (8014b04 <_kill_r+0x20>)
 8014ae8:	2300      	movs	r3, #0
 8014aea:	4604      	mov	r4, r0
 8014aec:	4608      	mov	r0, r1
 8014aee:	4611      	mov	r1, r2
 8014af0:	602b      	str	r3, [r5, #0]
 8014af2:	f7ef fd25 	bl	8004540 <_kill>
 8014af6:	1c43      	adds	r3, r0, #1
 8014af8:	d102      	bne.n	8014b00 <_kill_r+0x1c>
 8014afa:	682b      	ldr	r3, [r5, #0]
 8014afc:	b103      	cbz	r3, 8014b00 <_kill_r+0x1c>
 8014afe:	6023      	str	r3, [r4, #0]
 8014b00:	bd38      	pop	{r3, r4, r5, pc}
 8014b02:	bf00      	nop
 8014b04:	20004fd0 	.word	0x20004fd0

08014b08 <_getpid_r>:
 8014b08:	f7ef bd12 	b.w	8004530 <_getpid>

08014b0c <__sread>:
 8014b0c:	b510      	push	{r4, lr}
 8014b0e:	460c      	mov	r4, r1
 8014b10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014b14:	f000 f894 	bl	8014c40 <_read_r>
 8014b18:	2800      	cmp	r0, #0
 8014b1a:	bfab      	itete	ge
 8014b1c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8014b1e:	89a3      	ldrhlt	r3, [r4, #12]
 8014b20:	181b      	addge	r3, r3, r0
 8014b22:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8014b26:	bfac      	ite	ge
 8014b28:	6563      	strge	r3, [r4, #84]	; 0x54
 8014b2a:	81a3      	strhlt	r3, [r4, #12]
 8014b2c:	bd10      	pop	{r4, pc}

08014b2e <__swrite>:
 8014b2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014b32:	461f      	mov	r7, r3
 8014b34:	898b      	ldrh	r3, [r1, #12]
 8014b36:	05db      	lsls	r3, r3, #23
 8014b38:	4605      	mov	r5, r0
 8014b3a:	460c      	mov	r4, r1
 8014b3c:	4616      	mov	r6, r2
 8014b3e:	d505      	bpl.n	8014b4c <__swrite+0x1e>
 8014b40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014b44:	2302      	movs	r3, #2
 8014b46:	2200      	movs	r2, #0
 8014b48:	f000 f868 	bl	8014c1c <_lseek_r>
 8014b4c:	89a3      	ldrh	r3, [r4, #12]
 8014b4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014b52:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014b56:	81a3      	strh	r3, [r4, #12]
 8014b58:	4632      	mov	r2, r6
 8014b5a:	463b      	mov	r3, r7
 8014b5c:	4628      	mov	r0, r5
 8014b5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014b62:	f000 b817 	b.w	8014b94 <_write_r>

08014b66 <__sseek>:
 8014b66:	b510      	push	{r4, lr}
 8014b68:	460c      	mov	r4, r1
 8014b6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014b6e:	f000 f855 	bl	8014c1c <_lseek_r>
 8014b72:	1c43      	adds	r3, r0, #1
 8014b74:	89a3      	ldrh	r3, [r4, #12]
 8014b76:	bf15      	itete	ne
 8014b78:	6560      	strne	r0, [r4, #84]	; 0x54
 8014b7a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8014b7e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8014b82:	81a3      	strheq	r3, [r4, #12]
 8014b84:	bf18      	it	ne
 8014b86:	81a3      	strhne	r3, [r4, #12]
 8014b88:	bd10      	pop	{r4, pc}

08014b8a <__sclose>:
 8014b8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014b8e:	f000 b813 	b.w	8014bb8 <_close_r>
	...

08014b94 <_write_r>:
 8014b94:	b538      	push	{r3, r4, r5, lr}
 8014b96:	4d07      	ldr	r5, [pc, #28]	; (8014bb4 <_write_r+0x20>)
 8014b98:	4604      	mov	r4, r0
 8014b9a:	4608      	mov	r0, r1
 8014b9c:	4611      	mov	r1, r2
 8014b9e:	2200      	movs	r2, #0
 8014ba0:	602a      	str	r2, [r5, #0]
 8014ba2:	461a      	mov	r2, r3
 8014ba4:	f7ef fd03 	bl	80045ae <_write>
 8014ba8:	1c43      	adds	r3, r0, #1
 8014baa:	d102      	bne.n	8014bb2 <_write_r+0x1e>
 8014bac:	682b      	ldr	r3, [r5, #0]
 8014bae:	b103      	cbz	r3, 8014bb2 <_write_r+0x1e>
 8014bb0:	6023      	str	r3, [r4, #0]
 8014bb2:	bd38      	pop	{r3, r4, r5, pc}
 8014bb4:	20004fd0 	.word	0x20004fd0

08014bb8 <_close_r>:
 8014bb8:	b538      	push	{r3, r4, r5, lr}
 8014bba:	4d06      	ldr	r5, [pc, #24]	; (8014bd4 <_close_r+0x1c>)
 8014bbc:	2300      	movs	r3, #0
 8014bbe:	4604      	mov	r4, r0
 8014bc0:	4608      	mov	r0, r1
 8014bc2:	602b      	str	r3, [r5, #0]
 8014bc4:	f7ef fd0f 	bl	80045e6 <_close>
 8014bc8:	1c43      	adds	r3, r0, #1
 8014bca:	d102      	bne.n	8014bd2 <_close_r+0x1a>
 8014bcc:	682b      	ldr	r3, [r5, #0]
 8014bce:	b103      	cbz	r3, 8014bd2 <_close_r+0x1a>
 8014bd0:	6023      	str	r3, [r4, #0]
 8014bd2:	bd38      	pop	{r3, r4, r5, pc}
 8014bd4:	20004fd0 	.word	0x20004fd0

08014bd8 <_fstat_r>:
 8014bd8:	b538      	push	{r3, r4, r5, lr}
 8014bda:	4d07      	ldr	r5, [pc, #28]	; (8014bf8 <_fstat_r+0x20>)
 8014bdc:	2300      	movs	r3, #0
 8014bde:	4604      	mov	r4, r0
 8014be0:	4608      	mov	r0, r1
 8014be2:	4611      	mov	r1, r2
 8014be4:	602b      	str	r3, [r5, #0]
 8014be6:	f7ef fd0a 	bl	80045fe <_fstat>
 8014bea:	1c43      	adds	r3, r0, #1
 8014bec:	d102      	bne.n	8014bf4 <_fstat_r+0x1c>
 8014bee:	682b      	ldr	r3, [r5, #0]
 8014bf0:	b103      	cbz	r3, 8014bf4 <_fstat_r+0x1c>
 8014bf2:	6023      	str	r3, [r4, #0]
 8014bf4:	bd38      	pop	{r3, r4, r5, pc}
 8014bf6:	bf00      	nop
 8014bf8:	20004fd0 	.word	0x20004fd0

08014bfc <_isatty_r>:
 8014bfc:	b538      	push	{r3, r4, r5, lr}
 8014bfe:	4d06      	ldr	r5, [pc, #24]	; (8014c18 <_isatty_r+0x1c>)
 8014c00:	2300      	movs	r3, #0
 8014c02:	4604      	mov	r4, r0
 8014c04:	4608      	mov	r0, r1
 8014c06:	602b      	str	r3, [r5, #0]
 8014c08:	f7ef fd09 	bl	800461e <_isatty>
 8014c0c:	1c43      	adds	r3, r0, #1
 8014c0e:	d102      	bne.n	8014c16 <_isatty_r+0x1a>
 8014c10:	682b      	ldr	r3, [r5, #0]
 8014c12:	b103      	cbz	r3, 8014c16 <_isatty_r+0x1a>
 8014c14:	6023      	str	r3, [r4, #0]
 8014c16:	bd38      	pop	{r3, r4, r5, pc}
 8014c18:	20004fd0 	.word	0x20004fd0

08014c1c <_lseek_r>:
 8014c1c:	b538      	push	{r3, r4, r5, lr}
 8014c1e:	4d07      	ldr	r5, [pc, #28]	; (8014c3c <_lseek_r+0x20>)
 8014c20:	4604      	mov	r4, r0
 8014c22:	4608      	mov	r0, r1
 8014c24:	4611      	mov	r1, r2
 8014c26:	2200      	movs	r2, #0
 8014c28:	602a      	str	r2, [r5, #0]
 8014c2a:	461a      	mov	r2, r3
 8014c2c:	f7ef fd02 	bl	8004634 <_lseek>
 8014c30:	1c43      	adds	r3, r0, #1
 8014c32:	d102      	bne.n	8014c3a <_lseek_r+0x1e>
 8014c34:	682b      	ldr	r3, [r5, #0]
 8014c36:	b103      	cbz	r3, 8014c3a <_lseek_r+0x1e>
 8014c38:	6023      	str	r3, [r4, #0]
 8014c3a:	bd38      	pop	{r3, r4, r5, pc}
 8014c3c:	20004fd0 	.word	0x20004fd0

08014c40 <_read_r>:
 8014c40:	b538      	push	{r3, r4, r5, lr}
 8014c42:	4d07      	ldr	r5, [pc, #28]	; (8014c60 <_read_r+0x20>)
 8014c44:	4604      	mov	r4, r0
 8014c46:	4608      	mov	r0, r1
 8014c48:	4611      	mov	r1, r2
 8014c4a:	2200      	movs	r2, #0
 8014c4c:	602a      	str	r2, [r5, #0]
 8014c4e:	461a      	mov	r2, r3
 8014c50:	f7ef fc90 	bl	8004574 <_read>
 8014c54:	1c43      	adds	r3, r0, #1
 8014c56:	d102      	bne.n	8014c5e <_read_r+0x1e>
 8014c58:	682b      	ldr	r3, [r5, #0]
 8014c5a:	b103      	cbz	r3, 8014c5e <_read_r+0x1e>
 8014c5c:	6023      	str	r3, [r4, #0]
 8014c5e:	bd38      	pop	{r3, r4, r5, pc}
 8014c60:	20004fd0 	.word	0x20004fd0

08014c64 <_init>:
 8014c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014c66:	bf00      	nop
 8014c68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014c6a:	bc08      	pop	{r3}
 8014c6c:	469e      	mov	lr, r3
 8014c6e:	4770      	bx	lr

08014c70 <_fini>:
 8014c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014c72:	bf00      	nop
 8014c74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014c76:	bc08      	pop	{r3}
 8014c78:	469e      	mov	lr, r3
 8014c7a:	4770      	bx	lr
