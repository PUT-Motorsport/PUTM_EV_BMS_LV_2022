
BMSLV_2022.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016ca0  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a08  08016e60  08016e60  00017e60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017868  08017868  00019570  2**0
                  CONTENTS
  4 .ARM          00000008  08017868  08017868  00018868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017870  08017870  00019570  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000010  08017870  08017870  00018870  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017880  08017880  00018880  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000570  20000000  08017884  00019000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008a40  20000570  08017df4  00019570  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20008fb0  08017df4  00019fb0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00019570  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004abdd  00000000  00000000  000195a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00008aa4  00000000  00000000  0006417d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002bd8  00000000  00000000  0006cc28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00002167  00000000  00000000  0006f800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003b5ab  00000000  00000000  00071967  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003750a  00000000  00000000  000acf12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0014f206  00000000  00000000  000e441c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00233622  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000cb2c  00000000  00000000  00233668  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  00240194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000570 	.word	0x20000570
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08016e48 	.word	0x08016e48

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000574 	.word	0x20000574
 80001fc:	08016e48 	.word	0x08016e48

08000200 <strcmp>:
 8000200:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000204:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000208:	2a01      	cmp	r2, #1
 800020a:	bf28      	it	cs
 800020c:	429a      	cmpcs	r2, r3
 800020e:	d0f7      	beq.n	8000200 <strcmp>
 8000210:	1ad0      	subs	r0, r2, r3
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <_Z20discharge_cells_taili>:
			the next cell to discharge has to be the first one.
			So generally it sets the array tail at the beginning.
 * Param:	index
 * Retval:	index
 */
int discharge_cells_tail(int i){
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
	if(5 == i || 6 == i)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	2b05      	cmp	r3, #5
 8000c04:	d002      	beq.n	8000c0c <_Z20discharge_cells_taili+0x14>
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	2b06      	cmp	r3, #6
 8000c0a:	d102      	bne.n	8000c12 <_Z20discharge_cells_taili+0x1a>
		return -1;
 8000c0c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000c10:	e000      	b.n	8000c14 <_Z20discharge_cells_taili+0x1c>
	else
		return i;
 8000c12:	687b      	ldr	r3, [r7, #4]
}
 8000c14:	4618      	mov	r0, r3
 8000c16:	370c      	adds	r7, #12
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr

08000c20 <_Z18set_discharge_cellRhRi>:
/**
 * Brief:	It sets cell to be discharged
 * Param:	Index
 * Retval:	None
 */
void set_discharge_cell(uint8_t &discharge_at_once, int &i){
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
 8000c28:	6039      	str	r1, [r7, #0]
	if(discharge_at_once < MAX_CELLS_DISCHARGE_AT_ONCE)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	2b01      	cmp	r3, #1
 8000c30:	d826      	bhi.n	8000c80 <_Z18set_discharge_cellRhRi+0x60>
	{
		data.charging.cell_discharge[i] = true;
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	4a14      	ldr	r2, [pc, #80]	@ (8000c88 <_Z18set_discharge_cellRhRi+0x68>)
 8000c38:	4413      	add	r3, r2
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
		discharge_at_once++;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	3301      	adds	r3, #1
 8000c46:	b2da      	uxtb	r2, r3
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	701a      	strb	r2, [r3, #0]
		i++;	//impossible to discharge 2 cells next to each other
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	1c5a      	adds	r2, r3, #1
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	601a      	str	r2, [r3, #0]
		i=discharge_cells_tail(i);
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f7ff ffcc 	bl	8000bf8 <_Z20discharge_cells_taili>
 8000c60:	4602      	mov	r2, r0
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	601a      	str	r2, [r3, #0]

		data.charging.discharge_activation = true;
 8000c66:	4b08      	ldr	r3, [pc, #32]	@ (8000c88 <_Z18set_discharge_cellRhRi+0x68>)
 8000c68:	2201      	movs	r2, #1
 8000c6a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
		data.charging.discharge_tick_end = HAL_GetTick() + BALANCE_TIME;
 8000c6e:	f004 fbd1 	bl	8005414 <HAL_GetTick>
 8000c72:	4603      	mov	r3, r0
 8000c74:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 8000c78:	3310      	adds	r3, #16
 8000c7a:	4a03      	ldr	r2, [pc, #12]	@ (8000c88 <_Z18set_discharge_cellRhRi+0x68>)
 8000c7c:	f8c2 32a0 	str.w	r3, [r2, #672]	@ 0x2a0
	}
}
 8000c80:	bf00      	nop
 8000c82:	3708      	adds	r7, #8
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	20000aa4 	.word	0x20000aa4

08000c8c <_Z22set_discharge_cell_maxRhRiRb>:
/**
 * Brief:	It sets cell having the highest voltage to be discharged
 * Param:	Index
 * Retval:	None
 */
void set_discharge_cell_max(uint8_t &discharge_at_once, int &i, bool &max_voltage_discharge_activation){
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b084      	sub	sp, #16
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	60f8      	str	r0, [r7, #12]
 8000c94:	60b9      	str	r1, [r7, #8]
 8000c96:	607a      	str	r2, [r7, #4]
	max_voltage_discharge_activation = false;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	701a      	strb	r2, [r3, #0]
	if(discharge_at_once < MAX_CELLS_DISCHARGE_AT_ONCE)
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	2b01      	cmp	r3, #1
 8000ca4:	d827      	bhi.n	8000cf6 <_Z22set_discharge_cell_maxRhRiRb+0x6a>
	{
		data.charging.cell_discharge[data.voltages.highest_cell_voltage_index] = true;
 8000ca6:	4b16      	ldr	r3, [pc, #88]	@ (8000d00 <_Z22set_discharge_cell_maxRhRiRb+0x74>)
 8000ca8:	7c9b      	ldrb	r3, [r3, #18]
 8000caa:	461a      	mov	r2, r3
 8000cac:	4b14      	ldr	r3, [pc, #80]	@ (8000d00 <_Z22set_discharge_cell_maxRhRiRb+0x74>)
 8000cae:	4413      	add	r3, r2
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
		discharge_at_once++;
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	3301      	adds	r3, #1
 8000cbc:	b2da      	uxtb	r2, r3
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	701a      	strb	r2, [r3, #0]
		i = data.voltages.highest_cell_voltage_index + 1; //impossible to discharge 2 cells next to each other
 8000cc2:	4b0f      	ldr	r3, [pc, #60]	@ (8000d00 <_Z22set_discharge_cell_maxRhRiRb+0x74>)
 8000cc4:	7c9b      	ldrb	r3, [r3, #18]
 8000cc6:	1c5a      	adds	r2, r3, #1
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	601a      	str	r2, [r3, #0]
		i=discharge_cells_tail(i);
 8000ccc:	68bb      	ldr	r3, [r7, #8]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f7ff ff91 	bl	8000bf8 <_Z20discharge_cells_taili>
 8000cd6:	4602      	mov	r2, r0
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	601a      	str	r2, [r3, #0]

		data.charging.discharge_activation = true;
 8000cdc:	4b08      	ldr	r3, [pc, #32]	@ (8000d00 <_Z22set_discharge_cell_maxRhRiRb+0x74>)
 8000cde:	2201      	movs	r2, #1
 8000ce0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
		data.charging.discharge_tick_end = HAL_GetTick() + BALANCE_TIME;
 8000ce4:	f004 fb96 	bl	8005414 <HAL_GetTick>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 8000cee:	3310      	adds	r3, #16
 8000cf0:	4a03      	ldr	r2, [pc, #12]	@ (8000d00 <_Z22set_discharge_cell_maxRhRiRb+0x74>)
 8000cf2:	f8c2 32a0 	str.w	r3, [r2, #672]	@ 0x2a0
	}
}
 8000cf6:	bf00      	nop
 8000cf8:	3710      	adds	r7, #16
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	20000aa4 	.word	0x20000aa4

08000d04 <_Z15balance_controlv>:
 * Brief:	Control of cell discharges
 * Param:	None
 * Retval:	None
 */
void balance_control()
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b086      	sub	sp, #24
 8000d08:	af00      	add	r7, sp, #0
	uint8_t charged_cells = 0, nearly_charged_cells = 0, cell_overcharged = 0, discharge_at_once = 0;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	75fb      	strb	r3, [r7, #23]
 8000d0e:	2300      	movs	r3, #0
 8000d10:	75bb      	strb	r3, [r7, #22]
 8000d12:	2300      	movs	r3, #0
 8000d14:	757b      	strb	r3, [r7, #21]
 8000d16:	2300      	movs	r3, #0
 8000d18:	73fb      	strb	r3, [r7, #15]
	bool max_voltage_discharge_activation= 0, max_voltage_discharge_activation_charging_off = 0;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	73bb      	strb	r3, [r7, #14]
 8000d1e:	2300      	movs	r3, #0
 8000d20:	737b      	strb	r3, [r7, #13]

	for(unsigned int i = 0; i < NUMBER_OF_CELLS; i++)
 8000d22:	2300      	movs	r3, #0
 8000d24:	613b      	str	r3, [r7, #16]
 8000d26:	e03c      	b.n	8000da2 <_Z15balance_controlv+0x9e>
	{
		if(data.voltages.highest_cell_voltage > VOL_UP_OK || (data.voltages.highest_cell_voltage - data.voltages.lowest_cell_voltage) > BALANCE_VALUE)
 8000d28:	4b9f      	ldr	r3, [pc, #636]	@ (8000fa8 <_Z15balance_controlv+0x2a4>)
 8000d2a:	8b9b      	ldrh	r3, [r3, #28]
 8000d2c:	f24a 420b 	movw	r2, #41995	@ 0xa40b
 8000d30:	4293      	cmp	r3, r2
 8000d32:	d808      	bhi.n	8000d46 <_Z15balance_controlv+0x42>
 8000d34:	4b9c      	ldr	r3, [pc, #624]	@ (8000fa8 <_Z15balance_controlv+0x2a4>)
 8000d36:	8b9b      	ldrh	r3, [r3, #28]
 8000d38:	461a      	mov	r2, r3
 8000d3a:	4b9b      	ldr	r3, [pc, #620]	@ (8000fa8 <_Z15balance_controlv+0x2a4>)
 8000d3c:	8b5b      	ldrh	r3, [r3, #26]
 8000d3e:	1ad3      	subs	r3, r2, r3
 8000d40:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000d44:	dd01      	ble.n	8000d4a <_Z15balance_controlv+0x46>
		{
			max_voltage_discharge_activation= true;
 8000d46:	2301      	movs	r3, #1
 8000d48:	73bb      	strb	r3, [r7, #14]
		}
		if(data.voltages.highest_cell_voltage > VOL_UP_OK)
 8000d4a:	4b97      	ldr	r3, [pc, #604]	@ (8000fa8 <_Z15balance_controlv+0x2a4>)
 8000d4c:	8b9b      	ldrh	r3, [r3, #28]
 8000d4e:	f24a 420b 	movw	r2, #41995	@ 0xa40b
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d901      	bls.n	8000d5a <_Z15balance_controlv+0x56>
		{
			max_voltage_discharge_activation_charging_off = true;
 8000d56:	2301      	movs	r3, #1
 8000d58:	737b      	strb	r3, [r7, #13]
		}
		if(data.voltages.cells[i] > VOL_UP_OK)
 8000d5a:	4a93      	ldr	r2, [pc, #588]	@ (8000fa8 <_Z15balance_controlv+0x2a4>)
 8000d5c:	693b      	ldr	r3, [r7, #16]
 8000d5e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d62:	f24a 420b 	movw	r2, #41995	@ 0xa40b
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d902      	bls.n	8000d70 <_Z15balance_controlv+0x6c>
		{
			charged_cells++;
 8000d6a:	7dfb      	ldrb	r3, [r7, #23]
 8000d6c:	3301      	adds	r3, #1
 8000d6e:	75fb      	strb	r3, [r7, #23]
		}
		if(data.voltages.cells[i] > VOL_UP_NEARLY_OK)
 8000d70:	4a8d      	ldr	r2, [pc, #564]	@ (8000fa8 <_Z15balance_controlv+0x2a4>)
 8000d72:	693b      	ldr	r3, [r7, #16]
 8000d74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d78:	f24a 32c0 	movw	r2, #41920	@ 0xa3c0
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	d902      	bls.n	8000d86 <_Z15balance_controlv+0x82>
		{
			nearly_charged_cells++;
 8000d80:	7dbb      	ldrb	r3, [r7, #22]
 8000d82:	3301      	adds	r3, #1
 8000d84:	75bb      	strb	r3, [r7, #22]
		}
		if(data.voltages.cells[i] > VOL_UP_OVERCHARGE)
 8000d86:	4a88      	ldr	r2, [pc, #544]	@ (8000fa8 <_Z15balance_controlv+0x2a4>)
 8000d88:	693b      	ldr	r3, [r7, #16]
 8000d8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d8e:	f24a 4274 	movw	r2, #42100	@ 0xa474
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d902      	bls.n	8000d9c <_Z15balance_controlv+0x98>
		{
			cell_overcharged++;
 8000d96:	7d7b      	ldrb	r3, [r7, #21]
 8000d98:	3301      	adds	r3, #1
 8000d9a:	757b      	strb	r3, [r7, #21]
	for(unsigned int i = 0; i < NUMBER_OF_CELLS; i++)
 8000d9c:	693b      	ldr	r3, [r7, #16]
 8000d9e:	3301      	adds	r3, #1
 8000da0:	613b      	str	r3, [r7, #16]
 8000da2:	693b      	ldr	r3, [r7, #16]
 8000da4:	2b05      	cmp	r3, #5
 8000da6:	d9bf      	bls.n	8000d28 <_Z15balance_controlv+0x24>
		}
	}

	//EFUSE switch off - battery full
	if(charged_cells >= 4 && fabsf(data.current.value) < CHARGING_CUTOFF_CURRENT && nearly_charged_cells == 6)
 8000da8:	7dfb      	ldrb	r3, [r7, #23]
 8000daa:	2b03      	cmp	r3, #3
 8000dac:	d926      	bls.n	8000dfc <_Z15balance_controlv+0xf8>
 8000dae:	4b7e      	ldr	r3, [pc, #504]	@ (8000fa8 <_Z15balance_controlv+0x2a4>)
 8000db0:	edd3 7a73 	vldr	s15, [r3, #460]	@ 0x1cc
 8000db4:	eef0 7ae7 	vabs.f32	s15, s15
 8000db8:	ed9f 7a7c 	vldr	s14, [pc, #496]	@ 8000fac <_Z15balance_controlv+0x2a8>
 8000dbc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000dc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dc4:	d51a      	bpl.n	8000dfc <_Z15balance_controlv+0xf8>
 8000dc6:	7dbb      	ldrb	r3, [r7, #22]
 8000dc8:	2b06      	cmp	r3, #6
 8000dca:	d117      	bne.n	8000dfc <_Z15balance_controlv+0xf8>
	{
		HAL_GPIO_WritePin(EFUSE_GPIO_Port, EFUSE_Pin, GPIO_PIN_RESET);
 8000dcc:	2200      	movs	r2, #0
 8000dce:	2104      	movs	r1, #4
 8000dd0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dd4:	f007 fc0c 	bl	80085f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 8000dd8:	2200      	movs	r2, #0
 8000dda:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000dde:	4874      	ldr	r0, [pc, #464]	@ (8000fb0 <_Z15balance_controlv+0x2ac>)
 8000de0:	f007 fc06 	bl	80085f0 <HAL_GPIO_WritePin>
		data.soc.main.set_full_battery();
 8000de4:	4873      	ldr	r0, [pc, #460]	@ (8000fb4 <_Z15balance_controlv+0x2b0>)
 8000de6:	f003 fb1d 	bl	8004424 <_ZN7SoC_EKF16set_full_batteryEv>
		data.charging.charging_state = false;
 8000dea:	4b6f      	ldr	r3, [pc, #444]	@ (8000fa8 <_Z15balance_controlv+0x2a4>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	f883 229b 	strb.w	r2, [r3, #667]	@ 0x29b
		data.acu_state = 0;
 8000df2:	4b6d      	ldr	r3, [pc, #436]	@ (8000fa8 <_Z15balance_controlv+0x2a4>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	f883 22a4 	strb.w	r2, [r3, #676]	@ 0x2a4
 8000dfa:	e043      	b.n	8000e84 <_Z15balance_controlv+0x180>
	}
	//EFUSE switch off - cell overcharged
	else if(cell_overcharged > 1 && data.charging.discharge_activation == 0)
 8000dfc:	7d7b      	ldrb	r3, [r7, #21]
 8000dfe:	2b01      	cmp	r3, #1
 8000e00:	d919      	bls.n	8000e36 <_Z15balance_controlv+0x132>
 8000e02:	4b69      	ldr	r3, [pc, #420]	@ (8000fa8 <_Z15balance_controlv+0x2a4>)
 8000e04:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d114      	bne.n	8000e36 <_Z15balance_controlv+0x132>
	{
		HAL_GPIO_WritePin(EFUSE_GPIO_Port, EFUSE_Pin, GPIO_PIN_RESET);
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	2104      	movs	r1, #4
 8000e10:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e14:	f007 fbec 	bl	80085f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 8000e18:	2200      	movs	r2, #0
 8000e1a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e1e:	4864      	ldr	r0, [pc, #400]	@ (8000fb0 <_Z15balance_controlv+0x2ac>)
 8000e20:	f007 fbe6 	bl	80085f0 <HAL_GPIO_WritePin>
		data.charging.charging_state = false;
 8000e24:	4b60      	ldr	r3, [pc, #384]	@ (8000fa8 <_Z15balance_controlv+0x2a4>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	f883 229b 	strb.w	r2, [r3, #667]	@ 0x29b
		data.acu_state = 0;
 8000e2c:	4b5e      	ldr	r3, [pc, #376]	@ (8000fa8 <_Z15balance_controlv+0x2a4>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	f883 22a4 	strb.w	r2, [r3, #676]	@ 0x2a4
 8000e34:	e026      	b.n	8000e84 <_Z15balance_controlv+0x180>
	}
	//EFUSE switch on
	else if(!data.charging.charger_plugged && nearly_charged_cells < 6 && cell_overcharged == 0 && data.charging.discharge_activation == 0)// && acuState == 0
 8000e36:	4b5c      	ldr	r3, [pc, #368]	@ (8000fa8 <_Z15balance_controlv+0x2a4>)
 8000e38:	f893 329a 	ldrb.w	r3, [r3, #666]	@ 0x29a
 8000e3c:	f083 0301 	eor.w	r3, r3, #1
 8000e40:	b2db      	uxtb	r3, r3
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d01e      	beq.n	8000e84 <_Z15balance_controlv+0x180>
 8000e46:	7dbb      	ldrb	r3, [r7, #22]
 8000e48:	2b05      	cmp	r3, #5
 8000e4a:	d81b      	bhi.n	8000e84 <_Z15balance_controlv+0x180>
 8000e4c:	7d7b      	ldrb	r3, [r7, #21]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d118      	bne.n	8000e84 <_Z15balance_controlv+0x180>
 8000e52:	4b55      	ldr	r3, [pc, #340]	@ (8000fa8 <_Z15balance_controlv+0x2a4>)
 8000e54:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d113      	bne.n	8000e84 <_Z15balance_controlv+0x180>
	{
		HAL_GPIO_WritePin(EFUSE_GPIO_Port, EFUSE_Pin, GPIO_PIN_SET);
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	2104      	movs	r1, #4
 8000e60:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e64:	f007 fbc4 	bl	80085f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET);
 8000e68:	2201      	movs	r2, #1
 8000e6a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e6e:	4850      	ldr	r0, [pc, #320]	@ (8000fb0 <_Z15balance_controlv+0x2ac>)
 8000e70:	f007 fbbe 	bl	80085f0 <HAL_GPIO_WritePin>
		data.charging.charging_state = true;
 8000e74:	4b4c      	ldr	r3, [pc, #304]	@ (8000fa8 <_Z15balance_controlv+0x2a4>)
 8000e76:	2201      	movs	r2, #1
 8000e78:	f883 229b 	strb.w	r2, [r3, #667]	@ 0x29b
		data.acu_state = 1;
 8000e7c:	4b4a      	ldr	r3, [pc, #296]	@ (8000fa8 <_Z15balance_controlv+0x2a4>)
 8000e7e:	2201      	movs	r2, #1
 8000e80:	f883 22a4 	strb.w	r2, [r3, #676]	@ 0x2a4
	}


	//cell choice algorithm when charger is connected
	if(true == data.charging.charging_state && fabsf(data.current.value) > CHARGING_CUTOFF_CURRENT ) //charging on
 8000e84:	4b48      	ldr	r3, [pc, #288]	@ (8000fa8 <_Z15balance_controlv+0x2a4>)
 8000e86:	f893 329b 	ldrb.w	r3, [r3, #667]	@ 0x29b
 8000e8a:	2b01      	cmp	r3, #1
 8000e8c:	d152      	bne.n	8000f34 <_Z15balance_controlv+0x230>
 8000e8e:	4b46      	ldr	r3, [pc, #280]	@ (8000fa8 <_Z15balance_controlv+0x2a4>)
 8000e90:	edd3 7a73 	vldr	s15, [r3, #460]	@ 0x1cc
 8000e94:	eef0 7ae7 	vabs.f32	s15, s15
 8000e98:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 8000fac <_Z15balance_controlv+0x2a8>
 8000e9c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ea0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ea4:	dd46      	ble.n	8000f34 <_Z15balance_controlv+0x230>
	{
		if(false == data.charging.discharge_activation)
 8000ea6:	4b40      	ldr	r3, [pc, #256]	@ (8000fa8 <_Z15balance_controlv+0x2a4>)
 8000ea8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d175      	bne.n	8000f9c <_Z15balance_controlv+0x298>
		{
			for(int i = 0; i < NUMBER_OF_CELLS; i++)
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	60bb      	str	r3, [r7, #8]
 8000eb4:	e03a      	b.n	8000f2c <_Z15balance_controlv+0x228>
			{
				//discharge activation for the cell with the highest voltage
				if(true == max_voltage_discharge_activation)
 8000eb6:	7bbb      	ldrb	r3, [r7, #14]
 8000eb8:	2b01      	cmp	r3, #1
 8000eba:	d109      	bne.n	8000ed0 <_Z15balance_controlv+0x1cc>
				{
					set_discharge_cell_max(discharge_at_once, i, max_voltage_discharge_activation);
 8000ebc:	f107 020e 	add.w	r2, r7, #14
 8000ec0:	f107 0108 	add.w	r1, r7, #8
 8000ec4:	f107 030f 	add.w	r3, r7, #15
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f7ff fedf 	bl	8000c8c <_Z22set_discharge_cell_maxRhRiRb>
 8000ece:	e02a      	b.n	8000f26 <_Z15balance_controlv+0x222>
				}
				//discharge activation for the cells with maximum voltage level - 4.201V
				else if(data.voltages.cells[i] > VOL_DIS)
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	4a35      	ldr	r2, [pc, #212]	@ (8000fa8 <_Z15balance_controlv+0x2a4>)
 8000ed4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ed8:	f24a 421a 	movw	r2, #42010	@ 0xa41a
 8000edc:	4293      	cmp	r3, r2
 8000ede:	d908      	bls.n	8000ef2 <_Z15balance_controlv+0x1ee>
				{
					set_discharge_cell(discharge_at_once, i);
 8000ee0:	f107 0208 	add.w	r2, r7, #8
 8000ee4:	f107 030f 	add.w	r3, r7, #15
 8000ee8:	4611      	mov	r1, r2
 8000eea:	4618      	mov	r0, r3
 8000eec:	f7ff fe98 	bl	8000c20 <_Z18set_discharge_cellRhRi>
 8000ef0:	e019      	b.n	8000f26 <_Z15balance_controlv+0x222>
				}
				//discharge activation for rest cells if needed
				else if((data.voltages.cells[i] - data.voltages.lowest_cell_voltage) > BALANCE_VALUE)
 8000ef2:	68bb      	ldr	r3, [r7, #8]
 8000ef4:	4a2c      	ldr	r2, [pc, #176]	@ (8000fa8 <_Z15balance_controlv+0x2a4>)
 8000ef6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000efa:	461a      	mov	r2, r3
 8000efc:	4b2a      	ldr	r3, [pc, #168]	@ (8000fa8 <_Z15balance_controlv+0x2a4>)
 8000efe:	8b5b      	ldrh	r3, [r3, #26]
 8000f00:	1ad3      	subs	r3, r2, r3
 8000f02:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000f06:	dd08      	ble.n	8000f1a <_Z15balance_controlv+0x216>
				{
					set_discharge_cell(discharge_at_once, i);
 8000f08:	f107 0208 	add.w	r2, r7, #8
 8000f0c:	f107 030f 	add.w	r3, r7, #15
 8000f10:	4611      	mov	r1, r2
 8000f12:	4618      	mov	r0, r3
 8000f14:	f7ff fe84 	bl	8000c20 <_Z18set_discharge_cellRhRi>
 8000f18:	e005      	b.n	8000f26 <_Z15balance_controlv+0x222>
				}
				else
					data.charging.cell_discharge[i] = false;
 8000f1a:	68bb      	ldr	r3, [r7, #8]
 8000f1c:	4a22      	ldr	r2, [pc, #136]	@ (8000fa8 <_Z15balance_controlv+0x2a4>)
 8000f1e:	4413      	add	r3, r2
 8000f20:	2200      	movs	r2, #0
 8000f22:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
			for(int i = 0; i < NUMBER_OF_CELLS; i++)
 8000f26:	68bb      	ldr	r3, [r7, #8]
 8000f28:	3301      	adds	r3, #1
 8000f2a:	60bb      	str	r3, [r7, #8]
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	2b05      	cmp	r3, #5
 8000f30:	ddc1      	ble.n	8000eb6 <_Z15balance_controlv+0x1b2>
			}
		}
	}
 8000f32:	e033      	b.n	8000f9c <_Z15balance_controlv+0x298>
	else //charging off
	{
		//balance if the cell voltages are overcharged
		if(not  data.charging.discharge_activation)
 8000f34:	4b1c      	ldr	r3, [pc, #112]	@ (8000fa8 <_Z15balance_controlv+0x2a4>)
 8000f36:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8000f3a:	f083 0301 	eor.w	r3, r3, #1
 8000f3e:	b2db      	uxtb	r3, r3
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d02c      	beq.n	8000f9e <_Z15balance_controlv+0x29a>
		{
			for(int i = 0; i < NUMBER_OF_CELLS; i++)
 8000f44:	2300      	movs	r3, #0
 8000f46:	607b      	str	r3, [r7, #4]
 8000f48:	e024      	b.n	8000f94 <_Z15balance_controlv+0x290>
			{
				//discharge activation for the cell with the highest voltage
				if(true == max_voltage_discharge_activation_charging_off)
 8000f4a:	7b7b      	ldrb	r3, [r7, #13]
 8000f4c:	2b01      	cmp	r3, #1
 8000f4e:	d108      	bne.n	8000f62 <_Z15balance_controlv+0x25e>
				{
					set_discharge_cell_max(discharge_at_once, i, max_voltage_discharge_activation_charging_off);
 8000f50:	f107 020d 	add.w	r2, r7, #13
 8000f54:	1d39      	adds	r1, r7, #4
 8000f56:	f107 030f 	add.w	r3, r7, #15
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f7ff fe96 	bl	8000c8c <_Z22set_discharge_cell_maxRhRiRb>
 8000f60:	e015      	b.n	8000f8e <_Z15balance_controlv+0x28a>
				}
				//discharge activation for the cells with maximum voltage level - 4.201V
				else if(data.voltages.cells[i] > VOL_DIS)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4a10      	ldr	r2, [pc, #64]	@ (8000fa8 <_Z15balance_controlv+0x2a4>)
 8000f66:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f6a:	f24a 421a 	movw	r2, #42010	@ 0xa41a
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d907      	bls.n	8000f82 <_Z15balance_controlv+0x27e>
				{
					set_discharge_cell(discharge_at_once, i);
 8000f72:	1d3a      	adds	r2, r7, #4
 8000f74:	f107 030f 	add.w	r3, r7, #15
 8000f78:	4611      	mov	r1, r2
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f7ff fe50 	bl	8000c20 <_Z18set_discharge_cellRhRi>
 8000f80:	e005      	b.n	8000f8e <_Z15balance_controlv+0x28a>
				}
				else
					data.charging.cell_discharge[i] = false;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4a08      	ldr	r2, [pc, #32]	@ (8000fa8 <_Z15balance_controlv+0x2a4>)
 8000f86:	4413      	add	r3, r2
 8000f88:	2200      	movs	r2, #0
 8000f8a:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
			for(int i = 0; i < NUMBER_OF_CELLS; i++)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	3301      	adds	r3, #1
 8000f92:	607b      	str	r3, [r7, #4]
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2b05      	cmp	r3, #5
 8000f98:	ddd7      	ble.n	8000f4a <_Z15balance_controlv+0x246>
			}
		}
	}
}
 8000f9a:	e000      	b.n	8000f9e <_Z15balance_controlv+0x29a>
	}
 8000f9c:	bf00      	nop
}
 8000f9e:	bf00      	nop
 8000fa0:	3718      	adds	r7, #24
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	20000aa4 	.word	0x20000aa4
 8000fac:	3e99999a 	.word	0x3e99999a
 8000fb0:	48000800 	.word	0x48000800
 8000fb4:	20000c7c 	.word	0x20000c7c

08000fb8 <_Z31balance_activation_deactivationv>:
 * Brief:	Activation or deactivation of balance
 * Param:	None
 * Retval:	None
 */
void balance_activation_deactivation()
{
 8000fb8:	b590      	push	{r4, r7, lr}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
	if(true == data.charging.discharge_activation)
 8000fbe:	4b27      	ldr	r3, [pc, #156]	@ (800105c <_Z31balance_activation_deactivationv+0xa4>)
 8000fc0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8000fc4:	2b01      	cmp	r3, #1
 8000fc6:	d117      	bne.n	8000ff8 <_Z31balance_activation_deactivationv+0x40>
	{
		for(int i = 0; i < NUMBER_OF_CELLS ; i++)
 8000fc8:	2300      	movs	r3, #0
 8000fca:	607b      	str	r3, [r7, #4]
 8000fcc:	e00e      	b.n	8000fec <_Z31balance_activation_deactivationv+0x34>
		{
			if(true == data.charging.cell_discharge[i])
 8000fce:	4a23      	ldr	r2, [pc, #140]	@ (800105c <_Z31balance_activation_deactivationv+0xa4>)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	4413      	add	r3, r2
 8000fd4:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	2b01      	cmp	r3, #1
 8000fdc:	d103      	bne.n	8000fe6 <_Z31balance_activation_deactivationv+0x2e>
			{
				LTC_turn_on_discharge(i, data.charging.cell_discharge);
 8000fde:	4920      	ldr	r1, [pc, #128]	@ (8001060 <_Z31balance_activation_deactivationv+0xa8>)
 8000fe0:	6878      	ldr	r0, [r7, #4]
 8000fe2:	f001 fe45 	bl	8002c70 <_Z21LTC_turn_on_dischargeiPb>
		for(int i = 0; i < NUMBER_OF_CELLS ; i++)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	3301      	adds	r3, #1
 8000fea:	607b      	str	r3, [r7, #4]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2b05      	cmp	r3, #5
 8000ff0:	dded      	ble.n	8000fce <_Z31balance_activation_deactivationv+0x16>
			}
		}
		balance_deactivation_flag = true;
 8000ff2:	4b1c      	ldr	r3, [pc, #112]	@ (8001064 <_Z31balance_activation_deactivationv+0xac>)
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	701a      	strb	r2, [r3, #0]
	}
	if(data.charging.discharge_tick_end <= HAL_GetTick() && balance_deactivation_flag)
 8000ff8:	4b18      	ldr	r3, [pc, #96]	@ (800105c <_Z31balance_activation_deactivationv+0xa4>)
 8000ffa:	f8d3 42a0 	ldr.w	r4, [r3, #672]	@ 0x2a0
 8000ffe:	f004 fa09 	bl	8005414 <HAL_GetTick>
 8001002:	4603      	mov	r3, r0
 8001004:	429c      	cmp	r4, r3
 8001006:	d805      	bhi.n	8001014 <_Z31balance_activation_deactivationv+0x5c>
 8001008:	4b16      	ldr	r3, [pc, #88]	@ (8001064 <_Z31balance_activation_deactivationv+0xac>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <_Z31balance_activation_deactivationv+0x5c>
 8001010:	2301      	movs	r3, #1
 8001012:	e000      	b.n	8001016 <_Z31balance_activation_deactivationv+0x5e>
 8001014:	2300      	movs	r3, #0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d01b      	beq.n	8001052 <_Z31balance_activation_deactivationv+0x9a>
	{
		balance_deactivation_flag = false;
 800101a:	4b12      	ldr	r3, [pc, #72]	@ (8001064 <_Z31balance_activation_deactivationv+0xac>)
 800101c:	2200      	movs	r2, #0
 800101e:	701a      	strb	r2, [r3, #0]
		data.charging.discharge_activation = 0;
 8001020:	4b0e      	ldr	r3, [pc, #56]	@ (800105c <_Z31balance_activation_deactivationv+0xa4>)
 8001022:	2200      	movs	r2, #0
 8001024:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
		for(int i = 0; i < NUMBER_OF_CELLS ; i++)
 8001028:	2300      	movs	r3, #0
 800102a:	603b      	str	r3, [r7, #0]
 800102c:	e009      	b.n	8001042 <_Z31balance_activation_deactivationv+0x8a>
		{
			data.charging.cell_discharge[i] = false;
 800102e:	4a0b      	ldr	r2, [pc, #44]	@ (800105c <_Z31balance_activation_deactivationv+0xa4>)
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	4413      	add	r3, r2
 8001034:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 8001038:	2200      	movs	r2, #0
 800103a:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < NUMBER_OF_CELLS ; i++)
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	3301      	adds	r3, #1
 8001040:	603b      	str	r3, [r7, #0]
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	2b05      	cmp	r3, #5
 8001046:	ddf2      	ble.n	800102e <_Z31balance_activation_deactivationv+0x76>
		}
		LTC_turn_off_discharge();
 8001048:	f001 ff02 	bl	8002e50 <_Z22LTC_turn_off_dischargev>
		tick_counter = 0; // time to wait for proper voltage values
 800104c:	4b06      	ldr	r3, [pc, #24]	@ (8001068 <_Z31balance_activation_deactivationv+0xb0>)
 800104e:	2200      	movs	r2, #0
 8001050:	601a      	str	r2, [r3, #0]
	}
}
 8001052:	bf00      	nop
 8001054:	370c      	adds	r7, #12
 8001056:	46bd      	mov	sp, r7
 8001058:	bd90      	pop	{r4, r7, pc}
 800105a:	bf00      	nop
 800105c:	20000aa4 	.word	0x20000aa4
 8001060:	20000d38 	.word	0x20000d38
 8001064:	2000058c 	.word	0x2000058c
 8001068:	20000590 	.word	0x20000590

0800106c <_Z22start_balance_functionPv>:



void start_balance_function(void *argument){
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
	data.charging.charger_plugged = HAL_GPIO_ReadPin(INTERLOCK_GPIO_Port, INTERLOCK_Pin);
 8001074:	2104      	movs	r1, #4
 8001076:	481e      	ldr	r0, [pc, #120]	@ (80010f0 <_Z22start_balance_functionPv+0x84>)
 8001078:	f007 faa2 	bl	80085c0 <HAL_GPIO_ReadPin>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	bf14      	ite	ne
 8001082:	2301      	movne	r3, #1
 8001084:	2300      	moveq	r3, #0
 8001086:	b2da      	uxtb	r2, r3
 8001088:	4b1a      	ldr	r3, [pc, #104]	@ (80010f4 <_Z22start_balance_functionPv+0x88>)
 800108a:	f883 229a 	strb.w	r2, [r3, #666]	@ 0x29a
	for(;;){
		osDelay(100);
 800108e:	2064      	movs	r0, #100	@ 0x64
 8001090:	f00f fbae 	bl	80107f0 <osDelay>
		//calling the function that checks messages from USB
		CheckMessage(&USB_Receive_Buffer);
 8001094:	4818      	ldr	r0, [pc, #96]	@ (80010f8 <_Z22start_balance_functionPv+0x8c>)
 8001096:	f002 fe95 	bl	8003dc4 <_Z12CheckMessageP12RingBuffer_t>
		//balance test on cell 0
		//data.charging.cell_discharge[0]=true;
		//LTC_turn_on_discharge(0, data.charging.cell_discharge);
		tick_counter++;
 800109a:	4b18      	ldr	r3, [pc, #96]	@ (80010fc <_Z22start_balance_functionPv+0x90>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	3301      	adds	r3, #1
 80010a0:	4a16      	ldr	r2, [pc, #88]	@ (80010fc <_Z22start_balance_functionPv+0x90>)
 80010a2:	6013      	str	r3, [r2, #0]
		if(tick_counter > BALANCE_TICKS_AFTER_BALANCE){
 80010a4:	4b15      	ldr	r3, [pc, #84]	@ (80010fc <_Z22start_balance_functionPv+0x90>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	2b1e      	cmp	r3, #30
 80010aa:	d9f0      	bls.n	800108e <_Z22start_balance_functionPv+0x22>
			if(!data.charging.charger_plugged) //charger is plugged
 80010ac:	4b11      	ldr	r3, [pc, #68]	@ (80010f4 <_Z22start_balance_functionPv+0x88>)
 80010ae:	f893 329a 	ldrb.w	r3, [r3, #666]	@ 0x29a
 80010b2:	f083 0301 	eor.w	r3, r3, #1
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d00f      	beq.n	80010dc <_Z22start_balance_functionPv+0x70>
			{
				HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_RESET);
 80010bc:	2200      	movs	r2, #0
 80010be:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80010c2:	480f      	ldr	r0, [pc, #60]	@ (8001100 <_Z22start_balance_functionPv+0x94>)
 80010c4:	f007 fa94 	bl	80085f0 <HAL_GPIO_WritePin>
				if(1 == data.charging.balance_on)
 80010c8:	4b0a      	ldr	r3, [pc, #40]	@ (80010f4 <_Z22start_balance_functionPv+0x88>)
 80010ca:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	d1dd      	bne.n	800108e <_Z22start_balance_functionPv+0x22>
				{
				balance_control();
 80010d2:	f7ff fe17 	bl	8000d04 <_Z15balance_controlv>
				balance_activation_deactivation();
 80010d6:	f7ff ff6f 	bl	8000fb8 <_Z31balance_activation_deactivationv>
 80010da:	e7d8      	b.n	800108e <_Z22start_balance_functionPv+0x22>
				}

			}
			else	//charger is unplugged
			{
				HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_SET);
 80010dc:	2201      	movs	r2, #1
 80010de:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80010e2:	4807      	ldr	r0, [pc, #28]	@ (8001100 <_Z22start_balance_functionPv+0x94>)
 80010e4:	f007 fa84 	bl	80085f0 <HAL_GPIO_WritePin>
				balance_activation_deactivation();
 80010e8:	f7ff ff66 	bl	8000fb8 <_Z31balance_activation_deactivationv>
		osDelay(100);
 80010ec:	e7cf      	b.n	800108e <_Z22start_balance_functionPv+0x22>
 80010ee:	bf00      	nop
 80010f0:	48000400 	.word	0x48000400
 80010f4:	20000aa4 	.word	0x20000aa4
 80010f8:	20000594 	.word	0x20000594
 80010fc:	20000590 	.word	0x20000590
 8001100:	48000800 	.word	0x48000800

08001104 <_ZSt23__is_constant_evaluatedv>:
  // This can be used without checking if the compiler supports the feature.
  // The macro _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED can be used to check if
  // the compiler support is present to make this function work as expected.
  _GLIBCXX_CONSTEXPR inline bool
  __is_constant_evaluated() _GLIBCXX_NOEXCEPT
  {
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
#if __cpp_if_consteval >= 202106L
# define _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED 1
    if consteval { return true; } else { return false; }
#elif __cplusplus >= 201103L && __has_builtin(__builtin_is_constant_evaluated)
# define _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED 1
    return __builtin_is_constant_evaluated();
 8001108:	2300      	movs	r3, #0
#else
    return false;
#endif
  }
 800110a:	4618      	mov	r0, r3
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr

08001114 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
 800111c:	6039      	str	r1, [r7, #0]
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	4618      	mov	r0, r3
 8001122:	370c      	adds	r7, #12
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr

0800112c <_ZN3etl11vector_baseC1Ej>:
  protected:

    //*************************************************************************
    /// Constructor.
    //*************************************************************************
    vector_base(size_t max_size_)
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	6039      	str	r1, [r7, #0]
      : CAPACITY(max_size_)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	683a      	ldr	r2, [r7, #0]
 800113a:	601a      	str	r2, [r3, #0]
    {
    }
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	4618      	mov	r0, r3
 8001140:	370c      	adds	r7, #12
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr

0800114a <_ZN3etl11vector_baseD1Ev>:
    virtual ~vector_base()
    {
    }
#else
  protected:
    ~vector_base()
 800114a:	b480      	push	{r7}
 800114c:	b083      	sub	sp, #12
 800114e:	af00      	add	r7, sp, #0
 8001150:	6078      	str	r0, [r7, #4]
    {
    }
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4618      	mov	r0, r3
 8001156:	370c      	adds	r7, #12
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr

08001160 <_ZN8PUTM_CAN14Can_rx_messageC1ER17CAN_HandleTypeDefm>:
static const std::size_t max_dlc_size = 8;

#ifndef PUTM_USE_CAN_FD

struct Can_rx_message {
  Can_rx_message(CAN_HandleTypeDef &hcan, uint32_t RxFifo) : header{}, data{0} {
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
 8001166:	60f8      	str	r0, [r7, #12]
 8001168:	60b9      	str	r1, [r7, #8]
 800116a:	607a      	str	r2, [r7, #4]
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	461a      	mov	r2, r3
 8001170:	2300      	movs	r3, #0
 8001172:	6013      	str	r3, [r2, #0]
 8001174:	6053      	str	r3, [r2, #4]
 8001176:	6093      	str	r3, [r2, #8]
 8001178:	60d3      	str	r3, [r2, #12]
 800117a:	6113      	str	r3, [r2, #16]
 800117c:	6153      	str	r3, [r2, #20]
 800117e:	6193      	str	r3, [r2, #24]
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	331c      	adds	r3, #28
 8001184:	2200      	movs	r2, #0
 8001186:	601a      	str	r2, [r3, #0]
 8001188:	605a      	str	r2, [r3, #4]
    this->status =
        HAL_CAN_GetRxMessage(&hcan, RxFifo, &this->header, this->data);
 800118a:	68fa      	ldr	r2, [r7, #12]
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	331c      	adds	r3, #28
 8001190:	6879      	ldr	r1, [r7, #4]
 8001192:	68b8      	ldr	r0, [r7, #8]
 8001194:	f006 f9b7 	bl	8007506 <HAL_CAN_GetRxMessage>
 8001198:	4603      	mov	r3, r0
 800119a:	461a      	mov	r2, r3
    this->status =
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	4618      	mov	r0, r3
 80011a6:	3710      	adds	r7, #16
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}

080011ac <_ZNK8PUTM_CAN11Device_base6get_IDEv>:
  bool new_data;

 public:
  constexpr Device_base(uint32_t ide, uint8_t dlc)
      : IDE{ide}, DLC{dlc}, new_data{false} {}
  [[nodiscard]] constexpr uint32_t get_ID() const { return IDE; }
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	791a      	ldrb	r2, [r3, #4]
 80011b8:	795b      	ldrb	r3, [r3, #5]
 80011ba:	f003 030f 	and.w	r3, r3, #15
 80011be:	021b      	lsls	r3, r3, #8
 80011c0:	4313      	orrs	r3, r2
 80011c2:	b29b      	uxth	r3, r3
 80011c4:	4618      	mov	r0, r3
 80011c6:	370c      	adds	r7, #12
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr

080011d0 <_ZN8PUTM_CAN13Can_interface13parse_messageERKNS_14Can_rx_messageE>:

 public:
  Can_interface() = default;

#ifndef PUTM_USE_CAN_FD
  bool parse_message(const Can_rx_message &m) {
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b086      	sub	sp, #24
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	6039      	str	r1, [r7, #0]
    for (auto &device : device_array) {
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80011e0:	613b      	str	r3, [r7, #16]
 80011e2:	6938      	ldr	r0, [r7, #16]
 80011e4:	f000 fce8 	bl	8001bb8 <_ZNSt5arrayIPN8PUTM_CAN11Device_baseELj40EE5beginEv>
 80011e8:	6178      	str	r0, [r7, #20]
 80011ea:	6938      	ldr	r0, [r7, #16]
 80011ec:	f000 fcf0 	bl	8001bd0 <_ZNSt5arrayIPN8PUTM_CAN11Device_baseELj40EE3endEv>
 80011f0:	60f8      	str	r0, [r7, #12]
 80011f2:	e01e      	b.n	8001232 <_ZN8PUTM_CAN13Can_interface13parse_messageERKNS_14Can_rx_messageE+0x62>
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	60bb      	str	r3, [r7, #8]
      if (device->get_ID() == m.header.StdId) {
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff ffd5 	bl	80011ac <_ZNK8PUTM_CAN11Device_base6get_IDEv>
 8001202:	4602      	mov	r2, r0
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	429a      	cmp	r2, r3
 800120a:	bf0c      	ite	eq
 800120c:	2301      	moveq	r3, #1
 800120e:	2300      	movne	r3, #0
 8001210:	b2db      	uxtb	r3, r3
 8001212:	2b00      	cmp	r3, #0
 8001214:	d00a      	beq.n	800122c <_ZN8PUTM_CAN13Can_interface13parse_messageERKNS_14Can_rx_messageE+0x5c>
        device->set_data(m);
 8001216:	68bb      	ldr	r3, [r7, #8]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	68ba      	ldr	r2, [r7, #8]
 8001220:	6812      	ldr	r2, [r2, #0]
 8001222:	6839      	ldr	r1, [r7, #0]
 8001224:	4610      	mov	r0, r2
 8001226:	4798      	blx	r3
        return true;
 8001228:	2301      	movs	r3, #1
 800122a:	e007      	b.n	800123c <_ZN8PUTM_CAN13Can_interface13parse_messageERKNS_14Can_rx_messageE+0x6c>
    for (auto &device : device_array) {
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	3304      	adds	r3, #4
 8001230:	617b      	str	r3, [r7, #20]
 8001232:	697a      	ldr	r2, [r7, #20]
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	429a      	cmp	r2, r3
 8001238:	d1dc      	bne.n	80011f4 <_ZN8PUTM_CAN13Can_interface13parse_messageERKNS_14Can_rx_messageE+0x24>
      }
    }
    return false;
 800123a:	2300      	movs	r3, #0
  }
 800123c:	4618      	mov	r0, r3
 800123e:	3718      	adds	r7, #24
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}

08001244 <HAL_CAN_RxFifo0MsgPendingCallback>:
Can_interface can;

}   // namespace PUTM_CAN

#ifndef PUTM_USE_CAN_FD
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001244:	b580      	push	{r7, lr}
 8001246:	b08c      	sub	sp, #48	@ 0x30
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  PUTM_CAN::Can_rx_message rx{*hcan, 0};
 800124c:	f107 0308 	add.w	r3, r7, #8
 8001250:	2200      	movs	r2, #0
 8001252:	6879      	ldr	r1, [r7, #4]
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff ff83 	bl	8001160 <_ZN8PUTM_CAN14Can_rx_messageC1ER17CAN_HandleTypeDefm>
  if (rx.status == HAL_StatusTypeDef::HAL_OK) {
 800125a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800125e:	2b00      	cmp	r3, #0
 8001260:	d105      	bne.n	800126e <HAL_CAN_RxFifo0MsgPendingCallback+0x2a>
    if (not PUTM_CAN::can.parse_message(rx)) {
 8001262:	f107 0308 	add.w	r3, r7, #8
 8001266:	4619      	mov	r1, r3
 8001268:	4803      	ldr	r0, [pc, #12]	@ (8001278 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 800126a:	f7ff ffb1 	bl	80011d0 <_ZN8PUTM_CAN13Can_interface13parse_messageERKNS_14Can_rx_messageE>
      // Unknown message
      // Error_Handler();
    }
  }
}
 800126e:	bf00      	nop
 8001270:	3730      	adds	r7, #48	@ 0x30
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	20000000 	.word	0x20000000

0800127c <_Z8can_initv>:
		{Error_condition::CURRENT_HIGH,20,100,data.current.value,ERROR_TIME,7}

};

void can_init()
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b08a      	sub	sp, #40	@ 0x28
 8001280:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef filter;
	filter.FilterActivation = ENABLE;
 8001282:	2301      	movs	r3, #1
 8001284:	623b      	str	r3, [r7, #32]
	filter.FilterBank = 10;
 8001286:	230a      	movs	r3, #10
 8001288:	617b      	str	r3, [r7, #20]
	filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 800128a:	2300      	movs	r3, #0
 800128c:	613b      	str	r3, [r7, #16]
	filter.FilterIdHigh = 0x00;
 800128e:	2300      	movs	r3, #0
 8001290:	603b      	str	r3, [r7, #0]
	filter.FilterIdLow = 0x00;
 8001292:	2300      	movs	r3, #0
 8001294:	607b      	str	r3, [r7, #4]
	filter.FilterMaskIdHigh = 0x00;
 8001296:	2300      	movs	r3, #0
 8001298:	60bb      	str	r3, [r7, #8]
	filter.FilterMaskIdLow = 0x00;
 800129a:	2300      	movs	r3, #0
 800129c:	60fb      	str	r3, [r7, #12]
	filter.FilterMode = CAN_FILTERMODE_IDMASK;
 800129e:	2300      	movs	r3, #0
 80012a0:	61bb      	str	r3, [r7, #24]
	filter.FilterScale = CAN_FILTERSCALE_32BIT;
 80012a2:	2301      	movs	r3, #1
 80012a4:	61fb      	str	r3, [r7, #28]
	filter.SlaveStartFilterBank = 10;
 80012a6:	230a      	movs	r3, #10
 80012a8:	627b      	str	r3, [r7, #36]	@ 0x24

	HAL_CAN_ConfigFilter(&hcan1, &filter);
 80012aa:	463b      	mov	r3, r7
 80012ac:	4619      	mov	r1, r3
 80012ae:	4807      	ldr	r0, [pc, #28]	@ (80012cc <_Z8can_initv+0x50>)
 80012b0:	f005 ff4b 	bl	800714a <HAL_CAN_ConfigFilter>
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80012b4:	2102      	movs	r1, #2
 80012b6:	4805      	ldr	r0, [pc, #20]	@ (80012cc <_Z8can_initv+0x50>)
 80012b8:	f006 fa47 	bl	800774a <HAL_CAN_ActivateNotification>
	HAL_CAN_Start(&hcan1);
 80012bc:	4803      	ldr	r0, [pc, #12]	@ (80012cc <_Z8can_initv+0x50>)
 80012be:	f006 f80e 	bl	80072de <HAL_CAN_Start>

}
 80012c2:	bf00      	nop
 80012c4:	3728      	adds	r7, #40	@ 0x28
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	200010dc 	.word	0x200010dc

080012d0 <_Z11error_checkv>:

// error if value is in range <min, max>
void error_check(){
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b090      	sub	sp, #64	@ 0x40
 80012d4:	af00      	add	r7, sp, #0
	etl::vector<Error_condition, 8> errors_vector;
 80012d6:	1d3b      	adds	r3, r7, #4
 80012d8:	4618      	mov	r0, r3
 80012da:	f000 fc93 	bl	8001c04 <_ZN3etl6vectorI15Error_conditionLj8EEC1Ev>

	for(auto& error : error_conditions){
 80012de:	4b2f      	ldr	r3, [pc, #188]	@ (800139c <_Z11error_checkv+0xcc>)
 80012e0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80012e2:	4b2e      	ldr	r3, [pc, #184]	@ (800139c <_Z11error_checkv+0xcc>)
 80012e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80012e6:	4b2e      	ldr	r3, [pc, #184]	@ (80013a0 <_Z11error_checkv+0xd0>)
 80012e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80012ea:	e040      	b.n	800136e <_Z11error_checkv+0x9e>
 80012ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80012ee:	633b      	str	r3, [r7, #48]	@ 0x30
		if(error.min <= error.value && error.value <= error.max){
 80012f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80012f2:	ed93 7a01 	vldr	s14, [r3, #4]
 80012f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80012f8:	edd3 7a03 	vldr	s15, [r3, #12]
 80012fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001300:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001304:	d825      	bhi.n	8001352 <_Z11error_checkv+0x82>
 8001306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001308:	ed93 7a03 	vldr	s14, [r3, #12]
 800130c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800130e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001312:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001316:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800131a:	d81a      	bhi.n	8001352 <_Z11error_checkv+0x82>
			errors_vector.emplace_back(error.error);
 800131c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800131e:	1d3b      	adds	r3, r7, #4
 8001320:	4611      	mov	r1, r2
 8001322:	4618      	mov	r0, r3
 8001324:	f000 fc93 	bl	8001c4e <_ZN3etl7ivectorI15Error_conditionE12emplace_backIJRS1_EEEvDpOT_>
			data.acu_state=error.acu_state_code;
 8001328:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800132a:	7d1a      	ldrb	r2, [r3, #20]
 800132c:	4b1d      	ldr	r3, [pc, #116]	@ (80013a4 <_Z11error_checkv+0xd4>)
 800132e:	f883 22a4 	strb.w	r2, [r3, #676]	@ 0x2a4
			if(false == error.flag)
 8001332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001334:	7f1b      	ldrb	r3, [r3, #28]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d116      	bne.n	8001368 <_Z11error_checkv+0x98>
			{
				error.timer = HAL_GetTick() + error.error_time;
 800133a:	f004 f86b 	bl	8005414 <HAL_GetTick>
 800133e:	4602      	mov	r2, r0
 8001340:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001342:	691b      	ldr	r3, [r3, #16]
 8001344:	441a      	add	r2, r3
 8001346:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001348:	619a      	str	r2, [r3, #24]
				error.flag = true;
 800134a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800134c:	2201      	movs	r2, #1
 800134e:	771a      	strb	r2, [r3, #28]
			if(false == error.flag)
 8001350:	e00a      	b.n	8001368 <_Z11error_checkv+0x98>
			}
		}
		else{
			error.timer = HAL_GetTick() + error.error_time;
 8001352:	f004 f85f 	bl	8005414 <HAL_GetTick>
 8001356:	4602      	mov	r2, r0
 8001358:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800135a:	691b      	ldr	r3, [r3, #16]
 800135c:	441a      	add	r2, r3
 800135e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001360:	619a      	str	r2, [r3, #24]
			error.flag = false;
 8001362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001364:	2200      	movs	r2, #0
 8001366:	771a      	strb	r2, [r3, #28]
	for(auto& error : error_conditions){
 8001368:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800136a:	3320      	adds	r3, #32
 800136c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800136e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001370:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001372:	429a      	cmp	r2, r3
 8001374:	d1ba      	bne.n	80012ec <_Z11error_checkv+0x1c>
		}
	}

	if(errors_vector.empty())
 8001376:	1d3b      	adds	r3, r7, #4
 8001378:	4618      	mov	r0, r3
 800137a:	f000 fc83 	bl	8001c84 <_ZNK3etl7ivectorI15Error_conditionE5emptyEv>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d003      	beq.n	800138c <_Z11error_checkv+0xbc>
	{
		data.acu_state = NORMAL_STATE;
 8001384:	4b07      	ldr	r3, [pc, #28]	@ (80013a4 <_Z11error_checkv+0xd4>)
 8001386:	2200      	movs	r2, #0
 8001388:	f883 22a4 	strb.w	r2, [r3, #676]	@ 0x2a4
	}
}
 800138c:	1d3b      	adds	r3, r7, #4
 800138e:	4618      	mov	r0, r3
 8001390:	f000 fc4c 	bl	8001c2c <_ZN3etl6vectorI15Error_conditionLj8EED1Ev>
 8001394:	3740      	adds	r7, #64	@ 0x40
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	200005b4 	.word	0x200005b4
 80013a0:	200006b4 	.word	0x200006b4
 80013a4:	20000aa4 	.word	0x20000aa4

080013a8 <_Z13error_executev>:

void error_execute(){
 80013a8:	b590      	push	{r4, r7, lr}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
	uint32_t time = HAL_GetTick();
 80013ae:	f004 f831 	bl	8005414 <HAL_GetTick>
 80013b2:	6038      	str	r0, [r7, #0]
	if(error_conditions[0].timer <= HAL_GetTick()) //shut down and sleep
 80013b4:	4b23      	ldr	r3, [pc, #140]	@ (8001444 <_Z13error_executev+0x9c>)
 80013b6:	699c      	ldr	r4, [r3, #24]
 80013b8:	f004 f82c 	bl	8005414 <HAL_GetTick>
 80013bc:	4603      	mov	r3, r0
 80013be:	429c      	cmp	r4, r3
 80013c0:	bf94      	ite	ls
 80013c2:	2301      	movls	r3, #1
 80013c4:	2300      	movhi	r3, #0
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d00a      	beq.n	80013e2 <_Z13error_executev+0x3a>
	{
		HAL_GPIO_WritePin(EFUSE_GPIO_Port, EFUSE_Pin, GPIO_PIN_RESET);
 80013cc:	2200      	movs	r2, #0
 80013ce:	2104      	movs	r1, #4
 80013d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013d4:	f007 f90c 	bl	80085f0 <HAL_GPIO_WritePin>
		HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 80013d8:	2101      	movs	r1, #1
 80013da:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80013de:	f008 fac7 	bl	8009970 <HAL_PWR_EnterSTOPMode>
	}
	for(unsigned int i = 3; i < 8; i++){
 80013e2:	2303      	movs	r3, #3
 80013e4:	607b      	str	r3, [r7, #4]
 80013e6:	e018      	b.n	800141a <_Z13error_executev+0x72>
		{
			if(error_conditions[i].timer <= HAL_GetTick()) //shut down
 80013e8:	4a16      	ldr	r2, [pc, #88]	@ (8001444 <_Z13error_executev+0x9c>)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	015b      	lsls	r3, r3, #5
 80013ee:	4413      	add	r3, r2
 80013f0:	3318      	adds	r3, #24
 80013f2:	681c      	ldr	r4, [r3, #0]
 80013f4:	f004 f80e 	bl	8005414 <HAL_GetTick>
 80013f8:	4603      	mov	r3, r0
 80013fa:	429c      	cmp	r4, r3
 80013fc:	bf94      	ite	ls
 80013fe:	2301      	movls	r3, #1
 8001400:	2300      	movhi	r3, #0
 8001402:	b2db      	uxtb	r3, r3
 8001404:	2b00      	cmp	r3, #0
 8001406:	d005      	beq.n	8001414 <_Z13error_executev+0x6c>
			{

				HAL_GPIO_WritePin(EFUSE_GPIO_Port, EFUSE_Pin, GPIO_PIN_RESET);
 8001408:	2200      	movs	r2, #0
 800140a:	2104      	movs	r1, #4
 800140c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001410:	f007 f8ee 	bl	80085f0 <HAL_GPIO_WritePin>
	for(unsigned int i = 3; i < 8; i++){
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	3301      	adds	r3, #1
 8001418:	607b      	str	r3, [r7, #4]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2b07      	cmp	r3, #7
 800141e:	d9e3      	bls.n	80013e8 <_Z13error_executev+0x40>
				}*/
			}
		}
	}

	data.EFUSE_state = HAL_GPIO_ReadPin(EFUSE_GPIO_Port, EFUSE_Pin);
 8001420:	2104      	movs	r1, #4
 8001422:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001426:	f007 f8cb 	bl	80085c0 <HAL_GPIO_ReadPin>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	bf14      	ite	ne
 8001430:	2301      	movne	r3, #1
 8001432:	2300      	moveq	r3, #0
 8001434:	b2da      	uxtb	r2, r3
 8001436:	4b04      	ldr	r3, [pc, #16]	@ (8001448 <_Z13error_executev+0xa0>)
 8001438:	f883 22a5 	strb.w	r2, [r3, #677]	@ 0x2a5
}
 800143c:	bf00      	nop
 800143e:	370c      	adds	r7, #12
 8001440:	46bd      	mov	sp, r7
 8001442:	bd90      	pop	{r4, r7, pc}
 8001444:	200005b4 	.word	0x200005b4
 8001448:	20000aa4 	.word	0x20000aa4

0800144c <_Z11serialPrintv>:

void serialPrint()
{
 800144c:	b590      	push	{r4, r7, lr}
 800144e:	b08d      	sub	sp, #52	@ 0x34
 8001450:	af02      	add	r7, sp, #8
	// FIXME count chars
	// or use {fmt}
	static char tab[1000];
	uint16_t n=0;
 8001452:	2300      	movs	r3, #0
 8001454:	84fb      	strh	r3, [r7, #38]	@ 0x26

	RTC_DateTypeDef rtc_date;
	RTC_TimeTypeDef rtc_time;
	HAL_RTC_GetTime(&hrtc, &rtc_time, RTC_FORMAT_BIN);
 8001456:	463b      	mov	r3, r7
 8001458:	2200      	movs	r2, #0
 800145a:	4619      	mov	r1, r3
 800145c:	48ab      	ldr	r0, [pc, #684]	@ (800170c <_Z11serialPrintv+0x2c0>)
 800145e:	f00a f9ad 	bl	800b7bc <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &rtc_date, RTC_FORMAT_BIN);
 8001462:	f107 0314 	add.w	r3, r7, #20
 8001466:	2200      	movs	r2, #0
 8001468:	4619      	mov	r1, r3
 800146a:	48a8      	ldr	r0, [pc, #672]	@ (800170c <_Z11serialPrintv+0x2c0>)
 800146c:	f00a fa90 	bl	800b990 <HAL_RTC_GetDate>

	float cell_values_sum = (float)data.voltages.total / 10'000.0;
 8001470:	4ba7      	ldr	r3, [pc, #668]	@ (8001710 <_Z11serialPrintv+0x2c4>)
 8001472:	695b      	ldr	r3, [r3, #20]
 8001474:	ee07 3a90 	vmov	s15, r3
 8001478:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800147c:	eddf 6aa5 	vldr	s13, [pc, #660]	@ 8001714 <_Z11serialPrintv+0x2c8>
 8001480:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001484:	edc7 7a07 	vstr	s15, [r7, #28]
	n += sprintf(&tab[n], "%02d:%02d:%02d\r\n", rtc_time.Hours, rtc_time.Minutes, rtc_time.Seconds);
 8001488:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800148a:	4aa3      	ldr	r2, [pc, #652]	@ (8001718 <_Z11serialPrintv+0x2cc>)
 800148c:	1898      	adds	r0, r3, r2
 800148e:	783b      	ldrb	r3, [r7, #0]
 8001490:	461a      	mov	r2, r3
 8001492:	787b      	ldrb	r3, [r7, #1]
 8001494:	4619      	mov	r1, r3
 8001496:	78bb      	ldrb	r3, [r7, #2]
 8001498:	9300      	str	r3, [sp, #0]
 800149a:	460b      	mov	r3, r1
 800149c:	499f      	ldr	r1, [pc, #636]	@ (800171c <_Z11serialPrintv+0x2d0>)
 800149e:	f013 fb51 	bl	8014b44 <siprintf>
 80014a2:	4603      	mov	r3, r0
 80014a4:	b29a      	uxth	r2, r3
 80014a6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80014a8:	4413      	add	r3, r2
 80014aa:	84fb      	strh	r3, [r7, #38]	@ 0x26
	n += sprintf(&tab[n], "*** Battery state: %d ***", data.acu_state);
 80014ac:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80014ae:	4a9a      	ldr	r2, [pc, #616]	@ (8001718 <_Z11serialPrintv+0x2cc>)
 80014b0:	4413      	add	r3, r2
 80014b2:	4a97      	ldr	r2, [pc, #604]	@ (8001710 <_Z11serialPrintv+0x2c4>)
 80014b4:	f892 22a4 	ldrb.w	r2, [r2, #676]	@ 0x2a4
 80014b8:	4999      	ldr	r1, [pc, #612]	@ (8001720 <_Z11serialPrintv+0x2d4>)
 80014ba:	4618      	mov	r0, r3
 80014bc:	f013 fb42 	bl	8014b44 <siprintf>
 80014c0:	4603      	mov	r3, r0
 80014c2:	b29a      	uxth	r2, r3
 80014c4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80014c6:	4413      	add	r3, r2
 80014c8:	84fb      	strh	r3, [r7, #38]	@ 0x26
	n += sprintf(&tab[n], "\r\n");
 80014ca:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80014cc:	4a92      	ldr	r2, [pc, #584]	@ (8001718 <_Z11serialPrintv+0x2cc>)
 80014ce:	4413      	add	r3, r2
 80014d0:	4994      	ldr	r1, [pc, #592]	@ (8001724 <_Z11serialPrintv+0x2d8>)
 80014d2:	4618      	mov	r0, r3
 80014d4:	f013 fb36 	bl	8014b44 <siprintf>
 80014d8:	4603      	mov	r3, r0
 80014da:	b29a      	uxth	r2, r3
 80014dc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80014de:	4413      	add	r3, r2
 80014e0:	84fb      	strh	r3, [r7, #38]	@ 0x26
	n += sprintf(&tab[n], "LEGEND FOR BATTERY STATE:");
 80014e2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80014e4:	4a8c      	ldr	r2, [pc, #560]	@ (8001718 <_Z11serialPrintv+0x2cc>)
 80014e6:	4413      	add	r3, r2
 80014e8:	498f      	ldr	r1, [pc, #572]	@ (8001728 <_Z11serialPrintv+0x2dc>)
 80014ea:	4618      	mov	r0, r3
 80014ec:	f013 fb2a 	bl	8014b44 <siprintf>
 80014f0:	4603      	mov	r3, r0
 80014f2:	b29a      	uxth	r2, r3
 80014f4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80014f6:	4413      	add	r3, r2
 80014f8:	84fb      	strh	r3, [r7, #38]	@ 0x26
	n += sprintf(&tab[n], "\r\n");
 80014fa:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80014fc:	4a86      	ldr	r2, [pc, #536]	@ (8001718 <_Z11serialPrintv+0x2cc>)
 80014fe:	4413      	add	r3, r2
 8001500:	4988      	ldr	r1, [pc, #544]	@ (8001724 <_Z11serialPrintv+0x2d8>)
 8001502:	4618      	mov	r0, r3
 8001504:	f013 fb1e 	bl	8014b44 <siprintf>
 8001508:	4603      	mov	r3, r0
 800150a:	b29a      	uxth	r2, r3
 800150c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800150e:	4413      	add	r3, r2
 8001510:	84fb      	strh	r3, [r7, #38]	@ 0x26
	n += sprintf(&tab[n], "0- all good");
 8001512:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001514:	4a80      	ldr	r2, [pc, #512]	@ (8001718 <_Z11serialPrintv+0x2cc>)
 8001516:	4413      	add	r3, r2
 8001518:	4984      	ldr	r1, [pc, #528]	@ (800172c <_Z11serialPrintv+0x2e0>)
 800151a:	4618      	mov	r0, r3
 800151c:	f013 fb12 	bl	8014b44 <siprintf>
 8001520:	4603      	mov	r3, r0
 8001522:	b29a      	uxth	r2, r3
 8001524:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001526:	4413      	add	r3, r2
 8001528:	84fb      	strh	r3, [r7, #38]	@ 0x26
	n += sprintf(&tab[n], "\r\n");
 800152a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800152c:	4a7a      	ldr	r2, [pc, #488]	@ (8001718 <_Z11serialPrintv+0x2cc>)
 800152e:	4413      	add	r3, r2
 8001530:	497c      	ldr	r1, [pc, #496]	@ (8001724 <_Z11serialPrintv+0x2d8>)
 8001532:	4618      	mov	r0, r3
 8001534:	f013 fb06 	bl	8014b44 <siprintf>
 8001538:	4603      	mov	r3, r0
 800153a:	b29a      	uxth	r2, r3
 800153c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800153e:	4413      	add	r3, r2
 8001540:	84fb      	strh	r3, [r7, #38]	@ 0x26
	n += sprintf(&tab[n], "1- charging");
 8001542:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001544:	4a74      	ldr	r2, [pc, #464]	@ (8001718 <_Z11serialPrintv+0x2cc>)
 8001546:	4413      	add	r3, r2
 8001548:	4979      	ldr	r1, [pc, #484]	@ (8001730 <_Z11serialPrintv+0x2e4>)
 800154a:	4618      	mov	r0, r3
 800154c:	f013 fafa 	bl	8014b44 <siprintf>
 8001550:	4603      	mov	r3, r0
 8001552:	b29a      	uxth	r2, r3
 8001554:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001556:	4413      	add	r3, r2
 8001558:	84fb      	strh	r3, [r7, #38]	@ 0x26
	n += sprintf(&tab[n], "\r\n");
 800155a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800155c:	4a6e      	ldr	r2, [pc, #440]	@ (8001718 <_Z11serialPrintv+0x2cc>)
 800155e:	4413      	add	r3, r2
 8001560:	4970      	ldr	r1, [pc, #448]	@ (8001724 <_Z11serialPrintv+0x2d8>)
 8001562:	4618      	mov	r0, r3
 8001564:	f013 faee 	bl	8014b44 <siprintf>
 8001568:	4603      	mov	r3, r0
 800156a:	b29a      	uxth	r2, r3
 800156c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800156e:	4413      	add	r3, r2
 8001570:	84fb      	strh	r3, [r7, #38]	@ 0x26
	n += sprintf(&tab[n], "2- unbalanced(difference from lowest to highest >0.2V)");
 8001572:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001574:	4a68      	ldr	r2, [pc, #416]	@ (8001718 <_Z11serialPrintv+0x2cc>)
 8001576:	4413      	add	r3, r2
 8001578:	496e      	ldr	r1, [pc, #440]	@ (8001734 <_Z11serialPrintv+0x2e8>)
 800157a:	4618      	mov	r0, r3
 800157c:	f013 fae2 	bl	8014b44 <siprintf>
 8001580:	4603      	mov	r3, r0
 8001582:	b29a      	uxth	r2, r3
 8001584:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001586:	4413      	add	r3, r2
 8001588:	84fb      	strh	r3, [r7, #38]	@ 0x26
	n += sprintf(&tab[n], "\r\n");
 800158a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800158c:	4a62      	ldr	r2, [pc, #392]	@ (8001718 <_Z11serialPrintv+0x2cc>)
 800158e:	4413      	add	r3, r2
 8001590:	4964      	ldr	r1, [pc, #400]	@ (8001724 <_Z11serialPrintv+0x2d8>)
 8001592:	4618      	mov	r0, r3
 8001594:	f013 fad6 	bl	8014b44 <siprintf>
 8001598:	4603      	mov	r3, r0
 800159a:	b29a      	uxth	r2, r3
 800159c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800159e:	4413      	add	r3, r2
 80015a0:	84fb      	strh	r3, [r7, #38]	@ 0x26
	n += sprintf(&tab[n], "3- highest temperature is more than 48C");
 80015a2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80015a4:	4a5c      	ldr	r2, [pc, #368]	@ (8001718 <_Z11serialPrintv+0x2cc>)
 80015a6:	4413      	add	r3, r2
 80015a8:	4963      	ldr	r1, [pc, #396]	@ (8001738 <_Z11serialPrintv+0x2ec>)
 80015aa:	4618      	mov	r0, r3
 80015ac:	f013 faca 	bl	8014b44 <siprintf>
 80015b0:	4603      	mov	r3, r0
 80015b2:	b29a      	uxth	r2, r3
 80015b4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80015b6:	4413      	add	r3, r2
 80015b8:	84fb      	strh	r3, [r7, #38]	@ 0x26
	n += sprintf(&tab[n], "\r\n");
 80015ba:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80015bc:	4a56      	ldr	r2, [pc, #344]	@ (8001718 <_Z11serialPrintv+0x2cc>)
 80015be:	4413      	add	r3, r2
 80015c0:	4958      	ldr	r1, [pc, #352]	@ (8001724 <_Z11serialPrintv+0x2d8>)
 80015c2:	4618      	mov	r0, r3
 80015c4:	f013 fabe 	bl	8014b44 <siprintf>
 80015c8:	4603      	mov	r3, r0
 80015ca:	b29a      	uxth	r2, r3
 80015cc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80015ce:	4413      	add	r3, r2
 80015d0:	84fb      	strh	r3, [r7, #38]	@ 0x26
	n += sprintf(&tab[n], "4- too low voltage");
 80015d2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80015d4:	4a50      	ldr	r2, [pc, #320]	@ (8001718 <_Z11serialPrintv+0x2cc>)
 80015d6:	4413      	add	r3, r2
 80015d8:	4958      	ldr	r1, [pc, #352]	@ (800173c <_Z11serialPrintv+0x2f0>)
 80015da:	4618      	mov	r0, r3
 80015dc:	f013 fab2 	bl	8014b44 <siprintf>
 80015e0:	4603      	mov	r3, r0
 80015e2:	b29a      	uxth	r2, r3
 80015e4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80015e6:	4413      	add	r3, r2
 80015e8:	84fb      	strh	r3, [r7, #38]	@ 0x26
	n += sprintf(&tab[n], "\r\n");
 80015ea:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80015ec:	4a4a      	ldr	r2, [pc, #296]	@ (8001718 <_Z11serialPrintv+0x2cc>)
 80015ee:	4413      	add	r3, r2
 80015f0:	494c      	ldr	r1, [pc, #304]	@ (8001724 <_Z11serialPrintv+0x2d8>)
 80015f2:	4618      	mov	r0, r3
 80015f4:	f013 faa6 	bl	8014b44 <siprintf>
 80015f8:	4603      	mov	r3, r0
 80015fa:	b29a      	uxth	r2, r3
 80015fc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80015fe:	4413      	add	r3, r2
 8001600:	84fb      	strh	r3, [r7, #38]	@ 0x26
	n += sprintf(&tab[n], "5- too high voltage");
 8001602:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001604:	4a44      	ldr	r2, [pc, #272]	@ (8001718 <_Z11serialPrintv+0x2cc>)
 8001606:	4413      	add	r3, r2
 8001608:	494d      	ldr	r1, [pc, #308]	@ (8001740 <_Z11serialPrintv+0x2f4>)
 800160a:	4618      	mov	r0, r3
 800160c:	f013 fa9a 	bl	8014b44 <siprintf>
 8001610:	4603      	mov	r3, r0
 8001612:	b29a      	uxth	r2, r3
 8001614:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001616:	4413      	add	r3, r2
 8001618:	84fb      	strh	r3, [r7, #38]	@ 0x26
	n += sprintf(&tab[n], "\r\n");
 800161a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800161c:	4a3e      	ldr	r2, [pc, #248]	@ (8001718 <_Z11serialPrintv+0x2cc>)
 800161e:	4413      	add	r3, r2
 8001620:	4940      	ldr	r1, [pc, #256]	@ (8001724 <_Z11serialPrintv+0x2d8>)
 8001622:	4618      	mov	r0, r3
 8001624:	f013 fa8e 	bl	8014b44 <siprintf>
 8001628:	4603      	mov	r3, r0
 800162a:	b29a      	uxth	r2, r3
 800162c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800162e:	4413      	add	r3, r2
 8001630:	84fb      	strh	r3, [r7, #38]	@ 0x26
	n += sprintf(&tab[n], "6- too high temperature");
 8001632:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001634:	4a38      	ldr	r2, [pc, #224]	@ (8001718 <_Z11serialPrintv+0x2cc>)
 8001636:	4413      	add	r3, r2
 8001638:	4942      	ldr	r1, [pc, #264]	@ (8001744 <_Z11serialPrintv+0x2f8>)
 800163a:	4618      	mov	r0, r3
 800163c:	f013 fa82 	bl	8014b44 <siprintf>
 8001640:	4603      	mov	r3, r0
 8001642:	b29a      	uxth	r2, r3
 8001644:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001646:	4413      	add	r3, r2
 8001648:	84fb      	strh	r3, [r7, #38]	@ 0x26
	n += sprintf(&tab[n], "\r\n");
 800164a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800164c:	4a32      	ldr	r2, [pc, #200]	@ (8001718 <_Z11serialPrintv+0x2cc>)
 800164e:	4413      	add	r3, r2
 8001650:	4934      	ldr	r1, [pc, #208]	@ (8001724 <_Z11serialPrintv+0x2d8>)
 8001652:	4618      	mov	r0, r3
 8001654:	f013 fa76 	bl	8014b44 <siprintf>
 8001658:	4603      	mov	r3, r0
 800165a:	b29a      	uxth	r2, r3
 800165c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800165e:	4413      	add	r3, r2
 8001660:	84fb      	strh	r3, [r7, #38]	@ 0x26
	n += sprintf(&tab[n], "7- too high current");
 8001662:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001664:	4a2c      	ldr	r2, [pc, #176]	@ (8001718 <_Z11serialPrintv+0x2cc>)
 8001666:	4413      	add	r3, r2
 8001668:	4937      	ldr	r1, [pc, #220]	@ (8001748 <_Z11serialPrintv+0x2fc>)
 800166a:	4618      	mov	r0, r3
 800166c:	f013 fa6a 	bl	8014b44 <siprintf>
 8001670:	4603      	mov	r3, r0
 8001672:	b29a      	uxth	r2, r3
 8001674:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001676:	4413      	add	r3, r2
 8001678:	84fb      	strh	r3, [r7, #38]	@ 0x26
	n += sprintf(&tab[n], "\r\n");
 800167a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800167c:	4a26      	ldr	r2, [pc, #152]	@ (8001718 <_Z11serialPrintv+0x2cc>)
 800167e:	4413      	add	r3, r2
 8001680:	4928      	ldr	r1, [pc, #160]	@ (8001724 <_Z11serialPrintv+0x2d8>)
 8001682:	4618      	mov	r0, r3
 8001684:	f013 fa5e 	bl	8014b44 <siprintf>
 8001688:	4603      	mov	r3, r0
 800168a:	b29a      	uxth	r2, r3
 800168c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800168e:	4413      	add	r3, r2
 8001690:	84fb      	strh	r3, [r7, #38]	@ 0x26
	n += sprintf(&tab[n], "8- sleep mode");
 8001692:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001694:	4a20      	ldr	r2, [pc, #128]	@ (8001718 <_Z11serialPrintv+0x2cc>)
 8001696:	4413      	add	r3, r2
 8001698:	492c      	ldr	r1, [pc, #176]	@ (800174c <_Z11serialPrintv+0x300>)
 800169a:	4618      	mov	r0, r3
 800169c:	f013 fa52 	bl	8014b44 <siprintf>
 80016a0:	4603      	mov	r3, r0
 80016a2:	b29a      	uxth	r2, r3
 80016a4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80016a6:	4413      	add	r3, r2
 80016a8:	84fb      	strh	r3, [r7, #38]	@ 0x26
	n += sprintf(&tab[n], "\r\n\n");
 80016aa:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80016ac:	4a1a      	ldr	r2, [pc, #104]	@ (8001718 <_Z11serialPrintv+0x2cc>)
 80016ae:	4413      	add	r3, r2
 80016b0:	4927      	ldr	r1, [pc, #156]	@ (8001750 <_Z11serialPrintv+0x304>)
 80016b2:	4618      	mov	r0, r3
 80016b4:	f013 fa46 	bl	8014b44 <siprintf>
 80016b8:	4603      	mov	r3, r0
 80016ba:	b29a      	uxth	r2, r3
 80016bc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80016be:	4413      	add	r3, r2
 80016c0:	84fb      	strh	r3, [r7, #38]	@ 0x26
	n += sprintf(&tab[n], "*** Stack voltage:\t%3.2f V ***", cell_values_sum);
 80016c2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80016c4:	4a14      	ldr	r2, [pc, #80]	@ (8001718 <_Z11serialPrintv+0x2cc>)
 80016c6:	189c      	adds	r4, r3, r2
 80016c8:	69f8      	ldr	r0, [r7, #28]
 80016ca:	f7fe ff65 	bl	8000598 <__aeabi_f2d>
 80016ce:	4602      	mov	r2, r0
 80016d0:	460b      	mov	r3, r1
 80016d2:	4920      	ldr	r1, [pc, #128]	@ (8001754 <_Z11serialPrintv+0x308>)
 80016d4:	4620      	mov	r0, r4
 80016d6:	f013 fa35 	bl	8014b44 <siprintf>
 80016da:	4603      	mov	r3, r0
 80016dc:	b29a      	uxth	r2, r3
 80016de:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80016e0:	4413      	add	r3, r2
 80016e2:	84fb      	strh	r3, [r7, #38]	@ 0x26
	n += sprintf(&tab[n], "\r\n");
 80016e4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80016e6:	4a0c      	ldr	r2, [pc, #48]	@ (8001718 <_Z11serialPrintv+0x2cc>)
 80016e8:	4413      	add	r3, r2
 80016ea:	490e      	ldr	r1, [pc, #56]	@ (8001724 <_Z11serialPrintv+0x2d8>)
 80016ec:	4618      	mov	r0, r3
 80016ee:	f013 fa29 	bl	8014b44 <siprintf>
 80016f2:	4603      	mov	r3, r0
 80016f4:	b29a      	uxth	r2, r3
 80016f6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80016f8:	4413      	add	r3, r2
 80016fa:	84fb      	strh	r3, [r7, #38]	@ 0x26
	n += sprintf(&tab[n], "*** State of charge: %f ***", data.soc.value * 100);
 80016fc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80016fe:	4a06      	ldr	r2, [pc, #24]	@ (8001718 <_Z11serialPrintv+0x2cc>)
 8001700:	189c      	adds	r4, r3, r2
 8001702:	4b03      	ldr	r3, [pc, #12]	@ (8001710 <_Z11serialPrintv+0x2c4>)
 8001704:	edd3 7aa3 	vldr	s15, [r3, #652]	@ 0x28c
 8001708:	e028      	b.n	800175c <_Z11serialPrintv+0x310>
 800170a:	bf00      	nop
 800170c:	20001104 	.word	0x20001104
 8001710:	20000aa4 	.word	0x20000aa4
 8001714:	461c4000 	.word	0x461c4000
 8001718:	200006b4 	.word	0x200006b4
 800171c:	08016e60 	.word	0x08016e60
 8001720:	08016e74 	.word	0x08016e74
 8001724:	08016e90 	.word	0x08016e90
 8001728:	08016e94 	.word	0x08016e94
 800172c:	08016eb0 	.word	0x08016eb0
 8001730:	08016ebc 	.word	0x08016ebc
 8001734:	08016ec8 	.word	0x08016ec8
 8001738:	08016f00 	.word	0x08016f00
 800173c:	08016f28 	.word	0x08016f28
 8001740:	08016f3c 	.word	0x08016f3c
 8001744:	08016f50 	.word	0x08016f50
 8001748:	08016f68 	.word	0x08016f68
 800174c:	08016f7c 	.word	0x08016f7c
 8001750:	08016f8c 	.word	0x08016f8c
 8001754:	08016f90 	.word	0x08016f90
 8001758:	42c80000 	.word	0x42c80000
 800175c:	ed1f 7a02 	vldr	s14, [pc, #-8]	@ 8001758 <_Z11serialPrintv+0x30c>
 8001760:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001764:	ee17 0a90 	vmov	r0, s15
 8001768:	f7fe ff16 	bl	8000598 <__aeabi_f2d>
 800176c:	4602      	mov	r2, r0
 800176e:	460b      	mov	r3, r1
 8001770:	495a      	ldr	r1, [pc, #360]	@ (80018dc <_Z11serialPrintv+0x490>)
 8001772:	4620      	mov	r0, r4
 8001774:	f013 f9e6 	bl	8014b44 <siprintf>
 8001778:	4603      	mov	r3, r0
 800177a:	b29a      	uxth	r2, r3
 800177c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800177e:	4413      	add	r3, r2
 8001780:	84fb      	strh	r3, [r7, #38]	@ 0x26
	n += sprintf(&tab[n], "\r\n");
 8001782:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001784:	4a56      	ldr	r2, [pc, #344]	@ (80018e0 <_Z11serialPrintv+0x494>)
 8001786:	4413      	add	r3, r2
 8001788:	4956      	ldr	r1, [pc, #344]	@ (80018e4 <_Z11serialPrintv+0x498>)
 800178a:	4618      	mov	r0, r3
 800178c:	f013 f9da 	bl	8014b44 <siprintf>
 8001790:	4603      	mov	r3, r0
 8001792:	b29a      	uxth	r2, r3
 8001794:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001796:	4413      	add	r3, r2
 8001798:	84fb      	strh	r3, [r7, #38]	@ 0x26

	for(int i = 0; i < NUMBER_OF_CELLS; i++)
 800179a:	2300      	movs	r3, #0
 800179c:	623b      	str	r3, [r7, #32]
 800179e:	e046      	b.n	800182e <_Z11serialPrintv+0x3e2>
	{
		float cell_value = (float)data.voltages.cells[i] / 10'000.0;
 80017a0:	4a51      	ldr	r2, [pc, #324]	@ (80018e8 <_Z11serialPrintv+0x49c>)
 80017a2:	6a3b      	ldr	r3, [r7, #32]
 80017a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80017a8:	ee07 3a90 	vmov	s15, r3
 80017ac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80017b0:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 80018ec <_Z11serialPrintv+0x4a0>
 80017b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017b8:	edc7 7a06 	vstr	s15, [r7, #24]
		n += sprintf(&tab[n], "-V.%d-\t", i);
 80017bc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80017be:	4a48      	ldr	r2, [pc, #288]	@ (80018e0 <_Z11serialPrintv+0x494>)
 80017c0:	4413      	add	r3, r2
 80017c2:	6a3a      	ldr	r2, [r7, #32]
 80017c4:	494a      	ldr	r1, [pc, #296]	@ (80018f0 <_Z11serialPrintv+0x4a4>)
 80017c6:	4618      	mov	r0, r3
 80017c8:	f013 f9bc 	bl	8014b44 <siprintf>
 80017cc:	4603      	mov	r3, r0
 80017ce:	b29a      	uxth	r2, r3
 80017d0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80017d2:	4413      	add	r3, r2
 80017d4:	84fb      	strh	r3, [r7, #38]	@ 0x26
		n += sprintf(&tab[n], "%1.3f%c\t", cell_value, data.charging.cell_discharge[i] == 0 ? ' ' : '*');
 80017d6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80017d8:	4a41      	ldr	r2, [pc, #260]	@ (80018e0 <_Z11serialPrintv+0x494>)
 80017da:	189c      	adds	r4, r3, r2
 80017dc:	69b8      	ldr	r0, [r7, #24]
 80017de:	f7fe fedb 	bl	8000598 <__aeabi_f2d>
 80017e2:	4602      	mov	r2, r0
 80017e4:	460b      	mov	r3, r1
 80017e6:	4840      	ldr	r0, [pc, #256]	@ (80018e8 <_Z11serialPrintv+0x49c>)
 80017e8:	6a39      	ldr	r1, [r7, #32]
 80017ea:	4401      	add	r1, r0
 80017ec:	f501 7125 	add.w	r1, r1, #660	@ 0x294
 80017f0:	7809      	ldrb	r1, [r1, #0]
 80017f2:	2900      	cmp	r1, #0
 80017f4:	d101      	bne.n	80017fa <_Z11serialPrintv+0x3ae>
 80017f6:	2120      	movs	r1, #32
 80017f8:	e000      	b.n	80017fc <_Z11serialPrintv+0x3b0>
 80017fa:	212a      	movs	r1, #42	@ 0x2a
 80017fc:	9100      	str	r1, [sp, #0]
 80017fe:	493d      	ldr	r1, [pc, #244]	@ (80018f4 <_Z11serialPrintv+0x4a8>)
 8001800:	4620      	mov	r0, r4
 8001802:	f013 f99f 	bl	8014b44 <siprintf>
 8001806:	4603      	mov	r3, r0
 8001808:	b29a      	uxth	r2, r3
 800180a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800180c:	4413      	add	r3, r2
 800180e:	84fb      	strh	r3, [r7, #38]	@ 0x26
//		if(i != 5)
//		{
//		n += sprintf(&tab[n], " -T.%d-\t", i);
//		n += sprintf(&tab[n], "%d\t", data.temperatures.values[i]);
//		}
		n += sprintf(&tab[n], "\r\n");
 8001810:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001812:	4a33      	ldr	r2, [pc, #204]	@ (80018e0 <_Z11serialPrintv+0x494>)
 8001814:	4413      	add	r3, r2
 8001816:	4933      	ldr	r1, [pc, #204]	@ (80018e4 <_Z11serialPrintv+0x498>)
 8001818:	4618      	mov	r0, r3
 800181a:	f013 f993 	bl	8014b44 <siprintf>
 800181e:	4603      	mov	r3, r0
 8001820:	b29a      	uxth	r2, r3
 8001822:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001824:	4413      	add	r3, r2
 8001826:	84fb      	strh	r3, [r7, #38]	@ 0x26
	for(int i = 0; i < NUMBER_OF_CELLS; i++)
 8001828:	6a3b      	ldr	r3, [r7, #32]
 800182a:	3301      	adds	r3, #1
 800182c:	623b      	str	r3, [r7, #32]
 800182e:	6a3b      	ldr	r3, [r7, #32]
 8001830:	2b05      	cmp	r3, #5
 8001832:	ddb5      	ble.n	80017a0 <_Z11serialPrintv+0x354>
	}

	n += sprintf(&tab[n], "\r\n");
 8001834:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001836:	4a2a      	ldr	r2, [pc, #168]	@ (80018e0 <_Z11serialPrintv+0x494>)
 8001838:	4413      	add	r3, r2
 800183a:	492a      	ldr	r1, [pc, #168]	@ (80018e4 <_Z11serialPrintv+0x498>)
 800183c:	4618      	mov	r0, r3
 800183e:	f013 f981 	bl	8014b44 <siprintf>
 8001842:	4603      	mov	r3, r0
 8001844:	b29a      	uxth	r2, r3
 8001846:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001848:	4413      	add	r3, r2
 800184a:	84fb      	strh	r3, [r7, #38]	@ 0x26
	n += sprintf(&tab[n], "Output current:\t%3.2f\r\n", data.current.value);
 800184c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800184e:	4a24      	ldr	r2, [pc, #144]	@ (80018e0 <_Z11serialPrintv+0x494>)
 8001850:	189c      	adds	r4, r3, r2
 8001852:	4b25      	ldr	r3, [pc, #148]	@ (80018e8 <_Z11serialPrintv+0x49c>)
 8001854:	f8d3 31cc 	ldr.w	r3, [r3, #460]	@ 0x1cc
 8001858:	4618      	mov	r0, r3
 800185a:	f7fe fe9d 	bl	8000598 <__aeabi_f2d>
 800185e:	4602      	mov	r2, r0
 8001860:	460b      	mov	r3, r1
 8001862:	4925      	ldr	r1, [pc, #148]	@ (80018f8 <_Z11serialPrintv+0x4ac>)
 8001864:	4620      	mov	r0, r4
 8001866:	f013 f96d 	bl	8014b44 <siprintf>
 800186a:	4603      	mov	r3, r0
 800186c:	b29a      	uxth	r2, r3
 800186e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001870:	4413      	add	r3, r2
 8001872:	84fb      	strh	r3, [r7, #38]	@ 0x26
	n += sprintf(&tab[n], "\r\n");
 8001874:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001876:	4a1a      	ldr	r2, [pc, #104]	@ (80018e0 <_Z11serialPrintv+0x494>)
 8001878:	4413      	add	r3, r2
 800187a:	491a      	ldr	r1, [pc, #104]	@ (80018e4 <_Z11serialPrintv+0x498>)
 800187c:	4618      	mov	r0, r3
 800187e:	f013 f961 	bl	8014b44 <siprintf>
 8001882:	4603      	mov	r3, r0
 8001884:	b29a      	uxth	r2, r3
 8001886:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001888:	4413      	add	r3, r2
 800188a:	84fb      	strh	r3, [r7, #38]	@ 0x26

	n += sprintf(&tab[n], "EFUSE state:\t%d\r\n", HAL_GPIO_ReadPin(EFUSE_GPIO_Port, EFUSE_Pin));
 800188c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800188e:	4a14      	ldr	r2, [pc, #80]	@ (80018e0 <_Z11serialPrintv+0x494>)
 8001890:	189c      	adds	r4, r3, r2
 8001892:	2104      	movs	r1, #4
 8001894:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001898:	f006 fe92 	bl	80085c0 <HAL_GPIO_ReadPin>
 800189c:	4603      	mov	r3, r0
 800189e:	461a      	mov	r2, r3
 80018a0:	4916      	ldr	r1, [pc, #88]	@ (80018fc <_Z11serialPrintv+0x4b0>)
 80018a2:	4620      	mov	r0, r4
 80018a4:	f013 f94e 	bl	8014b44 <siprintf>
 80018a8:	4603      	mov	r3, r0
 80018aa:	b29a      	uxth	r2, r3
 80018ac:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80018ae:	4413      	add	r3, r2
 80018b0:	84fb      	strh	r3, [r7, #38]	@ 0x26
	n += sprintf(&tab[n], "\r\n");
 80018b2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80018b4:	4a0a      	ldr	r2, [pc, #40]	@ (80018e0 <_Z11serialPrintv+0x494>)
 80018b6:	4413      	add	r3, r2
 80018b8:	490a      	ldr	r1, [pc, #40]	@ (80018e4 <_Z11serialPrintv+0x498>)
 80018ba:	4618      	mov	r0, r3
 80018bc:	f013 f942 	bl	8014b44 <siprintf>
 80018c0:	4603      	mov	r3, r0
 80018c2:	b29a      	uxth	r2, r3
 80018c4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80018c6:	4413      	add	r3, r2
 80018c8:	84fb      	strh	r3, [r7, #38]	@ 0x26

	CDC_Transmit_FS((uint8_t*)tab, n);
 80018ca:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80018cc:	4619      	mov	r1, r3
 80018ce:	4804      	ldr	r0, [pc, #16]	@ (80018e0 <_Z11serialPrintv+0x494>)
 80018d0:	f011 fd26 	bl	8013320 <CDC_Transmit_FS>
}
 80018d4:	bf00      	nop
 80018d6:	372c      	adds	r7, #44	@ 0x2c
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd90      	pop	{r4, r7, pc}
 80018dc:	08016fb0 	.word	0x08016fb0
 80018e0:	200006b4 	.word	0x200006b4
 80018e4:	08016e90 	.word	0x08016e90
 80018e8:	20000aa4 	.word	0x20000aa4
 80018ec:	461c4000 	.word	0x461c4000
 80018f0:	08016fcc 	.word	0x08016fcc
 80018f4:	08016fd4 	.word	0x08016fd4
 80018f8:	08016fe0 	.word	0x08016fe0
 80018fc:	08016ff8 	.word	0x08016ff8

08001900 <_ZN8PUTM_CAN14Can_tx_messageINS_11BMS_LV_mainEEC1ERKS1_RK19CAN_TxHeaderTypeDef>:
  constexpr Can_tx_message(const T &data,
 8001900:	b5b0      	push	{r4, r5, r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af00      	add	r7, sp, #0
 8001906:	60f8      	str	r0, [r7, #12]
 8001908:	60b9      	str	r1, [r7, #8]
 800190a:	607a      	str	r2, [r7, #4]
      : header{message_header} {
 800190c:	68fa      	ldr	r2, [r7, #12]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4614      	mov	r4, r2
 8001912:	461d      	mov	r5, r3
 8001914:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001916:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001918:	e895 0003 	ldmia.w	r5, {r0, r1}
 800191c:	e884 0003 	stmia.w	r4, {r0, r1}
    std::memcpy(this->buff, &data, sizeof(T));
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	3318      	adds	r3, #24
 8001924:	2206      	movs	r2, #6
 8001926:	68b9      	ldr	r1, [r7, #8]
 8001928:	4618      	mov	r0, r3
 800192a:	f013 fa5e 	bl	8014dea <memcpy>
  }
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	4618      	mov	r0, r3
 8001932:	3710      	adds	r7, #16
 8001934:	46bd      	mov	sp, r7
 8001936:	bdb0      	pop	{r4, r5, r7, pc}

08001938 <_ZN8PUTM_CAN14Can_tx_messageINS_18BMS_LV_temperatureEEC1ERKS1_RK19CAN_TxHeaderTypeDef>:
  constexpr Can_tx_message(const T &data,
 8001938:	b5b0      	push	{r4, r5, r7, lr}
 800193a:	b084      	sub	sp, #16
 800193c:	af00      	add	r7, sp, #0
 800193e:	60f8      	str	r0, [r7, #12]
 8001940:	60b9      	str	r1, [r7, #8]
 8001942:	607a      	str	r2, [r7, #4]
      : header{message_header} {
 8001944:	68fa      	ldr	r2, [r7, #12]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4614      	mov	r4, r2
 800194a:	461d      	mov	r5, r3
 800194c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800194e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001950:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001954:	e884 0003 	stmia.w	r4, {r0, r1}
    std::memcpy(this->buff, &data, sizeof(T));
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	3318      	adds	r3, #24
 800195c:	2208      	movs	r2, #8
 800195e:	68b9      	ldr	r1, [r7, #8]
 8001960:	4618      	mov	r0, r3
 8001962:	f013 fa42 	bl	8014dea <memcpy>
  }
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	4618      	mov	r0, r3
 800196a:	3710      	adds	r7, #16
 800196c:	46bd      	mov	sp, r7
 800196e:	bdb0      	pop	{r4, r5, r7, pc}

08001970 <_Z23start_comm_err_functionPv>:

void start_comm_err_function(void *argument){
 8001970:	b580      	push	{r7, lr}
 8001972:	b096      	sub	sp, #88	@ 0x58
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]

	can_init();
 8001978:	f7ff fc80 	bl	800127c <_Z8can_initv>
	for(;;){
		osDelay(20);
 800197c:	2014      	movs	r0, #20
 800197e:	f00e ff37 	bl	80107f0 <osDelay>

		error_conditions[0].value = data.current.value;
 8001982:	4b85      	ldr	r3, [pc, #532]	@ (8001b98 <_Z23start_comm_err_functionPv+0x228>)
 8001984:	f8d3 31cc 	ldr.w	r3, [r3, #460]	@ 0x1cc
 8001988:	4a84      	ldr	r2, [pc, #528]	@ (8001b9c <_Z23start_comm_err_functionPv+0x22c>)
 800198a:	60d3      	str	r3, [r2, #12]
		error_conditions[1].value = (float)(data.voltages.highest_cell_voltage-data.voltages.lowest_cell_voltage);
 800198c:	4b82      	ldr	r3, [pc, #520]	@ (8001b98 <_Z23start_comm_err_functionPv+0x228>)
 800198e:	8b9b      	ldrh	r3, [r3, #28]
 8001990:	461a      	mov	r2, r3
 8001992:	4b81      	ldr	r3, [pc, #516]	@ (8001b98 <_Z23start_comm_err_functionPv+0x228>)
 8001994:	8b5b      	ldrh	r3, [r3, #26]
 8001996:	1ad3      	subs	r3, r2, r3
 8001998:	ee07 3a90 	vmov	s15, r3
 800199c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019a0:	4b7e      	ldr	r3, [pc, #504]	@ (8001b9c <_Z23start_comm_err_functionPv+0x22c>)
 80019a2:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
		error_conditions[2].value = (float)data.temperatures.highest_temperature;
 80019a6:	4b7c      	ldr	r3, [pc, #496]	@ (8001b98 <_Z23start_comm_err_functionPv+0x228>)
 80019a8:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 80019ac:	ee07 3a90 	vmov	s15, r3
 80019b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019b4:	4b79      	ldr	r3, [pc, #484]	@ (8001b9c <_Z23start_comm_err_functionPv+0x22c>)
 80019b6:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
		error_conditions[3].value = (float)data.voltages.lowest_cell_voltage;
 80019ba:	4b77      	ldr	r3, [pc, #476]	@ (8001b98 <_Z23start_comm_err_functionPv+0x228>)
 80019bc:	8b5b      	ldrh	r3, [r3, #26]
 80019be:	ee07 3a90 	vmov	s15, r3
 80019c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019c6:	4b75      	ldr	r3, [pc, #468]	@ (8001b9c <_Z23start_comm_err_functionPv+0x22c>)
 80019c8:	edc3 7a1b 	vstr	s15, [r3, #108]	@ 0x6c
		error_conditions[4].value = (float)data.voltages.highest_cell_voltage;
 80019cc:	4b72      	ldr	r3, [pc, #456]	@ (8001b98 <_Z23start_comm_err_functionPv+0x228>)
 80019ce:	8b9b      	ldrh	r3, [r3, #28]
 80019d0:	ee07 3a90 	vmov	s15, r3
 80019d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019d8:	4b70      	ldr	r3, [pc, #448]	@ (8001b9c <_Z23start_comm_err_functionPv+0x22c>)
 80019da:	edc3 7a23 	vstr	s15, [r3, #140]	@ 0x8c
		error_conditions[5].value = (float)data.temperatures.highest_temperature;
 80019de:	4b6e      	ldr	r3, [pc, #440]	@ (8001b98 <_Z23start_comm_err_functionPv+0x228>)
 80019e0:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 80019e4:	ee07 3a90 	vmov	s15, r3
 80019e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019ec:	4b6b      	ldr	r3, [pc, #428]	@ (8001b9c <_Z23start_comm_err_functionPv+0x22c>)
 80019ee:	edc3 7a2b 	vstr	s15, [r3, #172]	@ 0xac
		error_conditions[6].value = data.temperatures.lowest_temperature;
 80019f2:	4b69      	ldr	r3, [pc, #420]	@ (8001b98 <_Z23start_comm_err_functionPv+0x228>)
 80019f4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80019f8:	ee07 3a90 	vmov	s15, r3
 80019fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a00:	4b66      	ldr	r3, [pc, #408]	@ (8001b9c <_Z23start_comm_err_functionPv+0x22c>)
 8001a02:	edc3 7a33 	vstr	s15, [r3, #204]	@ 0xcc
		error_conditions[7].value = data.current.value;
 8001a06:	4b64      	ldr	r3, [pc, #400]	@ (8001b98 <_Z23start_comm_err_functionPv+0x228>)
 8001a08:	f8d3 31cc 	ldr.w	r3, [r3, #460]	@ 0x1cc
 8001a0c:	4a63      	ldr	r2, [pc, #396]	@ (8001b9c <_Z23start_comm_err_functionPv+0x22c>)
 8001a0e:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec

		PUTM_CAN::BMS_LV_main can_message_main{
			.voltage_sum{data.voltages.total_can},
 8001a12:	4b61      	ldr	r3, [pc, #388]	@ (8001b98 <_Z23start_comm_err_functionPv+0x228>)
 8001a14:	8b1b      	ldrh	r3, [r3, #24]
			.soc{data.soc.value_can},
			.temp_avg{data.temperatures.average},
			.current{(uint8_t)data.current.value},
			.device_state{static_cast<PUTM_CAN::BMS_LV_states>(data.acu_state)}
		};
 8001a16:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
			.soc{data.soc.value_can},
 8001a1a:	4b5f      	ldr	r3, [pc, #380]	@ (8001b98 <_Z23start_comm_err_functionPv+0x228>)
 8001a1c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
		};
 8001a20:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
			.temp_avg{data.temperatures.average},
 8001a24:	4b5c      	ldr	r3, [pc, #368]	@ (8001b98 <_Z23start_comm_err_functionPv+0x228>)
 8001a26:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
		};
 8001a2a:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
			.current{(uint8_t)data.current.value},
 8001a2e:	4b5a      	ldr	r3, [pc, #360]	@ (8001b98 <_Z23start_comm_err_functionPv+0x228>)
 8001a30:	edd3 7a73 	vldr	s15, [r3, #460]	@ 0x1cc
 8001a34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a38:	edc7 7a00 	vstr	s15, [r7]
 8001a3c:	783b      	ldrb	r3, [r7, #0]
 8001a3e:	b2db      	uxtb	r3, r3
		};
 8001a40:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
			.device_state{static_cast<PUTM_CAN::BMS_LV_states>(data.acu_state)}
 8001a44:	4b54      	ldr	r3, [pc, #336]	@ (8001b98 <_Z23start_comm_err_functionPv+0x228>)
 8001a46:	f893 32a4 	ldrb.w	r3, [r3, #676]	@ 0x2a4
		};
 8001a4a:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55

		PUTM_CAN::BMS_LV_temperature can_message_temp{
			data.temperatures.values[0],
 8001a4e:	4b52      	ldr	r3, [pc, #328]	@ (8001b98 <_Z23start_comm_err_functionPv+0x228>)
 8001a50:	f893 3020 	ldrb.w	r3, [r3, #32]
			data.temperatures.values[3],
			data.temperatures.values[4],
			data.temperatures.values[5],
			data.temperatures.values[6],
			data.temperatures.values[7]
		};
 8001a54:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
			data.temperatures.values[1],
 8001a58:	4b4f      	ldr	r3, [pc, #316]	@ (8001b98 <_Z23start_comm_err_functionPv+0x228>)
 8001a5a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
		};
 8001a5e:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
			data.temperatures.values[2],
 8001a62:	4b4d      	ldr	r3, [pc, #308]	@ (8001b98 <_Z23start_comm_err_functionPv+0x228>)
 8001a64:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
		};
 8001a68:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
			data.temperatures.values[3],
 8001a6c:	4b4a      	ldr	r3, [pc, #296]	@ (8001b98 <_Z23start_comm_err_functionPv+0x228>)
 8001a6e:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
		};
 8001a72:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
			data.temperatures.values[4],
 8001a76:	4b48      	ldr	r3, [pc, #288]	@ (8001b98 <_Z23start_comm_err_functionPv+0x228>)
 8001a78:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
		};
 8001a7c:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
			data.temperatures.values[5],
 8001a80:	4b45      	ldr	r3, [pc, #276]	@ (8001b98 <_Z23start_comm_err_functionPv+0x228>)
 8001a82:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
		};
 8001a86:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
			data.temperatures.values[6],
 8001a8a:	4b43      	ldr	r3, [pc, #268]	@ (8001b98 <_Z23start_comm_err_functionPv+0x228>)
 8001a8c:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
		};
 8001a90:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
			data.temperatures.values[7]
 8001a94:	4b40      	ldr	r3, [pc, #256]	@ (8001b98 <_Z23start_comm_err_functionPv+0x228>)
 8001a96:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
		};
 8001a9a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

		if(serial_tick < HAL_GetTick())
 8001a9e:	f003 fcb9 	bl	8005414 <HAL_GetTick>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	4b3e      	ldr	r3, [pc, #248]	@ (8001ba0 <_Z23start_comm_err_functionPv+0x230>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	bf8c      	ite	hi
 8001aac:	2301      	movhi	r3, #1
 8001aae:	2300      	movls	r3, #0
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d008      	beq.n	8001ac8 <_Z23start_comm_err_functionPv+0x158>
		{
			serialPrint();
 8001ab6:	f7ff fcc9 	bl	800144c <_Z11serialPrintv>
			serial_tick = HAL_GetTick() + 500; //0.5s
 8001aba:	f003 fcab 	bl	8005414 <HAL_GetTick>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8001ac4:	4a36      	ldr	r2, [pc, #216]	@ (8001ba0 <_Z23start_comm_err_functionPv+0x230>)
 8001ac6:	6013      	str	r3, [r2, #0]
		}

		auto can_message_main_frame = PUTM_CAN::Can_tx_message<PUTM_CAN::BMS_LV_main>(can_message_main, PUTM_CAN::can_tx_header_BMS_LV_MAIN);
 8001ac8:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8001acc:	f107 0308 	add.w	r3, r7, #8
 8001ad0:	4a34      	ldr	r2, [pc, #208]	@ (8001ba4 <_Z23start_comm_err_functionPv+0x234>)
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f7ff ff14 	bl	8001900 <_ZN8PUTM_CAN14Can_tx_messageINS_11BMS_LV_mainEEC1ERKS1_RK19CAN_TxHeaderTypeDef>
		auto can_message_temp_frame = PUTM_CAN::Can_tx_message<PUTM_CAN::BMS_LV_temperature>(can_message_temp, PUTM_CAN::can_tx_header_BMS_LV_TEMPERATURE);
 8001ad8:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8001adc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001ae0:	4a31      	ldr	r2, [pc, #196]	@ (8001ba8 <_Z23start_comm_err_functionPv+0x238>)
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f7ff ff28 	bl	8001938 <_ZN8PUTM_CAN14Can_tx_messageINS_18BMS_LV_temperatureEEC1ERKS1_RK19CAN_TxHeaderTypeDef>

		if(can_main_tick < HAL_GetTick())
 8001ae8:	f003 fc94 	bl	8005414 <HAL_GetTick>
 8001aec:	4602      	mov	r2, r0
 8001aee:	4b2f      	ldr	r3, [pc, #188]	@ (8001bac <_Z23start_comm_err_functionPv+0x23c>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	429a      	cmp	r2, r3
 8001af4:	bf8c      	ite	hi
 8001af6:	2301      	movhi	r3, #1
 8001af8:	2300      	movls	r3, #0
 8001afa:	b2db      	uxtb	r3, r3
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d00e      	beq.n	8001b1e <_Z23start_comm_err_functionPv+0x1ae>
		{
			auto status_main = can_message_main_frame.send(hcan1);
 8001b00:	f107 0308 	add.w	r3, r7, #8
 8001b04:	492a      	ldr	r1, [pc, #168]	@ (8001bb0 <_Z23start_comm_err_functionPv+0x240>)
 8001b06:	4618      	mov	r0, r3
 8001b08:	f000 f8d0 	bl	8001cac <_ZN8PUTM_CAN14Can_tx_messageINS_11BMS_LV_mainEE4sendER17CAN_HandleTypeDef>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			can_main_tick = HAL_GetTick() + 40; //0.04s
 8001b12:	f003 fc7f 	bl	8005414 <HAL_GetTick>
 8001b16:	4603      	mov	r3, r0
 8001b18:	3328      	adds	r3, #40	@ 0x28
 8001b1a:	4a24      	ldr	r2, [pc, #144]	@ (8001bac <_Z23start_comm_err_functionPv+0x23c>)
 8001b1c:	6013      	str	r3, [r2, #0]
		}

		if(can_temp_tick < HAL_GetTick())
 8001b1e:	f003 fc79 	bl	8005414 <HAL_GetTick>
 8001b22:	4602      	mov	r2, r0
 8001b24:	4b23      	ldr	r3, [pc, #140]	@ (8001bb4 <_Z23start_comm_err_functionPv+0x244>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	bf8c      	ite	hi
 8001b2c:	2301      	movhi	r3, #1
 8001b2e:	2300      	movls	r3, #0
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d00e      	beq.n	8001b54 <_Z23start_comm_err_functionPv+0x1e4>
		{
			auto status_temp = can_message_temp_frame.send(hcan1);
 8001b36:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b3a:	491d      	ldr	r1, [pc, #116]	@ (8001bb0 <_Z23start_comm_err_functionPv+0x240>)
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f000 f8c9 	bl	8001cd4 <_ZN8PUTM_CAN14Can_tx_messageINS_18BMS_LV_temperatureEE4sendER17CAN_HandleTypeDef>
 8001b42:	4603      	mov	r3, r0
 8001b44:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
			can_temp_tick = HAL_GetTick() + 200; //0.2s
 8001b48:	f003 fc64 	bl	8005414 <HAL_GetTick>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	33c8      	adds	r3, #200	@ 0xc8
 8001b50:	4a18      	ldr	r2, [pc, #96]	@ (8001bb4 <_Z23start_comm_err_functionPv+0x244>)
 8001b52:	6013      	str	r3, [r2, #0]
		}
		if(!data.charging.balance_on) //error check is on
 8001b54:	4b10      	ldr	r3, [pc, #64]	@ (8001b98 <_Z23start_comm_err_functionPv+0x228>)
 8001b56:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8001b5a:	f083 0301 	eor.w	r3, r3, #1
 8001b5e:	b2db      	uxtb	r3, r3
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d004      	beq.n	8001b6e <_Z23start_comm_err_functionPv+0x1fe>
		{
			error_check();
 8001b64:	f7ff fbb4 	bl	80012d0 <_Z11error_checkv>
			error_execute();
 8001b68:	f7ff fc1e 	bl	80013a8 <_Z13error_executev>
 8001b6c:	e706      	b.n	800197c <_Z23start_comm_err_functionPv+0xc>
		} 
		else //error check is off
		{
			if(HAL_GPIO_ReadPin(EFUSE_GPIO_Port, EFUSE_Pin) == GPIO_PIN_RESET)
 8001b6e:	2104      	movs	r1, #4
 8001b70:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b74:	f006 fd24 	bl	80085c0 <HAL_GPIO_ReadPin>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	bf0c      	ite	eq
 8001b7e:	2301      	moveq	r3, #1
 8001b80:	2300      	movne	r3, #0
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	f43f aef9 	beq.w	800197c <_Z23start_comm_err_functionPv+0xc>
			{
				HAL_GPIO_WritePin(EFUSE_GPIO_Port, EFUSE_Pin, GPIO_PIN_SET);
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	2104      	movs	r1, #4
 8001b8e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b92:	f006 fd2d 	bl	80085f0 <HAL_GPIO_WritePin>
			}
		}
	}
 8001b96:	e6f1      	b.n	800197c <_Z23start_comm_err_functionPv+0xc>
 8001b98:	20000aa4 	.word	0x20000aa4
 8001b9c:	200005b4 	.word	0x200005b4
 8001ba0:	200005a8 	.word	0x200005a8
 8001ba4:	080170c8 	.word	0x080170c8
 8001ba8:	080170e0 	.word	0x080170e0
 8001bac:	200005ac 	.word	0x200005ac
 8001bb0:	200010dc 	.word	0x200010dc
 8001bb4:	200005b0 	.word	0x200005b0

08001bb8 <_ZNSt5arrayIPN8PUTM_CAN11Device_baseELj40EE5beginEv>:
      { std::swap_ranges(begin(), end(), __other.begin()); }

      // Iterators.
      [[__gnu__::__const__, __nodiscard__]]
      _GLIBCXX17_CONSTEXPR iterator
      begin() noexcept
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	f000 f89b 	bl	8001cfc <_ZNSt5arrayIPN8PUTM_CAN11Device_baseELj40EE4dataEv>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3708      	adds	r7, #8
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}

08001bd0 <_ZNSt5arrayIPN8PUTM_CAN11Device_baseELj40EE3endEv>:
      begin() const noexcept
      { return const_iterator(data()); }

      [[__gnu__::__const__, __nodiscard__]]
      _GLIBCXX17_CONSTEXPR iterator
      end() noexcept
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	f000 f88f 	bl	8001cfc <_ZNSt5arrayIPN8PUTM_CAN11Device_baseELj40EE4dataEv>
 8001bde:	4603      	mov	r3, r0
 8001be0:	33a0      	adds	r3, #160	@ 0xa0
 8001be2:	4618      	mov	r0, r3
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}

08001bea <_ZN3etl7ivectorI15Error_conditionED1Ev>:
  /// The base class for specifically sized vectors.
  /// Can be used as a reference type for all vectors containing a specific type.
  ///\ingroup vector
  //***************************************************************************
  template <typename T>
  class ivector : public etl::vector_base
 8001bea:	b580      	push	{r7, lr}
 8001bec:	b082      	sub	sp, #8
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	6078      	str	r0, [r7, #4]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f7ff faa8 	bl	800114a <_ZN3etl11vector_baseD1Ev>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3708      	adds	r7, #8
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}

08001c04 <_ZN3etl6vectorI15Error_conditionLj8EEC1Ev>:
    static const size_t MAX_SIZE = MAX_SIZE_;

    //*************************************************************************
    /// Constructor.
    //*************************************************************************
    vector()
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
      : etl::ivector<T>(reinterpret_cast<T*>(&buffer), MAX_SIZE)
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	330c      	adds	r3, #12
 8001c12:	2208      	movs	r2, #8
 8001c14:	4619      	mov	r1, r3
 8001c16:	f000 f87e 	bl	8001d16 <_ZN3etl7ivectorI15Error_conditionEC1EPS1_j>
    {
      this->initialise();
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f000 f890 	bl	8001d42 <_ZN3etl7ivectorI15Error_conditionE10initialiseEv>
    }
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4618      	mov	r0, r3
 8001c26:	3708      	adds	r7, #8
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}

08001c2c <_ZN3etl6vectorI15Error_conditionLj8EED1Ev>:
#endif

    //*************************************************************************
    /// Destructor.
    //*************************************************************************
    ~vector()
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
    {
      this->clear();
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	4618      	mov	r0, r3
 8001c38:	f000 f897 	bl	8001d6a <_ZN3etl7ivectorI15Error_conditionE5clearEv>
    }
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7ff ffd3 	bl	8001bea <_ZN3etl7ivectorI15Error_conditionED1Ev>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	4618      	mov	r0, r3
 8001c48:	3708      	adds	r7, #8
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}

08001c4e <_ZN3etl7ivectorI15Error_conditionE12emplace_backIJRS1_EEEvDpOT_>:
    void emplace_back(Args && ... args)
 8001c4e:	b590      	push	{r4, r7, lr}
 8001c50:	b083      	sub	sp, #12
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	6078      	str	r0, [r7, #4]
 8001c56:	6039      	str	r1, [r7, #0]
      ::new (p_end) T(etl::forward<Args>(args)...);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	2004      	movs	r0, #4
 8001c60:	f7ff fa58 	bl	8001114 <_ZnwjPv>
 8001c64:	4604      	mov	r4, r0
 8001c66:	6838      	ldr	r0, [r7, #0]
 8001c68:	f000 f88a 	bl	8001d80 <_ZN3etl7forwardIR15Error_conditionEEOT_RNS_16remove_referenceIS3_E4typeE>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	6023      	str	r3, [r4, #0]
      ++p_end;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	1d1a      	adds	r2, r3, #4
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	609a      	str	r2, [r3, #8]
    }
 8001c7c:	bf00      	nop
 8001c7e:	370c      	adds	r7, #12
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd90      	pop	{r4, r7, pc}

08001c84 <_ZNK3etl7ivectorI15Error_conditionE5emptyEv>:
    bool empty() const
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
      return (p_end == p_buffer);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	689a      	ldr	r2, [r3, #8]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	429a      	cmp	r2, r3
 8001c96:	bf0c      	ite	eq
 8001c98:	2301      	moveq	r3, #1
 8001c9a:	2300      	movne	r3, #0
 8001c9c:	b2db      	uxtb	r3, r3
    }
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	370c      	adds	r7, #12
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
	...

08001cac <_ZN8PUTM_CAN14Can_tx_messageINS_11BMS_LV_mainEE4sendER17CAN_HandleTypeDef>:
  HAL_StatusTypeDef send(CAN_HandleTypeDef &hcan) {
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	6039      	str	r1, [r7, #0]
    return HAL_CAN_AddTxMessage(&hcan, &this->header, this->buff, &TxMailbox);
 8001cb6:	6879      	ldr	r1, [r7, #4]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	f103 0218 	add.w	r2, r3, #24
 8001cbe:	4b04      	ldr	r3, [pc, #16]	@ (8001cd0 <_ZN8PUTM_CAN14Can_tx_messageINS_11BMS_LV_mainEE4sendER17CAN_HandleTypeDef+0x24>)
 8001cc0:	6838      	ldr	r0, [r7, #0]
 8001cc2:	f005 fb50 	bl	8007366 <HAL_CAN_AddTxMessage>
 8001cc6:	4603      	mov	r3, r0
  }
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3708      	adds	r7, #8
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	20000a9c 	.word	0x20000a9c

08001cd4 <_ZN8PUTM_CAN14Can_tx_messageINS_18BMS_LV_temperatureEE4sendER17CAN_HandleTypeDef>:
  HAL_StatusTypeDef send(CAN_HandleTypeDef &hcan) {
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
 8001cdc:	6039      	str	r1, [r7, #0]
    return HAL_CAN_AddTxMessage(&hcan, &this->header, this->buff, &TxMailbox);
 8001cde:	6879      	ldr	r1, [r7, #4]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	f103 0218 	add.w	r2, r3, #24
 8001ce6:	4b04      	ldr	r3, [pc, #16]	@ (8001cf8 <_ZN8PUTM_CAN14Can_tx_messageINS_18BMS_LV_temperatureEE4sendER17CAN_HandleTypeDef+0x24>)
 8001ce8:	6838      	ldr	r0, [r7, #0]
 8001cea:	f005 fb3c 	bl	8007366 <HAL_CAN_AddTxMessage>
 8001cee:	4603      	mov	r3, r0
  }
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3708      	adds	r7, #8
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	20000aa0 	.word	0x20000aa0

08001cfc <_ZNSt5arrayIPN8PUTM_CAN11Device_baseELj40EE4dataEv>:
 	           : _AT_Type::_S_ref(_M_elems, 0);
      }

      [[__gnu__::__const__, __nodiscard__]]
      _GLIBCXX17_CONSTEXPR pointer
      data() noexcept
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	4618      	mov	r0, r3
 8001d08:	f000 f845 	bl	8001d96 <_ZNSt14__array_traitsIPN8PUTM_CAN11Device_baseELj40EE6_S_ptrERA40_KS2_>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3708      	adds	r7, #8
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}

08001d16 <_ZN3etl7ivectorI15Error_conditionEC1EPS1_j>:
    ivector(T* p_buffer_, size_t MAX_SIZE)
 8001d16:	b580      	push	{r7, lr}
 8001d18:	b084      	sub	sp, #16
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	60f8      	str	r0, [r7, #12]
 8001d1e:	60b9      	str	r1, [r7, #8]
 8001d20:	607a      	str	r2, [r7, #4]
      , p_end(p_buffer_)
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	6879      	ldr	r1, [r7, #4]
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7ff fa00 	bl	800112c <_ZN3etl11vector_baseC1Ej>
      , p_buffer(p_buffer_)
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	68ba      	ldr	r2, [r7, #8]
 8001d30:	605a      	str	r2, [r3, #4]
      , p_end(p_buffer_)
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	68ba      	ldr	r2, [r7, #8]
 8001d36:	609a      	str	r2, [r3, #8]
    }
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3710      	adds	r7, #16
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}

08001d42 <_ZN3etl7ivectorI15Error_conditionE10initialiseEv>:
    void initialise()
 8001d42:	b580      	push	{r7, lr}
 8001d44:	b082      	sub	sp, #8
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	6078      	str	r0, [r7, #4]
      etl::destroy(p_buffer, p_end);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	685a      	ldr	r2, [r3, #4]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	4619      	mov	r1, r3
 8001d54:	4610      	mov	r0, r2
 8001d56:	f000 f829 	bl	8001dac <_ZN3etl7destroyIP15Error_conditionEEvT_S3_>
      p_end = p_buffer;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	685a      	ldr	r2, [r3, #4]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	609a      	str	r2, [r3, #8]
    }
 8001d62:	bf00      	nop
 8001d64:	3708      	adds	r7, #8
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}

08001d6a <_ZN3etl7ivectorI15Error_conditionE5clearEv>:
    void clear()
 8001d6a:	b580      	push	{r7, lr}
 8001d6c:	b082      	sub	sp, #8
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	6078      	str	r0, [r7, #4]
      initialise();
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f7ff ffe5 	bl	8001d42 <_ZN3etl7ivectorI15Error_conditionE10initialiseEv>
    }
 8001d78:	bf00      	nop
 8001d7a:	3708      	adds	r7, #8
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}

08001d80 <_ZN3etl7forwardIR15Error_conditionEEOT_RNS_16remove_referenceIS3_E4typeE>:
    return static_cast<typename etl::remove_reference<T>::type&&>(t);
  }

  //******************************************************************************
  template <typename T>
  constexpr T&& forward(typename etl::remove_reference<T>::type& t) ETL_NOEXCEPT
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  {
    return static_cast<T&&>(t);
 8001d88:	687b      	ldr	r3, [r7, #4]
  }
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	370c      	adds	r7, #12
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr

08001d96 <_ZNSt14__array_traitsIPN8PUTM_CAN11Device_baseELj40EE6_S_ptrERA40_KS2_>:
      _S_ptr(const _Type& __t) noexcept
 8001d96:	b480      	push	{r7}
 8001d98:	b083      	sub	sp, #12
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4618      	mov	r0, r3
 8001da2:	370c      	adds	r7, #12
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr

08001dac <_ZN3etl7destroyIP15Error_conditionEEvT_S3_>:
  /// Destroys a range of items.
  /// https://en.cppreference.com/w/cpp/memory/destroy
  ///\ingroup memory
  //*****************************************************************************
  template <typename TIterator>
  void destroy(TIterator i_begin, TIterator i_end)
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	6039      	str	r1, [r7, #0]
  {
    std::destroy(i_begin, i_end);
 8001db6:	6839      	ldr	r1, [r7, #0]
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	f000 f804 	bl	8001dc6 <_ZSt7destroyIP15Error_conditionEvT_S2_>
  }
 8001dbe:	bf00      	nop
 8001dc0:	3708      	adds	r7, #8
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}

08001dc6 <_ZSt7destroyIP15Error_conditionEvT_S2_>:
    }

#if __cplusplus >= 201703L
  template <typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    destroy(_ForwardIterator __first, _ForwardIterator __last)
 8001dc6:	b580      	push	{r7, lr}
 8001dc8:	b082      	sub	sp, #8
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	6078      	str	r0, [r7, #4]
 8001dce:	6039      	str	r1, [r7, #0]
    {
      std::_Destroy(__first, __last);
 8001dd0:	6839      	ldr	r1, [r7, #0]
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f000 f804 	bl	8001de0 <_ZSt8_DestroyIP15Error_conditionEvT_S2_>
    }
 8001dd8:	bf00      	nop
 8001dda:	3708      	adds	r7, #8
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}

08001de0 <_ZSt8_DestroyIP15Error_conditionEvT_S2_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	6039      	str	r1, [r7, #0]
      if (std::__is_constant_evaluated())
 8001dea:	f7ff f98b 	bl	8001104 <_ZSt23__is_constant_evaluatedv>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d004      	beq.n	8001dfe <_ZSt8_DestroyIP15Error_conditionEvT_S2_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 8001df4:	6839      	ldr	r1, [r7, #0]
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f000 f808 	bl	8001e0c <_ZNSt12_Destroy_auxILb0EE9__destroyIP15Error_conditionEEvT_S4_>
 8001dfc:	e003      	b.n	8001e06 <_ZSt8_DestroyIP15Error_conditionEvT_S2_+0x26>
	__destroy(__first, __last);
 8001dfe:	6839      	ldr	r1, [r7, #0]
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	f000 f81c 	bl	8001e3e <_ZNSt12_Destroy_auxILb1EE9__destroyIP15Error_conditionEEvT_S4_>
    }
 8001e06:	3708      	adds	r7, #8
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}

08001e0c <_ZNSt12_Destroy_auxILb0EE9__destroyIP15Error_conditionEEvT_S4_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
 8001e14:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 8001e16:	e009      	b.n	8001e2c <_ZNSt12_Destroy_auxILb0EE9__destroyIP15Error_conditionEEvT_S4_+0x20>
	    std::_Destroy(std::__addressof(*__first));
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	f000 f81b 	bl	8001e54 <_ZSt11__addressofI15Error_conditionEPT_RS1_>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	4618      	mov	r0, r3
 8001e22:	f000 f822 	bl	8001e6a <_ZSt8_DestroyI15Error_conditionEvPT_>
	  for (; __first != __last; ++__first)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	3304      	adds	r3, #4
 8001e2a:	607b      	str	r3, [r7, #4]
 8001e2c:	687a      	ldr	r2, [r7, #4]
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d1f1      	bne.n	8001e18 <_ZNSt12_Destroy_auxILb0EE9__destroyIP15Error_conditionEEvT_S4_+0xc>
	}
 8001e34:	bf00      	nop
 8001e36:	bf00      	nop
 8001e38:	3708      	adds	r7, #8
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}

08001e3e <_ZNSt12_Destroy_auxILb1EE9__destroyIP15Error_conditionEEvT_S4_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8001e3e:	b480      	push	{r7}
 8001e40:	b083      	sub	sp, #12
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	6078      	str	r0, [r7, #4]
 8001e46:	6039      	str	r1, [r7, #0]
 8001e48:	bf00      	nop
 8001e4a:	370c      	adds	r7, #12
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr

08001e54 <_ZSt11__addressofI15Error_conditionEPT_RS1_>:
   *  @brief Same as C++11 std::addressof
   *  @ingroup utilities
   */
  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR _Tp*
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	4618      	mov	r0, r3
 8001e60:	370c      	adds	r7, #12
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr

08001e6a <_ZSt8_DestroyI15Error_conditionEvPT_>:
    _Destroy(_Tp* __pointer)
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	b082      	sub	sp, #8
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f000 f804 	bl	8001e80 <_ZSt10destroy_atI15Error_conditionEvPT_>
    }
 8001e78:	bf00      	nop
 8001e7a:	3708      	adds	r7, #8
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}

08001e80 <_ZSt10destroy_atI15Error_conditionEvPT_>:
    destroy_at(_Tp* __location)
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
    }
 8001e88:	bf00      	nop
 8001e8a:	370c      	adds	r7, #12
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr

08001e94 <_Z41__static_initialization_and_destruction_0ii>:
}
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 8001e9c:	6039      	str	r1, [r7, #0]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	f040 80c6 	bne.w	8002032 <_Z41__static_initialization_and_destruction_0ii+0x19e>
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001eac:	4293      	cmp	r3, r2
 8001eae:	f040 80c0 	bne.w	8002032 <_Z41__static_initialization_and_destruction_0ii+0x19e>
};
 8001eb2:	4b63      	ldr	r3, [pc, #396]	@ (8002040 <_Z41__static_initialization_and_destruction_0ii+0x1ac>)
 8001eb4:	2207      	movs	r2, #7
 8001eb6:	601a      	str	r2, [r3, #0]
 8001eb8:	4a62      	ldr	r2, [pc, #392]	@ (8002044 <_Z41__static_initialization_and_destruction_0ii+0x1b0>)
 8001eba:	605a      	str	r2, [r3, #4]
 8001ebc:	4a62      	ldr	r2, [pc, #392]	@ (8002048 <_Z41__static_initialization_and_destruction_0ii+0x1b4>)
 8001ebe:	609a      	str	r2, [r3, #8]
		{Error_condition::NEUTRAL_CURRENT_CAR,-0.3,0.3,data.current.value,TIME_TO_SLEEP,8}, //to check //acu_state 0 or 8?
 8001ec0:	4a62      	ldr	r2, [pc, #392]	@ (800204c <_Z41__static_initialization_and_destruction_0ii+0x1b8>)
 8001ec2:	f8d2 21cc 	ldr.w	r2, [r2, #460]	@ 0x1cc
};
 8001ec6:	60da      	str	r2, [r3, #12]
 8001ec8:	4a61      	ldr	r2, [pc, #388]	@ (8002050 <_Z41__static_initialization_and_destruction_0ii+0x1bc>)
 8001eca:	611a      	str	r2, [r3, #16]
 8001ecc:	2208      	movs	r2, #8
 8001ece:	751a      	strb	r2, [r3, #20]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	619a      	str	r2, [r3, #24]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	771a      	strb	r2, [r3, #28]
 8001ed8:	3320      	adds	r3, #32
 8001eda:	2200      	movs	r2, #0
 8001edc:	601a      	str	r2, [r3, #0]
 8001ede:	4a5d      	ldr	r2, [pc, #372]	@ (8002054 <_Z41__static_initialization_and_destruction_0ii+0x1c0>)
 8001ee0:	605a      	str	r2, [r3, #4]
 8001ee2:	4a5d      	ldr	r2, [pc, #372]	@ (8002058 <_Z41__static_initialization_and_destruction_0ii+0x1c4>)
 8001ee4:	609a      	str	r2, [r3, #8]
		{Error_condition::UNBALANCE,2000,50000,(float)(data.voltages.highest_cell_voltage-data.voltages.lowest_cell_voltage),ERROR_TIME,2},
 8001ee6:	4a59      	ldr	r2, [pc, #356]	@ (800204c <_Z41__static_initialization_and_destruction_0ii+0x1b8>)
 8001ee8:	8b92      	ldrh	r2, [r2, #28]
 8001eea:	4611      	mov	r1, r2
 8001eec:	4a57      	ldr	r2, [pc, #348]	@ (800204c <_Z41__static_initialization_and_destruction_0ii+0x1b8>)
 8001eee:	8b52      	ldrh	r2, [r2, #26]
 8001ef0:	1a8a      	subs	r2, r1, r2
 8001ef2:	ee07 2a90 	vmov	s15, r2
 8001ef6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
};
 8001efa:	edc3 7a03 	vstr	s15, [r3, #12]
 8001efe:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001f02:	611a      	str	r2, [r3, #16]
 8001f04:	2202      	movs	r2, #2
 8001f06:	751a      	strb	r2, [r3, #20]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	619a      	str	r2, [r3, #24]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	771a      	strb	r2, [r3, #28]
 8001f10:	3320      	adds	r3, #32
 8001f12:	2203      	movs	r2, #3
 8001f14:	601a      	str	r2, [r3, #0]
 8001f16:	4a51      	ldr	r2, [pc, #324]	@ (800205c <_Z41__static_initialization_and_destruction_0ii+0x1c8>)
 8001f18:	605a      	str	r2, [r3, #4]
 8001f1a:	4a51      	ldr	r2, [pc, #324]	@ (8002060 <_Z41__static_initialization_and_destruction_0ii+0x1cc>)
 8001f1c:	609a      	str	r2, [r3, #8]
		{Error_condition::TEMPERATURE_WARNING,48,55,(float)data.temperatures.highest_temperature,ERROR_TIME_TEMPERATURES,3},
 8001f1e:	4a4b      	ldr	r2, [pc, #300]	@ (800204c <_Z41__static_initialization_and_destruction_0ii+0x1b8>)
 8001f20:	f892 2029 	ldrb.w	r2, [r2, #41]	@ 0x29
 8001f24:	ee07 2a90 	vmov	s15, r2
 8001f28:	eef8 7a67 	vcvt.f32.u32	s15, s15
};
 8001f2c:	edc3 7a03 	vstr	s15, [r3, #12]
 8001f30:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001f34:	611a      	str	r2, [r3, #16]
 8001f36:	2203      	movs	r2, #3
 8001f38:	751a      	strb	r2, [r3, #20]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	619a      	str	r2, [r3, #24]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	771a      	strb	r2, [r3, #28]
 8001f42:	3320      	adds	r3, #32
 8001f44:	2201      	movs	r2, #1
 8001f46:	601a      	str	r2, [r3, #0]
 8001f48:	f04f 0200 	mov.w	r2, #0
 8001f4c:	605a      	str	r2, [r3, #4]
 8001f4e:	4a45      	ldr	r2, [pc, #276]	@ (8002064 <_Z41__static_initialization_and_destruction_0ii+0x1d0>)
 8001f50:	609a      	str	r2, [r3, #8]
		{Error_condition::VOLTAGE_LOW,0,30000,(float)data.voltages.lowest_cell_voltage,ERROR_TIME,4},
 8001f52:	4a3e      	ldr	r2, [pc, #248]	@ (800204c <_Z41__static_initialization_and_destruction_0ii+0x1b8>)
 8001f54:	8b52      	ldrh	r2, [r2, #26]
 8001f56:	ee07 2a90 	vmov	s15, r2
 8001f5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
};
 8001f5e:	edc3 7a03 	vstr	s15, [r3, #12]
 8001f62:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001f66:	611a      	str	r2, [r3, #16]
 8001f68:	2204      	movs	r2, #4
 8001f6a:	751a      	strb	r2, [r3, #20]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	619a      	str	r2, [r3, #24]
 8001f70:	2200      	movs	r2, #0
 8001f72:	771a      	strb	r2, [r3, #28]
 8001f74:	3320      	adds	r3, #32
 8001f76:	2202      	movs	r2, #2
 8001f78:	601a      	str	r2, [r3, #0]
 8001f7a:	4a3b      	ldr	r2, [pc, #236]	@ (8002068 <_Z41__static_initialization_and_destruction_0ii+0x1d4>)
 8001f7c:	605a      	str	r2, [r3, #4]
 8001f7e:	4a3b      	ldr	r2, [pc, #236]	@ (800206c <_Z41__static_initialization_and_destruction_0ii+0x1d8>)
 8001f80:	609a      	str	r2, [r3, #8]
		{Error_condition::VOLTAGE_HIGH,42200,500000,(float)data.voltages.highest_cell_voltage,ERROR_TIME,5},
 8001f82:	4a32      	ldr	r2, [pc, #200]	@ (800204c <_Z41__static_initialization_and_destruction_0ii+0x1b8>)
 8001f84:	8b92      	ldrh	r2, [r2, #28]
 8001f86:	ee07 2a90 	vmov	s15, r2
 8001f8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
};
 8001f8e:	edc3 7a03 	vstr	s15, [r3, #12]
 8001f92:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001f96:	611a      	str	r2, [r3, #16]
 8001f98:	2205      	movs	r2, #5
 8001f9a:	751a      	strb	r2, [r3, #20]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	619a      	str	r2, [r3, #24]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	771a      	strb	r2, [r3, #28]
 8001fa4:	3320      	adds	r3, #32
 8001fa6:	2204      	movs	r2, #4
 8001fa8:	601a      	str	r2, [r3, #0]
 8001faa:	4a2d      	ldr	r2, [pc, #180]	@ (8002060 <_Z41__static_initialization_and_destruction_0ii+0x1cc>)
 8001fac:	605a      	str	r2, [r3, #4]
 8001fae:	4a30      	ldr	r2, [pc, #192]	@ (8002070 <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 8001fb0:	609a      	str	r2, [r3, #8]
		{Error_condition::TEMPERATURE_HIGH,55,120,(float)data.temperatures.highest_temperature,ERROR_TIME_TEMPERATURES,6},
 8001fb2:	4a26      	ldr	r2, [pc, #152]	@ (800204c <_Z41__static_initialization_and_destruction_0ii+0x1b8>)
 8001fb4:	f892 2029 	ldrb.w	r2, [r2, #41]	@ 0x29
 8001fb8:	ee07 2a90 	vmov	s15, r2
 8001fbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
};
 8001fc0:	edc3 7a03 	vstr	s15, [r3, #12]
 8001fc4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001fc8:	611a      	str	r2, [r3, #16]
 8001fca:	2206      	movs	r2, #6
 8001fcc:	751a      	strb	r2, [r3, #20]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	619a      	str	r2, [r3, #24]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	771a      	strb	r2, [r3, #28]
 8001fd6:	3320      	adds	r3, #32
 8001fd8:	2205      	movs	r2, #5
 8001fda:	601a      	str	r2, [r3, #0]
 8001fdc:	4a25      	ldr	r2, [pc, #148]	@ (8002074 <_Z41__static_initialization_and_destruction_0ii+0x1e0>)
 8001fde:	605a      	str	r2, [r3, #4]
 8001fe0:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001fe4:	609a      	str	r2, [r3, #8]
		{Error_condition::TEMPERATURE_LOST,-1,1,data.temperatures.lowest_temperature,ERROR_TIME_TEMPERATURES,6},
 8001fe6:	4a19      	ldr	r2, [pc, #100]	@ (800204c <_Z41__static_initialization_and_destruction_0ii+0x1b8>)
 8001fe8:	f892 2028 	ldrb.w	r2, [r2, #40]	@ 0x28
};
 8001fec:	ee07 2a90 	vmov	s15, r2
 8001ff0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ff4:	edc3 7a03 	vstr	s15, [r3, #12]
 8001ff8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001ffc:	611a      	str	r2, [r3, #16]
 8001ffe:	2206      	movs	r2, #6
 8002000:	751a      	strb	r2, [r3, #20]
 8002002:	2200      	movs	r2, #0
 8002004:	619a      	str	r2, [r3, #24]
 8002006:	2200      	movs	r2, #0
 8002008:	771a      	strb	r2, [r3, #28]
 800200a:	3320      	adds	r3, #32
 800200c:	2206      	movs	r2, #6
 800200e:	601a      	str	r2, [r3, #0]
 8002010:	4a19      	ldr	r2, [pc, #100]	@ (8002078 <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 8002012:	605a      	str	r2, [r3, #4]
 8002014:	4a19      	ldr	r2, [pc, #100]	@ (800207c <_Z41__static_initialization_and_destruction_0ii+0x1e8>)
 8002016:	609a      	str	r2, [r3, #8]
		{Error_condition::CURRENT_HIGH,20,100,data.current.value,ERROR_TIME,7}
 8002018:	4a0c      	ldr	r2, [pc, #48]	@ (800204c <_Z41__static_initialization_and_destruction_0ii+0x1b8>)
 800201a:	f8d2 21cc 	ldr.w	r2, [r2, #460]	@ 0x1cc
};
 800201e:	60da      	str	r2, [r3, #12]
 8002020:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8002024:	611a      	str	r2, [r3, #16]
 8002026:	2207      	movs	r2, #7
 8002028:	751a      	strb	r2, [r3, #20]
 800202a:	2200      	movs	r2, #0
 800202c:	619a      	str	r2, [r3, #24]
 800202e:	2200      	movs	r2, #0
 8002030:	771a      	strb	r2, [r3, #28]
}
 8002032:	bf00      	nop
 8002034:	370c      	adds	r7, #12
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr
 800203e:	bf00      	nop
 8002040:	200005b4 	.word	0x200005b4
 8002044:	be99999a 	.word	0xbe99999a
 8002048:	3e99999a 	.word	0x3e99999a
 800204c:	20000aa4 	.word	0x20000aa4
 8002050:	00124f80 	.word	0x00124f80
 8002054:	44fa0000 	.word	0x44fa0000
 8002058:	47435000 	.word	0x47435000
 800205c:	42400000 	.word	0x42400000
 8002060:	425c0000 	.word	0x425c0000
 8002064:	46ea6000 	.word	0x46ea6000
 8002068:	4724d800 	.word	0x4724d800
 800206c:	48f42400 	.word	0x48f42400
 8002070:	42f00000 	.word	0x42f00000
 8002074:	bf800000 	.word	0xbf800000
 8002078:	41a00000 	.word	0x41a00000
 800207c:	42c80000 	.word	0x42c80000

08002080 <_ZN8PUTM_CAN6DeviceINS_8ASB_mainEE8set_dataERKNS_14Can_rx_messageE>:
    static_assert(sizeof(Device_data_type) <= 8);
  };

  Device_data_type data{};

  void set_data(const Can_rx_message &m) override {
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
 8002088:	6039      	str	r1, [r7, #0]
    new_data = true;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2201      	movs	r2, #1
 800208e:	719a      	strb	r2, [r3, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	1dd8      	adds	r0, r3, #7
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	331c      	adds	r3, #28
 8002098:	2205      	movs	r2, #5
 800209a:	4619      	mov	r1, r3
 800209c:	f012 fea5 	bl	8014dea <memcpy>
  }
 80020a0:	bf00      	nop
 80020a2:	3708      	adds	r7, #8
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}

080020a8 <_ZN8PUTM_CAN6DeviceINS_17YawProbe_air_flowEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	6039      	str	r1, [r7, #0]
    new_data = true;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2201      	movs	r2, #1
 80020b6:	719a      	strb	r2, [r3, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	1dd8      	adds	r0, r3, #7
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	331c      	adds	r3, #28
 80020c0:	2203      	movs	r2, #3
 80020c2:	4619      	mov	r1, r3
 80020c4:	f012 fe91 	bl	8014dea <memcpy>
  }
 80020c8:	bf00      	nop
 80020ca:	3708      	adds	r7, #8
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <_ZN8PUTM_CAN6DeviceINS_14WheelTemp_mainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	6039      	str	r1, [r7, #0]
    new_data = true;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2201      	movs	r2, #1
 80020de:	719a      	strb	r2, [r3, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	1dd8      	adds	r0, r3, #7
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	331c      	adds	r3, #28
 80020e8:	2208      	movs	r2, #8
 80020ea:	4619      	mov	r1, r3
 80020ec:	f012 fe7d 	bl	8014dea <memcpy>
  }
 80020f0:	bf00      	nop
 80020f2:	3708      	adds	r7, #8
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}

080020f8 <_ZN8PUTM_CAN6DeviceINS_14Telemetry_MainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
 8002100:	6039      	str	r1, [r7, #0]
    new_data = true;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2201      	movs	r2, #1
 8002106:	719a      	strb	r2, [r3, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	3307      	adds	r3, #7
 800210c:	683a      	ldr	r2, [r7, #0]
 800210e:	321c      	adds	r2, #28
 8002110:	6812      	ldr	r2, [r2, #0]
 8002112:	601a      	str	r2, [r3, #0]
  }
 8002114:	bf00      	nop
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <_ZN8PUTM_CAN6DeviceINS_11TC_imu_gyroEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	6039      	str	r1, [r7, #0]
    new_data = true;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2201      	movs	r2, #1
 800212e:	719a      	strb	r2, [r3, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	1dd8      	adds	r0, r3, #7
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	331c      	adds	r3, #28
 8002138:	2206      	movs	r2, #6
 800213a:	4619      	mov	r1, r3
 800213c:	f012 fe55 	bl	8014dea <memcpy>
  }
 8002140:	bf00      	nop
 8002142:	3708      	adds	r7, #8
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}

08002148 <_ZN8PUTM_CAN6DeviceINS_10TC_imu_accEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	6039      	str	r1, [r7, #0]
    new_data = true;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2201      	movs	r2, #1
 8002156:	719a      	strb	r2, [r3, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	1dd8      	adds	r0, r3, #7
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	331c      	adds	r3, #28
 8002160:	2206      	movs	r2, #6
 8002162:	4619      	mov	r1, r3
 8002164:	f012 fe41 	bl	8014dea <memcpy>
  }
 8002168:	bf00      	nop
 800216a:	3708      	adds	r7, #8
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}

08002170 <_ZN8PUTM_CAN6DeviceINS_15TC_temperaturesEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	6039      	str	r1, [r7, #0]
    new_data = true;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2201      	movs	r2, #1
 800217e:	719a      	strb	r2, [r3, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	1dd8      	adds	r0, r3, #7
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	331c      	adds	r3, #28
 8002188:	2206      	movs	r2, #6
 800218a:	4619      	mov	r1, r3
 800218c:	f012 fe2d 	bl	8014dea <memcpy>
  }
 8002190:	bf00      	nop
 8002192:	3708      	adds	r7, #8
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}

08002198 <_ZN8PUTM_CAN6DeviceINS_19TC_wheel_velocitiesEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	6039      	str	r1, [r7, #0]
    new_data = true;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2201      	movs	r2, #1
 80021a6:	719a      	strb	r2, [r3, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	1dd8      	adds	r0, r3, #7
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	331c      	adds	r3, #28
 80021b0:	2208      	movs	r2, #8
 80021b2:	4619      	mov	r1, r3
 80021b4:	f012 fe19 	bl	8014dea <memcpy>
  }
 80021b8:	bf00      	nop
 80021ba:	3708      	adds	r7, #8
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}

080021c0 <_ZN8PUTM_CAN6DeviceINS_18TC_rear_suspensionEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	6039      	str	r1, [r7, #0]
    new_data = true;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2201      	movs	r2, #1
 80021ce:	719a      	strb	r2, [r3, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	3307      	adds	r3, #7
 80021d4:	683a      	ldr	r2, [r7, #0]
 80021d6:	321c      	adds	r2, #28
 80021d8:	6812      	ldr	r2, [r2, #0]
 80021da:	601a      	str	r2, [r3, #0]
  }
 80021dc:	bf00      	nop
 80021de:	370c      	adds	r7, #12
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr

080021e8 <_ZN8PUTM_CAN6DeviceINS_7TC_mainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
 80021f0:	6039      	str	r1, [r7, #0]
    new_data = true;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2201      	movs	r2, #1
 80021f6:	719a      	strb	r2, [r3, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	1dd8      	adds	r0, r3, #7
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	331c      	adds	r3, #28
 8002200:	2208      	movs	r2, #8
 8002202:	4619      	mov	r1, r3
 8002204:	f012 fdf1 	bl	8014dea <memcpy>
  }
 8002208:	bf00      	nop
 800220a:	3708      	adds	r7, #8
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}

08002210 <_ZN8PUTM_CAN6DeviceINS_9SWPS_mainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	6039      	str	r1, [r7, #0]
    new_data = true;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2201      	movs	r2, #1
 800221e:	719a      	strb	r2, [r3, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	3307      	adds	r3, #7
 8002224:	683a      	ldr	r2, [r7, #0]
 8002226:	321c      	adds	r2, #28
 8002228:	8812      	ldrh	r2, [r2, #0]
 800222a:	b292      	uxth	r2, r2
 800222c:	801a      	strh	r2, [r3, #0]
  }
 800222e:	bf00      	nop
 8002230:	370c      	adds	r7, #12
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr

0800223a <_ZN8PUTM_CAN6DeviceINS_20Steering_Wheel_eventEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 800223a:	b580      	push	{r7, lr}
 800223c:	b082      	sub	sp, #8
 800223e:	af00      	add	r7, sp, #0
 8002240:	6078      	str	r0, [r7, #4]
 8002242:	6039      	str	r1, [r7, #0]
    new_data = true;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2201      	movs	r2, #1
 8002248:	719a      	strb	r2, [r3, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	1dd8      	adds	r0, r3, #7
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	331c      	adds	r3, #28
 8002252:	2203      	movs	r2, #3
 8002254:	4619      	mov	r1, r3
 8002256:	f012 fdc8 	bl	8014dea <memcpy>
  }
 800225a:	bf00      	nop
 800225c:	3708      	adds	r7, #8
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}

08002262 <_ZN8PUTM_CAN6DeviceINS_19Steering_Wheel_mainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8002262:	b580      	push	{r7, lr}
 8002264:	b082      	sub	sp, #8
 8002266:	af00      	add	r7, sp, #0
 8002268:	6078      	str	r0, [r7, #4]
 800226a:	6039      	str	r1, [r7, #0]
    new_data = true;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2201      	movs	r2, #1
 8002270:	719a      	strb	r2, [r3, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	1dd8      	adds	r0, r3, #7
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	331c      	adds	r3, #28
 800227a:	2203      	movs	r2, #3
 800227c:	4619      	mov	r1, r3
 800227e:	f012 fdb4 	bl	8014dea <memcpy>
  }
 8002282:	bf00      	nop
 8002284:	3708      	adds	r7, #8
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}

0800228a <_ZN8PUTM_CAN6DeviceINS_9SF_safetyEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 800228a:	b580      	push	{r7, lr}
 800228c:	b082      	sub	sp, #8
 800228e:	af00      	add	r7, sp, #0
 8002290:	6078      	str	r0, [r7, #4]
 8002292:	6039      	str	r1, [r7, #0]
    new_data = true;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2201      	movs	r2, #1
 8002298:	719a      	strb	r2, [r3, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	1dd8      	adds	r0, r3, #7
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	331c      	adds	r3, #28
 80022a2:	2205      	movs	r2, #5
 80022a4:	4619      	mov	r1, r3
 80022a6:	f012 fda0 	bl	8014dea <memcpy>
  }
 80022aa:	bf00      	nop
 80022ac:	3708      	adds	r7, #8
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}

080022b2 <_ZN8PUTM_CAN6DeviceINS_18SF_PassiveElementsEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80022b2:	b580      	push	{r7, lr}
 80022b4:	b082      	sub	sp, #8
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	6078      	str	r0, [r7, #4]
 80022ba:	6039      	str	r1, [r7, #0]
    new_data = true;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2201      	movs	r2, #1
 80022c0:	719a      	strb	r2, [r3, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	1dd8      	adds	r0, r3, #7
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	331c      	adds	r3, #28
 80022ca:	2208      	movs	r2, #8
 80022cc:	4619      	mov	r1, r3
 80022ce:	f012 fd8c 	bl	8014dea <memcpy>
  }
 80022d2:	bf00      	nop
 80022d4:	3708      	adds	r7, #8
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}

080022da <_ZN8PUTM_CAN6DeviceINS_9SF_SupplyEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80022da:	b580      	push	{r7, lr}
 80022dc:	b082      	sub	sp, #8
 80022de:	af00      	add	r7, sp, #0
 80022e0:	6078      	str	r0, [r7, #4]
 80022e2:	6039      	str	r1, [r7, #0]
    new_data = true;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2201      	movs	r2, #1
 80022e8:	719a      	strb	r2, [r3, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	1dd8      	adds	r0, r3, #7
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	331c      	adds	r3, #28
 80022f2:	2208      	movs	r2, #8
 80022f4:	4619      	mov	r1, r3
 80022f6:	f012 fd78 	bl	8014dea <memcpy>
  }
 80022fa:	bf00      	nop
 80022fc:	3708      	adds	r7, #8
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}

08002302 <_ZN8PUTM_CAN6DeviceINS_23SF_LegendaryDVAndSupplyEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8002302:	b580      	push	{r7, lr}
 8002304:	b082      	sub	sp, #8
 8002306:	af00      	add	r7, sp, #0
 8002308:	6078      	str	r0, [r7, #4]
 800230a:	6039      	str	r1, [r7, #0]
    new_data = true;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2201      	movs	r2, #1
 8002310:	719a      	strb	r2, [r3, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	1dd8      	adds	r0, r3, #7
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	331c      	adds	r3, #28
 800231a:	2208      	movs	r2, #8
 800231c:	4619      	mov	r1, r3
 800231e:	f012 fd64 	bl	8014dea <memcpy>
  }
 8002322:	bf00      	nop
 8002324:	3708      	adds	r7, #8
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}

0800232a <_ZN8PUTM_CAN6DeviceINS_7SF_mainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 800232a:	b580      	push	{r7, lr}
 800232c:	b082      	sub	sp, #8
 800232e:	af00      	add	r7, sp, #0
 8002330:	6078      	str	r0, [r7, #4]
 8002332:	6039      	str	r1, [r7, #0]
    new_data = true;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2201      	movs	r2, #1
 8002338:	719a      	strb	r2, [r3, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	1dd8      	adds	r0, r3, #7
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	331c      	adds	r3, #28
 8002342:	2205      	movs	r2, #5
 8002344:	4619      	mov	r1, r3
 8002346:	f012 fd50 	bl	8014dea <memcpy>
  }
 800234a:	bf00      	nop
 800234c:	3708      	adds	r7, #8
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}

08002352 <_ZN8PUTM_CAN6DeviceINS_22Lap_timer_Skidpad_timeEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8002352:	b580      	push	{r7, lr}
 8002354:	b082      	sub	sp, #8
 8002356:	af00      	add	r7, sp, #0
 8002358:	6078      	str	r0, [r7, #4]
 800235a:	6039      	str	r1, [r7, #0]
    new_data = true;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2201      	movs	r2, #1
 8002360:	719a      	strb	r2, [r3, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	1dd8      	adds	r0, r3, #7
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	331c      	adds	r3, #28
 800236a:	2205      	movs	r2, #5
 800236c:	4619      	mov	r1, r3
 800236e:	f012 fd3c 	bl	8014dea <memcpy>
  }
 8002372:	bf00      	nop
 8002374:	3708      	adds	r7, #8
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}

0800237a <_ZN8PUTM_CAN6DeviceINS_18Lap_timer_Lap_timeEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 800237a:	b580      	push	{r7, lr}
 800237c:	b082      	sub	sp, #8
 800237e:	af00      	add	r7, sp, #0
 8002380:	6078      	str	r0, [r7, #4]
 8002382:	6039      	str	r1, [r7, #0]
    new_data = true;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2201      	movs	r2, #1
 8002388:	719a      	strb	r2, [r3, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	1dd8      	adds	r0, r3, #7
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	331c      	adds	r3, #28
 8002392:	2205      	movs	r2, #5
 8002394:	4619      	mov	r1, r3
 8002396:	f012 fd28 	bl	8014dea <memcpy>
  }
 800239a:	bf00      	nop
 800239c:	3708      	adds	r7, #8
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}

080023a2 <_ZN8PUTM_CAN6DeviceINS_18Lap_timer_Acc_timeEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80023a2:	b580      	push	{r7, lr}
 80023a4:	b082      	sub	sp, #8
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	6078      	str	r0, [r7, #4]
 80023aa:	6039      	str	r1, [r7, #0]
    new_data = true;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2201      	movs	r2, #1
 80023b0:	719a      	strb	r2, [r3, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	1dd8      	adds	r0, r3, #7
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	331c      	adds	r3, #28
 80023ba:	2205      	movs	r2, #5
 80023bc:	4619      	mov	r1, r3
 80023be:	f012 fd14 	bl	8014dea <memcpy>
  }
 80023c2:	bf00      	nop
 80023c4:	3708      	adds	r7, #8
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}

080023ca <_ZN8PUTM_CAN6DeviceINS_16Lap_timer_SectorEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80023ca:	b580      	push	{r7, lr}
 80023cc:	b082      	sub	sp, #8
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	6078      	str	r0, [r7, #4]
 80023d2:	6039      	str	r1, [r7, #0]
    new_data = true;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2201      	movs	r2, #1
 80023d8:	719a      	strb	r2, [r3, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	1dd8      	adds	r0, r3, #7
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	331c      	adds	r3, #28
 80023e2:	2206      	movs	r2, #6
 80023e4:	4619      	mov	r1, r3
 80023e6:	f012 fd00 	bl	8014dea <memcpy>
  }
 80023ea:	bf00      	nop
 80023ec:	3708      	adds	r7, #8
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}

080023f2 <_ZN8PUTM_CAN6DeviceINS_14Lap_timer_MainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80023f2:	b480      	push	{r7}
 80023f4:	b083      	sub	sp, #12
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	6078      	str	r0, [r7, #4]
 80023fa:	6039      	str	r1, [r7, #0]
    new_data = true;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2201      	movs	r2, #1
 8002400:	719a      	strb	r2, [r3, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	3307      	adds	r3, #7
 8002406:	683a      	ldr	r2, [r7, #0]
 8002408:	321c      	adds	r2, #28
 800240a:	7812      	ldrb	r2, [r2, #0]
 800240c:	701a      	strb	r2, [r3, #0]
  }
 800240e:	bf00      	nop
 8002410:	370c      	adds	r7, #12
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr

0800241a <_ZN8PUTM_CAN6DeviceINS_13DV_TC_controlEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 800241a:	b580      	push	{r7, lr}
 800241c:	b082      	sub	sp, #8
 800241e:	af00      	add	r7, sp, #0
 8002420:	6078      	str	r0, [r7, #4]
 8002422:	6039      	str	r1, [r7, #0]
    new_data = true;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2201      	movs	r2, #1
 8002428:	719a      	strb	r2, [r3, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	1dd8      	adds	r0, r3, #7
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	331c      	adds	r3, #28
 8002432:	2205      	movs	r2, #5
 8002434:	4619      	mov	r1, r3
 8002436:	f012 fcd8 	bl	8014dea <memcpy>
  }
 800243a:	bf00      	nop
 800243c:	3708      	adds	r7, #8
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}

08002442 <_ZN8PUTM_CAN6DeviceINS_6DV_AssEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8002442:	b480      	push	{r7}
 8002444:	b083      	sub	sp, #12
 8002446:	af00      	add	r7, sp, #0
 8002448:	6078      	str	r0, [r7, #4]
 800244a:	6039      	str	r1, [r7, #0]
    new_data = true;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2201      	movs	r2, #1
 8002450:	719a      	strb	r2, [r3, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	3307      	adds	r3, #7
 8002456:	683a      	ldr	r2, [r7, #0]
 8002458:	321c      	adds	r2, #28
 800245a:	7812      	ldrb	r2, [r2, #0]
 800245c:	701a      	strb	r2, [r3, #0]
  }
 800245e:	bf00      	nop
 8002460:	370c      	adds	r7, #12
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr

0800246a <_ZN8PUTM_CAN6DeviceINS_25Dash_steering_wheel_angleEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 800246a:	b480      	push	{r7}
 800246c:	b083      	sub	sp, #12
 800246e:	af00      	add	r7, sp, #0
 8002470:	6078      	str	r0, [r7, #4]
 8002472:	6039      	str	r1, [r7, #0]
    new_data = true;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2201      	movs	r2, #1
 8002478:	719a      	strb	r2, [r3, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	3307      	adds	r3, #7
 800247e:	683a      	ldr	r2, [r7, #0]
 8002480:	321c      	adds	r2, #28
 8002482:	8812      	ldrh	r2, [r2, #0]
 8002484:	b292      	uxth	r2, r2
 8002486:	801a      	strh	r2, [r3, #0]
  }
 8002488:	bf00      	nop
 800248a:	370c      	adds	r7, #12
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr

08002494 <_ZN8PUTM_CAN6DeviceINS_17Dash_lap_finishedEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	6039      	str	r1, [r7, #0]
    new_data = true;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2201      	movs	r2, #1
 80024a2:	719a      	strb	r2, [r3, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	3307      	adds	r3, #7
 80024a8:	683a      	ldr	r2, [r7, #0]
 80024aa:	321c      	adds	r2, #28
 80024ac:	6812      	ldr	r2, [r2, #0]
 80024ae:	601a      	str	r2, [r3, #0]
  }
 80024b0:	bf00      	nop
 80024b2:	370c      	adds	r7, #12
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr

080024bc <_ZN8PUTM_CAN6DeviceINS_27Dash_steering_wheel_requestEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	6039      	str	r1, [r7, #0]
    new_data = true;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2201      	movs	r2, #1
 80024ca:	719a      	strb	r2, [r3, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	3307      	adds	r3, #7
 80024d0:	683a      	ldr	r2, [r7, #0]
 80024d2:	321c      	adds	r2, #28
 80024d4:	7812      	ldrb	r2, [r2, #0]
 80024d6:	701a      	strb	r2, [r3, #0]
  }
 80024d8:	bf00      	nop
 80024da:	370c      	adds	r7, #12
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr

080024e4 <_ZN8PUTM_CAN6DeviceINS_26Dash_Smart_Fuses_FAN_speedEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80024e4:	b480      	push	{r7}
 80024e6:	b083      	sub	sp, #12
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
 80024ec:	6039      	str	r1, [r7, #0]
    new_data = true;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2201      	movs	r2, #1
 80024f2:	719a      	strb	r2, [r3, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	3307      	adds	r3, #7
 80024f8:	683a      	ldr	r2, [r7, #0]
 80024fa:	321c      	adds	r2, #28
 80024fc:	8812      	ldrh	r2, [r2, #0]
 80024fe:	b292      	uxth	r2, r2
 8002500:	801a      	strh	r2, [r3, #0]
  }
 8002502:	bf00      	nop
 8002504:	370c      	adds	r7, #12
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr

0800250e <_ZN8PUTM_CAN6DeviceINS_8Dash_TCSEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 800250e:	b580      	push	{r7, lr}
 8002510:	b082      	sub	sp, #8
 8002512:	af00      	add	r7, sp, #0
 8002514:	6078      	str	r0, [r7, #4]
 8002516:	6039      	str	r1, [r7, #0]
    new_data = true;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2201      	movs	r2, #1
 800251c:	719a      	strb	r2, [r3, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	1dd8      	adds	r0, r3, #7
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	331c      	adds	r3, #28
 8002526:	2208      	movs	r2, #8
 8002528:	4619      	mov	r1, r3
 800252a:	f012 fc5e 	bl	8014dea <memcpy>
  }
 800252e:	bf00      	nop
 8002530:	3708      	adds	r7, #8
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}

08002536 <_ZN8PUTM_CAN6DeviceINS_9Dash_MainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8002536:	b480      	push	{r7}
 8002538:	b083      	sub	sp, #12
 800253a:	af00      	add	r7, sp, #0
 800253c:	6078      	str	r0, [r7, #4]
 800253e:	6039      	str	r1, [r7, #0]
    new_data = true;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2201      	movs	r2, #1
 8002544:	719a      	strb	r2, [r3, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	3307      	adds	r3, #7
 800254a:	683a      	ldr	r2, [r7, #0]
 800254c:	321c      	adds	r2, #28
 800254e:	7812      	ldrb	r2, [r2, #0]
 8002550:	701a      	strb	r2, [r3, #0]
  }
 8002552:	bf00      	nop
 8002554:	370c      	adds	r7, #12
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr

0800255e <_ZN8PUTM_CAN6DeviceINS_18BMS_LV_temperatureEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 800255e:	b580      	push	{r7, lr}
 8002560:	b082      	sub	sp, #8
 8002562:	af00      	add	r7, sp, #0
 8002564:	6078      	str	r0, [r7, #4]
 8002566:	6039      	str	r1, [r7, #0]
    new_data = true;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2201      	movs	r2, #1
 800256c:	719a      	strb	r2, [r3, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	1dd8      	adds	r0, r3, #7
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	331c      	adds	r3, #28
 8002576:	2208      	movs	r2, #8
 8002578:	4619      	mov	r1, r3
 800257a:	f012 fc36 	bl	8014dea <memcpy>
  }
 800257e:	bf00      	nop
 8002580:	3708      	adds	r7, #8
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}

08002586 <_ZN8PUTM_CAN6DeviceINS_11BMS_LV_mainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8002586:	b580      	push	{r7, lr}
 8002588:	b082      	sub	sp, #8
 800258a:	af00      	add	r7, sp, #0
 800258c:	6078      	str	r0, [r7, #4]
 800258e:	6039      	str	r1, [r7, #0]
    new_data = true;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2201      	movs	r2, #1
 8002594:	719a      	strb	r2, [r3, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	1dd8      	adds	r0, r3, #7
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	331c      	adds	r3, #28
 800259e:	2206      	movs	r2, #6
 80025a0:	4619      	mov	r1, r3
 80025a2:	f012 fc22 	bl	8014dea <memcpy>
  }
 80025a6:	bf00      	nop
 80025a8:	3708      	adds	r7, #8
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}

080025ae <_ZN8PUTM_CAN6DeviceINS_20BMS_HV_cell_voltagesEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80025ae:	b580      	push	{r7, lr}
 80025b0:	b082      	sub	sp, #8
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	6078      	str	r0, [r7, #4]
 80025b6:	6039      	str	r1, [r7, #0]
    new_data = true;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2201      	movs	r2, #1
 80025bc:	719a      	strb	r2, [r3, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	1dd8      	adds	r0, r3, #7
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	331c      	adds	r3, #28
 80025c6:	2208      	movs	r2, #8
 80025c8:	4619      	mov	r1, r3
 80025ca:	f012 fc0e 	bl	8014dea <memcpy>
  }
 80025ce:	bf00      	nop
 80025d0:	3708      	adds	r7, #8
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}

080025d6 <_ZN8PUTM_CAN6DeviceINS_11BMS_HV_mainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80025d6:	b580      	push	{r7, lr}
 80025d8:	b082      	sub	sp, #8
 80025da:	af00      	add	r7, sp, #0
 80025dc:	6078      	str	r0, [r7, #4]
 80025de:	6039      	str	r1, [r7, #0]
    new_data = true;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2201      	movs	r2, #1
 80025e4:	719a      	strb	r2, [r3, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	1dd8      	adds	r0, r3, #7
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	331c      	adds	r3, #28
 80025ee:	2208      	movs	r2, #8
 80025f0:	4619      	mov	r1, r3
 80025f2:	f012 fbfa 	bl	8014dea <memcpy>
  }
 80025f6:	bf00      	nop
 80025f8:	3708      	adds	r7, #8
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}

080025fe <_ZN8PUTM_CAN6DeviceINS_12AQ_ts_buttonEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80025fe:	b480      	push	{r7}
 8002600:	b083      	sub	sp, #12
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
 8002606:	6039      	str	r1, [r7, #0]
    new_data = true;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2201      	movs	r2, #1
 800260c:	719a      	strb	r2, [r3, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	3307      	adds	r3, #7
 8002612:	683a      	ldr	r2, [r7, #0]
 8002614:	321c      	adds	r2, #28
 8002616:	7812      	ldrb	r2, [r2, #0]
 8002618:	701a      	strb	r2, [r3, #0]
  }
 800261a:	bf00      	nop
 800261c:	370c      	adds	r7, #12
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr

08002626 <_ZN8PUTM_CAN6DeviceINS_12AQ_gyroscopeEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8002626:	b580      	push	{r7, lr}
 8002628:	b082      	sub	sp, #8
 800262a:	af00      	add	r7, sp, #0
 800262c:	6078      	str	r0, [r7, #4]
 800262e:	6039      	str	r1, [r7, #0]
    new_data = true;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2201      	movs	r2, #1
 8002634:	719a      	strb	r2, [r3, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	1dd8      	adds	r0, r3, #7
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	331c      	adds	r3, #28
 800263e:	2206      	movs	r2, #6
 8002640:	4619      	mov	r1, r3
 8002642:	f012 fbd2 	bl	8014dea <memcpy>
  }
 8002646:	bf00      	nop
 8002648:	3708      	adds	r7, #8
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}

0800264e <_ZN8PUTM_CAN6DeviceINS_15AQ_accelerationEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 800264e:	b580      	push	{r7, lr}
 8002650:	b082      	sub	sp, #8
 8002652:	af00      	add	r7, sp, #0
 8002654:	6078      	str	r0, [r7, #4]
 8002656:	6039      	str	r1, [r7, #0]
    new_data = true;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2201      	movs	r2, #1
 800265c:	719a      	strb	r2, [r3, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	1dd8      	adds	r0, r3, #7
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	331c      	adds	r3, #28
 8002666:	2206      	movs	r2, #6
 8002668:	4619      	mov	r1, r3
 800266a:	f012 fbbe 	bl	8014dea <memcpy>
  }
 800266e:	bf00      	nop
 8002670:	3708      	adds	r7, #8
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}

08002676 <_ZN8PUTM_CAN6DeviceINS_7AQ_mainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8002676:	b580      	push	{r7, lr}
 8002678:	b082      	sub	sp, #8
 800267a:	af00      	add	r7, sp, #0
 800267c:	6078      	str	r0, [r7, #4]
 800267e:	6039      	str	r1, [r7, #0]
    new_data = true;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2201      	movs	r2, #1
 8002684:	719a      	strb	r2, [r3, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	1dd8      	adds	r0, r3, #7
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	331c      	adds	r3, #28
 800268e:	2208      	movs	r2, #8
 8002690:	4619      	mov	r1, r3
 8002692:	f012 fbaa 	bl	8014dea <memcpy>
  }
 8002696:	bf00      	nop
 8002698:	3708      	adds	r7, #8
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}

0800269e <_ZN8PUTM_CAN6DeviceINS_9Apps_mainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 800269e:	b580      	push	{r7, lr}
 80026a0:	b082      	sub	sp, #8
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	6078      	str	r0, [r7, #4]
 80026a6:	6039      	str	r1, [r7, #0]
    new_data = true;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2201      	movs	r2, #1
 80026ac:	719a      	strb	r2, [r3, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	1dd8      	adds	r0, r3, #7
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	331c      	adds	r3, #28
 80026b6:	2205      	movs	r2, #5
 80026b8:	4619      	mov	r1, r3
 80026ba:	f012 fb96 	bl	8014dea <memcpy>
  }
 80026be:	bf00      	nop
 80026c0:	3708      	adds	r7, #8
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}

080026c6 <_GLOBAL__sub_I__ZN8PUTM_CAN3canE>:
 80026c6:	b580      	push	{r7, lr}
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80026ce:	2001      	movs	r0, #1
 80026d0:	f7ff fbe0 	bl	8001e94 <_Z41__static_initialization_and_destruction_0ii>
 80026d4:	bd80      	pop	{r7, pc}

080026d6 <_ZN22Battery_characteristicC1Ev>:
    Vttc2
};

float horner(const float *arry,unsigned int n, const float *x);

struct Battery_characteristic{
 80026d6:	b480      	push	{r7}
 80026d8:	b083      	sub	sp, #12
 80026da:	af00      	add	r7, sp, #0
 80026dc:	6078      	str	r0, [r7, #4]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2201      	movs	r2, #1
 80026e2:	601a      	str	r2, [r3, #0]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2201      	movs	r2, #1
 80026e8:	605a      	str	r2, [r3, #4]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4618      	mov	r0, r3
 80026ee:	370c      	adds	r7, #12
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr

080026f8 <_ZN7SoC_EKFC1Ev>:
    float _Q_matrix[3];
    float _State_vector[3];
    

public:
    SoC_EKF() = default;
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	4618      	mov	r0, r3
 8002704:	f7ff ffe7 	bl	80026d6 <_ZN22Battery_characteristicC1Ev>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	4618      	mov	r0, r3
 800270c:	3708      	adds	r7, #8
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}

08002712 <_ZN15State_of_ChargeC1Ev>:
	float value_max;
	float value_min;

};

struct State_of_Charge{
 8002712:	b580      	push	{r7, lr}
 8002714:	b082      	sub	sp, #8
 8002716:	af00      	add	r7, sp, #0
 8002718:	6078      	str	r0, [r7, #4]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4618      	mov	r0, r3
 800271e:	f7ff ffeb 	bl	80026f8 <_ZN7SoC_EKFC1Ev>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4618      	mov	r0, r3
 8002726:	3708      	adds	r7, #8
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}

0800272c <_ZN4DataC1Ev>:
	bool discharge_activation;
	bool balance_on;
	uint32_t discharge_tick_end;
};

struct Data{
 800272c:	b580      	push	{r7, lr}
 800272e:	b082      	sub	sp, #8
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 800273a:	4618      	mov	r0, r3
 800273c:	f7ff ffe9 	bl	8002712 <_ZN15State_of_ChargeC1Ev>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	4618      	mov	r0, r3
 8002744:	3708      	adds	r7, #8
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
	...

0800274c <_Z41__static_initialization_and_destruction_0ii>:
 *  Created on: May 22, 2022
 *      Author: Maks
 */
#include <global_variables.hpp>

Data data;
 800274c:	b580      	push	{r7, lr}
 800274e:	b082      	sub	sp, #8
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	6039      	str	r1, [r7, #0]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2b01      	cmp	r3, #1
 800275a:	d107      	bne.n	800276c <_Z41__static_initialization_and_destruction_0ii+0x20>
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002762:	4293      	cmp	r3, r2
 8002764:	d102      	bne.n	800276c <_Z41__static_initialization_and_destruction_0ii+0x20>
 8002766:	4803      	ldr	r0, [pc, #12]	@ (8002774 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8002768:	f7ff ffe0 	bl	800272c <_ZN4DataC1Ev>
 800276c:	bf00      	nop
 800276e:	3708      	adds	r7, #8
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}
 8002774:	20000aa4 	.word	0x20000aa4

08002778 <_GLOBAL__sub_I_data>:
 8002778:	b580      	push	{r7, lr}
 800277a:	af00      	add	r7, sp, #0
 800277c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8002780:	2001      	movs	r0, #1
 8002782:	f7ff ffe3 	bl	800274c <_Z41__static_initialization_and_destruction_0ii>
 8002786:	bd80      	pop	{r7, pc}

08002788 <_Z16init_PEC15_Tablev>:
uint16_t pec15Table[256];
uint16_t CRC15_POLY = 0x4599;
uint8_t ltcConfig[6] = {0xFC, (uint8_t)(1874 & 0xff), (uint8_t)((1874>>4)|(2625<<4)), (uint8_t)(2625>>4), 0, 0};

void init_PEC15_Table()
{
 8002788:	b480      	push	{r7}
 800278a:	b085      	sub	sp, #20
 800278c:	af00      	add	r7, sp, #0
	uint16_t remainder;
	for (int i = 0; i < 256; i++)
 800278e:	2300      	movs	r3, #0
 8002790:	60bb      	str	r3, [r7, #8]
 8002792:	e025      	b.n	80027e0 <_Z16init_PEC15_Tablev+0x58>
	{
		remainder = i << 7;
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	b29b      	uxth	r3, r3
 8002798:	01db      	lsls	r3, r3, #7
 800279a:	81fb      	strh	r3, [r7, #14]
		for (int bit = 8; bit > 0; --bit)
 800279c:	2308      	movs	r3, #8
 800279e:	607b      	str	r3, [r7, #4]
 80027a0:	e013      	b.n	80027ca <_Z16init_PEC15_Tablev+0x42>
		{
			if (remainder & 0x4000)
 80027a2:	89fb      	ldrh	r3, [r7, #14]
 80027a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d008      	beq.n	80027be <_Z16init_PEC15_Tablev+0x36>
			{
				remainder = ((remainder << 1));
 80027ac:	89fb      	ldrh	r3, [r7, #14]
 80027ae:	005b      	lsls	r3, r3, #1
 80027b0:	81fb      	strh	r3, [r7, #14]
				remainder = (remainder ^ CRC15_POLY);
 80027b2:	4b10      	ldr	r3, [pc, #64]	@ (80027f4 <_Z16init_PEC15_Tablev+0x6c>)
 80027b4:	881a      	ldrh	r2, [r3, #0]
 80027b6:	89fb      	ldrh	r3, [r7, #14]
 80027b8:	4053      	eors	r3, r2
 80027ba:	81fb      	strh	r3, [r7, #14]
 80027bc:	e002      	b.n	80027c4 <_Z16init_PEC15_Tablev+0x3c>
			}
			else
			{
				remainder = ((remainder << 1));
 80027be:	89fb      	ldrh	r3, [r7, #14]
 80027c0:	005b      	lsls	r3, r3, #1
 80027c2:	81fb      	strh	r3, [r7, #14]
		for (int bit = 8; bit > 0; --bit)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	3b01      	subs	r3, #1
 80027c8:	607b      	str	r3, [r7, #4]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	dce8      	bgt.n	80027a2 <_Z16init_PEC15_Tablev+0x1a>
			}
		}
		pec15Table[i] = remainder&0xFFFF;
 80027d0:	4909      	ldr	r1, [pc, #36]	@ (80027f8 <_Z16init_PEC15_Tablev+0x70>)
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	89fa      	ldrh	r2, [r7, #14]
 80027d6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for (int i = 0; i < 256; i++)
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	3301      	adds	r3, #1
 80027de:	60bb      	str	r3, [r7, #8]
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	2bff      	cmp	r3, #255	@ 0xff
 80027e4:	ddd6      	ble.n	8002794 <_Z16init_PEC15_Tablev+0xc>
	}
}
 80027e6:	bf00      	nop
 80027e8:	bf00      	nop
 80027ea:	3714      	adds	r7, #20
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr
 80027f4:	20000284 	.word	0x20000284
 80027f8:	20000d4c 	.word	0x20000d4c

080027fc <_Z5pec15Pci>:

uint16_t pec15(char *data , int len)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b087      	sub	sp, #28
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
 8002804:	6039      	str	r1, [r7, #0]
	uint16_t remainder,address;
	remainder = 16;//PEC seed
 8002806:	2310      	movs	r3, #16
 8002808:	82fb      	strh	r3, [r7, #22]
	for (int i = 0; i < len; i++)
 800280a:	2300      	movs	r3, #0
 800280c:	613b      	str	r3, [r7, #16]
 800280e:	e018      	b.n	8002842 <_Z5pec15Pci+0x46>
	{
		address = ((remainder >> 7) ^ data[i]) & 0xff;//calculate PEC table address
 8002810:	8afb      	ldrh	r3, [r7, #22]
 8002812:	09db      	lsrs	r3, r3, #7
 8002814:	b29b      	uxth	r3, r3
 8002816:	693a      	ldr	r2, [r7, #16]
 8002818:	6879      	ldr	r1, [r7, #4]
 800281a:	440a      	add	r2, r1
 800281c:	7812      	ldrb	r2, [r2, #0]
 800281e:	4053      	eors	r3, r2
 8002820:	b29b      	uxth	r3, r3
 8002822:	b2db      	uxtb	r3, r3
 8002824:	81fb      	strh	r3, [r7, #14]
		remainder = (remainder << 8 ) ^ pec15Table[address];
 8002826:	8afb      	ldrh	r3, [r7, #22]
 8002828:	021b      	lsls	r3, r3, #8
 800282a:	b21a      	sxth	r2, r3
 800282c:	89fb      	ldrh	r3, [r7, #14]
 800282e:	490b      	ldr	r1, [pc, #44]	@ (800285c <_Z5pec15Pci+0x60>)
 8002830:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002834:	b21b      	sxth	r3, r3
 8002836:	4053      	eors	r3, r2
 8002838:	b21b      	sxth	r3, r3
 800283a:	82fb      	strh	r3, [r7, #22]
	for (int i = 0; i < len; i++)
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	3301      	adds	r3, #1
 8002840:	613b      	str	r3, [r7, #16]
 8002842:	693a      	ldr	r2, [r7, #16]
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	429a      	cmp	r2, r3
 8002848:	dbe2      	blt.n	8002810 <_Z5pec15Pci+0x14>
	}
	return (remainder*2);//The CRC15 has a 0 in the LSB so the final value must be multiplied by 2
 800284a:	8afb      	ldrh	r3, [r7, #22]
 800284c:	005b      	lsls	r3, r3, #1
 800284e:	b29b      	uxth	r3, r3
}
 8002850:	4618      	mov	r0, r3
 8002852:	371c      	adds	r7, #28
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr
 800285c:	20000d4c 	.word	0x20000d4c

08002860 <_Z11LTC_wake_upv>:
 * Brief:	Send wakeup for LTC, BLOCKING MODE
 * Param:	None
 * Retval:	None
 */
void LTC_wake_up()
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0
	uint8_t tab[2] = {0xFF};
 8002866:	23ff      	movs	r3, #255	@ 0xff
 8002868:	80bb      	strh	r3, [r7, #4]

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 800286a:	2200      	movs	r2, #0
 800286c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002870:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002874:	f005 febc 	bl	80085f0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, tab, 2, 1);
 8002878:	1d39      	adds	r1, r7, #4
 800287a:	2301      	movs	r3, #1
 800287c:	2202      	movs	r2, #2
 800287e:	4807      	ldr	r0, [pc, #28]	@ (800289c <_Z11LTC_wake_upv+0x3c>)
 8002880:	f009 fa4b 	bl	800bd1a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8002884:	2201      	movs	r2, #1
 8002886:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800288a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800288e:	f005 feaf 	bl	80085f0 <HAL_GPIO_WritePin>
}
 8002892:	bf00      	nop
 8002894:	3708      	adds	r7, #8
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	20001138 	.word	0x20001138

080028a0 <_Z18LTC_start_cell_adcv>:
 * Brief:	Send adc config for ltc and start conversion, BLOCKING MODE
 * Param:	None
 * Retval:	None
 */
void LTC_start_cell_adc()
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b084      	sub	sp, #16
 80028a4:	af00      	add	r7, sp, #0
	uint8_t tab[12];
	uint16_t pec;

	uint16_t cmd = (1<<15) | 0x01;
 80028a6:	f248 0301 	movw	r3, #32769	@ 0x8001
 80028aa:	81fb      	strh	r3, [r7, #14]
	// configuration
	tab[0] = (cmd>>8);
 80028ac:	89fb      	ldrh	r3, [r7, #14]
 80028ae:	0a1b      	lsrs	r3, r3, #8
 80028b0:	b29b      	uxth	r3, r3
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	703b      	strb	r3, [r7, #0]
	tab[1] = cmd;
 80028b6:	89fb      	ldrh	r3, [r7, #14]
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	707b      	strb	r3, [r7, #1]
	pec = pec15((char*)tab, 2);
 80028bc:	463b      	mov	r3, r7
 80028be:	2102      	movs	r1, #2
 80028c0:	4618      	mov	r0, r3
 80028c2:	f7ff ff9b 	bl	80027fc <_Z5pec15Pci>
 80028c6:	4603      	mov	r3, r0
 80028c8:	81bb      	strh	r3, [r7, #12]
	tab[2] = pec >> 8;
 80028ca:	89bb      	ldrh	r3, [r7, #12]
 80028cc:	0a1b      	lsrs	r3, r3, #8
 80028ce:	b29b      	uxth	r3, r3
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	70bb      	strb	r3, [r7, #2]
	tab[3] = pec;
 80028d4:	89bb      	ldrh	r3, [r7, #12]
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	70fb      	strb	r3, [r7, #3]

	tab[4] = ltcConfig[0];
 80028da:	4b38      	ldr	r3, [pc, #224]	@ (80029bc <_Z18LTC_start_cell_adcv+0x11c>)
 80028dc:	781b      	ldrb	r3, [r3, #0]
 80028de:	713b      	strb	r3, [r7, #4]
	tab[5] = ltcConfig[1];
 80028e0:	4b36      	ldr	r3, [pc, #216]	@ (80029bc <_Z18LTC_start_cell_adcv+0x11c>)
 80028e2:	785b      	ldrb	r3, [r3, #1]
 80028e4:	717b      	strb	r3, [r7, #5]
	tab[6] = ltcConfig[2];
 80028e6:	4b35      	ldr	r3, [pc, #212]	@ (80029bc <_Z18LTC_start_cell_adcv+0x11c>)
 80028e8:	789b      	ldrb	r3, [r3, #2]
 80028ea:	71bb      	strb	r3, [r7, #6]
	tab[7] = ltcConfig[3];
 80028ec:	4b33      	ldr	r3, [pc, #204]	@ (80029bc <_Z18LTC_start_cell_adcv+0x11c>)
 80028ee:	78db      	ldrb	r3, [r3, #3]
 80028f0:	71fb      	strb	r3, [r7, #7]
	tab[8] = ltcConfig[4];
 80028f2:	4b32      	ldr	r3, [pc, #200]	@ (80029bc <_Z18LTC_start_cell_adcv+0x11c>)
 80028f4:	791b      	ldrb	r3, [r3, #4]
 80028f6:	723b      	strb	r3, [r7, #8]
	tab[9] = ltcConfig[5];
 80028f8:	4b30      	ldr	r3, [pc, #192]	@ (80029bc <_Z18LTC_start_cell_adcv+0x11c>)
 80028fa:	795b      	ldrb	r3, [r3, #5]
 80028fc:	727b      	strb	r3, [r7, #9]
	pec = pec15((char*)&tab[4], 6);
 80028fe:	463b      	mov	r3, r7
 8002900:	3304      	adds	r3, #4
 8002902:	2106      	movs	r1, #6
 8002904:	4618      	mov	r0, r3
 8002906:	f7ff ff79 	bl	80027fc <_Z5pec15Pci>
 800290a:	4603      	mov	r3, r0
 800290c:	81bb      	strh	r3, [r7, #12]
	tab[10] = pec >> 8;
 800290e:	89bb      	ldrh	r3, [r7, #12]
 8002910:	0a1b      	lsrs	r3, r3, #8
 8002912:	b29b      	uxth	r3, r3
 8002914:	b2db      	uxtb	r3, r3
 8002916:	72bb      	strb	r3, [r7, #10]
	tab[11] = pec;
 8002918:	89bb      	ldrh	r3, [r7, #12]
 800291a:	b2db      	uxtb	r3, r3
 800291c:	72fb      	strb	r3, [r7, #11]

	LTC_wake_up();
 800291e:	f7ff ff9f 	bl	8002860 <_Z11LTC_wake_upv>

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8002922:	2200      	movs	r2, #0
 8002924:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002928:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800292c:	f005 fe60 	bl	80085f0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, tab, 12, 20);
 8002930:	4639      	mov	r1, r7
 8002932:	2314      	movs	r3, #20
 8002934:	220c      	movs	r2, #12
 8002936:	4822      	ldr	r0, [pc, #136]	@ (80029c0 <_Z18LTC_start_cell_adcv+0x120>)
 8002938:	f009 f9ef 	bl	800bd1a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 800293c:	2201      	movs	r2, #1
 800293e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002942:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002946:	f005 fe53 	bl	80085f0 <HAL_GPIO_WritePin>


	// adc conversion

	memset(tab, 0, 12);
 800294a:	463b      	mov	r3, r7
 800294c:	220c      	movs	r2, #12
 800294e:	2100      	movs	r1, #0
 8002950:	4618      	mov	r0, r3
 8002952:	f012 f974 	bl	8014c3e <memset>

	//cmd = 0b1001100000 | (0b00 << 7); // discharge not permitted
	cmd = 0b1001110000 | (0b00 << 7); // discharge permitted
 8002956:	f44f 731c 	mov.w	r3, #624	@ 0x270
 800295a:	81fb      	strh	r3, [r7, #14]
	tab[0] = cmd>>8;
 800295c:	89fb      	ldrh	r3, [r7, #14]
 800295e:	0a1b      	lsrs	r3, r3, #8
 8002960:	b29b      	uxth	r3, r3
 8002962:	b2db      	uxtb	r3, r3
 8002964:	703b      	strb	r3, [r7, #0]
	tab[1] = cmd;
 8002966:	89fb      	ldrh	r3, [r7, #14]
 8002968:	b2db      	uxtb	r3, r3
 800296a:	707b      	strb	r3, [r7, #1]
	pec = pec15((char*)tab, 2);
 800296c:	463b      	mov	r3, r7
 800296e:	2102      	movs	r1, #2
 8002970:	4618      	mov	r0, r3
 8002972:	f7ff ff43 	bl	80027fc <_Z5pec15Pci>
 8002976:	4603      	mov	r3, r0
 8002978:	81bb      	strh	r3, [r7, #12]
	tab[2] = pec >> 8;
 800297a:	89bb      	ldrh	r3, [r7, #12]
 800297c:	0a1b      	lsrs	r3, r3, #8
 800297e:	b29b      	uxth	r3, r3
 8002980:	b2db      	uxtb	r3, r3
 8002982:	70bb      	strb	r3, [r7, #2]
	tab[3] = pec;
 8002984:	89bb      	ldrh	r3, [r7, #12]
 8002986:	b2db      	uxtb	r3, r3
 8002988:	70fb      	strb	r3, [r7, #3]

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 800298a:	2200      	movs	r2, #0
 800298c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002990:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002994:	f005 fe2c 	bl	80085f0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, tab, 4, 20);
 8002998:	4639      	mov	r1, r7
 800299a:	2314      	movs	r3, #20
 800299c:	2204      	movs	r2, #4
 800299e:	4808      	ldr	r0, [pc, #32]	@ (80029c0 <_Z18LTC_start_cell_adcv+0x120>)
 80029a0:	f009 f9bb 	bl	800bd1a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 80029a4:	2201      	movs	r2, #1
 80029a6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80029aa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80029ae:	f005 fe1f 	bl	80085f0 <HAL_GPIO_WritePin>
}
 80029b2:	bf00      	nop
 80029b4:	3710      	adds	r7, #16
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	20000288 	.word	0x20000288
 80029c0:	20001138 	.word	0x20001138

080029c4 <_Z18LTC_get_values_adcPt>:
 * Brief:	Receveing adc data from ltc, BLOCKING MODE
 * Param:	None
 * Retval:	None
 */
void LTC_get_values_adc(uint16_t *cell_values)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b0b8      	sub	sp, #224	@ 0xe0
 80029c8:	af02      	add	r7, sp, #8
 80029ca:	6078      	str	r0, [r7, #4]
	uint8_t tab[100], rx_tab[100];
	uint16_t pec;

	// read cell voltage group A
	uint16_t cmd = (1<<15) | 0b100;
 80029cc:	f248 0304 	movw	r3, #32772	@ 0x8004
 80029d0:	f8a7 30d6 	strh.w	r3, [r7, #214]	@ 0xd6
	memset(tab, 0, 12);
 80029d4:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80029d8:	220c      	movs	r2, #12
 80029da:	2100      	movs	r1, #0
 80029dc:	4618      	mov	r0, r3
 80029de:	f012 f92e 	bl	8014c3e <memset>
	tab[0] = (cmd>>8);
 80029e2:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	@ 0xd6
 80029e6:	0a1b      	lsrs	r3, r3, #8
 80029e8:	b29b      	uxth	r3, r3
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70
	tab[1] = cmd;
 80029f0:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	@ 0xd6
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	f887 3071 	strb.w	r3, [r7, #113]	@ 0x71
	pec = pec15((char*)tab, 2);
 80029fa:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80029fe:	2102      	movs	r1, #2
 8002a00:	4618      	mov	r0, r3
 8002a02:	f7ff fefb 	bl	80027fc <_Z5pec15Pci>
 8002a06:	4603      	mov	r3, r0
 8002a08:	f8a7 30d4 	strh.w	r3, [r7, #212]	@ 0xd4
	tab[2] = pec >> 8;
 8002a0c:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	@ 0xd4
 8002a10:	0a1b      	lsrs	r3, r3, #8
 8002a12:	b29b      	uxth	r3, r3
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	f887 3072 	strb.w	r3, [r7, #114]	@ 0x72
	tab[3] = pec;
 8002a1a:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	@ 0xd4
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73

	LTC_wake_up();
 8002a24:	f7ff ff1c 	bl	8002860 <_Z11LTC_wake_upv>

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002a2e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a32:	f005 fddd 	bl	80085f0 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, tab, rx_tab, 12, 20);
 8002a36:	f107 020c 	add.w	r2, r7, #12
 8002a3a:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 8002a3e:	2314      	movs	r3, #20
 8002a40:	9300      	str	r3, [sp, #0]
 8002a42:	230c      	movs	r3, #12
 8002a44:	4849      	ldr	r0, [pc, #292]	@ (8002b6c <_Z18LTC_get_values_adcPt+0x1a8>)
 8002a46:	f009 fadd 	bl	800c004 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002a50:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a54:	f005 fdcc 	bl	80085f0 <HAL_GPIO_WritePin>


	cell_values[0] = (uint16_t)rx_tab[4] | (((uint16_t)rx_tab[5])<<8);
 8002a58:	7c3b      	ldrb	r3, [r7, #16]
 8002a5a:	b21a      	sxth	r2, r3
 8002a5c:	7c7b      	ldrb	r3, [r7, #17]
 8002a5e:	021b      	lsls	r3, r3, #8
 8002a60:	b21b      	sxth	r3, r3
 8002a62:	4313      	orrs	r3, r2
 8002a64:	b21b      	sxth	r3, r3
 8002a66:	b29a      	uxth	r2, r3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	801a      	strh	r2, [r3, #0]
	cell_values[1] = (uint16_t)rx_tab[6] | (((uint16_t)rx_tab[7])<<8);
 8002a6c:	7cbb      	ldrb	r3, [r7, #18]
 8002a6e:	b21a      	sxth	r2, r3
 8002a70:	7cfb      	ldrb	r3, [r7, #19]
 8002a72:	021b      	lsls	r3, r3, #8
 8002a74:	b21b      	sxth	r3, r3
 8002a76:	4313      	orrs	r3, r2
 8002a78:	b21a      	sxth	r2, r3
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	3302      	adds	r3, #2
 8002a7e:	b292      	uxth	r2, r2
 8002a80:	801a      	strh	r2, [r3, #0]
	cell_values[2] = (uint16_t)rx_tab[8] | (((uint16_t)rx_tab[9])<<8);
 8002a82:	7d3b      	ldrb	r3, [r7, #20]
 8002a84:	b21a      	sxth	r2, r3
 8002a86:	7d7b      	ldrb	r3, [r7, #21]
 8002a88:	021b      	lsls	r3, r3, #8
 8002a8a:	b21b      	sxth	r3, r3
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	b21a      	sxth	r2, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	3304      	adds	r3, #4
 8002a94:	b292      	uxth	r2, r2
 8002a96:	801a      	strh	r2, [r3, #0]


	// read cell voltage group B
	cmd = (1<<15) | 0b110;
 8002a98:	f248 0306 	movw	r3, #32774	@ 0x8006
 8002a9c:	f8a7 30d6 	strh.w	r3, [r7, #214]	@ 0xd6
	memset(tab, 0, 12);
 8002aa0:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8002aa4:	220c      	movs	r2, #12
 8002aa6:	2100      	movs	r1, #0
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f012 f8c8 	bl	8014c3e <memset>
	tab[0] = (cmd>>8);
 8002aae:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	@ 0xd6
 8002ab2:	0a1b      	lsrs	r3, r3, #8
 8002ab4:	b29b      	uxth	r3, r3
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70
	tab[1] = cmd;
 8002abc:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	@ 0xd6
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	f887 3071 	strb.w	r3, [r7, #113]	@ 0x71
	pec = pec15((char*)tab, 2);
 8002ac6:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8002aca:	2102      	movs	r1, #2
 8002acc:	4618      	mov	r0, r3
 8002ace:	f7ff fe95 	bl	80027fc <_Z5pec15Pci>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	f8a7 30d4 	strh.w	r3, [r7, #212]	@ 0xd4
	tab[2] = pec >> 8;
 8002ad8:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	@ 0xd4
 8002adc:	0a1b      	lsrs	r3, r3, #8
 8002ade:	b29b      	uxth	r3, r3
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	f887 3072 	strb.w	r3, [r7, #114]	@ 0x72
	tab[3] = pec;
 8002ae6:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	@ 0xd4
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8002af0:	2200      	movs	r2, #0
 8002af2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002af6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002afa:	f005 fd79 	bl	80085f0 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, tab, rx_tab, 12, 20);
 8002afe:	f107 020c 	add.w	r2, r7, #12
 8002b02:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 8002b06:	2314      	movs	r3, #20
 8002b08:	9300      	str	r3, [sp, #0]
 8002b0a:	230c      	movs	r3, #12
 8002b0c:	4817      	ldr	r0, [pc, #92]	@ (8002b6c <_Z18LTC_get_values_adcPt+0x1a8>)
 8002b0e:	f009 fa79 	bl	800c004 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8002b12:	2201      	movs	r2, #1
 8002b14:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002b18:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002b1c:	f005 fd68 	bl	80085f0 <HAL_GPIO_WritePin>

	cell_values[3] = (uint16_t)rx_tab[4] | (((uint16_t)rx_tab[5])<<8);
 8002b20:	7c3b      	ldrb	r3, [r7, #16]
 8002b22:	b21a      	sxth	r2, r3
 8002b24:	7c7b      	ldrb	r3, [r7, #17]
 8002b26:	021b      	lsls	r3, r3, #8
 8002b28:	b21b      	sxth	r3, r3
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	b21a      	sxth	r2, r3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	3306      	adds	r3, #6
 8002b32:	b292      	uxth	r2, r2
 8002b34:	801a      	strh	r2, [r3, #0]
	cell_values[4] = (uint16_t)rx_tab[6] | (((uint16_t)rx_tab[7])<<8);
 8002b36:	7cbb      	ldrb	r3, [r7, #18]
 8002b38:	b21a      	sxth	r2, r3
 8002b3a:	7cfb      	ldrb	r3, [r7, #19]
 8002b3c:	021b      	lsls	r3, r3, #8
 8002b3e:	b21b      	sxth	r3, r3
 8002b40:	4313      	orrs	r3, r2
 8002b42:	b21a      	sxth	r2, r3
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	3308      	adds	r3, #8
 8002b48:	b292      	uxth	r2, r2
 8002b4a:	801a      	strh	r2, [r3, #0]
	cell_values[5] = (uint16_t)rx_tab[8] | (((uint16_t)rx_tab[9])<<8);
 8002b4c:	7d3b      	ldrb	r3, [r7, #20]
 8002b4e:	b21a      	sxth	r2, r3
 8002b50:	7d7b      	ldrb	r3, [r7, #21]
 8002b52:	021b      	lsls	r3, r3, #8
 8002b54:	b21b      	sxth	r3, r3
 8002b56:	4313      	orrs	r3, r2
 8002b58:	b21a      	sxth	r2, r3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	330a      	adds	r3, #10
 8002b5e:	b292      	uxth	r2, r2
 8002b60:	801a      	strh	r2, [r3, #0]


}
 8002b62:	bf00      	nop
 8002b64:	37d8      	adds	r7, #216	@ 0xd8
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	20001138 	.word	0x20001138

08002b70 <_Z8mute_disv>:
 * Brief:	Muting discharge
 * Param:	None
 * Retval:	None
 */
void mute_dis()
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b082      	sub	sp, #8
 8002b74:	af00      	add	r7, sp, #0
	uint8_t tab[4];
	uint16_t pec;


	uint16_t cmd = (1<<15) | 0b101000;
 8002b76:	f248 0328 	movw	r3, #32808	@ 0x8028
 8002b7a:	80fb      	strh	r3, [r7, #6]
	memset(tab, 0, 4);
 8002b7c:	463b      	mov	r3, r7
 8002b7e:	2204      	movs	r2, #4
 8002b80:	2100      	movs	r1, #0
 8002b82:	4618      	mov	r0, r3
 8002b84:	f012 f85b 	bl	8014c3e <memset>
	tab[0] = (cmd>>8);
 8002b88:	88fb      	ldrh	r3, [r7, #6]
 8002b8a:	0a1b      	lsrs	r3, r3, #8
 8002b8c:	b29b      	uxth	r3, r3
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	703b      	strb	r3, [r7, #0]
	tab[1] = cmd;
 8002b92:	88fb      	ldrh	r3, [r7, #6]
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	707b      	strb	r3, [r7, #1]
	pec = pec15((char*)tab, 2);
 8002b98:	463b      	mov	r3, r7
 8002b9a:	2102      	movs	r1, #2
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f7ff fe2d 	bl	80027fc <_Z5pec15Pci>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	80bb      	strh	r3, [r7, #4]
	tab[2] = pec >> 8;
 8002ba6:	88bb      	ldrh	r3, [r7, #4]
 8002ba8:	0a1b      	lsrs	r3, r3, #8
 8002baa:	b29b      	uxth	r3, r3
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	70bb      	strb	r3, [r7, #2]
	tab[3] = pec;
 8002bb0:	88bb      	ldrh	r3, [r7, #4]
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	70fb      	strb	r3, [r7, #3]

	LTC_wake_up();
 8002bb6:	f7ff fe53 	bl	8002860 <_Z11LTC_wake_upv>

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8002bba:	2200      	movs	r2, #0
 8002bbc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002bc0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002bc4:	f005 fd14 	bl	80085f0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, tab, 4, 100);
 8002bc8:	4639      	mov	r1, r7
 8002bca:	2364      	movs	r3, #100	@ 0x64
 8002bcc:	2204      	movs	r2, #4
 8002bce:	4807      	ldr	r0, [pc, #28]	@ (8002bec <_Z8mute_disv+0x7c>)
 8002bd0:	f009 f8a3 	bl	800bd1a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002bda:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002bde:	f005 fd07 	bl	80085f0 <HAL_GPIO_WritePin>
}
 8002be2:	bf00      	nop
 8002be4:	3708      	adds	r7, #8
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	20001138 	.word	0x20001138

08002bf0 <_Z10unmute_disv>:
 * Brief:	Unmuting discharge
 * Param:	None
 * Retval:	None
 */
void unmute_dis()
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b082      	sub	sp, #8
 8002bf4:	af00      	add	r7, sp, #0
	uint8_t tab[4];
	uint16_t pec;


	uint16_t cmd = (1<<15) | 0b101001;
 8002bf6:	f248 0329 	movw	r3, #32809	@ 0x8029
 8002bfa:	80fb      	strh	r3, [r7, #6]
	memset(tab, 0, 4);
 8002bfc:	463b      	mov	r3, r7
 8002bfe:	2204      	movs	r2, #4
 8002c00:	2100      	movs	r1, #0
 8002c02:	4618      	mov	r0, r3
 8002c04:	f012 f81b 	bl	8014c3e <memset>
	tab[0] = (cmd>>8);
 8002c08:	88fb      	ldrh	r3, [r7, #6]
 8002c0a:	0a1b      	lsrs	r3, r3, #8
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	703b      	strb	r3, [r7, #0]
	tab[1] = cmd;
 8002c12:	88fb      	ldrh	r3, [r7, #6]
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	707b      	strb	r3, [r7, #1]
	pec = pec15((char*)tab, 2);
 8002c18:	463b      	mov	r3, r7
 8002c1a:	2102      	movs	r1, #2
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f7ff fded 	bl	80027fc <_Z5pec15Pci>
 8002c22:	4603      	mov	r3, r0
 8002c24:	80bb      	strh	r3, [r7, #4]
	tab[2] = pec >> 8;
 8002c26:	88bb      	ldrh	r3, [r7, #4]
 8002c28:	0a1b      	lsrs	r3, r3, #8
 8002c2a:	b29b      	uxth	r3, r3
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	70bb      	strb	r3, [r7, #2]
	tab[3] = pec;
 8002c30:	88bb      	ldrh	r3, [r7, #4]
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	70fb      	strb	r3, [r7, #3]

	LTC_wake_up();
 8002c36:	f7ff fe13 	bl	8002860 <_Z11LTC_wake_upv>

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002c40:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002c44:	f005 fcd4 	bl	80085f0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, tab, 4, 100);
 8002c48:	4639      	mov	r1, r7
 8002c4a:	2364      	movs	r3, #100	@ 0x64
 8002c4c:	2204      	movs	r2, #4
 8002c4e:	4807      	ldr	r0, [pc, #28]	@ (8002c6c <_Z10unmute_disv+0x7c>)
 8002c50:	f009 f863 	bl	800bd1a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8002c54:	2201      	movs	r2, #1
 8002c56:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002c5a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002c5e:	f005 fcc7 	bl	80085f0 <HAL_GPIO_WritePin>
}
 8002c62:	bf00      	nop
 8002c64:	3708      	adds	r7, #8
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	20001138 	.word	0x20001138

08002c70 <_Z21LTC_turn_on_dischargeiPb>:
 * Brief:	Send discharge configuration and start the discharge, BLOCKING MODE
 * Param:	cell: number of cell wanted to be discharged
 * Retval:	None
 */
void LTC_turn_on_discharge(int cell, bool *cellDischarge)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b086      	sub	sp, #24
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	6039      	str	r1, [r7, #0]
	uint8_t tab[12];
	uint16_t pec;

	unmute_dis();
 8002c7a:	f7ff ffb9 	bl	8002bf0 <_Z10unmute_disv>

	uint16_t cmd = (1<<15) | 0b10100;
 8002c7e:	f248 0314 	movw	r3, #32788	@ 0x8014
 8002c82:	82fb      	strh	r3, [r7, #22]
	memset(tab, 0, 12);
 8002c84:	f107 0308 	add.w	r3, r7, #8
 8002c88:	220c      	movs	r2, #12
 8002c8a:	2100      	movs	r1, #0
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f011 ffd6 	bl	8014c3e <memset>
	tab[0] = (cmd>>8);
 8002c92:	8afb      	ldrh	r3, [r7, #22]
 8002c94:	0a1b      	lsrs	r3, r3, #8
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	723b      	strb	r3, [r7, #8]
	tab[1] = cmd;
 8002c9c:	8afb      	ldrh	r3, [r7, #22]
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	727b      	strb	r3, [r7, #9]
	pec = pec15((char*)tab, 2);
 8002ca2:	f107 0308 	add.w	r3, r7, #8
 8002ca6:	2102      	movs	r1, #2
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f7ff fda7 	bl	80027fc <_Z5pec15Pci>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	82bb      	strh	r3, [r7, #20]
	tab[2] = pec >> 8;
 8002cb2:	8abb      	ldrh	r3, [r7, #20]
 8002cb4:	0a1b      	lsrs	r3, r3, #8
 8002cb6:	b29b      	uxth	r3, r3
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	72bb      	strb	r3, [r7, #10]
	tab[3] = pec;
 8002cbc:	8abb      	ldrh	r3, [r7, #20]
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	72fb      	strb	r3, [r7, #11]


	tab[4] = (cellDischarge[0]) | (cellDischarge[1] << 4); // 1, 2
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	781b      	ldrb	r3, [r3, #0]
 8002cc6:	b25a      	sxtb	r2, r3
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	3301      	adds	r3, #1
 8002ccc:	781b      	ldrb	r3, [r3, #0]
 8002cce:	011b      	lsls	r3, r3, #4
 8002cd0:	b25b      	sxtb	r3, r3
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	b25b      	sxtb	r3, r3
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	733b      	strb	r3, [r7, #12]
	tab[5] = (cellDischarge[2]) | (cellDischarge[3] << 4); // 3, 4
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	3302      	adds	r3, #2
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	b25a      	sxtb	r2, r3
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	3303      	adds	r3, #3
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	011b      	lsls	r3, r3, #4
 8002cea:	b25b      	sxtb	r3, r3
 8002cec:	4313      	orrs	r3, r2
 8002cee:	b25b      	sxtb	r3, r3
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	737b      	strb	r3, [r7, #13]
	tab[6] = (cellDischarge[4]) | (cellDischarge[5] << 4); // 5, 6
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	3304      	adds	r3, #4
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	b25a      	sxtb	r2, r3
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	3305      	adds	r3, #5
 8002d00:	781b      	ldrb	r3, [r3, #0]
 8002d02:	011b      	lsls	r3, r3, #4
 8002d04:	b25b      	sxtb	r3, r3
 8002d06:	4313      	orrs	r3, r2
 8002d08:	b25b      	sxtb	r3, r3
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	73bb      	strb	r3, [r7, #14]
	tab[7] = 0;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	73fb      	strb	r3, [r7, #15]
	tab[8] = 0;
 8002d12:	2300      	movs	r3, #0
 8002d14:	743b      	strb	r3, [r7, #16]
	tab[9] = 0;
 8002d16:	2300      	movs	r3, #0
 8002d18:	747b      	strb	r3, [r7, #17]
	pec = pec15((char*)&tab[4], 6);
 8002d1a:	f107 0308 	add.w	r3, r7, #8
 8002d1e:	3304      	adds	r3, #4
 8002d20:	2106      	movs	r1, #6
 8002d22:	4618      	mov	r0, r3
 8002d24:	f7ff fd6a 	bl	80027fc <_Z5pec15Pci>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	82bb      	strh	r3, [r7, #20]
	tab[10] = pec >> 8;
 8002d2c:	8abb      	ldrh	r3, [r7, #20]
 8002d2e:	0a1b      	lsrs	r3, r3, #8
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	74bb      	strb	r3, [r7, #18]
	tab[11] = pec;
 8002d36:	8abb      	ldrh	r3, [r7, #20]
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	74fb      	strb	r3, [r7, #19]

	LTC_wake_up();
 8002d3c:	f7ff fd90 	bl	8002860 <_Z11LTC_wake_upv>

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8002d40:	2200      	movs	r2, #0
 8002d42:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002d46:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002d4a:	f005 fc51 	bl	80085f0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, tab, 12, 100);
 8002d4e:	f107 0108 	add.w	r1, r7, #8
 8002d52:	2364      	movs	r3, #100	@ 0x64
 8002d54:	220c      	movs	r2, #12
 8002d56:	483c      	ldr	r0, [pc, #240]	@ (8002e48 <_Z21LTC_turn_on_dischargeiPb+0x1d8>)
 8002d58:	f008 ffdf 	bl	800bd1a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002d62:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002d66:	f005 fc43 	bl	80085f0 <HAL_GPIO_WritePin>

	cmd = (1<<15) | 0x01;
 8002d6a:	f248 0301 	movw	r3, #32769	@ 0x8001
 8002d6e:	82fb      	strh	r3, [r7, #22]
	memset(tab, 0, 12);
 8002d70:	f107 0308 	add.w	r3, r7, #8
 8002d74:	220c      	movs	r2, #12
 8002d76:	2100      	movs	r1, #0
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f011 ff60 	bl	8014c3e <memset>
	// configuration
	tab[0] = (cmd>>8);
 8002d7e:	8afb      	ldrh	r3, [r7, #22]
 8002d80:	0a1b      	lsrs	r3, r3, #8
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	723b      	strb	r3, [r7, #8]
	tab[1] = cmd;
 8002d88:	8afb      	ldrh	r3, [r7, #22]
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	727b      	strb	r3, [r7, #9]
	pec = pec15((char*)tab, 2);
 8002d8e:	f107 0308 	add.w	r3, r7, #8
 8002d92:	2102      	movs	r1, #2
 8002d94:	4618      	mov	r0, r3
 8002d96:	f7ff fd31 	bl	80027fc <_Z5pec15Pci>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	82bb      	strh	r3, [r7, #20]
	tab[2] = pec >> 8;
 8002d9e:	8abb      	ldrh	r3, [r7, #20]
 8002da0:	0a1b      	lsrs	r3, r3, #8
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	72bb      	strb	r3, [r7, #10]
	tab[3] = pec;
 8002da8:	8abb      	ldrh	r3, [r7, #20]
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	72fb      	strb	r3, [r7, #11]

	tab[4] = ltcConfig[0];
 8002dae:	4b27      	ldr	r3, [pc, #156]	@ (8002e4c <_Z21LTC_turn_on_dischargeiPb+0x1dc>)
 8002db0:	781b      	ldrb	r3, [r3, #0]
 8002db2:	733b      	strb	r3, [r7, #12]
	tab[5] = ltcConfig[1];
 8002db4:	4b25      	ldr	r3, [pc, #148]	@ (8002e4c <_Z21LTC_turn_on_dischargeiPb+0x1dc>)
 8002db6:	785b      	ldrb	r3, [r3, #1]
 8002db8:	737b      	strb	r3, [r7, #13]
	tab[6] = ltcConfig[2];
 8002dba:	4b24      	ldr	r3, [pc, #144]	@ (8002e4c <_Z21LTC_turn_on_dischargeiPb+0x1dc>)
 8002dbc:	789b      	ldrb	r3, [r3, #2]
 8002dbe:	73bb      	strb	r3, [r7, #14]
	tab[7] = ltcConfig[3];
 8002dc0:	4b22      	ldr	r3, [pc, #136]	@ (8002e4c <_Z21LTC_turn_on_dischargeiPb+0x1dc>)
 8002dc2:	78db      	ldrb	r3, [r3, #3]
 8002dc4:	73fb      	strb	r3, [r7, #15]
	if(cell<7){
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2b06      	cmp	r3, #6
 8002dca:	dc0c      	bgt.n	8002de6 <_Z21LTC_turn_on_dischargeiPb+0x176>
		ltcConfig[4] = ltcConfig[4] | (1 << (cell));
 8002dcc:	4b1f      	ldr	r3, [pc, #124]	@ (8002e4c <_Z21LTC_turn_on_dischargeiPb+0x1dc>)
 8002dce:	791b      	ldrb	r3, [r3, #4]
 8002dd0:	b25a      	sxtb	r2, r3
 8002dd2:	2101      	movs	r1, #1
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8002dda:	b25b      	sxtb	r3, r3
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	b25b      	sxtb	r3, r3
 8002de0:	b2da      	uxtb	r2, r3
 8002de2:	4b1a      	ldr	r3, [pc, #104]	@ (8002e4c <_Z21LTC_turn_on_dischargeiPb+0x1dc>)
 8002de4:	711a      	strb	r2, [r3, #4]
	}
	tab[8] = ltcConfig[4];
 8002de6:	4b19      	ldr	r3, [pc, #100]	@ (8002e4c <_Z21LTC_turn_on_dischargeiPb+0x1dc>)
 8002de8:	791b      	ldrb	r3, [r3, #4]
 8002dea:	743b      	strb	r3, [r7, #16]
	tab[9] = ltcConfig[5];
 8002dec:	4b17      	ldr	r3, [pc, #92]	@ (8002e4c <_Z21LTC_turn_on_dischargeiPb+0x1dc>)
 8002dee:	795b      	ldrb	r3, [r3, #5]
 8002df0:	747b      	strb	r3, [r7, #17]
	pec = pec15((char*)&tab[4], 6);
 8002df2:	f107 0308 	add.w	r3, r7, #8
 8002df6:	3304      	adds	r3, #4
 8002df8:	2106      	movs	r1, #6
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f7ff fcfe 	bl	80027fc <_Z5pec15Pci>
 8002e00:	4603      	mov	r3, r0
 8002e02:	82bb      	strh	r3, [r7, #20]
	tab[10] = pec >> 8;
 8002e04:	8abb      	ldrh	r3, [r7, #20]
 8002e06:	0a1b      	lsrs	r3, r3, #8
 8002e08:	b29b      	uxth	r3, r3
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	74bb      	strb	r3, [r7, #18]
	tab[11] = pec;
 8002e0e:	8abb      	ldrh	r3, [r7, #20]
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	74fb      	strb	r3, [r7, #19]


	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8002e14:	2200      	movs	r2, #0
 8002e16:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002e1a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002e1e:	f005 fbe7 	bl	80085f0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, tab, 12, 100);
 8002e22:	f107 0108 	add.w	r1, r7, #8
 8002e26:	2364      	movs	r3, #100	@ 0x64
 8002e28:	220c      	movs	r2, #12
 8002e2a:	4807      	ldr	r0, [pc, #28]	@ (8002e48 <_Z21LTC_turn_on_dischargeiPb+0x1d8>)
 8002e2c:	f008 ff75 	bl	800bd1a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8002e30:	2201      	movs	r2, #1
 8002e32:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002e36:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002e3a:	f005 fbd9 	bl	80085f0 <HAL_GPIO_WritePin>


}
 8002e3e:	bf00      	nop
 8002e40:	3718      	adds	r7, #24
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	20001138 	.word	0x20001138
 8002e4c:	20000288 	.word	0x20000288

08002e50 <_Z22LTC_turn_off_dischargev>:
 * Brief:	Turn off discharge, BLOCKING MODE
 * Param:	None
 * Retval:	None
 */
void LTC_turn_off_discharge()
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b09a      	sub	sp, #104	@ 0x68
 8002e54:	af00      	add	r7, sp, #0

	uint8_t tab[100];
	uint16_t pec;


	uint16_t cmd = (1<<15) | 0b10100;
 8002e56:	f248 0314 	movw	r3, #32788	@ 0x8014
 8002e5a:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
	memset(tab, 0, 12);
 8002e5e:	463b      	mov	r3, r7
 8002e60:	220c      	movs	r2, #12
 8002e62:	2100      	movs	r1, #0
 8002e64:	4618      	mov	r0, r3
 8002e66:	f011 feea 	bl	8014c3e <memset>
	tab[0] = (cmd>>8);
 8002e6a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8002e6e:	0a1b      	lsrs	r3, r3, #8
 8002e70:	b29b      	uxth	r3, r3
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	703b      	strb	r3, [r7, #0]
	tab[1] = cmd;
 8002e76:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	707b      	strb	r3, [r7, #1]
	pec = pec15((char*)tab, 2);
 8002e7e:	463b      	mov	r3, r7
 8002e80:	2102      	movs	r1, #2
 8002e82:	4618      	mov	r0, r3
 8002e84:	f7ff fcba 	bl	80027fc <_Z5pec15Pci>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
	tab[2] = pec >> 8;
 8002e8e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8002e92:	0a1b      	lsrs	r3, r3, #8
 8002e94:	b29b      	uxth	r3, r3
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	70bb      	strb	r3, [r7, #2]
	tab[3] = pec;
 8002e9a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8002e9e:	b2db      	uxtb	r3, r3
 8002ea0:	70fb      	strb	r3, [r7, #3]


	tab[4] = 0;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	713b      	strb	r3, [r7, #4]
	tab[5] = 0;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	717b      	strb	r3, [r7, #5]
	tab[6] = 0;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	71bb      	strb	r3, [r7, #6]
	tab[7] = 0;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	71fb      	strb	r3, [r7, #7]
	tab[8] = 0;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	723b      	strb	r3, [r7, #8]
	tab[9] = 0;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	727b      	strb	r3, [r7, #9]
	pec = pec15((char*)&tab[4], 6);
 8002eba:	463b      	mov	r3, r7
 8002ebc:	3304      	adds	r3, #4
 8002ebe:	2106      	movs	r1, #6
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f7ff fc9b 	bl	80027fc <_Z5pec15Pci>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
	tab[10] = pec >> 8;
 8002ecc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8002ed0:	0a1b      	lsrs	r3, r3, #8
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	72bb      	strb	r3, [r7, #10]
	tab[11] = pec;
 8002ed8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	72fb      	strb	r3, [r7, #11]

	LTC_wake_up();
 8002ee0:	f7ff fcbe 	bl	8002860 <_Z11LTC_wake_upv>

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002eea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002eee:	f005 fb7f 	bl	80085f0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, tab, 12, 100);
 8002ef2:	4639      	mov	r1, r7
 8002ef4:	2364      	movs	r3, #100	@ 0x64
 8002ef6:	220c      	movs	r2, #12
 8002ef8:	4838      	ldr	r0, [pc, #224]	@ (8002fdc <_Z22LTC_turn_off_dischargev+0x18c>)
 8002efa:	f008 ff0e 	bl	800bd1a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8002efe:	2201      	movs	r2, #1
 8002f00:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002f04:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002f08:	f005 fb72 	bl	80085f0 <HAL_GPIO_WritePin>


	cmd = (1<<15) | 0x01;
 8002f0c:	f248 0301 	movw	r3, #32769	@ 0x8001
 8002f10:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
	memset(tab, 0, 12);
 8002f14:	463b      	mov	r3, r7
 8002f16:	220c      	movs	r2, #12
 8002f18:	2100      	movs	r1, #0
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f011 fe8f 	bl	8014c3e <memset>
	// configuration
	tab[0] = (cmd>>8);
 8002f20:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8002f24:	0a1b      	lsrs	r3, r3, #8
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	703b      	strb	r3, [r7, #0]
	tab[1] = cmd;
 8002f2c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	707b      	strb	r3, [r7, #1]
	pec = pec15((char*)tab, 2);
 8002f34:	463b      	mov	r3, r7
 8002f36:	2102      	movs	r1, #2
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f7ff fc5f 	bl	80027fc <_Z5pec15Pci>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
	tab[2] = pec >> 8;
 8002f44:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8002f48:	0a1b      	lsrs	r3, r3, #8
 8002f4a:	b29b      	uxth	r3, r3
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	70bb      	strb	r3, [r7, #2]
	tab[3] = pec;
 8002f50:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	70fb      	strb	r3, [r7, #3]

	ltcConfig[4] = 0;
 8002f58:	4b21      	ldr	r3, [pc, #132]	@ (8002fe0 <_Z22LTC_turn_off_dischargev+0x190>)
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	711a      	strb	r2, [r3, #4]

	tab[4] = ltcConfig[0];
 8002f5e:	4b20      	ldr	r3, [pc, #128]	@ (8002fe0 <_Z22LTC_turn_off_dischargev+0x190>)
 8002f60:	781b      	ldrb	r3, [r3, #0]
 8002f62:	713b      	strb	r3, [r7, #4]
	tab[5] = ltcConfig[1];
 8002f64:	4b1e      	ldr	r3, [pc, #120]	@ (8002fe0 <_Z22LTC_turn_off_dischargev+0x190>)
 8002f66:	785b      	ldrb	r3, [r3, #1]
 8002f68:	717b      	strb	r3, [r7, #5]
	tab[6] = ltcConfig[2];
 8002f6a:	4b1d      	ldr	r3, [pc, #116]	@ (8002fe0 <_Z22LTC_turn_off_dischargev+0x190>)
 8002f6c:	789b      	ldrb	r3, [r3, #2]
 8002f6e:	71bb      	strb	r3, [r7, #6]
	tab[7] = ltcConfig[3];
 8002f70:	4b1b      	ldr	r3, [pc, #108]	@ (8002fe0 <_Z22LTC_turn_off_dischargev+0x190>)
 8002f72:	78db      	ldrb	r3, [r3, #3]
 8002f74:	71fb      	strb	r3, [r7, #7]
	tab[8] = ltcConfig[4];
 8002f76:	4b1a      	ldr	r3, [pc, #104]	@ (8002fe0 <_Z22LTC_turn_off_dischargev+0x190>)
 8002f78:	791b      	ldrb	r3, [r3, #4]
 8002f7a:	723b      	strb	r3, [r7, #8]
	tab[9] = ltcConfig[5];
 8002f7c:	4b18      	ldr	r3, [pc, #96]	@ (8002fe0 <_Z22LTC_turn_off_dischargev+0x190>)
 8002f7e:	795b      	ldrb	r3, [r3, #5]
 8002f80:	727b      	strb	r3, [r7, #9]
	pec = pec15((char*)&tab[4], 6);
 8002f82:	463b      	mov	r3, r7
 8002f84:	3304      	adds	r3, #4
 8002f86:	2106      	movs	r1, #6
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f7ff fc37 	bl	80027fc <_Z5pec15Pci>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
	tab[10] = pec >> 8;
 8002f94:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8002f98:	0a1b      	lsrs	r3, r3, #8
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	72bb      	strb	r3, [r7, #10]
	tab[11] = pec;
 8002fa0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	72fb      	strb	r3, [r7, #11]

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8002fa8:	2200      	movs	r2, #0
 8002faa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002fae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002fb2:	f005 fb1d 	bl	80085f0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, tab, 12, 100);
 8002fb6:	4639      	mov	r1, r7
 8002fb8:	2364      	movs	r3, #100	@ 0x64
 8002fba:	220c      	movs	r2, #12
 8002fbc:	4807      	ldr	r0, [pc, #28]	@ (8002fdc <_Z22LTC_turn_off_dischargev+0x18c>)
 8002fbe:	f008 feac 	bl	800bd1a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002fc8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002fcc:	f005 fb10 	bl	80085f0 <HAL_GPIO_WritePin>

	mute_dis();
 8002fd0:	f7ff fdce 	bl	8002b70 <_Z8mute_disv>
}
 8002fd4:	bf00      	nop
 8002fd6:	3768      	adds	r7, #104	@ 0x68
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	20001138 	.word	0x20001138
 8002fe0:	20000288 	.word	0x20000288

08002fe4 <_Z24temperature_calculationst>:
 * Brief:	Calculation of temperature, from value of measured voltage
 * Param:	value:	Value of voltage, LSB -> 0.1 mV
 * Retval:	Temperature in *C
 */
float temperature_calculations(uint16_t value)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b085      	sub	sp, #20
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	4603      	mov	r3, r0
 8002fec:	80fb      	strh	r3, [r7, #6]
	float retval = 0.0;
 8002fee:	f04f 0300 	mov.w	r3, #0
 8002ff2:	60fb      	str	r3, [r7, #12]
	for(unsigned int i = 1; i < 28; i++)
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	60bb      	str	r3, [r7, #8]
 8002ff8:	e040      	b.n	800307c <_Z24temperature_calculationst+0x98>
	{
		if(value >= (uint16_t)temperature_map[i][0])
 8002ffa:	4a27      	ldr	r2, [pc, #156]	@ (8003098 <_Z24temperature_calculationst+0xb4>)
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003002:	b29b      	uxth	r3, r3
 8003004:	88fa      	ldrh	r2, [r7, #6]
 8003006:	429a      	cmp	r2, r3
 8003008:	d335      	bcc.n	8003076 <_Z24temperature_calculationst+0x92>
		{
			// approximation
			retval = (float)temperature_map[i][1] - 5.0 * ((float)value-(float)temperature_map[i][0]) / ((float)temperature_map[i-1][0] - (float)temperature_map[i][0]);
 800300a:	4a23      	ldr	r2, [pc, #140]	@ (8003098 <_Z24temperature_calculationst+0xb4>)
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	00db      	lsls	r3, r3, #3
 8003010:	4413      	add	r3, r2
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	ee07 3a90 	vmov	s15, r3
 8003018:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800301c:	88fb      	ldrh	r3, [r7, #6]
 800301e:	ee07 3a90 	vmov	s15, r3
 8003022:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003026:	4a1c      	ldr	r2, [pc, #112]	@ (8003098 <_Z24temperature_calculationst+0xb4>)
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800302e:	ee07 3a90 	vmov	s15, r3
 8003032:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003036:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800303a:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 800303e:	ee27 6aa6 	vmul.f32	s12, s15, s13
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	3b01      	subs	r3, #1
 8003046:	4a14      	ldr	r2, [pc, #80]	@ (8003098 <_Z24temperature_calculationst+0xb4>)
 8003048:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800304c:	ee07 3a90 	vmov	s15, r3
 8003050:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003054:	4a10      	ldr	r2, [pc, #64]	@ (8003098 <_Z24temperature_calculationst+0xb4>)
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800305c:	ee07 3a90 	vmov	s15, r3
 8003060:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003064:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003068:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800306c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003070:	edc7 7a03 	vstr	s15, [r7, #12]
			break;
 8003074:	e005      	b.n	8003082 <_Z24temperature_calculationst+0x9e>
	for(unsigned int i = 1; i < 28; i++)
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	3301      	adds	r3, #1
 800307a:	60bb      	str	r3, [r7, #8]
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	2b1b      	cmp	r3, #27
 8003080:	d9bb      	bls.n	8002ffa <_Z24temperature_calculationst+0x16>
		}
	}
	return retval;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	ee07 3a90 	vmov	s15, r3
}
 8003088:	eeb0 0a67 	vmov.f32	s0, s15
 800308c:	3714      	adds	r7, #20
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr
 8003096:	bf00      	nop
 8003098:	080172d8 	.word	0x080172d8

0800309c <_Z16get_temperaturesv>:
 * Brief:	Getting proper values of temperatures on every cell in *C
 * Param:	None
 * Retval:	None
 */
void get_temperatures()
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b082      	sub	sp, #8
 80030a0:	af00      	add	r7, sp, #0
	data.temperatures.average = 0;
 80030a2:	4b21      	ldr	r3, [pc, #132]	@ (8003128 <_Z16get_temperaturesv+0x8c>)
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
	for(unsigned int i = 0; i < NUMBER_OF_TEMPERATURES; i++)
 80030aa:	2300      	movs	r3, #0
 80030ac:	607b      	str	r3, [r7, #4]
 80030ae:	e029      	b.n	8003104 <_Z16get_temperaturesv+0x68>
	{
		data.temperatures.values[i] = (uint16_t)temperature_calculations(data.temperatures.adc[MAX_NUMBER_OF_TEMPERATURES-(i+1)]);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f1c3 0307 	rsb	r3, r3, #7
 80030b6:	4a1c      	ldr	r2, [pc, #112]	@ (8003128 <_Z16get_temperaturesv+0x8c>)
 80030b8:	3314      	adds	r3, #20
 80030ba:	005b      	lsls	r3, r3, #1
 80030bc:	4413      	add	r3, r2
 80030be:	889b      	ldrh	r3, [r3, #4]
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	4618      	mov	r0, r3
 80030c4:	f7ff ff8e 	bl	8002fe4 <_Z24temperature_calculationst>
 80030c8:	eef0 7a40 	vmov.f32	s15, s0
 80030cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80030d0:	ee17 3a90 	vmov	r3, s15
 80030d4:	b29b      	uxth	r3, r3
 80030d6:	b2d9      	uxtb	r1, r3
 80030d8:	4a13      	ldr	r2, [pc, #76]	@ (8003128 <_Z16get_temperaturesv+0x8c>)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4413      	add	r3, r2
 80030de:	3320      	adds	r3, #32
 80030e0:	460a      	mov	r2, r1
 80030e2:	701a      	strb	r2, [r3, #0]
		data.temperatures.average += data.temperatures.values[i];
 80030e4:	4b10      	ldr	r3, [pc, #64]	@ (8003128 <_Z16get_temperaturesv+0x8c>)
 80030e6:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 80030ea:	490f      	ldr	r1, [pc, #60]	@ (8003128 <_Z16get_temperaturesv+0x8c>)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	440b      	add	r3, r1
 80030f0:	3320      	adds	r3, #32
 80030f2:	781b      	ldrb	r3, [r3, #0]
 80030f4:	4413      	add	r3, r2
 80030f6:	b2da      	uxtb	r2, r3
 80030f8:	4b0b      	ldr	r3, [pc, #44]	@ (8003128 <_Z16get_temperaturesv+0x8c>)
 80030fa:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
	for(unsigned int i = 0; i < NUMBER_OF_TEMPERATURES; i++)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	3301      	adds	r3, #1
 8003102:	607b      	str	r3, [r7, #4]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2b07      	cmp	r3, #7
 8003108:	d9d2      	bls.n	80030b0 <_Z16get_temperaturesv+0x14>
	}
	data.temperatures.average = data.temperatures.average / NUMBER_OF_TEMPERATURES;
 800310a:	4b07      	ldr	r3, [pc, #28]	@ (8003128 <_Z16get_temperaturesv+0x8c>)
 800310c:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8003110:	2b00      	cmp	r3, #0
 8003112:	da00      	bge.n	8003116 <_Z16get_temperaturesv+0x7a>
 8003114:	3307      	adds	r3, #7
 8003116:	10db      	asrs	r3, r3, #3
 8003118:	b2da      	uxtb	r2, r3
 800311a:	4b03      	ldr	r3, [pc, #12]	@ (8003128 <_Z16get_temperaturesv+0x8c>)
 800311c:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
}
 8003120:	bf00      	nop
 8003122:	3708      	adds	r7, #8
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}
 8003128:	20000aa4 	.word	0x20000aa4

0800312c <_Z15min_max_voltagev>:
/*
 * Brief:	Finding the highest and the lowest cell voltage and index of the highest one
 * Param:	None
 * Retval:	data.voltages.lowest_cell_voltage, data.voltages.highest_cell_voltage, data.voltages.highest_cell_voltage_index
 */
void min_max_voltage(){
 800312c:	b480      	push	{r7}
 800312e:	b083      	sub	sp, #12
 8003130:	af00      	add	r7, sp, #0
	data.voltages.lowest_cell_voltage = data.voltages.cells[0];
 8003132:	4b1d      	ldr	r3, [pc, #116]	@ (80031a8 <_Z15min_max_voltagev+0x7c>)
 8003134:	881a      	ldrh	r2, [r3, #0]
 8003136:	4b1c      	ldr	r3, [pc, #112]	@ (80031a8 <_Z15min_max_voltagev+0x7c>)
 8003138:	835a      	strh	r2, [r3, #26]
	data.voltages.highest_cell_voltage = data.voltages.cells[0];
 800313a:	4b1b      	ldr	r3, [pc, #108]	@ (80031a8 <_Z15min_max_voltagev+0x7c>)
 800313c:	881a      	ldrh	r2, [r3, #0]
 800313e:	4b1a      	ldr	r3, [pc, #104]	@ (80031a8 <_Z15min_max_voltagev+0x7c>)
 8003140:	839a      	strh	r2, [r3, #28]
	data.voltages.highest_cell_voltage_index = 0;
 8003142:	4b19      	ldr	r3, [pc, #100]	@ (80031a8 <_Z15min_max_voltagev+0x7c>)
 8003144:	2200      	movs	r2, #0
 8003146:	749a      	strb	r2, [r3, #18]
	for(uint8_t i = 1; i < NUMBER_OF_CELLS; i++)
 8003148:	2301      	movs	r3, #1
 800314a:	71fb      	strb	r3, [r7, #7]
 800314c:	e021      	b.n	8003192 <_Z15min_max_voltagev+0x66>
	{
		if(data.voltages.lowest_cell_voltage > data.voltages.cells[i])
 800314e:	4b16      	ldr	r3, [pc, #88]	@ (80031a8 <_Z15min_max_voltagev+0x7c>)
 8003150:	8b5a      	ldrh	r2, [r3, #26]
 8003152:	79fb      	ldrb	r3, [r7, #7]
 8003154:	4914      	ldr	r1, [pc, #80]	@ (80031a8 <_Z15min_max_voltagev+0x7c>)
 8003156:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800315a:	429a      	cmp	r2, r3
 800315c:	d905      	bls.n	800316a <_Z15min_max_voltagev+0x3e>
		{
			data.voltages.lowest_cell_voltage = data.voltages.cells[i];
 800315e:	79fb      	ldrb	r3, [r7, #7]
 8003160:	4a11      	ldr	r2, [pc, #68]	@ (80031a8 <_Z15min_max_voltagev+0x7c>)
 8003162:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8003166:	4b10      	ldr	r3, [pc, #64]	@ (80031a8 <_Z15min_max_voltagev+0x7c>)
 8003168:	835a      	strh	r2, [r3, #26]
		}
		if(data.voltages.highest_cell_voltage < data.voltages.cells[i])
 800316a:	4b0f      	ldr	r3, [pc, #60]	@ (80031a8 <_Z15min_max_voltagev+0x7c>)
 800316c:	8b9a      	ldrh	r2, [r3, #28]
 800316e:	79fb      	ldrb	r3, [r7, #7]
 8003170:	490d      	ldr	r1, [pc, #52]	@ (80031a8 <_Z15min_max_voltagev+0x7c>)
 8003172:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8003176:	429a      	cmp	r2, r3
 8003178:	d208      	bcs.n	800318c <_Z15min_max_voltagev+0x60>
		{
			data.voltages.highest_cell_voltage = data.voltages.cells[i];
 800317a:	79fb      	ldrb	r3, [r7, #7]
 800317c:	4a0a      	ldr	r2, [pc, #40]	@ (80031a8 <_Z15min_max_voltagev+0x7c>)
 800317e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8003182:	4b09      	ldr	r3, [pc, #36]	@ (80031a8 <_Z15min_max_voltagev+0x7c>)
 8003184:	839a      	strh	r2, [r3, #28]
			data.voltages.highest_cell_voltage_index = i;
 8003186:	4a08      	ldr	r2, [pc, #32]	@ (80031a8 <_Z15min_max_voltagev+0x7c>)
 8003188:	79fb      	ldrb	r3, [r7, #7]
 800318a:	7493      	strb	r3, [r2, #18]
	for(uint8_t i = 1; i < NUMBER_OF_CELLS; i++)
 800318c:	79fb      	ldrb	r3, [r7, #7]
 800318e:	3301      	adds	r3, #1
 8003190:	71fb      	strb	r3, [r7, #7]
 8003192:	79fb      	ldrb	r3, [r7, #7]
 8003194:	2b05      	cmp	r3, #5
 8003196:	d9da      	bls.n	800314e <_Z15min_max_voltagev+0x22>
		}
	}
}
 8003198:	bf00      	nop
 800319a:	bf00      	nop
 800319c:	370c      	adds	r7, #12
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr
 80031a6:	bf00      	nop
 80031a8:	20000aa4 	.word	0x20000aa4

080031ac <_Z19min_max_temperaturev>:

void min_max_temperature(){
 80031ac:	b480      	push	{r7}
 80031ae:	b083      	sub	sp, #12
 80031b0:	af00      	add	r7, sp, #0
	data.temperatures.lowest_temperature = data.temperatures.values[0];
 80031b2:	4b20      	ldr	r3, [pc, #128]	@ (8003234 <_Z19min_max_temperaturev+0x88>)
 80031b4:	f893 2020 	ldrb.w	r2, [r3, #32]
 80031b8:	4b1e      	ldr	r3, [pc, #120]	@ (8003234 <_Z19min_max_temperaturev+0x88>)
 80031ba:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	data.temperatures.highest_temperature = data.temperatures.values[0];
 80031be:	4b1d      	ldr	r3, [pc, #116]	@ (8003234 <_Z19min_max_temperaturev+0x88>)
 80031c0:	f893 2020 	ldrb.w	r2, [r3, #32]
 80031c4:	4b1b      	ldr	r3, [pc, #108]	@ (8003234 <_Z19min_max_temperaturev+0x88>)
 80031c6:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
	for(unsigned int i = 1; i < NUMBER_OF_TEMPERATURES; i++)
 80031ca:	2301      	movs	r3, #1
 80031cc:	607b      	str	r3, [r7, #4]
 80031ce:	e026      	b.n	800321e <_Z19min_max_temperaturev+0x72>
	{
		if(data.temperatures.lowest_temperature > data.temperatures.values[i])
 80031d0:	4b18      	ldr	r3, [pc, #96]	@ (8003234 <_Z19min_max_temperaturev+0x88>)
 80031d2:	f893 2028 	ldrb.w	r2, [r3, #40]	@ 0x28
 80031d6:	4917      	ldr	r1, [pc, #92]	@ (8003234 <_Z19min_max_temperaturev+0x88>)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	440b      	add	r3, r1
 80031dc:	3320      	adds	r3, #32
 80031de:	781b      	ldrb	r3, [r3, #0]
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d907      	bls.n	80031f4 <_Z19min_max_temperaturev+0x48>
		{
			data.temperatures.lowest_temperature = data.temperatures.values[i];
 80031e4:	4a13      	ldr	r2, [pc, #76]	@ (8003234 <_Z19min_max_temperaturev+0x88>)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4413      	add	r3, r2
 80031ea:	3320      	adds	r3, #32
 80031ec:	781a      	ldrb	r2, [r3, #0]
 80031ee:	4b11      	ldr	r3, [pc, #68]	@ (8003234 <_Z19min_max_temperaturev+0x88>)
 80031f0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		}
		if(data.temperatures.highest_temperature < data.temperatures.values[i])
 80031f4:	4b0f      	ldr	r3, [pc, #60]	@ (8003234 <_Z19min_max_temperaturev+0x88>)
 80031f6:	f893 2029 	ldrb.w	r2, [r3, #41]	@ 0x29
 80031fa:	490e      	ldr	r1, [pc, #56]	@ (8003234 <_Z19min_max_temperaturev+0x88>)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	440b      	add	r3, r1
 8003200:	3320      	adds	r3, #32
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	429a      	cmp	r2, r3
 8003206:	d207      	bcs.n	8003218 <_Z19min_max_temperaturev+0x6c>
		{
			data.temperatures.highest_temperature = data.temperatures.values[i];
 8003208:	4a0a      	ldr	r2, [pc, #40]	@ (8003234 <_Z19min_max_temperaturev+0x88>)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	4413      	add	r3, r2
 800320e:	3320      	adds	r3, #32
 8003210:	781a      	ldrb	r2, [r3, #0]
 8003212:	4b08      	ldr	r3, [pc, #32]	@ (8003234 <_Z19min_max_temperaturev+0x88>)
 8003214:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
	for(unsigned int i = 1; i < NUMBER_OF_TEMPERATURES; i++)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	3301      	adds	r3, #1
 800321c:	607b      	str	r3, [r7, #4]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2b07      	cmp	r3, #7
 8003222:	d9d5      	bls.n	80031d0 <_Z19min_max_temperaturev+0x24>
		}
	}
}
 8003224:	bf00      	nop
 8003226:	bf00      	nop
 8003228:	370c      	adds	r7, #12
 800322a:	46bd      	mov	sp, r7
 800322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003230:	4770      	bx	lr
 8003232:	bf00      	nop
 8003234:	20000aa4 	.word	0x20000aa4

08003238 <_Z16voltage_can_calcv>:

void voltage_can_calc(){
 8003238:	b480      	push	{r7}
 800323a:	b083      	sub	sp, #12
 800323c:	af00      	add	r7, sp, #0
	data.voltages.total = 0;
 800323e:	4b1a      	ldr	r3, [pc, #104]	@ (80032a8 <_Z16voltage_can_calcv+0x70>)
 8003240:	2200      	movs	r2, #0
 8003242:	615a      	str	r2, [r3, #20]
	//voltage calculations for CAN
	for(int i = 0; i < NUMBER_OF_CELLS; i++)
 8003244:	2300      	movs	r3, #0
 8003246:	607b      	str	r3, [r7, #4]
 8003248:	e01b      	b.n	8003282 <_Z16voltage_can_calcv+0x4a>
	{
		data.voltages.total += (uint32_t)data.voltages.cells[i];
 800324a:	4b17      	ldr	r3, [pc, #92]	@ (80032a8 <_Z16voltage_can_calcv+0x70>)
 800324c:	695b      	ldr	r3, [r3, #20]
 800324e:	4916      	ldr	r1, [pc, #88]	@ (80032a8 <_Z16voltage_can_calcv+0x70>)
 8003250:	687a      	ldr	r2, [r7, #4]
 8003252:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8003256:	4413      	add	r3, r2
 8003258:	4a13      	ldr	r2, [pc, #76]	@ (80032a8 <_Z16voltage_can_calcv+0x70>)
 800325a:	6153      	str	r3, [r2, #20]
		data.voltages.cells_can[i] = (uint8_t)(data.voltages.cells[i] / 1000);
 800325c:	4a12      	ldr	r2, [pc, #72]	@ (80032a8 <_Z16voltage_can_calcv+0x70>)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003264:	4a11      	ldr	r2, [pc, #68]	@ (80032ac <_Z16voltage_can_calcv+0x74>)
 8003266:	fba2 2303 	umull	r2, r3, r2, r3
 800326a:	099b      	lsrs	r3, r3, #6
 800326c:	b29b      	uxth	r3, r3
 800326e:	b2d9      	uxtb	r1, r3
 8003270:	4a0d      	ldr	r2, [pc, #52]	@ (80032a8 <_Z16voltage_can_calcv+0x70>)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4413      	add	r3, r2
 8003276:	330c      	adds	r3, #12
 8003278:	460a      	mov	r2, r1
 800327a:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < NUMBER_OF_CELLS; i++)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	3301      	adds	r3, #1
 8003280:	607b      	str	r3, [r7, #4]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2b05      	cmp	r3, #5
 8003286:	dde0      	ble.n	800324a <_Z16voltage_can_calcv+0x12>
	}

	data.voltages.total_can = data.voltages.total / 100;
 8003288:	4b07      	ldr	r3, [pc, #28]	@ (80032a8 <_Z16voltage_can_calcv+0x70>)
 800328a:	695b      	ldr	r3, [r3, #20]
 800328c:	4a08      	ldr	r2, [pc, #32]	@ (80032b0 <_Z16voltage_can_calcv+0x78>)
 800328e:	fba2 2303 	umull	r2, r3, r2, r3
 8003292:	095b      	lsrs	r3, r3, #5
 8003294:	b29a      	uxth	r2, r3
 8003296:	4b04      	ldr	r3, [pc, #16]	@ (80032a8 <_Z16voltage_can_calcv+0x70>)
 8003298:	831a      	strh	r2, [r3, #24]
}
 800329a:	bf00      	nop
 800329c:	370c      	adds	r7, #12
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr
 80032a6:	bf00      	nop
 80032a8:	20000aa4 	.word	0x20000aa4
 80032ac:	10624dd3 	.word	0x10624dd3
 80032b0:	51eb851f 	.word	0x51eb851f

080032b4 <_Z18start_ltc_functionPv>:
/**
 * Brief:	ltc_task main function
 * Param:	None
 * Retval:	None
 */
void start_ltc_function(void *argument){
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b082      	sub	sp, #8
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
	  init_PEC15_Table();
 80032bc:	f7ff fa64 	bl	8002788 <_Z16init_PEC15_Tablev>
	for(;;){

		osDelay(1);
 80032c0:	2001      	movs	r0, #1
 80032c2:	f00d fa95 	bl	80107f0 <osDelay>
		LTC_start_cell_adc();
 80032c6:	f7ff faeb 	bl	80028a0 <_Z18LTC_start_cell_adcv>
		osDelay(30);
 80032ca:	201e      	movs	r0, #30
 80032cc:	f00d fa90 	bl	80107f0 <osDelay>

		LTC_get_values_adc(data.voltages.cells);
 80032d0:	4806      	ldr	r0, [pc, #24]	@ (80032ec <_Z18start_ltc_functionPv+0x38>)
 80032d2:	f7ff fb77 	bl	80029c4 <_Z18LTC_get_values_adcPt>

		min_max_voltage();
 80032d6:	f7ff ff29 	bl	800312c <_Z15min_max_voltagev>

		voltage_can_calc();
 80032da:	f7ff ffad 	bl	8003238 <_Z16voltage_can_calcv>

		get_temperatures();
 80032de:	f7ff fedd 	bl	800309c <_Z16get_temperaturesv>

		min_max_temperature();
 80032e2:	f7ff ff63 	bl	80031ac <_Z19min_max_temperaturev>
		osDelay(1);
 80032e6:	bf00      	nop
 80032e8:	e7ea      	b.n	80032c0 <_Z18start_ltc_functionPv+0xc>
 80032ea:	bf00      	nop
 80032ec:	20000aa4 	.word	0x20000aa4

080032f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80032f4:	f002 f861 	bl	80053ba <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80032f8:	f000 f894 	bl	8003424 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80032fc:	f000 fcae 	bl	8003c5c <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8003300:	f000 fc6e 	bl	8003be0 <_ZL11MX_DMA_Initv>
  MX_ADC1_Init();
 8003304:	f000 f8f2 	bl	80034ec <_ZL12MX_ADC1_Initv>
  MX_ADC2_Init();
 8003308:	f000 fa0e 	bl	8003728 <_ZL12MX_ADC2_Initv>
  MX_CAN1_Init();
 800330c:	f000 fa7a 	bl	8003804 <_ZL12MX_CAN1_Initv>
  MX_RTC_Init();
 8003310:	f000 fab4 	bl	800387c <_ZL11MX_RTC_Initv>
  MX_SPI1_Init();
 8003314:	f000 fb22 	bl	800395c <_ZL12MX_SPI1_Initv>
  MX_TIM3_Init();
 8003318:	f000 fb62 	bl	80039e0 <_ZL12MX_TIM3_Initv>
  MX_TIM6_Init();
 800331c:	f000 fbbe 	bl	8003a9c <_ZL12MX_TIM6_Initv>
  MX_TIM8_Init();
 8003320:	f000 fbfc 	bl	8003b1c <_ZL12MX_TIM8_Initv>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8003324:	f00d f988 	bl	8010638 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8003328:	4a28      	ldr	r2, [pc, #160]	@ (80033cc <main+0xdc>)
 800332a:	2100      	movs	r1, #0
 800332c:	4828      	ldr	r0, [pc, #160]	@ (80033d0 <main+0xe0>)
 800332e:	f00d f9cd 	bl	80106cc <osThreadNew>
 8003332:	4603      	mov	r3, r0
 8003334:	4a27      	ldr	r2, [pc, #156]	@ (80033d4 <main+0xe4>)
 8003336:	6013      	str	r3, [r2, #0]

  /* creation of ltc_task */
  ltc_taskHandle = osThreadNew(start_ltc_function, NULL, &ltc_task_attributes);
 8003338:	4a27      	ldr	r2, [pc, #156]	@ (80033d8 <main+0xe8>)
 800333a:	2100      	movs	r1, #0
 800333c:	4827      	ldr	r0, [pc, #156]	@ (80033dc <main+0xec>)
 800333e:	f00d f9c5 	bl	80106cc <osThreadNew>
 8003342:	4603      	mov	r3, r0
 8003344:	4a26      	ldr	r2, [pc, #152]	@ (80033e0 <main+0xf0>)
 8003346:	6013      	str	r3, [r2, #0]

  /* creation of soc_update_task */
  soc_update_taskHandle = osThreadNew(start_soc_function, NULL, &soc_update_task_attributes);
 8003348:	4a26      	ldr	r2, [pc, #152]	@ (80033e4 <main+0xf4>)
 800334a:	2100      	movs	r1, #0
 800334c:	4826      	ldr	r0, [pc, #152]	@ (80033e8 <main+0xf8>)
 800334e:	f00d f9bd 	bl	80106cc <osThreadNew>
 8003352:	4603      	mov	r3, r0
 8003354:	4a25      	ldr	r2, [pc, #148]	@ (80033ec <main+0xfc>)
 8003356:	6013      	str	r3, [r2, #0]

  /* creation of balance_task */
  balance_taskHandle = osThreadNew(start_balance_function, NULL, &balance_task_attributes);
 8003358:	4a25      	ldr	r2, [pc, #148]	@ (80033f0 <main+0x100>)
 800335a:	2100      	movs	r1, #0
 800335c:	4825      	ldr	r0, [pc, #148]	@ (80033f4 <main+0x104>)
 800335e:	f00d f9b5 	bl	80106cc <osThreadNew>
 8003362:	4603      	mov	r3, r0
 8003364:	4a24      	ldr	r2, [pc, #144]	@ (80033f8 <main+0x108>)
 8003366:	6013      	str	r3, [r2, #0]

  /* creation of comm_err_task */
  comm_err_taskHandle = osThreadNew(start_comm_err_function, NULL, &comm_err_task_attributes);
 8003368:	4a24      	ldr	r2, [pc, #144]	@ (80033fc <main+0x10c>)
 800336a:	2100      	movs	r1, #0
 800336c:	4824      	ldr	r0, [pc, #144]	@ (8003400 <main+0x110>)
 800336e:	f00d f9ad 	bl	80106cc <osThreadNew>
 8003372:	4603      	mov	r3, r0
 8003374:	4a23      	ldr	r2, [pc, #140]	@ (8003404 <main+0x114>)
 8003376:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */


  osDelay(2000);
 8003378:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800337c:	f00d fa38 	bl	80107f0 <osDelay>
  HAL_GPIO_WritePin(EFUSE_GPIO_Port, EFUSE_Pin, GPIO_PIN_SET);
 8003380:	2201      	movs	r2, #1
 8003382:	2104      	movs	r1, #4
 8003384:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003388:	f005 f932 	bl	80085f0 <HAL_GPIO_WritePin>
  HAL_TIM_Base_Start_IT(&htim3);
 800338c:	481e      	ldr	r0, [pc, #120]	@ (8003408 <main+0x118>)
 800338e:	f009 fa7f 	bl	800c890 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim6);
 8003392:	481e      	ldr	r0, [pc, #120]	@ (800340c <main+0x11c>)
 8003394:	f009 fa14 	bl	800c7c0 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim8);
 8003398:	481d      	ldr	r0, [pc, #116]	@ (8003410 <main+0x120>)
 800339a:	f009 fa11 	bl	800c7c0 <HAL_TIM_Base_Start>


  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 800339e:	217f      	movs	r1, #127	@ 0x7f
 80033a0:	481c      	ldr	r0, [pc, #112]	@ (8003414 <main+0x124>)
 80033a2:	f003 fca1 	bl	8006ce8 <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 80033a6:	217f      	movs	r1, #127	@ 0x7f
 80033a8:	481b      	ldr	r0, [pc, #108]	@ (8003418 <main+0x128>)
 80033aa:	f003 fc9d 	bl	8006ce8 <HAL_ADCEx_Calibration_Start>

  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)data.temperatures.adc, MAX_NUMBER_OF_TEMPERATURES);
 80033ae:	2208      	movs	r2, #8
 80033b0:	491a      	ldr	r1, [pc, #104]	@ (800341c <main+0x12c>)
 80033b2:	4818      	ldr	r0, [pc, #96]	@ (8003414 <main+0x124>)
 80033b4:	f002 fbda 	bl	8005b6c <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc2, (uint32_t*)data.current.adc, NUMBER_OF_CS_SAMPLES);
 80033b8:	2264      	movs	r2, #100	@ 0x64
 80033ba:	4919      	ldr	r1, [pc, #100]	@ (8003420 <main+0x130>)
 80033bc:	4816      	ldr	r0, [pc, #88]	@ (8003418 <main+0x128>)
 80033be:	f002 fbd5 	bl	8005b6c <HAL_ADC_Start_DMA>

  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80033c2:	f00d f95d 	bl	8010680 <osKernelStart>
  /* USER CODE BEGIN WHILE */




  while (1)
 80033c6:	bf00      	nop
 80033c8:	e7fd      	b.n	80033c6 <main+0xd6>
 80033ca:	bf00      	nop
 80033cc:	080173a8 	.word	0x080173a8
 80033d0:	08003d81 	.word	0x08003d81
 80033d4:	20001280 	.word	0x20001280
 80033d8:	080173cc 	.word	0x080173cc
 80033dc:	080032b5 	.word	0x080032b5
 80033e0:	20001284 	.word	0x20001284
 80033e4:	080173f0 	.word	0x080173f0
 80033e8:	08004911 	.word	0x08004911
 80033ec:	20001b30 	.word	0x20001b30
 80033f0:	08017414 	.word	0x08017414
 80033f4:	0800106d 	.word	0x0800106d
 80033f8:	200023dc 	.word	0x200023dc
 80033fc:	08017438 	.word	0x08017438
 8003400:	08001971 	.word	0x08001971
 8003404:	20002c88 	.word	0x20002c88
 8003408:	2000119c 	.word	0x2000119c
 800340c:	200011e8 	.word	0x200011e8
 8003410:	20001234 	.word	0x20001234
 8003414:	20000f4c 	.word	0x20000f4c
 8003418:	20000fb4 	.word	0x20000fb4
 800341c:	20000ad0 	.word	0x20000ad0
 8003420:	20000ae0 	.word	0x20000ae0

08003424 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b098      	sub	sp, #96	@ 0x60
 8003428:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800342a:	f107 0318 	add.w	r3, r7, #24
 800342e:	2248      	movs	r2, #72	@ 0x48
 8003430:	2100      	movs	r1, #0
 8003432:	4618      	mov	r0, r3
 8003434:	f011 fc03 	bl	8014c3e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003438:	1d3b      	adds	r3, r7, #4
 800343a:	2200      	movs	r2, #0
 800343c:	601a      	str	r2, [r3, #0]
 800343e:	605a      	str	r2, [r3, #4]
 8003440:	609a      	str	r2, [r3, #8]
 8003442:	60da      	str	r2, [r3, #12]
 8003444:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8003446:	2000      	movs	r0, #0
 8003448:	f006 faca 	bl	80099e0 <HAL_PWREx_ControlVoltageScaling>
 800344c:	4603      	mov	r3, r0
 800344e:	2b00      	cmp	r3, #0
 8003450:	bf14      	ite	ne
 8003452:	2301      	movne	r3, #1
 8003454:	2300      	moveq	r3, #0
 8003456:	b2db      	uxtb	r3, r3
 8003458:	2b00      	cmp	r3, #0
 800345a:	d001      	beq.n	8003460 <SystemClock_Config+0x3c>
  {
    Error_Handler();
 800345c:	f000 fcac 	bl	8003db8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8003460:	232a      	movs	r3, #42	@ 0x2a
 8003462:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_LSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003464:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003468:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800346a:	2301      	movs	r3, #1
 800346c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800346e:	2340      	movs	r3, #64	@ 0x40
 8003470:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003472:	2301      	movs	r3, #1
 8003474:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003476:	2302      	movs	r3, #2
 8003478:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800347a:	2302      	movs	r3, #2
 800347c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLM = 2;
 800347e:	2302      	movs	r3, #2
 8003480:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLN = 16;
 8003482:	2310      	movs	r3, #16
 8003484:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003486:	2302      	movs	r3, #2
 8003488:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800348a:	2302      	movs	r3, #2
 800348c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800348e:	2302      	movs	r3, #2
 8003490:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003492:	f107 0318 	add.w	r3, r7, #24
 8003496:	4618      	mov	r0, r3
 8003498:	f006 fbac 	bl	8009bf4 <HAL_RCC_OscConfig>
 800349c:	4603      	mov	r3, r0
 800349e:	2b00      	cmp	r3, #0
 80034a0:	bf14      	ite	ne
 80034a2:	2301      	movne	r3, #1
 80034a4:	2300      	moveq	r3, #0
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d001      	beq.n	80034b0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80034ac:	f000 fc84 	bl	8003db8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80034b0:	230f      	movs	r3, #15
 80034b2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80034b4:	2303      	movs	r3, #3
 80034b6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80034b8:	2300      	movs	r3, #0
 80034ba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80034bc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80034c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80034c2:	2300      	movs	r3, #0
 80034c4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80034c6:	1d3b      	adds	r3, r7, #4
 80034c8:	2103      	movs	r1, #3
 80034ca:	4618      	mov	r0, r3
 80034cc:	f007 f80e 	bl	800a4ec <HAL_RCC_ClockConfig>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	bf14      	ite	ne
 80034d6:	2301      	movne	r3, #1
 80034d8:	2300      	moveq	r3, #0
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d001      	beq.n	80034e4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80034e0:	f000 fc6a 	bl	8003db8 <Error_Handler>
  }
}
 80034e4:	bf00      	nop
 80034e6:	3760      	adds	r7, #96	@ 0x60
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}

080034ec <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b08a      	sub	sp, #40	@ 0x28
 80034f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80034f2:	f107 031c 	add.w	r3, r7, #28
 80034f6:	2200      	movs	r2, #0
 80034f8:	601a      	str	r2, [r3, #0]
 80034fa:	605a      	str	r2, [r3, #4]
 80034fc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80034fe:	1d3b      	adds	r3, r7, #4
 8003500:	2200      	movs	r2, #0
 8003502:	601a      	str	r2, [r3, #0]
 8003504:	605a      	str	r2, [r3, #4]
 8003506:	609a      	str	r2, [r3, #8]
 8003508:	60da      	str	r2, [r3, #12]
 800350a:	611a      	str	r2, [r3, #16]
 800350c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800350e:	4b7c      	ldr	r3, [pc, #496]	@ (8003700 <_ZL12MX_ADC1_Initv+0x214>)
 8003510:	4a7c      	ldr	r2, [pc, #496]	@ (8003704 <_ZL12MX_ADC1_Initv+0x218>)
 8003512:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8003514:	4b7a      	ldr	r3, [pc, #488]	@ (8003700 <_ZL12MX_ADC1_Initv+0x214>)
 8003516:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800351a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800351c:	4b78      	ldr	r3, [pc, #480]	@ (8003700 <_ZL12MX_ADC1_Initv+0x214>)
 800351e:	2200      	movs	r2, #0
 8003520:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003522:	4b77      	ldr	r3, [pc, #476]	@ (8003700 <_ZL12MX_ADC1_Initv+0x214>)
 8003524:	2200      	movs	r2, #0
 8003526:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8003528:	4b75      	ldr	r3, [pc, #468]	@ (8003700 <_ZL12MX_ADC1_Initv+0x214>)
 800352a:	2201      	movs	r2, #1
 800352c:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800352e:	4b74      	ldr	r3, [pc, #464]	@ (8003700 <_ZL12MX_ADC1_Initv+0x214>)
 8003530:	2204      	movs	r2, #4
 8003532:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8003534:	4b72      	ldr	r3, [pc, #456]	@ (8003700 <_ZL12MX_ADC1_Initv+0x214>)
 8003536:	2200      	movs	r2, #0
 8003538:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800353a:	4b71      	ldr	r3, [pc, #452]	@ (8003700 <_ZL12MX_ADC1_Initv+0x214>)
 800353c:	2201      	movs	r2, #1
 800353e:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 8;
 8003540:	4b6f      	ldr	r3, [pc, #444]	@ (8003700 <_ZL12MX_ADC1_Initv+0x214>)
 8003542:	2208      	movs	r2, #8
 8003544:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003546:	4b6e      	ldr	r3, [pc, #440]	@ (8003700 <_ZL12MX_ADC1_Initv+0x214>)
 8003548:	2200      	movs	r2, #0
 800354a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800354e:	4b6c      	ldr	r3, [pc, #432]	@ (8003700 <_ZL12MX_ADC1_Initv+0x214>)
 8003550:	2200      	movs	r2, #0
 8003552:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003554:	4b6a      	ldr	r3, [pc, #424]	@ (8003700 <_ZL12MX_ADC1_Initv+0x214>)
 8003556:	2200      	movs	r2, #0
 8003558:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800355a:	4b69      	ldr	r3, [pc, #420]	@ (8003700 <_ZL12MX_ADC1_Initv+0x214>)
 800355c:	2201      	movs	r2, #1
 800355e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003562:	4b67      	ldr	r3, [pc, #412]	@ (8003700 <_ZL12MX_ADC1_Initv+0x214>)
 8003564:	2200      	movs	r2, #0
 8003566:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8003568:	4b65      	ldr	r3, [pc, #404]	@ (8003700 <_ZL12MX_ADC1_Initv+0x214>)
 800356a:	2200      	movs	r2, #0
 800356c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003570:	4863      	ldr	r0, [pc, #396]	@ (8003700 <_ZL12MX_ADC1_Initv+0x214>)
 8003572:	f002 f9af 	bl	80058d4 <HAL_ADC_Init>
 8003576:	4603      	mov	r3, r0
 8003578:	2b00      	cmp	r3, #0
 800357a:	bf14      	ite	ne
 800357c:	2301      	movne	r3, #1
 800357e:	2300      	moveq	r3, #0
 8003580:	b2db      	uxtb	r3, r3
 8003582:	2b00      	cmp	r3, #0
 8003584:	d001      	beq.n	800358a <_ZL12MX_ADC1_Initv+0x9e>
  {
    Error_Handler();
 8003586:	f000 fc17 	bl	8003db8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800358a:	2300      	movs	r3, #0
 800358c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800358e:	f107 031c 	add.w	r3, r7, #28
 8003592:	4619      	mov	r1, r3
 8003594:	485a      	ldr	r0, [pc, #360]	@ (8003700 <_ZL12MX_ADC1_Initv+0x214>)
 8003596:	f003 fc39 	bl	8006e0c <HAL_ADCEx_MultiModeConfigChannel>
 800359a:	4603      	mov	r3, r0
 800359c:	2b00      	cmp	r3, #0
 800359e:	bf14      	ite	ne
 80035a0:	2301      	movne	r3, #1
 80035a2:	2300      	moveq	r3, #0
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d001      	beq.n	80035ae <_ZL12MX_ADC1_Initv+0xc2>
  {
    Error_Handler();
 80035aa:	f000 fc05 	bl	8003db8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80035ae:	4b56      	ldr	r3, [pc, #344]	@ (8003708 <_ZL12MX_ADC1_Initv+0x21c>)
 80035b0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80035b2:	2306      	movs	r3, #6
 80035b4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 80035b6:	2306      	movs	r3, #6
 80035b8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80035ba:	237f      	movs	r3, #127	@ 0x7f
 80035bc:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80035be:	2304      	movs	r3, #4
 80035c0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80035c2:	2300      	movs	r3, #0
 80035c4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80035c6:	1d3b      	adds	r3, r7, #4
 80035c8:	4619      	mov	r1, r3
 80035ca:	484d      	ldr	r0, [pc, #308]	@ (8003700 <_ZL12MX_ADC1_Initv+0x214>)
 80035cc:	f002 fdc4 	bl	8006158 <HAL_ADC_ConfigChannel>
 80035d0:	4603      	mov	r3, r0
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	bf14      	ite	ne
 80035d6:	2301      	movne	r3, #1
 80035d8:	2300      	moveq	r3, #0
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d001      	beq.n	80035e4 <_ZL12MX_ADC1_Initv+0xf8>
  {
    Error_Handler();
 80035e0:	f000 fbea 	bl	8003db8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80035e4:	4b49      	ldr	r3, [pc, #292]	@ (800370c <_ZL12MX_ADC1_Initv+0x220>)
 80035e6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80035e8:	230c      	movs	r3, #12
 80035ea:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80035ec:	1d3b      	adds	r3, r7, #4
 80035ee:	4619      	mov	r1, r3
 80035f0:	4843      	ldr	r0, [pc, #268]	@ (8003700 <_ZL12MX_ADC1_Initv+0x214>)
 80035f2:	f002 fdb1 	bl	8006158 <HAL_ADC_ConfigChannel>
 80035f6:	4603      	mov	r3, r0
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	bf14      	ite	ne
 80035fc:	2301      	movne	r3, #1
 80035fe:	2300      	moveq	r3, #0
 8003600:	b2db      	uxtb	r3, r3
 8003602:	2b00      	cmp	r3, #0
 8003604:	d001      	beq.n	800360a <_ZL12MX_ADC1_Initv+0x11e>
  {
    Error_Handler();
 8003606:	f000 fbd7 	bl	8003db8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800360a:	4b41      	ldr	r3, [pc, #260]	@ (8003710 <_ZL12MX_ADC1_Initv+0x224>)
 800360c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800360e:	2312      	movs	r3, #18
 8003610:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003612:	1d3b      	adds	r3, r7, #4
 8003614:	4619      	mov	r1, r3
 8003616:	483a      	ldr	r0, [pc, #232]	@ (8003700 <_ZL12MX_ADC1_Initv+0x214>)
 8003618:	f002 fd9e 	bl	8006158 <HAL_ADC_ConfigChannel>
 800361c:	4603      	mov	r3, r0
 800361e:	2b00      	cmp	r3, #0
 8003620:	bf14      	ite	ne
 8003622:	2301      	movne	r3, #1
 8003624:	2300      	moveq	r3, #0
 8003626:	b2db      	uxtb	r3, r3
 8003628:	2b00      	cmp	r3, #0
 800362a:	d001      	beq.n	8003630 <_ZL12MX_ADC1_Initv+0x144>
  {
    Error_Handler();
 800362c:	f000 fbc4 	bl	8003db8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8003630:	4b38      	ldr	r3, [pc, #224]	@ (8003714 <_ZL12MX_ADC1_Initv+0x228>)
 8003632:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8003634:	2318      	movs	r3, #24
 8003636:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003638:	1d3b      	adds	r3, r7, #4
 800363a:	4619      	mov	r1, r3
 800363c:	4830      	ldr	r0, [pc, #192]	@ (8003700 <_ZL12MX_ADC1_Initv+0x214>)
 800363e:	f002 fd8b 	bl	8006158 <HAL_ADC_ConfigChannel>
 8003642:	4603      	mov	r3, r0
 8003644:	2b00      	cmp	r3, #0
 8003646:	bf14      	ite	ne
 8003648:	2301      	movne	r3, #1
 800364a:	2300      	moveq	r3, #0
 800364c:	b2db      	uxtb	r3, r3
 800364e:	2b00      	cmp	r3, #0
 8003650:	d001      	beq.n	8003656 <_ZL12MX_ADC1_Initv+0x16a>
  {
    Error_Handler();
 8003652:	f000 fbb1 	bl	8003db8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8003656:	4b30      	ldr	r3, [pc, #192]	@ (8003718 <_ZL12MX_ADC1_Initv+0x22c>)
 8003658:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800365a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800365e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003660:	1d3b      	adds	r3, r7, #4
 8003662:	4619      	mov	r1, r3
 8003664:	4826      	ldr	r0, [pc, #152]	@ (8003700 <_ZL12MX_ADC1_Initv+0x214>)
 8003666:	f002 fd77 	bl	8006158 <HAL_ADC_ConfigChannel>
 800366a:	4603      	mov	r3, r0
 800366c:	2b00      	cmp	r3, #0
 800366e:	bf14      	ite	ne
 8003670:	2301      	movne	r3, #1
 8003672:	2300      	moveq	r3, #0
 8003674:	b2db      	uxtb	r3, r3
 8003676:	2b00      	cmp	r3, #0
 8003678:	d001      	beq.n	800367e <_ZL12MX_ADC1_Initv+0x192>
  {
    Error_Handler();
 800367a:	f000 fb9d 	bl	8003db8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800367e:	4b27      	ldr	r3, [pc, #156]	@ (800371c <_ZL12MX_ADC1_Initv+0x230>)
 8003680:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8003682:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8003686:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003688:	1d3b      	adds	r3, r7, #4
 800368a:	4619      	mov	r1, r3
 800368c:	481c      	ldr	r0, [pc, #112]	@ (8003700 <_ZL12MX_ADC1_Initv+0x214>)
 800368e:	f002 fd63 	bl	8006158 <HAL_ADC_ConfigChannel>
 8003692:	4603      	mov	r3, r0
 8003694:	2b00      	cmp	r3, #0
 8003696:	bf14      	ite	ne
 8003698:	2301      	movne	r3, #1
 800369a:	2300      	moveq	r3, #0
 800369c:	b2db      	uxtb	r3, r3
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d001      	beq.n	80036a6 <_ZL12MX_ADC1_Initv+0x1ba>
  {
    Error_Handler();
 80036a2:	f000 fb89 	bl	8003db8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80036a6:	4b1e      	ldr	r3, [pc, #120]	@ (8003720 <_ZL12MX_ADC1_Initv+0x234>)
 80036a8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80036aa:	f44f 7386 	mov.w	r3, #268	@ 0x10c
 80036ae:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80036b0:	1d3b      	adds	r3, r7, #4
 80036b2:	4619      	mov	r1, r3
 80036b4:	4812      	ldr	r0, [pc, #72]	@ (8003700 <_ZL12MX_ADC1_Initv+0x214>)
 80036b6:	f002 fd4f 	bl	8006158 <HAL_ADC_ConfigChannel>
 80036ba:	4603      	mov	r3, r0
 80036bc:	2b00      	cmp	r3, #0
 80036be:	bf14      	ite	ne
 80036c0:	2301      	movne	r3, #1
 80036c2:	2300      	moveq	r3, #0
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d001      	beq.n	80036ce <_ZL12MX_ADC1_Initv+0x1e2>
  {
    Error_Handler();
 80036ca:	f000 fb75 	bl	8003db8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80036ce:	4b15      	ldr	r3, [pc, #84]	@ (8003724 <_ZL12MX_ADC1_Initv+0x238>)
 80036d0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80036d2:	f44f 7389 	mov.w	r3, #274	@ 0x112
 80036d6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80036d8:	1d3b      	adds	r3, r7, #4
 80036da:	4619      	mov	r1, r3
 80036dc:	4808      	ldr	r0, [pc, #32]	@ (8003700 <_ZL12MX_ADC1_Initv+0x214>)
 80036de:	f002 fd3b 	bl	8006158 <HAL_ADC_ConfigChannel>
 80036e2:	4603      	mov	r3, r0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	bf14      	ite	ne
 80036e8:	2301      	movne	r3, #1
 80036ea:	2300      	moveq	r3, #0
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d001      	beq.n	80036f6 <_ZL12MX_ADC1_Initv+0x20a>
  {
    Error_Handler();
 80036f2:	f000 fb61 	bl	8003db8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80036f6:	bf00      	nop
 80036f8:	3728      	adds	r7, #40	@ 0x28
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	bf00      	nop
 8003700:	20000f4c 	.word	0x20000f4c
 8003704:	50040000 	.word	0x50040000
 8003708:	21800100 	.word	0x21800100
 800370c:	25b00200 	.word	0x25b00200
 8003710:	2a000400 	.word	0x2a000400
 8003714:	2e300800 	.word	0x2e300800
 8003718:	32601000 	.word	0x32601000
 800371c:	36902000 	.word	0x36902000
 8003720:	3ac04000 	.word	0x3ac04000
 8003724:	3ef08000 	.word	0x3ef08000

08003728 <_ZL12MX_ADC2_Initv>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b086      	sub	sp, #24
 800372c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800372e:	463b      	mov	r3, r7
 8003730:	2200      	movs	r2, #0
 8003732:	601a      	str	r2, [r3, #0]
 8003734:	605a      	str	r2, [r3, #4]
 8003736:	609a      	str	r2, [r3, #8]
 8003738:	60da      	str	r2, [r3, #12]
 800373a:	611a      	str	r2, [r3, #16]
 800373c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800373e:	4b2e      	ldr	r3, [pc, #184]	@ (80037f8 <_ZL12MX_ADC2_Initv+0xd0>)
 8003740:	4a2e      	ldr	r2, [pc, #184]	@ (80037fc <_ZL12MX_ADC2_Initv+0xd4>)
 8003742:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8003744:	4b2c      	ldr	r3, [pc, #176]	@ (80037f8 <_ZL12MX_ADC2_Initv+0xd0>)
 8003746:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800374a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800374c:	4b2a      	ldr	r3, [pc, #168]	@ (80037f8 <_ZL12MX_ADC2_Initv+0xd0>)
 800374e:	2200      	movs	r2, #0
 8003750:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003752:	4b29      	ldr	r3, [pc, #164]	@ (80037f8 <_ZL12MX_ADC2_Initv+0xd0>)
 8003754:	2200      	movs	r2, #0
 8003756:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003758:	4b27      	ldr	r3, [pc, #156]	@ (80037f8 <_ZL12MX_ADC2_Initv+0xd0>)
 800375a:	2200      	movs	r2, #0
 800375c:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800375e:	4b26      	ldr	r3, [pc, #152]	@ (80037f8 <_ZL12MX_ADC2_Initv+0xd0>)
 8003760:	2204      	movs	r2, #4
 8003762:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8003764:	4b24      	ldr	r3, [pc, #144]	@ (80037f8 <_ZL12MX_ADC2_Initv+0xd0>)
 8003766:	2200      	movs	r2, #0
 8003768:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = ENABLE;
 800376a:	4b23      	ldr	r3, [pc, #140]	@ (80037f8 <_ZL12MX_ADC2_Initv+0xd0>)
 800376c:	2201      	movs	r2, #1
 800376e:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8003770:	4b21      	ldr	r3, [pc, #132]	@ (80037f8 <_ZL12MX_ADC2_Initv+0xd0>)
 8003772:	2201      	movs	r2, #1
 8003774:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8003776:	4b20      	ldr	r3, [pc, #128]	@ (80037f8 <_ZL12MX_ADC2_Initv+0xd0>)
 8003778:	2200      	movs	r2, #0
 800377a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800377e:	4b1e      	ldr	r3, [pc, #120]	@ (80037f8 <_ZL12MX_ADC2_Initv+0xd0>)
 8003780:	2200      	movs	r2, #0
 8003782:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003784:	4b1c      	ldr	r3, [pc, #112]	@ (80037f8 <_ZL12MX_ADC2_Initv+0xd0>)
 8003786:	2200      	movs	r2, #0
 8003788:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800378a:	4b1b      	ldr	r3, [pc, #108]	@ (80037f8 <_ZL12MX_ADC2_Initv+0xd0>)
 800378c:	2201      	movs	r2, #1
 800378e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003792:	4b19      	ldr	r3, [pc, #100]	@ (80037f8 <_ZL12MX_ADC2_Initv+0xd0>)
 8003794:	2200      	movs	r2, #0
 8003796:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8003798:	4b17      	ldr	r3, [pc, #92]	@ (80037f8 <_ZL12MX_ADC2_Initv+0xd0>)
 800379a:	2200      	movs	r2, #0
 800379c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80037a0:	4815      	ldr	r0, [pc, #84]	@ (80037f8 <_ZL12MX_ADC2_Initv+0xd0>)
 80037a2:	f002 f897 	bl	80058d4 <HAL_ADC_Init>
 80037a6:	4603      	mov	r3, r0
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	bf14      	ite	ne
 80037ac:	2301      	movne	r3, #1
 80037ae:	2300      	moveq	r3, #0
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d001      	beq.n	80037ba <_ZL12MX_ADC2_Initv+0x92>
  {
    Error_Handler();
 80037b6:	f000 faff 	bl	8003db8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 80037ba:	4b11      	ldr	r3, [pc, #68]	@ (8003800 <_ZL12MX_ADC2_Initv+0xd8>)
 80037bc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80037be:	2306      	movs	r3, #6
 80037c0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 80037c2:	2306      	movs	r3, #6
 80037c4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80037c6:	237f      	movs	r3, #127	@ 0x7f
 80037c8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_1;
 80037ca:	2300      	movs	r3, #0
 80037cc:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80037ce:	2300      	movs	r3, #0
 80037d0:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80037d2:	463b      	mov	r3, r7
 80037d4:	4619      	mov	r1, r3
 80037d6:	4808      	ldr	r0, [pc, #32]	@ (80037f8 <_ZL12MX_ADC2_Initv+0xd0>)
 80037d8:	f002 fcbe 	bl	8006158 <HAL_ADC_ConfigChannel>
 80037dc:	4603      	mov	r3, r0
 80037de:	2b00      	cmp	r3, #0
 80037e0:	bf14      	ite	ne
 80037e2:	2301      	movne	r3, #1
 80037e4:	2300      	moveq	r3, #0
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d001      	beq.n	80037f0 <_ZL12MX_ADC2_Initv+0xc8>
  {
    Error_Handler();
 80037ec:	f000 fae4 	bl	8003db8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80037f0:	bf00      	nop
 80037f2:	3718      	adds	r7, #24
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}
 80037f8:	20000fb4 	.word	0x20000fb4
 80037fc:	50040100 	.word	0x50040100
 8003800:	43210000 	.word	0x43210000

08003804 <_ZL12MX_CAN1_Initv>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8003808:	4b1a      	ldr	r3, [pc, #104]	@ (8003874 <_ZL12MX_CAN1_Initv+0x70>)
 800380a:	4a1b      	ldr	r2, [pc, #108]	@ (8003878 <_ZL12MX_CAN1_Initv+0x74>)
 800380c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 2;
 800380e:	4b19      	ldr	r3, [pc, #100]	@ (8003874 <_ZL12MX_CAN1_Initv+0x70>)
 8003810:	2202      	movs	r2, #2
 8003812:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8003814:	4b17      	ldr	r3, [pc, #92]	@ (8003874 <_ZL12MX_CAN1_Initv+0x70>)
 8003816:	2200      	movs	r2, #0
 8003818:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800381a:	4b16      	ldr	r3, [pc, #88]	@ (8003874 <_ZL12MX_CAN1_Initv+0x70>)
 800381c:	2200      	movs	r2, #0
 800381e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8003820:	4b14      	ldr	r3, [pc, #80]	@ (8003874 <_ZL12MX_CAN1_Initv+0x70>)
 8003822:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 8003826:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8003828:	4b12      	ldr	r3, [pc, #72]	@ (8003874 <_ZL12MX_CAN1_Initv+0x70>)
 800382a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800382e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8003830:	4b10      	ldr	r3, [pc, #64]	@ (8003874 <_ZL12MX_CAN1_Initv+0x70>)
 8003832:	2200      	movs	r2, #0
 8003834:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8003836:	4b0f      	ldr	r3, [pc, #60]	@ (8003874 <_ZL12MX_CAN1_Initv+0x70>)
 8003838:	2200      	movs	r2, #0
 800383a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800383c:	4b0d      	ldr	r3, [pc, #52]	@ (8003874 <_ZL12MX_CAN1_Initv+0x70>)
 800383e:	2200      	movs	r2, #0
 8003840:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8003842:	4b0c      	ldr	r3, [pc, #48]	@ (8003874 <_ZL12MX_CAN1_Initv+0x70>)
 8003844:	2200      	movs	r2, #0
 8003846:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8003848:	4b0a      	ldr	r3, [pc, #40]	@ (8003874 <_ZL12MX_CAN1_Initv+0x70>)
 800384a:	2200      	movs	r2, #0
 800384c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800384e:	4b09      	ldr	r3, [pc, #36]	@ (8003874 <_ZL12MX_CAN1_Initv+0x70>)
 8003850:	2200      	movs	r2, #0
 8003852:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8003854:	4807      	ldr	r0, [pc, #28]	@ (8003874 <_ZL12MX_CAN1_Initv+0x70>)
 8003856:	f003 fb7d 	bl	8006f54 <HAL_CAN_Init>
 800385a:	4603      	mov	r3, r0
 800385c:	2b00      	cmp	r3, #0
 800385e:	bf14      	ite	ne
 8003860:	2301      	movne	r3, #1
 8003862:	2300      	moveq	r3, #0
 8003864:	b2db      	uxtb	r3, r3
 8003866:	2b00      	cmp	r3, #0
 8003868:	d001      	beq.n	800386e <_ZL12MX_CAN1_Initv+0x6a>
  {
    Error_Handler();
 800386a:	f000 faa5 	bl	8003db8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800386e:	bf00      	nop
 8003870:	bd80      	pop	{r7, pc}
 8003872:	bf00      	nop
 8003874:	200010dc 	.word	0x200010dc
 8003878:	40006400 	.word	0x40006400

0800387c <_ZL11MX_RTC_Initv>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b086      	sub	sp, #24
 8003880:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8003882:	1d3b      	adds	r3, r7, #4
 8003884:	2200      	movs	r2, #0
 8003886:	601a      	str	r2, [r3, #0]
 8003888:	605a      	str	r2, [r3, #4]
 800388a:	609a      	str	r2, [r3, #8]
 800388c:	60da      	str	r2, [r3, #12]
 800388e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8003890:	2300      	movs	r3, #0
 8003892:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003894:	4b2f      	ldr	r3, [pc, #188]	@ (8003954 <_ZL11MX_RTC_Initv+0xd8>)
 8003896:	4a30      	ldr	r2, [pc, #192]	@ (8003958 <_ZL11MX_RTC_Initv+0xdc>)
 8003898:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800389a:	4b2e      	ldr	r3, [pc, #184]	@ (8003954 <_ZL11MX_RTC_Initv+0xd8>)
 800389c:	2200      	movs	r2, #0
 800389e:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 80038a0:	4b2c      	ldr	r3, [pc, #176]	@ (8003954 <_ZL11MX_RTC_Initv+0xd8>)
 80038a2:	227f      	movs	r2, #127	@ 0x7f
 80038a4:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 80038a6:	4b2b      	ldr	r3, [pc, #172]	@ (8003954 <_ZL11MX_RTC_Initv+0xd8>)
 80038a8:	22ff      	movs	r2, #255	@ 0xff
 80038aa:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80038ac:	4b29      	ldr	r3, [pc, #164]	@ (8003954 <_ZL11MX_RTC_Initv+0xd8>)
 80038ae:	2200      	movs	r2, #0
 80038b0:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80038b2:	4b28      	ldr	r3, [pc, #160]	@ (8003954 <_ZL11MX_RTC_Initv+0xd8>)
 80038b4:	2200      	movs	r2, #0
 80038b6:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80038b8:	4b26      	ldr	r3, [pc, #152]	@ (8003954 <_ZL11MX_RTC_Initv+0xd8>)
 80038ba:	2200      	movs	r2, #0
 80038bc:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80038be:	4b25      	ldr	r3, [pc, #148]	@ (8003954 <_ZL11MX_RTC_Initv+0xd8>)
 80038c0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80038c4:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 80038c6:	4b23      	ldr	r3, [pc, #140]	@ (8003954 <_ZL11MX_RTC_Initv+0xd8>)
 80038c8:	2200      	movs	r2, #0
 80038ca:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80038cc:	4821      	ldr	r0, [pc, #132]	@ (8003954 <_ZL11MX_RTC_Initv+0xd8>)
 80038ce:	f007 fe37 	bl	800b540 <HAL_RTC_Init>
 80038d2:	4603      	mov	r3, r0
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	bf14      	ite	ne
 80038d8:	2301      	movne	r3, #1
 80038da:	2300      	moveq	r3, #0
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d001      	beq.n	80038e6 <_ZL11MX_RTC_Initv+0x6a>
  {
    Error_Handler();
 80038e2:	f000 fa69 	bl	8003db8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80038e6:	2300      	movs	r3, #0
 80038e8:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80038ea:	2300      	movs	r3, #0
 80038ec:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80038ee:	2300      	movs	r3, #0
 80038f0:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80038f2:	2300      	movs	r3, #0
 80038f4:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80038f6:	2300      	movs	r3, #0
 80038f8:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80038fa:	1d3b      	adds	r3, r7, #4
 80038fc:	2201      	movs	r2, #1
 80038fe:	4619      	mov	r1, r3
 8003900:	4814      	ldr	r0, [pc, #80]	@ (8003954 <_ZL11MX_RTC_Initv+0xd8>)
 8003902:	f007 febb 	bl	800b67c <HAL_RTC_SetTime>
 8003906:	4603      	mov	r3, r0
 8003908:	2b00      	cmp	r3, #0
 800390a:	bf14      	ite	ne
 800390c:	2301      	movne	r3, #1
 800390e:	2300      	moveq	r3, #0
 8003910:	b2db      	uxtb	r3, r3
 8003912:	2b00      	cmp	r3, #0
 8003914:	d001      	beq.n	800391a <_ZL11MX_RTC_Initv+0x9e>
  {
    Error_Handler();
 8003916:	f000 fa4f 	bl	8003db8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800391a:	2301      	movs	r3, #1
 800391c:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800391e:	2301      	movs	r3, #1
 8003920:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8003922:	2301      	movs	r3, #1
 8003924:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8003926:	2300      	movs	r3, #0
 8003928:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800392a:	463b      	mov	r3, r7
 800392c:	2201      	movs	r2, #1
 800392e:	4619      	mov	r1, r3
 8003930:	4808      	ldr	r0, [pc, #32]	@ (8003954 <_ZL11MX_RTC_Initv+0xd8>)
 8003932:	f007 ffa5 	bl	800b880 <HAL_RTC_SetDate>
 8003936:	4603      	mov	r3, r0
 8003938:	2b00      	cmp	r3, #0
 800393a:	bf14      	ite	ne
 800393c:	2301      	movne	r3, #1
 800393e:	2300      	moveq	r3, #0
 8003940:	b2db      	uxtb	r3, r3
 8003942:	2b00      	cmp	r3, #0
 8003944:	d001      	beq.n	800394a <_ZL11MX_RTC_Initv+0xce>
  {
    Error_Handler();
 8003946:	f000 fa37 	bl	8003db8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800394a:	bf00      	nop
 800394c:	3718      	adds	r7, #24
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}
 8003952:	bf00      	nop
 8003954:	20001104 	.word	0x20001104
 8003958:	40002800 	.word	0x40002800

0800395c <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003960:	4b1d      	ldr	r3, [pc, #116]	@ (80039d8 <_ZL12MX_SPI1_Initv+0x7c>)
 8003962:	4a1e      	ldr	r2, [pc, #120]	@ (80039dc <_ZL12MX_SPI1_Initv+0x80>)
 8003964:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003966:	4b1c      	ldr	r3, [pc, #112]	@ (80039d8 <_ZL12MX_SPI1_Initv+0x7c>)
 8003968:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800396c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800396e:	4b1a      	ldr	r3, [pc, #104]	@ (80039d8 <_ZL12MX_SPI1_Initv+0x7c>)
 8003970:	2200      	movs	r2, #0
 8003972:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003974:	4b18      	ldr	r3, [pc, #96]	@ (80039d8 <_ZL12MX_SPI1_Initv+0x7c>)
 8003976:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800397a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800397c:	4b16      	ldr	r3, [pc, #88]	@ (80039d8 <_ZL12MX_SPI1_Initv+0x7c>)
 800397e:	2202      	movs	r2, #2
 8003980:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003982:	4b15      	ldr	r3, [pc, #84]	@ (80039d8 <_ZL12MX_SPI1_Initv+0x7c>)
 8003984:	2201      	movs	r2, #1
 8003986:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003988:	4b13      	ldr	r3, [pc, #76]	@ (80039d8 <_ZL12MX_SPI1_Initv+0x7c>)
 800398a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800398e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8003990:	4b11      	ldr	r3, [pc, #68]	@ (80039d8 <_ZL12MX_SPI1_Initv+0x7c>)
 8003992:	2228      	movs	r2, #40	@ 0x28
 8003994:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003996:	4b10      	ldr	r3, [pc, #64]	@ (80039d8 <_ZL12MX_SPI1_Initv+0x7c>)
 8003998:	2200      	movs	r2, #0
 800399a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800399c:	4b0e      	ldr	r3, [pc, #56]	@ (80039d8 <_ZL12MX_SPI1_Initv+0x7c>)
 800399e:	2200      	movs	r2, #0
 80039a0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80039a2:	4b0d      	ldr	r3, [pc, #52]	@ (80039d8 <_ZL12MX_SPI1_Initv+0x7c>)
 80039a4:	2200      	movs	r2, #0
 80039a6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80039a8:	4b0b      	ldr	r3, [pc, #44]	@ (80039d8 <_ZL12MX_SPI1_Initv+0x7c>)
 80039aa:	2207      	movs	r2, #7
 80039ac:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80039ae:	4b0a      	ldr	r3, [pc, #40]	@ (80039d8 <_ZL12MX_SPI1_Initv+0x7c>)
 80039b0:	2200      	movs	r2, #0
 80039b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80039b4:	4b08      	ldr	r3, [pc, #32]	@ (80039d8 <_ZL12MX_SPI1_Initv+0x7c>)
 80039b6:	2200      	movs	r2, #0
 80039b8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80039ba:	4807      	ldr	r0, [pc, #28]	@ (80039d8 <_ZL12MX_SPI1_Initv+0x7c>)
 80039bc:	f008 f90a 	bl	800bbd4 <HAL_SPI_Init>
 80039c0:	4603      	mov	r3, r0
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	bf14      	ite	ne
 80039c6:	2301      	movne	r3, #1
 80039c8:	2300      	moveq	r3, #0
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d001      	beq.n	80039d4 <_ZL12MX_SPI1_Initv+0x78>
  {
    Error_Handler();
 80039d0:	f000 f9f2 	bl	8003db8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80039d4:	bf00      	nop
 80039d6:	bd80      	pop	{r7, pc}
 80039d8:	20001138 	.word	0x20001138
 80039dc:	40013000 	.word	0x40013000

080039e0 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b088      	sub	sp, #32
 80039e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80039e6:	f107 0310 	add.w	r3, r7, #16
 80039ea:	2200      	movs	r2, #0
 80039ec:	601a      	str	r2, [r3, #0]
 80039ee:	605a      	str	r2, [r3, #4]
 80039f0:	609a      	str	r2, [r3, #8]
 80039f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80039f4:	1d3b      	adds	r3, r7, #4
 80039f6:	2200      	movs	r2, #0
 80039f8:	601a      	str	r2, [r3, #0]
 80039fa:	605a      	str	r2, [r3, #4]
 80039fc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80039fe:	4b25      	ldr	r3, [pc, #148]	@ (8003a94 <_ZL12MX_TIM3_Initv+0xb4>)
 8003a00:	4a25      	ldr	r2, [pc, #148]	@ (8003a98 <_ZL12MX_TIM3_Initv+0xb8>)
 8003a02:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 6399;
 8003a04:	4b23      	ldr	r3, [pc, #140]	@ (8003a94 <_ZL12MX_TIM3_Initv+0xb4>)
 8003a06:	f641 02ff 	movw	r2, #6399	@ 0x18ff
 8003a0a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a0c:	4b21      	ldr	r3, [pc, #132]	@ (8003a94 <_ZL12MX_TIM3_Initv+0xb4>)
 8003a0e:	2200      	movs	r2, #0
 8003a10:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 49;
 8003a12:	4b20      	ldr	r3, [pc, #128]	@ (8003a94 <_ZL12MX_TIM3_Initv+0xb4>)
 8003a14:	2231      	movs	r2, #49	@ 0x31
 8003a16:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a18:	4b1e      	ldr	r3, [pc, #120]	@ (8003a94 <_ZL12MX_TIM3_Initv+0xb4>)
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a1e:	4b1d      	ldr	r3, [pc, #116]	@ (8003a94 <_ZL12MX_TIM3_Initv+0xb4>)
 8003a20:	2200      	movs	r2, #0
 8003a22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003a24:	481b      	ldr	r0, [pc, #108]	@ (8003a94 <_ZL12MX_TIM3_Initv+0xb4>)
 8003a26:	f008 fe73 	bl	800c710 <HAL_TIM_Base_Init>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	bf14      	ite	ne
 8003a30:	2301      	movne	r3, #1
 8003a32:	2300      	moveq	r3, #0
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d001      	beq.n	8003a3e <_ZL12MX_TIM3_Initv+0x5e>
  {
    Error_Handler();
 8003a3a:	f000 f9bd 	bl	8003db8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003a3e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003a42:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003a44:	f107 0310 	add.w	r3, r7, #16
 8003a48:	4619      	mov	r1, r3
 8003a4a:	4812      	ldr	r0, [pc, #72]	@ (8003a94 <_ZL12MX_TIM3_Initv+0xb4>)
 8003a4c:	f009 f892 	bl	800cb74 <HAL_TIM_ConfigClockSource>
 8003a50:	4603      	mov	r3, r0
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	bf14      	ite	ne
 8003a56:	2301      	movne	r3, #1
 8003a58:	2300      	moveq	r3, #0
 8003a5a:	b2db      	uxtb	r3, r3
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d001      	beq.n	8003a64 <_ZL12MX_TIM3_Initv+0x84>
  {
    Error_Handler();
 8003a60:	f000 f9aa 	bl	8003db8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a64:	2300      	movs	r3, #0
 8003a66:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003a6c:	1d3b      	adds	r3, r7, #4
 8003a6e:	4619      	mov	r1, r3
 8003a70:	4808      	ldr	r0, [pc, #32]	@ (8003a94 <_ZL12MX_TIM3_Initv+0xb4>)
 8003a72:	f009 faa5 	bl	800cfc0 <HAL_TIMEx_MasterConfigSynchronization>
 8003a76:	4603      	mov	r3, r0
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	bf14      	ite	ne
 8003a7c:	2301      	movne	r3, #1
 8003a7e:	2300      	moveq	r3, #0
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d001      	beq.n	8003a8a <_ZL12MX_TIM3_Initv+0xaa>
  {
    Error_Handler();
 8003a86:	f000 f997 	bl	8003db8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003a8a:	bf00      	nop
 8003a8c:	3720      	adds	r7, #32
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}
 8003a92:	bf00      	nop
 8003a94:	2000119c 	.word	0x2000119c
 8003a98:	40000400 	.word	0x40000400

08003a9c <_ZL12MX_TIM6_Initv>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b084      	sub	sp, #16
 8003aa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003aa2:	1d3b      	adds	r3, r7, #4
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	601a      	str	r2, [r3, #0]
 8003aa8:	605a      	str	r2, [r3, #4]
 8003aaa:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003aac:	4b19      	ldr	r3, [pc, #100]	@ (8003b14 <_ZL12MX_TIM6_Initv+0x78>)
 8003aae:	4a1a      	ldr	r2, [pc, #104]	@ (8003b18 <_ZL12MX_TIM6_Initv+0x7c>)
 8003ab0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 2399;
 8003ab2:	4b18      	ldr	r3, [pc, #96]	@ (8003b14 <_ZL12MX_TIM6_Initv+0x78>)
 8003ab4:	f640 125f 	movw	r2, #2399	@ 0x95f
 8003ab8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003aba:	4b16      	ldr	r3, [pc, #88]	@ (8003b14 <_ZL12MX_TIM6_Initv+0x78>)
 8003abc:	2200      	movs	r2, #0
 8003abe:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9;
 8003ac0:	4b14      	ldr	r3, [pc, #80]	@ (8003b14 <_ZL12MX_TIM6_Initv+0x78>)
 8003ac2:	2209      	movs	r2, #9
 8003ac4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ac6:	4b13      	ldr	r3, [pc, #76]	@ (8003b14 <_ZL12MX_TIM6_Initv+0x78>)
 8003ac8:	2200      	movs	r2, #0
 8003aca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003acc:	4811      	ldr	r0, [pc, #68]	@ (8003b14 <_ZL12MX_TIM6_Initv+0x78>)
 8003ace:	f008 fe1f 	bl	800c710 <HAL_TIM_Base_Init>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	bf14      	ite	ne
 8003ad8:	2301      	movne	r3, #1
 8003ada:	2300      	moveq	r3, #0
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d001      	beq.n	8003ae6 <_ZL12MX_TIM6_Initv+0x4a>
  {
    Error_Handler();
 8003ae2:	f000 f969 	bl	8003db8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003ae6:	2320      	movs	r3, #32
 8003ae8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003aea:	2300      	movs	r3, #0
 8003aec:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003aee:	1d3b      	adds	r3, r7, #4
 8003af0:	4619      	mov	r1, r3
 8003af2:	4808      	ldr	r0, [pc, #32]	@ (8003b14 <_ZL12MX_TIM6_Initv+0x78>)
 8003af4:	f009 fa64 	bl	800cfc0 <HAL_TIMEx_MasterConfigSynchronization>
 8003af8:	4603      	mov	r3, r0
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	bf14      	ite	ne
 8003afe:	2301      	movne	r3, #1
 8003b00:	2300      	moveq	r3, #0
 8003b02:	b2db      	uxtb	r3, r3
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d001      	beq.n	8003b0c <_ZL12MX_TIM6_Initv+0x70>
  {
    Error_Handler();
 8003b08:	f000 f956 	bl	8003db8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003b0c:	bf00      	nop
 8003b0e:	3710      	adds	r7, #16
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}
 8003b14:	200011e8 	.word	0x200011e8
 8003b18:	40001000 	.word	0x40001000

08003b1c <_ZL12MX_TIM8_Initv>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b088      	sub	sp, #32
 8003b20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003b22:	f107 0310 	add.w	r3, r7, #16
 8003b26:	2200      	movs	r2, #0
 8003b28:	601a      	str	r2, [r3, #0]
 8003b2a:	605a      	str	r2, [r3, #4]
 8003b2c:	609a      	str	r2, [r3, #8]
 8003b2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b30:	1d3b      	adds	r3, r7, #4
 8003b32:	2200      	movs	r2, #0
 8003b34:	601a      	str	r2, [r3, #0]
 8003b36:	605a      	str	r2, [r3, #4]
 8003b38:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8003b3a:	4b27      	ldr	r3, [pc, #156]	@ (8003bd8 <_ZL12MX_TIM8_Initv+0xbc>)
 8003b3c:	4a27      	ldr	r2, [pc, #156]	@ (8003bdc <_ZL12MX_TIM8_Initv+0xc0>)
 8003b3e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 95;
 8003b40:	4b25      	ldr	r3, [pc, #148]	@ (8003bd8 <_ZL12MX_TIM8_Initv+0xbc>)
 8003b42:	225f      	movs	r2, #95	@ 0x5f
 8003b44:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b46:	4b24      	ldr	r3, [pc, #144]	@ (8003bd8 <_ZL12MX_TIM8_Initv+0xbc>)
 8003b48:	2200      	movs	r2, #0
 8003b4a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 49;
 8003b4c:	4b22      	ldr	r3, [pc, #136]	@ (8003bd8 <_ZL12MX_TIM8_Initv+0xbc>)
 8003b4e:	2231      	movs	r2, #49	@ 0x31
 8003b50:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b52:	4b21      	ldr	r3, [pc, #132]	@ (8003bd8 <_ZL12MX_TIM8_Initv+0xbc>)
 8003b54:	2200      	movs	r2, #0
 8003b56:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8003b58:	4b1f      	ldr	r3, [pc, #124]	@ (8003bd8 <_ZL12MX_TIM8_Initv+0xbc>)
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b5e:	4b1e      	ldr	r3, [pc, #120]	@ (8003bd8 <_ZL12MX_TIM8_Initv+0xbc>)
 8003b60:	2200      	movs	r2, #0
 8003b62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8003b64:	481c      	ldr	r0, [pc, #112]	@ (8003bd8 <_ZL12MX_TIM8_Initv+0xbc>)
 8003b66:	f008 fdd3 	bl	800c710 <HAL_TIM_Base_Init>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	bf14      	ite	ne
 8003b70:	2301      	movne	r3, #1
 8003b72:	2300      	moveq	r3, #0
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d001      	beq.n	8003b7e <_ZL12MX_TIM8_Initv+0x62>
  {
    Error_Handler();
 8003b7a:	f000 f91d 	bl	8003db8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003b7e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003b82:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8003b84:	f107 0310 	add.w	r3, r7, #16
 8003b88:	4619      	mov	r1, r3
 8003b8a:	4813      	ldr	r0, [pc, #76]	@ (8003bd8 <_ZL12MX_TIM8_Initv+0xbc>)
 8003b8c:	f008 fff2 	bl	800cb74 <HAL_TIM_ConfigClockSource>
 8003b90:	4603      	mov	r3, r0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	bf14      	ite	ne
 8003b96:	2301      	movne	r3, #1
 8003b98:	2300      	moveq	r3, #0
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d001      	beq.n	8003ba4 <_ZL12MX_TIM8_Initv+0x88>
  {
    Error_Handler();
 8003ba0:	f000 f90a 	bl	8003db8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003ba4:	2320      	movs	r3, #32
 8003ba6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_UPDATE;
 8003ba8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003bac:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003bb2:	1d3b      	adds	r3, r7, #4
 8003bb4:	4619      	mov	r1, r3
 8003bb6:	4808      	ldr	r0, [pc, #32]	@ (8003bd8 <_ZL12MX_TIM8_Initv+0xbc>)
 8003bb8:	f009 fa02 	bl	800cfc0 <HAL_TIMEx_MasterConfigSynchronization>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	bf14      	ite	ne
 8003bc2:	2301      	movne	r3, #1
 8003bc4:	2300      	moveq	r3, #0
 8003bc6:	b2db      	uxtb	r3, r3
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d001      	beq.n	8003bd0 <_ZL12MX_TIM8_Initv+0xb4>
  {
    Error_Handler();
 8003bcc:	f000 f8f4 	bl	8003db8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8003bd0:	bf00      	nop
 8003bd2:	3720      	adds	r7, #32
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}
 8003bd8:	20001234 	.word	0x20001234
 8003bdc:	40013400 	.word	0x40013400

08003be0 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b084      	sub	sp, #16
 8003be4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8003be6:	4b1c      	ldr	r3, [pc, #112]	@ (8003c58 <_ZL11MX_DMA_Initv+0x78>)
 8003be8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bea:	4a1b      	ldr	r2, [pc, #108]	@ (8003c58 <_ZL11MX_DMA_Initv+0x78>)
 8003bec:	f043 0304 	orr.w	r3, r3, #4
 8003bf0:	6493      	str	r3, [r2, #72]	@ 0x48
 8003bf2:	4b19      	ldr	r3, [pc, #100]	@ (8003c58 <_ZL11MX_DMA_Initv+0x78>)
 8003bf4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bf6:	f003 0304 	and.w	r3, r3, #4
 8003bfa:	60fb      	str	r3, [r7, #12]
 8003bfc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003bfe:	4b16      	ldr	r3, [pc, #88]	@ (8003c58 <_ZL11MX_DMA_Initv+0x78>)
 8003c00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c02:	4a15      	ldr	r2, [pc, #84]	@ (8003c58 <_ZL11MX_DMA_Initv+0x78>)
 8003c04:	f043 0301 	orr.w	r3, r3, #1
 8003c08:	6493      	str	r3, [r2, #72]	@ 0x48
 8003c0a:	4b13      	ldr	r3, [pc, #76]	@ (8003c58 <_ZL11MX_DMA_Initv+0x78>)
 8003c0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c0e:	f003 0301 	and.w	r3, r3, #1
 8003c12:	60bb      	str	r3, [r7, #8]
 8003c14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003c16:	4b10      	ldr	r3, [pc, #64]	@ (8003c58 <_ZL11MX_DMA_Initv+0x78>)
 8003c18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c1a:	4a0f      	ldr	r2, [pc, #60]	@ (8003c58 <_ZL11MX_DMA_Initv+0x78>)
 8003c1c:	f043 0302 	orr.w	r3, r3, #2
 8003c20:	6493      	str	r3, [r2, #72]	@ 0x48
 8003c22:	4b0d      	ldr	r3, [pc, #52]	@ (8003c58 <_ZL11MX_DMA_Initv+0x78>)
 8003c24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c26:	f003 0302 	and.w	r3, r3, #2
 8003c2a:	607b      	str	r3, [r7, #4]
 8003c2c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8003c2e:	2200      	movs	r2, #0
 8003c30:	2105      	movs	r1, #5
 8003c32:	200b      	movs	r0, #11
 8003c34:	f004 f896 	bl	8007d64 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003c38:	200b      	movs	r0, #11
 8003c3a:	f004 f8af 	bl	8007d9c <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 5, 0);
 8003c3e:	2200      	movs	r2, #0
 8003c40:	2105      	movs	r1, #5
 8003c42:	2038      	movs	r0, #56	@ 0x38
 8003c44:	f004 f88e 	bl	8007d64 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8003c48:	2038      	movs	r0, #56	@ 0x38
 8003c4a:	f004 f8a7 	bl	8007d9c <HAL_NVIC_EnableIRQ>

}
 8003c4e:	bf00      	nop
 8003c50:	3710      	adds	r7, #16
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	40021000 	.word	0x40021000

08003c5c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b08a      	sub	sp, #40	@ 0x28
 8003c60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c62:	f107 0314 	add.w	r3, r7, #20
 8003c66:	2200      	movs	r2, #0
 8003c68:	601a      	str	r2, [r3, #0]
 8003c6a:	605a      	str	r2, [r3, #4]
 8003c6c:	609a      	str	r2, [r3, #8]
 8003c6e:	60da      	str	r2, [r3, #12]
 8003c70:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003c72:	4b40      	ldr	r3, [pc, #256]	@ (8003d74 <_ZL12MX_GPIO_Initv+0x118>)
 8003c74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c76:	4a3f      	ldr	r2, [pc, #252]	@ (8003d74 <_ZL12MX_GPIO_Initv+0x118>)
 8003c78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c7c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003c7e:	4b3d      	ldr	r3, [pc, #244]	@ (8003d74 <_ZL12MX_GPIO_Initv+0x118>)
 8003c80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c86:	613b      	str	r3, [r7, #16]
 8003c88:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c8a:	4b3a      	ldr	r3, [pc, #232]	@ (8003d74 <_ZL12MX_GPIO_Initv+0x118>)
 8003c8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c8e:	4a39      	ldr	r2, [pc, #228]	@ (8003d74 <_ZL12MX_GPIO_Initv+0x118>)
 8003c90:	f043 0301 	orr.w	r3, r3, #1
 8003c94:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003c96:	4b37      	ldr	r3, [pc, #220]	@ (8003d74 <_ZL12MX_GPIO_Initv+0x118>)
 8003c98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c9a:	f003 0301 	and.w	r3, r3, #1
 8003c9e:	60fb      	str	r3, [r7, #12]
 8003ca0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ca2:	4b34      	ldr	r3, [pc, #208]	@ (8003d74 <_ZL12MX_GPIO_Initv+0x118>)
 8003ca4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ca6:	4a33      	ldr	r2, [pc, #204]	@ (8003d74 <_ZL12MX_GPIO_Initv+0x118>)
 8003ca8:	f043 0304 	orr.w	r3, r3, #4
 8003cac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003cae:	4b31      	ldr	r3, [pc, #196]	@ (8003d74 <_ZL12MX_GPIO_Initv+0x118>)
 8003cb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cb2:	f003 0304 	and.w	r3, r3, #4
 8003cb6:	60bb      	str	r3, [r7, #8]
 8003cb8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cba:	4b2e      	ldr	r3, [pc, #184]	@ (8003d74 <_ZL12MX_GPIO_Initv+0x118>)
 8003cbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cbe:	4a2d      	ldr	r2, [pc, #180]	@ (8003d74 <_ZL12MX_GPIO_Initv+0x118>)
 8003cc0:	f043 0302 	orr.w	r3, r3, #2
 8003cc4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003cc6:	4b2b      	ldr	r3, [pc, #172]	@ (8003d74 <_ZL12MX_GPIO_Initv+0x118>)
 8003cc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cca:	f003 0302 	and.w	r3, r3, #2
 8003cce:	607b      	str	r3, [r7, #4]
 8003cd0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EFUSE_Pin|SPI1_CS_Pin, GPIO_PIN_RESET);
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	f248 0104 	movw	r1, #32772	@ 0x8004
 8003cd8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003cdc:	f004 fc88 	bl	80085f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FUSE_VOLTAGE_GPIO_Port, FUSE_VOLTAGE_Pin, GPIO_PIN_RESET);
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003ce6:	4824      	ldr	r0, [pc, #144]	@ (8003d78 <_ZL12MX_GPIO_Initv+0x11c>)
 8003ce8:	f004 fc82 	bl	80085f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin, GPIO_PIN_SET);
 8003cec:	2201      	movs	r2, #1
 8003cee:	f44f 7170 	mov.w	r1, #960	@ 0x3c0
 8003cf2:	4822      	ldr	r0, [pc, #136]	@ (8003d7c <_ZL12MX_GPIO_Initv+0x120>)
 8003cf4:	f004 fc7c 	bl	80085f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : EFUSE_Pin SPI1_CS_Pin */
  GPIO_InitStruct.Pin = EFUSE_Pin|SPI1_CS_Pin;
 8003cf8:	f248 0304 	movw	r3, #32772	@ 0x8004
 8003cfc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d02:	2300      	movs	r3, #0
 8003d04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d06:	2303      	movs	r3, #3
 8003d08:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d0a:	f107 0314 	add.w	r3, r7, #20
 8003d0e:	4619      	mov	r1, r3
 8003d10:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003d14:	f004 fac2 	bl	800829c <HAL_GPIO_Init>

  /*Configure GPIO pin : INTERLOCK_Pin */
  GPIO_InitStruct.Pin = INTERLOCK_Pin;
 8003d18:	2304      	movs	r3, #4
 8003d1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003d20:	2301      	movs	r3, #1
 8003d22:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INTERLOCK_GPIO_Port, &GPIO_InitStruct);
 8003d24:	f107 0314 	add.w	r3, r7, #20
 8003d28:	4619      	mov	r1, r3
 8003d2a:	4813      	ldr	r0, [pc, #76]	@ (8003d78 <_ZL12MX_GPIO_Initv+0x11c>)
 8003d2c:	f004 fab6 	bl	800829c <HAL_GPIO_Init>

  /*Configure GPIO pin : FUSE_VOLTAGE_Pin */
  GPIO_InitStruct.Pin = FUSE_VOLTAGE_Pin;
 8003d30:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003d34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d36:	2301      	movs	r3, #1
 8003d38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(FUSE_VOLTAGE_GPIO_Port, &GPIO_InitStruct);
 8003d42:	f107 0314 	add.w	r3, r7, #20
 8003d46:	4619      	mov	r1, r3
 8003d48:	480b      	ldr	r0, [pc, #44]	@ (8003d78 <_ZL12MX_GPIO_Initv+0x11c>)
 8003d4a:	f004 faa7 	bl	800829c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_1_Pin LED_2_Pin LED_3_Pin LED_4_Pin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin;
 8003d4e:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8003d52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d54:	2301      	movs	r3, #1
 8003d56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d5c:	2303      	movs	r3, #3
 8003d5e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d60:	f107 0314 	add.w	r3, r7, #20
 8003d64:	4619      	mov	r1, r3
 8003d66:	4805      	ldr	r0, [pc, #20]	@ (8003d7c <_ZL12MX_GPIO_Initv+0x120>)
 8003d68:	f004 fa98 	bl	800829c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003d6c:	bf00      	nop
 8003d6e:	3728      	adds	r7, #40	@ 0x28
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}
 8003d74:	40021000 	.word	0x40021000
 8003d78:	48000400 	.word	0x48000400
 8003d7c:	48000800 	.word	0x48000800

08003d80 <_Z16StartDefaultTaskPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b082      	sub	sp, #8
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8003d88:	f00f fa06 	bl	8013198 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(20);
 8003d8c:	2014      	movs	r0, #20
 8003d8e:	f00c fd2f 	bl	80107f0 <osDelay>
 8003d92:	e7fb      	b.n	8003d8c <_Z16StartDefaultTaskPv+0xc>

08003d94 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b082      	sub	sp, #8
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM16) {
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a04      	ldr	r2, [pc, #16]	@ (8003db4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d101      	bne.n	8003daa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003da6:	f001 fb21 	bl	80053ec <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003daa:	bf00      	nop
 8003dac:	3708      	adds	r7, #8
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}
 8003db2:	bf00      	nop
 8003db4:	40014400 	.word	0x40014400

08003db8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003db8:	b480      	push	{r7}
 8003dba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003dbc:	b672      	cpsid	i
}
 8003dbe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003dc0:	bf00      	nop
 8003dc2:	e7fd      	b.n	8003dc0 <Error_Handler+0x8>

08003dc4 <_Z12CheckMessageP12RingBuffer_t>:
#include "string.h"
#include <usbd_cdc_if.h>

// Function to check if the ring buffer contains "BB_Start" or "BB_Stop"
// Returns 1 for "BB_Start", 0 for "BB_Stop", or -1 if neither of these strings are found
int CheckMessage(RingBuffer_t *Buf) {
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b086      	sub	sp, #24
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
    char command[9]; // Sized to fit "BB_Start\0" or "BB_Stop\0"
    uint8_t index = 0;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	75fb      	strb	r3, [r7, #23]
    uint8_t value;

    // Read bytes from the buffer until a command is assembled or the buffer is exhausted
    while (RB_Read(Buf, &value) == RB_OK) {
 8003dd0:	e014      	b.n	8003dfc <_Z12CheckMessageP12RingBuffer_t+0x38>
        // Check if we've reached the end of a command ('\0' or '\n')
        if (value == '\0' || value == '\n') {
 8003dd2:	7afb      	ldrb	r3, [r7, #11]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d01f      	beq.n	8003e18 <_Z12CheckMessageP12RingBuffer_t+0x54>
 8003dd8:	7afb      	ldrb	r3, [r7, #11]
 8003dda:	2b0a      	cmp	r3, #10
 8003ddc:	d01c      	beq.n	8003e18 <_Z12CheckMessageP12RingBuffer_t+0x54>
            break;
        }
        // Ensure we do not exceed the command buffer size
        if (index < sizeof(command) - 1) {
 8003dde:	7dfb      	ldrb	r3, [r7, #23]
 8003de0:	2b07      	cmp	r3, #7
 8003de2:	d808      	bhi.n	8003df6 <_Z12CheckMessageP12RingBuffer_t+0x32>
            command[index++] = value;
 8003de4:	7afa      	ldrb	r2, [r7, #11]
 8003de6:	7dfb      	ldrb	r3, [r7, #23]
 8003de8:	1c59      	adds	r1, r3, #1
 8003dea:	75f9      	strb	r1, [r7, #23]
 8003dec:	3318      	adds	r3, #24
 8003dee:	443b      	add	r3, r7
 8003df0:	f803 2c0c 	strb.w	r2, [r3, #-12]
 8003df4:	e002      	b.n	8003dfc <_Z12CheckMessageP12RingBuffer_t+0x38>
        } else {
            // Too much data for one command, something went wrong
            return -1;
 8003df6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003dfa:	e033      	b.n	8003e64 <_Z12CheckMessageP12RingBuffer_t+0xa0>
    while (RB_Read(Buf, &value) == RB_OK) {
 8003dfc:	f107 030b 	add.w	r3, r7, #11
 8003e00:	4619      	mov	r1, r3
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f000 f838 	bl	8003e78 <RB_Read>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	bf0c      	ite	eq
 8003e0e:	2301      	moveq	r3, #1
 8003e10:	2300      	movne	r3, #0
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d1dc      	bne.n	8003dd2 <_Z12CheckMessageP12RingBuffer_t+0xe>
        }
    }
    command[index] = '\0'; // Null-terminate the string
 8003e18:	7dfb      	ldrb	r3, [r7, #23]
 8003e1a:	3318      	adds	r3, #24
 8003e1c:	443b      	add	r3, r7
 8003e1e:	2200      	movs	r2, #0
 8003e20:	f803 2c0c 	strb.w	r2, [r3, #-12]

    // Compare the assembled command
    if (strcmp(command, "BB_Start") == 0)
 8003e24:	f107 030c 	add.w	r3, r7, #12
 8003e28:	4910      	ldr	r1, [pc, #64]	@ (8003e6c <_Z12CheckMessageP12RingBuffer_t+0xa8>)
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f7fc f9e8 	bl	8000200 <strcmp>
 8003e30:	4603      	mov	r3, r0
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d105      	bne.n	8003e42 <_Z12CheckMessageP12RingBuffer_t+0x7e>
    {
    	data.charging.balance_on = true;
 8003e36:	4b0e      	ldr	r3, [pc, #56]	@ (8003e70 <_Z12CheckMessageP12RingBuffer_t+0xac>)
 8003e38:	2201      	movs	r2, #1
 8003e3a:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
        return 1;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e010      	b.n	8003e64 <_Z12CheckMessageP12RingBuffer_t+0xa0>
    }
    else if (strcmp(command, "BB_Stop") == 0)
 8003e42:	f107 030c 	add.w	r3, r7, #12
 8003e46:	490b      	ldr	r1, [pc, #44]	@ (8003e74 <_Z12CheckMessageP12RingBuffer_t+0xb0>)
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f7fc f9d9 	bl	8000200 <strcmp>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d105      	bne.n	8003e60 <_Z12CheckMessageP12RingBuffer_t+0x9c>
    {
    	data.charging.balance_on = false;
 8003e54:	4b06      	ldr	r3, [pc, #24]	@ (8003e70 <_Z12CheckMessageP12RingBuffer_t+0xac>)
 8003e56:	2200      	movs	r2, #0
 8003e58:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
        return 0;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	e001      	b.n	8003e64 <_Z12CheckMessageP12RingBuffer_t+0xa0>
    }

    // Neither "BB_Start" nor "BB_Stop" were found
    return -1;
 8003e60:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	3718      	adds	r7, #24
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}
 8003e6c:	08017054 	.word	0x08017054
 8003e70:	20000aa4 	.word	0x20000aa4
 8003e74:	08017060 	.word	0x08017060

08003e78 <RB_Read>:
//
// RingBuffer_t *Buf - pointer to Ring Buffer structure
// uint8_t *Value - pointer to place where a value from buffer is read
//
RB_Status RB_Read(RingBuffer_t *Buf, uint8_t *Value)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b083      	sub	sp, #12
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	6039      	str	r1, [r7, #0]
	// Check if Tail hit Head
	if(Buf->Head == Buf->Tail)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	8a1a      	ldrh	r2, [r3, #16]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	8a5b      	ldrh	r3, [r3, #18]
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	d101      	bne.n	8003e92 <RB_Read+0x1a>
	{
		// If yes - there is nothing to read
		return RB_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e014      	b.n	8003ebc <RB_Read+0x44>
	}

	// Write current value from buffer to pointer from argument
	*Value = Buf->Buffer[Buf->Tail];
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	8a5b      	ldrh	r3, [r3, #18]
 8003e96:	461a      	mov	r2, r3
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	5c9a      	ldrb	r2, [r3, r2]
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	701a      	strb	r2, [r3, #0]

	// Calculate new Tail pointer
	Buf->Tail = (Buf->Tail + 1) % RING_BUFFER_SIZE;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	8a5b      	ldrh	r3, [r3, #18]
 8003ea4:	3301      	adds	r3, #1
 8003ea6:	425a      	negs	r2, r3
 8003ea8:	f003 030f 	and.w	r3, r3, #15
 8003eac:	f002 020f 	and.w	r2, r2, #15
 8003eb0:	bf58      	it	pl
 8003eb2:	4253      	negpl	r3, r2
 8003eb4:	b29a      	uxth	r2, r3
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	825a      	strh	r2, [r3, #18]

	// Everything is ok - return OK status
	return RB_OK;
 8003eba:	2300      	movs	r3, #0
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	370c      	adds	r7, #12
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr

08003ec8 <RB_Write>:
//
// RingBuffer_t *Buf - pointer to Ring Buffer structure
// uint8_t Value - a value to store in the buffer
//
RB_Status RB_Write(RingBuffer_t *Buf, uint8_t Value)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b085      	sub	sp, #20
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	460b      	mov	r3, r1
 8003ed2:	70fb      	strb	r3, [r7, #3]
	// Calculate new Head pointer value
	uint8_t HeadTmp = (Buf->Head + 1) % RING_BUFFER_SIZE;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	8a1b      	ldrh	r3, [r3, #16]
 8003ed8:	3301      	adds	r3, #1
 8003eda:	425a      	negs	r2, r3
 8003edc:	f003 030f 	and.w	r3, r3, #15
 8003ee0:	f002 020f 	and.w	r2, r2, #15
 8003ee4:	bf58      	it	pl
 8003ee6:	4253      	negpl	r3, r2
 8003ee8:	73fb      	strb	r3, [r7, #15]

	// Check if there is one free space ahead the Head buffer
	if(HeadTmp == Buf->Tail)
 8003eea:	7bfb      	ldrb	r3, [r7, #15]
 8003eec:	b29a      	uxth	r2, r3
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	8a5b      	ldrh	r3, [r3, #18]
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d101      	bne.n	8003efa <RB_Write+0x32>
	{
		// There is no space in the buffer - return an error
		return RB_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e00a      	b.n	8003f10 <RB_Write+0x48>
	}

	// Store a value into the buffer
	Buf->Buffer[Buf->Head] = Value;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	8a1b      	ldrh	r3, [r3, #16]
 8003efe:	4619      	mov	r1, r3
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	78fa      	ldrb	r2, [r7, #3]
 8003f04:	545a      	strb	r2, [r3, r1]

	// Remember a new Head pointer value
	Buf->Head = HeadTmp;
 8003f06:	7bfb      	ldrb	r3, [r7, #15]
 8003f08:	b29a      	uxth	r2, r3
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	821a      	strh	r2, [r3, #16]

	// Everything is ok - return OK status
	return RB_OK;
 8003f0e:	2300      	movs	r3, #0
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	3714      	adds	r7, #20
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr

08003f1c <_ZSt21is_constant_evaluatedv>:

  /// Returns true only when called during constant evaluation.
  /// @since C++20
  constexpr inline bool
  is_constant_evaluated() noexcept
  {
 8003f1c:	b480      	push	{r7}
 8003f1e:	af00      	add	r7, sp, #0
#if __cpp_if_consteval >= 202106L
    if consteval { return true; } else { return false; }
#else
    return __builtin_is_constant_evaluated();
 8003f20:	2300      	movs	r3, #0
#endif
  }
 8003f22:	4618      	mov	r0, r3
 8003f24:	46bd      	mov	sp, r7
 8003f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2a:	4770      	bx	lr

08003f2c <_ZN7SoC_EKF17set_update_matrixEv>:
#include "soc_ekf.h"
#include <math.h>
#include <algorithm>

void SoC_EKF::set_update_matrix()
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b082      	sub	sp, #8
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
    _State_vector[ttc1] = 0;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	f04f 0200 	mov.w	r2, #0
 8003f3a:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
    _State_vector[ttc2] = 0;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	f04f 0200 	mov.w	r2, #0
 8003f44:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

    _et1 = expf(-_Ts / _battery.battery_equivalent_model[ttc1]);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	edd3 7a1c 	vldr	s15, [r3, #112]	@ 0x70
 8003f4e:	eeb1 7a67 	vneg.f32	s14, s15
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	edd3 7a03 	vldr	s15, [r3, #12]
 8003f58:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003f5c:	eeb0 0a66 	vmov.f32	s0, s13
 8003f60:	f00f ffa2 	bl	8013ea8 <expf>
 8003f64:	eef0 7a40 	vmov.f32	s15, s0
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	edc3 7a1a 	vstr	s15, [r3, #104]	@ 0x68
    _et2 = expf(-_Ts / _battery.battery_equivalent_model[ttc2]);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	edd3 7a1c 	vldr	s15, [r3, #112]	@ 0x70
 8003f74:	eeb1 7a67 	vneg.f32	s14, s15
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	edd3 7a04 	vldr	s15, [r3, #16]
 8003f7e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003f82:	eeb0 0a66 	vmov.f32	s0, s13
 8003f86:	f00f ff8f 	bl	8013ea8 <expf>
 8003f8a:	eef0 7a40 	vmov.f32	s15, s0
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	edc3 7a1b 	vstr	s15, [r3, #108]	@ 0x6c

    _A_matrix[SoC] = 1;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003f9a:	675a      	str	r2, [r3, #116]	@ 0x74
    _A_matrix[ttc1] = _et1;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	679a      	str	r2, [r3, #120]	@ 0x78
    _A_matrix[ttc2] = _et2;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	67da      	str	r2, [r3, #124]	@ 0x7c

    _B_matrix[SoC] = - _Ts/_battery.battery_equivalent_model[Qnom]/60/60
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	edd3 7a1c 	vldr	s15, [r3, #112]	@ 0x70
 8003fb2:	eef1 6a67 	vneg.f32	s13, s15
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	edd3 7a07 	vldr	s15, [r3, #28]
 8003fbc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fc0:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800406c <_ZN7SoC_EKF17set_update_matrixEv+0x140>
 8003fc4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003fc8:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 800406c <_ZN7SoC_EKF17set_update_matrixEv+0x140>
 8003fcc:	eec7 6a87 	vdiv.f32	s13, s15, s14
            /_battery.cell_in_parallel;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	ee07 3a90 	vmov	s15, r3
 8003fd8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003fdc:	eec6 7a87 	vdiv.f32	s15, s13, s14
    _B_matrix[SoC] = - _Ts/_battery.battery_equivalent_model[Qnom]/60/60
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	edc3 7a20 	vstr	s15, [r3, #128]	@ 0x80

    _B_matrix[ttc1] = _battery.battery_equivalent_model[Rttc1]*(1 - _et1);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	ed93 7a05 	vldr	s14, [r3, #20]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	edd3 7a1a 	vldr	s15, [r3, #104]	@ 0x68
 8003ff2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003ff6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003ffa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	edc3 7a21 	vstr	s15, [r3, #132]	@ 0x84
    _B_matrix[ttc2] = _battery.battery_equivalent_model[Rttc2]*(1 - _et2);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	ed93 7a06 	vldr	s14, [r3, #24]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	edd3 7a1b 	vldr	s15, [r3, #108]	@ 0x6c
 8004010:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004014:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8004018:	ee67 7a27 	vmul.f32	s15, s14, s15
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	edc3 7a22 	vstr	s15, [r3, #136]	@ 0x88

    _P_matrix[SoC] = 0.005;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	4a12      	ldr	r2, [pc, #72]	@ (8004070 <_ZN7SoC_EKF17set_update_matrixEv+0x144>)
 8004026:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    _P_matrix[ttc1] = 0.1;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	4a11      	ldr	r2, [pc, #68]	@ (8004074 <_ZN7SoC_EKF17set_update_matrixEv+0x148>)
 800402e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    _P_matrix[ttc2] = 0.1;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	4a0f      	ldr	r2, [pc, #60]	@ (8004074 <_ZN7SoC_EKF17set_update_matrixEv+0x148>)
 8004036:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

    _Q_matrix[SoC] = default_Q_value;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	4a0e      	ldr	r2, [pc, #56]	@ (8004078 <_ZN7SoC_EKF17set_update_matrixEv+0x14c>)
 800403e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    _Q_matrix[ttc1] = _P_matrix[ttc1];
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
    _Q_matrix[ttc2] = _P_matrix[ttc2];
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    _R_coeff = default_R_value;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4a07      	ldr	r2, [pc, #28]	@ (800407c <_ZN7SoC_EKF17set_update_matrixEv+0x150>)
 800405e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
}
 8004062:	bf00      	nop
 8004064:	3708      	adds	r7, #8
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}
 800406a:	bf00      	nop
 800406c:	42700000 	.word	0x42700000
 8004070:	3ba3d70a 	.word	0x3ba3d70a
 8004074:	3dcccccd 	.word	0x3dcccccd
 8004078:	3951b717 	.word	0x3951b717
 800407c:	48f42400 	.word	0x48f42400

08004080 <_ZN7SoC_EKF21set_filter_covarianceEffff>:

void SoC_EKF::set_filter_covariance(float R, float Q_soc, float Q_v1, float Q_v2)
{
 8004080:	b480      	push	{r7}
 8004082:	b087      	sub	sp, #28
 8004084:	af00      	add	r7, sp, #0
 8004086:	6178      	str	r0, [r7, #20]
 8004088:	ed87 0a04 	vstr	s0, [r7, #16]
 800408c:	edc7 0a03 	vstr	s1, [r7, #12]
 8004090:	ed87 1a02 	vstr	s2, [r7, #8]
 8004094:	edc7 1a01 	vstr	s3, [r7, #4]
    _R_coeff = R;
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	693a      	ldr	r2, [r7, #16]
 800409c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
    _Q_matrix[SoC] = Q_soc;
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	68fa      	ldr	r2, [r7, #12]
 80040a4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    _Q_matrix[Vttc1] = Q_v1;
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	68ba      	ldr	r2, [r7, #8]
 80040ac:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
    _Q_matrix[Vttc2] = Q_v2;
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
}
 80040b8:	bf00      	nop
 80040ba:	371c      	adds	r7, #28
 80040bc:	46bd      	mov	sp, r7
 80040be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c2:	4770      	bx	lr

080040c4 <_ZN7SoC_EKF6updateERKfS1_>:

void SoC_EKF::update(const float &Current, const float &Voltage)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b08c      	sub	sp, #48	@ 0x30
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	60f8      	str	r0, [r7, #12]
 80040cc:	60b9      	str	r1, [r7, #8]
 80040ce:	607a      	str	r2, [r7, #4]
//    }
//    else {
//        set_filter_covariance(default_R_value, default_Q_value);
//    }
    // Predict
    _State_vector[SoC] =  _State_vector[SoC] * _A_matrix[SoC] + Current * _B_matrix[SoC];
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	ed93 7a2a 	vldr	s14, [r3, #168]	@ 0xa8
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	edd3 7a1d 	vldr	s15, [r3, #116]	@ 0x74
 80040dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	edd3 6a00 	vldr	s13, [r3]
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	edd3 7a20 	vldr	s15, [r3, #128]	@ 0x80
 80040ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80040f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	edc3 7a2a 	vstr	s15, [r3, #168]	@ 0xa8
    _State_vector[ttc1] =  _State_vector[ttc1] * _A_matrix[ttc1] + Current * _B_matrix[ttc1];
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	ed93 7a2b 	vldr	s14, [r3, #172]	@ 0xac
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	edd3 7a1e 	vldr	s15, [r3, #120]	@ 0x78
 8004106:	ee27 7a27 	vmul.f32	s14, s14, s15
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	edd3 6a00 	vldr	s13, [r3]
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	edd3 7a21 	vldr	s15, [r3, #132]	@ 0x84
 8004116:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800411a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	edc3 7a2b 	vstr	s15, [r3, #172]	@ 0xac
    _State_vector[ttc2] =  _State_vector[ttc2] * _A_matrix[ttc2] + Current * _B_matrix[ttc2];
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	ed93 7a2c 	vldr	s14, [r3, #176]	@ 0xb0
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	edd3 7a1f 	vldr	s15, [r3, #124]	@ 0x7c
 8004130:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	edd3 6a00 	vldr	s13, [r3]
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	edd3 7a22 	vldr	s15, [r3, #136]	@ 0x88
 8004140:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004144:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	edc3 7a2c 	vstr	s15, [r3, #176]	@ 0xb0

    // Covariance matrix
    _P_matrix[SoC] =  _A_matrix[SoC]  * _A_matrix[SoC] *  _P_matrix[SoC]  + _Q_matrix[SoC];
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	ed93 7a1d 	vldr	s14, [r3, #116]	@ 0x74
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	edd3 7a1d 	vldr	s15, [r3, #116]	@ 0x74
 800415a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	edd3 7a23 	vldr	s15, [r3, #140]	@ 0x8c
 8004164:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	edd3 7a27 	vldr	s15, [r3, #156]	@ 0x9c
 800416e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	edc3 7a23 	vstr	s15, [r3, #140]	@ 0x8c
    _P_matrix[ttc1] = _A_matrix[ttc1] * _A_matrix[ttc1] * _P_matrix[ttc1] + _Q_matrix[ttc1];
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	ed93 7a1e 	vldr	s14, [r3, #120]	@ 0x78
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	edd3 7a1e 	vldr	s15, [r3, #120]	@ 0x78
 8004184:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	edd3 7a24 	vldr	s15, [r3, #144]	@ 0x90
 800418e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	edd3 7a28 	vldr	s15, [r3, #160]	@ 0xa0
 8004198:	ee77 7a27 	vadd.f32	s15, s14, s15
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	edc3 7a24 	vstr	s15, [r3, #144]	@ 0x90
    _P_matrix[ttc2] = _A_matrix[ttc2] * _A_matrix[ttc2] * _P_matrix[ttc2] + _Q_matrix[ttc2];
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	ed93 7a1f 	vldr	s14, [r3, #124]	@ 0x7c
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	edd3 7a1f 	vldr	s15, [r3, #124]	@ 0x7c
 80041ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	edd3 7a25 	vldr	s15, [r3, #148]	@ 0x94
 80041b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	edd3 7a29 	vldr	s15, [r3, #164]	@ 0xa4
 80041c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	edc3 7a25 	vstr	s15, [r3, #148]	@ 0x94

    // Predict Opec circiut voltage single call voltage based on SoC
    float Voltage_predict_OCV = horner(_battery.battery_ocv_poli, SOC_OCV_poli_coeff_lenght, &_State_vector[SoC]);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	f103 0020 	add.w	r0, r3, #32
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	33a8      	adds	r3, #168	@ 0xa8
 80041d6:	461a      	mov	r2, r3
 80041d8:	2109      	movs	r1, #9
 80041da:	f000 f98d 	bl	80044f8 <_Z6hornerPKfjS0_>
 80041de:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c

    float Voltage_predict = Voltage_predict_OCV - _State_vector[Vttc1]/_battery.cell_in_parallel
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	edd3 6a2b 	vldr	s13, [r3, #172]	@ 0xac
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	ee07 3a90 	vmov	s15, r3
 80041f0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80041f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041f8:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80041fc:	ee37 7a67 	vsub.f32	s14, s14, s15
            - _State_vector[Vttc2]/_battery.cell_in_parallel
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	ed93 6a2c 	vldr	s12, [r3, #176]	@ 0xb0
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	ee07 3a90 	vmov	s15, r3
 800420e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004212:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8004216:	ee37 7a67 	vsub.f32	s14, s14, s15
            - (Current) * _battery.battery_equivalent_model[Rs]
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	edd3 6a00 	vldr	s13, [r3]
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	edd3 7a02 	vldr	s15, [r3, #8]
 8004226:	ee66 6aa7 	vmul.f32	s13, s13, s15
                        *_battery.cell_in_series
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	ee07 3a90 	vmov	s15, r3
 8004232:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004236:	ee26 6aa7 	vmul.f32	s12, s13, s15
                        /_battery.cell_in_parallel; // for multiple cell voltage
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	ee07 3a90 	vmov	s15, r3
 8004242:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004246:	eec6 7a26 	vdiv.f32	s15, s12, s13
    float Voltage_predict = Voltage_predict_OCV - _State_vector[Vttc1]/_battery.cell_in_parallel
 800424a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800424e:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

    float innovation = (Voltage) - Voltage_predict;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	ed93 7a00 	vldr	s14, [r3]
 8004258:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800425c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004260:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    float H = horner(_battery.battery_d_ocv_poli, SOC_OCV_poli_coeff_lenght - 1, &_State_vector[SoC]);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	f103 0044 	add.w	r0, r3, #68	@ 0x44
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	33a8      	adds	r3, #168	@ 0xa8
 800426e:	461a      	mov	r2, r3
 8004270:	2108      	movs	r1, #8
 8004272:	f000 f941 	bl	80044f8 <_Z6hornerPKfjS0_>
 8004276:	ed87 0a08 	vstr	s0, [r7, #32]

    float S = H *  _P_matrix[SoC] * H + _R_coeff;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	ed93 7a23 	vldr	s14, [r3, #140]	@ 0x8c
 8004280:	edd7 7a08 	vldr	s15, [r7, #32]
 8004284:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004288:	edd7 7a08 	vldr	s15, [r7, #32]
 800428c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	edd3 7a26 	vldr	s15, [r3, #152]	@ 0x98
 8004296:	ee77 7a27 	vadd.f32	s15, s14, s15
 800429a:	edc7 7a07 	vstr	s15, [r7, #28]

    float Kf = _P_matrix[SoC] * H * (1/S);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	ed93 7a23 	vldr	s14, [r3, #140]	@ 0x8c
 80042a4:	edd7 7a08 	vldr	s15, [r7, #32]
 80042a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80042ac:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 80042b0:	edd7 6a07 	vldr	s13, [r7, #28]
 80042b4:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80042b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042bc:	edc7 7a06 	vstr	s15, [r7, #24]

    _State_vector[SoC] += Kf*innovation;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	ed93 7a2a 	vldr	s14, [r3, #168]	@ 0xa8
 80042c6:	edd7 6a06 	vldr	s13, [r7, #24]
 80042ca:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80042ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80042d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	edc3 7a2a 	vstr	s15, [r3, #168]	@ 0xa8

    _P_matrix[SoC] = (1 - Kf*H) * _P_matrix[SoC];
 80042dc:	ed97 7a06 	vldr	s14, [r7, #24]
 80042e0:	edd7 7a08 	vldr	s15, [r7, #32]
 80042e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042e8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80042ec:	ee37 7a67 	vsub.f32	s14, s14, s15
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	edd3 7a23 	vldr	s15, [r3, #140]	@ 0x8c
 80042f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	edc3 7a23 	vstr	s15, [r3, #140]	@ 0x8c

    // to ensure that (0.0 <= SoC <= 1.0)
    _State_vector[SoC] = std::clamp(_State_vector[SoC], 0.00f, 1.00f);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	33a8      	adds	r3, #168	@ 0xa8
 8004304:	f04f 0200 	mov.w	r2, #0
 8004308:	613a      	str	r2, [r7, #16]
 800430a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800430e:	617a      	str	r2, [r7, #20]
 8004310:	f107 0214 	add.w	r2, r7, #20
 8004314:	f107 0110 	add.w	r1, r7, #16
 8004318:	4618      	mov	r0, r3
 800431a:	f000 f91b 	bl	8004554 <_ZSt5clampIfERKT_S2_S2_S2_>
 800431e:	4603      	mov	r3, r0
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
}
 8004328:	bf00      	nop
 800432a:	3730      	adds	r7, #48	@ 0x30
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}

08004330 <_ZN7SoC_EKF27update_SoC_based_on_voltageERKf>:

void SoC_EKF::update_SoC_based_on_voltage(const float &Voltage)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b084      	sub	sp, #16
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	6039      	str	r1, [r7, #0]
    // set low observation noice covariance to calculate faster voltage soc prediction

    set_time_sampling(100.0f);
 800433a:	ed9f 0a23 	vldr	s0, [pc, #140]	@ 80043c8 <_ZN7SoC_EKF27update_SoC_based_on_voltageERKf+0x98>
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f000 f87f 	bl	8004442 <_ZN7SoC_EKF17set_time_samplingEf>
    set_update_matrix();
 8004344:	6878      	ldr	r0, [r7, #4]
 8004346:	f7ff fdf1 	bl	8003f2c <_ZN7SoC_EKF17set_update_matrixEv>
    set_filter_covariance(1);
 800434a:	eddf 1a20 	vldr	s3, [pc, #128]	@ 80043cc <_ZN7SoC_EKF27update_SoC_based_on_voltageERKf+0x9c>
 800434e:	ed9f 1a1f 	vldr	s2, [pc, #124]	@ 80043cc <_ZN7SoC_EKF27update_SoC_based_on_voltageERKf+0x9c>
 8004352:	eddf 0a1f 	vldr	s1, [pc, #124]	@ 80043d0 <_ZN7SoC_EKF27update_SoC_based_on_voltageERKf+0xa0>
 8004356:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f7ff fe90 	bl	8004080 <_ZN7SoC_EKF21set_filter_covarianceEffff>

    for(int i=0; i < 10e3; ++i){
 8004360:	2300      	movs	r3, #0
 8004362:	60fb      	str	r3, [r7, #12]
 8004364:	e00c      	b.n	8004380 <_ZN7SoC_EKF27update_SoC_based_on_voltageERKf+0x50>
        update(0, Voltage);
 8004366:	f04f 0300 	mov.w	r3, #0
 800436a:	60bb      	str	r3, [r7, #8]
 800436c:	f107 0308 	add.w	r3, r7, #8
 8004370:	683a      	ldr	r2, [r7, #0]
 8004372:	4619      	mov	r1, r3
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	f7ff fea5 	bl	80040c4 <_ZN7SoC_EKF6updateERKfS1_>
    for(int i=0; i < 10e3; ++i){
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	3301      	adds	r3, #1
 800437e:	60fb      	str	r3, [r7, #12]
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	ee07 3a90 	vmov	s15, r3
 8004386:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800438a:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 80043d4 <_ZN7SoC_EKF27update_SoC_based_on_voltageERKf+0xa4>
 800438e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004396:	d4e6      	bmi.n	8004366 <_ZN7SoC_EKF27update_SoC_based_on_voltageERKf+0x36>
    }

    set_filter_covariance();
 8004398:	eddf 1a0c 	vldr	s3, [pc, #48]	@ 80043cc <_ZN7SoC_EKF27update_SoC_based_on_voltageERKf+0x9c>
 800439c:	ed9f 1a0b 	vldr	s2, [pc, #44]	@ 80043cc <_ZN7SoC_EKF27update_SoC_based_on_voltageERKf+0x9c>
 80043a0:	eddf 0a0b 	vldr	s1, [pc, #44]	@ 80043d0 <_ZN7SoC_EKF27update_SoC_based_on_voltageERKf+0xa0>
 80043a4:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 80043d8 <_ZN7SoC_EKF27update_SoC_based_on_voltageERKf+0xa8>
 80043a8:	6878      	ldr	r0, [r7, #4]
 80043aa:	f7ff fe69 	bl	8004080 <_ZN7SoC_EKF21set_filter_covarianceEffff>
    set_time_sampling(0.05f);
 80043ae:	ed9f 0a0b 	vldr	s0, [pc, #44]	@ 80043dc <_ZN7SoC_EKF27update_SoC_based_on_voltageERKf+0xac>
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f000 f845 	bl	8004442 <_ZN7SoC_EKF17set_time_samplingEf>
    set_update_matrix();
 80043b8:	6878      	ldr	r0, [r7, #4]
 80043ba:	f7ff fdb7 	bl	8003f2c <_ZN7SoC_EKF17set_update_matrixEv>
}
 80043be:	bf00      	nop
 80043c0:	3710      	adds	r7, #16
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}
 80043c6:	bf00      	nop
 80043c8:	42c80000 	.word	0x42c80000
 80043cc:	3dcccccd 	.word	0x3dcccccd
 80043d0:	3951b717 	.word	0x3951b717
 80043d4:	461c4000 	.word	0x461c4000
 80043d8:	48f42400 	.word	0x48f42400
 80043dc:	3d4ccccd 	.word	0x3d4ccccd

080043e0 <_ZN7SoC_EKF32set_single_cell_equivalent_modelEPKf>:

void SoC_EKF::set_single_cell_equivalent_model(const float *battery_model){
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b082      	sub	sp, #8
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
 80043e8:	6039      	str	r1, [r7, #0]
    std::copy(battery_model, battery_model+6, _battery.battery_equivalent_model);
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	f103 0118 	add.w	r1, r3, #24
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	3308      	adds	r3, #8
 80043f4:	461a      	mov	r2, r3
 80043f6:	6838      	ldr	r0, [r7, #0]
 80043f8:	f000 f8d4 	bl	80045a4 <_ZSt4copyIPKfPfET0_T_S4_S3_>
};
 80043fc:	bf00      	nop
 80043fe:	3708      	adds	r7, #8
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}

08004404 <_ZN7SoC_EKF15set_initial_SoCEf>:

void SoC_EKF::set_initial_SoC(float aSoC){
 8004404:	b480      	push	{r7}
 8004406:	b083      	sub	sp, #12
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	ed87 0a00 	vstr	s0, [r7]
    _State_vector[SoC] = aSoC;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	683a      	ldr	r2, [r7, #0]
 8004414:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
}
 8004418:	bf00      	nop
 800441a:	370c      	adds	r7, #12
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr

08004424 <_ZN7SoC_EKF16set_full_batteryEv>:

void SoC_EKF::set_full_battery()
{
 8004424:	b480      	push	{r7}
 8004426:	b083      	sub	sp, #12
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
    _State_vector[SoC] = 1.00f;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8004432:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
};
 8004436:	bf00      	nop
 8004438:	370c      	adds	r7, #12
 800443a:	46bd      	mov	sp, r7
 800443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004440:	4770      	bx	lr

08004442 <_ZN7SoC_EKF17set_time_samplingEf>:

void SoC_EKF::set_time_sampling(float Ts){
 8004442:	b480      	push	{r7}
 8004444:	b083      	sub	sp, #12
 8004446:	af00      	add	r7, sp, #0
 8004448:	6078      	str	r0, [r7, #4]
 800444a:	ed87 0a00 	vstr	s0, [r7]
    _Ts = Ts;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	683a      	ldr	r2, [r7, #0]
 8004452:	671a      	str	r2, [r3, #112]	@ 0x70
};
 8004454:	bf00      	nop
 8004456:	370c      	adds	r7, #12
 8004458:	46bd      	mov	sp, r7
 800445a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445e:	4770      	bx	lr

08004460 <_ZN7SoC_EKF25set_battery_configurationEOjS0_>:

void SoC_EKF::set_battery_configuration(unsigned int &&s, unsigned int &&p){
 8004460:	b480      	push	{r7}
 8004462:	b085      	sub	sp, #20
 8004464:	af00      	add	r7, sp, #0
 8004466:	60f8      	str	r0, [r7, #12]
 8004468:	60b9      	str	r1, [r7, #8]
 800446a:	607a      	str	r2, [r7, #4]
    _battery.cell_in_parallel = p;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	601a      	str	r2, [r3, #0]
    _battery.cell_in_series = s;
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	605a      	str	r2, [r3, #4]
};
 800447c:	bf00      	nop
 800447e:	3714      	adds	r7, #20
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr

08004488 <_ZN7SoC_EKF30set_single_cell_ocv_polinomialEPKfj>:

void SoC_EKF::set_single_cell_ocv_polinomial(const float *battery_ocv, unsigned int number_of_coef){
 8004488:	b580      	push	{r7, lr}
 800448a:	b086      	sub	sp, #24
 800448c:	af00      	add	r7, sp, #0
 800448e:	60f8      	str	r0, [r7, #12]
 8004490:	60b9      	str	r1, [r7, #8]
 8004492:	607a      	str	r2, [r7, #4]

    std::copy(battery_ocv, battery_ocv + number_of_coef, _battery.battery_ocv_poli);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	009b      	lsls	r3, r3, #2
 8004498:	68ba      	ldr	r2, [r7, #8]
 800449a:	18d1      	adds	r1, r2, r3
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	3320      	adds	r3, #32
 80044a0:	461a      	mov	r2, r3
 80044a2:	68b8      	ldr	r0, [r7, #8]
 80044a4:	f000 f87e 	bl	80045a4 <_ZSt4copyIPKfPfET0_T_S4_S3_>

    for(unsigned int ocv_poly_iter = 0; ocv_poly_iter < number_of_coef - 1; ocv_poly_iter++){
 80044a8:	2300      	movs	r3, #0
 80044aa:	617b      	str	r3, [r7, #20]
 80044ac:	e01a      	b.n	80044e4 <_ZN7SoC_EKF30set_single_cell_ocv_polinomialEPKfj+0x5c>
        _battery.battery_d_ocv_poli[ocv_poly_iter] = static_cast<float>(number_of_coef - ocv_poly_iter - 1) * battery_ocv[ocv_poly_iter];
 80044ae:	687a      	ldr	r2, [r7, #4]
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	1ad3      	subs	r3, r2, r3
 80044b4:	3b01      	subs	r3, #1
 80044b6:	ee07 3a90 	vmov	s15, r3
 80044ba:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	009b      	lsls	r3, r3, #2
 80044c2:	68ba      	ldr	r2, [r7, #8]
 80044c4:	4413      	add	r3, r2
 80044c6:	edd3 7a00 	vldr	s15, [r3]
 80044ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044ce:	68fa      	ldr	r2, [r7, #12]
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	3310      	adds	r3, #16
 80044d4:	009b      	lsls	r3, r3, #2
 80044d6:	4413      	add	r3, r2
 80044d8:	3304      	adds	r3, #4
 80044da:	edc3 7a00 	vstr	s15, [r3]
    for(unsigned int ocv_poly_iter = 0; ocv_poly_iter < number_of_coef - 1; ocv_poly_iter++){
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	3301      	adds	r3, #1
 80044e2:	617b      	str	r3, [r7, #20]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	3b01      	subs	r3, #1
 80044e8:	697a      	ldr	r2, [r7, #20]
 80044ea:	429a      	cmp	r2, r3
 80044ec:	d3df      	bcc.n	80044ae <_ZN7SoC_EKF30set_single_cell_ocv_polinomialEPKfj+0x26>
    }
};
 80044ee:	bf00      	nop
 80044f0:	bf00      	nop
 80044f2:	3718      	adds	r7, #24
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}

080044f8 <_Z6hornerPKfjS0_>:
    //    std::cout<<"Kf: "<<Kf <<std::endl;
    //    std::cout<<"SoC: "<<State_vector[0]<<std::endl;
}

[[nodiscard]] float horner(const float *arry, unsigned int n, const float *x)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b087      	sub	sp, #28
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	60f8      	str	r0, [r7, #12]
 8004500:	60b9      	str	r1, [r7, #8]
 8004502:	607a      	str	r2, [r7, #4]
    float s = 0;
 8004504:	f04f 0300 	mov.w	r3, #0
 8004508:	617b      	str	r3, [r7, #20]
    for(unsigned int i = 0; i < n ; i++){
 800450a:	2300      	movs	r3, #0
 800450c:	613b      	str	r3, [r7, #16]
 800450e:	e013      	b.n	8004538 <_Z6hornerPKfjS0_+0x40>
        s = s*(*x) + arry[i];
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	ed93 7a00 	vldr	s14, [r3]
 8004516:	edd7 7a05 	vldr	s15, [r7, #20]
 800451a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	009b      	lsls	r3, r3, #2
 8004522:	68fa      	ldr	r2, [r7, #12]
 8004524:	4413      	add	r3, r2
 8004526:	edd3 7a00 	vldr	s15, [r3]
 800452a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800452e:	edc7 7a05 	vstr	s15, [r7, #20]
    for(unsigned int i = 0; i < n ; i++){
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	3301      	adds	r3, #1
 8004536:	613b      	str	r3, [r7, #16]
 8004538:	693a      	ldr	r2, [r7, #16]
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	429a      	cmp	r2, r3
 800453e:	d3e7      	bcc.n	8004510 <_Z6hornerPKfjS0_+0x18>
    }
    return s;
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	ee07 3a90 	vmov	s15, r3
}
 8004546:	eeb0 0a67 	vmov.f32	s0, s15
 800454a:	371c      	adds	r7, #28
 800454c:	46bd      	mov	sp, r7
 800454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004552:	4770      	bx	lr

08004554 <_ZSt5clampIfERKT_S2_S2_S2_>:
   *  @retval `__val` otherwise.
   *  @pre `_Tp` is LessThanComparable and `(__hi < __lo)` is false.
   */
  template<typename _Tp>
    constexpr const _Tp&
    clamp(const _Tp& __val, const _Tp& __lo, const _Tp& __hi)
 8004554:	b580      	push	{r7, lr}
 8004556:	b084      	sub	sp, #16
 8004558:	af00      	add	r7, sp, #0
 800455a:	60f8      	str	r0, [r7, #12]
 800455c:	60b9      	str	r1, [r7, #8]
 800455e:	607a      	str	r2, [r7, #4]
    {
      __glibcxx_assert(!(__hi < __lo));
 8004560:	f7fc fdd0 	bl	8001104 <_ZSt23__is_constant_evaluatedv>
 8004564:	4603      	mov	r3, r0
 8004566:	2b00      	cmp	r3, #0
 8004568:	d00c      	beq.n	8004584 <_ZSt5clampIfERKT_S2_S2_S2_+0x30>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	ed93 7a00 	vldr	s14, [r3]
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	edd3 7a00 	vldr	s15, [r3]
 8004576:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800457a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800457e:	d501      	bpl.n	8004584 <_ZSt5clampIfERKT_S2_S2_S2_+0x30>
 8004580:	2301      	movs	r3, #1
 8004582:	e000      	b.n	8004586 <_ZSt5clampIfERKT_S2_S2_S2_+0x32>
 8004584:	2300      	movs	r3, #0
 8004586:	2b00      	cmp	r3, #0
      return std::min(std::max(__val, __lo), __hi);
 8004588:	68b9      	ldr	r1, [r7, #8]
 800458a:	68f8      	ldr	r0, [r7, #12]
 800458c:	f000 f822 	bl	80045d4 <_ZSt3maxIfERKT_S2_S2_>
 8004590:	4603      	mov	r3, r0
 8004592:	6879      	ldr	r1, [r7, #4]
 8004594:	4618      	mov	r0, r3
 8004596:	f000 f836 	bl	8004606 <_ZSt3minIfERKT_S2_S2_>
 800459a:	4603      	mov	r3, r0
    }
 800459c:	4618      	mov	r0, r3
 800459e:	3710      	adds	r7, #16
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}

080045a4 <_ZSt4copyIPKfPfET0_T_S4_S3_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 80045a4:	b590      	push	{r4, r7, lr}
 80045a6:	b085      	sub	sp, #20
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	60f8      	str	r0, [r7, #12]
 80045ac:	60b9      	str	r1, [r7, #8]
 80045ae:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::reference>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80045b0:	68f8      	ldr	r0, [r7, #12]
 80045b2:	f000 f841 	bl	8004638 <_ZSt12__miter_baseIPKfET_S2_>
 80045b6:	4604      	mov	r4, r0
 80045b8:	68b8      	ldr	r0, [r7, #8]
 80045ba:	f000 f83d 	bl	8004638 <_ZSt12__miter_baseIPKfET_S2_>
 80045be:	4603      	mov	r3, r0
 80045c0:	687a      	ldr	r2, [r7, #4]
 80045c2:	4619      	mov	r1, r3
 80045c4:	4620      	mov	r0, r4
 80045c6:	f000 f842 	bl	800464e <_ZSt13__copy_move_aILb0EPKfPfET1_T0_S4_S3_>
 80045ca:	4603      	mov	r3, r0
    }
 80045cc:	4618      	mov	r0, r3
 80045ce:	3714      	adds	r7, #20
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd90      	pop	{r4, r7, pc}

080045d4 <_ZSt3maxIfERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 80045d4:	b480      	push	{r7}
 80045d6:	b083      	sub	sp, #12
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
 80045dc:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	ed93 7a00 	vldr	s14, [r3]
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	edd3 7a00 	vldr	s15, [r3]
 80045ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80045ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045f2:	d501      	bpl.n	80045f8 <_ZSt3maxIfERKT_S2_S2_+0x24>
	return __b;
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	e000      	b.n	80045fa <_ZSt3maxIfERKT_S2_S2_+0x26>
      return __a;
 80045f8:	687b      	ldr	r3, [r7, #4]
    }
 80045fa:	4618      	mov	r0, r3
 80045fc:	370c      	adds	r7, #12
 80045fe:	46bd      	mov	sp, r7
 8004600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004604:	4770      	bx	lr

08004606 <_ZSt3minIfERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8004606:	b480      	push	{r7}
 8004608:	b083      	sub	sp, #12
 800460a:	af00      	add	r7, sp, #0
 800460c:	6078      	str	r0, [r7, #4]
 800460e:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	ed93 7a00 	vldr	s14, [r3]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	edd3 7a00 	vldr	s15, [r3]
 800461c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004620:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004624:	d501      	bpl.n	800462a <_ZSt3minIfERKT_S2_S2_+0x24>
	return __b;
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	e000      	b.n	800462c <_ZSt3minIfERKT_S2_S2_+0x26>
      return __a;
 800462a:	687b      	ldr	r3, [r7, #4]
    }
 800462c:	4618      	mov	r0, r3
 800462e:	370c      	adds	r7, #12
 8004630:	46bd      	mov	sp, r7
 8004632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004636:	4770      	bx	lr

08004638 <_ZSt12__miter_baseIPKfET_S2_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 8004638:	b480      	push	{r7}
 800463a:	b083      	sub	sp, #12
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
    { return __it; }
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	4618      	mov	r0, r3
 8004644:	370c      	adds	r7, #12
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr

0800464e <_ZSt13__copy_move_aILb0EPKfPfET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 800464e:	b5b0      	push	{r4, r5, r7, lr}
 8004650:	b084      	sub	sp, #16
 8004652:	af00      	add	r7, sp, #0
 8004654:	60f8      	str	r0, [r7, #12]
 8004656:	60b9      	str	r1, [r7, #8]
 8004658:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800465a:	68f8      	ldr	r0, [r7, #12]
 800465c:	f000 f81a 	bl	8004694 <_ZSt12__niter_baseIPKfET_S2_>
 8004660:	4604      	mov	r4, r0
 8004662:	68b8      	ldr	r0, [r7, #8]
 8004664:	f000 f816 	bl	8004694 <_ZSt12__niter_baseIPKfET_S2_>
 8004668:	4605      	mov	r5, r0
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	4618      	mov	r0, r3
 800466e:	f000 f81c 	bl	80046aa <_ZSt12__niter_baseIPfET_S1_>
 8004672:	4603      	mov	r3, r0
 8004674:	461a      	mov	r2, r3
 8004676:	4629      	mov	r1, r5
 8004678:	4620      	mov	r0, r4
 800467a:	f000 f821 	bl	80046c0 <_ZSt14__copy_move_a1ILb0EPKfPfET1_T0_S4_S3_>
 800467e:	4602      	mov	r2, r0
 8004680:	1d3b      	adds	r3, r7, #4
 8004682:	4611      	mov	r1, r2
 8004684:	4618      	mov	r0, r3
 8004686:	f000 f82b 	bl	80046e0 <_ZSt12__niter_wrapIPfET_RKS1_S1_>
 800468a:	4603      	mov	r3, r0
    }
 800468c:	4618      	mov	r0, r3
 800468e:	3710      	adds	r7, #16
 8004690:	46bd      	mov	sp, r7
 8004692:	bdb0      	pop	{r4, r5, r7, pc}

08004694 <_ZSt12__niter_baseIPKfET_S2_>:
    __niter_base(_Iterator __it)
 8004694:	b480      	push	{r7}
 8004696:	b083      	sub	sp, #12
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
    { return __it; }
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	4618      	mov	r0, r3
 80046a0:	370c      	adds	r7, #12
 80046a2:	46bd      	mov	sp, r7
 80046a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a8:	4770      	bx	lr

080046aa <_ZSt12__niter_baseIPfET_S1_>:
    __niter_base(_Iterator __it)
 80046aa:	b480      	push	{r7}
 80046ac:	b083      	sub	sp, #12
 80046ae:	af00      	add	r7, sp, #0
 80046b0:	6078      	str	r0, [r7, #4]
    { return __it; }
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	4618      	mov	r0, r3
 80046b6:	370c      	adds	r7, #12
 80046b8:	46bd      	mov	sp, r7
 80046ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046be:	4770      	bx	lr

080046c0 <_ZSt14__copy_move_a1ILb0EPKfPfET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b084      	sub	sp, #16
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	60f8      	str	r0, [r7, #12]
 80046c8:	60b9      	str	r1, [r7, #8]
 80046ca:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 80046cc:	687a      	ldr	r2, [r7, #4]
 80046ce:	68b9      	ldr	r1, [r7, #8]
 80046d0:	68f8      	ldr	r0, [r7, #12]
 80046d2:	f000 f811 	bl	80046f8 <_ZSt14__copy_move_a2ILb0EPKfPfET1_T0_S4_S3_>
 80046d6:	4603      	mov	r3, r0
 80046d8:	4618      	mov	r0, r3
 80046da:	3710      	adds	r7, #16
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}

080046e0 <_ZSt12__niter_wrapIPfET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 80046e0:	b480      	push	{r7}
 80046e2:	b083      	sub	sp, #12
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
 80046e8:	6039      	str	r1, [r7, #0]
    { return __res; }
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	4618      	mov	r0, r3
 80046ee:	370c      	adds	r7, #12
 80046f0:	46bd      	mov	sp, r7
 80046f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f6:	4770      	bx	lr

080046f8 <_ZSt14__copy_move_a2ILb0EPKfPfET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b084      	sub	sp, #16
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	60f8      	str	r0, [r7, #12]
 8004700:	60b9      	str	r1, [r7, #8]
 8004702:	607a      	str	r2, [r7, #4]
      if (std::is_constant_evaluated())
 8004704:	f7ff fc0a 	bl	8003f1c <_ZSt21is_constant_evaluatedv>
 8004708:	4603      	mov	r3, r0
 800470a:	2b00      	cmp	r3, #0
 800470c:	d006      	beq.n	800471c <_ZSt14__copy_move_a2ILb0EPKfPfET1_T0_S4_S3_+0x24>
	  __copy_m(__first, __last, __result);
 800470e:	687a      	ldr	r2, [r7, #4]
 8004710:	68b9      	ldr	r1, [r7, #8]
 8004712:	68f8      	ldr	r0, [r7, #12]
 8004714:	f000 f80d 	bl	8004732 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKfPfEET0_T_S7_S6_>
 8004718:	4603      	mov	r3, r0
 800471a:	e006      	b.n	800472a <_ZSt14__copy_move_a2ILb0EPKfPfET1_T0_S4_S3_+0x32>
			      _Category>::__copy_m(__first, __last, __result);
 800471c:	687a      	ldr	r2, [r7, #4]
 800471e:	68b9      	ldr	r1, [r7, #8]
 8004720:	68f8      	ldr	r0, [r7, #12]
 8004722:	f000 f829 	bl	8004778 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
 8004726:	4603      	mov	r3, r0
 8004728:	bf00      	nop
    }
 800472a:	4618      	mov	r0, r3
 800472c:	3710      	adds	r7, #16
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}

08004732 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKfPfEET0_T_S7_S6_>:
	__copy_m(_II __first, _II __last, _OI __result)
 8004732:	b480      	push	{r7}
 8004734:	b087      	sub	sp, #28
 8004736:	af00      	add	r7, sp, #0
 8004738:	60f8      	str	r0, [r7, #12]
 800473a:	60b9      	str	r1, [r7, #8]
 800473c:	607a      	str	r2, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 800473e:	68ba      	ldr	r2, [r7, #8]
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	1ad3      	subs	r3, r2, r3
 8004744:	109b      	asrs	r3, r3, #2
 8004746:	617b      	str	r3, [r7, #20]
 8004748:	e00c      	b.n	8004764 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKfPfEET0_T_S7_S6_+0x32>
	      *__result = *__first;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	601a      	str	r2, [r3, #0]
	      ++__first;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	3304      	adds	r3, #4
 8004756:	60fb      	str	r3, [r7, #12]
	      ++__result;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	3304      	adds	r3, #4
 800475c:	607b      	str	r3, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	3b01      	subs	r3, #1
 8004762:	617b      	str	r3, [r7, #20]
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	2b00      	cmp	r3, #0
 8004768:	dcef      	bgt.n	800474a <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKfPfEET0_T_S7_S6_+0x18>
	  return __result;
 800476a:	687b      	ldr	r3, [r7, #4]
	}
 800476c:	4618      	mov	r0, r3
 800476e:	371c      	adds	r7, #28
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr

08004778 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8004778:	b580      	push	{r7, lr}
 800477a:	b086      	sub	sp, #24
 800477c:	af00      	add	r7, sp, #0
 800477e:	60f8      	str	r0, [r7, #12]
 8004780:	60b9      	str	r1, [r7, #8]
 8004782:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8004784:	68ba      	ldr	r2, [r7, #8]
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	1ad3      	subs	r3, r2, r3
 800478a:	109b      	asrs	r3, r3, #2
 800478c:	617b      	str	r3, [r7, #20]
	  if (_Num)
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d006      	beq.n	80047a2 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	009b      	lsls	r3, r3, #2
 8004798:	461a      	mov	r2, r3
 800479a:	68f9      	ldr	r1, [r7, #12]
 800479c:	6878      	ldr	r0, [r7, #4]
 800479e:	f010 fa34 	bl	8014c0a <memmove>
	  return __result + _Num;
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	009b      	lsls	r3, r3, #2
 80047a6:	687a      	ldr	r2, [r7, #4]
 80047a8:	4413      	add	r3, r2
	}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3718      	adds	r7, #24
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}

080047b2 <_ZN7SoC_EKF7get_SoCEv>:
    // negative current -> charge
    void update(const float &Current, const float &Voltage);

    void update_SoC_based_on_voltage(const float &Voltage);
    
    [[nodiscard]] float get_SoC(){return _State_vector[SoC];};
 80047b2:	b480      	push	{r7}
 80047b4:	b083      	sub	sp, #12
 80047b6:	af00      	add	r7, sp, #0
 80047b8:	6078      	str	r0, [r7, #4]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80047c0:	ee07 3a90 	vmov	s15, r3
 80047c4:	eeb0 0a67 	vmov.f32	s0, s15
 80047c8:	370c      	adds	r7, #12
 80047ca:	46bd      	mov	sp, r7
 80047cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d0:	4770      	bx	lr
	...

080047d4 <_Z17calculate_currentv>:
float max_divided_current_sensor_output_voltage = ((float)(CS_MAX_OUTPUT_VOLTAGE * RESISTOR_2) / (float)(RESISTOR_1 + RESISTOR_2)) / 1000.0;
float current_sensor_volts_to_amper = ((float)(CS_MVOLT_TO_AMPER * RESISTOR_2) / (float)(RESISTOR_1 + RESISTOR_2)) / 1000.0;
float output_current_factor = max_divided_current_sensor_output_voltage / 4096.0 * (1.0 / current_sensor_volts_to_amper);

void calculate_current()
{
 80047d4:	b480      	push	{r7}
 80047d6:	b087      	sub	sp, #28
 80047d8:	af00      	add	r7, sp, #0
	float raw_sum = 0, raw_max = INT32_MIN, raw_min = INT32_MAX, avarage_adc;
 80047da:	f04f 0300 	mov.w	r3, #0
 80047de:	617b      	str	r3, [r7, #20]
 80047e0:	f04f 434f 	mov.w	r3, #3472883712	@ 0xcf000000
 80047e4:	613b      	str	r3, [r7, #16]
 80047e6:	f04f 439e 	mov.w	r3, #1325400064	@ 0x4f000000
 80047ea:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < NUMBER_OF_CS_SAMPLES; i++)
 80047ec:	2300      	movs	r3, #0
 80047ee:	60bb      	str	r3, [r7, #8]
 80047f0:	e03f      	b.n	8004872 <_Z17calculate_currentv+0x9e>
	{
		int16_t raw_value = data.current.adc[i];
 80047f2:	4a43      	ldr	r2, [pc, #268]	@ (8004900 <_Z17calculate_currentv+0x12c>)
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	330e      	adds	r3, #14
 80047f8:	009b      	lsls	r3, r3, #2
 80047fa:	4413      	add	r3, r2
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	807b      	strh	r3, [r7, #2]
		raw_sum += raw_value;
 8004800:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004804:	ee07 3a90 	vmov	s15, r3
 8004808:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800480c:	ed97 7a05 	vldr	s14, [r7, #20]
 8004810:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004814:	edc7 7a05 	vstr	s15, [r7, #20]
		if(raw_value > raw_max) raw_max = raw_value;
 8004818:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800481c:	ee07 3a90 	vmov	s15, r3
 8004820:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004824:	ed97 7a04 	vldr	s14, [r7, #16]
 8004828:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800482c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004830:	d507      	bpl.n	8004842 <_Z17calculate_currentv+0x6e>
 8004832:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004836:	ee07 3a90 	vmov	s15, r3
 800483a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800483e:	edc7 7a04 	vstr	s15, [r7, #16]
		if(raw_value < raw_min) raw_min = raw_value;
 8004842:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004846:	ee07 3a90 	vmov	s15, r3
 800484a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800484e:	ed97 7a03 	vldr	s14, [r7, #12]
 8004852:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004856:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800485a:	dd07      	ble.n	800486c <_Z17calculate_currentv+0x98>
 800485c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004860:	ee07 3a90 	vmov	s15, r3
 8004864:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004868:	edc7 7a03 	vstr	s15, [r7, #12]
	for(int i = 0; i < NUMBER_OF_CS_SAMPLES; i++)
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	3301      	adds	r3, #1
 8004870:	60bb      	str	r3, [r7, #8]
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	2b63      	cmp	r3, #99	@ 0x63
 8004876:	ddbc      	ble.n	80047f2 <_Z17calculate_currentv+0x1e>
	}
	avarage_adc = raw_sum / NUMBER_OF_CS_SAMPLES;
 8004878:	ed97 7a05 	vldr	s14, [r7, #20]
 800487c:	eddf 6a21 	vldr	s13, [pc, #132]	@ 8004904 <_Z17calculate_currentv+0x130>
 8004880:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004884:	edc7 7a01 	vstr	s15, [r7, #4]

	avarage_adc -= NEUTRAL_CURRENT_SENSOR;
 8004888:	edd7 7a01 	vldr	s15, [r7, #4]
 800488c:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8004908 <_Z17calculate_currentv+0x134>
 8004890:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004894:	edc7 7a01 	vstr	s15, [r7, #4]
	raw_max -= NEUTRAL_CURRENT_SENSOR;
 8004898:	edd7 7a04 	vldr	s15, [r7, #16]
 800489c:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8004908 <_Z17calculate_currentv+0x134>
 80048a0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80048a4:	edc7 7a04 	vstr	s15, [r7, #16]
	raw_min -= NEUTRAL_CURRENT_SENSOR;
 80048a8:	edd7 7a03 	vldr	s15, [r7, #12]
 80048ac:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8004908 <_Z17calculate_currentv+0x134>
 80048b0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80048b4:	edc7 7a03 	vstr	s15, [r7, #12]

	data.current.value = avarage_adc * output_current_factor;
 80048b8:	4b14      	ldr	r3, [pc, #80]	@ (800490c <_Z17calculate_currentv+0x138>)
 80048ba:	ed93 7a00 	vldr	s14, [r3]
 80048be:	edd7 7a01 	vldr	s15, [r7, #4]
 80048c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048c6:	4b0e      	ldr	r3, [pc, #56]	@ (8004900 <_Z17calculate_currentv+0x12c>)
 80048c8:	edc3 7a73 	vstr	s15, [r3, #460]	@ 0x1cc
	data.current.value_max = (float)raw_max * output_current_factor;
 80048cc:	4b0f      	ldr	r3, [pc, #60]	@ (800490c <_Z17calculate_currentv+0x138>)
 80048ce:	ed93 7a00 	vldr	s14, [r3]
 80048d2:	edd7 7a04 	vldr	s15, [r7, #16]
 80048d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048da:	4b09      	ldr	r3, [pc, #36]	@ (8004900 <_Z17calculate_currentv+0x12c>)
 80048dc:	edc3 7a74 	vstr	s15, [r3, #464]	@ 0x1d0
	data.current.value_min = (float)raw_min * output_current_factor;
 80048e0:	4b0a      	ldr	r3, [pc, #40]	@ (800490c <_Z17calculate_currentv+0x138>)
 80048e2:	ed93 7a00 	vldr	s14, [r3]
 80048e6:	edd7 7a03 	vldr	s15, [r7, #12]
 80048ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048ee:	4b04      	ldr	r3, [pc, #16]	@ (8004900 <_Z17calculate_currentv+0x12c>)
 80048f0:	edc3 7a75 	vstr	s15, [r3, #468]	@ 0x1d4
		chargingState = 1;
	}else if (outputCurrent >= 0 || HAL_GPIO_ReadPin(LED_2_GPIO_Port, LED_2_Pin) == 1){
		chargingState = 0;
	}*/

}
 80048f4:	bf00      	nop
 80048f6:	371c      	adds	r7, #28
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr
 8004900:	20000aa4 	.word	0x20000aa4
 8004904:	42c80000 	.word	0x42c80000
 8004908:	4502a000 	.word	0x4502a000
 800490c:	20003534 	.word	0x20003534

08004910 <_Z18start_soc_functionPv>:

void start_soc_function(void *argument){
 8004910:	b580      	push	{r7, lr}
 8004912:	b086      	sub	sp, #24
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
	data.soc.main.set_single_cell_equivalent_model(ICR18650);
 8004918:	4934      	ldr	r1, [pc, #208]	@ (80049ec <_Z18start_soc_functionPv+0xdc>)
 800491a:	4835      	ldr	r0, [pc, #212]	@ (80049f0 <_Z18start_soc_functionPv+0xe0>)
 800491c:	f7ff fd60 	bl	80043e0 <_ZN7SoC_EKF32set_single_cell_equivalent_modelEPKf>
	data.soc.main.set_single_cell_ocv_polinomial(Li_Ion_ocv, Li_Ion_ocv_length);
 8004920:	2209      	movs	r2, #9
 8004922:	4934      	ldr	r1, [pc, #208]	@ (80049f4 <_Z18start_soc_functionPv+0xe4>)
 8004924:	4832      	ldr	r0, [pc, #200]	@ (80049f0 <_Z18start_soc_functionPv+0xe0>)
 8004926:	f7ff fdaf 	bl	8004488 <_ZN7SoC_EKF30set_single_cell_ocv_polinomialEPKfj>
	data.soc.main.set_battery_configuration(1, 2);
 800492a:	2301      	movs	r3, #1
 800492c:	613b      	str	r3, [r7, #16]
 800492e:	2302      	movs	r3, #2
 8004930:	617b      	str	r3, [r7, #20]
 8004932:	f107 0214 	add.w	r2, r7, #20
 8004936:	f107 0310 	add.w	r3, r7, #16
 800493a:	4619      	mov	r1, r3
 800493c:	482c      	ldr	r0, [pc, #176]	@ (80049f0 <_Z18start_soc_functionPv+0xe0>)
 800493e:	f7ff fd8f 	bl	8004460 <_ZN7SoC_EKF25set_battery_configurationEOjS0_>
	data.soc.main.set_time_sampling(0.03f);
 8004942:	ed9f 0a2d 	vldr	s0, [pc, #180]	@ 80049f8 <_Z18start_soc_functionPv+0xe8>
 8004946:	482a      	ldr	r0, [pc, #168]	@ (80049f0 <_Z18start_soc_functionPv+0xe0>)
 8004948:	f7ff fd7b 	bl	8004442 <_ZN7SoC_EKF17set_time_samplingEf>
	data.soc.main.set_update_matrix();
 800494c:	4828      	ldr	r0, [pc, #160]	@ (80049f0 <_Z18start_soc_functionPv+0xe0>)
 800494e:	f7ff faed 	bl	8003f2c <_ZN7SoC_EKF17set_update_matrixEv>
	data.soc.main.set_initial_SoC(0.5);
 8004952:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 8004956:	4826      	ldr	r0, [pc, #152]	@ (80049f0 <_Z18start_soc_functionPv+0xe0>)
 8004958:	f7ff fd54 	bl	8004404 <_ZN7SoC_EKF15set_initial_SoCEf>

	osDelay(100);
 800495c:	2064      	movs	r0, #100	@ 0x64
 800495e:	f00b ff47 	bl	80107f0 <osDelay>

	float temp_voltage = (float)data.voltages.cells[0] / 10'000.0f;
 8004962:	4b26      	ldr	r3, [pc, #152]	@ (80049fc <_Z18start_soc_functionPv+0xec>)
 8004964:	881b      	ldrh	r3, [r3, #0]
 8004966:	ee07 3a90 	vmov	s15, r3
 800496a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800496e:	eddf 6a24 	vldr	s13, [pc, #144]	@ 8004a00 <_Z18start_soc_functionPv+0xf0>
 8004972:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004976:	edc7 7a03 	vstr	s15, [r7, #12]
	data.soc.main.update_SoC_based_on_voltage(temp_voltage);
 800497a:	f107 030c 	add.w	r3, r7, #12
 800497e:	4619      	mov	r1, r3
 8004980:	481b      	ldr	r0, [pc, #108]	@ (80049f0 <_Z18start_soc_functionPv+0xe0>)
 8004982:	f7ff fcd5 	bl	8004330 <_ZN7SoC_EKF27update_SoC_based_on_voltageERKf>

	for(;;){
		osDelay(30);
 8004986:	201e      	movs	r0, #30
 8004988:	f00b ff32 	bl	80107f0 <osDelay>

		calculate_current();
 800498c:	f7ff ff22 	bl	80047d4 <_Z17calculate_currentv>

		float temp_voltage = (float)data.voltages.cells[0] / 10'000.0f;
 8004990:	4b1a      	ldr	r3, [pc, #104]	@ (80049fc <_Z18start_soc_functionPv+0xec>)
 8004992:	881b      	ldrh	r3, [r3, #0]
 8004994:	ee07 3a90 	vmov	s15, r3
 8004998:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800499c:	eddf 6a18 	vldr	s13, [pc, #96]	@ 8004a00 <_Z18start_soc_functionPv+0xf0>
 80049a0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80049a4:	edc7 7a02 	vstr	s15, [r7, #8]
		data.soc.main.update(data.current.value, temp_voltage);
 80049a8:	f107 0308 	add.w	r3, r7, #8
 80049ac:	461a      	mov	r2, r3
 80049ae:	4915      	ldr	r1, [pc, #84]	@ (8004a04 <_Z18start_soc_functionPv+0xf4>)
 80049b0:	480f      	ldr	r0, [pc, #60]	@ (80049f0 <_Z18start_soc_functionPv+0xe0>)
 80049b2:	f7ff fb87 	bl	80040c4 <_ZN7SoC_EKF6updateERKfS1_>
		data.soc.value = data.soc.main.get_SoC();
 80049b6:	480e      	ldr	r0, [pc, #56]	@ (80049f0 <_Z18start_soc_functionPv+0xe0>)
 80049b8:	f7ff fefb 	bl	80047b2 <_ZN7SoC_EKF7get_SoCEv>
 80049bc:	eef0 7a40 	vmov.f32	s15, s0
 80049c0:	4b0e      	ldr	r3, [pc, #56]	@ (80049fc <_Z18start_soc_functionPv+0xec>)
 80049c2:	edc3 7aa3 	vstr	s15, [r3, #652]	@ 0x28c
		data.soc.value_can = (uint8_t)(data.soc.value * 100);
 80049c6:	4b0d      	ldr	r3, [pc, #52]	@ (80049fc <_Z18start_soc_functionPv+0xec>)
 80049c8:	edd3 7aa3 	vldr	s15, [r3, #652]	@ 0x28c
 80049cc:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8004a08 <_Z18start_soc_functionPv+0xf8>
 80049d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80049d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049d8:	edc7 7a00 	vstr	s15, [r7]
 80049dc:	783b      	ldrb	r3, [r7, #0]
 80049de:	b2da      	uxtb	r2, r3
 80049e0:	4b06      	ldr	r3, [pc, #24]	@ (80049fc <_Z18start_soc_functionPv+0xec>)
 80049e2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

	}
 80049e6:	bf00      	nop
 80049e8:	e7cd      	b.n	8004986 <_Z18start_soc_functionPv+0x76>
 80049ea:	bf00      	nop
 80049ec:	0801745c 	.word	0x0801745c
 80049f0:	20000c7c 	.word	0x20000c7c
 80049f4:	08017474 	.word	0x08017474
 80049f8:	3cf5c28f 	.word	0x3cf5c28f
 80049fc:	20000aa4 	.word	0x20000aa4
 8004a00:	461c4000 	.word	0x461c4000
 8004a04:	20000c70 	.word	0x20000c70
 8004a08:	42c80000 	.word	0x42c80000

08004a0c <_Z41__static_initialization_and_destruction_0ii>:
}
 8004a0c:	b480      	push	{r7}
 8004a0e:	b083      	sub	sp, #12
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
 8004a14:	6039      	str	r1, [r7, #0]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d117      	bne.n	8004a4c <_Z41__static_initialization_and_destruction_0ii+0x40>
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d112      	bne.n	8004a4c <_Z41__static_initialization_and_destruction_0ii+0x40>
float output_current_factor = max_divided_current_sensor_output_voltage / 4096.0 * (1.0 / current_sensor_volts_to_amper);
 8004a26:	4b0c      	ldr	r3, [pc, #48]	@ (8004a58 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8004a28:	edd3 7a00 	vldr	s15, [r3]
 8004a2c:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 8004a5c <_Z41__static_initialization_and_destruction_0ii+0x50>
 8004a30:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004a34:	4b0a      	ldr	r3, [pc, #40]	@ (8004a60 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8004a36:	edd3 6a00 	vldr	s13, [r3]
 8004a3a:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8004a3e:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8004a42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a46:	4b07      	ldr	r3, [pc, #28]	@ (8004a64 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8004a48:	edc3 7a00 	vstr	s15, [r3]
}
 8004a4c:	bf00      	nop
 8004a4e:	370c      	adds	r7, #12
 8004a50:	46bd      	mov	sp, r7
 8004a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a56:	4770      	bx	lr
 8004a58:	20000290 	.word	0x20000290
 8004a5c:	45800000 	.word	0x45800000
 8004a60:	20000294 	.word	0x20000294
 8004a64:	20003534 	.word	0x20003534

08004a68 <_GLOBAL__sub_I_max_divided_current_sensor_output_voltage>:
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	af00      	add	r7, sp, #0
 8004a6c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8004a70:	2001      	movs	r0, #1
 8004a72:	f7ff ffcb 	bl	8004a0c <_Z41__static_initialization_and_destruction_0ii>
 8004a76:	bd80      	pop	{r7, pc}

08004a78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b082      	sub	sp, #8
 8004a7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a7e:	4b15      	ldr	r3, [pc, #84]	@ (8004ad4 <HAL_MspInit+0x5c>)
 8004a80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a82:	4a14      	ldr	r2, [pc, #80]	@ (8004ad4 <HAL_MspInit+0x5c>)
 8004a84:	f043 0301 	orr.w	r3, r3, #1
 8004a88:	6613      	str	r3, [r2, #96]	@ 0x60
 8004a8a:	4b12      	ldr	r3, [pc, #72]	@ (8004ad4 <HAL_MspInit+0x5c>)
 8004a8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a8e:	f003 0301 	and.w	r3, r3, #1
 8004a92:	607b      	str	r3, [r7, #4]
 8004a94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004a96:	4b0f      	ldr	r3, [pc, #60]	@ (8004ad4 <HAL_MspInit+0x5c>)
 8004a98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a9a:	4a0e      	ldr	r2, [pc, #56]	@ (8004ad4 <HAL_MspInit+0x5c>)
 8004a9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004aa0:	6593      	str	r3, [r2, #88]	@ 0x58
 8004aa2:	4b0c      	ldr	r3, [pc, #48]	@ (8004ad4 <HAL_MspInit+0x5c>)
 8004aa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004aa6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004aaa:	603b      	str	r3, [r7, #0]
 8004aac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004aae:	2200      	movs	r2, #0
 8004ab0:	210f      	movs	r1, #15
 8004ab2:	f06f 0001 	mvn.w	r0, #1
 8004ab6:	f003 f955 	bl	8007d64 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 8004aba:	2200      	movs	r2, #0
 8004abc:	2105      	movs	r1, #5
 8004abe:	2005      	movs	r0, #5
 8004ac0:	f003 f950 	bl	8007d64 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8004ac4:	2005      	movs	r0, #5
 8004ac6:	f003 f969 	bl	8007d9c <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004aca:	bf00      	nop
 8004acc:	3708      	adds	r7, #8
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}
 8004ad2:	bf00      	nop
 8004ad4:	40021000 	.word	0x40021000

08004ad8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b0b4      	sub	sp, #208	@ 0xd0
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ae0:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	601a      	str	r2, [r3, #0]
 8004ae8:	605a      	str	r2, [r3, #4]
 8004aea:	609a      	str	r2, [r3, #8]
 8004aec:	60da      	str	r2, [r3, #12]
 8004aee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004af0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004af4:	2298      	movs	r2, #152	@ 0x98
 8004af6:	2100      	movs	r1, #0
 8004af8:	4618      	mov	r0, r3
 8004afa:	f010 f8a0 	bl	8014c3e <memset>
  if(hadc->Instance==ADC1)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a97      	ldr	r2, [pc, #604]	@ (8004d60 <HAL_ADC_MspInit+0x288>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	f040 80ad 	bne.w	8004c64 <HAL_ADC_MspInit+0x18c>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8004b0a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004b0e:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8004b10:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8004b14:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004b18:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f005 ffbb 	bl	800aa98 <HAL_RCCEx_PeriphCLKConfig>
 8004b22:	4603      	mov	r3, r0
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d001      	beq.n	8004b2c <HAL_ADC_MspInit+0x54>
    {
      Error_Handler();
 8004b28:	f7ff f946 	bl	8003db8 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 8004b2c:	4b8d      	ldr	r3, [pc, #564]	@ (8004d64 <HAL_ADC_MspInit+0x28c>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	3301      	adds	r3, #1
 8004b32:	4a8c      	ldr	r2, [pc, #560]	@ (8004d64 <HAL_ADC_MspInit+0x28c>)
 8004b34:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8004b36:	4b8b      	ldr	r3, [pc, #556]	@ (8004d64 <HAL_ADC_MspInit+0x28c>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	d10b      	bne.n	8004b56 <HAL_ADC_MspInit+0x7e>
      __HAL_RCC_ADC_CLK_ENABLE();
 8004b3e:	4b8a      	ldr	r3, [pc, #552]	@ (8004d68 <HAL_ADC_MspInit+0x290>)
 8004b40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b42:	4a89      	ldr	r2, [pc, #548]	@ (8004d68 <HAL_ADC_MspInit+0x290>)
 8004b44:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004b48:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004b4a:	4b87      	ldr	r3, [pc, #540]	@ (8004d68 <HAL_ADC_MspInit+0x290>)
 8004b4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b4e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004b52:	623b      	str	r3, [r7, #32]
 8004b54:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b56:	4b84      	ldr	r3, [pc, #528]	@ (8004d68 <HAL_ADC_MspInit+0x290>)
 8004b58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b5a:	4a83      	ldr	r2, [pc, #524]	@ (8004d68 <HAL_ADC_MspInit+0x290>)
 8004b5c:	f043 0301 	orr.w	r3, r3, #1
 8004b60:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004b62:	4b81      	ldr	r3, [pc, #516]	@ (8004d68 <HAL_ADC_MspInit+0x290>)
 8004b64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b66:	f003 0301 	and.w	r3, r3, #1
 8004b6a:	61fb      	str	r3, [r7, #28]
 8004b6c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004b6e:	4b7e      	ldr	r3, [pc, #504]	@ (8004d68 <HAL_ADC_MspInit+0x290>)
 8004b70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b72:	4a7d      	ldr	r2, [pc, #500]	@ (8004d68 <HAL_ADC_MspInit+0x290>)
 8004b74:	f043 0304 	orr.w	r3, r3, #4
 8004b78:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004b7a:	4b7b      	ldr	r3, [pc, #492]	@ (8004d68 <HAL_ADC_MspInit+0x290>)
 8004b7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b7e:	f003 0304 	and.w	r3, r3, #4
 8004b82:	61bb      	str	r3, [r7, #24]
 8004b84:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b86:	4b78      	ldr	r3, [pc, #480]	@ (8004d68 <HAL_ADC_MspInit+0x290>)
 8004b88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b8a:	4a77      	ldr	r2, [pc, #476]	@ (8004d68 <HAL_ADC_MspInit+0x290>)
 8004b8c:	f043 0302 	orr.w	r3, r3, #2
 8004b90:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004b92:	4b75      	ldr	r3, [pc, #468]	@ (8004d68 <HAL_ADC_MspInit+0x290>)
 8004b94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b96:	f003 0302 	and.w	r3, r3, #2
 8004b9a:	617b      	str	r3, [r7, #20]
 8004b9c:	697b      	ldr	r3, [r7, #20]
    PA7     ------> ADC1_IN12
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = THERM_1_Pin|THERM_2_Pin|THERM_3_Pin|THERM_4_Pin
 8004b9e:	23f8      	movs	r3, #248	@ 0xf8
 8004ba0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
                          |THERM_5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8004ba4:	230b      	movs	r3, #11
 8004ba6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004baa:	2300      	movs	r3, #0
 8004bac:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004bb0:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8004bb4:	4619      	mov	r1, r3
 8004bb6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004bba:	f003 fb6f 	bl	800829c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = THERM_6_Pin|THERM_7_Pin;
 8004bbe:	2330      	movs	r3, #48	@ 0x30
 8004bc0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8004bc4:	230b      	movs	r3, #11
 8004bc6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004bd0:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8004bd4:	4619      	mov	r1, r3
 8004bd6:	4865      	ldr	r0, [pc, #404]	@ (8004d6c <HAL_ADC_MspInit+0x294>)
 8004bd8:	f003 fb60 	bl	800829c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = THERM_8_Pin;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8004be2:	230b      	movs	r3, #11
 8004be4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004be8:	2300      	movs	r3, #0
 8004bea:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(THERM_8_GPIO_Port, &GPIO_InitStruct);
 8004bee:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8004bf2:	4619      	mov	r1, r3
 8004bf4:	485e      	ldr	r0, [pc, #376]	@ (8004d70 <HAL_ADC_MspInit+0x298>)
 8004bf6:	f003 fb51 	bl	800829c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8004bfa:	4b5e      	ldr	r3, [pc, #376]	@ (8004d74 <HAL_ADC_MspInit+0x29c>)
 8004bfc:	4a5e      	ldr	r2, [pc, #376]	@ (8004d78 <HAL_ADC_MspInit+0x2a0>)
 8004bfe:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8004c00:	4b5c      	ldr	r3, [pc, #368]	@ (8004d74 <HAL_ADC_MspInit+0x29c>)
 8004c02:	2205      	movs	r2, #5
 8004c04:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004c06:	4b5b      	ldr	r3, [pc, #364]	@ (8004d74 <HAL_ADC_MspInit+0x29c>)
 8004c08:	2200      	movs	r2, #0
 8004c0a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004c0c:	4b59      	ldr	r3, [pc, #356]	@ (8004d74 <HAL_ADC_MspInit+0x29c>)
 8004c0e:	2200      	movs	r2, #0
 8004c10:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004c12:	4b58      	ldr	r3, [pc, #352]	@ (8004d74 <HAL_ADC_MspInit+0x29c>)
 8004c14:	2280      	movs	r2, #128	@ 0x80
 8004c16:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004c18:	4b56      	ldr	r3, [pc, #344]	@ (8004d74 <HAL_ADC_MspInit+0x29c>)
 8004c1a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004c1e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004c20:	4b54      	ldr	r3, [pc, #336]	@ (8004d74 <HAL_ADC_MspInit+0x29c>)
 8004c22:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004c26:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004c28:	4b52      	ldr	r3, [pc, #328]	@ (8004d74 <HAL_ADC_MspInit+0x29c>)
 8004c2a:	2220      	movs	r2, #32
 8004c2c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8004c2e:	4b51      	ldr	r3, [pc, #324]	@ (8004d74 <HAL_ADC_MspInit+0x29c>)
 8004c30:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004c34:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004c36:	484f      	ldr	r0, [pc, #316]	@ (8004d74 <HAL_ADC_MspInit+0x29c>)
 8004c38:	f003 f8be 	bl	8007db8 <HAL_DMA_Init>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d001      	beq.n	8004c46 <HAL_ADC_MspInit+0x16e>
    {
      Error_Handler();
 8004c42:	f7ff f8b9 	bl	8003db8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	4a4a      	ldr	r2, [pc, #296]	@ (8004d74 <HAL_ADC_MspInit+0x29c>)
 8004c4a:	651a      	str	r2, [r3, #80]	@ 0x50
 8004c4c:	4a49      	ldr	r2, [pc, #292]	@ (8004d74 <HAL_ADC_MspInit+0x29c>)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8004c52:	2200      	movs	r2, #0
 8004c54:	2105      	movs	r1, #5
 8004c56:	2012      	movs	r0, #18
 8004c58:	f003 f884 	bl	8007d64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8004c5c:	2012      	movs	r0, #18
 8004c5e:	f003 f89d 	bl	8007d9c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8004c62:	e079      	b.n	8004d58 <HAL_ADC_MspInit+0x280>
  else if(hadc->Instance==ADC2)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a44      	ldr	r2, [pc, #272]	@ (8004d7c <HAL_ADC_MspInit+0x2a4>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d174      	bne.n	8004d58 <HAL_ADC_MspInit+0x280>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8004c6e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004c72:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8004c74:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8004c78:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004c7c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004c80:	4618      	mov	r0, r3
 8004c82:	f005 ff09 	bl	800aa98 <HAL_RCCEx_PeriphCLKConfig>
 8004c86:	4603      	mov	r3, r0
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d001      	beq.n	8004c90 <HAL_ADC_MspInit+0x1b8>
      Error_Handler();
 8004c8c:	f7ff f894 	bl	8003db8 <Error_Handler>
    HAL_RCC_ADC_CLK_ENABLED++;
 8004c90:	4b34      	ldr	r3, [pc, #208]	@ (8004d64 <HAL_ADC_MspInit+0x28c>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	3301      	adds	r3, #1
 8004c96:	4a33      	ldr	r2, [pc, #204]	@ (8004d64 <HAL_ADC_MspInit+0x28c>)
 8004c98:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8004c9a:	4b32      	ldr	r3, [pc, #200]	@ (8004d64 <HAL_ADC_MspInit+0x28c>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	2b01      	cmp	r3, #1
 8004ca0:	d10b      	bne.n	8004cba <HAL_ADC_MspInit+0x1e2>
      __HAL_RCC_ADC_CLK_ENABLE();
 8004ca2:	4b31      	ldr	r3, [pc, #196]	@ (8004d68 <HAL_ADC_MspInit+0x290>)
 8004ca4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ca6:	4a30      	ldr	r2, [pc, #192]	@ (8004d68 <HAL_ADC_MspInit+0x290>)
 8004ca8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004cac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004cae:	4b2e      	ldr	r3, [pc, #184]	@ (8004d68 <HAL_ADC_MspInit+0x290>)
 8004cb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cb2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004cb6:	613b      	str	r3, [r7, #16]
 8004cb8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004cba:	4b2b      	ldr	r3, [pc, #172]	@ (8004d68 <HAL_ADC_MspInit+0x290>)
 8004cbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cbe:	4a2a      	ldr	r2, [pc, #168]	@ (8004d68 <HAL_ADC_MspInit+0x290>)
 8004cc0:	f043 0302 	orr.w	r3, r3, #2
 8004cc4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004cc6:	4b28      	ldr	r3, [pc, #160]	@ (8004d68 <HAL_ADC_MspInit+0x290>)
 8004cc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cca:	f003 0302 	and.w	r3, r3, #2
 8004cce:	60fb      	str	r3, [r7, #12]
 8004cd0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = CURRENT_SENSOR_Pin;
 8004cd2:	2302      	movs	r3, #2
 8004cd4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8004cd8:	230b      	movs	r3, #11
 8004cda:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(CURRENT_SENSOR_GPIO_Port, &GPIO_InitStruct);
 8004ce4:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8004ce8:	4619      	mov	r1, r3
 8004cea:	4821      	ldr	r0, [pc, #132]	@ (8004d70 <HAL_ADC_MspInit+0x298>)
 8004cec:	f003 fad6 	bl	800829c <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Channel1;
 8004cf0:	4b23      	ldr	r3, [pc, #140]	@ (8004d80 <HAL_ADC_MspInit+0x2a8>)
 8004cf2:	4a24      	ldr	r2, [pc, #144]	@ (8004d84 <HAL_ADC_MspInit+0x2ac>)
 8004cf4:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8004cf6:	4b22      	ldr	r3, [pc, #136]	@ (8004d80 <HAL_ADC_MspInit+0x2a8>)
 8004cf8:	2206      	movs	r2, #6
 8004cfa:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004cfc:	4b20      	ldr	r3, [pc, #128]	@ (8004d80 <HAL_ADC_MspInit+0x2a8>)
 8004cfe:	2200      	movs	r2, #0
 8004d00:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8004d02:	4b1f      	ldr	r3, [pc, #124]	@ (8004d80 <HAL_ADC_MspInit+0x2a8>)
 8004d04:	2200      	movs	r2, #0
 8004d06:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8004d08:	4b1d      	ldr	r3, [pc, #116]	@ (8004d80 <HAL_ADC_MspInit+0x2a8>)
 8004d0a:	2280      	movs	r2, #128	@ 0x80
 8004d0c:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004d0e:	4b1c      	ldr	r3, [pc, #112]	@ (8004d80 <HAL_ADC_MspInit+0x2a8>)
 8004d10:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004d14:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004d16:	4b1a      	ldr	r3, [pc, #104]	@ (8004d80 <HAL_ADC_MspInit+0x2a8>)
 8004d18:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004d1c:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8004d1e:	4b18      	ldr	r3, [pc, #96]	@ (8004d80 <HAL_ADC_MspInit+0x2a8>)
 8004d20:	2220      	movs	r2, #32
 8004d22:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_HIGH;
 8004d24:	4b16      	ldr	r3, [pc, #88]	@ (8004d80 <HAL_ADC_MspInit+0x2a8>)
 8004d26:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004d2a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8004d2c:	4814      	ldr	r0, [pc, #80]	@ (8004d80 <HAL_ADC_MspInit+0x2a8>)
 8004d2e:	f003 f843 	bl	8007db8 <HAL_DMA_Init>
 8004d32:	4603      	mov	r3, r0
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d001      	beq.n	8004d3c <HAL_ADC_MspInit+0x264>
      Error_Handler();
 8004d38:	f7ff f83e 	bl	8003db8 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	4a10      	ldr	r2, [pc, #64]	@ (8004d80 <HAL_ADC_MspInit+0x2a8>)
 8004d40:	651a      	str	r2, [r3, #80]	@ 0x50
 8004d42:	4a0f      	ldr	r2, [pc, #60]	@ (8004d80 <HAL_ADC_MspInit+0x2a8>)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8004d48:	2200      	movs	r2, #0
 8004d4a:	2105      	movs	r1, #5
 8004d4c:	2012      	movs	r0, #18
 8004d4e:	f003 f809 	bl	8007d64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8004d52:	2012      	movs	r0, #18
 8004d54:	f003 f822 	bl	8007d9c <HAL_NVIC_EnableIRQ>
}
 8004d58:	bf00      	nop
 8004d5a:	37d0      	adds	r7, #208	@ 0xd0
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}
 8004d60:	50040000 	.word	0x50040000
 8004d64:	20003538 	.word	0x20003538
 8004d68:	40021000 	.word	0x40021000
 8004d6c:	48000800 	.word	0x48000800
 8004d70:	48000400 	.word	0x48000400
 8004d74:	2000101c 	.word	0x2000101c
 8004d78:	40020008 	.word	0x40020008
 8004d7c:	50040100 	.word	0x50040100
 8004d80:	2000107c 	.word	0x2000107c
 8004d84:	40020408 	.word	0x40020408

08004d88 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b08a      	sub	sp, #40	@ 0x28
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d90:	f107 0314 	add.w	r3, r7, #20
 8004d94:	2200      	movs	r2, #0
 8004d96:	601a      	str	r2, [r3, #0]
 8004d98:	605a      	str	r2, [r3, #4]
 8004d9a:	609a      	str	r2, [r3, #8]
 8004d9c:	60da      	str	r2, [r3, #12]
 8004d9e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a1b      	ldr	r2, [pc, #108]	@ (8004e14 <HAL_CAN_MspInit+0x8c>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d130      	bne.n	8004e0c <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8004daa:	4b1b      	ldr	r3, [pc, #108]	@ (8004e18 <HAL_CAN_MspInit+0x90>)
 8004dac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dae:	4a1a      	ldr	r2, [pc, #104]	@ (8004e18 <HAL_CAN_MspInit+0x90>)
 8004db0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004db4:	6593      	str	r3, [r2, #88]	@ 0x58
 8004db6:	4b18      	ldr	r3, [pc, #96]	@ (8004e18 <HAL_CAN_MspInit+0x90>)
 8004db8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004dbe:	613b      	str	r3, [r7, #16]
 8004dc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004dc2:	4b15      	ldr	r3, [pc, #84]	@ (8004e18 <HAL_CAN_MspInit+0x90>)
 8004dc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004dc6:	4a14      	ldr	r2, [pc, #80]	@ (8004e18 <HAL_CAN_MspInit+0x90>)
 8004dc8:	f043 0302 	orr.w	r3, r3, #2
 8004dcc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004dce:	4b12      	ldr	r3, [pc, #72]	@ (8004e18 <HAL_CAN_MspInit+0x90>)
 8004dd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004dd2:	f003 0302 	and.w	r3, r3, #2
 8004dd6:	60fb      	str	r3, [r7, #12]
 8004dd8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004dda:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004dde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004de0:	2302      	movs	r3, #2
 8004de2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004de4:	2300      	movs	r3, #0
 8004de6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004de8:	2303      	movs	r3, #3
 8004dea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8004dec:	2309      	movs	r3, #9
 8004dee:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004df0:	f107 0314 	add.w	r3, r7, #20
 8004df4:	4619      	mov	r1, r3
 8004df6:	4809      	ldr	r0, [pc, #36]	@ (8004e1c <HAL_CAN_MspInit+0x94>)
 8004df8:	f003 fa50 	bl	800829c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	2105      	movs	r1, #5
 8004e00:	2013      	movs	r0, #19
 8004e02:	f002 ffaf 	bl	8007d64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8004e06:	2013      	movs	r0, #19
 8004e08:	f002 ffc8 	bl	8007d9c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8004e0c:	bf00      	nop
 8004e0e:	3728      	adds	r7, #40	@ 0x28
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}
 8004e14:	40006400 	.word	0x40006400
 8004e18:	40021000 	.word	0x40021000
 8004e1c:	48000400 	.word	0x48000400

08004e20 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b0aa      	sub	sp, #168	@ 0xa8
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004e28:	f107 0310 	add.w	r3, r7, #16
 8004e2c:	2298      	movs	r2, #152	@ 0x98
 8004e2e:	2100      	movs	r1, #0
 8004e30:	4618      	mov	r0, r3
 8004e32:	f00f ff04 	bl	8014c3e <memset>
  if(hrtc->Instance==RTC)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a16      	ldr	r2, [pc, #88]	@ (8004e94 <HAL_RTC_MspInit+0x74>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d124      	bne.n	8004e8a <HAL_RTC_MspInit+0x6a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004e40:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004e44:	613b      	str	r3, [r7, #16]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8004e46:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004e4a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004e4e:	f107 0310 	add.w	r3, r7, #16
 8004e52:	4618      	mov	r0, r3
 8004e54:	f005 fe20 	bl	800aa98 <HAL_RCCEx_PeriphCLKConfig>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d001      	beq.n	8004e62 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8004e5e:	f7fe ffab 	bl	8003db8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004e62:	4b0d      	ldr	r3, [pc, #52]	@ (8004e98 <HAL_RTC_MspInit+0x78>)
 8004e64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e68:	4a0b      	ldr	r2, [pc, #44]	@ (8004e98 <HAL_RTC_MspInit+0x78>)
 8004e6a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e6e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8004e72:	4b09      	ldr	r3, [pc, #36]	@ (8004e98 <HAL_RTC_MspInit+0x78>)
 8004e74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e76:	4a08      	ldr	r2, [pc, #32]	@ (8004e98 <HAL_RTC_MspInit+0x78>)
 8004e78:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004e7c:	6593      	str	r3, [r2, #88]	@ 0x58
 8004e7e:	4b06      	ldr	r3, [pc, #24]	@ (8004e98 <HAL_RTC_MspInit+0x78>)
 8004e80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e86:	60fb      	str	r3, [r7, #12]
 8004e88:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8004e8a:	bf00      	nop
 8004e8c:	37a8      	adds	r7, #168	@ 0xa8
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}
 8004e92:	bf00      	nop
 8004e94:	40002800 	.word	0x40002800
 8004e98:	40021000 	.word	0x40021000

08004e9c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b08a      	sub	sp, #40	@ 0x28
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ea4:	f107 0314 	add.w	r3, r7, #20
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	601a      	str	r2, [r3, #0]
 8004eac:	605a      	str	r2, [r3, #4]
 8004eae:	609a      	str	r2, [r3, #8]
 8004eb0:	60da      	str	r2, [r3, #12]
 8004eb2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a1f      	ldr	r2, [pc, #124]	@ (8004f38 <HAL_SPI_MspInit+0x9c>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d137      	bne.n	8004f2e <HAL_SPI_MspInit+0x92>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004ebe:	4b1f      	ldr	r3, [pc, #124]	@ (8004f3c <HAL_SPI_MspInit+0xa0>)
 8004ec0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ec2:	4a1e      	ldr	r2, [pc, #120]	@ (8004f3c <HAL_SPI_MspInit+0xa0>)
 8004ec4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004ec8:	6613      	str	r3, [r2, #96]	@ 0x60
 8004eca:	4b1c      	ldr	r3, [pc, #112]	@ (8004f3c <HAL_SPI_MspInit+0xa0>)
 8004ecc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ece:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004ed2:	613b      	str	r3, [r7, #16]
 8004ed4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ed6:	4b19      	ldr	r3, [pc, #100]	@ (8004f3c <HAL_SPI_MspInit+0xa0>)
 8004ed8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004eda:	4a18      	ldr	r2, [pc, #96]	@ (8004f3c <HAL_SPI_MspInit+0xa0>)
 8004edc:	f043 0302 	orr.w	r3, r3, #2
 8004ee0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004ee2:	4b16      	ldr	r3, [pc, #88]	@ (8004f3c <HAL_SPI_MspInit+0xa0>)
 8004ee4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ee6:	f003 0302 	and.w	r3, r3, #2
 8004eea:	60fb      	str	r3, [r7, #12]
 8004eec:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8004eee:	2328      	movs	r3, #40	@ 0x28
 8004ef0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ef2:	2302      	movs	r3, #2
 8004ef4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004efa:	2303      	movs	r3, #3
 8004efc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004efe:	2305      	movs	r3, #5
 8004f00:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f02:	f107 0314 	add.w	r3, r7, #20
 8004f06:	4619      	mov	r1, r3
 8004f08:	480d      	ldr	r0, [pc, #52]	@ (8004f40 <HAL_SPI_MspInit+0xa4>)
 8004f0a:	f003 f9c7 	bl	800829c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004f0e:	2310      	movs	r3, #16
 8004f10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f12:	2302      	movs	r3, #2
 8004f14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004f16:	2301      	movs	r3, #1
 8004f18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f1a:	2303      	movs	r3, #3
 8004f1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004f1e:	2305      	movs	r3, #5
 8004f20:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f22:	f107 0314 	add.w	r3, r7, #20
 8004f26:	4619      	mov	r1, r3
 8004f28:	4805      	ldr	r0, [pc, #20]	@ (8004f40 <HAL_SPI_MspInit+0xa4>)
 8004f2a:	f003 f9b7 	bl	800829c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8004f2e:	bf00      	nop
 8004f30:	3728      	adds	r7, #40	@ 0x28
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}
 8004f36:	bf00      	nop
 8004f38:	40013000 	.word	0x40013000
 8004f3c:	40021000 	.word	0x40021000
 8004f40:	48000400 	.word	0x48000400

08004f44 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b086      	sub	sp, #24
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a23      	ldr	r2, [pc, #140]	@ (8004fe0 <HAL_TIM_Base_MspInit+0x9c>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d114      	bne.n	8004f80 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004f56:	4b23      	ldr	r3, [pc, #140]	@ (8004fe4 <HAL_TIM_Base_MspInit+0xa0>)
 8004f58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f5a:	4a22      	ldr	r2, [pc, #136]	@ (8004fe4 <HAL_TIM_Base_MspInit+0xa0>)
 8004f5c:	f043 0302 	orr.w	r3, r3, #2
 8004f60:	6593      	str	r3, [r2, #88]	@ 0x58
 8004f62:	4b20      	ldr	r3, [pc, #128]	@ (8004fe4 <HAL_TIM_Base_MspInit+0xa0>)
 8004f64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f66:	f003 0302 	and.w	r3, r3, #2
 8004f6a:	617b      	str	r3, [r7, #20]
 8004f6c:	697b      	ldr	r3, [r7, #20]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8004f6e:	2200      	movs	r2, #0
 8004f70:	2105      	movs	r1, #5
 8004f72:	201d      	movs	r0, #29
 8004f74:	f002 fef6 	bl	8007d64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004f78:	201d      	movs	r0, #29
 8004f7a:	f002 ff0f 	bl	8007d9c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8004f7e:	e02a      	b.n	8004fd6 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM6)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a18      	ldr	r2, [pc, #96]	@ (8004fe8 <HAL_TIM_Base_MspInit+0xa4>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d114      	bne.n	8004fb4 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004f8a:	4b16      	ldr	r3, [pc, #88]	@ (8004fe4 <HAL_TIM_Base_MspInit+0xa0>)
 8004f8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f8e:	4a15      	ldr	r2, [pc, #84]	@ (8004fe4 <HAL_TIM_Base_MspInit+0xa0>)
 8004f90:	f043 0310 	orr.w	r3, r3, #16
 8004f94:	6593      	str	r3, [r2, #88]	@ 0x58
 8004f96:	4b13      	ldr	r3, [pc, #76]	@ (8004fe4 <HAL_TIM_Base_MspInit+0xa0>)
 8004f98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f9a:	f003 0310 	and.w	r3, r3, #16
 8004f9e:	613b      	str	r3, [r7, #16]
 8004fa0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	2105      	movs	r1, #5
 8004fa6:	2036      	movs	r0, #54	@ 0x36
 8004fa8:	f002 fedc 	bl	8007d64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004fac:	2036      	movs	r0, #54	@ 0x36
 8004fae:	f002 fef5 	bl	8007d9c <HAL_NVIC_EnableIRQ>
}
 8004fb2:	e010      	b.n	8004fd6 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM8)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a0c      	ldr	r2, [pc, #48]	@ (8004fec <HAL_TIM_Base_MspInit+0xa8>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d10b      	bne.n	8004fd6 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004fbe:	4b09      	ldr	r3, [pc, #36]	@ (8004fe4 <HAL_TIM_Base_MspInit+0xa0>)
 8004fc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fc2:	4a08      	ldr	r2, [pc, #32]	@ (8004fe4 <HAL_TIM_Base_MspInit+0xa0>)
 8004fc4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004fc8:	6613      	str	r3, [r2, #96]	@ 0x60
 8004fca:	4b06      	ldr	r3, [pc, #24]	@ (8004fe4 <HAL_TIM_Base_MspInit+0xa0>)
 8004fcc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004fd2:	60fb      	str	r3, [r7, #12]
 8004fd4:	68fb      	ldr	r3, [r7, #12]
}
 8004fd6:	bf00      	nop
 8004fd8:	3718      	adds	r7, #24
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}
 8004fde:	bf00      	nop
 8004fe0:	40000400 	.word	0x40000400
 8004fe4:	40021000 	.word	0x40021000
 8004fe8:	40001000 	.word	0x40001000
 8004fec:	40013400 	.word	0x40013400

08004ff0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b08c      	sub	sp, #48	@ 0x30
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM16 clock */
  __HAL_RCC_TIM16_CLK_ENABLE();
 8004ffe:	4b2e      	ldr	r3, [pc, #184]	@ (80050b8 <HAL_InitTick+0xc8>)
 8005000:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005002:	4a2d      	ldr	r2, [pc, #180]	@ (80050b8 <HAL_InitTick+0xc8>)
 8005004:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005008:	6613      	str	r3, [r2, #96]	@ 0x60
 800500a:	4b2b      	ldr	r3, [pc, #172]	@ (80050b8 <HAL_InitTick+0xc8>)
 800500c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800500e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005012:	60bb      	str	r3, [r7, #8]
 8005014:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005016:	f107 020c 	add.w	r2, r7, #12
 800501a:	f107 0310 	add.w	r3, r7, #16
 800501e:	4611      	mov	r1, r2
 8005020:	4618      	mov	r0, r3
 8005022:	f005 fc49 	bl	800a8b8 <HAL_RCC_GetClockConfig>

  /* Compute TIM16 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8005026:	f005 fc31 	bl	800a88c <HAL_RCC_GetPCLK2Freq>
 800502a:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM16 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800502c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800502e:	4a23      	ldr	r2, [pc, #140]	@ (80050bc <HAL_InitTick+0xcc>)
 8005030:	fba2 2303 	umull	r2, r3, r2, r3
 8005034:	0c9b      	lsrs	r3, r3, #18
 8005036:	3b01      	subs	r3, #1
 8005038:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM16 */
  htim16.Instance = TIM16;
 800503a:	4b21      	ldr	r3, [pc, #132]	@ (80050c0 <HAL_InitTick+0xd0>)
 800503c:	4a21      	ldr	r2, [pc, #132]	@ (80050c4 <HAL_InitTick+0xd4>)
 800503e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM16CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim16.Init.Period = (1000000U / 1000U) - 1U;
 8005040:	4b1f      	ldr	r3, [pc, #124]	@ (80050c0 <HAL_InitTick+0xd0>)
 8005042:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8005046:	60da      	str	r2, [r3, #12]
  htim16.Init.Prescaler = uwPrescalerValue;
 8005048:	4a1d      	ldr	r2, [pc, #116]	@ (80050c0 <HAL_InitTick+0xd0>)
 800504a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800504c:	6053      	str	r3, [r2, #4]
  htim16.Init.ClockDivision = 0;
 800504e:	4b1c      	ldr	r3, [pc, #112]	@ (80050c0 <HAL_InitTick+0xd0>)
 8005050:	2200      	movs	r2, #0
 8005052:	611a      	str	r2, [r3, #16]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005054:	4b1a      	ldr	r3, [pc, #104]	@ (80050c0 <HAL_InitTick+0xd0>)
 8005056:	2200      	movs	r2, #0
 8005058:	609a      	str	r2, [r3, #8]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800505a:	4b19      	ldr	r3, [pc, #100]	@ (80050c0 <HAL_InitTick+0xd0>)
 800505c:	2200      	movs	r2, #0
 800505e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim16);
 8005060:	4817      	ldr	r0, [pc, #92]	@ (80050c0 <HAL_InitTick+0xd0>)
 8005062:	f007 fb55 	bl	800c710 <HAL_TIM_Base_Init>
 8005066:	4603      	mov	r3, r0
 8005068:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800506c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005070:	2b00      	cmp	r3, #0
 8005072:	d11b      	bne.n	80050ac <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim16);
 8005074:	4812      	ldr	r0, [pc, #72]	@ (80050c0 <HAL_InitTick+0xd0>)
 8005076:	f007 fc0b 	bl	800c890 <HAL_TIM_Base_Start_IT>
 800507a:	4603      	mov	r3, r0
 800507c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8005080:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005084:	2b00      	cmp	r3, #0
 8005086:	d111      	bne.n	80050ac <HAL_InitTick+0xbc>
    {
    /* Enable the TIM16 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8005088:	2019      	movs	r0, #25
 800508a:	f002 fe87 	bl	8007d9c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2b0f      	cmp	r3, #15
 8005092:	d808      	bhi.n	80050a6 <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8005094:	2200      	movs	r2, #0
 8005096:	6879      	ldr	r1, [r7, #4]
 8005098:	2019      	movs	r0, #25
 800509a:	f002 fe63 	bl	8007d64 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800509e:	4a0a      	ldr	r2, [pc, #40]	@ (80050c8 <HAL_InitTick+0xd8>)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6013      	str	r3, [r2, #0]
 80050a4:	e002      	b.n	80050ac <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80050ac:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	3730      	adds	r7, #48	@ 0x30
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}
 80050b8:	40021000 	.word	0x40021000
 80050bc:	431bde83 	.word	0x431bde83
 80050c0:	2000353c 	.word	0x2000353c
 80050c4:	40014400 	.word	0x40014400
 80050c8:	2000029c 	.word	0x2000029c

080050cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80050cc:	b480      	push	{r7}
 80050ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80050d0:	bf00      	nop
 80050d2:	e7fd      	b.n	80050d0 <NMI_Handler+0x4>

080050d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80050d4:	b480      	push	{r7}
 80050d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80050d8:	bf00      	nop
 80050da:	e7fd      	b.n	80050d8 <HardFault_Handler+0x4>

080050dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80050dc:	b480      	push	{r7}
 80050de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80050e0:	bf00      	nop
 80050e2:	e7fd      	b.n	80050e0 <MemManage_Handler+0x4>

080050e4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80050e4:	b480      	push	{r7}
 80050e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80050e8:	bf00      	nop
 80050ea:	e7fd      	b.n	80050e8 <BusFault_Handler+0x4>

080050ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80050ec:	b480      	push	{r7}
 80050ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80050f0:	bf00      	nop
 80050f2:	e7fd      	b.n	80050f0 <UsageFault_Handler+0x4>

080050f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80050f4:	b480      	push	{r7}
 80050f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80050f8:	bf00      	nop
 80050fa:	46bd      	mov	sp, r7
 80050fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005100:	4770      	bx	lr

08005102 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8005102:	b480      	push	{r7}
 8005104:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8005106:	bf00      	nop
 8005108:	46bd      	mov	sp, r7
 800510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510e:	4770      	bx	lr

08005110 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005114:	4802      	ldr	r0, [pc, #8]	@ (8005120 <DMA1_Channel1_IRQHandler+0x10>)
 8005116:	f002 ff72 	bl	8007ffe <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800511a:	bf00      	nop
 800511c:	bd80      	pop	{r7, pc}
 800511e:	bf00      	nop
 8005120:	2000101c 	.word	0x2000101c

08005124 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8005128:	4803      	ldr	r0, [pc, #12]	@ (8005138 <ADC1_2_IRQHandler+0x14>)
 800512a:	f000 fdd3 	bl	8005cd4 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 800512e:	4803      	ldr	r0, [pc, #12]	@ (800513c <ADC1_2_IRQHandler+0x18>)
 8005130:	f000 fdd0 	bl	8005cd4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8005134:	bf00      	nop
 8005136:	bd80      	pop	{r7, pc}
 8005138:	20000f4c 	.word	0x20000f4c
 800513c:	20000fb4 	.word	0x20000fb4

08005140 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8005144:	4802      	ldr	r0, [pc, #8]	@ (8005150 <CAN1_TX_IRQHandler+0x10>)
 8005146:	f002 fb26 	bl	8007796 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 800514a:	bf00      	nop
 800514c:	bd80      	pop	{r7, pc}
 800514e:	bf00      	nop
 8005150:	200010dc 	.word	0x200010dc

08005154 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8005158:	4802      	ldr	r0, [pc, #8]	@ (8005164 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800515a:	f007 fc09 	bl	800c970 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800515e:	bf00      	nop
 8005160:	bd80      	pop	{r7, pc}
 8005162:	bf00      	nop
 8005164:	2000353c 	.word	0x2000353c

08005168 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800516c:	4802      	ldr	r0, [pc, #8]	@ (8005178 <TIM3_IRQHandler+0x10>)
 800516e:	f007 fbff 	bl	800c970 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8005172:	bf00      	nop
 8005174:	bd80      	pop	{r7, pc}
 8005176:	bf00      	nop
 8005178:	2000119c 	.word	0x2000119c

0800517c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8005180:	4802      	ldr	r0, [pc, #8]	@ (800518c <TIM6_DAC_IRQHandler+0x10>)
 8005182:	f007 fbf5 	bl	800c970 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8005186:	bf00      	nop
 8005188:	bd80      	pop	{r7, pc}
 800518a:	bf00      	nop
 800518c:	200011e8 	.word	0x200011e8

08005190 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8005194:	4802      	ldr	r0, [pc, #8]	@ (80051a0 <DMA2_Channel1_IRQHandler+0x10>)
 8005196:	f002 ff32 	bl	8007ffe <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 800519a:	bf00      	nop
 800519c:	bd80      	pop	{r7, pc}
 800519e:	bf00      	nop
 80051a0:	2000107c 	.word	0x2000107c

080051a4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80051a8:	4802      	ldr	r0, [pc, #8]	@ (80051b4 <OTG_FS_IRQHandler+0x10>)
 80051aa:	f003 fb8c 	bl	80088c6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80051ae:	bf00      	nop
 80051b0:	bd80      	pop	{r7, pc}
 80051b2:	bf00      	nop
 80051b4:	20008738 	.word	0x20008738

080051b8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80051b8:	b480      	push	{r7}
 80051ba:	af00      	add	r7, sp, #0
	return 1;
 80051bc:	2301      	movs	r3, #1
}
 80051be:	4618      	mov	r0, r3
 80051c0:	46bd      	mov	sp, r7
 80051c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c6:	4770      	bx	lr

080051c8 <_kill>:

int _kill(int pid, int sig)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b082      	sub	sp, #8
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
 80051d0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80051d2:	f00f fddd 	bl	8014d90 <__errno>
 80051d6:	4603      	mov	r3, r0
 80051d8:	2216      	movs	r2, #22
 80051da:	601a      	str	r2, [r3, #0]
	return -1;
 80051dc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3708      	adds	r7, #8
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}

080051e8 <_exit>:

void _exit (int status)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b082      	sub	sp, #8
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80051f0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80051f4:	6878      	ldr	r0, [r7, #4]
 80051f6:	f7ff ffe7 	bl	80051c8 <_kill>
	while (1) {}		/* Make sure we hang here */
 80051fa:	bf00      	nop
 80051fc:	e7fd      	b.n	80051fa <_exit+0x12>

080051fe <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80051fe:	b580      	push	{r7, lr}
 8005200:	b086      	sub	sp, #24
 8005202:	af00      	add	r7, sp, #0
 8005204:	60f8      	str	r0, [r7, #12]
 8005206:	60b9      	str	r1, [r7, #8]
 8005208:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800520a:	2300      	movs	r3, #0
 800520c:	617b      	str	r3, [r7, #20]
 800520e:	e00a      	b.n	8005226 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005210:	f3af 8000 	nop.w
 8005214:	4601      	mov	r1, r0
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	1c5a      	adds	r2, r3, #1
 800521a:	60ba      	str	r2, [r7, #8]
 800521c:	b2ca      	uxtb	r2, r1
 800521e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	3301      	adds	r3, #1
 8005224:	617b      	str	r3, [r7, #20]
 8005226:	697a      	ldr	r2, [r7, #20]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	429a      	cmp	r2, r3
 800522c:	dbf0      	blt.n	8005210 <_read+0x12>
	}

return len;
 800522e:	687b      	ldr	r3, [r7, #4]
}
 8005230:	4618      	mov	r0, r3
 8005232:	3718      	adds	r7, #24
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}

08005238 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b086      	sub	sp, #24
 800523c:	af00      	add	r7, sp, #0
 800523e:	60f8      	str	r0, [r7, #12]
 8005240:	60b9      	str	r1, [r7, #8]
 8005242:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005244:	2300      	movs	r3, #0
 8005246:	617b      	str	r3, [r7, #20]
 8005248:	e009      	b.n	800525e <_write+0x26>
	{
		__io_putchar(*ptr++);
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	1c5a      	adds	r2, r3, #1
 800524e:	60ba      	str	r2, [r7, #8]
 8005250:	781b      	ldrb	r3, [r3, #0]
 8005252:	4618      	mov	r0, r3
 8005254:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	3301      	adds	r3, #1
 800525c:	617b      	str	r3, [r7, #20]
 800525e:	697a      	ldr	r2, [r7, #20]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	429a      	cmp	r2, r3
 8005264:	dbf1      	blt.n	800524a <_write+0x12>
	}
	return len;
 8005266:	687b      	ldr	r3, [r7, #4]
}
 8005268:	4618      	mov	r0, r3
 800526a:	3718      	adds	r7, #24
 800526c:	46bd      	mov	sp, r7
 800526e:	bd80      	pop	{r7, pc}

08005270 <_close>:

int _close(int file)
{
 8005270:	b480      	push	{r7}
 8005272:	b083      	sub	sp, #12
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
	return -1;
 8005278:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800527c:	4618      	mov	r0, r3
 800527e:	370c      	adds	r7, #12
 8005280:	46bd      	mov	sp, r7
 8005282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005286:	4770      	bx	lr

08005288 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005288:	b480      	push	{r7}
 800528a:	b083      	sub	sp, #12
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
 8005290:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005298:	605a      	str	r2, [r3, #4]
	return 0;
 800529a:	2300      	movs	r3, #0
}
 800529c:	4618      	mov	r0, r3
 800529e:	370c      	adds	r7, #12
 80052a0:	46bd      	mov	sp, r7
 80052a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a6:	4770      	bx	lr

080052a8 <_isatty>:

int _isatty(int file)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b083      	sub	sp, #12
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
	return 1;
 80052b0:	2301      	movs	r3, #1
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	370c      	adds	r7, #12
 80052b6:	46bd      	mov	sp, r7
 80052b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052bc:	4770      	bx	lr

080052be <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80052be:	b480      	push	{r7}
 80052c0:	b085      	sub	sp, #20
 80052c2:	af00      	add	r7, sp, #0
 80052c4:	60f8      	str	r0, [r7, #12]
 80052c6:	60b9      	str	r1, [r7, #8]
 80052c8:	607a      	str	r2, [r7, #4]
	return 0;
 80052ca:	2300      	movs	r3, #0
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	3714      	adds	r7, #20
 80052d0:	46bd      	mov	sp, r7
 80052d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d6:	4770      	bx	lr

080052d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b086      	sub	sp, #24
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80052e0:	4a14      	ldr	r2, [pc, #80]	@ (8005334 <_sbrk+0x5c>)
 80052e2:	4b15      	ldr	r3, [pc, #84]	@ (8005338 <_sbrk+0x60>)
 80052e4:	1ad3      	subs	r3, r2, r3
 80052e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80052ec:	4b13      	ldr	r3, [pc, #76]	@ (800533c <_sbrk+0x64>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d102      	bne.n	80052fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80052f4:	4b11      	ldr	r3, [pc, #68]	@ (800533c <_sbrk+0x64>)
 80052f6:	4a12      	ldr	r2, [pc, #72]	@ (8005340 <_sbrk+0x68>)
 80052f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80052fa:	4b10      	ldr	r3, [pc, #64]	@ (800533c <_sbrk+0x64>)
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	4413      	add	r3, r2
 8005302:	693a      	ldr	r2, [r7, #16]
 8005304:	429a      	cmp	r2, r3
 8005306:	d207      	bcs.n	8005318 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005308:	f00f fd42 	bl	8014d90 <__errno>
 800530c:	4603      	mov	r3, r0
 800530e:	220c      	movs	r2, #12
 8005310:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005312:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005316:	e009      	b.n	800532c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005318:	4b08      	ldr	r3, [pc, #32]	@ (800533c <_sbrk+0x64>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800531e:	4b07      	ldr	r3, [pc, #28]	@ (800533c <_sbrk+0x64>)
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	4413      	add	r3, r2
 8005326:	4a05      	ldr	r2, [pc, #20]	@ (800533c <_sbrk+0x64>)
 8005328:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800532a:	68fb      	ldr	r3, [r7, #12]
}
 800532c:	4618      	mov	r0, r3
 800532e:	3718      	adds	r7, #24
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}
 8005334:	20050000 	.word	0x20050000
 8005338:	00000400 	.word	0x00000400
 800533c:	20003588 	.word	0x20003588
 8005340:	20008fb0 	.word	0x20008fb0

08005344 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8005344:	b480      	push	{r7}
 8005346:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8005348:	4b06      	ldr	r3, [pc, #24]	@ (8005364 <SystemInit+0x20>)
 800534a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800534e:	4a05      	ldr	r2, [pc, #20]	@ (8005364 <SystemInit+0x20>)
 8005350:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005354:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8005358:	bf00      	nop
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr
 8005362:	bf00      	nop
 8005364:	e000ed00 	.word	0xe000ed00

08005368 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8005368:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80053a0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800536c:	f7ff ffea 	bl	8005344 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005370:	480c      	ldr	r0, [pc, #48]	@ (80053a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8005372:	490d      	ldr	r1, [pc, #52]	@ (80053a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005374:	4a0d      	ldr	r2, [pc, #52]	@ (80053ac <LoopForever+0xe>)
  movs r3, #0
 8005376:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005378:	e002      	b.n	8005380 <LoopCopyDataInit>

0800537a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800537a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800537c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800537e:	3304      	adds	r3, #4

08005380 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005380:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005382:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005384:	d3f9      	bcc.n	800537a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005386:	4a0a      	ldr	r2, [pc, #40]	@ (80053b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005388:	4c0a      	ldr	r4, [pc, #40]	@ (80053b4 <LoopForever+0x16>)
  movs r3, #0
 800538a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800538c:	e001      	b.n	8005392 <LoopFillZerobss>

0800538e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800538e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005390:	3204      	adds	r2, #4

08005392 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005392:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005394:	d3fb      	bcc.n	800538e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005396:	f00f fd01 	bl	8014d9c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800539a:	f7fd ffa9 	bl	80032f0 <main>

0800539e <LoopForever>:

LoopForever:
    b LoopForever
 800539e:	e7fe      	b.n	800539e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80053a0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80053a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80053a8:	20000570 	.word	0x20000570
  ldr r2, =_sidata
 80053ac:	08017884 	.word	0x08017884
  ldr r2, =_sbss
 80053b0:	20000570 	.word	0x20000570
  ldr r4, =_ebss
 80053b4:	20008fb0 	.word	0x20008fb0

080053b8 <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80053b8:	e7fe      	b.n	80053b8 <CAN1_RX0_IRQHandler>

080053ba <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80053ba:	b580      	push	{r7, lr}
 80053bc:	b082      	sub	sp, #8
 80053be:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80053c0:	2300      	movs	r3, #0
 80053c2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80053c4:	2003      	movs	r0, #3
 80053c6:	f002 fcc2 	bl	8007d4e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80053ca:	2001      	movs	r0, #1
 80053cc:	f7ff fe10 	bl	8004ff0 <HAL_InitTick>
 80053d0:	4603      	mov	r3, r0
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d002      	beq.n	80053dc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	71fb      	strb	r3, [r7, #7]
 80053da:	e001      	b.n	80053e0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80053dc:	f7ff fb4c 	bl	8004a78 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80053e0:	79fb      	ldrb	r3, [r7, #7]
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	3708      	adds	r7, #8
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}
	...

080053ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80053ec:	b480      	push	{r7}
 80053ee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80053f0:	4b06      	ldr	r3, [pc, #24]	@ (800540c <HAL_IncTick+0x20>)
 80053f2:	781b      	ldrb	r3, [r3, #0]
 80053f4:	461a      	mov	r2, r3
 80053f6:	4b06      	ldr	r3, [pc, #24]	@ (8005410 <HAL_IncTick+0x24>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4413      	add	r3, r2
 80053fc:	4a04      	ldr	r2, [pc, #16]	@ (8005410 <HAL_IncTick+0x24>)
 80053fe:	6013      	str	r3, [r2, #0]
}
 8005400:	bf00      	nop
 8005402:	46bd      	mov	sp, r7
 8005404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005408:	4770      	bx	lr
 800540a:	bf00      	nop
 800540c:	200002a0 	.word	0x200002a0
 8005410:	2000358c 	.word	0x2000358c

08005414 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005414:	b480      	push	{r7}
 8005416:	af00      	add	r7, sp, #0
  return uwTick;
 8005418:	4b03      	ldr	r3, [pc, #12]	@ (8005428 <HAL_GetTick+0x14>)
 800541a:	681b      	ldr	r3, [r3, #0]
}
 800541c:	4618      	mov	r0, r3
 800541e:	46bd      	mov	sp, r7
 8005420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005424:	4770      	bx	lr
 8005426:	bf00      	nop
 8005428:	2000358c 	.word	0x2000358c

0800542c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b084      	sub	sp, #16
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005434:	f7ff ffee 	bl	8005414 <HAL_GetTick>
 8005438:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005444:	d005      	beq.n	8005452 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8005446:	4b0a      	ldr	r3, [pc, #40]	@ (8005470 <HAL_Delay+0x44>)
 8005448:	781b      	ldrb	r3, [r3, #0]
 800544a:	461a      	mov	r2, r3
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	4413      	add	r3, r2
 8005450:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005452:	bf00      	nop
 8005454:	f7ff ffde 	bl	8005414 <HAL_GetTick>
 8005458:	4602      	mov	r2, r0
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	1ad3      	subs	r3, r2, r3
 800545e:	68fa      	ldr	r2, [r7, #12]
 8005460:	429a      	cmp	r2, r3
 8005462:	d8f7      	bhi.n	8005454 <HAL_Delay+0x28>
  {
  }
}
 8005464:	bf00      	nop
 8005466:	bf00      	nop
 8005468:	3710      	adds	r7, #16
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}
 800546e:	bf00      	nop
 8005470:	200002a0 	.word	0x200002a0

08005474 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8005474:	b480      	push	{r7}
 8005476:	b083      	sub	sp, #12
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
 800547c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	689b      	ldr	r3, [r3, #8]
 8005482:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	431a      	orrs	r2, r3
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	609a      	str	r2, [r3, #8]
}
 800548e:	bf00      	nop
 8005490:	370c      	adds	r7, #12
 8005492:	46bd      	mov	sp, r7
 8005494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005498:	4770      	bx	lr

0800549a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800549a:	b480      	push	{r7}
 800549c:	b083      	sub	sp, #12
 800549e:	af00      	add	r7, sp, #0
 80054a0:	6078      	str	r0, [r7, #4]
 80054a2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	689b      	ldr	r3, [r3, #8]
 80054a8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	431a      	orrs	r2, r3
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	609a      	str	r2, [r3, #8]
}
 80054b4:	bf00      	nop
 80054b6:	370c      	adds	r7, #12
 80054b8:	46bd      	mov	sp, r7
 80054ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054be:	4770      	bx	lr

080054c0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80054c0:	b480      	push	{r7}
 80054c2:	b083      	sub	sp, #12
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	370c      	adds	r7, #12
 80054d4:	46bd      	mov	sp, r7
 80054d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054da:	4770      	bx	lr

080054dc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80054dc:	b480      	push	{r7}
 80054de:	b087      	sub	sp, #28
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	60f8      	str	r0, [r7, #12]
 80054e4:	60b9      	str	r1, [r7, #8]
 80054e6:	607a      	str	r2, [r7, #4]
 80054e8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	3360      	adds	r3, #96	@ 0x60
 80054ee:	461a      	mov	r2, r3
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	009b      	lsls	r3, r3, #2
 80054f4:	4413      	add	r3, r2
 80054f6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	681a      	ldr	r2, [r3, #0]
 80054fc:	4b08      	ldr	r3, [pc, #32]	@ (8005520 <LL_ADC_SetOffset+0x44>)
 80054fe:	4013      	ands	r3, r2
 8005500:	687a      	ldr	r2, [r7, #4]
 8005502:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8005506:	683a      	ldr	r2, [r7, #0]
 8005508:	430a      	orrs	r2, r1
 800550a:	4313      	orrs	r3, r2
 800550c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8005514:	bf00      	nop
 8005516:	371c      	adds	r7, #28
 8005518:	46bd      	mov	sp, r7
 800551a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551e:	4770      	bx	lr
 8005520:	03fff000 	.word	0x03fff000

08005524 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8005524:	b480      	push	{r7}
 8005526:	b085      	sub	sp, #20
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
 800552c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	3360      	adds	r3, #96	@ 0x60
 8005532:	461a      	mov	r2, r3
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	009b      	lsls	r3, r3, #2
 8005538:	4413      	add	r3, r2
 800553a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8005544:	4618      	mov	r0, r3
 8005546:	3714      	adds	r7, #20
 8005548:	46bd      	mov	sp, r7
 800554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554e:	4770      	bx	lr

08005550 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8005550:	b480      	push	{r7}
 8005552:	b087      	sub	sp, #28
 8005554:	af00      	add	r7, sp, #0
 8005556:	60f8      	str	r0, [r7, #12]
 8005558:	60b9      	str	r1, [r7, #8]
 800555a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	3360      	adds	r3, #96	@ 0x60
 8005560:	461a      	mov	r2, r3
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	009b      	lsls	r3, r3, #2
 8005566:	4413      	add	r3, r2
 8005568:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	431a      	orrs	r2, r3
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800557a:	bf00      	nop
 800557c:	371c      	adds	r7, #28
 800557e:	46bd      	mov	sp, r7
 8005580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005584:	4770      	bx	lr

08005586 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8005586:	b480      	push	{r7}
 8005588:	b083      	sub	sp, #12
 800558a:	af00      	add	r7, sp, #0
 800558c:	6078      	str	r0, [r7, #4]
 800558e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	695b      	ldr	r3, [r3, #20]
 8005594:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	431a      	orrs	r2, r3
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	615a      	str	r2, [r3, #20]
}
 80055a0:	bf00      	nop
 80055a2:	370c      	adds	r7, #12
 80055a4:	46bd      	mov	sp, r7
 80055a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055aa:	4770      	bx	lr

080055ac <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b083      	sub	sp, #12
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	68db      	ldr	r3, [r3, #12]
 80055b8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d101      	bne.n	80055c4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80055c0:	2301      	movs	r3, #1
 80055c2:	e000      	b.n	80055c6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80055c4:	2300      	movs	r3, #0
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	370c      	adds	r7, #12
 80055ca:	46bd      	mov	sp, r7
 80055cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d0:	4770      	bx	lr

080055d2 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80055d2:	b480      	push	{r7}
 80055d4:	b087      	sub	sp, #28
 80055d6:	af00      	add	r7, sp, #0
 80055d8:	60f8      	str	r0, [r7, #12]
 80055da:	60b9      	str	r1, [r7, #8]
 80055dc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	3330      	adds	r3, #48	@ 0x30
 80055e2:	461a      	mov	r2, r3
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	0a1b      	lsrs	r3, r3, #8
 80055e8:	009b      	lsls	r3, r3, #2
 80055ea:	f003 030c 	and.w	r3, r3, #12
 80055ee:	4413      	add	r3, r2
 80055f0:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	f003 031f 	and.w	r3, r3, #31
 80055fc:	211f      	movs	r1, #31
 80055fe:	fa01 f303 	lsl.w	r3, r1, r3
 8005602:	43db      	mvns	r3, r3
 8005604:	401a      	ands	r2, r3
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	0e9b      	lsrs	r3, r3, #26
 800560a:	f003 011f 	and.w	r1, r3, #31
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	f003 031f 	and.w	r3, r3, #31
 8005614:	fa01 f303 	lsl.w	r3, r1, r3
 8005618:	431a      	orrs	r2, r3
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800561e:	bf00      	nop
 8005620:	371c      	adds	r7, #28
 8005622:	46bd      	mov	sp, r7
 8005624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005628:	4770      	bx	lr

0800562a <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800562a:	b480      	push	{r7}
 800562c:	b083      	sub	sp, #12
 800562e:	af00      	add	r7, sp, #0
 8005630:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005636:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800563a:	2b00      	cmp	r3, #0
 800563c:	d101      	bne.n	8005642 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800563e:	2301      	movs	r3, #1
 8005640:	e000      	b.n	8005644 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8005642:	2300      	movs	r3, #0
}
 8005644:	4618      	mov	r0, r3
 8005646:	370c      	adds	r7, #12
 8005648:	46bd      	mov	sp, r7
 800564a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564e:	4770      	bx	lr

08005650 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8005650:	b480      	push	{r7}
 8005652:	b087      	sub	sp, #28
 8005654:	af00      	add	r7, sp, #0
 8005656:	60f8      	str	r0, [r7, #12]
 8005658:	60b9      	str	r1, [r7, #8]
 800565a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	3314      	adds	r3, #20
 8005660:	461a      	mov	r2, r3
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	0e5b      	lsrs	r3, r3, #25
 8005666:	009b      	lsls	r3, r3, #2
 8005668:	f003 0304 	and.w	r3, r3, #4
 800566c:	4413      	add	r3, r2
 800566e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	681a      	ldr	r2, [r3, #0]
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	0d1b      	lsrs	r3, r3, #20
 8005678:	f003 031f 	and.w	r3, r3, #31
 800567c:	2107      	movs	r1, #7
 800567e:	fa01 f303 	lsl.w	r3, r1, r3
 8005682:	43db      	mvns	r3, r3
 8005684:	401a      	ands	r2, r3
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	0d1b      	lsrs	r3, r3, #20
 800568a:	f003 031f 	and.w	r3, r3, #31
 800568e:	6879      	ldr	r1, [r7, #4]
 8005690:	fa01 f303 	lsl.w	r3, r1, r3
 8005694:	431a      	orrs	r2, r3
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800569a:	bf00      	nop
 800569c:	371c      	adds	r7, #28
 800569e:	46bd      	mov	sp, r7
 80056a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a4:	4770      	bx	lr
	...

080056a8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b085      	sub	sp, #20
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	60f8      	str	r0, [r7, #12]
 80056b0:	60b9      	str	r1, [r7, #8]
 80056b2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056c0:	43db      	mvns	r3, r3
 80056c2:	401a      	ands	r2, r3
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	f003 0318 	and.w	r3, r3, #24
 80056ca:	4908      	ldr	r1, [pc, #32]	@ (80056ec <LL_ADC_SetChannelSingleDiff+0x44>)
 80056cc:	40d9      	lsrs	r1, r3
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	400b      	ands	r3, r1
 80056d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056d6:	431a      	orrs	r2, r3
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80056de:	bf00      	nop
 80056e0:	3714      	adds	r7, #20
 80056e2:	46bd      	mov	sp, r7
 80056e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e8:	4770      	bx	lr
 80056ea:	bf00      	nop
 80056ec:	0007ffff 	.word	0x0007ffff

080056f0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b083      	sub	sp, #12
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	689b      	ldr	r3, [r3, #8]
 80056fc:	f003 031f 	and.w	r3, r3, #31
}
 8005700:	4618      	mov	r0, r3
 8005702:	370c      	adds	r7, #12
 8005704:	46bd      	mov	sp, r7
 8005706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570a:	4770      	bx	lr

0800570c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800570c:	b480      	push	{r7}
 800570e:	b083      	sub	sp, #12
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	689b      	ldr	r3, [r3, #8]
 8005718:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 800571c:	4618      	mov	r0, r3
 800571e:	370c      	adds	r7, #12
 8005720:	46bd      	mov	sp, r7
 8005722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005726:	4770      	bx	lr

08005728 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8005728:	b480      	push	{r7}
 800572a:	b083      	sub	sp, #12
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	689b      	ldr	r3, [r3, #8]
 8005734:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8005738:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800573c:	687a      	ldr	r2, [r7, #4]
 800573e:	6093      	str	r3, [r2, #8]
}
 8005740:	bf00      	nop
 8005742:	370c      	adds	r7, #12
 8005744:	46bd      	mov	sp, r7
 8005746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574a:	4770      	bx	lr

0800574c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800574c:	b480      	push	{r7}
 800574e:	b083      	sub	sp, #12
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	689b      	ldr	r3, [r3, #8]
 8005758:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800575c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005760:	d101      	bne.n	8005766 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8005762:	2301      	movs	r3, #1
 8005764:	e000      	b.n	8005768 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8005766:	2300      	movs	r3, #0
}
 8005768:	4618      	mov	r0, r3
 800576a:	370c      	adds	r7, #12
 800576c:	46bd      	mov	sp, r7
 800576e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005772:	4770      	bx	lr

08005774 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005774:	b480      	push	{r7}
 8005776:	b083      	sub	sp, #12
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	689b      	ldr	r3, [r3, #8]
 8005780:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8005784:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005788:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8005790:	bf00      	nop
 8005792:	370c      	adds	r7, #12
 8005794:	46bd      	mov	sp, r7
 8005796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579a:	4770      	bx	lr

0800579c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800579c:	b480      	push	{r7}
 800579e:	b083      	sub	sp, #12
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80057ac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80057b0:	d101      	bne.n	80057b6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80057b2:	2301      	movs	r3, #1
 80057b4:	e000      	b.n	80057b8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80057b6:	2300      	movs	r3, #0
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	370c      	adds	r7, #12
 80057bc:	46bd      	mov	sp, r7
 80057be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c2:	4770      	bx	lr

080057c4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80057c4:	b480      	push	{r7}
 80057c6:	b083      	sub	sp, #12
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	689b      	ldr	r3, [r3, #8]
 80057d0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80057d4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80057d8:	f043 0201 	orr.w	r2, r3, #1
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80057e0:	bf00      	nop
 80057e2:	370c      	adds	r7, #12
 80057e4:	46bd      	mov	sp, r7
 80057e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ea:	4770      	bx	lr

080057ec <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b083      	sub	sp, #12
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	689b      	ldr	r3, [r3, #8]
 80057f8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80057fc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005800:	f043 0202 	orr.w	r2, r3, #2
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8005808:	bf00      	nop
 800580a:	370c      	adds	r7, #12
 800580c:	46bd      	mov	sp, r7
 800580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005812:	4770      	bx	lr

08005814 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8005814:	b480      	push	{r7}
 8005816:	b083      	sub	sp, #12
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	f003 0301 	and.w	r3, r3, #1
 8005824:	2b01      	cmp	r3, #1
 8005826:	d101      	bne.n	800582c <LL_ADC_IsEnabled+0x18>
 8005828:	2301      	movs	r3, #1
 800582a:	e000      	b.n	800582e <LL_ADC_IsEnabled+0x1a>
 800582c:	2300      	movs	r3, #0
}
 800582e:	4618      	mov	r0, r3
 8005830:	370c      	adds	r7, #12
 8005832:	46bd      	mov	sp, r7
 8005834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005838:	4770      	bx	lr

0800583a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800583a:	b480      	push	{r7}
 800583c:	b083      	sub	sp, #12
 800583e:	af00      	add	r7, sp, #0
 8005840:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	689b      	ldr	r3, [r3, #8]
 8005846:	f003 0302 	and.w	r3, r3, #2
 800584a:	2b02      	cmp	r3, #2
 800584c:	d101      	bne.n	8005852 <LL_ADC_IsDisableOngoing+0x18>
 800584e:	2301      	movs	r3, #1
 8005850:	e000      	b.n	8005854 <LL_ADC_IsDisableOngoing+0x1a>
 8005852:	2300      	movs	r3, #0
}
 8005854:	4618      	mov	r0, r3
 8005856:	370c      	adds	r7, #12
 8005858:	46bd      	mov	sp, r7
 800585a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585e:	4770      	bx	lr

08005860 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8005860:	b480      	push	{r7}
 8005862:	b083      	sub	sp, #12
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	689b      	ldr	r3, [r3, #8]
 800586c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005870:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005874:	f043 0204 	orr.w	r2, r3, #4
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800587c:	bf00      	nop
 800587e:	370c      	adds	r7, #12
 8005880:	46bd      	mov	sp, r7
 8005882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005886:	4770      	bx	lr

08005888 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8005888:	b480      	push	{r7}
 800588a:	b083      	sub	sp, #12
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	689b      	ldr	r3, [r3, #8]
 8005894:	f003 0304 	and.w	r3, r3, #4
 8005898:	2b04      	cmp	r3, #4
 800589a:	d101      	bne.n	80058a0 <LL_ADC_REG_IsConversionOngoing+0x18>
 800589c:	2301      	movs	r3, #1
 800589e:	e000      	b.n	80058a2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80058a0:	2300      	movs	r3, #0
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	370c      	adds	r7, #12
 80058a6:	46bd      	mov	sp, r7
 80058a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ac:	4770      	bx	lr

080058ae <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80058ae:	b480      	push	{r7}
 80058b0:	b083      	sub	sp, #12
 80058b2:	af00      	add	r7, sp, #0
 80058b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	689b      	ldr	r3, [r3, #8]
 80058ba:	f003 0308 	and.w	r3, r3, #8
 80058be:	2b08      	cmp	r3, #8
 80058c0:	d101      	bne.n	80058c6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80058c2:	2301      	movs	r3, #1
 80058c4:	e000      	b.n	80058c8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80058c6:	2300      	movs	r3, #0
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	370c      	adds	r7, #12
 80058cc:	46bd      	mov	sp, r7
 80058ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d2:	4770      	bx	lr

080058d4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80058d4:	b590      	push	{r4, r7, lr}
 80058d6:	b089      	sub	sp, #36	@ 0x24
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80058dc:	2300      	movs	r3, #0
 80058de:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80058e0:	2300      	movs	r3, #0
 80058e2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d101      	bne.n	80058ee <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80058ea:	2301      	movs	r3, #1
 80058ec:	e12e      	b.n	8005b4c <HAL_ADC_Init+0x278>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	691b      	ldr	r3, [r3, #16]
 80058f2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d109      	bne.n	8005910 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	f7ff f8eb 	bl	8004ad8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2200      	movs	r2, #0
 8005906:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2200      	movs	r2, #0
 800590c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4618      	mov	r0, r3
 8005916:	f7ff ff19 	bl	800574c <LL_ADC_IsDeepPowerDownEnabled>
 800591a:	4603      	mov	r3, r0
 800591c:	2b00      	cmp	r3, #0
 800591e:	d004      	beq.n	800592a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4618      	mov	r0, r3
 8005926:	f7ff feff 	bl	8005728 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4618      	mov	r0, r3
 8005930:	f7ff ff34 	bl	800579c <LL_ADC_IsInternalRegulatorEnabled>
 8005934:	4603      	mov	r3, r0
 8005936:	2b00      	cmp	r3, #0
 8005938:	d115      	bne.n	8005966 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4618      	mov	r0, r3
 8005940:	f7ff ff18 	bl	8005774 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005944:	4b83      	ldr	r3, [pc, #524]	@ (8005b54 <HAL_ADC_Init+0x280>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	099b      	lsrs	r3, r3, #6
 800594a:	4a83      	ldr	r2, [pc, #524]	@ (8005b58 <HAL_ADC_Init+0x284>)
 800594c:	fba2 2303 	umull	r2, r3, r2, r3
 8005950:	099b      	lsrs	r3, r3, #6
 8005952:	3301      	adds	r3, #1
 8005954:	005b      	lsls	r3, r3, #1
 8005956:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005958:	e002      	b.n	8005960 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	3b01      	subs	r3, #1
 800595e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d1f9      	bne.n	800595a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4618      	mov	r0, r3
 800596c:	f7ff ff16 	bl	800579c <LL_ADC_IsInternalRegulatorEnabled>
 8005970:	4603      	mov	r3, r0
 8005972:	2b00      	cmp	r3, #0
 8005974:	d10d      	bne.n	8005992 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800597a:	f043 0210 	orr.w	r2, r3, #16
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005986:	f043 0201 	orr.w	r2, r3, #1
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800598e:	2301      	movs	r3, #1
 8005990:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4618      	mov	r0, r3
 8005998:	f7ff ff76 	bl	8005888 <LL_ADC_REG_IsConversionOngoing>
 800599c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059a2:	f003 0310 	and.w	r3, r3, #16
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	f040 80c7 	bne.w	8005b3a <HAL_ADC_Init+0x266>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	f040 80c3 	bne.w	8005b3a <HAL_ADC_Init+0x266>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059b8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80059bc:	f043 0202 	orr.w	r2, r3, #2
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4618      	mov	r0, r3
 80059ca:	f7ff ff23 	bl	8005814 <LL_ADC_IsEnabled>
 80059ce:	4603      	mov	r3, r0
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d110      	bne.n	80059f6 <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80059d4:	4861      	ldr	r0, [pc, #388]	@ (8005b5c <HAL_ADC_Init+0x288>)
 80059d6:	f7ff ff1d 	bl	8005814 <LL_ADC_IsEnabled>
 80059da:	4604      	mov	r4, r0
 80059dc:	4860      	ldr	r0, [pc, #384]	@ (8005b60 <HAL_ADC_Init+0x28c>)
 80059de:	f7ff ff19 	bl	8005814 <LL_ADC_IsEnabled>
 80059e2:	4603      	mov	r3, r0
 80059e4:	4323      	orrs	r3, r4
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d105      	bne.n	80059f6 <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	4619      	mov	r1, r3
 80059f0:	485c      	ldr	r0, [pc, #368]	@ (8005b64 <HAL_ADC_Init+0x290>)
 80059f2:	f7ff fd3f 	bl	8005474 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	7e5b      	ldrb	r3, [r3, #25]
 80059fa:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005a00:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8005a06:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8005a0c:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005a14:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005a16:	4313      	orrs	r3, r2
 8005a18:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005a20:	2b01      	cmp	r3, #1
 8005a22:	d106      	bne.n	8005a32 <HAL_ADC_Init+0x15e>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a28:	3b01      	subs	r3, #1
 8005a2a:	045b      	lsls	r3, r3, #17
 8005a2c:	69ba      	ldr	r2, [r7, #24]
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d009      	beq.n	8005a4e <HAL_ADC_Init+0x17a>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a3e:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a46:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005a48:	69ba      	ldr	r2, [r7, #24]
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	68da      	ldr	r2, [r3, #12]
 8005a54:	4b44      	ldr	r3, [pc, #272]	@ (8005b68 <HAL_ADC_Init+0x294>)
 8005a56:	4013      	ands	r3, r2
 8005a58:	687a      	ldr	r2, [r7, #4]
 8005a5a:	6812      	ldr	r2, [r2, #0]
 8005a5c:	69b9      	ldr	r1, [r7, #24]
 8005a5e:	430b      	orrs	r3, r1
 8005a60:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4618      	mov	r0, r3
 8005a68:	f7ff ff21 	bl	80058ae <LL_ADC_INJ_IsConversionOngoing>
 8005a6c:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d140      	bne.n	8005af6 <HAL_ADC_Init+0x222>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005a74:	693b      	ldr	r3, [r7, #16]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d13d      	bne.n	8005af6 <HAL_ADC_Init+0x222>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	7e1b      	ldrb	r3, [r3, #24]
 8005a82:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8005a84:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005a8c:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	68db      	ldr	r3, [r3, #12]
 8005a98:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005a9c:	f023 0306 	bic.w	r3, r3, #6
 8005aa0:	687a      	ldr	r2, [r7, #4]
 8005aa2:	6812      	ldr	r2, [r2, #0]
 8005aa4:	69b9      	ldr	r1, [r7, #24]
 8005aa6:	430b      	orrs	r3, r1
 8005aa8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005ab0:	2b01      	cmp	r3, #1
 8005ab2:	d118      	bne.n	8005ae6 <HAL_ADC_Init+0x212>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	691b      	ldr	r3, [r3, #16]
 8005aba:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005abe:	f023 0304 	bic.w	r3, r3, #4
 8005ac2:	687a      	ldr	r2, [r7, #4]
 8005ac4:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8005ac6:	687a      	ldr	r2, [r7, #4]
 8005ac8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005aca:	4311      	orrs	r1, r2
 8005acc:	687a      	ldr	r2, [r7, #4]
 8005ace:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8005ad0:	4311      	orrs	r1, r2
 8005ad2:	687a      	ldr	r2, [r7, #4]
 8005ad4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005ad6:	430a      	orrs	r2, r1
 8005ad8:	431a      	orrs	r2, r3
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f042 0201 	orr.w	r2, r2, #1
 8005ae2:	611a      	str	r2, [r3, #16]
 8005ae4:	e007      	b.n	8005af6 <HAL_ADC_Init+0x222>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	691a      	ldr	r2, [r3, #16]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f022 0201 	bic.w	r2, r2, #1
 8005af4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	691b      	ldr	r3, [r3, #16]
 8005afa:	2b01      	cmp	r3, #1
 8005afc:	d10c      	bne.n	8005b18 <HAL_ADC_Init+0x244>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b04:	f023 010f 	bic.w	r1, r3, #15
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	69db      	ldr	r3, [r3, #28]
 8005b0c:	1e5a      	subs	r2, r3, #1
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	430a      	orrs	r2, r1
 8005b14:	631a      	str	r2, [r3, #48]	@ 0x30
 8005b16:	e007      	b.n	8005b28 <HAL_ADC_Init+0x254>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f022 020f 	bic.w	r2, r2, #15
 8005b26:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b2c:	f023 0303 	bic.w	r3, r3, #3
 8005b30:	f043 0201 	orr.w	r2, r3, #1
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	659a      	str	r2, [r3, #88]	@ 0x58
 8005b38:	e007      	b.n	8005b4a <HAL_ADC_Init+0x276>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b3e:	f043 0210 	orr.w	r2, r3, #16
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8005b46:	2301      	movs	r3, #1
 8005b48:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005b4a:	7ffb      	ldrb	r3, [r7, #31]
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	3724      	adds	r7, #36	@ 0x24
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bd90      	pop	{r4, r7, pc}
 8005b54:	20000298 	.word	0x20000298
 8005b58:	053e2d63 	.word	0x053e2d63
 8005b5c:	50040000 	.word	0x50040000
 8005b60:	50040100 	.word	0x50040100
 8005b64:	50040300 	.word	0x50040300
 8005b68:	fff0c007 	.word	0xfff0c007

08005b6c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b086      	sub	sp, #24
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	60f8      	str	r0, [r7, #12]
 8005b74:	60b9      	str	r1, [r7, #8]
 8005b76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005b78:	4850      	ldr	r0, [pc, #320]	@ (8005cbc <HAL_ADC_Start_DMA+0x150>)
 8005b7a:	f7ff fdb9 	bl	80056f0 <LL_ADC_GetMultimode>
 8005b7e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4618      	mov	r0, r3
 8005b86:	f7ff fe7f 	bl	8005888 <LL_ADC_REG_IsConversionOngoing>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	f040 808e 	bne.w	8005cae <HAL_ADC_Start_DMA+0x142>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	d101      	bne.n	8005ba0 <HAL_ADC_Start_DMA+0x34>
 8005b9c:	2302      	movs	r3, #2
 8005b9e:	e089      	b.n	8005cb4 <HAL_ADC_Start_DMA+0x148>
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d005      	beq.n	8005bba <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	2b05      	cmp	r3, #5
 8005bb2:	d002      	beq.n	8005bba <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	2b09      	cmp	r3, #9
 8005bb8:	d172      	bne.n	8005ca0 <HAL_ADC_Start_DMA+0x134>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8005bba:	68f8      	ldr	r0, [r7, #12]
 8005bbc:	f000 fec8 	bl	8006950 <ADC_Enable>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8005bc4:	7dfb      	ldrb	r3, [r7, #23]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d165      	bne.n	8005c96 <HAL_ADC_Start_DMA+0x12a>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bce:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005bd2:	f023 0301 	bic.w	r3, r3, #1
 8005bd6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	659a      	str	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4a37      	ldr	r2, [pc, #220]	@ (8005cc0 <HAL_ADC_Start_DMA+0x154>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d002      	beq.n	8005bee <HAL_ADC_Start_DMA+0x82>
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	e000      	b.n	8005bf0 <HAL_ADC_Start_DMA+0x84>
 8005bee:	4b35      	ldr	r3, [pc, #212]	@ (8005cc4 <HAL_ADC_Start_DMA+0x158>)
 8005bf0:	68fa      	ldr	r2, [r7, #12]
 8005bf2:	6812      	ldr	r2, [r2, #0]
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d002      	beq.n	8005bfe <HAL_ADC_Start_DMA+0x92>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d105      	bne.n	8005c0a <HAL_ADC_Start_DMA+0x9e>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c02:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	659a      	str	r2, [r3, #88]	@ 0x58
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c0e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d006      	beq.n	8005c24 <HAL_ADC_Start_DMA+0xb8>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c1a:	f023 0206 	bic.w	r2, r3, #6
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005c22:	e002      	b.n	8005c2a <HAL_ADC_Start_DMA+0xbe>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2200      	movs	r2, #0
 8005c28:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c2e:	4a26      	ldr	r2, [pc, #152]	@ (8005cc8 <HAL_ADC_Start_DMA+0x15c>)
 8005c30:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c36:	4a25      	ldr	r2, [pc, #148]	@ (8005ccc <HAL_ADC_Start_DMA+0x160>)
 8005c38:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c3e:	4a24      	ldr	r2, [pc, #144]	@ (8005cd0 <HAL_ADC_Start_DMA+0x164>)
 8005c40:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	221c      	movs	r2, #28
 8005c48:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	685a      	ldr	r2, [r3, #4]
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f042 0210 	orr.w	r2, r2, #16
 8005c60:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	68da      	ldr	r2, [r3, #12]
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f042 0201 	orr.w	r2, r2, #1
 8005c70:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	3340      	adds	r3, #64	@ 0x40
 8005c7c:	4619      	mov	r1, r3
 8005c7e:	68ba      	ldr	r2, [r7, #8]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	f002 f941 	bl	8007f08 <HAL_DMA_Start_IT>
 8005c86:	4603      	mov	r3, r0
 8005c88:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4618      	mov	r0, r3
 8005c90:	f7ff fde6 	bl	8005860 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8005c94:	e00d      	b.n	8005cb2 <HAL_ADC_Start_DMA+0x146>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      if (tmp_hal_status == HAL_OK)
 8005c9e:	e008      	b.n	8005cb2 <HAL_ADC_Start_DMA+0x146>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 8005cac:	e001      	b.n	8005cb2 <HAL_ADC_Start_DMA+0x146>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005cae:	2302      	movs	r3, #2
 8005cb0:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8005cb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	3718      	adds	r7, #24
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bd80      	pop	{r7, pc}
 8005cbc:	50040300 	.word	0x50040300
 8005cc0:	50040100 	.word	0x50040100
 8005cc4:	50040000 	.word	0x50040000
 8005cc8:	08006b1b 	.word	0x08006b1b
 8005ccc:	08006bf3 	.word	0x08006bf3
 8005cd0:	08006c0f 	.word	0x08006c0f

08005cd4 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b08a      	sub	sp, #40	@ 0x28
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8005cdc:	2300      	movs	r3, #0
 8005cde:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	685b      	ldr	r3, [r3, #4]
 8005cee:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005cf0:	4882      	ldr	r0, [pc, #520]	@ (8005efc <HAL_ADC_IRQHandler+0x228>)
 8005cf2:	f7ff fcfd 	bl	80056f0 <LL_ADC_GetMultimode>
 8005cf6:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8005cf8:	69fb      	ldr	r3, [r7, #28]
 8005cfa:	f003 0302 	and.w	r3, r3, #2
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d017      	beq.n	8005d32 <HAL_ADC_IRQHandler+0x5e>
 8005d02:	69bb      	ldr	r3, [r7, #24]
 8005d04:	f003 0302 	and.w	r3, r3, #2
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d012      	beq.n	8005d32 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d10:	f003 0310 	and.w	r3, r3, #16
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d105      	bne.n	8005d24 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d1c:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	659a      	str	r2, [r3, #88]	@ 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	f001 f867 	bl	8006df8 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	2202      	movs	r2, #2
 8005d30:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005d32:	69fb      	ldr	r3, [r7, #28]
 8005d34:	f003 0304 	and.w	r3, r3, #4
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d004      	beq.n	8005d46 <HAL_ADC_IRQHandler+0x72>
 8005d3c:	69bb      	ldr	r3, [r7, #24]
 8005d3e:	f003 0304 	and.w	r3, r3, #4
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d10a      	bne.n	8005d5c <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005d46:	69fb      	ldr	r3, [r7, #28]
 8005d48:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	f000 8083 	beq.w	8005e58 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005d52:	69bb      	ldr	r3, [r7, #24]
 8005d54:	f003 0308 	and.w	r3, r3, #8
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d07d      	beq.n	8005e58 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d60:	f003 0310 	and.w	r3, r3, #16
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d105      	bne.n	8005d74 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d6c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4618      	mov	r0, r3
 8005d7a:	f7ff fc17 	bl	80055ac <LL_ADC_REG_IsTriggerSourceSWStart>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d062      	beq.n	8005e4a <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a5d      	ldr	r2, [pc, #372]	@ (8005f00 <HAL_ADC_IRQHandler+0x22c>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d002      	beq.n	8005d94 <HAL_ADC_IRQHandler+0xc0>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	e000      	b.n	8005d96 <HAL_ADC_IRQHandler+0xc2>
 8005d94:	4b5b      	ldr	r3, [pc, #364]	@ (8005f04 <HAL_ADC_IRQHandler+0x230>)
 8005d96:	687a      	ldr	r2, [r7, #4]
 8005d98:	6812      	ldr	r2, [r2, #0]
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d008      	beq.n	8005db0 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d005      	beq.n	8005db0 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	2b05      	cmp	r3, #5
 8005da8:	d002      	beq.n	8005db0 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	2b09      	cmp	r3, #9
 8005dae:	d104      	bne.n	8005dba <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	68db      	ldr	r3, [r3, #12]
 8005db6:	623b      	str	r3, [r7, #32]
 8005db8:	e00c      	b.n	8005dd4 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a50      	ldr	r2, [pc, #320]	@ (8005f00 <HAL_ADC_IRQHandler+0x22c>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d002      	beq.n	8005dca <HAL_ADC_IRQHandler+0xf6>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	e000      	b.n	8005dcc <HAL_ADC_IRQHandler+0xf8>
 8005dca:	4b4e      	ldr	r3, [pc, #312]	@ (8005f04 <HAL_ADC_IRQHandler+0x230>)
 8005dcc:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	68db      	ldr	r3, [r3, #12]
 8005dd2:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8005dd4:	6a3b      	ldr	r3, [r7, #32]
 8005dd6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d135      	bne.n	8005e4a <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f003 0308 	and.w	r3, r3, #8
 8005de8:	2b08      	cmp	r3, #8
 8005dea:	d12e      	bne.n	8005e4a <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4618      	mov	r0, r3
 8005df2:	f7ff fd49 	bl	8005888 <LL_ADC_REG_IsConversionOngoing>
 8005df6:	4603      	mov	r3, r0
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d11a      	bne.n	8005e32 <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	685a      	ldr	r2, [r3, #4]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f022 020c 	bic.w	r2, r2, #12
 8005e0a:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e10:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	659a      	str	r2, [r3, #88]	@ 0x58

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e1c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d112      	bne.n	8005e4a <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e28:	f043 0201 	orr.w	r2, r3, #1
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	659a      	str	r2, [r3, #88]	@ 0x58
 8005e30:	e00b      	b.n	8005e4a <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e36:	f043 0210 	orr.w	r2, r3, #16
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e42:	f043 0201 	orr.w	r2, r3, #1
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	65da      	str	r2, [r3, #92]	@ 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f000 f95c 	bl	8006108 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	220c      	movs	r2, #12
 8005e56:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8005e58:	69fb      	ldr	r3, [r7, #28]
 8005e5a:	f003 0320 	and.w	r3, r3, #32
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d004      	beq.n	8005e6c <HAL_ADC_IRQHandler+0x198>
 8005e62:	69bb      	ldr	r3, [r7, #24]
 8005e64:	f003 0320 	and.w	r3, r3, #32
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d10b      	bne.n	8005e84 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8005e6c:	69fb      	ldr	r3, [r7, #28]
 8005e6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	f000 809f 	beq.w	8005fb6 <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8005e78:	69bb      	ldr	r3, [r7, #24]
 8005e7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	f000 8099 	beq.w	8005fb6 <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e88:	f003 0310 	and.w	r3, r3, #16
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d105      	bne.n	8005e9c <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e94:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	f7ff fbc2 	bl	800562a <LL_ADC_INJ_IsTriggerSourceSWStart>
 8005ea6:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4618      	mov	r0, r3
 8005eae:	f7ff fb7d 	bl	80055ac <LL_ADC_REG_IsTriggerSourceSWStart>
 8005eb2:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a11      	ldr	r2, [pc, #68]	@ (8005f00 <HAL_ADC_IRQHandler+0x22c>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d002      	beq.n	8005ec4 <HAL_ADC_IRQHandler+0x1f0>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	e000      	b.n	8005ec6 <HAL_ADC_IRQHandler+0x1f2>
 8005ec4:	4b0f      	ldr	r3, [pc, #60]	@ (8005f04 <HAL_ADC_IRQHandler+0x230>)
 8005ec6:	687a      	ldr	r2, [r7, #4]
 8005ec8:	6812      	ldr	r2, [r2, #0]
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d008      	beq.n	8005ee0 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d005      	beq.n	8005ee0 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	2b06      	cmp	r3, #6
 8005ed8:	d002      	beq.n	8005ee0 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	2b07      	cmp	r3, #7
 8005ede:	d104      	bne.n	8005eea <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	68db      	ldr	r3, [r3, #12]
 8005ee6:	623b      	str	r3, [r7, #32]
 8005ee8:	e013      	b.n	8005f12 <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4a04      	ldr	r2, [pc, #16]	@ (8005f00 <HAL_ADC_IRQHandler+0x22c>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d009      	beq.n	8005f08 <HAL_ADC_IRQHandler+0x234>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	e007      	b.n	8005f0a <HAL_ADC_IRQHandler+0x236>
 8005efa:	bf00      	nop
 8005efc:	50040300 	.word	0x50040300
 8005f00:	50040100 	.word	0x50040100
 8005f04:	50040000 	.word	0x50040000
 8005f08:	4b7d      	ldr	r3, [pc, #500]	@ (8006100 <HAL_ADC_IRQHandler+0x42c>)
 8005f0a:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8005f0c:	693b      	ldr	r3, [r7, #16]
 8005f0e:	68db      	ldr	r3, [r3, #12]
 8005f10:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d047      	beq.n	8005fa8 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8005f18:	6a3b      	ldr	r3, [r7, #32]
 8005f1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d007      	beq.n	8005f32 <HAL_ADC_IRQHandler+0x25e>
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d03f      	beq.n	8005fa8 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8005f28:	6a3b      	ldr	r3, [r7, #32]
 8005f2a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d13a      	bne.n	8005fa8 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f3c:	2b40      	cmp	r3, #64	@ 0x40
 8005f3e:	d133      	bne.n	8005fa8 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8005f40:	6a3b      	ldr	r3, [r7, #32]
 8005f42:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d12e      	bne.n	8005fa8 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4618      	mov	r0, r3
 8005f50:	f7ff fcad 	bl	80058ae <LL_ADC_INJ_IsConversionOngoing>
 8005f54:	4603      	mov	r3, r0
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d11a      	bne.n	8005f90 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	685a      	ldr	r2, [r3, #4]
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005f68:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f6e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	659a      	str	r2, [r3, #88]	@ 0x58

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d112      	bne.n	8005fa8 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f86:	f043 0201 	orr.w	r2, r3, #1
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	659a      	str	r2, [r3, #88]	@ 0x58
 8005f8e:	e00b      	b.n	8005fa8 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f94:	f043 0210 	orr.w	r2, r3, #16
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	659a      	str	r2, [r3, #88]	@ 0x58

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005fa0:	f043 0201 	orr.w	r2, r3, #1
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	65da      	str	r2, [r3, #92]	@ 0x5c
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	f000 fefd 	bl	8006da8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	2260      	movs	r2, #96	@ 0x60
 8005fb4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8005fb6:	69fb      	ldr	r3, [r7, #28]
 8005fb8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d011      	beq.n	8005fe4 <HAL_ADC_IRQHandler+0x310>
 8005fc0:	69bb      	ldr	r3, [r7, #24]
 8005fc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d00c      	beq.n	8005fe4 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fce:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f000 f8aa 	bl	8006130 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	2280      	movs	r2, #128	@ 0x80
 8005fe2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8005fe4:	69fb      	ldr	r3, [r7, #28]
 8005fe6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d012      	beq.n	8006014 <HAL_ADC_IRQHandler+0x340>
 8005fee:	69bb      	ldr	r3, [r7, #24]
 8005ff0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d00d      	beq.n	8006014 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ffc:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f000 fee3 	bl	8006dd0 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006012:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8006014:	69fb      	ldr	r3, [r7, #28]
 8006016:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800601a:	2b00      	cmp	r3, #0
 800601c:	d012      	beq.n	8006044 <HAL_ADC_IRQHandler+0x370>
 800601e:	69bb      	ldr	r3, [r7, #24]
 8006020:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006024:	2b00      	cmp	r3, #0
 8006026:	d00d      	beq.n	8006044 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800602c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	f000 fed5 	bl	8006de4 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006042:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8006044:	69fb      	ldr	r3, [r7, #28]
 8006046:	f003 0310 	and.w	r3, r3, #16
 800604a:	2b00      	cmp	r3, #0
 800604c:	d036      	beq.n	80060bc <HAL_ADC_IRQHandler+0x3e8>
 800604e:	69bb      	ldr	r3, [r7, #24]
 8006050:	f003 0310 	and.w	r3, r3, #16
 8006054:	2b00      	cmp	r3, #0
 8006056:	d031      	beq.n	80060bc <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800605c:	2b00      	cmp	r3, #0
 800605e:	d102      	bne.n	8006066 <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8006060:	2301      	movs	r3, #1
 8006062:	627b      	str	r3, [r7, #36]	@ 0x24
 8006064:	e014      	b.n	8006090 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d008      	beq.n	800607e <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800606c:	4825      	ldr	r0, [pc, #148]	@ (8006104 <HAL_ADC_IRQHandler+0x430>)
 800606e:	f7ff fb4d 	bl	800570c <LL_ADC_GetMultiDMATransfer>
 8006072:	4603      	mov	r3, r0
 8006074:	2b00      	cmp	r3, #0
 8006076:	d00b      	beq.n	8006090 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8006078:	2301      	movs	r3, #1
 800607a:	627b      	str	r3, [r7, #36]	@ 0x24
 800607c:	e008      	b.n	8006090 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	68db      	ldr	r3, [r3, #12]
 8006084:	f003 0301 	and.w	r3, r3, #1
 8006088:	2b00      	cmp	r3, #0
 800608a:	d001      	beq.n	8006090 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 800608c:	2301      	movs	r3, #1
 800608e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8006090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006092:	2b01      	cmp	r3, #1
 8006094:	d10e      	bne.n	80060b4 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800609a:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060a6:	f043 0202 	orr.w	r2, r3, #2
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	65da      	str	r2, [r3, #92]	@ 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f000 f848 	bl	8006144 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	2210      	movs	r2, #16
 80060ba:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80060bc:	69fb      	ldr	r3, [r7, #28]
 80060be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d018      	beq.n	80060f8 <HAL_ADC_IRQHandler+0x424>
 80060c6:	69bb      	ldr	r3, [r7, #24]
 80060c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d013      	beq.n	80060f8 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060d4:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060e0:	f043 0208 	orr.w	r2, r3, #8
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80060f0:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f000 fe62 	bl	8006dbc <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80060f8:	bf00      	nop
 80060fa:	3728      	adds	r7, #40	@ 0x28
 80060fc:	46bd      	mov	sp, r7
 80060fe:	bd80      	pop	{r7, pc}
 8006100:	50040000 	.word	0x50040000
 8006104:	50040300 	.word	0x50040300

08006108 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006108:	b480      	push	{r7}
 800610a:	b083      	sub	sp, #12
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8006110:	bf00      	nop
 8006112:	370c      	adds	r7, #12
 8006114:	46bd      	mov	sp, r7
 8006116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611a:	4770      	bx	lr

0800611c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800611c:	b480      	push	{r7}
 800611e:	b083      	sub	sp, #12
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8006124:	bf00      	nop
 8006126:	370c      	adds	r7, #12
 8006128:	46bd      	mov	sp, r7
 800612a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612e:	4770      	bx	lr

08006130 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8006130:	b480      	push	{r7}
 8006132:	b083      	sub	sp, #12
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8006138:	bf00      	nop
 800613a:	370c      	adds	r7, #12
 800613c:	46bd      	mov	sp, r7
 800613e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006142:	4770      	bx	lr

08006144 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006144:	b480      	push	{r7}
 8006146:	b083      	sub	sp, #12
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800614c:	bf00      	nop
 800614e:	370c      	adds	r7, #12
 8006150:	46bd      	mov	sp, r7
 8006152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006156:	4770      	bx	lr

08006158 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b0b6      	sub	sp, #216	@ 0xd8
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
 8006160:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006162:	2300      	movs	r3, #0
 8006164:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8006168:	2300      	movs	r3, #0
 800616a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8006172:	2b01      	cmp	r3, #1
 8006174:	d101      	bne.n	800617a <HAL_ADC_ConfigChannel+0x22>
 8006176:	2302      	movs	r3, #2
 8006178:	e3d5      	b.n	8006926 <HAL_ADC_ConfigChannel+0x7ce>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2201      	movs	r2, #1
 800617e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4618      	mov	r0, r3
 8006188:	f7ff fb7e 	bl	8005888 <LL_ADC_REG_IsConversionOngoing>
 800618c:	4603      	mov	r3, r0
 800618e:	2b00      	cmp	r3, #0
 8006190:	f040 83ba 	bne.w	8006908 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	685b      	ldr	r3, [r3, #4]
 8006198:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	2b05      	cmp	r3, #5
 80061a2:	d824      	bhi.n	80061ee <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	3b02      	subs	r3, #2
 80061aa:	2b03      	cmp	r3, #3
 80061ac:	d81b      	bhi.n	80061e6 <HAL_ADC_ConfigChannel+0x8e>
 80061ae:	a201      	add	r2, pc, #4	@ (adr r2, 80061b4 <HAL_ADC_ConfigChannel+0x5c>)
 80061b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061b4:	080061c5 	.word	0x080061c5
 80061b8:	080061cd 	.word	0x080061cd
 80061bc:	080061d5 	.word	0x080061d5
 80061c0:	080061dd 	.word	0x080061dd
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80061c4:	230c      	movs	r3, #12
 80061c6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80061ca:	e010      	b.n	80061ee <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80061cc:	2312      	movs	r3, #18
 80061ce:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80061d2:	e00c      	b.n	80061ee <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80061d4:	2318      	movs	r3, #24
 80061d6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80061da:	e008      	b.n	80061ee <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80061dc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80061e0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80061e4:	e003      	b.n	80061ee <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80061e6:	2306      	movs	r3, #6
 80061e8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80061ec:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6818      	ldr	r0, [r3, #0]
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	461a      	mov	r2, r3
 80061f8:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80061fc:	f7ff f9e9 	bl	80055d2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4618      	mov	r0, r3
 8006206:	f7ff fb3f 	bl	8005888 <LL_ADC_REG_IsConversionOngoing>
 800620a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4618      	mov	r0, r3
 8006214:	f7ff fb4b 	bl	80058ae <LL_ADC_INJ_IsConversionOngoing>
 8006218:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800621c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006220:	2b00      	cmp	r3, #0
 8006222:	f040 81bf 	bne.w	80065a4 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006226:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800622a:	2b00      	cmp	r3, #0
 800622c:	f040 81ba 	bne.w	80065a4 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	689b      	ldr	r3, [r3, #8]
 8006234:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006238:	d10f      	bne.n	800625a <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6818      	ldr	r0, [r3, #0]
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	2200      	movs	r2, #0
 8006244:	4619      	mov	r1, r3
 8006246:	f7ff fa03 	bl	8005650 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8006252:	4618      	mov	r0, r3
 8006254:	f7ff f997 	bl	8005586 <LL_ADC_SetSamplingTimeCommonConfig>
 8006258:	e00e      	b.n	8006278 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6818      	ldr	r0, [r3, #0]
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	6819      	ldr	r1, [r3, #0]
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	689b      	ldr	r3, [r3, #8]
 8006266:	461a      	mov	r2, r3
 8006268:	f7ff f9f2 	bl	8005650 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	2100      	movs	r1, #0
 8006272:	4618      	mov	r0, r3
 8006274:	f7ff f987 	bl	8005586 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	695a      	ldr	r2, [r3, #20]
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	68db      	ldr	r3, [r3, #12]
 8006282:	08db      	lsrs	r3, r3, #3
 8006284:	f003 0303 	and.w	r3, r3, #3
 8006288:	005b      	lsls	r3, r3, #1
 800628a:	fa02 f303 	lsl.w	r3, r2, r3
 800628e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	691b      	ldr	r3, [r3, #16]
 8006296:	2b04      	cmp	r3, #4
 8006298:	d00a      	beq.n	80062b0 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6818      	ldr	r0, [r3, #0]
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	6919      	ldr	r1, [r3, #16]
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	681a      	ldr	r2, [r3, #0]
 80062a6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80062aa:	f7ff f917 	bl	80054dc <LL_ADC_SetOffset>
 80062ae:	e179      	b.n	80065a4 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	2100      	movs	r1, #0
 80062b6:	4618      	mov	r0, r3
 80062b8:	f7ff f934 	bl	8005524 <LL_ADC_GetOffsetChannel>
 80062bc:	4603      	mov	r3, r0
 80062be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d10a      	bne.n	80062dc <HAL_ADC_ConfigChannel+0x184>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	2100      	movs	r1, #0
 80062cc:	4618      	mov	r0, r3
 80062ce:	f7ff f929 	bl	8005524 <LL_ADC_GetOffsetChannel>
 80062d2:	4603      	mov	r3, r0
 80062d4:	0e9b      	lsrs	r3, r3, #26
 80062d6:	f003 021f 	and.w	r2, r3, #31
 80062da:	e01e      	b.n	800631a <HAL_ADC_ConfigChannel+0x1c2>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	2100      	movs	r1, #0
 80062e2:	4618      	mov	r0, r3
 80062e4:	f7ff f91e 	bl	8005524 <LL_ADC_GetOffsetChannel>
 80062e8:	4603      	mov	r3, r0
 80062ea:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80062f2:	fa93 f3a3 	rbit	r3, r3
 80062f6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80062fa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80062fe:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8006302:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006306:	2b00      	cmp	r3, #0
 8006308:	d101      	bne.n	800630e <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 800630a:	2320      	movs	r3, #32
 800630c:	e004      	b.n	8006318 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 800630e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006312:	fab3 f383 	clz	r3, r3
 8006316:	b2db      	uxtb	r3, r3
 8006318:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006322:	2b00      	cmp	r3, #0
 8006324:	d105      	bne.n	8006332 <HAL_ADC_ConfigChannel+0x1da>
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	0e9b      	lsrs	r3, r3, #26
 800632c:	f003 031f 	and.w	r3, r3, #31
 8006330:	e018      	b.n	8006364 <HAL_ADC_ConfigChannel+0x20c>
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800633a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800633e:	fa93 f3a3 	rbit	r3, r3
 8006342:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8006346:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800634a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 800634e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006352:	2b00      	cmp	r3, #0
 8006354:	d101      	bne.n	800635a <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 8006356:	2320      	movs	r3, #32
 8006358:	e004      	b.n	8006364 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 800635a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800635e:	fab3 f383 	clz	r3, r3
 8006362:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006364:	429a      	cmp	r2, r3
 8006366:	d106      	bne.n	8006376 <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	2200      	movs	r2, #0
 800636e:	2100      	movs	r1, #0
 8006370:	4618      	mov	r0, r3
 8006372:	f7ff f8ed 	bl	8005550 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	2101      	movs	r1, #1
 800637c:	4618      	mov	r0, r3
 800637e:	f7ff f8d1 	bl	8005524 <LL_ADC_GetOffsetChannel>
 8006382:	4603      	mov	r3, r0
 8006384:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006388:	2b00      	cmp	r3, #0
 800638a:	d10a      	bne.n	80063a2 <HAL_ADC_ConfigChannel+0x24a>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	2101      	movs	r1, #1
 8006392:	4618      	mov	r0, r3
 8006394:	f7ff f8c6 	bl	8005524 <LL_ADC_GetOffsetChannel>
 8006398:	4603      	mov	r3, r0
 800639a:	0e9b      	lsrs	r3, r3, #26
 800639c:	f003 021f 	and.w	r2, r3, #31
 80063a0:	e01e      	b.n	80063e0 <HAL_ADC_ConfigChannel+0x288>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	2101      	movs	r1, #1
 80063a8:	4618      	mov	r0, r3
 80063aa:	f7ff f8bb 	bl	8005524 <LL_ADC_GetOffsetChannel>
 80063ae:	4603      	mov	r3, r0
 80063b0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063b4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80063b8:	fa93 f3a3 	rbit	r3, r3
 80063bc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80063c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80063c4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80063c8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d101      	bne.n	80063d4 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 80063d0:	2320      	movs	r3, #32
 80063d2:	e004      	b.n	80063de <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 80063d4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80063d8:	fab3 f383 	clz	r3, r3
 80063dc:	b2db      	uxtb	r3, r3
 80063de:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d105      	bne.n	80063f8 <HAL_ADC_ConfigChannel+0x2a0>
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	0e9b      	lsrs	r3, r3, #26
 80063f2:	f003 031f 	and.w	r3, r3, #31
 80063f6:	e018      	b.n	800642a <HAL_ADC_ConfigChannel+0x2d2>
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006400:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006404:	fa93 f3a3 	rbit	r3, r3
 8006408:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800640c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006410:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8006414:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006418:	2b00      	cmp	r3, #0
 800641a:	d101      	bne.n	8006420 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 800641c:	2320      	movs	r3, #32
 800641e:	e004      	b.n	800642a <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8006420:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006424:	fab3 f383 	clz	r3, r3
 8006428:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800642a:	429a      	cmp	r2, r3
 800642c:	d106      	bne.n	800643c <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	2200      	movs	r2, #0
 8006434:	2101      	movs	r1, #1
 8006436:	4618      	mov	r0, r3
 8006438:	f7ff f88a 	bl	8005550 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	2102      	movs	r1, #2
 8006442:	4618      	mov	r0, r3
 8006444:	f7ff f86e 	bl	8005524 <LL_ADC_GetOffsetChannel>
 8006448:	4603      	mov	r3, r0
 800644a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800644e:	2b00      	cmp	r3, #0
 8006450:	d10a      	bne.n	8006468 <HAL_ADC_ConfigChannel+0x310>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	2102      	movs	r1, #2
 8006458:	4618      	mov	r0, r3
 800645a:	f7ff f863 	bl	8005524 <LL_ADC_GetOffsetChannel>
 800645e:	4603      	mov	r3, r0
 8006460:	0e9b      	lsrs	r3, r3, #26
 8006462:	f003 021f 	and.w	r2, r3, #31
 8006466:	e01e      	b.n	80064a6 <HAL_ADC_ConfigChannel+0x34e>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	2102      	movs	r1, #2
 800646e:	4618      	mov	r0, r3
 8006470:	f7ff f858 	bl	8005524 <LL_ADC_GetOffsetChannel>
 8006474:	4603      	mov	r3, r0
 8006476:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800647a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800647e:	fa93 f3a3 	rbit	r3, r3
 8006482:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8006486:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800648a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 800648e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006492:	2b00      	cmp	r3, #0
 8006494:	d101      	bne.n	800649a <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8006496:	2320      	movs	r3, #32
 8006498:	e004      	b.n	80064a4 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 800649a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800649e:	fab3 f383 	clz	r3, r3
 80064a2:	b2db      	uxtb	r3, r3
 80064a4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d105      	bne.n	80064be <HAL_ADC_ConfigChannel+0x366>
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	0e9b      	lsrs	r3, r3, #26
 80064b8:	f003 031f 	and.w	r3, r3, #31
 80064bc:	e014      	b.n	80064e8 <HAL_ADC_ConfigChannel+0x390>
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064c4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80064c6:	fa93 f3a3 	rbit	r3, r3
 80064ca:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80064cc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80064ce:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80064d2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d101      	bne.n	80064de <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 80064da:	2320      	movs	r3, #32
 80064dc:	e004      	b.n	80064e8 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 80064de:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80064e2:	fab3 f383 	clz	r3, r3
 80064e6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80064e8:	429a      	cmp	r2, r3
 80064ea:	d106      	bne.n	80064fa <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	2200      	movs	r2, #0
 80064f2:	2102      	movs	r1, #2
 80064f4:	4618      	mov	r0, r3
 80064f6:	f7ff f82b 	bl	8005550 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	2103      	movs	r1, #3
 8006500:	4618      	mov	r0, r3
 8006502:	f7ff f80f 	bl	8005524 <LL_ADC_GetOffsetChannel>
 8006506:	4603      	mov	r3, r0
 8006508:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800650c:	2b00      	cmp	r3, #0
 800650e:	d10a      	bne.n	8006526 <HAL_ADC_ConfigChannel+0x3ce>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	2103      	movs	r1, #3
 8006516:	4618      	mov	r0, r3
 8006518:	f7ff f804 	bl	8005524 <LL_ADC_GetOffsetChannel>
 800651c:	4603      	mov	r3, r0
 800651e:	0e9b      	lsrs	r3, r3, #26
 8006520:	f003 021f 	and.w	r2, r3, #31
 8006524:	e017      	b.n	8006556 <HAL_ADC_ConfigChannel+0x3fe>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	2103      	movs	r1, #3
 800652c:	4618      	mov	r0, r3
 800652e:	f7fe fff9 	bl	8005524 <LL_ADC_GetOffsetChannel>
 8006532:	4603      	mov	r3, r0
 8006534:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006536:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006538:	fa93 f3a3 	rbit	r3, r3
 800653c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800653e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006540:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8006542:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006544:	2b00      	cmp	r3, #0
 8006546:	d101      	bne.n	800654c <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8006548:	2320      	movs	r3, #32
 800654a:	e003      	b.n	8006554 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 800654c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800654e:	fab3 f383 	clz	r3, r3
 8006552:	b2db      	uxtb	r3, r3
 8006554:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800655e:	2b00      	cmp	r3, #0
 8006560:	d105      	bne.n	800656e <HAL_ADC_ConfigChannel+0x416>
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	0e9b      	lsrs	r3, r3, #26
 8006568:	f003 031f 	and.w	r3, r3, #31
 800656c:	e011      	b.n	8006592 <HAL_ADC_ConfigChannel+0x43a>
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006574:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006576:	fa93 f3a3 	rbit	r3, r3
 800657a:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 800657c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800657e:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8006580:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006582:	2b00      	cmp	r3, #0
 8006584:	d101      	bne.n	800658a <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8006586:	2320      	movs	r3, #32
 8006588:	e003      	b.n	8006592 <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 800658a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800658c:	fab3 f383 	clz	r3, r3
 8006590:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006592:	429a      	cmp	r2, r3
 8006594:	d106      	bne.n	80065a4 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	2200      	movs	r2, #0
 800659c:	2103      	movs	r1, #3
 800659e:	4618      	mov	r0, r3
 80065a0:	f7fe ffd6 	bl	8005550 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4618      	mov	r0, r3
 80065aa:	f7ff f933 	bl	8005814 <LL_ADC_IsEnabled>
 80065ae:	4603      	mov	r3, r0
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	f040 813f 	bne.w	8006834 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6818      	ldr	r0, [r3, #0]
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	6819      	ldr	r1, [r3, #0]
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	68db      	ldr	r3, [r3, #12]
 80065c2:	461a      	mov	r2, r3
 80065c4:	f7ff f870 	bl	80056a8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	68db      	ldr	r3, [r3, #12]
 80065cc:	4a8e      	ldr	r2, [pc, #568]	@ (8006808 <HAL_ADC_ConfigChannel+0x6b0>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	f040 8130 	bne.w	8006834 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d10b      	bne.n	80065fc <HAL_ADC_ConfigChannel+0x4a4>
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	0e9b      	lsrs	r3, r3, #26
 80065ea:	3301      	adds	r3, #1
 80065ec:	f003 031f 	and.w	r3, r3, #31
 80065f0:	2b09      	cmp	r3, #9
 80065f2:	bf94      	ite	ls
 80065f4:	2301      	movls	r3, #1
 80065f6:	2300      	movhi	r3, #0
 80065f8:	b2db      	uxtb	r3, r3
 80065fa:	e019      	b.n	8006630 <HAL_ADC_ConfigChannel+0x4d8>
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006602:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006604:	fa93 f3a3 	rbit	r3, r3
 8006608:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800660a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800660c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800660e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006610:	2b00      	cmp	r3, #0
 8006612:	d101      	bne.n	8006618 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8006614:	2320      	movs	r3, #32
 8006616:	e003      	b.n	8006620 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8006618:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800661a:	fab3 f383 	clz	r3, r3
 800661e:	b2db      	uxtb	r3, r3
 8006620:	3301      	adds	r3, #1
 8006622:	f003 031f 	and.w	r3, r3, #31
 8006626:	2b09      	cmp	r3, #9
 8006628:	bf94      	ite	ls
 800662a:	2301      	movls	r3, #1
 800662c:	2300      	movhi	r3, #0
 800662e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006630:	2b00      	cmp	r3, #0
 8006632:	d079      	beq.n	8006728 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800663c:	2b00      	cmp	r3, #0
 800663e:	d107      	bne.n	8006650 <HAL_ADC_ConfigChannel+0x4f8>
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	0e9b      	lsrs	r3, r3, #26
 8006646:	3301      	adds	r3, #1
 8006648:	069b      	lsls	r3, r3, #26
 800664a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800664e:	e015      	b.n	800667c <HAL_ADC_ConfigChannel+0x524>
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006656:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006658:	fa93 f3a3 	rbit	r3, r3
 800665c:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800665e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006660:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8006662:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006664:	2b00      	cmp	r3, #0
 8006666:	d101      	bne.n	800666c <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8006668:	2320      	movs	r3, #32
 800666a:	e003      	b.n	8006674 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 800666c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800666e:	fab3 f383 	clz	r3, r3
 8006672:	b2db      	uxtb	r3, r3
 8006674:	3301      	adds	r3, #1
 8006676:	069b      	lsls	r3, r3, #26
 8006678:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006684:	2b00      	cmp	r3, #0
 8006686:	d109      	bne.n	800669c <HAL_ADC_ConfigChannel+0x544>
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	0e9b      	lsrs	r3, r3, #26
 800668e:	3301      	adds	r3, #1
 8006690:	f003 031f 	and.w	r3, r3, #31
 8006694:	2101      	movs	r1, #1
 8006696:	fa01 f303 	lsl.w	r3, r1, r3
 800669a:	e017      	b.n	80066cc <HAL_ADC_ConfigChannel+0x574>
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80066a4:	fa93 f3a3 	rbit	r3, r3
 80066a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80066aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066ac:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80066ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d101      	bne.n	80066b8 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 80066b4:	2320      	movs	r3, #32
 80066b6:	e003      	b.n	80066c0 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 80066b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80066ba:	fab3 f383 	clz	r3, r3
 80066be:	b2db      	uxtb	r3, r3
 80066c0:	3301      	adds	r3, #1
 80066c2:	f003 031f 	and.w	r3, r3, #31
 80066c6:	2101      	movs	r1, #1
 80066c8:	fa01 f303 	lsl.w	r3, r1, r3
 80066cc:	ea42 0103 	orr.w	r1, r2, r3
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d10a      	bne.n	80066f2 <HAL_ADC_ConfigChannel+0x59a>
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	0e9b      	lsrs	r3, r3, #26
 80066e2:	3301      	adds	r3, #1
 80066e4:	f003 021f 	and.w	r2, r3, #31
 80066e8:	4613      	mov	r3, r2
 80066ea:	005b      	lsls	r3, r3, #1
 80066ec:	4413      	add	r3, r2
 80066ee:	051b      	lsls	r3, r3, #20
 80066f0:	e018      	b.n	8006724 <HAL_ADC_ConfigChannel+0x5cc>
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066fa:	fa93 f3a3 	rbit	r3, r3
 80066fe:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8006700:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006702:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8006704:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006706:	2b00      	cmp	r3, #0
 8006708:	d101      	bne.n	800670e <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 800670a:	2320      	movs	r3, #32
 800670c:	e003      	b.n	8006716 <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 800670e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006710:	fab3 f383 	clz	r3, r3
 8006714:	b2db      	uxtb	r3, r3
 8006716:	3301      	adds	r3, #1
 8006718:	f003 021f 	and.w	r2, r3, #31
 800671c:	4613      	mov	r3, r2
 800671e:	005b      	lsls	r3, r3, #1
 8006720:	4413      	add	r3, r2
 8006722:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006724:	430b      	orrs	r3, r1
 8006726:	e080      	b.n	800682a <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006730:	2b00      	cmp	r3, #0
 8006732:	d107      	bne.n	8006744 <HAL_ADC_ConfigChannel+0x5ec>
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	0e9b      	lsrs	r3, r3, #26
 800673a:	3301      	adds	r3, #1
 800673c:	069b      	lsls	r3, r3, #26
 800673e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006742:	e015      	b.n	8006770 <HAL_ADC_ConfigChannel+0x618>
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800674a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800674c:	fa93 f3a3 	rbit	r3, r3
 8006750:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8006752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006754:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8006756:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006758:	2b00      	cmp	r3, #0
 800675a:	d101      	bne.n	8006760 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 800675c:	2320      	movs	r3, #32
 800675e:	e003      	b.n	8006768 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8006760:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006762:	fab3 f383 	clz	r3, r3
 8006766:	b2db      	uxtb	r3, r3
 8006768:	3301      	adds	r3, #1
 800676a:	069b      	lsls	r3, r3, #26
 800676c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006778:	2b00      	cmp	r3, #0
 800677a:	d109      	bne.n	8006790 <HAL_ADC_ConfigChannel+0x638>
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	0e9b      	lsrs	r3, r3, #26
 8006782:	3301      	adds	r3, #1
 8006784:	f003 031f 	and.w	r3, r3, #31
 8006788:	2101      	movs	r1, #1
 800678a:	fa01 f303 	lsl.w	r3, r1, r3
 800678e:	e017      	b.n	80067c0 <HAL_ADC_ConfigChannel+0x668>
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006796:	69fb      	ldr	r3, [r7, #28]
 8006798:	fa93 f3a3 	rbit	r3, r3
 800679c:	61bb      	str	r3, [r7, #24]
  return result;
 800679e:	69bb      	ldr	r3, [r7, #24]
 80067a0:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80067a2:	6a3b      	ldr	r3, [r7, #32]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d101      	bne.n	80067ac <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 80067a8:	2320      	movs	r3, #32
 80067aa:	e003      	b.n	80067b4 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 80067ac:	6a3b      	ldr	r3, [r7, #32]
 80067ae:	fab3 f383 	clz	r3, r3
 80067b2:	b2db      	uxtb	r3, r3
 80067b4:	3301      	adds	r3, #1
 80067b6:	f003 031f 	and.w	r3, r3, #31
 80067ba:	2101      	movs	r1, #1
 80067bc:	fa01 f303 	lsl.w	r3, r1, r3
 80067c0:	ea42 0103 	orr.w	r1, r2, r3
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d10d      	bne.n	80067ec <HAL_ADC_ConfigChannel+0x694>
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	0e9b      	lsrs	r3, r3, #26
 80067d6:	3301      	adds	r3, #1
 80067d8:	f003 021f 	and.w	r2, r3, #31
 80067dc:	4613      	mov	r3, r2
 80067de:	005b      	lsls	r3, r3, #1
 80067e0:	4413      	add	r3, r2
 80067e2:	3b1e      	subs	r3, #30
 80067e4:	051b      	lsls	r3, r3, #20
 80067e6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80067ea:	e01d      	b.n	8006828 <HAL_ADC_ConfigChannel+0x6d0>
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	fa93 f3a3 	rbit	r3, r3
 80067f8:	60fb      	str	r3, [r7, #12]
  return result;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80067fe:	697b      	ldr	r3, [r7, #20]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d103      	bne.n	800680c <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8006804:	2320      	movs	r3, #32
 8006806:	e005      	b.n	8006814 <HAL_ADC_ConfigChannel+0x6bc>
 8006808:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800680c:	697b      	ldr	r3, [r7, #20]
 800680e:	fab3 f383 	clz	r3, r3
 8006812:	b2db      	uxtb	r3, r3
 8006814:	3301      	adds	r3, #1
 8006816:	f003 021f 	and.w	r2, r3, #31
 800681a:	4613      	mov	r3, r2
 800681c:	005b      	lsls	r3, r3, #1
 800681e:	4413      	add	r3, r2
 8006820:	3b1e      	subs	r3, #30
 8006822:	051b      	lsls	r3, r3, #20
 8006824:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006828:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800682a:	683a      	ldr	r2, [r7, #0]
 800682c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800682e:	4619      	mov	r1, r3
 8006830:	f7fe ff0e 	bl	8005650 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	681a      	ldr	r2, [r3, #0]
 8006838:	4b3d      	ldr	r3, [pc, #244]	@ (8006930 <HAL_ADC_ConfigChannel+0x7d8>)
 800683a:	4013      	ands	r3, r2
 800683c:	2b00      	cmp	r3, #0
 800683e:	d06c      	beq.n	800691a <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006840:	483c      	ldr	r0, [pc, #240]	@ (8006934 <HAL_ADC_ConfigChannel+0x7dc>)
 8006842:	f7fe fe3d 	bl	80054c0 <LL_ADC_GetCommonPathInternalCh>
 8006846:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4a3a      	ldr	r2, [pc, #232]	@ (8006938 <HAL_ADC_ConfigChannel+0x7e0>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d127      	bne.n	80068a4 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006854:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006858:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800685c:	2b00      	cmp	r3, #0
 800685e:	d121      	bne.n	80068a4 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4a35      	ldr	r2, [pc, #212]	@ (800693c <HAL_ADC_ConfigChannel+0x7e4>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d157      	bne.n	800691a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800686a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800686e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006872:	4619      	mov	r1, r3
 8006874:	482f      	ldr	r0, [pc, #188]	@ (8006934 <HAL_ADC_ConfigChannel+0x7dc>)
 8006876:	f7fe fe10 	bl	800549a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800687a:	4b31      	ldr	r3, [pc, #196]	@ (8006940 <HAL_ADC_ConfigChannel+0x7e8>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	099b      	lsrs	r3, r3, #6
 8006880:	4a30      	ldr	r2, [pc, #192]	@ (8006944 <HAL_ADC_ConfigChannel+0x7ec>)
 8006882:	fba2 2303 	umull	r2, r3, r2, r3
 8006886:	099b      	lsrs	r3, r3, #6
 8006888:	1c5a      	adds	r2, r3, #1
 800688a:	4613      	mov	r3, r2
 800688c:	005b      	lsls	r3, r3, #1
 800688e:	4413      	add	r3, r2
 8006890:	009b      	lsls	r3, r3, #2
 8006892:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8006894:	e002      	b.n	800689c <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	3b01      	subs	r3, #1
 800689a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d1f9      	bne.n	8006896 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80068a2:	e03a      	b.n	800691a <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4a27      	ldr	r2, [pc, #156]	@ (8006948 <HAL_ADC_ConfigChannel+0x7f0>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d113      	bne.n	80068d6 <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80068ae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80068b2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d10d      	bne.n	80068d6 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a1f      	ldr	r2, [pc, #124]	@ (800693c <HAL_ADC_ConfigChannel+0x7e4>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d12a      	bne.n	800691a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80068c4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80068c8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80068cc:	4619      	mov	r1, r3
 80068ce:	4819      	ldr	r0, [pc, #100]	@ (8006934 <HAL_ADC_ConfigChannel+0x7dc>)
 80068d0:	f7fe fde3 	bl	800549a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80068d4:	e021      	b.n	800691a <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4a1c      	ldr	r2, [pc, #112]	@ (800694c <HAL_ADC_ConfigChannel+0x7f4>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d11c      	bne.n	800691a <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80068e0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80068e4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d116      	bne.n	800691a <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a12      	ldr	r2, [pc, #72]	@ (800693c <HAL_ADC_ConfigChannel+0x7e4>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d111      	bne.n	800691a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80068f6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80068fa:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80068fe:	4619      	mov	r1, r3
 8006900:	480c      	ldr	r0, [pc, #48]	@ (8006934 <HAL_ADC_ConfigChannel+0x7dc>)
 8006902:	f7fe fdca 	bl	800549a <LL_ADC_SetCommonPathInternalCh>
 8006906:	e008      	b.n	800691a <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800690c:	f043 0220 	orr.w	r2, r3, #32
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8006914:	2301      	movs	r3, #1
 8006916:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2200      	movs	r2, #0
 800691e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8006922:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8006926:	4618      	mov	r0, r3
 8006928:	37d8      	adds	r7, #216	@ 0xd8
 800692a:	46bd      	mov	sp, r7
 800692c:	bd80      	pop	{r7, pc}
 800692e:	bf00      	nop
 8006930:	80080000 	.word	0x80080000
 8006934:	50040300 	.word	0x50040300
 8006938:	c7520000 	.word	0xc7520000
 800693c:	50040000 	.word	0x50040000
 8006940:	20000298 	.word	0x20000298
 8006944:	053e2d63 	.word	0x053e2d63
 8006948:	cb840000 	.word	0xcb840000
 800694c:	80000001 	.word	0x80000001

08006950 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b084      	sub	sp, #16
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8006958:	2300      	movs	r3, #0
 800695a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4618      	mov	r0, r3
 8006962:	f7fe ff57 	bl	8005814 <LL_ADC_IsEnabled>
 8006966:	4603      	mov	r3, r0
 8006968:	2b00      	cmp	r3, #0
 800696a:	d169      	bne.n	8006a40 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	689a      	ldr	r2, [r3, #8]
 8006972:	4b36      	ldr	r3, [pc, #216]	@ (8006a4c <ADC_Enable+0xfc>)
 8006974:	4013      	ands	r3, r2
 8006976:	2b00      	cmp	r3, #0
 8006978:	d00d      	beq.n	8006996 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800697e:	f043 0210 	orr.w	r2, r3, #16
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800698a:	f043 0201 	orr.w	r2, r3, #1
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8006992:	2301      	movs	r3, #1
 8006994:	e055      	b.n	8006a42 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4618      	mov	r0, r3
 800699c:	f7fe ff12 	bl	80057c4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80069a0:	482b      	ldr	r0, [pc, #172]	@ (8006a50 <ADC_Enable+0x100>)
 80069a2:	f7fe fd8d 	bl	80054c0 <LL_ADC_GetCommonPathInternalCh>
 80069a6:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80069a8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d013      	beq.n	80069d8 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80069b0:	4b28      	ldr	r3, [pc, #160]	@ (8006a54 <ADC_Enable+0x104>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	099b      	lsrs	r3, r3, #6
 80069b6:	4a28      	ldr	r2, [pc, #160]	@ (8006a58 <ADC_Enable+0x108>)
 80069b8:	fba2 2303 	umull	r2, r3, r2, r3
 80069bc:	099b      	lsrs	r3, r3, #6
 80069be:	1c5a      	adds	r2, r3, #1
 80069c0:	4613      	mov	r3, r2
 80069c2:	005b      	lsls	r3, r3, #1
 80069c4:	4413      	add	r3, r2
 80069c6:	009b      	lsls	r3, r3, #2
 80069c8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80069ca:	e002      	b.n	80069d2 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	3b01      	subs	r3, #1
 80069d0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d1f9      	bne.n	80069cc <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80069d8:	f7fe fd1c 	bl	8005414 <HAL_GetTick>
 80069dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80069de:	e028      	b.n	8006a32 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4618      	mov	r0, r3
 80069e6:	f7fe ff15 	bl	8005814 <LL_ADC_IsEnabled>
 80069ea:	4603      	mov	r3, r0
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d104      	bne.n	80069fa <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4618      	mov	r0, r3
 80069f6:	f7fe fee5 	bl	80057c4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80069fa:	f7fe fd0b 	bl	8005414 <HAL_GetTick>
 80069fe:	4602      	mov	r2, r0
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	1ad3      	subs	r3, r2, r3
 8006a04:	2b02      	cmp	r3, #2
 8006a06:	d914      	bls.n	8006a32 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f003 0301 	and.w	r3, r3, #1
 8006a12:	2b01      	cmp	r3, #1
 8006a14:	d00d      	beq.n	8006a32 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a1a:	f043 0210 	orr.w	r2, r3, #16
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a26:	f043 0201 	orr.w	r2, r3, #1
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8006a2e:	2301      	movs	r3, #1
 8006a30:	e007      	b.n	8006a42 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f003 0301 	and.w	r3, r3, #1
 8006a3c:	2b01      	cmp	r3, #1
 8006a3e:	d1cf      	bne.n	80069e0 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006a40:	2300      	movs	r3, #0
}
 8006a42:	4618      	mov	r0, r3
 8006a44:	3710      	adds	r7, #16
 8006a46:	46bd      	mov	sp, r7
 8006a48:	bd80      	pop	{r7, pc}
 8006a4a:	bf00      	nop
 8006a4c:	8000003f 	.word	0x8000003f
 8006a50:	50040300 	.word	0x50040300
 8006a54:	20000298 	.word	0x20000298
 8006a58:	053e2d63 	.word	0x053e2d63

08006a5c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b084      	sub	sp, #16
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4618      	mov	r0, r3
 8006a6a:	f7fe fee6 	bl	800583a <LL_ADC_IsDisableOngoing>
 8006a6e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4618      	mov	r0, r3
 8006a76:	f7fe fecd 	bl	8005814 <LL_ADC_IsEnabled>
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d047      	beq.n	8006b10 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d144      	bne.n	8006b10 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	689b      	ldr	r3, [r3, #8]
 8006a8c:	f003 030d 	and.w	r3, r3, #13
 8006a90:	2b01      	cmp	r3, #1
 8006a92:	d10c      	bne.n	8006aae <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4618      	mov	r0, r3
 8006a9a:	f7fe fea7 	bl	80057ec <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	2203      	movs	r2, #3
 8006aa4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8006aa6:	f7fe fcb5 	bl	8005414 <HAL_GetTick>
 8006aaa:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006aac:	e029      	b.n	8006b02 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ab2:	f043 0210 	orr.w	r2, r3, #16
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006abe:	f043 0201 	orr.w	r2, r3, #1
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	e023      	b.n	8006b12 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8006aca:	f7fe fca3 	bl	8005414 <HAL_GetTick>
 8006ace:	4602      	mov	r2, r0
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	1ad3      	subs	r3, r2, r3
 8006ad4:	2b02      	cmp	r3, #2
 8006ad6:	d914      	bls.n	8006b02 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	689b      	ldr	r3, [r3, #8]
 8006ade:	f003 0301 	and.w	r3, r3, #1
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d00d      	beq.n	8006b02 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006aea:	f043 0210 	orr.w	r2, r3, #16
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006af6:	f043 0201 	orr.w	r2, r3, #1
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8006afe:	2301      	movs	r3, #1
 8006b00:	e007      	b.n	8006b12 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	689b      	ldr	r3, [r3, #8]
 8006b08:	f003 0301 	and.w	r3, r3, #1
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d1dc      	bne.n	8006aca <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006b10:	2300      	movs	r3, #0
}
 8006b12:	4618      	mov	r0, r3
 8006b14:	3710      	adds	r7, #16
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}

08006b1a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8006b1a:	b580      	push	{r7, lr}
 8006b1c:	b084      	sub	sp, #16
 8006b1e:	af00      	add	r7, sp, #0
 8006b20:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b26:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b2c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d14b      	bne.n	8006bcc <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b38:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f003 0308 	and.w	r3, r3, #8
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d021      	beq.n	8006b92 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4618      	mov	r0, r3
 8006b54:	f7fe fd2a 	bl	80055ac <LL_ADC_REG_IsTriggerSourceSWStart>
 8006b58:	4603      	mov	r3, r0
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d032      	beq.n	8006bc4 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	68db      	ldr	r3, [r3, #12]
 8006b64:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d12b      	bne.n	8006bc4 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b70:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	659a      	str	r2, [r3, #88]	@ 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b7c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d11f      	bne.n	8006bc4 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b88:	f043 0201 	orr.w	r2, r3, #1
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	659a      	str	r2, [r3, #88]	@ 0x58
 8006b90:	e018      	b.n	8006bc4 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	68db      	ldr	r3, [r3, #12]
 8006b98:	f003 0302 	and.w	r3, r3, #2
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d111      	bne.n	8006bc4 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ba4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	659a      	str	r2, [r3, #88]	@ 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006bb0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d105      	bne.n	8006bc4 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006bbc:	f043 0201 	orr.w	r2, r3, #1
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006bc4:	68f8      	ldr	r0, [r7, #12]
 8006bc6:	f7ff fa9f 	bl	8006108 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006bca:	e00e      	b.n	8006bea <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006bd0:	f003 0310 	and.w	r3, r3, #16
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d003      	beq.n	8006be0 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8006bd8:	68f8      	ldr	r0, [r7, #12]
 8006bda:	f7ff fab3 	bl	8006144 <HAL_ADC_ErrorCallback>
}
 8006bde:	e004      	b.n	8006bea <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006be4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	4798      	blx	r3
}
 8006bea:	bf00      	nop
 8006bec:	3710      	adds	r7, #16
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}

08006bf2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8006bf2:	b580      	push	{r7, lr}
 8006bf4:	b084      	sub	sp, #16
 8006bf6:	af00      	add	r7, sp, #0
 8006bf8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bfe:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006c00:	68f8      	ldr	r0, [r7, #12]
 8006c02:	f7ff fa8b 	bl	800611c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006c06:	bf00      	nop
 8006c08:	3710      	adds	r7, #16
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bd80      	pop	{r7, pc}

08006c0e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8006c0e:	b580      	push	{r7, lr}
 8006c10:	b084      	sub	sp, #16
 8006c12:	af00      	add	r7, sp, #0
 8006c14:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c1a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c20:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c2c:	f043 0204 	orr.w	r2, r3, #4
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006c34:	68f8      	ldr	r0, [r7, #12]
 8006c36:	f7ff fa85 	bl	8006144 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006c3a:	bf00      	nop
 8006c3c:	3710      	adds	r7, #16
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}

08006c42 <LL_ADC_IsEnabled>:
{
 8006c42:	b480      	push	{r7}
 8006c44:	b083      	sub	sp, #12
 8006c46:	af00      	add	r7, sp, #0
 8006c48:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	689b      	ldr	r3, [r3, #8]
 8006c4e:	f003 0301 	and.w	r3, r3, #1
 8006c52:	2b01      	cmp	r3, #1
 8006c54:	d101      	bne.n	8006c5a <LL_ADC_IsEnabled+0x18>
 8006c56:	2301      	movs	r3, #1
 8006c58:	e000      	b.n	8006c5c <LL_ADC_IsEnabled+0x1a>
 8006c5a:	2300      	movs	r3, #0
}
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	370c      	adds	r7, #12
 8006c60:	46bd      	mov	sp, r7
 8006c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c66:	4770      	bx	lr

08006c68 <LL_ADC_StartCalibration>:
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b083      	sub	sp, #12
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
 8006c70:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	689b      	ldr	r3, [r3, #8]
 8006c76:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8006c7a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006c7e:	683a      	ldr	r2, [r7, #0]
 8006c80:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8006c84:	4313      	orrs	r3, r2
 8006c86:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	609a      	str	r2, [r3, #8]
}
 8006c8e:	bf00      	nop
 8006c90:	370c      	adds	r7, #12
 8006c92:	46bd      	mov	sp, r7
 8006c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c98:	4770      	bx	lr

08006c9a <LL_ADC_IsCalibrationOnGoing>:
{
 8006c9a:	b480      	push	{r7}
 8006c9c:	b083      	sub	sp, #12
 8006c9e:	af00      	add	r7, sp, #0
 8006ca0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	689b      	ldr	r3, [r3, #8]
 8006ca6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006caa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006cae:	d101      	bne.n	8006cb4 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	e000      	b.n	8006cb6 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8006cb4:	2300      	movs	r3, #0
}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	370c      	adds	r7, #12
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc0:	4770      	bx	lr

08006cc2 <LL_ADC_REG_IsConversionOngoing>:
{
 8006cc2:	b480      	push	{r7}
 8006cc4:	b083      	sub	sp, #12
 8006cc6:	af00      	add	r7, sp, #0
 8006cc8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	689b      	ldr	r3, [r3, #8]
 8006cce:	f003 0304 	and.w	r3, r3, #4
 8006cd2:	2b04      	cmp	r3, #4
 8006cd4:	d101      	bne.n	8006cda <LL_ADC_REG_IsConversionOngoing+0x18>
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	e000      	b.n	8006cdc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006cda:	2300      	movs	r3, #0
}
 8006cdc:	4618      	mov	r0, r3
 8006cde:	370c      	adds	r7, #12
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce6:	4770      	bx	lr

08006ce8 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b084      	sub	sp, #16
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
 8006cf0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8006cfc:	2b01      	cmp	r3, #1
 8006cfe:	d101      	bne.n	8006d04 <HAL_ADCEx_Calibration_Start+0x1c>
 8006d00:	2302      	movs	r3, #2
 8006d02:	e04d      	b.n	8006da0 <HAL_ADCEx_Calibration_Start+0xb8>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2201      	movs	r2, #1
 8006d08:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f7ff fea5 	bl	8006a5c <ADC_Disable>
 8006d12:	4603      	mov	r3, r0
 8006d14:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8006d16:	7bfb      	ldrb	r3, [r7, #15]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d136      	bne.n	8006d8a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d20:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8006d24:	f023 0302 	bic.w	r3, r3, #2
 8006d28:	f043 0202 	orr.w	r2, r3, #2
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	659a      	str	r2, [r3, #88]	@ 0x58
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	6839      	ldr	r1, [r7, #0]
 8006d36:	4618      	mov	r0, r3
 8006d38:	f7ff ff96 	bl	8006c68 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8006d3c:	e014      	b.n	8006d68 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	3301      	adds	r3, #1
 8006d42:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	f5b3 2f91 	cmp.w	r3, #296960	@ 0x48800
 8006d4a:	d30d      	bcc.n	8006d68 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d50:	f023 0312 	bic.w	r3, r3, #18
 8006d54:	f043 0210 	orr.w	r2, r3, #16
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	659a      	str	r2, [r3, #88]	@ 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        return HAL_ERROR;
 8006d64:	2301      	movs	r3, #1
 8006d66:	e01b      	b.n	8006da0 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	f7ff ff94 	bl	8006c9a <LL_ADC_IsCalibrationOnGoing>
 8006d72:	4603      	mov	r3, r0
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d1e2      	bne.n	8006d3e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d7c:	f023 0303 	bic.w	r3, r3, #3
 8006d80:	f043 0201 	orr.w	r2, r3, #1
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	659a      	str	r2, [r3, #88]	@ 0x58
 8006d88:	e005      	b.n	8006d96 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d8e:	f043 0210 	orr.w	r2, r3, #16
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8006d9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006da0:	4618      	mov	r0, r3
 8006da2:	3710      	adds	r7, #16
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bd80      	pop	{r7, pc}

08006da8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006da8:	b480      	push	{r7}
 8006daa:	b083      	sub	sp, #12
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8006db0:	bf00      	nop
 8006db2:	370c      	adds	r7, #12
 8006db4:	46bd      	mov	sp, r7
 8006db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dba:	4770      	bx	lr

08006dbc <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b083      	sub	sp, #12
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8006dc4:	bf00      	nop
 8006dc6:	370c      	adds	r7, #12
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dce:	4770      	bx	lr

08006dd0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b083      	sub	sp, #12
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8006dd8:	bf00      	nop
 8006dda:	370c      	adds	r7, #12
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de2:	4770      	bx	lr

08006de4 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b083      	sub	sp, #12
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8006dec:	bf00      	nop
 8006dee:	370c      	adds	r7, #12
 8006df0:	46bd      	mov	sp, r7
 8006df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df6:	4770      	bx	lr

08006df8 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8006df8:	b480      	push	{r7}
 8006dfa:	b083      	sub	sp, #12
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8006e00:	bf00      	nop
 8006e02:	370c      	adds	r7, #12
 8006e04:	46bd      	mov	sp, r7
 8006e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0a:	4770      	bx	lr

08006e0c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8006e0c:	b590      	push	{r4, r7, lr}
 8006e0e:	b0a1      	sub	sp, #132	@ 0x84
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
 8006e14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006e16:	2300      	movs	r3, #0
 8006e18:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8006e22:	2b01      	cmp	r3, #1
 8006e24:	d101      	bne.n	8006e2a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8006e26:	2302      	movs	r3, #2
 8006e28:	e089      	b.n	8006f3e <HAL_ADCEx_MultiModeConfigChannel+0x132>
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2201      	movs	r2, #1
 8006e2e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8006e32:	2300      	movs	r3, #0
 8006e34:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8006e36:	2300      	movs	r3, #0
 8006e38:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	4a42      	ldr	r2, [pc, #264]	@ (8006f48 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d102      	bne.n	8006e4a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8006e44:	4b41      	ldr	r3, [pc, #260]	@ (8006f4c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8006e46:	60fb      	str	r3, [r7, #12]
 8006e48:	e001      	b.n	8006e4e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	60fb      	str	r3, [r7, #12]

  if (tmp_hadc_slave.Instance == NULL)
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d10b      	bne.n	8006e6c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e58:	f043 0220 	orr.w	r2, r3, #32
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2200      	movs	r2, #0
 8006e64:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    return HAL_ERROR;
 8006e68:	2301      	movs	r3, #1
 8006e6a:	e068      	b.n	8006f3e <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	4618      	mov	r0, r3
 8006e70:	f7ff ff27 	bl	8006cc2 <LL_ADC_REG_IsConversionOngoing>
 8006e74:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	f7ff ff21 	bl	8006cc2 <LL_ADC_REG_IsConversionOngoing>
 8006e80:	4603      	mov	r3, r0
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d14a      	bne.n	8006f1c <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8006e86:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d147      	bne.n	8006f1c <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006e8c:	4b30      	ldr	r3, [pc, #192]	@ (8006f50 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8006e8e:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d027      	beq.n	8006ee8 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8006e98:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006e9a:	689b      	ldr	r3, [r3, #8]
 8006e9c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	6859      	ldr	r1, [r3, #4]
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006eaa:	035b      	lsls	r3, r3, #13
 8006eac:	430b      	orrs	r3, r1
 8006eae:	431a      	orrs	r2, r3
 8006eb0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006eb2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006eb4:	4824      	ldr	r0, [pc, #144]	@ (8006f48 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8006eb6:	f7ff fec4 	bl	8006c42 <LL_ADC_IsEnabled>
 8006eba:	4604      	mov	r4, r0
 8006ebc:	4823      	ldr	r0, [pc, #140]	@ (8006f4c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8006ebe:	f7ff fec0 	bl	8006c42 <LL_ADC_IsEnabled>
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	4323      	orrs	r3, r4
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d132      	bne.n	8006f30 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8006eca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006ecc:	689b      	ldr	r3, [r3, #8]
 8006ece:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8006ed2:	f023 030f 	bic.w	r3, r3, #15
 8006ed6:	683a      	ldr	r2, [r7, #0]
 8006ed8:	6811      	ldr	r1, [r2, #0]
 8006eda:	683a      	ldr	r2, [r7, #0]
 8006edc:	6892      	ldr	r2, [r2, #8]
 8006ede:	430a      	orrs	r2, r1
 8006ee0:	431a      	orrs	r2, r3
 8006ee2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006ee4:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8006ee6:	e023      	b.n	8006f30 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8006ee8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006eea:	689b      	ldr	r3, [r3, #8]
 8006eec:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006ef0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006ef2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006ef4:	4814      	ldr	r0, [pc, #80]	@ (8006f48 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8006ef6:	f7ff fea4 	bl	8006c42 <LL_ADC_IsEnabled>
 8006efa:	4604      	mov	r4, r0
 8006efc:	4813      	ldr	r0, [pc, #76]	@ (8006f4c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8006efe:	f7ff fea0 	bl	8006c42 <LL_ADC_IsEnabled>
 8006f02:	4603      	mov	r3, r0
 8006f04:	4323      	orrs	r3, r4
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d112      	bne.n	8006f30 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8006f0a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006f0c:	689b      	ldr	r3, [r3, #8]
 8006f0e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8006f12:	f023 030f 	bic.w	r3, r3, #15
 8006f16:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8006f18:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8006f1a:	e009      	b.n	8006f30 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f20:	f043 0220 	orr.w	r2, r3, #32
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8006f28:	2301      	movs	r3, #1
 8006f2a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8006f2e:	e000      	b.n	8006f32 <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8006f30:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2200      	movs	r2, #0
 8006f36:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8006f3a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8006f3e:	4618      	mov	r0, r3
 8006f40:	3784      	adds	r7, #132	@ 0x84
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bd90      	pop	{r4, r7, pc}
 8006f46:	bf00      	nop
 8006f48:	50040000 	.word	0x50040000
 8006f4c:	50040100 	.word	0x50040100
 8006f50:	50040300 	.word	0x50040300

08006f54 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b084      	sub	sp, #16
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d101      	bne.n	8006f66 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8006f62:	2301      	movs	r3, #1
 8006f64:	e0ed      	b.n	8007142 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006f6c:	b2db      	uxtb	r3, r3
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d102      	bne.n	8006f78 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f7fd ff08 	bl	8004d88 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	681a      	ldr	r2, [r3, #0]
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f042 0201 	orr.w	r2, r2, #1
 8006f86:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006f88:	f7fe fa44 	bl	8005414 <HAL_GetTick>
 8006f8c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8006f8e:	e012      	b.n	8006fb6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006f90:	f7fe fa40 	bl	8005414 <HAL_GetTick>
 8006f94:	4602      	mov	r2, r0
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	1ad3      	subs	r3, r2, r3
 8006f9a:	2b0a      	cmp	r3, #10
 8006f9c:	d90b      	bls.n	8006fb6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fa2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2205      	movs	r2, #5
 8006fae:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	e0c5      	b.n	8007142 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	685b      	ldr	r3, [r3, #4]
 8006fbc:	f003 0301 	and.w	r3, r3, #1
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d0e5      	beq.n	8006f90 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	681a      	ldr	r2, [r3, #0]
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f022 0202 	bic.w	r2, r2, #2
 8006fd2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006fd4:	f7fe fa1e 	bl	8005414 <HAL_GetTick>
 8006fd8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8006fda:	e012      	b.n	8007002 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006fdc:	f7fe fa1a 	bl	8005414 <HAL_GetTick>
 8006fe0:	4602      	mov	r2, r0
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	1ad3      	subs	r3, r2, r3
 8006fe6:	2b0a      	cmp	r3, #10
 8006fe8:	d90b      	bls.n	8007002 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fee:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2205      	movs	r2, #5
 8006ffa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8006ffe:	2301      	movs	r3, #1
 8007000:	e09f      	b.n	8007142 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	685b      	ldr	r3, [r3, #4]
 8007008:	f003 0302 	and.w	r3, r3, #2
 800700c:	2b00      	cmp	r3, #0
 800700e:	d1e5      	bne.n	8006fdc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	7e1b      	ldrb	r3, [r3, #24]
 8007014:	2b01      	cmp	r3, #1
 8007016:	d108      	bne.n	800702a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	681a      	ldr	r2, [r3, #0]
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007026:	601a      	str	r2, [r3, #0]
 8007028:	e007      	b.n	800703a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	681a      	ldr	r2, [r3, #0]
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007038:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	7e5b      	ldrb	r3, [r3, #25]
 800703e:	2b01      	cmp	r3, #1
 8007040:	d108      	bne.n	8007054 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	681a      	ldr	r2, [r3, #0]
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007050:	601a      	str	r2, [r3, #0]
 8007052:	e007      	b.n	8007064 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	681a      	ldr	r2, [r3, #0]
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007062:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	7e9b      	ldrb	r3, [r3, #26]
 8007068:	2b01      	cmp	r3, #1
 800706a:	d108      	bne.n	800707e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	681a      	ldr	r2, [r3, #0]
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f042 0220 	orr.w	r2, r2, #32
 800707a:	601a      	str	r2, [r3, #0]
 800707c:	e007      	b.n	800708e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	681a      	ldr	r2, [r3, #0]
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f022 0220 	bic.w	r2, r2, #32
 800708c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	7edb      	ldrb	r3, [r3, #27]
 8007092:	2b01      	cmp	r3, #1
 8007094:	d108      	bne.n	80070a8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	681a      	ldr	r2, [r3, #0]
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f022 0210 	bic.w	r2, r2, #16
 80070a4:	601a      	str	r2, [r3, #0]
 80070a6:	e007      	b.n	80070b8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	681a      	ldr	r2, [r3, #0]
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f042 0210 	orr.w	r2, r2, #16
 80070b6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	7f1b      	ldrb	r3, [r3, #28]
 80070bc:	2b01      	cmp	r3, #1
 80070be:	d108      	bne.n	80070d2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	681a      	ldr	r2, [r3, #0]
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f042 0208 	orr.w	r2, r2, #8
 80070ce:	601a      	str	r2, [r3, #0]
 80070d0:	e007      	b.n	80070e2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	681a      	ldr	r2, [r3, #0]
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f022 0208 	bic.w	r2, r2, #8
 80070e0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	7f5b      	ldrb	r3, [r3, #29]
 80070e6:	2b01      	cmp	r3, #1
 80070e8:	d108      	bne.n	80070fc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	681a      	ldr	r2, [r3, #0]
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f042 0204 	orr.w	r2, r2, #4
 80070f8:	601a      	str	r2, [r3, #0]
 80070fa:	e007      	b.n	800710c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	681a      	ldr	r2, [r3, #0]
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f022 0204 	bic.w	r2, r2, #4
 800710a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	689a      	ldr	r2, [r3, #8]
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	68db      	ldr	r3, [r3, #12]
 8007114:	431a      	orrs	r2, r3
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	691b      	ldr	r3, [r3, #16]
 800711a:	431a      	orrs	r2, r3
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	695b      	ldr	r3, [r3, #20]
 8007120:	ea42 0103 	orr.w	r1, r2, r3
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	685b      	ldr	r3, [r3, #4]
 8007128:	1e5a      	subs	r2, r3, #1
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	430a      	orrs	r2, r1
 8007130:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2200      	movs	r2, #0
 8007136:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2201      	movs	r2, #1
 800713c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8007140:	2300      	movs	r3, #0
}
 8007142:	4618      	mov	r0, r3
 8007144:	3710      	adds	r7, #16
 8007146:	46bd      	mov	sp, r7
 8007148:	bd80      	pop	{r7, pc}

0800714a <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800714a:	b480      	push	{r7}
 800714c:	b087      	sub	sp, #28
 800714e:	af00      	add	r7, sp, #0
 8007150:	6078      	str	r0, [r7, #4]
 8007152:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007160:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8007162:	7cfb      	ldrb	r3, [r7, #19]
 8007164:	2b01      	cmp	r3, #1
 8007166:	d003      	beq.n	8007170 <HAL_CAN_ConfigFilter+0x26>
 8007168:	7cfb      	ldrb	r3, [r7, #19]
 800716a:	2b02      	cmp	r3, #2
 800716c:	f040 80aa 	bne.w	80072c4 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8007170:	697b      	ldr	r3, [r7, #20]
 8007172:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8007176:	f043 0201 	orr.w	r2, r3, #1
 800717a:	697b      	ldr	r3, [r7, #20]
 800717c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	695b      	ldr	r3, [r3, #20]
 8007184:	f003 031f 	and.w	r3, r3, #31
 8007188:	2201      	movs	r2, #1
 800718a:	fa02 f303 	lsl.w	r3, r2, r3
 800718e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8007190:	697b      	ldr	r3, [r7, #20]
 8007192:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	43db      	mvns	r3, r3
 800719a:	401a      	ands	r2, r3
 800719c:	697b      	ldr	r3, [r7, #20]
 800719e:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	69db      	ldr	r3, [r3, #28]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d123      	bne.n	80071f2 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80071aa:	697b      	ldr	r3, [r7, #20]
 80071ac:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	43db      	mvns	r3, r3
 80071b4:	401a      	ands	r2, r3
 80071b6:	697b      	ldr	r3, [r7, #20]
 80071b8:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	68db      	ldr	r3, [r3, #12]
 80071c0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	685b      	ldr	r3, [r3, #4]
 80071c6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80071c8:	683a      	ldr	r2, [r7, #0]
 80071ca:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80071cc:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80071ce:	697b      	ldr	r3, [r7, #20]
 80071d0:	3248      	adds	r2, #72	@ 0x48
 80071d2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	689b      	ldr	r3, [r3, #8]
 80071da:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80071e6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80071e8:	6979      	ldr	r1, [r7, #20]
 80071ea:	3348      	adds	r3, #72	@ 0x48
 80071ec:	00db      	lsls	r3, r3, #3
 80071ee:	440b      	add	r3, r1
 80071f0:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	69db      	ldr	r3, [r3, #28]
 80071f6:	2b01      	cmp	r3, #1
 80071f8:	d122      	bne.n	8007240 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80071fa:	697b      	ldr	r3, [r7, #20]
 80071fc:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	431a      	orrs	r2, r3
 8007204:	697b      	ldr	r3, [r7, #20]
 8007206:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	685b      	ldr	r3, [r3, #4]
 8007214:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8007216:	683a      	ldr	r2, [r7, #0]
 8007218:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800721a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800721c:	697b      	ldr	r3, [r7, #20]
 800721e:	3248      	adds	r2, #72	@ 0x48
 8007220:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	689b      	ldr	r3, [r3, #8]
 8007228:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	68db      	ldr	r3, [r3, #12]
 800722e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8007234:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8007236:	6979      	ldr	r1, [r7, #20]
 8007238:	3348      	adds	r3, #72	@ 0x48
 800723a:	00db      	lsls	r3, r3, #3
 800723c:	440b      	add	r3, r1
 800723e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	699b      	ldr	r3, [r3, #24]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d109      	bne.n	800725c <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	43db      	mvns	r3, r3
 8007252:	401a      	ands	r2, r3
 8007254:	697b      	ldr	r3, [r7, #20]
 8007256:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800725a:	e007      	b.n	800726c <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800725c:	697b      	ldr	r3, [r7, #20]
 800725e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	431a      	orrs	r2, r3
 8007266:	697b      	ldr	r3, [r7, #20]
 8007268:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	691b      	ldr	r3, [r3, #16]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d109      	bne.n	8007288 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8007274:	697b      	ldr	r3, [r7, #20]
 8007276:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	43db      	mvns	r3, r3
 800727e:	401a      	ands	r2, r3
 8007280:	697b      	ldr	r3, [r7, #20]
 8007282:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8007286:	e007      	b.n	8007298 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8007288:	697b      	ldr	r3, [r7, #20]
 800728a:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	431a      	orrs	r2, r3
 8007292:	697b      	ldr	r3, [r7, #20]
 8007294:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	6a1b      	ldr	r3, [r3, #32]
 800729c:	2b01      	cmp	r3, #1
 800729e:	d107      	bne.n	80072b0 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	431a      	orrs	r2, r3
 80072aa:	697b      	ldr	r3, [r7, #20]
 80072ac:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80072b0:	697b      	ldr	r3, [r7, #20]
 80072b2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80072b6:	f023 0201 	bic.w	r2, r3, #1
 80072ba:	697b      	ldr	r3, [r7, #20]
 80072bc:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80072c0:	2300      	movs	r3, #0
 80072c2:	e006      	b.n	80072d2 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072c8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80072d0:	2301      	movs	r3, #1
  }
}
 80072d2:	4618      	mov	r0, r3
 80072d4:	371c      	adds	r7, #28
 80072d6:	46bd      	mov	sp, r7
 80072d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072dc:	4770      	bx	lr

080072de <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80072de:	b580      	push	{r7, lr}
 80072e0:	b084      	sub	sp, #16
 80072e2:	af00      	add	r7, sp, #0
 80072e4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80072ec:	b2db      	uxtb	r3, r3
 80072ee:	2b01      	cmp	r3, #1
 80072f0:	d12e      	bne.n	8007350 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2202      	movs	r2, #2
 80072f6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	681a      	ldr	r2, [r3, #0]
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f022 0201 	bic.w	r2, r2, #1
 8007308:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800730a:	f7fe f883 	bl	8005414 <HAL_GetTick>
 800730e:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8007310:	e012      	b.n	8007338 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8007312:	f7fe f87f 	bl	8005414 <HAL_GetTick>
 8007316:	4602      	mov	r2, r0
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	1ad3      	subs	r3, r2, r3
 800731c:	2b0a      	cmp	r3, #10
 800731e:	d90b      	bls.n	8007338 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007324:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2205      	movs	r2, #5
 8007330:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8007334:	2301      	movs	r3, #1
 8007336:	e012      	b.n	800735e <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	685b      	ldr	r3, [r3, #4]
 800733e:	f003 0301 	and.w	r3, r3, #1
 8007342:	2b00      	cmp	r3, #0
 8007344:	d1e5      	bne.n	8007312 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2200      	movs	r2, #0
 800734a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 800734c:	2300      	movs	r3, #0
 800734e:	e006      	b.n	800735e <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007354:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800735c:	2301      	movs	r3, #1
  }
}
 800735e:	4618      	mov	r0, r3
 8007360:	3710      	adds	r7, #16
 8007362:	46bd      	mov	sp, r7
 8007364:	bd80      	pop	{r7, pc}

08007366 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8007366:	b480      	push	{r7}
 8007368:	b089      	sub	sp, #36	@ 0x24
 800736a:	af00      	add	r7, sp, #0
 800736c:	60f8      	str	r0, [r7, #12]
 800736e:	60b9      	str	r1, [r7, #8]
 8007370:	607a      	str	r2, [r7, #4]
 8007372:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	f893 3020 	ldrb.w	r3, [r3, #32]
 800737a:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	689b      	ldr	r3, [r3, #8]
 8007382:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8007384:	7ffb      	ldrb	r3, [r7, #31]
 8007386:	2b01      	cmp	r3, #1
 8007388:	d003      	beq.n	8007392 <HAL_CAN_AddTxMessage+0x2c>
 800738a:	7ffb      	ldrb	r3, [r7, #31]
 800738c:	2b02      	cmp	r3, #2
 800738e:	f040 80ad 	bne.w	80074ec <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8007392:	69bb      	ldr	r3, [r7, #24]
 8007394:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007398:	2b00      	cmp	r3, #0
 800739a:	d10a      	bne.n	80073b2 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800739c:	69bb      	ldr	r3, [r7, #24]
 800739e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d105      	bne.n	80073b2 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80073a6:	69bb      	ldr	r3, [r7, #24]
 80073a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	f000 8095 	beq.w	80074dc <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80073b2:	69bb      	ldr	r3, [r7, #24]
 80073b4:	0e1b      	lsrs	r3, r3, #24
 80073b6:	f003 0303 	and.w	r3, r3, #3
 80073ba:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80073bc:	2201      	movs	r2, #1
 80073be:	697b      	ldr	r3, [r7, #20]
 80073c0:	409a      	lsls	r2, r3
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	689b      	ldr	r3, [r3, #8]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d10d      	bne.n	80073ea <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80073d8:	68f9      	ldr	r1, [r7, #12]
 80073da:	6809      	ldr	r1, [r1, #0]
 80073dc:	431a      	orrs	r2, r3
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	3318      	adds	r3, #24
 80073e2:	011b      	lsls	r3, r3, #4
 80073e4:	440b      	add	r3, r1
 80073e6:	601a      	str	r2, [r3, #0]
 80073e8:	e00f      	b.n	800740a <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	685b      	ldr	r3, [r3, #4]
 80073ee:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80073f4:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80073fa:	68f9      	ldr	r1, [r7, #12]
 80073fc:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80073fe:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007400:	697b      	ldr	r3, [r7, #20]
 8007402:	3318      	adds	r3, #24
 8007404:	011b      	lsls	r3, r3, #4
 8007406:	440b      	add	r3, r1
 8007408:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	6819      	ldr	r1, [r3, #0]
 800740e:	68bb      	ldr	r3, [r7, #8]
 8007410:	691a      	ldr	r2, [r3, #16]
 8007412:	697b      	ldr	r3, [r7, #20]
 8007414:	3318      	adds	r3, #24
 8007416:	011b      	lsls	r3, r3, #4
 8007418:	440b      	add	r3, r1
 800741a:	3304      	adds	r3, #4
 800741c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800741e:	68bb      	ldr	r3, [r7, #8]
 8007420:	7d1b      	ldrb	r3, [r3, #20]
 8007422:	2b01      	cmp	r3, #1
 8007424:	d111      	bne.n	800744a <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681a      	ldr	r2, [r3, #0]
 800742a:	697b      	ldr	r3, [r7, #20]
 800742c:	3318      	adds	r3, #24
 800742e:	011b      	lsls	r3, r3, #4
 8007430:	4413      	add	r3, r2
 8007432:	3304      	adds	r3, #4
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	68fa      	ldr	r2, [r7, #12]
 8007438:	6811      	ldr	r1, [r2, #0]
 800743a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800743e:	697b      	ldr	r3, [r7, #20]
 8007440:	3318      	adds	r3, #24
 8007442:	011b      	lsls	r3, r3, #4
 8007444:	440b      	add	r3, r1
 8007446:	3304      	adds	r3, #4
 8007448:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	3307      	adds	r3, #7
 800744e:	781b      	ldrb	r3, [r3, #0]
 8007450:	061a      	lsls	r2, r3, #24
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	3306      	adds	r3, #6
 8007456:	781b      	ldrb	r3, [r3, #0]
 8007458:	041b      	lsls	r3, r3, #16
 800745a:	431a      	orrs	r2, r3
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	3305      	adds	r3, #5
 8007460:	781b      	ldrb	r3, [r3, #0]
 8007462:	021b      	lsls	r3, r3, #8
 8007464:	4313      	orrs	r3, r2
 8007466:	687a      	ldr	r2, [r7, #4]
 8007468:	3204      	adds	r2, #4
 800746a:	7812      	ldrb	r2, [r2, #0]
 800746c:	4610      	mov	r0, r2
 800746e:	68fa      	ldr	r2, [r7, #12]
 8007470:	6811      	ldr	r1, [r2, #0]
 8007472:	ea43 0200 	orr.w	r2, r3, r0
 8007476:	697b      	ldr	r3, [r7, #20]
 8007478:	011b      	lsls	r3, r3, #4
 800747a:	440b      	add	r3, r1
 800747c:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8007480:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	3303      	adds	r3, #3
 8007486:	781b      	ldrb	r3, [r3, #0]
 8007488:	061a      	lsls	r2, r3, #24
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	3302      	adds	r3, #2
 800748e:	781b      	ldrb	r3, [r3, #0]
 8007490:	041b      	lsls	r3, r3, #16
 8007492:	431a      	orrs	r2, r3
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	3301      	adds	r3, #1
 8007498:	781b      	ldrb	r3, [r3, #0]
 800749a:	021b      	lsls	r3, r3, #8
 800749c:	4313      	orrs	r3, r2
 800749e:	687a      	ldr	r2, [r7, #4]
 80074a0:	7812      	ldrb	r2, [r2, #0]
 80074a2:	4610      	mov	r0, r2
 80074a4:	68fa      	ldr	r2, [r7, #12]
 80074a6:	6811      	ldr	r1, [r2, #0]
 80074a8:	ea43 0200 	orr.w	r2, r3, r0
 80074ac:	697b      	ldr	r3, [r7, #20]
 80074ae:	011b      	lsls	r3, r3, #4
 80074b0:	440b      	add	r3, r1
 80074b2:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80074b6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	681a      	ldr	r2, [r3, #0]
 80074bc:	697b      	ldr	r3, [r7, #20]
 80074be:	3318      	adds	r3, #24
 80074c0:	011b      	lsls	r3, r3, #4
 80074c2:	4413      	add	r3, r2
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	68fa      	ldr	r2, [r7, #12]
 80074c8:	6811      	ldr	r1, [r2, #0]
 80074ca:	f043 0201 	orr.w	r2, r3, #1
 80074ce:	697b      	ldr	r3, [r7, #20]
 80074d0:	3318      	adds	r3, #24
 80074d2:	011b      	lsls	r3, r3, #4
 80074d4:	440b      	add	r3, r1
 80074d6:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80074d8:	2300      	movs	r3, #0
 80074da:	e00e      	b.n	80074fa <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074e0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80074e8:	2301      	movs	r3, #1
 80074ea:	e006      	b.n	80074fa <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074f0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80074f8:	2301      	movs	r3, #1
  }
}
 80074fa:	4618      	mov	r0, r3
 80074fc:	3724      	adds	r7, #36	@ 0x24
 80074fe:	46bd      	mov	sp, r7
 8007500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007504:	4770      	bx	lr

08007506 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8007506:	b480      	push	{r7}
 8007508:	b087      	sub	sp, #28
 800750a:	af00      	add	r7, sp, #0
 800750c:	60f8      	str	r0, [r7, #12]
 800750e:	60b9      	str	r1, [r7, #8]
 8007510:	607a      	str	r2, [r7, #4]
 8007512:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	f893 3020 	ldrb.w	r3, [r3, #32]
 800751a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800751c:	7dfb      	ldrb	r3, [r7, #23]
 800751e:	2b01      	cmp	r3, #1
 8007520:	d003      	beq.n	800752a <HAL_CAN_GetRxMessage+0x24>
 8007522:	7dfb      	ldrb	r3, [r7, #23]
 8007524:	2b02      	cmp	r3, #2
 8007526:	f040 8103 	bne.w	8007730 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d10e      	bne.n	800754e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	68db      	ldr	r3, [r3, #12]
 8007536:	f003 0303 	and.w	r3, r3, #3
 800753a:	2b00      	cmp	r3, #0
 800753c:	d116      	bne.n	800756c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007542:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800754a:	2301      	movs	r3, #1
 800754c:	e0f7      	b.n	800773e <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	691b      	ldr	r3, [r3, #16]
 8007554:	f003 0303 	and.w	r3, r3, #3
 8007558:	2b00      	cmp	r3, #0
 800755a:	d107      	bne.n	800756c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007560:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8007568:	2301      	movs	r3, #1
 800756a:	e0e8      	b.n	800773e <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681a      	ldr	r2, [r3, #0]
 8007570:	68bb      	ldr	r3, [r7, #8]
 8007572:	331b      	adds	r3, #27
 8007574:	011b      	lsls	r3, r3, #4
 8007576:	4413      	add	r3, r2
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f003 0204 	and.w	r2, r3, #4
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	689b      	ldr	r3, [r3, #8]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d10c      	bne.n	80075a4 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681a      	ldr	r2, [r3, #0]
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	331b      	adds	r3, #27
 8007592:	011b      	lsls	r3, r3, #4
 8007594:	4413      	add	r3, r2
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	0d5b      	lsrs	r3, r3, #21
 800759a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	601a      	str	r2, [r3, #0]
 80075a2:	e00b      	b.n	80075bc <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681a      	ldr	r2, [r3, #0]
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	331b      	adds	r3, #27
 80075ac:	011b      	lsls	r3, r3, #4
 80075ae:	4413      	add	r3, r2
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	08db      	lsrs	r3, r3, #3
 80075b4:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681a      	ldr	r2, [r3, #0]
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	331b      	adds	r3, #27
 80075c4:	011b      	lsls	r3, r3, #4
 80075c6:	4413      	add	r3, r2
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f003 0202 	and.w	r2, r3, #2
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	681a      	ldr	r2, [r3, #0]
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	331b      	adds	r3, #27
 80075da:	011b      	lsls	r3, r3, #4
 80075dc:	4413      	add	r3, r2
 80075de:	3304      	adds	r3, #4
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f003 0308 	and.w	r3, r3, #8
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d003      	beq.n	80075f2 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2208      	movs	r2, #8
 80075ee:	611a      	str	r2, [r3, #16]
 80075f0:	e00b      	b.n	800760a <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	681a      	ldr	r2, [r3, #0]
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	331b      	adds	r3, #27
 80075fa:	011b      	lsls	r3, r3, #4
 80075fc:	4413      	add	r3, r2
 80075fe:	3304      	adds	r3, #4
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f003 020f 	and.w	r2, r3, #15
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681a      	ldr	r2, [r3, #0]
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	331b      	adds	r3, #27
 8007612:	011b      	lsls	r3, r3, #4
 8007614:	4413      	add	r3, r2
 8007616:	3304      	adds	r3, #4
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	0a1b      	lsrs	r3, r3, #8
 800761c:	b2da      	uxtb	r2, r3
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681a      	ldr	r2, [r3, #0]
 8007626:	68bb      	ldr	r3, [r7, #8]
 8007628:	331b      	adds	r3, #27
 800762a:	011b      	lsls	r3, r3, #4
 800762c:	4413      	add	r3, r2
 800762e:	3304      	adds	r3, #4
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	0c1b      	lsrs	r3, r3, #16
 8007634:	b29a      	uxth	r2, r3
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681a      	ldr	r2, [r3, #0]
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	011b      	lsls	r3, r3, #4
 8007642:	4413      	add	r3, r2
 8007644:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	b2da      	uxtb	r2, r3
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	681a      	ldr	r2, [r3, #0]
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	011b      	lsls	r3, r3, #4
 8007658:	4413      	add	r3, r2
 800765a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	0a1a      	lsrs	r2, r3, #8
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	3301      	adds	r3, #1
 8007666:	b2d2      	uxtb	r2, r2
 8007668:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	681a      	ldr	r2, [r3, #0]
 800766e:	68bb      	ldr	r3, [r7, #8]
 8007670:	011b      	lsls	r3, r3, #4
 8007672:	4413      	add	r3, r2
 8007674:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	0c1a      	lsrs	r2, r3, #16
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	3302      	adds	r3, #2
 8007680:	b2d2      	uxtb	r2, r2
 8007682:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	681a      	ldr	r2, [r3, #0]
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	011b      	lsls	r3, r3, #4
 800768c:	4413      	add	r3, r2
 800768e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	0e1a      	lsrs	r2, r3, #24
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	3303      	adds	r3, #3
 800769a:	b2d2      	uxtb	r2, r2
 800769c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681a      	ldr	r2, [r3, #0]
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	011b      	lsls	r3, r3, #4
 80076a6:	4413      	add	r3, r2
 80076a8:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80076ac:	681a      	ldr	r2, [r3, #0]
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	3304      	adds	r3, #4
 80076b2:	b2d2      	uxtb	r2, r2
 80076b4:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681a      	ldr	r2, [r3, #0]
 80076ba:	68bb      	ldr	r3, [r7, #8]
 80076bc:	011b      	lsls	r3, r3, #4
 80076be:	4413      	add	r3, r2
 80076c0:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	0a1a      	lsrs	r2, r3, #8
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	3305      	adds	r3, #5
 80076cc:	b2d2      	uxtb	r2, r2
 80076ce:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	681a      	ldr	r2, [r3, #0]
 80076d4:	68bb      	ldr	r3, [r7, #8]
 80076d6:	011b      	lsls	r3, r3, #4
 80076d8:	4413      	add	r3, r2
 80076da:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	0c1a      	lsrs	r2, r3, #16
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	3306      	adds	r3, #6
 80076e6:	b2d2      	uxtb	r2, r2
 80076e8:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	681a      	ldr	r2, [r3, #0]
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	011b      	lsls	r3, r3, #4
 80076f2:	4413      	add	r3, r2
 80076f4:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	0e1a      	lsrs	r2, r3, #24
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	3307      	adds	r3, #7
 8007700:	b2d2      	uxtb	r2, r2
 8007702:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d108      	bne.n	800771c <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	68da      	ldr	r2, [r3, #12]
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f042 0220 	orr.w	r2, r2, #32
 8007718:	60da      	str	r2, [r3, #12]
 800771a:	e007      	b.n	800772c <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	691a      	ldr	r2, [r3, #16]
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f042 0220 	orr.w	r2, r2, #32
 800772a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800772c:	2300      	movs	r3, #0
 800772e:	e006      	b.n	800773e <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007734:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800773c:	2301      	movs	r3, #1
  }
}
 800773e:	4618      	mov	r0, r3
 8007740:	371c      	adds	r7, #28
 8007742:	46bd      	mov	sp, r7
 8007744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007748:	4770      	bx	lr

0800774a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800774a:	b480      	push	{r7}
 800774c:	b085      	sub	sp, #20
 800774e:	af00      	add	r7, sp, #0
 8007750:	6078      	str	r0, [r7, #4]
 8007752:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	f893 3020 	ldrb.w	r3, [r3, #32]
 800775a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800775c:	7bfb      	ldrb	r3, [r7, #15]
 800775e:	2b01      	cmp	r3, #1
 8007760:	d002      	beq.n	8007768 <HAL_CAN_ActivateNotification+0x1e>
 8007762:	7bfb      	ldrb	r3, [r7, #15]
 8007764:	2b02      	cmp	r3, #2
 8007766:	d109      	bne.n	800777c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	6959      	ldr	r1, [r3, #20]
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	683a      	ldr	r2, [r7, #0]
 8007774:	430a      	orrs	r2, r1
 8007776:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8007778:	2300      	movs	r3, #0
 800777a:	e006      	b.n	800778a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007780:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8007788:	2301      	movs	r3, #1
  }
}
 800778a:	4618      	mov	r0, r3
 800778c:	3714      	adds	r7, #20
 800778e:	46bd      	mov	sp, r7
 8007790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007794:	4770      	bx	lr

08007796 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8007796:	b580      	push	{r7, lr}
 8007798:	b08a      	sub	sp, #40	@ 0x28
 800779a:	af00      	add	r7, sp, #0
 800779c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800779e:	2300      	movs	r3, #0
 80077a0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	695b      	ldr	r3, [r3, #20]
 80077a8:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	685b      	ldr	r3, [r3, #4]
 80077b0:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	689b      	ldr	r3, [r3, #8]
 80077b8:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	68db      	ldr	r3, [r3, #12]
 80077c0:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	691b      	ldr	r3, [r3, #16]
 80077c8:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	699b      	ldr	r3, [r3, #24]
 80077d0:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80077d2:	6a3b      	ldr	r3, [r7, #32]
 80077d4:	f003 0301 	and.w	r3, r3, #1
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d07c      	beq.n	80078d6 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80077dc:	69bb      	ldr	r3, [r7, #24]
 80077de:	f003 0301 	and.w	r3, r3, #1
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d023      	beq.n	800782e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	2201      	movs	r2, #1
 80077ec:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80077ee:	69bb      	ldr	r3, [r7, #24]
 80077f0:	f003 0302 	and.w	r3, r3, #2
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d003      	beq.n	8007800 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80077f8:	6878      	ldr	r0, [r7, #4]
 80077fa:	f000 f983 	bl	8007b04 <HAL_CAN_TxMailbox0CompleteCallback>
 80077fe:	e016      	b.n	800782e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8007800:	69bb      	ldr	r3, [r7, #24]
 8007802:	f003 0304 	and.w	r3, r3, #4
 8007806:	2b00      	cmp	r3, #0
 8007808:	d004      	beq.n	8007814 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800780a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800780c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8007810:	627b      	str	r3, [r7, #36]	@ 0x24
 8007812:	e00c      	b.n	800782e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8007814:	69bb      	ldr	r3, [r7, #24]
 8007816:	f003 0308 	and.w	r3, r3, #8
 800781a:	2b00      	cmp	r3, #0
 800781c:	d004      	beq.n	8007828 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800781e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007820:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007824:	627b      	str	r3, [r7, #36]	@ 0x24
 8007826:	e002      	b.n	800782e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	f000 f989 	bl	8007b40 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800782e:	69bb      	ldr	r3, [r7, #24]
 8007830:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007834:	2b00      	cmp	r3, #0
 8007836:	d024      	beq.n	8007882 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007840:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8007842:	69bb      	ldr	r3, [r7, #24]
 8007844:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007848:	2b00      	cmp	r3, #0
 800784a:	d003      	beq.n	8007854 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	f000 f963 	bl	8007b18 <HAL_CAN_TxMailbox1CompleteCallback>
 8007852:	e016      	b.n	8007882 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8007854:	69bb      	ldr	r3, [r7, #24]
 8007856:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800785a:	2b00      	cmp	r3, #0
 800785c:	d004      	beq.n	8007868 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800785e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007860:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8007864:	627b      	str	r3, [r7, #36]	@ 0x24
 8007866:	e00c      	b.n	8007882 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8007868:	69bb      	ldr	r3, [r7, #24]
 800786a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800786e:	2b00      	cmp	r3, #0
 8007870:	d004      	beq.n	800787c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8007872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007874:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007878:	627b      	str	r3, [r7, #36]	@ 0x24
 800787a:	e002      	b.n	8007882 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800787c:	6878      	ldr	r0, [r7, #4]
 800787e:	f000 f969 	bl	8007b54 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8007882:	69bb      	ldr	r3, [r7, #24]
 8007884:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007888:	2b00      	cmp	r3, #0
 800788a:	d024      	beq.n	80078d6 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8007894:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8007896:	69bb      	ldr	r3, [r7, #24]
 8007898:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800789c:	2b00      	cmp	r3, #0
 800789e:	d003      	beq.n	80078a8 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	f000 f943 	bl	8007b2c <HAL_CAN_TxMailbox2CompleteCallback>
 80078a6:	e016      	b.n	80078d6 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80078a8:	69bb      	ldr	r3, [r7, #24]
 80078aa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d004      	beq.n	80078bc <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80078b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80078b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80078ba:	e00c      	b.n	80078d6 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80078bc:	69bb      	ldr	r3, [r7, #24]
 80078be:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d004      	beq.n	80078d0 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80078c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80078cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80078ce:	e002      	b.n	80078d6 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	f000 f949 	bl	8007b68 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80078d6:	6a3b      	ldr	r3, [r7, #32]
 80078d8:	f003 0308 	and.w	r3, r3, #8
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d00c      	beq.n	80078fa <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80078e0:	697b      	ldr	r3, [r7, #20]
 80078e2:	f003 0310 	and.w	r3, r3, #16
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d007      	beq.n	80078fa <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80078ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078ec:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80078f0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	2210      	movs	r2, #16
 80078f8:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80078fa:	6a3b      	ldr	r3, [r7, #32]
 80078fc:	f003 0304 	and.w	r3, r3, #4
 8007900:	2b00      	cmp	r3, #0
 8007902:	d00b      	beq.n	800791c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8007904:	697b      	ldr	r3, [r7, #20]
 8007906:	f003 0308 	and.w	r3, r3, #8
 800790a:	2b00      	cmp	r3, #0
 800790c:	d006      	beq.n	800791c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	2208      	movs	r2, #8
 8007914:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	f000 f930 	bl	8007b7c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800791c:	6a3b      	ldr	r3, [r7, #32]
 800791e:	f003 0302 	and.w	r3, r3, #2
 8007922:	2b00      	cmp	r3, #0
 8007924:	d009      	beq.n	800793a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	68db      	ldr	r3, [r3, #12]
 800792c:	f003 0303 	and.w	r3, r3, #3
 8007930:	2b00      	cmp	r3, #0
 8007932:	d002      	beq.n	800793a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	f7f9 fc85 	bl	8001244 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800793a:	6a3b      	ldr	r3, [r7, #32]
 800793c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007940:	2b00      	cmp	r3, #0
 8007942:	d00c      	beq.n	800795e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8007944:	693b      	ldr	r3, [r7, #16]
 8007946:	f003 0310 	and.w	r3, r3, #16
 800794a:	2b00      	cmp	r3, #0
 800794c:	d007      	beq.n	800795e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800794e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007950:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007954:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	2210      	movs	r2, #16
 800795c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800795e:	6a3b      	ldr	r3, [r7, #32]
 8007960:	f003 0320 	and.w	r3, r3, #32
 8007964:	2b00      	cmp	r3, #0
 8007966:	d00b      	beq.n	8007980 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8007968:	693b      	ldr	r3, [r7, #16]
 800796a:	f003 0308 	and.w	r3, r3, #8
 800796e:	2b00      	cmp	r3, #0
 8007970:	d006      	beq.n	8007980 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	2208      	movs	r2, #8
 8007978:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f000 f912 	bl	8007ba4 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8007980:	6a3b      	ldr	r3, [r7, #32]
 8007982:	f003 0310 	and.w	r3, r3, #16
 8007986:	2b00      	cmp	r3, #0
 8007988:	d009      	beq.n	800799e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	691b      	ldr	r3, [r3, #16]
 8007990:	f003 0303 	and.w	r3, r3, #3
 8007994:	2b00      	cmp	r3, #0
 8007996:	d002      	beq.n	800799e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8007998:	6878      	ldr	r0, [r7, #4]
 800799a:	f000 f8f9 	bl	8007b90 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800799e:	6a3b      	ldr	r3, [r7, #32]
 80079a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d00b      	beq.n	80079c0 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80079a8:	69fb      	ldr	r3, [r7, #28]
 80079aa:	f003 0310 	and.w	r3, r3, #16
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d006      	beq.n	80079c0 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	2210      	movs	r2, #16
 80079b8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	f000 f8fc 	bl	8007bb8 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80079c0:	6a3b      	ldr	r3, [r7, #32]
 80079c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d00b      	beq.n	80079e2 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80079ca:	69fb      	ldr	r3, [r7, #28]
 80079cc:	f003 0308 	and.w	r3, r3, #8
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d006      	beq.n	80079e2 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	2208      	movs	r2, #8
 80079da:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80079dc:	6878      	ldr	r0, [r7, #4]
 80079de:	f000 f8f5 	bl	8007bcc <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80079e2:	6a3b      	ldr	r3, [r7, #32]
 80079e4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d07b      	beq.n	8007ae4 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80079ec:	69fb      	ldr	r3, [r7, #28]
 80079ee:	f003 0304 	and.w	r3, r3, #4
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d072      	beq.n	8007adc <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80079f6:	6a3b      	ldr	r3, [r7, #32]
 80079f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d008      	beq.n	8007a12 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d003      	beq.n	8007a12 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8007a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a0c:	f043 0301 	orr.w	r3, r3, #1
 8007a10:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8007a12:	6a3b      	ldr	r3, [r7, #32]
 8007a14:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d008      	beq.n	8007a2e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d003      	beq.n	8007a2e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8007a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a28:	f043 0302 	orr.w	r3, r3, #2
 8007a2c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8007a2e:	6a3b      	ldr	r3, [r7, #32]
 8007a30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d008      	beq.n	8007a4a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d003      	beq.n	8007a4a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8007a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a44:	f043 0304 	orr.w	r3, r3, #4
 8007a48:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8007a4a:	6a3b      	ldr	r3, [r7, #32]
 8007a4c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d043      	beq.n	8007adc <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d03e      	beq.n	8007adc <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007a64:	2b60      	cmp	r3, #96	@ 0x60
 8007a66:	d02b      	beq.n	8007ac0 <HAL_CAN_IRQHandler+0x32a>
 8007a68:	2b60      	cmp	r3, #96	@ 0x60
 8007a6a:	d82e      	bhi.n	8007aca <HAL_CAN_IRQHandler+0x334>
 8007a6c:	2b50      	cmp	r3, #80	@ 0x50
 8007a6e:	d022      	beq.n	8007ab6 <HAL_CAN_IRQHandler+0x320>
 8007a70:	2b50      	cmp	r3, #80	@ 0x50
 8007a72:	d82a      	bhi.n	8007aca <HAL_CAN_IRQHandler+0x334>
 8007a74:	2b40      	cmp	r3, #64	@ 0x40
 8007a76:	d019      	beq.n	8007aac <HAL_CAN_IRQHandler+0x316>
 8007a78:	2b40      	cmp	r3, #64	@ 0x40
 8007a7a:	d826      	bhi.n	8007aca <HAL_CAN_IRQHandler+0x334>
 8007a7c:	2b30      	cmp	r3, #48	@ 0x30
 8007a7e:	d010      	beq.n	8007aa2 <HAL_CAN_IRQHandler+0x30c>
 8007a80:	2b30      	cmp	r3, #48	@ 0x30
 8007a82:	d822      	bhi.n	8007aca <HAL_CAN_IRQHandler+0x334>
 8007a84:	2b10      	cmp	r3, #16
 8007a86:	d002      	beq.n	8007a8e <HAL_CAN_IRQHandler+0x2f8>
 8007a88:	2b20      	cmp	r3, #32
 8007a8a:	d005      	beq.n	8007a98 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8007a8c:	e01d      	b.n	8007aca <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8007a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a90:	f043 0308 	orr.w	r3, r3, #8
 8007a94:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8007a96:	e019      	b.n	8007acc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8007a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a9a:	f043 0310 	orr.w	r3, r3, #16
 8007a9e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8007aa0:	e014      	b.n	8007acc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8007aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aa4:	f043 0320 	orr.w	r3, r3, #32
 8007aa8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8007aaa:	e00f      	b.n	8007acc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8007aac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007ab2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8007ab4:	e00a      	b.n	8007acc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8007ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ab8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007abc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8007abe:	e005      	b.n	8007acc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8007ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ac2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007ac6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8007ac8:	e000      	b.n	8007acc <HAL_CAN_IRQHandler+0x336>
            break;
 8007aca:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	699a      	ldr	r2, [r3, #24]
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8007ada:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	2204      	movs	r2, #4
 8007ae2:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8007ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d008      	beq.n	8007afc <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007af0:	431a      	orrs	r2, r3
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f000 f872 	bl	8007be0 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8007afc:	bf00      	nop
 8007afe:	3728      	adds	r7, #40	@ 0x28
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bd80      	pop	{r7, pc}

08007b04 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8007b04:	b480      	push	{r7}
 8007b06:	b083      	sub	sp, #12
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8007b0c:	bf00      	nop
 8007b0e:	370c      	adds	r7, #12
 8007b10:	46bd      	mov	sp, r7
 8007b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b16:	4770      	bx	lr

08007b18 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8007b18:	b480      	push	{r7}
 8007b1a:	b083      	sub	sp, #12
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8007b20:	bf00      	nop
 8007b22:	370c      	adds	r7, #12
 8007b24:	46bd      	mov	sp, r7
 8007b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2a:	4770      	bx	lr

08007b2c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	b083      	sub	sp, #12
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8007b34:	bf00      	nop
 8007b36:	370c      	adds	r7, #12
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3e:	4770      	bx	lr

08007b40 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8007b40:	b480      	push	{r7}
 8007b42:	b083      	sub	sp, #12
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8007b48:	bf00      	nop
 8007b4a:	370c      	adds	r7, #12
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b52:	4770      	bx	lr

08007b54 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8007b54:	b480      	push	{r7}
 8007b56:	b083      	sub	sp, #12
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8007b5c:	bf00      	nop
 8007b5e:	370c      	adds	r7, #12
 8007b60:	46bd      	mov	sp, r7
 8007b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b66:	4770      	bx	lr

08007b68 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8007b68:	b480      	push	{r7}
 8007b6a:	b083      	sub	sp, #12
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8007b70:	bf00      	nop
 8007b72:	370c      	adds	r7, #12
 8007b74:	46bd      	mov	sp, r7
 8007b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7a:	4770      	bx	lr

08007b7c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8007b7c:	b480      	push	{r7}
 8007b7e:	b083      	sub	sp, #12
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8007b84:	bf00      	nop
 8007b86:	370c      	adds	r7, #12
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8e:	4770      	bx	lr

08007b90 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8007b90:	b480      	push	{r7}
 8007b92:	b083      	sub	sp, #12
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8007b98:	bf00      	nop
 8007b9a:	370c      	adds	r7, #12
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba2:	4770      	bx	lr

08007ba4 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8007ba4:	b480      	push	{r7}
 8007ba6:	b083      	sub	sp, #12
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8007bac:	bf00      	nop
 8007bae:	370c      	adds	r7, #12
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb6:	4770      	bx	lr

08007bb8 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8007bb8:	b480      	push	{r7}
 8007bba:	b083      	sub	sp, #12
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8007bc0:	bf00      	nop
 8007bc2:	370c      	adds	r7, #12
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bca:	4770      	bx	lr

08007bcc <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8007bcc:	b480      	push	{r7}
 8007bce:	b083      	sub	sp, #12
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8007bd4:	bf00      	nop
 8007bd6:	370c      	adds	r7, #12
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bde:	4770      	bx	lr

08007be0 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8007be0:	b480      	push	{r7}
 8007be2:	b083      	sub	sp, #12
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8007be8:	bf00      	nop
 8007bea:	370c      	adds	r7, #12
 8007bec:	46bd      	mov	sp, r7
 8007bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf2:	4770      	bx	lr

08007bf4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007bf4:	b480      	push	{r7}
 8007bf6:	b085      	sub	sp, #20
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	f003 0307 	and.w	r3, r3, #7
 8007c02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007c04:	4b0c      	ldr	r3, [pc, #48]	@ (8007c38 <__NVIC_SetPriorityGrouping+0x44>)
 8007c06:	68db      	ldr	r3, [r3, #12]
 8007c08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007c0a:	68ba      	ldr	r2, [r7, #8]
 8007c0c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8007c10:	4013      	ands	r3, r2
 8007c12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007c18:	68bb      	ldr	r3, [r7, #8]
 8007c1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007c1c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8007c20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007c24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007c26:	4a04      	ldr	r2, [pc, #16]	@ (8007c38 <__NVIC_SetPriorityGrouping+0x44>)
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	60d3      	str	r3, [r2, #12]
}
 8007c2c:	bf00      	nop
 8007c2e:	3714      	adds	r7, #20
 8007c30:	46bd      	mov	sp, r7
 8007c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c36:	4770      	bx	lr
 8007c38:	e000ed00 	.word	0xe000ed00

08007c3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007c3c:	b480      	push	{r7}
 8007c3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007c40:	4b04      	ldr	r3, [pc, #16]	@ (8007c54 <__NVIC_GetPriorityGrouping+0x18>)
 8007c42:	68db      	ldr	r3, [r3, #12]
 8007c44:	0a1b      	lsrs	r3, r3, #8
 8007c46:	f003 0307 	and.w	r3, r3, #7
}
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c52:	4770      	bx	lr
 8007c54:	e000ed00 	.word	0xe000ed00

08007c58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007c58:	b480      	push	{r7}
 8007c5a:	b083      	sub	sp, #12
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	4603      	mov	r3, r0
 8007c60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	db0b      	blt.n	8007c82 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007c6a:	79fb      	ldrb	r3, [r7, #7]
 8007c6c:	f003 021f 	and.w	r2, r3, #31
 8007c70:	4907      	ldr	r1, [pc, #28]	@ (8007c90 <__NVIC_EnableIRQ+0x38>)
 8007c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c76:	095b      	lsrs	r3, r3, #5
 8007c78:	2001      	movs	r0, #1
 8007c7a:	fa00 f202 	lsl.w	r2, r0, r2
 8007c7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8007c82:	bf00      	nop
 8007c84:	370c      	adds	r7, #12
 8007c86:	46bd      	mov	sp, r7
 8007c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8c:	4770      	bx	lr
 8007c8e:	bf00      	nop
 8007c90:	e000e100 	.word	0xe000e100

08007c94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007c94:	b480      	push	{r7}
 8007c96:	b083      	sub	sp, #12
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	6039      	str	r1, [r7, #0]
 8007c9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007ca0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	db0a      	blt.n	8007cbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	b2da      	uxtb	r2, r3
 8007cac:	490c      	ldr	r1, [pc, #48]	@ (8007ce0 <__NVIC_SetPriority+0x4c>)
 8007cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007cb2:	0112      	lsls	r2, r2, #4
 8007cb4:	b2d2      	uxtb	r2, r2
 8007cb6:	440b      	add	r3, r1
 8007cb8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007cbc:	e00a      	b.n	8007cd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	b2da      	uxtb	r2, r3
 8007cc2:	4908      	ldr	r1, [pc, #32]	@ (8007ce4 <__NVIC_SetPriority+0x50>)
 8007cc4:	79fb      	ldrb	r3, [r7, #7]
 8007cc6:	f003 030f 	and.w	r3, r3, #15
 8007cca:	3b04      	subs	r3, #4
 8007ccc:	0112      	lsls	r2, r2, #4
 8007cce:	b2d2      	uxtb	r2, r2
 8007cd0:	440b      	add	r3, r1
 8007cd2:	761a      	strb	r2, [r3, #24]
}
 8007cd4:	bf00      	nop
 8007cd6:	370c      	adds	r7, #12
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cde:	4770      	bx	lr
 8007ce0:	e000e100 	.word	0xe000e100
 8007ce4:	e000ed00 	.word	0xe000ed00

08007ce8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007ce8:	b480      	push	{r7}
 8007cea:	b089      	sub	sp, #36	@ 0x24
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	60f8      	str	r0, [r7, #12]
 8007cf0:	60b9      	str	r1, [r7, #8]
 8007cf2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	f003 0307 	and.w	r3, r3, #7
 8007cfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007cfc:	69fb      	ldr	r3, [r7, #28]
 8007cfe:	f1c3 0307 	rsb	r3, r3, #7
 8007d02:	2b04      	cmp	r3, #4
 8007d04:	bf28      	it	cs
 8007d06:	2304      	movcs	r3, #4
 8007d08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007d0a:	69fb      	ldr	r3, [r7, #28]
 8007d0c:	3304      	adds	r3, #4
 8007d0e:	2b06      	cmp	r3, #6
 8007d10:	d902      	bls.n	8007d18 <NVIC_EncodePriority+0x30>
 8007d12:	69fb      	ldr	r3, [r7, #28]
 8007d14:	3b03      	subs	r3, #3
 8007d16:	e000      	b.n	8007d1a <NVIC_EncodePriority+0x32>
 8007d18:	2300      	movs	r3, #0
 8007d1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007d1c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007d20:	69bb      	ldr	r3, [r7, #24]
 8007d22:	fa02 f303 	lsl.w	r3, r2, r3
 8007d26:	43da      	mvns	r2, r3
 8007d28:	68bb      	ldr	r3, [r7, #8]
 8007d2a:	401a      	ands	r2, r3
 8007d2c:	697b      	ldr	r3, [r7, #20]
 8007d2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007d30:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8007d34:	697b      	ldr	r3, [r7, #20]
 8007d36:	fa01 f303 	lsl.w	r3, r1, r3
 8007d3a:	43d9      	mvns	r1, r3
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007d40:	4313      	orrs	r3, r2
         );
}
 8007d42:	4618      	mov	r0, r3
 8007d44:	3724      	adds	r7, #36	@ 0x24
 8007d46:	46bd      	mov	sp, r7
 8007d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4c:	4770      	bx	lr

08007d4e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007d4e:	b580      	push	{r7, lr}
 8007d50:	b082      	sub	sp, #8
 8007d52:	af00      	add	r7, sp, #0
 8007d54:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007d56:	6878      	ldr	r0, [r7, #4]
 8007d58:	f7ff ff4c 	bl	8007bf4 <__NVIC_SetPriorityGrouping>
}
 8007d5c:	bf00      	nop
 8007d5e:	3708      	adds	r7, #8
 8007d60:	46bd      	mov	sp, r7
 8007d62:	bd80      	pop	{r7, pc}

08007d64 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b086      	sub	sp, #24
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	60b9      	str	r1, [r7, #8]
 8007d6e:	607a      	str	r2, [r7, #4]
 8007d70:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8007d72:	2300      	movs	r3, #0
 8007d74:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007d76:	f7ff ff61 	bl	8007c3c <__NVIC_GetPriorityGrouping>
 8007d7a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007d7c:	687a      	ldr	r2, [r7, #4]
 8007d7e:	68b9      	ldr	r1, [r7, #8]
 8007d80:	6978      	ldr	r0, [r7, #20]
 8007d82:	f7ff ffb1 	bl	8007ce8 <NVIC_EncodePriority>
 8007d86:	4602      	mov	r2, r0
 8007d88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d8c:	4611      	mov	r1, r2
 8007d8e:	4618      	mov	r0, r3
 8007d90:	f7ff ff80 	bl	8007c94 <__NVIC_SetPriority>
}
 8007d94:	bf00      	nop
 8007d96:	3718      	adds	r7, #24
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	bd80      	pop	{r7, pc}

08007d9c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b082      	sub	sp, #8
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	4603      	mov	r3, r0
 8007da4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007daa:	4618      	mov	r0, r3
 8007dac:	f7ff ff54 	bl	8007c58 <__NVIC_EnableIRQ>
}
 8007db0:	bf00      	nop
 8007db2:	3708      	adds	r7, #8
 8007db4:	46bd      	mov	sp, r7
 8007db6:	bd80      	pop	{r7, pc}

08007db8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b084      	sub	sp, #16
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d101      	bne.n	8007dca <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8007dc6:	2301      	movs	r3, #1
 8007dc8:	e08d      	b.n	8007ee6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	461a      	mov	r2, r3
 8007dd0:	4b47      	ldr	r3, [pc, #284]	@ (8007ef0 <HAL_DMA_Init+0x138>)
 8007dd2:	429a      	cmp	r2, r3
 8007dd4:	d80f      	bhi.n	8007df6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	461a      	mov	r2, r3
 8007ddc:	4b45      	ldr	r3, [pc, #276]	@ (8007ef4 <HAL_DMA_Init+0x13c>)
 8007dde:	4413      	add	r3, r2
 8007de0:	4a45      	ldr	r2, [pc, #276]	@ (8007ef8 <HAL_DMA_Init+0x140>)
 8007de2:	fba2 2303 	umull	r2, r3, r2, r3
 8007de6:	091b      	lsrs	r3, r3, #4
 8007de8:	009a      	lsls	r2, r3, #2
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	4a42      	ldr	r2, [pc, #264]	@ (8007efc <HAL_DMA_Init+0x144>)
 8007df2:	641a      	str	r2, [r3, #64]	@ 0x40
 8007df4:	e00e      	b.n	8007e14 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	461a      	mov	r2, r3
 8007dfc:	4b40      	ldr	r3, [pc, #256]	@ (8007f00 <HAL_DMA_Init+0x148>)
 8007dfe:	4413      	add	r3, r2
 8007e00:	4a3d      	ldr	r2, [pc, #244]	@ (8007ef8 <HAL_DMA_Init+0x140>)
 8007e02:	fba2 2303 	umull	r2, r3, r2, r3
 8007e06:	091b      	lsrs	r3, r3, #4
 8007e08:	009a      	lsls	r2, r3, #2
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	4a3c      	ldr	r2, [pc, #240]	@ (8007f04 <HAL_DMA_Init+0x14c>)
 8007e12:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2202      	movs	r2, #2
 8007e18:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8007e2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e2e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8007e38:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	691b      	ldr	r3, [r3, #16]
 8007e3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007e44:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	699b      	ldr	r3, [r3, #24]
 8007e4a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007e50:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6a1b      	ldr	r3, [r3, #32]
 8007e56:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8007e58:	68fa      	ldr	r2, [r7, #12]
 8007e5a:	4313      	orrs	r3, r2
 8007e5c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	68fa      	ldr	r2, [r7, #12]
 8007e64:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8007e66:	6878      	ldr	r0, [r7, #4]
 8007e68:	f000 f9b6 	bl	80081d8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	689b      	ldr	r3, [r3, #8]
 8007e70:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007e74:	d102      	bne.n	8007e7c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2200      	movs	r2, #0
 8007e7a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	685a      	ldr	r2, [r3, #4]
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007e84:	b2d2      	uxtb	r2, r2
 8007e86:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007e8c:	687a      	ldr	r2, [r7, #4]
 8007e8e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007e90:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	685b      	ldr	r3, [r3, #4]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d010      	beq.n	8007ebc <HAL_DMA_Init+0x104>
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	685b      	ldr	r3, [r3, #4]
 8007e9e:	2b04      	cmp	r3, #4
 8007ea0:	d80c      	bhi.n	8007ebc <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	f000 f9d6 	bl	8008254 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007eac:	2200      	movs	r2, #0
 8007eae:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007eb4:	687a      	ldr	r2, [r7, #4]
 8007eb6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8007eb8:	605a      	str	r2, [r3, #4]
 8007eba:	e008      	b.n	8007ece <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2200      	movs	r2, #0
 8007ecc:	65da      	str	r2, [r3, #92]	@ 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2201      	movs	r2, #1
 8007ed8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2200      	movs	r2, #0
 8007ee0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8007ee4:	2300      	movs	r3, #0
}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	3710      	adds	r7, #16
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd80      	pop	{r7, pc}
 8007eee:	bf00      	nop
 8007ef0:	40020407 	.word	0x40020407
 8007ef4:	bffdfff8 	.word	0xbffdfff8
 8007ef8:	cccccccd 	.word	0xcccccccd
 8007efc:	40020000 	.word	0x40020000
 8007f00:	bffdfbf8 	.word	0xbffdfbf8
 8007f04:	40020400 	.word	0x40020400

08007f08 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b086      	sub	sp, #24
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	60f8      	str	r0, [r7, #12]
 8007f10:	60b9      	str	r1, [r7, #8]
 8007f12:	607a      	str	r2, [r7, #4]
 8007f14:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007f16:	2300      	movs	r3, #0
 8007f18:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007f20:	2b01      	cmp	r3, #1
 8007f22:	d101      	bne.n	8007f28 <HAL_DMA_Start_IT+0x20>
 8007f24:	2302      	movs	r3, #2
 8007f26:	e066      	b.n	8007ff6 <HAL_DMA_Start_IT+0xee>
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	2201      	movs	r2, #1
 8007f2c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007f36:	b2db      	uxtb	r3, r3
 8007f38:	2b01      	cmp	r3, #1
 8007f3a:	d155      	bne.n	8007fe8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	2202      	movs	r2, #2
 8007f40:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	2200      	movs	r2, #0
 8007f48:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	681a      	ldr	r2, [r3, #0]
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f022 0201 	bic.w	r2, r2, #1
 8007f58:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	687a      	ldr	r2, [r7, #4]
 8007f5e:	68b9      	ldr	r1, [r7, #8]
 8007f60:	68f8      	ldr	r0, [r7, #12]
 8007f62:	f000 f8fb 	bl	800815c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d008      	beq.n	8007f80 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	681a      	ldr	r2, [r3, #0]
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f042 020e 	orr.w	r2, r2, #14
 8007f7c:	601a      	str	r2, [r3, #0]
 8007f7e:	e00f      	b.n	8007fa0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	681a      	ldr	r2, [r3, #0]
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f022 0204 	bic.w	r2, r2, #4
 8007f8e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	681a      	ldr	r2, [r3, #0]
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f042 020a 	orr.w	r2, r2, #10
 8007f9e:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d007      	beq.n	8007fbe <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007fb2:	681a      	ldr	r2, [r3, #0]
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007fb8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007fbc:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d007      	beq.n	8007fd6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007fca:	681a      	ldr	r2, [r3, #0]
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007fd0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007fd4:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	681a      	ldr	r2, [r3, #0]
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f042 0201 	orr.w	r2, r2, #1
 8007fe4:	601a      	str	r2, [r3, #0]
 8007fe6:	e005      	b.n	8007ff4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	2200      	movs	r2, #0
 8007fec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8007ff0:	2302      	movs	r3, #2
 8007ff2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8007ff4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	3718      	adds	r7, #24
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	bd80      	pop	{r7, pc}

08007ffe <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007ffe:	b580      	push	{r7, lr}
 8008000:	b084      	sub	sp, #16
 8008002:	af00      	add	r7, sp, #0
 8008004:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800801a:	f003 031c 	and.w	r3, r3, #28
 800801e:	2204      	movs	r2, #4
 8008020:	409a      	lsls	r2, r3
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	4013      	ands	r3, r2
 8008026:	2b00      	cmp	r3, #0
 8008028:	d026      	beq.n	8008078 <HAL_DMA_IRQHandler+0x7a>
 800802a:	68bb      	ldr	r3, [r7, #8]
 800802c:	f003 0304 	and.w	r3, r3, #4
 8008030:	2b00      	cmp	r3, #0
 8008032:	d021      	beq.n	8008078 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f003 0320 	and.w	r3, r3, #32
 800803e:	2b00      	cmp	r3, #0
 8008040:	d107      	bne.n	8008052 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	681a      	ldr	r2, [r3, #0]
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f022 0204 	bic.w	r2, r2, #4
 8008050:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008056:	f003 021c 	and.w	r2, r3, #28
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800805e:	2104      	movs	r1, #4
 8008060:	fa01 f202 	lsl.w	r2, r1, r2
 8008064:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800806a:	2b00      	cmp	r3, #0
 800806c:	d071      	beq.n	8008152 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8008076:	e06c      	b.n	8008152 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800807c:	f003 031c 	and.w	r3, r3, #28
 8008080:	2202      	movs	r2, #2
 8008082:	409a      	lsls	r2, r3
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	4013      	ands	r3, r2
 8008088:	2b00      	cmp	r3, #0
 800808a:	d02e      	beq.n	80080ea <HAL_DMA_IRQHandler+0xec>
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	f003 0302 	and.w	r3, r3, #2
 8008092:	2b00      	cmp	r3, #0
 8008094:	d029      	beq.n	80080ea <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	f003 0320 	and.w	r3, r3, #32
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d10b      	bne.n	80080bc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	681a      	ldr	r2, [r3, #0]
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f022 020a 	bic.w	r2, r2, #10
 80080b2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2201      	movs	r2, #1
 80080b8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080c0:	f003 021c 	and.w	r2, r3, #28
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080c8:	2102      	movs	r1, #2
 80080ca:	fa01 f202 	lsl.w	r2, r1, r2
 80080ce:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2200      	movs	r2, #0
 80080d4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d038      	beq.n	8008152 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80080e8:	e033      	b.n	8008152 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080ee:	f003 031c 	and.w	r3, r3, #28
 80080f2:	2208      	movs	r2, #8
 80080f4:	409a      	lsls	r2, r3
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	4013      	ands	r3, r2
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d02a      	beq.n	8008154 <HAL_DMA_IRQHandler+0x156>
 80080fe:	68bb      	ldr	r3, [r7, #8]
 8008100:	f003 0308 	and.w	r3, r3, #8
 8008104:	2b00      	cmp	r3, #0
 8008106:	d025      	beq.n	8008154 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	681a      	ldr	r2, [r3, #0]
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f022 020e 	bic.w	r2, r2, #14
 8008116:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800811c:	f003 021c 	and.w	r2, r3, #28
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008124:	2101      	movs	r1, #1
 8008126:	fa01 f202 	lsl.w	r2, r1, r2
 800812a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2201      	movs	r2, #1
 8008130:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2201      	movs	r2, #1
 8008136:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2200      	movs	r2, #0
 800813e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008146:	2b00      	cmp	r3, #0
 8008148:	d004      	beq.n	8008154 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8008152:	bf00      	nop
 8008154:	bf00      	nop
}
 8008156:	3710      	adds	r7, #16
 8008158:	46bd      	mov	sp, r7
 800815a:	bd80      	pop	{r7, pc}

0800815c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800815c:	b480      	push	{r7}
 800815e:	b085      	sub	sp, #20
 8008160:	af00      	add	r7, sp, #0
 8008162:	60f8      	str	r0, [r7, #12]
 8008164:	60b9      	str	r1, [r7, #8]
 8008166:	607a      	str	r2, [r7, #4]
 8008168:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800816e:	68fa      	ldr	r2, [r7, #12]
 8008170:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8008172:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008178:	2b00      	cmp	r3, #0
 800817a:	d004      	beq.n	8008186 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008180:	68fa      	ldr	r2, [r7, #12]
 8008182:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8008184:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800818a:	f003 021c 	and.w	r2, r3, #28
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008192:	2101      	movs	r1, #1
 8008194:	fa01 f202 	lsl.w	r2, r1, r2
 8008198:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	683a      	ldr	r2, [r7, #0]
 80081a0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	689b      	ldr	r3, [r3, #8]
 80081a6:	2b10      	cmp	r3, #16
 80081a8:	d108      	bne.n	80081bc <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	687a      	ldr	r2, [r7, #4]
 80081b0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	68ba      	ldr	r2, [r7, #8]
 80081b8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80081ba:	e007      	b.n	80081cc <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	68ba      	ldr	r2, [r7, #8]
 80081c2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	687a      	ldr	r2, [r7, #4]
 80081ca:	60da      	str	r2, [r3, #12]
}
 80081cc:	bf00      	nop
 80081ce:	3714      	adds	r7, #20
 80081d0:	46bd      	mov	sp, r7
 80081d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d6:	4770      	bx	lr

080081d8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80081d8:	b480      	push	{r7}
 80081da:	b085      	sub	sp, #20
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	461a      	mov	r2, r3
 80081e6:	4b17      	ldr	r3, [pc, #92]	@ (8008244 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80081e8:	429a      	cmp	r2, r3
 80081ea:	d80a      	bhi.n	8008202 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80081f0:	089b      	lsrs	r3, r3, #2
 80081f2:	009b      	lsls	r3, r3, #2
 80081f4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80081f8:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 80081fc:	687a      	ldr	r2, [r7, #4]
 80081fe:	6493      	str	r3, [r2, #72]	@ 0x48
 8008200:	e007      	b.n	8008212 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008206:	089b      	lsrs	r3, r3, #2
 8008208:	009a      	lsls	r2, r3, #2
 800820a:	4b0f      	ldr	r3, [pc, #60]	@ (8008248 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800820c:	4413      	add	r3, r2
 800820e:	687a      	ldr	r2, [r7, #4]
 8008210:	6493      	str	r3, [r2, #72]	@ 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	b2db      	uxtb	r3, r3
 8008218:	3b08      	subs	r3, #8
 800821a:	4a0c      	ldr	r2, [pc, #48]	@ (800824c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800821c:	fba2 2303 	umull	r2, r3, r2, r3
 8008220:	091b      	lsrs	r3, r3, #4
 8008222:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	4a0a      	ldr	r2, [pc, #40]	@ (8008250 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8008228:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	f003 031f 	and.w	r3, r3, #31
 8008230:	2201      	movs	r2, #1
 8008232:	409a      	lsls	r2, r3
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8008238:	bf00      	nop
 800823a:	3714      	adds	r7, #20
 800823c:	46bd      	mov	sp, r7
 800823e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008242:	4770      	bx	lr
 8008244:	40020407 	.word	0x40020407
 8008248:	4002081c 	.word	0x4002081c
 800824c:	cccccccd 	.word	0xcccccccd
 8008250:	40020880 	.word	0x40020880

08008254 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008254:	b480      	push	{r7}
 8008256:	b085      	sub	sp, #20
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	685b      	ldr	r3, [r3, #4]
 8008260:	b2db      	uxtb	r3, r3
 8008262:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008264:	68fa      	ldr	r2, [r7, #12]
 8008266:	4b0b      	ldr	r3, [pc, #44]	@ (8008294 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8008268:	4413      	add	r3, r2
 800826a:	009b      	lsls	r3, r3, #2
 800826c:	461a      	mov	r2, r3
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	4a08      	ldr	r2, [pc, #32]	@ (8008298 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8008276:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	3b01      	subs	r3, #1
 800827c:	f003 0303 	and.w	r3, r3, #3
 8008280:	2201      	movs	r2, #1
 8008282:	409a      	lsls	r2, r3
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8008288:	bf00      	nop
 800828a:	3714      	adds	r7, #20
 800828c:	46bd      	mov	sp, r7
 800828e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008292:	4770      	bx	lr
 8008294:	1000823f 	.word	0x1000823f
 8008298:	40020940 	.word	0x40020940

0800829c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800829c:	b480      	push	{r7}
 800829e:	b087      	sub	sp, #28
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
 80082a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80082a6:	2300      	movs	r3, #0
 80082a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80082aa:	e166      	b.n	800857a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	681a      	ldr	r2, [r3, #0]
 80082b0:	2101      	movs	r1, #1
 80082b2:	697b      	ldr	r3, [r7, #20]
 80082b4:	fa01 f303 	lsl.w	r3, r1, r3
 80082b8:	4013      	ands	r3, r2
 80082ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	f000 8158 	beq.w	8008574 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	685b      	ldr	r3, [r3, #4]
 80082c8:	f003 0303 	and.w	r3, r3, #3
 80082cc:	2b01      	cmp	r3, #1
 80082ce:	d005      	beq.n	80082dc <HAL_GPIO_Init+0x40>
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	685b      	ldr	r3, [r3, #4]
 80082d4:	f003 0303 	and.w	r3, r3, #3
 80082d8:	2b02      	cmp	r3, #2
 80082da:	d130      	bne.n	800833e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	689b      	ldr	r3, [r3, #8]
 80082e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80082e2:	697b      	ldr	r3, [r7, #20]
 80082e4:	005b      	lsls	r3, r3, #1
 80082e6:	2203      	movs	r2, #3
 80082e8:	fa02 f303 	lsl.w	r3, r2, r3
 80082ec:	43db      	mvns	r3, r3
 80082ee:	693a      	ldr	r2, [r7, #16]
 80082f0:	4013      	ands	r3, r2
 80082f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	68da      	ldr	r2, [r3, #12]
 80082f8:	697b      	ldr	r3, [r7, #20]
 80082fa:	005b      	lsls	r3, r3, #1
 80082fc:	fa02 f303 	lsl.w	r3, r2, r3
 8008300:	693a      	ldr	r2, [r7, #16]
 8008302:	4313      	orrs	r3, r2
 8008304:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	693a      	ldr	r2, [r7, #16]
 800830a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	685b      	ldr	r3, [r3, #4]
 8008310:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008312:	2201      	movs	r2, #1
 8008314:	697b      	ldr	r3, [r7, #20]
 8008316:	fa02 f303 	lsl.w	r3, r2, r3
 800831a:	43db      	mvns	r3, r3
 800831c:	693a      	ldr	r2, [r7, #16]
 800831e:	4013      	ands	r3, r2
 8008320:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	685b      	ldr	r3, [r3, #4]
 8008326:	091b      	lsrs	r3, r3, #4
 8008328:	f003 0201 	and.w	r2, r3, #1
 800832c:	697b      	ldr	r3, [r7, #20]
 800832e:	fa02 f303 	lsl.w	r3, r2, r3
 8008332:	693a      	ldr	r2, [r7, #16]
 8008334:	4313      	orrs	r3, r2
 8008336:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	693a      	ldr	r2, [r7, #16]
 800833c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	685b      	ldr	r3, [r3, #4]
 8008342:	f003 0303 	and.w	r3, r3, #3
 8008346:	2b03      	cmp	r3, #3
 8008348:	d017      	beq.n	800837a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	68db      	ldr	r3, [r3, #12]
 800834e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008350:	697b      	ldr	r3, [r7, #20]
 8008352:	005b      	lsls	r3, r3, #1
 8008354:	2203      	movs	r2, #3
 8008356:	fa02 f303 	lsl.w	r3, r2, r3
 800835a:	43db      	mvns	r3, r3
 800835c:	693a      	ldr	r2, [r7, #16]
 800835e:	4013      	ands	r3, r2
 8008360:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008362:	683b      	ldr	r3, [r7, #0]
 8008364:	689a      	ldr	r2, [r3, #8]
 8008366:	697b      	ldr	r3, [r7, #20]
 8008368:	005b      	lsls	r3, r3, #1
 800836a:	fa02 f303 	lsl.w	r3, r2, r3
 800836e:	693a      	ldr	r2, [r7, #16]
 8008370:	4313      	orrs	r3, r2
 8008372:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	693a      	ldr	r2, [r7, #16]
 8008378:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	685b      	ldr	r3, [r3, #4]
 800837e:	f003 0303 	and.w	r3, r3, #3
 8008382:	2b02      	cmp	r3, #2
 8008384:	d123      	bne.n	80083ce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8008386:	697b      	ldr	r3, [r7, #20]
 8008388:	08da      	lsrs	r2, r3, #3
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	3208      	adds	r2, #8
 800838e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008392:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8008394:	697b      	ldr	r3, [r7, #20]
 8008396:	f003 0307 	and.w	r3, r3, #7
 800839a:	009b      	lsls	r3, r3, #2
 800839c:	220f      	movs	r2, #15
 800839e:	fa02 f303 	lsl.w	r3, r2, r3
 80083a2:	43db      	mvns	r3, r3
 80083a4:	693a      	ldr	r2, [r7, #16]
 80083a6:	4013      	ands	r3, r2
 80083a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	691a      	ldr	r2, [r3, #16]
 80083ae:	697b      	ldr	r3, [r7, #20]
 80083b0:	f003 0307 	and.w	r3, r3, #7
 80083b4:	009b      	lsls	r3, r3, #2
 80083b6:	fa02 f303 	lsl.w	r3, r2, r3
 80083ba:	693a      	ldr	r2, [r7, #16]
 80083bc:	4313      	orrs	r3, r2
 80083be:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80083c0:	697b      	ldr	r3, [r7, #20]
 80083c2:	08da      	lsrs	r2, r3, #3
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	3208      	adds	r2, #8
 80083c8:	6939      	ldr	r1, [r7, #16]
 80083ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80083d4:	697b      	ldr	r3, [r7, #20]
 80083d6:	005b      	lsls	r3, r3, #1
 80083d8:	2203      	movs	r2, #3
 80083da:	fa02 f303 	lsl.w	r3, r2, r3
 80083de:	43db      	mvns	r3, r3
 80083e0:	693a      	ldr	r2, [r7, #16]
 80083e2:	4013      	ands	r3, r2
 80083e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	685b      	ldr	r3, [r3, #4]
 80083ea:	f003 0203 	and.w	r2, r3, #3
 80083ee:	697b      	ldr	r3, [r7, #20]
 80083f0:	005b      	lsls	r3, r3, #1
 80083f2:	fa02 f303 	lsl.w	r3, r2, r3
 80083f6:	693a      	ldr	r2, [r7, #16]
 80083f8:	4313      	orrs	r3, r2
 80083fa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	693a      	ldr	r2, [r7, #16]
 8008400:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	685b      	ldr	r3, [r3, #4]
 8008406:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800840a:	2b00      	cmp	r3, #0
 800840c:	f000 80b2 	beq.w	8008574 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008410:	4b61      	ldr	r3, [pc, #388]	@ (8008598 <HAL_GPIO_Init+0x2fc>)
 8008412:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008414:	4a60      	ldr	r2, [pc, #384]	@ (8008598 <HAL_GPIO_Init+0x2fc>)
 8008416:	f043 0301 	orr.w	r3, r3, #1
 800841a:	6613      	str	r3, [r2, #96]	@ 0x60
 800841c:	4b5e      	ldr	r3, [pc, #376]	@ (8008598 <HAL_GPIO_Init+0x2fc>)
 800841e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008420:	f003 0301 	and.w	r3, r3, #1
 8008424:	60bb      	str	r3, [r7, #8]
 8008426:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8008428:	4a5c      	ldr	r2, [pc, #368]	@ (800859c <HAL_GPIO_Init+0x300>)
 800842a:	697b      	ldr	r3, [r7, #20]
 800842c:	089b      	lsrs	r3, r3, #2
 800842e:	3302      	adds	r3, #2
 8008430:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008434:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8008436:	697b      	ldr	r3, [r7, #20]
 8008438:	f003 0303 	and.w	r3, r3, #3
 800843c:	009b      	lsls	r3, r3, #2
 800843e:	220f      	movs	r2, #15
 8008440:	fa02 f303 	lsl.w	r3, r2, r3
 8008444:	43db      	mvns	r3, r3
 8008446:	693a      	ldr	r2, [r7, #16]
 8008448:	4013      	ands	r3, r2
 800844a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8008452:	d02b      	beq.n	80084ac <HAL_GPIO_Init+0x210>
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	4a52      	ldr	r2, [pc, #328]	@ (80085a0 <HAL_GPIO_Init+0x304>)
 8008458:	4293      	cmp	r3, r2
 800845a:	d025      	beq.n	80084a8 <HAL_GPIO_Init+0x20c>
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	4a51      	ldr	r2, [pc, #324]	@ (80085a4 <HAL_GPIO_Init+0x308>)
 8008460:	4293      	cmp	r3, r2
 8008462:	d01f      	beq.n	80084a4 <HAL_GPIO_Init+0x208>
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	4a50      	ldr	r2, [pc, #320]	@ (80085a8 <HAL_GPIO_Init+0x30c>)
 8008468:	4293      	cmp	r3, r2
 800846a:	d019      	beq.n	80084a0 <HAL_GPIO_Init+0x204>
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	4a4f      	ldr	r2, [pc, #316]	@ (80085ac <HAL_GPIO_Init+0x310>)
 8008470:	4293      	cmp	r3, r2
 8008472:	d013      	beq.n	800849c <HAL_GPIO_Init+0x200>
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	4a4e      	ldr	r2, [pc, #312]	@ (80085b0 <HAL_GPIO_Init+0x314>)
 8008478:	4293      	cmp	r3, r2
 800847a:	d00d      	beq.n	8008498 <HAL_GPIO_Init+0x1fc>
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	4a4d      	ldr	r2, [pc, #308]	@ (80085b4 <HAL_GPIO_Init+0x318>)
 8008480:	4293      	cmp	r3, r2
 8008482:	d007      	beq.n	8008494 <HAL_GPIO_Init+0x1f8>
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	4a4c      	ldr	r2, [pc, #304]	@ (80085b8 <HAL_GPIO_Init+0x31c>)
 8008488:	4293      	cmp	r3, r2
 800848a:	d101      	bne.n	8008490 <HAL_GPIO_Init+0x1f4>
 800848c:	2307      	movs	r3, #7
 800848e:	e00e      	b.n	80084ae <HAL_GPIO_Init+0x212>
 8008490:	2308      	movs	r3, #8
 8008492:	e00c      	b.n	80084ae <HAL_GPIO_Init+0x212>
 8008494:	2306      	movs	r3, #6
 8008496:	e00a      	b.n	80084ae <HAL_GPIO_Init+0x212>
 8008498:	2305      	movs	r3, #5
 800849a:	e008      	b.n	80084ae <HAL_GPIO_Init+0x212>
 800849c:	2304      	movs	r3, #4
 800849e:	e006      	b.n	80084ae <HAL_GPIO_Init+0x212>
 80084a0:	2303      	movs	r3, #3
 80084a2:	e004      	b.n	80084ae <HAL_GPIO_Init+0x212>
 80084a4:	2302      	movs	r3, #2
 80084a6:	e002      	b.n	80084ae <HAL_GPIO_Init+0x212>
 80084a8:	2301      	movs	r3, #1
 80084aa:	e000      	b.n	80084ae <HAL_GPIO_Init+0x212>
 80084ac:	2300      	movs	r3, #0
 80084ae:	697a      	ldr	r2, [r7, #20]
 80084b0:	f002 0203 	and.w	r2, r2, #3
 80084b4:	0092      	lsls	r2, r2, #2
 80084b6:	4093      	lsls	r3, r2
 80084b8:	693a      	ldr	r2, [r7, #16]
 80084ba:	4313      	orrs	r3, r2
 80084bc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80084be:	4937      	ldr	r1, [pc, #220]	@ (800859c <HAL_GPIO_Init+0x300>)
 80084c0:	697b      	ldr	r3, [r7, #20]
 80084c2:	089b      	lsrs	r3, r3, #2
 80084c4:	3302      	adds	r3, #2
 80084c6:	693a      	ldr	r2, [r7, #16]
 80084c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80084cc:	4b3b      	ldr	r3, [pc, #236]	@ (80085bc <HAL_GPIO_Init+0x320>)
 80084ce:	689b      	ldr	r3, [r3, #8]
 80084d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	43db      	mvns	r3, r3
 80084d6:	693a      	ldr	r2, [r7, #16]
 80084d8:	4013      	ands	r3, r2
 80084da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	685b      	ldr	r3, [r3, #4]
 80084e0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d003      	beq.n	80084f0 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80084e8:	693a      	ldr	r2, [r7, #16]
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	4313      	orrs	r3, r2
 80084ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80084f0:	4a32      	ldr	r2, [pc, #200]	@ (80085bc <HAL_GPIO_Init+0x320>)
 80084f2:	693b      	ldr	r3, [r7, #16]
 80084f4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80084f6:	4b31      	ldr	r3, [pc, #196]	@ (80085bc <HAL_GPIO_Init+0x320>)
 80084f8:	68db      	ldr	r3, [r3, #12]
 80084fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	43db      	mvns	r3, r3
 8008500:	693a      	ldr	r2, [r7, #16]
 8008502:	4013      	ands	r3, r2
 8008504:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	685b      	ldr	r3, [r3, #4]
 800850a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800850e:	2b00      	cmp	r3, #0
 8008510:	d003      	beq.n	800851a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8008512:	693a      	ldr	r2, [r7, #16]
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	4313      	orrs	r3, r2
 8008518:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800851a:	4a28      	ldr	r2, [pc, #160]	@ (80085bc <HAL_GPIO_Init+0x320>)
 800851c:	693b      	ldr	r3, [r7, #16]
 800851e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8008520:	4b26      	ldr	r3, [pc, #152]	@ (80085bc <HAL_GPIO_Init+0x320>)
 8008522:	685b      	ldr	r3, [r3, #4]
 8008524:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	43db      	mvns	r3, r3
 800852a:	693a      	ldr	r2, [r7, #16]
 800852c:	4013      	ands	r3, r2
 800852e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	685b      	ldr	r3, [r3, #4]
 8008534:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008538:	2b00      	cmp	r3, #0
 800853a:	d003      	beq.n	8008544 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800853c:	693a      	ldr	r2, [r7, #16]
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	4313      	orrs	r3, r2
 8008542:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8008544:	4a1d      	ldr	r2, [pc, #116]	@ (80085bc <HAL_GPIO_Init+0x320>)
 8008546:	693b      	ldr	r3, [r7, #16]
 8008548:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800854a:	4b1c      	ldr	r3, [pc, #112]	@ (80085bc <HAL_GPIO_Init+0x320>)
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	43db      	mvns	r3, r3
 8008554:	693a      	ldr	r2, [r7, #16]
 8008556:	4013      	ands	r3, r2
 8008558:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800855a:	683b      	ldr	r3, [r7, #0]
 800855c:	685b      	ldr	r3, [r3, #4]
 800855e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008562:	2b00      	cmp	r3, #0
 8008564:	d003      	beq.n	800856e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8008566:	693a      	ldr	r2, [r7, #16]
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	4313      	orrs	r3, r2
 800856c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800856e:	4a13      	ldr	r2, [pc, #76]	@ (80085bc <HAL_GPIO_Init+0x320>)
 8008570:	693b      	ldr	r3, [r7, #16]
 8008572:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8008574:	697b      	ldr	r3, [r7, #20]
 8008576:	3301      	adds	r3, #1
 8008578:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	681a      	ldr	r2, [r3, #0]
 800857e:	697b      	ldr	r3, [r7, #20]
 8008580:	fa22 f303 	lsr.w	r3, r2, r3
 8008584:	2b00      	cmp	r3, #0
 8008586:	f47f ae91 	bne.w	80082ac <HAL_GPIO_Init+0x10>
  }
}
 800858a:	bf00      	nop
 800858c:	bf00      	nop
 800858e:	371c      	adds	r7, #28
 8008590:	46bd      	mov	sp, r7
 8008592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008596:	4770      	bx	lr
 8008598:	40021000 	.word	0x40021000
 800859c:	40010000 	.word	0x40010000
 80085a0:	48000400 	.word	0x48000400
 80085a4:	48000800 	.word	0x48000800
 80085a8:	48000c00 	.word	0x48000c00
 80085ac:	48001000 	.word	0x48001000
 80085b0:	48001400 	.word	0x48001400
 80085b4:	48001800 	.word	0x48001800
 80085b8:	48001c00 	.word	0x48001c00
 80085bc:	40010400 	.word	0x40010400

080085c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80085c0:	b480      	push	{r7}
 80085c2:	b085      	sub	sp, #20
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
 80085c8:	460b      	mov	r3, r1
 80085ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	691a      	ldr	r2, [r3, #16]
 80085d0:	887b      	ldrh	r3, [r7, #2]
 80085d2:	4013      	ands	r3, r2
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d002      	beq.n	80085de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80085d8:	2301      	movs	r3, #1
 80085da:	73fb      	strb	r3, [r7, #15]
 80085dc:	e001      	b.n	80085e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80085de:	2300      	movs	r3, #0
 80085e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80085e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80085e4:	4618      	mov	r0, r3
 80085e6:	3714      	adds	r7, #20
 80085e8:	46bd      	mov	sp, r7
 80085ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ee:	4770      	bx	lr

080085f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80085f0:	b480      	push	{r7}
 80085f2:	b083      	sub	sp, #12
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
 80085f8:	460b      	mov	r3, r1
 80085fa:	807b      	strh	r3, [r7, #2]
 80085fc:	4613      	mov	r3, r2
 80085fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008600:	787b      	ldrb	r3, [r7, #1]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d003      	beq.n	800860e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8008606:	887a      	ldrh	r2, [r7, #2]
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800860c:	e002      	b.n	8008614 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800860e:	887a      	ldrh	r2, [r7, #2]
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8008614:	bf00      	nop
 8008616:	370c      	adds	r7, #12
 8008618:	46bd      	mov	sp, r7
 800861a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861e:	4770      	bx	lr

08008620 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8008620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008622:	b08f      	sub	sp, #60	@ 0x3c
 8008624:	af0a      	add	r7, sp, #40	@ 0x28
 8008626:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d101      	bne.n	8008632 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800862e:	2301      	movs	r3, #1
 8008630:	e116      	b.n	8008860 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 800863e:	b2db      	uxtb	r3, r3
 8008640:	2b00      	cmp	r3, #0
 8008642:	d106      	bne.n	8008652 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2200      	movs	r2, #0
 8008648:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800864c:	6878      	ldr	r0, [r7, #4]
 800864e:	f00a ffdf 	bl	8013610 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	2203      	movs	r2, #3
 8008656:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800865a:	68bb      	ldr	r3, [r7, #8]
 800865c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800865e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008662:	2b00      	cmp	r3, #0
 8008664:	d102      	bne.n	800866c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	2200      	movs	r2, #0
 800866a:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	4618      	mov	r0, r3
 8008672:	f004 fe24 	bl	800d2be <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	603b      	str	r3, [r7, #0]
 800867c:	687e      	ldr	r6, [r7, #4]
 800867e:	466d      	mov	r5, sp
 8008680:	f106 0410 	add.w	r4, r6, #16
 8008684:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008686:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008688:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800868a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800868c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008690:	e885 0003 	stmia.w	r5, {r0, r1}
 8008694:	1d33      	adds	r3, r6, #4
 8008696:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008698:	6838      	ldr	r0, [r7, #0]
 800869a:	f004 fd37 	bl	800d10c <USB_CoreInit>
 800869e:	4603      	mov	r3, r0
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d005      	beq.n	80086b0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2202      	movs	r2, #2
 80086a8:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 80086ac:	2301      	movs	r3, #1
 80086ae:	e0d7      	b.n	8008860 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	2100      	movs	r1, #0
 80086b6:	4618      	mov	r0, r3
 80086b8:	f004 fe12 	bl	800d2e0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80086bc:	2300      	movs	r3, #0
 80086be:	73fb      	strb	r3, [r7, #15]
 80086c0:	e04a      	b.n	8008758 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80086c2:	7bfa      	ldrb	r2, [r7, #15]
 80086c4:	6879      	ldr	r1, [r7, #4]
 80086c6:	4613      	mov	r3, r2
 80086c8:	00db      	lsls	r3, r3, #3
 80086ca:	4413      	add	r3, r2
 80086cc:	009b      	lsls	r3, r3, #2
 80086ce:	440b      	add	r3, r1
 80086d0:	333d      	adds	r3, #61	@ 0x3d
 80086d2:	2201      	movs	r2, #1
 80086d4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80086d6:	7bfa      	ldrb	r2, [r7, #15]
 80086d8:	6879      	ldr	r1, [r7, #4]
 80086da:	4613      	mov	r3, r2
 80086dc:	00db      	lsls	r3, r3, #3
 80086de:	4413      	add	r3, r2
 80086e0:	009b      	lsls	r3, r3, #2
 80086e2:	440b      	add	r3, r1
 80086e4:	333c      	adds	r3, #60	@ 0x3c
 80086e6:	7bfa      	ldrb	r2, [r7, #15]
 80086e8:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 80086ea:	7bfa      	ldrb	r2, [r7, #15]
 80086ec:	7bfb      	ldrb	r3, [r7, #15]
 80086ee:	b298      	uxth	r0, r3
 80086f0:	6879      	ldr	r1, [r7, #4]
 80086f2:	4613      	mov	r3, r2
 80086f4:	00db      	lsls	r3, r3, #3
 80086f6:	4413      	add	r3, r2
 80086f8:	009b      	lsls	r3, r3, #2
 80086fa:	440b      	add	r3, r1
 80086fc:	3356      	adds	r3, #86	@ 0x56
 80086fe:	4602      	mov	r2, r0
 8008700:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8008702:	7bfa      	ldrb	r2, [r7, #15]
 8008704:	6879      	ldr	r1, [r7, #4]
 8008706:	4613      	mov	r3, r2
 8008708:	00db      	lsls	r3, r3, #3
 800870a:	4413      	add	r3, r2
 800870c:	009b      	lsls	r3, r3, #2
 800870e:	440b      	add	r3, r1
 8008710:	3340      	adds	r3, #64	@ 0x40
 8008712:	2200      	movs	r2, #0
 8008714:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8008716:	7bfa      	ldrb	r2, [r7, #15]
 8008718:	6879      	ldr	r1, [r7, #4]
 800871a:	4613      	mov	r3, r2
 800871c:	00db      	lsls	r3, r3, #3
 800871e:	4413      	add	r3, r2
 8008720:	009b      	lsls	r3, r3, #2
 8008722:	440b      	add	r3, r1
 8008724:	3344      	adds	r3, #68	@ 0x44
 8008726:	2200      	movs	r2, #0
 8008728:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800872a:	7bfa      	ldrb	r2, [r7, #15]
 800872c:	6879      	ldr	r1, [r7, #4]
 800872e:	4613      	mov	r3, r2
 8008730:	00db      	lsls	r3, r3, #3
 8008732:	4413      	add	r3, r2
 8008734:	009b      	lsls	r3, r3, #2
 8008736:	440b      	add	r3, r1
 8008738:	3348      	adds	r3, #72	@ 0x48
 800873a:	2200      	movs	r2, #0
 800873c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800873e:	7bfa      	ldrb	r2, [r7, #15]
 8008740:	6879      	ldr	r1, [r7, #4]
 8008742:	4613      	mov	r3, r2
 8008744:	00db      	lsls	r3, r3, #3
 8008746:	4413      	add	r3, r2
 8008748:	009b      	lsls	r3, r3, #2
 800874a:	440b      	add	r3, r1
 800874c:	334c      	adds	r3, #76	@ 0x4c
 800874e:	2200      	movs	r2, #0
 8008750:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008752:	7bfb      	ldrb	r3, [r7, #15]
 8008754:	3301      	adds	r3, #1
 8008756:	73fb      	strb	r3, [r7, #15]
 8008758:	7bfa      	ldrb	r2, [r7, #15]
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	685b      	ldr	r3, [r3, #4]
 800875e:	429a      	cmp	r2, r3
 8008760:	d3af      	bcc.n	80086c2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008762:	2300      	movs	r3, #0
 8008764:	73fb      	strb	r3, [r7, #15]
 8008766:	e044      	b.n	80087f2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8008768:	7bfa      	ldrb	r2, [r7, #15]
 800876a:	6879      	ldr	r1, [r7, #4]
 800876c:	4613      	mov	r3, r2
 800876e:	00db      	lsls	r3, r3, #3
 8008770:	4413      	add	r3, r2
 8008772:	009b      	lsls	r3, r3, #2
 8008774:	440b      	add	r3, r1
 8008776:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 800877a:	2200      	movs	r2, #0
 800877c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800877e:	7bfa      	ldrb	r2, [r7, #15]
 8008780:	6879      	ldr	r1, [r7, #4]
 8008782:	4613      	mov	r3, r2
 8008784:	00db      	lsls	r3, r3, #3
 8008786:	4413      	add	r3, r2
 8008788:	009b      	lsls	r3, r3, #2
 800878a:	440b      	add	r3, r1
 800878c:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 8008790:	7bfa      	ldrb	r2, [r7, #15]
 8008792:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8008794:	7bfa      	ldrb	r2, [r7, #15]
 8008796:	6879      	ldr	r1, [r7, #4]
 8008798:	4613      	mov	r3, r2
 800879a:	00db      	lsls	r3, r3, #3
 800879c:	4413      	add	r3, r2
 800879e:	009b      	lsls	r3, r3, #2
 80087a0:	440b      	add	r3, r1
 80087a2:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 80087a6:	2200      	movs	r2, #0
 80087a8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80087aa:	7bfa      	ldrb	r2, [r7, #15]
 80087ac:	6879      	ldr	r1, [r7, #4]
 80087ae:	4613      	mov	r3, r2
 80087b0:	00db      	lsls	r3, r3, #3
 80087b2:	4413      	add	r3, r2
 80087b4:	009b      	lsls	r3, r3, #2
 80087b6:	440b      	add	r3, r1
 80087b8:	f503 7321 	add.w	r3, r3, #644	@ 0x284
 80087bc:	2200      	movs	r2, #0
 80087be:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80087c0:	7bfa      	ldrb	r2, [r7, #15]
 80087c2:	6879      	ldr	r1, [r7, #4]
 80087c4:	4613      	mov	r3, r2
 80087c6:	00db      	lsls	r3, r3, #3
 80087c8:	4413      	add	r3, r2
 80087ca:	009b      	lsls	r3, r3, #2
 80087cc:	440b      	add	r3, r1
 80087ce:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 80087d2:	2200      	movs	r2, #0
 80087d4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80087d6:	7bfa      	ldrb	r2, [r7, #15]
 80087d8:	6879      	ldr	r1, [r7, #4]
 80087da:	4613      	mov	r3, r2
 80087dc:	00db      	lsls	r3, r3, #3
 80087de:	4413      	add	r3, r2
 80087e0:	009b      	lsls	r3, r3, #2
 80087e2:	440b      	add	r3, r1
 80087e4:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 80087e8:	2200      	movs	r2, #0
 80087ea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80087ec:	7bfb      	ldrb	r3, [r7, #15]
 80087ee:	3301      	adds	r3, #1
 80087f0:	73fb      	strb	r3, [r7, #15]
 80087f2:	7bfa      	ldrb	r2, [r7, #15]
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	685b      	ldr	r3, [r3, #4]
 80087f8:	429a      	cmp	r2, r3
 80087fa:	d3b5      	bcc.n	8008768 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	603b      	str	r3, [r7, #0]
 8008802:	687e      	ldr	r6, [r7, #4]
 8008804:	466d      	mov	r5, sp
 8008806:	f106 0410 	add.w	r4, r6, #16
 800880a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800880c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800880e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008810:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008812:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008816:	e885 0003 	stmia.w	r5, {r0, r1}
 800881a:	1d33      	adds	r3, r6, #4
 800881c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800881e:	6838      	ldr	r0, [r7, #0]
 8008820:	f004 fdaa 	bl	800d378 <USB_DevInit>
 8008824:	4603      	mov	r3, r0
 8008826:	2b00      	cmp	r3, #0
 8008828:	d005      	beq.n	8008836 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	2202      	movs	r2, #2
 800882e:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8008832:	2301      	movs	r3, #1
 8008834:	e014      	b.n	8008860 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	2200      	movs	r2, #0
 800883a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	2201      	movs	r2, #1
 8008842:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800884a:	2b01      	cmp	r3, #1
 800884c:	d102      	bne.n	8008854 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800884e:	6878      	ldr	r0, [r7, #4]
 8008850:	f001 f86a 	bl	8009928 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	4618      	mov	r0, r3
 800885a:	f005 fd58 	bl	800e30e <USB_DevDisconnect>

  return HAL_OK;
 800885e:	2300      	movs	r3, #0
}
 8008860:	4618      	mov	r0, r3
 8008862:	3714      	adds	r7, #20
 8008864:	46bd      	mov	sp, r7
 8008866:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008868 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b084      	sub	sp, #16
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 800887c:	2b01      	cmp	r3, #1
 800887e:	d101      	bne.n	8008884 <HAL_PCD_Start+0x1c>
 8008880:	2302      	movs	r3, #2
 8008882:	e01c      	b.n	80088be <HAL_PCD_Start+0x56>
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2201      	movs	r2, #1
 8008888:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008890:	2b01      	cmp	r3, #1
 8008892:	d105      	bne.n	80088a0 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008898:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	4618      	mov	r0, r3
 80088a6:	f004 fcf9 	bl	800d29c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	4618      	mov	r0, r3
 80088b0:	f005 fd0c 	bl	800e2cc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2200      	movs	r2, #0
 80088b8:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 80088bc:	2300      	movs	r3, #0
}
 80088be:	4618      	mov	r0, r3
 80088c0:	3710      	adds	r7, #16
 80088c2:	46bd      	mov	sp, r7
 80088c4:	bd80      	pop	{r7, pc}

080088c6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80088c6:	b590      	push	{r4, r7, lr}
 80088c8:	b08d      	sub	sp, #52	@ 0x34
 80088ca:	af00      	add	r7, sp, #0
 80088cc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088d4:	6a3b      	ldr	r3, [r7, #32]
 80088d6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	4618      	mov	r0, r3
 80088de:	f005 fdca 	bl	800e476 <USB_GetMode>
 80088e2:	4603      	mov	r3, r0
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	f040 847e 	bne.w	80091e6 <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	4618      	mov	r0, r3
 80088f0:	f005 fd2e 	bl	800e350 <USB_ReadInterrupts>
 80088f4:	4603      	mov	r3, r0
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	f000 8474 	beq.w	80091e4 <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80088fc:	69fb      	ldr	r3, [r7, #28]
 80088fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008902:	689b      	ldr	r3, [r3, #8]
 8008904:	0a1b      	lsrs	r3, r3, #8
 8008906:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	f8c3 24fc 	str.w	r2, [r3, #1276]	@ 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	4618      	mov	r0, r3
 8008916:	f005 fd1b 	bl	800e350 <USB_ReadInterrupts>
 800891a:	4603      	mov	r3, r0
 800891c:	f003 0302 	and.w	r3, r3, #2
 8008920:	2b02      	cmp	r3, #2
 8008922:	d107      	bne.n	8008934 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	695a      	ldr	r2, [r3, #20]
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	f002 0202 	and.w	r2, r2, #2
 8008932:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	4618      	mov	r0, r3
 800893a:	f005 fd09 	bl	800e350 <USB_ReadInterrupts>
 800893e:	4603      	mov	r3, r0
 8008940:	f003 0310 	and.w	r3, r3, #16
 8008944:	2b10      	cmp	r3, #16
 8008946:	d161      	bne.n	8008a0c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	699a      	ldr	r2, [r3, #24]
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	f022 0210 	bic.w	r2, r2, #16
 8008956:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8008958:	6a3b      	ldr	r3, [r7, #32]
 800895a:	6a1b      	ldr	r3, [r3, #32]
 800895c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800895e:	69bb      	ldr	r3, [r7, #24]
 8008960:	f003 020f 	and.w	r2, r3, #15
 8008964:	4613      	mov	r3, r2
 8008966:	00db      	lsls	r3, r3, #3
 8008968:	4413      	add	r3, r2
 800896a:	009b      	lsls	r3, r3, #2
 800896c:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8008970:	687a      	ldr	r2, [r7, #4]
 8008972:	4413      	add	r3, r2
 8008974:	3304      	adds	r3, #4
 8008976:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8008978:	69bb      	ldr	r3, [r7, #24]
 800897a:	0c5b      	lsrs	r3, r3, #17
 800897c:	f003 030f 	and.w	r3, r3, #15
 8008980:	2b02      	cmp	r3, #2
 8008982:	d124      	bne.n	80089ce <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8008984:	69ba      	ldr	r2, [r7, #24]
 8008986:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800898a:	4013      	ands	r3, r2
 800898c:	2b00      	cmp	r3, #0
 800898e:	d035      	beq.n	80089fc <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008990:	697b      	ldr	r3, [r7, #20]
 8008992:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8008994:	69bb      	ldr	r3, [r7, #24]
 8008996:	091b      	lsrs	r3, r3, #4
 8008998:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800899a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800899e:	b29b      	uxth	r3, r3
 80089a0:	461a      	mov	r2, r3
 80089a2:	6a38      	ldr	r0, [r7, #32]
 80089a4:	f005 fb40 	bl	800e028 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80089a8:	697b      	ldr	r3, [r7, #20]
 80089aa:	68da      	ldr	r2, [r3, #12]
 80089ac:	69bb      	ldr	r3, [r7, #24]
 80089ae:	091b      	lsrs	r3, r3, #4
 80089b0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80089b4:	441a      	add	r2, r3
 80089b6:	697b      	ldr	r3, [r7, #20]
 80089b8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80089ba:	697b      	ldr	r3, [r7, #20]
 80089bc:	695a      	ldr	r2, [r3, #20]
 80089be:	69bb      	ldr	r3, [r7, #24]
 80089c0:	091b      	lsrs	r3, r3, #4
 80089c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80089c6:	441a      	add	r2, r3
 80089c8:	697b      	ldr	r3, [r7, #20]
 80089ca:	615a      	str	r2, [r3, #20]
 80089cc:	e016      	b.n	80089fc <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80089ce:	69bb      	ldr	r3, [r7, #24]
 80089d0:	0c5b      	lsrs	r3, r3, #17
 80089d2:	f003 030f 	and.w	r3, r3, #15
 80089d6:	2b06      	cmp	r3, #6
 80089d8:	d110      	bne.n	80089fc <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 80089e0:	2208      	movs	r2, #8
 80089e2:	4619      	mov	r1, r3
 80089e4:	6a38      	ldr	r0, [r7, #32]
 80089e6:	f005 fb1f 	bl	800e028 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80089ea:	697b      	ldr	r3, [r7, #20]
 80089ec:	695a      	ldr	r2, [r3, #20]
 80089ee:	69bb      	ldr	r3, [r7, #24]
 80089f0:	091b      	lsrs	r3, r3, #4
 80089f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80089f6:	441a      	add	r2, r3
 80089f8:	697b      	ldr	r3, [r7, #20]
 80089fa:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	699a      	ldr	r2, [r3, #24]
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	f042 0210 	orr.w	r2, r2, #16
 8008a0a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	4618      	mov	r0, r3
 8008a12:	f005 fc9d 	bl	800e350 <USB_ReadInterrupts>
 8008a16:	4603      	mov	r3, r0
 8008a18:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008a1c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8008a20:	f040 80a7 	bne.w	8008b72 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8008a24:	2300      	movs	r3, #0
 8008a26:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	f005 fca2 	bl	800e376 <USB_ReadDevAllOutEpInterrupt>
 8008a32:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8008a34:	e099      	b.n	8008b6a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8008a36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a38:	f003 0301 	and.w	r3, r3, #1
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	f000 808e 	beq.w	8008b5e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008a48:	b2d2      	uxtb	r2, r2
 8008a4a:	4611      	mov	r1, r2
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	f005 fcc6 	bl	800e3de <USB_ReadDevOutEPInterrupt>
 8008a52:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8008a54:	693b      	ldr	r3, [r7, #16]
 8008a56:	f003 0301 	and.w	r3, r3, #1
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d00c      	beq.n	8008a78 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8008a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a60:	015a      	lsls	r2, r3, #5
 8008a62:	69fb      	ldr	r3, [r7, #28]
 8008a64:	4413      	add	r3, r2
 8008a66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a6a:	461a      	mov	r2, r3
 8008a6c:	2301      	movs	r3, #1
 8008a6e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8008a70:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008a72:	6878      	ldr	r0, [r7, #4]
 8008a74:	f000 fe7e 	bl	8009774 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8008a78:	693b      	ldr	r3, [r7, #16]
 8008a7a:	f003 0308 	and.w	r3, r3, #8
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d00c      	beq.n	8008a9c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8008a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a84:	015a      	lsls	r2, r3, #5
 8008a86:	69fb      	ldr	r3, [r7, #28]
 8008a88:	4413      	add	r3, r2
 8008a8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a8e:	461a      	mov	r2, r3
 8008a90:	2308      	movs	r3, #8
 8008a92:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8008a94:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008a96:	6878      	ldr	r0, [r7, #4]
 8008a98:	f000 feba 	bl	8009810 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8008a9c:	693b      	ldr	r3, [r7, #16]
 8008a9e:	f003 0310 	and.w	r3, r3, #16
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d008      	beq.n	8008ab8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8008aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008aa8:	015a      	lsls	r2, r3, #5
 8008aaa:	69fb      	ldr	r3, [r7, #28]
 8008aac:	4413      	add	r3, r2
 8008aae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ab2:	461a      	mov	r2, r3
 8008ab4:	2310      	movs	r3, #16
 8008ab6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8008ab8:	693b      	ldr	r3, [r7, #16]
 8008aba:	f003 0302 	and.w	r3, r3, #2
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d030      	beq.n	8008b24 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8008ac2:	6a3b      	ldr	r3, [r7, #32]
 8008ac4:	695b      	ldr	r3, [r3, #20]
 8008ac6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008aca:	2b80      	cmp	r3, #128	@ 0x80
 8008acc:	d109      	bne.n	8008ae2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8008ace:	69fb      	ldr	r3, [r7, #28]
 8008ad0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008ad4:	685b      	ldr	r3, [r3, #4]
 8008ad6:	69fa      	ldr	r2, [r7, #28]
 8008ad8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008adc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008ae0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8008ae2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008ae4:	4613      	mov	r3, r2
 8008ae6:	00db      	lsls	r3, r3, #3
 8008ae8:	4413      	add	r3, r2
 8008aea:	009b      	lsls	r3, r3, #2
 8008aec:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8008af0:	687a      	ldr	r2, [r7, #4]
 8008af2:	4413      	add	r3, r2
 8008af4:	3304      	adds	r3, #4
 8008af6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8008af8:	697b      	ldr	r3, [r7, #20]
 8008afa:	78db      	ldrb	r3, [r3, #3]
 8008afc:	2b01      	cmp	r3, #1
 8008afe:	d108      	bne.n	8008b12 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8008b00:	697b      	ldr	r3, [r7, #20]
 8008b02:	2200      	movs	r2, #0
 8008b04:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8008b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b08:	b2db      	uxtb	r3, r3
 8008b0a:	4619      	mov	r1, r3
 8008b0c:	6878      	ldr	r0, [r7, #4]
 8008b0e:	f00a fedb 	bl	80138c8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8008b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b14:	015a      	lsls	r2, r3, #5
 8008b16:	69fb      	ldr	r3, [r7, #28]
 8008b18:	4413      	add	r3, r2
 8008b1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b1e:	461a      	mov	r2, r3
 8008b20:	2302      	movs	r3, #2
 8008b22:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008b24:	693b      	ldr	r3, [r7, #16]
 8008b26:	f003 0320 	and.w	r3, r3, #32
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d008      	beq.n	8008b40 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b30:	015a      	lsls	r2, r3, #5
 8008b32:	69fb      	ldr	r3, [r7, #28]
 8008b34:	4413      	add	r3, r2
 8008b36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b3a:	461a      	mov	r2, r3
 8008b3c:	2320      	movs	r3, #32
 8008b3e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8008b40:	693b      	ldr	r3, [r7, #16]
 8008b42:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d009      	beq.n	8008b5e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8008b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b4c:	015a      	lsls	r2, r3, #5
 8008b4e:	69fb      	ldr	r3, [r7, #28]
 8008b50:	4413      	add	r3, r2
 8008b52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b56:	461a      	mov	r2, r3
 8008b58:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8008b5c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8008b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b60:	3301      	adds	r3, #1
 8008b62:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8008b64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b66:	085b      	lsrs	r3, r3, #1
 8008b68:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8008b6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	f47f af62 	bne.w	8008a36 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	4618      	mov	r0, r3
 8008b78:	f005 fbea 	bl	800e350 <USB_ReadInterrupts>
 8008b7c:	4603      	mov	r3, r0
 8008b7e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008b82:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008b86:	f040 80a4 	bne.w	8008cd2 <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	4618      	mov	r0, r3
 8008b90:	f005 fc0b 	bl	800e3aa <USB_ReadDevAllInEpInterrupt>
 8008b94:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8008b96:	2300      	movs	r3, #0
 8008b98:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8008b9a:	e096      	b.n	8008cca <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8008b9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b9e:	f003 0301 	and.w	r3, r3, #1
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	f000 808b 	beq.w	8008cbe <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008bae:	b2d2      	uxtb	r2, r2
 8008bb0:	4611      	mov	r1, r2
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	f005 fc31 	bl	800e41a <USB_ReadDevInEPInterrupt>
 8008bb8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8008bba:	693b      	ldr	r3, [r7, #16]
 8008bbc:	f003 0301 	and.w	r3, r3, #1
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d020      	beq.n	8008c06 <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bc6:	f003 030f 	and.w	r3, r3, #15
 8008bca:	2201      	movs	r2, #1
 8008bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8008bd0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008bd2:	69fb      	ldr	r3, [r7, #28]
 8008bd4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008bd8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	43db      	mvns	r3, r3
 8008bde:	69f9      	ldr	r1, [r7, #28]
 8008be0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008be4:	4013      	ands	r3, r2
 8008be6:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8008be8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bea:	015a      	lsls	r2, r3, #5
 8008bec:	69fb      	ldr	r3, [r7, #28]
 8008bee:	4413      	add	r3, r2
 8008bf0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008bf4:	461a      	mov	r2, r3
 8008bf6:	2301      	movs	r3, #1
 8008bf8:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8008bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bfc:	b2db      	uxtb	r3, r3
 8008bfe:	4619      	mov	r1, r3
 8008c00:	6878      	ldr	r0, [r7, #4]
 8008c02:	f00a fdcc 	bl	801379e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8008c06:	693b      	ldr	r3, [r7, #16]
 8008c08:	f003 0308 	and.w	r3, r3, #8
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d008      	beq.n	8008c22 <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8008c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c12:	015a      	lsls	r2, r3, #5
 8008c14:	69fb      	ldr	r3, [r7, #28]
 8008c16:	4413      	add	r3, r2
 8008c18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c1c:	461a      	mov	r2, r3
 8008c1e:	2308      	movs	r3, #8
 8008c20:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8008c22:	693b      	ldr	r3, [r7, #16]
 8008c24:	f003 0310 	and.w	r3, r3, #16
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d008      	beq.n	8008c3e <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8008c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c2e:	015a      	lsls	r2, r3, #5
 8008c30:	69fb      	ldr	r3, [r7, #28]
 8008c32:	4413      	add	r3, r2
 8008c34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c38:	461a      	mov	r2, r3
 8008c3a:	2310      	movs	r3, #16
 8008c3c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8008c3e:	693b      	ldr	r3, [r7, #16]
 8008c40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d008      	beq.n	8008c5a <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8008c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c4a:	015a      	lsls	r2, r3, #5
 8008c4c:	69fb      	ldr	r3, [r7, #28]
 8008c4e:	4413      	add	r3, r2
 8008c50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c54:	461a      	mov	r2, r3
 8008c56:	2340      	movs	r3, #64	@ 0x40
 8008c58:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8008c5a:	693b      	ldr	r3, [r7, #16]
 8008c5c:	f003 0302 	and.w	r3, r3, #2
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d023      	beq.n	8008cac <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8008c64:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008c66:	6a38      	ldr	r0, [r7, #32]
 8008c68:	f004 fcc8 	bl	800d5fc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8008c6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008c6e:	4613      	mov	r3, r2
 8008c70:	00db      	lsls	r3, r3, #3
 8008c72:	4413      	add	r3, r2
 8008c74:	009b      	lsls	r3, r3, #2
 8008c76:	3338      	adds	r3, #56	@ 0x38
 8008c78:	687a      	ldr	r2, [r7, #4]
 8008c7a:	4413      	add	r3, r2
 8008c7c:	3304      	adds	r3, #4
 8008c7e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8008c80:	697b      	ldr	r3, [r7, #20]
 8008c82:	78db      	ldrb	r3, [r3, #3]
 8008c84:	2b01      	cmp	r3, #1
 8008c86:	d108      	bne.n	8008c9a <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 8008c88:	697b      	ldr	r3, [r7, #20]
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8008c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c90:	b2db      	uxtb	r3, r3
 8008c92:	4619      	mov	r1, r3
 8008c94:	6878      	ldr	r0, [r7, #4]
 8008c96:	f00a fe29 	bl	80138ec <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8008c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c9c:	015a      	lsls	r2, r3, #5
 8008c9e:	69fb      	ldr	r3, [r7, #28]
 8008ca0:	4413      	add	r3, r2
 8008ca2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ca6:	461a      	mov	r2, r3
 8008ca8:	2302      	movs	r3, #2
 8008caa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8008cac:	693b      	ldr	r3, [r7, #16]
 8008cae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d003      	beq.n	8008cbe <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8008cb6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008cb8:	6878      	ldr	r0, [r7, #4]
 8008cba:	f000 fcd2 	bl	8009662 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8008cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cc0:	3301      	adds	r3, #1
 8008cc2:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8008cc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cc6:	085b      	lsrs	r3, r3, #1
 8008cc8:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8008cca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	f47f af65 	bne.w	8008b9c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	f005 fb3a 	bl	800e350 <USB_ReadInterrupts>
 8008cdc:	4603      	mov	r3, r0
 8008cde:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008ce2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008ce6:	d122      	bne.n	8008d2e <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008ce8:	69fb      	ldr	r3, [r7, #28]
 8008cea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008cee:	685b      	ldr	r3, [r3, #4]
 8008cf0:	69fa      	ldr	r2, [r7, #28]
 8008cf2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008cf6:	f023 0301 	bic.w	r3, r3, #1
 8008cfa:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 8008d02:	2b01      	cmp	r3, #1
 8008d04:	d108      	bne.n	8008d18 <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	2200      	movs	r2, #0
 8008d0a:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8008d0e:	2100      	movs	r1, #0
 8008d10:	6878      	ldr	r0, [r7, #4]
 8008d12:	f00b f85d 	bl	8013dd0 <HAL_PCDEx_LPM_Callback>
 8008d16:	e002      	b.n	8008d1e <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8008d18:	6878      	ldr	r0, [r7, #4]
 8008d1a:	f00a fdad 	bl	8013878 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	695a      	ldr	r2, [r3, #20]
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8008d2c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	4618      	mov	r0, r3
 8008d34:	f005 fb0c 	bl	800e350 <USB_ReadInterrupts>
 8008d38:	4603      	mov	r3, r0
 8008d3a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008d3e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008d42:	d112      	bne.n	8008d6a <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8008d44:	69fb      	ldr	r3, [r7, #28]
 8008d46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008d4a:	689b      	ldr	r3, [r3, #8]
 8008d4c:	f003 0301 	and.w	r3, r3, #1
 8008d50:	2b01      	cmp	r3, #1
 8008d52:	d102      	bne.n	8008d5a <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008d54:	6878      	ldr	r0, [r7, #4]
 8008d56:	f00a fd69 	bl	801382c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	695a      	ldr	r2, [r3, #20]
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8008d68:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	4618      	mov	r0, r3
 8008d70:	f005 faee 	bl	800e350 <USB_ReadInterrupts>
 8008d74:	4603      	mov	r3, r0
 8008d76:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008d7a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008d7e:	d121      	bne.n	8008dc4 <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	695a      	ldr	r2, [r3, #20]
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8008d8e:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d111      	bne.n	8008dbe <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2201      	movs	r2, #1
 8008d9e:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008da8:	089b      	lsrs	r3, r3, #2
 8008daa:	f003 020f 	and.w	r2, r3, #15
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	f8c3 24f8 	str.w	r2, [r3, #1272]	@ 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8008db4:	2101      	movs	r1, #1
 8008db6:	6878      	ldr	r0, [r7, #4]
 8008db8:	f00b f80a 	bl	8013dd0 <HAL_PCDEx_LPM_Callback>
 8008dbc:	e002      	b.n	8008dc4 <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008dbe:	6878      	ldr	r0, [r7, #4]
 8008dc0:	f00a fd34 	bl	801382c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	4618      	mov	r0, r3
 8008dca:	f005 fac1 	bl	800e350 <USB_ReadInterrupts>
 8008dce:	4603      	mov	r3, r0
 8008dd0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008dd4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008dd8:	f040 80b5 	bne.w	8008f46 <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008ddc:	69fb      	ldr	r3, [r7, #28]
 8008dde:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008de2:	685b      	ldr	r3, [r3, #4]
 8008de4:	69fa      	ldr	r2, [r7, #28]
 8008de6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008dea:	f023 0301 	bic.w	r3, r3, #1
 8008dee:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	2110      	movs	r1, #16
 8008df6:	4618      	mov	r0, r3
 8008df8:	f004 fc00 	bl	800d5fc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008e00:	e046      	b.n	8008e90 <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8008e02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e04:	015a      	lsls	r2, r3, #5
 8008e06:	69fb      	ldr	r3, [r7, #28]
 8008e08:	4413      	add	r3, r2
 8008e0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e0e:	461a      	mov	r2, r3
 8008e10:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008e14:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008e16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e18:	015a      	lsls	r2, r3, #5
 8008e1a:	69fb      	ldr	r3, [r7, #28]
 8008e1c:	4413      	add	r3, r2
 8008e1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008e26:	0151      	lsls	r1, r2, #5
 8008e28:	69fa      	ldr	r2, [r7, #28]
 8008e2a:	440a      	add	r2, r1
 8008e2c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008e30:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008e34:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8008e36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e38:	015a      	lsls	r2, r3, #5
 8008e3a:	69fb      	ldr	r3, [r7, #28]
 8008e3c:	4413      	add	r3, r2
 8008e3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e42:	461a      	mov	r2, r3
 8008e44:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008e48:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008e4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e4c:	015a      	lsls	r2, r3, #5
 8008e4e:	69fb      	ldr	r3, [r7, #28]
 8008e50:	4413      	add	r3, r2
 8008e52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008e5a:	0151      	lsls	r1, r2, #5
 8008e5c:	69fa      	ldr	r2, [r7, #28]
 8008e5e:	440a      	add	r2, r1
 8008e60:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008e64:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008e68:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008e6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e6c:	015a      	lsls	r2, r3, #5
 8008e6e:	69fb      	ldr	r3, [r7, #28]
 8008e70:	4413      	add	r3, r2
 8008e72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008e7a:	0151      	lsls	r1, r2, #5
 8008e7c:	69fa      	ldr	r2, [r7, #28]
 8008e7e:	440a      	add	r2, r1
 8008e80:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008e84:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008e88:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008e8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e8c:	3301      	adds	r3, #1
 8008e8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	685b      	ldr	r3, [r3, #4]
 8008e94:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008e96:	429a      	cmp	r2, r3
 8008e98:	d3b3      	bcc.n	8008e02 <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8008e9a:	69fb      	ldr	r3, [r7, #28]
 8008e9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008ea0:	69db      	ldr	r3, [r3, #28]
 8008ea2:	69fa      	ldr	r2, [r7, #28]
 8008ea4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008ea8:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8008eac:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d016      	beq.n	8008ee4 <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8008eb6:	69fb      	ldr	r3, [r7, #28]
 8008eb8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008ebc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008ec0:	69fa      	ldr	r2, [r7, #28]
 8008ec2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008ec6:	f043 030b 	orr.w	r3, r3, #11
 8008eca:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8008ece:	69fb      	ldr	r3, [r7, #28]
 8008ed0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008ed4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ed6:	69fa      	ldr	r2, [r7, #28]
 8008ed8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008edc:	f043 030b 	orr.w	r3, r3, #11
 8008ee0:	6453      	str	r3, [r2, #68]	@ 0x44
 8008ee2:	e015      	b.n	8008f10 <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8008ee4:	69fb      	ldr	r3, [r7, #28]
 8008ee6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008eea:	695b      	ldr	r3, [r3, #20]
 8008eec:	69fa      	ldr	r2, [r7, #28]
 8008eee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008ef2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8008ef6:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8008efa:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8008efc:	69fb      	ldr	r3, [r7, #28]
 8008efe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008f02:	691b      	ldr	r3, [r3, #16]
 8008f04:	69fa      	ldr	r2, [r7, #28]
 8008f06:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008f0a:	f043 030b 	orr.w	r3, r3, #11
 8008f0e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8008f10:	69fb      	ldr	r3, [r7, #28]
 8008f12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	69fa      	ldr	r2, [r7, #28]
 8008f1a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008f1e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8008f22:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681a      	ldr	r2, [r3, #0]
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8008f2e:	4619      	mov	r1, r3
 8008f30:	4610      	mov	r0, r2
 8008f32:	f005 fad1 	bl	800e4d8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	695a      	ldr	r2, [r3, #20]
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8008f44:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	f005 fa00 	bl	800e350 <USB_ReadInterrupts>
 8008f50:	4603      	mov	r3, r0
 8008f52:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008f56:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008f5a:	d124      	bne.n	8008fa6 <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	4618      	mov	r0, r3
 8008f62:	f005 fa96 	bl	800e492 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	f004 fbc3 	bl	800d6f6 <USB_GetDevSpeed>
 8008f70:	4603      	mov	r3, r0
 8008f72:	461a      	mov	r2, r3
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681c      	ldr	r4, [r3, #0]
 8008f7c:	f001 fc7a 	bl	800a874 <HAL_RCC_GetHCLKFreq>
 8008f80:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008f86:	b2db      	uxtb	r3, r3
 8008f88:	461a      	mov	r2, r3
 8008f8a:	4620      	mov	r0, r4
 8008f8c:	f004 f8ea 	bl	800d164 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8008f90:	6878      	ldr	r0, [r7, #4]
 8008f92:	f00a fc2c 	bl	80137ee <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	695a      	ldr	r2, [r3, #20]
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8008fa4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	4618      	mov	r0, r3
 8008fac:	f005 f9d0 	bl	800e350 <USB_ReadInterrupts>
 8008fb0:	4603      	mov	r3, r0
 8008fb2:	f003 0308 	and.w	r3, r3, #8
 8008fb6:	2b08      	cmp	r3, #8
 8008fb8:	d10a      	bne.n	8008fd0 <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8008fba:	6878      	ldr	r0, [r7, #4]
 8008fbc:	f00a fc09 	bl	80137d2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	695a      	ldr	r2, [r3, #20]
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	f002 0208 	and.w	r2, r2, #8
 8008fce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	f005 f9bb 	bl	800e350 <USB_ReadInterrupts>
 8008fda:	4603      	mov	r3, r0
 8008fdc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008fe0:	2b80      	cmp	r3, #128	@ 0x80
 8008fe2:	d122      	bne.n	800902a <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8008fe4:	6a3b      	ldr	r3, [r7, #32]
 8008fe6:	699b      	ldr	r3, [r3, #24]
 8008fe8:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008fec:	6a3b      	ldr	r3, [r7, #32]
 8008fee:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008ff0:	2301      	movs	r3, #1
 8008ff2:	627b      	str	r3, [r7, #36]	@ 0x24
 8008ff4:	e014      	b.n	8009020 <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8008ff6:	6879      	ldr	r1, [r7, #4]
 8008ff8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008ffa:	4613      	mov	r3, r2
 8008ffc:	00db      	lsls	r3, r3, #3
 8008ffe:	4413      	add	r3, r2
 8009000:	009b      	lsls	r3, r3, #2
 8009002:	440b      	add	r3, r1
 8009004:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 8009008:	781b      	ldrb	r3, [r3, #0]
 800900a:	2b01      	cmp	r3, #1
 800900c:	d105      	bne.n	800901a <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800900e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009010:	b2db      	uxtb	r3, r3
 8009012:	4619      	mov	r1, r3
 8009014:	6878      	ldr	r0, [r7, #4]
 8009016:	f000 faf3 	bl	8009600 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800901a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800901c:	3301      	adds	r3, #1
 800901e:	627b      	str	r3, [r7, #36]	@ 0x24
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	685b      	ldr	r3, [r3, #4]
 8009024:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009026:	429a      	cmp	r2, r3
 8009028:	d3e5      	bcc.n	8008ff6 <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	4618      	mov	r0, r3
 8009030:	f005 f98e 	bl	800e350 <USB_ReadInterrupts>
 8009034:	4603      	mov	r3, r0
 8009036:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800903a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800903e:	d13b      	bne.n	80090b8 <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009040:	2301      	movs	r3, #1
 8009042:	627b      	str	r3, [r7, #36]	@ 0x24
 8009044:	e02b      	b.n	800909e <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8009046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009048:	015a      	lsls	r2, r3, #5
 800904a:	69fb      	ldr	r3, [r7, #28]
 800904c:	4413      	add	r3, r2
 800904e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8009056:	6879      	ldr	r1, [r7, #4]
 8009058:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800905a:	4613      	mov	r3, r2
 800905c:	00db      	lsls	r3, r3, #3
 800905e:	4413      	add	r3, r2
 8009060:	009b      	lsls	r3, r3, #2
 8009062:	440b      	add	r3, r1
 8009064:	3340      	adds	r3, #64	@ 0x40
 8009066:	781b      	ldrb	r3, [r3, #0]
 8009068:	2b01      	cmp	r3, #1
 800906a:	d115      	bne.n	8009098 <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800906c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800906e:	2b00      	cmp	r3, #0
 8009070:	da12      	bge.n	8009098 <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8009072:	6879      	ldr	r1, [r7, #4]
 8009074:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009076:	4613      	mov	r3, r2
 8009078:	00db      	lsls	r3, r3, #3
 800907a:	4413      	add	r3, r2
 800907c:	009b      	lsls	r3, r3, #2
 800907e:	440b      	add	r3, r1
 8009080:	333f      	adds	r3, #63	@ 0x3f
 8009082:	2201      	movs	r2, #1
 8009084:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8009086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009088:	b2db      	uxtb	r3, r3
 800908a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800908e:	b2db      	uxtb	r3, r3
 8009090:	4619      	mov	r1, r3
 8009092:	6878      	ldr	r0, [r7, #4]
 8009094:	f000 fab4 	bl	8009600 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800909a:	3301      	adds	r3, #1
 800909c:	627b      	str	r3, [r7, #36]	@ 0x24
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	685b      	ldr	r3, [r3, #4]
 80090a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80090a4:	429a      	cmp	r2, r3
 80090a6:	d3ce      	bcc.n	8009046 <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	695a      	ldr	r2, [r3, #20]
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80090b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	4618      	mov	r0, r3
 80090be:	f005 f947 	bl	800e350 <USB_ReadInterrupts>
 80090c2:	4603      	mov	r3, r0
 80090c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80090c8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80090cc:	d155      	bne.n	800917a <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80090ce:	2301      	movs	r3, #1
 80090d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80090d2:	e045      	b.n	8009160 <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80090d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090d6:	015a      	lsls	r2, r3, #5
 80090d8:	69fb      	ldr	r3, [r7, #28]
 80090da:	4413      	add	r3, r2
 80090dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80090e4:	6879      	ldr	r1, [r7, #4]
 80090e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80090e8:	4613      	mov	r3, r2
 80090ea:	00db      	lsls	r3, r3, #3
 80090ec:	4413      	add	r3, r2
 80090ee:	009b      	lsls	r3, r3, #2
 80090f0:	440b      	add	r3, r1
 80090f2:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 80090f6:	781b      	ldrb	r3, [r3, #0]
 80090f8:	2b01      	cmp	r3, #1
 80090fa:	d12e      	bne.n	800915a <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80090fc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80090fe:	2b00      	cmp	r3, #0
 8009100:	da2b      	bge.n	800915a <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8009102:	69bb      	ldr	r3, [r7, #24]
 8009104:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	@ 0x4fc
 800910e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8009112:	429a      	cmp	r2, r3
 8009114:	d121      	bne.n	800915a <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8009116:	6879      	ldr	r1, [r7, #4]
 8009118:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800911a:	4613      	mov	r3, r2
 800911c:	00db      	lsls	r3, r3, #3
 800911e:	4413      	add	r3, r2
 8009120:	009b      	lsls	r3, r3, #2
 8009122:	440b      	add	r3, r1
 8009124:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 8009128:	2201      	movs	r2, #1
 800912a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800912c:	6a3b      	ldr	r3, [r7, #32]
 800912e:	699b      	ldr	r3, [r3, #24]
 8009130:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009134:	6a3b      	ldr	r3, [r7, #32]
 8009136:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8009138:	6a3b      	ldr	r3, [r7, #32]
 800913a:	695b      	ldr	r3, [r3, #20]
 800913c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009140:	2b00      	cmp	r3, #0
 8009142:	d10a      	bne.n	800915a <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8009144:	69fb      	ldr	r3, [r7, #28]
 8009146:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800914a:	685b      	ldr	r3, [r3, #4]
 800914c:	69fa      	ldr	r2, [r7, #28]
 800914e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009152:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8009156:	6053      	str	r3, [r2, #4]
            break;
 8009158:	e007      	b.n	800916a <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800915a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800915c:	3301      	adds	r3, #1
 800915e:	627b      	str	r3, [r7, #36]	@ 0x24
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	685b      	ldr	r3, [r3, #4]
 8009164:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009166:	429a      	cmp	r2, r3
 8009168:	d3b4      	bcc.n	80090d4 <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	695a      	ldr	r2, [r3, #20]
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8009178:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	4618      	mov	r0, r3
 8009180:	f005 f8e6 	bl	800e350 <USB_ReadInterrupts>
 8009184:	4603      	mov	r3, r0
 8009186:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800918a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800918e:	d10a      	bne.n	80091a6 <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8009190:	6878      	ldr	r0, [r7, #4]
 8009192:	f00a fbbd 	bl	8013910 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	695a      	ldr	r2, [r3, #20]
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80091a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	4618      	mov	r0, r3
 80091ac:	f005 f8d0 	bl	800e350 <USB_ReadInterrupts>
 80091b0:	4603      	mov	r3, r0
 80091b2:	f003 0304 	and.w	r3, r3, #4
 80091b6:	2b04      	cmp	r3, #4
 80091b8:	d115      	bne.n	80091e6 <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	685b      	ldr	r3, [r3, #4]
 80091c0:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80091c2:	69bb      	ldr	r3, [r7, #24]
 80091c4:	f003 0304 	and.w	r3, r3, #4
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d002      	beq.n	80091d2 <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80091cc:	6878      	ldr	r0, [r7, #4]
 80091ce:	f00a fbad 	bl	801392c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	6859      	ldr	r1, [r3, #4]
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	69ba      	ldr	r2, [r7, #24]
 80091de:	430a      	orrs	r2, r1
 80091e0:	605a      	str	r2, [r3, #4]
 80091e2:	e000      	b.n	80091e6 <HAL_PCD_IRQHandler+0x920>
      return;
 80091e4:	bf00      	nop
    }
  }
}
 80091e6:	3734      	adds	r7, #52	@ 0x34
 80091e8:	46bd      	mov	sp, r7
 80091ea:	bd90      	pop	{r4, r7, pc}

080091ec <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b082      	sub	sp, #8
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
 80091f4:	460b      	mov	r3, r1
 80091f6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 80091fe:	2b01      	cmp	r3, #1
 8009200:	d101      	bne.n	8009206 <HAL_PCD_SetAddress+0x1a>
 8009202:	2302      	movs	r3, #2
 8009204:	e013      	b.n	800922e <HAL_PCD_SetAddress+0x42>
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	2201      	movs	r2, #1
 800920a:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  hpcd->USB_Address = address;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	78fa      	ldrb	r2, [r7, #3]
 8009212:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	78fa      	ldrb	r2, [r7, #3]
 800921c:	4611      	mov	r1, r2
 800921e:	4618      	mov	r0, r3
 8009220:	f005 f82e 	bl	800e280 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	2200      	movs	r2, #0
 8009228:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 800922c:	2300      	movs	r3, #0
}
 800922e:	4618      	mov	r0, r3
 8009230:	3708      	adds	r7, #8
 8009232:	46bd      	mov	sp, r7
 8009234:	bd80      	pop	{r7, pc}

08009236 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8009236:	b580      	push	{r7, lr}
 8009238:	b084      	sub	sp, #16
 800923a:	af00      	add	r7, sp, #0
 800923c:	6078      	str	r0, [r7, #4]
 800923e:	4608      	mov	r0, r1
 8009240:	4611      	mov	r1, r2
 8009242:	461a      	mov	r2, r3
 8009244:	4603      	mov	r3, r0
 8009246:	70fb      	strb	r3, [r7, #3]
 8009248:	460b      	mov	r3, r1
 800924a:	803b      	strh	r3, [r7, #0]
 800924c:	4613      	mov	r3, r2
 800924e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8009250:	2300      	movs	r3, #0
 8009252:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009254:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009258:	2b00      	cmp	r3, #0
 800925a:	da0f      	bge.n	800927c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800925c:	78fb      	ldrb	r3, [r7, #3]
 800925e:	f003 020f 	and.w	r2, r3, #15
 8009262:	4613      	mov	r3, r2
 8009264:	00db      	lsls	r3, r3, #3
 8009266:	4413      	add	r3, r2
 8009268:	009b      	lsls	r3, r3, #2
 800926a:	3338      	adds	r3, #56	@ 0x38
 800926c:	687a      	ldr	r2, [r7, #4]
 800926e:	4413      	add	r3, r2
 8009270:	3304      	adds	r3, #4
 8009272:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	2201      	movs	r2, #1
 8009278:	705a      	strb	r2, [r3, #1]
 800927a:	e00f      	b.n	800929c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800927c:	78fb      	ldrb	r3, [r7, #3]
 800927e:	f003 020f 	and.w	r2, r3, #15
 8009282:	4613      	mov	r3, r2
 8009284:	00db      	lsls	r3, r3, #3
 8009286:	4413      	add	r3, r2
 8009288:	009b      	lsls	r3, r3, #2
 800928a:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 800928e:	687a      	ldr	r2, [r7, #4]
 8009290:	4413      	add	r3, r2
 8009292:	3304      	adds	r3, #4
 8009294:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	2200      	movs	r2, #0
 800929a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800929c:	78fb      	ldrb	r3, [r7, #3]
 800929e:	f003 030f 	and.w	r3, r3, #15
 80092a2:	b2da      	uxtb	r2, r3
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80092a8:	883a      	ldrh	r2, [r7, #0]
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	78ba      	ldrb	r2, [r7, #2]
 80092b2:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS)
  if (ep->is_in != 0U)
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	785b      	ldrb	r3, [r3, #1]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d004      	beq.n	80092c6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	781b      	ldrb	r3, [r3, #0]
 80092c0:	461a      	mov	r2, r3
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80092c6:	78bb      	ldrb	r3, [r7, #2]
 80092c8:	2b02      	cmp	r3, #2
 80092ca:	d102      	bne.n	80092d2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	2200      	movs	r2, #0
 80092d0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 80092d8:	2b01      	cmp	r3, #1
 80092da:	d101      	bne.n	80092e0 <HAL_PCD_EP_Open+0xaa>
 80092dc:	2302      	movs	r3, #2
 80092de:	e00e      	b.n	80092fe <HAL_PCD_EP_Open+0xc8>
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2201      	movs	r2, #1
 80092e4:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	68f9      	ldr	r1, [r7, #12]
 80092ee:	4618      	mov	r0, r3
 80092f0:	f004 fa20 	bl	800d734 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	2200      	movs	r2, #0
 80092f8:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return ret;
 80092fc:	7afb      	ldrb	r3, [r7, #11]
}
 80092fe:	4618      	mov	r0, r3
 8009300:	3710      	adds	r7, #16
 8009302:	46bd      	mov	sp, r7
 8009304:	bd80      	pop	{r7, pc}

08009306 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009306:	b580      	push	{r7, lr}
 8009308:	b084      	sub	sp, #16
 800930a:	af00      	add	r7, sp, #0
 800930c:	6078      	str	r0, [r7, #4]
 800930e:	460b      	mov	r3, r1
 8009310:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009312:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009316:	2b00      	cmp	r3, #0
 8009318:	da0f      	bge.n	800933a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800931a:	78fb      	ldrb	r3, [r7, #3]
 800931c:	f003 020f 	and.w	r2, r3, #15
 8009320:	4613      	mov	r3, r2
 8009322:	00db      	lsls	r3, r3, #3
 8009324:	4413      	add	r3, r2
 8009326:	009b      	lsls	r3, r3, #2
 8009328:	3338      	adds	r3, #56	@ 0x38
 800932a:	687a      	ldr	r2, [r7, #4]
 800932c:	4413      	add	r3, r2
 800932e:	3304      	adds	r3, #4
 8009330:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	2201      	movs	r2, #1
 8009336:	705a      	strb	r2, [r3, #1]
 8009338:	e00f      	b.n	800935a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800933a:	78fb      	ldrb	r3, [r7, #3]
 800933c:	f003 020f 	and.w	r2, r3, #15
 8009340:	4613      	mov	r3, r2
 8009342:	00db      	lsls	r3, r3, #3
 8009344:	4413      	add	r3, r2
 8009346:	009b      	lsls	r3, r3, #2
 8009348:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 800934c:	687a      	ldr	r2, [r7, #4]
 800934e:	4413      	add	r3, r2
 8009350:	3304      	adds	r3, #4
 8009352:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	2200      	movs	r2, #0
 8009358:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800935a:	78fb      	ldrb	r3, [r7, #3]
 800935c:	f003 030f 	and.w	r3, r3, #15
 8009360:	b2da      	uxtb	r2, r3
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 800936c:	2b01      	cmp	r3, #1
 800936e:	d101      	bne.n	8009374 <HAL_PCD_EP_Close+0x6e>
 8009370:	2302      	movs	r3, #2
 8009372:	e00e      	b.n	8009392 <HAL_PCD_EP_Close+0x8c>
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	2201      	movs	r2, #1
 8009378:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	68f9      	ldr	r1, [r7, #12]
 8009382:	4618      	mov	r0, r3
 8009384:	f004 fa5e 	bl	800d844 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2200      	movs	r2, #0
 800938c:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  return HAL_OK;
 8009390:	2300      	movs	r3, #0
}
 8009392:	4618      	mov	r0, r3
 8009394:	3710      	adds	r7, #16
 8009396:	46bd      	mov	sp, r7
 8009398:	bd80      	pop	{r7, pc}

0800939a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800939a:	b580      	push	{r7, lr}
 800939c:	b086      	sub	sp, #24
 800939e:	af00      	add	r7, sp, #0
 80093a0:	60f8      	str	r0, [r7, #12]
 80093a2:	607a      	str	r2, [r7, #4]
 80093a4:	603b      	str	r3, [r7, #0]
 80093a6:	460b      	mov	r3, r1
 80093a8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80093aa:	7afb      	ldrb	r3, [r7, #11]
 80093ac:	f003 020f 	and.w	r2, r3, #15
 80093b0:	4613      	mov	r3, r2
 80093b2:	00db      	lsls	r3, r3, #3
 80093b4:	4413      	add	r3, r2
 80093b6:	009b      	lsls	r3, r3, #2
 80093b8:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80093bc:	68fa      	ldr	r2, [r7, #12]
 80093be:	4413      	add	r3, r2
 80093c0:	3304      	adds	r3, #4
 80093c2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80093c4:	697b      	ldr	r3, [r7, #20]
 80093c6:	687a      	ldr	r2, [r7, #4]
 80093c8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80093ca:	697b      	ldr	r3, [r7, #20]
 80093cc:	683a      	ldr	r2, [r7, #0]
 80093ce:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80093d0:	697b      	ldr	r3, [r7, #20]
 80093d2:	2200      	movs	r2, #0
 80093d4:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80093d6:	697b      	ldr	r3, [r7, #20]
 80093d8:	2200      	movs	r2, #0
 80093da:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80093dc:	7afb      	ldrb	r3, [r7, #11]
 80093de:	f003 030f 	and.w	r3, r3, #15
 80093e2:	b2da      	uxtb	r2, r3
 80093e4:	697b      	ldr	r3, [r7, #20]
 80093e6:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	6979      	ldr	r1, [r7, #20]
 80093ee:	4618      	mov	r0, r3
 80093f0:	f004 fb04 	bl	800d9fc <USB_EPStartXfer>

  return HAL_OK;
 80093f4:	2300      	movs	r3, #0
}
 80093f6:	4618      	mov	r0, r3
 80093f8:	3718      	adds	r7, #24
 80093fa:	46bd      	mov	sp, r7
 80093fc:	bd80      	pop	{r7, pc}

080093fe <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80093fe:	b480      	push	{r7}
 8009400:	b083      	sub	sp, #12
 8009402:	af00      	add	r7, sp, #0
 8009404:	6078      	str	r0, [r7, #4]
 8009406:	460b      	mov	r3, r1
 8009408:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800940a:	78fb      	ldrb	r3, [r7, #3]
 800940c:	f003 020f 	and.w	r2, r3, #15
 8009410:	6879      	ldr	r1, [r7, #4]
 8009412:	4613      	mov	r3, r2
 8009414:	00db      	lsls	r3, r3, #3
 8009416:	4413      	add	r3, r2
 8009418:	009b      	lsls	r3, r3, #2
 800941a:	440b      	add	r3, r1
 800941c:	f503 7324 	add.w	r3, r3, #656	@ 0x290
 8009420:	681b      	ldr	r3, [r3, #0]
}
 8009422:	4618      	mov	r0, r3
 8009424:	370c      	adds	r7, #12
 8009426:	46bd      	mov	sp, r7
 8009428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942c:	4770      	bx	lr

0800942e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800942e:	b580      	push	{r7, lr}
 8009430:	b086      	sub	sp, #24
 8009432:	af00      	add	r7, sp, #0
 8009434:	60f8      	str	r0, [r7, #12]
 8009436:	607a      	str	r2, [r7, #4]
 8009438:	603b      	str	r3, [r7, #0]
 800943a:	460b      	mov	r3, r1
 800943c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800943e:	7afb      	ldrb	r3, [r7, #11]
 8009440:	f003 020f 	and.w	r2, r3, #15
 8009444:	4613      	mov	r3, r2
 8009446:	00db      	lsls	r3, r3, #3
 8009448:	4413      	add	r3, r2
 800944a:	009b      	lsls	r3, r3, #2
 800944c:	3338      	adds	r3, #56	@ 0x38
 800944e:	68fa      	ldr	r2, [r7, #12]
 8009450:	4413      	add	r3, r2
 8009452:	3304      	adds	r3, #4
 8009454:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009456:	697b      	ldr	r3, [r7, #20]
 8009458:	687a      	ldr	r2, [r7, #4]
 800945a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800945c:	697b      	ldr	r3, [r7, #20]
 800945e:	683a      	ldr	r2, [r7, #0]
 8009460:	611a      	str	r2, [r3, #16]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8009462:	697b      	ldr	r3, [r7, #20]
 8009464:	2200      	movs	r2, #0
 8009466:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8009468:	697b      	ldr	r3, [r7, #20]
 800946a:	2201      	movs	r2, #1
 800946c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800946e:	7afb      	ldrb	r3, [r7, #11]
 8009470:	f003 030f 	and.w	r3, r3, #15
 8009474:	b2da      	uxtb	r2, r3
 8009476:	697b      	ldr	r3, [r7, #20]
 8009478:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	6979      	ldr	r1, [r7, #20]
 8009480:	4618      	mov	r0, r3
 8009482:	f004 fabb 	bl	800d9fc <USB_EPStartXfer>

  return HAL_OK;
 8009486:	2300      	movs	r3, #0
}
 8009488:	4618      	mov	r0, r3
 800948a:	3718      	adds	r7, #24
 800948c:	46bd      	mov	sp, r7
 800948e:	bd80      	pop	{r7, pc}

08009490 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009490:	b580      	push	{r7, lr}
 8009492:	b084      	sub	sp, #16
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
 8009498:	460b      	mov	r3, r1
 800949a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800949c:	78fb      	ldrb	r3, [r7, #3]
 800949e:	f003 020f 	and.w	r2, r3, #15
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	685b      	ldr	r3, [r3, #4]
 80094a6:	429a      	cmp	r2, r3
 80094a8:	d901      	bls.n	80094ae <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80094aa:	2301      	movs	r3, #1
 80094ac:	e04e      	b.n	800954c <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80094ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	da0f      	bge.n	80094d6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80094b6:	78fb      	ldrb	r3, [r7, #3]
 80094b8:	f003 020f 	and.w	r2, r3, #15
 80094bc:	4613      	mov	r3, r2
 80094be:	00db      	lsls	r3, r3, #3
 80094c0:	4413      	add	r3, r2
 80094c2:	009b      	lsls	r3, r3, #2
 80094c4:	3338      	adds	r3, #56	@ 0x38
 80094c6:	687a      	ldr	r2, [r7, #4]
 80094c8:	4413      	add	r3, r2
 80094ca:	3304      	adds	r3, #4
 80094cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	2201      	movs	r2, #1
 80094d2:	705a      	strb	r2, [r3, #1]
 80094d4:	e00d      	b.n	80094f2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80094d6:	78fa      	ldrb	r2, [r7, #3]
 80094d8:	4613      	mov	r3, r2
 80094da:	00db      	lsls	r3, r3, #3
 80094dc:	4413      	add	r3, r2
 80094de:	009b      	lsls	r3, r3, #2
 80094e0:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80094e4:	687a      	ldr	r2, [r7, #4]
 80094e6:	4413      	add	r3, r2
 80094e8:	3304      	adds	r3, #4
 80094ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	2200      	movs	r2, #0
 80094f0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	2201      	movs	r2, #1
 80094f6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80094f8:	78fb      	ldrb	r3, [r7, #3]
 80094fa:	f003 030f 	and.w	r3, r3, #15
 80094fe:	b2da      	uxtb	r2, r3
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 800950a:	2b01      	cmp	r3, #1
 800950c:	d101      	bne.n	8009512 <HAL_PCD_EP_SetStall+0x82>
 800950e:	2302      	movs	r3, #2
 8009510:	e01c      	b.n	800954c <HAL_PCD_EP_SetStall+0xbc>
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	2201      	movs	r2, #1
 8009516:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	68f9      	ldr	r1, [r7, #12]
 8009520:	4618      	mov	r0, r3
 8009522:	f004 fdd9 	bl	800e0d8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009526:	78fb      	ldrb	r3, [r7, #3]
 8009528:	f003 030f 	and.w	r3, r3, #15
 800952c:	2b00      	cmp	r3, #0
 800952e:	d108      	bne.n	8009542 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681a      	ldr	r2, [r3, #0]
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800953a:	4619      	mov	r1, r3
 800953c:	4610      	mov	r0, r2
 800953e:	f004 ffcb 	bl	800e4d8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	2200      	movs	r2, #0
 8009546:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 800954a:	2300      	movs	r3, #0
}
 800954c:	4618      	mov	r0, r3
 800954e:	3710      	adds	r7, #16
 8009550:	46bd      	mov	sp, r7
 8009552:	bd80      	pop	{r7, pc}

08009554 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009554:	b580      	push	{r7, lr}
 8009556:	b084      	sub	sp, #16
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
 800955c:	460b      	mov	r3, r1
 800955e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8009560:	78fb      	ldrb	r3, [r7, #3]
 8009562:	f003 020f 	and.w	r2, r3, #15
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	685b      	ldr	r3, [r3, #4]
 800956a:	429a      	cmp	r2, r3
 800956c:	d901      	bls.n	8009572 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800956e:	2301      	movs	r3, #1
 8009570:	e042      	b.n	80095f8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009572:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009576:	2b00      	cmp	r3, #0
 8009578:	da0f      	bge.n	800959a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800957a:	78fb      	ldrb	r3, [r7, #3]
 800957c:	f003 020f 	and.w	r2, r3, #15
 8009580:	4613      	mov	r3, r2
 8009582:	00db      	lsls	r3, r3, #3
 8009584:	4413      	add	r3, r2
 8009586:	009b      	lsls	r3, r3, #2
 8009588:	3338      	adds	r3, #56	@ 0x38
 800958a:	687a      	ldr	r2, [r7, #4]
 800958c:	4413      	add	r3, r2
 800958e:	3304      	adds	r3, #4
 8009590:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	2201      	movs	r2, #1
 8009596:	705a      	strb	r2, [r3, #1]
 8009598:	e00f      	b.n	80095ba <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800959a:	78fb      	ldrb	r3, [r7, #3]
 800959c:	f003 020f 	and.w	r2, r3, #15
 80095a0:	4613      	mov	r3, r2
 80095a2:	00db      	lsls	r3, r3, #3
 80095a4:	4413      	add	r3, r2
 80095a6:	009b      	lsls	r3, r3, #2
 80095a8:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80095ac:	687a      	ldr	r2, [r7, #4]
 80095ae:	4413      	add	r3, r2
 80095b0:	3304      	adds	r3, #4
 80095b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	2200      	movs	r2, #0
 80095b8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	2200      	movs	r2, #0
 80095be:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80095c0:	78fb      	ldrb	r3, [r7, #3]
 80095c2:	f003 030f 	and.w	r3, r3, #15
 80095c6:	b2da      	uxtb	r2, r3
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 80095d2:	2b01      	cmp	r3, #1
 80095d4:	d101      	bne.n	80095da <HAL_PCD_EP_ClrStall+0x86>
 80095d6:	2302      	movs	r3, #2
 80095d8:	e00e      	b.n	80095f8 <HAL_PCD_EP_ClrStall+0xa4>
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	2201      	movs	r2, #1
 80095de:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	68f9      	ldr	r1, [r7, #12]
 80095e8:	4618      	mov	r0, r3
 80095ea:	f004 fde3 	bl	800e1b4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	2200      	movs	r2, #0
 80095f2:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 80095f6:	2300      	movs	r3, #0
}
 80095f8:	4618      	mov	r0, r3
 80095fa:	3710      	adds	r7, #16
 80095fc:	46bd      	mov	sp, r7
 80095fe:	bd80      	pop	{r7, pc}

08009600 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009600:	b580      	push	{r7, lr}
 8009602:	b084      	sub	sp, #16
 8009604:	af00      	add	r7, sp, #0
 8009606:	6078      	str	r0, [r7, #4]
 8009608:	460b      	mov	r3, r1
 800960a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800960c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009610:	2b00      	cmp	r3, #0
 8009612:	da0c      	bge.n	800962e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009614:	78fb      	ldrb	r3, [r7, #3]
 8009616:	f003 020f 	and.w	r2, r3, #15
 800961a:	4613      	mov	r3, r2
 800961c:	00db      	lsls	r3, r3, #3
 800961e:	4413      	add	r3, r2
 8009620:	009b      	lsls	r3, r3, #2
 8009622:	3338      	adds	r3, #56	@ 0x38
 8009624:	687a      	ldr	r2, [r7, #4]
 8009626:	4413      	add	r3, r2
 8009628:	3304      	adds	r3, #4
 800962a:	60fb      	str	r3, [r7, #12]
 800962c:	e00c      	b.n	8009648 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800962e:	78fb      	ldrb	r3, [r7, #3]
 8009630:	f003 020f 	and.w	r2, r3, #15
 8009634:	4613      	mov	r3, r2
 8009636:	00db      	lsls	r3, r3, #3
 8009638:	4413      	add	r3, r2
 800963a:	009b      	lsls	r3, r3, #2
 800963c:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8009640:	687a      	ldr	r2, [r7, #4]
 8009642:	4413      	add	r3, r2
 8009644:	3304      	adds	r3, #4
 8009646:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	68f9      	ldr	r1, [r7, #12]
 800964e:	4618      	mov	r0, r3
 8009650:	f004 fc06 	bl	800de60 <USB_EPStopXfer>
 8009654:	4603      	mov	r3, r0
 8009656:	72fb      	strb	r3, [r7, #11]

  return ret;
 8009658:	7afb      	ldrb	r3, [r7, #11]
}
 800965a:	4618      	mov	r0, r3
 800965c:	3710      	adds	r7, #16
 800965e:	46bd      	mov	sp, r7
 8009660:	bd80      	pop	{r7, pc}

08009662 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009662:	b580      	push	{r7, lr}
 8009664:	b088      	sub	sp, #32
 8009666:	af00      	add	r7, sp, #0
 8009668:	6078      	str	r0, [r7, #4]
 800966a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009672:	697b      	ldr	r3, [r7, #20]
 8009674:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8009676:	683a      	ldr	r2, [r7, #0]
 8009678:	4613      	mov	r3, r2
 800967a:	00db      	lsls	r3, r3, #3
 800967c:	4413      	add	r3, r2
 800967e:	009b      	lsls	r3, r3, #2
 8009680:	3338      	adds	r3, #56	@ 0x38
 8009682:	687a      	ldr	r2, [r7, #4]
 8009684:	4413      	add	r3, r2
 8009686:	3304      	adds	r3, #4
 8009688:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	695a      	ldr	r2, [r3, #20]
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	691b      	ldr	r3, [r3, #16]
 8009692:	429a      	cmp	r2, r3
 8009694:	d901      	bls.n	800969a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8009696:	2301      	movs	r3, #1
 8009698:	e067      	b.n	800976a <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	691a      	ldr	r2, [r3, #16]
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	695b      	ldr	r3, [r3, #20]
 80096a2:	1ad3      	subs	r3, r2, r3
 80096a4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	689b      	ldr	r3, [r3, #8]
 80096aa:	69fa      	ldr	r2, [r7, #28]
 80096ac:	429a      	cmp	r2, r3
 80096ae:	d902      	bls.n	80096b6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	689b      	ldr	r3, [r3, #8]
 80096b4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80096b6:	69fb      	ldr	r3, [r7, #28]
 80096b8:	3303      	adds	r3, #3
 80096ba:	089b      	lsrs	r3, r3, #2
 80096bc:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80096be:	e026      	b.n	800970e <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	691a      	ldr	r2, [r3, #16]
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	695b      	ldr	r3, [r3, #20]
 80096c8:	1ad3      	subs	r3, r2, r3
 80096ca:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	689b      	ldr	r3, [r3, #8]
 80096d0:	69fa      	ldr	r2, [r7, #28]
 80096d2:	429a      	cmp	r2, r3
 80096d4:	d902      	bls.n	80096dc <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	689b      	ldr	r3, [r3, #8]
 80096da:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80096dc:	69fb      	ldr	r3, [r7, #28]
 80096de:	3303      	adds	r3, #3
 80096e0:	089b      	lsrs	r3, r3, #2
 80096e2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	68d9      	ldr	r1, [r3, #12]
 80096e8:	683b      	ldr	r3, [r7, #0]
 80096ea:	b2da      	uxtb	r2, r3
 80096ec:	69fb      	ldr	r3, [r7, #28]
 80096ee:	b29b      	uxth	r3, r3
 80096f0:	6978      	ldr	r0, [r7, #20]
 80096f2:	f004 fc5f 	bl	800dfb4 <USB_WritePacket>

    ep->xfer_buff  += len;
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	68da      	ldr	r2, [r3, #12]
 80096fa:	69fb      	ldr	r3, [r7, #28]
 80096fc:	441a      	add	r2, r3
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	695a      	ldr	r2, [r3, #20]
 8009706:	69fb      	ldr	r3, [r7, #28]
 8009708:	441a      	add	r2, r3
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800970e:	683b      	ldr	r3, [r7, #0]
 8009710:	015a      	lsls	r2, r3, #5
 8009712:	693b      	ldr	r3, [r7, #16]
 8009714:	4413      	add	r3, r2
 8009716:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800971a:	699b      	ldr	r3, [r3, #24]
 800971c:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800971e:	69ba      	ldr	r2, [r7, #24]
 8009720:	429a      	cmp	r2, r3
 8009722:	d809      	bhi.n	8009738 <PCD_WriteEmptyTxFifo+0xd6>
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	695a      	ldr	r2, [r3, #20]
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800972c:	429a      	cmp	r2, r3
 800972e:	d203      	bcs.n	8009738 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	691b      	ldr	r3, [r3, #16]
 8009734:	2b00      	cmp	r3, #0
 8009736:	d1c3      	bne.n	80096c0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	691a      	ldr	r2, [r3, #16]
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	695b      	ldr	r3, [r3, #20]
 8009740:	429a      	cmp	r2, r3
 8009742:	d811      	bhi.n	8009768 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009744:	683b      	ldr	r3, [r7, #0]
 8009746:	f003 030f 	and.w	r3, r3, #15
 800974a:	2201      	movs	r2, #1
 800974c:	fa02 f303 	lsl.w	r3, r2, r3
 8009750:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009752:	693b      	ldr	r3, [r7, #16]
 8009754:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009758:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800975a:	68bb      	ldr	r3, [r7, #8]
 800975c:	43db      	mvns	r3, r3
 800975e:	6939      	ldr	r1, [r7, #16]
 8009760:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009764:	4013      	ands	r3, r2
 8009766:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8009768:	2300      	movs	r3, #0
}
 800976a:	4618      	mov	r0, r3
 800976c:	3720      	adds	r7, #32
 800976e:	46bd      	mov	sp, r7
 8009770:	bd80      	pop	{r7, pc}
	...

08009774 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009774:	b580      	push	{r7, lr}
 8009776:	b086      	sub	sp, #24
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
 800977c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009784:	697b      	ldr	r3, [r7, #20]
 8009786:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009788:	697b      	ldr	r3, [r7, #20]
 800978a:	333c      	adds	r3, #60	@ 0x3c
 800978c:	3304      	adds	r3, #4
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009792:	683b      	ldr	r3, [r7, #0]
 8009794:	015a      	lsls	r2, r3, #5
 8009796:	693b      	ldr	r3, [r7, #16]
 8009798:	4413      	add	r3, r2
 800979a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800979e:	689b      	ldr	r3, [r3, #8]
 80097a0:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	4a19      	ldr	r2, [pc, #100]	@ (800980c <PCD_EP_OutXfrComplete_int+0x98>)
 80097a6:	4293      	cmp	r3, r2
 80097a8:	d124      	bne.n	80097f4 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80097aa:	68bb      	ldr	r3, [r7, #8]
 80097ac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d00a      	beq.n	80097ca <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80097b4:	683b      	ldr	r3, [r7, #0]
 80097b6:	015a      	lsls	r2, r3, #5
 80097b8:	693b      	ldr	r3, [r7, #16]
 80097ba:	4413      	add	r3, r2
 80097bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80097c0:	461a      	mov	r2, r3
 80097c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80097c6:	6093      	str	r3, [r2, #8]
 80097c8:	e01a      	b.n	8009800 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80097ca:	68bb      	ldr	r3, [r7, #8]
 80097cc:	f003 0320 	and.w	r3, r3, #32
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d008      	beq.n	80097e6 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80097d4:	683b      	ldr	r3, [r7, #0]
 80097d6:	015a      	lsls	r2, r3, #5
 80097d8:	693b      	ldr	r3, [r7, #16]
 80097da:	4413      	add	r3, r2
 80097dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80097e0:	461a      	mov	r2, r3
 80097e2:	2320      	movs	r3, #32
 80097e4:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80097e6:	683b      	ldr	r3, [r7, #0]
 80097e8:	b2db      	uxtb	r3, r3
 80097ea:	4619      	mov	r1, r3
 80097ec:	6878      	ldr	r0, [r7, #4]
 80097ee:	f009 ffbb 	bl	8013768 <HAL_PCD_DataOutStageCallback>
 80097f2:	e005      	b.n	8009800 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80097f4:	683b      	ldr	r3, [r7, #0]
 80097f6:	b2db      	uxtb	r3, r3
 80097f8:	4619      	mov	r1, r3
 80097fa:	6878      	ldr	r0, [r7, #4]
 80097fc:	f009 ffb4 	bl	8013768 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8009800:	2300      	movs	r3, #0
}
 8009802:	4618      	mov	r0, r3
 8009804:	3718      	adds	r7, #24
 8009806:	46bd      	mov	sp, r7
 8009808:	bd80      	pop	{r7, pc}
 800980a:	bf00      	nop
 800980c:	4f54310a 	.word	0x4f54310a

08009810 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009810:	b580      	push	{r7, lr}
 8009812:	b086      	sub	sp, #24
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
 8009818:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009820:	697b      	ldr	r3, [r7, #20]
 8009822:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009824:	697b      	ldr	r3, [r7, #20]
 8009826:	333c      	adds	r3, #60	@ 0x3c
 8009828:	3304      	adds	r3, #4
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800982e:	683b      	ldr	r3, [r7, #0]
 8009830:	015a      	lsls	r2, r3, #5
 8009832:	693b      	ldr	r3, [r7, #16]
 8009834:	4413      	add	r3, r2
 8009836:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800983a:	689b      	ldr	r3, [r3, #8]
 800983c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	4a0c      	ldr	r2, [pc, #48]	@ (8009874 <PCD_EP_OutSetupPacket_int+0x64>)
 8009842:	4293      	cmp	r3, r2
 8009844:	d90e      	bls.n	8009864 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009846:	68bb      	ldr	r3, [r7, #8]
 8009848:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800984c:	2b00      	cmp	r3, #0
 800984e:	d009      	beq.n	8009864 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009850:	683b      	ldr	r3, [r7, #0]
 8009852:	015a      	lsls	r2, r3, #5
 8009854:	693b      	ldr	r3, [r7, #16]
 8009856:	4413      	add	r3, r2
 8009858:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800985c:	461a      	mov	r2, r3
 800985e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009862:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8009864:	6878      	ldr	r0, [r7, #4]
 8009866:	f009 ff6d 	bl	8013744 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 800986a:	2300      	movs	r3, #0
}
 800986c:	4618      	mov	r0, r3
 800986e:	3718      	adds	r7, #24
 8009870:	46bd      	mov	sp, r7
 8009872:	bd80      	pop	{r7, pc}
 8009874:	4f54300a 	.word	0x4f54300a

08009878 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8009878:	b480      	push	{r7}
 800987a:	b085      	sub	sp, #20
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
 8009880:	460b      	mov	r3, r1
 8009882:	70fb      	strb	r3, [r7, #3]
 8009884:	4613      	mov	r3, r2
 8009886:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800988e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8009890:	78fb      	ldrb	r3, [r7, #3]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d107      	bne.n	80098a6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8009896:	883b      	ldrh	r3, [r7, #0]
 8009898:	0419      	lsls	r1, r3, #16
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	68ba      	ldr	r2, [r7, #8]
 80098a0:	430a      	orrs	r2, r1
 80098a2:	629a      	str	r2, [r3, #40]	@ 0x28
 80098a4:	e028      	b.n	80098f8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098ac:	0c1b      	lsrs	r3, r3, #16
 80098ae:	68ba      	ldr	r2, [r7, #8]
 80098b0:	4413      	add	r3, r2
 80098b2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80098b4:	2300      	movs	r3, #0
 80098b6:	73fb      	strb	r3, [r7, #15]
 80098b8:	e00d      	b.n	80098d6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681a      	ldr	r2, [r3, #0]
 80098be:	7bfb      	ldrb	r3, [r7, #15]
 80098c0:	3340      	adds	r3, #64	@ 0x40
 80098c2:	009b      	lsls	r3, r3, #2
 80098c4:	4413      	add	r3, r2
 80098c6:	685b      	ldr	r3, [r3, #4]
 80098c8:	0c1b      	lsrs	r3, r3, #16
 80098ca:	68ba      	ldr	r2, [r7, #8]
 80098cc:	4413      	add	r3, r2
 80098ce:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80098d0:	7bfb      	ldrb	r3, [r7, #15]
 80098d2:	3301      	adds	r3, #1
 80098d4:	73fb      	strb	r3, [r7, #15]
 80098d6:	7bfa      	ldrb	r2, [r7, #15]
 80098d8:	78fb      	ldrb	r3, [r7, #3]
 80098da:	3b01      	subs	r3, #1
 80098dc:	429a      	cmp	r2, r3
 80098de:	d3ec      	bcc.n	80098ba <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80098e0:	883b      	ldrh	r3, [r7, #0]
 80098e2:	0418      	lsls	r0, r3, #16
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	6819      	ldr	r1, [r3, #0]
 80098e8:	78fb      	ldrb	r3, [r7, #3]
 80098ea:	3b01      	subs	r3, #1
 80098ec:	68ba      	ldr	r2, [r7, #8]
 80098ee:	4302      	orrs	r2, r0
 80098f0:	3340      	adds	r3, #64	@ 0x40
 80098f2:	009b      	lsls	r3, r3, #2
 80098f4:	440b      	add	r3, r1
 80098f6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80098f8:	2300      	movs	r3, #0
}
 80098fa:	4618      	mov	r0, r3
 80098fc:	3714      	adds	r7, #20
 80098fe:	46bd      	mov	sp, r7
 8009900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009904:	4770      	bx	lr

08009906 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8009906:	b480      	push	{r7}
 8009908:	b083      	sub	sp, #12
 800990a:	af00      	add	r7, sp, #0
 800990c:	6078      	str	r0, [r7, #4]
 800990e:	460b      	mov	r3, r1
 8009910:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	887a      	ldrh	r2, [r7, #2]
 8009918:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800991a:	2300      	movs	r3, #0
}
 800991c:	4618      	mov	r0, r3
 800991e:	370c      	adds	r7, #12
 8009920:	46bd      	mov	sp, r7
 8009922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009926:	4770      	bx	lr

08009928 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8009928:	b480      	push	{r7}
 800992a:	b085      	sub	sp, #20
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	2201      	movs	r2, #1
 800993a:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
  hpcd->LPM_State = LPM_L0;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	2200      	movs	r2, #0
 8009942:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	699b      	ldr	r3, [r3, #24]
 800994a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009956:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800995a:	f043 0303 	orr.w	r3, r3, #3
 800995e:	68fa      	ldr	r2, [r7, #12]
 8009960:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8009962:	2300      	movs	r3, #0
}
 8009964:	4618      	mov	r0, r3
 8009966:	3714      	adds	r7, #20
 8009968:	46bd      	mov	sp, r7
 800996a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996e:	4770      	bx	lr

08009970 <HAL_PWR_EnterSTOPMode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop 0 or Stop 1 mode with WFI instruction.
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop 0 or Stop 1 mode with WFE instruction.
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8009970:	b580      	push	{r7, lr}
 8009972:	b082      	sub	sp, #8
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
 8009978:	460b      	mov	r3, r1
 800997a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));

  if(Regulator == PWR_LOWPOWERREGULATOR_ON)
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009982:	d104      	bne.n	800998e <HAL_PWR_EnterSTOPMode+0x1e>
  {
    HAL_PWREx_EnterSTOP1Mode(STOPEntry);
 8009984:	78fb      	ldrb	r3, [r7, #3]
 8009986:	4618      	mov	r0, r3
 8009988:	f000 f908 	bl	8009b9c <HAL_PWREx_EnterSTOP1Mode>
  }
  else
  {
    HAL_PWREx_EnterSTOP0Mode(STOPEntry);
  }
}
 800998c:	e003      	b.n	8009996 <HAL_PWR_EnterSTOPMode+0x26>
    HAL_PWREx_EnterSTOP0Mode(STOPEntry);
 800998e:	78fb      	ldrb	r3, [r7, #3]
 8009990:	4618      	mov	r0, r3
 8009992:	f000 f8d9 	bl	8009b48 <HAL_PWREx_EnterSTOP0Mode>
}
 8009996:	bf00      	nop
 8009998:	3708      	adds	r7, #8
 800999a:	46bd      	mov	sp, r7
 800999c:	bd80      	pop	{r7, pc}
	...

080099a0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80099a0:	b480      	push	{r7}
 80099a2:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80099a4:	4b0d      	ldr	r3, [pc, #52]	@ (80099dc <HAL_PWREx_GetVoltageRange+0x3c>)
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80099ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80099b0:	d102      	bne.n	80099b8 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80099b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80099b6:	e00b      	b.n	80099d0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80099b8:	4b08      	ldr	r3, [pc, #32]	@ (80099dc <HAL_PWREx_GetVoltageRange+0x3c>)
 80099ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80099be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80099c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80099c6:	d102      	bne.n	80099ce <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80099c8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80099cc:	e000      	b.n	80099d0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80099ce:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80099d0:	4618      	mov	r0, r3
 80099d2:	46bd      	mov	sp, r7
 80099d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d8:	4770      	bx	lr
 80099da:	bf00      	nop
 80099dc:	40007000 	.word	0x40007000

080099e0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80099e0:	b480      	push	{r7}
 80099e2:	b085      	sub	sp, #20
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d141      	bne.n	8009a72 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80099ee:	4b4b      	ldr	r3, [pc, #300]	@ (8009b1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80099f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80099fa:	d131      	bne.n	8009a60 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80099fc:	4b47      	ldr	r3, [pc, #284]	@ (8009b1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80099fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a02:	4a46      	ldr	r2, [pc, #280]	@ (8009b1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009a04:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009a08:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8009a0c:	4b43      	ldr	r3, [pc, #268]	@ (8009b1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8009a14:	4a41      	ldr	r2, [pc, #260]	@ (8009b1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009a16:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8009a1a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8009a1c:	4b40      	ldr	r3, [pc, #256]	@ (8009b20 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	2232      	movs	r2, #50	@ 0x32
 8009a22:	fb02 f303 	mul.w	r3, r2, r3
 8009a26:	4a3f      	ldr	r2, [pc, #252]	@ (8009b24 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8009a28:	fba2 2303 	umull	r2, r3, r2, r3
 8009a2c:	0c9b      	lsrs	r3, r3, #18
 8009a2e:	3301      	adds	r3, #1
 8009a30:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009a32:	e002      	b.n	8009a3a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	3b01      	subs	r3, #1
 8009a38:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009a3a:	4b38      	ldr	r3, [pc, #224]	@ (8009b1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009a3c:	695b      	ldr	r3, [r3, #20]
 8009a3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009a42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009a46:	d102      	bne.n	8009a4e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d1f2      	bne.n	8009a34 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8009a4e:	4b33      	ldr	r3, [pc, #204]	@ (8009b1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009a50:	695b      	ldr	r3, [r3, #20]
 8009a52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009a56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009a5a:	d158      	bne.n	8009b0e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8009a5c:	2303      	movs	r3, #3
 8009a5e:	e057      	b.n	8009b10 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009a60:	4b2e      	ldr	r3, [pc, #184]	@ (8009b1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009a62:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a66:	4a2d      	ldr	r2, [pc, #180]	@ (8009b1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009a68:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009a6c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8009a70:	e04d      	b.n	8009b0e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009a78:	d141      	bne.n	8009afe <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8009a7a:	4b28      	ldr	r3, [pc, #160]	@ (8009b1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8009a82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009a86:	d131      	bne.n	8009aec <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009a88:	4b24      	ldr	r3, [pc, #144]	@ (8009b1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009a8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a8e:	4a23      	ldr	r2, [pc, #140]	@ (8009b1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009a90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009a94:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8009a98:	4b20      	ldr	r3, [pc, #128]	@ (8009b1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8009aa0:	4a1e      	ldr	r2, [pc, #120]	@ (8009b1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009aa2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8009aa6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8009aa8:	4b1d      	ldr	r3, [pc, #116]	@ (8009b20 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	2232      	movs	r2, #50	@ 0x32
 8009aae:	fb02 f303 	mul.w	r3, r2, r3
 8009ab2:	4a1c      	ldr	r2, [pc, #112]	@ (8009b24 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8009ab4:	fba2 2303 	umull	r2, r3, r2, r3
 8009ab8:	0c9b      	lsrs	r3, r3, #18
 8009aba:	3301      	adds	r3, #1
 8009abc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009abe:	e002      	b.n	8009ac6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	3b01      	subs	r3, #1
 8009ac4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009ac6:	4b15      	ldr	r3, [pc, #84]	@ (8009b1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009ac8:	695b      	ldr	r3, [r3, #20]
 8009aca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009ace:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009ad2:	d102      	bne.n	8009ada <HAL_PWREx_ControlVoltageScaling+0xfa>
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d1f2      	bne.n	8009ac0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8009ada:	4b10      	ldr	r3, [pc, #64]	@ (8009b1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009adc:	695b      	ldr	r3, [r3, #20]
 8009ade:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009ae2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009ae6:	d112      	bne.n	8009b0e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8009ae8:	2303      	movs	r3, #3
 8009aea:	e011      	b.n	8009b10 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009aec:	4b0b      	ldr	r3, [pc, #44]	@ (8009b1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009aee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009af2:	4a0a      	ldr	r2, [pc, #40]	@ (8009b1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009af4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009af8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8009afc:	e007      	b.n	8009b0e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8009afe:	4b07      	ldr	r3, [pc, #28]	@ (8009b1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8009b06:	4a05      	ldr	r2, [pc, #20]	@ (8009b1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009b08:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8009b0c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8009b0e:	2300      	movs	r3, #0
}
 8009b10:	4618      	mov	r0, r3
 8009b12:	3714      	adds	r7, #20
 8009b14:	46bd      	mov	sp, r7
 8009b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1a:	4770      	bx	lr
 8009b1c:	40007000 	.word	0x40007000
 8009b20:	20000298 	.word	0x20000298
 8009b24:	431bde83 	.word	0x431bde83

08009b28 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8009b28:	b480      	push	{r7}
 8009b2a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8009b2c:	4b05      	ldr	r3, [pc, #20]	@ (8009b44 <HAL_PWREx_EnableVddUSB+0x1c>)
 8009b2e:	685b      	ldr	r3, [r3, #4]
 8009b30:	4a04      	ldr	r2, [pc, #16]	@ (8009b44 <HAL_PWREx_EnableVddUSB+0x1c>)
 8009b32:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8009b36:	6053      	str	r3, [r2, #4]
}
 8009b38:	bf00      	nop
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b40:	4770      	bx	lr
 8009b42:	bf00      	nop
 8009b44:	40007000 	.word	0x40007000

08009b48 <HAL_PWREx_EnterSTOP0Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP0Mode(uint8_t STOPEntry)
{
 8009b48:	b480      	push	{r7}
 8009b4a:	b083      	sub	sp, #12
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	4603      	mov	r3, r0
 8009b50:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Stop 0 mode with Main Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP0);
 8009b52:	4b10      	ldr	r3, [pc, #64]	@ (8009b94 <HAL_PWREx_EnterSTOP0Mode+0x4c>)
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	4a0f      	ldr	r2, [pc, #60]	@ (8009b94 <HAL_PWREx_EnterSTOP0Mode+0x4c>)
 8009b58:	f023 0307 	bic.w	r3, r3, #7
 8009b5c:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8009b5e:	4b0e      	ldr	r3, [pc, #56]	@ (8009b98 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8009b60:	691b      	ldr	r3, [r3, #16]
 8009b62:	4a0d      	ldr	r2, [pc, #52]	@ (8009b98 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8009b64:	f043 0304 	orr.w	r3, r3, #4
 8009b68:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8009b6a:	79fb      	ldrb	r3, [r7, #7]
 8009b6c:	2b01      	cmp	r3, #1
 8009b6e:	d101      	bne.n	8009b74 <HAL_PWREx_EnterSTOP0Mode+0x2c>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8009b70:	bf30      	wfi
 8009b72:	e002      	b.n	8009b7a <HAL_PWREx_EnterSTOP0Mode+0x32>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8009b74:	bf40      	sev
    __WFE();
 8009b76:	bf20      	wfe
    __WFE();
 8009b78:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8009b7a:	4b07      	ldr	r3, [pc, #28]	@ (8009b98 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8009b7c:	691b      	ldr	r3, [r3, #16]
 8009b7e:	4a06      	ldr	r2, [pc, #24]	@ (8009b98 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8009b80:	f023 0304 	bic.w	r3, r3, #4
 8009b84:	6113      	str	r3, [r2, #16]
}
 8009b86:	bf00      	nop
 8009b88:	370c      	adds	r7, #12
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b90:	4770      	bx	lr
 8009b92:	bf00      	nop
 8009b94:	40007000 	.word	0x40007000
 8009b98:	e000ed00 	.word	0xe000ed00

08009b9c <HAL_PWREx_EnterSTOP1Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP1Mode(uint8_t STOPEntry)
{
 8009b9c:	b480      	push	{r7}
 8009b9e:	b083      	sub	sp, #12
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	4603      	mov	r3, r0
 8009ba4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Stop 1 mode with Low-Power Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP1);
 8009ba6:	4b11      	ldr	r3, [pc, #68]	@ (8009bec <HAL_PWREx_EnterSTOP1Mode+0x50>)
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	f023 0307 	bic.w	r3, r3, #7
 8009bae:	4a0f      	ldr	r2, [pc, #60]	@ (8009bec <HAL_PWREx_EnterSTOP1Mode+0x50>)
 8009bb0:	f043 0301 	orr.w	r3, r3, #1
 8009bb4:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8009bb6:	4b0e      	ldr	r3, [pc, #56]	@ (8009bf0 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8009bb8:	691b      	ldr	r3, [r3, #16]
 8009bba:	4a0d      	ldr	r2, [pc, #52]	@ (8009bf0 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8009bbc:	f043 0304 	orr.w	r3, r3, #4
 8009bc0:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8009bc2:	79fb      	ldrb	r3, [r7, #7]
 8009bc4:	2b01      	cmp	r3, #1
 8009bc6:	d101      	bne.n	8009bcc <HAL_PWREx_EnterSTOP1Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8009bc8:	bf30      	wfi
 8009bca:	e002      	b.n	8009bd2 <HAL_PWREx_EnterSTOP1Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8009bcc:	bf40      	sev
    __WFE();
 8009bce:	bf20      	wfe
    __WFE();
 8009bd0:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8009bd2:	4b07      	ldr	r3, [pc, #28]	@ (8009bf0 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8009bd4:	691b      	ldr	r3, [r3, #16]
 8009bd6:	4a06      	ldr	r2, [pc, #24]	@ (8009bf0 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8009bd8:	f023 0304 	bic.w	r3, r3, #4
 8009bdc:	6113      	str	r3, [r2, #16]
}
 8009bde:	bf00      	nop
 8009be0:	370c      	adds	r7, #12
 8009be2:	46bd      	mov	sp, r7
 8009be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be8:	4770      	bx	lr
 8009bea:	bf00      	nop
 8009bec:	40007000 	.word	0x40007000
 8009bf0:	e000ed00 	.word	0xe000ed00

08009bf4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	b08a      	sub	sp, #40	@ 0x28
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d102      	bne.n	8009c08 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8009c02:	2301      	movs	r3, #1
 8009c04:	f000 bc68 	b.w	800a4d8 <HAL_RCC_OscConfig+0x8e4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009c08:	4b97      	ldr	r3, [pc, #604]	@ (8009e68 <HAL_RCC_OscConfig+0x274>)
 8009c0a:	689b      	ldr	r3, [r3, #8]
 8009c0c:	f003 030c 	and.w	r3, r3, #12
 8009c10:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009c12:	4b95      	ldr	r3, [pc, #596]	@ (8009e68 <HAL_RCC_OscConfig+0x274>)
 8009c14:	68db      	ldr	r3, [r3, #12]
 8009c16:	f003 0303 	and.w	r3, r3, #3
 8009c1a:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	f003 0310 	and.w	r3, r3, #16
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	f000 80e6 	beq.w	8009df6 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8009c2a:	6a3b      	ldr	r3, [r7, #32]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d007      	beq.n	8009c40 <HAL_RCC_OscConfig+0x4c>
 8009c30:	6a3b      	ldr	r3, [r7, #32]
 8009c32:	2b0c      	cmp	r3, #12
 8009c34:	f040 808d 	bne.w	8009d52 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8009c38:	69fb      	ldr	r3, [r7, #28]
 8009c3a:	2b01      	cmp	r3, #1
 8009c3c:	f040 8089 	bne.w	8009d52 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8009c40:	4b89      	ldr	r3, [pc, #548]	@ (8009e68 <HAL_RCC_OscConfig+0x274>)
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	f003 0302 	and.w	r3, r3, #2
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d006      	beq.n	8009c5a <HAL_RCC_OscConfig+0x66>
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	69db      	ldr	r3, [r3, #28]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d102      	bne.n	8009c5a <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8009c54:	2301      	movs	r3, #1
 8009c56:	f000 bc3f 	b.w	800a4d8 <HAL_RCC_OscConfig+0x8e4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009c5e:	4b82      	ldr	r3, [pc, #520]	@ (8009e68 <HAL_RCC_OscConfig+0x274>)
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	f003 0308 	and.w	r3, r3, #8
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d004      	beq.n	8009c74 <HAL_RCC_OscConfig+0x80>
 8009c6a:	4b7f      	ldr	r3, [pc, #508]	@ (8009e68 <HAL_RCC_OscConfig+0x274>)
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009c72:	e005      	b.n	8009c80 <HAL_RCC_OscConfig+0x8c>
 8009c74:	4b7c      	ldr	r3, [pc, #496]	@ (8009e68 <HAL_RCC_OscConfig+0x274>)
 8009c76:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009c7a:	091b      	lsrs	r3, r3, #4
 8009c7c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009c80:	4293      	cmp	r3, r2
 8009c82:	d224      	bcs.n	8009cce <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c88:	4618      	mov	r0, r3
 8009c8a:	f000 fe47 	bl	800a91c <RCC_SetFlashLatencyFromMSIRange>
 8009c8e:	4603      	mov	r3, r0
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d002      	beq.n	8009c9a <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8009c94:	2301      	movs	r3, #1
 8009c96:	f000 bc1f 	b.w	800a4d8 <HAL_RCC_OscConfig+0x8e4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009c9a:	4b73      	ldr	r3, [pc, #460]	@ (8009e68 <HAL_RCC_OscConfig+0x274>)
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	4a72      	ldr	r2, [pc, #456]	@ (8009e68 <HAL_RCC_OscConfig+0x274>)
 8009ca0:	f043 0308 	orr.w	r3, r3, #8
 8009ca4:	6013      	str	r3, [r2, #0]
 8009ca6:	4b70      	ldr	r3, [pc, #448]	@ (8009e68 <HAL_RCC_OscConfig+0x274>)
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cb2:	496d      	ldr	r1, [pc, #436]	@ (8009e68 <HAL_RCC_OscConfig+0x274>)
 8009cb4:	4313      	orrs	r3, r2
 8009cb6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009cb8:	4b6b      	ldr	r3, [pc, #428]	@ (8009e68 <HAL_RCC_OscConfig+0x274>)
 8009cba:	685b      	ldr	r3, [r3, #4]
 8009cbc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	6a1b      	ldr	r3, [r3, #32]
 8009cc4:	021b      	lsls	r3, r3, #8
 8009cc6:	4968      	ldr	r1, [pc, #416]	@ (8009e68 <HAL_RCC_OscConfig+0x274>)
 8009cc8:	4313      	orrs	r3, r2
 8009cca:	604b      	str	r3, [r1, #4]
 8009ccc:	e025      	b.n	8009d1a <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009cce:	4b66      	ldr	r3, [pc, #408]	@ (8009e68 <HAL_RCC_OscConfig+0x274>)
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	4a65      	ldr	r2, [pc, #404]	@ (8009e68 <HAL_RCC_OscConfig+0x274>)
 8009cd4:	f043 0308 	orr.w	r3, r3, #8
 8009cd8:	6013      	str	r3, [r2, #0]
 8009cda:	4b63      	ldr	r3, [pc, #396]	@ (8009e68 <HAL_RCC_OscConfig+0x274>)
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ce6:	4960      	ldr	r1, [pc, #384]	@ (8009e68 <HAL_RCC_OscConfig+0x274>)
 8009ce8:	4313      	orrs	r3, r2
 8009cea:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009cec:	4b5e      	ldr	r3, [pc, #376]	@ (8009e68 <HAL_RCC_OscConfig+0x274>)
 8009cee:	685b      	ldr	r3, [r3, #4]
 8009cf0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	6a1b      	ldr	r3, [r3, #32]
 8009cf8:	021b      	lsls	r3, r3, #8
 8009cfa:	495b      	ldr	r1, [pc, #364]	@ (8009e68 <HAL_RCC_OscConfig+0x274>)
 8009cfc:	4313      	orrs	r3, r2
 8009cfe:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8009d00:	6a3b      	ldr	r3, [r7, #32]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d109      	bne.n	8009d1a <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	f000 fe06 	bl	800a91c <RCC_SetFlashLatencyFromMSIRange>
 8009d10:	4603      	mov	r3, r0
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d001      	beq.n	8009d1a <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8009d16:	2301      	movs	r3, #1
 8009d18:	e3de      	b.n	800a4d8 <HAL_RCC_OscConfig+0x8e4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8009d1a:	f000 fd21 	bl	800a760 <HAL_RCC_GetSysClockFreq>
 8009d1e:	4602      	mov	r2, r0
 8009d20:	4b51      	ldr	r3, [pc, #324]	@ (8009e68 <HAL_RCC_OscConfig+0x274>)
 8009d22:	689b      	ldr	r3, [r3, #8]
 8009d24:	091b      	lsrs	r3, r3, #4
 8009d26:	f003 030f 	and.w	r3, r3, #15
 8009d2a:	4950      	ldr	r1, [pc, #320]	@ (8009e6c <HAL_RCC_OscConfig+0x278>)
 8009d2c:	5ccb      	ldrb	r3, [r1, r3]
 8009d2e:	f003 031f 	and.w	r3, r3, #31
 8009d32:	fa22 f303 	lsr.w	r3, r2, r3
 8009d36:	4a4e      	ldr	r2, [pc, #312]	@ (8009e70 <HAL_RCC_OscConfig+0x27c>)
 8009d38:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8009d3a:	4b4e      	ldr	r3, [pc, #312]	@ (8009e74 <HAL_RCC_OscConfig+0x280>)
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	4618      	mov	r0, r3
 8009d40:	f7fb f956 	bl	8004ff0 <HAL_InitTick>
 8009d44:	4603      	mov	r3, r0
 8009d46:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8009d48:	7dfb      	ldrb	r3, [r7, #23]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d052      	beq.n	8009df4 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8009d4e:	7dfb      	ldrb	r3, [r7, #23]
 8009d50:	e3c2      	b.n	800a4d8 <HAL_RCC_OscConfig+0x8e4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	69db      	ldr	r3, [r3, #28]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d032      	beq.n	8009dc0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8009d5a:	4b43      	ldr	r3, [pc, #268]	@ (8009e68 <HAL_RCC_OscConfig+0x274>)
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	4a42      	ldr	r2, [pc, #264]	@ (8009e68 <HAL_RCC_OscConfig+0x274>)
 8009d60:	f043 0301 	orr.w	r3, r3, #1
 8009d64:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8009d66:	f7fb fb55 	bl	8005414 <HAL_GetTick>
 8009d6a:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8009d6c:	e008      	b.n	8009d80 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009d6e:	f7fb fb51 	bl	8005414 <HAL_GetTick>
 8009d72:	4602      	mov	r2, r0
 8009d74:	69bb      	ldr	r3, [r7, #24]
 8009d76:	1ad3      	subs	r3, r2, r3
 8009d78:	2b02      	cmp	r3, #2
 8009d7a:	d901      	bls.n	8009d80 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8009d7c:	2303      	movs	r3, #3
 8009d7e:	e3ab      	b.n	800a4d8 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8009d80:	4b39      	ldr	r3, [pc, #228]	@ (8009e68 <HAL_RCC_OscConfig+0x274>)
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	f003 0302 	and.w	r3, r3, #2
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d0f0      	beq.n	8009d6e <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009d8c:	4b36      	ldr	r3, [pc, #216]	@ (8009e68 <HAL_RCC_OscConfig+0x274>)
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	4a35      	ldr	r2, [pc, #212]	@ (8009e68 <HAL_RCC_OscConfig+0x274>)
 8009d92:	f043 0308 	orr.w	r3, r3, #8
 8009d96:	6013      	str	r3, [r2, #0]
 8009d98:	4b33      	ldr	r3, [pc, #204]	@ (8009e68 <HAL_RCC_OscConfig+0x274>)
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009da4:	4930      	ldr	r1, [pc, #192]	@ (8009e68 <HAL_RCC_OscConfig+0x274>)
 8009da6:	4313      	orrs	r3, r2
 8009da8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009daa:	4b2f      	ldr	r3, [pc, #188]	@ (8009e68 <HAL_RCC_OscConfig+0x274>)
 8009dac:	685b      	ldr	r3, [r3, #4]
 8009dae:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	6a1b      	ldr	r3, [r3, #32]
 8009db6:	021b      	lsls	r3, r3, #8
 8009db8:	492b      	ldr	r1, [pc, #172]	@ (8009e68 <HAL_RCC_OscConfig+0x274>)
 8009dba:	4313      	orrs	r3, r2
 8009dbc:	604b      	str	r3, [r1, #4]
 8009dbe:	e01a      	b.n	8009df6 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8009dc0:	4b29      	ldr	r3, [pc, #164]	@ (8009e68 <HAL_RCC_OscConfig+0x274>)
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	4a28      	ldr	r2, [pc, #160]	@ (8009e68 <HAL_RCC_OscConfig+0x274>)
 8009dc6:	f023 0301 	bic.w	r3, r3, #1
 8009dca:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8009dcc:	f7fb fb22 	bl	8005414 <HAL_GetTick>
 8009dd0:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8009dd2:	e008      	b.n	8009de6 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009dd4:	f7fb fb1e 	bl	8005414 <HAL_GetTick>
 8009dd8:	4602      	mov	r2, r0
 8009dda:	69bb      	ldr	r3, [r7, #24]
 8009ddc:	1ad3      	subs	r3, r2, r3
 8009dde:	2b02      	cmp	r3, #2
 8009de0:	d901      	bls.n	8009de6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8009de2:	2303      	movs	r3, #3
 8009de4:	e378      	b.n	800a4d8 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8009de6:	4b20      	ldr	r3, [pc, #128]	@ (8009e68 <HAL_RCC_OscConfig+0x274>)
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	f003 0302 	and.w	r3, r3, #2
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d1f0      	bne.n	8009dd4 <HAL_RCC_OscConfig+0x1e0>
 8009df2:	e000      	b.n	8009df6 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8009df4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	f003 0301 	and.w	r3, r3, #1
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d073      	beq.n	8009eea <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8009e02:	6a3b      	ldr	r3, [r7, #32]
 8009e04:	2b08      	cmp	r3, #8
 8009e06:	d005      	beq.n	8009e14 <HAL_RCC_OscConfig+0x220>
 8009e08:	6a3b      	ldr	r3, [r7, #32]
 8009e0a:	2b0c      	cmp	r3, #12
 8009e0c:	d10e      	bne.n	8009e2c <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8009e0e:	69fb      	ldr	r3, [r7, #28]
 8009e10:	2b03      	cmp	r3, #3
 8009e12:	d10b      	bne.n	8009e2c <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009e14:	4b14      	ldr	r3, [pc, #80]	@ (8009e68 <HAL_RCC_OscConfig+0x274>)
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d063      	beq.n	8009ee8 <HAL_RCC_OscConfig+0x2f4>
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	685b      	ldr	r3, [r3, #4]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d15f      	bne.n	8009ee8 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8009e28:	2301      	movs	r3, #1
 8009e2a:	e355      	b.n	800a4d8 <HAL_RCC_OscConfig+0x8e4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	685b      	ldr	r3, [r3, #4]
 8009e30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009e34:	d106      	bne.n	8009e44 <HAL_RCC_OscConfig+0x250>
 8009e36:	4b0c      	ldr	r3, [pc, #48]	@ (8009e68 <HAL_RCC_OscConfig+0x274>)
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	4a0b      	ldr	r2, [pc, #44]	@ (8009e68 <HAL_RCC_OscConfig+0x274>)
 8009e3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009e40:	6013      	str	r3, [r2, #0]
 8009e42:	e025      	b.n	8009e90 <HAL_RCC_OscConfig+0x29c>
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	685b      	ldr	r3, [r3, #4]
 8009e48:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009e4c:	d114      	bne.n	8009e78 <HAL_RCC_OscConfig+0x284>
 8009e4e:	4b06      	ldr	r3, [pc, #24]	@ (8009e68 <HAL_RCC_OscConfig+0x274>)
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	4a05      	ldr	r2, [pc, #20]	@ (8009e68 <HAL_RCC_OscConfig+0x274>)
 8009e54:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009e58:	6013      	str	r3, [r2, #0]
 8009e5a:	4b03      	ldr	r3, [pc, #12]	@ (8009e68 <HAL_RCC_OscConfig+0x274>)
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	4a02      	ldr	r2, [pc, #8]	@ (8009e68 <HAL_RCC_OscConfig+0x274>)
 8009e60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009e64:	6013      	str	r3, [r2, #0]
 8009e66:	e013      	b.n	8009e90 <HAL_RCC_OscConfig+0x29c>
 8009e68:	40021000 	.word	0x40021000
 8009e6c:	08017498 	.word	0x08017498
 8009e70:	20000298 	.word	0x20000298
 8009e74:	2000029c 	.word	0x2000029c
 8009e78:	4b8f      	ldr	r3, [pc, #572]	@ (800a0b8 <HAL_RCC_OscConfig+0x4c4>)
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	4a8e      	ldr	r2, [pc, #568]	@ (800a0b8 <HAL_RCC_OscConfig+0x4c4>)
 8009e7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009e82:	6013      	str	r3, [r2, #0]
 8009e84:	4b8c      	ldr	r3, [pc, #560]	@ (800a0b8 <HAL_RCC_OscConfig+0x4c4>)
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	4a8b      	ldr	r2, [pc, #556]	@ (800a0b8 <HAL_RCC_OscConfig+0x4c4>)
 8009e8a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009e8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	685b      	ldr	r3, [r3, #4]
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d013      	beq.n	8009ec0 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e98:	f7fb fabc 	bl	8005414 <HAL_GetTick>
 8009e9c:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009e9e:	e008      	b.n	8009eb2 <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009ea0:	f7fb fab8 	bl	8005414 <HAL_GetTick>
 8009ea4:	4602      	mov	r2, r0
 8009ea6:	69bb      	ldr	r3, [r7, #24]
 8009ea8:	1ad3      	subs	r3, r2, r3
 8009eaa:	2b64      	cmp	r3, #100	@ 0x64
 8009eac:	d901      	bls.n	8009eb2 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8009eae:	2303      	movs	r3, #3
 8009eb0:	e312      	b.n	800a4d8 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009eb2:	4b81      	ldr	r3, [pc, #516]	@ (800a0b8 <HAL_RCC_OscConfig+0x4c4>)
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d0f0      	beq.n	8009ea0 <HAL_RCC_OscConfig+0x2ac>
 8009ebe:	e014      	b.n	8009eea <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ec0:	f7fb faa8 	bl	8005414 <HAL_GetTick>
 8009ec4:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009ec6:	e008      	b.n	8009eda <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009ec8:	f7fb faa4 	bl	8005414 <HAL_GetTick>
 8009ecc:	4602      	mov	r2, r0
 8009ece:	69bb      	ldr	r3, [r7, #24]
 8009ed0:	1ad3      	subs	r3, r2, r3
 8009ed2:	2b64      	cmp	r3, #100	@ 0x64
 8009ed4:	d901      	bls.n	8009eda <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8009ed6:	2303      	movs	r3, #3
 8009ed8:	e2fe      	b.n	800a4d8 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009eda:	4b77      	ldr	r3, [pc, #476]	@ (800a0b8 <HAL_RCC_OscConfig+0x4c4>)
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d1f0      	bne.n	8009ec8 <HAL_RCC_OscConfig+0x2d4>
 8009ee6:	e000      	b.n	8009eea <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009ee8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	f003 0302 	and.w	r3, r3, #2
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d060      	beq.n	8009fb8 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8009ef6:	6a3b      	ldr	r3, [r7, #32]
 8009ef8:	2b04      	cmp	r3, #4
 8009efa:	d005      	beq.n	8009f08 <HAL_RCC_OscConfig+0x314>
 8009efc:	6a3b      	ldr	r3, [r7, #32]
 8009efe:	2b0c      	cmp	r3, #12
 8009f00:	d119      	bne.n	8009f36 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8009f02:	69fb      	ldr	r3, [r7, #28]
 8009f04:	2b02      	cmp	r3, #2
 8009f06:	d116      	bne.n	8009f36 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009f08:	4b6b      	ldr	r3, [pc, #428]	@ (800a0b8 <HAL_RCC_OscConfig+0x4c4>)
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d005      	beq.n	8009f20 <HAL_RCC_OscConfig+0x32c>
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	68db      	ldr	r3, [r3, #12]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d101      	bne.n	8009f20 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8009f1c:	2301      	movs	r3, #1
 8009f1e:	e2db      	b.n	800a4d8 <HAL_RCC_OscConfig+0x8e4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009f20:	4b65      	ldr	r3, [pc, #404]	@ (800a0b8 <HAL_RCC_OscConfig+0x4c4>)
 8009f22:	685b      	ldr	r3, [r3, #4]
 8009f24:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	691b      	ldr	r3, [r3, #16]
 8009f2c:	061b      	lsls	r3, r3, #24
 8009f2e:	4962      	ldr	r1, [pc, #392]	@ (800a0b8 <HAL_RCC_OscConfig+0x4c4>)
 8009f30:	4313      	orrs	r3, r2
 8009f32:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009f34:	e040      	b.n	8009fb8 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	68db      	ldr	r3, [r3, #12]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d023      	beq.n	8009f86 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009f3e:	4b5e      	ldr	r3, [pc, #376]	@ (800a0b8 <HAL_RCC_OscConfig+0x4c4>)
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	4a5d      	ldr	r2, [pc, #372]	@ (800a0b8 <HAL_RCC_OscConfig+0x4c4>)
 8009f44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009f48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f4a:	f7fb fa63 	bl	8005414 <HAL_GetTick>
 8009f4e:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009f50:	e008      	b.n	8009f64 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009f52:	f7fb fa5f 	bl	8005414 <HAL_GetTick>
 8009f56:	4602      	mov	r2, r0
 8009f58:	69bb      	ldr	r3, [r7, #24]
 8009f5a:	1ad3      	subs	r3, r2, r3
 8009f5c:	2b02      	cmp	r3, #2
 8009f5e:	d901      	bls.n	8009f64 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8009f60:	2303      	movs	r3, #3
 8009f62:	e2b9      	b.n	800a4d8 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009f64:	4b54      	ldr	r3, [pc, #336]	@ (800a0b8 <HAL_RCC_OscConfig+0x4c4>)
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d0f0      	beq.n	8009f52 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009f70:	4b51      	ldr	r3, [pc, #324]	@ (800a0b8 <HAL_RCC_OscConfig+0x4c4>)
 8009f72:	685b      	ldr	r3, [r3, #4]
 8009f74:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	691b      	ldr	r3, [r3, #16]
 8009f7c:	061b      	lsls	r3, r3, #24
 8009f7e:	494e      	ldr	r1, [pc, #312]	@ (800a0b8 <HAL_RCC_OscConfig+0x4c4>)
 8009f80:	4313      	orrs	r3, r2
 8009f82:	604b      	str	r3, [r1, #4]
 8009f84:	e018      	b.n	8009fb8 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009f86:	4b4c      	ldr	r3, [pc, #304]	@ (800a0b8 <HAL_RCC_OscConfig+0x4c4>)
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	4a4b      	ldr	r2, [pc, #300]	@ (800a0b8 <HAL_RCC_OscConfig+0x4c4>)
 8009f8c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009f90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f92:	f7fb fa3f 	bl	8005414 <HAL_GetTick>
 8009f96:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009f98:	e008      	b.n	8009fac <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009f9a:	f7fb fa3b 	bl	8005414 <HAL_GetTick>
 8009f9e:	4602      	mov	r2, r0
 8009fa0:	69bb      	ldr	r3, [r7, #24]
 8009fa2:	1ad3      	subs	r3, r2, r3
 8009fa4:	2b02      	cmp	r3, #2
 8009fa6:	d901      	bls.n	8009fac <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8009fa8:	2303      	movs	r3, #3
 8009faa:	e295      	b.n	800a4d8 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009fac:	4b42      	ldr	r3, [pc, #264]	@ (800a0b8 <HAL_RCC_OscConfig+0x4c4>)
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d1f0      	bne.n	8009f9a <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	f003 0308 	and.w	r3, r3, #8
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	f000 8082 	beq.w	800a0ca <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	695b      	ldr	r3, [r3, #20]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d05f      	beq.n	800a08e <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8009fce:	4b3a      	ldr	r3, [pc, #232]	@ (800a0b8 <HAL_RCC_OscConfig+0x4c4>)
 8009fd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009fd4:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	699a      	ldr	r2, [r3, #24]
 8009fda:	693b      	ldr	r3, [r7, #16]
 8009fdc:	f003 0310 	and.w	r3, r3, #16
 8009fe0:	429a      	cmp	r2, r3
 8009fe2:	d037      	beq.n	800a054 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8009fe4:	693b      	ldr	r3, [r7, #16]
 8009fe6:	f003 0302 	and.w	r3, r3, #2
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d006      	beq.n	8009ffc <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8009fee:	693b      	ldr	r3, [r7, #16]
 8009ff0:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d101      	bne.n	8009ffc <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8009ff8:	2301      	movs	r3, #1
 8009ffa:	e26d      	b.n	800a4d8 <HAL_RCC_OscConfig+0x8e4>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8009ffc:	693b      	ldr	r3, [r7, #16]
 8009ffe:	f003 0301 	and.w	r3, r3, #1
 800a002:	2b00      	cmp	r3, #0
 800a004:	d01b      	beq.n	800a03e <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 800a006:	4b2c      	ldr	r3, [pc, #176]	@ (800a0b8 <HAL_RCC_OscConfig+0x4c4>)
 800a008:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a00c:	4a2a      	ldr	r2, [pc, #168]	@ (800a0b8 <HAL_RCC_OscConfig+0x4c4>)
 800a00e:	f023 0301 	bic.w	r3, r3, #1
 800a012:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a016:	f7fb f9fd 	bl	8005414 <HAL_GetTick>
 800a01a:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a01c:	e008      	b.n	800a030 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a01e:	f7fb f9f9 	bl	8005414 <HAL_GetTick>
 800a022:	4602      	mov	r2, r0
 800a024:	69bb      	ldr	r3, [r7, #24]
 800a026:	1ad3      	subs	r3, r2, r3
 800a028:	2b11      	cmp	r3, #17
 800a02a:	d901      	bls.n	800a030 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 800a02c:	2303      	movs	r3, #3
 800a02e:	e253      	b.n	800a4d8 <HAL_RCC_OscConfig+0x8e4>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a030:	4b21      	ldr	r3, [pc, #132]	@ (800a0b8 <HAL_RCC_OscConfig+0x4c4>)
 800a032:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a036:	f003 0302 	and.w	r3, r3, #2
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d1ef      	bne.n	800a01e <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 800a03e:	4b1e      	ldr	r3, [pc, #120]	@ (800a0b8 <HAL_RCC_OscConfig+0x4c4>)
 800a040:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a044:	f023 0210 	bic.w	r2, r3, #16
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	699b      	ldr	r3, [r3, #24]
 800a04c:	491a      	ldr	r1, [pc, #104]	@ (800a0b8 <HAL_RCC_OscConfig+0x4c4>)
 800a04e:	4313      	orrs	r3, r2
 800a050:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a054:	4b18      	ldr	r3, [pc, #96]	@ (800a0b8 <HAL_RCC_OscConfig+0x4c4>)
 800a056:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a05a:	4a17      	ldr	r2, [pc, #92]	@ (800a0b8 <HAL_RCC_OscConfig+0x4c4>)
 800a05c:	f043 0301 	orr.w	r3, r3, #1
 800a060:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a064:	f7fb f9d6 	bl	8005414 <HAL_GetTick>
 800a068:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a06a:	e008      	b.n	800a07e <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a06c:	f7fb f9d2 	bl	8005414 <HAL_GetTick>
 800a070:	4602      	mov	r2, r0
 800a072:	69bb      	ldr	r3, [r7, #24]
 800a074:	1ad3      	subs	r3, r2, r3
 800a076:	2b11      	cmp	r3, #17
 800a078:	d901      	bls.n	800a07e <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 800a07a:	2303      	movs	r3, #3
 800a07c:	e22c      	b.n	800a4d8 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a07e:	4b0e      	ldr	r3, [pc, #56]	@ (800a0b8 <HAL_RCC_OscConfig+0x4c4>)
 800a080:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a084:	f003 0302 	and.w	r3, r3, #2
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d0ef      	beq.n	800a06c <HAL_RCC_OscConfig+0x478>
 800a08c:	e01d      	b.n	800a0ca <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a08e:	4b0a      	ldr	r3, [pc, #40]	@ (800a0b8 <HAL_RCC_OscConfig+0x4c4>)
 800a090:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a094:	4a08      	ldr	r2, [pc, #32]	@ (800a0b8 <HAL_RCC_OscConfig+0x4c4>)
 800a096:	f023 0301 	bic.w	r3, r3, #1
 800a09a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a09e:	f7fb f9b9 	bl	8005414 <HAL_GetTick>
 800a0a2:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a0a4:	e00a      	b.n	800a0bc <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a0a6:	f7fb f9b5 	bl	8005414 <HAL_GetTick>
 800a0aa:	4602      	mov	r2, r0
 800a0ac:	69bb      	ldr	r3, [r7, #24]
 800a0ae:	1ad3      	subs	r3, r2, r3
 800a0b0:	2b11      	cmp	r3, #17
 800a0b2:	d903      	bls.n	800a0bc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 800a0b4:	2303      	movs	r3, #3
 800a0b6:	e20f      	b.n	800a4d8 <HAL_RCC_OscConfig+0x8e4>
 800a0b8:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a0bc:	4b83      	ldr	r3, [pc, #524]	@ (800a2cc <HAL_RCC_OscConfig+0x6d8>)
 800a0be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a0c2:	f003 0302 	and.w	r3, r3, #2
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d1ed      	bne.n	800a0a6 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	f003 0304 	and.w	r3, r3, #4
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	f000 80bd 	beq.w	800a252 <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a0d8:	2300      	movs	r3, #0
 800a0da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800a0de:	4b7b      	ldr	r3, [pc, #492]	@ (800a2cc <HAL_RCC_OscConfig+0x6d8>)
 800a0e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a0e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d10e      	bne.n	800a108 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a0ea:	4b78      	ldr	r3, [pc, #480]	@ (800a2cc <HAL_RCC_OscConfig+0x6d8>)
 800a0ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a0ee:	4a77      	ldr	r2, [pc, #476]	@ (800a2cc <HAL_RCC_OscConfig+0x6d8>)
 800a0f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a0f4:	6593      	str	r3, [r2, #88]	@ 0x58
 800a0f6:	4b75      	ldr	r3, [pc, #468]	@ (800a2cc <HAL_RCC_OscConfig+0x6d8>)
 800a0f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a0fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a0fe:	60fb      	str	r3, [r7, #12]
 800a100:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800a102:	2301      	movs	r3, #1
 800a104:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a108:	4b71      	ldr	r3, [pc, #452]	@ (800a2d0 <HAL_RCC_OscConfig+0x6dc>)
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a110:	2b00      	cmp	r3, #0
 800a112:	d118      	bne.n	800a146 <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a114:	4b6e      	ldr	r3, [pc, #440]	@ (800a2d0 <HAL_RCC_OscConfig+0x6dc>)
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	4a6d      	ldr	r2, [pc, #436]	@ (800a2d0 <HAL_RCC_OscConfig+0x6dc>)
 800a11a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a11e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a120:	f7fb f978 	bl	8005414 <HAL_GetTick>
 800a124:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a126:	e008      	b.n	800a13a <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a128:	f7fb f974 	bl	8005414 <HAL_GetTick>
 800a12c:	4602      	mov	r2, r0
 800a12e:	69bb      	ldr	r3, [r7, #24]
 800a130:	1ad3      	subs	r3, r2, r3
 800a132:	2b02      	cmp	r3, #2
 800a134:	d901      	bls.n	800a13a <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 800a136:	2303      	movs	r3, #3
 800a138:	e1ce      	b.n	800a4d8 <HAL_RCC_OscConfig+0x8e4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a13a:	4b65      	ldr	r3, [pc, #404]	@ (800a2d0 <HAL_RCC_OscConfig+0x6dc>)
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a142:	2b00      	cmp	r3, #0
 800a144:	d0f0      	beq.n	800a128 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	689b      	ldr	r3, [r3, #8]
 800a14a:	f003 0301 	and.w	r3, r3, #1
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d02c      	beq.n	800a1ac <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 800a152:	4b5e      	ldr	r3, [pc, #376]	@ (800a2cc <HAL_RCC_OscConfig+0x6d8>)
 800a154:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a158:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	689b      	ldr	r3, [r3, #8]
 800a160:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a164:	4959      	ldr	r1, [pc, #356]	@ (800a2cc <HAL_RCC_OscConfig+0x6d8>)
 800a166:	4313      	orrs	r3, r2
 800a168:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	689b      	ldr	r3, [r3, #8]
 800a170:	f003 0304 	and.w	r3, r3, #4
 800a174:	2b00      	cmp	r3, #0
 800a176:	d010      	beq.n	800a19a <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800a178:	4b54      	ldr	r3, [pc, #336]	@ (800a2cc <HAL_RCC_OscConfig+0x6d8>)
 800a17a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a17e:	4a53      	ldr	r2, [pc, #332]	@ (800a2cc <HAL_RCC_OscConfig+0x6d8>)
 800a180:	f043 0304 	orr.w	r3, r3, #4
 800a184:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800a188:	4b50      	ldr	r3, [pc, #320]	@ (800a2cc <HAL_RCC_OscConfig+0x6d8>)
 800a18a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a18e:	4a4f      	ldr	r2, [pc, #316]	@ (800a2cc <HAL_RCC_OscConfig+0x6d8>)
 800a190:	f043 0301 	orr.w	r3, r3, #1
 800a194:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800a198:	e018      	b.n	800a1cc <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800a19a:	4b4c      	ldr	r3, [pc, #304]	@ (800a2cc <HAL_RCC_OscConfig+0x6d8>)
 800a19c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a1a0:	4a4a      	ldr	r2, [pc, #296]	@ (800a2cc <HAL_RCC_OscConfig+0x6d8>)
 800a1a2:	f043 0301 	orr.w	r3, r3, #1
 800a1a6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800a1aa:	e00f      	b.n	800a1cc <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800a1ac:	4b47      	ldr	r3, [pc, #284]	@ (800a2cc <HAL_RCC_OscConfig+0x6d8>)
 800a1ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a1b2:	4a46      	ldr	r2, [pc, #280]	@ (800a2cc <HAL_RCC_OscConfig+0x6d8>)
 800a1b4:	f023 0301 	bic.w	r3, r3, #1
 800a1b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800a1bc:	4b43      	ldr	r3, [pc, #268]	@ (800a2cc <HAL_RCC_OscConfig+0x6d8>)
 800a1be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a1c2:	4a42      	ldr	r2, [pc, #264]	@ (800a2cc <HAL_RCC_OscConfig+0x6d8>)
 800a1c4:	f023 0304 	bic.w	r3, r3, #4
 800a1c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	689b      	ldr	r3, [r3, #8]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d016      	beq.n	800a202 <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a1d4:	f7fb f91e 	bl	8005414 <HAL_GetTick>
 800a1d8:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a1da:	e00a      	b.n	800a1f2 <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a1dc:	f7fb f91a 	bl	8005414 <HAL_GetTick>
 800a1e0:	4602      	mov	r2, r0
 800a1e2:	69bb      	ldr	r3, [r7, #24]
 800a1e4:	1ad3      	subs	r3, r2, r3
 800a1e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a1ea:	4293      	cmp	r3, r2
 800a1ec:	d901      	bls.n	800a1f2 <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 800a1ee:	2303      	movs	r3, #3
 800a1f0:	e172      	b.n	800a4d8 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a1f2:	4b36      	ldr	r3, [pc, #216]	@ (800a2cc <HAL_RCC_OscConfig+0x6d8>)
 800a1f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a1f8:	f003 0302 	and.w	r3, r3, #2
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d0ed      	beq.n	800a1dc <HAL_RCC_OscConfig+0x5e8>
 800a200:	e01d      	b.n	800a23e <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a202:	f7fb f907 	bl	8005414 <HAL_GetTick>
 800a206:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a208:	e00a      	b.n	800a220 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a20a:	f7fb f903 	bl	8005414 <HAL_GetTick>
 800a20e:	4602      	mov	r2, r0
 800a210:	69bb      	ldr	r3, [r7, #24]
 800a212:	1ad3      	subs	r3, r2, r3
 800a214:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a218:	4293      	cmp	r3, r2
 800a21a:	d901      	bls.n	800a220 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 800a21c:	2303      	movs	r3, #3
 800a21e:	e15b      	b.n	800a4d8 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a220:	4b2a      	ldr	r3, [pc, #168]	@ (800a2cc <HAL_RCC_OscConfig+0x6d8>)
 800a222:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a226:	f003 0302 	and.w	r3, r3, #2
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d1ed      	bne.n	800a20a <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 800a22e:	4b27      	ldr	r3, [pc, #156]	@ (800a2cc <HAL_RCC_OscConfig+0x6d8>)
 800a230:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a234:	4a25      	ldr	r2, [pc, #148]	@ (800a2cc <HAL_RCC_OscConfig+0x6d8>)
 800a236:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a23a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a23e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a242:	2b01      	cmp	r3, #1
 800a244:	d105      	bne.n	800a252 <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a246:	4b21      	ldr	r3, [pc, #132]	@ (800a2cc <HAL_RCC_OscConfig+0x6d8>)
 800a248:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a24a:	4a20      	ldr	r2, [pc, #128]	@ (800a2cc <HAL_RCC_OscConfig+0x6d8>)
 800a24c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a250:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	f003 0320 	and.w	r3, r3, #32
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d041      	beq.n	800a2e2 <HAL_RCC_OscConfig+0x6ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a262:	2b00      	cmp	r3, #0
 800a264:	d01c      	beq.n	800a2a0 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a266:	4b19      	ldr	r3, [pc, #100]	@ (800a2cc <HAL_RCC_OscConfig+0x6d8>)
 800a268:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a26c:	4a17      	ldr	r2, [pc, #92]	@ (800a2cc <HAL_RCC_OscConfig+0x6d8>)
 800a26e:	f043 0301 	orr.w	r3, r3, #1
 800a272:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a276:	f7fb f8cd 	bl	8005414 <HAL_GetTick>
 800a27a:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800a27c:	e008      	b.n	800a290 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a27e:	f7fb f8c9 	bl	8005414 <HAL_GetTick>
 800a282:	4602      	mov	r2, r0
 800a284:	69bb      	ldr	r3, [r7, #24]
 800a286:	1ad3      	subs	r3, r2, r3
 800a288:	2b02      	cmp	r3, #2
 800a28a:	d901      	bls.n	800a290 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 800a28c:	2303      	movs	r3, #3
 800a28e:	e123      	b.n	800a4d8 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800a290:	4b0e      	ldr	r3, [pc, #56]	@ (800a2cc <HAL_RCC_OscConfig+0x6d8>)
 800a292:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a296:	f003 0302 	and.w	r3, r3, #2
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d0ef      	beq.n	800a27e <HAL_RCC_OscConfig+0x68a>
 800a29e:	e020      	b.n	800a2e2 <HAL_RCC_OscConfig+0x6ee>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a2a0:	4b0a      	ldr	r3, [pc, #40]	@ (800a2cc <HAL_RCC_OscConfig+0x6d8>)
 800a2a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a2a6:	4a09      	ldr	r2, [pc, #36]	@ (800a2cc <HAL_RCC_OscConfig+0x6d8>)
 800a2a8:	f023 0301 	bic.w	r3, r3, #1
 800a2ac:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a2b0:	f7fb f8b0 	bl	8005414 <HAL_GetTick>
 800a2b4:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800a2b6:	e00d      	b.n	800a2d4 <HAL_RCC_OscConfig+0x6e0>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a2b8:	f7fb f8ac 	bl	8005414 <HAL_GetTick>
 800a2bc:	4602      	mov	r2, r0
 800a2be:	69bb      	ldr	r3, [r7, #24]
 800a2c0:	1ad3      	subs	r3, r2, r3
 800a2c2:	2b02      	cmp	r3, #2
 800a2c4:	d906      	bls.n	800a2d4 <HAL_RCC_OscConfig+0x6e0>
        {
          return HAL_TIMEOUT;
 800a2c6:	2303      	movs	r3, #3
 800a2c8:	e106      	b.n	800a4d8 <HAL_RCC_OscConfig+0x8e4>
 800a2ca:	bf00      	nop
 800a2cc:	40021000 	.word	0x40021000
 800a2d0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800a2d4:	4b82      	ldr	r3, [pc, #520]	@ (800a4e0 <HAL_RCC_OscConfig+0x8ec>)
 800a2d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a2da:	f003 0302 	and.w	r3, r3, #2
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d1ea      	bne.n	800a2b8 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	f000 80f5 	beq.w	800a4d6 <HAL_RCC_OscConfig+0x8e2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2f0:	2b02      	cmp	r3, #2
 800a2f2:	f040 80cb 	bne.w	800a48c <HAL_RCC_OscConfig+0x898>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800a2f6:	4b7a      	ldr	r3, [pc, #488]	@ (800a4e0 <HAL_RCC_OscConfig+0x8ec>)
 800a2f8:	68db      	ldr	r3, [r3, #12]
 800a2fa:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800a2fc:	69fb      	ldr	r3, [r7, #28]
 800a2fe:	f003 0203 	and.w	r2, r3, #3
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a306:	429a      	cmp	r2, r3
 800a308:	d12c      	bne.n	800a364 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800a30a:	69fb      	ldr	r3, [r7, #28]
 800a30c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a314:	3b01      	subs	r3, #1
 800a316:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800a318:	429a      	cmp	r2, r3
 800a31a:	d123      	bne.n	800a364 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a31c:	69fb      	ldr	r3, [r7, #28]
 800a31e:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a326:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800a328:	429a      	cmp	r2, r3
 800a32a:	d11b      	bne.n	800a364 <HAL_RCC_OscConfig+0x770>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800a32c:	69fb      	ldr	r3, [r7, #28]
 800a32e:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a336:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a338:	429a      	cmp	r2, r3
 800a33a:	d113      	bne.n	800a364 <HAL_RCC_OscConfig+0x770>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a33c:	69fb      	ldr	r3, [r7, #28]
 800a33e:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a346:	085b      	lsrs	r3, r3, #1
 800a348:	3b01      	subs	r3, #1
 800a34a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800a34c:	429a      	cmp	r2, r3
 800a34e:	d109      	bne.n	800a364 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800a350:	69fb      	ldr	r3, [r7, #28]
 800a352:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a35a:	085b      	lsrs	r3, r3, #1
 800a35c:	3b01      	subs	r3, #1
 800a35e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a360:	429a      	cmp	r2, r3
 800a362:	d06d      	beq.n	800a440 <HAL_RCC_OscConfig+0x84c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800a364:	6a3b      	ldr	r3, [r7, #32]
 800a366:	2b0c      	cmp	r3, #12
 800a368:	d068      	beq.n	800a43c <HAL_RCC_OscConfig+0x848>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800a36a:	4b5d      	ldr	r3, [pc, #372]	@ (800a4e0 <HAL_RCC_OscConfig+0x8ec>)
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a372:	2b00      	cmp	r3, #0
 800a374:	d105      	bne.n	800a382 <HAL_RCC_OscConfig+0x78e>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800a376:	4b5a      	ldr	r3, [pc, #360]	@ (800a4e0 <HAL_RCC_OscConfig+0x8ec>)
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d001      	beq.n	800a386 <HAL_RCC_OscConfig+0x792>
#endif
            )
          {
            return HAL_ERROR;
 800a382:	2301      	movs	r3, #1
 800a384:	e0a8      	b.n	800a4d8 <HAL_RCC_OscConfig+0x8e4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800a386:	4b56      	ldr	r3, [pc, #344]	@ (800a4e0 <HAL_RCC_OscConfig+0x8ec>)
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	4a55      	ldr	r2, [pc, #340]	@ (800a4e0 <HAL_RCC_OscConfig+0x8ec>)
 800a38c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a390:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800a392:	f7fb f83f 	bl	8005414 <HAL_GetTick>
 800a396:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a398:	e008      	b.n	800a3ac <HAL_RCC_OscConfig+0x7b8>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a39a:	f7fb f83b 	bl	8005414 <HAL_GetTick>
 800a39e:	4602      	mov	r2, r0
 800a3a0:	69bb      	ldr	r3, [r7, #24]
 800a3a2:	1ad3      	subs	r3, r2, r3
 800a3a4:	2b02      	cmp	r3, #2
 800a3a6:	d901      	bls.n	800a3ac <HAL_RCC_OscConfig+0x7b8>
              {
                return HAL_TIMEOUT;
 800a3a8:	2303      	movs	r3, #3
 800a3aa:	e095      	b.n	800a4d8 <HAL_RCC_OscConfig+0x8e4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a3ac:	4b4c      	ldr	r3, [pc, #304]	@ (800a4e0 <HAL_RCC_OscConfig+0x8ec>)
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d1f0      	bne.n	800a39a <HAL_RCC_OscConfig+0x7a6>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a3b8:	4b49      	ldr	r3, [pc, #292]	@ (800a4e0 <HAL_RCC_OscConfig+0x8ec>)
 800a3ba:	68da      	ldr	r2, [r3, #12]
 800a3bc:	4b49      	ldr	r3, [pc, #292]	@ (800a4e4 <HAL_RCC_OscConfig+0x8f0>)
 800a3be:	4013      	ands	r3, r2
 800a3c0:	687a      	ldr	r2, [r7, #4]
 800a3c2:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 800a3c4:	687a      	ldr	r2, [r7, #4]
 800a3c6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800a3c8:	3a01      	subs	r2, #1
 800a3ca:	0112      	lsls	r2, r2, #4
 800a3cc:	4311      	orrs	r1, r2
 800a3ce:	687a      	ldr	r2, [r7, #4]
 800a3d0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800a3d2:	0212      	lsls	r2, r2, #8
 800a3d4:	4311      	orrs	r1, r2
 800a3d6:	687a      	ldr	r2, [r7, #4]
 800a3d8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800a3da:	0852      	lsrs	r2, r2, #1
 800a3dc:	3a01      	subs	r2, #1
 800a3de:	0552      	lsls	r2, r2, #21
 800a3e0:	4311      	orrs	r1, r2
 800a3e2:	687a      	ldr	r2, [r7, #4]
 800a3e4:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800a3e6:	0852      	lsrs	r2, r2, #1
 800a3e8:	3a01      	subs	r2, #1
 800a3ea:	0652      	lsls	r2, r2, #25
 800a3ec:	4311      	orrs	r1, r2
 800a3ee:	687a      	ldr	r2, [r7, #4]
 800a3f0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800a3f2:	06d2      	lsls	r2, r2, #27
 800a3f4:	430a      	orrs	r2, r1
 800a3f6:	493a      	ldr	r1, [pc, #232]	@ (800a4e0 <HAL_RCC_OscConfig+0x8ec>)
 800a3f8:	4313      	orrs	r3, r2
 800a3fa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800a3fc:	4b38      	ldr	r3, [pc, #224]	@ (800a4e0 <HAL_RCC_OscConfig+0x8ec>)
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	4a37      	ldr	r2, [pc, #220]	@ (800a4e0 <HAL_RCC_OscConfig+0x8ec>)
 800a402:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a406:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800a408:	4b35      	ldr	r3, [pc, #212]	@ (800a4e0 <HAL_RCC_OscConfig+0x8ec>)
 800a40a:	68db      	ldr	r3, [r3, #12]
 800a40c:	4a34      	ldr	r2, [pc, #208]	@ (800a4e0 <HAL_RCC_OscConfig+0x8ec>)
 800a40e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a412:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800a414:	f7fa fffe 	bl	8005414 <HAL_GetTick>
 800a418:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a41a:	e008      	b.n	800a42e <HAL_RCC_OscConfig+0x83a>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a41c:	f7fa fffa 	bl	8005414 <HAL_GetTick>
 800a420:	4602      	mov	r2, r0
 800a422:	69bb      	ldr	r3, [r7, #24]
 800a424:	1ad3      	subs	r3, r2, r3
 800a426:	2b02      	cmp	r3, #2
 800a428:	d901      	bls.n	800a42e <HAL_RCC_OscConfig+0x83a>
              {
                return HAL_TIMEOUT;
 800a42a:	2303      	movs	r3, #3
 800a42c:	e054      	b.n	800a4d8 <HAL_RCC_OscConfig+0x8e4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a42e:	4b2c      	ldr	r3, [pc, #176]	@ (800a4e0 <HAL_RCC_OscConfig+0x8ec>)
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a436:	2b00      	cmp	r3, #0
 800a438:	d0f0      	beq.n	800a41c <HAL_RCC_OscConfig+0x828>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800a43a:	e04c      	b.n	800a4d6 <HAL_RCC_OscConfig+0x8e2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800a43c:	2301      	movs	r3, #1
 800a43e:	e04b      	b.n	800a4d8 <HAL_RCC_OscConfig+0x8e4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a440:	4b27      	ldr	r3, [pc, #156]	@ (800a4e0 <HAL_RCC_OscConfig+0x8ec>)
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d144      	bne.n	800a4d6 <HAL_RCC_OscConfig+0x8e2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800a44c:	4b24      	ldr	r3, [pc, #144]	@ (800a4e0 <HAL_RCC_OscConfig+0x8ec>)
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	4a23      	ldr	r2, [pc, #140]	@ (800a4e0 <HAL_RCC_OscConfig+0x8ec>)
 800a452:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a456:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800a458:	4b21      	ldr	r3, [pc, #132]	@ (800a4e0 <HAL_RCC_OscConfig+0x8ec>)
 800a45a:	68db      	ldr	r3, [r3, #12]
 800a45c:	4a20      	ldr	r2, [pc, #128]	@ (800a4e0 <HAL_RCC_OscConfig+0x8ec>)
 800a45e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a462:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a464:	f7fa ffd6 	bl	8005414 <HAL_GetTick>
 800a468:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a46a:	e008      	b.n	800a47e <HAL_RCC_OscConfig+0x88a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a46c:	f7fa ffd2 	bl	8005414 <HAL_GetTick>
 800a470:	4602      	mov	r2, r0
 800a472:	69bb      	ldr	r3, [r7, #24]
 800a474:	1ad3      	subs	r3, r2, r3
 800a476:	2b02      	cmp	r3, #2
 800a478:	d901      	bls.n	800a47e <HAL_RCC_OscConfig+0x88a>
            {
              return HAL_TIMEOUT;
 800a47a:	2303      	movs	r3, #3
 800a47c:	e02c      	b.n	800a4d8 <HAL_RCC_OscConfig+0x8e4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a47e:	4b18      	ldr	r3, [pc, #96]	@ (800a4e0 <HAL_RCC_OscConfig+0x8ec>)
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a486:	2b00      	cmp	r3, #0
 800a488:	d0f0      	beq.n	800a46c <HAL_RCC_OscConfig+0x878>
 800a48a:	e024      	b.n	800a4d6 <HAL_RCC_OscConfig+0x8e2>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800a48c:	6a3b      	ldr	r3, [r7, #32]
 800a48e:	2b0c      	cmp	r3, #12
 800a490:	d01f      	beq.n	800a4d2 <HAL_RCC_OscConfig+0x8de>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a492:	4b13      	ldr	r3, [pc, #76]	@ (800a4e0 <HAL_RCC_OscConfig+0x8ec>)
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	4a12      	ldr	r2, [pc, #72]	@ (800a4e0 <HAL_RCC_OscConfig+0x8ec>)
 800a498:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a49c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a49e:	f7fa ffb9 	bl	8005414 <HAL_GetTick>
 800a4a2:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a4a4:	e008      	b.n	800a4b8 <HAL_RCC_OscConfig+0x8c4>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a4a6:	f7fa ffb5 	bl	8005414 <HAL_GetTick>
 800a4aa:	4602      	mov	r2, r0
 800a4ac:	69bb      	ldr	r3, [r7, #24]
 800a4ae:	1ad3      	subs	r3, r2, r3
 800a4b0:	2b02      	cmp	r3, #2
 800a4b2:	d901      	bls.n	800a4b8 <HAL_RCC_OscConfig+0x8c4>
          {
            return HAL_TIMEOUT;
 800a4b4:	2303      	movs	r3, #3
 800a4b6:	e00f      	b.n	800a4d8 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a4b8:	4b09      	ldr	r3, [pc, #36]	@ (800a4e0 <HAL_RCC_OscConfig+0x8ec>)
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d1f0      	bne.n	800a4a6 <HAL_RCC_OscConfig+0x8b2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800a4c4:	4b06      	ldr	r3, [pc, #24]	@ (800a4e0 <HAL_RCC_OscConfig+0x8ec>)
 800a4c6:	68da      	ldr	r2, [r3, #12]
 800a4c8:	4905      	ldr	r1, [pc, #20]	@ (800a4e0 <HAL_RCC_OscConfig+0x8ec>)
 800a4ca:	4b07      	ldr	r3, [pc, #28]	@ (800a4e8 <HAL_RCC_OscConfig+0x8f4>)
 800a4cc:	4013      	ands	r3, r2
 800a4ce:	60cb      	str	r3, [r1, #12]
 800a4d0:	e001      	b.n	800a4d6 <HAL_RCC_OscConfig+0x8e2>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800a4d2:	2301      	movs	r3, #1
 800a4d4:	e000      	b.n	800a4d8 <HAL_RCC_OscConfig+0x8e4>
      }
    }
  }
  return HAL_OK;
 800a4d6:	2300      	movs	r3, #0
}
 800a4d8:	4618      	mov	r0, r3
 800a4da:	3728      	adds	r7, #40	@ 0x28
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	bd80      	pop	{r7, pc}
 800a4e0:	40021000 	.word	0x40021000
 800a4e4:	019d800c 	.word	0x019d800c
 800a4e8:	feeefffc 	.word	0xfeeefffc

0800a4ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	b086      	sub	sp, #24
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
 800a4f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d101      	bne.n	800a504 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800a500:	2301      	movs	r3, #1
 800a502:	e11d      	b.n	800a740 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a504:	4b90      	ldr	r3, [pc, #576]	@ (800a748 <HAL_RCC_ClockConfig+0x25c>)
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	f003 030f 	and.w	r3, r3, #15
 800a50c:	683a      	ldr	r2, [r7, #0]
 800a50e:	429a      	cmp	r2, r3
 800a510:	d910      	bls.n	800a534 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a512:	4b8d      	ldr	r3, [pc, #564]	@ (800a748 <HAL_RCC_ClockConfig+0x25c>)
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	f023 020f 	bic.w	r2, r3, #15
 800a51a:	498b      	ldr	r1, [pc, #556]	@ (800a748 <HAL_RCC_ClockConfig+0x25c>)
 800a51c:	683b      	ldr	r3, [r7, #0]
 800a51e:	4313      	orrs	r3, r2
 800a520:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a522:	4b89      	ldr	r3, [pc, #548]	@ (800a748 <HAL_RCC_ClockConfig+0x25c>)
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	f003 030f 	and.w	r3, r3, #15
 800a52a:	683a      	ldr	r2, [r7, #0]
 800a52c:	429a      	cmp	r2, r3
 800a52e:	d001      	beq.n	800a534 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800a530:	2301      	movs	r3, #1
 800a532:	e105      	b.n	800a740 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	f003 0302 	and.w	r3, r3, #2
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d010      	beq.n	800a562 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	689a      	ldr	r2, [r3, #8]
 800a544:	4b81      	ldr	r3, [pc, #516]	@ (800a74c <HAL_RCC_ClockConfig+0x260>)
 800a546:	689b      	ldr	r3, [r3, #8]
 800a548:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a54c:	429a      	cmp	r2, r3
 800a54e:	d908      	bls.n	800a562 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a550:	4b7e      	ldr	r3, [pc, #504]	@ (800a74c <HAL_RCC_ClockConfig+0x260>)
 800a552:	689b      	ldr	r3, [r3, #8]
 800a554:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	689b      	ldr	r3, [r3, #8]
 800a55c:	497b      	ldr	r1, [pc, #492]	@ (800a74c <HAL_RCC_ClockConfig+0x260>)
 800a55e:	4313      	orrs	r3, r2
 800a560:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	f003 0301 	and.w	r3, r3, #1
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d079      	beq.n	800a662 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	685b      	ldr	r3, [r3, #4]
 800a572:	2b03      	cmp	r3, #3
 800a574:	d11e      	bne.n	800a5b4 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a576:	4b75      	ldr	r3, [pc, #468]	@ (800a74c <HAL_RCC_ClockConfig+0x260>)
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d101      	bne.n	800a586 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800a582:	2301      	movs	r3, #1
 800a584:	e0dc      	b.n	800a740 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800a586:	f000 fa23 	bl	800a9d0 <RCC_GetSysClockFreqFromPLLSource>
 800a58a:	4603      	mov	r3, r0
 800a58c:	4a70      	ldr	r2, [pc, #448]	@ (800a750 <HAL_RCC_ClockConfig+0x264>)
 800a58e:	4293      	cmp	r3, r2
 800a590:	d946      	bls.n	800a620 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800a592:	4b6e      	ldr	r3, [pc, #440]	@ (800a74c <HAL_RCC_ClockConfig+0x260>)
 800a594:	689b      	ldr	r3, [r3, #8]
 800a596:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d140      	bne.n	800a620 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800a59e:	4b6b      	ldr	r3, [pc, #428]	@ (800a74c <HAL_RCC_ClockConfig+0x260>)
 800a5a0:	689b      	ldr	r3, [r3, #8]
 800a5a2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a5a6:	4a69      	ldr	r2, [pc, #420]	@ (800a74c <HAL_RCC_ClockConfig+0x260>)
 800a5a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a5ac:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800a5ae:	2380      	movs	r3, #128	@ 0x80
 800a5b0:	617b      	str	r3, [r7, #20]
 800a5b2:	e035      	b.n	800a620 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	685b      	ldr	r3, [r3, #4]
 800a5b8:	2b02      	cmp	r3, #2
 800a5ba:	d107      	bne.n	800a5cc <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a5bc:	4b63      	ldr	r3, [pc, #396]	@ (800a74c <HAL_RCC_ClockConfig+0x260>)
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d115      	bne.n	800a5f4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800a5c8:	2301      	movs	r3, #1
 800a5ca:	e0b9      	b.n	800a740 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	685b      	ldr	r3, [r3, #4]
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d107      	bne.n	800a5e4 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800a5d4:	4b5d      	ldr	r3, [pc, #372]	@ (800a74c <HAL_RCC_ClockConfig+0x260>)
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	f003 0302 	and.w	r3, r3, #2
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d109      	bne.n	800a5f4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800a5e0:	2301      	movs	r3, #1
 800a5e2:	e0ad      	b.n	800a740 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a5e4:	4b59      	ldr	r3, [pc, #356]	@ (800a74c <HAL_RCC_ClockConfig+0x260>)
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d101      	bne.n	800a5f4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800a5f0:	2301      	movs	r3, #1
 800a5f2:	e0a5      	b.n	800a740 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800a5f4:	f000 f8b4 	bl	800a760 <HAL_RCC_GetSysClockFreq>
 800a5f8:	4603      	mov	r3, r0
 800a5fa:	4a55      	ldr	r2, [pc, #340]	@ (800a750 <HAL_RCC_ClockConfig+0x264>)
 800a5fc:	4293      	cmp	r3, r2
 800a5fe:	d90f      	bls.n	800a620 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800a600:	4b52      	ldr	r3, [pc, #328]	@ (800a74c <HAL_RCC_ClockConfig+0x260>)
 800a602:	689b      	ldr	r3, [r3, #8]
 800a604:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d109      	bne.n	800a620 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800a60c:	4b4f      	ldr	r3, [pc, #316]	@ (800a74c <HAL_RCC_ClockConfig+0x260>)
 800a60e:	689b      	ldr	r3, [r3, #8]
 800a610:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a614:	4a4d      	ldr	r2, [pc, #308]	@ (800a74c <HAL_RCC_ClockConfig+0x260>)
 800a616:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a61a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800a61c:	2380      	movs	r3, #128	@ 0x80
 800a61e:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a620:	4b4a      	ldr	r3, [pc, #296]	@ (800a74c <HAL_RCC_ClockConfig+0x260>)
 800a622:	689b      	ldr	r3, [r3, #8]
 800a624:	f023 0203 	bic.w	r2, r3, #3
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	685b      	ldr	r3, [r3, #4]
 800a62c:	4947      	ldr	r1, [pc, #284]	@ (800a74c <HAL_RCC_ClockConfig+0x260>)
 800a62e:	4313      	orrs	r3, r2
 800a630:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a632:	f7fa feef 	bl	8005414 <HAL_GetTick>
 800a636:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a638:	e00a      	b.n	800a650 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a63a:	f7fa feeb 	bl	8005414 <HAL_GetTick>
 800a63e:	4602      	mov	r2, r0
 800a640:	693b      	ldr	r3, [r7, #16]
 800a642:	1ad3      	subs	r3, r2, r3
 800a644:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a648:	4293      	cmp	r3, r2
 800a64a:	d901      	bls.n	800a650 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 800a64c:	2303      	movs	r3, #3
 800a64e:	e077      	b.n	800a740 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a650:	4b3e      	ldr	r3, [pc, #248]	@ (800a74c <HAL_RCC_ClockConfig+0x260>)
 800a652:	689b      	ldr	r3, [r3, #8]
 800a654:	f003 020c 	and.w	r2, r3, #12
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	685b      	ldr	r3, [r3, #4]
 800a65c:	009b      	lsls	r3, r3, #2
 800a65e:	429a      	cmp	r2, r3
 800a660:	d1eb      	bne.n	800a63a <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800a662:	697b      	ldr	r3, [r7, #20]
 800a664:	2b80      	cmp	r3, #128	@ 0x80
 800a666:	d105      	bne.n	800a674 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800a668:	4b38      	ldr	r3, [pc, #224]	@ (800a74c <HAL_RCC_ClockConfig+0x260>)
 800a66a:	689b      	ldr	r3, [r3, #8]
 800a66c:	4a37      	ldr	r2, [pc, #220]	@ (800a74c <HAL_RCC_ClockConfig+0x260>)
 800a66e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a672:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	f003 0302 	and.w	r3, r3, #2
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d010      	beq.n	800a6a2 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	689a      	ldr	r2, [r3, #8]
 800a684:	4b31      	ldr	r3, [pc, #196]	@ (800a74c <HAL_RCC_ClockConfig+0x260>)
 800a686:	689b      	ldr	r3, [r3, #8]
 800a688:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a68c:	429a      	cmp	r2, r3
 800a68e:	d208      	bcs.n	800a6a2 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a690:	4b2e      	ldr	r3, [pc, #184]	@ (800a74c <HAL_RCC_ClockConfig+0x260>)
 800a692:	689b      	ldr	r3, [r3, #8]
 800a694:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	689b      	ldr	r3, [r3, #8]
 800a69c:	492b      	ldr	r1, [pc, #172]	@ (800a74c <HAL_RCC_ClockConfig+0x260>)
 800a69e:	4313      	orrs	r3, r2
 800a6a0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a6a2:	4b29      	ldr	r3, [pc, #164]	@ (800a748 <HAL_RCC_ClockConfig+0x25c>)
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	f003 030f 	and.w	r3, r3, #15
 800a6aa:	683a      	ldr	r2, [r7, #0]
 800a6ac:	429a      	cmp	r2, r3
 800a6ae:	d210      	bcs.n	800a6d2 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a6b0:	4b25      	ldr	r3, [pc, #148]	@ (800a748 <HAL_RCC_ClockConfig+0x25c>)
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	f023 020f 	bic.w	r2, r3, #15
 800a6b8:	4923      	ldr	r1, [pc, #140]	@ (800a748 <HAL_RCC_ClockConfig+0x25c>)
 800a6ba:	683b      	ldr	r3, [r7, #0]
 800a6bc:	4313      	orrs	r3, r2
 800a6be:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a6c0:	4b21      	ldr	r3, [pc, #132]	@ (800a748 <HAL_RCC_ClockConfig+0x25c>)
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	f003 030f 	and.w	r3, r3, #15
 800a6c8:	683a      	ldr	r2, [r7, #0]
 800a6ca:	429a      	cmp	r2, r3
 800a6cc:	d001      	beq.n	800a6d2 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 800a6ce:	2301      	movs	r3, #1
 800a6d0:	e036      	b.n	800a740 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	f003 0304 	and.w	r3, r3, #4
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d008      	beq.n	800a6f0 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a6de:	4b1b      	ldr	r3, [pc, #108]	@ (800a74c <HAL_RCC_ClockConfig+0x260>)
 800a6e0:	689b      	ldr	r3, [r3, #8]
 800a6e2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	68db      	ldr	r3, [r3, #12]
 800a6ea:	4918      	ldr	r1, [pc, #96]	@ (800a74c <HAL_RCC_ClockConfig+0x260>)
 800a6ec:	4313      	orrs	r3, r2
 800a6ee:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	f003 0308 	and.w	r3, r3, #8
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d009      	beq.n	800a710 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a6fc:	4b13      	ldr	r3, [pc, #76]	@ (800a74c <HAL_RCC_ClockConfig+0x260>)
 800a6fe:	689b      	ldr	r3, [r3, #8]
 800a700:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	691b      	ldr	r3, [r3, #16]
 800a708:	00db      	lsls	r3, r3, #3
 800a70a:	4910      	ldr	r1, [pc, #64]	@ (800a74c <HAL_RCC_ClockConfig+0x260>)
 800a70c:	4313      	orrs	r3, r2
 800a70e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800a710:	f000 f826 	bl	800a760 <HAL_RCC_GetSysClockFreq>
 800a714:	4602      	mov	r2, r0
 800a716:	4b0d      	ldr	r3, [pc, #52]	@ (800a74c <HAL_RCC_ClockConfig+0x260>)
 800a718:	689b      	ldr	r3, [r3, #8]
 800a71a:	091b      	lsrs	r3, r3, #4
 800a71c:	f003 030f 	and.w	r3, r3, #15
 800a720:	490c      	ldr	r1, [pc, #48]	@ (800a754 <HAL_RCC_ClockConfig+0x268>)
 800a722:	5ccb      	ldrb	r3, [r1, r3]
 800a724:	f003 031f 	and.w	r3, r3, #31
 800a728:	fa22 f303 	lsr.w	r3, r2, r3
 800a72c:	4a0a      	ldr	r2, [pc, #40]	@ (800a758 <HAL_RCC_ClockConfig+0x26c>)
 800a72e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800a730:	4b0a      	ldr	r3, [pc, #40]	@ (800a75c <HAL_RCC_ClockConfig+0x270>)
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	4618      	mov	r0, r3
 800a736:	f7fa fc5b 	bl	8004ff0 <HAL_InitTick>
 800a73a:	4603      	mov	r3, r0
 800a73c:	73fb      	strb	r3, [r7, #15]

  return status;
 800a73e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a740:	4618      	mov	r0, r3
 800a742:	3718      	adds	r7, #24
 800a744:	46bd      	mov	sp, r7
 800a746:	bd80      	pop	{r7, pc}
 800a748:	40022000 	.word	0x40022000
 800a74c:	40021000 	.word	0x40021000
 800a750:	04c4b400 	.word	0x04c4b400
 800a754:	08017498 	.word	0x08017498
 800a758:	20000298 	.word	0x20000298
 800a75c:	2000029c 	.word	0x2000029c

0800a760 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a760:	b480      	push	{r7}
 800a762:	b089      	sub	sp, #36	@ 0x24
 800a764:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800a766:	2300      	movs	r3, #0
 800a768:	61fb      	str	r3, [r7, #28]
 800a76a:	2300      	movs	r3, #0
 800a76c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a76e:	4b3e      	ldr	r3, [pc, #248]	@ (800a868 <HAL_RCC_GetSysClockFreq+0x108>)
 800a770:	689b      	ldr	r3, [r3, #8]
 800a772:	f003 030c 	and.w	r3, r3, #12
 800a776:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a778:	4b3b      	ldr	r3, [pc, #236]	@ (800a868 <HAL_RCC_GetSysClockFreq+0x108>)
 800a77a:	68db      	ldr	r3, [r3, #12]
 800a77c:	f003 0303 	and.w	r3, r3, #3
 800a780:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800a782:	693b      	ldr	r3, [r7, #16]
 800a784:	2b00      	cmp	r3, #0
 800a786:	d005      	beq.n	800a794 <HAL_RCC_GetSysClockFreq+0x34>
 800a788:	693b      	ldr	r3, [r7, #16]
 800a78a:	2b0c      	cmp	r3, #12
 800a78c:	d121      	bne.n	800a7d2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	2b01      	cmp	r3, #1
 800a792:	d11e      	bne.n	800a7d2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800a794:	4b34      	ldr	r3, [pc, #208]	@ (800a868 <HAL_RCC_GetSysClockFreq+0x108>)
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	f003 0308 	and.w	r3, r3, #8
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d107      	bne.n	800a7b0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800a7a0:	4b31      	ldr	r3, [pc, #196]	@ (800a868 <HAL_RCC_GetSysClockFreq+0x108>)
 800a7a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a7a6:	0a1b      	lsrs	r3, r3, #8
 800a7a8:	f003 030f 	and.w	r3, r3, #15
 800a7ac:	61fb      	str	r3, [r7, #28]
 800a7ae:	e005      	b.n	800a7bc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800a7b0:	4b2d      	ldr	r3, [pc, #180]	@ (800a868 <HAL_RCC_GetSysClockFreq+0x108>)
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	091b      	lsrs	r3, r3, #4
 800a7b6:	f003 030f 	and.w	r3, r3, #15
 800a7ba:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800a7bc:	4a2b      	ldr	r2, [pc, #172]	@ (800a86c <HAL_RCC_GetSysClockFreq+0x10c>)
 800a7be:	69fb      	ldr	r3, [r7, #28]
 800a7c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a7c4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800a7c6:	693b      	ldr	r3, [r7, #16]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d10d      	bne.n	800a7e8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800a7cc:	69fb      	ldr	r3, [r7, #28]
 800a7ce:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800a7d0:	e00a      	b.n	800a7e8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800a7d2:	693b      	ldr	r3, [r7, #16]
 800a7d4:	2b04      	cmp	r3, #4
 800a7d6:	d102      	bne.n	800a7de <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800a7d8:	4b25      	ldr	r3, [pc, #148]	@ (800a870 <HAL_RCC_GetSysClockFreq+0x110>)
 800a7da:	61bb      	str	r3, [r7, #24]
 800a7dc:	e004      	b.n	800a7e8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800a7de:	693b      	ldr	r3, [r7, #16]
 800a7e0:	2b08      	cmp	r3, #8
 800a7e2:	d101      	bne.n	800a7e8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800a7e4:	4b22      	ldr	r3, [pc, #136]	@ (800a870 <HAL_RCC_GetSysClockFreq+0x110>)
 800a7e6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800a7e8:	693b      	ldr	r3, [r7, #16]
 800a7ea:	2b0c      	cmp	r3, #12
 800a7ec:	d134      	bne.n	800a858 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800a7ee:	4b1e      	ldr	r3, [pc, #120]	@ (800a868 <HAL_RCC_GetSysClockFreq+0x108>)
 800a7f0:	68db      	ldr	r3, [r3, #12]
 800a7f2:	f003 0303 	and.w	r3, r3, #3
 800a7f6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800a7f8:	68bb      	ldr	r3, [r7, #8]
 800a7fa:	2b02      	cmp	r3, #2
 800a7fc:	d003      	beq.n	800a806 <HAL_RCC_GetSysClockFreq+0xa6>
 800a7fe:	68bb      	ldr	r3, [r7, #8]
 800a800:	2b03      	cmp	r3, #3
 800a802:	d003      	beq.n	800a80c <HAL_RCC_GetSysClockFreq+0xac>
 800a804:	e005      	b.n	800a812 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800a806:	4b1a      	ldr	r3, [pc, #104]	@ (800a870 <HAL_RCC_GetSysClockFreq+0x110>)
 800a808:	617b      	str	r3, [r7, #20]
      break;
 800a80a:	e005      	b.n	800a818 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800a80c:	4b18      	ldr	r3, [pc, #96]	@ (800a870 <HAL_RCC_GetSysClockFreq+0x110>)
 800a80e:	617b      	str	r3, [r7, #20]
      break;
 800a810:	e002      	b.n	800a818 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800a812:	69fb      	ldr	r3, [r7, #28]
 800a814:	617b      	str	r3, [r7, #20]
      break;
 800a816:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800a818:	4b13      	ldr	r3, [pc, #76]	@ (800a868 <HAL_RCC_GetSysClockFreq+0x108>)
 800a81a:	68db      	ldr	r3, [r3, #12]
 800a81c:	091b      	lsrs	r3, r3, #4
 800a81e:	f003 030f 	and.w	r3, r3, #15
 800a822:	3301      	adds	r3, #1
 800a824:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800a826:	4b10      	ldr	r3, [pc, #64]	@ (800a868 <HAL_RCC_GetSysClockFreq+0x108>)
 800a828:	68db      	ldr	r3, [r3, #12]
 800a82a:	0a1b      	lsrs	r3, r3, #8
 800a82c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a830:	697a      	ldr	r2, [r7, #20]
 800a832:	fb03 f202 	mul.w	r2, r3, r2
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	fbb2 f3f3 	udiv	r3, r2, r3
 800a83c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800a83e:	4b0a      	ldr	r3, [pc, #40]	@ (800a868 <HAL_RCC_GetSysClockFreq+0x108>)
 800a840:	68db      	ldr	r3, [r3, #12]
 800a842:	0e5b      	lsrs	r3, r3, #25
 800a844:	f003 0303 	and.w	r3, r3, #3
 800a848:	3301      	adds	r3, #1
 800a84a:	005b      	lsls	r3, r3, #1
 800a84c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800a84e:	697a      	ldr	r2, [r7, #20]
 800a850:	683b      	ldr	r3, [r7, #0]
 800a852:	fbb2 f3f3 	udiv	r3, r2, r3
 800a856:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800a858:	69bb      	ldr	r3, [r7, #24]
}
 800a85a:	4618      	mov	r0, r3
 800a85c:	3724      	adds	r7, #36	@ 0x24
 800a85e:	46bd      	mov	sp, r7
 800a860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a864:	4770      	bx	lr
 800a866:	bf00      	nop
 800a868:	40021000 	.word	0x40021000
 800a86c:	080174b0 	.word	0x080174b0
 800a870:	00f42400 	.word	0x00f42400

0800a874 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a874:	b480      	push	{r7}
 800a876:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a878:	4b03      	ldr	r3, [pc, #12]	@ (800a888 <HAL_RCC_GetHCLKFreq+0x14>)
 800a87a:	681b      	ldr	r3, [r3, #0]
}
 800a87c:	4618      	mov	r0, r3
 800a87e:	46bd      	mov	sp, r7
 800a880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a884:	4770      	bx	lr
 800a886:	bf00      	nop
 800a888:	20000298 	.word	0x20000298

0800a88c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a88c:	b580      	push	{r7, lr}
 800a88e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800a890:	f7ff fff0 	bl	800a874 <HAL_RCC_GetHCLKFreq>
 800a894:	4602      	mov	r2, r0
 800a896:	4b06      	ldr	r3, [pc, #24]	@ (800a8b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a898:	689b      	ldr	r3, [r3, #8]
 800a89a:	0adb      	lsrs	r3, r3, #11
 800a89c:	f003 0307 	and.w	r3, r3, #7
 800a8a0:	4904      	ldr	r1, [pc, #16]	@ (800a8b4 <HAL_RCC_GetPCLK2Freq+0x28>)
 800a8a2:	5ccb      	ldrb	r3, [r1, r3]
 800a8a4:	f003 031f 	and.w	r3, r3, #31
 800a8a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	bd80      	pop	{r7, pc}
 800a8b0:	40021000 	.word	0x40021000
 800a8b4:	080174a8 	.word	0x080174a8

0800a8b8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800a8b8:	b480      	push	{r7}
 800a8ba:	b083      	sub	sp, #12
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
 800a8c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	220f      	movs	r2, #15
 800a8c6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800a8c8:	4b12      	ldr	r3, [pc, #72]	@ (800a914 <HAL_RCC_GetClockConfig+0x5c>)
 800a8ca:	689b      	ldr	r3, [r3, #8]
 800a8cc:	f003 0203 	and.w	r2, r3, #3
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800a8d4:	4b0f      	ldr	r3, [pc, #60]	@ (800a914 <HAL_RCC_GetClockConfig+0x5c>)
 800a8d6:	689b      	ldr	r3, [r3, #8]
 800a8d8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800a8e0:	4b0c      	ldr	r3, [pc, #48]	@ (800a914 <HAL_RCC_GetClockConfig+0x5c>)
 800a8e2:	689b      	ldr	r3, [r3, #8]
 800a8e4:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800a8ec:	4b09      	ldr	r3, [pc, #36]	@ (800a914 <HAL_RCC_GetClockConfig+0x5c>)
 800a8ee:	689b      	ldr	r3, [r3, #8]
 800a8f0:	08db      	lsrs	r3, r3, #3
 800a8f2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800a8fa:	4b07      	ldr	r3, [pc, #28]	@ (800a918 <HAL_RCC_GetClockConfig+0x60>)
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	f003 020f 	and.w	r2, r3, #15
 800a902:	683b      	ldr	r3, [r7, #0]
 800a904:	601a      	str	r2, [r3, #0]
}
 800a906:	bf00      	nop
 800a908:	370c      	adds	r7, #12
 800a90a:	46bd      	mov	sp, r7
 800a90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a910:	4770      	bx	lr
 800a912:	bf00      	nop
 800a914:	40021000 	.word	0x40021000
 800a918:	40022000 	.word	0x40022000

0800a91c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800a91c:	b580      	push	{r7, lr}
 800a91e:	b086      	sub	sp, #24
 800a920:	af00      	add	r7, sp, #0
 800a922:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800a924:	2300      	movs	r3, #0
 800a926:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800a928:	4b27      	ldr	r3, [pc, #156]	@ (800a9c8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800a92a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a92c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a930:	2b00      	cmp	r3, #0
 800a932:	d003      	beq.n	800a93c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800a934:	f7ff f834 	bl	80099a0 <HAL_PWREx_GetVoltageRange>
 800a938:	6178      	str	r0, [r7, #20]
 800a93a:	e014      	b.n	800a966 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800a93c:	4b22      	ldr	r3, [pc, #136]	@ (800a9c8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800a93e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a940:	4a21      	ldr	r2, [pc, #132]	@ (800a9c8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800a942:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a946:	6593      	str	r3, [r2, #88]	@ 0x58
 800a948:	4b1f      	ldr	r3, [pc, #124]	@ (800a9c8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800a94a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a94c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a950:	60fb      	str	r3, [r7, #12]
 800a952:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800a954:	f7ff f824 	bl	80099a0 <HAL_PWREx_GetVoltageRange>
 800a958:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800a95a:	4b1b      	ldr	r3, [pc, #108]	@ (800a9c8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800a95c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a95e:	4a1a      	ldr	r2, [pc, #104]	@ (800a9c8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800a960:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a964:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800a966:	697b      	ldr	r3, [r7, #20]
 800a968:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a96c:	d10b      	bne.n	800a986 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	2b80      	cmp	r3, #128	@ 0x80
 800a972:	d913      	bls.n	800a99c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	2ba0      	cmp	r3, #160	@ 0xa0
 800a978:	d902      	bls.n	800a980 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800a97a:	2302      	movs	r3, #2
 800a97c:	613b      	str	r3, [r7, #16]
 800a97e:	e00d      	b.n	800a99c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800a980:	2301      	movs	r3, #1
 800a982:	613b      	str	r3, [r7, #16]
 800a984:	e00a      	b.n	800a99c <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	2b7f      	cmp	r3, #127	@ 0x7f
 800a98a:	d902      	bls.n	800a992 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 800a98c:	2302      	movs	r3, #2
 800a98e:	613b      	str	r3, [r7, #16]
 800a990:	e004      	b.n	800a99c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	2b70      	cmp	r3, #112	@ 0x70
 800a996:	d101      	bne.n	800a99c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800a998:	2301      	movs	r3, #1
 800a99a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800a99c:	4b0b      	ldr	r3, [pc, #44]	@ (800a9cc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	f023 020f 	bic.w	r2, r3, #15
 800a9a4:	4909      	ldr	r1, [pc, #36]	@ (800a9cc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800a9a6:	693b      	ldr	r3, [r7, #16]
 800a9a8:	4313      	orrs	r3, r2
 800a9aa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800a9ac:	4b07      	ldr	r3, [pc, #28]	@ (800a9cc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	f003 030f 	and.w	r3, r3, #15
 800a9b4:	693a      	ldr	r2, [r7, #16]
 800a9b6:	429a      	cmp	r2, r3
 800a9b8:	d001      	beq.n	800a9be <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800a9ba:	2301      	movs	r3, #1
 800a9bc:	e000      	b.n	800a9c0 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800a9be:	2300      	movs	r3, #0
}
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	3718      	adds	r7, #24
 800a9c4:	46bd      	mov	sp, r7
 800a9c6:	bd80      	pop	{r7, pc}
 800a9c8:	40021000 	.word	0x40021000
 800a9cc:	40022000 	.word	0x40022000

0800a9d0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800a9d0:	b480      	push	{r7}
 800a9d2:	b087      	sub	sp, #28
 800a9d4:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800a9d6:	4b2d      	ldr	r3, [pc, #180]	@ (800aa8c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800a9d8:	68db      	ldr	r3, [r3, #12]
 800a9da:	f003 0303 	and.w	r3, r3, #3
 800a9de:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	2b03      	cmp	r3, #3
 800a9e4:	d00b      	beq.n	800a9fe <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	2b03      	cmp	r3, #3
 800a9ea:	d825      	bhi.n	800aa38 <RCC_GetSysClockFreqFromPLLSource+0x68>
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	2b01      	cmp	r3, #1
 800a9f0:	d008      	beq.n	800aa04 <RCC_GetSysClockFreqFromPLLSource+0x34>
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	2b02      	cmp	r3, #2
 800a9f6:	d11f      	bne.n	800aa38 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 800a9f8:	4b25      	ldr	r3, [pc, #148]	@ (800aa90 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800a9fa:	613b      	str	r3, [r7, #16]
    break;
 800a9fc:	e01f      	b.n	800aa3e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800a9fe:	4b24      	ldr	r3, [pc, #144]	@ (800aa90 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800aa00:	613b      	str	r3, [r7, #16]
    break;
 800aa02:	e01c      	b.n	800aa3e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800aa04:	4b21      	ldr	r3, [pc, #132]	@ (800aa8c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	f003 0308 	and.w	r3, r3, #8
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d107      	bne.n	800aa20 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800aa10:	4b1e      	ldr	r3, [pc, #120]	@ (800aa8c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800aa12:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800aa16:	0a1b      	lsrs	r3, r3, #8
 800aa18:	f003 030f 	and.w	r3, r3, #15
 800aa1c:	617b      	str	r3, [r7, #20]
 800aa1e:	e005      	b.n	800aa2c <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800aa20:	4b1a      	ldr	r3, [pc, #104]	@ (800aa8c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	091b      	lsrs	r3, r3, #4
 800aa26:	f003 030f 	and.w	r3, r3, #15
 800aa2a:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 800aa2c:	4a19      	ldr	r2, [pc, #100]	@ (800aa94 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 800aa2e:	697b      	ldr	r3, [r7, #20]
 800aa30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aa34:	613b      	str	r3, [r7, #16]
    break;
 800aa36:	e002      	b.n	800aa3e <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 800aa38:	2300      	movs	r3, #0
 800aa3a:	613b      	str	r3, [r7, #16]
    break;
 800aa3c:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800aa3e:	4b13      	ldr	r3, [pc, #76]	@ (800aa8c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800aa40:	68db      	ldr	r3, [r3, #12]
 800aa42:	091b      	lsrs	r3, r3, #4
 800aa44:	f003 030f 	and.w	r3, r3, #15
 800aa48:	3301      	adds	r3, #1
 800aa4a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800aa4c:	4b0f      	ldr	r3, [pc, #60]	@ (800aa8c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800aa4e:	68db      	ldr	r3, [r3, #12]
 800aa50:	0a1b      	lsrs	r3, r3, #8
 800aa52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aa56:	693a      	ldr	r2, [r7, #16]
 800aa58:	fb03 f202 	mul.w	r2, r3, r2
 800aa5c:	68bb      	ldr	r3, [r7, #8]
 800aa5e:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa62:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800aa64:	4b09      	ldr	r3, [pc, #36]	@ (800aa8c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800aa66:	68db      	ldr	r3, [r3, #12]
 800aa68:	0e5b      	lsrs	r3, r3, #25
 800aa6a:	f003 0303 	and.w	r3, r3, #3
 800aa6e:	3301      	adds	r3, #1
 800aa70:	005b      	lsls	r3, r3, #1
 800aa72:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800aa74:	693a      	ldr	r2, [r7, #16]
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa7c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800aa7e:	683b      	ldr	r3, [r7, #0]
}
 800aa80:	4618      	mov	r0, r3
 800aa82:	371c      	adds	r7, #28
 800aa84:	46bd      	mov	sp, r7
 800aa86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8a:	4770      	bx	lr
 800aa8c:	40021000 	.word	0x40021000
 800aa90:	00f42400 	.word	0x00f42400
 800aa94:	080174b0 	.word	0x080174b0

0800aa98 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800aa98:	b580      	push	{r7, lr}
 800aa9a:	b086      	sub	sp, #24
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800aaa0:	2300      	movs	r3, #0
 800aaa2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d040      	beq.n	800ab36 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aab8:	2b80      	cmp	r3, #128	@ 0x80
 800aaba:	d02a      	beq.n	800ab12 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800aabc:	2b80      	cmp	r3, #128	@ 0x80
 800aabe:	d825      	bhi.n	800ab0c <HAL_RCCEx_PeriphCLKConfig+0x74>
 800aac0:	2b60      	cmp	r3, #96	@ 0x60
 800aac2:	d026      	beq.n	800ab12 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800aac4:	2b60      	cmp	r3, #96	@ 0x60
 800aac6:	d821      	bhi.n	800ab0c <HAL_RCCEx_PeriphCLKConfig+0x74>
 800aac8:	2b40      	cmp	r3, #64	@ 0x40
 800aaca:	d006      	beq.n	800aada <HAL_RCCEx_PeriphCLKConfig+0x42>
 800aacc:	2b40      	cmp	r3, #64	@ 0x40
 800aace:	d81d      	bhi.n	800ab0c <HAL_RCCEx_PeriphCLKConfig+0x74>
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d009      	beq.n	800aae8 <HAL_RCCEx_PeriphCLKConfig+0x50>
 800aad4:	2b20      	cmp	r3, #32
 800aad6:	d010      	beq.n	800aafa <HAL_RCCEx_PeriphCLKConfig+0x62>
 800aad8:	e018      	b.n	800ab0c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800aada:	4b89      	ldr	r3, [pc, #548]	@ (800ad00 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800aadc:	68db      	ldr	r3, [r3, #12]
 800aade:	4a88      	ldr	r2, [pc, #544]	@ (800ad00 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800aae0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800aae4:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800aae6:	e015      	b.n	800ab14 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	3304      	adds	r3, #4
 800aaec:	2100      	movs	r1, #0
 800aaee:	4618      	mov	r0, r3
 800aaf0:	f000 fb3e 	bl	800b170 <RCCEx_PLLSAI1_Config>
 800aaf4:	4603      	mov	r3, r0
 800aaf6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800aaf8:	e00c      	b.n	800ab14 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	3320      	adds	r3, #32
 800aafe:	2100      	movs	r1, #0
 800ab00:	4618      	mov	r0, r3
 800ab02:	f000 fc29 	bl	800b358 <RCCEx_PLLSAI2_Config>
 800ab06:	4603      	mov	r3, r0
 800ab08:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800ab0a:	e003      	b.n	800ab14 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ab0c:	2301      	movs	r3, #1
 800ab0e:	74fb      	strb	r3, [r7, #19]
      break;
 800ab10:	e000      	b.n	800ab14 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800ab12:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ab14:	7cfb      	ldrb	r3, [r7, #19]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d10b      	bne.n	800ab32 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800ab1a:	4b79      	ldr	r3, [pc, #484]	@ (800ad00 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800ab1c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ab20:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ab28:	4975      	ldr	r1, [pc, #468]	@ (800ad00 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800ab2a:	4313      	orrs	r3, r2
 800ab2c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 800ab30:	e001      	b.n	800ab36 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab32:	7cfb      	ldrb	r3, [r7, #19]
 800ab34:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d047      	beq.n	800abd2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ab46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ab4a:	d030      	beq.n	800abae <HAL_RCCEx_PeriphCLKConfig+0x116>
 800ab4c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ab50:	d82a      	bhi.n	800aba8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800ab52:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ab56:	d02a      	beq.n	800abae <HAL_RCCEx_PeriphCLKConfig+0x116>
 800ab58:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ab5c:	d824      	bhi.n	800aba8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800ab5e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ab62:	d008      	beq.n	800ab76 <HAL_RCCEx_PeriphCLKConfig+0xde>
 800ab64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ab68:	d81e      	bhi.n	800aba8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d00a      	beq.n	800ab84 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800ab6e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ab72:	d010      	beq.n	800ab96 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800ab74:	e018      	b.n	800aba8 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800ab76:	4b62      	ldr	r3, [pc, #392]	@ (800ad00 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800ab78:	68db      	ldr	r3, [r3, #12]
 800ab7a:	4a61      	ldr	r2, [pc, #388]	@ (800ad00 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800ab7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ab80:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800ab82:	e015      	b.n	800abb0 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	3304      	adds	r3, #4
 800ab88:	2100      	movs	r1, #0
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	f000 faf0 	bl	800b170 <RCCEx_PLLSAI1_Config>
 800ab90:	4603      	mov	r3, r0
 800ab92:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800ab94:	e00c      	b.n	800abb0 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	3320      	adds	r3, #32
 800ab9a:	2100      	movs	r1, #0
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	f000 fbdb 	bl	800b358 <RCCEx_PLLSAI2_Config>
 800aba2:	4603      	mov	r3, r0
 800aba4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800aba6:	e003      	b.n	800abb0 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800aba8:	2301      	movs	r3, #1
 800abaa:	74fb      	strb	r3, [r7, #19]
      break;
 800abac:	e000      	b.n	800abb0 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800abae:	bf00      	nop
    }

    if(ret == HAL_OK)
 800abb0:	7cfb      	ldrb	r3, [r7, #19]
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d10b      	bne.n	800abce <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800abb6:	4b52      	ldr	r3, [pc, #328]	@ (800ad00 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800abb8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800abbc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800abc4:	494e      	ldr	r1, [pc, #312]	@ (800ad00 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800abc6:	4313      	orrs	r3, r2
 800abc8:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 800abcc:	e001      	b.n	800abd2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800abce:	7cfb      	ldrb	r3, [r7, #19]
 800abd0:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800abda:	2b00      	cmp	r3, #0
 800abdc:	f000 809f 	beq.w	800ad1e <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 800abe0:	2300      	movs	r3, #0
 800abe2:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800abe4:	4b46      	ldr	r3, [pc, #280]	@ (800ad00 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800abe6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800abe8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800abec:	2b00      	cmp	r3, #0
 800abee:	d101      	bne.n	800abf4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800abf0:	2301      	movs	r3, #1
 800abf2:	e000      	b.n	800abf6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800abf4:	2300      	movs	r3, #0
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d00d      	beq.n	800ac16 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800abfa:	4b41      	ldr	r3, [pc, #260]	@ (800ad00 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800abfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800abfe:	4a40      	ldr	r2, [pc, #256]	@ (800ad00 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800ac00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ac04:	6593      	str	r3, [r2, #88]	@ 0x58
 800ac06:	4b3e      	ldr	r3, [pc, #248]	@ (800ad00 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800ac08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ac0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ac0e:	60bb      	str	r3, [r7, #8]
 800ac10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ac12:	2301      	movs	r3, #1
 800ac14:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ac16:	4b3b      	ldr	r3, [pc, #236]	@ (800ad04 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	4a3a      	ldr	r2, [pc, #232]	@ (800ad04 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800ac1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ac20:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ac22:	f7fa fbf7 	bl	8005414 <HAL_GetTick>
 800ac26:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800ac28:	e009      	b.n	800ac3e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ac2a:	f7fa fbf3 	bl	8005414 <HAL_GetTick>
 800ac2e:	4602      	mov	r2, r0
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	1ad3      	subs	r3, r2, r3
 800ac34:	2b02      	cmp	r3, #2
 800ac36:	d902      	bls.n	800ac3e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 800ac38:	2303      	movs	r3, #3
 800ac3a:	74fb      	strb	r3, [r7, #19]
        break;
 800ac3c:	e005      	b.n	800ac4a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800ac3e:	4b31      	ldr	r3, [pc, #196]	@ (800ad04 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d0ef      	beq.n	800ac2a <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800ac4a:	7cfb      	ldrb	r3, [r7, #19]
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d15b      	bne.n	800ad08 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800ac50:	4b2b      	ldr	r3, [pc, #172]	@ (800ad00 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800ac52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ac56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ac5a:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800ac5c:	697b      	ldr	r3, [r7, #20]
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d01f      	beq.n	800aca2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ac68:	697a      	ldr	r2, [r7, #20]
 800ac6a:	429a      	cmp	r2, r3
 800ac6c:	d019      	beq.n	800aca2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800ac6e:	4b24      	ldr	r3, [pc, #144]	@ (800ad00 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800ac70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ac74:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ac78:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800ac7a:	4b21      	ldr	r3, [pc, #132]	@ (800ad00 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800ac7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ac80:	4a1f      	ldr	r2, [pc, #124]	@ (800ad00 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800ac82:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ac86:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800ac8a:	4b1d      	ldr	r3, [pc, #116]	@ (800ad00 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800ac8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ac90:	4a1b      	ldr	r2, [pc, #108]	@ (800ad00 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800ac92:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ac96:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800ac9a:	4a19      	ldr	r2, [pc, #100]	@ (800ad00 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800ac9c:	697b      	ldr	r3, [r7, #20]
 800ac9e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800aca2:	697b      	ldr	r3, [r7, #20]
 800aca4:	f003 0301 	and.w	r3, r3, #1
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d016      	beq.n	800acda <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800acac:	f7fa fbb2 	bl	8005414 <HAL_GetTick>
 800acb0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800acb2:	e00b      	b.n	800accc <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800acb4:	f7fa fbae 	bl	8005414 <HAL_GetTick>
 800acb8:	4602      	mov	r2, r0
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	1ad3      	subs	r3, r2, r3
 800acbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 800acc2:	4293      	cmp	r3, r2
 800acc4:	d902      	bls.n	800accc <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800acc6:	2303      	movs	r3, #3
 800acc8:	74fb      	strb	r3, [r7, #19]
            break;
 800acca:	e006      	b.n	800acda <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800accc:	4b0c      	ldr	r3, [pc, #48]	@ (800ad00 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800acce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800acd2:	f003 0302 	and.w	r3, r3, #2
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d0ec      	beq.n	800acb4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800acda:	7cfb      	ldrb	r3, [r7, #19]
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d10c      	bne.n	800acfa <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ace0:	4b07      	ldr	r3, [pc, #28]	@ (800ad00 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800ace2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ace6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800acf0:	4903      	ldr	r1, [pc, #12]	@ (800ad00 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800acf2:	4313      	orrs	r3, r2
 800acf4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800acf8:	e008      	b.n	800ad0c <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800acfa:	7cfb      	ldrb	r3, [r7, #19]
 800acfc:	74bb      	strb	r3, [r7, #18]
 800acfe:	e005      	b.n	800ad0c <HAL_RCCEx_PeriphCLKConfig+0x274>
 800ad00:	40021000 	.word	0x40021000
 800ad04:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad08:	7cfb      	ldrb	r3, [r7, #19]
 800ad0a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800ad0c:	7c7b      	ldrb	r3, [r7, #17]
 800ad0e:	2b01      	cmp	r3, #1
 800ad10:	d105      	bne.n	800ad1e <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ad12:	4ba0      	ldr	r3, [pc, #640]	@ (800af94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ad14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ad16:	4a9f      	ldr	r2, [pc, #636]	@ (800af94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ad18:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ad1c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	f003 0301 	and.w	r3, r3, #1
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d00a      	beq.n	800ad40 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800ad2a:	4b9a      	ldr	r3, [pc, #616]	@ (800af94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ad2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ad30:	f023 0203 	bic.w	r2, r3, #3
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ad38:	4996      	ldr	r1, [pc, #600]	@ (800af94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ad3a:	4313      	orrs	r3, r2
 800ad3c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	f003 0302 	and.w	r3, r3, #2
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d00a      	beq.n	800ad62 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800ad4c:	4b91      	ldr	r3, [pc, #580]	@ (800af94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ad4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ad52:	f023 020c 	bic.w	r2, r3, #12
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad5a:	498e      	ldr	r1, [pc, #568]	@ (800af94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ad5c:	4313      	orrs	r3, r2
 800ad5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	f003 0304 	and.w	r3, r3, #4
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d00a      	beq.n	800ad84 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800ad6e:	4b89      	ldr	r3, [pc, #548]	@ (800af94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ad70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ad74:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ad7c:	4985      	ldr	r1, [pc, #532]	@ (800af94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ad7e:	4313      	orrs	r3, r2
 800ad80:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	f003 0308 	and.w	r3, r3, #8
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d00a      	beq.n	800ada6 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800ad90:	4b80      	ldr	r3, [pc, #512]	@ (800af94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ad92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ad96:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ad9e:	497d      	ldr	r1, [pc, #500]	@ (800af94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ada0:	4313      	orrs	r3, r2
 800ada2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	f003 0310 	and.w	r3, r3, #16
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d00a      	beq.n	800adc8 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800adb2:	4b78      	ldr	r3, [pc, #480]	@ (800af94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800adb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800adb8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800adc0:	4974      	ldr	r1, [pc, #464]	@ (800af94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800adc2:	4313      	orrs	r3, r2
 800adc4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	f003 0320 	and.w	r3, r3, #32
 800add0:	2b00      	cmp	r3, #0
 800add2:	d00a      	beq.n	800adea <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800add4:	4b6f      	ldr	r3, [pc, #444]	@ (800af94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800add6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800adda:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ade2:	496c      	ldr	r1, [pc, #432]	@ (800af94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ade4:	4313      	orrs	r3, r2
 800ade6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d00a      	beq.n	800ae0c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800adf6:	4b67      	ldr	r3, [pc, #412]	@ (800af94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800adf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800adfc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ae04:	4963      	ldr	r1, [pc, #396]	@ (800af94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ae06:	4313      	orrs	r3, r2
 800ae08:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d00a      	beq.n	800ae2e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800ae18:	4b5e      	ldr	r3, [pc, #376]	@ (800af94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ae1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ae1e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ae26:	495b      	ldr	r1, [pc, #364]	@ (800af94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ae28:	4313      	orrs	r3, r2
 800ae2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d00a      	beq.n	800ae50 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800ae3a:	4b56      	ldr	r3, [pc, #344]	@ (800af94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ae3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ae40:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ae48:	4952      	ldr	r1, [pc, #328]	@ (800af94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ae4a:	4313      	orrs	r3, r2
 800ae4c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d00a      	beq.n	800ae72 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800ae5c:	4b4d      	ldr	r3, [pc, #308]	@ (800af94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ae5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ae62:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ae6a:	494a      	ldr	r1, [pc, #296]	@ (800af94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ae6c:	4313      	orrs	r3, r2
 800ae6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d00a      	beq.n	800ae94 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800ae7e:	4b45      	ldr	r3, [pc, #276]	@ (800af94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ae80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ae84:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ae8c:	4941      	ldr	r1, [pc, #260]	@ (800af94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ae8e:	4313      	orrs	r3, r2
 800ae90:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d00a      	beq.n	800aeb6 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800aea0:	4b3c      	ldr	r3, [pc, #240]	@ (800af94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800aea2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800aea6:	f023 0203 	bic.w	r2, r3, #3
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800aeae:	4939      	ldr	r1, [pc, #228]	@ (800af94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800aeb0:	4313      	orrs	r3, r2
 800aeb2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d028      	beq.n	800af14 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800aec2:	4b34      	ldr	r3, [pc, #208]	@ (800af94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800aec4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aec8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aed0:	4930      	ldr	r1, [pc, #192]	@ (800af94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800aed2:	4313      	orrs	r3, r2
 800aed4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aedc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800aee0:	d106      	bne.n	800aef0 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800aee2:	4b2c      	ldr	r3, [pc, #176]	@ (800af94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800aee4:	68db      	ldr	r3, [r3, #12]
 800aee6:	4a2b      	ldr	r2, [pc, #172]	@ (800af94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800aee8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800aeec:	60d3      	str	r3, [r2, #12]
 800aeee:	e011      	b.n	800af14 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aef4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800aef8:	d10c      	bne.n	800af14 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	3304      	adds	r3, #4
 800aefe:	2101      	movs	r1, #1
 800af00:	4618      	mov	r0, r3
 800af02:	f000 f935 	bl	800b170 <RCCEx_PLLSAI1_Config>
 800af06:	4603      	mov	r3, r0
 800af08:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800af0a:	7cfb      	ldrb	r3, [r7, #19]
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d001      	beq.n	800af14 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 800af10:	7cfb      	ldrb	r3, [r7, #19]
 800af12:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d04d      	beq.n	800afbc <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800af24:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800af28:	d108      	bne.n	800af3c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800af2a:	4b1a      	ldr	r3, [pc, #104]	@ (800af94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800af2c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800af30:	4a18      	ldr	r2, [pc, #96]	@ (800af94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800af32:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800af36:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800af3a:	e012      	b.n	800af62 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800af3c:	4b15      	ldr	r3, [pc, #84]	@ (800af94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800af3e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800af42:	4a14      	ldr	r2, [pc, #80]	@ (800af94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800af44:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800af48:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800af4c:	4b11      	ldr	r3, [pc, #68]	@ (800af94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800af4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800af52:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800af5a:	490e      	ldr	r1, [pc, #56]	@ (800af94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800af5c:	4313      	orrs	r3, r2
 800af5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800af66:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800af6a:	d106      	bne.n	800af7a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800af6c:	4b09      	ldr	r3, [pc, #36]	@ (800af94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800af6e:	68db      	ldr	r3, [r3, #12]
 800af70:	4a08      	ldr	r2, [pc, #32]	@ (800af94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800af72:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800af76:	60d3      	str	r3, [r2, #12]
 800af78:	e020      	b.n	800afbc <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800af7e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800af82:	d109      	bne.n	800af98 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800af84:	4b03      	ldr	r3, [pc, #12]	@ (800af94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800af86:	68db      	ldr	r3, [r3, #12]
 800af88:	4a02      	ldr	r2, [pc, #8]	@ (800af94 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800af8a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800af8e:	60d3      	str	r3, [r2, #12]
 800af90:	e014      	b.n	800afbc <HAL_RCCEx_PeriphCLKConfig+0x524>
 800af92:	bf00      	nop
 800af94:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800af9c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800afa0:	d10c      	bne.n	800afbc <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	3304      	adds	r3, #4
 800afa6:	2101      	movs	r1, #1
 800afa8:	4618      	mov	r0, r3
 800afaa:	f000 f8e1 	bl	800b170 <RCCEx_PLLSAI1_Config>
 800afae:	4603      	mov	r3, r0
 800afb0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800afb2:	7cfb      	ldrb	r3, [r7, #19]
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d001      	beq.n	800afbc <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 800afb8:	7cfb      	ldrb	r3, [r7, #19]
 800afba:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d028      	beq.n	800b01a <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800afc8:	4b68      	ldr	r3, [pc, #416]	@ (800b16c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800afca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800afce:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800afd6:	4965      	ldr	r1, [pc, #404]	@ (800b16c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800afd8:	4313      	orrs	r3, r2
 800afda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800afe2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800afe6:	d106      	bne.n	800aff6 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800afe8:	4b60      	ldr	r3, [pc, #384]	@ (800b16c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800afea:	68db      	ldr	r3, [r3, #12]
 800afec:	4a5f      	ldr	r2, [pc, #380]	@ (800b16c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800afee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800aff2:	60d3      	str	r3, [r2, #12]
 800aff4:	e011      	b.n	800b01a <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800affa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800affe:	d10c      	bne.n	800b01a <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	3304      	adds	r3, #4
 800b004:	2101      	movs	r1, #1
 800b006:	4618      	mov	r0, r3
 800b008:	f000 f8b2 	bl	800b170 <RCCEx_PLLSAI1_Config>
 800b00c:	4603      	mov	r3, r0
 800b00e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800b010:	7cfb      	ldrb	r3, [r7, #19]
 800b012:	2b00      	cmp	r3, #0
 800b014:	d001      	beq.n	800b01a <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800b016:	7cfb      	ldrb	r3, [r7, #19]
 800b018:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b022:	2b00      	cmp	r3, #0
 800b024:	d01e      	beq.n	800b064 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b026:	4b51      	ldr	r3, [pc, #324]	@ (800b16c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b028:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b02c:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b036:	494d      	ldr	r1, [pc, #308]	@ (800b16c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b038:	4313      	orrs	r3, r2
 800b03a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b044:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b048:	d10c      	bne.n	800b064 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	3304      	adds	r3, #4
 800b04e:	2102      	movs	r1, #2
 800b050:	4618      	mov	r0, r3
 800b052:	f000 f88d 	bl	800b170 <RCCEx_PLLSAI1_Config>
 800b056:	4603      	mov	r3, r0
 800b058:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800b05a:	7cfb      	ldrb	r3, [r7, #19]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d001      	beq.n	800b064 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 800b060:	7cfb      	ldrb	r3, [r7, #19]
 800b062:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d00b      	beq.n	800b088 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b070:	4b3e      	ldr	r3, [pc, #248]	@ (800b16c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b072:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b076:	f023 0204 	bic.w	r2, r3, #4
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b080:	493a      	ldr	r1, [pc, #232]	@ (800b16c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b082:	4313      	orrs	r3, r2
 800b084:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b090:	2b00      	cmp	r3, #0
 800b092:	d00b      	beq.n	800b0ac <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800b094:	4b35      	ldr	r3, [pc, #212]	@ (800b16c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b096:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b09a:	f023 0218 	bic.w	r2, r3, #24
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b0a4:	4931      	ldr	r1, [pc, #196]	@ (800b16c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b0a6:	4313      	orrs	r3, r2
 800b0a8:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d035      	beq.n	800b124 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800b0b8:	4b2c      	ldr	r3, [pc, #176]	@ (800b16c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	4a2b      	ldr	r2, [pc, #172]	@ (800b16c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b0be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b0c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b0c4:	f7fa f9a6 	bl	8005414 <HAL_GetTick>
 800b0c8:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800b0ca:	e009      	b.n	800b0e0 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800b0cc:	f7fa f9a2 	bl	8005414 <HAL_GetTick>
 800b0d0:	4602      	mov	r2, r0
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	1ad3      	subs	r3, r2, r3
 800b0d6:	2b02      	cmp	r3, #2
 800b0d8:	d902      	bls.n	800b0e0 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 800b0da:	2303      	movs	r3, #3
 800b0dc:	74fb      	strb	r3, [r7, #19]
        break;
 800b0de:	e005      	b.n	800b0ec <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800b0e0:	4b22      	ldr	r3, [pc, #136]	@ (800b16c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d1ef      	bne.n	800b0cc <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 800b0ec:	7cfb      	ldrb	r3, [r7, #19]
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d113      	bne.n	800b11a <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 800b0f2:	4b1e      	ldr	r3, [pc, #120]	@ (800b16c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b0f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b0f8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b102:	491a      	ldr	r1, [pc, #104]	@ (800b16c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b104:	4313      	orrs	r3, r2
 800b106:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	3320      	adds	r3, #32
 800b10e:	2102      	movs	r1, #2
 800b110:	4618      	mov	r0, r3
 800b112:	f000 f921 	bl	800b358 <RCCEx_PLLSAI2_Config>
 800b116:	4603      	mov	r3, r0
 800b118:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 800b11a:	7cfb      	ldrb	r3, [r7, #19]
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d001      	beq.n	800b124 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 800b120:	7cfb      	ldrb	r3, [r7, #19]
 800b122:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d017      	beq.n	800b160 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800b130:	4b0e      	ldr	r3, [pc, #56]	@ (800b16c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b132:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b136:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b140:	490a      	ldr	r1, [pc, #40]	@ (800b16c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b142:	4313      	orrs	r3, r2
 800b144:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b14e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b152:	d105      	bne.n	800b160 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b154:	4b05      	ldr	r3, [pc, #20]	@ (800b16c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b156:	68db      	ldr	r3, [r3, #12]
 800b158:	4a04      	ldr	r2, [pc, #16]	@ (800b16c <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b15a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b15e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800b160:	7cbb      	ldrb	r3, [r7, #18]
}
 800b162:	4618      	mov	r0, r3
 800b164:	3718      	adds	r7, #24
 800b166:	46bd      	mov	sp, r7
 800b168:	bd80      	pop	{r7, pc}
 800b16a:	bf00      	nop
 800b16c:	40021000 	.word	0x40021000

0800b170 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800b170:	b580      	push	{r7, lr}
 800b172:	b084      	sub	sp, #16
 800b174:	af00      	add	r7, sp, #0
 800b176:	6078      	str	r0, [r7, #4]
 800b178:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b17a:	2300      	movs	r3, #0
 800b17c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800b17e:	4b72      	ldr	r3, [pc, #456]	@ (800b348 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b180:	68db      	ldr	r3, [r3, #12]
 800b182:	f003 0303 	and.w	r3, r3, #3
 800b186:	2b00      	cmp	r3, #0
 800b188:	d00e      	beq.n	800b1a8 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800b18a:	4b6f      	ldr	r3, [pc, #444]	@ (800b348 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b18c:	68db      	ldr	r3, [r3, #12]
 800b18e:	f003 0203 	and.w	r2, r3, #3
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	429a      	cmp	r2, r3
 800b198:	d103      	bne.n	800b1a2 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	681b      	ldr	r3, [r3, #0]
       ||
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d142      	bne.n	800b228 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800b1a2:	2301      	movs	r3, #1
 800b1a4:	73fb      	strb	r3, [r7, #15]
 800b1a6:	e03f      	b.n	800b228 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	2b03      	cmp	r3, #3
 800b1ae:	d018      	beq.n	800b1e2 <RCCEx_PLLSAI1_Config+0x72>
 800b1b0:	2b03      	cmp	r3, #3
 800b1b2:	d825      	bhi.n	800b200 <RCCEx_PLLSAI1_Config+0x90>
 800b1b4:	2b01      	cmp	r3, #1
 800b1b6:	d002      	beq.n	800b1be <RCCEx_PLLSAI1_Config+0x4e>
 800b1b8:	2b02      	cmp	r3, #2
 800b1ba:	d009      	beq.n	800b1d0 <RCCEx_PLLSAI1_Config+0x60>
 800b1bc:	e020      	b.n	800b200 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800b1be:	4b62      	ldr	r3, [pc, #392]	@ (800b348 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	f003 0302 	and.w	r3, r3, #2
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d11d      	bne.n	800b206 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800b1ca:	2301      	movs	r3, #1
 800b1cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b1ce:	e01a      	b.n	800b206 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800b1d0:	4b5d      	ldr	r3, [pc, #372]	@ (800b348 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d116      	bne.n	800b20a <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 800b1dc:	2301      	movs	r3, #1
 800b1de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b1e0:	e013      	b.n	800b20a <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800b1e2:	4b59      	ldr	r3, [pc, #356]	@ (800b348 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d10f      	bne.n	800b20e <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800b1ee:	4b56      	ldr	r3, [pc, #344]	@ (800b348 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d109      	bne.n	800b20e <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800b1fa:	2301      	movs	r3, #1
 800b1fc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b1fe:	e006      	b.n	800b20e <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 800b200:	2301      	movs	r3, #1
 800b202:	73fb      	strb	r3, [r7, #15]
      break;
 800b204:	e004      	b.n	800b210 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800b206:	bf00      	nop
 800b208:	e002      	b.n	800b210 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800b20a:	bf00      	nop
 800b20c:	e000      	b.n	800b210 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800b20e:	bf00      	nop
    }

    if(status == HAL_OK)
 800b210:	7bfb      	ldrb	r3, [r7, #15]
 800b212:	2b00      	cmp	r3, #0
 800b214:	d108      	bne.n	800b228 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800b216:	4b4c      	ldr	r3, [pc, #304]	@ (800b348 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b218:	68db      	ldr	r3, [r3, #12]
 800b21a:	f023 0203 	bic.w	r2, r3, #3
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	4949      	ldr	r1, [pc, #292]	@ (800b348 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b224:	4313      	orrs	r3, r2
 800b226:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800b228:	7bfb      	ldrb	r3, [r7, #15]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	f040 8086 	bne.w	800b33c <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800b230:	4b45      	ldr	r3, [pc, #276]	@ (800b348 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	4a44      	ldr	r2, [pc, #272]	@ (800b348 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b236:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b23a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b23c:	f7fa f8ea 	bl	8005414 <HAL_GetTick>
 800b240:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800b242:	e009      	b.n	800b258 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800b244:	f7fa f8e6 	bl	8005414 <HAL_GetTick>
 800b248:	4602      	mov	r2, r0
 800b24a:	68bb      	ldr	r3, [r7, #8]
 800b24c:	1ad3      	subs	r3, r2, r3
 800b24e:	2b02      	cmp	r3, #2
 800b250:	d902      	bls.n	800b258 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800b252:	2303      	movs	r3, #3
 800b254:	73fb      	strb	r3, [r7, #15]
        break;
 800b256:	e005      	b.n	800b264 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800b258:	4b3b      	ldr	r3, [pc, #236]	@ (800b348 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b260:	2b00      	cmp	r3, #0
 800b262:	d1ef      	bne.n	800b244 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800b264:	7bfb      	ldrb	r3, [r7, #15]
 800b266:	2b00      	cmp	r3, #0
 800b268:	d168      	bne.n	800b33c <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800b26a:	683b      	ldr	r3, [r7, #0]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d113      	bne.n	800b298 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800b270:	4b35      	ldr	r3, [pc, #212]	@ (800b348 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b272:	691a      	ldr	r2, [r3, #16]
 800b274:	4b35      	ldr	r3, [pc, #212]	@ (800b34c <RCCEx_PLLSAI1_Config+0x1dc>)
 800b276:	4013      	ands	r3, r2
 800b278:	687a      	ldr	r2, [r7, #4]
 800b27a:	6892      	ldr	r2, [r2, #8]
 800b27c:	0211      	lsls	r1, r2, #8
 800b27e:	687a      	ldr	r2, [r7, #4]
 800b280:	68d2      	ldr	r2, [r2, #12]
 800b282:	06d2      	lsls	r2, r2, #27
 800b284:	4311      	orrs	r1, r2
 800b286:	687a      	ldr	r2, [r7, #4]
 800b288:	6852      	ldr	r2, [r2, #4]
 800b28a:	3a01      	subs	r2, #1
 800b28c:	0112      	lsls	r2, r2, #4
 800b28e:	430a      	orrs	r2, r1
 800b290:	492d      	ldr	r1, [pc, #180]	@ (800b348 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b292:	4313      	orrs	r3, r2
 800b294:	610b      	str	r3, [r1, #16]
 800b296:	e02d      	b.n	800b2f4 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800b298:	683b      	ldr	r3, [r7, #0]
 800b29a:	2b01      	cmp	r3, #1
 800b29c:	d115      	bne.n	800b2ca <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800b29e:	4b2a      	ldr	r3, [pc, #168]	@ (800b348 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b2a0:	691a      	ldr	r2, [r3, #16]
 800b2a2:	4b2b      	ldr	r3, [pc, #172]	@ (800b350 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b2a4:	4013      	ands	r3, r2
 800b2a6:	687a      	ldr	r2, [r7, #4]
 800b2a8:	6892      	ldr	r2, [r2, #8]
 800b2aa:	0211      	lsls	r1, r2, #8
 800b2ac:	687a      	ldr	r2, [r7, #4]
 800b2ae:	6912      	ldr	r2, [r2, #16]
 800b2b0:	0852      	lsrs	r2, r2, #1
 800b2b2:	3a01      	subs	r2, #1
 800b2b4:	0552      	lsls	r2, r2, #21
 800b2b6:	4311      	orrs	r1, r2
 800b2b8:	687a      	ldr	r2, [r7, #4]
 800b2ba:	6852      	ldr	r2, [r2, #4]
 800b2bc:	3a01      	subs	r2, #1
 800b2be:	0112      	lsls	r2, r2, #4
 800b2c0:	430a      	orrs	r2, r1
 800b2c2:	4921      	ldr	r1, [pc, #132]	@ (800b348 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b2c4:	4313      	orrs	r3, r2
 800b2c6:	610b      	str	r3, [r1, #16]
 800b2c8:	e014      	b.n	800b2f4 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800b2ca:	4b1f      	ldr	r3, [pc, #124]	@ (800b348 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b2cc:	691a      	ldr	r2, [r3, #16]
 800b2ce:	4b21      	ldr	r3, [pc, #132]	@ (800b354 <RCCEx_PLLSAI1_Config+0x1e4>)
 800b2d0:	4013      	ands	r3, r2
 800b2d2:	687a      	ldr	r2, [r7, #4]
 800b2d4:	6892      	ldr	r2, [r2, #8]
 800b2d6:	0211      	lsls	r1, r2, #8
 800b2d8:	687a      	ldr	r2, [r7, #4]
 800b2da:	6952      	ldr	r2, [r2, #20]
 800b2dc:	0852      	lsrs	r2, r2, #1
 800b2de:	3a01      	subs	r2, #1
 800b2e0:	0652      	lsls	r2, r2, #25
 800b2e2:	4311      	orrs	r1, r2
 800b2e4:	687a      	ldr	r2, [r7, #4]
 800b2e6:	6852      	ldr	r2, [r2, #4]
 800b2e8:	3a01      	subs	r2, #1
 800b2ea:	0112      	lsls	r2, r2, #4
 800b2ec:	430a      	orrs	r2, r1
 800b2ee:	4916      	ldr	r1, [pc, #88]	@ (800b348 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b2f0:	4313      	orrs	r3, r2
 800b2f2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800b2f4:	4b14      	ldr	r3, [pc, #80]	@ (800b348 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	4a13      	ldr	r2, [pc, #76]	@ (800b348 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b2fa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b2fe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b300:	f7fa f888 	bl	8005414 <HAL_GetTick>
 800b304:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800b306:	e009      	b.n	800b31c <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800b308:	f7fa f884 	bl	8005414 <HAL_GetTick>
 800b30c:	4602      	mov	r2, r0
 800b30e:	68bb      	ldr	r3, [r7, #8]
 800b310:	1ad3      	subs	r3, r2, r3
 800b312:	2b02      	cmp	r3, #2
 800b314:	d902      	bls.n	800b31c <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800b316:	2303      	movs	r3, #3
 800b318:	73fb      	strb	r3, [r7, #15]
          break;
 800b31a:	e005      	b.n	800b328 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800b31c:	4b0a      	ldr	r3, [pc, #40]	@ (800b348 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b324:	2b00      	cmp	r3, #0
 800b326:	d0ef      	beq.n	800b308 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800b328:	7bfb      	ldrb	r3, [r7, #15]
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d106      	bne.n	800b33c <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800b32e:	4b06      	ldr	r3, [pc, #24]	@ (800b348 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b330:	691a      	ldr	r2, [r3, #16]
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	699b      	ldr	r3, [r3, #24]
 800b336:	4904      	ldr	r1, [pc, #16]	@ (800b348 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b338:	4313      	orrs	r3, r2
 800b33a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800b33c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b33e:	4618      	mov	r0, r3
 800b340:	3710      	adds	r7, #16
 800b342:	46bd      	mov	sp, r7
 800b344:	bd80      	pop	{r7, pc}
 800b346:	bf00      	nop
 800b348:	40021000 	.word	0x40021000
 800b34c:	07ff800f 	.word	0x07ff800f
 800b350:	ff9f800f 	.word	0xff9f800f
 800b354:	f9ff800f 	.word	0xf9ff800f

0800b358 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800b358:	b580      	push	{r7, lr}
 800b35a:	b084      	sub	sp, #16
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	6078      	str	r0, [r7, #4]
 800b360:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b362:	2300      	movs	r3, #0
 800b364:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800b366:	4b72      	ldr	r3, [pc, #456]	@ (800b530 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b368:	68db      	ldr	r3, [r3, #12]
 800b36a:	f003 0303 	and.w	r3, r3, #3
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d00e      	beq.n	800b390 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800b372:	4b6f      	ldr	r3, [pc, #444]	@ (800b530 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b374:	68db      	ldr	r3, [r3, #12]
 800b376:	f003 0203 	and.w	r2, r3, #3
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	429a      	cmp	r2, r3
 800b380:	d103      	bne.n	800b38a <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	681b      	ldr	r3, [r3, #0]
       ||
 800b386:	2b00      	cmp	r3, #0
 800b388:	d142      	bne.n	800b410 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800b38a:	2301      	movs	r3, #1
 800b38c:	73fb      	strb	r3, [r7, #15]
 800b38e:	e03f      	b.n	800b410 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	2b03      	cmp	r3, #3
 800b396:	d018      	beq.n	800b3ca <RCCEx_PLLSAI2_Config+0x72>
 800b398:	2b03      	cmp	r3, #3
 800b39a:	d825      	bhi.n	800b3e8 <RCCEx_PLLSAI2_Config+0x90>
 800b39c:	2b01      	cmp	r3, #1
 800b39e:	d002      	beq.n	800b3a6 <RCCEx_PLLSAI2_Config+0x4e>
 800b3a0:	2b02      	cmp	r3, #2
 800b3a2:	d009      	beq.n	800b3b8 <RCCEx_PLLSAI2_Config+0x60>
 800b3a4:	e020      	b.n	800b3e8 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800b3a6:	4b62      	ldr	r3, [pc, #392]	@ (800b530 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	f003 0302 	and.w	r3, r3, #2
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d11d      	bne.n	800b3ee <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800b3b2:	2301      	movs	r3, #1
 800b3b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b3b6:	e01a      	b.n	800b3ee <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800b3b8:	4b5d      	ldr	r3, [pc, #372]	@ (800b530 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d116      	bne.n	800b3f2 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 800b3c4:	2301      	movs	r3, #1
 800b3c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b3c8:	e013      	b.n	800b3f2 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800b3ca:	4b59      	ldr	r3, [pc, #356]	@ (800b530 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d10f      	bne.n	800b3f6 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800b3d6:	4b56      	ldr	r3, [pc, #344]	@ (800b530 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d109      	bne.n	800b3f6 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800b3e2:	2301      	movs	r3, #1
 800b3e4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b3e6:	e006      	b.n	800b3f6 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 800b3e8:	2301      	movs	r3, #1
 800b3ea:	73fb      	strb	r3, [r7, #15]
      break;
 800b3ec:	e004      	b.n	800b3f8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800b3ee:	bf00      	nop
 800b3f0:	e002      	b.n	800b3f8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800b3f2:	bf00      	nop
 800b3f4:	e000      	b.n	800b3f8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800b3f6:	bf00      	nop
    }

    if(status == HAL_OK)
 800b3f8:	7bfb      	ldrb	r3, [r7, #15]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d108      	bne.n	800b410 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800b3fe:	4b4c      	ldr	r3, [pc, #304]	@ (800b530 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b400:	68db      	ldr	r3, [r3, #12]
 800b402:	f023 0203 	bic.w	r2, r3, #3
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	4949      	ldr	r1, [pc, #292]	@ (800b530 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b40c:	4313      	orrs	r3, r2
 800b40e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800b410:	7bfb      	ldrb	r3, [r7, #15]
 800b412:	2b00      	cmp	r3, #0
 800b414:	f040 8086 	bne.w	800b524 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800b418:	4b45      	ldr	r3, [pc, #276]	@ (800b530 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	4a44      	ldr	r2, [pc, #272]	@ (800b530 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b41e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b422:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b424:	f7f9 fff6 	bl	8005414 <HAL_GetTick>
 800b428:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800b42a:	e009      	b.n	800b440 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800b42c:	f7f9 fff2 	bl	8005414 <HAL_GetTick>
 800b430:	4602      	mov	r2, r0
 800b432:	68bb      	ldr	r3, [r7, #8]
 800b434:	1ad3      	subs	r3, r2, r3
 800b436:	2b02      	cmp	r3, #2
 800b438:	d902      	bls.n	800b440 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800b43a:	2303      	movs	r3, #3
 800b43c:	73fb      	strb	r3, [r7, #15]
        break;
 800b43e:	e005      	b.n	800b44c <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800b440:	4b3b      	ldr	r3, [pc, #236]	@ (800b530 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d1ef      	bne.n	800b42c <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800b44c:	7bfb      	ldrb	r3, [r7, #15]
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d168      	bne.n	800b524 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800b452:	683b      	ldr	r3, [r7, #0]
 800b454:	2b00      	cmp	r3, #0
 800b456:	d113      	bne.n	800b480 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800b458:	4b35      	ldr	r3, [pc, #212]	@ (800b530 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b45a:	695a      	ldr	r2, [r3, #20]
 800b45c:	4b35      	ldr	r3, [pc, #212]	@ (800b534 <RCCEx_PLLSAI2_Config+0x1dc>)
 800b45e:	4013      	ands	r3, r2
 800b460:	687a      	ldr	r2, [r7, #4]
 800b462:	6892      	ldr	r2, [r2, #8]
 800b464:	0211      	lsls	r1, r2, #8
 800b466:	687a      	ldr	r2, [r7, #4]
 800b468:	68d2      	ldr	r2, [r2, #12]
 800b46a:	06d2      	lsls	r2, r2, #27
 800b46c:	4311      	orrs	r1, r2
 800b46e:	687a      	ldr	r2, [r7, #4]
 800b470:	6852      	ldr	r2, [r2, #4]
 800b472:	3a01      	subs	r2, #1
 800b474:	0112      	lsls	r2, r2, #4
 800b476:	430a      	orrs	r2, r1
 800b478:	492d      	ldr	r1, [pc, #180]	@ (800b530 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b47a:	4313      	orrs	r3, r2
 800b47c:	614b      	str	r3, [r1, #20]
 800b47e:	e02d      	b.n	800b4dc <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 800b480:	683b      	ldr	r3, [r7, #0]
 800b482:	2b01      	cmp	r3, #1
 800b484:	d115      	bne.n	800b4b2 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800b486:	4b2a      	ldr	r3, [pc, #168]	@ (800b530 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b488:	695a      	ldr	r2, [r3, #20]
 800b48a:	4b2b      	ldr	r3, [pc, #172]	@ (800b538 <RCCEx_PLLSAI2_Config+0x1e0>)
 800b48c:	4013      	ands	r3, r2
 800b48e:	687a      	ldr	r2, [r7, #4]
 800b490:	6892      	ldr	r2, [r2, #8]
 800b492:	0211      	lsls	r1, r2, #8
 800b494:	687a      	ldr	r2, [r7, #4]
 800b496:	6912      	ldr	r2, [r2, #16]
 800b498:	0852      	lsrs	r2, r2, #1
 800b49a:	3a01      	subs	r2, #1
 800b49c:	0552      	lsls	r2, r2, #21
 800b49e:	4311      	orrs	r1, r2
 800b4a0:	687a      	ldr	r2, [r7, #4]
 800b4a2:	6852      	ldr	r2, [r2, #4]
 800b4a4:	3a01      	subs	r2, #1
 800b4a6:	0112      	lsls	r2, r2, #4
 800b4a8:	430a      	orrs	r2, r1
 800b4aa:	4921      	ldr	r1, [pc, #132]	@ (800b530 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b4ac:	4313      	orrs	r3, r2
 800b4ae:	614b      	str	r3, [r1, #20]
 800b4b0:	e014      	b.n	800b4dc <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800b4b2:	4b1f      	ldr	r3, [pc, #124]	@ (800b530 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b4b4:	695a      	ldr	r2, [r3, #20]
 800b4b6:	4b21      	ldr	r3, [pc, #132]	@ (800b53c <RCCEx_PLLSAI2_Config+0x1e4>)
 800b4b8:	4013      	ands	r3, r2
 800b4ba:	687a      	ldr	r2, [r7, #4]
 800b4bc:	6892      	ldr	r2, [r2, #8]
 800b4be:	0211      	lsls	r1, r2, #8
 800b4c0:	687a      	ldr	r2, [r7, #4]
 800b4c2:	6952      	ldr	r2, [r2, #20]
 800b4c4:	0852      	lsrs	r2, r2, #1
 800b4c6:	3a01      	subs	r2, #1
 800b4c8:	0652      	lsls	r2, r2, #25
 800b4ca:	4311      	orrs	r1, r2
 800b4cc:	687a      	ldr	r2, [r7, #4]
 800b4ce:	6852      	ldr	r2, [r2, #4]
 800b4d0:	3a01      	subs	r2, #1
 800b4d2:	0112      	lsls	r2, r2, #4
 800b4d4:	430a      	orrs	r2, r1
 800b4d6:	4916      	ldr	r1, [pc, #88]	@ (800b530 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b4d8:	4313      	orrs	r3, r2
 800b4da:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800b4dc:	4b14      	ldr	r3, [pc, #80]	@ (800b530 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	4a13      	ldr	r2, [pc, #76]	@ (800b530 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b4e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b4e6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b4e8:	f7f9 ff94 	bl	8005414 <HAL_GetTick>
 800b4ec:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800b4ee:	e009      	b.n	800b504 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800b4f0:	f7f9 ff90 	bl	8005414 <HAL_GetTick>
 800b4f4:	4602      	mov	r2, r0
 800b4f6:	68bb      	ldr	r3, [r7, #8]
 800b4f8:	1ad3      	subs	r3, r2, r3
 800b4fa:	2b02      	cmp	r3, #2
 800b4fc:	d902      	bls.n	800b504 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800b4fe:	2303      	movs	r3, #3
 800b500:	73fb      	strb	r3, [r7, #15]
          break;
 800b502:	e005      	b.n	800b510 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800b504:	4b0a      	ldr	r3, [pc, #40]	@ (800b530 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d0ef      	beq.n	800b4f0 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800b510:	7bfb      	ldrb	r3, [r7, #15]
 800b512:	2b00      	cmp	r3, #0
 800b514:	d106      	bne.n	800b524 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800b516:	4b06      	ldr	r3, [pc, #24]	@ (800b530 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b518:	695a      	ldr	r2, [r3, #20]
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	699b      	ldr	r3, [r3, #24]
 800b51e:	4904      	ldr	r1, [pc, #16]	@ (800b530 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b520:	4313      	orrs	r3, r2
 800b522:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800b524:	7bfb      	ldrb	r3, [r7, #15]
}
 800b526:	4618      	mov	r0, r3
 800b528:	3710      	adds	r7, #16
 800b52a:	46bd      	mov	sp, r7
 800b52c:	bd80      	pop	{r7, pc}
 800b52e:	bf00      	nop
 800b530:	40021000 	.word	0x40021000
 800b534:	07ff800f 	.word	0x07ff800f
 800b538:	ff9f800f 	.word	0xff9f800f
 800b53c:	f9ff800f 	.word	0xf9ff800f

0800b540 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800b540:	b580      	push	{r7, lr}
 800b542:	b084      	sub	sp, #16
 800b544:	af00      	add	r7, sp, #0
 800b546:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800b548:	2301      	movs	r3, #1
 800b54a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	2b00      	cmp	r3, #0
 800b550:	f000 808c 	beq.w	800b66c <HAL_RTC_Init+0x12c>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800b55a:	b2db      	uxtb	r3, r3
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d106      	bne.n	800b56e <HAL_RTC_Init+0x2e>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	2200      	movs	r2, #0
 800b564:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800b568:	6878      	ldr	r0, [r7, #4]
 800b56a:	f7f9 fc59 	bl	8004e20 <HAL_RTC_MspInit>
    }
#endif /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	f44f 6240 	mov.w	r2, #3072	@ 0xc00
 800b574:	605a      	str	r2, [r3, #4]
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	2202      	movs	r2, #2
 800b57a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800b57e:	4b3e      	ldr	r3, [pc, #248]	@ (800b678 <HAL_RTC_Init+0x138>)
 800b580:	68db      	ldr	r3, [r3, #12]
 800b582:	f003 0310 	and.w	r3, r3, #16
 800b586:	2b10      	cmp	r3, #16
 800b588:	d067      	beq.n	800b65a <HAL_RTC_Init+0x11a>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	22ca      	movs	r2, #202	@ 0xca
 800b590:	625a      	str	r2, [r3, #36]	@ 0x24
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	2253      	movs	r2, #83	@ 0x53
 800b598:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800b59a:	6878      	ldr	r0, [r7, #4]
 800b59c:	f000 fa6c 	bl	800ba78 <RTC_EnterInitMode>
 800b5a0:	4603      	mov	r3, r0
 800b5a2:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800b5a4:	7bfb      	ldrb	r3, [r7, #15]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d133      	bne.n	800b612 <HAL_RTC_Init+0xd2>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	699b      	ldr	r3, [r3, #24]
 800b5b0:	687a      	ldr	r2, [r7, #4]
 800b5b2:	6812      	ldr	r2, [r2, #0]
 800b5b4:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 800b5b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b5bc:	6193      	str	r3, [r2, #24]
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	6999      	ldr	r1, [r3, #24]
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	689a      	ldr	r2, [r3, #8]
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	695b      	ldr	r3, [r3, #20]
 800b5cc:	431a      	orrs	r2, r3
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	69db      	ldr	r3, [r3, #28]
 800b5d2:	431a      	orrs	r2, r3
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	430a      	orrs	r2, r1
 800b5da:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	687a      	ldr	r2, [r7, #4]
 800b5e2:	6912      	ldr	r2, [r2, #16]
 800b5e4:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	6919      	ldr	r1, [r3, #16]
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	68db      	ldr	r3, [r3, #12]
 800b5f0:	041a      	lsls	r2, r3, #16
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	430a      	orrs	r2, r1
 800b5f8:	611a      	str	r2, [r3, #16]

#if defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800b5fa:	4b1f      	ldr	r3, [pc, #124]	@ (800b678 <HAL_RTC_Init+0x138>)
 800b5fc:	68db      	ldr	r3, [r3, #12]
 800b5fe:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b60a:	430b      	orrs	r3, r1
 800b60c:	491a      	ldr	r1, [pc, #104]	@ (800b678 <HAL_RTC_Init+0x138>)
 800b60e:	4313      	orrs	r3, r2
 800b610:	60cb      	str	r3, [r1, #12]
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800b612:	6878      	ldr	r0, [r7, #4]
 800b614:	f000 fa66 	bl	800bae4 <RTC_ExitInitMode>
 800b618:	4603      	mov	r3, r0
 800b61a:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800b61c:	7bfb      	ldrb	r3, [r7, #15]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d116      	bne.n	800b650 <HAL_RTC_Init+0x110>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	699a      	ldr	r2, [r3, #24]
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	f022 4260 	bic.w	r2, r2, #3758096384	@ 0xe0000000
 800b630:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	6999      	ldr	r1, [r3, #24]
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	6a1b      	ldr	r3, [r3, #32]
 800b640:	431a      	orrs	r2, r3
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	699b      	ldr	r3, [r3, #24]
 800b646:	431a      	orrs	r2, r3
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	430a      	orrs	r2, r1
 800b64e:	619a      	str	r2, [r3, #24]
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	22ff      	movs	r2, #255	@ 0xff
 800b656:	625a      	str	r2, [r3, #36]	@ 0x24
 800b658:	e001      	b.n	800b65e <HAL_RTC_Init+0x11e>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800b65a:	2300      	movs	r3, #0
 800b65c:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800b65e:	7bfb      	ldrb	r3, [r7, #15]
 800b660:	2b00      	cmp	r3, #0
 800b662:	d103      	bne.n	800b66c <HAL_RTC_Init+0x12c>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	2201      	movs	r2, #1
 800b668:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
    }
  }

  return status;
 800b66c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b66e:	4618      	mov	r0, r3
 800b670:	3710      	adds	r7, #16
 800b672:	46bd      	mov	sp, r7
 800b674:	bd80      	pop	{r7, pc}
 800b676:	bf00      	nop
 800b678:	40002800 	.word	0x40002800

0800b67c <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800b67c:	b590      	push	{r4, r7, lr}
 800b67e:	b087      	sub	sp, #28
 800b680:	af00      	add	r7, sp, #0
 800b682:	60f8      	str	r0, [r7, #12]
 800b684:	60b9      	str	r1, [r7, #8]
 800b686:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));
  }
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b68e:	2b01      	cmp	r3, #1
 800b690:	d101      	bne.n	800b696 <HAL_RTC_SetTime+0x1a>
 800b692:	2302      	movs	r3, #2
 800b694:	e08b      	b.n	800b7ae <HAL_RTC_SetTime+0x132>
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	2201      	movs	r2, #1
 800b69a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  hrtc->State = HAL_RTC_STATE_BUSY;
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	2202      	movs	r2, #2
 800b6a2:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	22ca      	movs	r2, #202	@ 0xca
 800b6ac:	625a      	str	r2, [r3, #36]	@ 0x24
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	2253      	movs	r2, #83	@ 0x53
 800b6b4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800b6b6:	68f8      	ldr	r0, [r7, #12]
 800b6b8:	f000 f9de 	bl	800ba78 <RTC_EnterInitMode>
 800b6bc:	4603      	mov	r3, r0
 800b6be:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800b6c0:	7cfb      	ldrb	r3, [r7, #19]
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d15e      	bne.n	800b784 <HAL_RTC_SetTime+0x108>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 800b6c6:	4b3c      	ldr	r3, [pc, #240]	@ (800b7b8 <HAL_RTC_SetTime+0x13c>)
 800b6c8:	68db      	ldr	r3, [r3, #12]
 800b6ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b6ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b6d2:	d057      	beq.n	800b784 <HAL_RTC_SetTime+0x108>
    {
      if (Format == RTC_FORMAT_BIN)
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d125      	bne.n	800b726 <HAL_RTC_SetTime+0xaa>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800b6da:	4b37      	ldr	r3, [pc, #220]	@ (800b7b8 <HAL_RTC_SetTime+0x13c>)
 800b6dc:	699b      	ldr	r3, [r3, #24]
 800b6de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d102      	bne.n	800b6ec <HAL_RTC_SetTime+0x70>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800b6e6:	68bb      	ldr	r3, [r7, #8]
 800b6e8:	2200      	movs	r2, #0
 800b6ea:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800b6ec:	68bb      	ldr	r3, [r7, #8]
 800b6ee:	781b      	ldrb	r3, [r3, #0]
 800b6f0:	4618      	mov	r0, r3
 800b6f2:	f000 fa35 	bl	800bb60 <RTC_ByteToBcd2>
 800b6f6:	4603      	mov	r3, r0
 800b6f8:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b6fa:	68bb      	ldr	r3, [r7, #8]
 800b6fc:	785b      	ldrb	r3, [r3, #1]
 800b6fe:	4618      	mov	r0, r3
 800b700:	f000 fa2e 	bl	800bb60 <RTC_ByteToBcd2>
 800b704:	4603      	mov	r3, r0
 800b706:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800b708:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800b70a:	68bb      	ldr	r3, [r7, #8]
 800b70c:	789b      	ldrb	r3, [r3, #2]
 800b70e:	4618      	mov	r0, r3
 800b710:	f000 fa26 	bl	800bb60 <RTC_ByteToBcd2>
 800b714:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b716:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800b71a:	68bb      	ldr	r3, [r7, #8]
 800b71c:	78db      	ldrb	r3, [r3, #3]
 800b71e:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800b720:	4313      	orrs	r3, r2
 800b722:	617b      	str	r3, [r7, #20]
 800b724:	e017      	b.n	800b756 <HAL_RTC_SetTime+0xda>

      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800b726:	4b24      	ldr	r3, [pc, #144]	@ (800b7b8 <HAL_RTC_SetTime+0x13c>)
 800b728:	699b      	ldr	r3, [r3, #24]
 800b72a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d102      	bne.n	800b738 <HAL_RTC_SetTime+0xbc>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800b732:	68bb      	ldr	r3, [r7, #8]
 800b734:	2200      	movs	r2, #0
 800b736:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800b738:	68bb      	ldr	r3, [r7, #8]
 800b73a:	781b      	ldrb	r3, [r3, #0]
 800b73c:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b73e:	68bb      	ldr	r3, [r7, #8]
 800b740:	785b      	ldrb	r3, [r3, #1]
 800b742:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800b744:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800b746:	68ba      	ldr	r2, [r7, #8]
 800b748:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b74a:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800b74c:	68bb      	ldr	r3, [r7, #8]
 800b74e:	78db      	ldrb	r3, [r3, #3]
 800b750:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800b752:	4313      	orrs	r3, r2
 800b754:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 800b756:	4a18      	ldr	r2, [pc, #96]	@ (800b7b8 <HAL_RTC_SetTime+0x13c>)
 800b758:	697b      	ldr	r3, [r7, #20]
 800b75a:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800b75e:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800b762:	6013      	str	r3, [r2, #0]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 800b764:	4b14      	ldr	r3, [pc, #80]	@ (800b7b8 <HAL_RTC_SetTime+0x13c>)
 800b766:	699b      	ldr	r3, [r3, #24]
 800b768:	4a13      	ldr	r2, [pc, #76]	@ (800b7b8 <HAL_RTC_SetTime+0x13c>)
 800b76a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b76e:	6193      	str	r3, [r2, #24]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 800b770:	4b11      	ldr	r3, [pc, #68]	@ (800b7b8 <HAL_RTC_SetTime+0x13c>)
 800b772:	699a      	ldr	r2, [r3, #24]
 800b774:	68bb      	ldr	r3, [r7, #8]
 800b776:	68d9      	ldr	r1, [r3, #12]
 800b778:	68bb      	ldr	r3, [r7, #8]
 800b77a:	691b      	ldr	r3, [r3, #16]
 800b77c:	430b      	orrs	r3, r1
 800b77e:	490e      	ldr	r1, [pc, #56]	@ (800b7b8 <HAL_RTC_SetTime+0x13c>)
 800b780:	4313      	orrs	r3, r2
 800b782:	618b      	str	r3, [r1, #24]
    }
  }

  /* Exit Initialization mode */
  status = RTC_ExitInitMode(hrtc);
 800b784:	68f8      	ldr	r0, [r7, #12]
 800b786:	f000 f9ad 	bl	800bae4 <RTC_ExitInitMode>
 800b78a:	4603      	mov	r3, r0
 800b78c:	74fb      	strb	r3, [r7, #19]


  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	22ff      	movs	r2, #255	@ 0xff
 800b794:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800b796:	7cfb      	ldrb	r3, [r7, #19]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d103      	bne.n	800b7a4 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	2201      	movs	r2, #1
 800b7a0:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	2200      	movs	r2, #0
 800b7a8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 800b7ac:	7cfb      	ldrb	r3, [r7, #19]
}
 800b7ae:	4618      	mov	r0, r3
 800b7b0:	371c      	adds	r7, #28
 800b7b2:	46bd      	mov	sp, r7
 800b7b4:	bd90      	pop	{r4, r7, pc}
 800b7b6:	bf00      	nop
 800b7b8:	40002800 	.word	0x40002800

0800b7bc <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800b7bc:	b580      	push	{r7, lr}
 800b7be:	b086      	sub	sp, #24
 800b7c0:	af00      	add	r7, sp, #0
 800b7c2:	60f8      	str	r0, [r7, #12]
 800b7c4:	60b9      	str	r1, [r7, #8]
 800b7c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg;

  UNUSED(hrtc);
  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = READ_REG(RTC->SSR);
 800b7c8:	4b2c      	ldr	r3, [pc, #176]	@ (800b87c <HAL_RTC_GetTime+0xc0>)
 800b7ca:	689a      	ldr	r2, [r3, #8]
 800b7cc:	68bb      	ldr	r3, [r7, #8]
 800b7ce:	605a      	str	r2, [r3, #4]

  if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 800b7d0:	4b2a      	ldr	r3, [pc, #168]	@ (800b87c <HAL_RTC_GetTime+0xc0>)
 800b7d2:	68db      	ldr	r3, [r3, #12]
 800b7d4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b7d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b7dc:	d049      	beq.n	800b872 <HAL_RTC_GetTime+0xb6>
  {
    /* Check the parameters */
    assert_param(IS_RTC_FORMAT(Format));

    /* Get SecondFraction structure field from the corresponding register field*/
    sTime->SecondFraction = (uint32_t)(READ_REG(RTC->PRER) & RTC_PRER_PREDIV_S);
 800b7de:	4b27      	ldr	r3, [pc, #156]	@ (800b87c <HAL_RTC_GetTime+0xc0>)
 800b7e0:	691b      	ldr	r3, [r3, #16]
 800b7e2:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800b7e6:	68bb      	ldr	r3, [r7, #8]
 800b7e8:	609a      	str	r2, [r3, #8]

    /* Get the TR register */
    tmpreg = (uint32_t)(READ_REG(RTC->TR) & RTC_TR_RESERVED_MASK);
 800b7ea:	4b24      	ldr	r3, [pc, #144]	@ (800b87c <HAL_RTC_GetTime+0xc0>)
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800b7f2:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800b7f6:	617b      	str	r3, [r7, #20]

    /* Fill the structure fields with the read parameters */
    sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 800b7f8:	697b      	ldr	r3, [r7, #20]
 800b7fa:	0c1b      	lsrs	r3, r3, #16
 800b7fc:	b2db      	uxtb	r3, r3
 800b7fe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b802:	b2da      	uxtb	r2, r3
 800b804:	68bb      	ldr	r3, [r7, #8]
 800b806:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800b808:	697b      	ldr	r3, [r7, #20]
 800b80a:	0a1b      	lsrs	r3, r3, #8
 800b80c:	b2db      	uxtb	r3, r3
 800b80e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b812:	b2da      	uxtb	r2, r3
 800b814:	68bb      	ldr	r3, [r7, #8]
 800b816:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 800b818:	697b      	ldr	r3, [r7, #20]
 800b81a:	b2db      	uxtb	r3, r3
 800b81c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b820:	b2da      	uxtb	r2, r3
 800b822:	68bb      	ldr	r3, [r7, #8]
 800b824:	709a      	strb	r2, [r3, #2]
    sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 800b826:	697b      	ldr	r3, [r7, #20]
 800b828:	0d9b      	lsrs	r3, r3, #22
 800b82a:	b2db      	uxtb	r3, r3
 800b82c:	f003 0301 	and.w	r3, r3, #1
 800b830:	b2da      	uxtb	r2, r3
 800b832:	68bb      	ldr	r3, [r7, #8]
 800b834:	70da      	strb	r2, [r3, #3]

    /* Check the input parameters format */
    if (Format == RTC_FORMAT_BIN)
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d11a      	bne.n	800b872 <HAL_RTC_GetTime+0xb6>
    {
      /* Convert the time structure parameters to Binary format */
      sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800b83c:	68bb      	ldr	r3, [r7, #8]
 800b83e:	781b      	ldrb	r3, [r3, #0]
 800b840:	4618      	mov	r0, r3
 800b842:	f000 f9ad 	bl	800bba0 <RTC_Bcd2ToByte>
 800b846:	4603      	mov	r3, r0
 800b848:	461a      	mov	r2, r3
 800b84a:	68bb      	ldr	r3, [r7, #8]
 800b84c:	701a      	strb	r2, [r3, #0]
      sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800b84e:	68bb      	ldr	r3, [r7, #8]
 800b850:	785b      	ldrb	r3, [r3, #1]
 800b852:	4618      	mov	r0, r3
 800b854:	f000 f9a4 	bl	800bba0 <RTC_Bcd2ToByte>
 800b858:	4603      	mov	r3, r0
 800b85a:	461a      	mov	r2, r3
 800b85c:	68bb      	ldr	r3, [r7, #8]
 800b85e:	705a      	strb	r2, [r3, #1]
      sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800b860:	68bb      	ldr	r3, [r7, #8]
 800b862:	789b      	ldrb	r3, [r3, #2]
 800b864:	4618      	mov	r0, r3
 800b866:	f000 f99b 	bl	800bba0 <RTC_Bcd2ToByte>
 800b86a:	4603      	mov	r3, r0
 800b86c:	461a      	mov	r2, r3
 800b86e:	68bb      	ldr	r3, [r7, #8]
 800b870:	709a      	strb	r2, [r3, #2]
    }
  }

  return HAL_OK;
 800b872:	2300      	movs	r3, #0
}
 800b874:	4618      	mov	r0, r3
 800b876:	3718      	adds	r7, #24
 800b878:	46bd      	mov	sp, r7
 800b87a:	bd80      	pop	{r7, pc}
 800b87c:	40002800 	.word	0x40002800

0800b880 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800b880:	b590      	push	{r4, r7, lr}
 800b882:	b087      	sub	sp, #28
 800b884:	af00      	add	r7, sp, #0
 800b886:	60f8      	str	r0, [r7, #12]
 800b888:	60b9      	str	r1, [r7, #8]
 800b88a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b892:	2b01      	cmp	r3, #1
 800b894:	d101      	bne.n	800b89a <HAL_RTC_SetDate+0x1a>
 800b896:	2302      	movs	r3, #2
 800b898:	e074      	b.n	800b984 <HAL_RTC_SetDate+0x104>
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	2201      	movs	r2, #1
 800b89e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  hrtc->State = HAL_RTC_STATE_BUSY;
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	2202      	movs	r2, #2
 800b8a6:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d10e      	bne.n	800b8ce <HAL_RTC_SetDate+0x4e>
 800b8b0:	68bb      	ldr	r3, [r7, #8]
 800b8b2:	785b      	ldrb	r3, [r3, #1]
 800b8b4:	f003 0310 	and.w	r3, r3, #16
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d008      	beq.n	800b8ce <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800b8bc:	68bb      	ldr	r3, [r7, #8]
 800b8be:	785b      	ldrb	r3, [r3, #1]
 800b8c0:	f023 0310 	bic.w	r3, r3, #16
 800b8c4:	b2db      	uxtb	r3, r3
 800b8c6:	330a      	adds	r3, #10
 800b8c8:	b2da      	uxtb	r2, r3
 800b8ca:	68bb      	ldr	r3, [r7, #8]
 800b8cc:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d11c      	bne.n	800b90e <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800b8d4:	68bb      	ldr	r3, [r7, #8]
 800b8d6:	78db      	ldrb	r3, [r3, #3]
 800b8d8:	4618      	mov	r0, r3
 800b8da:	f000 f941 	bl	800bb60 <RTC_ByteToBcd2>
 800b8de:	4603      	mov	r3, r0
 800b8e0:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800b8e2:	68bb      	ldr	r3, [r7, #8]
 800b8e4:	785b      	ldrb	r3, [r3, #1]
 800b8e6:	4618      	mov	r0, r3
 800b8e8:	f000 f93a 	bl	800bb60 <RTC_ByteToBcd2>
 800b8ec:	4603      	mov	r3, r0
 800b8ee:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800b8f0:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800b8f2:	68bb      	ldr	r3, [r7, #8]
 800b8f4:	789b      	ldrb	r3, [r3, #2]
 800b8f6:	4618      	mov	r0, r3
 800b8f8:	f000 f932 	bl	800bb60 <RTC_ByteToBcd2>
 800b8fc:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800b8fe:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800b902:	68bb      	ldr	r3, [r7, #8]
 800b904:	781b      	ldrb	r3, [r3, #0]
 800b906:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800b908:	4313      	orrs	r3, r2
 800b90a:	617b      	str	r3, [r7, #20]
 800b90c:	e00e      	b.n	800b92c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800b90e:	68bb      	ldr	r3, [r7, #8]
 800b910:	78db      	ldrb	r3, [r3, #3]
 800b912:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800b914:	68bb      	ldr	r3, [r7, #8]
 800b916:	785b      	ldrb	r3, [r3, #1]
 800b918:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800b91a:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800b91c:	68ba      	ldr	r2, [r7, #8]
 800b91e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800b920:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800b922:	68bb      	ldr	r3, [r7, #8]
 800b924:	781b      	ldrb	r3, [r3, #0]
 800b926:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800b928:	4313      	orrs	r3, r2
 800b92a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	22ca      	movs	r2, #202	@ 0xca
 800b932:	625a      	str	r2, [r3, #36]	@ 0x24
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	2253      	movs	r2, #83	@ 0x53
 800b93a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800b93c:	68f8      	ldr	r0, [r7, #12]
 800b93e:	f000 f89b 	bl	800ba78 <RTC_EnterInitMode>
 800b942:	4603      	mov	r3, r0
 800b944:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800b946:	7cfb      	ldrb	r3, [r7, #19]
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d10b      	bne.n	800b964 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 800b94c:	4a0f      	ldr	r2, [pc, #60]	@ (800b98c <HAL_RTC_SetDate+0x10c>)
 800b94e:	697b      	ldr	r3, [r7, #20]
 800b950:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800b954:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800b958:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800b95a:	68f8      	ldr	r0, [r7, #12]
 800b95c:	f000 f8c2 	bl	800bae4 <RTC_ExitInitMode>
 800b960:	4603      	mov	r3, r0
 800b962:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	22ff      	movs	r2, #255	@ 0xff
 800b96a:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800b96c:	7cfb      	ldrb	r3, [r7, #19]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d103      	bne.n	800b97a <HAL_RTC_SetDate+0xfa>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	2201      	movs	r2, #1
 800b976:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	2200      	movs	r2, #0
 800b97e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 800b982:	7cfb      	ldrb	r3, [r7, #19]
}
 800b984:	4618      	mov	r0, r3
 800b986:	371c      	adds	r7, #28
 800b988:	46bd      	mov	sp, r7
 800b98a:	bd90      	pop	{r4, r7, pc}
 800b98c:	40002800 	.word	0x40002800

0800b990 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800b990:	b580      	push	{r7, lr}
 800b992:	b086      	sub	sp, #24
 800b994:	af00      	add	r7, sp, #0
 800b996:	60f8      	str	r0, [r7, #12]
 800b998:	60b9      	str	r1, [r7, #8]
 800b99a:	607a      	str	r2, [r7, #4]
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(READ_REG(RTC->DR) & RTC_DR_RESERVED_MASK);
 800b99c:	4b22      	ldr	r3, [pc, #136]	@ (800ba28 <HAL_RTC_GetDate+0x98>)
 800b99e:	685b      	ldr	r3, [r3, #4]
 800b9a0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800b9a4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800b9a8:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800b9aa:	697b      	ldr	r3, [r7, #20]
 800b9ac:	0c1b      	lsrs	r3, r3, #16
 800b9ae:	b2da      	uxtb	r2, r3
 800b9b0:	68bb      	ldr	r3, [r7, #8]
 800b9b2:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800b9b4:	697b      	ldr	r3, [r7, #20]
 800b9b6:	0a1b      	lsrs	r3, r3, #8
 800b9b8:	b2db      	uxtb	r3, r3
 800b9ba:	f003 031f 	and.w	r3, r3, #31
 800b9be:	b2da      	uxtb	r2, r3
 800b9c0:	68bb      	ldr	r3, [r7, #8]
 800b9c2:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800b9c4:	697b      	ldr	r3, [r7, #20]
 800b9c6:	b2db      	uxtb	r3, r3
 800b9c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b9cc:	b2da      	uxtb	r2, r3
 800b9ce:	68bb      	ldr	r3, [r7, #8]
 800b9d0:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 800b9d2:	697b      	ldr	r3, [r7, #20]
 800b9d4:	0b5b      	lsrs	r3, r3, #13
 800b9d6:	b2db      	uxtb	r3, r3
 800b9d8:	f003 0307 	and.w	r3, r3, #7
 800b9dc:	b2da      	uxtb	r2, r3
 800b9de:	68bb      	ldr	r3, [r7, #8]
 800b9e0:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d11a      	bne.n	800ba1e <HAL_RTC_GetDate+0x8e>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800b9e8:	68bb      	ldr	r3, [r7, #8]
 800b9ea:	78db      	ldrb	r3, [r3, #3]
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	f000 f8d7 	bl	800bba0 <RTC_Bcd2ToByte>
 800b9f2:	4603      	mov	r3, r0
 800b9f4:	461a      	mov	r2, r3
 800b9f6:	68bb      	ldr	r3, [r7, #8]
 800b9f8:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800b9fa:	68bb      	ldr	r3, [r7, #8]
 800b9fc:	785b      	ldrb	r3, [r3, #1]
 800b9fe:	4618      	mov	r0, r3
 800ba00:	f000 f8ce 	bl	800bba0 <RTC_Bcd2ToByte>
 800ba04:	4603      	mov	r3, r0
 800ba06:	461a      	mov	r2, r3
 800ba08:	68bb      	ldr	r3, [r7, #8]
 800ba0a:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800ba0c:	68bb      	ldr	r3, [r7, #8]
 800ba0e:	789b      	ldrb	r3, [r3, #2]
 800ba10:	4618      	mov	r0, r3
 800ba12:	f000 f8c5 	bl	800bba0 <RTC_Bcd2ToByte>
 800ba16:	4603      	mov	r3, r0
 800ba18:	461a      	mov	r2, r3
 800ba1a:	68bb      	ldr	r3, [r7, #8]
 800ba1c:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800ba1e:	2300      	movs	r3, #0
}
 800ba20:	4618      	mov	r0, r3
 800ba22:	3718      	adds	r7, #24
 800ba24:	46bd      	mov	sp, r7
 800ba26:	bd80      	pop	{r7, pc}
 800ba28:	40002800 	.word	0x40002800

0800ba2c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800ba2c:	b580      	push	{r7, lr}
 800ba2e:	b084      	sub	sp, #16
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	6078      	str	r0, [r7, #4]
#if defined(STM32L412xx) || defined(STM32L422xx)
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	68da      	ldr	r2, [r3, #12]
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800ba42:	60da      	str	r2, [r3, #12]
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
#endif

  tickstart = HAL_GetTick();
 800ba44:	f7f9 fce6 	bl	8005414 <HAL_GetTick>
 800ba48:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800ba4a:	e009      	b.n	800ba60 <HAL_RTC_WaitForSynchro+0x34>
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800ba4c:	f7f9 fce2 	bl	8005414 <HAL_GetTick>
 800ba50:	4602      	mov	r2, r0
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	1ad3      	subs	r3, r2, r3
 800ba56:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800ba5a:	d901      	bls.n	800ba60 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800ba5c:	2303      	movs	r3, #3
 800ba5e:	e007      	b.n	800ba70 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	68db      	ldr	r3, [r3, #12]
 800ba66:	f003 0320 	and.w	r3, r3, #32
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d0ee      	beq.n	800ba4c <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800ba6e:	2300      	movs	r3, #0
}
 800ba70:	4618      	mov	r0, r3
 800ba72:	3710      	adds	r7, #16
 800ba74:	46bd      	mov	sp, r7
 800ba76:	bd80      	pop	{r7, pc}

0800ba78 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800ba78:	b580      	push	{r7, lr}
 800ba7a:	b084      	sub	sp, #16
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ba80:	2300      	movs	r3, #0
 800ba82:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if ((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	68db      	ldr	r3, [r3, #12]
 800ba8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d123      	bne.n	800bada <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	68da      	ldr	r2, [r3, #12]
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800baa0:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800baa2:	f7f9 fcb7 	bl	8005414 <HAL_GetTick>
 800baa6:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800baa8:	e00d      	b.n	800bac6 <RTC_EnterInitMode+0x4e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800baaa:	f7f9 fcb3 	bl	8005414 <HAL_GetTick>
 800baae:	4602      	mov	r2, r0
 800bab0:	68bb      	ldr	r3, [r7, #8]
 800bab2:	1ad3      	subs	r3, r2, r3
 800bab4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800bab8:	d905      	bls.n	800bac6 <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 800baba:	2303      	movs	r3, #3
 800babc:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	2203      	movs	r2, #3
 800bac2:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	68db      	ldr	r3, [r3, #12]
 800bacc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d102      	bne.n	800bada <RTC_EnterInitMode+0x62>
 800bad4:	7bfb      	ldrb	r3, [r7, #15]
 800bad6:	2b03      	cmp	r3, #3
 800bad8:	d1e7      	bne.n	800baaa <RTC_EnterInitMode+0x32>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800bada:	7bfb      	ldrb	r3, [r7, #15]
}
 800badc:	4618      	mov	r0, r3
 800bade:	3710      	adds	r7, #16
 800bae0:	46bd      	mov	sp, r7
 800bae2:	bd80      	pop	{r7, pc}

0800bae4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800bae4:	b580      	push	{r7, lr}
 800bae6:	b084      	sub	sp, #16
 800bae8:	af00      	add	r7, sp, #0
 800baea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800baec:	2300      	movs	r3, #0
 800baee:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800baf0:	4b1a      	ldr	r3, [pc, #104]	@ (800bb5c <RTC_ExitInitMode+0x78>)
 800baf2:	68db      	ldr	r3, [r3, #12]
 800baf4:	4a19      	ldr	r2, [pc, #100]	@ (800bb5c <RTC_ExitInitMode+0x78>)
 800baf6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bafa:	60d3      	str	r3, [r2, #12]
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800bafc:	4b17      	ldr	r3, [pc, #92]	@ (800bb5c <RTC_ExitInitMode+0x78>)
 800bafe:	699b      	ldr	r3, [r3, #24]
 800bb00:	f003 0320 	and.w	r3, r3, #32
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d10c      	bne.n	800bb22 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800bb08:	6878      	ldr	r0, [r7, #4]
 800bb0a:	f7ff ff8f 	bl	800ba2c <HAL_RTC_WaitForSynchro>
 800bb0e:	4603      	mov	r3, r0
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d01e      	beq.n	800bb52 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	2203      	movs	r2, #3
 800bb18:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
      status = HAL_TIMEOUT;
 800bb1c:	2303      	movs	r3, #3
 800bb1e:	73fb      	strb	r3, [r7, #15]
 800bb20:	e017      	b.n	800bb52 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800bb22:	4b0e      	ldr	r3, [pc, #56]	@ (800bb5c <RTC_ExitInitMode+0x78>)
 800bb24:	699b      	ldr	r3, [r3, #24]
 800bb26:	4a0d      	ldr	r2, [pc, #52]	@ (800bb5c <RTC_ExitInitMode+0x78>)
 800bb28:	f023 0320 	bic.w	r3, r3, #32
 800bb2c:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800bb2e:	6878      	ldr	r0, [r7, #4]
 800bb30:	f7ff ff7c 	bl	800ba2c <HAL_RTC_WaitForSynchro>
 800bb34:	4603      	mov	r3, r0
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d005      	beq.n	800bb46 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	2203      	movs	r2, #3
 800bb3e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
      status = HAL_TIMEOUT;
 800bb42:	2303      	movs	r3, #3
 800bb44:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800bb46:	4b05      	ldr	r3, [pc, #20]	@ (800bb5c <RTC_ExitInitMode+0x78>)
 800bb48:	699b      	ldr	r3, [r3, #24]
 800bb4a:	4a04      	ldr	r2, [pc, #16]	@ (800bb5c <RTC_ExitInitMode+0x78>)
 800bb4c:	f043 0320 	orr.w	r3, r3, #32
 800bb50:	6193      	str	r3, [r2, #24]
  }

  return status;
 800bb52:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb54:	4618      	mov	r0, r3
 800bb56:	3710      	adds	r7, #16
 800bb58:	46bd      	mov	sp, r7
 800bb5a:	bd80      	pop	{r7, pc}
 800bb5c:	40002800 	.word	0x40002800

0800bb60 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800bb60:	b480      	push	{r7}
 800bb62:	b085      	sub	sp, #20
 800bb64:	af00      	add	r7, sp, #0
 800bb66:	4603      	mov	r3, r0
 800bb68:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800bb6a:	2300      	movs	r3, #0
 800bb6c:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 800bb6e:	79fb      	ldrb	r3, [r7, #7]
 800bb70:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 800bb72:	e005      	b.n	800bb80 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	3301      	adds	r3, #1
 800bb78:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 800bb7a:	7afb      	ldrb	r3, [r7, #11]
 800bb7c:	3b0a      	subs	r3, #10
 800bb7e:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 800bb80:	7afb      	ldrb	r3, [r7, #11]
 800bb82:	2b09      	cmp	r3, #9
 800bb84:	d8f6      	bhi.n	800bb74 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	b2db      	uxtb	r3, r3
 800bb8a:	011b      	lsls	r3, r3, #4
 800bb8c:	b2da      	uxtb	r2, r3
 800bb8e:	7afb      	ldrb	r3, [r7, #11]
 800bb90:	4313      	orrs	r3, r2
 800bb92:	b2db      	uxtb	r3, r3
}
 800bb94:	4618      	mov	r0, r3
 800bb96:	3714      	adds	r7, #20
 800bb98:	46bd      	mov	sp, r7
 800bb9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb9e:	4770      	bx	lr

0800bba0 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800bba0:	b480      	push	{r7}
 800bba2:	b085      	sub	sp, #20
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	4603      	mov	r3, r0
 800bba8:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800bbaa:	79fb      	ldrb	r3, [r7, #7]
 800bbac:	091b      	lsrs	r3, r3, #4
 800bbae:	b2db      	uxtb	r3, r3
 800bbb0:	461a      	mov	r2, r3
 800bbb2:	0092      	lsls	r2, r2, #2
 800bbb4:	4413      	add	r3, r2
 800bbb6:	005b      	lsls	r3, r3, #1
 800bbb8:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800bbba:	79fb      	ldrb	r3, [r7, #7]
 800bbbc:	f003 030f 	and.w	r3, r3, #15
 800bbc0:	b2da      	uxtb	r2, r3
 800bbc2:	7bfb      	ldrb	r3, [r7, #15]
 800bbc4:	4413      	add	r3, r2
 800bbc6:	b2db      	uxtb	r3, r3
}
 800bbc8:	4618      	mov	r0, r3
 800bbca:	3714      	adds	r7, #20
 800bbcc:	46bd      	mov	sp, r7
 800bbce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd2:	4770      	bx	lr

0800bbd4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800bbd4:	b580      	push	{r7, lr}
 800bbd6:	b084      	sub	sp, #16
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d101      	bne.n	800bbe6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800bbe2:	2301      	movs	r3, #1
 800bbe4:	e095      	b.n	800bd12 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d108      	bne.n	800bc00 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	685b      	ldr	r3, [r3, #4]
 800bbf2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800bbf6:	d009      	beq.n	800bc0c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	2200      	movs	r2, #0
 800bbfc:	61da      	str	r2, [r3, #28]
 800bbfe:	e005      	b.n	800bc0c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	2200      	movs	r2, #0
 800bc04:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	2200      	movs	r2, #0
 800bc0a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	2200      	movs	r2, #0
 800bc10:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800bc18:	b2db      	uxtb	r3, r3
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d106      	bne.n	800bc2c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	2200      	movs	r2, #0
 800bc22:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800bc26:	6878      	ldr	r0, [r7, #4]
 800bc28:	f7f9 f938 	bl	8004e9c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	2202      	movs	r2, #2
 800bc30:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	681a      	ldr	r2, [r3, #0]
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800bc42:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	68db      	ldr	r3, [r3, #12]
 800bc48:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800bc4c:	d902      	bls.n	800bc54 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800bc4e:	2300      	movs	r3, #0
 800bc50:	60fb      	str	r3, [r7, #12]
 800bc52:	e002      	b.n	800bc5a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800bc54:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800bc58:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	68db      	ldr	r3, [r3, #12]
 800bc5e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800bc62:	d007      	beq.n	800bc74 <HAL_SPI_Init+0xa0>
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	68db      	ldr	r3, [r3, #12]
 800bc68:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800bc6c:	d002      	beq.n	800bc74 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	2200      	movs	r2, #0
 800bc72:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	685b      	ldr	r3, [r3, #4]
 800bc78:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	689b      	ldr	r3, [r3, #8]
 800bc80:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800bc84:	431a      	orrs	r2, r3
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	691b      	ldr	r3, [r3, #16]
 800bc8a:	f003 0302 	and.w	r3, r3, #2
 800bc8e:	431a      	orrs	r2, r3
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	695b      	ldr	r3, [r3, #20]
 800bc94:	f003 0301 	and.w	r3, r3, #1
 800bc98:	431a      	orrs	r2, r3
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	699b      	ldr	r3, [r3, #24]
 800bc9e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800bca2:	431a      	orrs	r2, r3
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	69db      	ldr	r3, [r3, #28]
 800bca8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800bcac:	431a      	orrs	r2, r3
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	6a1b      	ldr	r3, [r3, #32]
 800bcb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bcb6:	ea42 0103 	orr.w	r1, r2, r3
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bcbe:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	430a      	orrs	r2, r1
 800bcc8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	699b      	ldr	r3, [r3, #24]
 800bcce:	0c1b      	lsrs	r3, r3, #16
 800bcd0:	f003 0204 	and.w	r2, r3, #4
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bcd8:	f003 0310 	and.w	r3, r3, #16
 800bcdc:	431a      	orrs	r2, r3
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bce2:	f003 0308 	and.w	r3, r3, #8
 800bce6:	431a      	orrs	r2, r3
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	68db      	ldr	r3, [r3, #12]
 800bcec:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800bcf0:	ea42 0103 	orr.w	r1, r2, r3
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	430a      	orrs	r2, r1
 800bd00:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	2200      	movs	r2, #0
 800bd06:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	2201      	movs	r2, #1
 800bd0c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800bd10:	2300      	movs	r3, #0
}
 800bd12:	4618      	mov	r0, r3
 800bd14:	3710      	adds	r7, #16
 800bd16:	46bd      	mov	sp, r7
 800bd18:	bd80      	pop	{r7, pc}

0800bd1a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bd1a:	b580      	push	{r7, lr}
 800bd1c:	b088      	sub	sp, #32
 800bd1e:	af00      	add	r7, sp, #0
 800bd20:	60f8      	str	r0, [r7, #12]
 800bd22:	60b9      	str	r1, [r7, #8]
 800bd24:	603b      	str	r3, [r7, #0]
 800bd26:	4613      	mov	r3, r2
 800bd28:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800bd2a:	2300      	movs	r3, #0
 800bd2c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800bd34:	2b01      	cmp	r3, #1
 800bd36:	d101      	bne.n	800bd3c <HAL_SPI_Transmit+0x22>
 800bd38:	2302      	movs	r3, #2
 800bd3a:	e15f      	b.n	800bffc <HAL_SPI_Transmit+0x2e2>
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	2201      	movs	r2, #1
 800bd40:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bd44:	f7f9 fb66 	bl	8005414 <HAL_GetTick>
 800bd48:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800bd4a:	88fb      	ldrh	r3, [r7, #6]
 800bd4c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800bd54:	b2db      	uxtb	r3, r3
 800bd56:	2b01      	cmp	r3, #1
 800bd58:	d002      	beq.n	800bd60 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800bd5a:	2302      	movs	r3, #2
 800bd5c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800bd5e:	e148      	b.n	800bff2 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 800bd60:	68bb      	ldr	r3, [r7, #8]
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d002      	beq.n	800bd6c <HAL_SPI_Transmit+0x52>
 800bd66:	88fb      	ldrh	r3, [r7, #6]
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d102      	bne.n	800bd72 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800bd6c:	2301      	movs	r3, #1
 800bd6e:	77fb      	strb	r3, [r7, #31]
    goto error;
 800bd70:	e13f      	b.n	800bff2 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	2203      	movs	r2, #3
 800bd76:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	2200      	movs	r2, #0
 800bd7e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	68ba      	ldr	r2, [r7, #8]
 800bd84:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	88fa      	ldrh	r2, [r7, #6]
 800bd8a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	88fa      	ldrh	r2, [r7, #6]
 800bd90:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	2200      	movs	r2, #0
 800bd96:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	2200      	movs	r2, #0
 800bd9c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	2200      	movs	r2, #0
 800bda4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	2200      	movs	r2, #0
 800bdac:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	2200      	movs	r2, #0
 800bdb2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	689b      	ldr	r3, [r3, #8]
 800bdb8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bdbc:	d10f      	bne.n	800bdde <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	681a      	ldr	r2, [r3, #0]
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800bdcc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	681a      	ldr	r2, [r3, #0]
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800bddc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bde8:	2b40      	cmp	r3, #64	@ 0x40
 800bdea:	d007      	beq.n	800bdfc <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	681a      	ldr	r2, [r3, #0]
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bdfa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	68db      	ldr	r3, [r3, #12]
 800be00:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800be04:	d94f      	bls.n	800bea6 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	685b      	ldr	r3, [r3, #4]
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d002      	beq.n	800be14 <HAL_SPI_Transmit+0xfa>
 800be0e:	8afb      	ldrh	r3, [r7, #22]
 800be10:	2b01      	cmp	r3, #1
 800be12:	d142      	bne.n	800be9a <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be18:	881a      	ldrh	r2, [r3, #0]
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be24:	1c9a      	adds	r2, r3, #2
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800be2e:	b29b      	uxth	r3, r3
 800be30:	3b01      	subs	r3, #1
 800be32:	b29a      	uxth	r2, r3
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800be38:	e02f      	b.n	800be9a <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	689b      	ldr	r3, [r3, #8]
 800be40:	f003 0302 	and.w	r3, r3, #2
 800be44:	2b02      	cmp	r3, #2
 800be46:	d112      	bne.n	800be6e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be4c:	881a      	ldrh	r2, [r3, #0]
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be58:	1c9a      	adds	r2, r3, #2
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800be62:	b29b      	uxth	r3, r3
 800be64:	3b01      	subs	r3, #1
 800be66:	b29a      	uxth	r2, r3
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800be6c:	e015      	b.n	800be9a <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800be6e:	f7f9 fad1 	bl	8005414 <HAL_GetTick>
 800be72:	4602      	mov	r2, r0
 800be74:	69bb      	ldr	r3, [r7, #24]
 800be76:	1ad3      	subs	r3, r2, r3
 800be78:	683a      	ldr	r2, [r7, #0]
 800be7a:	429a      	cmp	r2, r3
 800be7c:	d803      	bhi.n	800be86 <HAL_SPI_Transmit+0x16c>
 800be7e:	683b      	ldr	r3, [r7, #0]
 800be80:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800be84:	d102      	bne.n	800be8c <HAL_SPI_Transmit+0x172>
 800be86:	683b      	ldr	r3, [r7, #0]
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d106      	bne.n	800be9a <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 800be8c:	2303      	movs	r3, #3
 800be8e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	2201      	movs	r2, #1
 800be94:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800be98:	e0ab      	b.n	800bff2 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800be9e:	b29b      	uxth	r3, r3
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d1ca      	bne.n	800be3a <HAL_SPI_Transmit+0x120>
 800bea4:	e080      	b.n	800bfa8 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	685b      	ldr	r3, [r3, #4]
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d002      	beq.n	800beb4 <HAL_SPI_Transmit+0x19a>
 800beae:	8afb      	ldrh	r3, [r7, #22]
 800beb0:	2b01      	cmp	r3, #1
 800beb2:	d174      	bne.n	800bf9e <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800beb8:	b29b      	uxth	r3, r3
 800beba:	2b01      	cmp	r3, #1
 800bebc:	d912      	bls.n	800bee4 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bec2:	881a      	ldrh	r2, [r3, #0]
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bece:	1c9a      	adds	r2, r3, #2
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800bed8:	b29b      	uxth	r3, r3
 800beda:	3b02      	subs	r3, #2
 800bedc:	b29a      	uxth	r2, r3
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800bee2:	e05c      	b.n	800bf9e <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	330c      	adds	r3, #12
 800beee:	7812      	ldrb	r2, [r2, #0]
 800bef0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bef6:	1c5a      	adds	r2, r3, #1
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800bf00:	b29b      	uxth	r3, r3
 800bf02:	3b01      	subs	r3, #1
 800bf04:	b29a      	uxth	r2, r3
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800bf0a:	e048      	b.n	800bf9e <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	689b      	ldr	r3, [r3, #8]
 800bf12:	f003 0302 	and.w	r3, r3, #2
 800bf16:	2b02      	cmp	r3, #2
 800bf18:	d12b      	bne.n	800bf72 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800bf1e:	b29b      	uxth	r3, r3
 800bf20:	2b01      	cmp	r3, #1
 800bf22:	d912      	bls.n	800bf4a <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bf28:	881a      	ldrh	r2, [r3, #0]
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bf34:	1c9a      	adds	r2, r3, #2
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800bf3e:	b29b      	uxth	r3, r3
 800bf40:	3b02      	subs	r3, #2
 800bf42:	b29a      	uxth	r2, r3
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800bf48:	e029      	b.n	800bf9e <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	330c      	adds	r3, #12
 800bf54:	7812      	ldrb	r2, [r2, #0]
 800bf56:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bf5c:	1c5a      	adds	r2, r3, #1
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800bf66:	b29b      	uxth	r3, r3
 800bf68:	3b01      	subs	r3, #1
 800bf6a:	b29a      	uxth	r2, r3
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800bf70:	e015      	b.n	800bf9e <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bf72:	f7f9 fa4f 	bl	8005414 <HAL_GetTick>
 800bf76:	4602      	mov	r2, r0
 800bf78:	69bb      	ldr	r3, [r7, #24]
 800bf7a:	1ad3      	subs	r3, r2, r3
 800bf7c:	683a      	ldr	r2, [r7, #0]
 800bf7e:	429a      	cmp	r2, r3
 800bf80:	d803      	bhi.n	800bf8a <HAL_SPI_Transmit+0x270>
 800bf82:	683b      	ldr	r3, [r7, #0]
 800bf84:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bf88:	d102      	bne.n	800bf90 <HAL_SPI_Transmit+0x276>
 800bf8a:	683b      	ldr	r3, [r7, #0]
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d106      	bne.n	800bf9e <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 800bf90:	2303      	movs	r3, #3
 800bf92:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	2201      	movs	r2, #1
 800bf98:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800bf9c:	e029      	b.n	800bff2 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800bfa2:	b29b      	uxth	r3, r3
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d1b1      	bne.n	800bf0c <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800bfa8:	69ba      	ldr	r2, [r7, #24]
 800bfaa:	6839      	ldr	r1, [r7, #0]
 800bfac:	68f8      	ldr	r0, [r7, #12]
 800bfae:	f000 fb69 	bl	800c684 <SPI_EndRxTxTransaction>
 800bfb2:	4603      	mov	r3, r0
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d002      	beq.n	800bfbe <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	2220      	movs	r2, #32
 800bfbc:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	689b      	ldr	r3, [r3, #8]
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d10a      	bne.n	800bfdc <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bfc6:	2300      	movs	r3, #0
 800bfc8:	613b      	str	r3, [r7, #16]
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	68db      	ldr	r3, [r3, #12]
 800bfd0:	613b      	str	r3, [r7, #16]
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	689b      	ldr	r3, [r3, #8]
 800bfd8:	613b      	str	r3, [r7, #16]
 800bfda:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d002      	beq.n	800bfea <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 800bfe4:	2301      	movs	r3, #1
 800bfe6:	77fb      	strb	r3, [r7, #31]
 800bfe8:	e003      	b.n	800bff2 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	2201      	movs	r2, #1
 800bfee:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	2200      	movs	r2, #0
 800bff6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800bffa:	7ffb      	ldrb	r3, [r7, #31]
}
 800bffc:	4618      	mov	r0, r3
 800bffe:	3720      	adds	r7, #32
 800c000:	46bd      	mov	sp, r7
 800c002:	bd80      	pop	{r7, pc}

0800c004 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800c004:	b580      	push	{r7, lr}
 800c006:	b08a      	sub	sp, #40	@ 0x28
 800c008:	af00      	add	r7, sp, #0
 800c00a:	60f8      	str	r0, [r7, #12]
 800c00c:	60b9      	str	r1, [r7, #8]
 800c00e:	607a      	str	r2, [r7, #4]
 800c010:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800c012:	2301      	movs	r3, #1
 800c014:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800c016:	2300      	movs	r3, #0
 800c018:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800c022:	2b01      	cmp	r3, #1
 800c024:	d101      	bne.n	800c02a <HAL_SPI_TransmitReceive+0x26>
 800c026:	2302      	movs	r3, #2
 800c028:	e20a      	b.n	800c440 <HAL_SPI_TransmitReceive+0x43c>
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	2201      	movs	r2, #1
 800c02e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c032:	f7f9 f9ef 	bl	8005414 <HAL_GetTick>
 800c036:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800c03e:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	685b      	ldr	r3, [r3, #4]
 800c044:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800c046:	887b      	ldrh	r3, [r7, #2]
 800c048:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800c04a:	887b      	ldrh	r3, [r7, #2]
 800c04c:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800c04e:	7efb      	ldrb	r3, [r7, #27]
 800c050:	2b01      	cmp	r3, #1
 800c052:	d00e      	beq.n	800c072 <HAL_SPI_TransmitReceive+0x6e>
 800c054:	697b      	ldr	r3, [r7, #20]
 800c056:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800c05a:	d106      	bne.n	800c06a <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	689b      	ldr	r3, [r3, #8]
 800c060:	2b00      	cmp	r3, #0
 800c062:	d102      	bne.n	800c06a <HAL_SPI_TransmitReceive+0x66>
 800c064:	7efb      	ldrb	r3, [r7, #27]
 800c066:	2b04      	cmp	r3, #4
 800c068:	d003      	beq.n	800c072 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800c06a:	2302      	movs	r3, #2
 800c06c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800c070:	e1e0      	b.n	800c434 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800c072:	68bb      	ldr	r3, [r7, #8]
 800c074:	2b00      	cmp	r3, #0
 800c076:	d005      	beq.n	800c084 <HAL_SPI_TransmitReceive+0x80>
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d002      	beq.n	800c084 <HAL_SPI_TransmitReceive+0x80>
 800c07e:	887b      	ldrh	r3, [r7, #2]
 800c080:	2b00      	cmp	r3, #0
 800c082:	d103      	bne.n	800c08c <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800c084:	2301      	movs	r3, #1
 800c086:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800c08a:	e1d3      	b.n	800c434 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800c092:	b2db      	uxtb	r3, r3
 800c094:	2b04      	cmp	r3, #4
 800c096:	d003      	beq.n	800c0a0 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	2205      	movs	r2, #5
 800c09c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	2200      	movs	r2, #0
 800c0a4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	687a      	ldr	r2, [r7, #4]
 800c0aa:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	887a      	ldrh	r2, [r7, #2]
 800c0b0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	887a      	ldrh	r2, [r7, #2]
 800c0b8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	68ba      	ldr	r2, [r7, #8]
 800c0c0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	887a      	ldrh	r2, [r7, #2]
 800c0c6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	887a      	ldrh	r2, [r7, #2]
 800c0cc:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	2200      	movs	r2, #0
 800c0d2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	2200      	movs	r2, #0
 800c0d8:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	68db      	ldr	r3, [r3, #12]
 800c0de:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800c0e2:	d802      	bhi.n	800c0ea <HAL_SPI_TransmitReceive+0xe6>
 800c0e4:	8a3b      	ldrh	r3, [r7, #16]
 800c0e6:	2b01      	cmp	r3, #1
 800c0e8:	d908      	bls.n	800c0fc <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	685a      	ldr	r2, [r3, #4]
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800c0f8:	605a      	str	r2, [r3, #4]
 800c0fa:	e007      	b.n	800c10c <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	685a      	ldr	r2, [r3, #4]
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800c10a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c116:	2b40      	cmp	r3, #64	@ 0x40
 800c118:	d007      	beq.n	800c12a <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	681a      	ldr	r2, [r3, #0]
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c128:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	68db      	ldr	r3, [r3, #12]
 800c12e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800c132:	f240 8081 	bls.w	800c238 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	685b      	ldr	r3, [r3, #4]
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d002      	beq.n	800c144 <HAL_SPI_TransmitReceive+0x140>
 800c13e:	8a7b      	ldrh	r3, [r7, #18]
 800c140:	2b01      	cmp	r3, #1
 800c142:	d16d      	bne.n	800c220 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c148:	881a      	ldrh	r2, [r3, #0]
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c154:	1c9a      	adds	r2, r3, #2
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c15e:	b29b      	uxth	r3, r3
 800c160:	3b01      	subs	r3, #1
 800c162:	b29a      	uxth	r2, r3
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c168:	e05a      	b.n	800c220 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	689b      	ldr	r3, [r3, #8]
 800c170:	f003 0302 	and.w	r3, r3, #2
 800c174:	2b02      	cmp	r3, #2
 800c176:	d11b      	bne.n	800c1b0 <HAL_SPI_TransmitReceive+0x1ac>
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c17c:	b29b      	uxth	r3, r3
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d016      	beq.n	800c1b0 <HAL_SPI_TransmitReceive+0x1ac>
 800c182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c184:	2b01      	cmp	r3, #1
 800c186:	d113      	bne.n	800c1b0 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c18c:	881a      	ldrh	r2, [r3, #0]
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c198:	1c9a      	adds	r2, r3, #2
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c1a2:	b29b      	uxth	r3, r3
 800c1a4:	3b01      	subs	r3, #1
 800c1a6:	b29a      	uxth	r2, r3
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c1ac:	2300      	movs	r3, #0
 800c1ae:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	689b      	ldr	r3, [r3, #8]
 800c1b6:	f003 0301 	and.w	r3, r3, #1
 800c1ba:	2b01      	cmp	r3, #1
 800c1bc:	d11c      	bne.n	800c1f8 <HAL_SPI_TransmitReceive+0x1f4>
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800c1c4:	b29b      	uxth	r3, r3
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d016      	beq.n	800c1f8 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	68da      	ldr	r2, [r3, #12]
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c1d4:	b292      	uxth	r2, r2
 800c1d6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c1dc:	1c9a      	adds	r2, r3, #2
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800c1e8:	b29b      	uxth	r3, r3
 800c1ea:	3b01      	subs	r3, #1
 800c1ec:	b29a      	uxth	r2, r3
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c1f4:	2301      	movs	r3, #1
 800c1f6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800c1f8:	f7f9 f90c 	bl	8005414 <HAL_GetTick>
 800c1fc:	4602      	mov	r2, r0
 800c1fe:	69fb      	ldr	r3, [r7, #28]
 800c200:	1ad3      	subs	r3, r2, r3
 800c202:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c204:	429a      	cmp	r2, r3
 800c206:	d80b      	bhi.n	800c220 <HAL_SPI_TransmitReceive+0x21c>
 800c208:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c20a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c20e:	d007      	beq.n	800c220 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 800c210:	2303      	movs	r3, #3
 800c212:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	2201      	movs	r2, #1
 800c21a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800c21e:	e109      	b.n	800c434 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c224:	b29b      	uxth	r3, r3
 800c226:	2b00      	cmp	r3, #0
 800c228:	d19f      	bne.n	800c16a <HAL_SPI_TransmitReceive+0x166>
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800c230:	b29b      	uxth	r3, r3
 800c232:	2b00      	cmp	r3, #0
 800c234:	d199      	bne.n	800c16a <HAL_SPI_TransmitReceive+0x166>
 800c236:	e0e3      	b.n	800c400 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	685b      	ldr	r3, [r3, #4]
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d003      	beq.n	800c248 <HAL_SPI_TransmitReceive+0x244>
 800c240:	8a7b      	ldrh	r3, [r7, #18]
 800c242:	2b01      	cmp	r3, #1
 800c244:	f040 80cf 	bne.w	800c3e6 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c24c:	b29b      	uxth	r3, r3
 800c24e:	2b01      	cmp	r3, #1
 800c250:	d912      	bls.n	800c278 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c256:	881a      	ldrh	r2, [r3, #0]
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c262:	1c9a      	adds	r2, r3, #2
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c26c:	b29b      	uxth	r3, r3
 800c26e:	3b02      	subs	r3, #2
 800c270:	b29a      	uxth	r2, r3
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800c276:	e0b6      	b.n	800c3e6 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	330c      	adds	r3, #12
 800c282:	7812      	ldrb	r2, [r2, #0]
 800c284:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c28a:	1c5a      	adds	r2, r3, #1
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c294:	b29b      	uxth	r3, r3
 800c296:	3b01      	subs	r3, #1
 800c298:	b29a      	uxth	r2, r3
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c29e:	e0a2      	b.n	800c3e6 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	689b      	ldr	r3, [r3, #8]
 800c2a6:	f003 0302 	and.w	r3, r3, #2
 800c2aa:	2b02      	cmp	r3, #2
 800c2ac:	d134      	bne.n	800c318 <HAL_SPI_TransmitReceive+0x314>
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c2b2:	b29b      	uxth	r3, r3
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d02f      	beq.n	800c318 <HAL_SPI_TransmitReceive+0x314>
 800c2b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2ba:	2b01      	cmp	r3, #1
 800c2bc:	d12c      	bne.n	800c318 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c2c2:	b29b      	uxth	r3, r3
 800c2c4:	2b01      	cmp	r3, #1
 800c2c6:	d912      	bls.n	800c2ee <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c2cc:	881a      	ldrh	r2, [r3, #0]
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c2d8:	1c9a      	adds	r2, r3, #2
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c2e2:	b29b      	uxth	r3, r3
 800c2e4:	3b02      	subs	r3, #2
 800c2e6:	b29a      	uxth	r2, r3
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800c2ec:	e012      	b.n	800c314 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	330c      	adds	r3, #12
 800c2f8:	7812      	ldrb	r2, [r2, #0]
 800c2fa:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c300:	1c5a      	adds	r2, r3, #1
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c30a:	b29b      	uxth	r3, r3
 800c30c:	3b01      	subs	r3, #1
 800c30e:	b29a      	uxth	r2, r3
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c314:	2300      	movs	r3, #0
 800c316:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	689b      	ldr	r3, [r3, #8]
 800c31e:	f003 0301 	and.w	r3, r3, #1
 800c322:	2b01      	cmp	r3, #1
 800c324:	d148      	bne.n	800c3b8 <HAL_SPI_TransmitReceive+0x3b4>
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800c32c:	b29b      	uxth	r3, r3
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d042      	beq.n	800c3b8 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800c338:	b29b      	uxth	r3, r3
 800c33a:	2b01      	cmp	r3, #1
 800c33c:	d923      	bls.n	800c386 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	68da      	ldr	r2, [r3, #12]
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c348:	b292      	uxth	r2, r2
 800c34a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c350:	1c9a      	adds	r2, r3, #2
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800c35c:	b29b      	uxth	r3, r3
 800c35e:	3b02      	subs	r3, #2
 800c360:	b29a      	uxth	r2, r3
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800c36e:	b29b      	uxth	r3, r3
 800c370:	2b01      	cmp	r3, #1
 800c372:	d81f      	bhi.n	800c3b4 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	685a      	ldr	r2, [r3, #4]
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800c382:	605a      	str	r2, [r3, #4]
 800c384:	e016      	b.n	800c3b4 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	f103 020c 	add.w	r2, r3, #12
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c392:	7812      	ldrb	r2, [r2, #0]
 800c394:	b2d2      	uxtb	r2, r2
 800c396:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c39c:	1c5a      	adds	r2, r3, #1
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800c3a8:	b29b      	uxth	r3, r3
 800c3aa:	3b01      	subs	r3, #1
 800c3ac:	b29a      	uxth	r2, r3
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c3b4:	2301      	movs	r3, #1
 800c3b6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800c3b8:	f7f9 f82c 	bl	8005414 <HAL_GetTick>
 800c3bc:	4602      	mov	r2, r0
 800c3be:	69fb      	ldr	r3, [r7, #28]
 800c3c0:	1ad3      	subs	r3, r2, r3
 800c3c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c3c4:	429a      	cmp	r2, r3
 800c3c6:	d803      	bhi.n	800c3d0 <HAL_SPI_TransmitReceive+0x3cc>
 800c3c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3ca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c3ce:	d102      	bne.n	800c3d6 <HAL_SPI_TransmitReceive+0x3d2>
 800c3d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d107      	bne.n	800c3e6 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 800c3d6:	2303      	movs	r3, #3
 800c3d8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	2201      	movs	r2, #1
 800c3e0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800c3e4:	e026      	b.n	800c434 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800c3ea:	b29b      	uxth	r3, r3
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	f47f af57 	bne.w	800c2a0 <HAL_SPI_TransmitReceive+0x29c>
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800c3f8:	b29b      	uxth	r3, r3
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	f47f af50 	bne.w	800c2a0 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c400:	69fa      	ldr	r2, [r7, #28]
 800c402:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800c404:	68f8      	ldr	r0, [r7, #12]
 800c406:	f000 f93d 	bl	800c684 <SPI_EndRxTxTransaction>
 800c40a:	4603      	mov	r3, r0
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d005      	beq.n	800c41c <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 800c410:	2301      	movs	r3, #1
 800c412:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	2220      	movs	r2, #32
 800c41a:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c420:	2b00      	cmp	r3, #0
 800c422:	d003      	beq.n	800c42c <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 800c424:	2301      	movs	r3, #1
 800c426:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c42a:	e003      	b.n	800c434 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	2201      	movs	r2, #1
 800c430:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	2200      	movs	r2, #0
 800c438:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800c43c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 800c440:	4618      	mov	r0, r3
 800c442:	3728      	adds	r7, #40	@ 0x28
 800c444:	46bd      	mov	sp, r7
 800c446:	bd80      	pop	{r7, pc}

0800c448 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800c448:	b580      	push	{r7, lr}
 800c44a:	b088      	sub	sp, #32
 800c44c:	af00      	add	r7, sp, #0
 800c44e:	60f8      	str	r0, [r7, #12]
 800c450:	60b9      	str	r1, [r7, #8]
 800c452:	603b      	str	r3, [r7, #0]
 800c454:	4613      	mov	r3, r2
 800c456:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800c458:	f7f8 ffdc 	bl	8005414 <HAL_GetTick>
 800c45c:	4602      	mov	r2, r0
 800c45e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c460:	1a9b      	subs	r3, r3, r2
 800c462:	683a      	ldr	r2, [r7, #0]
 800c464:	4413      	add	r3, r2
 800c466:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800c468:	f7f8 ffd4 	bl	8005414 <HAL_GetTick>
 800c46c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800c46e:	4b39      	ldr	r3, [pc, #228]	@ (800c554 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	015b      	lsls	r3, r3, #5
 800c474:	0d1b      	lsrs	r3, r3, #20
 800c476:	69fa      	ldr	r2, [r7, #28]
 800c478:	fb02 f303 	mul.w	r3, r2, r3
 800c47c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c47e:	e054      	b.n	800c52a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800c480:	683b      	ldr	r3, [r7, #0]
 800c482:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c486:	d050      	beq.n	800c52a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800c488:	f7f8 ffc4 	bl	8005414 <HAL_GetTick>
 800c48c:	4602      	mov	r2, r0
 800c48e:	69bb      	ldr	r3, [r7, #24]
 800c490:	1ad3      	subs	r3, r2, r3
 800c492:	69fa      	ldr	r2, [r7, #28]
 800c494:	429a      	cmp	r2, r3
 800c496:	d902      	bls.n	800c49e <SPI_WaitFlagStateUntilTimeout+0x56>
 800c498:	69fb      	ldr	r3, [r7, #28]
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d13d      	bne.n	800c51a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	685a      	ldr	r2, [r3, #4]
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800c4ac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	685b      	ldr	r3, [r3, #4]
 800c4b2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800c4b6:	d111      	bne.n	800c4dc <SPI_WaitFlagStateUntilTimeout+0x94>
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	689b      	ldr	r3, [r3, #8]
 800c4bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c4c0:	d004      	beq.n	800c4cc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	689b      	ldr	r3, [r3, #8]
 800c4c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c4ca:	d107      	bne.n	800c4dc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	681a      	ldr	r2, [r3, #0]
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c4da:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c4e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c4e4:	d10f      	bne.n	800c506 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	681a      	ldr	r2, [r3, #0]
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800c4f4:	601a      	str	r2, [r3, #0]
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	681a      	ldr	r2, [r3, #0]
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800c504:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	2201      	movs	r2, #1
 800c50a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	2200      	movs	r2, #0
 800c512:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800c516:	2303      	movs	r3, #3
 800c518:	e017      	b.n	800c54a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800c51a:	697b      	ldr	r3, [r7, #20]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d101      	bne.n	800c524 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800c520:	2300      	movs	r3, #0
 800c522:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800c524:	697b      	ldr	r3, [r7, #20]
 800c526:	3b01      	subs	r3, #1
 800c528:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	689a      	ldr	r2, [r3, #8]
 800c530:	68bb      	ldr	r3, [r7, #8]
 800c532:	4013      	ands	r3, r2
 800c534:	68ba      	ldr	r2, [r7, #8]
 800c536:	429a      	cmp	r2, r3
 800c538:	bf0c      	ite	eq
 800c53a:	2301      	moveq	r3, #1
 800c53c:	2300      	movne	r3, #0
 800c53e:	b2db      	uxtb	r3, r3
 800c540:	461a      	mov	r2, r3
 800c542:	79fb      	ldrb	r3, [r7, #7]
 800c544:	429a      	cmp	r2, r3
 800c546:	d19b      	bne.n	800c480 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800c548:	2300      	movs	r3, #0
}
 800c54a:	4618      	mov	r0, r3
 800c54c:	3720      	adds	r7, #32
 800c54e:	46bd      	mov	sp, r7
 800c550:	bd80      	pop	{r7, pc}
 800c552:	bf00      	nop
 800c554:	20000298 	.word	0x20000298

0800c558 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800c558:	b580      	push	{r7, lr}
 800c55a:	b08a      	sub	sp, #40	@ 0x28
 800c55c:	af00      	add	r7, sp, #0
 800c55e:	60f8      	str	r0, [r7, #12]
 800c560:	60b9      	str	r1, [r7, #8]
 800c562:	607a      	str	r2, [r7, #4]
 800c564:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800c566:	2300      	movs	r3, #0
 800c568:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800c56a:	f7f8 ff53 	bl	8005414 <HAL_GetTick>
 800c56e:	4602      	mov	r2, r0
 800c570:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c572:	1a9b      	subs	r3, r3, r2
 800c574:	683a      	ldr	r2, [r7, #0]
 800c576:	4413      	add	r3, r2
 800c578:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800c57a:	f7f8 ff4b 	bl	8005414 <HAL_GetTick>
 800c57e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	330c      	adds	r3, #12
 800c586:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800c588:	4b3d      	ldr	r3, [pc, #244]	@ (800c680 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800c58a:	681a      	ldr	r2, [r3, #0]
 800c58c:	4613      	mov	r3, r2
 800c58e:	009b      	lsls	r3, r3, #2
 800c590:	4413      	add	r3, r2
 800c592:	00da      	lsls	r2, r3, #3
 800c594:	1ad3      	subs	r3, r2, r3
 800c596:	0d1b      	lsrs	r3, r3, #20
 800c598:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c59a:	fb02 f303 	mul.w	r3, r2, r3
 800c59e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800c5a0:	e060      	b.n	800c664 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800c5a2:	68bb      	ldr	r3, [r7, #8]
 800c5a4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800c5a8:	d107      	bne.n	800c5ba <SPI_WaitFifoStateUntilTimeout+0x62>
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d104      	bne.n	800c5ba <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800c5b0:	69fb      	ldr	r3, [r7, #28]
 800c5b2:	781b      	ldrb	r3, [r3, #0]
 800c5b4:	b2db      	uxtb	r3, r3
 800c5b6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800c5b8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800c5ba:	683b      	ldr	r3, [r7, #0]
 800c5bc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c5c0:	d050      	beq.n	800c664 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800c5c2:	f7f8 ff27 	bl	8005414 <HAL_GetTick>
 800c5c6:	4602      	mov	r2, r0
 800c5c8:	6a3b      	ldr	r3, [r7, #32]
 800c5ca:	1ad3      	subs	r3, r2, r3
 800c5cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c5ce:	429a      	cmp	r2, r3
 800c5d0:	d902      	bls.n	800c5d8 <SPI_WaitFifoStateUntilTimeout+0x80>
 800c5d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d13d      	bne.n	800c654 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	685a      	ldr	r2, [r3, #4]
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800c5e6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	685b      	ldr	r3, [r3, #4]
 800c5ec:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800c5f0:	d111      	bne.n	800c616 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	689b      	ldr	r3, [r3, #8]
 800c5f6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c5fa:	d004      	beq.n	800c606 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	689b      	ldr	r3, [r3, #8]
 800c600:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c604:	d107      	bne.n	800c616 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	681a      	ldr	r2, [r3, #0]
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c614:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c61a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c61e:	d10f      	bne.n	800c640 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	681a      	ldr	r2, [r3, #0]
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800c62e:	601a      	str	r2, [r3, #0]
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	681a      	ldr	r2, [r3, #0]
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800c63e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	2201      	movs	r2, #1
 800c644:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	2200      	movs	r2, #0
 800c64c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800c650:	2303      	movs	r3, #3
 800c652:	e010      	b.n	800c676 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800c654:	69bb      	ldr	r3, [r7, #24]
 800c656:	2b00      	cmp	r3, #0
 800c658:	d101      	bne.n	800c65e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800c65a:	2300      	movs	r3, #0
 800c65c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800c65e:	69bb      	ldr	r3, [r7, #24]
 800c660:	3b01      	subs	r3, #1
 800c662:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	689a      	ldr	r2, [r3, #8]
 800c66a:	68bb      	ldr	r3, [r7, #8]
 800c66c:	4013      	ands	r3, r2
 800c66e:	687a      	ldr	r2, [r7, #4]
 800c670:	429a      	cmp	r2, r3
 800c672:	d196      	bne.n	800c5a2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800c674:	2300      	movs	r3, #0
}
 800c676:	4618      	mov	r0, r3
 800c678:	3728      	adds	r7, #40	@ 0x28
 800c67a:	46bd      	mov	sp, r7
 800c67c:	bd80      	pop	{r7, pc}
 800c67e:	bf00      	nop
 800c680:	20000298 	.word	0x20000298

0800c684 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800c684:	b580      	push	{r7, lr}
 800c686:	b086      	sub	sp, #24
 800c688:	af02      	add	r7, sp, #8
 800c68a:	60f8      	str	r0, [r7, #12]
 800c68c:	60b9      	str	r1, [r7, #8]
 800c68e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	9300      	str	r3, [sp, #0]
 800c694:	68bb      	ldr	r3, [r7, #8]
 800c696:	2200      	movs	r2, #0
 800c698:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800c69c:	68f8      	ldr	r0, [r7, #12]
 800c69e:	f7ff ff5b 	bl	800c558 <SPI_WaitFifoStateUntilTimeout>
 800c6a2:	4603      	mov	r3, r0
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d007      	beq.n	800c6b8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c6ac:	f043 0220 	orr.w	r2, r3, #32
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800c6b4:	2303      	movs	r3, #3
 800c6b6:	e027      	b.n	800c708 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	9300      	str	r3, [sp, #0]
 800c6bc:	68bb      	ldr	r3, [r7, #8]
 800c6be:	2200      	movs	r2, #0
 800c6c0:	2180      	movs	r1, #128	@ 0x80
 800c6c2:	68f8      	ldr	r0, [r7, #12]
 800c6c4:	f7ff fec0 	bl	800c448 <SPI_WaitFlagStateUntilTimeout>
 800c6c8:	4603      	mov	r3, r0
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d007      	beq.n	800c6de <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c6d2:	f043 0220 	orr.w	r2, r3, #32
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800c6da:	2303      	movs	r3, #3
 800c6dc:	e014      	b.n	800c708 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	9300      	str	r3, [sp, #0]
 800c6e2:	68bb      	ldr	r3, [r7, #8]
 800c6e4:	2200      	movs	r2, #0
 800c6e6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800c6ea:	68f8      	ldr	r0, [r7, #12]
 800c6ec:	f7ff ff34 	bl	800c558 <SPI_WaitFifoStateUntilTimeout>
 800c6f0:	4603      	mov	r3, r0
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d007      	beq.n	800c706 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c6fa:	f043 0220 	orr.w	r2, r3, #32
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800c702:	2303      	movs	r3, #3
 800c704:	e000      	b.n	800c708 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800c706:	2300      	movs	r3, #0
}
 800c708:	4618      	mov	r0, r3
 800c70a:	3710      	adds	r7, #16
 800c70c:	46bd      	mov	sp, r7
 800c70e:	bd80      	pop	{r7, pc}

0800c710 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c710:	b580      	push	{r7, lr}
 800c712:	b082      	sub	sp, #8
 800c714:	af00      	add	r7, sp, #0
 800c716:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d101      	bne.n	800c722 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c71e:	2301      	movs	r3, #1
 800c720:	e049      	b.n	800c7b6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c728:	b2db      	uxtb	r3, r3
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d106      	bne.n	800c73c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	2200      	movs	r2, #0
 800c732:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c736:	6878      	ldr	r0, [r7, #4]
 800c738:	f7f8 fc04 	bl	8004f44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	2202      	movs	r2, #2
 800c740:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	681a      	ldr	r2, [r3, #0]
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	3304      	adds	r3, #4
 800c74c:	4619      	mov	r1, r3
 800c74e:	4610      	mov	r0, r2
 800c750:	f000 fb02 	bl	800cd58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	2201      	movs	r2, #1
 800c758:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	2201      	movs	r2, #1
 800c760:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	2201      	movs	r2, #1
 800c768:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	2201      	movs	r2, #1
 800c770:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	2201      	movs	r2, #1
 800c778:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	2201      	movs	r2, #1
 800c780:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	2201      	movs	r2, #1
 800c788:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	2201      	movs	r2, #1
 800c790:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	2201      	movs	r2, #1
 800c798:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	2201      	movs	r2, #1
 800c7a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	2201      	movs	r2, #1
 800c7a8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	2201      	movs	r2, #1
 800c7b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c7b4:	2300      	movs	r3, #0
}
 800c7b6:	4618      	mov	r0, r3
 800c7b8:	3708      	adds	r7, #8
 800c7ba:	46bd      	mov	sp, r7
 800c7bc:	bd80      	pop	{r7, pc}
	...

0800c7c0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800c7c0:	b480      	push	{r7}
 800c7c2:	b085      	sub	sp, #20
 800c7c4:	af00      	add	r7, sp, #0
 800c7c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c7ce:	b2db      	uxtb	r3, r3
 800c7d0:	2b01      	cmp	r3, #1
 800c7d2:	d001      	beq.n	800c7d8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800c7d4:	2301      	movs	r3, #1
 800c7d6:	e047      	b.n	800c868 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	2202      	movs	r2, #2
 800c7dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	4a23      	ldr	r2, [pc, #140]	@ (800c874 <HAL_TIM_Base_Start+0xb4>)
 800c7e6:	4293      	cmp	r3, r2
 800c7e8:	d01d      	beq.n	800c826 <HAL_TIM_Base_Start+0x66>
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c7f2:	d018      	beq.n	800c826 <HAL_TIM_Base_Start+0x66>
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	4a1f      	ldr	r2, [pc, #124]	@ (800c878 <HAL_TIM_Base_Start+0xb8>)
 800c7fa:	4293      	cmp	r3, r2
 800c7fc:	d013      	beq.n	800c826 <HAL_TIM_Base_Start+0x66>
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	4a1e      	ldr	r2, [pc, #120]	@ (800c87c <HAL_TIM_Base_Start+0xbc>)
 800c804:	4293      	cmp	r3, r2
 800c806:	d00e      	beq.n	800c826 <HAL_TIM_Base_Start+0x66>
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	4a1c      	ldr	r2, [pc, #112]	@ (800c880 <HAL_TIM_Base_Start+0xc0>)
 800c80e:	4293      	cmp	r3, r2
 800c810:	d009      	beq.n	800c826 <HAL_TIM_Base_Start+0x66>
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	4a1b      	ldr	r2, [pc, #108]	@ (800c884 <HAL_TIM_Base_Start+0xc4>)
 800c818:	4293      	cmp	r3, r2
 800c81a:	d004      	beq.n	800c826 <HAL_TIM_Base_Start+0x66>
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	4a19      	ldr	r2, [pc, #100]	@ (800c888 <HAL_TIM_Base_Start+0xc8>)
 800c822:	4293      	cmp	r3, r2
 800c824:	d115      	bne.n	800c852 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	689a      	ldr	r2, [r3, #8]
 800c82c:	4b17      	ldr	r3, [pc, #92]	@ (800c88c <HAL_TIM_Base_Start+0xcc>)
 800c82e:	4013      	ands	r3, r2
 800c830:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	2b06      	cmp	r3, #6
 800c836:	d015      	beq.n	800c864 <HAL_TIM_Base_Start+0xa4>
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c83e:	d011      	beq.n	800c864 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	681a      	ldr	r2, [r3, #0]
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	f042 0201 	orr.w	r2, r2, #1
 800c84e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c850:	e008      	b.n	800c864 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	681a      	ldr	r2, [r3, #0]
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	f042 0201 	orr.w	r2, r2, #1
 800c860:	601a      	str	r2, [r3, #0]
 800c862:	e000      	b.n	800c866 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c864:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c866:	2300      	movs	r3, #0
}
 800c868:	4618      	mov	r0, r3
 800c86a:	3714      	adds	r7, #20
 800c86c:	46bd      	mov	sp, r7
 800c86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c872:	4770      	bx	lr
 800c874:	40012c00 	.word	0x40012c00
 800c878:	40000400 	.word	0x40000400
 800c87c:	40000800 	.word	0x40000800
 800c880:	40000c00 	.word	0x40000c00
 800c884:	40013400 	.word	0x40013400
 800c888:	40014000 	.word	0x40014000
 800c88c:	00010007 	.word	0x00010007

0800c890 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c890:	b480      	push	{r7}
 800c892:	b085      	sub	sp, #20
 800c894:	af00      	add	r7, sp, #0
 800c896:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c89e:	b2db      	uxtb	r3, r3
 800c8a0:	2b01      	cmp	r3, #1
 800c8a2:	d001      	beq.n	800c8a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c8a4:	2301      	movs	r3, #1
 800c8a6:	e04f      	b.n	800c948 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	2202      	movs	r2, #2
 800c8ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	68da      	ldr	r2, [r3, #12]
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	f042 0201 	orr.w	r2, r2, #1
 800c8be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	4a23      	ldr	r2, [pc, #140]	@ (800c954 <HAL_TIM_Base_Start_IT+0xc4>)
 800c8c6:	4293      	cmp	r3, r2
 800c8c8:	d01d      	beq.n	800c906 <HAL_TIM_Base_Start_IT+0x76>
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c8d2:	d018      	beq.n	800c906 <HAL_TIM_Base_Start_IT+0x76>
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	4a1f      	ldr	r2, [pc, #124]	@ (800c958 <HAL_TIM_Base_Start_IT+0xc8>)
 800c8da:	4293      	cmp	r3, r2
 800c8dc:	d013      	beq.n	800c906 <HAL_TIM_Base_Start_IT+0x76>
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	4a1e      	ldr	r2, [pc, #120]	@ (800c95c <HAL_TIM_Base_Start_IT+0xcc>)
 800c8e4:	4293      	cmp	r3, r2
 800c8e6:	d00e      	beq.n	800c906 <HAL_TIM_Base_Start_IT+0x76>
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	4a1c      	ldr	r2, [pc, #112]	@ (800c960 <HAL_TIM_Base_Start_IT+0xd0>)
 800c8ee:	4293      	cmp	r3, r2
 800c8f0:	d009      	beq.n	800c906 <HAL_TIM_Base_Start_IT+0x76>
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	4a1b      	ldr	r2, [pc, #108]	@ (800c964 <HAL_TIM_Base_Start_IT+0xd4>)
 800c8f8:	4293      	cmp	r3, r2
 800c8fa:	d004      	beq.n	800c906 <HAL_TIM_Base_Start_IT+0x76>
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	4a19      	ldr	r2, [pc, #100]	@ (800c968 <HAL_TIM_Base_Start_IT+0xd8>)
 800c902:	4293      	cmp	r3, r2
 800c904:	d115      	bne.n	800c932 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	689a      	ldr	r2, [r3, #8]
 800c90c:	4b17      	ldr	r3, [pc, #92]	@ (800c96c <HAL_TIM_Base_Start_IT+0xdc>)
 800c90e:	4013      	ands	r3, r2
 800c910:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	2b06      	cmp	r3, #6
 800c916:	d015      	beq.n	800c944 <HAL_TIM_Base_Start_IT+0xb4>
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c91e:	d011      	beq.n	800c944 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	681a      	ldr	r2, [r3, #0]
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	f042 0201 	orr.w	r2, r2, #1
 800c92e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c930:	e008      	b.n	800c944 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	681a      	ldr	r2, [r3, #0]
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	f042 0201 	orr.w	r2, r2, #1
 800c940:	601a      	str	r2, [r3, #0]
 800c942:	e000      	b.n	800c946 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c944:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c946:	2300      	movs	r3, #0
}
 800c948:	4618      	mov	r0, r3
 800c94a:	3714      	adds	r7, #20
 800c94c:	46bd      	mov	sp, r7
 800c94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c952:	4770      	bx	lr
 800c954:	40012c00 	.word	0x40012c00
 800c958:	40000400 	.word	0x40000400
 800c95c:	40000800 	.word	0x40000800
 800c960:	40000c00 	.word	0x40000c00
 800c964:	40013400 	.word	0x40013400
 800c968:	40014000 	.word	0x40014000
 800c96c:	00010007 	.word	0x00010007

0800c970 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c970:	b580      	push	{r7, lr}
 800c972:	b084      	sub	sp, #16
 800c974:	af00      	add	r7, sp, #0
 800c976:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	68db      	ldr	r3, [r3, #12]
 800c97e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	691b      	ldr	r3, [r3, #16]
 800c986:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800c988:	68bb      	ldr	r3, [r7, #8]
 800c98a:	f003 0302 	and.w	r3, r3, #2
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d020      	beq.n	800c9d4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	f003 0302 	and.w	r3, r3, #2
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d01b      	beq.n	800c9d4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	f06f 0202 	mvn.w	r2, #2
 800c9a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	2201      	movs	r2, #1
 800c9aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	699b      	ldr	r3, [r3, #24]
 800c9b2:	f003 0303 	and.w	r3, r3, #3
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d003      	beq.n	800c9c2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c9ba:	6878      	ldr	r0, [r7, #4]
 800c9bc:	f000 f9ad 	bl	800cd1a <HAL_TIM_IC_CaptureCallback>
 800c9c0:	e005      	b.n	800c9ce <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c9c2:	6878      	ldr	r0, [r7, #4]
 800c9c4:	f000 f99f 	bl	800cd06 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c9c8:	6878      	ldr	r0, [r7, #4]
 800c9ca:	f000 f9b0 	bl	800cd2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	2200      	movs	r2, #0
 800c9d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800c9d4:	68bb      	ldr	r3, [r7, #8]
 800c9d6:	f003 0304 	and.w	r3, r3, #4
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d020      	beq.n	800ca20 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	f003 0304 	and.w	r3, r3, #4
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d01b      	beq.n	800ca20 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	f06f 0204 	mvn.w	r2, #4
 800c9f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	2202      	movs	r2, #2
 800c9f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	699b      	ldr	r3, [r3, #24]
 800c9fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d003      	beq.n	800ca0e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ca06:	6878      	ldr	r0, [r7, #4]
 800ca08:	f000 f987 	bl	800cd1a <HAL_TIM_IC_CaptureCallback>
 800ca0c:	e005      	b.n	800ca1a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ca0e:	6878      	ldr	r0, [r7, #4]
 800ca10:	f000 f979 	bl	800cd06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ca14:	6878      	ldr	r0, [r7, #4]
 800ca16:	f000 f98a 	bl	800cd2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	2200      	movs	r2, #0
 800ca1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800ca20:	68bb      	ldr	r3, [r7, #8]
 800ca22:	f003 0308 	and.w	r3, r3, #8
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d020      	beq.n	800ca6c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	f003 0308 	and.w	r3, r3, #8
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d01b      	beq.n	800ca6c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	f06f 0208 	mvn.w	r2, #8
 800ca3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	2204      	movs	r2, #4
 800ca42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	69db      	ldr	r3, [r3, #28]
 800ca4a:	f003 0303 	and.w	r3, r3, #3
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d003      	beq.n	800ca5a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ca52:	6878      	ldr	r0, [r7, #4]
 800ca54:	f000 f961 	bl	800cd1a <HAL_TIM_IC_CaptureCallback>
 800ca58:	e005      	b.n	800ca66 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ca5a:	6878      	ldr	r0, [r7, #4]
 800ca5c:	f000 f953 	bl	800cd06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ca60:	6878      	ldr	r0, [r7, #4]
 800ca62:	f000 f964 	bl	800cd2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	2200      	movs	r2, #0
 800ca6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800ca6c:	68bb      	ldr	r3, [r7, #8]
 800ca6e:	f003 0310 	and.w	r3, r3, #16
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d020      	beq.n	800cab8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	f003 0310 	and.w	r3, r3, #16
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d01b      	beq.n	800cab8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	f06f 0210 	mvn.w	r2, #16
 800ca88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	2208      	movs	r2, #8
 800ca8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	69db      	ldr	r3, [r3, #28]
 800ca96:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d003      	beq.n	800caa6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ca9e:	6878      	ldr	r0, [r7, #4]
 800caa0:	f000 f93b 	bl	800cd1a <HAL_TIM_IC_CaptureCallback>
 800caa4:	e005      	b.n	800cab2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800caa6:	6878      	ldr	r0, [r7, #4]
 800caa8:	f000 f92d 	bl	800cd06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800caac:	6878      	ldr	r0, [r7, #4]
 800caae:	f000 f93e 	bl	800cd2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	2200      	movs	r2, #0
 800cab6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800cab8:	68bb      	ldr	r3, [r7, #8]
 800caba:	f003 0301 	and.w	r3, r3, #1
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d00c      	beq.n	800cadc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	f003 0301 	and.w	r3, r3, #1
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d007      	beq.n	800cadc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	f06f 0201 	mvn.w	r2, #1
 800cad4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800cad6:	6878      	ldr	r0, [r7, #4]
 800cad8:	f7f7 f95c 	bl	8003d94 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800cadc:	68bb      	ldr	r3, [r7, #8]
 800cade:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d00c      	beq.n	800cb00 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800caec:	2b00      	cmp	r3, #0
 800caee:	d007      	beq.n	800cb00 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800caf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800cafa:	6878      	ldr	r0, [r7, #4]
 800cafc:	f000 faf2 	bl	800d0e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800cb00:	68bb      	ldr	r3, [r7, #8]
 800cb02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d00c      	beq.n	800cb24 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d007      	beq.n	800cb24 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800cb1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800cb1e:	6878      	ldr	r0, [r7, #4]
 800cb20:	f000 faea 	bl	800d0f8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800cb24:	68bb      	ldr	r3, [r7, #8]
 800cb26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d00c      	beq.n	800cb48 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d007      	beq.n	800cb48 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800cb40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800cb42:	6878      	ldr	r0, [r7, #4]
 800cb44:	f000 f8fd 	bl	800cd42 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800cb48:	68bb      	ldr	r3, [r7, #8]
 800cb4a:	f003 0320 	and.w	r3, r3, #32
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d00c      	beq.n	800cb6c <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	f003 0320 	and.w	r3, r3, #32
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d007      	beq.n	800cb6c <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	f06f 0220 	mvn.w	r2, #32
 800cb64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800cb66:	6878      	ldr	r0, [r7, #4]
 800cb68:	f000 fab2 	bl	800d0d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800cb6c:	bf00      	nop
 800cb6e:	3710      	adds	r7, #16
 800cb70:	46bd      	mov	sp, r7
 800cb72:	bd80      	pop	{r7, pc}

0800cb74 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800cb74:	b580      	push	{r7, lr}
 800cb76:	b084      	sub	sp, #16
 800cb78:	af00      	add	r7, sp, #0
 800cb7a:	6078      	str	r0, [r7, #4]
 800cb7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800cb7e:	2300      	movs	r3, #0
 800cb80:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800cb88:	2b01      	cmp	r3, #1
 800cb8a:	d101      	bne.n	800cb90 <HAL_TIM_ConfigClockSource+0x1c>
 800cb8c:	2302      	movs	r3, #2
 800cb8e:	e0b6      	b.n	800ccfe <HAL_TIM_ConfigClockSource+0x18a>
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	2201      	movs	r2, #1
 800cb94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	2202      	movs	r2, #2
 800cb9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	689b      	ldr	r3, [r3, #8]
 800cba6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800cba8:	68bb      	ldr	r3, [r7, #8]
 800cbaa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800cbae:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800cbb2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cbb4:	68bb      	ldr	r3, [r7, #8]
 800cbb6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800cbba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	68ba      	ldr	r2, [r7, #8]
 800cbc2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800cbc4:	683b      	ldr	r3, [r7, #0]
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cbcc:	d03e      	beq.n	800cc4c <HAL_TIM_ConfigClockSource+0xd8>
 800cbce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cbd2:	f200 8087 	bhi.w	800cce4 <HAL_TIM_ConfigClockSource+0x170>
 800cbd6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cbda:	f000 8086 	beq.w	800ccea <HAL_TIM_ConfigClockSource+0x176>
 800cbde:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cbe2:	d87f      	bhi.n	800cce4 <HAL_TIM_ConfigClockSource+0x170>
 800cbe4:	2b70      	cmp	r3, #112	@ 0x70
 800cbe6:	d01a      	beq.n	800cc1e <HAL_TIM_ConfigClockSource+0xaa>
 800cbe8:	2b70      	cmp	r3, #112	@ 0x70
 800cbea:	d87b      	bhi.n	800cce4 <HAL_TIM_ConfigClockSource+0x170>
 800cbec:	2b60      	cmp	r3, #96	@ 0x60
 800cbee:	d050      	beq.n	800cc92 <HAL_TIM_ConfigClockSource+0x11e>
 800cbf0:	2b60      	cmp	r3, #96	@ 0x60
 800cbf2:	d877      	bhi.n	800cce4 <HAL_TIM_ConfigClockSource+0x170>
 800cbf4:	2b50      	cmp	r3, #80	@ 0x50
 800cbf6:	d03c      	beq.n	800cc72 <HAL_TIM_ConfigClockSource+0xfe>
 800cbf8:	2b50      	cmp	r3, #80	@ 0x50
 800cbfa:	d873      	bhi.n	800cce4 <HAL_TIM_ConfigClockSource+0x170>
 800cbfc:	2b40      	cmp	r3, #64	@ 0x40
 800cbfe:	d058      	beq.n	800ccb2 <HAL_TIM_ConfigClockSource+0x13e>
 800cc00:	2b40      	cmp	r3, #64	@ 0x40
 800cc02:	d86f      	bhi.n	800cce4 <HAL_TIM_ConfigClockSource+0x170>
 800cc04:	2b30      	cmp	r3, #48	@ 0x30
 800cc06:	d064      	beq.n	800ccd2 <HAL_TIM_ConfigClockSource+0x15e>
 800cc08:	2b30      	cmp	r3, #48	@ 0x30
 800cc0a:	d86b      	bhi.n	800cce4 <HAL_TIM_ConfigClockSource+0x170>
 800cc0c:	2b20      	cmp	r3, #32
 800cc0e:	d060      	beq.n	800ccd2 <HAL_TIM_ConfigClockSource+0x15e>
 800cc10:	2b20      	cmp	r3, #32
 800cc12:	d867      	bhi.n	800cce4 <HAL_TIM_ConfigClockSource+0x170>
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d05c      	beq.n	800ccd2 <HAL_TIM_ConfigClockSource+0x15e>
 800cc18:	2b10      	cmp	r3, #16
 800cc1a:	d05a      	beq.n	800ccd2 <HAL_TIM_ConfigClockSource+0x15e>
 800cc1c:	e062      	b.n	800cce4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800cc22:	683b      	ldr	r3, [r7, #0]
 800cc24:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800cc26:	683b      	ldr	r3, [r7, #0]
 800cc28:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800cc2a:	683b      	ldr	r3, [r7, #0]
 800cc2c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800cc2e:	f000 f9a7 	bl	800cf80 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	689b      	ldr	r3, [r3, #8]
 800cc38:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800cc3a:	68bb      	ldr	r3, [r7, #8]
 800cc3c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800cc40:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	68ba      	ldr	r2, [r7, #8]
 800cc48:	609a      	str	r2, [r3, #8]
      break;
 800cc4a:	e04f      	b.n	800ccec <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800cc50:	683b      	ldr	r3, [r7, #0]
 800cc52:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800cc54:	683b      	ldr	r3, [r7, #0]
 800cc56:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800cc58:	683b      	ldr	r3, [r7, #0]
 800cc5a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800cc5c:	f000 f990 	bl	800cf80 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	689a      	ldr	r2, [r3, #8]
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800cc6e:	609a      	str	r2, [r3, #8]
      break;
 800cc70:	e03c      	b.n	800ccec <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800cc76:	683b      	ldr	r3, [r7, #0]
 800cc78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800cc7a:	683b      	ldr	r3, [r7, #0]
 800cc7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cc7e:	461a      	mov	r2, r3
 800cc80:	f000 f904 	bl	800ce8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	2150      	movs	r1, #80	@ 0x50
 800cc8a:	4618      	mov	r0, r3
 800cc8c:	f000 f95d 	bl	800cf4a <TIM_ITRx_SetConfig>
      break;
 800cc90:	e02c      	b.n	800ccec <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800cc96:	683b      	ldr	r3, [r7, #0]
 800cc98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800cc9a:	683b      	ldr	r3, [r7, #0]
 800cc9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800cc9e:	461a      	mov	r2, r3
 800cca0:	f000 f923 	bl	800ceea <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	2160      	movs	r1, #96	@ 0x60
 800ccaa:	4618      	mov	r0, r3
 800ccac:	f000 f94d 	bl	800cf4a <TIM_ITRx_SetConfig>
      break;
 800ccb0:	e01c      	b.n	800ccec <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ccb6:	683b      	ldr	r3, [r7, #0]
 800ccb8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ccba:	683b      	ldr	r3, [r7, #0]
 800ccbc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ccbe:	461a      	mov	r2, r3
 800ccc0:	f000 f8e4 	bl	800ce8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	2140      	movs	r1, #64	@ 0x40
 800ccca:	4618      	mov	r0, r3
 800cccc:	f000 f93d 	bl	800cf4a <TIM_ITRx_SetConfig>
      break;
 800ccd0:	e00c      	b.n	800ccec <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	681a      	ldr	r2, [r3, #0]
 800ccd6:	683b      	ldr	r3, [r7, #0]
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	4619      	mov	r1, r3
 800ccdc:	4610      	mov	r0, r2
 800ccde:	f000 f934 	bl	800cf4a <TIM_ITRx_SetConfig>
      break;
 800cce2:	e003      	b.n	800ccec <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800cce4:	2301      	movs	r3, #1
 800cce6:	73fb      	strb	r3, [r7, #15]
      break;
 800cce8:	e000      	b.n	800ccec <HAL_TIM_ConfigClockSource+0x178>
      break;
 800ccea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	2201      	movs	r2, #1
 800ccf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	2200      	movs	r2, #0
 800ccf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ccfc:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccfe:	4618      	mov	r0, r3
 800cd00:	3710      	adds	r7, #16
 800cd02:	46bd      	mov	sp, r7
 800cd04:	bd80      	pop	{r7, pc}

0800cd06 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800cd06:	b480      	push	{r7}
 800cd08:	b083      	sub	sp, #12
 800cd0a:	af00      	add	r7, sp, #0
 800cd0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800cd0e:	bf00      	nop
 800cd10:	370c      	adds	r7, #12
 800cd12:	46bd      	mov	sp, r7
 800cd14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd18:	4770      	bx	lr

0800cd1a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800cd1a:	b480      	push	{r7}
 800cd1c:	b083      	sub	sp, #12
 800cd1e:	af00      	add	r7, sp, #0
 800cd20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800cd22:	bf00      	nop
 800cd24:	370c      	adds	r7, #12
 800cd26:	46bd      	mov	sp, r7
 800cd28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd2c:	4770      	bx	lr

0800cd2e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800cd2e:	b480      	push	{r7}
 800cd30:	b083      	sub	sp, #12
 800cd32:	af00      	add	r7, sp, #0
 800cd34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800cd36:	bf00      	nop
 800cd38:	370c      	adds	r7, #12
 800cd3a:	46bd      	mov	sp, r7
 800cd3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd40:	4770      	bx	lr

0800cd42 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800cd42:	b480      	push	{r7}
 800cd44:	b083      	sub	sp, #12
 800cd46:	af00      	add	r7, sp, #0
 800cd48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800cd4a:	bf00      	nop
 800cd4c:	370c      	adds	r7, #12
 800cd4e:	46bd      	mov	sp, r7
 800cd50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd54:	4770      	bx	lr
	...

0800cd58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800cd58:	b480      	push	{r7}
 800cd5a:	b085      	sub	sp, #20
 800cd5c:	af00      	add	r7, sp, #0
 800cd5e:	6078      	str	r0, [r7, #4]
 800cd60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	4a40      	ldr	r2, [pc, #256]	@ (800ce6c <TIM_Base_SetConfig+0x114>)
 800cd6c:	4293      	cmp	r3, r2
 800cd6e:	d013      	beq.n	800cd98 <TIM_Base_SetConfig+0x40>
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cd76:	d00f      	beq.n	800cd98 <TIM_Base_SetConfig+0x40>
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	4a3d      	ldr	r2, [pc, #244]	@ (800ce70 <TIM_Base_SetConfig+0x118>)
 800cd7c:	4293      	cmp	r3, r2
 800cd7e:	d00b      	beq.n	800cd98 <TIM_Base_SetConfig+0x40>
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	4a3c      	ldr	r2, [pc, #240]	@ (800ce74 <TIM_Base_SetConfig+0x11c>)
 800cd84:	4293      	cmp	r3, r2
 800cd86:	d007      	beq.n	800cd98 <TIM_Base_SetConfig+0x40>
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	4a3b      	ldr	r2, [pc, #236]	@ (800ce78 <TIM_Base_SetConfig+0x120>)
 800cd8c:	4293      	cmp	r3, r2
 800cd8e:	d003      	beq.n	800cd98 <TIM_Base_SetConfig+0x40>
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	4a3a      	ldr	r2, [pc, #232]	@ (800ce7c <TIM_Base_SetConfig+0x124>)
 800cd94:	4293      	cmp	r3, r2
 800cd96:	d108      	bne.n	800cdaa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cd9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800cda0:	683b      	ldr	r3, [r7, #0]
 800cda2:	685b      	ldr	r3, [r3, #4]
 800cda4:	68fa      	ldr	r2, [r7, #12]
 800cda6:	4313      	orrs	r3, r2
 800cda8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	4a2f      	ldr	r2, [pc, #188]	@ (800ce6c <TIM_Base_SetConfig+0x114>)
 800cdae:	4293      	cmp	r3, r2
 800cdb0:	d01f      	beq.n	800cdf2 <TIM_Base_SetConfig+0x9a>
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cdb8:	d01b      	beq.n	800cdf2 <TIM_Base_SetConfig+0x9a>
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	4a2c      	ldr	r2, [pc, #176]	@ (800ce70 <TIM_Base_SetConfig+0x118>)
 800cdbe:	4293      	cmp	r3, r2
 800cdc0:	d017      	beq.n	800cdf2 <TIM_Base_SetConfig+0x9a>
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	4a2b      	ldr	r2, [pc, #172]	@ (800ce74 <TIM_Base_SetConfig+0x11c>)
 800cdc6:	4293      	cmp	r3, r2
 800cdc8:	d013      	beq.n	800cdf2 <TIM_Base_SetConfig+0x9a>
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	4a2a      	ldr	r2, [pc, #168]	@ (800ce78 <TIM_Base_SetConfig+0x120>)
 800cdce:	4293      	cmp	r3, r2
 800cdd0:	d00f      	beq.n	800cdf2 <TIM_Base_SetConfig+0x9a>
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	4a29      	ldr	r2, [pc, #164]	@ (800ce7c <TIM_Base_SetConfig+0x124>)
 800cdd6:	4293      	cmp	r3, r2
 800cdd8:	d00b      	beq.n	800cdf2 <TIM_Base_SetConfig+0x9a>
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	4a28      	ldr	r2, [pc, #160]	@ (800ce80 <TIM_Base_SetConfig+0x128>)
 800cdde:	4293      	cmp	r3, r2
 800cde0:	d007      	beq.n	800cdf2 <TIM_Base_SetConfig+0x9a>
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	4a27      	ldr	r2, [pc, #156]	@ (800ce84 <TIM_Base_SetConfig+0x12c>)
 800cde6:	4293      	cmp	r3, r2
 800cde8:	d003      	beq.n	800cdf2 <TIM_Base_SetConfig+0x9a>
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	4a26      	ldr	r2, [pc, #152]	@ (800ce88 <TIM_Base_SetConfig+0x130>)
 800cdee:	4293      	cmp	r3, r2
 800cdf0:	d108      	bne.n	800ce04 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800cdf8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cdfa:	683b      	ldr	r3, [r7, #0]
 800cdfc:	68db      	ldr	r3, [r3, #12]
 800cdfe:	68fa      	ldr	r2, [r7, #12]
 800ce00:	4313      	orrs	r3, r2
 800ce02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800ce0a:	683b      	ldr	r3, [r7, #0]
 800ce0c:	695b      	ldr	r3, [r3, #20]
 800ce0e:	4313      	orrs	r3, r2
 800ce10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	68fa      	ldr	r2, [r7, #12]
 800ce16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ce18:	683b      	ldr	r3, [r7, #0]
 800ce1a:	689a      	ldr	r2, [r3, #8]
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ce20:	683b      	ldr	r3, [r7, #0]
 800ce22:	681a      	ldr	r2, [r3, #0]
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	4a10      	ldr	r2, [pc, #64]	@ (800ce6c <TIM_Base_SetConfig+0x114>)
 800ce2c:	4293      	cmp	r3, r2
 800ce2e:	d00f      	beq.n	800ce50 <TIM_Base_SetConfig+0xf8>
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	4a12      	ldr	r2, [pc, #72]	@ (800ce7c <TIM_Base_SetConfig+0x124>)
 800ce34:	4293      	cmp	r3, r2
 800ce36:	d00b      	beq.n	800ce50 <TIM_Base_SetConfig+0xf8>
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	4a11      	ldr	r2, [pc, #68]	@ (800ce80 <TIM_Base_SetConfig+0x128>)
 800ce3c:	4293      	cmp	r3, r2
 800ce3e:	d007      	beq.n	800ce50 <TIM_Base_SetConfig+0xf8>
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	4a10      	ldr	r2, [pc, #64]	@ (800ce84 <TIM_Base_SetConfig+0x12c>)
 800ce44:	4293      	cmp	r3, r2
 800ce46:	d003      	beq.n	800ce50 <TIM_Base_SetConfig+0xf8>
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	4a0f      	ldr	r2, [pc, #60]	@ (800ce88 <TIM_Base_SetConfig+0x130>)
 800ce4c:	4293      	cmp	r3, r2
 800ce4e:	d103      	bne.n	800ce58 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ce50:	683b      	ldr	r3, [r7, #0]
 800ce52:	691a      	ldr	r2, [r3, #16]
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	2201      	movs	r2, #1
 800ce5c:	615a      	str	r2, [r3, #20]
}
 800ce5e:	bf00      	nop
 800ce60:	3714      	adds	r7, #20
 800ce62:	46bd      	mov	sp, r7
 800ce64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce68:	4770      	bx	lr
 800ce6a:	bf00      	nop
 800ce6c:	40012c00 	.word	0x40012c00
 800ce70:	40000400 	.word	0x40000400
 800ce74:	40000800 	.word	0x40000800
 800ce78:	40000c00 	.word	0x40000c00
 800ce7c:	40013400 	.word	0x40013400
 800ce80:	40014000 	.word	0x40014000
 800ce84:	40014400 	.word	0x40014400
 800ce88:	40014800 	.word	0x40014800

0800ce8c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ce8c:	b480      	push	{r7}
 800ce8e:	b087      	sub	sp, #28
 800ce90:	af00      	add	r7, sp, #0
 800ce92:	60f8      	str	r0, [r7, #12]
 800ce94:	60b9      	str	r1, [r7, #8]
 800ce96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	6a1b      	ldr	r3, [r3, #32]
 800ce9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	6a1b      	ldr	r3, [r3, #32]
 800cea2:	f023 0201 	bic.w	r2, r3, #1
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	699b      	ldr	r3, [r3, #24]
 800ceae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ceb0:	693b      	ldr	r3, [r7, #16]
 800ceb2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ceb6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	011b      	lsls	r3, r3, #4
 800cebc:	693a      	ldr	r2, [r7, #16]
 800cebe:	4313      	orrs	r3, r2
 800cec0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800cec2:	697b      	ldr	r3, [r7, #20]
 800cec4:	f023 030a 	bic.w	r3, r3, #10
 800cec8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ceca:	697a      	ldr	r2, [r7, #20]
 800cecc:	68bb      	ldr	r3, [r7, #8]
 800cece:	4313      	orrs	r3, r2
 800ced0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	693a      	ldr	r2, [r7, #16]
 800ced6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	697a      	ldr	r2, [r7, #20]
 800cedc:	621a      	str	r2, [r3, #32]
}
 800cede:	bf00      	nop
 800cee0:	371c      	adds	r7, #28
 800cee2:	46bd      	mov	sp, r7
 800cee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cee8:	4770      	bx	lr

0800ceea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ceea:	b480      	push	{r7}
 800ceec:	b087      	sub	sp, #28
 800ceee:	af00      	add	r7, sp, #0
 800cef0:	60f8      	str	r0, [r7, #12]
 800cef2:	60b9      	str	r1, [r7, #8]
 800cef4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	6a1b      	ldr	r3, [r3, #32]
 800cefa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	6a1b      	ldr	r3, [r3, #32]
 800cf00:	f023 0210 	bic.w	r2, r3, #16
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	699b      	ldr	r3, [r3, #24]
 800cf0c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800cf0e:	693b      	ldr	r3, [r7, #16]
 800cf10:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800cf14:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	031b      	lsls	r3, r3, #12
 800cf1a:	693a      	ldr	r2, [r7, #16]
 800cf1c:	4313      	orrs	r3, r2
 800cf1e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800cf20:	697b      	ldr	r3, [r7, #20]
 800cf22:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800cf26:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800cf28:	68bb      	ldr	r3, [r7, #8]
 800cf2a:	011b      	lsls	r3, r3, #4
 800cf2c:	697a      	ldr	r2, [r7, #20]
 800cf2e:	4313      	orrs	r3, r2
 800cf30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	693a      	ldr	r2, [r7, #16]
 800cf36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	697a      	ldr	r2, [r7, #20]
 800cf3c:	621a      	str	r2, [r3, #32]
}
 800cf3e:	bf00      	nop
 800cf40:	371c      	adds	r7, #28
 800cf42:	46bd      	mov	sp, r7
 800cf44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf48:	4770      	bx	lr

0800cf4a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800cf4a:	b480      	push	{r7}
 800cf4c:	b085      	sub	sp, #20
 800cf4e:	af00      	add	r7, sp, #0
 800cf50:	6078      	str	r0, [r7, #4]
 800cf52:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	689b      	ldr	r3, [r3, #8]
 800cf58:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cf60:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800cf62:	683a      	ldr	r2, [r7, #0]
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	4313      	orrs	r3, r2
 800cf68:	f043 0307 	orr.w	r3, r3, #7
 800cf6c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	68fa      	ldr	r2, [r7, #12]
 800cf72:	609a      	str	r2, [r3, #8]
}
 800cf74:	bf00      	nop
 800cf76:	3714      	adds	r7, #20
 800cf78:	46bd      	mov	sp, r7
 800cf7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf7e:	4770      	bx	lr

0800cf80 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800cf80:	b480      	push	{r7}
 800cf82:	b087      	sub	sp, #28
 800cf84:	af00      	add	r7, sp, #0
 800cf86:	60f8      	str	r0, [r7, #12]
 800cf88:	60b9      	str	r1, [r7, #8]
 800cf8a:	607a      	str	r2, [r7, #4]
 800cf8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	689b      	ldr	r3, [r3, #8]
 800cf92:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cf94:	697b      	ldr	r3, [r7, #20]
 800cf96:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800cf9a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800cf9c:	683b      	ldr	r3, [r7, #0]
 800cf9e:	021a      	lsls	r2, r3, #8
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	431a      	orrs	r2, r3
 800cfa4:	68bb      	ldr	r3, [r7, #8]
 800cfa6:	4313      	orrs	r3, r2
 800cfa8:	697a      	ldr	r2, [r7, #20]
 800cfaa:	4313      	orrs	r3, r2
 800cfac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	697a      	ldr	r2, [r7, #20]
 800cfb2:	609a      	str	r2, [r3, #8]
}
 800cfb4:	bf00      	nop
 800cfb6:	371c      	adds	r7, #28
 800cfb8:	46bd      	mov	sp, r7
 800cfba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfbe:	4770      	bx	lr

0800cfc0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cfc0:	b480      	push	{r7}
 800cfc2:	b085      	sub	sp, #20
 800cfc4:	af00      	add	r7, sp, #0
 800cfc6:	6078      	str	r0, [r7, #4]
 800cfc8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800cfd0:	2b01      	cmp	r3, #1
 800cfd2:	d101      	bne.n	800cfd8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cfd4:	2302      	movs	r3, #2
 800cfd6:	e068      	b.n	800d0aa <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	2201      	movs	r2, #1
 800cfdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	2202      	movs	r2, #2
 800cfe4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	685b      	ldr	r3, [r3, #4]
 800cfee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	689b      	ldr	r3, [r3, #8]
 800cff6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	4a2e      	ldr	r2, [pc, #184]	@ (800d0b8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800cffe:	4293      	cmp	r3, r2
 800d000:	d004      	beq.n	800d00c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	4a2d      	ldr	r2, [pc, #180]	@ (800d0bc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800d008:	4293      	cmp	r3, r2
 800d00a:	d108      	bne.n	800d01e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800d012:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d014:	683b      	ldr	r3, [r7, #0]
 800d016:	685b      	ldr	r3, [r3, #4]
 800d018:	68fa      	ldr	r2, [r7, #12]
 800d01a:	4313      	orrs	r3, r2
 800d01c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d024:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d026:	683b      	ldr	r3, [r7, #0]
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	68fa      	ldr	r2, [r7, #12]
 800d02c:	4313      	orrs	r3, r2
 800d02e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	68fa      	ldr	r2, [r7, #12]
 800d036:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	4a1e      	ldr	r2, [pc, #120]	@ (800d0b8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800d03e:	4293      	cmp	r3, r2
 800d040:	d01d      	beq.n	800d07e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d04a:	d018      	beq.n	800d07e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	4a1b      	ldr	r2, [pc, #108]	@ (800d0c0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d052:	4293      	cmp	r3, r2
 800d054:	d013      	beq.n	800d07e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	4a1a      	ldr	r2, [pc, #104]	@ (800d0c4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d05c:	4293      	cmp	r3, r2
 800d05e:	d00e      	beq.n	800d07e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	4a18      	ldr	r2, [pc, #96]	@ (800d0c8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800d066:	4293      	cmp	r3, r2
 800d068:	d009      	beq.n	800d07e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	4a13      	ldr	r2, [pc, #76]	@ (800d0bc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800d070:	4293      	cmp	r3, r2
 800d072:	d004      	beq.n	800d07e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	4a14      	ldr	r2, [pc, #80]	@ (800d0cc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800d07a:	4293      	cmp	r3, r2
 800d07c:	d10c      	bne.n	800d098 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d07e:	68bb      	ldr	r3, [r7, #8]
 800d080:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d084:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d086:	683b      	ldr	r3, [r7, #0]
 800d088:	689b      	ldr	r3, [r3, #8]
 800d08a:	68ba      	ldr	r2, [r7, #8]
 800d08c:	4313      	orrs	r3, r2
 800d08e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	68ba      	ldr	r2, [r7, #8]
 800d096:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	2201      	movs	r2, #1
 800d09c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	2200      	movs	r2, #0
 800d0a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800d0a8:	2300      	movs	r3, #0
}
 800d0aa:	4618      	mov	r0, r3
 800d0ac:	3714      	adds	r7, #20
 800d0ae:	46bd      	mov	sp, r7
 800d0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0b4:	4770      	bx	lr
 800d0b6:	bf00      	nop
 800d0b8:	40012c00 	.word	0x40012c00
 800d0bc:	40013400 	.word	0x40013400
 800d0c0:	40000400 	.word	0x40000400
 800d0c4:	40000800 	.word	0x40000800
 800d0c8:	40000c00 	.word	0x40000c00
 800d0cc:	40014000 	.word	0x40014000

0800d0d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d0d0:	b480      	push	{r7}
 800d0d2:	b083      	sub	sp, #12
 800d0d4:	af00      	add	r7, sp, #0
 800d0d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d0d8:	bf00      	nop
 800d0da:	370c      	adds	r7, #12
 800d0dc:	46bd      	mov	sp, r7
 800d0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0e2:	4770      	bx	lr

0800d0e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d0e4:	b480      	push	{r7}
 800d0e6:	b083      	sub	sp, #12
 800d0e8:	af00      	add	r7, sp, #0
 800d0ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d0ec:	bf00      	nop
 800d0ee:	370c      	adds	r7, #12
 800d0f0:	46bd      	mov	sp, r7
 800d0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f6:	4770      	bx	lr

0800d0f8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d0f8:	b480      	push	{r7}
 800d0fa:	b083      	sub	sp, #12
 800d0fc:	af00      	add	r7, sp, #0
 800d0fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d100:	bf00      	nop
 800d102:	370c      	adds	r7, #12
 800d104:	46bd      	mov	sp, r7
 800d106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d10a:	4770      	bx	lr

0800d10c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d10c:	b084      	sub	sp, #16
 800d10e:	b580      	push	{r7, lr}
 800d110:	b084      	sub	sp, #16
 800d112:	af00      	add	r7, sp, #0
 800d114:	6078      	str	r0, [r7, #4]
 800d116:	f107 001c 	add.w	r0, r7, #28
 800d11a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	68db      	ldr	r3, [r3, #12]
 800d122:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800d12a:	6878      	ldr	r0, [r7, #4]
 800d12c:	f001 fa1c 	bl	800e568 <USB_CoreReset>
 800d130:	4603      	mov	r3, r0
 800d132:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800d134:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d136:	2b00      	cmp	r3, #0
 800d138:	d106      	bne.n	800d148 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d13e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	639a      	str	r2, [r3, #56]	@ 0x38
 800d146:	e005      	b.n	800d154 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d14c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 800d154:	7bfb      	ldrb	r3, [r7, #15]
}
 800d156:	4618      	mov	r0, r3
 800d158:	3710      	adds	r7, #16
 800d15a:	46bd      	mov	sp, r7
 800d15c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d160:	b004      	add	sp, #16
 800d162:	4770      	bx	lr

0800d164 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800d164:	b480      	push	{r7}
 800d166:	b087      	sub	sp, #28
 800d168:	af00      	add	r7, sp, #0
 800d16a:	60f8      	str	r0, [r7, #12]
 800d16c:	60b9      	str	r1, [r7, #8]
 800d16e:	4613      	mov	r3, r2
 800d170:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800d172:	79fb      	ldrb	r3, [r7, #7]
 800d174:	2b02      	cmp	r3, #2
 800d176:	d165      	bne.n	800d244 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800d178:	68bb      	ldr	r3, [r7, #8]
 800d17a:	4a3e      	ldr	r2, [pc, #248]	@ (800d274 <USB_SetTurnaroundTime+0x110>)
 800d17c:	4293      	cmp	r3, r2
 800d17e:	d906      	bls.n	800d18e <USB_SetTurnaroundTime+0x2a>
 800d180:	68bb      	ldr	r3, [r7, #8]
 800d182:	4a3d      	ldr	r2, [pc, #244]	@ (800d278 <USB_SetTurnaroundTime+0x114>)
 800d184:	4293      	cmp	r3, r2
 800d186:	d202      	bcs.n	800d18e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800d188:	230f      	movs	r3, #15
 800d18a:	617b      	str	r3, [r7, #20]
 800d18c:	e05c      	b.n	800d248 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800d18e:	68bb      	ldr	r3, [r7, #8]
 800d190:	4a39      	ldr	r2, [pc, #228]	@ (800d278 <USB_SetTurnaroundTime+0x114>)
 800d192:	4293      	cmp	r3, r2
 800d194:	d306      	bcc.n	800d1a4 <USB_SetTurnaroundTime+0x40>
 800d196:	68bb      	ldr	r3, [r7, #8]
 800d198:	4a38      	ldr	r2, [pc, #224]	@ (800d27c <USB_SetTurnaroundTime+0x118>)
 800d19a:	4293      	cmp	r3, r2
 800d19c:	d202      	bcs.n	800d1a4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800d19e:	230e      	movs	r3, #14
 800d1a0:	617b      	str	r3, [r7, #20]
 800d1a2:	e051      	b.n	800d248 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800d1a4:	68bb      	ldr	r3, [r7, #8]
 800d1a6:	4a35      	ldr	r2, [pc, #212]	@ (800d27c <USB_SetTurnaroundTime+0x118>)
 800d1a8:	4293      	cmp	r3, r2
 800d1aa:	d306      	bcc.n	800d1ba <USB_SetTurnaroundTime+0x56>
 800d1ac:	68bb      	ldr	r3, [r7, #8]
 800d1ae:	4a34      	ldr	r2, [pc, #208]	@ (800d280 <USB_SetTurnaroundTime+0x11c>)
 800d1b0:	4293      	cmp	r3, r2
 800d1b2:	d202      	bcs.n	800d1ba <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800d1b4:	230d      	movs	r3, #13
 800d1b6:	617b      	str	r3, [r7, #20]
 800d1b8:	e046      	b.n	800d248 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800d1ba:	68bb      	ldr	r3, [r7, #8]
 800d1bc:	4a30      	ldr	r2, [pc, #192]	@ (800d280 <USB_SetTurnaroundTime+0x11c>)
 800d1be:	4293      	cmp	r3, r2
 800d1c0:	d306      	bcc.n	800d1d0 <USB_SetTurnaroundTime+0x6c>
 800d1c2:	68bb      	ldr	r3, [r7, #8]
 800d1c4:	4a2f      	ldr	r2, [pc, #188]	@ (800d284 <USB_SetTurnaroundTime+0x120>)
 800d1c6:	4293      	cmp	r3, r2
 800d1c8:	d802      	bhi.n	800d1d0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800d1ca:	230c      	movs	r3, #12
 800d1cc:	617b      	str	r3, [r7, #20]
 800d1ce:	e03b      	b.n	800d248 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800d1d0:	68bb      	ldr	r3, [r7, #8]
 800d1d2:	4a2c      	ldr	r2, [pc, #176]	@ (800d284 <USB_SetTurnaroundTime+0x120>)
 800d1d4:	4293      	cmp	r3, r2
 800d1d6:	d906      	bls.n	800d1e6 <USB_SetTurnaroundTime+0x82>
 800d1d8:	68bb      	ldr	r3, [r7, #8]
 800d1da:	4a2b      	ldr	r2, [pc, #172]	@ (800d288 <USB_SetTurnaroundTime+0x124>)
 800d1dc:	4293      	cmp	r3, r2
 800d1de:	d802      	bhi.n	800d1e6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800d1e0:	230b      	movs	r3, #11
 800d1e2:	617b      	str	r3, [r7, #20]
 800d1e4:	e030      	b.n	800d248 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800d1e6:	68bb      	ldr	r3, [r7, #8]
 800d1e8:	4a27      	ldr	r2, [pc, #156]	@ (800d288 <USB_SetTurnaroundTime+0x124>)
 800d1ea:	4293      	cmp	r3, r2
 800d1ec:	d906      	bls.n	800d1fc <USB_SetTurnaroundTime+0x98>
 800d1ee:	68bb      	ldr	r3, [r7, #8]
 800d1f0:	4a26      	ldr	r2, [pc, #152]	@ (800d28c <USB_SetTurnaroundTime+0x128>)
 800d1f2:	4293      	cmp	r3, r2
 800d1f4:	d802      	bhi.n	800d1fc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800d1f6:	230a      	movs	r3, #10
 800d1f8:	617b      	str	r3, [r7, #20]
 800d1fa:	e025      	b.n	800d248 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800d1fc:	68bb      	ldr	r3, [r7, #8]
 800d1fe:	4a23      	ldr	r2, [pc, #140]	@ (800d28c <USB_SetTurnaroundTime+0x128>)
 800d200:	4293      	cmp	r3, r2
 800d202:	d906      	bls.n	800d212 <USB_SetTurnaroundTime+0xae>
 800d204:	68bb      	ldr	r3, [r7, #8]
 800d206:	4a22      	ldr	r2, [pc, #136]	@ (800d290 <USB_SetTurnaroundTime+0x12c>)
 800d208:	4293      	cmp	r3, r2
 800d20a:	d202      	bcs.n	800d212 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800d20c:	2309      	movs	r3, #9
 800d20e:	617b      	str	r3, [r7, #20]
 800d210:	e01a      	b.n	800d248 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800d212:	68bb      	ldr	r3, [r7, #8]
 800d214:	4a1e      	ldr	r2, [pc, #120]	@ (800d290 <USB_SetTurnaroundTime+0x12c>)
 800d216:	4293      	cmp	r3, r2
 800d218:	d306      	bcc.n	800d228 <USB_SetTurnaroundTime+0xc4>
 800d21a:	68bb      	ldr	r3, [r7, #8]
 800d21c:	4a1d      	ldr	r2, [pc, #116]	@ (800d294 <USB_SetTurnaroundTime+0x130>)
 800d21e:	4293      	cmp	r3, r2
 800d220:	d802      	bhi.n	800d228 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800d222:	2308      	movs	r3, #8
 800d224:	617b      	str	r3, [r7, #20]
 800d226:	e00f      	b.n	800d248 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800d228:	68bb      	ldr	r3, [r7, #8]
 800d22a:	4a1a      	ldr	r2, [pc, #104]	@ (800d294 <USB_SetTurnaroundTime+0x130>)
 800d22c:	4293      	cmp	r3, r2
 800d22e:	d906      	bls.n	800d23e <USB_SetTurnaroundTime+0xda>
 800d230:	68bb      	ldr	r3, [r7, #8]
 800d232:	4a19      	ldr	r2, [pc, #100]	@ (800d298 <USB_SetTurnaroundTime+0x134>)
 800d234:	4293      	cmp	r3, r2
 800d236:	d202      	bcs.n	800d23e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800d238:	2307      	movs	r3, #7
 800d23a:	617b      	str	r3, [r7, #20]
 800d23c:	e004      	b.n	800d248 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800d23e:	2306      	movs	r3, #6
 800d240:	617b      	str	r3, [r7, #20]
 800d242:	e001      	b.n	800d248 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800d244:	2309      	movs	r3, #9
 800d246:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	68db      	ldr	r3, [r3, #12]
 800d24c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	68da      	ldr	r2, [r3, #12]
 800d258:	697b      	ldr	r3, [r7, #20]
 800d25a:	029b      	lsls	r3, r3, #10
 800d25c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800d260:	431a      	orrs	r2, r3
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800d266:	2300      	movs	r3, #0
}
 800d268:	4618      	mov	r0, r3
 800d26a:	371c      	adds	r7, #28
 800d26c:	46bd      	mov	sp, r7
 800d26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d272:	4770      	bx	lr
 800d274:	00d8acbf 	.word	0x00d8acbf
 800d278:	00e4e1c0 	.word	0x00e4e1c0
 800d27c:	00f42400 	.word	0x00f42400
 800d280:	01067380 	.word	0x01067380
 800d284:	011a499f 	.word	0x011a499f
 800d288:	01312cff 	.word	0x01312cff
 800d28c:	014ca43f 	.word	0x014ca43f
 800d290:	016e3600 	.word	0x016e3600
 800d294:	01a6ab1f 	.word	0x01a6ab1f
 800d298:	01e84800 	.word	0x01e84800

0800d29c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d29c:	b480      	push	{r7}
 800d29e:	b083      	sub	sp, #12
 800d2a0:	af00      	add	r7, sp, #0
 800d2a2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	689b      	ldr	r3, [r3, #8]
 800d2a8:	f043 0201 	orr.w	r2, r3, #1
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d2b0:	2300      	movs	r3, #0
}
 800d2b2:	4618      	mov	r0, r3
 800d2b4:	370c      	adds	r7, #12
 800d2b6:	46bd      	mov	sp, r7
 800d2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2bc:	4770      	bx	lr

0800d2be <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d2be:	b480      	push	{r7}
 800d2c0:	b083      	sub	sp, #12
 800d2c2:	af00      	add	r7, sp, #0
 800d2c4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	689b      	ldr	r3, [r3, #8]
 800d2ca:	f023 0201 	bic.w	r2, r3, #1
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d2d2:	2300      	movs	r3, #0
}
 800d2d4:	4618      	mov	r0, r3
 800d2d6:	370c      	adds	r7, #12
 800d2d8:	46bd      	mov	sp, r7
 800d2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2de:	4770      	bx	lr

0800d2e0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800d2e0:	b580      	push	{r7, lr}
 800d2e2:	b084      	sub	sp, #16
 800d2e4:	af00      	add	r7, sp, #0
 800d2e6:	6078      	str	r0, [r7, #4]
 800d2e8:	460b      	mov	r3, r1
 800d2ea:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800d2ec:	2300      	movs	r3, #0
 800d2ee:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	68db      	ldr	r3, [r3, #12]
 800d2f4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800d2fc:	78fb      	ldrb	r3, [r7, #3]
 800d2fe:	2b01      	cmp	r3, #1
 800d300:	d115      	bne.n	800d32e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	68db      	ldr	r3, [r3, #12]
 800d306:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800d30e:	2001      	movs	r0, #1
 800d310:	f7f8 f88c 	bl	800542c <HAL_Delay>
      ms++;
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	3301      	adds	r3, #1
 800d318:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800d31a:	6878      	ldr	r0, [r7, #4]
 800d31c:	f001 f8ab 	bl	800e476 <USB_GetMode>
 800d320:	4603      	mov	r3, r0
 800d322:	2b01      	cmp	r3, #1
 800d324:	d01e      	beq.n	800d364 <USB_SetCurrentMode+0x84>
 800d326:	68fb      	ldr	r3, [r7, #12]
 800d328:	2b31      	cmp	r3, #49	@ 0x31
 800d32a:	d9f0      	bls.n	800d30e <USB_SetCurrentMode+0x2e>
 800d32c:	e01a      	b.n	800d364 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800d32e:	78fb      	ldrb	r3, [r7, #3]
 800d330:	2b00      	cmp	r3, #0
 800d332:	d115      	bne.n	800d360 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	68db      	ldr	r3, [r3, #12]
 800d338:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800d340:	2001      	movs	r0, #1
 800d342:	f7f8 f873 	bl	800542c <HAL_Delay>
      ms++;
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	3301      	adds	r3, #1
 800d34a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800d34c:	6878      	ldr	r0, [r7, #4]
 800d34e:	f001 f892 	bl	800e476 <USB_GetMode>
 800d352:	4603      	mov	r3, r0
 800d354:	2b00      	cmp	r3, #0
 800d356:	d005      	beq.n	800d364 <USB_SetCurrentMode+0x84>
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	2b31      	cmp	r3, #49	@ 0x31
 800d35c:	d9f0      	bls.n	800d340 <USB_SetCurrentMode+0x60>
 800d35e:	e001      	b.n	800d364 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800d360:	2301      	movs	r3, #1
 800d362:	e005      	b.n	800d370 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	2b32      	cmp	r3, #50	@ 0x32
 800d368:	d101      	bne.n	800d36e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800d36a:	2301      	movs	r3, #1
 800d36c:	e000      	b.n	800d370 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800d36e:	2300      	movs	r3, #0
}
 800d370:	4618      	mov	r0, r3
 800d372:	3710      	adds	r7, #16
 800d374:	46bd      	mov	sp, r7
 800d376:	bd80      	pop	{r7, pc}

0800d378 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d378:	b084      	sub	sp, #16
 800d37a:	b580      	push	{r7, lr}
 800d37c:	b086      	sub	sp, #24
 800d37e:	af00      	add	r7, sp, #0
 800d380:	6078      	str	r0, [r7, #4]
 800d382:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800d386:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800d38a:	2300      	movs	r3, #0
 800d38c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800d392:	2300      	movs	r3, #0
 800d394:	613b      	str	r3, [r7, #16]
 800d396:	e009      	b.n	800d3ac <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800d398:	687a      	ldr	r2, [r7, #4]
 800d39a:	693b      	ldr	r3, [r7, #16]
 800d39c:	3340      	adds	r3, #64	@ 0x40
 800d39e:	009b      	lsls	r3, r3, #2
 800d3a0:	4413      	add	r3, r2
 800d3a2:	2200      	movs	r2, #0
 800d3a4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800d3a6:	693b      	ldr	r3, [r7, #16]
 800d3a8:	3301      	adds	r3, #1
 800d3aa:	613b      	str	r3, [r7, #16]
 800d3ac:	693b      	ldr	r3, [r7, #16]
 800d3ae:	2b0e      	cmp	r3, #14
 800d3b0:	d9f2      	bls.n	800d398 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800d3b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d11c      	bne.n	800d3f2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d3be:	685b      	ldr	r3, [r3, #4]
 800d3c0:	68fa      	ldr	r2, [r7, #12]
 800d3c2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d3c6:	f043 0302 	orr.w	r3, r3, #2
 800d3ca:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d3d0:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	601a      	str	r2, [r3, #0]
 800d3f0:	e005      	b.n	800d3fe <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d3f6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d404:	461a      	mov	r2, r3
 800d406:	2300      	movs	r3, #0
 800d408:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800d40a:	2103      	movs	r1, #3
 800d40c:	6878      	ldr	r0, [r7, #4]
 800d40e:	f000 f959 	bl	800d6c4 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800d412:	2110      	movs	r1, #16
 800d414:	6878      	ldr	r0, [r7, #4]
 800d416:	f000 f8f1 	bl	800d5fc <USB_FlushTxFifo>
 800d41a:	4603      	mov	r3, r0
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d001      	beq.n	800d424 <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 800d420:	2301      	movs	r3, #1
 800d422:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800d424:	6878      	ldr	r0, [r7, #4]
 800d426:	f000 f91d 	bl	800d664 <USB_FlushRxFifo>
 800d42a:	4603      	mov	r3, r0
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d001      	beq.n	800d434 <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 800d430:	2301      	movs	r3, #1
 800d432:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d43a:	461a      	mov	r2, r3
 800d43c:	2300      	movs	r3, #0
 800d43e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d446:	461a      	mov	r2, r3
 800d448:	2300      	movs	r3, #0
 800d44a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d452:	461a      	mov	r2, r3
 800d454:	2300      	movs	r3, #0
 800d456:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d458:	2300      	movs	r3, #0
 800d45a:	613b      	str	r3, [r7, #16]
 800d45c:	e043      	b.n	800d4e6 <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d45e:	693b      	ldr	r3, [r7, #16]
 800d460:	015a      	lsls	r2, r3, #5
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	4413      	add	r3, r2
 800d466:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d470:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d474:	d118      	bne.n	800d4a8 <USB_DevInit+0x130>
    {
      if (i == 0U)
 800d476:	693b      	ldr	r3, [r7, #16]
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d10a      	bne.n	800d492 <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800d47c:	693b      	ldr	r3, [r7, #16]
 800d47e:	015a      	lsls	r2, r3, #5
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	4413      	add	r3, r2
 800d484:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d488:	461a      	mov	r2, r3
 800d48a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800d48e:	6013      	str	r3, [r2, #0]
 800d490:	e013      	b.n	800d4ba <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800d492:	693b      	ldr	r3, [r7, #16]
 800d494:	015a      	lsls	r2, r3, #5
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	4413      	add	r3, r2
 800d49a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d49e:	461a      	mov	r2, r3
 800d4a0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800d4a4:	6013      	str	r3, [r2, #0]
 800d4a6:	e008      	b.n	800d4ba <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800d4a8:	693b      	ldr	r3, [r7, #16]
 800d4aa:	015a      	lsls	r2, r3, #5
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	4413      	add	r3, r2
 800d4b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d4b4:	461a      	mov	r2, r3
 800d4b6:	2300      	movs	r3, #0
 800d4b8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800d4ba:	693b      	ldr	r3, [r7, #16]
 800d4bc:	015a      	lsls	r2, r3, #5
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	4413      	add	r3, r2
 800d4c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d4c6:	461a      	mov	r2, r3
 800d4c8:	2300      	movs	r3, #0
 800d4ca:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800d4cc:	693b      	ldr	r3, [r7, #16]
 800d4ce:	015a      	lsls	r2, r3, #5
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	4413      	add	r3, r2
 800d4d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d4d8:	461a      	mov	r2, r3
 800d4da:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800d4de:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d4e0:	693b      	ldr	r3, [r7, #16]
 800d4e2:	3301      	adds	r3, #1
 800d4e4:	613b      	str	r3, [r7, #16]
 800d4e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4e8:	693a      	ldr	r2, [r7, #16]
 800d4ea:	429a      	cmp	r2, r3
 800d4ec:	d3b7      	bcc.n	800d45e <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d4ee:	2300      	movs	r3, #0
 800d4f0:	613b      	str	r3, [r7, #16]
 800d4f2:	e043      	b.n	800d57c <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d4f4:	693b      	ldr	r3, [r7, #16]
 800d4f6:	015a      	lsls	r2, r3, #5
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	4413      	add	r3, r2
 800d4fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d506:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d50a:	d118      	bne.n	800d53e <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 800d50c:	693b      	ldr	r3, [r7, #16]
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d10a      	bne.n	800d528 <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800d512:	693b      	ldr	r3, [r7, #16]
 800d514:	015a      	lsls	r2, r3, #5
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	4413      	add	r3, r2
 800d51a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d51e:	461a      	mov	r2, r3
 800d520:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800d524:	6013      	str	r3, [r2, #0]
 800d526:	e013      	b.n	800d550 <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800d528:	693b      	ldr	r3, [r7, #16]
 800d52a:	015a      	lsls	r2, r3, #5
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	4413      	add	r3, r2
 800d530:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d534:	461a      	mov	r2, r3
 800d536:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800d53a:	6013      	str	r3, [r2, #0]
 800d53c:	e008      	b.n	800d550 <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800d53e:	693b      	ldr	r3, [r7, #16]
 800d540:	015a      	lsls	r2, r3, #5
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	4413      	add	r3, r2
 800d546:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d54a:	461a      	mov	r2, r3
 800d54c:	2300      	movs	r3, #0
 800d54e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800d550:	693b      	ldr	r3, [r7, #16]
 800d552:	015a      	lsls	r2, r3, #5
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	4413      	add	r3, r2
 800d558:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d55c:	461a      	mov	r2, r3
 800d55e:	2300      	movs	r3, #0
 800d560:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800d562:	693b      	ldr	r3, [r7, #16]
 800d564:	015a      	lsls	r2, r3, #5
 800d566:	68fb      	ldr	r3, [r7, #12]
 800d568:	4413      	add	r3, r2
 800d56a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d56e:	461a      	mov	r2, r3
 800d570:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800d574:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d576:	693b      	ldr	r3, [r7, #16]
 800d578:	3301      	adds	r3, #1
 800d57a:	613b      	str	r3, [r7, #16]
 800d57c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d57e:	693a      	ldr	r2, [r7, #16]
 800d580:	429a      	cmp	r2, r3
 800d582:	d3b7      	bcc.n	800d4f4 <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d58a:	691b      	ldr	r3, [r3, #16]
 800d58c:	68fa      	ldr	r2, [r7, #12]
 800d58e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d592:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d596:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	2200      	movs	r2, #0
 800d59c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800d5a4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	699b      	ldr	r3, [r3, #24]
 800d5aa:	f043 0210 	orr.w	r2, r3, #16
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	699a      	ldr	r2, [r3, #24]
 800d5b6:	4b10      	ldr	r3, [pc, #64]	@ (800d5f8 <USB_DevInit+0x280>)
 800d5b8:	4313      	orrs	r3, r2
 800d5ba:	687a      	ldr	r2, [r7, #4]
 800d5bc:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800d5be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d005      	beq.n	800d5d0 <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	699b      	ldr	r3, [r3, #24]
 800d5c8:	f043 0208 	orr.w	r2, r3, #8
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800d5d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d5d2:	2b01      	cmp	r3, #1
 800d5d4:	d107      	bne.n	800d5e6 <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	699b      	ldr	r3, [r3, #24]
 800d5da:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800d5de:	f043 0304 	orr.w	r3, r3, #4
 800d5e2:	687a      	ldr	r2, [r7, #4]
 800d5e4:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800d5e6:	7dfb      	ldrb	r3, [r7, #23]
}
 800d5e8:	4618      	mov	r0, r3
 800d5ea:	3718      	adds	r7, #24
 800d5ec:	46bd      	mov	sp, r7
 800d5ee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d5f2:	b004      	add	sp, #16
 800d5f4:	4770      	bx	lr
 800d5f6:	bf00      	nop
 800d5f8:	803c3800 	.word	0x803c3800

0800d5fc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800d5fc:	b480      	push	{r7}
 800d5fe:	b085      	sub	sp, #20
 800d600:	af00      	add	r7, sp, #0
 800d602:	6078      	str	r0, [r7, #4]
 800d604:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800d606:	2300      	movs	r3, #0
 800d608:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	3301      	adds	r3, #1
 800d60e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	4a13      	ldr	r2, [pc, #76]	@ (800d660 <USB_FlushTxFifo+0x64>)
 800d614:	4293      	cmp	r3, r2
 800d616:	d901      	bls.n	800d61c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800d618:	2303      	movs	r3, #3
 800d61a:	e01b      	b.n	800d654 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	691b      	ldr	r3, [r3, #16]
 800d620:	2b00      	cmp	r3, #0
 800d622:	daf2      	bge.n	800d60a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800d624:	2300      	movs	r3, #0
 800d626:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800d628:	683b      	ldr	r3, [r7, #0]
 800d62a:	019b      	lsls	r3, r3, #6
 800d62c:	f043 0220 	orr.w	r2, r3, #32
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	3301      	adds	r3, #1
 800d638:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	4a08      	ldr	r2, [pc, #32]	@ (800d660 <USB_FlushTxFifo+0x64>)
 800d63e:	4293      	cmp	r3, r2
 800d640:	d901      	bls.n	800d646 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800d642:	2303      	movs	r3, #3
 800d644:	e006      	b.n	800d654 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	691b      	ldr	r3, [r3, #16]
 800d64a:	f003 0320 	and.w	r3, r3, #32
 800d64e:	2b20      	cmp	r3, #32
 800d650:	d0f0      	beq.n	800d634 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800d652:	2300      	movs	r3, #0
}
 800d654:	4618      	mov	r0, r3
 800d656:	3714      	adds	r7, #20
 800d658:	46bd      	mov	sp, r7
 800d65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d65e:	4770      	bx	lr
 800d660:	00030d40 	.word	0x00030d40

0800d664 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800d664:	b480      	push	{r7}
 800d666:	b085      	sub	sp, #20
 800d668:	af00      	add	r7, sp, #0
 800d66a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d66c:	2300      	movs	r3, #0
 800d66e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	3301      	adds	r3, #1
 800d674:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	4a11      	ldr	r2, [pc, #68]	@ (800d6c0 <USB_FlushRxFifo+0x5c>)
 800d67a:	4293      	cmp	r3, r2
 800d67c:	d901      	bls.n	800d682 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800d67e:	2303      	movs	r3, #3
 800d680:	e018      	b.n	800d6b4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	691b      	ldr	r3, [r3, #16]
 800d686:	2b00      	cmp	r3, #0
 800d688:	daf2      	bge.n	800d670 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800d68a:	2300      	movs	r3, #0
 800d68c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	2210      	movs	r2, #16
 800d692:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	3301      	adds	r3, #1
 800d698:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	4a08      	ldr	r2, [pc, #32]	@ (800d6c0 <USB_FlushRxFifo+0x5c>)
 800d69e:	4293      	cmp	r3, r2
 800d6a0:	d901      	bls.n	800d6a6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800d6a2:	2303      	movs	r3, #3
 800d6a4:	e006      	b.n	800d6b4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	691b      	ldr	r3, [r3, #16]
 800d6aa:	f003 0310 	and.w	r3, r3, #16
 800d6ae:	2b10      	cmp	r3, #16
 800d6b0:	d0f0      	beq.n	800d694 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800d6b2:	2300      	movs	r3, #0
}
 800d6b4:	4618      	mov	r0, r3
 800d6b6:	3714      	adds	r7, #20
 800d6b8:	46bd      	mov	sp, r7
 800d6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6be:	4770      	bx	lr
 800d6c0:	00030d40 	.word	0x00030d40

0800d6c4 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800d6c4:	b480      	push	{r7}
 800d6c6:	b085      	sub	sp, #20
 800d6c8:	af00      	add	r7, sp, #0
 800d6ca:	6078      	str	r0, [r7, #4]
 800d6cc:	460b      	mov	r3, r1
 800d6ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d6da:	681a      	ldr	r2, [r3, #0]
 800d6dc:	78fb      	ldrb	r3, [r7, #3]
 800d6de:	68f9      	ldr	r1, [r7, #12]
 800d6e0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800d6e4:	4313      	orrs	r3, r2
 800d6e6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800d6e8:	2300      	movs	r3, #0
}
 800d6ea:	4618      	mov	r0, r3
 800d6ec:	3714      	adds	r7, #20
 800d6ee:	46bd      	mov	sp, r7
 800d6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6f4:	4770      	bx	lr

0800d6f6 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800d6f6:	b480      	push	{r7}
 800d6f8:	b087      	sub	sp, #28
 800d6fa:	af00      	add	r7, sp, #0
 800d6fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800d702:	693b      	ldr	r3, [r7, #16]
 800d704:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d708:	689b      	ldr	r3, [r3, #8]
 800d70a:	f003 0306 	and.w	r3, r3, #6
 800d70e:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	2b02      	cmp	r3, #2
 800d714:	d002      	beq.n	800d71c <USB_GetDevSpeed+0x26>
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	2b06      	cmp	r3, #6
 800d71a:	d102      	bne.n	800d722 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800d71c:	2302      	movs	r3, #2
 800d71e:	75fb      	strb	r3, [r7, #23]
 800d720:	e001      	b.n	800d726 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 800d722:	230f      	movs	r3, #15
 800d724:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800d726:	7dfb      	ldrb	r3, [r7, #23]
}
 800d728:	4618      	mov	r0, r3
 800d72a:	371c      	adds	r7, #28
 800d72c:	46bd      	mov	sp, r7
 800d72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d732:	4770      	bx	lr

0800d734 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d734:	b480      	push	{r7}
 800d736:	b085      	sub	sp, #20
 800d738:	af00      	add	r7, sp, #0
 800d73a:	6078      	str	r0, [r7, #4]
 800d73c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d742:	683b      	ldr	r3, [r7, #0]
 800d744:	781b      	ldrb	r3, [r3, #0]
 800d746:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d748:	683b      	ldr	r3, [r7, #0]
 800d74a:	785b      	ldrb	r3, [r3, #1]
 800d74c:	2b01      	cmp	r3, #1
 800d74e:	d13a      	bne.n	800d7c6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800d750:	68fb      	ldr	r3, [r7, #12]
 800d752:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d756:	69da      	ldr	r2, [r3, #28]
 800d758:	683b      	ldr	r3, [r7, #0]
 800d75a:	781b      	ldrb	r3, [r3, #0]
 800d75c:	f003 030f 	and.w	r3, r3, #15
 800d760:	2101      	movs	r1, #1
 800d762:	fa01 f303 	lsl.w	r3, r1, r3
 800d766:	b29b      	uxth	r3, r3
 800d768:	68f9      	ldr	r1, [r7, #12]
 800d76a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800d76e:	4313      	orrs	r3, r2
 800d770:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800d772:	68bb      	ldr	r3, [r7, #8]
 800d774:	015a      	lsls	r2, r3, #5
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	4413      	add	r3, r2
 800d77a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d784:	2b00      	cmp	r3, #0
 800d786:	d155      	bne.n	800d834 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d788:	68bb      	ldr	r3, [r7, #8]
 800d78a:	015a      	lsls	r2, r3, #5
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	4413      	add	r3, r2
 800d790:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d794:	681a      	ldr	r2, [r3, #0]
 800d796:	683b      	ldr	r3, [r7, #0]
 800d798:	689b      	ldr	r3, [r3, #8]
 800d79a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800d79e:	683b      	ldr	r3, [r7, #0]
 800d7a0:	791b      	ldrb	r3, [r3, #4]
 800d7a2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d7a4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800d7a6:	68bb      	ldr	r3, [r7, #8]
 800d7a8:	059b      	lsls	r3, r3, #22
 800d7aa:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d7ac:	4313      	orrs	r3, r2
 800d7ae:	68ba      	ldr	r2, [r7, #8]
 800d7b0:	0151      	lsls	r1, r2, #5
 800d7b2:	68fa      	ldr	r2, [r7, #12]
 800d7b4:	440a      	add	r2, r1
 800d7b6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d7ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d7be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d7c2:	6013      	str	r3, [r2, #0]
 800d7c4:	e036      	b.n	800d834 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d7cc:	69da      	ldr	r2, [r3, #28]
 800d7ce:	683b      	ldr	r3, [r7, #0]
 800d7d0:	781b      	ldrb	r3, [r3, #0]
 800d7d2:	f003 030f 	and.w	r3, r3, #15
 800d7d6:	2101      	movs	r1, #1
 800d7d8:	fa01 f303 	lsl.w	r3, r1, r3
 800d7dc:	041b      	lsls	r3, r3, #16
 800d7de:	68f9      	ldr	r1, [r7, #12]
 800d7e0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800d7e4:	4313      	orrs	r3, r2
 800d7e6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800d7e8:	68bb      	ldr	r3, [r7, #8]
 800d7ea:	015a      	lsls	r2, r3, #5
 800d7ec:	68fb      	ldr	r3, [r7, #12]
 800d7ee:	4413      	add	r3, r2
 800d7f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d11a      	bne.n	800d834 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800d7fe:	68bb      	ldr	r3, [r7, #8]
 800d800:	015a      	lsls	r2, r3, #5
 800d802:	68fb      	ldr	r3, [r7, #12]
 800d804:	4413      	add	r3, r2
 800d806:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d80a:	681a      	ldr	r2, [r3, #0]
 800d80c:	683b      	ldr	r3, [r7, #0]
 800d80e:	689b      	ldr	r3, [r3, #8]
 800d810:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800d814:	683b      	ldr	r3, [r7, #0]
 800d816:	791b      	ldrb	r3, [r3, #4]
 800d818:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800d81a:	430b      	orrs	r3, r1
 800d81c:	4313      	orrs	r3, r2
 800d81e:	68ba      	ldr	r2, [r7, #8]
 800d820:	0151      	lsls	r1, r2, #5
 800d822:	68fa      	ldr	r2, [r7, #12]
 800d824:	440a      	add	r2, r1
 800d826:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d82a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d82e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d832:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800d834:	2300      	movs	r3, #0
}
 800d836:	4618      	mov	r0, r3
 800d838:	3714      	adds	r7, #20
 800d83a:	46bd      	mov	sp, r7
 800d83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d840:	4770      	bx	lr
	...

0800d844 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d844:	b480      	push	{r7}
 800d846:	b085      	sub	sp, #20
 800d848:	af00      	add	r7, sp, #0
 800d84a:	6078      	str	r0, [r7, #4]
 800d84c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d852:	683b      	ldr	r3, [r7, #0]
 800d854:	781b      	ldrb	r3, [r3, #0]
 800d856:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800d858:	683b      	ldr	r3, [r7, #0]
 800d85a:	785b      	ldrb	r3, [r3, #1]
 800d85c:	2b01      	cmp	r3, #1
 800d85e:	d161      	bne.n	800d924 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d860:	68bb      	ldr	r3, [r7, #8]
 800d862:	015a      	lsls	r2, r3, #5
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	4413      	add	r3, r2
 800d868:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d872:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d876:	d11f      	bne.n	800d8b8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800d878:	68bb      	ldr	r3, [r7, #8]
 800d87a:	015a      	lsls	r2, r3, #5
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	4413      	add	r3, r2
 800d880:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	68ba      	ldr	r2, [r7, #8]
 800d888:	0151      	lsls	r1, r2, #5
 800d88a:	68fa      	ldr	r2, [r7, #12]
 800d88c:	440a      	add	r2, r1
 800d88e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d892:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800d896:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800d898:	68bb      	ldr	r3, [r7, #8]
 800d89a:	015a      	lsls	r2, r3, #5
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	4413      	add	r3, r2
 800d8a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	68ba      	ldr	r2, [r7, #8]
 800d8a8:	0151      	lsls	r1, r2, #5
 800d8aa:	68fa      	ldr	r2, [r7, #12]
 800d8ac:	440a      	add	r2, r1
 800d8ae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d8b2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800d8b6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d8be:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d8c0:	683b      	ldr	r3, [r7, #0]
 800d8c2:	781b      	ldrb	r3, [r3, #0]
 800d8c4:	f003 030f 	and.w	r3, r3, #15
 800d8c8:	2101      	movs	r1, #1
 800d8ca:	fa01 f303 	lsl.w	r3, r1, r3
 800d8ce:	b29b      	uxth	r3, r3
 800d8d0:	43db      	mvns	r3, r3
 800d8d2:	68f9      	ldr	r1, [r7, #12]
 800d8d4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800d8d8:	4013      	ands	r3, r2
 800d8da:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d8e2:	69da      	ldr	r2, [r3, #28]
 800d8e4:	683b      	ldr	r3, [r7, #0]
 800d8e6:	781b      	ldrb	r3, [r3, #0]
 800d8e8:	f003 030f 	and.w	r3, r3, #15
 800d8ec:	2101      	movs	r1, #1
 800d8ee:	fa01 f303 	lsl.w	r3, r1, r3
 800d8f2:	b29b      	uxth	r3, r3
 800d8f4:	43db      	mvns	r3, r3
 800d8f6:	68f9      	ldr	r1, [r7, #12]
 800d8f8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800d8fc:	4013      	ands	r3, r2
 800d8fe:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800d900:	68bb      	ldr	r3, [r7, #8]
 800d902:	015a      	lsls	r2, r3, #5
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	4413      	add	r3, r2
 800d908:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d90c:	681a      	ldr	r2, [r3, #0]
 800d90e:	68bb      	ldr	r3, [r7, #8]
 800d910:	0159      	lsls	r1, r3, #5
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	440b      	add	r3, r1
 800d916:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d91a:	4619      	mov	r1, r3
 800d91c:	4b35      	ldr	r3, [pc, #212]	@ (800d9f4 <USB_DeactivateEndpoint+0x1b0>)
 800d91e:	4013      	ands	r3, r2
 800d920:	600b      	str	r3, [r1, #0]
 800d922:	e060      	b.n	800d9e6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d924:	68bb      	ldr	r3, [r7, #8]
 800d926:	015a      	lsls	r2, r3, #5
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	4413      	add	r3, r2
 800d92c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d936:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d93a:	d11f      	bne.n	800d97c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800d93c:	68bb      	ldr	r3, [r7, #8]
 800d93e:	015a      	lsls	r2, r3, #5
 800d940:	68fb      	ldr	r3, [r7, #12]
 800d942:	4413      	add	r3, r2
 800d944:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	68ba      	ldr	r2, [r7, #8]
 800d94c:	0151      	lsls	r1, r2, #5
 800d94e:	68fa      	ldr	r2, [r7, #12]
 800d950:	440a      	add	r2, r1
 800d952:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d956:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800d95a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800d95c:	68bb      	ldr	r3, [r7, #8]
 800d95e:	015a      	lsls	r2, r3, #5
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	4413      	add	r3, r2
 800d964:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	68ba      	ldr	r2, [r7, #8]
 800d96c:	0151      	lsls	r1, r2, #5
 800d96e:	68fa      	ldr	r2, [r7, #12]
 800d970:	440a      	add	r2, r1
 800d972:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d976:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800d97a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d982:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d984:	683b      	ldr	r3, [r7, #0]
 800d986:	781b      	ldrb	r3, [r3, #0]
 800d988:	f003 030f 	and.w	r3, r3, #15
 800d98c:	2101      	movs	r1, #1
 800d98e:	fa01 f303 	lsl.w	r3, r1, r3
 800d992:	041b      	lsls	r3, r3, #16
 800d994:	43db      	mvns	r3, r3
 800d996:	68f9      	ldr	r1, [r7, #12]
 800d998:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800d99c:	4013      	ands	r3, r2
 800d99e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d9a6:	69da      	ldr	r2, [r3, #28]
 800d9a8:	683b      	ldr	r3, [r7, #0]
 800d9aa:	781b      	ldrb	r3, [r3, #0]
 800d9ac:	f003 030f 	and.w	r3, r3, #15
 800d9b0:	2101      	movs	r1, #1
 800d9b2:	fa01 f303 	lsl.w	r3, r1, r3
 800d9b6:	041b      	lsls	r3, r3, #16
 800d9b8:	43db      	mvns	r3, r3
 800d9ba:	68f9      	ldr	r1, [r7, #12]
 800d9bc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800d9c0:	4013      	ands	r3, r2
 800d9c2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800d9c4:	68bb      	ldr	r3, [r7, #8]
 800d9c6:	015a      	lsls	r2, r3, #5
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	4413      	add	r3, r2
 800d9cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d9d0:	681a      	ldr	r2, [r3, #0]
 800d9d2:	68bb      	ldr	r3, [r7, #8]
 800d9d4:	0159      	lsls	r1, r3, #5
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	440b      	add	r3, r1
 800d9da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d9de:	4619      	mov	r1, r3
 800d9e0:	4b05      	ldr	r3, [pc, #20]	@ (800d9f8 <USB_DeactivateEndpoint+0x1b4>)
 800d9e2:	4013      	ands	r3, r2
 800d9e4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800d9e6:	2300      	movs	r3, #0
}
 800d9e8:	4618      	mov	r0, r3
 800d9ea:	3714      	adds	r7, #20
 800d9ec:	46bd      	mov	sp, r7
 800d9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9f2:	4770      	bx	lr
 800d9f4:	ec337800 	.word	0xec337800
 800d9f8:	eff37800 	.word	0xeff37800

0800d9fc <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d9fc:	b580      	push	{r7, lr}
 800d9fe:	b086      	sub	sp, #24
 800da00:	af00      	add	r7, sp, #0
 800da02:	6078      	str	r0, [r7, #4]
 800da04:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800da0a:	683b      	ldr	r3, [r7, #0]
 800da0c:	781b      	ldrb	r3, [r3, #0]
 800da0e:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800da10:	683b      	ldr	r3, [r7, #0]
 800da12:	785b      	ldrb	r3, [r3, #1]
 800da14:	2b01      	cmp	r3, #1
 800da16:	f040 8128 	bne.w	800dc6a <USB_EPStartXfer+0x26e>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800da1a:	683b      	ldr	r3, [r7, #0]
 800da1c:	691b      	ldr	r3, [r3, #16]
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d132      	bne.n	800da88 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800da22:	693b      	ldr	r3, [r7, #16]
 800da24:	015a      	lsls	r2, r3, #5
 800da26:	697b      	ldr	r3, [r7, #20]
 800da28:	4413      	add	r3, r2
 800da2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800da2e:	691b      	ldr	r3, [r3, #16]
 800da30:	693a      	ldr	r2, [r7, #16]
 800da32:	0151      	lsls	r1, r2, #5
 800da34:	697a      	ldr	r2, [r7, #20]
 800da36:	440a      	add	r2, r1
 800da38:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800da3c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800da40:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800da44:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800da46:	693b      	ldr	r3, [r7, #16]
 800da48:	015a      	lsls	r2, r3, #5
 800da4a:	697b      	ldr	r3, [r7, #20]
 800da4c:	4413      	add	r3, r2
 800da4e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800da52:	691b      	ldr	r3, [r3, #16]
 800da54:	693a      	ldr	r2, [r7, #16]
 800da56:	0151      	lsls	r1, r2, #5
 800da58:	697a      	ldr	r2, [r7, #20]
 800da5a:	440a      	add	r2, r1
 800da5c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800da60:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800da64:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800da66:	693b      	ldr	r3, [r7, #16]
 800da68:	015a      	lsls	r2, r3, #5
 800da6a:	697b      	ldr	r3, [r7, #20]
 800da6c:	4413      	add	r3, r2
 800da6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800da72:	691b      	ldr	r3, [r3, #16]
 800da74:	693a      	ldr	r2, [r7, #16]
 800da76:	0151      	lsls	r1, r2, #5
 800da78:	697a      	ldr	r2, [r7, #20]
 800da7a:	440a      	add	r2, r1
 800da7c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800da80:	0cdb      	lsrs	r3, r3, #19
 800da82:	04db      	lsls	r3, r3, #19
 800da84:	6113      	str	r3, [r2, #16]
 800da86:	e092      	b.n	800dbae <USB_EPStartXfer+0x1b2>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800da88:	693b      	ldr	r3, [r7, #16]
 800da8a:	015a      	lsls	r2, r3, #5
 800da8c:	697b      	ldr	r3, [r7, #20]
 800da8e:	4413      	add	r3, r2
 800da90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800da94:	691b      	ldr	r3, [r3, #16]
 800da96:	693a      	ldr	r2, [r7, #16]
 800da98:	0151      	lsls	r1, r2, #5
 800da9a:	697a      	ldr	r2, [r7, #20]
 800da9c:	440a      	add	r2, r1
 800da9e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800daa2:	0cdb      	lsrs	r3, r3, #19
 800daa4:	04db      	lsls	r3, r3, #19
 800daa6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800daa8:	693b      	ldr	r3, [r7, #16]
 800daaa:	015a      	lsls	r2, r3, #5
 800daac:	697b      	ldr	r3, [r7, #20]
 800daae:	4413      	add	r3, r2
 800dab0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dab4:	691b      	ldr	r3, [r3, #16]
 800dab6:	693a      	ldr	r2, [r7, #16]
 800dab8:	0151      	lsls	r1, r2, #5
 800daba:	697a      	ldr	r2, [r7, #20]
 800dabc:	440a      	add	r2, r1
 800dabe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800dac2:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800dac6:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800daca:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800dacc:	693b      	ldr	r3, [r7, #16]
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d11a      	bne.n	800db08 <USB_EPStartXfer+0x10c>
      {
        if (ep->xfer_len > ep->maxpacket)
 800dad2:	683b      	ldr	r3, [r7, #0]
 800dad4:	691a      	ldr	r2, [r3, #16]
 800dad6:	683b      	ldr	r3, [r7, #0]
 800dad8:	689b      	ldr	r3, [r3, #8]
 800dada:	429a      	cmp	r2, r3
 800dadc:	d903      	bls.n	800dae6 <USB_EPStartXfer+0xea>
        {
          ep->xfer_len = ep->maxpacket;
 800dade:	683b      	ldr	r3, [r7, #0]
 800dae0:	689a      	ldr	r2, [r3, #8]
 800dae2:	683b      	ldr	r3, [r7, #0]
 800dae4:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800dae6:	693b      	ldr	r3, [r7, #16]
 800dae8:	015a      	lsls	r2, r3, #5
 800daea:	697b      	ldr	r3, [r7, #20]
 800daec:	4413      	add	r3, r2
 800daee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800daf2:	691b      	ldr	r3, [r3, #16]
 800daf4:	693a      	ldr	r2, [r7, #16]
 800daf6:	0151      	lsls	r1, r2, #5
 800daf8:	697a      	ldr	r2, [r7, #20]
 800dafa:	440a      	add	r2, r1
 800dafc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800db00:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800db04:	6113      	str	r3, [r2, #16]
 800db06:	e01b      	b.n	800db40 <USB_EPStartXfer+0x144>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800db08:	693b      	ldr	r3, [r7, #16]
 800db0a:	015a      	lsls	r2, r3, #5
 800db0c:	697b      	ldr	r3, [r7, #20]
 800db0e:	4413      	add	r3, r2
 800db10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800db14:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800db16:	683b      	ldr	r3, [r7, #0]
 800db18:	6919      	ldr	r1, [r3, #16]
 800db1a:	683b      	ldr	r3, [r7, #0]
 800db1c:	689b      	ldr	r3, [r3, #8]
 800db1e:	440b      	add	r3, r1
 800db20:	1e59      	subs	r1, r3, #1
 800db22:	683b      	ldr	r3, [r7, #0]
 800db24:	689b      	ldr	r3, [r3, #8]
 800db26:	fbb1 f3f3 	udiv	r3, r1, r3
 800db2a:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800db2c:	4b8d      	ldr	r3, [pc, #564]	@ (800dd64 <USB_EPStartXfer+0x368>)
 800db2e:	400b      	ands	r3, r1
 800db30:	6939      	ldr	r1, [r7, #16]
 800db32:	0148      	lsls	r0, r1, #5
 800db34:	6979      	ldr	r1, [r7, #20]
 800db36:	4401      	add	r1, r0
 800db38:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800db3c:	4313      	orrs	r3, r2
 800db3e:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800db40:	693b      	ldr	r3, [r7, #16]
 800db42:	015a      	lsls	r2, r3, #5
 800db44:	697b      	ldr	r3, [r7, #20]
 800db46:	4413      	add	r3, r2
 800db48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800db4c:	691a      	ldr	r2, [r3, #16]
 800db4e:	683b      	ldr	r3, [r7, #0]
 800db50:	691b      	ldr	r3, [r3, #16]
 800db52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800db56:	6939      	ldr	r1, [r7, #16]
 800db58:	0148      	lsls	r0, r1, #5
 800db5a:	6979      	ldr	r1, [r7, #20]
 800db5c:	4401      	add	r1, r0
 800db5e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800db62:	4313      	orrs	r3, r2
 800db64:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800db66:	683b      	ldr	r3, [r7, #0]
 800db68:	791b      	ldrb	r3, [r3, #4]
 800db6a:	2b01      	cmp	r3, #1
 800db6c:	d11f      	bne.n	800dbae <USB_EPStartXfer+0x1b2>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800db6e:	693b      	ldr	r3, [r7, #16]
 800db70:	015a      	lsls	r2, r3, #5
 800db72:	697b      	ldr	r3, [r7, #20]
 800db74:	4413      	add	r3, r2
 800db76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800db7a:	691b      	ldr	r3, [r3, #16]
 800db7c:	693a      	ldr	r2, [r7, #16]
 800db7e:	0151      	lsls	r1, r2, #5
 800db80:	697a      	ldr	r2, [r7, #20]
 800db82:	440a      	add	r2, r1
 800db84:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800db88:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800db8c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800db8e:	693b      	ldr	r3, [r7, #16]
 800db90:	015a      	lsls	r2, r3, #5
 800db92:	697b      	ldr	r3, [r7, #20]
 800db94:	4413      	add	r3, r2
 800db96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800db9a:	691b      	ldr	r3, [r3, #16]
 800db9c:	693a      	ldr	r2, [r7, #16]
 800db9e:	0151      	lsls	r1, r2, #5
 800dba0:	697a      	ldr	r2, [r7, #20]
 800dba2:	440a      	add	r2, r1
 800dba4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800dba8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800dbac:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800dbae:	693b      	ldr	r3, [r7, #16]
 800dbb0:	015a      	lsls	r2, r3, #5
 800dbb2:	697b      	ldr	r3, [r7, #20]
 800dbb4:	4413      	add	r3, r2
 800dbb6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	693a      	ldr	r2, [r7, #16]
 800dbbe:	0151      	lsls	r1, r2, #5
 800dbc0:	697a      	ldr	r2, [r7, #20]
 800dbc2:	440a      	add	r2, r1
 800dbc4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800dbc8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800dbcc:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800dbce:	683b      	ldr	r3, [r7, #0]
 800dbd0:	791b      	ldrb	r3, [r3, #4]
 800dbd2:	2b01      	cmp	r3, #1
 800dbd4:	d015      	beq.n	800dc02 <USB_EPStartXfer+0x206>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800dbd6:	683b      	ldr	r3, [r7, #0]
 800dbd8:	691b      	ldr	r3, [r3, #16]
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	f000 8139 	beq.w	800de52 <USB_EPStartXfer+0x456>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800dbe0:	697b      	ldr	r3, [r7, #20]
 800dbe2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dbe6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800dbe8:	683b      	ldr	r3, [r7, #0]
 800dbea:	781b      	ldrb	r3, [r3, #0]
 800dbec:	f003 030f 	and.w	r3, r3, #15
 800dbf0:	2101      	movs	r1, #1
 800dbf2:	fa01 f303 	lsl.w	r3, r1, r3
 800dbf6:	6979      	ldr	r1, [r7, #20]
 800dbf8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800dbfc:	4313      	orrs	r3, r2
 800dbfe:	634b      	str	r3, [r1, #52]	@ 0x34
 800dc00:	e127      	b.n	800de52 <USB_EPStartXfer+0x456>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800dc02:	697b      	ldr	r3, [r7, #20]
 800dc04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dc08:	689b      	ldr	r3, [r3, #8]
 800dc0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d110      	bne.n	800dc34 <USB_EPStartXfer+0x238>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800dc12:	693b      	ldr	r3, [r7, #16]
 800dc14:	015a      	lsls	r2, r3, #5
 800dc16:	697b      	ldr	r3, [r7, #20]
 800dc18:	4413      	add	r3, r2
 800dc1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	693a      	ldr	r2, [r7, #16]
 800dc22:	0151      	lsls	r1, r2, #5
 800dc24:	697a      	ldr	r2, [r7, #20]
 800dc26:	440a      	add	r2, r1
 800dc28:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800dc2c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800dc30:	6013      	str	r3, [r2, #0]
 800dc32:	e00f      	b.n	800dc54 <USB_EPStartXfer+0x258>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800dc34:	693b      	ldr	r3, [r7, #16]
 800dc36:	015a      	lsls	r2, r3, #5
 800dc38:	697b      	ldr	r3, [r7, #20]
 800dc3a:	4413      	add	r3, r2
 800dc3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	693a      	ldr	r2, [r7, #16]
 800dc44:	0151      	lsls	r1, r2, #5
 800dc46:	697a      	ldr	r2, [r7, #20]
 800dc48:	440a      	add	r2, r1
 800dc4a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800dc4e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800dc52:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 800dc54:	683b      	ldr	r3, [r7, #0]
 800dc56:	68d9      	ldr	r1, [r3, #12]
 800dc58:	683b      	ldr	r3, [r7, #0]
 800dc5a:	781a      	ldrb	r2, [r3, #0]
 800dc5c:	683b      	ldr	r3, [r7, #0]
 800dc5e:	691b      	ldr	r3, [r3, #16]
 800dc60:	b29b      	uxth	r3, r3
 800dc62:	6878      	ldr	r0, [r7, #4]
 800dc64:	f000 f9a6 	bl	800dfb4 <USB_WritePacket>
 800dc68:	e0f3      	b.n	800de52 <USB_EPStartXfer+0x456>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800dc6a:	693b      	ldr	r3, [r7, #16]
 800dc6c:	015a      	lsls	r2, r3, #5
 800dc6e:	697b      	ldr	r3, [r7, #20]
 800dc70:	4413      	add	r3, r2
 800dc72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dc76:	691b      	ldr	r3, [r3, #16]
 800dc78:	693a      	ldr	r2, [r7, #16]
 800dc7a:	0151      	lsls	r1, r2, #5
 800dc7c:	697a      	ldr	r2, [r7, #20]
 800dc7e:	440a      	add	r2, r1
 800dc80:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800dc84:	0cdb      	lsrs	r3, r3, #19
 800dc86:	04db      	lsls	r3, r3, #19
 800dc88:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800dc8a:	693b      	ldr	r3, [r7, #16]
 800dc8c:	015a      	lsls	r2, r3, #5
 800dc8e:	697b      	ldr	r3, [r7, #20]
 800dc90:	4413      	add	r3, r2
 800dc92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dc96:	691b      	ldr	r3, [r3, #16]
 800dc98:	693a      	ldr	r2, [r7, #16]
 800dc9a:	0151      	lsls	r1, r2, #5
 800dc9c:	697a      	ldr	r2, [r7, #20]
 800dc9e:	440a      	add	r2, r1
 800dca0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800dca4:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800dca8:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800dcac:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800dcae:	693b      	ldr	r3, [r7, #16]
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	d12f      	bne.n	800dd14 <USB_EPStartXfer+0x318>
    {
      if (ep->xfer_len > 0U)
 800dcb4:	683b      	ldr	r3, [r7, #0]
 800dcb6:	691b      	ldr	r3, [r3, #16]
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d003      	beq.n	800dcc4 <USB_EPStartXfer+0x2c8>
      {
        ep->xfer_len = ep->maxpacket;
 800dcbc:	683b      	ldr	r3, [r7, #0]
 800dcbe:	689a      	ldr	r2, [r3, #8]
 800dcc0:	683b      	ldr	r3, [r7, #0]
 800dcc2:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800dcc4:	683b      	ldr	r3, [r7, #0]
 800dcc6:	689a      	ldr	r2, [r3, #8]
 800dcc8:	683b      	ldr	r3, [r7, #0]
 800dcca:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800dccc:	693b      	ldr	r3, [r7, #16]
 800dcce:	015a      	lsls	r2, r3, #5
 800dcd0:	697b      	ldr	r3, [r7, #20]
 800dcd2:	4413      	add	r3, r2
 800dcd4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dcd8:	691a      	ldr	r2, [r3, #16]
 800dcda:	683b      	ldr	r3, [r7, #0]
 800dcdc:	6a1b      	ldr	r3, [r3, #32]
 800dcde:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800dce2:	6939      	ldr	r1, [r7, #16]
 800dce4:	0148      	lsls	r0, r1, #5
 800dce6:	6979      	ldr	r1, [r7, #20]
 800dce8:	4401      	add	r1, r0
 800dcea:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800dcee:	4313      	orrs	r3, r2
 800dcf0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800dcf2:	693b      	ldr	r3, [r7, #16]
 800dcf4:	015a      	lsls	r2, r3, #5
 800dcf6:	697b      	ldr	r3, [r7, #20]
 800dcf8:	4413      	add	r3, r2
 800dcfa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dcfe:	691b      	ldr	r3, [r3, #16]
 800dd00:	693a      	ldr	r2, [r7, #16]
 800dd02:	0151      	lsls	r1, r2, #5
 800dd04:	697a      	ldr	r2, [r7, #20]
 800dd06:	440a      	add	r2, r1
 800dd08:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800dd0c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800dd10:	6113      	str	r3, [r2, #16]
 800dd12:	e061      	b.n	800ddd8 <USB_EPStartXfer+0x3dc>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800dd14:	683b      	ldr	r3, [r7, #0]
 800dd16:	691b      	ldr	r3, [r3, #16]
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d125      	bne.n	800dd68 <USB_EPStartXfer+0x36c>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800dd1c:	693b      	ldr	r3, [r7, #16]
 800dd1e:	015a      	lsls	r2, r3, #5
 800dd20:	697b      	ldr	r3, [r7, #20]
 800dd22:	4413      	add	r3, r2
 800dd24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dd28:	691a      	ldr	r2, [r3, #16]
 800dd2a:	683b      	ldr	r3, [r7, #0]
 800dd2c:	689b      	ldr	r3, [r3, #8]
 800dd2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800dd32:	6939      	ldr	r1, [r7, #16]
 800dd34:	0148      	lsls	r0, r1, #5
 800dd36:	6979      	ldr	r1, [r7, #20]
 800dd38:	4401      	add	r1, r0
 800dd3a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800dd3e:	4313      	orrs	r3, r2
 800dd40:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800dd42:	693b      	ldr	r3, [r7, #16]
 800dd44:	015a      	lsls	r2, r3, #5
 800dd46:	697b      	ldr	r3, [r7, #20]
 800dd48:	4413      	add	r3, r2
 800dd4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dd4e:	691b      	ldr	r3, [r3, #16]
 800dd50:	693a      	ldr	r2, [r7, #16]
 800dd52:	0151      	lsls	r1, r2, #5
 800dd54:	697a      	ldr	r2, [r7, #20]
 800dd56:	440a      	add	r2, r1
 800dd58:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800dd5c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800dd60:	6113      	str	r3, [r2, #16]
 800dd62:	e039      	b.n	800ddd8 <USB_EPStartXfer+0x3dc>
 800dd64:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800dd68:	683b      	ldr	r3, [r7, #0]
 800dd6a:	691a      	ldr	r2, [r3, #16]
 800dd6c:	683b      	ldr	r3, [r7, #0]
 800dd6e:	689b      	ldr	r3, [r3, #8]
 800dd70:	4413      	add	r3, r2
 800dd72:	1e5a      	subs	r2, r3, #1
 800dd74:	683b      	ldr	r3, [r7, #0]
 800dd76:	689b      	ldr	r3, [r3, #8]
 800dd78:	fbb2 f3f3 	udiv	r3, r2, r3
 800dd7c:	81fb      	strh	r3, [r7, #14]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800dd7e:	683b      	ldr	r3, [r7, #0]
 800dd80:	689b      	ldr	r3, [r3, #8]
 800dd82:	89fa      	ldrh	r2, [r7, #14]
 800dd84:	fb03 f202 	mul.w	r2, r3, r2
 800dd88:	683b      	ldr	r3, [r7, #0]
 800dd8a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800dd8c:	693b      	ldr	r3, [r7, #16]
 800dd8e:	015a      	lsls	r2, r3, #5
 800dd90:	697b      	ldr	r3, [r7, #20]
 800dd92:	4413      	add	r3, r2
 800dd94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dd98:	691a      	ldr	r2, [r3, #16]
 800dd9a:	89fb      	ldrh	r3, [r7, #14]
 800dd9c:	04d9      	lsls	r1, r3, #19
 800dd9e:	4b2f      	ldr	r3, [pc, #188]	@ (800de5c <USB_EPStartXfer+0x460>)
 800dda0:	400b      	ands	r3, r1
 800dda2:	6939      	ldr	r1, [r7, #16]
 800dda4:	0148      	lsls	r0, r1, #5
 800dda6:	6979      	ldr	r1, [r7, #20]
 800dda8:	4401      	add	r1, r0
 800ddaa:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800ddae:	4313      	orrs	r3, r2
 800ddb0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800ddb2:	693b      	ldr	r3, [r7, #16]
 800ddb4:	015a      	lsls	r2, r3, #5
 800ddb6:	697b      	ldr	r3, [r7, #20]
 800ddb8:	4413      	add	r3, r2
 800ddba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ddbe:	691a      	ldr	r2, [r3, #16]
 800ddc0:	683b      	ldr	r3, [r7, #0]
 800ddc2:	6a1b      	ldr	r3, [r3, #32]
 800ddc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ddc8:	6939      	ldr	r1, [r7, #16]
 800ddca:	0148      	lsls	r0, r1, #5
 800ddcc:	6979      	ldr	r1, [r7, #20]
 800ddce:	4401      	add	r1, r0
 800ddd0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800ddd4:	4313      	orrs	r3, r2
 800ddd6:	610b      	str	r3, [r1, #16]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800ddd8:	683b      	ldr	r3, [r7, #0]
 800ddda:	791b      	ldrb	r3, [r3, #4]
 800dddc:	2b01      	cmp	r3, #1
 800ddde:	d128      	bne.n	800de32 <USB_EPStartXfer+0x436>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800dde0:	697b      	ldr	r3, [r7, #20]
 800dde2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dde6:	689b      	ldr	r3, [r3, #8]
 800dde8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d110      	bne.n	800de12 <USB_EPStartXfer+0x416>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800ddf0:	693b      	ldr	r3, [r7, #16]
 800ddf2:	015a      	lsls	r2, r3, #5
 800ddf4:	697b      	ldr	r3, [r7, #20]
 800ddf6:	4413      	add	r3, r2
 800ddf8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	693a      	ldr	r2, [r7, #16]
 800de00:	0151      	lsls	r1, r2, #5
 800de02:	697a      	ldr	r2, [r7, #20]
 800de04:	440a      	add	r2, r1
 800de06:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800de0a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800de0e:	6013      	str	r3, [r2, #0]
 800de10:	e00f      	b.n	800de32 <USB_EPStartXfer+0x436>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800de12:	693b      	ldr	r3, [r7, #16]
 800de14:	015a      	lsls	r2, r3, #5
 800de16:	697b      	ldr	r3, [r7, #20]
 800de18:	4413      	add	r3, r2
 800de1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	693a      	ldr	r2, [r7, #16]
 800de22:	0151      	lsls	r1, r2, #5
 800de24:	697a      	ldr	r2, [r7, #20]
 800de26:	440a      	add	r2, r1
 800de28:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800de2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800de30:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800de32:	693b      	ldr	r3, [r7, #16]
 800de34:	015a      	lsls	r2, r3, #5
 800de36:	697b      	ldr	r3, [r7, #20]
 800de38:	4413      	add	r3, r2
 800de3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	693a      	ldr	r2, [r7, #16]
 800de42:	0151      	lsls	r1, r2, #5
 800de44:	697a      	ldr	r2, [r7, #20]
 800de46:	440a      	add	r2, r1
 800de48:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800de4c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800de50:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800de52:	2300      	movs	r3, #0
}
 800de54:	4618      	mov	r0, r3
 800de56:	3718      	adds	r7, #24
 800de58:	46bd      	mov	sp, r7
 800de5a:	bd80      	pop	{r7, pc}
 800de5c:	1ff80000 	.word	0x1ff80000

0800de60 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800de60:	b480      	push	{r7}
 800de62:	b087      	sub	sp, #28
 800de64:	af00      	add	r7, sp, #0
 800de66:	6078      	str	r0, [r7, #4]
 800de68:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800de6a:	2300      	movs	r3, #0
 800de6c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800de6e:	2300      	movs	r3, #0
 800de70:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800de76:	683b      	ldr	r3, [r7, #0]
 800de78:	785b      	ldrb	r3, [r3, #1]
 800de7a:	2b01      	cmp	r3, #1
 800de7c:	d14a      	bne.n	800df14 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800de7e:	683b      	ldr	r3, [r7, #0]
 800de80:	781b      	ldrb	r3, [r3, #0]
 800de82:	015a      	lsls	r2, r3, #5
 800de84:	693b      	ldr	r3, [r7, #16]
 800de86:	4413      	add	r3, r2
 800de88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800de92:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800de96:	f040 8086 	bne.w	800dfa6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800de9a:	683b      	ldr	r3, [r7, #0]
 800de9c:	781b      	ldrb	r3, [r3, #0]
 800de9e:	015a      	lsls	r2, r3, #5
 800dea0:	693b      	ldr	r3, [r7, #16]
 800dea2:	4413      	add	r3, r2
 800dea4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dea8:	681b      	ldr	r3, [r3, #0]
 800deaa:	683a      	ldr	r2, [r7, #0]
 800deac:	7812      	ldrb	r2, [r2, #0]
 800deae:	0151      	lsls	r1, r2, #5
 800deb0:	693a      	ldr	r2, [r7, #16]
 800deb2:	440a      	add	r2, r1
 800deb4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800deb8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800debc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800debe:	683b      	ldr	r3, [r7, #0]
 800dec0:	781b      	ldrb	r3, [r3, #0]
 800dec2:	015a      	lsls	r2, r3, #5
 800dec4:	693b      	ldr	r3, [r7, #16]
 800dec6:	4413      	add	r3, r2
 800dec8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	683a      	ldr	r2, [r7, #0]
 800ded0:	7812      	ldrb	r2, [r2, #0]
 800ded2:	0151      	lsls	r1, r2, #5
 800ded4:	693a      	ldr	r2, [r7, #16]
 800ded6:	440a      	add	r2, r1
 800ded8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800dedc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800dee0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	3301      	adds	r3, #1
 800dee6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	f242 7210 	movw	r2, #10000	@ 0x2710
 800deee:	4293      	cmp	r3, r2
 800def0:	d902      	bls.n	800def8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800def2:	2301      	movs	r3, #1
 800def4:	75fb      	strb	r3, [r7, #23]
          break;
 800def6:	e056      	b.n	800dfa6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800def8:	683b      	ldr	r3, [r7, #0]
 800defa:	781b      	ldrb	r3, [r3, #0]
 800defc:	015a      	lsls	r2, r3, #5
 800defe:	693b      	ldr	r3, [r7, #16]
 800df00:	4413      	add	r3, r2
 800df02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800df0c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800df10:	d0e7      	beq.n	800dee2 <USB_EPStopXfer+0x82>
 800df12:	e048      	b.n	800dfa6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800df14:	683b      	ldr	r3, [r7, #0]
 800df16:	781b      	ldrb	r3, [r3, #0]
 800df18:	015a      	lsls	r2, r3, #5
 800df1a:	693b      	ldr	r3, [r7, #16]
 800df1c:	4413      	add	r3, r2
 800df1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800df28:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800df2c:	d13b      	bne.n	800dfa6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800df2e:	683b      	ldr	r3, [r7, #0]
 800df30:	781b      	ldrb	r3, [r3, #0]
 800df32:	015a      	lsls	r2, r3, #5
 800df34:	693b      	ldr	r3, [r7, #16]
 800df36:	4413      	add	r3, r2
 800df38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	683a      	ldr	r2, [r7, #0]
 800df40:	7812      	ldrb	r2, [r2, #0]
 800df42:	0151      	lsls	r1, r2, #5
 800df44:	693a      	ldr	r2, [r7, #16]
 800df46:	440a      	add	r2, r1
 800df48:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800df4c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800df50:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800df52:	683b      	ldr	r3, [r7, #0]
 800df54:	781b      	ldrb	r3, [r3, #0]
 800df56:	015a      	lsls	r2, r3, #5
 800df58:	693b      	ldr	r3, [r7, #16]
 800df5a:	4413      	add	r3, r2
 800df5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	683a      	ldr	r2, [r7, #0]
 800df64:	7812      	ldrb	r2, [r2, #0]
 800df66:	0151      	lsls	r1, r2, #5
 800df68:	693a      	ldr	r2, [r7, #16]
 800df6a:	440a      	add	r2, r1
 800df6c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800df70:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800df74:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800df76:	68fb      	ldr	r3, [r7, #12]
 800df78:	3301      	adds	r3, #1
 800df7a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	f242 7210 	movw	r2, #10000	@ 0x2710
 800df82:	4293      	cmp	r3, r2
 800df84:	d902      	bls.n	800df8c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800df86:	2301      	movs	r3, #1
 800df88:	75fb      	strb	r3, [r7, #23]
          break;
 800df8a:	e00c      	b.n	800dfa6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800df8c:	683b      	ldr	r3, [r7, #0]
 800df8e:	781b      	ldrb	r3, [r3, #0]
 800df90:	015a      	lsls	r2, r3, #5
 800df92:	693b      	ldr	r3, [r7, #16]
 800df94:	4413      	add	r3, r2
 800df96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800dfa0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800dfa4:	d0e7      	beq.n	800df76 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800dfa6:	7dfb      	ldrb	r3, [r7, #23]
}
 800dfa8:	4618      	mov	r0, r3
 800dfaa:	371c      	adds	r7, #28
 800dfac:	46bd      	mov	sp, r7
 800dfae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfb2:	4770      	bx	lr

0800dfb4 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 800dfb4:	b480      	push	{r7}
 800dfb6:	b089      	sub	sp, #36	@ 0x24
 800dfb8:	af00      	add	r7, sp, #0
 800dfba:	60f8      	str	r0, [r7, #12]
 800dfbc:	60b9      	str	r1, [r7, #8]
 800dfbe:	4611      	mov	r1, r2
 800dfc0:	461a      	mov	r2, r3
 800dfc2:	460b      	mov	r3, r1
 800dfc4:	71fb      	strb	r3, [r7, #7]
 800dfc6:	4613      	mov	r3, r2
 800dfc8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800dfce:	68bb      	ldr	r3, [r7, #8]
 800dfd0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 800dfd2:	88bb      	ldrh	r3, [r7, #4]
 800dfd4:	3303      	adds	r3, #3
 800dfd6:	089b      	lsrs	r3, r3, #2
 800dfd8:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800dfda:	2300      	movs	r3, #0
 800dfdc:	61bb      	str	r3, [r7, #24]
 800dfde:	e018      	b.n	800e012 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800dfe0:	79fb      	ldrb	r3, [r7, #7]
 800dfe2:	031a      	lsls	r2, r3, #12
 800dfe4:	697b      	ldr	r3, [r7, #20]
 800dfe6:	4413      	add	r3, r2
 800dfe8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800dfec:	461a      	mov	r2, r3
 800dfee:	69fb      	ldr	r3, [r7, #28]
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	6013      	str	r3, [r2, #0]
    pSrc++;
 800dff4:	69fb      	ldr	r3, [r7, #28]
 800dff6:	3301      	adds	r3, #1
 800dff8:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800dffa:	69fb      	ldr	r3, [r7, #28]
 800dffc:	3301      	adds	r3, #1
 800dffe:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800e000:	69fb      	ldr	r3, [r7, #28]
 800e002:	3301      	adds	r3, #1
 800e004:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800e006:	69fb      	ldr	r3, [r7, #28]
 800e008:	3301      	adds	r3, #1
 800e00a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800e00c:	69bb      	ldr	r3, [r7, #24]
 800e00e:	3301      	adds	r3, #1
 800e010:	61bb      	str	r3, [r7, #24]
 800e012:	69ba      	ldr	r2, [r7, #24]
 800e014:	693b      	ldr	r3, [r7, #16]
 800e016:	429a      	cmp	r2, r3
 800e018:	d3e2      	bcc.n	800dfe0 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800e01a:	2300      	movs	r3, #0
}
 800e01c:	4618      	mov	r0, r3
 800e01e:	3724      	adds	r7, #36	@ 0x24
 800e020:	46bd      	mov	sp, r7
 800e022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e026:	4770      	bx	lr

0800e028 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800e028:	b480      	push	{r7}
 800e02a:	b08b      	sub	sp, #44	@ 0x2c
 800e02c:	af00      	add	r7, sp, #0
 800e02e:	60f8      	str	r0, [r7, #12]
 800e030:	60b9      	str	r1, [r7, #8]
 800e032:	4613      	mov	r3, r2
 800e034:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800e03a:	68bb      	ldr	r3, [r7, #8]
 800e03c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800e03e:	88fb      	ldrh	r3, [r7, #6]
 800e040:	089b      	lsrs	r3, r3, #2
 800e042:	b29b      	uxth	r3, r3
 800e044:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800e046:	88fb      	ldrh	r3, [r7, #6]
 800e048:	f003 0303 	and.w	r3, r3, #3
 800e04c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800e04e:	2300      	movs	r3, #0
 800e050:	623b      	str	r3, [r7, #32]
 800e052:	e014      	b.n	800e07e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800e054:	69bb      	ldr	r3, [r7, #24]
 800e056:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e05a:	681a      	ldr	r2, [r3, #0]
 800e05c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e05e:	601a      	str	r2, [r3, #0]
    pDest++;
 800e060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e062:	3301      	adds	r3, #1
 800e064:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800e066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e068:	3301      	adds	r3, #1
 800e06a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800e06c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e06e:	3301      	adds	r3, #1
 800e070:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800e072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e074:	3301      	adds	r3, #1
 800e076:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800e078:	6a3b      	ldr	r3, [r7, #32]
 800e07a:	3301      	adds	r3, #1
 800e07c:	623b      	str	r3, [r7, #32]
 800e07e:	6a3a      	ldr	r2, [r7, #32]
 800e080:	697b      	ldr	r3, [r7, #20]
 800e082:	429a      	cmp	r2, r3
 800e084:	d3e6      	bcc.n	800e054 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800e086:	8bfb      	ldrh	r3, [r7, #30]
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d01e      	beq.n	800e0ca <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800e08c:	2300      	movs	r3, #0
 800e08e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800e090:	69bb      	ldr	r3, [r7, #24]
 800e092:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e096:	461a      	mov	r2, r3
 800e098:	f107 0310 	add.w	r3, r7, #16
 800e09c:	6812      	ldr	r2, [r2, #0]
 800e09e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800e0a0:	693a      	ldr	r2, [r7, #16]
 800e0a2:	6a3b      	ldr	r3, [r7, #32]
 800e0a4:	b2db      	uxtb	r3, r3
 800e0a6:	00db      	lsls	r3, r3, #3
 800e0a8:	fa22 f303 	lsr.w	r3, r2, r3
 800e0ac:	b2da      	uxtb	r2, r3
 800e0ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0b0:	701a      	strb	r2, [r3, #0]
      i++;
 800e0b2:	6a3b      	ldr	r3, [r7, #32]
 800e0b4:	3301      	adds	r3, #1
 800e0b6:	623b      	str	r3, [r7, #32]
      pDest++;
 800e0b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0ba:	3301      	adds	r3, #1
 800e0bc:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800e0be:	8bfb      	ldrh	r3, [r7, #30]
 800e0c0:	3b01      	subs	r3, #1
 800e0c2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800e0c4:	8bfb      	ldrh	r3, [r7, #30]
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d1ea      	bne.n	800e0a0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800e0ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800e0cc:	4618      	mov	r0, r3
 800e0ce:	372c      	adds	r7, #44	@ 0x2c
 800e0d0:	46bd      	mov	sp, r7
 800e0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0d6:	4770      	bx	lr

0800e0d8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e0d8:	b480      	push	{r7}
 800e0da:	b085      	sub	sp, #20
 800e0dc:	af00      	add	r7, sp, #0
 800e0de:	6078      	str	r0, [r7, #4]
 800e0e0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e0e6:	683b      	ldr	r3, [r7, #0]
 800e0e8:	781b      	ldrb	r3, [r3, #0]
 800e0ea:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e0ec:	683b      	ldr	r3, [r7, #0]
 800e0ee:	785b      	ldrb	r3, [r3, #1]
 800e0f0:	2b01      	cmp	r3, #1
 800e0f2:	d12c      	bne.n	800e14e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800e0f4:	68bb      	ldr	r3, [r7, #8]
 800e0f6:	015a      	lsls	r2, r3, #5
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	4413      	add	r3, r2
 800e0fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	2b00      	cmp	r3, #0
 800e104:	db12      	blt.n	800e12c <USB_EPSetStall+0x54>
 800e106:	68bb      	ldr	r3, [r7, #8]
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d00f      	beq.n	800e12c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800e10c:	68bb      	ldr	r3, [r7, #8]
 800e10e:	015a      	lsls	r2, r3, #5
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	4413      	add	r3, r2
 800e114:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	68ba      	ldr	r2, [r7, #8]
 800e11c:	0151      	lsls	r1, r2, #5
 800e11e:	68fa      	ldr	r2, [r7, #12]
 800e120:	440a      	add	r2, r1
 800e122:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e126:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800e12a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800e12c:	68bb      	ldr	r3, [r7, #8]
 800e12e:	015a      	lsls	r2, r3, #5
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	4413      	add	r3, r2
 800e134:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	68ba      	ldr	r2, [r7, #8]
 800e13c:	0151      	lsls	r1, r2, #5
 800e13e:	68fa      	ldr	r2, [r7, #12]
 800e140:	440a      	add	r2, r1
 800e142:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e146:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800e14a:	6013      	str	r3, [r2, #0]
 800e14c:	e02b      	b.n	800e1a6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800e14e:	68bb      	ldr	r3, [r7, #8]
 800e150:	015a      	lsls	r2, r3, #5
 800e152:	68fb      	ldr	r3, [r7, #12]
 800e154:	4413      	add	r3, r2
 800e156:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e15a:	681b      	ldr	r3, [r3, #0]
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	db12      	blt.n	800e186 <USB_EPSetStall+0xae>
 800e160:	68bb      	ldr	r3, [r7, #8]
 800e162:	2b00      	cmp	r3, #0
 800e164:	d00f      	beq.n	800e186 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800e166:	68bb      	ldr	r3, [r7, #8]
 800e168:	015a      	lsls	r2, r3, #5
 800e16a:	68fb      	ldr	r3, [r7, #12]
 800e16c:	4413      	add	r3, r2
 800e16e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	68ba      	ldr	r2, [r7, #8]
 800e176:	0151      	lsls	r1, r2, #5
 800e178:	68fa      	ldr	r2, [r7, #12]
 800e17a:	440a      	add	r2, r1
 800e17c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e180:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800e184:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800e186:	68bb      	ldr	r3, [r7, #8]
 800e188:	015a      	lsls	r2, r3, #5
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	4413      	add	r3, r2
 800e18e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	68ba      	ldr	r2, [r7, #8]
 800e196:	0151      	lsls	r1, r2, #5
 800e198:	68fa      	ldr	r2, [r7, #12]
 800e19a:	440a      	add	r2, r1
 800e19c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e1a0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800e1a4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e1a6:	2300      	movs	r3, #0
}
 800e1a8:	4618      	mov	r0, r3
 800e1aa:	3714      	adds	r7, #20
 800e1ac:	46bd      	mov	sp, r7
 800e1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1b2:	4770      	bx	lr

0800e1b4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e1b4:	b480      	push	{r7}
 800e1b6:	b085      	sub	sp, #20
 800e1b8:	af00      	add	r7, sp, #0
 800e1ba:	6078      	str	r0, [r7, #4]
 800e1bc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e1c2:	683b      	ldr	r3, [r7, #0]
 800e1c4:	781b      	ldrb	r3, [r3, #0]
 800e1c6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e1c8:	683b      	ldr	r3, [r7, #0]
 800e1ca:	785b      	ldrb	r3, [r3, #1]
 800e1cc:	2b01      	cmp	r3, #1
 800e1ce:	d128      	bne.n	800e222 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800e1d0:	68bb      	ldr	r3, [r7, #8]
 800e1d2:	015a      	lsls	r2, r3, #5
 800e1d4:	68fb      	ldr	r3, [r7, #12]
 800e1d6:	4413      	add	r3, r2
 800e1d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	68ba      	ldr	r2, [r7, #8]
 800e1e0:	0151      	lsls	r1, r2, #5
 800e1e2:	68fa      	ldr	r2, [r7, #12]
 800e1e4:	440a      	add	r2, r1
 800e1e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e1ea:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800e1ee:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800e1f0:	683b      	ldr	r3, [r7, #0]
 800e1f2:	791b      	ldrb	r3, [r3, #4]
 800e1f4:	2b03      	cmp	r3, #3
 800e1f6:	d003      	beq.n	800e200 <USB_EPClearStall+0x4c>
 800e1f8:	683b      	ldr	r3, [r7, #0]
 800e1fa:	791b      	ldrb	r3, [r3, #4]
 800e1fc:	2b02      	cmp	r3, #2
 800e1fe:	d138      	bne.n	800e272 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800e200:	68bb      	ldr	r3, [r7, #8]
 800e202:	015a      	lsls	r2, r3, #5
 800e204:	68fb      	ldr	r3, [r7, #12]
 800e206:	4413      	add	r3, r2
 800e208:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e20c:	681b      	ldr	r3, [r3, #0]
 800e20e:	68ba      	ldr	r2, [r7, #8]
 800e210:	0151      	lsls	r1, r2, #5
 800e212:	68fa      	ldr	r2, [r7, #12]
 800e214:	440a      	add	r2, r1
 800e216:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e21a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e21e:	6013      	str	r3, [r2, #0]
 800e220:	e027      	b.n	800e272 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800e222:	68bb      	ldr	r3, [r7, #8]
 800e224:	015a      	lsls	r2, r3, #5
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	4413      	add	r3, r2
 800e22a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	68ba      	ldr	r2, [r7, #8]
 800e232:	0151      	lsls	r1, r2, #5
 800e234:	68fa      	ldr	r2, [r7, #12]
 800e236:	440a      	add	r2, r1
 800e238:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e23c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800e240:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800e242:	683b      	ldr	r3, [r7, #0]
 800e244:	791b      	ldrb	r3, [r3, #4]
 800e246:	2b03      	cmp	r3, #3
 800e248:	d003      	beq.n	800e252 <USB_EPClearStall+0x9e>
 800e24a:	683b      	ldr	r3, [r7, #0]
 800e24c:	791b      	ldrb	r3, [r3, #4]
 800e24e:	2b02      	cmp	r3, #2
 800e250:	d10f      	bne.n	800e272 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800e252:	68bb      	ldr	r3, [r7, #8]
 800e254:	015a      	lsls	r2, r3, #5
 800e256:	68fb      	ldr	r3, [r7, #12]
 800e258:	4413      	add	r3, r2
 800e25a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	68ba      	ldr	r2, [r7, #8]
 800e262:	0151      	lsls	r1, r2, #5
 800e264:	68fa      	ldr	r2, [r7, #12]
 800e266:	440a      	add	r2, r1
 800e268:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e26c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e270:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800e272:	2300      	movs	r3, #0
}
 800e274:	4618      	mov	r0, r3
 800e276:	3714      	adds	r7, #20
 800e278:	46bd      	mov	sp, r7
 800e27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e27e:	4770      	bx	lr

0800e280 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800e280:	b480      	push	{r7}
 800e282:	b085      	sub	sp, #20
 800e284:	af00      	add	r7, sp, #0
 800e286:	6078      	str	r0, [r7, #4]
 800e288:	460b      	mov	r3, r1
 800e28a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e296:	681b      	ldr	r3, [r3, #0]
 800e298:	68fa      	ldr	r2, [r7, #12]
 800e29a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800e29e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800e2a2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800e2a4:	68fb      	ldr	r3, [r7, #12]
 800e2a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e2aa:	681a      	ldr	r2, [r3, #0]
 800e2ac:	78fb      	ldrb	r3, [r7, #3]
 800e2ae:	011b      	lsls	r3, r3, #4
 800e2b0:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800e2b4:	68f9      	ldr	r1, [r7, #12]
 800e2b6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e2ba:	4313      	orrs	r3, r2
 800e2bc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800e2be:	2300      	movs	r3, #0
}
 800e2c0:	4618      	mov	r0, r3
 800e2c2:	3714      	adds	r7, #20
 800e2c4:	46bd      	mov	sp, r7
 800e2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ca:	4770      	bx	lr

0800e2cc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800e2cc:	b480      	push	{r7}
 800e2ce:	b085      	sub	sp, #20
 800e2d0:	af00      	add	r7, sp, #0
 800e2d2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800e2d8:	68fb      	ldr	r3, [r7, #12]
 800e2da:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	68fa      	ldr	r2, [r7, #12]
 800e2e2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800e2e6:	f023 0303 	bic.w	r3, r3, #3
 800e2ea:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800e2ec:	68fb      	ldr	r3, [r7, #12]
 800e2ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e2f2:	685b      	ldr	r3, [r3, #4]
 800e2f4:	68fa      	ldr	r2, [r7, #12]
 800e2f6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800e2fa:	f023 0302 	bic.w	r3, r3, #2
 800e2fe:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e300:	2300      	movs	r3, #0
}
 800e302:	4618      	mov	r0, r3
 800e304:	3714      	adds	r7, #20
 800e306:	46bd      	mov	sp, r7
 800e308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e30c:	4770      	bx	lr

0800e30e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800e30e:	b480      	push	{r7}
 800e310:	b085      	sub	sp, #20
 800e312:	af00      	add	r7, sp, #0
 800e314:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	68fa      	ldr	r2, [r7, #12]
 800e324:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800e328:	f023 0303 	bic.w	r3, r3, #3
 800e32c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e334:	685b      	ldr	r3, [r3, #4]
 800e336:	68fa      	ldr	r2, [r7, #12]
 800e338:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800e33c:	f043 0302 	orr.w	r3, r3, #2
 800e340:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e342:	2300      	movs	r3, #0
}
 800e344:	4618      	mov	r0, r3
 800e346:	3714      	adds	r7, #20
 800e348:	46bd      	mov	sp, r7
 800e34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e34e:	4770      	bx	lr

0800e350 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800e350:	b480      	push	{r7}
 800e352:	b085      	sub	sp, #20
 800e354:	af00      	add	r7, sp, #0
 800e356:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	695b      	ldr	r3, [r3, #20]
 800e35c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	699b      	ldr	r3, [r3, #24]
 800e362:	68fa      	ldr	r2, [r7, #12]
 800e364:	4013      	ands	r3, r2
 800e366:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800e368:	68fb      	ldr	r3, [r7, #12]
}
 800e36a:	4618      	mov	r0, r3
 800e36c:	3714      	adds	r7, #20
 800e36e:	46bd      	mov	sp, r7
 800e370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e374:	4770      	bx	lr

0800e376 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800e376:	b480      	push	{r7}
 800e378:	b085      	sub	sp, #20
 800e37a:	af00      	add	r7, sp, #0
 800e37c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e388:	699b      	ldr	r3, [r3, #24]
 800e38a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e392:	69db      	ldr	r3, [r3, #28]
 800e394:	68ba      	ldr	r2, [r7, #8]
 800e396:	4013      	ands	r3, r2
 800e398:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800e39a:	68bb      	ldr	r3, [r7, #8]
 800e39c:	0c1b      	lsrs	r3, r3, #16
}
 800e39e:	4618      	mov	r0, r3
 800e3a0:	3714      	adds	r7, #20
 800e3a2:	46bd      	mov	sp, r7
 800e3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3a8:	4770      	bx	lr

0800e3aa <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800e3aa:	b480      	push	{r7}
 800e3ac:	b085      	sub	sp, #20
 800e3ae:	af00      	add	r7, sp, #0
 800e3b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800e3b6:	68fb      	ldr	r3, [r7, #12]
 800e3b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e3bc:	699b      	ldr	r3, [r3, #24]
 800e3be:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800e3c0:	68fb      	ldr	r3, [r7, #12]
 800e3c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e3c6:	69db      	ldr	r3, [r3, #28]
 800e3c8:	68ba      	ldr	r2, [r7, #8]
 800e3ca:	4013      	ands	r3, r2
 800e3cc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800e3ce:	68bb      	ldr	r3, [r7, #8]
 800e3d0:	b29b      	uxth	r3, r3
}
 800e3d2:	4618      	mov	r0, r3
 800e3d4:	3714      	adds	r7, #20
 800e3d6:	46bd      	mov	sp, r7
 800e3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3dc:	4770      	bx	lr

0800e3de <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800e3de:	b480      	push	{r7}
 800e3e0:	b085      	sub	sp, #20
 800e3e2:	af00      	add	r7, sp, #0
 800e3e4:	6078      	str	r0, [r7, #4]
 800e3e6:	460b      	mov	r3, r1
 800e3e8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800e3ee:	78fb      	ldrb	r3, [r7, #3]
 800e3f0:	015a      	lsls	r2, r3, #5
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	4413      	add	r3, r2
 800e3f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e3fa:	689b      	ldr	r3, [r3, #8]
 800e3fc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e404:	695b      	ldr	r3, [r3, #20]
 800e406:	68ba      	ldr	r2, [r7, #8]
 800e408:	4013      	ands	r3, r2
 800e40a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800e40c:	68bb      	ldr	r3, [r7, #8]
}
 800e40e:	4618      	mov	r0, r3
 800e410:	3714      	adds	r7, #20
 800e412:	46bd      	mov	sp, r7
 800e414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e418:	4770      	bx	lr

0800e41a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800e41a:	b480      	push	{r7}
 800e41c:	b087      	sub	sp, #28
 800e41e:	af00      	add	r7, sp, #0
 800e420:	6078      	str	r0, [r7, #4]
 800e422:	460b      	mov	r3, r1
 800e424:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800e42a:	697b      	ldr	r3, [r7, #20]
 800e42c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e430:	691b      	ldr	r3, [r3, #16]
 800e432:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800e434:	697b      	ldr	r3, [r7, #20]
 800e436:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e43a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e43c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800e43e:	78fb      	ldrb	r3, [r7, #3]
 800e440:	f003 030f 	and.w	r3, r3, #15
 800e444:	68fa      	ldr	r2, [r7, #12]
 800e446:	fa22 f303 	lsr.w	r3, r2, r3
 800e44a:	01db      	lsls	r3, r3, #7
 800e44c:	b2db      	uxtb	r3, r3
 800e44e:	693a      	ldr	r2, [r7, #16]
 800e450:	4313      	orrs	r3, r2
 800e452:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800e454:	78fb      	ldrb	r3, [r7, #3]
 800e456:	015a      	lsls	r2, r3, #5
 800e458:	697b      	ldr	r3, [r7, #20]
 800e45a:	4413      	add	r3, r2
 800e45c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e460:	689b      	ldr	r3, [r3, #8]
 800e462:	693a      	ldr	r2, [r7, #16]
 800e464:	4013      	ands	r3, r2
 800e466:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800e468:	68bb      	ldr	r3, [r7, #8]
}
 800e46a:	4618      	mov	r0, r3
 800e46c:	371c      	adds	r7, #28
 800e46e:	46bd      	mov	sp, r7
 800e470:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e474:	4770      	bx	lr

0800e476 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800e476:	b480      	push	{r7}
 800e478:	b083      	sub	sp, #12
 800e47a:	af00      	add	r7, sp, #0
 800e47c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	695b      	ldr	r3, [r3, #20]
 800e482:	f003 0301 	and.w	r3, r3, #1
}
 800e486:	4618      	mov	r0, r3
 800e488:	370c      	adds	r7, #12
 800e48a:	46bd      	mov	sp, r7
 800e48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e490:	4770      	bx	lr

0800e492 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800e492:	b480      	push	{r7}
 800e494:	b085      	sub	sp, #20
 800e496:	af00      	add	r7, sp, #0
 800e498:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800e49e:	68fb      	ldr	r3, [r7, #12]
 800e4a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	68fa      	ldr	r2, [r7, #12]
 800e4a8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e4ac:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800e4b0:	f023 0307 	bic.w	r3, r3, #7
 800e4b4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800e4b6:	68fb      	ldr	r3, [r7, #12]
 800e4b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e4bc:	685b      	ldr	r3, [r3, #4]
 800e4be:	68fa      	ldr	r2, [r7, #12]
 800e4c0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800e4c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e4c8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e4ca:	2300      	movs	r3, #0
}
 800e4cc:	4618      	mov	r0, r3
 800e4ce:	3714      	adds	r7, #20
 800e4d0:	46bd      	mov	sp, r7
 800e4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4d6:	4770      	bx	lr

0800e4d8 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 800e4d8:	b480      	push	{r7}
 800e4da:	b085      	sub	sp, #20
 800e4dc:	af00      	add	r7, sp, #0
 800e4de:	6078      	str	r0, [r7, #4]
 800e4e0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	333c      	adds	r3, #60	@ 0x3c
 800e4ea:	3304      	adds	r3, #4
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800e4f0:	68bb      	ldr	r3, [r7, #8]
 800e4f2:	4a1c      	ldr	r2, [pc, #112]	@ (800e564 <USB_EP0_OutStart+0x8c>)
 800e4f4:	4293      	cmp	r3, r2
 800e4f6:	d90a      	bls.n	800e50e <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e504:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e508:	d101      	bne.n	800e50e <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800e50a:	2300      	movs	r3, #0
 800e50c:	e024      	b.n	800e558 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800e50e:	68fb      	ldr	r3, [r7, #12]
 800e510:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e514:	461a      	mov	r2, r3
 800e516:	2300      	movs	r3, #0
 800e518:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e51a:	68fb      	ldr	r3, [r7, #12]
 800e51c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e520:	691b      	ldr	r3, [r3, #16]
 800e522:	68fa      	ldr	r2, [r7, #12]
 800e524:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e528:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800e52c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800e52e:	68fb      	ldr	r3, [r7, #12]
 800e530:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e534:	691b      	ldr	r3, [r3, #16]
 800e536:	68fa      	ldr	r2, [r7, #12]
 800e538:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e53c:	f043 0318 	orr.w	r3, r3, #24
 800e540:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800e542:	68fb      	ldr	r3, [r7, #12]
 800e544:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e548:	691b      	ldr	r3, [r3, #16]
 800e54a:	68fa      	ldr	r2, [r7, #12]
 800e54c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e550:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800e554:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800e556:	2300      	movs	r3, #0
}
 800e558:	4618      	mov	r0, r3
 800e55a:	3714      	adds	r7, #20
 800e55c:	46bd      	mov	sp, r7
 800e55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e562:	4770      	bx	lr
 800e564:	4f54300a 	.word	0x4f54300a

0800e568 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800e568:	b480      	push	{r7}
 800e56a:	b085      	sub	sp, #20
 800e56c:	af00      	add	r7, sp, #0
 800e56e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e570:	2300      	movs	r3, #0
 800e572:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	3301      	adds	r3, #1
 800e578:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	4a13      	ldr	r2, [pc, #76]	@ (800e5cc <USB_CoreReset+0x64>)
 800e57e:	4293      	cmp	r3, r2
 800e580:	d901      	bls.n	800e586 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800e582:	2303      	movs	r3, #3
 800e584:	e01b      	b.n	800e5be <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	691b      	ldr	r3, [r3, #16]
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	daf2      	bge.n	800e574 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800e58e:	2300      	movs	r3, #0
 800e590:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	691b      	ldr	r3, [r3, #16]
 800e596:	f043 0201 	orr.w	r2, r3, #1
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e59e:	68fb      	ldr	r3, [r7, #12]
 800e5a0:	3301      	adds	r3, #1
 800e5a2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e5a4:	68fb      	ldr	r3, [r7, #12]
 800e5a6:	4a09      	ldr	r2, [pc, #36]	@ (800e5cc <USB_CoreReset+0x64>)
 800e5a8:	4293      	cmp	r3, r2
 800e5aa:	d901      	bls.n	800e5b0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800e5ac:	2303      	movs	r3, #3
 800e5ae:	e006      	b.n	800e5be <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	691b      	ldr	r3, [r3, #16]
 800e5b4:	f003 0301 	and.w	r3, r3, #1
 800e5b8:	2b01      	cmp	r3, #1
 800e5ba:	d0f0      	beq.n	800e59e <USB_CoreReset+0x36>

  return HAL_OK;
 800e5bc:	2300      	movs	r3, #0
}
 800e5be:	4618      	mov	r0, r3
 800e5c0:	3714      	adds	r7, #20
 800e5c2:	46bd      	mov	sp, r7
 800e5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5c8:	4770      	bx	lr
 800e5ca:	bf00      	nop
 800e5cc:	00030d40 	.word	0x00030d40

0800e5d0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e5d0:	b580      	push	{r7, lr}
 800e5d2:	b084      	sub	sp, #16
 800e5d4:	af00      	add	r7, sp, #0
 800e5d6:	6078      	str	r0, [r7, #4]
 800e5d8:	460b      	mov	r3, r1
 800e5da:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800e5dc:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800e5e0:	f005 fc44 	bl	8013e6c <USBD_static_malloc>
 800e5e4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800e5e6:	68fb      	ldr	r3, [r7, #12]
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d109      	bne.n	800e600 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	32b0      	adds	r2, #176	@ 0xb0
 800e5f6:	2100      	movs	r1, #0
 800e5f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800e5fc:	2302      	movs	r3, #2
 800e5fe:	e0d4      	b.n	800e7aa <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800e600:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800e604:	2100      	movs	r1, #0
 800e606:	68f8      	ldr	r0, [r7, #12]
 800e608:	f006 fb19 	bl	8014c3e <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	32b0      	adds	r2, #176	@ 0xb0
 800e616:	68f9      	ldr	r1, [r7, #12]
 800e618:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	32b0      	adds	r2, #176	@ 0xb0
 800e626:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	7c1b      	ldrb	r3, [r3, #16]
 800e634:	2b00      	cmp	r3, #0
 800e636:	d138      	bne.n	800e6aa <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800e638:	4b5e      	ldr	r3, [pc, #376]	@ (800e7b4 <USBD_CDC_Init+0x1e4>)
 800e63a:	7819      	ldrb	r1, [r3, #0]
 800e63c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e640:	2202      	movs	r2, #2
 800e642:	6878      	ldr	r0, [r7, #4]
 800e644:	f005 f9fe 	bl	8013a44 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800e648:	4b5a      	ldr	r3, [pc, #360]	@ (800e7b4 <USBD_CDC_Init+0x1e4>)
 800e64a:	781b      	ldrb	r3, [r3, #0]
 800e64c:	f003 020f 	and.w	r2, r3, #15
 800e650:	6879      	ldr	r1, [r7, #4]
 800e652:	4613      	mov	r3, r2
 800e654:	009b      	lsls	r3, r3, #2
 800e656:	4413      	add	r3, r2
 800e658:	009b      	lsls	r3, r3, #2
 800e65a:	440b      	add	r3, r1
 800e65c:	3324      	adds	r3, #36	@ 0x24
 800e65e:	2201      	movs	r2, #1
 800e660:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800e662:	4b55      	ldr	r3, [pc, #340]	@ (800e7b8 <USBD_CDC_Init+0x1e8>)
 800e664:	7819      	ldrb	r1, [r3, #0]
 800e666:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e66a:	2202      	movs	r2, #2
 800e66c:	6878      	ldr	r0, [r7, #4]
 800e66e:	f005 f9e9 	bl	8013a44 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800e672:	4b51      	ldr	r3, [pc, #324]	@ (800e7b8 <USBD_CDC_Init+0x1e8>)
 800e674:	781b      	ldrb	r3, [r3, #0]
 800e676:	f003 020f 	and.w	r2, r3, #15
 800e67a:	6879      	ldr	r1, [r7, #4]
 800e67c:	4613      	mov	r3, r2
 800e67e:	009b      	lsls	r3, r3, #2
 800e680:	4413      	add	r3, r2
 800e682:	009b      	lsls	r3, r3, #2
 800e684:	440b      	add	r3, r1
 800e686:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800e68a:	2201      	movs	r2, #1
 800e68c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800e68e:	4b4b      	ldr	r3, [pc, #300]	@ (800e7bc <USBD_CDC_Init+0x1ec>)
 800e690:	781b      	ldrb	r3, [r3, #0]
 800e692:	f003 020f 	and.w	r2, r3, #15
 800e696:	6879      	ldr	r1, [r7, #4]
 800e698:	4613      	mov	r3, r2
 800e69a:	009b      	lsls	r3, r3, #2
 800e69c:	4413      	add	r3, r2
 800e69e:	009b      	lsls	r3, r3, #2
 800e6a0:	440b      	add	r3, r1
 800e6a2:	3326      	adds	r3, #38	@ 0x26
 800e6a4:	2210      	movs	r2, #16
 800e6a6:	801a      	strh	r2, [r3, #0]
 800e6a8:	e035      	b.n	800e716 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800e6aa:	4b42      	ldr	r3, [pc, #264]	@ (800e7b4 <USBD_CDC_Init+0x1e4>)
 800e6ac:	7819      	ldrb	r1, [r3, #0]
 800e6ae:	2340      	movs	r3, #64	@ 0x40
 800e6b0:	2202      	movs	r2, #2
 800e6b2:	6878      	ldr	r0, [r7, #4]
 800e6b4:	f005 f9c6 	bl	8013a44 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800e6b8:	4b3e      	ldr	r3, [pc, #248]	@ (800e7b4 <USBD_CDC_Init+0x1e4>)
 800e6ba:	781b      	ldrb	r3, [r3, #0]
 800e6bc:	f003 020f 	and.w	r2, r3, #15
 800e6c0:	6879      	ldr	r1, [r7, #4]
 800e6c2:	4613      	mov	r3, r2
 800e6c4:	009b      	lsls	r3, r3, #2
 800e6c6:	4413      	add	r3, r2
 800e6c8:	009b      	lsls	r3, r3, #2
 800e6ca:	440b      	add	r3, r1
 800e6cc:	3324      	adds	r3, #36	@ 0x24
 800e6ce:	2201      	movs	r2, #1
 800e6d0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800e6d2:	4b39      	ldr	r3, [pc, #228]	@ (800e7b8 <USBD_CDC_Init+0x1e8>)
 800e6d4:	7819      	ldrb	r1, [r3, #0]
 800e6d6:	2340      	movs	r3, #64	@ 0x40
 800e6d8:	2202      	movs	r2, #2
 800e6da:	6878      	ldr	r0, [r7, #4]
 800e6dc:	f005 f9b2 	bl	8013a44 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800e6e0:	4b35      	ldr	r3, [pc, #212]	@ (800e7b8 <USBD_CDC_Init+0x1e8>)
 800e6e2:	781b      	ldrb	r3, [r3, #0]
 800e6e4:	f003 020f 	and.w	r2, r3, #15
 800e6e8:	6879      	ldr	r1, [r7, #4]
 800e6ea:	4613      	mov	r3, r2
 800e6ec:	009b      	lsls	r3, r3, #2
 800e6ee:	4413      	add	r3, r2
 800e6f0:	009b      	lsls	r3, r3, #2
 800e6f2:	440b      	add	r3, r1
 800e6f4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800e6f8:	2201      	movs	r2, #1
 800e6fa:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800e6fc:	4b2f      	ldr	r3, [pc, #188]	@ (800e7bc <USBD_CDC_Init+0x1ec>)
 800e6fe:	781b      	ldrb	r3, [r3, #0]
 800e700:	f003 020f 	and.w	r2, r3, #15
 800e704:	6879      	ldr	r1, [r7, #4]
 800e706:	4613      	mov	r3, r2
 800e708:	009b      	lsls	r3, r3, #2
 800e70a:	4413      	add	r3, r2
 800e70c:	009b      	lsls	r3, r3, #2
 800e70e:	440b      	add	r3, r1
 800e710:	3326      	adds	r3, #38	@ 0x26
 800e712:	2210      	movs	r2, #16
 800e714:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800e716:	4b29      	ldr	r3, [pc, #164]	@ (800e7bc <USBD_CDC_Init+0x1ec>)
 800e718:	7819      	ldrb	r1, [r3, #0]
 800e71a:	2308      	movs	r3, #8
 800e71c:	2203      	movs	r2, #3
 800e71e:	6878      	ldr	r0, [r7, #4]
 800e720:	f005 f990 	bl	8013a44 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800e724:	4b25      	ldr	r3, [pc, #148]	@ (800e7bc <USBD_CDC_Init+0x1ec>)
 800e726:	781b      	ldrb	r3, [r3, #0]
 800e728:	f003 020f 	and.w	r2, r3, #15
 800e72c:	6879      	ldr	r1, [r7, #4]
 800e72e:	4613      	mov	r3, r2
 800e730:	009b      	lsls	r3, r3, #2
 800e732:	4413      	add	r3, r2
 800e734:	009b      	lsls	r3, r3, #2
 800e736:	440b      	add	r3, r1
 800e738:	3324      	adds	r3, #36	@ 0x24
 800e73a:	2201      	movs	r2, #1
 800e73c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	2200      	movs	r2, #0
 800e742:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e74c:	687a      	ldr	r2, [r7, #4]
 800e74e:	33b0      	adds	r3, #176	@ 0xb0
 800e750:	009b      	lsls	r3, r3, #2
 800e752:	4413      	add	r3, r2
 800e754:	685b      	ldr	r3, [r3, #4]
 800e756:	681b      	ldr	r3, [r3, #0]
 800e758:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800e75a:	68fb      	ldr	r3, [r7, #12]
 800e75c:	2200      	movs	r2, #0
 800e75e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800e762:	68fb      	ldr	r3, [r7, #12]
 800e764:	2200      	movs	r2, #0
 800e766:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800e76a:	68fb      	ldr	r3, [r7, #12]
 800e76c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800e770:	2b00      	cmp	r3, #0
 800e772:	d101      	bne.n	800e778 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800e774:	2302      	movs	r3, #2
 800e776:	e018      	b.n	800e7aa <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	7c1b      	ldrb	r3, [r3, #16]
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d10a      	bne.n	800e796 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e780:	4b0d      	ldr	r3, [pc, #52]	@ (800e7b8 <USBD_CDC_Init+0x1e8>)
 800e782:	7819      	ldrb	r1, [r3, #0]
 800e784:	68fb      	ldr	r3, [r7, #12]
 800e786:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800e78a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e78e:	6878      	ldr	r0, [r7, #4]
 800e790:	f005 fad2 	bl	8013d38 <USBD_LL_PrepareReceive>
 800e794:	e008      	b.n	800e7a8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e796:	4b08      	ldr	r3, [pc, #32]	@ (800e7b8 <USBD_CDC_Init+0x1e8>)
 800e798:	7819      	ldrb	r1, [r3, #0]
 800e79a:	68fb      	ldr	r3, [r7, #12]
 800e79c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800e7a0:	2340      	movs	r3, #64	@ 0x40
 800e7a2:	6878      	ldr	r0, [r7, #4]
 800e7a4:	f005 fac8 	bl	8013d38 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e7a8:	2300      	movs	r3, #0
}
 800e7aa:	4618      	mov	r0, r3
 800e7ac:	3710      	adds	r7, #16
 800e7ae:	46bd      	mov	sp, r7
 800e7b0:	bd80      	pop	{r7, pc}
 800e7b2:	bf00      	nop
 800e7b4:	2000032b 	.word	0x2000032b
 800e7b8:	2000032c 	.word	0x2000032c
 800e7bc:	2000032d 	.word	0x2000032d

0800e7c0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e7c0:	b580      	push	{r7, lr}
 800e7c2:	b082      	sub	sp, #8
 800e7c4:	af00      	add	r7, sp, #0
 800e7c6:	6078      	str	r0, [r7, #4]
 800e7c8:	460b      	mov	r3, r1
 800e7ca:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800e7cc:	4b3a      	ldr	r3, [pc, #232]	@ (800e8b8 <USBD_CDC_DeInit+0xf8>)
 800e7ce:	781b      	ldrb	r3, [r3, #0]
 800e7d0:	4619      	mov	r1, r3
 800e7d2:	6878      	ldr	r0, [r7, #4]
 800e7d4:	f005 f974 	bl	8013ac0 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800e7d8:	4b37      	ldr	r3, [pc, #220]	@ (800e8b8 <USBD_CDC_DeInit+0xf8>)
 800e7da:	781b      	ldrb	r3, [r3, #0]
 800e7dc:	f003 020f 	and.w	r2, r3, #15
 800e7e0:	6879      	ldr	r1, [r7, #4]
 800e7e2:	4613      	mov	r3, r2
 800e7e4:	009b      	lsls	r3, r3, #2
 800e7e6:	4413      	add	r3, r2
 800e7e8:	009b      	lsls	r3, r3, #2
 800e7ea:	440b      	add	r3, r1
 800e7ec:	3324      	adds	r3, #36	@ 0x24
 800e7ee:	2200      	movs	r2, #0
 800e7f0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800e7f2:	4b32      	ldr	r3, [pc, #200]	@ (800e8bc <USBD_CDC_DeInit+0xfc>)
 800e7f4:	781b      	ldrb	r3, [r3, #0]
 800e7f6:	4619      	mov	r1, r3
 800e7f8:	6878      	ldr	r0, [r7, #4]
 800e7fa:	f005 f961 	bl	8013ac0 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800e7fe:	4b2f      	ldr	r3, [pc, #188]	@ (800e8bc <USBD_CDC_DeInit+0xfc>)
 800e800:	781b      	ldrb	r3, [r3, #0]
 800e802:	f003 020f 	and.w	r2, r3, #15
 800e806:	6879      	ldr	r1, [r7, #4]
 800e808:	4613      	mov	r3, r2
 800e80a:	009b      	lsls	r3, r3, #2
 800e80c:	4413      	add	r3, r2
 800e80e:	009b      	lsls	r3, r3, #2
 800e810:	440b      	add	r3, r1
 800e812:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800e816:	2200      	movs	r2, #0
 800e818:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800e81a:	4b29      	ldr	r3, [pc, #164]	@ (800e8c0 <USBD_CDC_DeInit+0x100>)
 800e81c:	781b      	ldrb	r3, [r3, #0]
 800e81e:	4619      	mov	r1, r3
 800e820:	6878      	ldr	r0, [r7, #4]
 800e822:	f005 f94d 	bl	8013ac0 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800e826:	4b26      	ldr	r3, [pc, #152]	@ (800e8c0 <USBD_CDC_DeInit+0x100>)
 800e828:	781b      	ldrb	r3, [r3, #0]
 800e82a:	f003 020f 	and.w	r2, r3, #15
 800e82e:	6879      	ldr	r1, [r7, #4]
 800e830:	4613      	mov	r3, r2
 800e832:	009b      	lsls	r3, r3, #2
 800e834:	4413      	add	r3, r2
 800e836:	009b      	lsls	r3, r3, #2
 800e838:	440b      	add	r3, r1
 800e83a:	3324      	adds	r3, #36	@ 0x24
 800e83c:	2200      	movs	r2, #0
 800e83e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800e840:	4b1f      	ldr	r3, [pc, #124]	@ (800e8c0 <USBD_CDC_DeInit+0x100>)
 800e842:	781b      	ldrb	r3, [r3, #0]
 800e844:	f003 020f 	and.w	r2, r3, #15
 800e848:	6879      	ldr	r1, [r7, #4]
 800e84a:	4613      	mov	r3, r2
 800e84c:	009b      	lsls	r3, r3, #2
 800e84e:	4413      	add	r3, r2
 800e850:	009b      	lsls	r3, r3, #2
 800e852:	440b      	add	r3, r1
 800e854:	3326      	adds	r3, #38	@ 0x26
 800e856:	2200      	movs	r2, #0
 800e858:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	32b0      	adds	r2, #176	@ 0xb0
 800e864:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d01f      	beq.n	800e8ac <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e872:	687a      	ldr	r2, [r7, #4]
 800e874:	33b0      	adds	r3, #176	@ 0xb0
 800e876:	009b      	lsls	r3, r3, #2
 800e878:	4413      	add	r3, r2
 800e87a:	685b      	ldr	r3, [r3, #4]
 800e87c:	685b      	ldr	r3, [r3, #4]
 800e87e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	32b0      	adds	r2, #176	@ 0xb0
 800e88a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e88e:	4618      	mov	r0, r3
 800e890:	f005 fafa 	bl	8013e88 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	32b0      	adds	r2, #176	@ 0xb0
 800e89e:	2100      	movs	r1, #0
 800e8a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	2200      	movs	r2, #0
 800e8a8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800e8ac:	2300      	movs	r3, #0
}
 800e8ae:	4618      	mov	r0, r3
 800e8b0:	3708      	adds	r7, #8
 800e8b2:	46bd      	mov	sp, r7
 800e8b4:	bd80      	pop	{r7, pc}
 800e8b6:	bf00      	nop
 800e8b8:	2000032b 	.word	0x2000032b
 800e8bc:	2000032c 	.word	0x2000032c
 800e8c0:	2000032d 	.word	0x2000032d

0800e8c4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800e8c4:	b580      	push	{r7, lr}
 800e8c6:	b086      	sub	sp, #24
 800e8c8:	af00      	add	r7, sp, #0
 800e8ca:	6078      	str	r0, [r7, #4]
 800e8cc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	32b0      	adds	r2, #176	@ 0xb0
 800e8d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e8dc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800e8de:	2300      	movs	r3, #0
 800e8e0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800e8e2:	2300      	movs	r3, #0
 800e8e4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800e8e6:	2300      	movs	r3, #0
 800e8e8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800e8ea:	693b      	ldr	r3, [r7, #16]
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d101      	bne.n	800e8f4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800e8f0:	2303      	movs	r3, #3
 800e8f2:	e0bf      	b.n	800ea74 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e8f4:	683b      	ldr	r3, [r7, #0]
 800e8f6:	781b      	ldrb	r3, [r3, #0]
 800e8f8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d050      	beq.n	800e9a2 <USBD_CDC_Setup+0xde>
 800e900:	2b20      	cmp	r3, #32
 800e902:	f040 80af 	bne.w	800ea64 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800e906:	683b      	ldr	r3, [r7, #0]
 800e908:	88db      	ldrh	r3, [r3, #6]
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d03a      	beq.n	800e984 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800e90e:	683b      	ldr	r3, [r7, #0]
 800e910:	781b      	ldrb	r3, [r3, #0]
 800e912:	b25b      	sxtb	r3, r3
 800e914:	2b00      	cmp	r3, #0
 800e916:	da1b      	bge.n	800e950 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e91e:	687a      	ldr	r2, [r7, #4]
 800e920:	33b0      	adds	r3, #176	@ 0xb0
 800e922:	009b      	lsls	r3, r3, #2
 800e924:	4413      	add	r3, r2
 800e926:	685b      	ldr	r3, [r3, #4]
 800e928:	689b      	ldr	r3, [r3, #8]
 800e92a:	683a      	ldr	r2, [r7, #0]
 800e92c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800e92e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800e930:	683a      	ldr	r2, [r7, #0]
 800e932:	88d2      	ldrh	r2, [r2, #6]
 800e934:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800e936:	683b      	ldr	r3, [r7, #0]
 800e938:	88db      	ldrh	r3, [r3, #6]
 800e93a:	2b07      	cmp	r3, #7
 800e93c:	bf28      	it	cs
 800e93e:	2307      	movcs	r3, #7
 800e940:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800e942:	693b      	ldr	r3, [r7, #16]
 800e944:	89fa      	ldrh	r2, [r7, #14]
 800e946:	4619      	mov	r1, r3
 800e948:	6878      	ldr	r0, [r7, #4]
 800e94a:	f001 fdb1 	bl	80104b0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800e94e:	e090      	b.n	800ea72 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800e950:	683b      	ldr	r3, [r7, #0]
 800e952:	785a      	ldrb	r2, [r3, #1]
 800e954:	693b      	ldr	r3, [r7, #16]
 800e956:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800e95a:	683b      	ldr	r3, [r7, #0]
 800e95c:	88db      	ldrh	r3, [r3, #6]
 800e95e:	2b3f      	cmp	r3, #63	@ 0x3f
 800e960:	d803      	bhi.n	800e96a <USBD_CDC_Setup+0xa6>
 800e962:	683b      	ldr	r3, [r7, #0]
 800e964:	88db      	ldrh	r3, [r3, #6]
 800e966:	b2da      	uxtb	r2, r3
 800e968:	e000      	b.n	800e96c <USBD_CDC_Setup+0xa8>
 800e96a:	2240      	movs	r2, #64	@ 0x40
 800e96c:	693b      	ldr	r3, [r7, #16]
 800e96e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800e972:	6939      	ldr	r1, [r7, #16]
 800e974:	693b      	ldr	r3, [r7, #16]
 800e976:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800e97a:	461a      	mov	r2, r3
 800e97c:	6878      	ldr	r0, [r7, #4]
 800e97e:	f001 fdc3 	bl	8010508 <USBD_CtlPrepareRx>
      break;
 800e982:	e076      	b.n	800ea72 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e98a:	687a      	ldr	r2, [r7, #4]
 800e98c:	33b0      	adds	r3, #176	@ 0xb0
 800e98e:	009b      	lsls	r3, r3, #2
 800e990:	4413      	add	r3, r2
 800e992:	685b      	ldr	r3, [r3, #4]
 800e994:	689b      	ldr	r3, [r3, #8]
 800e996:	683a      	ldr	r2, [r7, #0]
 800e998:	7850      	ldrb	r0, [r2, #1]
 800e99a:	2200      	movs	r2, #0
 800e99c:	6839      	ldr	r1, [r7, #0]
 800e99e:	4798      	blx	r3
      break;
 800e9a0:	e067      	b.n	800ea72 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e9a2:	683b      	ldr	r3, [r7, #0]
 800e9a4:	785b      	ldrb	r3, [r3, #1]
 800e9a6:	2b0b      	cmp	r3, #11
 800e9a8:	d851      	bhi.n	800ea4e <USBD_CDC_Setup+0x18a>
 800e9aa:	a201      	add	r2, pc, #4	@ (adr r2, 800e9b0 <USBD_CDC_Setup+0xec>)
 800e9ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9b0:	0800e9e1 	.word	0x0800e9e1
 800e9b4:	0800ea5d 	.word	0x0800ea5d
 800e9b8:	0800ea4f 	.word	0x0800ea4f
 800e9bc:	0800ea4f 	.word	0x0800ea4f
 800e9c0:	0800ea4f 	.word	0x0800ea4f
 800e9c4:	0800ea4f 	.word	0x0800ea4f
 800e9c8:	0800ea4f 	.word	0x0800ea4f
 800e9cc:	0800ea4f 	.word	0x0800ea4f
 800e9d0:	0800ea4f 	.word	0x0800ea4f
 800e9d4:	0800ea4f 	.word	0x0800ea4f
 800e9d8:	0800ea0b 	.word	0x0800ea0b
 800e9dc:	0800ea35 	.word	0x0800ea35
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e9e6:	b2db      	uxtb	r3, r3
 800e9e8:	2b03      	cmp	r3, #3
 800e9ea:	d107      	bne.n	800e9fc <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800e9ec:	f107 030a 	add.w	r3, r7, #10
 800e9f0:	2202      	movs	r2, #2
 800e9f2:	4619      	mov	r1, r3
 800e9f4:	6878      	ldr	r0, [r7, #4]
 800e9f6:	f001 fd5b 	bl	80104b0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e9fa:	e032      	b.n	800ea62 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800e9fc:	6839      	ldr	r1, [r7, #0]
 800e9fe:	6878      	ldr	r0, [r7, #4]
 800ea00:	f001 fce5 	bl	80103ce <USBD_CtlError>
            ret = USBD_FAIL;
 800ea04:	2303      	movs	r3, #3
 800ea06:	75fb      	strb	r3, [r7, #23]
          break;
 800ea08:	e02b      	b.n	800ea62 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ea10:	b2db      	uxtb	r3, r3
 800ea12:	2b03      	cmp	r3, #3
 800ea14:	d107      	bne.n	800ea26 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800ea16:	f107 030d 	add.w	r3, r7, #13
 800ea1a:	2201      	movs	r2, #1
 800ea1c:	4619      	mov	r1, r3
 800ea1e:	6878      	ldr	r0, [r7, #4]
 800ea20:	f001 fd46 	bl	80104b0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ea24:	e01d      	b.n	800ea62 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800ea26:	6839      	ldr	r1, [r7, #0]
 800ea28:	6878      	ldr	r0, [r7, #4]
 800ea2a:	f001 fcd0 	bl	80103ce <USBD_CtlError>
            ret = USBD_FAIL;
 800ea2e:	2303      	movs	r3, #3
 800ea30:	75fb      	strb	r3, [r7, #23]
          break;
 800ea32:	e016      	b.n	800ea62 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ea3a:	b2db      	uxtb	r3, r3
 800ea3c:	2b03      	cmp	r3, #3
 800ea3e:	d00f      	beq.n	800ea60 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800ea40:	6839      	ldr	r1, [r7, #0]
 800ea42:	6878      	ldr	r0, [r7, #4]
 800ea44:	f001 fcc3 	bl	80103ce <USBD_CtlError>
            ret = USBD_FAIL;
 800ea48:	2303      	movs	r3, #3
 800ea4a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800ea4c:	e008      	b.n	800ea60 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800ea4e:	6839      	ldr	r1, [r7, #0]
 800ea50:	6878      	ldr	r0, [r7, #4]
 800ea52:	f001 fcbc 	bl	80103ce <USBD_CtlError>
          ret = USBD_FAIL;
 800ea56:	2303      	movs	r3, #3
 800ea58:	75fb      	strb	r3, [r7, #23]
          break;
 800ea5a:	e002      	b.n	800ea62 <USBD_CDC_Setup+0x19e>
          break;
 800ea5c:	bf00      	nop
 800ea5e:	e008      	b.n	800ea72 <USBD_CDC_Setup+0x1ae>
          break;
 800ea60:	bf00      	nop
      }
      break;
 800ea62:	e006      	b.n	800ea72 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800ea64:	6839      	ldr	r1, [r7, #0]
 800ea66:	6878      	ldr	r0, [r7, #4]
 800ea68:	f001 fcb1 	bl	80103ce <USBD_CtlError>
      ret = USBD_FAIL;
 800ea6c:	2303      	movs	r3, #3
 800ea6e:	75fb      	strb	r3, [r7, #23]
      break;
 800ea70:	bf00      	nop
  }

  return (uint8_t)ret;
 800ea72:	7dfb      	ldrb	r3, [r7, #23]
}
 800ea74:	4618      	mov	r0, r3
 800ea76:	3718      	adds	r7, #24
 800ea78:	46bd      	mov	sp, r7
 800ea7a:	bd80      	pop	{r7, pc}

0800ea7c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ea7c:	b580      	push	{r7, lr}
 800ea7e:	b084      	sub	sp, #16
 800ea80:	af00      	add	r7, sp, #0
 800ea82:	6078      	str	r0, [r7, #4]
 800ea84:	460b      	mov	r3, r1
 800ea86:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ea8e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	32b0      	adds	r2, #176	@ 0xb0
 800ea9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d101      	bne.n	800eaa6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800eaa2:	2303      	movs	r3, #3
 800eaa4:	e065      	b.n	800eb72 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	32b0      	adds	r2, #176	@ 0xb0
 800eab0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eab4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800eab6:	78fb      	ldrb	r3, [r7, #3]
 800eab8:	f003 020f 	and.w	r2, r3, #15
 800eabc:	6879      	ldr	r1, [r7, #4]
 800eabe:	4613      	mov	r3, r2
 800eac0:	009b      	lsls	r3, r3, #2
 800eac2:	4413      	add	r3, r2
 800eac4:	009b      	lsls	r3, r3, #2
 800eac6:	440b      	add	r3, r1
 800eac8:	3318      	adds	r3, #24
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d02f      	beq.n	800eb30 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800ead0:	78fb      	ldrb	r3, [r7, #3]
 800ead2:	f003 020f 	and.w	r2, r3, #15
 800ead6:	6879      	ldr	r1, [r7, #4]
 800ead8:	4613      	mov	r3, r2
 800eada:	009b      	lsls	r3, r3, #2
 800eadc:	4413      	add	r3, r2
 800eade:	009b      	lsls	r3, r3, #2
 800eae0:	440b      	add	r3, r1
 800eae2:	3318      	adds	r3, #24
 800eae4:	681a      	ldr	r2, [r3, #0]
 800eae6:	78fb      	ldrb	r3, [r7, #3]
 800eae8:	f003 010f 	and.w	r1, r3, #15
 800eaec:	68f8      	ldr	r0, [r7, #12]
 800eaee:	460b      	mov	r3, r1
 800eaf0:	00db      	lsls	r3, r3, #3
 800eaf2:	440b      	add	r3, r1
 800eaf4:	009b      	lsls	r3, r3, #2
 800eaf6:	4403      	add	r3, r0
 800eaf8:	3344      	adds	r3, #68	@ 0x44
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	fbb2 f1f3 	udiv	r1, r2, r3
 800eb00:	fb01 f303 	mul.w	r3, r1, r3
 800eb04:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d112      	bne.n	800eb30 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800eb0a:	78fb      	ldrb	r3, [r7, #3]
 800eb0c:	f003 020f 	and.w	r2, r3, #15
 800eb10:	6879      	ldr	r1, [r7, #4]
 800eb12:	4613      	mov	r3, r2
 800eb14:	009b      	lsls	r3, r3, #2
 800eb16:	4413      	add	r3, r2
 800eb18:	009b      	lsls	r3, r3, #2
 800eb1a:	440b      	add	r3, r1
 800eb1c:	3318      	adds	r3, #24
 800eb1e:	2200      	movs	r2, #0
 800eb20:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800eb22:	78f9      	ldrb	r1, [r7, #3]
 800eb24:	2300      	movs	r3, #0
 800eb26:	2200      	movs	r2, #0
 800eb28:	6878      	ldr	r0, [r7, #4]
 800eb2a:	f005 f8cd 	bl	8013cc8 <USBD_LL_Transmit>
 800eb2e:	e01f      	b.n	800eb70 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800eb30:	68bb      	ldr	r3, [r7, #8]
 800eb32:	2200      	movs	r2, #0
 800eb34:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800eb3e:	687a      	ldr	r2, [r7, #4]
 800eb40:	33b0      	adds	r3, #176	@ 0xb0
 800eb42:	009b      	lsls	r3, r3, #2
 800eb44:	4413      	add	r3, r2
 800eb46:	685b      	ldr	r3, [r3, #4]
 800eb48:	691b      	ldr	r3, [r3, #16]
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d010      	beq.n	800eb70 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800eb54:	687a      	ldr	r2, [r7, #4]
 800eb56:	33b0      	adds	r3, #176	@ 0xb0
 800eb58:	009b      	lsls	r3, r3, #2
 800eb5a:	4413      	add	r3, r2
 800eb5c:	685b      	ldr	r3, [r3, #4]
 800eb5e:	691b      	ldr	r3, [r3, #16]
 800eb60:	68ba      	ldr	r2, [r7, #8]
 800eb62:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800eb66:	68ba      	ldr	r2, [r7, #8]
 800eb68:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800eb6c:	78fa      	ldrb	r2, [r7, #3]
 800eb6e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800eb70:	2300      	movs	r3, #0
}
 800eb72:	4618      	mov	r0, r3
 800eb74:	3710      	adds	r7, #16
 800eb76:	46bd      	mov	sp, r7
 800eb78:	bd80      	pop	{r7, pc}

0800eb7a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800eb7a:	b580      	push	{r7, lr}
 800eb7c:	b084      	sub	sp, #16
 800eb7e:	af00      	add	r7, sp, #0
 800eb80:	6078      	str	r0, [r7, #4]
 800eb82:	460b      	mov	r3, r1
 800eb84:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	32b0      	adds	r2, #176	@ 0xb0
 800eb90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eb94:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	32b0      	adds	r2, #176	@ 0xb0
 800eba0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d101      	bne.n	800ebac <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800eba8:	2303      	movs	r3, #3
 800ebaa:	e01a      	b.n	800ebe2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800ebac:	78fb      	ldrb	r3, [r7, #3]
 800ebae:	4619      	mov	r1, r3
 800ebb0:	6878      	ldr	r0, [r7, #4]
 800ebb2:	f005 f8f9 	bl	8013da8 <USBD_LL_GetRxDataSize>
 800ebb6:	4602      	mov	r2, r0
 800ebb8:	68fb      	ldr	r3, [r7, #12]
 800ebba:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ebc4:	687a      	ldr	r2, [r7, #4]
 800ebc6:	33b0      	adds	r3, #176	@ 0xb0
 800ebc8:	009b      	lsls	r3, r3, #2
 800ebca:	4413      	add	r3, r2
 800ebcc:	685b      	ldr	r3, [r3, #4]
 800ebce:	68db      	ldr	r3, [r3, #12]
 800ebd0:	68fa      	ldr	r2, [r7, #12]
 800ebd2:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800ebd6:	68fa      	ldr	r2, [r7, #12]
 800ebd8:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800ebdc:	4611      	mov	r1, r2
 800ebde:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800ebe0:	2300      	movs	r3, #0
}
 800ebe2:	4618      	mov	r0, r3
 800ebe4:	3710      	adds	r7, #16
 800ebe6:	46bd      	mov	sp, r7
 800ebe8:	bd80      	pop	{r7, pc}

0800ebea <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800ebea:	b580      	push	{r7, lr}
 800ebec:	b084      	sub	sp, #16
 800ebee:	af00      	add	r7, sp, #0
 800ebf0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	32b0      	adds	r2, #176	@ 0xb0
 800ebfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec00:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	d101      	bne.n	800ec0c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ec08:	2303      	movs	r3, #3
 800ec0a:	e024      	b.n	800ec56 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ec12:	687a      	ldr	r2, [r7, #4]
 800ec14:	33b0      	adds	r3, #176	@ 0xb0
 800ec16:	009b      	lsls	r3, r3, #2
 800ec18:	4413      	add	r3, r2
 800ec1a:	685b      	ldr	r3, [r3, #4]
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d019      	beq.n	800ec54 <USBD_CDC_EP0_RxReady+0x6a>
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800ec26:	2bff      	cmp	r3, #255	@ 0xff
 800ec28:	d014      	beq.n	800ec54 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ec30:	687a      	ldr	r2, [r7, #4]
 800ec32:	33b0      	adds	r3, #176	@ 0xb0
 800ec34:	009b      	lsls	r3, r3, #2
 800ec36:	4413      	add	r3, r2
 800ec38:	685b      	ldr	r3, [r3, #4]
 800ec3a:	689b      	ldr	r3, [r3, #8]
 800ec3c:	68fa      	ldr	r2, [r7, #12]
 800ec3e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800ec42:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800ec44:	68fa      	ldr	r2, [r7, #12]
 800ec46:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800ec4a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800ec4c:	68fb      	ldr	r3, [r7, #12]
 800ec4e:	22ff      	movs	r2, #255	@ 0xff
 800ec50:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800ec54:	2300      	movs	r3, #0
}
 800ec56:	4618      	mov	r0, r3
 800ec58:	3710      	adds	r7, #16
 800ec5a:	46bd      	mov	sp, r7
 800ec5c:	bd80      	pop	{r7, pc}
	...

0800ec60 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800ec60:	b580      	push	{r7, lr}
 800ec62:	b086      	sub	sp, #24
 800ec64:	af00      	add	r7, sp, #0
 800ec66:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ec68:	2182      	movs	r1, #130	@ 0x82
 800ec6a:	4818      	ldr	r0, [pc, #96]	@ (800eccc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ec6c:	f000 fd4f 	bl	800f70e <USBD_GetEpDesc>
 800ec70:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ec72:	2101      	movs	r1, #1
 800ec74:	4815      	ldr	r0, [pc, #84]	@ (800eccc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ec76:	f000 fd4a 	bl	800f70e <USBD_GetEpDesc>
 800ec7a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ec7c:	2181      	movs	r1, #129	@ 0x81
 800ec7e:	4813      	ldr	r0, [pc, #76]	@ (800eccc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ec80:	f000 fd45 	bl	800f70e <USBD_GetEpDesc>
 800ec84:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ec86:	697b      	ldr	r3, [r7, #20]
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d002      	beq.n	800ec92 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800ec8c:	697b      	ldr	r3, [r7, #20]
 800ec8e:	2210      	movs	r2, #16
 800ec90:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ec92:	693b      	ldr	r3, [r7, #16]
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	d006      	beq.n	800eca6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ec98:	693b      	ldr	r3, [r7, #16]
 800ec9a:	2200      	movs	r2, #0
 800ec9c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800eca0:	711a      	strb	r2, [r3, #4]
 800eca2:	2200      	movs	r2, #0
 800eca4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800eca6:	68fb      	ldr	r3, [r7, #12]
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	d006      	beq.n	800ecba <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ecac:	68fb      	ldr	r3, [r7, #12]
 800ecae:	2200      	movs	r2, #0
 800ecb0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ecb4:	711a      	strb	r2, [r3, #4]
 800ecb6:	2200      	movs	r2, #0
 800ecb8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	2243      	movs	r2, #67	@ 0x43
 800ecbe:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ecc0:	4b02      	ldr	r3, [pc, #8]	@ (800eccc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800ecc2:	4618      	mov	r0, r3
 800ecc4:	3718      	adds	r7, #24
 800ecc6:	46bd      	mov	sp, r7
 800ecc8:	bd80      	pop	{r7, pc}
 800ecca:	bf00      	nop
 800eccc:	200002e8 	.word	0x200002e8

0800ecd0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800ecd0:	b580      	push	{r7, lr}
 800ecd2:	b086      	sub	sp, #24
 800ecd4:	af00      	add	r7, sp, #0
 800ecd6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ecd8:	2182      	movs	r1, #130	@ 0x82
 800ecda:	4818      	ldr	r0, [pc, #96]	@ (800ed3c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ecdc:	f000 fd17 	bl	800f70e <USBD_GetEpDesc>
 800ece0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ece2:	2101      	movs	r1, #1
 800ece4:	4815      	ldr	r0, [pc, #84]	@ (800ed3c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ece6:	f000 fd12 	bl	800f70e <USBD_GetEpDesc>
 800ecea:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ecec:	2181      	movs	r1, #129	@ 0x81
 800ecee:	4813      	ldr	r0, [pc, #76]	@ (800ed3c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ecf0:	f000 fd0d 	bl	800f70e <USBD_GetEpDesc>
 800ecf4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ecf6:	697b      	ldr	r3, [r7, #20]
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d002      	beq.n	800ed02 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800ecfc:	697b      	ldr	r3, [r7, #20]
 800ecfe:	2210      	movs	r2, #16
 800ed00:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ed02:	693b      	ldr	r3, [r7, #16]
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d006      	beq.n	800ed16 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800ed08:	693b      	ldr	r3, [r7, #16]
 800ed0a:	2200      	movs	r2, #0
 800ed0c:	711a      	strb	r2, [r3, #4]
 800ed0e:	2200      	movs	r2, #0
 800ed10:	f042 0202 	orr.w	r2, r2, #2
 800ed14:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d006      	beq.n	800ed2a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800ed1c:	68fb      	ldr	r3, [r7, #12]
 800ed1e:	2200      	movs	r2, #0
 800ed20:	711a      	strb	r2, [r3, #4]
 800ed22:	2200      	movs	r2, #0
 800ed24:	f042 0202 	orr.w	r2, r2, #2
 800ed28:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	2243      	movs	r2, #67	@ 0x43
 800ed2e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ed30:	4b02      	ldr	r3, [pc, #8]	@ (800ed3c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800ed32:	4618      	mov	r0, r3
 800ed34:	3718      	adds	r7, #24
 800ed36:	46bd      	mov	sp, r7
 800ed38:	bd80      	pop	{r7, pc}
 800ed3a:	bf00      	nop
 800ed3c:	200002e8 	.word	0x200002e8

0800ed40 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800ed40:	b580      	push	{r7, lr}
 800ed42:	b086      	sub	sp, #24
 800ed44:	af00      	add	r7, sp, #0
 800ed46:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ed48:	2182      	movs	r1, #130	@ 0x82
 800ed4a:	4818      	ldr	r0, [pc, #96]	@ (800edac <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ed4c:	f000 fcdf 	bl	800f70e <USBD_GetEpDesc>
 800ed50:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ed52:	2101      	movs	r1, #1
 800ed54:	4815      	ldr	r0, [pc, #84]	@ (800edac <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ed56:	f000 fcda 	bl	800f70e <USBD_GetEpDesc>
 800ed5a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ed5c:	2181      	movs	r1, #129	@ 0x81
 800ed5e:	4813      	ldr	r0, [pc, #76]	@ (800edac <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ed60:	f000 fcd5 	bl	800f70e <USBD_GetEpDesc>
 800ed64:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ed66:	697b      	ldr	r3, [r7, #20]
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d002      	beq.n	800ed72 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800ed6c:	697b      	ldr	r3, [r7, #20]
 800ed6e:	2210      	movs	r2, #16
 800ed70:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ed72:	693b      	ldr	r3, [r7, #16]
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	d006      	beq.n	800ed86 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ed78:	693b      	ldr	r3, [r7, #16]
 800ed7a:	2200      	movs	r2, #0
 800ed7c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ed80:	711a      	strb	r2, [r3, #4]
 800ed82:	2200      	movs	r2, #0
 800ed84:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ed86:	68fb      	ldr	r3, [r7, #12]
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d006      	beq.n	800ed9a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ed8c:	68fb      	ldr	r3, [r7, #12]
 800ed8e:	2200      	movs	r2, #0
 800ed90:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ed94:	711a      	strb	r2, [r3, #4]
 800ed96:	2200      	movs	r2, #0
 800ed98:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	2243      	movs	r2, #67	@ 0x43
 800ed9e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800eda0:	4b02      	ldr	r3, [pc, #8]	@ (800edac <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800eda2:	4618      	mov	r0, r3
 800eda4:	3718      	adds	r7, #24
 800eda6:	46bd      	mov	sp, r7
 800eda8:	bd80      	pop	{r7, pc}
 800edaa:	bf00      	nop
 800edac:	200002e8 	.word	0x200002e8

0800edb0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800edb0:	b480      	push	{r7}
 800edb2:	b083      	sub	sp, #12
 800edb4:	af00      	add	r7, sp, #0
 800edb6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	220a      	movs	r2, #10
 800edbc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800edbe:	4b03      	ldr	r3, [pc, #12]	@ (800edcc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800edc0:	4618      	mov	r0, r3
 800edc2:	370c      	adds	r7, #12
 800edc4:	46bd      	mov	sp, r7
 800edc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edca:	4770      	bx	lr
 800edcc:	200002a4 	.word	0x200002a4

0800edd0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800edd0:	b480      	push	{r7}
 800edd2:	b083      	sub	sp, #12
 800edd4:	af00      	add	r7, sp, #0
 800edd6:	6078      	str	r0, [r7, #4]
 800edd8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800edda:	683b      	ldr	r3, [r7, #0]
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d101      	bne.n	800ede4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800ede0:	2303      	movs	r3, #3
 800ede2:	e009      	b.n	800edf8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800edea:	687a      	ldr	r2, [r7, #4]
 800edec:	33b0      	adds	r3, #176	@ 0xb0
 800edee:	009b      	lsls	r3, r3, #2
 800edf0:	4413      	add	r3, r2
 800edf2:	683a      	ldr	r2, [r7, #0]
 800edf4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800edf6:	2300      	movs	r3, #0
}
 800edf8:	4618      	mov	r0, r3
 800edfa:	370c      	adds	r7, #12
 800edfc:	46bd      	mov	sp, r7
 800edfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee02:	4770      	bx	lr

0800ee04 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800ee04:	b480      	push	{r7}
 800ee06:	b087      	sub	sp, #28
 800ee08:	af00      	add	r7, sp, #0
 800ee0a:	60f8      	str	r0, [r7, #12]
 800ee0c:	60b9      	str	r1, [r7, #8]
 800ee0e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ee10:	68fb      	ldr	r3, [r7, #12]
 800ee12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ee16:	68fb      	ldr	r3, [r7, #12]
 800ee18:	32b0      	adds	r2, #176	@ 0xb0
 800ee1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ee1e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800ee20:	697b      	ldr	r3, [r7, #20]
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	d101      	bne.n	800ee2a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800ee26:	2303      	movs	r3, #3
 800ee28:	e008      	b.n	800ee3c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800ee2a:	697b      	ldr	r3, [r7, #20]
 800ee2c:	68ba      	ldr	r2, [r7, #8]
 800ee2e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800ee32:	697b      	ldr	r3, [r7, #20]
 800ee34:	687a      	ldr	r2, [r7, #4]
 800ee36:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800ee3a:	2300      	movs	r3, #0
}
 800ee3c:	4618      	mov	r0, r3
 800ee3e:	371c      	adds	r7, #28
 800ee40:	46bd      	mov	sp, r7
 800ee42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee46:	4770      	bx	lr

0800ee48 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800ee48:	b480      	push	{r7}
 800ee4a:	b085      	sub	sp, #20
 800ee4c:	af00      	add	r7, sp, #0
 800ee4e:	6078      	str	r0, [r7, #4]
 800ee50:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	32b0      	adds	r2, #176	@ 0xb0
 800ee5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ee60:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ee62:	68fb      	ldr	r3, [r7, #12]
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d101      	bne.n	800ee6c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800ee68:	2303      	movs	r3, #3
 800ee6a:	e004      	b.n	800ee76 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	683a      	ldr	r2, [r7, #0]
 800ee70:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800ee74:	2300      	movs	r3, #0
}
 800ee76:	4618      	mov	r0, r3
 800ee78:	3714      	adds	r7, #20
 800ee7a:	46bd      	mov	sp, r7
 800ee7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee80:	4770      	bx	lr
	...

0800ee84 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800ee84:	b580      	push	{r7, lr}
 800ee86:	b084      	sub	sp, #16
 800ee88:	af00      	add	r7, sp, #0
 800ee8a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	32b0      	adds	r2, #176	@ 0xb0
 800ee96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ee9a:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800ee9c:	2301      	movs	r3, #1
 800ee9e:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800eea0:	68bb      	ldr	r3, [r7, #8]
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d101      	bne.n	800eeaa <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800eea6:	2303      	movs	r3, #3
 800eea8:	e025      	b.n	800eef6 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800eeaa:	68bb      	ldr	r3, [r7, #8]
 800eeac:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	d11f      	bne.n	800eef4 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800eeb4:	68bb      	ldr	r3, [r7, #8]
 800eeb6:	2201      	movs	r2, #1
 800eeb8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800eebc:	4b10      	ldr	r3, [pc, #64]	@ (800ef00 <USBD_CDC_TransmitPacket+0x7c>)
 800eebe:	781b      	ldrb	r3, [r3, #0]
 800eec0:	f003 020f 	and.w	r2, r3, #15
 800eec4:	68bb      	ldr	r3, [r7, #8]
 800eec6:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800eeca:	6878      	ldr	r0, [r7, #4]
 800eecc:	4613      	mov	r3, r2
 800eece:	009b      	lsls	r3, r3, #2
 800eed0:	4413      	add	r3, r2
 800eed2:	009b      	lsls	r3, r3, #2
 800eed4:	4403      	add	r3, r0
 800eed6:	3318      	adds	r3, #24
 800eed8:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800eeda:	4b09      	ldr	r3, [pc, #36]	@ (800ef00 <USBD_CDC_TransmitPacket+0x7c>)
 800eedc:	7819      	ldrb	r1, [r3, #0]
 800eede:	68bb      	ldr	r3, [r7, #8]
 800eee0:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800eee4:	68bb      	ldr	r3, [r7, #8]
 800eee6:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800eeea:	6878      	ldr	r0, [r7, #4]
 800eeec:	f004 feec 	bl	8013cc8 <USBD_LL_Transmit>

    ret = USBD_OK;
 800eef0:	2300      	movs	r3, #0
 800eef2:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800eef4:	7bfb      	ldrb	r3, [r7, #15]
}
 800eef6:	4618      	mov	r0, r3
 800eef8:	3710      	adds	r7, #16
 800eefa:	46bd      	mov	sp, r7
 800eefc:	bd80      	pop	{r7, pc}
 800eefe:	bf00      	nop
 800ef00:	2000032b 	.word	0x2000032b

0800ef04 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800ef04:	b580      	push	{r7, lr}
 800ef06:	b084      	sub	sp, #16
 800ef08:	af00      	add	r7, sp, #0
 800ef0a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	32b0      	adds	r2, #176	@ 0xb0
 800ef16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ef1a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	32b0      	adds	r2, #176	@ 0xb0
 800ef26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	d101      	bne.n	800ef32 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800ef2e:	2303      	movs	r3, #3
 800ef30:	e018      	b.n	800ef64 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	7c1b      	ldrb	r3, [r3, #16]
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	d10a      	bne.n	800ef50 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ef3a:	4b0c      	ldr	r3, [pc, #48]	@ (800ef6c <USBD_CDC_ReceivePacket+0x68>)
 800ef3c:	7819      	ldrb	r1, [r3, #0]
 800ef3e:	68fb      	ldr	r3, [r7, #12]
 800ef40:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ef44:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ef48:	6878      	ldr	r0, [r7, #4]
 800ef4a:	f004 fef5 	bl	8013d38 <USBD_LL_PrepareReceive>
 800ef4e:	e008      	b.n	800ef62 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ef50:	4b06      	ldr	r3, [pc, #24]	@ (800ef6c <USBD_CDC_ReceivePacket+0x68>)
 800ef52:	7819      	ldrb	r1, [r3, #0]
 800ef54:	68fb      	ldr	r3, [r7, #12]
 800ef56:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ef5a:	2340      	movs	r3, #64	@ 0x40
 800ef5c:	6878      	ldr	r0, [r7, #4]
 800ef5e:	f004 feeb 	bl	8013d38 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ef62:	2300      	movs	r3, #0
}
 800ef64:	4618      	mov	r0, r3
 800ef66:	3710      	adds	r7, #16
 800ef68:	46bd      	mov	sp, r7
 800ef6a:	bd80      	pop	{r7, pc}
 800ef6c:	2000032c 	.word	0x2000032c

0800ef70 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800ef70:	b580      	push	{r7, lr}
 800ef72:	b086      	sub	sp, #24
 800ef74:	af00      	add	r7, sp, #0
 800ef76:	60f8      	str	r0, [r7, #12]
 800ef78:	60b9      	str	r1, [r7, #8]
 800ef7a:	4613      	mov	r3, r2
 800ef7c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ef7e:	68fb      	ldr	r3, [r7, #12]
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d101      	bne.n	800ef88 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ef84:	2303      	movs	r3, #3
 800ef86:	e01f      	b.n	800efc8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800ef88:	68fb      	ldr	r3, [r7, #12]
 800ef8a:	2200      	movs	r2, #0
 800ef8c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800ef90:	68fb      	ldr	r3, [r7, #12]
 800ef92:	2200      	movs	r2, #0
 800ef94:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800ef98:	68fb      	ldr	r3, [r7, #12]
 800ef9a:	2200      	movs	r2, #0
 800ef9c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800efa0:	68bb      	ldr	r3, [r7, #8]
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	d003      	beq.n	800efae <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800efa6:	68fb      	ldr	r3, [r7, #12]
 800efa8:	68ba      	ldr	r2, [r7, #8]
 800efaa:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800efae:	68fb      	ldr	r3, [r7, #12]
 800efb0:	2201      	movs	r2, #1
 800efb2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800efb6:	68fb      	ldr	r3, [r7, #12]
 800efb8:	79fa      	ldrb	r2, [r7, #7]
 800efba:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800efbc:	68f8      	ldr	r0, [r7, #12]
 800efbe:	f004 fcc3 	bl	8013948 <USBD_LL_Init>
 800efc2:	4603      	mov	r3, r0
 800efc4:	75fb      	strb	r3, [r7, #23]

  return ret;
 800efc6:	7dfb      	ldrb	r3, [r7, #23]
}
 800efc8:	4618      	mov	r0, r3
 800efca:	3718      	adds	r7, #24
 800efcc:	46bd      	mov	sp, r7
 800efce:	bd80      	pop	{r7, pc}

0800efd0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800efd0:	b580      	push	{r7, lr}
 800efd2:	b084      	sub	sp, #16
 800efd4:	af00      	add	r7, sp, #0
 800efd6:	6078      	str	r0, [r7, #4]
 800efd8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800efda:	2300      	movs	r3, #0
 800efdc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800efde:	683b      	ldr	r3, [r7, #0]
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	d101      	bne.n	800efe8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800efe4:	2303      	movs	r3, #3
 800efe6:	e025      	b.n	800f034 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	683a      	ldr	r2, [r7, #0]
 800efec:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	32ae      	adds	r2, #174	@ 0xae
 800effa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800effe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f000:	2b00      	cmp	r3, #0
 800f002:	d00f      	beq.n	800f024 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	32ae      	adds	r2, #174	@ 0xae
 800f00e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f012:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f014:	f107 020e 	add.w	r2, r7, #14
 800f018:	4610      	mov	r0, r2
 800f01a:	4798      	blx	r3
 800f01c:	4602      	mov	r2, r0
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800f02a:	1c5a      	adds	r2, r3, #1
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800f032:	2300      	movs	r3, #0
}
 800f034:	4618      	mov	r0, r3
 800f036:	3710      	adds	r7, #16
 800f038:	46bd      	mov	sp, r7
 800f03a:	bd80      	pop	{r7, pc}

0800f03c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800f03c:	b580      	push	{r7, lr}
 800f03e:	b082      	sub	sp, #8
 800f040:	af00      	add	r7, sp, #0
 800f042:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800f044:	6878      	ldr	r0, [r7, #4]
 800f046:	f004 fccb 	bl	80139e0 <USBD_LL_Start>
 800f04a:	4603      	mov	r3, r0
}
 800f04c:	4618      	mov	r0, r3
 800f04e:	3708      	adds	r7, #8
 800f050:	46bd      	mov	sp, r7
 800f052:	bd80      	pop	{r7, pc}

0800f054 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800f054:	b480      	push	{r7}
 800f056:	b083      	sub	sp, #12
 800f058:	af00      	add	r7, sp, #0
 800f05a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800f05c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800f05e:	4618      	mov	r0, r3
 800f060:	370c      	adds	r7, #12
 800f062:	46bd      	mov	sp, r7
 800f064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f068:	4770      	bx	lr

0800f06a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f06a:	b580      	push	{r7, lr}
 800f06c:	b084      	sub	sp, #16
 800f06e:	af00      	add	r7, sp, #0
 800f070:	6078      	str	r0, [r7, #4]
 800f072:	460b      	mov	r3, r1
 800f074:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800f076:	2300      	movs	r3, #0
 800f078:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f080:	2b00      	cmp	r3, #0
 800f082:	d009      	beq.n	800f098 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f08a:	681b      	ldr	r3, [r3, #0]
 800f08c:	78fa      	ldrb	r2, [r7, #3]
 800f08e:	4611      	mov	r1, r2
 800f090:	6878      	ldr	r0, [r7, #4]
 800f092:	4798      	blx	r3
 800f094:	4603      	mov	r3, r0
 800f096:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800f098:	7bfb      	ldrb	r3, [r7, #15]
}
 800f09a:	4618      	mov	r0, r3
 800f09c:	3710      	adds	r7, #16
 800f09e:	46bd      	mov	sp, r7
 800f0a0:	bd80      	pop	{r7, pc}

0800f0a2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f0a2:	b580      	push	{r7, lr}
 800f0a4:	b084      	sub	sp, #16
 800f0a6:	af00      	add	r7, sp, #0
 800f0a8:	6078      	str	r0, [r7, #4]
 800f0aa:	460b      	mov	r3, r1
 800f0ac:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800f0ae:	2300      	movs	r3, #0
 800f0b0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f0b8:	685b      	ldr	r3, [r3, #4]
 800f0ba:	78fa      	ldrb	r2, [r7, #3]
 800f0bc:	4611      	mov	r1, r2
 800f0be:	6878      	ldr	r0, [r7, #4]
 800f0c0:	4798      	blx	r3
 800f0c2:	4603      	mov	r3, r0
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	d001      	beq.n	800f0cc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800f0c8:	2303      	movs	r3, #3
 800f0ca:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800f0cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800f0ce:	4618      	mov	r0, r3
 800f0d0:	3710      	adds	r7, #16
 800f0d2:	46bd      	mov	sp, r7
 800f0d4:	bd80      	pop	{r7, pc}

0800f0d6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800f0d6:	b580      	push	{r7, lr}
 800f0d8:	b084      	sub	sp, #16
 800f0da:	af00      	add	r7, sp, #0
 800f0dc:	6078      	str	r0, [r7, #4]
 800f0de:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800f0e6:	6839      	ldr	r1, [r7, #0]
 800f0e8:	4618      	mov	r0, r3
 800f0ea:	f001 f936 	bl	801035a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	2201      	movs	r2, #1
 800f0f2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800f0fc:	461a      	mov	r2, r3
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800f10a:	f003 031f 	and.w	r3, r3, #31
 800f10e:	2b02      	cmp	r3, #2
 800f110:	d01a      	beq.n	800f148 <USBD_LL_SetupStage+0x72>
 800f112:	2b02      	cmp	r3, #2
 800f114:	d822      	bhi.n	800f15c <USBD_LL_SetupStage+0x86>
 800f116:	2b00      	cmp	r3, #0
 800f118:	d002      	beq.n	800f120 <USBD_LL_SetupStage+0x4a>
 800f11a:	2b01      	cmp	r3, #1
 800f11c:	d00a      	beq.n	800f134 <USBD_LL_SetupStage+0x5e>
 800f11e:	e01d      	b.n	800f15c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800f126:	4619      	mov	r1, r3
 800f128:	6878      	ldr	r0, [r7, #4]
 800f12a:	f000 fb63 	bl	800f7f4 <USBD_StdDevReq>
 800f12e:	4603      	mov	r3, r0
 800f130:	73fb      	strb	r3, [r7, #15]
      break;
 800f132:	e020      	b.n	800f176 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800f13a:	4619      	mov	r1, r3
 800f13c:	6878      	ldr	r0, [r7, #4]
 800f13e:	f000 fbcb 	bl	800f8d8 <USBD_StdItfReq>
 800f142:	4603      	mov	r3, r0
 800f144:	73fb      	strb	r3, [r7, #15]
      break;
 800f146:	e016      	b.n	800f176 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800f14e:	4619      	mov	r1, r3
 800f150:	6878      	ldr	r0, [r7, #4]
 800f152:	f000 fc2d 	bl	800f9b0 <USBD_StdEPReq>
 800f156:	4603      	mov	r3, r0
 800f158:	73fb      	strb	r3, [r7, #15]
      break;
 800f15a:	e00c      	b.n	800f176 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800f162:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800f166:	b2db      	uxtb	r3, r3
 800f168:	4619      	mov	r1, r3
 800f16a:	6878      	ldr	r0, [r7, #4]
 800f16c:	f004 fcde 	bl	8013b2c <USBD_LL_StallEP>
 800f170:	4603      	mov	r3, r0
 800f172:	73fb      	strb	r3, [r7, #15]
      break;
 800f174:	bf00      	nop
  }

  return ret;
 800f176:	7bfb      	ldrb	r3, [r7, #15]
}
 800f178:	4618      	mov	r0, r3
 800f17a:	3710      	adds	r7, #16
 800f17c:	46bd      	mov	sp, r7
 800f17e:	bd80      	pop	{r7, pc}

0800f180 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800f180:	b580      	push	{r7, lr}
 800f182:	b086      	sub	sp, #24
 800f184:	af00      	add	r7, sp, #0
 800f186:	60f8      	str	r0, [r7, #12]
 800f188:	460b      	mov	r3, r1
 800f18a:	607a      	str	r2, [r7, #4]
 800f18c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800f18e:	2300      	movs	r3, #0
 800f190:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800f192:	7afb      	ldrb	r3, [r7, #11]
 800f194:	2b00      	cmp	r3, #0
 800f196:	d16e      	bne.n	800f276 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800f198:	68fb      	ldr	r3, [r7, #12]
 800f19a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800f19e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800f1a0:	68fb      	ldr	r3, [r7, #12]
 800f1a2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800f1a6:	2b03      	cmp	r3, #3
 800f1a8:	f040 8098 	bne.w	800f2dc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800f1ac:	693b      	ldr	r3, [r7, #16]
 800f1ae:	689a      	ldr	r2, [r3, #8]
 800f1b0:	693b      	ldr	r3, [r7, #16]
 800f1b2:	68db      	ldr	r3, [r3, #12]
 800f1b4:	429a      	cmp	r2, r3
 800f1b6:	d913      	bls.n	800f1e0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800f1b8:	693b      	ldr	r3, [r7, #16]
 800f1ba:	689a      	ldr	r2, [r3, #8]
 800f1bc:	693b      	ldr	r3, [r7, #16]
 800f1be:	68db      	ldr	r3, [r3, #12]
 800f1c0:	1ad2      	subs	r2, r2, r3
 800f1c2:	693b      	ldr	r3, [r7, #16]
 800f1c4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800f1c6:	693b      	ldr	r3, [r7, #16]
 800f1c8:	68da      	ldr	r2, [r3, #12]
 800f1ca:	693b      	ldr	r3, [r7, #16]
 800f1cc:	689b      	ldr	r3, [r3, #8]
 800f1ce:	4293      	cmp	r3, r2
 800f1d0:	bf28      	it	cs
 800f1d2:	4613      	movcs	r3, r2
 800f1d4:	461a      	mov	r2, r3
 800f1d6:	6879      	ldr	r1, [r7, #4]
 800f1d8:	68f8      	ldr	r0, [r7, #12]
 800f1da:	f001 f9b2 	bl	8010542 <USBD_CtlContinueRx>
 800f1de:	e07d      	b.n	800f2dc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800f1e0:	68fb      	ldr	r3, [r7, #12]
 800f1e2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800f1e6:	f003 031f 	and.w	r3, r3, #31
 800f1ea:	2b02      	cmp	r3, #2
 800f1ec:	d014      	beq.n	800f218 <USBD_LL_DataOutStage+0x98>
 800f1ee:	2b02      	cmp	r3, #2
 800f1f0:	d81d      	bhi.n	800f22e <USBD_LL_DataOutStage+0xae>
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	d002      	beq.n	800f1fc <USBD_LL_DataOutStage+0x7c>
 800f1f6:	2b01      	cmp	r3, #1
 800f1f8:	d003      	beq.n	800f202 <USBD_LL_DataOutStage+0x82>
 800f1fa:	e018      	b.n	800f22e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800f1fc:	2300      	movs	r3, #0
 800f1fe:	75bb      	strb	r3, [r7, #22]
            break;
 800f200:	e018      	b.n	800f234 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800f202:	68fb      	ldr	r3, [r7, #12]
 800f204:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800f208:	b2db      	uxtb	r3, r3
 800f20a:	4619      	mov	r1, r3
 800f20c:	68f8      	ldr	r0, [r7, #12]
 800f20e:	f000 fa64 	bl	800f6da <USBD_CoreFindIF>
 800f212:	4603      	mov	r3, r0
 800f214:	75bb      	strb	r3, [r7, #22]
            break;
 800f216:	e00d      	b.n	800f234 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800f218:	68fb      	ldr	r3, [r7, #12]
 800f21a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800f21e:	b2db      	uxtb	r3, r3
 800f220:	4619      	mov	r1, r3
 800f222:	68f8      	ldr	r0, [r7, #12]
 800f224:	f000 fa66 	bl	800f6f4 <USBD_CoreFindEP>
 800f228:	4603      	mov	r3, r0
 800f22a:	75bb      	strb	r3, [r7, #22]
            break;
 800f22c:	e002      	b.n	800f234 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800f22e:	2300      	movs	r3, #0
 800f230:	75bb      	strb	r3, [r7, #22]
            break;
 800f232:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800f234:	7dbb      	ldrb	r3, [r7, #22]
 800f236:	2b00      	cmp	r3, #0
 800f238:	d119      	bne.n	800f26e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f23a:	68fb      	ldr	r3, [r7, #12]
 800f23c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f240:	b2db      	uxtb	r3, r3
 800f242:	2b03      	cmp	r3, #3
 800f244:	d113      	bne.n	800f26e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800f246:	7dba      	ldrb	r2, [r7, #22]
 800f248:	68fb      	ldr	r3, [r7, #12]
 800f24a:	32ae      	adds	r2, #174	@ 0xae
 800f24c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f250:	691b      	ldr	r3, [r3, #16]
 800f252:	2b00      	cmp	r3, #0
 800f254:	d00b      	beq.n	800f26e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800f256:	7dba      	ldrb	r2, [r7, #22]
 800f258:	68fb      	ldr	r3, [r7, #12]
 800f25a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800f25e:	7dba      	ldrb	r2, [r7, #22]
 800f260:	68fb      	ldr	r3, [r7, #12]
 800f262:	32ae      	adds	r2, #174	@ 0xae
 800f264:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f268:	691b      	ldr	r3, [r3, #16]
 800f26a:	68f8      	ldr	r0, [r7, #12]
 800f26c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800f26e:	68f8      	ldr	r0, [r7, #12]
 800f270:	f001 f978 	bl	8010564 <USBD_CtlSendStatus>
 800f274:	e032      	b.n	800f2dc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800f276:	7afb      	ldrb	r3, [r7, #11]
 800f278:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f27c:	b2db      	uxtb	r3, r3
 800f27e:	4619      	mov	r1, r3
 800f280:	68f8      	ldr	r0, [r7, #12]
 800f282:	f000 fa37 	bl	800f6f4 <USBD_CoreFindEP>
 800f286:	4603      	mov	r3, r0
 800f288:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f28a:	7dbb      	ldrb	r3, [r7, #22]
 800f28c:	2bff      	cmp	r3, #255	@ 0xff
 800f28e:	d025      	beq.n	800f2dc <USBD_LL_DataOutStage+0x15c>
 800f290:	7dbb      	ldrb	r3, [r7, #22]
 800f292:	2b00      	cmp	r3, #0
 800f294:	d122      	bne.n	800f2dc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f296:	68fb      	ldr	r3, [r7, #12]
 800f298:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f29c:	b2db      	uxtb	r3, r3
 800f29e:	2b03      	cmp	r3, #3
 800f2a0:	d117      	bne.n	800f2d2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800f2a2:	7dba      	ldrb	r2, [r7, #22]
 800f2a4:	68fb      	ldr	r3, [r7, #12]
 800f2a6:	32ae      	adds	r2, #174	@ 0xae
 800f2a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f2ac:	699b      	ldr	r3, [r3, #24]
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	d00f      	beq.n	800f2d2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800f2b2:	7dba      	ldrb	r2, [r7, #22]
 800f2b4:	68fb      	ldr	r3, [r7, #12]
 800f2b6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800f2ba:	7dba      	ldrb	r2, [r7, #22]
 800f2bc:	68fb      	ldr	r3, [r7, #12]
 800f2be:	32ae      	adds	r2, #174	@ 0xae
 800f2c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f2c4:	699b      	ldr	r3, [r3, #24]
 800f2c6:	7afa      	ldrb	r2, [r7, #11]
 800f2c8:	4611      	mov	r1, r2
 800f2ca:	68f8      	ldr	r0, [r7, #12]
 800f2cc:	4798      	blx	r3
 800f2ce:	4603      	mov	r3, r0
 800f2d0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800f2d2:	7dfb      	ldrb	r3, [r7, #23]
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	d001      	beq.n	800f2dc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800f2d8:	7dfb      	ldrb	r3, [r7, #23]
 800f2da:	e000      	b.n	800f2de <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800f2dc:	2300      	movs	r3, #0
}
 800f2de:	4618      	mov	r0, r3
 800f2e0:	3718      	adds	r7, #24
 800f2e2:	46bd      	mov	sp, r7
 800f2e4:	bd80      	pop	{r7, pc}

0800f2e6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800f2e6:	b580      	push	{r7, lr}
 800f2e8:	b086      	sub	sp, #24
 800f2ea:	af00      	add	r7, sp, #0
 800f2ec:	60f8      	str	r0, [r7, #12]
 800f2ee:	460b      	mov	r3, r1
 800f2f0:	607a      	str	r2, [r7, #4]
 800f2f2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800f2f4:	7afb      	ldrb	r3, [r7, #11]
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	d16f      	bne.n	800f3da <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800f2fa:	68fb      	ldr	r3, [r7, #12]
 800f2fc:	3314      	adds	r3, #20
 800f2fe:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800f300:	68fb      	ldr	r3, [r7, #12]
 800f302:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800f306:	2b02      	cmp	r3, #2
 800f308:	d15a      	bne.n	800f3c0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800f30a:	693b      	ldr	r3, [r7, #16]
 800f30c:	689a      	ldr	r2, [r3, #8]
 800f30e:	693b      	ldr	r3, [r7, #16]
 800f310:	68db      	ldr	r3, [r3, #12]
 800f312:	429a      	cmp	r2, r3
 800f314:	d914      	bls.n	800f340 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800f316:	693b      	ldr	r3, [r7, #16]
 800f318:	689a      	ldr	r2, [r3, #8]
 800f31a:	693b      	ldr	r3, [r7, #16]
 800f31c:	68db      	ldr	r3, [r3, #12]
 800f31e:	1ad2      	subs	r2, r2, r3
 800f320:	693b      	ldr	r3, [r7, #16]
 800f322:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800f324:	693b      	ldr	r3, [r7, #16]
 800f326:	689b      	ldr	r3, [r3, #8]
 800f328:	461a      	mov	r2, r3
 800f32a:	6879      	ldr	r1, [r7, #4]
 800f32c:	68f8      	ldr	r0, [r7, #12]
 800f32e:	f001 f8da 	bl	80104e6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f332:	2300      	movs	r3, #0
 800f334:	2200      	movs	r2, #0
 800f336:	2100      	movs	r1, #0
 800f338:	68f8      	ldr	r0, [r7, #12]
 800f33a:	f004 fcfd 	bl	8013d38 <USBD_LL_PrepareReceive>
 800f33e:	e03f      	b.n	800f3c0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800f340:	693b      	ldr	r3, [r7, #16]
 800f342:	68da      	ldr	r2, [r3, #12]
 800f344:	693b      	ldr	r3, [r7, #16]
 800f346:	689b      	ldr	r3, [r3, #8]
 800f348:	429a      	cmp	r2, r3
 800f34a:	d11c      	bne.n	800f386 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800f34c:	693b      	ldr	r3, [r7, #16]
 800f34e:	685a      	ldr	r2, [r3, #4]
 800f350:	693b      	ldr	r3, [r7, #16]
 800f352:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800f354:	429a      	cmp	r2, r3
 800f356:	d316      	bcc.n	800f386 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800f358:	693b      	ldr	r3, [r7, #16]
 800f35a:	685a      	ldr	r2, [r3, #4]
 800f35c:	68fb      	ldr	r3, [r7, #12]
 800f35e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800f362:	429a      	cmp	r2, r3
 800f364:	d20f      	bcs.n	800f386 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800f366:	2200      	movs	r2, #0
 800f368:	2100      	movs	r1, #0
 800f36a:	68f8      	ldr	r0, [r7, #12]
 800f36c:	f001 f8bb 	bl	80104e6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800f370:	68fb      	ldr	r3, [r7, #12]
 800f372:	2200      	movs	r2, #0
 800f374:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f378:	2300      	movs	r3, #0
 800f37a:	2200      	movs	r2, #0
 800f37c:	2100      	movs	r1, #0
 800f37e:	68f8      	ldr	r0, [r7, #12]
 800f380:	f004 fcda 	bl	8013d38 <USBD_LL_PrepareReceive>
 800f384:	e01c      	b.n	800f3c0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f386:	68fb      	ldr	r3, [r7, #12]
 800f388:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f38c:	b2db      	uxtb	r3, r3
 800f38e:	2b03      	cmp	r3, #3
 800f390:	d10f      	bne.n	800f3b2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800f392:	68fb      	ldr	r3, [r7, #12]
 800f394:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f398:	68db      	ldr	r3, [r3, #12]
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	d009      	beq.n	800f3b2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800f39e:	68fb      	ldr	r3, [r7, #12]
 800f3a0:	2200      	movs	r2, #0
 800f3a2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800f3a6:	68fb      	ldr	r3, [r7, #12]
 800f3a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f3ac:	68db      	ldr	r3, [r3, #12]
 800f3ae:	68f8      	ldr	r0, [r7, #12]
 800f3b0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800f3b2:	2180      	movs	r1, #128	@ 0x80
 800f3b4:	68f8      	ldr	r0, [r7, #12]
 800f3b6:	f004 fbb9 	bl	8013b2c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800f3ba:	68f8      	ldr	r0, [r7, #12]
 800f3bc:	f001 f8e5 	bl	801058a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800f3c0:	68fb      	ldr	r3, [r7, #12]
 800f3c2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d03a      	beq.n	800f440 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800f3ca:	68f8      	ldr	r0, [r7, #12]
 800f3cc:	f7ff fe42 	bl	800f054 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800f3d0:	68fb      	ldr	r3, [r7, #12]
 800f3d2:	2200      	movs	r2, #0
 800f3d4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800f3d8:	e032      	b.n	800f440 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800f3da:	7afb      	ldrb	r3, [r7, #11]
 800f3dc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800f3e0:	b2db      	uxtb	r3, r3
 800f3e2:	4619      	mov	r1, r3
 800f3e4:	68f8      	ldr	r0, [r7, #12]
 800f3e6:	f000 f985 	bl	800f6f4 <USBD_CoreFindEP>
 800f3ea:	4603      	mov	r3, r0
 800f3ec:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f3ee:	7dfb      	ldrb	r3, [r7, #23]
 800f3f0:	2bff      	cmp	r3, #255	@ 0xff
 800f3f2:	d025      	beq.n	800f440 <USBD_LL_DataInStage+0x15a>
 800f3f4:	7dfb      	ldrb	r3, [r7, #23]
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	d122      	bne.n	800f440 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f3fa:	68fb      	ldr	r3, [r7, #12]
 800f3fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f400:	b2db      	uxtb	r3, r3
 800f402:	2b03      	cmp	r3, #3
 800f404:	d11c      	bne.n	800f440 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800f406:	7dfa      	ldrb	r2, [r7, #23]
 800f408:	68fb      	ldr	r3, [r7, #12]
 800f40a:	32ae      	adds	r2, #174	@ 0xae
 800f40c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f410:	695b      	ldr	r3, [r3, #20]
 800f412:	2b00      	cmp	r3, #0
 800f414:	d014      	beq.n	800f440 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800f416:	7dfa      	ldrb	r2, [r7, #23]
 800f418:	68fb      	ldr	r3, [r7, #12]
 800f41a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800f41e:	7dfa      	ldrb	r2, [r7, #23]
 800f420:	68fb      	ldr	r3, [r7, #12]
 800f422:	32ae      	adds	r2, #174	@ 0xae
 800f424:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f428:	695b      	ldr	r3, [r3, #20]
 800f42a:	7afa      	ldrb	r2, [r7, #11]
 800f42c:	4611      	mov	r1, r2
 800f42e:	68f8      	ldr	r0, [r7, #12]
 800f430:	4798      	blx	r3
 800f432:	4603      	mov	r3, r0
 800f434:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800f436:	7dbb      	ldrb	r3, [r7, #22]
 800f438:	2b00      	cmp	r3, #0
 800f43a:	d001      	beq.n	800f440 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800f43c:	7dbb      	ldrb	r3, [r7, #22]
 800f43e:	e000      	b.n	800f442 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800f440:	2300      	movs	r3, #0
}
 800f442:	4618      	mov	r0, r3
 800f444:	3718      	adds	r7, #24
 800f446:	46bd      	mov	sp, r7
 800f448:	bd80      	pop	{r7, pc}

0800f44a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800f44a:	b580      	push	{r7, lr}
 800f44c:	b084      	sub	sp, #16
 800f44e:	af00      	add	r7, sp, #0
 800f450:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800f452:	2300      	movs	r3, #0
 800f454:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	2201      	movs	r2, #1
 800f45a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	2200      	movs	r2, #0
 800f462:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	2200      	movs	r2, #0
 800f46a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	2200      	movs	r2, #0
 800f470:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	2200      	movs	r2, #0
 800f478:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f482:	2b00      	cmp	r3, #0
 800f484:	d014      	beq.n	800f4b0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f48c:	685b      	ldr	r3, [r3, #4]
 800f48e:	2b00      	cmp	r3, #0
 800f490:	d00e      	beq.n	800f4b0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f498:	685b      	ldr	r3, [r3, #4]
 800f49a:	687a      	ldr	r2, [r7, #4]
 800f49c:	6852      	ldr	r2, [r2, #4]
 800f49e:	b2d2      	uxtb	r2, r2
 800f4a0:	4611      	mov	r1, r2
 800f4a2:	6878      	ldr	r0, [r7, #4]
 800f4a4:	4798      	blx	r3
 800f4a6:	4603      	mov	r3, r0
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	d001      	beq.n	800f4b0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800f4ac:	2303      	movs	r3, #3
 800f4ae:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f4b0:	2340      	movs	r3, #64	@ 0x40
 800f4b2:	2200      	movs	r2, #0
 800f4b4:	2100      	movs	r1, #0
 800f4b6:	6878      	ldr	r0, [r7, #4]
 800f4b8:	f004 fac4 	bl	8013a44 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	2201      	movs	r2, #1
 800f4c0:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	2240      	movs	r2, #64	@ 0x40
 800f4c8:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f4cc:	2340      	movs	r3, #64	@ 0x40
 800f4ce:	2200      	movs	r2, #0
 800f4d0:	2180      	movs	r1, #128	@ 0x80
 800f4d2:	6878      	ldr	r0, [r7, #4]
 800f4d4:	f004 fab6 	bl	8013a44 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	2201      	movs	r2, #1
 800f4dc:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	2240      	movs	r2, #64	@ 0x40
 800f4e2:	621a      	str	r2, [r3, #32]

  return ret;
 800f4e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f4e6:	4618      	mov	r0, r3
 800f4e8:	3710      	adds	r7, #16
 800f4ea:	46bd      	mov	sp, r7
 800f4ec:	bd80      	pop	{r7, pc}

0800f4ee <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800f4ee:	b480      	push	{r7}
 800f4f0:	b083      	sub	sp, #12
 800f4f2:	af00      	add	r7, sp, #0
 800f4f4:	6078      	str	r0, [r7, #4]
 800f4f6:	460b      	mov	r3, r1
 800f4f8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	78fa      	ldrb	r2, [r7, #3]
 800f4fe:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800f500:	2300      	movs	r3, #0
}
 800f502:	4618      	mov	r0, r3
 800f504:	370c      	adds	r7, #12
 800f506:	46bd      	mov	sp, r7
 800f508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f50c:	4770      	bx	lr

0800f50e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800f50e:	b480      	push	{r7}
 800f510:	b083      	sub	sp, #12
 800f512:	af00      	add	r7, sp, #0
 800f514:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f51c:	b2db      	uxtb	r3, r3
 800f51e:	2b04      	cmp	r3, #4
 800f520:	d006      	beq.n	800f530 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f528:	b2da      	uxtb	r2, r3
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	2204      	movs	r2, #4
 800f534:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800f538:	2300      	movs	r3, #0
}
 800f53a:	4618      	mov	r0, r3
 800f53c:	370c      	adds	r7, #12
 800f53e:	46bd      	mov	sp, r7
 800f540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f544:	4770      	bx	lr

0800f546 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800f546:	b480      	push	{r7}
 800f548:	b083      	sub	sp, #12
 800f54a:	af00      	add	r7, sp, #0
 800f54c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f554:	b2db      	uxtb	r3, r3
 800f556:	2b04      	cmp	r3, #4
 800f558:	d106      	bne.n	800f568 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800f560:	b2da      	uxtb	r2, r3
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800f568:	2300      	movs	r3, #0
}
 800f56a:	4618      	mov	r0, r3
 800f56c:	370c      	adds	r7, #12
 800f56e:	46bd      	mov	sp, r7
 800f570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f574:	4770      	bx	lr

0800f576 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800f576:	b580      	push	{r7, lr}
 800f578:	b082      	sub	sp, #8
 800f57a:	af00      	add	r7, sp, #0
 800f57c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f584:	b2db      	uxtb	r3, r3
 800f586:	2b03      	cmp	r3, #3
 800f588:	d110      	bne.n	800f5ac <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f590:	2b00      	cmp	r3, #0
 800f592:	d00b      	beq.n	800f5ac <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f59a:	69db      	ldr	r3, [r3, #28]
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	d005      	beq.n	800f5ac <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f5a6:	69db      	ldr	r3, [r3, #28]
 800f5a8:	6878      	ldr	r0, [r7, #4]
 800f5aa:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800f5ac:	2300      	movs	r3, #0
}
 800f5ae:	4618      	mov	r0, r3
 800f5b0:	3708      	adds	r7, #8
 800f5b2:	46bd      	mov	sp, r7
 800f5b4:	bd80      	pop	{r7, pc}

0800f5b6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800f5b6:	b580      	push	{r7, lr}
 800f5b8:	b082      	sub	sp, #8
 800f5ba:	af00      	add	r7, sp, #0
 800f5bc:	6078      	str	r0, [r7, #4]
 800f5be:	460b      	mov	r3, r1
 800f5c0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	32ae      	adds	r2, #174	@ 0xae
 800f5cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	d101      	bne.n	800f5d8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800f5d4:	2303      	movs	r3, #3
 800f5d6:	e01c      	b.n	800f612 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f5de:	b2db      	uxtb	r3, r3
 800f5e0:	2b03      	cmp	r3, #3
 800f5e2:	d115      	bne.n	800f610 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	32ae      	adds	r2, #174	@ 0xae
 800f5ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f5f2:	6a1b      	ldr	r3, [r3, #32]
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	d00b      	beq.n	800f610 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	32ae      	adds	r2, #174	@ 0xae
 800f602:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f606:	6a1b      	ldr	r3, [r3, #32]
 800f608:	78fa      	ldrb	r2, [r7, #3]
 800f60a:	4611      	mov	r1, r2
 800f60c:	6878      	ldr	r0, [r7, #4]
 800f60e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800f610:	2300      	movs	r3, #0
}
 800f612:	4618      	mov	r0, r3
 800f614:	3708      	adds	r7, #8
 800f616:	46bd      	mov	sp, r7
 800f618:	bd80      	pop	{r7, pc}

0800f61a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800f61a:	b580      	push	{r7, lr}
 800f61c:	b082      	sub	sp, #8
 800f61e:	af00      	add	r7, sp, #0
 800f620:	6078      	str	r0, [r7, #4]
 800f622:	460b      	mov	r3, r1
 800f624:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	32ae      	adds	r2, #174	@ 0xae
 800f630:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f634:	2b00      	cmp	r3, #0
 800f636:	d101      	bne.n	800f63c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800f638:	2303      	movs	r3, #3
 800f63a:	e01c      	b.n	800f676 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f642:	b2db      	uxtb	r3, r3
 800f644:	2b03      	cmp	r3, #3
 800f646:	d115      	bne.n	800f674 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	32ae      	adds	r2, #174	@ 0xae
 800f652:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f656:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d00b      	beq.n	800f674 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	32ae      	adds	r2, #174	@ 0xae
 800f666:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f66a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f66c:	78fa      	ldrb	r2, [r7, #3]
 800f66e:	4611      	mov	r1, r2
 800f670:	6878      	ldr	r0, [r7, #4]
 800f672:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800f674:	2300      	movs	r3, #0
}
 800f676:	4618      	mov	r0, r3
 800f678:	3708      	adds	r7, #8
 800f67a:	46bd      	mov	sp, r7
 800f67c:	bd80      	pop	{r7, pc}

0800f67e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800f67e:	b480      	push	{r7}
 800f680:	b083      	sub	sp, #12
 800f682:	af00      	add	r7, sp, #0
 800f684:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800f686:	2300      	movs	r3, #0
}
 800f688:	4618      	mov	r0, r3
 800f68a:	370c      	adds	r7, #12
 800f68c:	46bd      	mov	sp, r7
 800f68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f692:	4770      	bx	lr

0800f694 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800f694:	b580      	push	{r7, lr}
 800f696:	b084      	sub	sp, #16
 800f698:	af00      	add	r7, sp, #0
 800f69a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800f69c:	2300      	movs	r3, #0
 800f69e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	2201      	movs	r2, #1
 800f6a4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f6ae:	2b00      	cmp	r3, #0
 800f6b0:	d00e      	beq.n	800f6d0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f6b8:	685b      	ldr	r3, [r3, #4]
 800f6ba:	687a      	ldr	r2, [r7, #4]
 800f6bc:	6852      	ldr	r2, [r2, #4]
 800f6be:	b2d2      	uxtb	r2, r2
 800f6c0:	4611      	mov	r1, r2
 800f6c2:	6878      	ldr	r0, [r7, #4]
 800f6c4:	4798      	blx	r3
 800f6c6:	4603      	mov	r3, r0
 800f6c8:	2b00      	cmp	r3, #0
 800f6ca:	d001      	beq.n	800f6d0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800f6cc:	2303      	movs	r3, #3
 800f6ce:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800f6d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800f6d2:	4618      	mov	r0, r3
 800f6d4:	3710      	adds	r7, #16
 800f6d6:	46bd      	mov	sp, r7
 800f6d8:	bd80      	pop	{r7, pc}

0800f6da <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800f6da:	b480      	push	{r7}
 800f6dc:	b083      	sub	sp, #12
 800f6de:	af00      	add	r7, sp, #0
 800f6e0:	6078      	str	r0, [r7, #4]
 800f6e2:	460b      	mov	r3, r1
 800f6e4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800f6e6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800f6e8:	4618      	mov	r0, r3
 800f6ea:	370c      	adds	r7, #12
 800f6ec:	46bd      	mov	sp, r7
 800f6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6f2:	4770      	bx	lr

0800f6f4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800f6f4:	b480      	push	{r7}
 800f6f6:	b083      	sub	sp, #12
 800f6f8:	af00      	add	r7, sp, #0
 800f6fa:	6078      	str	r0, [r7, #4]
 800f6fc:	460b      	mov	r3, r1
 800f6fe:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800f700:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800f702:	4618      	mov	r0, r3
 800f704:	370c      	adds	r7, #12
 800f706:	46bd      	mov	sp, r7
 800f708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f70c:	4770      	bx	lr

0800f70e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800f70e:	b580      	push	{r7, lr}
 800f710:	b086      	sub	sp, #24
 800f712:	af00      	add	r7, sp, #0
 800f714:	6078      	str	r0, [r7, #4]
 800f716:	460b      	mov	r3, r1
 800f718:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800f722:	2300      	movs	r3, #0
 800f724:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800f726:	68fb      	ldr	r3, [r7, #12]
 800f728:	885b      	ldrh	r3, [r3, #2]
 800f72a:	b29b      	uxth	r3, r3
 800f72c:	68fa      	ldr	r2, [r7, #12]
 800f72e:	7812      	ldrb	r2, [r2, #0]
 800f730:	4293      	cmp	r3, r2
 800f732:	d91f      	bls.n	800f774 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800f734:	68fb      	ldr	r3, [r7, #12]
 800f736:	781b      	ldrb	r3, [r3, #0]
 800f738:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800f73a:	e013      	b.n	800f764 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800f73c:	f107 030a 	add.w	r3, r7, #10
 800f740:	4619      	mov	r1, r3
 800f742:	6978      	ldr	r0, [r7, #20]
 800f744:	f000 f81b 	bl	800f77e <USBD_GetNextDesc>
 800f748:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800f74a:	697b      	ldr	r3, [r7, #20]
 800f74c:	785b      	ldrb	r3, [r3, #1]
 800f74e:	2b05      	cmp	r3, #5
 800f750:	d108      	bne.n	800f764 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800f752:	697b      	ldr	r3, [r7, #20]
 800f754:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800f756:	693b      	ldr	r3, [r7, #16]
 800f758:	789b      	ldrb	r3, [r3, #2]
 800f75a:	78fa      	ldrb	r2, [r7, #3]
 800f75c:	429a      	cmp	r2, r3
 800f75e:	d008      	beq.n	800f772 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800f760:	2300      	movs	r3, #0
 800f762:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800f764:	68fb      	ldr	r3, [r7, #12]
 800f766:	885b      	ldrh	r3, [r3, #2]
 800f768:	b29a      	uxth	r2, r3
 800f76a:	897b      	ldrh	r3, [r7, #10]
 800f76c:	429a      	cmp	r2, r3
 800f76e:	d8e5      	bhi.n	800f73c <USBD_GetEpDesc+0x2e>
 800f770:	e000      	b.n	800f774 <USBD_GetEpDesc+0x66>
          break;
 800f772:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800f774:	693b      	ldr	r3, [r7, #16]
}
 800f776:	4618      	mov	r0, r3
 800f778:	3718      	adds	r7, #24
 800f77a:	46bd      	mov	sp, r7
 800f77c:	bd80      	pop	{r7, pc}

0800f77e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800f77e:	b480      	push	{r7}
 800f780:	b085      	sub	sp, #20
 800f782:	af00      	add	r7, sp, #0
 800f784:	6078      	str	r0, [r7, #4]
 800f786:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800f78c:	683b      	ldr	r3, [r7, #0]
 800f78e:	881b      	ldrh	r3, [r3, #0]
 800f790:	68fa      	ldr	r2, [r7, #12]
 800f792:	7812      	ldrb	r2, [r2, #0]
 800f794:	4413      	add	r3, r2
 800f796:	b29a      	uxth	r2, r3
 800f798:	683b      	ldr	r3, [r7, #0]
 800f79a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800f79c:	68fb      	ldr	r3, [r7, #12]
 800f79e:	781b      	ldrb	r3, [r3, #0]
 800f7a0:	461a      	mov	r2, r3
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	4413      	add	r3, r2
 800f7a6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800f7a8:	68fb      	ldr	r3, [r7, #12]
}
 800f7aa:	4618      	mov	r0, r3
 800f7ac:	3714      	adds	r7, #20
 800f7ae:	46bd      	mov	sp, r7
 800f7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7b4:	4770      	bx	lr

0800f7b6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800f7b6:	b480      	push	{r7}
 800f7b8:	b087      	sub	sp, #28
 800f7ba:	af00      	add	r7, sp, #0
 800f7bc:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800f7c2:	697b      	ldr	r3, [r7, #20]
 800f7c4:	781b      	ldrb	r3, [r3, #0]
 800f7c6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800f7c8:	697b      	ldr	r3, [r7, #20]
 800f7ca:	3301      	adds	r3, #1
 800f7cc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800f7ce:	697b      	ldr	r3, [r7, #20]
 800f7d0:	781b      	ldrb	r3, [r3, #0]
 800f7d2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800f7d4:	8a3b      	ldrh	r3, [r7, #16]
 800f7d6:	021b      	lsls	r3, r3, #8
 800f7d8:	b21a      	sxth	r2, r3
 800f7da:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f7de:	4313      	orrs	r3, r2
 800f7e0:	b21b      	sxth	r3, r3
 800f7e2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800f7e4:	89fb      	ldrh	r3, [r7, #14]
}
 800f7e6:	4618      	mov	r0, r3
 800f7e8:	371c      	adds	r7, #28
 800f7ea:	46bd      	mov	sp, r7
 800f7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7f0:	4770      	bx	lr
	...

0800f7f4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f7f4:	b580      	push	{r7, lr}
 800f7f6:	b084      	sub	sp, #16
 800f7f8:	af00      	add	r7, sp, #0
 800f7fa:	6078      	str	r0, [r7, #4]
 800f7fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f7fe:	2300      	movs	r3, #0
 800f800:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f802:	683b      	ldr	r3, [r7, #0]
 800f804:	781b      	ldrb	r3, [r3, #0]
 800f806:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f80a:	2b40      	cmp	r3, #64	@ 0x40
 800f80c:	d005      	beq.n	800f81a <USBD_StdDevReq+0x26>
 800f80e:	2b40      	cmp	r3, #64	@ 0x40
 800f810:	d857      	bhi.n	800f8c2 <USBD_StdDevReq+0xce>
 800f812:	2b00      	cmp	r3, #0
 800f814:	d00f      	beq.n	800f836 <USBD_StdDevReq+0x42>
 800f816:	2b20      	cmp	r3, #32
 800f818:	d153      	bne.n	800f8c2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	32ae      	adds	r2, #174	@ 0xae
 800f824:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f828:	689b      	ldr	r3, [r3, #8]
 800f82a:	6839      	ldr	r1, [r7, #0]
 800f82c:	6878      	ldr	r0, [r7, #4]
 800f82e:	4798      	blx	r3
 800f830:	4603      	mov	r3, r0
 800f832:	73fb      	strb	r3, [r7, #15]
      break;
 800f834:	e04a      	b.n	800f8cc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f836:	683b      	ldr	r3, [r7, #0]
 800f838:	785b      	ldrb	r3, [r3, #1]
 800f83a:	2b09      	cmp	r3, #9
 800f83c:	d83b      	bhi.n	800f8b6 <USBD_StdDevReq+0xc2>
 800f83e:	a201      	add	r2, pc, #4	@ (adr r2, 800f844 <USBD_StdDevReq+0x50>)
 800f840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f844:	0800f899 	.word	0x0800f899
 800f848:	0800f8ad 	.word	0x0800f8ad
 800f84c:	0800f8b7 	.word	0x0800f8b7
 800f850:	0800f8a3 	.word	0x0800f8a3
 800f854:	0800f8b7 	.word	0x0800f8b7
 800f858:	0800f877 	.word	0x0800f877
 800f85c:	0800f86d 	.word	0x0800f86d
 800f860:	0800f8b7 	.word	0x0800f8b7
 800f864:	0800f88f 	.word	0x0800f88f
 800f868:	0800f881 	.word	0x0800f881
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800f86c:	6839      	ldr	r1, [r7, #0]
 800f86e:	6878      	ldr	r0, [r7, #4]
 800f870:	f000 fa3c 	bl	800fcec <USBD_GetDescriptor>
          break;
 800f874:	e024      	b.n	800f8c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800f876:	6839      	ldr	r1, [r7, #0]
 800f878:	6878      	ldr	r0, [r7, #4]
 800f87a:	f000 fbcb 	bl	8010014 <USBD_SetAddress>
          break;
 800f87e:	e01f      	b.n	800f8c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800f880:	6839      	ldr	r1, [r7, #0]
 800f882:	6878      	ldr	r0, [r7, #4]
 800f884:	f000 fc0a 	bl	801009c <USBD_SetConfig>
 800f888:	4603      	mov	r3, r0
 800f88a:	73fb      	strb	r3, [r7, #15]
          break;
 800f88c:	e018      	b.n	800f8c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800f88e:	6839      	ldr	r1, [r7, #0]
 800f890:	6878      	ldr	r0, [r7, #4]
 800f892:	f000 fcad 	bl	80101f0 <USBD_GetConfig>
          break;
 800f896:	e013      	b.n	800f8c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800f898:	6839      	ldr	r1, [r7, #0]
 800f89a:	6878      	ldr	r0, [r7, #4]
 800f89c:	f000 fcde 	bl	801025c <USBD_GetStatus>
          break;
 800f8a0:	e00e      	b.n	800f8c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800f8a2:	6839      	ldr	r1, [r7, #0]
 800f8a4:	6878      	ldr	r0, [r7, #4]
 800f8a6:	f000 fd0d 	bl	80102c4 <USBD_SetFeature>
          break;
 800f8aa:	e009      	b.n	800f8c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800f8ac:	6839      	ldr	r1, [r7, #0]
 800f8ae:	6878      	ldr	r0, [r7, #4]
 800f8b0:	f000 fd31 	bl	8010316 <USBD_ClrFeature>
          break;
 800f8b4:	e004      	b.n	800f8c0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800f8b6:	6839      	ldr	r1, [r7, #0]
 800f8b8:	6878      	ldr	r0, [r7, #4]
 800f8ba:	f000 fd88 	bl	80103ce <USBD_CtlError>
          break;
 800f8be:	bf00      	nop
      }
      break;
 800f8c0:	e004      	b.n	800f8cc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800f8c2:	6839      	ldr	r1, [r7, #0]
 800f8c4:	6878      	ldr	r0, [r7, #4]
 800f8c6:	f000 fd82 	bl	80103ce <USBD_CtlError>
      break;
 800f8ca:	bf00      	nop
  }

  return ret;
 800f8cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800f8ce:	4618      	mov	r0, r3
 800f8d0:	3710      	adds	r7, #16
 800f8d2:	46bd      	mov	sp, r7
 800f8d4:	bd80      	pop	{r7, pc}
 800f8d6:	bf00      	nop

0800f8d8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f8d8:	b580      	push	{r7, lr}
 800f8da:	b084      	sub	sp, #16
 800f8dc:	af00      	add	r7, sp, #0
 800f8de:	6078      	str	r0, [r7, #4]
 800f8e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f8e2:	2300      	movs	r3, #0
 800f8e4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f8e6:	683b      	ldr	r3, [r7, #0]
 800f8e8:	781b      	ldrb	r3, [r3, #0]
 800f8ea:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f8ee:	2b40      	cmp	r3, #64	@ 0x40
 800f8f0:	d005      	beq.n	800f8fe <USBD_StdItfReq+0x26>
 800f8f2:	2b40      	cmp	r3, #64	@ 0x40
 800f8f4:	d852      	bhi.n	800f99c <USBD_StdItfReq+0xc4>
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	d001      	beq.n	800f8fe <USBD_StdItfReq+0x26>
 800f8fa:	2b20      	cmp	r3, #32
 800f8fc:	d14e      	bne.n	800f99c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f904:	b2db      	uxtb	r3, r3
 800f906:	3b01      	subs	r3, #1
 800f908:	2b02      	cmp	r3, #2
 800f90a:	d840      	bhi.n	800f98e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800f90c:	683b      	ldr	r3, [r7, #0]
 800f90e:	889b      	ldrh	r3, [r3, #4]
 800f910:	b2db      	uxtb	r3, r3
 800f912:	2b01      	cmp	r3, #1
 800f914:	d836      	bhi.n	800f984 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800f916:	683b      	ldr	r3, [r7, #0]
 800f918:	889b      	ldrh	r3, [r3, #4]
 800f91a:	b2db      	uxtb	r3, r3
 800f91c:	4619      	mov	r1, r3
 800f91e:	6878      	ldr	r0, [r7, #4]
 800f920:	f7ff fedb 	bl	800f6da <USBD_CoreFindIF>
 800f924:	4603      	mov	r3, r0
 800f926:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f928:	7bbb      	ldrb	r3, [r7, #14]
 800f92a:	2bff      	cmp	r3, #255	@ 0xff
 800f92c:	d01d      	beq.n	800f96a <USBD_StdItfReq+0x92>
 800f92e:	7bbb      	ldrb	r3, [r7, #14]
 800f930:	2b00      	cmp	r3, #0
 800f932:	d11a      	bne.n	800f96a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800f934:	7bba      	ldrb	r2, [r7, #14]
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	32ae      	adds	r2, #174	@ 0xae
 800f93a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f93e:	689b      	ldr	r3, [r3, #8]
 800f940:	2b00      	cmp	r3, #0
 800f942:	d00f      	beq.n	800f964 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800f944:	7bba      	ldrb	r2, [r7, #14]
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800f94c:	7bba      	ldrb	r2, [r7, #14]
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	32ae      	adds	r2, #174	@ 0xae
 800f952:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f956:	689b      	ldr	r3, [r3, #8]
 800f958:	6839      	ldr	r1, [r7, #0]
 800f95a:	6878      	ldr	r0, [r7, #4]
 800f95c:	4798      	blx	r3
 800f95e:	4603      	mov	r3, r0
 800f960:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800f962:	e004      	b.n	800f96e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800f964:	2303      	movs	r3, #3
 800f966:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800f968:	e001      	b.n	800f96e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800f96a:	2303      	movs	r3, #3
 800f96c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800f96e:	683b      	ldr	r3, [r7, #0]
 800f970:	88db      	ldrh	r3, [r3, #6]
 800f972:	2b00      	cmp	r3, #0
 800f974:	d110      	bne.n	800f998 <USBD_StdItfReq+0xc0>
 800f976:	7bfb      	ldrb	r3, [r7, #15]
 800f978:	2b00      	cmp	r3, #0
 800f97a:	d10d      	bne.n	800f998 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800f97c:	6878      	ldr	r0, [r7, #4]
 800f97e:	f000 fdf1 	bl	8010564 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800f982:	e009      	b.n	800f998 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800f984:	6839      	ldr	r1, [r7, #0]
 800f986:	6878      	ldr	r0, [r7, #4]
 800f988:	f000 fd21 	bl	80103ce <USBD_CtlError>
          break;
 800f98c:	e004      	b.n	800f998 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800f98e:	6839      	ldr	r1, [r7, #0]
 800f990:	6878      	ldr	r0, [r7, #4]
 800f992:	f000 fd1c 	bl	80103ce <USBD_CtlError>
          break;
 800f996:	e000      	b.n	800f99a <USBD_StdItfReq+0xc2>
          break;
 800f998:	bf00      	nop
      }
      break;
 800f99a:	e004      	b.n	800f9a6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800f99c:	6839      	ldr	r1, [r7, #0]
 800f99e:	6878      	ldr	r0, [r7, #4]
 800f9a0:	f000 fd15 	bl	80103ce <USBD_CtlError>
      break;
 800f9a4:	bf00      	nop
  }

  return ret;
 800f9a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800f9a8:	4618      	mov	r0, r3
 800f9aa:	3710      	adds	r7, #16
 800f9ac:	46bd      	mov	sp, r7
 800f9ae:	bd80      	pop	{r7, pc}

0800f9b0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f9b0:	b580      	push	{r7, lr}
 800f9b2:	b084      	sub	sp, #16
 800f9b4:	af00      	add	r7, sp, #0
 800f9b6:	6078      	str	r0, [r7, #4]
 800f9b8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800f9ba:	2300      	movs	r3, #0
 800f9bc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800f9be:	683b      	ldr	r3, [r7, #0]
 800f9c0:	889b      	ldrh	r3, [r3, #4]
 800f9c2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f9c4:	683b      	ldr	r3, [r7, #0]
 800f9c6:	781b      	ldrb	r3, [r3, #0]
 800f9c8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f9cc:	2b40      	cmp	r3, #64	@ 0x40
 800f9ce:	d007      	beq.n	800f9e0 <USBD_StdEPReq+0x30>
 800f9d0:	2b40      	cmp	r3, #64	@ 0x40
 800f9d2:	f200 817f 	bhi.w	800fcd4 <USBD_StdEPReq+0x324>
 800f9d6:	2b00      	cmp	r3, #0
 800f9d8:	d02a      	beq.n	800fa30 <USBD_StdEPReq+0x80>
 800f9da:	2b20      	cmp	r3, #32
 800f9dc:	f040 817a 	bne.w	800fcd4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800f9e0:	7bbb      	ldrb	r3, [r7, #14]
 800f9e2:	4619      	mov	r1, r3
 800f9e4:	6878      	ldr	r0, [r7, #4]
 800f9e6:	f7ff fe85 	bl	800f6f4 <USBD_CoreFindEP>
 800f9ea:	4603      	mov	r3, r0
 800f9ec:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f9ee:	7b7b      	ldrb	r3, [r7, #13]
 800f9f0:	2bff      	cmp	r3, #255	@ 0xff
 800f9f2:	f000 8174 	beq.w	800fcde <USBD_StdEPReq+0x32e>
 800f9f6:	7b7b      	ldrb	r3, [r7, #13]
 800f9f8:	2b00      	cmp	r3, #0
 800f9fa:	f040 8170 	bne.w	800fcde <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800f9fe:	7b7a      	ldrb	r2, [r7, #13]
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800fa06:	7b7a      	ldrb	r2, [r7, #13]
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	32ae      	adds	r2, #174	@ 0xae
 800fa0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fa10:	689b      	ldr	r3, [r3, #8]
 800fa12:	2b00      	cmp	r3, #0
 800fa14:	f000 8163 	beq.w	800fcde <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800fa18:	7b7a      	ldrb	r2, [r7, #13]
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	32ae      	adds	r2, #174	@ 0xae
 800fa1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fa22:	689b      	ldr	r3, [r3, #8]
 800fa24:	6839      	ldr	r1, [r7, #0]
 800fa26:	6878      	ldr	r0, [r7, #4]
 800fa28:	4798      	blx	r3
 800fa2a:	4603      	mov	r3, r0
 800fa2c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800fa2e:	e156      	b.n	800fcde <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800fa30:	683b      	ldr	r3, [r7, #0]
 800fa32:	785b      	ldrb	r3, [r3, #1]
 800fa34:	2b03      	cmp	r3, #3
 800fa36:	d008      	beq.n	800fa4a <USBD_StdEPReq+0x9a>
 800fa38:	2b03      	cmp	r3, #3
 800fa3a:	f300 8145 	bgt.w	800fcc8 <USBD_StdEPReq+0x318>
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	f000 809b 	beq.w	800fb7a <USBD_StdEPReq+0x1ca>
 800fa44:	2b01      	cmp	r3, #1
 800fa46:	d03c      	beq.n	800fac2 <USBD_StdEPReq+0x112>
 800fa48:	e13e      	b.n	800fcc8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fa50:	b2db      	uxtb	r3, r3
 800fa52:	2b02      	cmp	r3, #2
 800fa54:	d002      	beq.n	800fa5c <USBD_StdEPReq+0xac>
 800fa56:	2b03      	cmp	r3, #3
 800fa58:	d016      	beq.n	800fa88 <USBD_StdEPReq+0xd8>
 800fa5a:	e02c      	b.n	800fab6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800fa5c:	7bbb      	ldrb	r3, [r7, #14]
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	d00d      	beq.n	800fa7e <USBD_StdEPReq+0xce>
 800fa62:	7bbb      	ldrb	r3, [r7, #14]
 800fa64:	2b80      	cmp	r3, #128	@ 0x80
 800fa66:	d00a      	beq.n	800fa7e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800fa68:	7bbb      	ldrb	r3, [r7, #14]
 800fa6a:	4619      	mov	r1, r3
 800fa6c:	6878      	ldr	r0, [r7, #4]
 800fa6e:	f004 f85d 	bl	8013b2c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800fa72:	2180      	movs	r1, #128	@ 0x80
 800fa74:	6878      	ldr	r0, [r7, #4]
 800fa76:	f004 f859 	bl	8013b2c <USBD_LL_StallEP>
 800fa7a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800fa7c:	e020      	b.n	800fac0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800fa7e:	6839      	ldr	r1, [r7, #0]
 800fa80:	6878      	ldr	r0, [r7, #4]
 800fa82:	f000 fca4 	bl	80103ce <USBD_CtlError>
              break;
 800fa86:	e01b      	b.n	800fac0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800fa88:	683b      	ldr	r3, [r7, #0]
 800fa8a:	885b      	ldrh	r3, [r3, #2]
 800fa8c:	2b00      	cmp	r3, #0
 800fa8e:	d10e      	bne.n	800faae <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800fa90:	7bbb      	ldrb	r3, [r7, #14]
 800fa92:	2b00      	cmp	r3, #0
 800fa94:	d00b      	beq.n	800faae <USBD_StdEPReq+0xfe>
 800fa96:	7bbb      	ldrb	r3, [r7, #14]
 800fa98:	2b80      	cmp	r3, #128	@ 0x80
 800fa9a:	d008      	beq.n	800faae <USBD_StdEPReq+0xfe>
 800fa9c:	683b      	ldr	r3, [r7, #0]
 800fa9e:	88db      	ldrh	r3, [r3, #6]
 800faa0:	2b00      	cmp	r3, #0
 800faa2:	d104      	bne.n	800faae <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800faa4:	7bbb      	ldrb	r3, [r7, #14]
 800faa6:	4619      	mov	r1, r3
 800faa8:	6878      	ldr	r0, [r7, #4]
 800faaa:	f004 f83f 	bl	8013b2c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800faae:	6878      	ldr	r0, [r7, #4]
 800fab0:	f000 fd58 	bl	8010564 <USBD_CtlSendStatus>

              break;
 800fab4:	e004      	b.n	800fac0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800fab6:	6839      	ldr	r1, [r7, #0]
 800fab8:	6878      	ldr	r0, [r7, #4]
 800faba:	f000 fc88 	bl	80103ce <USBD_CtlError>
              break;
 800fabe:	bf00      	nop
          }
          break;
 800fac0:	e107      	b.n	800fcd2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fac8:	b2db      	uxtb	r3, r3
 800faca:	2b02      	cmp	r3, #2
 800facc:	d002      	beq.n	800fad4 <USBD_StdEPReq+0x124>
 800face:	2b03      	cmp	r3, #3
 800fad0:	d016      	beq.n	800fb00 <USBD_StdEPReq+0x150>
 800fad2:	e04b      	b.n	800fb6c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800fad4:	7bbb      	ldrb	r3, [r7, #14]
 800fad6:	2b00      	cmp	r3, #0
 800fad8:	d00d      	beq.n	800faf6 <USBD_StdEPReq+0x146>
 800fada:	7bbb      	ldrb	r3, [r7, #14]
 800fadc:	2b80      	cmp	r3, #128	@ 0x80
 800fade:	d00a      	beq.n	800faf6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800fae0:	7bbb      	ldrb	r3, [r7, #14]
 800fae2:	4619      	mov	r1, r3
 800fae4:	6878      	ldr	r0, [r7, #4]
 800fae6:	f004 f821 	bl	8013b2c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800faea:	2180      	movs	r1, #128	@ 0x80
 800faec:	6878      	ldr	r0, [r7, #4]
 800faee:	f004 f81d 	bl	8013b2c <USBD_LL_StallEP>
 800faf2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800faf4:	e040      	b.n	800fb78 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800faf6:	6839      	ldr	r1, [r7, #0]
 800faf8:	6878      	ldr	r0, [r7, #4]
 800fafa:	f000 fc68 	bl	80103ce <USBD_CtlError>
              break;
 800fafe:	e03b      	b.n	800fb78 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800fb00:	683b      	ldr	r3, [r7, #0]
 800fb02:	885b      	ldrh	r3, [r3, #2]
 800fb04:	2b00      	cmp	r3, #0
 800fb06:	d136      	bne.n	800fb76 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800fb08:	7bbb      	ldrb	r3, [r7, #14]
 800fb0a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	d004      	beq.n	800fb1c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800fb12:	7bbb      	ldrb	r3, [r7, #14]
 800fb14:	4619      	mov	r1, r3
 800fb16:	6878      	ldr	r0, [r7, #4]
 800fb18:	f004 f83e 	bl	8013b98 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800fb1c:	6878      	ldr	r0, [r7, #4]
 800fb1e:	f000 fd21 	bl	8010564 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800fb22:	7bbb      	ldrb	r3, [r7, #14]
 800fb24:	4619      	mov	r1, r3
 800fb26:	6878      	ldr	r0, [r7, #4]
 800fb28:	f7ff fde4 	bl	800f6f4 <USBD_CoreFindEP>
 800fb2c:	4603      	mov	r3, r0
 800fb2e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800fb30:	7b7b      	ldrb	r3, [r7, #13]
 800fb32:	2bff      	cmp	r3, #255	@ 0xff
 800fb34:	d01f      	beq.n	800fb76 <USBD_StdEPReq+0x1c6>
 800fb36:	7b7b      	ldrb	r3, [r7, #13]
 800fb38:	2b00      	cmp	r3, #0
 800fb3a:	d11c      	bne.n	800fb76 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800fb3c:	7b7a      	ldrb	r2, [r7, #13]
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800fb44:	7b7a      	ldrb	r2, [r7, #13]
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	32ae      	adds	r2, #174	@ 0xae
 800fb4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fb4e:	689b      	ldr	r3, [r3, #8]
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	d010      	beq.n	800fb76 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800fb54:	7b7a      	ldrb	r2, [r7, #13]
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	32ae      	adds	r2, #174	@ 0xae
 800fb5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fb5e:	689b      	ldr	r3, [r3, #8]
 800fb60:	6839      	ldr	r1, [r7, #0]
 800fb62:	6878      	ldr	r0, [r7, #4]
 800fb64:	4798      	blx	r3
 800fb66:	4603      	mov	r3, r0
 800fb68:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800fb6a:	e004      	b.n	800fb76 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800fb6c:	6839      	ldr	r1, [r7, #0]
 800fb6e:	6878      	ldr	r0, [r7, #4]
 800fb70:	f000 fc2d 	bl	80103ce <USBD_CtlError>
              break;
 800fb74:	e000      	b.n	800fb78 <USBD_StdEPReq+0x1c8>
              break;
 800fb76:	bf00      	nop
          }
          break;
 800fb78:	e0ab      	b.n	800fcd2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fb80:	b2db      	uxtb	r3, r3
 800fb82:	2b02      	cmp	r3, #2
 800fb84:	d002      	beq.n	800fb8c <USBD_StdEPReq+0x1dc>
 800fb86:	2b03      	cmp	r3, #3
 800fb88:	d032      	beq.n	800fbf0 <USBD_StdEPReq+0x240>
 800fb8a:	e097      	b.n	800fcbc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800fb8c:	7bbb      	ldrb	r3, [r7, #14]
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	d007      	beq.n	800fba2 <USBD_StdEPReq+0x1f2>
 800fb92:	7bbb      	ldrb	r3, [r7, #14]
 800fb94:	2b80      	cmp	r3, #128	@ 0x80
 800fb96:	d004      	beq.n	800fba2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800fb98:	6839      	ldr	r1, [r7, #0]
 800fb9a:	6878      	ldr	r0, [r7, #4]
 800fb9c:	f000 fc17 	bl	80103ce <USBD_CtlError>
                break;
 800fba0:	e091      	b.n	800fcc6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fba2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	da0b      	bge.n	800fbc2 <USBD_StdEPReq+0x212>
 800fbaa:	7bbb      	ldrb	r3, [r7, #14]
 800fbac:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800fbb0:	4613      	mov	r3, r2
 800fbb2:	009b      	lsls	r3, r3, #2
 800fbb4:	4413      	add	r3, r2
 800fbb6:	009b      	lsls	r3, r3, #2
 800fbb8:	3310      	adds	r3, #16
 800fbba:	687a      	ldr	r2, [r7, #4]
 800fbbc:	4413      	add	r3, r2
 800fbbe:	3304      	adds	r3, #4
 800fbc0:	e00b      	b.n	800fbda <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800fbc2:	7bbb      	ldrb	r3, [r7, #14]
 800fbc4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fbc8:	4613      	mov	r3, r2
 800fbca:	009b      	lsls	r3, r3, #2
 800fbcc:	4413      	add	r3, r2
 800fbce:	009b      	lsls	r3, r3, #2
 800fbd0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800fbd4:	687a      	ldr	r2, [r7, #4]
 800fbd6:	4413      	add	r3, r2
 800fbd8:	3304      	adds	r3, #4
 800fbda:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800fbdc:	68bb      	ldr	r3, [r7, #8]
 800fbde:	2200      	movs	r2, #0
 800fbe0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800fbe2:	68bb      	ldr	r3, [r7, #8]
 800fbe4:	2202      	movs	r2, #2
 800fbe6:	4619      	mov	r1, r3
 800fbe8:	6878      	ldr	r0, [r7, #4]
 800fbea:	f000 fc61 	bl	80104b0 <USBD_CtlSendData>
              break;
 800fbee:	e06a      	b.n	800fcc6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800fbf0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fbf4:	2b00      	cmp	r3, #0
 800fbf6:	da11      	bge.n	800fc1c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800fbf8:	7bbb      	ldrb	r3, [r7, #14]
 800fbfa:	f003 020f 	and.w	r2, r3, #15
 800fbfe:	6879      	ldr	r1, [r7, #4]
 800fc00:	4613      	mov	r3, r2
 800fc02:	009b      	lsls	r3, r3, #2
 800fc04:	4413      	add	r3, r2
 800fc06:	009b      	lsls	r3, r3, #2
 800fc08:	440b      	add	r3, r1
 800fc0a:	3324      	adds	r3, #36	@ 0x24
 800fc0c:	881b      	ldrh	r3, [r3, #0]
 800fc0e:	2b00      	cmp	r3, #0
 800fc10:	d117      	bne.n	800fc42 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800fc12:	6839      	ldr	r1, [r7, #0]
 800fc14:	6878      	ldr	r0, [r7, #4]
 800fc16:	f000 fbda 	bl	80103ce <USBD_CtlError>
                  break;
 800fc1a:	e054      	b.n	800fcc6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800fc1c:	7bbb      	ldrb	r3, [r7, #14]
 800fc1e:	f003 020f 	and.w	r2, r3, #15
 800fc22:	6879      	ldr	r1, [r7, #4]
 800fc24:	4613      	mov	r3, r2
 800fc26:	009b      	lsls	r3, r3, #2
 800fc28:	4413      	add	r3, r2
 800fc2a:	009b      	lsls	r3, r3, #2
 800fc2c:	440b      	add	r3, r1
 800fc2e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800fc32:	881b      	ldrh	r3, [r3, #0]
 800fc34:	2b00      	cmp	r3, #0
 800fc36:	d104      	bne.n	800fc42 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800fc38:	6839      	ldr	r1, [r7, #0]
 800fc3a:	6878      	ldr	r0, [r7, #4]
 800fc3c:	f000 fbc7 	bl	80103ce <USBD_CtlError>
                  break;
 800fc40:	e041      	b.n	800fcc6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fc42:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fc46:	2b00      	cmp	r3, #0
 800fc48:	da0b      	bge.n	800fc62 <USBD_StdEPReq+0x2b2>
 800fc4a:	7bbb      	ldrb	r3, [r7, #14]
 800fc4c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800fc50:	4613      	mov	r3, r2
 800fc52:	009b      	lsls	r3, r3, #2
 800fc54:	4413      	add	r3, r2
 800fc56:	009b      	lsls	r3, r3, #2
 800fc58:	3310      	adds	r3, #16
 800fc5a:	687a      	ldr	r2, [r7, #4]
 800fc5c:	4413      	add	r3, r2
 800fc5e:	3304      	adds	r3, #4
 800fc60:	e00b      	b.n	800fc7a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800fc62:	7bbb      	ldrb	r3, [r7, #14]
 800fc64:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fc68:	4613      	mov	r3, r2
 800fc6a:	009b      	lsls	r3, r3, #2
 800fc6c:	4413      	add	r3, r2
 800fc6e:	009b      	lsls	r3, r3, #2
 800fc70:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800fc74:	687a      	ldr	r2, [r7, #4]
 800fc76:	4413      	add	r3, r2
 800fc78:	3304      	adds	r3, #4
 800fc7a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800fc7c:	7bbb      	ldrb	r3, [r7, #14]
 800fc7e:	2b00      	cmp	r3, #0
 800fc80:	d002      	beq.n	800fc88 <USBD_StdEPReq+0x2d8>
 800fc82:	7bbb      	ldrb	r3, [r7, #14]
 800fc84:	2b80      	cmp	r3, #128	@ 0x80
 800fc86:	d103      	bne.n	800fc90 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800fc88:	68bb      	ldr	r3, [r7, #8]
 800fc8a:	2200      	movs	r2, #0
 800fc8c:	601a      	str	r2, [r3, #0]
 800fc8e:	e00e      	b.n	800fcae <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800fc90:	7bbb      	ldrb	r3, [r7, #14]
 800fc92:	4619      	mov	r1, r3
 800fc94:	6878      	ldr	r0, [r7, #4]
 800fc96:	f003 ffb5 	bl	8013c04 <USBD_LL_IsStallEP>
 800fc9a:	4603      	mov	r3, r0
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	d003      	beq.n	800fca8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800fca0:	68bb      	ldr	r3, [r7, #8]
 800fca2:	2201      	movs	r2, #1
 800fca4:	601a      	str	r2, [r3, #0]
 800fca6:	e002      	b.n	800fcae <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800fca8:	68bb      	ldr	r3, [r7, #8]
 800fcaa:	2200      	movs	r2, #0
 800fcac:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800fcae:	68bb      	ldr	r3, [r7, #8]
 800fcb0:	2202      	movs	r2, #2
 800fcb2:	4619      	mov	r1, r3
 800fcb4:	6878      	ldr	r0, [r7, #4]
 800fcb6:	f000 fbfb 	bl	80104b0 <USBD_CtlSendData>
              break;
 800fcba:	e004      	b.n	800fcc6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800fcbc:	6839      	ldr	r1, [r7, #0]
 800fcbe:	6878      	ldr	r0, [r7, #4]
 800fcc0:	f000 fb85 	bl	80103ce <USBD_CtlError>
              break;
 800fcc4:	bf00      	nop
          }
          break;
 800fcc6:	e004      	b.n	800fcd2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800fcc8:	6839      	ldr	r1, [r7, #0]
 800fcca:	6878      	ldr	r0, [r7, #4]
 800fccc:	f000 fb7f 	bl	80103ce <USBD_CtlError>
          break;
 800fcd0:	bf00      	nop
      }
      break;
 800fcd2:	e005      	b.n	800fce0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800fcd4:	6839      	ldr	r1, [r7, #0]
 800fcd6:	6878      	ldr	r0, [r7, #4]
 800fcd8:	f000 fb79 	bl	80103ce <USBD_CtlError>
      break;
 800fcdc:	e000      	b.n	800fce0 <USBD_StdEPReq+0x330>
      break;
 800fcde:	bf00      	nop
  }

  return ret;
 800fce0:	7bfb      	ldrb	r3, [r7, #15]
}
 800fce2:	4618      	mov	r0, r3
 800fce4:	3710      	adds	r7, #16
 800fce6:	46bd      	mov	sp, r7
 800fce8:	bd80      	pop	{r7, pc}
	...

0800fcec <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fcec:	b580      	push	{r7, lr}
 800fcee:	b084      	sub	sp, #16
 800fcf0:	af00      	add	r7, sp, #0
 800fcf2:	6078      	str	r0, [r7, #4]
 800fcf4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800fcf6:	2300      	movs	r3, #0
 800fcf8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800fcfa:	2300      	movs	r3, #0
 800fcfc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800fcfe:	2300      	movs	r3, #0
 800fd00:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800fd02:	683b      	ldr	r3, [r7, #0]
 800fd04:	885b      	ldrh	r3, [r3, #2]
 800fd06:	0a1b      	lsrs	r3, r3, #8
 800fd08:	b29b      	uxth	r3, r3
 800fd0a:	3b01      	subs	r3, #1
 800fd0c:	2b0e      	cmp	r3, #14
 800fd0e:	f200 8152 	bhi.w	800ffb6 <USBD_GetDescriptor+0x2ca>
 800fd12:	a201      	add	r2, pc, #4	@ (adr r2, 800fd18 <USBD_GetDescriptor+0x2c>)
 800fd14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd18:	0800fd89 	.word	0x0800fd89
 800fd1c:	0800fda1 	.word	0x0800fda1
 800fd20:	0800fde1 	.word	0x0800fde1
 800fd24:	0800ffb7 	.word	0x0800ffb7
 800fd28:	0800ffb7 	.word	0x0800ffb7
 800fd2c:	0800ff57 	.word	0x0800ff57
 800fd30:	0800ff83 	.word	0x0800ff83
 800fd34:	0800ffb7 	.word	0x0800ffb7
 800fd38:	0800ffb7 	.word	0x0800ffb7
 800fd3c:	0800ffb7 	.word	0x0800ffb7
 800fd40:	0800ffb7 	.word	0x0800ffb7
 800fd44:	0800ffb7 	.word	0x0800ffb7
 800fd48:	0800ffb7 	.word	0x0800ffb7
 800fd4c:	0800ffb7 	.word	0x0800ffb7
 800fd50:	0800fd55 	.word	0x0800fd55
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fd5a:	69db      	ldr	r3, [r3, #28]
 800fd5c:	2b00      	cmp	r3, #0
 800fd5e:	d00b      	beq.n	800fd78 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fd66:	69db      	ldr	r3, [r3, #28]
 800fd68:	687a      	ldr	r2, [r7, #4]
 800fd6a:	7c12      	ldrb	r2, [r2, #16]
 800fd6c:	f107 0108 	add.w	r1, r7, #8
 800fd70:	4610      	mov	r0, r2
 800fd72:	4798      	blx	r3
 800fd74:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800fd76:	e126      	b.n	800ffc6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800fd78:	6839      	ldr	r1, [r7, #0]
 800fd7a:	6878      	ldr	r0, [r7, #4]
 800fd7c:	f000 fb27 	bl	80103ce <USBD_CtlError>
        err++;
 800fd80:	7afb      	ldrb	r3, [r7, #11]
 800fd82:	3301      	adds	r3, #1
 800fd84:	72fb      	strb	r3, [r7, #11]
      break;
 800fd86:	e11e      	b.n	800ffc6 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fd8e:	681b      	ldr	r3, [r3, #0]
 800fd90:	687a      	ldr	r2, [r7, #4]
 800fd92:	7c12      	ldrb	r2, [r2, #16]
 800fd94:	f107 0108 	add.w	r1, r7, #8
 800fd98:	4610      	mov	r0, r2
 800fd9a:	4798      	blx	r3
 800fd9c:	60f8      	str	r0, [r7, #12]
      break;
 800fd9e:	e112      	b.n	800ffc6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	7c1b      	ldrb	r3, [r3, #16]
 800fda4:	2b00      	cmp	r3, #0
 800fda6:	d10d      	bne.n	800fdc4 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fdae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fdb0:	f107 0208 	add.w	r2, r7, #8
 800fdb4:	4610      	mov	r0, r2
 800fdb6:	4798      	blx	r3
 800fdb8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800fdba:	68fb      	ldr	r3, [r7, #12]
 800fdbc:	3301      	adds	r3, #1
 800fdbe:	2202      	movs	r2, #2
 800fdc0:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800fdc2:	e100      	b.n	800ffc6 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fdca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fdcc:	f107 0208 	add.w	r2, r7, #8
 800fdd0:	4610      	mov	r0, r2
 800fdd2:	4798      	blx	r3
 800fdd4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800fdd6:	68fb      	ldr	r3, [r7, #12]
 800fdd8:	3301      	adds	r3, #1
 800fdda:	2202      	movs	r2, #2
 800fddc:	701a      	strb	r2, [r3, #0]
      break;
 800fdde:	e0f2      	b.n	800ffc6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800fde0:	683b      	ldr	r3, [r7, #0]
 800fde2:	885b      	ldrh	r3, [r3, #2]
 800fde4:	b2db      	uxtb	r3, r3
 800fde6:	2b05      	cmp	r3, #5
 800fde8:	f200 80ac 	bhi.w	800ff44 <USBD_GetDescriptor+0x258>
 800fdec:	a201      	add	r2, pc, #4	@ (adr r2, 800fdf4 <USBD_GetDescriptor+0x108>)
 800fdee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fdf2:	bf00      	nop
 800fdf4:	0800fe0d 	.word	0x0800fe0d
 800fdf8:	0800fe41 	.word	0x0800fe41
 800fdfc:	0800fe75 	.word	0x0800fe75
 800fe00:	0800fea9 	.word	0x0800fea9
 800fe04:	0800fedd 	.word	0x0800fedd
 800fe08:	0800ff11 	.word	0x0800ff11
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fe12:	685b      	ldr	r3, [r3, #4]
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	d00b      	beq.n	800fe30 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fe1e:	685b      	ldr	r3, [r3, #4]
 800fe20:	687a      	ldr	r2, [r7, #4]
 800fe22:	7c12      	ldrb	r2, [r2, #16]
 800fe24:	f107 0108 	add.w	r1, r7, #8
 800fe28:	4610      	mov	r0, r2
 800fe2a:	4798      	blx	r3
 800fe2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fe2e:	e091      	b.n	800ff54 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800fe30:	6839      	ldr	r1, [r7, #0]
 800fe32:	6878      	ldr	r0, [r7, #4]
 800fe34:	f000 facb 	bl	80103ce <USBD_CtlError>
            err++;
 800fe38:	7afb      	ldrb	r3, [r7, #11]
 800fe3a:	3301      	adds	r3, #1
 800fe3c:	72fb      	strb	r3, [r7, #11]
          break;
 800fe3e:	e089      	b.n	800ff54 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fe46:	689b      	ldr	r3, [r3, #8]
 800fe48:	2b00      	cmp	r3, #0
 800fe4a:	d00b      	beq.n	800fe64 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fe52:	689b      	ldr	r3, [r3, #8]
 800fe54:	687a      	ldr	r2, [r7, #4]
 800fe56:	7c12      	ldrb	r2, [r2, #16]
 800fe58:	f107 0108 	add.w	r1, r7, #8
 800fe5c:	4610      	mov	r0, r2
 800fe5e:	4798      	blx	r3
 800fe60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fe62:	e077      	b.n	800ff54 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800fe64:	6839      	ldr	r1, [r7, #0]
 800fe66:	6878      	ldr	r0, [r7, #4]
 800fe68:	f000 fab1 	bl	80103ce <USBD_CtlError>
            err++;
 800fe6c:	7afb      	ldrb	r3, [r7, #11]
 800fe6e:	3301      	adds	r3, #1
 800fe70:	72fb      	strb	r3, [r7, #11]
          break;
 800fe72:	e06f      	b.n	800ff54 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fe7a:	68db      	ldr	r3, [r3, #12]
 800fe7c:	2b00      	cmp	r3, #0
 800fe7e:	d00b      	beq.n	800fe98 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fe86:	68db      	ldr	r3, [r3, #12]
 800fe88:	687a      	ldr	r2, [r7, #4]
 800fe8a:	7c12      	ldrb	r2, [r2, #16]
 800fe8c:	f107 0108 	add.w	r1, r7, #8
 800fe90:	4610      	mov	r0, r2
 800fe92:	4798      	blx	r3
 800fe94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fe96:	e05d      	b.n	800ff54 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800fe98:	6839      	ldr	r1, [r7, #0]
 800fe9a:	6878      	ldr	r0, [r7, #4]
 800fe9c:	f000 fa97 	bl	80103ce <USBD_CtlError>
            err++;
 800fea0:	7afb      	ldrb	r3, [r7, #11]
 800fea2:	3301      	adds	r3, #1
 800fea4:	72fb      	strb	r3, [r7, #11]
          break;
 800fea6:	e055      	b.n	800ff54 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800feae:	691b      	ldr	r3, [r3, #16]
 800feb0:	2b00      	cmp	r3, #0
 800feb2:	d00b      	beq.n	800fecc <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800feba:	691b      	ldr	r3, [r3, #16]
 800febc:	687a      	ldr	r2, [r7, #4]
 800febe:	7c12      	ldrb	r2, [r2, #16]
 800fec0:	f107 0108 	add.w	r1, r7, #8
 800fec4:	4610      	mov	r0, r2
 800fec6:	4798      	blx	r3
 800fec8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800feca:	e043      	b.n	800ff54 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800fecc:	6839      	ldr	r1, [r7, #0]
 800fece:	6878      	ldr	r0, [r7, #4]
 800fed0:	f000 fa7d 	bl	80103ce <USBD_CtlError>
            err++;
 800fed4:	7afb      	ldrb	r3, [r7, #11]
 800fed6:	3301      	adds	r3, #1
 800fed8:	72fb      	strb	r3, [r7, #11]
          break;
 800feda:	e03b      	b.n	800ff54 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fee2:	695b      	ldr	r3, [r3, #20]
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	d00b      	beq.n	800ff00 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800feee:	695b      	ldr	r3, [r3, #20]
 800fef0:	687a      	ldr	r2, [r7, #4]
 800fef2:	7c12      	ldrb	r2, [r2, #16]
 800fef4:	f107 0108 	add.w	r1, r7, #8
 800fef8:	4610      	mov	r0, r2
 800fefa:	4798      	blx	r3
 800fefc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fefe:	e029      	b.n	800ff54 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ff00:	6839      	ldr	r1, [r7, #0]
 800ff02:	6878      	ldr	r0, [r7, #4]
 800ff04:	f000 fa63 	bl	80103ce <USBD_CtlError>
            err++;
 800ff08:	7afb      	ldrb	r3, [r7, #11]
 800ff0a:	3301      	adds	r3, #1
 800ff0c:	72fb      	strb	r3, [r7, #11]
          break;
 800ff0e:	e021      	b.n	800ff54 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ff16:	699b      	ldr	r3, [r3, #24]
 800ff18:	2b00      	cmp	r3, #0
 800ff1a:	d00b      	beq.n	800ff34 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ff22:	699b      	ldr	r3, [r3, #24]
 800ff24:	687a      	ldr	r2, [r7, #4]
 800ff26:	7c12      	ldrb	r2, [r2, #16]
 800ff28:	f107 0108 	add.w	r1, r7, #8
 800ff2c:	4610      	mov	r0, r2
 800ff2e:	4798      	blx	r3
 800ff30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ff32:	e00f      	b.n	800ff54 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ff34:	6839      	ldr	r1, [r7, #0]
 800ff36:	6878      	ldr	r0, [r7, #4]
 800ff38:	f000 fa49 	bl	80103ce <USBD_CtlError>
            err++;
 800ff3c:	7afb      	ldrb	r3, [r7, #11]
 800ff3e:	3301      	adds	r3, #1
 800ff40:	72fb      	strb	r3, [r7, #11]
          break;
 800ff42:	e007      	b.n	800ff54 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800ff44:	6839      	ldr	r1, [r7, #0]
 800ff46:	6878      	ldr	r0, [r7, #4]
 800ff48:	f000 fa41 	bl	80103ce <USBD_CtlError>
          err++;
 800ff4c:	7afb      	ldrb	r3, [r7, #11]
 800ff4e:	3301      	adds	r3, #1
 800ff50:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800ff52:	bf00      	nop
      }
      break;
 800ff54:	e037      	b.n	800ffc6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	7c1b      	ldrb	r3, [r3, #16]
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	d109      	bne.n	800ff72 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ff64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ff66:	f107 0208 	add.w	r2, r7, #8
 800ff6a:	4610      	mov	r0, r2
 800ff6c:	4798      	blx	r3
 800ff6e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ff70:	e029      	b.n	800ffc6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ff72:	6839      	ldr	r1, [r7, #0]
 800ff74:	6878      	ldr	r0, [r7, #4]
 800ff76:	f000 fa2a 	bl	80103ce <USBD_CtlError>
        err++;
 800ff7a:	7afb      	ldrb	r3, [r7, #11]
 800ff7c:	3301      	adds	r3, #1
 800ff7e:	72fb      	strb	r3, [r7, #11]
      break;
 800ff80:	e021      	b.n	800ffc6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	7c1b      	ldrb	r3, [r3, #16]
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	d10d      	bne.n	800ffa6 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ff90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ff92:	f107 0208 	add.w	r2, r7, #8
 800ff96:	4610      	mov	r0, r2
 800ff98:	4798      	blx	r3
 800ff9a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ff9c:	68fb      	ldr	r3, [r7, #12]
 800ff9e:	3301      	adds	r3, #1
 800ffa0:	2207      	movs	r2, #7
 800ffa2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ffa4:	e00f      	b.n	800ffc6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ffa6:	6839      	ldr	r1, [r7, #0]
 800ffa8:	6878      	ldr	r0, [r7, #4]
 800ffaa:	f000 fa10 	bl	80103ce <USBD_CtlError>
        err++;
 800ffae:	7afb      	ldrb	r3, [r7, #11]
 800ffb0:	3301      	adds	r3, #1
 800ffb2:	72fb      	strb	r3, [r7, #11]
      break;
 800ffb4:	e007      	b.n	800ffc6 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800ffb6:	6839      	ldr	r1, [r7, #0]
 800ffb8:	6878      	ldr	r0, [r7, #4]
 800ffba:	f000 fa08 	bl	80103ce <USBD_CtlError>
      err++;
 800ffbe:	7afb      	ldrb	r3, [r7, #11]
 800ffc0:	3301      	adds	r3, #1
 800ffc2:	72fb      	strb	r3, [r7, #11]
      break;
 800ffc4:	bf00      	nop
  }

  if (err != 0U)
 800ffc6:	7afb      	ldrb	r3, [r7, #11]
 800ffc8:	2b00      	cmp	r3, #0
 800ffca:	d11e      	bne.n	801000a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800ffcc:	683b      	ldr	r3, [r7, #0]
 800ffce:	88db      	ldrh	r3, [r3, #6]
 800ffd0:	2b00      	cmp	r3, #0
 800ffd2:	d016      	beq.n	8010002 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800ffd4:	893b      	ldrh	r3, [r7, #8]
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	d00e      	beq.n	800fff8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800ffda:	683b      	ldr	r3, [r7, #0]
 800ffdc:	88da      	ldrh	r2, [r3, #6]
 800ffde:	893b      	ldrh	r3, [r7, #8]
 800ffe0:	4293      	cmp	r3, r2
 800ffe2:	bf28      	it	cs
 800ffe4:	4613      	movcs	r3, r2
 800ffe6:	b29b      	uxth	r3, r3
 800ffe8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ffea:	893b      	ldrh	r3, [r7, #8]
 800ffec:	461a      	mov	r2, r3
 800ffee:	68f9      	ldr	r1, [r7, #12]
 800fff0:	6878      	ldr	r0, [r7, #4]
 800fff2:	f000 fa5d 	bl	80104b0 <USBD_CtlSendData>
 800fff6:	e009      	b.n	801000c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800fff8:	6839      	ldr	r1, [r7, #0]
 800fffa:	6878      	ldr	r0, [r7, #4]
 800fffc:	f000 f9e7 	bl	80103ce <USBD_CtlError>
 8010000:	e004      	b.n	801000c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8010002:	6878      	ldr	r0, [r7, #4]
 8010004:	f000 faae 	bl	8010564 <USBD_CtlSendStatus>
 8010008:	e000      	b.n	801000c <USBD_GetDescriptor+0x320>
    return;
 801000a:	bf00      	nop
  }
}
 801000c:	3710      	adds	r7, #16
 801000e:	46bd      	mov	sp, r7
 8010010:	bd80      	pop	{r7, pc}
 8010012:	bf00      	nop

08010014 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010014:	b580      	push	{r7, lr}
 8010016:	b084      	sub	sp, #16
 8010018:	af00      	add	r7, sp, #0
 801001a:	6078      	str	r0, [r7, #4]
 801001c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801001e:	683b      	ldr	r3, [r7, #0]
 8010020:	889b      	ldrh	r3, [r3, #4]
 8010022:	2b00      	cmp	r3, #0
 8010024:	d131      	bne.n	801008a <USBD_SetAddress+0x76>
 8010026:	683b      	ldr	r3, [r7, #0]
 8010028:	88db      	ldrh	r3, [r3, #6]
 801002a:	2b00      	cmp	r3, #0
 801002c:	d12d      	bne.n	801008a <USBD_SetAddress+0x76>
 801002e:	683b      	ldr	r3, [r7, #0]
 8010030:	885b      	ldrh	r3, [r3, #2]
 8010032:	2b7f      	cmp	r3, #127	@ 0x7f
 8010034:	d829      	bhi.n	801008a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8010036:	683b      	ldr	r3, [r7, #0]
 8010038:	885b      	ldrh	r3, [r3, #2]
 801003a:	b2db      	uxtb	r3, r3
 801003c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010040:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010048:	b2db      	uxtb	r3, r3
 801004a:	2b03      	cmp	r3, #3
 801004c:	d104      	bne.n	8010058 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 801004e:	6839      	ldr	r1, [r7, #0]
 8010050:	6878      	ldr	r0, [r7, #4]
 8010052:	f000 f9bc 	bl	80103ce <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010056:	e01d      	b.n	8010094 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	7bfa      	ldrb	r2, [r7, #15]
 801005c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8010060:	7bfb      	ldrb	r3, [r7, #15]
 8010062:	4619      	mov	r1, r3
 8010064:	6878      	ldr	r0, [r7, #4]
 8010066:	f003 fdf9 	bl	8013c5c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801006a:	6878      	ldr	r0, [r7, #4]
 801006c:	f000 fa7a 	bl	8010564 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8010070:	7bfb      	ldrb	r3, [r7, #15]
 8010072:	2b00      	cmp	r3, #0
 8010074:	d004      	beq.n	8010080 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	2202      	movs	r2, #2
 801007a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801007e:	e009      	b.n	8010094 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	2201      	movs	r2, #1
 8010084:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010088:	e004      	b.n	8010094 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801008a:	6839      	ldr	r1, [r7, #0]
 801008c:	6878      	ldr	r0, [r7, #4]
 801008e:	f000 f99e 	bl	80103ce <USBD_CtlError>
  }
}
 8010092:	bf00      	nop
 8010094:	bf00      	nop
 8010096:	3710      	adds	r7, #16
 8010098:	46bd      	mov	sp, r7
 801009a:	bd80      	pop	{r7, pc}

0801009c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801009c:	b580      	push	{r7, lr}
 801009e:	b084      	sub	sp, #16
 80100a0:	af00      	add	r7, sp, #0
 80100a2:	6078      	str	r0, [r7, #4]
 80100a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80100a6:	2300      	movs	r3, #0
 80100a8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80100aa:	683b      	ldr	r3, [r7, #0]
 80100ac:	885b      	ldrh	r3, [r3, #2]
 80100ae:	b2da      	uxtb	r2, r3
 80100b0:	4b4e      	ldr	r3, [pc, #312]	@ (80101ec <USBD_SetConfig+0x150>)
 80100b2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80100b4:	4b4d      	ldr	r3, [pc, #308]	@ (80101ec <USBD_SetConfig+0x150>)
 80100b6:	781b      	ldrb	r3, [r3, #0]
 80100b8:	2b01      	cmp	r3, #1
 80100ba:	d905      	bls.n	80100c8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80100bc:	6839      	ldr	r1, [r7, #0]
 80100be:	6878      	ldr	r0, [r7, #4]
 80100c0:	f000 f985 	bl	80103ce <USBD_CtlError>
    return USBD_FAIL;
 80100c4:	2303      	movs	r3, #3
 80100c6:	e08c      	b.n	80101e2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80100ce:	b2db      	uxtb	r3, r3
 80100d0:	2b02      	cmp	r3, #2
 80100d2:	d002      	beq.n	80100da <USBD_SetConfig+0x3e>
 80100d4:	2b03      	cmp	r3, #3
 80100d6:	d029      	beq.n	801012c <USBD_SetConfig+0x90>
 80100d8:	e075      	b.n	80101c6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80100da:	4b44      	ldr	r3, [pc, #272]	@ (80101ec <USBD_SetConfig+0x150>)
 80100dc:	781b      	ldrb	r3, [r3, #0]
 80100de:	2b00      	cmp	r3, #0
 80100e0:	d020      	beq.n	8010124 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80100e2:	4b42      	ldr	r3, [pc, #264]	@ (80101ec <USBD_SetConfig+0x150>)
 80100e4:	781b      	ldrb	r3, [r3, #0]
 80100e6:	461a      	mov	r2, r3
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80100ec:	4b3f      	ldr	r3, [pc, #252]	@ (80101ec <USBD_SetConfig+0x150>)
 80100ee:	781b      	ldrb	r3, [r3, #0]
 80100f0:	4619      	mov	r1, r3
 80100f2:	6878      	ldr	r0, [r7, #4]
 80100f4:	f7fe ffb9 	bl	800f06a <USBD_SetClassConfig>
 80100f8:	4603      	mov	r3, r0
 80100fa:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80100fc:	7bfb      	ldrb	r3, [r7, #15]
 80100fe:	2b00      	cmp	r3, #0
 8010100:	d008      	beq.n	8010114 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8010102:	6839      	ldr	r1, [r7, #0]
 8010104:	6878      	ldr	r0, [r7, #4]
 8010106:	f000 f962 	bl	80103ce <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	2202      	movs	r2, #2
 801010e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8010112:	e065      	b.n	80101e0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8010114:	6878      	ldr	r0, [r7, #4]
 8010116:	f000 fa25 	bl	8010564 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	2203      	movs	r2, #3
 801011e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8010122:	e05d      	b.n	80101e0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8010124:	6878      	ldr	r0, [r7, #4]
 8010126:	f000 fa1d 	bl	8010564 <USBD_CtlSendStatus>
      break;
 801012a:	e059      	b.n	80101e0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 801012c:	4b2f      	ldr	r3, [pc, #188]	@ (80101ec <USBD_SetConfig+0x150>)
 801012e:	781b      	ldrb	r3, [r3, #0]
 8010130:	2b00      	cmp	r3, #0
 8010132:	d112      	bne.n	801015a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	2202      	movs	r2, #2
 8010138:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 801013c:	4b2b      	ldr	r3, [pc, #172]	@ (80101ec <USBD_SetConfig+0x150>)
 801013e:	781b      	ldrb	r3, [r3, #0]
 8010140:	461a      	mov	r2, r3
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8010146:	4b29      	ldr	r3, [pc, #164]	@ (80101ec <USBD_SetConfig+0x150>)
 8010148:	781b      	ldrb	r3, [r3, #0]
 801014a:	4619      	mov	r1, r3
 801014c:	6878      	ldr	r0, [r7, #4]
 801014e:	f7fe ffa8 	bl	800f0a2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8010152:	6878      	ldr	r0, [r7, #4]
 8010154:	f000 fa06 	bl	8010564 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8010158:	e042      	b.n	80101e0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 801015a:	4b24      	ldr	r3, [pc, #144]	@ (80101ec <USBD_SetConfig+0x150>)
 801015c:	781b      	ldrb	r3, [r3, #0]
 801015e:	461a      	mov	r2, r3
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	685b      	ldr	r3, [r3, #4]
 8010164:	429a      	cmp	r2, r3
 8010166:	d02a      	beq.n	80101be <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	685b      	ldr	r3, [r3, #4]
 801016c:	b2db      	uxtb	r3, r3
 801016e:	4619      	mov	r1, r3
 8010170:	6878      	ldr	r0, [r7, #4]
 8010172:	f7fe ff96 	bl	800f0a2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8010176:	4b1d      	ldr	r3, [pc, #116]	@ (80101ec <USBD_SetConfig+0x150>)
 8010178:	781b      	ldrb	r3, [r3, #0]
 801017a:	461a      	mov	r2, r3
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8010180:	4b1a      	ldr	r3, [pc, #104]	@ (80101ec <USBD_SetConfig+0x150>)
 8010182:	781b      	ldrb	r3, [r3, #0]
 8010184:	4619      	mov	r1, r3
 8010186:	6878      	ldr	r0, [r7, #4]
 8010188:	f7fe ff6f 	bl	800f06a <USBD_SetClassConfig>
 801018c:	4603      	mov	r3, r0
 801018e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8010190:	7bfb      	ldrb	r3, [r7, #15]
 8010192:	2b00      	cmp	r3, #0
 8010194:	d00f      	beq.n	80101b6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8010196:	6839      	ldr	r1, [r7, #0]
 8010198:	6878      	ldr	r0, [r7, #4]
 801019a:	f000 f918 	bl	80103ce <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	685b      	ldr	r3, [r3, #4]
 80101a2:	b2db      	uxtb	r3, r3
 80101a4:	4619      	mov	r1, r3
 80101a6:	6878      	ldr	r0, [r7, #4]
 80101a8:	f7fe ff7b 	bl	800f0a2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	2202      	movs	r2, #2
 80101b0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80101b4:	e014      	b.n	80101e0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80101b6:	6878      	ldr	r0, [r7, #4]
 80101b8:	f000 f9d4 	bl	8010564 <USBD_CtlSendStatus>
      break;
 80101bc:	e010      	b.n	80101e0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80101be:	6878      	ldr	r0, [r7, #4]
 80101c0:	f000 f9d0 	bl	8010564 <USBD_CtlSendStatus>
      break;
 80101c4:	e00c      	b.n	80101e0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80101c6:	6839      	ldr	r1, [r7, #0]
 80101c8:	6878      	ldr	r0, [r7, #4]
 80101ca:	f000 f900 	bl	80103ce <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80101ce:	4b07      	ldr	r3, [pc, #28]	@ (80101ec <USBD_SetConfig+0x150>)
 80101d0:	781b      	ldrb	r3, [r3, #0]
 80101d2:	4619      	mov	r1, r3
 80101d4:	6878      	ldr	r0, [r7, #4]
 80101d6:	f7fe ff64 	bl	800f0a2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80101da:	2303      	movs	r3, #3
 80101dc:	73fb      	strb	r3, [r7, #15]
      break;
 80101de:	bf00      	nop
  }

  return ret;
 80101e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80101e2:	4618      	mov	r0, r3
 80101e4:	3710      	adds	r7, #16
 80101e6:	46bd      	mov	sp, r7
 80101e8:	bd80      	pop	{r7, pc}
 80101ea:	bf00      	nop
 80101ec:	20003590 	.word	0x20003590

080101f0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80101f0:	b580      	push	{r7, lr}
 80101f2:	b082      	sub	sp, #8
 80101f4:	af00      	add	r7, sp, #0
 80101f6:	6078      	str	r0, [r7, #4]
 80101f8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80101fa:	683b      	ldr	r3, [r7, #0]
 80101fc:	88db      	ldrh	r3, [r3, #6]
 80101fe:	2b01      	cmp	r3, #1
 8010200:	d004      	beq.n	801020c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8010202:	6839      	ldr	r1, [r7, #0]
 8010204:	6878      	ldr	r0, [r7, #4]
 8010206:	f000 f8e2 	bl	80103ce <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801020a:	e023      	b.n	8010254 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010212:	b2db      	uxtb	r3, r3
 8010214:	2b02      	cmp	r3, #2
 8010216:	dc02      	bgt.n	801021e <USBD_GetConfig+0x2e>
 8010218:	2b00      	cmp	r3, #0
 801021a:	dc03      	bgt.n	8010224 <USBD_GetConfig+0x34>
 801021c:	e015      	b.n	801024a <USBD_GetConfig+0x5a>
 801021e:	2b03      	cmp	r3, #3
 8010220:	d00b      	beq.n	801023a <USBD_GetConfig+0x4a>
 8010222:	e012      	b.n	801024a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	2200      	movs	r2, #0
 8010228:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	3308      	adds	r3, #8
 801022e:	2201      	movs	r2, #1
 8010230:	4619      	mov	r1, r3
 8010232:	6878      	ldr	r0, [r7, #4]
 8010234:	f000 f93c 	bl	80104b0 <USBD_CtlSendData>
        break;
 8010238:	e00c      	b.n	8010254 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	3304      	adds	r3, #4
 801023e:	2201      	movs	r2, #1
 8010240:	4619      	mov	r1, r3
 8010242:	6878      	ldr	r0, [r7, #4]
 8010244:	f000 f934 	bl	80104b0 <USBD_CtlSendData>
        break;
 8010248:	e004      	b.n	8010254 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801024a:	6839      	ldr	r1, [r7, #0]
 801024c:	6878      	ldr	r0, [r7, #4]
 801024e:	f000 f8be 	bl	80103ce <USBD_CtlError>
        break;
 8010252:	bf00      	nop
}
 8010254:	bf00      	nop
 8010256:	3708      	adds	r7, #8
 8010258:	46bd      	mov	sp, r7
 801025a:	bd80      	pop	{r7, pc}

0801025c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801025c:	b580      	push	{r7, lr}
 801025e:	b082      	sub	sp, #8
 8010260:	af00      	add	r7, sp, #0
 8010262:	6078      	str	r0, [r7, #4]
 8010264:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801026c:	b2db      	uxtb	r3, r3
 801026e:	3b01      	subs	r3, #1
 8010270:	2b02      	cmp	r3, #2
 8010272:	d81e      	bhi.n	80102b2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8010274:	683b      	ldr	r3, [r7, #0]
 8010276:	88db      	ldrh	r3, [r3, #6]
 8010278:	2b02      	cmp	r3, #2
 801027a:	d004      	beq.n	8010286 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 801027c:	6839      	ldr	r1, [r7, #0]
 801027e:	6878      	ldr	r0, [r7, #4]
 8010280:	f000 f8a5 	bl	80103ce <USBD_CtlError>
        break;
 8010284:	e01a      	b.n	80102bc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	2201      	movs	r2, #1
 801028a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8010292:	2b00      	cmp	r3, #0
 8010294:	d005      	beq.n	80102a2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	68db      	ldr	r3, [r3, #12]
 801029a:	f043 0202 	orr.w	r2, r3, #2
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	330c      	adds	r3, #12
 80102a6:	2202      	movs	r2, #2
 80102a8:	4619      	mov	r1, r3
 80102aa:	6878      	ldr	r0, [r7, #4]
 80102ac:	f000 f900 	bl	80104b0 <USBD_CtlSendData>
      break;
 80102b0:	e004      	b.n	80102bc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80102b2:	6839      	ldr	r1, [r7, #0]
 80102b4:	6878      	ldr	r0, [r7, #4]
 80102b6:	f000 f88a 	bl	80103ce <USBD_CtlError>
      break;
 80102ba:	bf00      	nop
  }
}
 80102bc:	bf00      	nop
 80102be:	3708      	adds	r7, #8
 80102c0:	46bd      	mov	sp, r7
 80102c2:	bd80      	pop	{r7, pc}

080102c4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80102c4:	b580      	push	{r7, lr}
 80102c6:	b082      	sub	sp, #8
 80102c8:	af00      	add	r7, sp, #0
 80102ca:	6078      	str	r0, [r7, #4]
 80102cc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80102ce:	683b      	ldr	r3, [r7, #0]
 80102d0:	885b      	ldrh	r3, [r3, #2]
 80102d2:	2b01      	cmp	r3, #1
 80102d4:	d107      	bne.n	80102e6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	2201      	movs	r2, #1
 80102da:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80102de:	6878      	ldr	r0, [r7, #4]
 80102e0:	f000 f940 	bl	8010564 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80102e4:	e013      	b.n	801030e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80102e6:	683b      	ldr	r3, [r7, #0]
 80102e8:	885b      	ldrh	r3, [r3, #2]
 80102ea:	2b02      	cmp	r3, #2
 80102ec:	d10b      	bne.n	8010306 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80102ee:	683b      	ldr	r3, [r7, #0]
 80102f0:	889b      	ldrh	r3, [r3, #4]
 80102f2:	0a1b      	lsrs	r3, r3, #8
 80102f4:	b29b      	uxth	r3, r3
 80102f6:	b2da      	uxtb	r2, r3
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80102fe:	6878      	ldr	r0, [r7, #4]
 8010300:	f000 f930 	bl	8010564 <USBD_CtlSendStatus>
}
 8010304:	e003      	b.n	801030e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8010306:	6839      	ldr	r1, [r7, #0]
 8010308:	6878      	ldr	r0, [r7, #4]
 801030a:	f000 f860 	bl	80103ce <USBD_CtlError>
}
 801030e:	bf00      	nop
 8010310:	3708      	adds	r7, #8
 8010312:	46bd      	mov	sp, r7
 8010314:	bd80      	pop	{r7, pc}

08010316 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010316:	b580      	push	{r7, lr}
 8010318:	b082      	sub	sp, #8
 801031a:	af00      	add	r7, sp, #0
 801031c:	6078      	str	r0, [r7, #4]
 801031e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010326:	b2db      	uxtb	r3, r3
 8010328:	3b01      	subs	r3, #1
 801032a:	2b02      	cmp	r3, #2
 801032c:	d80b      	bhi.n	8010346 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801032e:	683b      	ldr	r3, [r7, #0]
 8010330:	885b      	ldrh	r3, [r3, #2]
 8010332:	2b01      	cmp	r3, #1
 8010334:	d10c      	bne.n	8010350 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	2200      	movs	r2, #0
 801033a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 801033e:	6878      	ldr	r0, [r7, #4]
 8010340:	f000 f910 	bl	8010564 <USBD_CtlSendStatus>
      }
      break;
 8010344:	e004      	b.n	8010350 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8010346:	6839      	ldr	r1, [r7, #0]
 8010348:	6878      	ldr	r0, [r7, #4]
 801034a:	f000 f840 	bl	80103ce <USBD_CtlError>
      break;
 801034e:	e000      	b.n	8010352 <USBD_ClrFeature+0x3c>
      break;
 8010350:	bf00      	nop
  }
}
 8010352:	bf00      	nop
 8010354:	3708      	adds	r7, #8
 8010356:	46bd      	mov	sp, r7
 8010358:	bd80      	pop	{r7, pc}

0801035a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801035a:	b580      	push	{r7, lr}
 801035c:	b084      	sub	sp, #16
 801035e:	af00      	add	r7, sp, #0
 8010360:	6078      	str	r0, [r7, #4]
 8010362:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8010364:	683b      	ldr	r3, [r7, #0]
 8010366:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8010368:	68fb      	ldr	r3, [r7, #12]
 801036a:	781a      	ldrb	r2, [r3, #0]
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8010370:	68fb      	ldr	r3, [r7, #12]
 8010372:	3301      	adds	r3, #1
 8010374:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8010376:	68fb      	ldr	r3, [r7, #12]
 8010378:	781a      	ldrb	r2, [r3, #0]
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 801037e:	68fb      	ldr	r3, [r7, #12]
 8010380:	3301      	adds	r3, #1
 8010382:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8010384:	68f8      	ldr	r0, [r7, #12]
 8010386:	f7ff fa16 	bl	800f7b6 <SWAPBYTE>
 801038a:	4603      	mov	r3, r0
 801038c:	461a      	mov	r2, r3
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8010392:	68fb      	ldr	r3, [r7, #12]
 8010394:	3301      	adds	r3, #1
 8010396:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8010398:	68fb      	ldr	r3, [r7, #12]
 801039a:	3301      	adds	r3, #1
 801039c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 801039e:	68f8      	ldr	r0, [r7, #12]
 80103a0:	f7ff fa09 	bl	800f7b6 <SWAPBYTE>
 80103a4:	4603      	mov	r3, r0
 80103a6:	461a      	mov	r2, r3
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80103ac:	68fb      	ldr	r3, [r7, #12]
 80103ae:	3301      	adds	r3, #1
 80103b0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80103b2:	68fb      	ldr	r3, [r7, #12]
 80103b4:	3301      	adds	r3, #1
 80103b6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80103b8:	68f8      	ldr	r0, [r7, #12]
 80103ba:	f7ff f9fc 	bl	800f7b6 <SWAPBYTE>
 80103be:	4603      	mov	r3, r0
 80103c0:	461a      	mov	r2, r3
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	80da      	strh	r2, [r3, #6]
}
 80103c6:	bf00      	nop
 80103c8:	3710      	adds	r7, #16
 80103ca:	46bd      	mov	sp, r7
 80103cc:	bd80      	pop	{r7, pc}

080103ce <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80103ce:	b580      	push	{r7, lr}
 80103d0:	b082      	sub	sp, #8
 80103d2:	af00      	add	r7, sp, #0
 80103d4:	6078      	str	r0, [r7, #4]
 80103d6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80103d8:	2180      	movs	r1, #128	@ 0x80
 80103da:	6878      	ldr	r0, [r7, #4]
 80103dc:	f003 fba6 	bl	8013b2c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80103e0:	2100      	movs	r1, #0
 80103e2:	6878      	ldr	r0, [r7, #4]
 80103e4:	f003 fba2 	bl	8013b2c <USBD_LL_StallEP>
}
 80103e8:	bf00      	nop
 80103ea:	3708      	adds	r7, #8
 80103ec:	46bd      	mov	sp, r7
 80103ee:	bd80      	pop	{r7, pc}

080103f0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80103f0:	b580      	push	{r7, lr}
 80103f2:	b086      	sub	sp, #24
 80103f4:	af00      	add	r7, sp, #0
 80103f6:	60f8      	str	r0, [r7, #12]
 80103f8:	60b9      	str	r1, [r7, #8]
 80103fa:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80103fc:	2300      	movs	r3, #0
 80103fe:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8010400:	68fb      	ldr	r3, [r7, #12]
 8010402:	2b00      	cmp	r3, #0
 8010404:	d036      	beq.n	8010474 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8010406:	68fb      	ldr	r3, [r7, #12]
 8010408:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 801040a:	6938      	ldr	r0, [r7, #16]
 801040c:	f000 f836 	bl	801047c <USBD_GetLen>
 8010410:	4603      	mov	r3, r0
 8010412:	3301      	adds	r3, #1
 8010414:	b29b      	uxth	r3, r3
 8010416:	005b      	lsls	r3, r3, #1
 8010418:	b29a      	uxth	r2, r3
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801041e:	7dfb      	ldrb	r3, [r7, #23]
 8010420:	68ba      	ldr	r2, [r7, #8]
 8010422:	4413      	add	r3, r2
 8010424:	687a      	ldr	r2, [r7, #4]
 8010426:	7812      	ldrb	r2, [r2, #0]
 8010428:	701a      	strb	r2, [r3, #0]
  idx++;
 801042a:	7dfb      	ldrb	r3, [r7, #23]
 801042c:	3301      	adds	r3, #1
 801042e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8010430:	7dfb      	ldrb	r3, [r7, #23]
 8010432:	68ba      	ldr	r2, [r7, #8]
 8010434:	4413      	add	r3, r2
 8010436:	2203      	movs	r2, #3
 8010438:	701a      	strb	r2, [r3, #0]
  idx++;
 801043a:	7dfb      	ldrb	r3, [r7, #23]
 801043c:	3301      	adds	r3, #1
 801043e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8010440:	e013      	b.n	801046a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8010442:	7dfb      	ldrb	r3, [r7, #23]
 8010444:	68ba      	ldr	r2, [r7, #8]
 8010446:	4413      	add	r3, r2
 8010448:	693a      	ldr	r2, [r7, #16]
 801044a:	7812      	ldrb	r2, [r2, #0]
 801044c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801044e:	693b      	ldr	r3, [r7, #16]
 8010450:	3301      	adds	r3, #1
 8010452:	613b      	str	r3, [r7, #16]
    idx++;
 8010454:	7dfb      	ldrb	r3, [r7, #23]
 8010456:	3301      	adds	r3, #1
 8010458:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 801045a:	7dfb      	ldrb	r3, [r7, #23]
 801045c:	68ba      	ldr	r2, [r7, #8]
 801045e:	4413      	add	r3, r2
 8010460:	2200      	movs	r2, #0
 8010462:	701a      	strb	r2, [r3, #0]
    idx++;
 8010464:	7dfb      	ldrb	r3, [r7, #23]
 8010466:	3301      	adds	r3, #1
 8010468:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 801046a:	693b      	ldr	r3, [r7, #16]
 801046c:	781b      	ldrb	r3, [r3, #0]
 801046e:	2b00      	cmp	r3, #0
 8010470:	d1e7      	bne.n	8010442 <USBD_GetString+0x52>
 8010472:	e000      	b.n	8010476 <USBD_GetString+0x86>
    return;
 8010474:	bf00      	nop
  }
}
 8010476:	3718      	adds	r7, #24
 8010478:	46bd      	mov	sp, r7
 801047a:	bd80      	pop	{r7, pc}

0801047c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801047c:	b480      	push	{r7}
 801047e:	b085      	sub	sp, #20
 8010480:	af00      	add	r7, sp, #0
 8010482:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8010484:	2300      	movs	r3, #0
 8010486:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 801048c:	e005      	b.n	801049a <USBD_GetLen+0x1e>
  {
    len++;
 801048e:	7bfb      	ldrb	r3, [r7, #15]
 8010490:	3301      	adds	r3, #1
 8010492:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8010494:	68bb      	ldr	r3, [r7, #8]
 8010496:	3301      	adds	r3, #1
 8010498:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 801049a:	68bb      	ldr	r3, [r7, #8]
 801049c:	781b      	ldrb	r3, [r3, #0]
 801049e:	2b00      	cmp	r3, #0
 80104a0:	d1f5      	bne.n	801048e <USBD_GetLen+0x12>
  }

  return len;
 80104a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80104a4:	4618      	mov	r0, r3
 80104a6:	3714      	adds	r7, #20
 80104a8:	46bd      	mov	sp, r7
 80104aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104ae:	4770      	bx	lr

080104b0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80104b0:	b580      	push	{r7, lr}
 80104b2:	b084      	sub	sp, #16
 80104b4:	af00      	add	r7, sp, #0
 80104b6:	60f8      	str	r0, [r7, #12]
 80104b8:	60b9      	str	r1, [r7, #8]
 80104ba:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80104bc:	68fb      	ldr	r3, [r7, #12]
 80104be:	2202      	movs	r2, #2
 80104c0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80104c4:	68fb      	ldr	r3, [r7, #12]
 80104c6:	687a      	ldr	r2, [r7, #4]
 80104c8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80104ca:	68fb      	ldr	r3, [r7, #12]
 80104cc:	687a      	ldr	r2, [r7, #4]
 80104ce:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	68ba      	ldr	r2, [r7, #8]
 80104d4:	2100      	movs	r1, #0
 80104d6:	68f8      	ldr	r0, [r7, #12]
 80104d8:	f003 fbf6 	bl	8013cc8 <USBD_LL_Transmit>

  return USBD_OK;
 80104dc:	2300      	movs	r3, #0
}
 80104de:	4618      	mov	r0, r3
 80104e0:	3710      	adds	r7, #16
 80104e2:	46bd      	mov	sp, r7
 80104e4:	bd80      	pop	{r7, pc}

080104e6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80104e6:	b580      	push	{r7, lr}
 80104e8:	b084      	sub	sp, #16
 80104ea:	af00      	add	r7, sp, #0
 80104ec:	60f8      	str	r0, [r7, #12]
 80104ee:	60b9      	str	r1, [r7, #8]
 80104f0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	68ba      	ldr	r2, [r7, #8]
 80104f6:	2100      	movs	r1, #0
 80104f8:	68f8      	ldr	r0, [r7, #12]
 80104fa:	f003 fbe5 	bl	8013cc8 <USBD_LL_Transmit>

  return USBD_OK;
 80104fe:	2300      	movs	r3, #0
}
 8010500:	4618      	mov	r0, r3
 8010502:	3710      	adds	r7, #16
 8010504:	46bd      	mov	sp, r7
 8010506:	bd80      	pop	{r7, pc}

08010508 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8010508:	b580      	push	{r7, lr}
 801050a:	b084      	sub	sp, #16
 801050c:	af00      	add	r7, sp, #0
 801050e:	60f8      	str	r0, [r7, #12]
 8010510:	60b9      	str	r1, [r7, #8]
 8010512:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8010514:	68fb      	ldr	r3, [r7, #12]
 8010516:	2203      	movs	r2, #3
 8010518:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 801051c:	68fb      	ldr	r3, [r7, #12]
 801051e:	687a      	ldr	r2, [r7, #4]
 8010520:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8010524:	68fb      	ldr	r3, [r7, #12]
 8010526:	687a      	ldr	r2, [r7, #4]
 8010528:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	68ba      	ldr	r2, [r7, #8]
 8010530:	2100      	movs	r1, #0
 8010532:	68f8      	ldr	r0, [r7, #12]
 8010534:	f003 fc00 	bl	8013d38 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010538:	2300      	movs	r3, #0
}
 801053a:	4618      	mov	r0, r3
 801053c:	3710      	adds	r7, #16
 801053e:	46bd      	mov	sp, r7
 8010540:	bd80      	pop	{r7, pc}

08010542 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8010542:	b580      	push	{r7, lr}
 8010544:	b084      	sub	sp, #16
 8010546:	af00      	add	r7, sp, #0
 8010548:	60f8      	str	r0, [r7, #12]
 801054a:	60b9      	str	r1, [r7, #8]
 801054c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	68ba      	ldr	r2, [r7, #8]
 8010552:	2100      	movs	r1, #0
 8010554:	68f8      	ldr	r0, [r7, #12]
 8010556:	f003 fbef 	bl	8013d38 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801055a:	2300      	movs	r3, #0
}
 801055c:	4618      	mov	r0, r3
 801055e:	3710      	adds	r7, #16
 8010560:	46bd      	mov	sp, r7
 8010562:	bd80      	pop	{r7, pc}

08010564 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8010564:	b580      	push	{r7, lr}
 8010566:	b082      	sub	sp, #8
 8010568:	af00      	add	r7, sp, #0
 801056a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	2204      	movs	r2, #4
 8010570:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8010574:	2300      	movs	r3, #0
 8010576:	2200      	movs	r2, #0
 8010578:	2100      	movs	r1, #0
 801057a:	6878      	ldr	r0, [r7, #4]
 801057c:	f003 fba4 	bl	8013cc8 <USBD_LL_Transmit>

  return USBD_OK;
 8010580:	2300      	movs	r3, #0
}
 8010582:	4618      	mov	r0, r3
 8010584:	3708      	adds	r7, #8
 8010586:	46bd      	mov	sp, r7
 8010588:	bd80      	pop	{r7, pc}

0801058a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801058a:	b580      	push	{r7, lr}
 801058c:	b082      	sub	sp, #8
 801058e:	af00      	add	r7, sp, #0
 8010590:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	2205      	movs	r2, #5
 8010596:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801059a:	2300      	movs	r3, #0
 801059c:	2200      	movs	r2, #0
 801059e:	2100      	movs	r1, #0
 80105a0:	6878      	ldr	r0, [r7, #4]
 80105a2:	f003 fbc9 	bl	8013d38 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80105a6:	2300      	movs	r3, #0
}
 80105a8:	4618      	mov	r0, r3
 80105aa:	3708      	adds	r7, #8
 80105ac:	46bd      	mov	sp, r7
 80105ae:	bd80      	pop	{r7, pc}

080105b0 <__NVIC_SetPriority>:
{
 80105b0:	b480      	push	{r7}
 80105b2:	b083      	sub	sp, #12
 80105b4:	af00      	add	r7, sp, #0
 80105b6:	4603      	mov	r3, r0
 80105b8:	6039      	str	r1, [r7, #0]
 80105ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80105bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80105c0:	2b00      	cmp	r3, #0
 80105c2:	db0a      	blt.n	80105da <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80105c4:	683b      	ldr	r3, [r7, #0]
 80105c6:	b2da      	uxtb	r2, r3
 80105c8:	490c      	ldr	r1, [pc, #48]	@ (80105fc <__NVIC_SetPriority+0x4c>)
 80105ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80105ce:	0112      	lsls	r2, r2, #4
 80105d0:	b2d2      	uxtb	r2, r2
 80105d2:	440b      	add	r3, r1
 80105d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80105d8:	e00a      	b.n	80105f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80105da:	683b      	ldr	r3, [r7, #0]
 80105dc:	b2da      	uxtb	r2, r3
 80105de:	4908      	ldr	r1, [pc, #32]	@ (8010600 <__NVIC_SetPriority+0x50>)
 80105e0:	79fb      	ldrb	r3, [r7, #7]
 80105e2:	f003 030f 	and.w	r3, r3, #15
 80105e6:	3b04      	subs	r3, #4
 80105e8:	0112      	lsls	r2, r2, #4
 80105ea:	b2d2      	uxtb	r2, r2
 80105ec:	440b      	add	r3, r1
 80105ee:	761a      	strb	r2, [r3, #24]
}
 80105f0:	bf00      	nop
 80105f2:	370c      	adds	r7, #12
 80105f4:	46bd      	mov	sp, r7
 80105f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105fa:	4770      	bx	lr
 80105fc:	e000e100 	.word	0xe000e100
 8010600:	e000ed00 	.word	0xe000ed00

08010604 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8010604:	b580      	push	{r7, lr}
 8010606:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8010608:	4b05      	ldr	r3, [pc, #20]	@ (8010620 <SysTick_Handler+0x1c>)
 801060a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 801060c:	f001 fd46 	bl	801209c <xTaskGetSchedulerState>
 8010610:	4603      	mov	r3, r0
 8010612:	2b01      	cmp	r3, #1
 8010614:	d001      	beq.n	801061a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8010616:	f002 fb3f 	bl	8012c98 <xPortSysTickHandler>
  }
}
 801061a:	bf00      	nop
 801061c:	bd80      	pop	{r7, pc}
 801061e:	bf00      	nop
 8010620:	e000e010 	.word	0xe000e010

08010624 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8010624:	b580      	push	{r7, lr}
 8010626:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8010628:	2100      	movs	r1, #0
 801062a:	f06f 0004 	mvn.w	r0, #4
 801062e:	f7ff ffbf 	bl	80105b0 <__NVIC_SetPriority>
#endif
}
 8010632:	bf00      	nop
 8010634:	bd80      	pop	{r7, pc}
	...

08010638 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8010638:	b480      	push	{r7}
 801063a:	b083      	sub	sp, #12
 801063c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801063e:	f3ef 8305 	mrs	r3, IPSR
 8010642:	603b      	str	r3, [r7, #0]
  return(result);
 8010644:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8010646:	2b00      	cmp	r3, #0
 8010648:	d003      	beq.n	8010652 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 801064a:	f06f 0305 	mvn.w	r3, #5
 801064e:	607b      	str	r3, [r7, #4]
 8010650:	e00c      	b.n	801066c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8010652:	4b0a      	ldr	r3, [pc, #40]	@ (801067c <osKernelInitialize+0x44>)
 8010654:	681b      	ldr	r3, [r3, #0]
 8010656:	2b00      	cmp	r3, #0
 8010658:	d105      	bne.n	8010666 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 801065a:	4b08      	ldr	r3, [pc, #32]	@ (801067c <osKernelInitialize+0x44>)
 801065c:	2201      	movs	r2, #1
 801065e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8010660:	2300      	movs	r3, #0
 8010662:	607b      	str	r3, [r7, #4]
 8010664:	e002      	b.n	801066c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8010666:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801066a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 801066c:	687b      	ldr	r3, [r7, #4]
}
 801066e:	4618      	mov	r0, r3
 8010670:	370c      	adds	r7, #12
 8010672:	46bd      	mov	sp, r7
 8010674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010678:	4770      	bx	lr
 801067a:	bf00      	nop
 801067c:	20003594 	.word	0x20003594

08010680 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8010680:	b580      	push	{r7, lr}
 8010682:	b082      	sub	sp, #8
 8010684:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010686:	f3ef 8305 	mrs	r3, IPSR
 801068a:	603b      	str	r3, [r7, #0]
  return(result);
 801068c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801068e:	2b00      	cmp	r3, #0
 8010690:	d003      	beq.n	801069a <osKernelStart+0x1a>
    stat = osErrorISR;
 8010692:	f06f 0305 	mvn.w	r3, #5
 8010696:	607b      	str	r3, [r7, #4]
 8010698:	e010      	b.n	80106bc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 801069a:	4b0b      	ldr	r3, [pc, #44]	@ (80106c8 <osKernelStart+0x48>)
 801069c:	681b      	ldr	r3, [r3, #0]
 801069e:	2b01      	cmp	r3, #1
 80106a0:	d109      	bne.n	80106b6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80106a2:	f7ff ffbf 	bl	8010624 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80106a6:	4b08      	ldr	r3, [pc, #32]	@ (80106c8 <osKernelStart+0x48>)
 80106a8:	2202      	movs	r2, #2
 80106aa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80106ac:	f001 f892 	bl	80117d4 <vTaskStartScheduler>
      stat = osOK;
 80106b0:	2300      	movs	r3, #0
 80106b2:	607b      	str	r3, [r7, #4]
 80106b4:	e002      	b.n	80106bc <osKernelStart+0x3c>
    } else {
      stat = osError;
 80106b6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80106ba:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80106bc:	687b      	ldr	r3, [r7, #4]
}
 80106be:	4618      	mov	r0, r3
 80106c0:	3708      	adds	r7, #8
 80106c2:	46bd      	mov	sp, r7
 80106c4:	bd80      	pop	{r7, pc}
 80106c6:	bf00      	nop
 80106c8:	20003594 	.word	0x20003594

080106cc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80106cc:	b580      	push	{r7, lr}
 80106ce:	b08e      	sub	sp, #56	@ 0x38
 80106d0:	af04      	add	r7, sp, #16
 80106d2:	60f8      	str	r0, [r7, #12]
 80106d4:	60b9      	str	r1, [r7, #8]
 80106d6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80106d8:	2300      	movs	r3, #0
 80106da:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80106dc:	f3ef 8305 	mrs	r3, IPSR
 80106e0:	617b      	str	r3, [r7, #20]
  return(result);
 80106e2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80106e4:	2b00      	cmp	r3, #0
 80106e6:	d17e      	bne.n	80107e6 <osThreadNew+0x11a>
 80106e8:	68fb      	ldr	r3, [r7, #12]
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	d07b      	beq.n	80107e6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80106ee:	2380      	movs	r3, #128	@ 0x80
 80106f0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80106f2:	2318      	movs	r3, #24
 80106f4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80106f6:	2300      	movs	r3, #0
 80106f8:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80106fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80106fe:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	2b00      	cmp	r3, #0
 8010704:	d045      	beq.n	8010792 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	681b      	ldr	r3, [r3, #0]
 801070a:	2b00      	cmp	r3, #0
 801070c:	d002      	beq.n	8010714 <osThreadNew+0x48>
        name = attr->name;
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	681b      	ldr	r3, [r3, #0]
 8010712:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	699b      	ldr	r3, [r3, #24]
 8010718:	2b00      	cmp	r3, #0
 801071a:	d002      	beq.n	8010722 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	699b      	ldr	r3, [r3, #24]
 8010720:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8010722:	69fb      	ldr	r3, [r7, #28]
 8010724:	2b00      	cmp	r3, #0
 8010726:	d008      	beq.n	801073a <osThreadNew+0x6e>
 8010728:	69fb      	ldr	r3, [r7, #28]
 801072a:	2b38      	cmp	r3, #56	@ 0x38
 801072c:	d805      	bhi.n	801073a <osThreadNew+0x6e>
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	685b      	ldr	r3, [r3, #4]
 8010732:	f003 0301 	and.w	r3, r3, #1
 8010736:	2b00      	cmp	r3, #0
 8010738:	d001      	beq.n	801073e <osThreadNew+0x72>
        return (NULL);
 801073a:	2300      	movs	r3, #0
 801073c:	e054      	b.n	80107e8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	695b      	ldr	r3, [r3, #20]
 8010742:	2b00      	cmp	r3, #0
 8010744:	d003      	beq.n	801074e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	695b      	ldr	r3, [r3, #20]
 801074a:	089b      	lsrs	r3, r3, #2
 801074c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	689b      	ldr	r3, [r3, #8]
 8010752:	2b00      	cmp	r3, #0
 8010754:	d00e      	beq.n	8010774 <osThreadNew+0xa8>
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	68db      	ldr	r3, [r3, #12]
 801075a:	2ba7      	cmp	r3, #167	@ 0xa7
 801075c:	d90a      	bls.n	8010774 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8010762:	2b00      	cmp	r3, #0
 8010764:	d006      	beq.n	8010774 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	695b      	ldr	r3, [r3, #20]
 801076a:	2b00      	cmp	r3, #0
 801076c:	d002      	beq.n	8010774 <osThreadNew+0xa8>
        mem = 1;
 801076e:	2301      	movs	r3, #1
 8010770:	61bb      	str	r3, [r7, #24]
 8010772:	e010      	b.n	8010796 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	689b      	ldr	r3, [r3, #8]
 8010778:	2b00      	cmp	r3, #0
 801077a:	d10c      	bne.n	8010796 <osThreadNew+0xca>
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	68db      	ldr	r3, [r3, #12]
 8010780:	2b00      	cmp	r3, #0
 8010782:	d108      	bne.n	8010796 <osThreadNew+0xca>
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	691b      	ldr	r3, [r3, #16]
 8010788:	2b00      	cmp	r3, #0
 801078a:	d104      	bne.n	8010796 <osThreadNew+0xca>
          mem = 0;
 801078c:	2300      	movs	r3, #0
 801078e:	61bb      	str	r3, [r7, #24]
 8010790:	e001      	b.n	8010796 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8010792:	2300      	movs	r3, #0
 8010794:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8010796:	69bb      	ldr	r3, [r7, #24]
 8010798:	2b01      	cmp	r3, #1
 801079a:	d110      	bne.n	80107be <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80107a0:	687a      	ldr	r2, [r7, #4]
 80107a2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80107a4:	9202      	str	r2, [sp, #8]
 80107a6:	9301      	str	r3, [sp, #4]
 80107a8:	69fb      	ldr	r3, [r7, #28]
 80107aa:	9300      	str	r3, [sp, #0]
 80107ac:	68bb      	ldr	r3, [r7, #8]
 80107ae:	6a3a      	ldr	r2, [r7, #32]
 80107b0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80107b2:	68f8      	ldr	r0, [r7, #12]
 80107b4:	f000 fe1a 	bl	80113ec <xTaskCreateStatic>
 80107b8:	4603      	mov	r3, r0
 80107ba:	613b      	str	r3, [r7, #16]
 80107bc:	e013      	b.n	80107e6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80107be:	69bb      	ldr	r3, [r7, #24]
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	d110      	bne.n	80107e6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80107c4:	6a3b      	ldr	r3, [r7, #32]
 80107c6:	b29a      	uxth	r2, r3
 80107c8:	f107 0310 	add.w	r3, r7, #16
 80107cc:	9301      	str	r3, [sp, #4]
 80107ce:	69fb      	ldr	r3, [r7, #28]
 80107d0:	9300      	str	r3, [sp, #0]
 80107d2:	68bb      	ldr	r3, [r7, #8]
 80107d4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80107d6:	68f8      	ldr	r0, [r7, #12]
 80107d8:	f000 fe68 	bl	80114ac <xTaskCreate>
 80107dc:	4603      	mov	r3, r0
 80107de:	2b01      	cmp	r3, #1
 80107e0:	d001      	beq.n	80107e6 <osThreadNew+0x11a>
            hTask = NULL;
 80107e2:	2300      	movs	r3, #0
 80107e4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80107e6:	693b      	ldr	r3, [r7, #16]
}
 80107e8:	4618      	mov	r0, r3
 80107ea:	3728      	adds	r7, #40	@ 0x28
 80107ec:	46bd      	mov	sp, r7
 80107ee:	bd80      	pop	{r7, pc}

080107f0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80107f0:	b580      	push	{r7, lr}
 80107f2:	b084      	sub	sp, #16
 80107f4:	af00      	add	r7, sp, #0
 80107f6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80107f8:	f3ef 8305 	mrs	r3, IPSR
 80107fc:	60bb      	str	r3, [r7, #8]
  return(result);
 80107fe:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8010800:	2b00      	cmp	r3, #0
 8010802:	d003      	beq.n	801080c <osDelay+0x1c>
    stat = osErrorISR;
 8010804:	f06f 0305 	mvn.w	r3, #5
 8010808:	60fb      	str	r3, [r7, #12]
 801080a:	e007      	b.n	801081c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 801080c:	2300      	movs	r3, #0
 801080e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	2b00      	cmp	r3, #0
 8010814:	d002      	beq.n	801081c <osDelay+0x2c>
      vTaskDelay(ticks);
 8010816:	6878      	ldr	r0, [r7, #4]
 8010818:	f000 ffa6 	bl	8011768 <vTaskDelay>
    }
  }

  return (stat);
 801081c:	68fb      	ldr	r3, [r7, #12]
}
 801081e:	4618      	mov	r0, r3
 8010820:	3710      	adds	r7, #16
 8010822:	46bd      	mov	sp, r7
 8010824:	bd80      	pop	{r7, pc}
	...

08010828 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8010828:	b480      	push	{r7}
 801082a:	b085      	sub	sp, #20
 801082c:	af00      	add	r7, sp, #0
 801082e:	60f8      	str	r0, [r7, #12]
 8010830:	60b9      	str	r1, [r7, #8]
 8010832:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8010834:	68fb      	ldr	r3, [r7, #12]
 8010836:	4a07      	ldr	r2, [pc, #28]	@ (8010854 <vApplicationGetIdleTaskMemory+0x2c>)
 8010838:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 801083a:	68bb      	ldr	r3, [r7, #8]
 801083c:	4a06      	ldr	r2, [pc, #24]	@ (8010858 <vApplicationGetIdleTaskMemory+0x30>)
 801083e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	2280      	movs	r2, #128	@ 0x80
 8010844:	601a      	str	r2, [r3, #0]
}
 8010846:	bf00      	nop
 8010848:	3714      	adds	r7, #20
 801084a:	46bd      	mov	sp, r7
 801084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010850:	4770      	bx	lr
 8010852:	bf00      	nop
 8010854:	20003598 	.word	0x20003598
 8010858:	20003640 	.word	0x20003640

0801085c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 801085c:	b480      	push	{r7}
 801085e:	b085      	sub	sp, #20
 8010860:	af00      	add	r7, sp, #0
 8010862:	60f8      	str	r0, [r7, #12]
 8010864:	60b9      	str	r1, [r7, #8]
 8010866:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8010868:	68fb      	ldr	r3, [r7, #12]
 801086a:	4a07      	ldr	r2, [pc, #28]	@ (8010888 <vApplicationGetTimerTaskMemory+0x2c>)
 801086c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 801086e:	68bb      	ldr	r3, [r7, #8]
 8010870:	4a06      	ldr	r2, [pc, #24]	@ (801088c <vApplicationGetTimerTaskMemory+0x30>)
 8010872:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801087a:	601a      	str	r2, [r3, #0]
}
 801087c:	bf00      	nop
 801087e:	3714      	adds	r7, #20
 8010880:	46bd      	mov	sp, r7
 8010882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010886:	4770      	bx	lr
 8010888:	20003840 	.word	0x20003840
 801088c:	200038e8 	.word	0x200038e8

08010890 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8010890:	b480      	push	{r7}
 8010892:	b083      	sub	sp, #12
 8010894:	af00      	add	r7, sp, #0
 8010896:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	f103 0208 	add.w	r2, r3, #8
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80108a8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	f103 0208 	add.w	r2, r3, #8
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	f103 0208 	add.w	r2, r3, #8
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	2200      	movs	r2, #0
 80108c2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80108c4:	bf00      	nop
 80108c6:	370c      	adds	r7, #12
 80108c8:	46bd      	mov	sp, r7
 80108ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108ce:	4770      	bx	lr

080108d0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80108d0:	b480      	push	{r7}
 80108d2:	b083      	sub	sp, #12
 80108d4:	af00      	add	r7, sp, #0
 80108d6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	2200      	movs	r2, #0
 80108dc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80108de:	bf00      	nop
 80108e0:	370c      	adds	r7, #12
 80108e2:	46bd      	mov	sp, r7
 80108e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108e8:	4770      	bx	lr

080108ea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80108ea:	b480      	push	{r7}
 80108ec:	b085      	sub	sp, #20
 80108ee:	af00      	add	r7, sp, #0
 80108f0:	6078      	str	r0, [r7, #4]
 80108f2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	685b      	ldr	r3, [r3, #4]
 80108f8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80108fa:	683b      	ldr	r3, [r7, #0]
 80108fc:	68fa      	ldr	r2, [r7, #12]
 80108fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8010900:	68fb      	ldr	r3, [r7, #12]
 8010902:	689a      	ldr	r2, [r3, #8]
 8010904:	683b      	ldr	r3, [r7, #0]
 8010906:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8010908:	68fb      	ldr	r3, [r7, #12]
 801090a:	689b      	ldr	r3, [r3, #8]
 801090c:	683a      	ldr	r2, [r7, #0]
 801090e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8010910:	68fb      	ldr	r3, [r7, #12]
 8010912:	683a      	ldr	r2, [r7, #0]
 8010914:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8010916:	683b      	ldr	r3, [r7, #0]
 8010918:	687a      	ldr	r2, [r7, #4]
 801091a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	681b      	ldr	r3, [r3, #0]
 8010920:	1c5a      	adds	r2, r3, #1
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	601a      	str	r2, [r3, #0]
}
 8010926:	bf00      	nop
 8010928:	3714      	adds	r7, #20
 801092a:	46bd      	mov	sp, r7
 801092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010930:	4770      	bx	lr

08010932 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010932:	b480      	push	{r7}
 8010934:	b085      	sub	sp, #20
 8010936:	af00      	add	r7, sp, #0
 8010938:	6078      	str	r0, [r7, #4]
 801093a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 801093c:	683b      	ldr	r3, [r7, #0]
 801093e:	681b      	ldr	r3, [r3, #0]
 8010940:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8010942:	68bb      	ldr	r3, [r7, #8]
 8010944:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010948:	d103      	bne.n	8010952 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	691b      	ldr	r3, [r3, #16]
 801094e:	60fb      	str	r3, [r7, #12]
 8010950:	e00c      	b.n	801096c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	3308      	adds	r3, #8
 8010956:	60fb      	str	r3, [r7, #12]
 8010958:	e002      	b.n	8010960 <vListInsert+0x2e>
 801095a:	68fb      	ldr	r3, [r7, #12]
 801095c:	685b      	ldr	r3, [r3, #4]
 801095e:	60fb      	str	r3, [r7, #12]
 8010960:	68fb      	ldr	r3, [r7, #12]
 8010962:	685b      	ldr	r3, [r3, #4]
 8010964:	681b      	ldr	r3, [r3, #0]
 8010966:	68ba      	ldr	r2, [r7, #8]
 8010968:	429a      	cmp	r2, r3
 801096a:	d2f6      	bcs.n	801095a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 801096c:	68fb      	ldr	r3, [r7, #12]
 801096e:	685a      	ldr	r2, [r3, #4]
 8010970:	683b      	ldr	r3, [r7, #0]
 8010972:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8010974:	683b      	ldr	r3, [r7, #0]
 8010976:	685b      	ldr	r3, [r3, #4]
 8010978:	683a      	ldr	r2, [r7, #0]
 801097a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 801097c:	683b      	ldr	r3, [r7, #0]
 801097e:	68fa      	ldr	r2, [r7, #12]
 8010980:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8010982:	68fb      	ldr	r3, [r7, #12]
 8010984:	683a      	ldr	r2, [r7, #0]
 8010986:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8010988:	683b      	ldr	r3, [r7, #0]
 801098a:	687a      	ldr	r2, [r7, #4]
 801098c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	681b      	ldr	r3, [r3, #0]
 8010992:	1c5a      	adds	r2, r3, #1
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	601a      	str	r2, [r3, #0]
}
 8010998:	bf00      	nop
 801099a:	3714      	adds	r7, #20
 801099c:	46bd      	mov	sp, r7
 801099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109a2:	4770      	bx	lr

080109a4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80109a4:	b480      	push	{r7}
 80109a6:	b085      	sub	sp, #20
 80109a8:	af00      	add	r7, sp, #0
 80109aa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	691b      	ldr	r3, [r3, #16]
 80109b0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	685b      	ldr	r3, [r3, #4]
 80109b6:	687a      	ldr	r2, [r7, #4]
 80109b8:	6892      	ldr	r2, [r2, #8]
 80109ba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	689b      	ldr	r3, [r3, #8]
 80109c0:	687a      	ldr	r2, [r7, #4]
 80109c2:	6852      	ldr	r2, [r2, #4]
 80109c4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80109c6:	68fb      	ldr	r3, [r7, #12]
 80109c8:	685b      	ldr	r3, [r3, #4]
 80109ca:	687a      	ldr	r2, [r7, #4]
 80109cc:	429a      	cmp	r2, r3
 80109ce:	d103      	bne.n	80109d8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	689a      	ldr	r2, [r3, #8]
 80109d4:	68fb      	ldr	r3, [r7, #12]
 80109d6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	2200      	movs	r2, #0
 80109dc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80109de:	68fb      	ldr	r3, [r7, #12]
 80109e0:	681b      	ldr	r3, [r3, #0]
 80109e2:	1e5a      	subs	r2, r3, #1
 80109e4:	68fb      	ldr	r3, [r7, #12]
 80109e6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80109e8:	68fb      	ldr	r3, [r7, #12]
 80109ea:	681b      	ldr	r3, [r3, #0]
}
 80109ec:	4618      	mov	r0, r3
 80109ee:	3714      	adds	r7, #20
 80109f0:	46bd      	mov	sp, r7
 80109f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109f6:	4770      	bx	lr

080109f8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80109f8:	b580      	push	{r7, lr}
 80109fa:	b084      	sub	sp, #16
 80109fc:	af00      	add	r7, sp, #0
 80109fe:	6078      	str	r0, [r7, #4]
 8010a00:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8010a06:	68fb      	ldr	r3, [r7, #12]
 8010a08:	2b00      	cmp	r3, #0
 8010a0a:	d10b      	bne.n	8010a24 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8010a0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010a10:	f383 8811 	msr	BASEPRI, r3
 8010a14:	f3bf 8f6f 	isb	sy
 8010a18:	f3bf 8f4f 	dsb	sy
 8010a1c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8010a1e:	bf00      	nop
 8010a20:	bf00      	nop
 8010a22:	e7fd      	b.n	8010a20 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8010a24:	f002 f8a8 	bl	8012b78 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010a28:	68fb      	ldr	r3, [r7, #12]
 8010a2a:	681a      	ldr	r2, [r3, #0]
 8010a2c:	68fb      	ldr	r3, [r7, #12]
 8010a2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010a30:	68f9      	ldr	r1, [r7, #12]
 8010a32:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8010a34:	fb01 f303 	mul.w	r3, r1, r3
 8010a38:	441a      	add	r2, r3
 8010a3a:	68fb      	ldr	r3, [r7, #12]
 8010a3c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8010a3e:	68fb      	ldr	r3, [r7, #12]
 8010a40:	2200      	movs	r2, #0
 8010a42:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8010a44:	68fb      	ldr	r3, [r7, #12]
 8010a46:	681a      	ldr	r2, [r3, #0]
 8010a48:	68fb      	ldr	r3, [r7, #12]
 8010a4a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010a4c:	68fb      	ldr	r3, [r7, #12]
 8010a4e:	681a      	ldr	r2, [r3, #0]
 8010a50:	68fb      	ldr	r3, [r7, #12]
 8010a52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010a54:	3b01      	subs	r3, #1
 8010a56:	68f9      	ldr	r1, [r7, #12]
 8010a58:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8010a5a:	fb01 f303 	mul.w	r3, r1, r3
 8010a5e:	441a      	add	r2, r3
 8010a60:	68fb      	ldr	r3, [r7, #12]
 8010a62:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8010a64:	68fb      	ldr	r3, [r7, #12]
 8010a66:	22ff      	movs	r2, #255	@ 0xff
 8010a68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8010a6c:	68fb      	ldr	r3, [r7, #12]
 8010a6e:	22ff      	movs	r2, #255	@ 0xff
 8010a70:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8010a74:	683b      	ldr	r3, [r7, #0]
 8010a76:	2b00      	cmp	r3, #0
 8010a78:	d114      	bne.n	8010aa4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010a7a:	68fb      	ldr	r3, [r7, #12]
 8010a7c:	691b      	ldr	r3, [r3, #16]
 8010a7e:	2b00      	cmp	r3, #0
 8010a80:	d01a      	beq.n	8010ab8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010a82:	68fb      	ldr	r3, [r7, #12]
 8010a84:	3310      	adds	r3, #16
 8010a86:	4618      	mov	r0, r3
 8010a88:	f001 f942 	bl	8011d10 <xTaskRemoveFromEventList>
 8010a8c:	4603      	mov	r3, r0
 8010a8e:	2b00      	cmp	r3, #0
 8010a90:	d012      	beq.n	8010ab8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8010a92:	4b0d      	ldr	r3, [pc, #52]	@ (8010ac8 <xQueueGenericReset+0xd0>)
 8010a94:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010a98:	601a      	str	r2, [r3, #0]
 8010a9a:	f3bf 8f4f 	dsb	sy
 8010a9e:	f3bf 8f6f 	isb	sy
 8010aa2:	e009      	b.n	8010ab8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8010aa4:	68fb      	ldr	r3, [r7, #12]
 8010aa6:	3310      	adds	r3, #16
 8010aa8:	4618      	mov	r0, r3
 8010aaa:	f7ff fef1 	bl	8010890 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8010aae:	68fb      	ldr	r3, [r7, #12]
 8010ab0:	3324      	adds	r3, #36	@ 0x24
 8010ab2:	4618      	mov	r0, r3
 8010ab4:	f7ff feec 	bl	8010890 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8010ab8:	f002 f890 	bl	8012bdc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8010abc:	2301      	movs	r3, #1
}
 8010abe:	4618      	mov	r0, r3
 8010ac0:	3710      	adds	r7, #16
 8010ac2:	46bd      	mov	sp, r7
 8010ac4:	bd80      	pop	{r7, pc}
 8010ac6:	bf00      	nop
 8010ac8:	e000ed04 	.word	0xe000ed04

08010acc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8010acc:	b580      	push	{r7, lr}
 8010ace:	b08e      	sub	sp, #56	@ 0x38
 8010ad0:	af02      	add	r7, sp, #8
 8010ad2:	60f8      	str	r0, [r7, #12]
 8010ad4:	60b9      	str	r1, [r7, #8]
 8010ad6:	607a      	str	r2, [r7, #4]
 8010ad8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010ada:	68fb      	ldr	r3, [r7, #12]
 8010adc:	2b00      	cmp	r3, #0
 8010ade:	d10b      	bne.n	8010af8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8010ae0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010ae4:	f383 8811 	msr	BASEPRI, r3
 8010ae8:	f3bf 8f6f 	isb	sy
 8010aec:	f3bf 8f4f 	dsb	sy
 8010af0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8010af2:	bf00      	nop
 8010af4:	bf00      	nop
 8010af6:	e7fd      	b.n	8010af4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8010af8:	683b      	ldr	r3, [r7, #0]
 8010afa:	2b00      	cmp	r3, #0
 8010afc:	d10b      	bne.n	8010b16 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8010afe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010b02:	f383 8811 	msr	BASEPRI, r3
 8010b06:	f3bf 8f6f 	isb	sy
 8010b0a:	f3bf 8f4f 	dsb	sy
 8010b0e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8010b10:	bf00      	nop
 8010b12:	bf00      	nop
 8010b14:	e7fd      	b.n	8010b12 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	2b00      	cmp	r3, #0
 8010b1a:	d002      	beq.n	8010b22 <xQueueGenericCreateStatic+0x56>
 8010b1c:	68bb      	ldr	r3, [r7, #8]
 8010b1e:	2b00      	cmp	r3, #0
 8010b20:	d001      	beq.n	8010b26 <xQueueGenericCreateStatic+0x5a>
 8010b22:	2301      	movs	r3, #1
 8010b24:	e000      	b.n	8010b28 <xQueueGenericCreateStatic+0x5c>
 8010b26:	2300      	movs	r3, #0
 8010b28:	2b00      	cmp	r3, #0
 8010b2a:	d10b      	bne.n	8010b44 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8010b2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010b30:	f383 8811 	msr	BASEPRI, r3
 8010b34:	f3bf 8f6f 	isb	sy
 8010b38:	f3bf 8f4f 	dsb	sy
 8010b3c:	623b      	str	r3, [r7, #32]
}
 8010b3e:	bf00      	nop
 8010b40:	bf00      	nop
 8010b42:	e7fd      	b.n	8010b40 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	2b00      	cmp	r3, #0
 8010b48:	d102      	bne.n	8010b50 <xQueueGenericCreateStatic+0x84>
 8010b4a:	68bb      	ldr	r3, [r7, #8]
 8010b4c:	2b00      	cmp	r3, #0
 8010b4e:	d101      	bne.n	8010b54 <xQueueGenericCreateStatic+0x88>
 8010b50:	2301      	movs	r3, #1
 8010b52:	e000      	b.n	8010b56 <xQueueGenericCreateStatic+0x8a>
 8010b54:	2300      	movs	r3, #0
 8010b56:	2b00      	cmp	r3, #0
 8010b58:	d10b      	bne.n	8010b72 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8010b5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010b5e:	f383 8811 	msr	BASEPRI, r3
 8010b62:	f3bf 8f6f 	isb	sy
 8010b66:	f3bf 8f4f 	dsb	sy
 8010b6a:	61fb      	str	r3, [r7, #28]
}
 8010b6c:	bf00      	nop
 8010b6e:	bf00      	nop
 8010b70:	e7fd      	b.n	8010b6e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8010b72:	2350      	movs	r3, #80	@ 0x50
 8010b74:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8010b76:	697b      	ldr	r3, [r7, #20]
 8010b78:	2b50      	cmp	r3, #80	@ 0x50
 8010b7a:	d00b      	beq.n	8010b94 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8010b7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010b80:	f383 8811 	msr	BASEPRI, r3
 8010b84:	f3bf 8f6f 	isb	sy
 8010b88:	f3bf 8f4f 	dsb	sy
 8010b8c:	61bb      	str	r3, [r7, #24]
}
 8010b8e:	bf00      	nop
 8010b90:	bf00      	nop
 8010b92:	e7fd      	b.n	8010b90 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8010b94:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010b96:	683b      	ldr	r3, [r7, #0]
 8010b98:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8010b9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b9c:	2b00      	cmp	r3, #0
 8010b9e:	d00d      	beq.n	8010bbc <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8010ba0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ba2:	2201      	movs	r2, #1
 8010ba4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010ba8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8010bac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010bae:	9300      	str	r3, [sp, #0]
 8010bb0:	4613      	mov	r3, r2
 8010bb2:	687a      	ldr	r2, [r7, #4]
 8010bb4:	68b9      	ldr	r1, [r7, #8]
 8010bb6:	68f8      	ldr	r0, [r7, #12]
 8010bb8:	f000 f805 	bl	8010bc6 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8010bbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8010bbe:	4618      	mov	r0, r3
 8010bc0:	3730      	adds	r7, #48	@ 0x30
 8010bc2:	46bd      	mov	sp, r7
 8010bc4:	bd80      	pop	{r7, pc}

08010bc6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8010bc6:	b580      	push	{r7, lr}
 8010bc8:	b084      	sub	sp, #16
 8010bca:	af00      	add	r7, sp, #0
 8010bcc:	60f8      	str	r0, [r7, #12]
 8010bce:	60b9      	str	r1, [r7, #8]
 8010bd0:	607a      	str	r2, [r7, #4]
 8010bd2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8010bd4:	68bb      	ldr	r3, [r7, #8]
 8010bd6:	2b00      	cmp	r3, #0
 8010bd8:	d103      	bne.n	8010be2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8010bda:	69bb      	ldr	r3, [r7, #24]
 8010bdc:	69ba      	ldr	r2, [r7, #24]
 8010bde:	601a      	str	r2, [r3, #0]
 8010be0:	e002      	b.n	8010be8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8010be2:	69bb      	ldr	r3, [r7, #24]
 8010be4:	687a      	ldr	r2, [r7, #4]
 8010be6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8010be8:	69bb      	ldr	r3, [r7, #24]
 8010bea:	68fa      	ldr	r2, [r7, #12]
 8010bec:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8010bee:	69bb      	ldr	r3, [r7, #24]
 8010bf0:	68ba      	ldr	r2, [r7, #8]
 8010bf2:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8010bf4:	2101      	movs	r1, #1
 8010bf6:	69b8      	ldr	r0, [r7, #24]
 8010bf8:	f7ff fefe 	bl	80109f8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8010bfc:	69bb      	ldr	r3, [r7, #24]
 8010bfe:	78fa      	ldrb	r2, [r7, #3]
 8010c00:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8010c04:	bf00      	nop
 8010c06:	3710      	adds	r7, #16
 8010c08:	46bd      	mov	sp, r7
 8010c0a:	bd80      	pop	{r7, pc}

08010c0c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8010c0c:	b580      	push	{r7, lr}
 8010c0e:	b08e      	sub	sp, #56	@ 0x38
 8010c10:	af00      	add	r7, sp, #0
 8010c12:	60f8      	str	r0, [r7, #12]
 8010c14:	60b9      	str	r1, [r7, #8]
 8010c16:	607a      	str	r2, [r7, #4]
 8010c18:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8010c1a:	2300      	movs	r3, #0
 8010c1c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010c1e:	68fb      	ldr	r3, [r7, #12]
 8010c20:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8010c22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010c24:	2b00      	cmp	r3, #0
 8010c26:	d10b      	bne.n	8010c40 <xQueueGenericSend+0x34>
	__asm volatile
 8010c28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010c2c:	f383 8811 	msr	BASEPRI, r3
 8010c30:	f3bf 8f6f 	isb	sy
 8010c34:	f3bf 8f4f 	dsb	sy
 8010c38:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8010c3a:	bf00      	nop
 8010c3c:	bf00      	nop
 8010c3e:	e7fd      	b.n	8010c3c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010c40:	68bb      	ldr	r3, [r7, #8]
 8010c42:	2b00      	cmp	r3, #0
 8010c44:	d103      	bne.n	8010c4e <xQueueGenericSend+0x42>
 8010c46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010c4a:	2b00      	cmp	r3, #0
 8010c4c:	d101      	bne.n	8010c52 <xQueueGenericSend+0x46>
 8010c4e:	2301      	movs	r3, #1
 8010c50:	e000      	b.n	8010c54 <xQueueGenericSend+0x48>
 8010c52:	2300      	movs	r3, #0
 8010c54:	2b00      	cmp	r3, #0
 8010c56:	d10b      	bne.n	8010c70 <xQueueGenericSend+0x64>
	__asm volatile
 8010c58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010c5c:	f383 8811 	msr	BASEPRI, r3
 8010c60:	f3bf 8f6f 	isb	sy
 8010c64:	f3bf 8f4f 	dsb	sy
 8010c68:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8010c6a:	bf00      	nop
 8010c6c:	bf00      	nop
 8010c6e:	e7fd      	b.n	8010c6c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010c70:	683b      	ldr	r3, [r7, #0]
 8010c72:	2b02      	cmp	r3, #2
 8010c74:	d103      	bne.n	8010c7e <xQueueGenericSend+0x72>
 8010c76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010c78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010c7a:	2b01      	cmp	r3, #1
 8010c7c:	d101      	bne.n	8010c82 <xQueueGenericSend+0x76>
 8010c7e:	2301      	movs	r3, #1
 8010c80:	e000      	b.n	8010c84 <xQueueGenericSend+0x78>
 8010c82:	2300      	movs	r3, #0
 8010c84:	2b00      	cmp	r3, #0
 8010c86:	d10b      	bne.n	8010ca0 <xQueueGenericSend+0x94>
	__asm volatile
 8010c88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010c8c:	f383 8811 	msr	BASEPRI, r3
 8010c90:	f3bf 8f6f 	isb	sy
 8010c94:	f3bf 8f4f 	dsb	sy
 8010c98:	623b      	str	r3, [r7, #32]
}
 8010c9a:	bf00      	nop
 8010c9c:	bf00      	nop
 8010c9e:	e7fd      	b.n	8010c9c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010ca0:	f001 f9fc 	bl	801209c <xTaskGetSchedulerState>
 8010ca4:	4603      	mov	r3, r0
 8010ca6:	2b00      	cmp	r3, #0
 8010ca8:	d102      	bne.n	8010cb0 <xQueueGenericSend+0xa4>
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	2b00      	cmp	r3, #0
 8010cae:	d101      	bne.n	8010cb4 <xQueueGenericSend+0xa8>
 8010cb0:	2301      	movs	r3, #1
 8010cb2:	e000      	b.n	8010cb6 <xQueueGenericSend+0xaa>
 8010cb4:	2300      	movs	r3, #0
 8010cb6:	2b00      	cmp	r3, #0
 8010cb8:	d10b      	bne.n	8010cd2 <xQueueGenericSend+0xc6>
	__asm volatile
 8010cba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010cbe:	f383 8811 	msr	BASEPRI, r3
 8010cc2:	f3bf 8f6f 	isb	sy
 8010cc6:	f3bf 8f4f 	dsb	sy
 8010cca:	61fb      	str	r3, [r7, #28]
}
 8010ccc:	bf00      	nop
 8010cce:	bf00      	nop
 8010cd0:	e7fd      	b.n	8010cce <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010cd2:	f001 ff51 	bl	8012b78 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010cd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010cd8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010cda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010cdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010cde:	429a      	cmp	r2, r3
 8010ce0:	d302      	bcc.n	8010ce8 <xQueueGenericSend+0xdc>
 8010ce2:	683b      	ldr	r3, [r7, #0]
 8010ce4:	2b02      	cmp	r3, #2
 8010ce6:	d129      	bne.n	8010d3c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010ce8:	683a      	ldr	r2, [r7, #0]
 8010cea:	68b9      	ldr	r1, [r7, #8]
 8010cec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010cee:	f000 fa0f 	bl	8011110 <prvCopyDataToQueue>
 8010cf2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010cf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010cf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	d010      	beq.n	8010d1e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010cfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010cfe:	3324      	adds	r3, #36	@ 0x24
 8010d00:	4618      	mov	r0, r3
 8010d02:	f001 f805 	bl	8011d10 <xTaskRemoveFromEventList>
 8010d06:	4603      	mov	r3, r0
 8010d08:	2b00      	cmp	r3, #0
 8010d0a:	d013      	beq.n	8010d34 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8010d0c:	4b3f      	ldr	r3, [pc, #252]	@ (8010e0c <xQueueGenericSend+0x200>)
 8010d0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010d12:	601a      	str	r2, [r3, #0]
 8010d14:	f3bf 8f4f 	dsb	sy
 8010d18:	f3bf 8f6f 	isb	sy
 8010d1c:	e00a      	b.n	8010d34 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8010d1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010d20:	2b00      	cmp	r3, #0
 8010d22:	d007      	beq.n	8010d34 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8010d24:	4b39      	ldr	r3, [pc, #228]	@ (8010e0c <xQueueGenericSend+0x200>)
 8010d26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010d2a:	601a      	str	r2, [r3, #0]
 8010d2c:	f3bf 8f4f 	dsb	sy
 8010d30:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8010d34:	f001 ff52 	bl	8012bdc <vPortExitCritical>
				return pdPASS;
 8010d38:	2301      	movs	r3, #1
 8010d3a:	e063      	b.n	8010e04 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	2b00      	cmp	r3, #0
 8010d40:	d103      	bne.n	8010d4a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010d42:	f001 ff4b 	bl	8012bdc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8010d46:	2300      	movs	r3, #0
 8010d48:	e05c      	b.n	8010e04 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010d4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010d4c:	2b00      	cmp	r3, #0
 8010d4e:	d106      	bne.n	8010d5e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010d50:	f107 0314 	add.w	r3, r7, #20
 8010d54:	4618      	mov	r0, r3
 8010d56:	f001 f83f 	bl	8011dd8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010d5a:	2301      	movs	r3, #1
 8010d5c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010d5e:	f001 ff3d 	bl	8012bdc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010d62:	f000 fda7 	bl	80118b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010d66:	f001 ff07 	bl	8012b78 <vPortEnterCritical>
 8010d6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d6c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8010d70:	b25b      	sxtb	r3, r3
 8010d72:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010d76:	d103      	bne.n	8010d80 <xQueueGenericSend+0x174>
 8010d78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d7a:	2200      	movs	r2, #0
 8010d7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8010d80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d82:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8010d86:	b25b      	sxtb	r3, r3
 8010d88:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010d8c:	d103      	bne.n	8010d96 <xQueueGenericSend+0x18a>
 8010d8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d90:	2200      	movs	r2, #0
 8010d92:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8010d96:	f001 ff21 	bl	8012bdc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010d9a:	1d3a      	adds	r2, r7, #4
 8010d9c:	f107 0314 	add.w	r3, r7, #20
 8010da0:	4611      	mov	r1, r2
 8010da2:	4618      	mov	r0, r3
 8010da4:	f001 f82e 	bl	8011e04 <xTaskCheckForTimeOut>
 8010da8:	4603      	mov	r3, r0
 8010daa:	2b00      	cmp	r3, #0
 8010dac:	d124      	bne.n	8010df8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8010dae:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010db0:	f000 faa6 	bl	8011300 <prvIsQueueFull>
 8010db4:	4603      	mov	r3, r0
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	d018      	beq.n	8010dec <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8010dba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010dbc:	3310      	adds	r3, #16
 8010dbe:	687a      	ldr	r2, [r7, #4]
 8010dc0:	4611      	mov	r1, r2
 8010dc2:	4618      	mov	r0, r3
 8010dc4:	f000 ff52 	bl	8011c6c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8010dc8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010dca:	f000 fa31 	bl	8011230 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8010dce:	f000 fd7f 	bl	80118d0 <xTaskResumeAll>
 8010dd2:	4603      	mov	r3, r0
 8010dd4:	2b00      	cmp	r3, #0
 8010dd6:	f47f af7c 	bne.w	8010cd2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8010dda:	4b0c      	ldr	r3, [pc, #48]	@ (8010e0c <xQueueGenericSend+0x200>)
 8010ddc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010de0:	601a      	str	r2, [r3, #0]
 8010de2:	f3bf 8f4f 	dsb	sy
 8010de6:	f3bf 8f6f 	isb	sy
 8010dea:	e772      	b.n	8010cd2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8010dec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010dee:	f000 fa1f 	bl	8011230 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010df2:	f000 fd6d 	bl	80118d0 <xTaskResumeAll>
 8010df6:	e76c      	b.n	8010cd2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8010df8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010dfa:	f000 fa19 	bl	8011230 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010dfe:	f000 fd67 	bl	80118d0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8010e02:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8010e04:	4618      	mov	r0, r3
 8010e06:	3738      	adds	r7, #56	@ 0x38
 8010e08:	46bd      	mov	sp, r7
 8010e0a:	bd80      	pop	{r7, pc}
 8010e0c:	e000ed04 	.word	0xe000ed04

08010e10 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8010e10:	b580      	push	{r7, lr}
 8010e12:	b090      	sub	sp, #64	@ 0x40
 8010e14:	af00      	add	r7, sp, #0
 8010e16:	60f8      	str	r0, [r7, #12]
 8010e18:	60b9      	str	r1, [r7, #8]
 8010e1a:	607a      	str	r2, [r7, #4]
 8010e1c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010e1e:	68fb      	ldr	r3, [r7, #12]
 8010e20:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8010e22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	d10b      	bne.n	8010e40 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8010e28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010e2c:	f383 8811 	msr	BASEPRI, r3
 8010e30:	f3bf 8f6f 	isb	sy
 8010e34:	f3bf 8f4f 	dsb	sy
 8010e38:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8010e3a:	bf00      	nop
 8010e3c:	bf00      	nop
 8010e3e:	e7fd      	b.n	8010e3c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010e40:	68bb      	ldr	r3, [r7, #8]
 8010e42:	2b00      	cmp	r3, #0
 8010e44:	d103      	bne.n	8010e4e <xQueueGenericSendFromISR+0x3e>
 8010e46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	d101      	bne.n	8010e52 <xQueueGenericSendFromISR+0x42>
 8010e4e:	2301      	movs	r3, #1
 8010e50:	e000      	b.n	8010e54 <xQueueGenericSendFromISR+0x44>
 8010e52:	2300      	movs	r3, #0
 8010e54:	2b00      	cmp	r3, #0
 8010e56:	d10b      	bne.n	8010e70 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8010e58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010e5c:	f383 8811 	msr	BASEPRI, r3
 8010e60:	f3bf 8f6f 	isb	sy
 8010e64:	f3bf 8f4f 	dsb	sy
 8010e68:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8010e6a:	bf00      	nop
 8010e6c:	bf00      	nop
 8010e6e:	e7fd      	b.n	8010e6c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010e70:	683b      	ldr	r3, [r7, #0]
 8010e72:	2b02      	cmp	r3, #2
 8010e74:	d103      	bne.n	8010e7e <xQueueGenericSendFromISR+0x6e>
 8010e76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010e7a:	2b01      	cmp	r3, #1
 8010e7c:	d101      	bne.n	8010e82 <xQueueGenericSendFromISR+0x72>
 8010e7e:	2301      	movs	r3, #1
 8010e80:	e000      	b.n	8010e84 <xQueueGenericSendFromISR+0x74>
 8010e82:	2300      	movs	r3, #0
 8010e84:	2b00      	cmp	r3, #0
 8010e86:	d10b      	bne.n	8010ea0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8010e88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010e8c:	f383 8811 	msr	BASEPRI, r3
 8010e90:	f3bf 8f6f 	isb	sy
 8010e94:	f3bf 8f4f 	dsb	sy
 8010e98:	623b      	str	r3, [r7, #32]
}
 8010e9a:	bf00      	nop
 8010e9c:	bf00      	nop
 8010e9e:	e7fd      	b.n	8010e9c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010ea0:	f001 ff4a 	bl	8012d38 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8010ea4:	f3ef 8211 	mrs	r2, BASEPRI
 8010ea8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010eac:	f383 8811 	msr	BASEPRI, r3
 8010eb0:	f3bf 8f6f 	isb	sy
 8010eb4:	f3bf 8f4f 	dsb	sy
 8010eb8:	61fa      	str	r2, [r7, #28]
 8010eba:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8010ebc:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010ebe:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010ec0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ec2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010ec4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ec6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010ec8:	429a      	cmp	r2, r3
 8010eca:	d302      	bcc.n	8010ed2 <xQueueGenericSendFromISR+0xc2>
 8010ecc:	683b      	ldr	r3, [r7, #0]
 8010ece:	2b02      	cmp	r3, #2
 8010ed0:	d12f      	bne.n	8010f32 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010ed2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ed4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8010ed8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010edc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ede:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010ee0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010ee2:	683a      	ldr	r2, [r7, #0]
 8010ee4:	68b9      	ldr	r1, [r7, #8]
 8010ee6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8010ee8:	f000 f912 	bl	8011110 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8010eec:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8010ef0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010ef4:	d112      	bne.n	8010f1c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010ef6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ef8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010efa:	2b00      	cmp	r3, #0
 8010efc:	d016      	beq.n	8010f2c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010efe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f00:	3324      	adds	r3, #36	@ 0x24
 8010f02:	4618      	mov	r0, r3
 8010f04:	f000 ff04 	bl	8011d10 <xTaskRemoveFromEventList>
 8010f08:	4603      	mov	r3, r0
 8010f0a:	2b00      	cmp	r3, #0
 8010f0c:	d00e      	beq.n	8010f2c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	2b00      	cmp	r3, #0
 8010f12:	d00b      	beq.n	8010f2c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	2201      	movs	r2, #1
 8010f18:	601a      	str	r2, [r3, #0]
 8010f1a:	e007      	b.n	8010f2c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010f1c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8010f20:	3301      	adds	r3, #1
 8010f22:	b2db      	uxtb	r3, r3
 8010f24:	b25a      	sxtb	r2, r3
 8010f26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8010f2c:	2301      	movs	r3, #1
 8010f2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8010f30:	e001      	b.n	8010f36 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8010f32:	2300      	movs	r3, #0
 8010f34:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010f36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010f38:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8010f3a:	697b      	ldr	r3, [r7, #20]
 8010f3c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8010f40:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010f42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8010f44:	4618      	mov	r0, r3
 8010f46:	3740      	adds	r7, #64	@ 0x40
 8010f48:	46bd      	mov	sp, r7
 8010f4a:	bd80      	pop	{r7, pc}

08010f4c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8010f4c:	b580      	push	{r7, lr}
 8010f4e:	b08c      	sub	sp, #48	@ 0x30
 8010f50:	af00      	add	r7, sp, #0
 8010f52:	60f8      	str	r0, [r7, #12]
 8010f54:	60b9      	str	r1, [r7, #8]
 8010f56:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8010f58:	2300      	movs	r3, #0
 8010f5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010f5c:	68fb      	ldr	r3, [r7, #12]
 8010f5e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010f60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f62:	2b00      	cmp	r3, #0
 8010f64:	d10b      	bne.n	8010f7e <xQueueReceive+0x32>
	__asm volatile
 8010f66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010f6a:	f383 8811 	msr	BASEPRI, r3
 8010f6e:	f3bf 8f6f 	isb	sy
 8010f72:	f3bf 8f4f 	dsb	sy
 8010f76:	623b      	str	r3, [r7, #32]
}
 8010f78:	bf00      	nop
 8010f7a:	bf00      	nop
 8010f7c:	e7fd      	b.n	8010f7a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010f7e:	68bb      	ldr	r3, [r7, #8]
 8010f80:	2b00      	cmp	r3, #0
 8010f82:	d103      	bne.n	8010f8c <xQueueReceive+0x40>
 8010f84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010f88:	2b00      	cmp	r3, #0
 8010f8a:	d101      	bne.n	8010f90 <xQueueReceive+0x44>
 8010f8c:	2301      	movs	r3, #1
 8010f8e:	e000      	b.n	8010f92 <xQueueReceive+0x46>
 8010f90:	2300      	movs	r3, #0
 8010f92:	2b00      	cmp	r3, #0
 8010f94:	d10b      	bne.n	8010fae <xQueueReceive+0x62>
	__asm volatile
 8010f96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010f9a:	f383 8811 	msr	BASEPRI, r3
 8010f9e:	f3bf 8f6f 	isb	sy
 8010fa2:	f3bf 8f4f 	dsb	sy
 8010fa6:	61fb      	str	r3, [r7, #28]
}
 8010fa8:	bf00      	nop
 8010faa:	bf00      	nop
 8010fac:	e7fd      	b.n	8010faa <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010fae:	f001 f875 	bl	801209c <xTaskGetSchedulerState>
 8010fb2:	4603      	mov	r3, r0
 8010fb4:	2b00      	cmp	r3, #0
 8010fb6:	d102      	bne.n	8010fbe <xQueueReceive+0x72>
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	2b00      	cmp	r3, #0
 8010fbc:	d101      	bne.n	8010fc2 <xQueueReceive+0x76>
 8010fbe:	2301      	movs	r3, #1
 8010fc0:	e000      	b.n	8010fc4 <xQueueReceive+0x78>
 8010fc2:	2300      	movs	r3, #0
 8010fc4:	2b00      	cmp	r3, #0
 8010fc6:	d10b      	bne.n	8010fe0 <xQueueReceive+0x94>
	__asm volatile
 8010fc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010fcc:	f383 8811 	msr	BASEPRI, r3
 8010fd0:	f3bf 8f6f 	isb	sy
 8010fd4:	f3bf 8f4f 	dsb	sy
 8010fd8:	61bb      	str	r3, [r7, #24]
}
 8010fda:	bf00      	nop
 8010fdc:	bf00      	nop
 8010fde:	e7fd      	b.n	8010fdc <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010fe0:	f001 fdca 	bl	8012b78 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010fe4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010fe6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010fe8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010fec:	2b00      	cmp	r3, #0
 8010fee:	d01f      	beq.n	8011030 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010ff0:	68b9      	ldr	r1, [r7, #8]
 8010ff2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010ff4:	f000 f8f6 	bl	80111e4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ffa:	1e5a      	subs	r2, r3, #1
 8010ffc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010ffe:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011000:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011002:	691b      	ldr	r3, [r3, #16]
 8011004:	2b00      	cmp	r3, #0
 8011006:	d00f      	beq.n	8011028 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011008:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801100a:	3310      	adds	r3, #16
 801100c:	4618      	mov	r0, r3
 801100e:	f000 fe7f 	bl	8011d10 <xTaskRemoveFromEventList>
 8011012:	4603      	mov	r3, r0
 8011014:	2b00      	cmp	r3, #0
 8011016:	d007      	beq.n	8011028 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8011018:	4b3c      	ldr	r3, [pc, #240]	@ (801110c <xQueueReceive+0x1c0>)
 801101a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801101e:	601a      	str	r2, [r3, #0]
 8011020:	f3bf 8f4f 	dsb	sy
 8011024:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8011028:	f001 fdd8 	bl	8012bdc <vPortExitCritical>
				return pdPASS;
 801102c:	2301      	movs	r3, #1
 801102e:	e069      	b.n	8011104 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	2b00      	cmp	r3, #0
 8011034:	d103      	bne.n	801103e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8011036:	f001 fdd1 	bl	8012bdc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801103a:	2300      	movs	r3, #0
 801103c:	e062      	b.n	8011104 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 801103e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011040:	2b00      	cmp	r3, #0
 8011042:	d106      	bne.n	8011052 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011044:	f107 0310 	add.w	r3, r7, #16
 8011048:	4618      	mov	r0, r3
 801104a:	f000 fec5 	bl	8011dd8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801104e:	2301      	movs	r3, #1
 8011050:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011052:	f001 fdc3 	bl	8012bdc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011056:	f000 fc2d 	bl	80118b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801105a:	f001 fd8d 	bl	8012b78 <vPortEnterCritical>
 801105e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011060:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8011064:	b25b      	sxtb	r3, r3
 8011066:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801106a:	d103      	bne.n	8011074 <xQueueReceive+0x128>
 801106c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801106e:	2200      	movs	r2, #0
 8011070:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8011074:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011076:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801107a:	b25b      	sxtb	r3, r3
 801107c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8011080:	d103      	bne.n	801108a <xQueueReceive+0x13e>
 8011082:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011084:	2200      	movs	r2, #0
 8011086:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801108a:	f001 fda7 	bl	8012bdc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801108e:	1d3a      	adds	r2, r7, #4
 8011090:	f107 0310 	add.w	r3, r7, #16
 8011094:	4611      	mov	r1, r2
 8011096:	4618      	mov	r0, r3
 8011098:	f000 feb4 	bl	8011e04 <xTaskCheckForTimeOut>
 801109c:	4603      	mov	r3, r0
 801109e:	2b00      	cmp	r3, #0
 80110a0:	d123      	bne.n	80110ea <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80110a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80110a4:	f000 f916 	bl	80112d4 <prvIsQueueEmpty>
 80110a8:	4603      	mov	r3, r0
 80110aa:	2b00      	cmp	r3, #0
 80110ac:	d017      	beq.n	80110de <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80110ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80110b0:	3324      	adds	r3, #36	@ 0x24
 80110b2:	687a      	ldr	r2, [r7, #4]
 80110b4:	4611      	mov	r1, r2
 80110b6:	4618      	mov	r0, r3
 80110b8:	f000 fdd8 	bl	8011c6c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80110bc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80110be:	f000 f8b7 	bl	8011230 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80110c2:	f000 fc05 	bl	80118d0 <xTaskResumeAll>
 80110c6:	4603      	mov	r3, r0
 80110c8:	2b00      	cmp	r3, #0
 80110ca:	d189      	bne.n	8010fe0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80110cc:	4b0f      	ldr	r3, [pc, #60]	@ (801110c <xQueueReceive+0x1c0>)
 80110ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80110d2:	601a      	str	r2, [r3, #0]
 80110d4:	f3bf 8f4f 	dsb	sy
 80110d8:	f3bf 8f6f 	isb	sy
 80110dc:	e780      	b.n	8010fe0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80110de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80110e0:	f000 f8a6 	bl	8011230 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80110e4:	f000 fbf4 	bl	80118d0 <xTaskResumeAll>
 80110e8:	e77a      	b.n	8010fe0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80110ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80110ec:	f000 f8a0 	bl	8011230 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80110f0:	f000 fbee 	bl	80118d0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80110f4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80110f6:	f000 f8ed 	bl	80112d4 <prvIsQueueEmpty>
 80110fa:	4603      	mov	r3, r0
 80110fc:	2b00      	cmp	r3, #0
 80110fe:	f43f af6f 	beq.w	8010fe0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8011102:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8011104:	4618      	mov	r0, r3
 8011106:	3730      	adds	r7, #48	@ 0x30
 8011108:	46bd      	mov	sp, r7
 801110a:	bd80      	pop	{r7, pc}
 801110c:	e000ed04 	.word	0xe000ed04

08011110 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8011110:	b580      	push	{r7, lr}
 8011112:	b086      	sub	sp, #24
 8011114:	af00      	add	r7, sp, #0
 8011116:	60f8      	str	r0, [r7, #12]
 8011118:	60b9      	str	r1, [r7, #8]
 801111a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801111c:	2300      	movs	r3, #0
 801111e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011120:	68fb      	ldr	r3, [r7, #12]
 8011122:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011124:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8011126:	68fb      	ldr	r3, [r7, #12]
 8011128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801112a:	2b00      	cmp	r3, #0
 801112c:	d10d      	bne.n	801114a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801112e:	68fb      	ldr	r3, [r7, #12]
 8011130:	681b      	ldr	r3, [r3, #0]
 8011132:	2b00      	cmp	r3, #0
 8011134:	d14d      	bne.n	80111d2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8011136:	68fb      	ldr	r3, [r7, #12]
 8011138:	689b      	ldr	r3, [r3, #8]
 801113a:	4618      	mov	r0, r3
 801113c:	f000 ffcc 	bl	80120d8 <xTaskPriorityDisinherit>
 8011140:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8011142:	68fb      	ldr	r3, [r7, #12]
 8011144:	2200      	movs	r2, #0
 8011146:	609a      	str	r2, [r3, #8]
 8011148:	e043      	b.n	80111d2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	2b00      	cmp	r3, #0
 801114e:	d119      	bne.n	8011184 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8011150:	68fb      	ldr	r3, [r7, #12]
 8011152:	6858      	ldr	r0, [r3, #4]
 8011154:	68fb      	ldr	r3, [r7, #12]
 8011156:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011158:	461a      	mov	r2, r3
 801115a:	68b9      	ldr	r1, [r7, #8]
 801115c:	f003 fe45 	bl	8014dea <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8011160:	68fb      	ldr	r3, [r7, #12]
 8011162:	685a      	ldr	r2, [r3, #4]
 8011164:	68fb      	ldr	r3, [r7, #12]
 8011166:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011168:	441a      	add	r2, r3
 801116a:	68fb      	ldr	r3, [r7, #12]
 801116c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801116e:	68fb      	ldr	r3, [r7, #12]
 8011170:	685a      	ldr	r2, [r3, #4]
 8011172:	68fb      	ldr	r3, [r7, #12]
 8011174:	689b      	ldr	r3, [r3, #8]
 8011176:	429a      	cmp	r2, r3
 8011178:	d32b      	bcc.n	80111d2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801117a:	68fb      	ldr	r3, [r7, #12]
 801117c:	681a      	ldr	r2, [r3, #0]
 801117e:	68fb      	ldr	r3, [r7, #12]
 8011180:	605a      	str	r2, [r3, #4]
 8011182:	e026      	b.n	80111d2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8011184:	68fb      	ldr	r3, [r7, #12]
 8011186:	68d8      	ldr	r0, [r3, #12]
 8011188:	68fb      	ldr	r3, [r7, #12]
 801118a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801118c:	461a      	mov	r2, r3
 801118e:	68b9      	ldr	r1, [r7, #8]
 8011190:	f003 fe2b 	bl	8014dea <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8011194:	68fb      	ldr	r3, [r7, #12]
 8011196:	68da      	ldr	r2, [r3, #12]
 8011198:	68fb      	ldr	r3, [r7, #12]
 801119a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801119c:	425b      	negs	r3, r3
 801119e:	441a      	add	r2, r3
 80111a0:	68fb      	ldr	r3, [r7, #12]
 80111a2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80111a4:	68fb      	ldr	r3, [r7, #12]
 80111a6:	68da      	ldr	r2, [r3, #12]
 80111a8:	68fb      	ldr	r3, [r7, #12]
 80111aa:	681b      	ldr	r3, [r3, #0]
 80111ac:	429a      	cmp	r2, r3
 80111ae:	d207      	bcs.n	80111c0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80111b0:	68fb      	ldr	r3, [r7, #12]
 80111b2:	689a      	ldr	r2, [r3, #8]
 80111b4:	68fb      	ldr	r3, [r7, #12]
 80111b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80111b8:	425b      	negs	r3, r3
 80111ba:	441a      	add	r2, r3
 80111bc:	68fb      	ldr	r3, [r7, #12]
 80111be:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	2b02      	cmp	r3, #2
 80111c4:	d105      	bne.n	80111d2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80111c6:	693b      	ldr	r3, [r7, #16]
 80111c8:	2b00      	cmp	r3, #0
 80111ca:	d002      	beq.n	80111d2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80111cc:	693b      	ldr	r3, [r7, #16]
 80111ce:	3b01      	subs	r3, #1
 80111d0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80111d2:	693b      	ldr	r3, [r7, #16]
 80111d4:	1c5a      	adds	r2, r3, #1
 80111d6:	68fb      	ldr	r3, [r7, #12]
 80111d8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80111da:	697b      	ldr	r3, [r7, #20]
}
 80111dc:	4618      	mov	r0, r3
 80111de:	3718      	adds	r7, #24
 80111e0:	46bd      	mov	sp, r7
 80111e2:	bd80      	pop	{r7, pc}

080111e4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80111e4:	b580      	push	{r7, lr}
 80111e6:	b082      	sub	sp, #8
 80111e8:	af00      	add	r7, sp, #0
 80111ea:	6078      	str	r0, [r7, #4]
 80111ec:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80111f2:	2b00      	cmp	r3, #0
 80111f4:	d018      	beq.n	8011228 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	68da      	ldr	r2, [r3, #12]
 80111fa:	687b      	ldr	r3, [r7, #4]
 80111fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80111fe:	441a      	add	r2, r3
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	68da      	ldr	r2, [r3, #12]
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	689b      	ldr	r3, [r3, #8]
 801120c:	429a      	cmp	r2, r3
 801120e:	d303      	bcc.n	8011218 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	681a      	ldr	r2, [r3, #0]
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	68d9      	ldr	r1, [r3, #12]
 801121c:	687b      	ldr	r3, [r7, #4]
 801121e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011220:	461a      	mov	r2, r3
 8011222:	6838      	ldr	r0, [r7, #0]
 8011224:	f003 fde1 	bl	8014dea <memcpy>
	}
}
 8011228:	bf00      	nop
 801122a:	3708      	adds	r7, #8
 801122c:	46bd      	mov	sp, r7
 801122e:	bd80      	pop	{r7, pc}

08011230 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8011230:	b580      	push	{r7, lr}
 8011232:	b084      	sub	sp, #16
 8011234:	af00      	add	r7, sp, #0
 8011236:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8011238:	f001 fc9e 	bl	8012b78 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8011242:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011244:	e011      	b.n	801126a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011246:	687b      	ldr	r3, [r7, #4]
 8011248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801124a:	2b00      	cmp	r3, #0
 801124c:	d012      	beq.n	8011274 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	3324      	adds	r3, #36	@ 0x24
 8011252:	4618      	mov	r0, r3
 8011254:	f000 fd5c 	bl	8011d10 <xTaskRemoveFromEventList>
 8011258:	4603      	mov	r3, r0
 801125a:	2b00      	cmp	r3, #0
 801125c:	d001      	beq.n	8011262 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801125e:	f000 fe35 	bl	8011ecc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8011262:	7bfb      	ldrb	r3, [r7, #15]
 8011264:	3b01      	subs	r3, #1
 8011266:	b2db      	uxtb	r3, r3
 8011268:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801126a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801126e:	2b00      	cmp	r3, #0
 8011270:	dce9      	bgt.n	8011246 <prvUnlockQueue+0x16>
 8011272:	e000      	b.n	8011276 <prvUnlockQueue+0x46>
					break;
 8011274:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8011276:	687b      	ldr	r3, [r7, #4]
 8011278:	22ff      	movs	r2, #255	@ 0xff
 801127a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 801127e:	f001 fcad 	bl	8012bdc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8011282:	f001 fc79 	bl	8012b78 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801128c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801128e:	e011      	b.n	80112b4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	691b      	ldr	r3, [r3, #16]
 8011294:	2b00      	cmp	r3, #0
 8011296:	d012      	beq.n	80112be <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	3310      	adds	r3, #16
 801129c:	4618      	mov	r0, r3
 801129e:	f000 fd37 	bl	8011d10 <xTaskRemoveFromEventList>
 80112a2:	4603      	mov	r3, r0
 80112a4:	2b00      	cmp	r3, #0
 80112a6:	d001      	beq.n	80112ac <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80112a8:	f000 fe10 	bl	8011ecc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80112ac:	7bbb      	ldrb	r3, [r7, #14]
 80112ae:	3b01      	subs	r3, #1
 80112b0:	b2db      	uxtb	r3, r3
 80112b2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80112b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80112b8:	2b00      	cmp	r3, #0
 80112ba:	dce9      	bgt.n	8011290 <prvUnlockQueue+0x60>
 80112bc:	e000      	b.n	80112c0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80112be:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	22ff      	movs	r2, #255	@ 0xff
 80112c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80112c8:	f001 fc88 	bl	8012bdc <vPortExitCritical>
}
 80112cc:	bf00      	nop
 80112ce:	3710      	adds	r7, #16
 80112d0:	46bd      	mov	sp, r7
 80112d2:	bd80      	pop	{r7, pc}

080112d4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80112d4:	b580      	push	{r7, lr}
 80112d6:	b084      	sub	sp, #16
 80112d8:	af00      	add	r7, sp, #0
 80112da:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80112dc:	f001 fc4c 	bl	8012b78 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80112e4:	2b00      	cmp	r3, #0
 80112e6:	d102      	bne.n	80112ee <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80112e8:	2301      	movs	r3, #1
 80112ea:	60fb      	str	r3, [r7, #12]
 80112ec:	e001      	b.n	80112f2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80112ee:	2300      	movs	r3, #0
 80112f0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80112f2:	f001 fc73 	bl	8012bdc <vPortExitCritical>

	return xReturn;
 80112f6:	68fb      	ldr	r3, [r7, #12]
}
 80112f8:	4618      	mov	r0, r3
 80112fa:	3710      	adds	r7, #16
 80112fc:	46bd      	mov	sp, r7
 80112fe:	bd80      	pop	{r7, pc}

08011300 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8011300:	b580      	push	{r7, lr}
 8011302:	b084      	sub	sp, #16
 8011304:	af00      	add	r7, sp, #0
 8011306:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011308:	f001 fc36 	bl	8012b78 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011314:	429a      	cmp	r2, r3
 8011316:	d102      	bne.n	801131e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8011318:	2301      	movs	r3, #1
 801131a:	60fb      	str	r3, [r7, #12]
 801131c:	e001      	b.n	8011322 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801131e:	2300      	movs	r3, #0
 8011320:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8011322:	f001 fc5b 	bl	8012bdc <vPortExitCritical>

	return xReturn;
 8011326:	68fb      	ldr	r3, [r7, #12]
}
 8011328:	4618      	mov	r0, r3
 801132a:	3710      	adds	r7, #16
 801132c:	46bd      	mov	sp, r7
 801132e:	bd80      	pop	{r7, pc}

08011330 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8011330:	b480      	push	{r7}
 8011332:	b085      	sub	sp, #20
 8011334:	af00      	add	r7, sp, #0
 8011336:	6078      	str	r0, [r7, #4]
 8011338:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801133a:	2300      	movs	r3, #0
 801133c:	60fb      	str	r3, [r7, #12]
 801133e:	e014      	b.n	801136a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8011340:	4a0f      	ldr	r2, [pc, #60]	@ (8011380 <vQueueAddToRegistry+0x50>)
 8011342:	68fb      	ldr	r3, [r7, #12]
 8011344:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8011348:	2b00      	cmp	r3, #0
 801134a:	d10b      	bne.n	8011364 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 801134c:	490c      	ldr	r1, [pc, #48]	@ (8011380 <vQueueAddToRegistry+0x50>)
 801134e:	68fb      	ldr	r3, [r7, #12]
 8011350:	683a      	ldr	r2, [r7, #0]
 8011352:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8011356:	4a0a      	ldr	r2, [pc, #40]	@ (8011380 <vQueueAddToRegistry+0x50>)
 8011358:	68fb      	ldr	r3, [r7, #12]
 801135a:	00db      	lsls	r3, r3, #3
 801135c:	4413      	add	r3, r2
 801135e:	687a      	ldr	r2, [r7, #4]
 8011360:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8011362:	e006      	b.n	8011372 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011364:	68fb      	ldr	r3, [r7, #12]
 8011366:	3301      	adds	r3, #1
 8011368:	60fb      	str	r3, [r7, #12]
 801136a:	68fb      	ldr	r3, [r7, #12]
 801136c:	2b07      	cmp	r3, #7
 801136e:	d9e7      	bls.n	8011340 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8011370:	bf00      	nop
 8011372:	bf00      	nop
 8011374:	3714      	adds	r7, #20
 8011376:	46bd      	mov	sp, r7
 8011378:	f85d 7b04 	ldr.w	r7, [sp], #4
 801137c:	4770      	bx	lr
 801137e:	bf00      	nop
 8011380:	20003ce8 	.word	0x20003ce8

08011384 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8011384:	b580      	push	{r7, lr}
 8011386:	b086      	sub	sp, #24
 8011388:	af00      	add	r7, sp, #0
 801138a:	60f8      	str	r0, [r7, #12]
 801138c:	60b9      	str	r1, [r7, #8]
 801138e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8011390:	68fb      	ldr	r3, [r7, #12]
 8011392:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8011394:	f001 fbf0 	bl	8012b78 <vPortEnterCritical>
 8011398:	697b      	ldr	r3, [r7, #20]
 801139a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801139e:	b25b      	sxtb	r3, r3
 80113a0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80113a4:	d103      	bne.n	80113ae <vQueueWaitForMessageRestricted+0x2a>
 80113a6:	697b      	ldr	r3, [r7, #20]
 80113a8:	2200      	movs	r2, #0
 80113aa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80113ae:	697b      	ldr	r3, [r7, #20]
 80113b0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80113b4:	b25b      	sxtb	r3, r3
 80113b6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80113ba:	d103      	bne.n	80113c4 <vQueueWaitForMessageRestricted+0x40>
 80113bc:	697b      	ldr	r3, [r7, #20]
 80113be:	2200      	movs	r2, #0
 80113c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80113c4:	f001 fc0a 	bl	8012bdc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80113c8:	697b      	ldr	r3, [r7, #20]
 80113ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80113cc:	2b00      	cmp	r3, #0
 80113ce:	d106      	bne.n	80113de <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80113d0:	697b      	ldr	r3, [r7, #20]
 80113d2:	3324      	adds	r3, #36	@ 0x24
 80113d4:	687a      	ldr	r2, [r7, #4]
 80113d6:	68b9      	ldr	r1, [r7, #8]
 80113d8:	4618      	mov	r0, r3
 80113da:	f000 fc6d 	bl	8011cb8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80113de:	6978      	ldr	r0, [r7, #20]
 80113e0:	f7ff ff26 	bl	8011230 <prvUnlockQueue>
	}
 80113e4:	bf00      	nop
 80113e6:	3718      	adds	r7, #24
 80113e8:	46bd      	mov	sp, r7
 80113ea:	bd80      	pop	{r7, pc}

080113ec <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80113ec:	b580      	push	{r7, lr}
 80113ee:	b08e      	sub	sp, #56	@ 0x38
 80113f0:	af04      	add	r7, sp, #16
 80113f2:	60f8      	str	r0, [r7, #12]
 80113f4:	60b9      	str	r1, [r7, #8]
 80113f6:	607a      	str	r2, [r7, #4]
 80113f8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80113fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80113fc:	2b00      	cmp	r3, #0
 80113fe:	d10b      	bne.n	8011418 <xTaskCreateStatic+0x2c>
	__asm volatile
 8011400:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011404:	f383 8811 	msr	BASEPRI, r3
 8011408:	f3bf 8f6f 	isb	sy
 801140c:	f3bf 8f4f 	dsb	sy
 8011410:	623b      	str	r3, [r7, #32]
}
 8011412:	bf00      	nop
 8011414:	bf00      	nop
 8011416:	e7fd      	b.n	8011414 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8011418:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801141a:	2b00      	cmp	r3, #0
 801141c:	d10b      	bne.n	8011436 <xTaskCreateStatic+0x4a>
	__asm volatile
 801141e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011422:	f383 8811 	msr	BASEPRI, r3
 8011426:	f3bf 8f6f 	isb	sy
 801142a:	f3bf 8f4f 	dsb	sy
 801142e:	61fb      	str	r3, [r7, #28]
}
 8011430:	bf00      	nop
 8011432:	bf00      	nop
 8011434:	e7fd      	b.n	8011432 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8011436:	23a8      	movs	r3, #168	@ 0xa8
 8011438:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801143a:	693b      	ldr	r3, [r7, #16]
 801143c:	2ba8      	cmp	r3, #168	@ 0xa8
 801143e:	d00b      	beq.n	8011458 <xTaskCreateStatic+0x6c>
	__asm volatile
 8011440:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011444:	f383 8811 	msr	BASEPRI, r3
 8011448:	f3bf 8f6f 	isb	sy
 801144c:	f3bf 8f4f 	dsb	sy
 8011450:	61bb      	str	r3, [r7, #24]
}
 8011452:	bf00      	nop
 8011454:	bf00      	nop
 8011456:	e7fd      	b.n	8011454 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8011458:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801145a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801145c:	2b00      	cmp	r3, #0
 801145e:	d01e      	beq.n	801149e <xTaskCreateStatic+0xb2>
 8011460:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011462:	2b00      	cmp	r3, #0
 8011464:	d01b      	beq.n	801149e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8011466:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011468:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801146a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801146c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801146e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8011470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011472:	2202      	movs	r2, #2
 8011474:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8011478:	2300      	movs	r3, #0
 801147a:	9303      	str	r3, [sp, #12]
 801147c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801147e:	9302      	str	r3, [sp, #8]
 8011480:	f107 0314 	add.w	r3, r7, #20
 8011484:	9301      	str	r3, [sp, #4]
 8011486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011488:	9300      	str	r3, [sp, #0]
 801148a:	683b      	ldr	r3, [r7, #0]
 801148c:	687a      	ldr	r2, [r7, #4]
 801148e:	68b9      	ldr	r1, [r7, #8]
 8011490:	68f8      	ldr	r0, [r7, #12]
 8011492:	f000 f851 	bl	8011538 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011496:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011498:	f000 f8f6 	bl	8011688 <prvAddNewTaskToReadyList>
 801149c:	e001      	b.n	80114a2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 801149e:	2300      	movs	r3, #0
 80114a0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80114a2:	697b      	ldr	r3, [r7, #20]
	}
 80114a4:	4618      	mov	r0, r3
 80114a6:	3728      	adds	r7, #40	@ 0x28
 80114a8:	46bd      	mov	sp, r7
 80114aa:	bd80      	pop	{r7, pc}

080114ac <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80114ac:	b580      	push	{r7, lr}
 80114ae:	b08c      	sub	sp, #48	@ 0x30
 80114b0:	af04      	add	r7, sp, #16
 80114b2:	60f8      	str	r0, [r7, #12]
 80114b4:	60b9      	str	r1, [r7, #8]
 80114b6:	603b      	str	r3, [r7, #0]
 80114b8:	4613      	mov	r3, r2
 80114ba:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80114bc:	88fb      	ldrh	r3, [r7, #6]
 80114be:	009b      	lsls	r3, r3, #2
 80114c0:	4618      	mov	r0, r3
 80114c2:	f001 fc7b 	bl	8012dbc <pvPortMalloc>
 80114c6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80114c8:	697b      	ldr	r3, [r7, #20]
 80114ca:	2b00      	cmp	r3, #0
 80114cc:	d00e      	beq.n	80114ec <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80114ce:	20a8      	movs	r0, #168	@ 0xa8
 80114d0:	f001 fc74 	bl	8012dbc <pvPortMalloc>
 80114d4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80114d6:	69fb      	ldr	r3, [r7, #28]
 80114d8:	2b00      	cmp	r3, #0
 80114da:	d003      	beq.n	80114e4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80114dc:	69fb      	ldr	r3, [r7, #28]
 80114de:	697a      	ldr	r2, [r7, #20]
 80114e0:	631a      	str	r2, [r3, #48]	@ 0x30
 80114e2:	e005      	b.n	80114f0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80114e4:	6978      	ldr	r0, [r7, #20]
 80114e6:	f001 fd37 	bl	8012f58 <vPortFree>
 80114ea:	e001      	b.n	80114f0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80114ec:	2300      	movs	r3, #0
 80114ee:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80114f0:	69fb      	ldr	r3, [r7, #28]
 80114f2:	2b00      	cmp	r3, #0
 80114f4:	d017      	beq.n	8011526 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80114f6:	69fb      	ldr	r3, [r7, #28]
 80114f8:	2200      	movs	r2, #0
 80114fa:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80114fe:	88fa      	ldrh	r2, [r7, #6]
 8011500:	2300      	movs	r3, #0
 8011502:	9303      	str	r3, [sp, #12]
 8011504:	69fb      	ldr	r3, [r7, #28]
 8011506:	9302      	str	r3, [sp, #8]
 8011508:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801150a:	9301      	str	r3, [sp, #4]
 801150c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801150e:	9300      	str	r3, [sp, #0]
 8011510:	683b      	ldr	r3, [r7, #0]
 8011512:	68b9      	ldr	r1, [r7, #8]
 8011514:	68f8      	ldr	r0, [r7, #12]
 8011516:	f000 f80f 	bl	8011538 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801151a:	69f8      	ldr	r0, [r7, #28]
 801151c:	f000 f8b4 	bl	8011688 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8011520:	2301      	movs	r3, #1
 8011522:	61bb      	str	r3, [r7, #24]
 8011524:	e002      	b.n	801152c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8011526:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801152a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801152c:	69bb      	ldr	r3, [r7, #24]
	}
 801152e:	4618      	mov	r0, r3
 8011530:	3720      	adds	r7, #32
 8011532:	46bd      	mov	sp, r7
 8011534:	bd80      	pop	{r7, pc}
	...

08011538 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8011538:	b580      	push	{r7, lr}
 801153a:	b088      	sub	sp, #32
 801153c:	af00      	add	r7, sp, #0
 801153e:	60f8      	str	r0, [r7, #12]
 8011540:	60b9      	str	r1, [r7, #8]
 8011542:	607a      	str	r2, [r7, #4]
 8011544:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8011546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011548:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	009b      	lsls	r3, r3, #2
 801154e:	461a      	mov	r2, r3
 8011550:	21a5      	movs	r1, #165	@ 0xa5
 8011552:	f003 fb74 	bl	8014c3e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8011556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011558:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801155a:	687b      	ldr	r3, [r7, #4]
 801155c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8011560:	3b01      	subs	r3, #1
 8011562:	009b      	lsls	r3, r3, #2
 8011564:	4413      	add	r3, r2
 8011566:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8011568:	69bb      	ldr	r3, [r7, #24]
 801156a:	f023 0307 	bic.w	r3, r3, #7
 801156e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8011570:	69bb      	ldr	r3, [r7, #24]
 8011572:	f003 0307 	and.w	r3, r3, #7
 8011576:	2b00      	cmp	r3, #0
 8011578:	d00b      	beq.n	8011592 <prvInitialiseNewTask+0x5a>
	__asm volatile
 801157a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801157e:	f383 8811 	msr	BASEPRI, r3
 8011582:	f3bf 8f6f 	isb	sy
 8011586:	f3bf 8f4f 	dsb	sy
 801158a:	617b      	str	r3, [r7, #20]
}
 801158c:	bf00      	nop
 801158e:	bf00      	nop
 8011590:	e7fd      	b.n	801158e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8011592:	68bb      	ldr	r3, [r7, #8]
 8011594:	2b00      	cmp	r3, #0
 8011596:	d01f      	beq.n	80115d8 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011598:	2300      	movs	r3, #0
 801159a:	61fb      	str	r3, [r7, #28]
 801159c:	e012      	b.n	80115c4 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801159e:	68ba      	ldr	r2, [r7, #8]
 80115a0:	69fb      	ldr	r3, [r7, #28]
 80115a2:	4413      	add	r3, r2
 80115a4:	7819      	ldrb	r1, [r3, #0]
 80115a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80115a8:	69fb      	ldr	r3, [r7, #28]
 80115aa:	4413      	add	r3, r2
 80115ac:	3334      	adds	r3, #52	@ 0x34
 80115ae:	460a      	mov	r2, r1
 80115b0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80115b2:	68ba      	ldr	r2, [r7, #8]
 80115b4:	69fb      	ldr	r3, [r7, #28]
 80115b6:	4413      	add	r3, r2
 80115b8:	781b      	ldrb	r3, [r3, #0]
 80115ba:	2b00      	cmp	r3, #0
 80115bc:	d006      	beq.n	80115cc <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80115be:	69fb      	ldr	r3, [r7, #28]
 80115c0:	3301      	adds	r3, #1
 80115c2:	61fb      	str	r3, [r7, #28]
 80115c4:	69fb      	ldr	r3, [r7, #28]
 80115c6:	2b0f      	cmp	r3, #15
 80115c8:	d9e9      	bls.n	801159e <prvInitialiseNewTask+0x66>
 80115ca:	e000      	b.n	80115ce <prvInitialiseNewTask+0x96>
			{
				break;
 80115cc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80115ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80115d0:	2200      	movs	r2, #0
 80115d2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80115d6:	e003      	b.n	80115e0 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80115d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80115da:	2200      	movs	r2, #0
 80115dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80115e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80115e2:	2b37      	cmp	r3, #55	@ 0x37
 80115e4:	d901      	bls.n	80115ea <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80115e6:	2337      	movs	r3, #55	@ 0x37
 80115e8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80115ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80115ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80115ee:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80115f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80115f2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80115f4:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80115f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80115f8:	2200      	movs	r2, #0
 80115fa:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80115fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80115fe:	3304      	adds	r3, #4
 8011600:	4618      	mov	r0, r3
 8011602:	f7ff f965 	bl	80108d0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8011606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011608:	3318      	adds	r3, #24
 801160a:	4618      	mov	r0, r3
 801160c:	f7ff f960 	bl	80108d0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8011610:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011612:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011614:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011616:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011618:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 801161c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801161e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8011620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011622:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011624:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8011626:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011628:	2200      	movs	r2, #0
 801162a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801162e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011630:	2200      	movs	r2, #0
 8011632:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8011636:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011638:	3354      	adds	r3, #84	@ 0x54
 801163a:	224c      	movs	r2, #76	@ 0x4c
 801163c:	2100      	movs	r1, #0
 801163e:	4618      	mov	r0, r3
 8011640:	f003 fafd 	bl	8014c3e <memset>
 8011644:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011646:	4a0d      	ldr	r2, [pc, #52]	@ (801167c <prvInitialiseNewTask+0x144>)
 8011648:	659a      	str	r2, [r3, #88]	@ 0x58
 801164a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801164c:	4a0c      	ldr	r2, [pc, #48]	@ (8011680 <prvInitialiseNewTask+0x148>)
 801164e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8011650:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011652:	4a0c      	ldr	r2, [pc, #48]	@ (8011684 <prvInitialiseNewTask+0x14c>)
 8011654:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8011656:	683a      	ldr	r2, [r7, #0]
 8011658:	68f9      	ldr	r1, [r7, #12]
 801165a:	69b8      	ldr	r0, [r7, #24]
 801165c:	f001 f95a 	bl	8012914 <pxPortInitialiseStack>
 8011660:	4602      	mov	r2, r0
 8011662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011664:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8011666:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011668:	2b00      	cmp	r3, #0
 801166a:	d002      	beq.n	8011672 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801166c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801166e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011670:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011672:	bf00      	nop
 8011674:	3720      	adds	r7, #32
 8011676:	46bd      	mov	sp, r7
 8011678:	bd80      	pop	{r7, pc}
 801167a:	bf00      	nop
 801167c:	20008e64 	.word	0x20008e64
 8011680:	20008ecc 	.word	0x20008ecc
 8011684:	20008f34 	.word	0x20008f34

08011688 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8011688:	b580      	push	{r7, lr}
 801168a:	b082      	sub	sp, #8
 801168c:	af00      	add	r7, sp, #0
 801168e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8011690:	f001 fa72 	bl	8012b78 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8011694:	4b2d      	ldr	r3, [pc, #180]	@ (801174c <prvAddNewTaskToReadyList+0xc4>)
 8011696:	681b      	ldr	r3, [r3, #0]
 8011698:	3301      	adds	r3, #1
 801169a:	4a2c      	ldr	r2, [pc, #176]	@ (801174c <prvAddNewTaskToReadyList+0xc4>)
 801169c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801169e:	4b2c      	ldr	r3, [pc, #176]	@ (8011750 <prvAddNewTaskToReadyList+0xc8>)
 80116a0:	681b      	ldr	r3, [r3, #0]
 80116a2:	2b00      	cmp	r3, #0
 80116a4:	d109      	bne.n	80116ba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80116a6:	4a2a      	ldr	r2, [pc, #168]	@ (8011750 <prvAddNewTaskToReadyList+0xc8>)
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80116ac:	4b27      	ldr	r3, [pc, #156]	@ (801174c <prvAddNewTaskToReadyList+0xc4>)
 80116ae:	681b      	ldr	r3, [r3, #0]
 80116b0:	2b01      	cmp	r3, #1
 80116b2:	d110      	bne.n	80116d6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80116b4:	f000 fc2e 	bl	8011f14 <prvInitialiseTaskLists>
 80116b8:	e00d      	b.n	80116d6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80116ba:	4b26      	ldr	r3, [pc, #152]	@ (8011754 <prvAddNewTaskToReadyList+0xcc>)
 80116bc:	681b      	ldr	r3, [r3, #0]
 80116be:	2b00      	cmp	r3, #0
 80116c0:	d109      	bne.n	80116d6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80116c2:	4b23      	ldr	r3, [pc, #140]	@ (8011750 <prvAddNewTaskToReadyList+0xc8>)
 80116c4:	681b      	ldr	r3, [r3, #0]
 80116c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80116cc:	429a      	cmp	r2, r3
 80116ce:	d802      	bhi.n	80116d6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80116d0:	4a1f      	ldr	r2, [pc, #124]	@ (8011750 <prvAddNewTaskToReadyList+0xc8>)
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80116d6:	4b20      	ldr	r3, [pc, #128]	@ (8011758 <prvAddNewTaskToReadyList+0xd0>)
 80116d8:	681b      	ldr	r3, [r3, #0]
 80116da:	3301      	adds	r3, #1
 80116dc:	4a1e      	ldr	r2, [pc, #120]	@ (8011758 <prvAddNewTaskToReadyList+0xd0>)
 80116de:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80116e0:	4b1d      	ldr	r3, [pc, #116]	@ (8011758 <prvAddNewTaskToReadyList+0xd0>)
 80116e2:	681a      	ldr	r2, [r3, #0]
 80116e4:	687b      	ldr	r3, [r7, #4]
 80116e6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80116ec:	4b1b      	ldr	r3, [pc, #108]	@ (801175c <prvAddNewTaskToReadyList+0xd4>)
 80116ee:	681b      	ldr	r3, [r3, #0]
 80116f0:	429a      	cmp	r2, r3
 80116f2:	d903      	bls.n	80116fc <prvAddNewTaskToReadyList+0x74>
 80116f4:	687b      	ldr	r3, [r7, #4]
 80116f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80116f8:	4a18      	ldr	r2, [pc, #96]	@ (801175c <prvAddNewTaskToReadyList+0xd4>)
 80116fa:	6013      	str	r3, [r2, #0]
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011700:	4613      	mov	r3, r2
 8011702:	009b      	lsls	r3, r3, #2
 8011704:	4413      	add	r3, r2
 8011706:	009b      	lsls	r3, r3, #2
 8011708:	4a15      	ldr	r2, [pc, #84]	@ (8011760 <prvAddNewTaskToReadyList+0xd8>)
 801170a:	441a      	add	r2, r3
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	3304      	adds	r3, #4
 8011710:	4619      	mov	r1, r3
 8011712:	4610      	mov	r0, r2
 8011714:	f7ff f8e9 	bl	80108ea <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8011718:	f001 fa60 	bl	8012bdc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801171c:	4b0d      	ldr	r3, [pc, #52]	@ (8011754 <prvAddNewTaskToReadyList+0xcc>)
 801171e:	681b      	ldr	r3, [r3, #0]
 8011720:	2b00      	cmp	r3, #0
 8011722:	d00e      	beq.n	8011742 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8011724:	4b0a      	ldr	r3, [pc, #40]	@ (8011750 <prvAddNewTaskToReadyList+0xc8>)
 8011726:	681b      	ldr	r3, [r3, #0]
 8011728:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801172e:	429a      	cmp	r2, r3
 8011730:	d207      	bcs.n	8011742 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8011732:	4b0c      	ldr	r3, [pc, #48]	@ (8011764 <prvAddNewTaskToReadyList+0xdc>)
 8011734:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011738:	601a      	str	r2, [r3, #0]
 801173a:	f3bf 8f4f 	dsb	sy
 801173e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011742:	bf00      	nop
 8011744:	3708      	adds	r7, #8
 8011746:	46bd      	mov	sp, r7
 8011748:	bd80      	pop	{r7, pc}
 801174a:	bf00      	nop
 801174c:	200041fc 	.word	0x200041fc
 8011750:	20003d28 	.word	0x20003d28
 8011754:	20004208 	.word	0x20004208
 8011758:	20004218 	.word	0x20004218
 801175c:	20004204 	.word	0x20004204
 8011760:	20003d2c 	.word	0x20003d2c
 8011764:	e000ed04 	.word	0xe000ed04

08011768 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8011768:	b580      	push	{r7, lr}
 801176a:	b084      	sub	sp, #16
 801176c:	af00      	add	r7, sp, #0
 801176e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8011770:	2300      	movs	r3, #0
 8011772:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	2b00      	cmp	r3, #0
 8011778:	d018      	beq.n	80117ac <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801177a:	4b14      	ldr	r3, [pc, #80]	@ (80117cc <vTaskDelay+0x64>)
 801177c:	681b      	ldr	r3, [r3, #0]
 801177e:	2b00      	cmp	r3, #0
 8011780:	d00b      	beq.n	801179a <vTaskDelay+0x32>
	__asm volatile
 8011782:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011786:	f383 8811 	msr	BASEPRI, r3
 801178a:	f3bf 8f6f 	isb	sy
 801178e:	f3bf 8f4f 	dsb	sy
 8011792:	60bb      	str	r3, [r7, #8]
}
 8011794:	bf00      	nop
 8011796:	bf00      	nop
 8011798:	e7fd      	b.n	8011796 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 801179a:	f000 f88b 	bl	80118b4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801179e:	2100      	movs	r1, #0
 80117a0:	6878      	ldr	r0, [r7, #4]
 80117a2:	f000 fd09 	bl	80121b8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80117a6:	f000 f893 	bl	80118d0 <xTaskResumeAll>
 80117aa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80117ac:	68fb      	ldr	r3, [r7, #12]
 80117ae:	2b00      	cmp	r3, #0
 80117b0:	d107      	bne.n	80117c2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80117b2:	4b07      	ldr	r3, [pc, #28]	@ (80117d0 <vTaskDelay+0x68>)
 80117b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80117b8:	601a      	str	r2, [r3, #0]
 80117ba:	f3bf 8f4f 	dsb	sy
 80117be:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80117c2:	bf00      	nop
 80117c4:	3710      	adds	r7, #16
 80117c6:	46bd      	mov	sp, r7
 80117c8:	bd80      	pop	{r7, pc}
 80117ca:	bf00      	nop
 80117cc:	20004224 	.word	0x20004224
 80117d0:	e000ed04 	.word	0xe000ed04

080117d4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80117d4:	b580      	push	{r7, lr}
 80117d6:	b08a      	sub	sp, #40	@ 0x28
 80117d8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80117da:	2300      	movs	r3, #0
 80117dc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80117de:	2300      	movs	r3, #0
 80117e0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80117e2:	463a      	mov	r2, r7
 80117e4:	1d39      	adds	r1, r7, #4
 80117e6:	f107 0308 	add.w	r3, r7, #8
 80117ea:	4618      	mov	r0, r3
 80117ec:	f7ff f81c 	bl	8010828 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80117f0:	6839      	ldr	r1, [r7, #0]
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	68ba      	ldr	r2, [r7, #8]
 80117f6:	9202      	str	r2, [sp, #8]
 80117f8:	9301      	str	r3, [sp, #4]
 80117fa:	2300      	movs	r3, #0
 80117fc:	9300      	str	r3, [sp, #0]
 80117fe:	2300      	movs	r3, #0
 8011800:	460a      	mov	r2, r1
 8011802:	4924      	ldr	r1, [pc, #144]	@ (8011894 <vTaskStartScheduler+0xc0>)
 8011804:	4824      	ldr	r0, [pc, #144]	@ (8011898 <vTaskStartScheduler+0xc4>)
 8011806:	f7ff fdf1 	bl	80113ec <xTaskCreateStatic>
 801180a:	4603      	mov	r3, r0
 801180c:	4a23      	ldr	r2, [pc, #140]	@ (801189c <vTaskStartScheduler+0xc8>)
 801180e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8011810:	4b22      	ldr	r3, [pc, #136]	@ (801189c <vTaskStartScheduler+0xc8>)
 8011812:	681b      	ldr	r3, [r3, #0]
 8011814:	2b00      	cmp	r3, #0
 8011816:	d002      	beq.n	801181e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8011818:	2301      	movs	r3, #1
 801181a:	617b      	str	r3, [r7, #20]
 801181c:	e001      	b.n	8011822 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801181e:	2300      	movs	r3, #0
 8011820:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8011822:	697b      	ldr	r3, [r7, #20]
 8011824:	2b01      	cmp	r3, #1
 8011826:	d102      	bne.n	801182e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8011828:	f000 fd1a 	bl	8012260 <xTimerCreateTimerTask>
 801182c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801182e:	697b      	ldr	r3, [r7, #20]
 8011830:	2b01      	cmp	r3, #1
 8011832:	d11b      	bne.n	801186c <vTaskStartScheduler+0x98>
	__asm volatile
 8011834:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011838:	f383 8811 	msr	BASEPRI, r3
 801183c:	f3bf 8f6f 	isb	sy
 8011840:	f3bf 8f4f 	dsb	sy
 8011844:	613b      	str	r3, [r7, #16]
}
 8011846:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8011848:	4b15      	ldr	r3, [pc, #84]	@ (80118a0 <vTaskStartScheduler+0xcc>)
 801184a:	681b      	ldr	r3, [r3, #0]
 801184c:	3354      	adds	r3, #84	@ 0x54
 801184e:	4a15      	ldr	r2, [pc, #84]	@ (80118a4 <vTaskStartScheduler+0xd0>)
 8011850:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8011852:	4b15      	ldr	r3, [pc, #84]	@ (80118a8 <vTaskStartScheduler+0xd4>)
 8011854:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8011858:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801185a:	4b14      	ldr	r3, [pc, #80]	@ (80118ac <vTaskStartScheduler+0xd8>)
 801185c:	2201      	movs	r2, #1
 801185e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8011860:	4b13      	ldr	r3, [pc, #76]	@ (80118b0 <vTaskStartScheduler+0xdc>)
 8011862:	2200      	movs	r2, #0
 8011864:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8011866:	f001 f8e3 	bl	8012a30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801186a:	e00f      	b.n	801188c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801186c:	697b      	ldr	r3, [r7, #20]
 801186e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8011872:	d10b      	bne.n	801188c <vTaskStartScheduler+0xb8>
	__asm volatile
 8011874:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011878:	f383 8811 	msr	BASEPRI, r3
 801187c:	f3bf 8f6f 	isb	sy
 8011880:	f3bf 8f4f 	dsb	sy
 8011884:	60fb      	str	r3, [r7, #12]
}
 8011886:	bf00      	nop
 8011888:	bf00      	nop
 801188a:	e7fd      	b.n	8011888 <vTaskStartScheduler+0xb4>
}
 801188c:	bf00      	nop
 801188e:	3718      	adds	r7, #24
 8011890:	46bd      	mov	sp, r7
 8011892:	bd80      	pop	{r7, pc}
 8011894:	08017068 	.word	0x08017068
 8011898:	08011ee5 	.word	0x08011ee5
 801189c:	20004220 	.word	0x20004220
 80118a0:	20003d28 	.word	0x20003d28
 80118a4:	200003b4 	.word	0x200003b4
 80118a8:	2000421c 	.word	0x2000421c
 80118ac:	20004208 	.word	0x20004208
 80118b0:	20004200 	.word	0x20004200

080118b4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80118b4:	b480      	push	{r7}
 80118b6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80118b8:	4b04      	ldr	r3, [pc, #16]	@ (80118cc <vTaskSuspendAll+0x18>)
 80118ba:	681b      	ldr	r3, [r3, #0]
 80118bc:	3301      	adds	r3, #1
 80118be:	4a03      	ldr	r2, [pc, #12]	@ (80118cc <vTaskSuspendAll+0x18>)
 80118c0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80118c2:	bf00      	nop
 80118c4:	46bd      	mov	sp, r7
 80118c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118ca:	4770      	bx	lr
 80118cc:	20004224 	.word	0x20004224

080118d0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80118d0:	b580      	push	{r7, lr}
 80118d2:	b084      	sub	sp, #16
 80118d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80118d6:	2300      	movs	r3, #0
 80118d8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80118da:	2300      	movs	r3, #0
 80118dc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80118de:	4b42      	ldr	r3, [pc, #264]	@ (80119e8 <xTaskResumeAll+0x118>)
 80118e0:	681b      	ldr	r3, [r3, #0]
 80118e2:	2b00      	cmp	r3, #0
 80118e4:	d10b      	bne.n	80118fe <xTaskResumeAll+0x2e>
	__asm volatile
 80118e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80118ea:	f383 8811 	msr	BASEPRI, r3
 80118ee:	f3bf 8f6f 	isb	sy
 80118f2:	f3bf 8f4f 	dsb	sy
 80118f6:	603b      	str	r3, [r7, #0]
}
 80118f8:	bf00      	nop
 80118fa:	bf00      	nop
 80118fc:	e7fd      	b.n	80118fa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80118fe:	f001 f93b 	bl	8012b78 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8011902:	4b39      	ldr	r3, [pc, #228]	@ (80119e8 <xTaskResumeAll+0x118>)
 8011904:	681b      	ldr	r3, [r3, #0]
 8011906:	3b01      	subs	r3, #1
 8011908:	4a37      	ldr	r2, [pc, #220]	@ (80119e8 <xTaskResumeAll+0x118>)
 801190a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801190c:	4b36      	ldr	r3, [pc, #216]	@ (80119e8 <xTaskResumeAll+0x118>)
 801190e:	681b      	ldr	r3, [r3, #0]
 8011910:	2b00      	cmp	r3, #0
 8011912:	d162      	bne.n	80119da <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8011914:	4b35      	ldr	r3, [pc, #212]	@ (80119ec <xTaskResumeAll+0x11c>)
 8011916:	681b      	ldr	r3, [r3, #0]
 8011918:	2b00      	cmp	r3, #0
 801191a:	d05e      	beq.n	80119da <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801191c:	e02f      	b.n	801197e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801191e:	4b34      	ldr	r3, [pc, #208]	@ (80119f0 <xTaskResumeAll+0x120>)
 8011920:	68db      	ldr	r3, [r3, #12]
 8011922:	68db      	ldr	r3, [r3, #12]
 8011924:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011926:	68fb      	ldr	r3, [r7, #12]
 8011928:	3318      	adds	r3, #24
 801192a:	4618      	mov	r0, r3
 801192c:	f7ff f83a 	bl	80109a4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011930:	68fb      	ldr	r3, [r7, #12]
 8011932:	3304      	adds	r3, #4
 8011934:	4618      	mov	r0, r3
 8011936:	f7ff f835 	bl	80109a4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801193a:	68fb      	ldr	r3, [r7, #12]
 801193c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801193e:	4b2d      	ldr	r3, [pc, #180]	@ (80119f4 <xTaskResumeAll+0x124>)
 8011940:	681b      	ldr	r3, [r3, #0]
 8011942:	429a      	cmp	r2, r3
 8011944:	d903      	bls.n	801194e <xTaskResumeAll+0x7e>
 8011946:	68fb      	ldr	r3, [r7, #12]
 8011948:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801194a:	4a2a      	ldr	r2, [pc, #168]	@ (80119f4 <xTaskResumeAll+0x124>)
 801194c:	6013      	str	r3, [r2, #0]
 801194e:	68fb      	ldr	r3, [r7, #12]
 8011950:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011952:	4613      	mov	r3, r2
 8011954:	009b      	lsls	r3, r3, #2
 8011956:	4413      	add	r3, r2
 8011958:	009b      	lsls	r3, r3, #2
 801195a:	4a27      	ldr	r2, [pc, #156]	@ (80119f8 <xTaskResumeAll+0x128>)
 801195c:	441a      	add	r2, r3
 801195e:	68fb      	ldr	r3, [r7, #12]
 8011960:	3304      	adds	r3, #4
 8011962:	4619      	mov	r1, r3
 8011964:	4610      	mov	r0, r2
 8011966:	f7fe ffc0 	bl	80108ea <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801196a:	68fb      	ldr	r3, [r7, #12]
 801196c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801196e:	4b23      	ldr	r3, [pc, #140]	@ (80119fc <xTaskResumeAll+0x12c>)
 8011970:	681b      	ldr	r3, [r3, #0]
 8011972:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011974:	429a      	cmp	r2, r3
 8011976:	d302      	bcc.n	801197e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8011978:	4b21      	ldr	r3, [pc, #132]	@ (8011a00 <xTaskResumeAll+0x130>)
 801197a:	2201      	movs	r2, #1
 801197c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801197e:	4b1c      	ldr	r3, [pc, #112]	@ (80119f0 <xTaskResumeAll+0x120>)
 8011980:	681b      	ldr	r3, [r3, #0]
 8011982:	2b00      	cmp	r3, #0
 8011984:	d1cb      	bne.n	801191e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8011986:	68fb      	ldr	r3, [r7, #12]
 8011988:	2b00      	cmp	r3, #0
 801198a:	d001      	beq.n	8011990 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801198c:	f000 fb66 	bl	801205c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8011990:	4b1c      	ldr	r3, [pc, #112]	@ (8011a04 <xTaskResumeAll+0x134>)
 8011992:	681b      	ldr	r3, [r3, #0]
 8011994:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	2b00      	cmp	r3, #0
 801199a:	d010      	beq.n	80119be <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801199c:	f000 f846 	bl	8011a2c <xTaskIncrementTick>
 80119a0:	4603      	mov	r3, r0
 80119a2:	2b00      	cmp	r3, #0
 80119a4:	d002      	beq.n	80119ac <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80119a6:	4b16      	ldr	r3, [pc, #88]	@ (8011a00 <xTaskResumeAll+0x130>)
 80119a8:	2201      	movs	r2, #1
 80119aa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	3b01      	subs	r3, #1
 80119b0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80119b2:	687b      	ldr	r3, [r7, #4]
 80119b4:	2b00      	cmp	r3, #0
 80119b6:	d1f1      	bne.n	801199c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80119b8:	4b12      	ldr	r3, [pc, #72]	@ (8011a04 <xTaskResumeAll+0x134>)
 80119ba:	2200      	movs	r2, #0
 80119bc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80119be:	4b10      	ldr	r3, [pc, #64]	@ (8011a00 <xTaskResumeAll+0x130>)
 80119c0:	681b      	ldr	r3, [r3, #0]
 80119c2:	2b00      	cmp	r3, #0
 80119c4:	d009      	beq.n	80119da <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80119c6:	2301      	movs	r3, #1
 80119c8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80119ca:	4b0f      	ldr	r3, [pc, #60]	@ (8011a08 <xTaskResumeAll+0x138>)
 80119cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80119d0:	601a      	str	r2, [r3, #0]
 80119d2:	f3bf 8f4f 	dsb	sy
 80119d6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80119da:	f001 f8ff 	bl	8012bdc <vPortExitCritical>

	return xAlreadyYielded;
 80119de:	68bb      	ldr	r3, [r7, #8]
}
 80119e0:	4618      	mov	r0, r3
 80119e2:	3710      	adds	r7, #16
 80119e4:	46bd      	mov	sp, r7
 80119e6:	bd80      	pop	{r7, pc}
 80119e8:	20004224 	.word	0x20004224
 80119ec:	200041fc 	.word	0x200041fc
 80119f0:	200041bc 	.word	0x200041bc
 80119f4:	20004204 	.word	0x20004204
 80119f8:	20003d2c 	.word	0x20003d2c
 80119fc:	20003d28 	.word	0x20003d28
 8011a00:	20004210 	.word	0x20004210
 8011a04:	2000420c 	.word	0x2000420c
 8011a08:	e000ed04 	.word	0xe000ed04

08011a0c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8011a0c:	b480      	push	{r7}
 8011a0e:	b083      	sub	sp, #12
 8011a10:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8011a12:	4b05      	ldr	r3, [pc, #20]	@ (8011a28 <xTaskGetTickCount+0x1c>)
 8011a14:	681b      	ldr	r3, [r3, #0]
 8011a16:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8011a18:	687b      	ldr	r3, [r7, #4]
}
 8011a1a:	4618      	mov	r0, r3
 8011a1c:	370c      	adds	r7, #12
 8011a1e:	46bd      	mov	sp, r7
 8011a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a24:	4770      	bx	lr
 8011a26:	bf00      	nop
 8011a28:	20004200 	.word	0x20004200

08011a2c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8011a2c:	b580      	push	{r7, lr}
 8011a2e:	b086      	sub	sp, #24
 8011a30:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8011a32:	2300      	movs	r3, #0
 8011a34:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011a36:	4b4f      	ldr	r3, [pc, #316]	@ (8011b74 <xTaskIncrementTick+0x148>)
 8011a38:	681b      	ldr	r3, [r3, #0]
 8011a3a:	2b00      	cmp	r3, #0
 8011a3c:	f040 8090 	bne.w	8011b60 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8011a40:	4b4d      	ldr	r3, [pc, #308]	@ (8011b78 <xTaskIncrementTick+0x14c>)
 8011a42:	681b      	ldr	r3, [r3, #0]
 8011a44:	3301      	adds	r3, #1
 8011a46:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8011a48:	4a4b      	ldr	r2, [pc, #300]	@ (8011b78 <xTaskIncrementTick+0x14c>)
 8011a4a:	693b      	ldr	r3, [r7, #16]
 8011a4c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8011a4e:	693b      	ldr	r3, [r7, #16]
 8011a50:	2b00      	cmp	r3, #0
 8011a52:	d121      	bne.n	8011a98 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8011a54:	4b49      	ldr	r3, [pc, #292]	@ (8011b7c <xTaskIncrementTick+0x150>)
 8011a56:	681b      	ldr	r3, [r3, #0]
 8011a58:	681b      	ldr	r3, [r3, #0]
 8011a5a:	2b00      	cmp	r3, #0
 8011a5c:	d00b      	beq.n	8011a76 <xTaskIncrementTick+0x4a>
	__asm volatile
 8011a5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011a62:	f383 8811 	msr	BASEPRI, r3
 8011a66:	f3bf 8f6f 	isb	sy
 8011a6a:	f3bf 8f4f 	dsb	sy
 8011a6e:	603b      	str	r3, [r7, #0]
}
 8011a70:	bf00      	nop
 8011a72:	bf00      	nop
 8011a74:	e7fd      	b.n	8011a72 <xTaskIncrementTick+0x46>
 8011a76:	4b41      	ldr	r3, [pc, #260]	@ (8011b7c <xTaskIncrementTick+0x150>)
 8011a78:	681b      	ldr	r3, [r3, #0]
 8011a7a:	60fb      	str	r3, [r7, #12]
 8011a7c:	4b40      	ldr	r3, [pc, #256]	@ (8011b80 <xTaskIncrementTick+0x154>)
 8011a7e:	681b      	ldr	r3, [r3, #0]
 8011a80:	4a3e      	ldr	r2, [pc, #248]	@ (8011b7c <xTaskIncrementTick+0x150>)
 8011a82:	6013      	str	r3, [r2, #0]
 8011a84:	4a3e      	ldr	r2, [pc, #248]	@ (8011b80 <xTaskIncrementTick+0x154>)
 8011a86:	68fb      	ldr	r3, [r7, #12]
 8011a88:	6013      	str	r3, [r2, #0]
 8011a8a:	4b3e      	ldr	r3, [pc, #248]	@ (8011b84 <xTaskIncrementTick+0x158>)
 8011a8c:	681b      	ldr	r3, [r3, #0]
 8011a8e:	3301      	adds	r3, #1
 8011a90:	4a3c      	ldr	r2, [pc, #240]	@ (8011b84 <xTaskIncrementTick+0x158>)
 8011a92:	6013      	str	r3, [r2, #0]
 8011a94:	f000 fae2 	bl	801205c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8011a98:	4b3b      	ldr	r3, [pc, #236]	@ (8011b88 <xTaskIncrementTick+0x15c>)
 8011a9a:	681b      	ldr	r3, [r3, #0]
 8011a9c:	693a      	ldr	r2, [r7, #16]
 8011a9e:	429a      	cmp	r2, r3
 8011aa0:	d349      	bcc.n	8011b36 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011aa2:	4b36      	ldr	r3, [pc, #216]	@ (8011b7c <xTaskIncrementTick+0x150>)
 8011aa4:	681b      	ldr	r3, [r3, #0]
 8011aa6:	681b      	ldr	r3, [r3, #0]
 8011aa8:	2b00      	cmp	r3, #0
 8011aaa:	d104      	bne.n	8011ab6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011aac:	4b36      	ldr	r3, [pc, #216]	@ (8011b88 <xTaskIncrementTick+0x15c>)
 8011aae:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8011ab2:	601a      	str	r2, [r3, #0]
					break;
 8011ab4:	e03f      	b.n	8011b36 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011ab6:	4b31      	ldr	r3, [pc, #196]	@ (8011b7c <xTaskIncrementTick+0x150>)
 8011ab8:	681b      	ldr	r3, [r3, #0]
 8011aba:	68db      	ldr	r3, [r3, #12]
 8011abc:	68db      	ldr	r3, [r3, #12]
 8011abe:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8011ac0:	68bb      	ldr	r3, [r7, #8]
 8011ac2:	685b      	ldr	r3, [r3, #4]
 8011ac4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8011ac6:	693a      	ldr	r2, [r7, #16]
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	429a      	cmp	r2, r3
 8011acc:	d203      	bcs.n	8011ad6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8011ace:	4a2e      	ldr	r2, [pc, #184]	@ (8011b88 <xTaskIncrementTick+0x15c>)
 8011ad0:	687b      	ldr	r3, [r7, #4]
 8011ad2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8011ad4:	e02f      	b.n	8011b36 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011ad6:	68bb      	ldr	r3, [r7, #8]
 8011ad8:	3304      	adds	r3, #4
 8011ada:	4618      	mov	r0, r3
 8011adc:	f7fe ff62 	bl	80109a4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8011ae0:	68bb      	ldr	r3, [r7, #8]
 8011ae2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011ae4:	2b00      	cmp	r3, #0
 8011ae6:	d004      	beq.n	8011af2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011ae8:	68bb      	ldr	r3, [r7, #8]
 8011aea:	3318      	adds	r3, #24
 8011aec:	4618      	mov	r0, r3
 8011aee:	f7fe ff59 	bl	80109a4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8011af2:	68bb      	ldr	r3, [r7, #8]
 8011af4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011af6:	4b25      	ldr	r3, [pc, #148]	@ (8011b8c <xTaskIncrementTick+0x160>)
 8011af8:	681b      	ldr	r3, [r3, #0]
 8011afa:	429a      	cmp	r2, r3
 8011afc:	d903      	bls.n	8011b06 <xTaskIncrementTick+0xda>
 8011afe:	68bb      	ldr	r3, [r7, #8]
 8011b00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011b02:	4a22      	ldr	r2, [pc, #136]	@ (8011b8c <xTaskIncrementTick+0x160>)
 8011b04:	6013      	str	r3, [r2, #0]
 8011b06:	68bb      	ldr	r3, [r7, #8]
 8011b08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011b0a:	4613      	mov	r3, r2
 8011b0c:	009b      	lsls	r3, r3, #2
 8011b0e:	4413      	add	r3, r2
 8011b10:	009b      	lsls	r3, r3, #2
 8011b12:	4a1f      	ldr	r2, [pc, #124]	@ (8011b90 <xTaskIncrementTick+0x164>)
 8011b14:	441a      	add	r2, r3
 8011b16:	68bb      	ldr	r3, [r7, #8]
 8011b18:	3304      	adds	r3, #4
 8011b1a:	4619      	mov	r1, r3
 8011b1c:	4610      	mov	r0, r2
 8011b1e:	f7fe fee4 	bl	80108ea <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011b22:	68bb      	ldr	r3, [r7, #8]
 8011b24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011b26:	4b1b      	ldr	r3, [pc, #108]	@ (8011b94 <xTaskIncrementTick+0x168>)
 8011b28:	681b      	ldr	r3, [r3, #0]
 8011b2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011b2c:	429a      	cmp	r2, r3
 8011b2e:	d3b8      	bcc.n	8011aa2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8011b30:	2301      	movs	r3, #1
 8011b32:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011b34:	e7b5      	b.n	8011aa2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8011b36:	4b17      	ldr	r3, [pc, #92]	@ (8011b94 <xTaskIncrementTick+0x168>)
 8011b38:	681b      	ldr	r3, [r3, #0]
 8011b3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011b3c:	4914      	ldr	r1, [pc, #80]	@ (8011b90 <xTaskIncrementTick+0x164>)
 8011b3e:	4613      	mov	r3, r2
 8011b40:	009b      	lsls	r3, r3, #2
 8011b42:	4413      	add	r3, r2
 8011b44:	009b      	lsls	r3, r3, #2
 8011b46:	440b      	add	r3, r1
 8011b48:	681b      	ldr	r3, [r3, #0]
 8011b4a:	2b01      	cmp	r3, #1
 8011b4c:	d901      	bls.n	8011b52 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8011b4e:	2301      	movs	r3, #1
 8011b50:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8011b52:	4b11      	ldr	r3, [pc, #68]	@ (8011b98 <xTaskIncrementTick+0x16c>)
 8011b54:	681b      	ldr	r3, [r3, #0]
 8011b56:	2b00      	cmp	r3, #0
 8011b58:	d007      	beq.n	8011b6a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8011b5a:	2301      	movs	r3, #1
 8011b5c:	617b      	str	r3, [r7, #20]
 8011b5e:	e004      	b.n	8011b6a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8011b60:	4b0e      	ldr	r3, [pc, #56]	@ (8011b9c <xTaskIncrementTick+0x170>)
 8011b62:	681b      	ldr	r3, [r3, #0]
 8011b64:	3301      	adds	r3, #1
 8011b66:	4a0d      	ldr	r2, [pc, #52]	@ (8011b9c <xTaskIncrementTick+0x170>)
 8011b68:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8011b6a:	697b      	ldr	r3, [r7, #20]
}
 8011b6c:	4618      	mov	r0, r3
 8011b6e:	3718      	adds	r7, #24
 8011b70:	46bd      	mov	sp, r7
 8011b72:	bd80      	pop	{r7, pc}
 8011b74:	20004224 	.word	0x20004224
 8011b78:	20004200 	.word	0x20004200
 8011b7c:	200041b4 	.word	0x200041b4
 8011b80:	200041b8 	.word	0x200041b8
 8011b84:	20004214 	.word	0x20004214
 8011b88:	2000421c 	.word	0x2000421c
 8011b8c:	20004204 	.word	0x20004204
 8011b90:	20003d2c 	.word	0x20003d2c
 8011b94:	20003d28 	.word	0x20003d28
 8011b98:	20004210 	.word	0x20004210
 8011b9c:	2000420c 	.word	0x2000420c

08011ba0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8011ba0:	b480      	push	{r7}
 8011ba2:	b085      	sub	sp, #20
 8011ba4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8011ba6:	4b2b      	ldr	r3, [pc, #172]	@ (8011c54 <vTaskSwitchContext+0xb4>)
 8011ba8:	681b      	ldr	r3, [r3, #0]
 8011baa:	2b00      	cmp	r3, #0
 8011bac:	d003      	beq.n	8011bb6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8011bae:	4b2a      	ldr	r3, [pc, #168]	@ (8011c58 <vTaskSwitchContext+0xb8>)
 8011bb0:	2201      	movs	r2, #1
 8011bb2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8011bb4:	e047      	b.n	8011c46 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8011bb6:	4b28      	ldr	r3, [pc, #160]	@ (8011c58 <vTaskSwitchContext+0xb8>)
 8011bb8:	2200      	movs	r2, #0
 8011bba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011bbc:	4b27      	ldr	r3, [pc, #156]	@ (8011c5c <vTaskSwitchContext+0xbc>)
 8011bbe:	681b      	ldr	r3, [r3, #0]
 8011bc0:	60fb      	str	r3, [r7, #12]
 8011bc2:	e011      	b.n	8011be8 <vTaskSwitchContext+0x48>
 8011bc4:	68fb      	ldr	r3, [r7, #12]
 8011bc6:	2b00      	cmp	r3, #0
 8011bc8:	d10b      	bne.n	8011be2 <vTaskSwitchContext+0x42>
	__asm volatile
 8011bca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011bce:	f383 8811 	msr	BASEPRI, r3
 8011bd2:	f3bf 8f6f 	isb	sy
 8011bd6:	f3bf 8f4f 	dsb	sy
 8011bda:	607b      	str	r3, [r7, #4]
}
 8011bdc:	bf00      	nop
 8011bde:	bf00      	nop
 8011be0:	e7fd      	b.n	8011bde <vTaskSwitchContext+0x3e>
 8011be2:	68fb      	ldr	r3, [r7, #12]
 8011be4:	3b01      	subs	r3, #1
 8011be6:	60fb      	str	r3, [r7, #12]
 8011be8:	491d      	ldr	r1, [pc, #116]	@ (8011c60 <vTaskSwitchContext+0xc0>)
 8011bea:	68fa      	ldr	r2, [r7, #12]
 8011bec:	4613      	mov	r3, r2
 8011bee:	009b      	lsls	r3, r3, #2
 8011bf0:	4413      	add	r3, r2
 8011bf2:	009b      	lsls	r3, r3, #2
 8011bf4:	440b      	add	r3, r1
 8011bf6:	681b      	ldr	r3, [r3, #0]
 8011bf8:	2b00      	cmp	r3, #0
 8011bfa:	d0e3      	beq.n	8011bc4 <vTaskSwitchContext+0x24>
 8011bfc:	68fa      	ldr	r2, [r7, #12]
 8011bfe:	4613      	mov	r3, r2
 8011c00:	009b      	lsls	r3, r3, #2
 8011c02:	4413      	add	r3, r2
 8011c04:	009b      	lsls	r3, r3, #2
 8011c06:	4a16      	ldr	r2, [pc, #88]	@ (8011c60 <vTaskSwitchContext+0xc0>)
 8011c08:	4413      	add	r3, r2
 8011c0a:	60bb      	str	r3, [r7, #8]
 8011c0c:	68bb      	ldr	r3, [r7, #8]
 8011c0e:	685b      	ldr	r3, [r3, #4]
 8011c10:	685a      	ldr	r2, [r3, #4]
 8011c12:	68bb      	ldr	r3, [r7, #8]
 8011c14:	605a      	str	r2, [r3, #4]
 8011c16:	68bb      	ldr	r3, [r7, #8]
 8011c18:	685a      	ldr	r2, [r3, #4]
 8011c1a:	68bb      	ldr	r3, [r7, #8]
 8011c1c:	3308      	adds	r3, #8
 8011c1e:	429a      	cmp	r2, r3
 8011c20:	d104      	bne.n	8011c2c <vTaskSwitchContext+0x8c>
 8011c22:	68bb      	ldr	r3, [r7, #8]
 8011c24:	685b      	ldr	r3, [r3, #4]
 8011c26:	685a      	ldr	r2, [r3, #4]
 8011c28:	68bb      	ldr	r3, [r7, #8]
 8011c2a:	605a      	str	r2, [r3, #4]
 8011c2c:	68bb      	ldr	r3, [r7, #8]
 8011c2e:	685b      	ldr	r3, [r3, #4]
 8011c30:	68db      	ldr	r3, [r3, #12]
 8011c32:	4a0c      	ldr	r2, [pc, #48]	@ (8011c64 <vTaskSwitchContext+0xc4>)
 8011c34:	6013      	str	r3, [r2, #0]
 8011c36:	4a09      	ldr	r2, [pc, #36]	@ (8011c5c <vTaskSwitchContext+0xbc>)
 8011c38:	68fb      	ldr	r3, [r7, #12]
 8011c3a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8011c3c:	4b09      	ldr	r3, [pc, #36]	@ (8011c64 <vTaskSwitchContext+0xc4>)
 8011c3e:	681b      	ldr	r3, [r3, #0]
 8011c40:	3354      	adds	r3, #84	@ 0x54
 8011c42:	4a09      	ldr	r2, [pc, #36]	@ (8011c68 <vTaskSwitchContext+0xc8>)
 8011c44:	6013      	str	r3, [r2, #0]
}
 8011c46:	bf00      	nop
 8011c48:	3714      	adds	r7, #20
 8011c4a:	46bd      	mov	sp, r7
 8011c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c50:	4770      	bx	lr
 8011c52:	bf00      	nop
 8011c54:	20004224 	.word	0x20004224
 8011c58:	20004210 	.word	0x20004210
 8011c5c:	20004204 	.word	0x20004204
 8011c60:	20003d2c 	.word	0x20003d2c
 8011c64:	20003d28 	.word	0x20003d28
 8011c68:	200003b4 	.word	0x200003b4

08011c6c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8011c6c:	b580      	push	{r7, lr}
 8011c6e:	b084      	sub	sp, #16
 8011c70:	af00      	add	r7, sp, #0
 8011c72:	6078      	str	r0, [r7, #4]
 8011c74:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	2b00      	cmp	r3, #0
 8011c7a:	d10b      	bne.n	8011c94 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8011c7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011c80:	f383 8811 	msr	BASEPRI, r3
 8011c84:	f3bf 8f6f 	isb	sy
 8011c88:	f3bf 8f4f 	dsb	sy
 8011c8c:	60fb      	str	r3, [r7, #12]
}
 8011c8e:	bf00      	nop
 8011c90:	bf00      	nop
 8011c92:	e7fd      	b.n	8011c90 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011c94:	4b07      	ldr	r3, [pc, #28]	@ (8011cb4 <vTaskPlaceOnEventList+0x48>)
 8011c96:	681b      	ldr	r3, [r3, #0]
 8011c98:	3318      	adds	r3, #24
 8011c9a:	4619      	mov	r1, r3
 8011c9c:	6878      	ldr	r0, [r7, #4]
 8011c9e:	f7fe fe48 	bl	8010932 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8011ca2:	2101      	movs	r1, #1
 8011ca4:	6838      	ldr	r0, [r7, #0]
 8011ca6:	f000 fa87 	bl	80121b8 <prvAddCurrentTaskToDelayedList>
}
 8011caa:	bf00      	nop
 8011cac:	3710      	adds	r7, #16
 8011cae:	46bd      	mov	sp, r7
 8011cb0:	bd80      	pop	{r7, pc}
 8011cb2:	bf00      	nop
 8011cb4:	20003d28 	.word	0x20003d28

08011cb8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8011cb8:	b580      	push	{r7, lr}
 8011cba:	b086      	sub	sp, #24
 8011cbc:	af00      	add	r7, sp, #0
 8011cbe:	60f8      	str	r0, [r7, #12]
 8011cc0:	60b9      	str	r1, [r7, #8]
 8011cc2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8011cc4:	68fb      	ldr	r3, [r7, #12]
 8011cc6:	2b00      	cmp	r3, #0
 8011cc8:	d10b      	bne.n	8011ce2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8011cca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011cce:	f383 8811 	msr	BASEPRI, r3
 8011cd2:	f3bf 8f6f 	isb	sy
 8011cd6:	f3bf 8f4f 	dsb	sy
 8011cda:	617b      	str	r3, [r7, #20]
}
 8011cdc:	bf00      	nop
 8011cde:	bf00      	nop
 8011ce0:	e7fd      	b.n	8011cde <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011ce2:	4b0a      	ldr	r3, [pc, #40]	@ (8011d0c <vTaskPlaceOnEventListRestricted+0x54>)
 8011ce4:	681b      	ldr	r3, [r3, #0]
 8011ce6:	3318      	adds	r3, #24
 8011ce8:	4619      	mov	r1, r3
 8011cea:	68f8      	ldr	r0, [r7, #12]
 8011cec:	f7fe fdfd 	bl	80108ea <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	2b00      	cmp	r3, #0
 8011cf4:	d002      	beq.n	8011cfc <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8011cf6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011cfa:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8011cfc:	6879      	ldr	r1, [r7, #4]
 8011cfe:	68b8      	ldr	r0, [r7, #8]
 8011d00:	f000 fa5a 	bl	80121b8 <prvAddCurrentTaskToDelayedList>
	}
 8011d04:	bf00      	nop
 8011d06:	3718      	adds	r7, #24
 8011d08:	46bd      	mov	sp, r7
 8011d0a:	bd80      	pop	{r7, pc}
 8011d0c:	20003d28 	.word	0x20003d28

08011d10 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8011d10:	b580      	push	{r7, lr}
 8011d12:	b086      	sub	sp, #24
 8011d14:	af00      	add	r7, sp, #0
 8011d16:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011d18:	687b      	ldr	r3, [r7, #4]
 8011d1a:	68db      	ldr	r3, [r3, #12]
 8011d1c:	68db      	ldr	r3, [r3, #12]
 8011d1e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8011d20:	693b      	ldr	r3, [r7, #16]
 8011d22:	2b00      	cmp	r3, #0
 8011d24:	d10b      	bne.n	8011d3e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8011d26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011d2a:	f383 8811 	msr	BASEPRI, r3
 8011d2e:	f3bf 8f6f 	isb	sy
 8011d32:	f3bf 8f4f 	dsb	sy
 8011d36:	60fb      	str	r3, [r7, #12]
}
 8011d38:	bf00      	nop
 8011d3a:	bf00      	nop
 8011d3c:	e7fd      	b.n	8011d3a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8011d3e:	693b      	ldr	r3, [r7, #16]
 8011d40:	3318      	adds	r3, #24
 8011d42:	4618      	mov	r0, r3
 8011d44:	f7fe fe2e 	bl	80109a4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011d48:	4b1d      	ldr	r3, [pc, #116]	@ (8011dc0 <xTaskRemoveFromEventList+0xb0>)
 8011d4a:	681b      	ldr	r3, [r3, #0]
 8011d4c:	2b00      	cmp	r3, #0
 8011d4e:	d11d      	bne.n	8011d8c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8011d50:	693b      	ldr	r3, [r7, #16]
 8011d52:	3304      	adds	r3, #4
 8011d54:	4618      	mov	r0, r3
 8011d56:	f7fe fe25 	bl	80109a4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8011d5a:	693b      	ldr	r3, [r7, #16]
 8011d5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011d5e:	4b19      	ldr	r3, [pc, #100]	@ (8011dc4 <xTaskRemoveFromEventList+0xb4>)
 8011d60:	681b      	ldr	r3, [r3, #0]
 8011d62:	429a      	cmp	r2, r3
 8011d64:	d903      	bls.n	8011d6e <xTaskRemoveFromEventList+0x5e>
 8011d66:	693b      	ldr	r3, [r7, #16]
 8011d68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011d6a:	4a16      	ldr	r2, [pc, #88]	@ (8011dc4 <xTaskRemoveFromEventList+0xb4>)
 8011d6c:	6013      	str	r3, [r2, #0]
 8011d6e:	693b      	ldr	r3, [r7, #16]
 8011d70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011d72:	4613      	mov	r3, r2
 8011d74:	009b      	lsls	r3, r3, #2
 8011d76:	4413      	add	r3, r2
 8011d78:	009b      	lsls	r3, r3, #2
 8011d7a:	4a13      	ldr	r2, [pc, #76]	@ (8011dc8 <xTaskRemoveFromEventList+0xb8>)
 8011d7c:	441a      	add	r2, r3
 8011d7e:	693b      	ldr	r3, [r7, #16]
 8011d80:	3304      	adds	r3, #4
 8011d82:	4619      	mov	r1, r3
 8011d84:	4610      	mov	r0, r2
 8011d86:	f7fe fdb0 	bl	80108ea <vListInsertEnd>
 8011d8a:	e005      	b.n	8011d98 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8011d8c:	693b      	ldr	r3, [r7, #16]
 8011d8e:	3318      	adds	r3, #24
 8011d90:	4619      	mov	r1, r3
 8011d92:	480e      	ldr	r0, [pc, #56]	@ (8011dcc <xTaskRemoveFromEventList+0xbc>)
 8011d94:	f7fe fda9 	bl	80108ea <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011d98:	693b      	ldr	r3, [r7, #16]
 8011d9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011d9c:	4b0c      	ldr	r3, [pc, #48]	@ (8011dd0 <xTaskRemoveFromEventList+0xc0>)
 8011d9e:	681b      	ldr	r3, [r3, #0]
 8011da0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011da2:	429a      	cmp	r2, r3
 8011da4:	d905      	bls.n	8011db2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8011da6:	2301      	movs	r3, #1
 8011da8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8011daa:	4b0a      	ldr	r3, [pc, #40]	@ (8011dd4 <xTaskRemoveFromEventList+0xc4>)
 8011dac:	2201      	movs	r2, #1
 8011dae:	601a      	str	r2, [r3, #0]
 8011db0:	e001      	b.n	8011db6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8011db2:	2300      	movs	r3, #0
 8011db4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8011db6:	697b      	ldr	r3, [r7, #20]
}
 8011db8:	4618      	mov	r0, r3
 8011dba:	3718      	adds	r7, #24
 8011dbc:	46bd      	mov	sp, r7
 8011dbe:	bd80      	pop	{r7, pc}
 8011dc0:	20004224 	.word	0x20004224
 8011dc4:	20004204 	.word	0x20004204
 8011dc8:	20003d2c 	.word	0x20003d2c
 8011dcc:	200041bc 	.word	0x200041bc
 8011dd0:	20003d28 	.word	0x20003d28
 8011dd4:	20004210 	.word	0x20004210

08011dd8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8011dd8:	b480      	push	{r7}
 8011dda:	b083      	sub	sp, #12
 8011ddc:	af00      	add	r7, sp, #0
 8011dde:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8011de0:	4b06      	ldr	r3, [pc, #24]	@ (8011dfc <vTaskInternalSetTimeOutState+0x24>)
 8011de2:	681a      	ldr	r2, [r3, #0]
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8011de8:	4b05      	ldr	r3, [pc, #20]	@ (8011e00 <vTaskInternalSetTimeOutState+0x28>)
 8011dea:	681a      	ldr	r2, [r3, #0]
 8011dec:	687b      	ldr	r3, [r7, #4]
 8011dee:	605a      	str	r2, [r3, #4]
}
 8011df0:	bf00      	nop
 8011df2:	370c      	adds	r7, #12
 8011df4:	46bd      	mov	sp, r7
 8011df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dfa:	4770      	bx	lr
 8011dfc:	20004214 	.word	0x20004214
 8011e00:	20004200 	.word	0x20004200

08011e04 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8011e04:	b580      	push	{r7, lr}
 8011e06:	b088      	sub	sp, #32
 8011e08:	af00      	add	r7, sp, #0
 8011e0a:	6078      	str	r0, [r7, #4]
 8011e0c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8011e0e:	687b      	ldr	r3, [r7, #4]
 8011e10:	2b00      	cmp	r3, #0
 8011e12:	d10b      	bne.n	8011e2c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8011e14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011e18:	f383 8811 	msr	BASEPRI, r3
 8011e1c:	f3bf 8f6f 	isb	sy
 8011e20:	f3bf 8f4f 	dsb	sy
 8011e24:	613b      	str	r3, [r7, #16]
}
 8011e26:	bf00      	nop
 8011e28:	bf00      	nop
 8011e2a:	e7fd      	b.n	8011e28 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8011e2c:	683b      	ldr	r3, [r7, #0]
 8011e2e:	2b00      	cmp	r3, #0
 8011e30:	d10b      	bne.n	8011e4a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8011e32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011e36:	f383 8811 	msr	BASEPRI, r3
 8011e3a:	f3bf 8f6f 	isb	sy
 8011e3e:	f3bf 8f4f 	dsb	sy
 8011e42:	60fb      	str	r3, [r7, #12]
}
 8011e44:	bf00      	nop
 8011e46:	bf00      	nop
 8011e48:	e7fd      	b.n	8011e46 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8011e4a:	f000 fe95 	bl	8012b78 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8011e4e:	4b1d      	ldr	r3, [pc, #116]	@ (8011ec4 <xTaskCheckForTimeOut+0xc0>)
 8011e50:	681b      	ldr	r3, [r3, #0]
 8011e52:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	685b      	ldr	r3, [r3, #4]
 8011e58:	69ba      	ldr	r2, [r7, #24]
 8011e5a:	1ad3      	subs	r3, r2, r3
 8011e5c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8011e5e:	683b      	ldr	r3, [r7, #0]
 8011e60:	681b      	ldr	r3, [r3, #0]
 8011e62:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8011e66:	d102      	bne.n	8011e6e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8011e68:	2300      	movs	r3, #0
 8011e6a:	61fb      	str	r3, [r7, #28]
 8011e6c:	e023      	b.n	8011eb6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	681a      	ldr	r2, [r3, #0]
 8011e72:	4b15      	ldr	r3, [pc, #84]	@ (8011ec8 <xTaskCheckForTimeOut+0xc4>)
 8011e74:	681b      	ldr	r3, [r3, #0]
 8011e76:	429a      	cmp	r2, r3
 8011e78:	d007      	beq.n	8011e8a <xTaskCheckForTimeOut+0x86>
 8011e7a:	687b      	ldr	r3, [r7, #4]
 8011e7c:	685b      	ldr	r3, [r3, #4]
 8011e7e:	69ba      	ldr	r2, [r7, #24]
 8011e80:	429a      	cmp	r2, r3
 8011e82:	d302      	bcc.n	8011e8a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8011e84:	2301      	movs	r3, #1
 8011e86:	61fb      	str	r3, [r7, #28]
 8011e88:	e015      	b.n	8011eb6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8011e8a:	683b      	ldr	r3, [r7, #0]
 8011e8c:	681b      	ldr	r3, [r3, #0]
 8011e8e:	697a      	ldr	r2, [r7, #20]
 8011e90:	429a      	cmp	r2, r3
 8011e92:	d20b      	bcs.n	8011eac <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8011e94:	683b      	ldr	r3, [r7, #0]
 8011e96:	681a      	ldr	r2, [r3, #0]
 8011e98:	697b      	ldr	r3, [r7, #20]
 8011e9a:	1ad2      	subs	r2, r2, r3
 8011e9c:	683b      	ldr	r3, [r7, #0]
 8011e9e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8011ea0:	6878      	ldr	r0, [r7, #4]
 8011ea2:	f7ff ff99 	bl	8011dd8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8011ea6:	2300      	movs	r3, #0
 8011ea8:	61fb      	str	r3, [r7, #28]
 8011eaa:	e004      	b.n	8011eb6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8011eac:	683b      	ldr	r3, [r7, #0]
 8011eae:	2200      	movs	r2, #0
 8011eb0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8011eb2:	2301      	movs	r3, #1
 8011eb4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8011eb6:	f000 fe91 	bl	8012bdc <vPortExitCritical>

	return xReturn;
 8011eba:	69fb      	ldr	r3, [r7, #28]
}
 8011ebc:	4618      	mov	r0, r3
 8011ebe:	3720      	adds	r7, #32
 8011ec0:	46bd      	mov	sp, r7
 8011ec2:	bd80      	pop	{r7, pc}
 8011ec4:	20004200 	.word	0x20004200
 8011ec8:	20004214 	.word	0x20004214

08011ecc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8011ecc:	b480      	push	{r7}
 8011ece:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8011ed0:	4b03      	ldr	r3, [pc, #12]	@ (8011ee0 <vTaskMissedYield+0x14>)
 8011ed2:	2201      	movs	r2, #1
 8011ed4:	601a      	str	r2, [r3, #0]
}
 8011ed6:	bf00      	nop
 8011ed8:	46bd      	mov	sp, r7
 8011eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ede:	4770      	bx	lr
 8011ee0:	20004210 	.word	0x20004210

08011ee4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8011ee4:	b580      	push	{r7, lr}
 8011ee6:	b082      	sub	sp, #8
 8011ee8:	af00      	add	r7, sp, #0
 8011eea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8011eec:	f000 f852 	bl	8011f94 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8011ef0:	4b06      	ldr	r3, [pc, #24]	@ (8011f0c <prvIdleTask+0x28>)
 8011ef2:	681b      	ldr	r3, [r3, #0]
 8011ef4:	2b01      	cmp	r3, #1
 8011ef6:	d9f9      	bls.n	8011eec <prvIdleTask+0x8>
			{
				taskYIELD();
 8011ef8:	4b05      	ldr	r3, [pc, #20]	@ (8011f10 <prvIdleTask+0x2c>)
 8011efa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011efe:	601a      	str	r2, [r3, #0]
 8011f00:	f3bf 8f4f 	dsb	sy
 8011f04:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8011f08:	e7f0      	b.n	8011eec <prvIdleTask+0x8>
 8011f0a:	bf00      	nop
 8011f0c:	20003d2c 	.word	0x20003d2c
 8011f10:	e000ed04 	.word	0xe000ed04

08011f14 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8011f14:	b580      	push	{r7, lr}
 8011f16:	b082      	sub	sp, #8
 8011f18:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011f1a:	2300      	movs	r3, #0
 8011f1c:	607b      	str	r3, [r7, #4]
 8011f1e:	e00c      	b.n	8011f3a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8011f20:	687a      	ldr	r2, [r7, #4]
 8011f22:	4613      	mov	r3, r2
 8011f24:	009b      	lsls	r3, r3, #2
 8011f26:	4413      	add	r3, r2
 8011f28:	009b      	lsls	r3, r3, #2
 8011f2a:	4a12      	ldr	r2, [pc, #72]	@ (8011f74 <prvInitialiseTaskLists+0x60>)
 8011f2c:	4413      	add	r3, r2
 8011f2e:	4618      	mov	r0, r3
 8011f30:	f7fe fcae 	bl	8010890 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011f34:	687b      	ldr	r3, [r7, #4]
 8011f36:	3301      	adds	r3, #1
 8011f38:	607b      	str	r3, [r7, #4]
 8011f3a:	687b      	ldr	r3, [r7, #4]
 8011f3c:	2b37      	cmp	r3, #55	@ 0x37
 8011f3e:	d9ef      	bls.n	8011f20 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8011f40:	480d      	ldr	r0, [pc, #52]	@ (8011f78 <prvInitialiseTaskLists+0x64>)
 8011f42:	f7fe fca5 	bl	8010890 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8011f46:	480d      	ldr	r0, [pc, #52]	@ (8011f7c <prvInitialiseTaskLists+0x68>)
 8011f48:	f7fe fca2 	bl	8010890 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8011f4c:	480c      	ldr	r0, [pc, #48]	@ (8011f80 <prvInitialiseTaskLists+0x6c>)
 8011f4e:	f7fe fc9f 	bl	8010890 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8011f52:	480c      	ldr	r0, [pc, #48]	@ (8011f84 <prvInitialiseTaskLists+0x70>)
 8011f54:	f7fe fc9c 	bl	8010890 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8011f58:	480b      	ldr	r0, [pc, #44]	@ (8011f88 <prvInitialiseTaskLists+0x74>)
 8011f5a:	f7fe fc99 	bl	8010890 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8011f5e:	4b0b      	ldr	r3, [pc, #44]	@ (8011f8c <prvInitialiseTaskLists+0x78>)
 8011f60:	4a05      	ldr	r2, [pc, #20]	@ (8011f78 <prvInitialiseTaskLists+0x64>)
 8011f62:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8011f64:	4b0a      	ldr	r3, [pc, #40]	@ (8011f90 <prvInitialiseTaskLists+0x7c>)
 8011f66:	4a05      	ldr	r2, [pc, #20]	@ (8011f7c <prvInitialiseTaskLists+0x68>)
 8011f68:	601a      	str	r2, [r3, #0]
}
 8011f6a:	bf00      	nop
 8011f6c:	3708      	adds	r7, #8
 8011f6e:	46bd      	mov	sp, r7
 8011f70:	bd80      	pop	{r7, pc}
 8011f72:	bf00      	nop
 8011f74:	20003d2c 	.word	0x20003d2c
 8011f78:	2000418c 	.word	0x2000418c
 8011f7c:	200041a0 	.word	0x200041a0
 8011f80:	200041bc 	.word	0x200041bc
 8011f84:	200041d0 	.word	0x200041d0
 8011f88:	200041e8 	.word	0x200041e8
 8011f8c:	200041b4 	.word	0x200041b4
 8011f90:	200041b8 	.word	0x200041b8

08011f94 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8011f94:	b580      	push	{r7, lr}
 8011f96:	b082      	sub	sp, #8
 8011f98:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011f9a:	e019      	b.n	8011fd0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8011f9c:	f000 fdec 	bl	8012b78 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011fa0:	4b10      	ldr	r3, [pc, #64]	@ (8011fe4 <prvCheckTasksWaitingTermination+0x50>)
 8011fa2:	68db      	ldr	r3, [r3, #12]
 8011fa4:	68db      	ldr	r3, [r3, #12]
 8011fa6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011fa8:	687b      	ldr	r3, [r7, #4]
 8011faa:	3304      	adds	r3, #4
 8011fac:	4618      	mov	r0, r3
 8011fae:	f7fe fcf9 	bl	80109a4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8011fb2:	4b0d      	ldr	r3, [pc, #52]	@ (8011fe8 <prvCheckTasksWaitingTermination+0x54>)
 8011fb4:	681b      	ldr	r3, [r3, #0]
 8011fb6:	3b01      	subs	r3, #1
 8011fb8:	4a0b      	ldr	r2, [pc, #44]	@ (8011fe8 <prvCheckTasksWaitingTermination+0x54>)
 8011fba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8011fbc:	4b0b      	ldr	r3, [pc, #44]	@ (8011fec <prvCheckTasksWaitingTermination+0x58>)
 8011fbe:	681b      	ldr	r3, [r3, #0]
 8011fc0:	3b01      	subs	r3, #1
 8011fc2:	4a0a      	ldr	r2, [pc, #40]	@ (8011fec <prvCheckTasksWaitingTermination+0x58>)
 8011fc4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8011fc6:	f000 fe09 	bl	8012bdc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8011fca:	6878      	ldr	r0, [r7, #4]
 8011fcc:	f000 f810 	bl	8011ff0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011fd0:	4b06      	ldr	r3, [pc, #24]	@ (8011fec <prvCheckTasksWaitingTermination+0x58>)
 8011fd2:	681b      	ldr	r3, [r3, #0]
 8011fd4:	2b00      	cmp	r3, #0
 8011fd6:	d1e1      	bne.n	8011f9c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8011fd8:	bf00      	nop
 8011fda:	bf00      	nop
 8011fdc:	3708      	adds	r7, #8
 8011fde:	46bd      	mov	sp, r7
 8011fe0:	bd80      	pop	{r7, pc}
 8011fe2:	bf00      	nop
 8011fe4:	200041d0 	.word	0x200041d0
 8011fe8:	200041fc 	.word	0x200041fc
 8011fec:	200041e4 	.word	0x200041e4

08011ff0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8011ff0:	b580      	push	{r7, lr}
 8011ff2:	b084      	sub	sp, #16
 8011ff4:	af00      	add	r7, sp, #0
 8011ff6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8011ff8:	687b      	ldr	r3, [r7, #4]
 8011ffa:	3354      	adds	r3, #84	@ 0x54
 8011ffc:	4618      	mov	r0, r3
 8011ffe:	f002 fe3b 	bl	8014c78 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8012002:	687b      	ldr	r3, [r7, #4]
 8012004:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8012008:	2b00      	cmp	r3, #0
 801200a:	d108      	bne.n	801201e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801200c:	687b      	ldr	r3, [r7, #4]
 801200e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012010:	4618      	mov	r0, r3
 8012012:	f000 ffa1 	bl	8012f58 <vPortFree>
				vPortFree( pxTCB );
 8012016:	6878      	ldr	r0, [r7, #4]
 8012018:	f000 ff9e 	bl	8012f58 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801201c:	e019      	b.n	8012052 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801201e:	687b      	ldr	r3, [r7, #4]
 8012020:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8012024:	2b01      	cmp	r3, #1
 8012026:	d103      	bne.n	8012030 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8012028:	6878      	ldr	r0, [r7, #4]
 801202a:	f000 ff95 	bl	8012f58 <vPortFree>
	}
 801202e:	e010      	b.n	8012052 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8012030:	687b      	ldr	r3, [r7, #4]
 8012032:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8012036:	2b02      	cmp	r3, #2
 8012038:	d00b      	beq.n	8012052 <prvDeleteTCB+0x62>
	__asm volatile
 801203a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801203e:	f383 8811 	msr	BASEPRI, r3
 8012042:	f3bf 8f6f 	isb	sy
 8012046:	f3bf 8f4f 	dsb	sy
 801204a:	60fb      	str	r3, [r7, #12]
}
 801204c:	bf00      	nop
 801204e:	bf00      	nop
 8012050:	e7fd      	b.n	801204e <prvDeleteTCB+0x5e>
	}
 8012052:	bf00      	nop
 8012054:	3710      	adds	r7, #16
 8012056:	46bd      	mov	sp, r7
 8012058:	bd80      	pop	{r7, pc}
	...

0801205c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801205c:	b480      	push	{r7}
 801205e:	b083      	sub	sp, #12
 8012060:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012062:	4b0c      	ldr	r3, [pc, #48]	@ (8012094 <prvResetNextTaskUnblockTime+0x38>)
 8012064:	681b      	ldr	r3, [r3, #0]
 8012066:	681b      	ldr	r3, [r3, #0]
 8012068:	2b00      	cmp	r3, #0
 801206a:	d104      	bne.n	8012076 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801206c:	4b0a      	ldr	r3, [pc, #40]	@ (8012098 <prvResetNextTaskUnblockTime+0x3c>)
 801206e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8012072:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8012074:	e008      	b.n	8012088 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012076:	4b07      	ldr	r3, [pc, #28]	@ (8012094 <prvResetNextTaskUnblockTime+0x38>)
 8012078:	681b      	ldr	r3, [r3, #0]
 801207a:	68db      	ldr	r3, [r3, #12]
 801207c:	68db      	ldr	r3, [r3, #12]
 801207e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8012080:	687b      	ldr	r3, [r7, #4]
 8012082:	685b      	ldr	r3, [r3, #4]
 8012084:	4a04      	ldr	r2, [pc, #16]	@ (8012098 <prvResetNextTaskUnblockTime+0x3c>)
 8012086:	6013      	str	r3, [r2, #0]
}
 8012088:	bf00      	nop
 801208a:	370c      	adds	r7, #12
 801208c:	46bd      	mov	sp, r7
 801208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012092:	4770      	bx	lr
 8012094:	200041b4 	.word	0x200041b4
 8012098:	2000421c 	.word	0x2000421c

0801209c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801209c:	b480      	push	{r7}
 801209e:	b083      	sub	sp, #12
 80120a0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80120a2:	4b0b      	ldr	r3, [pc, #44]	@ (80120d0 <xTaskGetSchedulerState+0x34>)
 80120a4:	681b      	ldr	r3, [r3, #0]
 80120a6:	2b00      	cmp	r3, #0
 80120a8:	d102      	bne.n	80120b0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80120aa:	2301      	movs	r3, #1
 80120ac:	607b      	str	r3, [r7, #4]
 80120ae:	e008      	b.n	80120c2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80120b0:	4b08      	ldr	r3, [pc, #32]	@ (80120d4 <xTaskGetSchedulerState+0x38>)
 80120b2:	681b      	ldr	r3, [r3, #0]
 80120b4:	2b00      	cmp	r3, #0
 80120b6:	d102      	bne.n	80120be <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80120b8:	2302      	movs	r3, #2
 80120ba:	607b      	str	r3, [r7, #4]
 80120bc:	e001      	b.n	80120c2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80120be:	2300      	movs	r3, #0
 80120c0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80120c2:	687b      	ldr	r3, [r7, #4]
	}
 80120c4:	4618      	mov	r0, r3
 80120c6:	370c      	adds	r7, #12
 80120c8:	46bd      	mov	sp, r7
 80120ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120ce:	4770      	bx	lr
 80120d0:	20004208 	.word	0x20004208
 80120d4:	20004224 	.word	0x20004224

080120d8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80120d8:	b580      	push	{r7, lr}
 80120da:	b086      	sub	sp, #24
 80120dc:	af00      	add	r7, sp, #0
 80120de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80120e0:	687b      	ldr	r3, [r7, #4]
 80120e2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80120e4:	2300      	movs	r3, #0
 80120e6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80120e8:	687b      	ldr	r3, [r7, #4]
 80120ea:	2b00      	cmp	r3, #0
 80120ec:	d058      	beq.n	80121a0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80120ee:	4b2f      	ldr	r3, [pc, #188]	@ (80121ac <xTaskPriorityDisinherit+0xd4>)
 80120f0:	681b      	ldr	r3, [r3, #0]
 80120f2:	693a      	ldr	r2, [r7, #16]
 80120f4:	429a      	cmp	r2, r3
 80120f6:	d00b      	beq.n	8012110 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80120f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80120fc:	f383 8811 	msr	BASEPRI, r3
 8012100:	f3bf 8f6f 	isb	sy
 8012104:	f3bf 8f4f 	dsb	sy
 8012108:	60fb      	str	r3, [r7, #12]
}
 801210a:	bf00      	nop
 801210c:	bf00      	nop
 801210e:	e7fd      	b.n	801210c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8012110:	693b      	ldr	r3, [r7, #16]
 8012112:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012114:	2b00      	cmp	r3, #0
 8012116:	d10b      	bne.n	8012130 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8012118:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801211c:	f383 8811 	msr	BASEPRI, r3
 8012120:	f3bf 8f6f 	isb	sy
 8012124:	f3bf 8f4f 	dsb	sy
 8012128:	60bb      	str	r3, [r7, #8]
}
 801212a:	bf00      	nop
 801212c:	bf00      	nop
 801212e:	e7fd      	b.n	801212c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8012130:	693b      	ldr	r3, [r7, #16]
 8012132:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012134:	1e5a      	subs	r2, r3, #1
 8012136:	693b      	ldr	r3, [r7, #16]
 8012138:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801213a:	693b      	ldr	r3, [r7, #16]
 801213c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801213e:	693b      	ldr	r3, [r7, #16]
 8012140:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012142:	429a      	cmp	r2, r3
 8012144:	d02c      	beq.n	80121a0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8012146:	693b      	ldr	r3, [r7, #16]
 8012148:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801214a:	2b00      	cmp	r3, #0
 801214c:	d128      	bne.n	80121a0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801214e:	693b      	ldr	r3, [r7, #16]
 8012150:	3304      	adds	r3, #4
 8012152:	4618      	mov	r0, r3
 8012154:	f7fe fc26 	bl	80109a4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8012158:	693b      	ldr	r3, [r7, #16]
 801215a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801215c:	693b      	ldr	r3, [r7, #16]
 801215e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012160:	693b      	ldr	r3, [r7, #16]
 8012162:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012164:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8012168:	693b      	ldr	r3, [r7, #16]
 801216a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801216c:	693b      	ldr	r3, [r7, #16]
 801216e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012170:	4b0f      	ldr	r3, [pc, #60]	@ (80121b0 <xTaskPriorityDisinherit+0xd8>)
 8012172:	681b      	ldr	r3, [r3, #0]
 8012174:	429a      	cmp	r2, r3
 8012176:	d903      	bls.n	8012180 <xTaskPriorityDisinherit+0xa8>
 8012178:	693b      	ldr	r3, [r7, #16]
 801217a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801217c:	4a0c      	ldr	r2, [pc, #48]	@ (80121b0 <xTaskPriorityDisinherit+0xd8>)
 801217e:	6013      	str	r3, [r2, #0]
 8012180:	693b      	ldr	r3, [r7, #16]
 8012182:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012184:	4613      	mov	r3, r2
 8012186:	009b      	lsls	r3, r3, #2
 8012188:	4413      	add	r3, r2
 801218a:	009b      	lsls	r3, r3, #2
 801218c:	4a09      	ldr	r2, [pc, #36]	@ (80121b4 <xTaskPriorityDisinherit+0xdc>)
 801218e:	441a      	add	r2, r3
 8012190:	693b      	ldr	r3, [r7, #16]
 8012192:	3304      	adds	r3, #4
 8012194:	4619      	mov	r1, r3
 8012196:	4610      	mov	r0, r2
 8012198:	f7fe fba7 	bl	80108ea <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801219c:	2301      	movs	r3, #1
 801219e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80121a0:	697b      	ldr	r3, [r7, #20]
	}
 80121a2:	4618      	mov	r0, r3
 80121a4:	3718      	adds	r7, #24
 80121a6:	46bd      	mov	sp, r7
 80121a8:	bd80      	pop	{r7, pc}
 80121aa:	bf00      	nop
 80121ac:	20003d28 	.word	0x20003d28
 80121b0:	20004204 	.word	0x20004204
 80121b4:	20003d2c 	.word	0x20003d2c

080121b8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80121b8:	b580      	push	{r7, lr}
 80121ba:	b084      	sub	sp, #16
 80121bc:	af00      	add	r7, sp, #0
 80121be:	6078      	str	r0, [r7, #4]
 80121c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80121c2:	4b21      	ldr	r3, [pc, #132]	@ (8012248 <prvAddCurrentTaskToDelayedList+0x90>)
 80121c4:	681b      	ldr	r3, [r3, #0]
 80121c6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80121c8:	4b20      	ldr	r3, [pc, #128]	@ (801224c <prvAddCurrentTaskToDelayedList+0x94>)
 80121ca:	681b      	ldr	r3, [r3, #0]
 80121cc:	3304      	adds	r3, #4
 80121ce:	4618      	mov	r0, r3
 80121d0:	f7fe fbe8 	bl	80109a4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80121d4:	687b      	ldr	r3, [r7, #4]
 80121d6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80121da:	d10a      	bne.n	80121f2 <prvAddCurrentTaskToDelayedList+0x3a>
 80121dc:	683b      	ldr	r3, [r7, #0]
 80121de:	2b00      	cmp	r3, #0
 80121e0:	d007      	beq.n	80121f2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80121e2:	4b1a      	ldr	r3, [pc, #104]	@ (801224c <prvAddCurrentTaskToDelayedList+0x94>)
 80121e4:	681b      	ldr	r3, [r3, #0]
 80121e6:	3304      	adds	r3, #4
 80121e8:	4619      	mov	r1, r3
 80121ea:	4819      	ldr	r0, [pc, #100]	@ (8012250 <prvAddCurrentTaskToDelayedList+0x98>)
 80121ec:	f7fe fb7d 	bl	80108ea <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80121f0:	e026      	b.n	8012240 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80121f2:	68fa      	ldr	r2, [r7, #12]
 80121f4:	687b      	ldr	r3, [r7, #4]
 80121f6:	4413      	add	r3, r2
 80121f8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80121fa:	4b14      	ldr	r3, [pc, #80]	@ (801224c <prvAddCurrentTaskToDelayedList+0x94>)
 80121fc:	681b      	ldr	r3, [r3, #0]
 80121fe:	68ba      	ldr	r2, [r7, #8]
 8012200:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8012202:	68ba      	ldr	r2, [r7, #8]
 8012204:	68fb      	ldr	r3, [r7, #12]
 8012206:	429a      	cmp	r2, r3
 8012208:	d209      	bcs.n	801221e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801220a:	4b12      	ldr	r3, [pc, #72]	@ (8012254 <prvAddCurrentTaskToDelayedList+0x9c>)
 801220c:	681a      	ldr	r2, [r3, #0]
 801220e:	4b0f      	ldr	r3, [pc, #60]	@ (801224c <prvAddCurrentTaskToDelayedList+0x94>)
 8012210:	681b      	ldr	r3, [r3, #0]
 8012212:	3304      	adds	r3, #4
 8012214:	4619      	mov	r1, r3
 8012216:	4610      	mov	r0, r2
 8012218:	f7fe fb8b 	bl	8010932 <vListInsert>
}
 801221c:	e010      	b.n	8012240 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801221e:	4b0e      	ldr	r3, [pc, #56]	@ (8012258 <prvAddCurrentTaskToDelayedList+0xa0>)
 8012220:	681a      	ldr	r2, [r3, #0]
 8012222:	4b0a      	ldr	r3, [pc, #40]	@ (801224c <prvAddCurrentTaskToDelayedList+0x94>)
 8012224:	681b      	ldr	r3, [r3, #0]
 8012226:	3304      	adds	r3, #4
 8012228:	4619      	mov	r1, r3
 801222a:	4610      	mov	r0, r2
 801222c:	f7fe fb81 	bl	8010932 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8012230:	4b0a      	ldr	r3, [pc, #40]	@ (801225c <prvAddCurrentTaskToDelayedList+0xa4>)
 8012232:	681b      	ldr	r3, [r3, #0]
 8012234:	68ba      	ldr	r2, [r7, #8]
 8012236:	429a      	cmp	r2, r3
 8012238:	d202      	bcs.n	8012240 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801223a:	4a08      	ldr	r2, [pc, #32]	@ (801225c <prvAddCurrentTaskToDelayedList+0xa4>)
 801223c:	68bb      	ldr	r3, [r7, #8]
 801223e:	6013      	str	r3, [r2, #0]
}
 8012240:	bf00      	nop
 8012242:	3710      	adds	r7, #16
 8012244:	46bd      	mov	sp, r7
 8012246:	bd80      	pop	{r7, pc}
 8012248:	20004200 	.word	0x20004200
 801224c:	20003d28 	.word	0x20003d28
 8012250:	200041e8 	.word	0x200041e8
 8012254:	200041b8 	.word	0x200041b8
 8012258:	200041b4 	.word	0x200041b4
 801225c:	2000421c 	.word	0x2000421c

08012260 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8012260:	b580      	push	{r7, lr}
 8012262:	b08a      	sub	sp, #40	@ 0x28
 8012264:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8012266:	2300      	movs	r3, #0
 8012268:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801226a:	f000 fb13 	bl	8012894 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801226e:	4b1d      	ldr	r3, [pc, #116]	@ (80122e4 <xTimerCreateTimerTask+0x84>)
 8012270:	681b      	ldr	r3, [r3, #0]
 8012272:	2b00      	cmp	r3, #0
 8012274:	d021      	beq.n	80122ba <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8012276:	2300      	movs	r3, #0
 8012278:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801227a:	2300      	movs	r3, #0
 801227c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801227e:	1d3a      	adds	r2, r7, #4
 8012280:	f107 0108 	add.w	r1, r7, #8
 8012284:	f107 030c 	add.w	r3, r7, #12
 8012288:	4618      	mov	r0, r3
 801228a:	f7fe fae7 	bl	801085c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801228e:	6879      	ldr	r1, [r7, #4]
 8012290:	68bb      	ldr	r3, [r7, #8]
 8012292:	68fa      	ldr	r2, [r7, #12]
 8012294:	9202      	str	r2, [sp, #8]
 8012296:	9301      	str	r3, [sp, #4]
 8012298:	2302      	movs	r3, #2
 801229a:	9300      	str	r3, [sp, #0]
 801229c:	2300      	movs	r3, #0
 801229e:	460a      	mov	r2, r1
 80122a0:	4911      	ldr	r1, [pc, #68]	@ (80122e8 <xTimerCreateTimerTask+0x88>)
 80122a2:	4812      	ldr	r0, [pc, #72]	@ (80122ec <xTimerCreateTimerTask+0x8c>)
 80122a4:	f7ff f8a2 	bl	80113ec <xTaskCreateStatic>
 80122a8:	4603      	mov	r3, r0
 80122aa:	4a11      	ldr	r2, [pc, #68]	@ (80122f0 <xTimerCreateTimerTask+0x90>)
 80122ac:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80122ae:	4b10      	ldr	r3, [pc, #64]	@ (80122f0 <xTimerCreateTimerTask+0x90>)
 80122b0:	681b      	ldr	r3, [r3, #0]
 80122b2:	2b00      	cmp	r3, #0
 80122b4:	d001      	beq.n	80122ba <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80122b6:	2301      	movs	r3, #1
 80122b8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80122ba:	697b      	ldr	r3, [r7, #20]
 80122bc:	2b00      	cmp	r3, #0
 80122be:	d10b      	bne.n	80122d8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80122c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80122c4:	f383 8811 	msr	BASEPRI, r3
 80122c8:	f3bf 8f6f 	isb	sy
 80122cc:	f3bf 8f4f 	dsb	sy
 80122d0:	613b      	str	r3, [r7, #16]
}
 80122d2:	bf00      	nop
 80122d4:	bf00      	nop
 80122d6:	e7fd      	b.n	80122d4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80122d8:	697b      	ldr	r3, [r7, #20]
}
 80122da:	4618      	mov	r0, r3
 80122dc:	3718      	adds	r7, #24
 80122de:	46bd      	mov	sp, r7
 80122e0:	bd80      	pop	{r7, pc}
 80122e2:	bf00      	nop
 80122e4:	20004258 	.word	0x20004258
 80122e8:	08017070 	.word	0x08017070
 80122ec:	0801242d 	.word	0x0801242d
 80122f0:	2000425c 	.word	0x2000425c

080122f4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80122f4:	b580      	push	{r7, lr}
 80122f6:	b08a      	sub	sp, #40	@ 0x28
 80122f8:	af00      	add	r7, sp, #0
 80122fa:	60f8      	str	r0, [r7, #12]
 80122fc:	60b9      	str	r1, [r7, #8]
 80122fe:	607a      	str	r2, [r7, #4]
 8012300:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8012302:	2300      	movs	r3, #0
 8012304:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8012306:	68fb      	ldr	r3, [r7, #12]
 8012308:	2b00      	cmp	r3, #0
 801230a:	d10b      	bne.n	8012324 <xTimerGenericCommand+0x30>
	__asm volatile
 801230c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012310:	f383 8811 	msr	BASEPRI, r3
 8012314:	f3bf 8f6f 	isb	sy
 8012318:	f3bf 8f4f 	dsb	sy
 801231c:	623b      	str	r3, [r7, #32]
}
 801231e:	bf00      	nop
 8012320:	bf00      	nop
 8012322:	e7fd      	b.n	8012320 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8012324:	4b19      	ldr	r3, [pc, #100]	@ (801238c <xTimerGenericCommand+0x98>)
 8012326:	681b      	ldr	r3, [r3, #0]
 8012328:	2b00      	cmp	r3, #0
 801232a:	d02a      	beq.n	8012382 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801232c:	68bb      	ldr	r3, [r7, #8]
 801232e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8012330:	687b      	ldr	r3, [r7, #4]
 8012332:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8012334:	68fb      	ldr	r3, [r7, #12]
 8012336:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8012338:	68bb      	ldr	r3, [r7, #8]
 801233a:	2b05      	cmp	r3, #5
 801233c:	dc18      	bgt.n	8012370 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801233e:	f7ff fead 	bl	801209c <xTaskGetSchedulerState>
 8012342:	4603      	mov	r3, r0
 8012344:	2b02      	cmp	r3, #2
 8012346:	d109      	bne.n	801235c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8012348:	4b10      	ldr	r3, [pc, #64]	@ (801238c <xTimerGenericCommand+0x98>)
 801234a:	6818      	ldr	r0, [r3, #0]
 801234c:	f107 0110 	add.w	r1, r7, #16
 8012350:	2300      	movs	r3, #0
 8012352:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012354:	f7fe fc5a 	bl	8010c0c <xQueueGenericSend>
 8012358:	6278      	str	r0, [r7, #36]	@ 0x24
 801235a:	e012      	b.n	8012382 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801235c:	4b0b      	ldr	r3, [pc, #44]	@ (801238c <xTimerGenericCommand+0x98>)
 801235e:	6818      	ldr	r0, [r3, #0]
 8012360:	f107 0110 	add.w	r1, r7, #16
 8012364:	2300      	movs	r3, #0
 8012366:	2200      	movs	r2, #0
 8012368:	f7fe fc50 	bl	8010c0c <xQueueGenericSend>
 801236c:	6278      	str	r0, [r7, #36]	@ 0x24
 801236e:	e008      	b.n	8012382 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8012370:	4b06      	ldr	r3, [pc, #24]	@ (801238c <xTimerGenericCommand+0x98>)
 8012372:	6818      	ldr	r0, [r3, #0]
 8012374:	f107 0110 	add.w	r1, r7, #16
 8012378:	2300      	movs	r3, #0
 801237a:	683a      	ldr	r2, [r7, #0]
 801237c:	f7fe fd48 	bl	8010e10 <xQueueGenericSendFromISR>
 8012380:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8012382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8012384:	4618      	mov	r0, r3
 8012386:	3728      	adds	r7, #40	@ 0x28
 8012388:	46bd      	mov	sp, r7
 801238a:	bd80      	pop	{r7, pc}
 801238c:	20004258 	.word	0x20004258

08012390 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8012390:	b580      	push	{r7, lr}
 8012392:	b088      	sub	sp, #32
 8012394:	af02      	add	r7, sp, #8
 8012396:	6078      	str	r0, [r7, #4]
 8012398:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801239a:	4b23      	ldr	r3, [pc, #140]	@ (8012428 <prvProcessExpiredTimer+0x98>)
 801239c:	681b      	ldr	r3, [r3, #0]
 801239e:	68db      	ldr	r3, [r3, #12]
 80123a0:	68db      	ldr	r3, [r3, #12]
 80123a2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80123a4:	697b      	ldr	r3, [r7, #20]
 80123a6:	3304      	adds	r3, #4
 80123a8:	4618      	mov	r0, r3
 80123aa:	f7fe fafb 	bl	80109a4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80123ae:	697b      	ldr	r3, [r7, #20]
 80123b0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80123b4:	f003 0304 	and.w	r3, r3, #4
 80123b8:	2b00      	cmp	r3, #0
 80123ba:	d023      	beq.n	8012404 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80123bc:	697b      	ldr	r3, [r7, #20]
 80123be:	699a      	ldr	r2, [r3, #24]
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	18d1      	adds	r1, r2, r3
 80123c4:	687b      	ldr	r3, [r7, #4]
 80123c6:	683a      	ldr	r2, [r7, #0]
 80123c8:	6978      	ldr	r0, [r7, #20]
 80123ca:	f000 f8d5 	bl	8012578 <prvInsertTimerInActiveList>
 80123ce:	4603      	mov	r3, r0
 80123d0:	2b00      	cmp	r3, #0
 80123d2:	d020      	beq.n	8012416 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80123d4:	2300      	movs	r3, #0
 80123d6:	9300      	str	r3, [sp, #0]
 80123d8:	2300      	movs	r3, #0
 80123da:	687a      	ldr	r2, [r7, #4]
 80123dc:	2100      	movs	r1, #0
 80123de:	6978      	ldr	r0, [r7, #20]
 80123e0:	f7ff ff88 	bl	80122f4 <xTimerGenericCommand>
 80123e4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80123e6:	693b      	ldr	r3, [r7, #16]
 80123e8:	2b00      	cmp	r3, #0
 80123ea:	d114      	bne.n	8012416 <prvProcessExpiredTimer+0x86>
	__asm volatile
 80123ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80123f0:	f383 8811 	msr	BASEPRI, r3
 80123f4:	f3bf 8f6f 	isb	sy
 80123f8:	f3bf 8f4f 	dsb	sy
 80123fc:	60fb      	str	r3, [r7, #12]
}
 80123fe:	bf00      	nop
 8012400:	bf00      	nop
 8012402:	e7fd      	b.n	8012400 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012404:	697b      	ldr	r3, [r7, #20]
 8012406:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801240a:	f023 0301 	bic.w	r3, r3, #1
 801240e:	b2da      	uxtb	r2, r3
 8012410:	697b      	ldr	r3, [r7, #20]
 8012412:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012416:	697b      	ldr	r3, [r7, #20]
 8012418:	6a1b      	ldr	r3, [r3, #32]
 801241a:	6978      	ldr	r0, [r7, #20]
 801241c:	4798      	blx	r3
}
 801241e:	bf00      	nop
 8012420:	3718      	adds	r7, #24
 8012422:	46bd      	mov	sp, r7
 8012424:	bd80      	pop	{r7, pc}
 8012426:	bf00      	nop
 8012428:	20004250 	.word	0x20004250

0801242c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 801242c:	b580      	push	{r7, lr}
 801242e:	b084      	sub	sp, #16
 8012430:	af00      	add	r7, sp, #0
 8012432:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8012434:	f107 0308 	add.w	r3, r7, #8
 8012438:	4618      	mov	r0, r3
 801243a:	f000 f859 	bl	80124f0 <prvGetNextExpireTime>
 801243e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8012440:	68bb      	ldr	r3, [r7, #8]
 8012442:	4619      	mov	r1, r3
 8012444:	68f8      	ldr	r0, [r7, #12]
 8012446:	f000 f805 	bl	8012454 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801244a:	f000 f8d7 	bl	80125fc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801244e:	bf00      	nop
 8012450:	e7f0      	b.n	8012434 <prvTimerTask+0x8>
	...

08012454 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8012454:	b580      	push	{r7, lr}
 8012456:	b084      	sub	sp, #16
 8012458:	af00      	add	r7, sp, #0
 801245a:	6078      	str	r0, [r7, #4]
 801245c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801245e:	f7ff fa29 	bl	80118b4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8012462:	f107 0308 	add.w	r3, r7, #8
 8012466:	4618      	mov	r0, r3
 8012468:	f000 f866 	bl	8012538 <prvSampleTimeNow>
 801246c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801246e:	68bb      	ldr	r3, [r7, #8]
 8012470:	2b00      	cmp	r3, #0
 8012472:	d130      	bne.n	80124d6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8012474:	683b      	ldr	r3, [r7, #0]
 8012476:	2b00      	cmp	r3, #0
 8012478:	d10a      	bne.n	8012490 <prvProcessTimerOrBlockTask+0x3c>
 801247a:	687a      	ldr	r2, [r7, #4]
 801247c:	68fb      	ldr	r3, [r7, #12]
 801247e:	429a      	cmp	r2, r3
 8012480:	d806      	bhi.n	8012490 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8012482:	f7ff fa25 	bl	80118d0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8012486:	68f9      	ldr	r1, [r7, #12]
 8012488:	6878      	ldr	r0, [r7, #4]
 801248a:	f7ff ff81 	bl	8012390 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801248e:	e024      	b.n	80124da <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8012490:	683b      	ldr	r3, [r7, #0]
 8012492:	2b00      	cmp	r3, #0
 8012494:	d008      	beq.n	80124a8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8012496:	4b13      	ldr	r3, [pc, #76]	@ (80124e4 <prvProcessTimerOrBlockTask+0x90>)
 8012498:	681b      	ldr	r3, [r3, #0]
 801249a:	681b      	ldr	r3, [r3, #0]
 801249c:	2b00      	cmp	r3, #0
 801249e:	d101      	bne.n	80124a4 <prvProcessTimerOrBlockTask+0x50>
 80124a0:	2301      	movs	r3, #1
 80124a2:	e000      	b.n	80124a6 <prvProcessTimerOrBlockTask+0x52>
 80124a4:	2300      	movs	r3, #0
 80124a6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80124a8:	4b0f      	ldr	r3, [pc, #60]	@ (80124e8 <prvProcessTimerOrBlockTask+0x94>)
 80124aa:	6818      	ldr	r0, [r3, #0]
 80124ac:	687a      	ldr	r2, [r7, #4]
 80124ae:	68fb      	ldr	r3, [r7, #12]
 80124b0:	1ad3      	subs	r3, r2, r3
 80124b2:	683a      	ldr	r2, [r7, #0]
 80124b4:	4619      	mov	r1, r3
 80124b6:	f7fe ff65 	bl	8011384 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80124ba:	f7ff fa09 	bl	80118d0 <xTaskResumeAll>
 80124be:	4603      	mov	r3, r0
 80124c0:	2b00      	cmp	r3, #0
 80124c2:	d10a      	bne.n	80124da <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80124c4:	4b09      	ldr	r3, [pc, #36]	@ (80124ec <prvProcessTimerOrBlockTask+0x98>)
 80124c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80124ca:	601a      	str	r2, [r3, #0]
 80124cc:	f3bf 8f4f 	dsb	sy
 80124d0:	f3bf 8f6f 	isb	sy
}
 80124d4:	e001      	b.n	80124da <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80124d6:	f7ff f9fb 	bl	80118d0 <xTaskResumeAll>
}
 80124da:	bf00      	nop
 80124dc:	3710      	adds	r7, #16
 80124de:	46bd      	mov	sp, r7
 80124e0:	bd80      	pop	{r7, pc}
 80124e2:	bf00      	nop
 80124e4:	20004254 	.word	0x20004254
 80124e8:	20004258 	.word	0x20004258
 80124ec:	e000ed04 	.word	0xe000ed04

080124f0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80124f0:	b480      	push	{r7}
 80124f2:	b085      	sub	sp, #20
 80124f4:	af00      	add	r7, sp, #0
 80124f6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80124f8:	4b0e      	ldr	r3, [pc, #56]	@ (8012534 <prvGetNextExpireTime+0x44>)
 80124fa:	681b      	ldr	r3, [r3, #0]
 80124fc:	681b      	ldr	r3, [r3, #0]
 80124fe:	2b00      	cmp	r3, #0
 8012500:	d101      	bne.n	8012506 <prvGetNextExpireTime+0x16>
 8012502:	2201      	movs	r2, #1
 8012504:	e000      	b.n	8012508 <prvGetNextExpireTime+0x18>
 8012506:	2200      	movs	r2, #0
 8012508:	687b      	ldr	r3, [r7, #4]
 801250a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	681b      	ldr	r3, [r3, #0]
 8012510:	2b00      	cmp	r3, #0
 8012512:	d105      	bne.n	8012520 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8012514:	4b07      	ldr	r3, [pc, #28]	@ (8012534 <prvGetNextExpireTime+0x44>)
 8012516:	681b      	ldr	r3, [r3, #0]
 8012518:	68db      	ldr	r3, [r3, #12]
 801251a:	681b      	ldr	r3, [r3, #0]
 801251c:	60fb      	str	r3, [r7, #12]
 801251e:	e001      	b.n	8012524 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8012520:	2300      	movs	r3, #0
 8012522:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8012524:	68fb      	ldr	r3, [r7, #12]
}
 8012526:	4618      	mov	r0, r3
 8012528:	3714      	adds	r7, #20
 801252a:	46bd      	mov	sp, r7
 801252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012530:	4770      	bx	lr
 8012532:	bf00      	nop
 8012534:	20004250 	.word	0x20004250

08012538 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8012538:	b580      	push	{r7, lr}
 801253a:	b084      	sub	sp, #16
 801253c:	af00      	add	r7, sp, #0
 801253e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8012540:	f7ff fa64 	bl	8011a0c <xTaskGetTickCount>
 8012544:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8012546:	4b0b      	ldr	r3, [pc, #44]	@ (8012574 <prvSampleTimeNow+0x3c>)
 8012548:	681b      	ldr	r3, [r3, #0]
 801254a:	68fa      	ldr	r2, [r7, #12]
 801254c:	429a      	cmp	r2, r3
 801254e:	d205      	bcs.n	801255c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8012550:	f000 f93a 	bl	80127c8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	2201      	movs	r2, #1
 8012558:	601a      	str	r2, [r3, #0]
 801255a:	e002      	b.n	8012562 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	2200      	movs	r2, #0
 8012560:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8012562:	4a04      	ldr	r2, [pc, #16]	@ (8012574 <prvSampleTimeNow+0x3c>)
 8012564:	68fb      	ldr	r3, [r7, #12]
 8012566:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8012568:	68fb      	ldr	r3, [r7, #12]
}
 801256a:	4618      	mov	r0, r3
 801256c:	3710      	adds	r7, #16
 801256e:	46bd      	mov	sp, r7
 8012570:	bd80      	pop	{r7, pc}
 8012572:	bf00      	nop
 8012574:	20004260 	.word	0x20004260

08012578 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8012578:	b580      	push	{r7, lr}
 801257a:	b086      	sub	sp, #24
 801257c:	af00      	add	r7, sp, #0
 801257e:	60f8      	str	r0, [r7, #12]
 8012580:	60b9      	str	r1, [r7, #8]
 8012582:	607a      	str	r2, [r7, #4]
 8012584:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8012586:	2300      	movs	r3, #0
 8012588:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801258a:	68fb      	ldr	r3, [r7, #12]
 801258c:	68ba      	ldr	r2, [r7, #8]
 801258e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8012590:	68fb      	ldr	r3, [r7, #12]
 8012592:	68fa      	ldr	r2, [r7, #12]
 8012594:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8012596:	68ba      	ldr	r2, [r7, #8]
 8012598:	687b      	ldr	r3, [r7, #4]
 801259a:	429a      	cmp	r2, r3
 801259c:	d812      	bhi.n	80125c4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801259e:	687a      	ldr	r2, [r7, #4]
 80125a0:	683b      	ldr	r3, [r7, #0]
 80125a2:	1ad2      	subs	r2, r2, r3
 80125a4:	68fb      	ldr	r3, [r7, #12]
 80125a6:	699b      	ldr	r3, [r3, #24]
 80125a8:	429a      	cmp	r2, r3
 80125aa:	d302      	bcc.n	80125b2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80125ac:	2301      	movs	r3, #1
 80125ae:	617b      	str	r3, [r7, #20]
 80125b0:	e01b      	b.n	80125ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80125b2:	4b10      	ldr	r3, [pc, #64]	@ (80125f4 <prvInsertTimerInActiveList+0x7c>)
 80125b4:	681a      	ldr	r2, [r3, #0]
 80125b6:	68fb      	ldr	r3, [r7, #12]
 80125b8:	3304      	adds	r3, #4
 80125ba:	4619      	mov	r1, r3
 80125bc:	4610      	mov	r0, r2
 80125be:	f7fe f9b8 	bl	8010932 <vListInsert>
 80125c2:	e012      	b.n	80125ea <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80125c4:	687a      	ldr	r2, [r7, #4]
 80125c6:	683b      	ldr	r3, [r7, #0]
 80125c8:	429a      	cmp	r2, r3
 80125ca:	d206      	bcs.n	80125da <prvInsertTimerInActiveList+0x62>
 80125cc:	68ba      	ldr	r2, [r7, #8]
 80125ce:	683b      	ldr	r3, [r7, #0]
 80125d0:	429a      	cmp	r2, r3
 80125d2:	d302      	bcc.n	80125da <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80125d4:	2301      	movs	r3, #1
 80125d6:	617b      	str	r3, [r7, #20]
 80125d8:	e007      	b.n	80125ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80125da:	4b07      	ldr	r3, [pc, #28]	@ (80125f8 <prvInsertTimerInActiveList+0x80>)
 80125dc:	681a      	ldr	r2, [r3, #0]
 80125de:	68fb      	ldr	r3, [r7, #12]
 80125e0:	3304      	adds	r3, #4
 80125e2:	4619      	mov	r1, r3
 80125e4:	4610      	mov	r0, r2
 80125e6:	f7fe f9a4 	bl	8010932 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80125ea:	697b      	ldr	r3, [r7, #20]
}
 80125ec:	4618      	mov	r0, r3
 80125ee:	3718      	adds	r7, #24
 80125f0:	46bd      	mov	sp, r7
 80125f2:	bd80      	pop	{r7, pc}
 80125f4:	20004254 	.word	0x20004254
 80125f8:	20004250 	.word	0x20004250

080125fc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80125fc:	b580      	push	{r7, lr}
 80125fe:	b08e      	sub	sp, #56	@ 0x38
 8012600:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8012602:	e0ce      	b.n	80127a2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8012604:	687b      	ldr	r3, [r7, #4]
 8012606:	2b00      	cmp	r3, #0
 8012608:	da19      	bge.n	801263e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801260a:	1d3b      	adds	r3, r7, #4
 801260c:	3304      	adds	r3, #4
 801260e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8012610:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012612:	2b00      	cmp	r3, #0
 8012614:	d10b      	bne.n	801262e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8012616:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801261a:	f383 8811 	msr	BASEPRI, r3
 801261e:	f3bf 8f6f 	isb	sy
 8012622:	f3bf 8f4f 	dsb	sy
 8012626:	61fb      	str	r3, [r7, #28]
}
 8012628:	bf00      	nop
 801262a:	bf00      	nop
 801262c:	e7fd      	b.n	801262a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801262e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012630:	681b      	ldr	r3, [r3, #0]
 8012632:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012634:	6850      	ldr	r0, [r2, #4]
 8012636:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012638:	6892      	ldr	r2, [r2, #8]
 801263a:	4611      	mov	r1, r2
 801263c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801263e:	687b      	ldr	r3, [r7, #4]
 8012640:	2b00      	cmp	r3, #0
 8012642:	f2c0 80ae 	blt.w	80127a2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8012646:	68fb      	ldr	r3, [r7, #12]
 8012648:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801264a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801264c:	695b      	ldr	r3, [r3, #20]
 801264e:	2b00      	cmp	r3, #0
 8012650:	d004      	beq.n	801265c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012652:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012654:	3304      	adds	r3, #4
 8012656:	4618      	mov	r0, r3
 8012658:	f7fe f9a4 	bl	80109a4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801265c:	463b      	mov	r3, r7
 801265e:	4618      	mov	r0, r3
 8012660:	f7ff ff6a 	bl	8012538 <prvSampleTimeNow>
 8012664:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8012666:	687b      	ldr	r3, [r7, #4]
 8012668:	2b09      	cmp	r3, #9
 801266a:	f200 8097 	bhi.w	801279c <prvProcessReceivedCommands+0x1a0>
 801266e:	a201      	add	r2, pc, #4	@ (adr r2, 8012674 <prvProcessReceivedCommands+0x78>)
 8012670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012674:	0801269d 	.word	0x0801269d
 8012678:	0801269d 	.word	0x0801269d
 801267c:	0801269d 	.word	0x0801269d
 8012680:	08012713 	.word	0x08012713
 8012684:	08012727 	.word	0x08012727
 8012688:	08012773 	.word	0x08012773
 801268c:	0801269d 	.word	0x0801269d
 8012690:	0801269d 	.word	0x0801269d
 8012694:	08012713 	.word	0x08012713
 8012698:	08012727 	.word	0x08012727
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801269c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801269e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80126a2:	f043 0301 	orr.w	r3, r3, #1
 80126a6:	b2da      	uxtb	r2, r3
 80126a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80126aa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80126ae:	68ba      	ldr	r2, [r7, #8]
 80126b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80126b2:	699b      	ldr	r3, [r3, #24]
 80126b4:	18d1      	adds	r1, r2, r3
 80126b6:	68bb      	ldr	r3, [r7, #8]
 80126b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80126ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80126bc:	f7ff ff5c 	bl	8012578 <prvInsertTimerInActiveList>
 80126c0:	4603      	mov	r3, r0
 80126c2:	2b00      	cmp	r3, #0
 80126c4:	d06c      	beq.n	80127a0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80126c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80126c8:	6a1b      	ldr	r3, [r3, #32]
 80126ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80126cc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80126ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80126d0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80126d4:	f003 0304 	and.w	r3, r3, #4
 80126d8:	2b00      	cmp	r3, #0
 80126da:	d061      	beq.n	80127a0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80126dc:	68ba      	ldr	r2, [r7, #8]
 80126de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80126e0:	699b      	ldr	r3, [r3, #24]
 80126e2:	441a      	add	r2, r3
 80126e4:	2300      	movs	r3, #0
 80126e6:	9300      	str	r3, [sp, #0]
 80126e8:	2300      	movs	r3, #0
 80126ea:	2100      	movs	r1, #0
 80126ec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80126ee:	f7ff fe01 	bl	80122f4 <xTimerGenericCommand>
 80126f2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80126f4:	6a3b      	ldr	r3, [r7, #32]
 80126f6:	2b00      	cmp	r3, #0
 80126f8:	d152      	bne.n	80127a0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80126fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80126fe:	f383 8811 	msr	BASEPRI, r3
 8012702:	f3bf 8f6f 	isb	sy
 8012706:	f3bf 8f4f 	dsb	sy
 801270a:	61bb      	str	r3, [r7, #24]
}
 801270c:	bf00      	nop
 801270e:	bf00      	nop
 8012710:	e7fd      	b.n	801270e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012712:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012714:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8012718:	f023 0301 	bic.w	r3, r3, #1
 801271c:	b2da      	uxtb	r2, r3
 801271e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012720:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8012724:	e03d      	b.n	80127a2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8012726:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012728:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801272c:	f043 0301 	orr.w	r3, r3, #1
 8012730:	b2da      	uxtb	r2, r3
 8012732:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012734:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8012738:	68ba      	ldr	r2, [r7, #8]
 801273a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801273c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801273e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012740:	699b      	ldr	r3, [r3, #24]
 8012742:	2b00      	cmp	r3, #0
 8012744:	d10b      	bne.n	801275e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8012746:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801274a:	f383 8811 	msr	BASEPRI, r3
 801274e:	f3bf 8f6f 	isb	sy
 8012752:	f3bf 8f4f 	dsb	sy
 8012756:	617b      	str	r3, [r7, #20]
}
 8012758:	bf00      	nop
 801275a:	bf00      	nop
 801275c:	e7fd      	b.n	801275a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801275e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012760:	699a      	ldr	r2, [r3, #24]
 8012762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012764:	18d1      	adds	r1, r2, r3
 8012766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012768:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801276a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801276c:	f7ff ff04 	bl	8012578 <prvInsertTimerInActiveList>
					break;
 8012770:	e017      	b.n	80127a2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8012772:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012774:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8012778:	f003 0302 	and.w	r3, r3, #2
 801277c:	2b00      	cmp	r3, #0
 801277e:	d103      	bne.n	8012788 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8012780:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012782:	f000 fbe9 	bl	8012f58 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8012786:	e00c      	b.n	80127a2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012788:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801278a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801278e:	f023 0301 	bic.w	r3, r3, #1
 8012792:	b2da      	uxtb	r2, r3
 8012794:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012796:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 801279a:	e002      	b.n	80127a2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 801279c:	bf00      	nop
 801279e:	e000      	b.n	80127a2 <prvProcessReceivedCommands+0x1a6>
					break;
 80127a0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80127a2:	4b08      	ldr	r3, [pc, #32]	@ (80127c4 <prvProcessReceivedCommands+0x1c8>)
 80127a4:	681b      	ldr	r3, [r3, #0]
 80127a6:	1d39      	adds	r1, r7, #4
 80127a8:	2200      	movs	r2, #0
 80127aa:	4618      	mov	r0, r3
 80127ac:	f7fe fbce 	bl	8010f4c <xQueueReceive>
 80127b0:	4603      	mov	r3, r0
 80127b2:	2b00      	cmp	r3, #0
 80127b4:	f47f af26 	bne.w	8012604 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80127b8:	bf00      	nop
 80127ba:	bf00      	nop
 80127bc:	3730      	adds	r7, #48	@ 0x30
 80127be:	46bd      	mov	sp, r7
 80127c0:	bd80      	pop	{r7, pc}
 80127c2:	bf00      	nop
 80127c4:	20004258 	.word	0x20004258

080127c8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80127c8:	b580      	push	{r7, lr}
 80127ca:	b088      	sub	sp, #32
 80127cc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80127ce:	e049      	b.n	8012864 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80127d0:	4b2e      	ldr	r3, [pc, #184]	@ (801288c <prvSwitchTimerLists+0xc4>)
 80127d2:	681b      	ldr	r3, [r3, #0]
 80127d4:	68db      	ldr	r3, [r3, #12]
 80127d6:	681b      	ldr	r3, [r3, #0]
 80127d8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80127da:	4b2c      	ldr	r3, [pc, #176]	@ (801288c <prvSwitchTimerLists+0xc4>)
 80127dc:	681b      	ldr	r3, [r3, #0]
 80127de:	68db      	ldr	r3, [r3, #12]
 80127e0:	68db      	ldr	r3, [r3, #12]
 80127e2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80127e4:	68fb      	ldr	r3, [r7, #12]
 80127e6:	3304      	adds	r3, #4
 80127e8:	4618      	mov	r0, r3
 80127ea:	f7fe f8db 	bl	80109a4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80127ee:	68fb      	ldr	r3, [r7, #12]
 80127f0:	6a1b      	ldr	r3, [r3, #32]
 80127f2:	68f8      	ldr	r0, [r7, #12]
 80127f4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80127f6:	68fb      	ldr	r3, [r7, #12]
 80127f8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80127fc:	f003 0304 	and.w	r3, r3, #4
 8012800:	2b00      	cmp	r3, #0
 8012802:	d02f      	beq.n	8012864 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8012804:	68fb      	ldr	r3, [r7, #12]
 8012806:	699b      	ldr	r3, [r3, #24]
 8012808:	693a      	ldr	r2, [r7, #16]
 801280a:	4413      	add	r3, r2
 801280c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801280e:	68ba      	ldr	r2, [r7, #8]
 8012810:	693b      	ldr	r3, [r7, #16]
 8012812:	429a      	cmp	r2, r3
 8012814:	d90e      	bls.n	8012834 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8012816:	68fb      	ldr	r3, [r7, #12]
 8012818:	68ba      	ldr	r2, [r7, #8]
 801281a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801281c:	68fb      	ldr	r3, [r7, #12]
 801281e:	68fa      	ldr	r2, [r7, #12]
 8012820:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8012822:	4b1a      	ldr	r3, [pc, #104]	@ (801288c <prvSwitchTimerLists+0xc4>)
 8012824:	681a      	ldr	r2, [r3, #0]
 8012826:	68fb      	ldr	r3, [r7, #12]
 8012828:	3304      	adds	r3, #4
 801282a:	4619      	mov	r1, r3
 801282c:	4610      	mov	r0, r2
 801282e:	f7fe f880 	bl	8010932 <vListInsert>
 8012832:	e017      	b.n	8012864 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012834:	2300      	movs	r3, #0
 8012836:	9300      	str	r3, [sp, #0]
 8012838:	2300      	movs	r3, #0
 801283a:	693a      	ldr	r2, [r7, #16]
 801283c:	2100      	movs	r1, #0
 801283e:	68f8      	ldr	r0, [r7, #12]
 8012840:	f7ff fd58 	bl	80122f4 <xTimerGenericCommand>
 8012844:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8012846:	687b      	ldr	r3, [r7, #4]
 8012848:	2b00      	cmp	r3, #0
 801284a:	d10b      	bne.n	8012864 <prvSwitchTimerLists+0x9c>
	__asm volatile
 801284c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012850:	f383 8811 	msr	BASEPRI, r3
 8012854:	f3bf 8f6f 	isb	sy
 8012858:	f3bf 8f4f 	dsb	sy
 801285c:	603b      	str	r3, [r7, #0]
}
 801285e:	bf00      	nop
 8012860:	bf00      	nop
 8012862:	e7fd      	b.n	8012860 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8012864:	4b09      	ldr	r3, [pc, #36]	@ (801288c <prvSwitchTimerLists+0xc4>)
 8012866:	681b      	ldr	r3, [r3, #0]
 8012868:	681b      	ldr	r3, [r3, #0]
 801286a:	2b00      	cmp	r3, #0
 801286c:	d1b0      	bne.n	80127d0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801286e:	4b07      	ldr	r3, [pc, #28]	@ (801288c <prvSwitchTimerLists+0xc4>)
 8012870:	681b      	ldr	r3, [r3, #0]
 8012872:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8012874:	4b06      	ldr	r3, [pc, #24]	@ (8012890 <prvSwitchTimerLists+0xc8>)
 8012876:	681b      	ldr	r3, [r3, #0]
 8012878:	4a04      	ldr	r2, [pc, #16]	@ (801288c <prvSwitchTimerLists+0xc4>)
 801287a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801287c:	4a04      	ldr	r2, [pc, #16]	@ (8012890 <prvSwitchTimerLists+0xc8>)
 801287e:	697b      	ldr	r3, [r7, #20]
 8012880:	6013      	str	r3, [r2, #0]
}
 8012882:	bf00      	nop
 8012884:	3718      	adds	r7, #24
 8012886:	46bd      	mov	sp, r7
 8012888:	bd80      	pop	{r7, pc}
 801288a:	bf00      	nop
 801288c:	20004250 	.word	0x20004250
 8012890:	20004254 	.word	0x20004254

08012894 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8012894:	b580      	push	{r7, lr}
 8012896:	b082      	sub	sp, #8
 8012898:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801289a:	f000 f96d 	bl	8012b78 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801289e:	4b15      	ldr	r3, [pc, #84]	@ (80128f4 <prvCheckForValidListAndQueue+0x60>)
 80128a0:	681b      	ldr	r3, [r3, #0]
 80128a2:	2b00      	cmp	r3, #0
 80128a4:	d120      	bne.n	80128e8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80128a6:	4814      	ldr	r0, [pc, #80]	@ (80128f8 <prvCheckForValidListAndQueue+0x64>)
 80128a8:	f7fd fff2 	bl	8010890 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80128ac:	4813      	ldr	r0, [pc, #76]	@ (80128fc <prvCheckForValidListAndQueue+0x68>)
 80128ae:	f7fd ffef 	bl	8010890 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80128b2:	4b13      	ldr	r3, [pc, #76]	@ (8012900 <prvCheckForValidListAndQueue+0x6c>)
 80128b4:	4a10      	ldr	r2, [pc, #64]	@ (80128f8 <prvCheckForValidListAndQueue+0x64>)
 80128b6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80128b8:	4b12      	ldr	r3, [pc, #72]	@ (8012904 <prvCheckForValidListAndQueue+0x70>)
 80128ba:	4a10      	ldr	r2, [pc, #64]	@ (80128fc <prvCheckForValidListAndQueue+0x68>)
 80128bc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80128be:	2300      	movs	r3, #0
 80128c0:	9300      	str	r3, [sp, #0]
 80128c2:	4b11      	ldr	r3, [pc, #68]	@ (8012908 <prvCheckForValidListAndQueue+0x74>)
 80128c4:	4a11      	ldr	r2, [pc, #68]	@ (801290c <prvCheckForValidListAndQueue+0x78>)
 80128c6:	2110      	movs	r1, #16
 80128c8:	200a      	movs	r0, #10
 80128ca:	f7fe f8ff 	bl	8010acc <xQueueGenericCreateStatic>
 80128ce:	4603      	mov	r3, r0
 80128d0:	4a08      	ldr	r2, [pc, #32]	@ (80128f4 <prvCheckForValidListAndQueue+0x60>)
 80128d2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80128d4:	4b07      	ldr	r3, [pc, #28]	@ (80128f4 <prvCheckForValidListAndQueue+0x60>)
 80128d6:	681b      	ldr	r3, [r3, #0]
 80128d8:	2b00      	cmp	r3, #0
 80128da:	d005      	beq.n	80128e8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80128dc:	4b05      	ldr	r3, [pc, #20]	@ (80128f4 <prvCheckForValidListAndQueue+0x60>)
 80128de:	681b      	ldr	r3, [r3, #0]
 80128e0:	490b      	ldr	r1, [pc, #44]	@ (8012910 <prvCheckForValidListAndQueue+0x7c>)
 80128e2:	4618      	mov	r0, r3
 80128e4:	f7fe fd24 	bl	8011330 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80128e8:	f000 f978 	bl	8012bdc <vPortExitCritical>
}
 80128ec:	bf00      	nop
 80128ee:	46bd      	mov	sp, r7
 80128f0:	bd80      	pop	{r7, pc}
 80128f2:	bf00      	nop
 80128f4:	20004258 	.word	0x20004258
 80128f8:	20004228 	.word	0x20004228
 80128fc:	2000423c 	.word	0x2000423c
 8012900:	20004250 	.word	0x20004250
 8012904:	20004254 	.word	0x20004254
 8012908:	20004304 	.word	0x20004304
 801290c:	20004264 	.word	0x20004264
 8012910:	08017078 	.word	0x08017078

08012914 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8012914:	b480      	push	{r7}
 8012916:	b085      	sub	sp, #20
 8012918:	af00      	add	r7, sp, #0
 801291a:	60f8      	str	r0, [r7, #12]
 801291c:	60b9      	str	r1, [r7, #8]
 801291e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8012920:	68fb      	ldr	r3, [r7, #12]
 8012922:	3b04      	subs	r3, #4
 8012924:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8012926:	68fb      	ldr	r3, [r7, #12]
 8012928:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 801292c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801292e:	68fb      	ldr	r3, [r7, #12]
 8012930:	3b04      	subs	r3, #4
 8012932:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8012934:	68bb      	ldr	r3, [r7, #8]
 8012936:	f023 0201 	bic.w	r2, r3, #1
 801293a:	68fb      	ldr	r3, [r7, #12]
 801293c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801293e:	68fb      	ldr	r3, [r7, #12]
 8012940:	3b04      	subs	r3, #4
 8012942:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8012944:	4a0c      	ldr	r2, [pc, #48]	@ (8012978 <pxPortInitialiseStack+0x64>)
 8012946:	68fb      	ldr	r3, [r7, #12]
 8012948:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801294a:	68fb      	ldr	r3, [r7, #12]
 801294c:	3b14      	subs	r3, #20
 801294e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8012950:	687a      	ldr	r2, [r7, #4]
 8012952:	68fb      	ldr	r3, [r7, #12]
 8012954:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8012956:	68fb      	ldr	r3, [r7, #12]
 8012958:	3b04      	subs	r3, #4
 801295a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801295c:	68fb      	ldr	r3, [r7, #12]
 801295e:	f06f 0202 	mvn.w	r2, #2
 8012962:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8012964:	68fb      	ldr	r3, [r7, #12]
 8012966:	3b20      	subs	r3, #32
 8012968:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801296a:	68fb      	ldr	r3, [r7, #12]
}
 801296c:	4618      	mov	r0, r3
 801296e:	3714      	adds	r7, #20
 8012970:	46bd      	mov	sp, r7
 8012972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012976:	4770      	bx	lr
 8012978:	0801297d 	.word	0x0801297d

0801297c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801297c:	b480      	push	{r7}
 801297e:	b085      	sub	sp, #20
 8012980:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8012982:	2300      	movs	r3, #0
 8012984:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8012986:	4b13      	ldr	r3, [pc, #76]	@ (80129d4 <prvTaskExitError+0x58>)
 8012988:	681b      	ldr	r3, [r3, #0]
 801298a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801298e:	d00b      	beq.n	80129a8 <prvTaskExitError+0x2c>
	__asm volatile
 8012990:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012994:	f383 8811 	msr	BASEPRI, r3
 8012998:	f3bf 8f6f 	isb	sy
 801299c:	f3bf 8f4f 	dsb	sy
 80129a0:	60fb      	str	r3, [r7, #12]
}
 80129a2:	bf00      	nop
 80129a4:	bf00      	nop
 80129a6:	e7fd      	b.n	80129a4 <prvTaskExitError+0x28>
	__asm volatile
 80129a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80129ac:	f383 8811 	msr	BASEPRI, r3
 80129b0:	f3bf 8f6f 	isb	sy
 80129b4:	f3bf 8f4f 	dsb	sy
 80129b8:	60bb      	str	r3, [r7, #8]
}
 80129ba:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80129bc:	bf00      	nop
 80129be:	687b      	ldr	r3, [r7, #4]
 80129c0:	2b00      	cmp	r3, #0
 80129c2:	d0fc      	beq.n	80129be <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80129c4:	bf00      	nop
 80129c6:	bf00      	nop
 80129c8:	3714      	adds	r7, #20
 80129ca:	46bd      	mov	sp, r7
 80129cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129d0:	4770      	bx	lr
 80129d2:	bf00      	nop
 80129d4:	20000330 	.word	0x20000330
	...

080129e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80129e0:	4b07      	ldr	r3, [pc, #28]	@ (8012a00 <pxCurrentTCBConst2>)
 80129e2:	6819      	ldr	r1, [r3, #0]
 80129e4:	6808      	ldr	r0, [r1, #0]
 80129e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80129ea:	f380 8809 	msr	PSP, r0
 80129ee:	f3bf 8f6f 	isb	sy
 80129f2:	f04f 0000 	mov.w	r0, #0
 80129f6:	f380 8811 	msr	BASEPRI, r0
 80129fa:	4770      	bx	lr
 80129fc:	f3af 8000 	nop.w

08012a00 <pxCurrentTCBConst2>:
 8012a00:	20003d28 	.word	0x20003d28
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8012a04:	bf00      	nop
 8012a06:	bf00      	nop

08012a08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8012a08:	4808      	ldr	r0, [pc, #32]	@ (8012a2c <prvPortStartFirstTask+0x24>)
 8012a0a:	6800      	ldr	r0, [r0, #0]
 8012a0c:	6800      	ldr	r0, [r0, #0]
 8012a0e:	f380 8808 	msr	MSP, r0
 8012a12:	f04f 0000 	mov.w	r0, #0
 8012a16:	f380 8814 	msr	CONTROL, r0
 8012a1a:	b662      	cpsie	i
 8012a1c:	b661      	cpsie	f
 8012a1e:	f3bf 8f4f 	dsb	sy
 8012a22:	f3bf 8f6f 	isb	sy
 8012a26:	df00      	svc	0
 8012a28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8012a2a:	bf00      	nop
 8012a2c:	e000ed08 	.word	0xe000ed08

08012a30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8012a30:	b580      	push	{r7, lr}
 8012a32:	b086      	sub	sp, #24
 8012a34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8012a36:	4b47      	ldr	r3, [pc, #284]	@ (8012b54 <xPortStartScheduler+0x124>)
 8012a38:	681b      	ldr	r3, [r3, #0]
 8012a3a:	4a47      	ldr	r2, [pc, #284]	@ (8012b58 <xPortStartScheduler+0x128>)
 8012a3c:	4293      	cmp	r3, r2
 8012a3e:	d10b      	bne.n	8012a58 <xPortStartScheduler+0x28>
	__asm volatile
 8012a40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012a44:	f383 8811 	msr	BASEPRI, r3
 8012a48:	f3bf 8f6f 	isb	sy
 8012a4c:	f3bf 8f4f 	dsb	sy
 8012a50:	613b      	str	r3, [r7, #16]
}
 8012a52:	bf00      	nop
 8012a54:	bf00      	nop
 8012a56:	e7fd      	b.n	8012a54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8012a58:	4b3e      	ldr	r3, [pc, #248]	@ (8012b54 <xPortStartScheduler+0x124>)
 8012a5a:	681b      	ldr	r3, [r3, #0]
 8012a5c:	4a3f      	ldr	r2, [pc, #252]	@ (8012b5c <xPortStartScheduler+0x12c>)
 8012a5e:	4293      	cmp	r3, r2
 8012a60:	d10b      	bne.n	8012a7a <xPortStartScheduler+0x4a>
	__asm volatile
 8012a62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012a66:	f383 8811 	msr	BASEPRI, r3
 8012a6a:	f3bf 8f6f 	isb	sy
 8012a6e:	f3bf 8f4f 	dsb	sy
 8012a72:	60fb      	str	r3, [r7, #12]
}
 8012a74:	bf00      	nop
 8012a76:	bf00      	nop
 8012a78:	e7fd      	b.n	8012a76 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8012a7a:	4b39      	ldr	r3, [pc, #228]	@ (8012b60 <xPortStartScheduler+0x130>)
 8012a7c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8012a7e:	697b      	ldr	r3, [r7, #20]
 8012a80:	781b      	ldrb	r3, [r3, #0]
 8012a82:	b2db      	uxtb	r3, r3
 8012a84:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8012a86:	697b      	ldr	r3, [r7, #20]
 8012a88:	22ff      	movs	r2, #255	@ 0xff
 8012a8a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8012a8c:	697b      	ldr	r3, [r7, #20]
 8012a8e:	781b      	ldrb	r3, [r3, #0]
 8012a90:	b2db      	uxtb	r3, r3
 8012a92:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8012a94:	78fb      	ldrb	r3, [r7, #3]
 8012a96:	b2db      	uxtb	r3, r3
 8012a98:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8012a9c:	b2da      	uxtb	r2, r3
 8012a9e:	4b31      	ldr	r3, [pc, #196]	@ (8012b64 <xPortStartScheduler+0x134>)
 8012aa0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8012aa2:	4b31      	ldr	r3, [pc, #196]	@ (8012b68 <xPortStartScheduler+0x138>)
 8012aa4:	2207      	movs	r2, #7
 8012aa6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012aa8:	e009      	b.n	8012abe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8012aaa:	4b2f      	ldr	r3, [pc, #188]	@ (8012b68 <xPortStartScheduler+0x138>)
 8012aac:	681b      	ldr	r3, [r3, #0]
 8012aae:	3b01      	subs	r3, #1
 8012ab0:	4a2d      	ldr	r2, [pc, #180]	@ (8012b68 <xPortStartScheduler+0x138>)
 8012ab2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8012ab4:	78fb      	ldrb	r3, [r7, #3]
 8012ab6:	b2db      	uxtb	r3, r3
 8012ab8:	005b      	lsls	r3, r3, #1
 8012aba:	b2db      	uxtb	r3, r3
 8012abc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012abe:	78fb      	ldrb	r3, [r7, #3]
 8012ac0:	b2db      	uxtb	r3, r3
 8012ac2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8012ac6:	2b80      	cmp	r3, #128	@ 0x80
 8012ac8:	d0ef      	beq.n	8012aaa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8012aca:	4b27      	ldr	r3, [pc, #156]	@ (8012b68 <xPortStartScheduler+0x138>)
 8012acc:	681b      	ldr	r3, [r3, #0]
 8012ace:	f1c3 0307 	rsb	r3, r3, #7
 8012ad2:	2b04      	cmp	r3, #4
 8012ad4:	d00b      	beq.n	8012aee <xPortStartScheduler+0xbe>
	__asm volatile
 8012ad6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012ada:	f383 8811 	msr	BASEPRI, r3
 8012ade:	f3bf 8f6f 	isb	sy
 8012ae2:	f3bf 8f4f 	dsb	sy
 8012ae6:	60bb      	str	r3, [r7, #8]
}
 8012ae8:	bf00      	nop
 8012aea:	bf00      	nop
 8012aec:	e7fd      	b.n	8012aea <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8012aee:	4b1e      	ldr	r3, [pc, #120]	@ (8012b68 <xPortStartScheduler+0x138>)
 8012af0:	681b      	ldr	r3, [r3, #0]
 8012af2:	021b      	lsls	r3, r3, #8
 8012af4:	4a1c      	ldr	r2, [pc, #112]	@ (8012b68 <xPortStartScheduler+0x138>)
 8012af6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8012af8:	4b1b      	ldr	r3, [pc, #108]	@ (8012b68 <xPortStartScheduler+0x138>)
 8012afa:	681b      	ldr	r3, [r3, #0]
 8012afc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8012b00:	4a19      	ldr	r2, [pc, #100]	@ (8012b68 <xPortStartScheduler+0x138>)
 8012b02:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8012b04:	687b      	ldr	r3, [r7, #4]
 8012b06:	b2da      	uxtb	r2, r3
 8012b08:	697b      	ldr	r3, [r7, #20]
 8012b0a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8012b0c:	4b17      	ldr	r3, [pc, #92]	@ (8012b6c <xPortStartScheduler+0x13c>)
 8012b0e:	681b      	ldr	r3, [r3, #0]
 8012b10:	4a16      	ldr	r2, [pc, #88]	@ (8012b6c <xPortStartScheduler+0x13c>)
 8012b12:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8012b16:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8012b18:	4b14      	ldr	r3, [pc, #80]	@ (8012b6c <xPortStartScheduler+0x13c>)
 8012b1a:	681b      	ldr	r3, [r3, #0]
 8012b1c:	4a13      	ldr	r2, [pc, #76]	@ (8012b6c <xPortStartScheduler+0x13c>)
 8012b1e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8012b22:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8012b24:	f000 f8da 	bl	8012cdc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8012b28:	4b11      	ldr	r3, [pc, #68]	@ (8012b70 <xPortStartScheduler+0x140>)
 8012b2a:	2200      	movs	r2, #0
 8012b2c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8012b2e:	f000 f8f9 	bl	8012d24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8012b32:	4b10      	ldr	r3, [pc, #64]	@ (8012b74 <xPortStartScheduler+0x144>)
 8012b34:	681b      	ldr	r3, [r3, #0]
 8012b36:	4a0f      	ldr	r2, [pc, #60]	@ (8012b74 <xPortStartScheduler+0x144>)
 8012b38:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8012b3c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8012b3e:	f7ff ff63 	bl	8012a08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8012b42:	f7ff f82d 	bl	8011ba0 <vTaskSwitchContext>
	prvTaskExitError();
 8012b46:	f7ff ff19 	bl	801297c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8012b4a:	2300      	movs	r3, #0
}
 8012b4c:	4618      	mov	r0, r3
 8012b4e:	3718      	adds	r7, #24
 8012b50:	46bd      	mov	sp, r7
 8012b52:	bd80      	pop	{r7, pc}
 8012b54:	e000ed00 	.word	0xe000ed00
 8012b58:	410fc271 	.word	0x410fc271
 8012b5c:	410fc270 	.word	0x410fc270
 8012b60:	e000e400 	.word	0xe000e400
 8012b64:	20004354 	.word	0x20004354
 8012b68:	20004358 	.word	0x20004358
 8012b6c:	e000ed20 	.word	0xe000ed20
 8012b70:	20000330 	.word	0x20000330
 8012b74:	e000ef34 	.word	0xe000ef34

08012b78 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8012b78:	b480      	push	{r7}
 8012b7a:	b083      	sub	sp, #12
 8012b7c:	af00      	add	r7, sp, #0
	__asm volatile
 8012b7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012b82:	f383 8811 	msr	BASEPRI, r3
 8012b86:	f3bf 8f6f 	isb	sy
 8012b8a:	f3bf 8f4f 	dsb	sy
 8012b8e:	607b      	str	r3, [r7, #4]
}
 8012b90:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8012b92:	4b10      	ldr	r3, [pc, #64]	@ (8012bd4 <vPortEnterCritical+0x5c>)
 8012b94:	681b      	ldr	r3, [r3, #0]
 8012b96:	3301      	adds	r3, #1
 8012b98:	4a0e      	ldr	r2, [pc, #56]	@ (8012bd4 <vPortEnterCritical+0x5c>)
 8012b9a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8012b9c:	4b0d      	ldr	r3, [pc, #52]	@ (8012bd4 <vPortEnterCritical+0x5c>)
 8012b9e:	681b      	ldr	r3, [r3, #0]
 8012ba0:	2b01      	cmp	r3, #1
 8012ba2:	d110      	bne.n	8012bc6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8012ba4:	4b0c      	ldr	r3, [pc, #48]	@ (8012bd8 <vPortEnterCritical+0x60>)
 8012ba6:	681b      	ldr	r3, [r3, #0]
 8012ba8:	b2db      	uxtb	r3, r3
 8012baa:	2b00      	cmp	r3, #0
 8012bac:	d00b      	beq.n	8012bc6 <vPortEnterCritical+0x4e>
	__asm volatile
 8012bae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012bb2:	f383 8811 	msr	BASEPRI, r3
 8012bb6:	f3bf 8f6f 	isb	sy
 8012bba:	f3bf 8f4f 	dsb	sy
 8012bbe:	603b      	str	r3, [r7, #0]
}
 8012bc0:	bf00      	nop
 8012bc2:	bf00      	nop
 8012bc4:	e7fd      	b.n	8012bc2 <vPortEnterCritical+0x4a>
	}
}
 8012bc6:	bf00      	nop
 8012bc8:	370c      	adds	r7, #12
 8012bca:	46bd      	mov	sp, r7
 8012bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bd0:	4770      	bx	lr
 8012bd2:	bf00      	nop
 8012bd4:	20000330 	.word	0x20000330
 8012bd8:	e000ed04 	.word	0xe000ed04

08012bdc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8012bdc:	b480      	push	{r7}
 8012bde:	b083      	sub	sp, #12
 8012be0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8012be2:	4b12      	ldr	r3, [pc, #72]	@ (8012c2c <vPortExitCritical+0x50>)
 8012be4:	681b      	ldr	r3, [r3, #0]
 8012be6:	2b00      	cmp	r3, #0
 8012be8:	d10b      	bne.n	8012c02 <vPortExitCritical+0x26>
	__asm volatile
 8012bea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012bee:	f383 8811 	msr	BASEPRI, r3
 8012bf2:	f3bf 8f6f 	isb	sy
 8012bf6:	f3bf 8f4f 	dsb	sy
 8012bfa:	607b      	str	r3, [r7, #4]
}
 8012bfc:	bf00      	nop
 8012bfe:	bf00      	nop
 8012c00:	e7fd      	b.n	8012bfe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8012c02:	4b0a      	ldr	r3, [pc, #40]	@ (8012c2c <vPortExitCritical+0x50>)
 8012c04:	681b      	ldr	r3, [r3, #0]
 8012c06:	3b01      	subs	r3, #1
 8012c08:	4a08      	ldr	r2, [pc, #32]	@ (8012c2c <vPortExitCritical+0x50>)
 8012c0a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8012c0c:	4b07      	ldr	r3, [pc, #28]	@ (8012c2c <vPortExitCritical+0x50>)
 8012c0e:	681b      	ldr	r3, [r3, #0]
 8012c10:	2b00      	cmp	r3, #0
 8012c12:	d105      	bne.n	8012c20 <vPortExitCritical+0x44>
 8012c14:	2300      	movs	r3, #0
 8012c16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012c18:	683b      	ldr	r3, [r7, #0]
 8012c1a:	f383 8811 	msr	BASEPRI, r3
}
 8012c1e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8012c20:	bf00      	nop
 8012c22:	370c      	adds	r7, #12
 8012c24:	46bd      	mov	sp, r7
 8012c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c2a:	4770      	bx	lr
 8012c2c:	20000330 	.word	0x20000330

08012c30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8012c30:	f3ef 8009 	mrs	r0, PSP
 8012c34:	f3bf 8f6f 	isb	sy
 8012c38:	4b15      	ldr	r3, [pc, #84]	@ (8012c90 <pxCurrentTCBConst>)
 8012c3a:	681a      	ldr	r2, [r3, #0]
 8012c3c:	f01e 0f10 	tst.w	lr, #16
 8012c40:	bf08      	it	eq
 8012c42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8012c46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c4a:	6010      	str	r0, [r2, #0]
 8012c4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8012c50:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8012c54:	f380 8811 	msr	BASEPRI, r0
 8012c58:	f3bf 8f4f 	dsb	sy
 8012c5c:	f3bf 8f6f 	isb	sy
 8012c60:	f7fe ff9e 	bl	8011ba0 <vTaskSwitchContext>
 8012c64:	f04f 0000 	mov.w	r0, #0
 8012c68:	f380 8811 	msr	BASEPRI, r0
 8012c6c:	bc09      	pop	{r0, r3}
 8012c6e:	6819      	ldr	r1, [r3, #0]
 8012c70:	6808      	ldr	r0, [r1, #0]
 8012c72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c76:	f01e 0f10 	tst.w	lr, #16
 8012c7a:	bf08      	it	eq
 8012c7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8012c80:	f380 8809 	msr	PSP, r0
 8012c84:	f3bf 8f6f 	isb	sy
 8012c88:	4770      	bx	lr
 8012c8a:	bf00      	nop
 8012c8c:	f3af 8000 	nop.w

08012c90 <pxCurrentTCBConst>:
 8012c90:	20003d28 	.word	0x20003d28
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8012c94:	bf00      	nop
 8012c96:	bf00      	nop

08012c98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8012c98:	b580      	push	{r7, lr}
 8012c9a:	b082      	sub	sp, #8
 8012c9c:	af00      	add	r7, sp, #0
	__asm volatile
 8012c9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012ca2:	f383 8811 	msr	BASEPRI, r3
 8012ca6:	f3bf 8f6f 	isb	sy
 8012caa:	f3bf 8f4f 	dsb	sy
 8012cae:	607b      	str	r3, [r7, #4]
}
 8012cb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8012cb2:	f7fe febb 	bl	8011a2c <xTaskIncrementTick>
 8012cb6:	4603      	mov	r3, r0
 8012cb8:	2b00      	cmp	r3, #0
 8012cba:	d003      	beq.n	8012cc4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8012cbc:	4b06      	ldr	r3, [pc, #24]	@ (8012cd8 <xPortSysTickHandler+0x40>)
 8012cbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012cc2:	601a      	str	r2, [r3, #0]
 8012cc4:	2300      	movs	r3, #0
 8012cc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012cc8:	683b      	ldr	r3, [r7, #0]
 8012cca:	f383 8811 	msr	BASEPRI, r3
}
 8012cce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8012cd0:	bf00      	nop
 8012cd2:	3708      	adds	r7, #8
 8012cd4:	46bd      	mov	sp, r7
 8012cd6:	bd80      	pop	{r7, pc}
 8012cd8:	e000ed04 	.word	0xe000ed04

08012cdc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8012cdc:	b480      	push	{r7}
 8012cde:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8012ce0:	4b0b      	ldr	r3, [pc, #44]	@ (8012d10 <vPortSetupTimerInterrupt+0x34>)
 8012ce2:	2200      	movs	r2, #0
 8012ce4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8012ce6:	4b0b      	ldr	r3, [pc, #44]	@ (8012d14 <vPortSetupTimerInterrupt+0x38>)
 8012ce8:	2200      	movs	r2, #0
 8012cea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8012cec:	4b0a      	ldr	r3, [pc, #40]	@ (8012d18 <vPortSetupTimerInterrupt+0x3c>)
 8012cee:	681b      	ldr	r3, [r3, #0]
 8012cf0:	4a0a      	ldr	r2, [pc, #40]	@ (8012d1c <vPortSetupTimerInterrupt+0x40>)
 8012cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8012cf6:	099b      	lsrs	r3, r3, #6
 8012cf8:	4a09      	ldr	r2, [pc, #36]	@ (8012d20 <vPortSetupTimerInterrupt+0x44>)
 8012cfa:	3b01      	subs	r3, #1
 8012cfc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8012cfe:	4b04      	ldr	r3, [pc, #16]	@ (8012d10 <vPortSetupTimerInterrupt+0x34>)
 8012d00:	2207      	movs	r2, #7
 8012d02:	601a      	str	r2, [r3, #0]
}
 8012d04:	bf00      	nop
 8012d06:	46bd      	mov	sp, r7
 8012d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d0c:	4770      	bx	lr
 8012d0e:	bf00      	nop
 8012d10:	e000e010 	.word	0xe000e010
 8012d14:	e000e018 	.word	0xe000e018
 8012d18:	20000298 	.word	0x20000298
 8012d1c:	10624dd3 	.word	0x10624dd3
 8012d20:	e000e014 	.word	0xe000e014

08012d24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8012d24:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8012d34 <vPortEnableVFP+0x10>
 8012d28:	6801      	ldr	r1, [r0, #0]
 8012d2a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8012d2e:	6001      	str	r1, [r0, #0]
 8012d30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8012d32:	bf00      	nop
 8012d34:	e000ed88 	.word	0xe000ed88

08012d38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8012d38:	b480      	push	{r7}
 8012d3a:	b085      	sub	sp, #20
 8012d3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8012d3e:	f3ef 8305 	mrs	r3, IPSR
 8012d42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8012d44:	68fb      	ldr	r3, [r7, #12]
 8012d46:	2b0f      	cmp	r3, #15
 8012d48:	d915      	bls.n	8012d76 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8012d4a:	4a18      	ldr	r2, [pc, #96]	@ (8012dac <vPortValidateInterruptPriority+0x74>)
 8012d4c:	68fb      	ldr	r3, [r7, #12]
 8012d4e:	4413      	add	r3, r2
 8012d50:	781b      	ldrb	r3, [r3, #0]
 8012d52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8012d54:	4b16      	ldr	r3, [pc, #88]	@ (8012db0 <vPortValidateInterruptPriority+0x78>)
 8012d56:	781b      	ldrb	r3, [r3, #0]
 8012d58:	7afa      	ldrb	r2, [r7, #11]
 8012d5a:	429a      	cmp	r2, r3
 8012d5c:	d20b      	bcs.n	8012d76 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8012d5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012d62:	f383 8811 	msr	BASEPRI, r3
 8012d66:	f3bf 8f6f 	isb	sy
 8012d6a:	f3bf 8f4f 	dsb	sy
 8012d6e:	607b      	str	r3, [r7, #4]
}
 8012d70:	bf00      	nop
 8012d72:	bf00      	nop
 8012d74:	e7fd      	b.n	8012d72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8012d76:	4b0f      	ldr	r3, [pc, #60]	@ (8012db4 <vPortValidateInterruptPriority+0x7c>)
 8012d78:	681b      	ldr	r3, [r3, #0]
 8012d7a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8012d7e:	4b0e      	ldr	r3, [pc, #56]	@ (8012db8 <vPortValidateInterruptPriority+0x80>)
 8012d80:	681b      	ldr	r3, [r3, #0]
 8012d82:	429a      	cmp	r2, r3
 8012d84:	d90b      	bls.n	8012d9e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8012d86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012d8a:	f383 8811 	msr	BASEPRI, r3
 8012d8e:	f3bf 8f6f 	isb	sy
 8012d92:	f3bf 8f4f 	dsb	sy
 8012d96:	603b      	str	r3, [r7, #0]
}
 8012d98:	bf00      	nop
 8012d9a:	bf00      	nop
 8012d9c:	e7fd      	b.n	8012d9a <vPortValidateInterruptPriority+0x62>
	}
 8012d9e:	bf00      	nop
 8012da0:	3714      	adds	r7, #20
 8012da2:	46bd      	mov	sp, r7
 8012da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012da8:	4770      	bx	lr
 8012daa:	bf00      	nop
 8012dac:	e000e3f0 	.word	0xe000e3f0
 8012db0:	20004354 	.word	0x20004354
 8012db4:	e000ed0c 	.word	0xe000ed0c
 8012db8:	20004358 	.word	0x20004358

08012dbc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8012dbc:	b580      	push	{r7, lr}
 8012dbe:	b08a      	sub	sp, #40	@ 0x28
 8012dc0:	af00      	add	r7, sp, #0
 8012dc2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8012dc4:	2300      	movs	r3, #0
 8012dc6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8012dc8:	f7fe fd74 	bl	80118b4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8012dcc:	4b5c      	ldr	r3, [pc, #368]	@ (8012f40 <pvPortMalloc+0x184>)
 8012dce:	681b      	ldr	r3, [r3, #0]
 8012dd0:	2b00      	cmp	r3, #0
 8012dd2:	d101      	bne.n	8012dd8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8012dd4:	f000 f924 	bl	8013020 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8012dd8:	4b5a      	ldr	r3, [pc, #360]	@ (8012f44 <pvPortMalloc+0x188>)
 8012dda:	681a      	ldr	r2, [r3, #0]
 8012ddc:	687b      	ldr	r3, [r7, #4]
 8012dde:	4013      	ands	r3, r2
 8012de0:	2b00      	cmp	r3, #0
 8012de2:	f040 8095 	bne.w	8012f10 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8012de6:	687b      	ldr	r3, [r7, #4]
 8012de8:	2b00      	cmp	r3, #0
 8012dea:	d01e      	beq.n	8012e2a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8012dec:	2208      	movs	r2, #8
 8012dee:	687b      	ldr	r3, [r7, #4]
 8012df0:	4413      	add	r3, r2
 8012df2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8012df4:	687b      	ldr	r3, [r7, #4]
 8012df6:	f003 0307 	and.w	r3, r3, #7
 8012dfa:	2b00      	cmp	r3, #0
 8012dfc:	d015      	beq.n	8012e2a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8012dfe:	687b      	ldr	r3, [r7, #4]
 8012e00:	f023 0307 	bic.w	r3, r3, #7
 8012e04:	3308      	adds	r3, #8
 8012e06:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012e08:	687b      	ldr	r3, [r7, #4]
 8012e0a:	f003 0307 	and.w	r3, r3, #7
 8012e0e:	2b00      	cmp	r3, #0
 8012e10:	d00b      	beq.n	8012e2a <pvPortMalloc+0x6e>
	__asm volatile
 8012e12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012e16:	f383 8811 	msr	BASEPRI, r3
 8012e1a:	f3bf 8f6f 	isb	sy
 8012e1e:	f3bf 8f4f 	dsb	sy
 8012e22:	617b      	str	r3, [r7, #20]
}
 8012e24:	bf00      	nop
 8012e26:	bf00      	nop
 8012e28:	e7fd      	b.n	8012e26 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8012e2a:	687b      	ldr	r3, [r7, #4]
 8012e2c:	2b00      	cmp	r3, #0
 8012e2e:	d06f      	beq.n	8012f10 <pvPortMalloc+0x154>
 8012e30:	4b45      	ldr	r3, [pc, #276]	@ (8012f48 <pvPortMalloc+0x18c>)
 8012e32:	681b      	ldr	r3, [r3, #0]
 8012e34:	687a      	ldr	r2, [r7, #4]
 8012e36:	429a      	cmp	r2, r3
 8012e38:	d86a      	bhi.n	8012f10 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8012e3a:	4b44      	ldr	r3, [pc, #272]	@ (8012f4c <pvPortMalloc+0x190>)
 8012e3c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8012e3e:	4b43      	ldr	r3, [pc, #268]	@ (8012f4c <pvPortMalloc+0x190>)
 8012e40:	681b      	ldr	r3, [r3, #0]
 8012e42:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012e44:	e004      	b.n	8012e50 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8012e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e48:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8012e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e4c:	681b      	ldr	r3, [r3, #0]
 8012e4e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e52:	685b      	ldr	r3, [r3, #4]
 8012e54:	687a      	ldr	r2, [r7, #4]
 8012e56:	429a      	cmp	r2, r3
 8012e58:	d903      	bls.n	8012e62 <pvPortMalloc+0xa6>
 8012e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e5c:	681b      	ldr	r3, [r3, #0]
 8012e5e:	2b00      	cmp	r3, #0
 8012e60:	d1f1      	bne.n	8012e46 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8012e62:	4b37      	ldr	r3, [pc, #220]	@ (8012f40 <pvPortMalloc+0x184>)
 8012e64:	681b      	ldr	r3, [r3, #0]
 8012e66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012e68:	429a      	cmp	r2, r3
 8012e6a:	d051      	beq.n	8012f10 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8012e6c:	6a3b      	ldr	r3, [r7, #32]
 8012e6e:	681b      	ldr	r3, [r3, #0]
 8012e70:	2208      	movs	r2, #8
 8012e72:	4413      	add	r3, r2
 8012e74:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8012e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e78:	681a      	ldr	r2, [r3, #0]
 8012e7a:	6a3b      	ldr	r3, [r7, #32]
 8012e7c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8012e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e80:	685a      	ldr	r2, [r3, #4]
 8012e82:	687b      	ldr	r3, [r7, #4]
 8012e84:	1ad2      	subs	r2, r2, r3
 8012e86:	2308      	movs	r3, #8
 8012e88:	005b      	lsls	r3, r3, #1
 8012e8a:	429a      	cmp	r2, r3
 8012e8c:	d920      	bls.n	8012ed0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8012e8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012e90:	687b      	ldr	r3, [r7, #4]
 8012e92:	4413      	add	r3, r2
 8012e94:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012e96:	69bb      	ldr	r3, [r7, #24]
 8012e98:	f003 0307 	and.w	r3, r3, #7
 8012e9c:	2b00      	cmp	r3, #0
 8012e9e:	d00b      	beq.n	8012eb8 <pvPortMalloc+0xfc>
	__asm volatile
 8012ea0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012ea4:	f383 8811 	msr	BASEPRI, r3
 8012ea8:	f3bf 8f6f 	isb	sy
 8012eac:	f3bf 8f4f 	dsb	sy
 8012eb0:	613b      	str	r3, [r7, #16]
}
 8012eb2:	bf00      	nop
 8012eb4:	bf00      	nop
 8012eb6:	e7fd      	b.n	8012eb4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8012eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012eba:	685a      	ldr	r2, [r3, #4]
 8012ebc:	687b      	ldr	r3, [r7, #4]
 8012ebe:	1ad2      	subs	r2, r2, r3
 8012ec0:	69bb      	ldr	r3, [r7, #24]
 8012ec2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8012ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012ec6:	687a      	ldr	r2, [r7, #4]
 8012ec8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8012eca:	69b8      	ldr	r0, [r7, #24]
 8012ecc:	f000 f90a 	bl	80130e4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8012ed0:	4b1d      	ldr	r3, [pc, #116]	@ (8012f48 <pvPortMalloc+0x18c>)
 8012ed2:	681a      	ldr	r2, [r3, #0]
 8012ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012ed6:	685b      	ldr	r3, [r3, #4]
 8012ed8:	1ad3      	subs	r3, r2, r3
 8012eda:	4a1b      	ldr	r2, [pc, #108]	@ (8012f48 <pvPortMalloc+0x18c>)
 8012edc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8012ede:	4b1a      	ldr	r3, [pc, #104]	@ (8012f48 <pvPortMalloc+0x18c>)
 8012ee0:	681a      	ldr	r2, [r3, #0]
 8012ee2:	4b1b      	ldr	r3, [pc, #108]	@ (8012f50 <pvPortMalloc+0x194>)
 8012ee4:	681b      	ldr	r3, [r3, #0]
 8012ee6:	429a      	cmp	r2, r3
 8012ee8:	d203      	bcs.n	8012ef2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8012eea:	4b17      	ldr	r3, [pc, #92]	@ (8012f48 <pvPortMalloc+0x18c>)
 8012eec:	681b      	ldr	r3, [r3, #0]
 8012eee:	4a18      	ldr	r2, [pc, #96]	@ (8012f50 <pvPortMalloc+0x194>)
 8012ef0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8012ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012ef4:	685a      	ldr	r2, [r3, #4]
 8012ef6:	4b13      	ldr	r3, [pc, #76]	@ (8012f44 <pvPortMalloc+0x188>)
 8012ef8:	681b      	ldr	r3, [r3, #0]
 8012efa:	431a      	orrs	r2, r3
 8012efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012efe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8012f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012f02:	2200      	movs	r2, #0
 8012f04:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8012f06:	4b13      	ldr	r3, [pc, #76]	@ (8012f54 <pvPortMalloc+0x198>)
 8012f08:	681b      	ldr	r3, [r3, #0]
 8012f0a:	3301      	adds	r3, #1
 8012f0c:	4a11      	ldr	r2, [pc, #68]	@ (8012f54 <pvPortMalloc+0x198>)
 8012f0e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8012f10:	f7fe fcde 	bl	80118d0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8012f14:	69fb      	ldr	r3, [r7, #28]
 8012f16:	f003 0307 	and.w	r3, r3, #7
 8012f1a:	2b00      	cmp	r3, #0
 8012f1c:	d00b      	beq.n	8012f36 <pvPortMalloc+0x17a>
	__asm volatile
 8012f1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012f22:	f383 8811 	msr	BASEPRI, r3
 8012f26:	f3bf 8f6f 	isb	sy
 8012f2a:	f3bf 8f4f 	dsb	sy
 8012f2e:	60fb      	str	r3, [r7, #12]
}
 8012f30:	bf00      	nop
 8012f32:	bf00      	nop
 8012f34:	e7fd      	b.n	8012f32 <pvPortMalloc+0x176>
	return pvReturn;
 8012f36:	69fb      	ldr	r3, [r7, #28]
}
 8012f38:	4618      	mov	r0, r3
 8012f3a:	3728      	adds	r7, #40	@ 0x28
 8012f3c:	46bd      	mov	sp, r7
 8012f3e:	bd80      	pop	{r7, pc}
 8012f40:	20007244 	.word	0x20007244
 8012f44:	20007258 	.word	0x20007258
 8012f48:	20007248 	.word	0x20007248
 8012f4c:	2000723c 	.word	0x2000723c
 8012f50:	2000724c 	.word	0x2000724c
 8012f54:	20007250 	.word	0x20007250

08012f58 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8012f58:	b580      	push	{r7, lr}
 8012f5a:	b086      	sub	sp, #24
 8012f5c:	af00      	add	r7, sp, #0
 8012f5e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8012f60:	687b      	ldr	r3, [r7, #4]
 8012f62:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8012f64:	687b      	ldr	r3, [r7, #4]
 8012f66:	2b00      	cmp	r3, #0
 8012f68:	d04f      	beq.n	801300a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8012f6a:	2308      	movs	r3, #8
 8012f6c:	425b      	negs	r3, r3
 8012f6e:	697a      	ldr	r2, [r7, #20]
 8012f70:	4413      	add	r3, r2
 8012f72:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8012f74:	697b      	ldr	r3, [r7, #20]
 8012f76:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8012f78:	693b      	ldr	r3, [r7, #16]
 8012f7a:	685a      	ldr	r2, [r3, #4]
 8012f7c:	4b25      	ldr	r3, [pc, #148]	@ (8013014 <vPortFree+0xbc>)
 8012f7e:	681b      	ldr	r3, [r3, #0]
 8012f80:	4013      	ands	r3, r2
 8012f82:	2b00      	cmp	r3, #0
 8012f84:	d10b      	bne.n	8012f9e <vPortFree+0x46>
	__asm volatile
 8012f86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012f8a:	f383 8811 	msr	BASEPRI, r3
 8012f8e:	f3bf 8f6f 	isb	sy
 8012f92:	f3bf 8f4f 	dsb	sy
 8012f96:	60fb      	str	r3, [r7, #12]
}
 8012f98:	bf00      	nop
 8012f9a:	bf00      	nop
 8012f9c:	e7fd      	b.n	8012f9a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8012f9e:	693b      	ldr	r3, [r7, #16]
 8012fa0:	681b      	ldr	r3, [r3, #0]
 8012fa2:	2b00      	cmp	r3, #0
 8012fa4:	d00b      	beq.n	8012fbe <vPortFree+0x66>
	__asm volatile
 8012fa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012faa:	f383 8811 	msr	BASEPRI, r3
 8012fae:	f3bf 8f6f 	isb	sy
 8012fb2:	f3bf 8f4f 	dsb	sy
 8012fb6:	60bb      	str	r3, [r7, #8]
}
 8012fb8:	bf00      	nop
 8012fba:	bf00      	nop
 8012fbc:	e7fd      	b.n	8012fba <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8012fbe:	693b      	ldr	r3, [r7, #16]
 8012fc0:	685a      	ldr	r2, [r3, #4]
 8012fc2:	4b14      	ldr	r3, [pc, #80]	@ (8013014 <vPortFree+0xbc>)
 8012fc4:	681b      	ldr	r3, [r3, #0]
 8012fc6:	4013      	ands	r3, r2
 8012fc8:	2b00      	cmp	r3, #0
 8012fca:	d01e      	beq.n	801300a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8012fcc:	693b      	ldr	r3, [r7, #16]
 8012fce:	681b      	ldr	r3, [r3, #0]
 8012fd0:	2b00      	cmp	r3, #0
 8012fd2:	d11a      	bne.n	801300a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8012fd4:	693b      	ldr	r3, [r7, #16]
 8012fd6:	685a      	ldr	r2, [r3, #4]
 8012fd8:	4b0e      	ldr	r3, [pc, #56]	@ (8013014 <vPortFree+0xbc>)
 8012fda:	681b      	ldr	r3, [r3, #0]
 8012fdc:	43db      	mvns	r3, r3
 8012fde:	401a      	ands	r2, r3
 8012fe0:	693b      	ldr	r3, [r7, #16]
 8012fe2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8012fe4:	f7fe fc66 	bl	80118b4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8012fe8:	693b      	ldr	r3, [r7, #16]
 8012fea:	685a      	ldr	r2, [r3, #4]
 8012fec:	4b0a      	ldr	r3, [pc, #40]	@ (8013018 <vPortFree+0xc0>)
 8012fee:	681b      	ldr	r3, [r3, #0]
 8012ff0:	4413      	add	r3, r2
 8012ff2:	4a09      	ldr	r2, [pc, #36]	@ (8013018 <vPortFree+0xc0>)
 8012ff4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8012ff6:	6938      	ldr	r0, [r7, #16]
 8012ff8:	f000 f874 	bl	80130e4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8012ffc:	4b07      	ldr	r3, [pc, #28]	@ (801301c <vPortFree+0xc4>)
 8012ffe:	681b      	ldr	r3, [r3, #0]
 8013000:	3301      	adds	r3, #1
 8013002:	4a06      	ldr	r2, [pc, #24]	@ (801301c <vPortFree+0xc4>)
 8013004:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8013006:	f7fe fc63 	bl	80118d0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801300a:	bf00      	nop
 801300c:	3718      	adds	r7, #24
 801300e:	46bd      	mov	sp, r7
 8013010:	bd80      	pop	{r7, pc}
 8013012:	bf00      	nop
 8013014:	20007258 	.word	0x20007258
 8013018:	20007248 	.word	0x20007248
 801301c:	20007254 	.word	0x20007254

08013020 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8013020:	b480      	push	{r7}
 8013022:	b085      	sub	sp, #20
 8013024:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8013026:	f642 63e0 	movw	r3, #12000	@ 0x2ee0
 801302a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801302c:	4b27      	ldr	r3, [pc, #156]	@ (80130cc <prvHeapInit+0xac>)
 801302e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8013030:	68fb      	ldr	r3, [r7, #12]
 8013032:	f003 0307 	and.w	r3, r3, #7
 8013036:	2b00      	cmp	r3, #0
 8013038:	d00c      	beq.n	8013054 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801303a:	68fb      	ldr	r3, [r7, #12]
 801303c:	3307      	adds	r3, #7
 801303e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013040:	68fb      	ldr	r3, [r7, #12]
 8013042:	f023 0307 	bic.w	r3, r3, #7
 8013046:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8013048:	68ba      	ldr	r2, [r7, #8]
 801304a:	68fb      	ldr	r3, [r7, #12]
 801304c:	1ad3      	subs	r3, r2, r3
 801304e:	4a1f      	ldr	r2, [pc, #124]	@ (80130cc <prvHeapInit+0xac>)
 8013050:	4413      	add	r3, r2
 8013052:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8013054:	68fb      	ldr	r3, [r7, #12]
 8013056:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8013058:	4a1d      	ldr	r2, [pc, #116]	@ (80130d0 <prvHeapInit+0xb0>)
 801305a:	687b      	ldr	r3, [r7, #4]
 801305c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801305e:	4b1c      	ldr	r3, [pc, #112]	@ (80130d0 <prvHeapInit+0xb0>)
 8013060:	2200      	movs	r2, #0
 8013062:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8013064:	687b      	ldr	r3, [r7, #4]
 8013066:	68ba      	ldr	r2, [r7, #8]
 8013068:	4413      	add	r3, r2
 801306a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801306c:	2208      	movs	r2, #8
 801306e:	68fb      	ldr	r3, [r7, #12]
 8013070:	1a9b      	subs	r3, r3, r2
 8013072:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013074:	68fb      	ldr	r3, [r7, #12]
 8013076:	f023 0307 	bic.w	r3, r3, #7
 801307a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801307c:	68fb      	ldr	r3, [r7, #12]
 801307e:	4a15      	ldr	r2, [pc, #84]	@ (80130d4 <prvHeapInit+0xb4>)
 8013080:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8013082:	4b14      	ldr	r3, [pc, #80]	@ (80130d4 <prvHeapInit+0xb4>)
 8013084:	681b      	ldr	r3, [r3, #0]
 8013086:	2200      	movs	r2, #0
 8013088:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801308a:	4b12      	ldr	r3, [pc, #72]	@ (80130d4 <prvHeapInit+0xb4>)
 801308c:	681b      	ldr	r3, [r3, #0]
 801308e:	2200      	movs	r2, #0
 8013090:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8013092:	687b      	ldr	r3, [r7, #4]
 8013094:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8013096:	683b      	ldr	r3, [r7, #0]
 8013098:	68fa      	ldr	r2, [r7, #12]
 801309a:	1ad2      	subs	r2, r2, r3
 801309c:	683b      	ldr	r3, [r7, #0]
 801309e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80130a0:	4b0c      	ldr	r3, [pc, #48]	@ (80130d4 <prvHeapInit+0xb4>)
 80130a2:	681a      	ldr	r2, [r3, #0]
 80130a4:	683b      	ldr	r3, [r7, #0]
 80130a6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80130a8:	683b      	ldr	r3, [r7, #0]
 80130aa:	685b      	ldr	r3, [r3, #4]
 80130ac:	4a0a      	ldr	r2, [pc, #40]	@ (80130d8 <prvHeapInit+0xb8>)
 80130ae:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80130b0:	683b      	ldr	r3, [r7, #0]
 80130b2:	685b      	ldr	r3, [r3, #4]
 80130b4:	4a09      	ldr	r2, [pc, #36]	@ (80130dc <prvHeapInit+0xbc>)
 80130b6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80130b8:	4b09      	ldr	r3, [pc, #36]	@ (80130e0 <prvHeapInit+0xc0>)
 80130ba:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80130be:	601a      	str	r2, [r3, #0]
}
 80130c0:	bf00      	nop
 80130c2:	3714      	adds	r7, #20
 80130c4:	46bd      	mov	sp, r7
 80130c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130ca:	4770      	bx	lr
 80130cc:	2000435c 	.word	0x2000435c
 80130d0:	2000723c 	.word	0x2000723c
 80130d4:	20007244 	.word	0x20007244
 80130d8:	2000724c 	.word	0x2000724c
 80130dc:	20007248 	.word	0x20007248
 80130e0:	20007258 	.word	0x20007258

080130e4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80130e4:	b480      	push	{r7}
 80130e6:	b085      	sub	sp, #20
 80130e8:	af00      	add	r7, sp, #0
 80130ea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80130ec:	4b28      	ldr	r3, [pc, #160]	@ (8013190 <prvInsertBlockIntoFreeList+0xac>)
 80130ee:	60fb      	str	r3, [r7, #12]
 80130f0:	e002      	b.n	80130f8 <prvInsertBlockIntoFreeList+0x14>
 80130f2:	68fb      	ldr	r3, [r7, #12]
 80130f4:	681b      	ldr	r3, [r3, #0]
 80130f6:	60fb      	str	r3, [r7, #12]
 80130f8:	68fb      	ldr	r3, [r7, #12]
 80130fa:	681b      	ldr	r3, [r3, #0]
 80130fc:	687a      	ldr	r2, [r7, #4]
 80130fe:	429a      	cmp	r2, r3
 8013100:	d8f7      	bhi.n	80130f2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8013102:	68fb      	ldr	r3, [r7, #12]
 8013104:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8013106:	68fb      	ldr	r3, [r7, #12]
 8013108:	685b      	ldr	r3, [r3, #4]
 801310a:	68ba      	ldr	r2, [r7, #8]
 801310c:	4413      	add	r3, r2
 801310e:	687a      	ldr	r2, [r7, #4]
 8013110:	429a      	cmp	r2, r3
 8013112:	d108      	bne.n	8013126 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8013114:	68fb      	ldr	r3, [r7, #12]
 8013116:	685a      	ldr	r2, [r3, #4]
 8013118:	687b      	ldr	r3, [r7, #4]
 801311a:	685b      	ldr	r3, [r3, #4]
 801311c:	441a      	add	r2, r3
 801311e:	68fb      	ldr	r3, [r7, #12]
 8013120:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8013122:	68fb      	ldr	r3, [r7, #12]
 8013124:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8013126:	687b      	ldr	r3, [r7, #4]
 8013128:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801312a:	687b      	ldr	r3, [r7, #4]
 801312c:	685b      	ldr	r3, [r3, #4]
 801312e:	68ba      	ldr	r2, [r7, #8]
 8013130:	441a      	add	r2, r3
 8013132:	68fb      	ldr	r3, [r7, #12]
 8013134:	681b      	ldr	r3, [r3, #0]
 8013136:	429a      	cmp	r2, r3
 8013138:	d118      	bne.n	801316c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801313a:	68fb      	ldr	r3, [r7, #12]
 801313c:	681a      	ldr	r2, [r3, #0]
 801313e:	4b15      	ldr	r3, [pc, #84]	@ (8013194 <prvInsertBlockIntoFreeList+0xb0>)
 8013140:	681b      	ldr	r3, [r3, #0]
 8013142:	429a      	cmp	r2, r3
 8013144:	d00d      	beq.n	8013162 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8013146:	687b      	ldr	r3, [r7, #4]
 8013148:	685a      	ldr	r2, [r3, #4]
 801314a:	68fb      	ldr	r3, [r7, #12]
 801314c:	681b      	ldr	r3, [r3, #0]
 801314e:	685b      	ldr	r3, [r3, #4]
 8013150:	441a      	add	r2, r3
 8013152:	687b      	ldr	r3, [r7, #4]
 8013154:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8013156:	68fb      	ldr	r3, [r7, #12]
 8013158:	681b      	ldr	r3, [r3, #0]
 801315a:	681a      	ldr	r2, [r3, #0]
 801315c:	687b      	ldr	r3, [r7, #4]
 801315e:	601a      	str	r2, [r3, #0]
 8013160:	e008      	b.n	8013174 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8013162:	4b0c      	ldr	r3, [pc, #48]	@ (8013194 <prvInsertBlockIntoFreeList+0xb0>)
 8013164:	681a      	ldr	r2, [r3, #0]
 8013166:	687b      	ldr	r3, [r7, #4]
 8013168:	601a      	str	r2, [r3, #0]
 801316a:	e003      	b.n	8013174 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801316c:	68fb      	ldr	r3, [r7, #12]
 801316e:	681a      	ldr	r2, [r3, #0]
 8013170:	687b      	ldr	r3, [r7, #4]
 8013172:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8013174:	68fa      	ldr	r2, [r7, #12]
 8013176:	687b      	ldr	r3, [r7, #4]
 8013178:	429a      	cmp	r2, r3
 801317a:	d002      	beq.n	8013182 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801317c:	68fb      	ldr	r3, [r7, #12]
 801317e:	687a      	ldr	r2, [r7, #4]
 8013180:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013182:	bf00      	nop
 8013184:	3714      	adds	r7, #20
 8013186:	46bd      	mov	sp, r7
 8013188:	f85d 7b04 	ldr.w	r7, [sp], #4
 801318c:	4770      	bx	lr
 801318e:	bf00      	nop
 8013190:	2000723c 	.word	0x2000723c
 8013194:	20007244 	.word	0x20007244

08013198 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8013198:	b580      	push	{r7, lr}
 801319a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801319c:	2200      	movs	r2, #0
 801319e:	4912      	ldr	r1, [pc, #72]	@ (80131e8 <MX_USB_DEVICE_Init+0x50>)
 80131a0:	4812      	ldr	r0, [pc, #72]	@ (80131ec <MX_USB_DEVICE_Init+0x54>)
 80131a2:	f7fb fee5 	bl	800ef70 <USBD_Init>
 80131a6:	4603      	mov	r3, r0
 80131a8:	2b00      	cmp	r3, #0
 80131aa:	d001      	beq.n	80131b0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80131ac:	f7f0 fe04 	bl	8003db8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80131b0:	490f      	ldr	r1, [pc, #60]	@ (80131f0 <MX_USB_DEVICE_Init+0x58>)
 80131b2:	480e      	ldr	r0, [pc, #56]	@ (80131ec <MX_USB_DEVICE_Init+0x54>)
 80131b4:	f7fb ff0c 	bl	800efd0 <USBD_RegisterClass>
 80131b8:	4603      	mov	r3, r0
 80131ba:	2b00      	cmp	r3, #0
 80131bc:	d001      	beq.n	80131c2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80131be:	f7f0 fdfb 	bl	8003db8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80131c2:	490c      	ldr	r1, [pc, #48]	@ (80131f4 <MX_USB_DEVICE_Init+0x5c>)
 80131c4:	4809      	ldr	r0, [pc, #36]	@ (80131ec <MX_USB_DEVICE_Init+0x54>)
 80131c6:	f7fb fe03 	bl	800edd0 <USBD_CDC_RegisterInterface>
 80131ca:	4603      	mov	r3, r0
 80131cc:	2b00      	cmp	r3, #0
 80131ce:	d001      	beq.n	80131d4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80131d0:	f7f0 fdf2 	bl	8003db8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80131d4:	4805      	ldr	r0, [pc, #20]	@ (80131ec <MX_USB_DEVICE_Init+0x54>)
 80131d6:	f7fb ff31 	bl	800f03c <USBD_Start>
 80131da:	4603      	mov	r3, r0
 80131dc:	2b00      	cmp	r3, #0
 80131de:	d001      	beq.n	80131e4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80131e0:	f7f0 fdea 	bl	8003db8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80131e4:	bf00      	nop
 80131e6:	bd80      	pop	{r7, pc}
 80131e8:	20000348 	.word	0x20000348
 80131ec:	2000725c 	.word	0x2000725c
 80131f0:	200002b0 	.word	0x200002b0
 80131f4:	20000334 	.word	0x20000334

080131f8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80131f8:	b580      	push	{r7, lr}
 80131fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80131fc:	2200      	movs	r2, #0
 80131fe:	4905      	ldr	r1, [pc, #20]	@ (8013214 <CDC_Init_FS+0x1c>)
 8013200:	4805      	ldr	r0, [pc, #20]	@ (8013218 <CDC_Init_FS+0x20>)
 8013202:	f7fb fdff 	bl	800ee04 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8013206:	4905      	ldr	r1, [pc, #20]	@ (801321c <CDC_Init_FS+0x24>)
 8013208:	4803      	ldr	r0, [pc, #12]	@ (8013218 <CDC_Init_FS+0x20>)
 801320a:	f7fb fe1d 	bl	800ee48 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801320e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8013210:	4618      	mov	r0, r3
 8013212:	bd80      	pop	{r7, pc}
 8013214:	20007d38 	.word	0x20007d38
 8013218:	2000725c 	.word	0x2000725c
 801321c:	20007538 	.word	0x20007538

08013220 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8013220:	b480      	push	{r7}
 8013222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8013224:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8013226:	4618      	mov	r0, r3
 8013228:	46bd      	mov	sp, r7
 801322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801322e:	4770      	bx	lr

08013230 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8013230:	b480      	push	{r7}
 8013232:	b083      	sub	sp, #12
 8013234:	af00      	add	r7, sp, #0
 8013236:	4603      	mov	r3, r0
 8013238:	6039      	str	r1, [r7, #0]
 801323a:	71fb      	strb	r3, [r7, #7]
 801323c:	4613      	mov	r3, r2
 801323e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8013240:	79fb      	ldrb	r3, [r7, #7]
 8013242:	2b23      	cmp	r3, #35	@ 0x23
 8013244:	d84a      	bhi.n	80132dc <CDC_Control_FS+0xac>
 8013246:	a201      	add	r2, pc, #4	@ (adr r2, 801324c <CDC_Control_FS+0x1c>)
 8013248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801324c:	080132dd 	.word	0x080132dd
 8013250:	080132dd 	.word	0x080132dd
 8013254:	080132dd 	.word	0x080132dd
 8013258:	080132dd 	.word	0x080132dd
 801325c:	080132dd 	.word	0x080132dd
 8013260:	080132dd 	.word	0x080132dd
 8013264:	080132dd 	.word	0x080132dd
 8013268:	080132dd 	.word	0x080132dd
 801326c:	080132dd 	.word	0x080132dd
 8013270:	080132dd 	.word	0x080132dd
 8013274:	080132dd 	.word	0x080132dd
 8013278:	080132dd 	.word	0x080132dd
 801327c:	080132dd 	.word	0x080132dd
 8013280:	080132dd 	.word	0x080132dd
 8013284:	080132dd 	.word	0x080132dd
 8013288:	080132dd 	.word	0x080132dd
 801328c:	080132dd 	.word	0x080132dd
 8013290:	080132dd 	.word	0x080132dd
 8013294:	080132dd 	.word	0x080132dd
 8013298:	080132dd 	.word	0x080132dd
 801329c:	080132dd 	.word	0x080132dd
 80132a0:	080132dd 	.word	0x080132dd
 80132a4:	080132dd 	.word	0x080132dd
 80132a8:	080132dd 	.word	0x080132dd
 80132ac:	080132dd 	.word	0x080132dd
 80132b0:	080132dd 	.word	0x080132dd
 80132b4:	080132dd 	.word	0x080132dd
 80132b8:	080132dd 	.word	0x080132dd
 80132bc:	080132dd 	.word	0x080132dd
 80132c0:	080132dd 	.word	0x080132dd
 80132c4:	080132dd 	.word	0x080132dd
 80132c8:	080132dd 	.word	0x080132dd
 80132cc:	080132dd 	.word	0x080132dd
 80132d0:	080132dd 	.word	0x080132dd
 80132d4:	080132dd 	.word	0x080132dd
 80132d8:	080132dd 	.word	0x080132dd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80132dc:	bf00      	nop
  }

  return (USBD_OK);
 80132de:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80132e0:	4618      	mov	r0, r3
 80132e2:	370c      	adds	r7, #12
 80132e4:	46bd      	mov	sp, r7
 80132e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132ea:	4770      	bx	lr

080132ec <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80132ec:	b580      	push	{r7, lr}
 80132ee:	b082      	sub	sp, #8
 80132f0:	af00      	add	r7, sp, #0
 80132f2:	6078      	str	r0, [r7, #4]
 80132f4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  WriteUSBDataToRingBuffer(Buf, *Len);
 80132f6:	683b      	ldr	r3, [r7, #0]
 80132f8:	681b      	ldr	r3, [r3, #0]
 80132fa:	4619      	mov	r1, r3
 80132fc:	6878      	ldr	r0, [r7, #4]
 80132fe:	f000 f847 	bl	8013390 <WriteUSBDataToRingBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8013302:	6879      	ldr	r1, [r7, #4]
 8013304:	4805      	ldr	r0, [pc, #20]	@ (801331c <CDC_Receive_FS+0x30>)
 8013306:	f7fb fd9f 	bl	800ee48 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801330a:	4804      	ldr	r0, [pc, #16]	@ (801331c <CDC_Receive_FS+0x30>)
 801330c:	f7fb fdfa 	bl	800ef04 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8013310:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8013312:	4618      	mov	r0, r3
 8013314:	3708      	adds	r7, #8
 8013316:	46bd      	mov	sp, r7
 8013318:	bd80      	pop	{r7, pc}
 801331a:	bf00      	nop
 801331c:	2000725c 	.word	0x2000725c

08013320 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8013320:	b580      	push	{r7, lr}
 8013322:	b084      	sub	sp, #16
 8013324:	af00      	add	r7, sp, #0
 8013326:	6078      	str	r0, [r7, #4]
 8013328:	460b      	mov	r3, r1
 801332a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 801332c:	2300      	movs	r3, #0
 801332e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8013330:	4b0d      	ldr	r3, [pc, #52]	@ (8013368 <CDC_Transmit_FS+0x48>)
 8013332:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8013336:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8013338:	68bb      	ldr	r3, [r7, #8]
 801333a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 801333e:	2b00      	cmp	r3, #0
 8013340:	d001      	beq.n	8013346 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8013342:	2301      	movs	r3, #1
 8013344:	e00b      	b.n	801335e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8013346:	887b      	ldrh	r3, [r7, #2]
 8013348:	461a      	mov	r2, r3
 801334a:	6879      	ldr	r1, [r7, #4]
 801334c:	4806      	ldr	r0, [pc, #24]	@ (8013368 <CDC_Transmit_FS+0x48>)
 801334e:	f7fb fd59 	bl	800ee04 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8013352:	4805      	ldr	r0, [pc, #20]	@ (8013368 <CDC_Transmit_FS+0x48>)
 8013354:	f7fb fd96 	bl	800ee84 <USBD_CDC_TransmitPacket>
 8013358:	4603      	mov	r3, r0
 801335a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 801335c:	7bfb      	ldrb	r3, [r7, #15]
}
 801335e:	4618      	mov	r0, r3
 8013360:	3710      	adds	r7, #16
 8013362:	46bd      	mov	sp, r7
 8013364:	bd80      	pop	{r7, pc}
 8013366:	bf00      	nop
 8013368:	2000725c 	.word	0x2000725c

0801336c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 801336c:	b480      	push	{r7}
 801336e:	b087      	sub	sp, #28
 8013370:	af00      	add	r7, sp, #0
 8013372:	60f8      	str	r0, [r7, #12]
 8013374:	60b9      	str	r1, [r7, #8]
 8013376:	4613      	mov	r3, r2
 8013378:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801337a:	2300      	movs	r3, #0
 801337c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801337e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013382:	4618      	mov	r0, r3
 8013384:	371c      	adds	r7, #28
 8013386:	46bd      	mov	sp, r7
 8013388:	f85d 7b04 	ldr.w	r7, [sp], #4
 801338c:	4770      	bx	lr
	...

08013390 <WriteUSBDataToRingBuffer>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void WriteUSBDataToRingBuffer(uint8_t *Buf, uint32_t Len) {
 8013390:	b580      	push	{r7, lr}
 8013392:	b084      	sub	sp, #16
 8013394:	af00      	add	r7, sp, #0
 8013396:	6078      	str	r0, [r7, #4]
 8013398:	6039      	str	r1, [r7, #0]
    for(uint32_t i = 0; i < Len; i++) {
 801339a:	2300      	movs	r3, #0
 801339c:	60fb      	str	r3, [r7, #12]
 801339e:	e00a      	b.n	80133b6 <WriteUSBDataToRingBuffer+0x26>
        RB_Write(&USB_Receive_Buffer, Buf[i]);
 80133a0:	687a      	ldr	r2, [r7, #4]
 80133a2:	68fb      	ldr	r3, [r7, #12]
 80133a4:	4413      	add	r3, r2
 80133a6:	781b      	ldrb	r3, [r3, #0]
 80133a8:	4619      	mov	r1, r3
 80133aa:	4807      	ldr	r0, [pc, #28]	@ (80133c8 <WriteUSBDataToRingBuffer+0x38>)
 80133ac:	f7f0 fd8c 	bl	8003ec8 <RB_Write>
    for(uint32_t i = 0; i < Len; i++) {
 80133b0:	68fb      	ldr	r3, [r7, #12]
 80133b2:	3301      	adds	r3, #1
 80133b4:	60fb      	str	r3, [r7, #12]
 80133b6:	68fa      	ldr	r2, [r7, #12]
 80133b8:	683b      	ldr	r3, [r7, #0]
 80133ba:	429a      	cmp	r2, r3
 80133bc:	d3f0      	bcc.n	80133a0 <WriteUSBDataToRingBuffer+0x10>
    }
}
 80133be:	bf00      	nop
 80133c0:	bf00      	nop
 80133c2:	3710      	adds	r7, #16
 80133c4:	46bd      	mov	sp, r7
 80133c6:	bd80      	pop	{r7, pc}
 80133c8:	20000594 	.word	0x20000594

080133cc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80133cc:	b480      	push	{r7}
 80133ce:	b083      	sub	sp, #12
 80133d0:	af00      	add	r7, sp, #0
 80133d2:	4603      	mov	r3, r0
 80133d4:	6039      	str	r1, [r7, #0]
 80133d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80133d8:	683b      	ldr	r3, [r7, #0]
 80133da:	2212      	movs	r2, #18
 80133dc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80133de:	4b03      	ldr	r3, [pc, #12]	@ (80133ec <USBD_FS_DeviceDescriptor+0x20>)
}
 80133e0:	4618      	mov	r0, r3
 80133e2:	370c      	adds	r7, #12
 80133e4:	46bd      	mov	sp, r7
 80133e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133ea:	4770      	bx	lr
 80133ec:	20000368 	.word	0x20000368

080133f0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80133f0:	b480      	push	{r7}
 80133f2:	b083      	sub	sp, #12
 80133f4:	af00      	add	r7, sp, #0
 80133f6:	4603      	mov	r3, r0
 80133f8:	6039      	str	r1, [r7, #0]
 80133fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80133fc:	683b      	ldr	r3, [r7, #0]
 80133fe:	2204      	movs	r2, #4
 8013400:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8013402:	4b03      	ldr	r3, [pc, #12]	@ (8013410 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8013404:	4618      	mov	r0, r3
 8013406:	370c      	adds	r7, #12
 8013408:	46bd      	mov	sp, r7
 801340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801340e:	4770      	bx	lr
 8013410:	20000388 	.word	0x20000388

08013414 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013414:	b580      	push	{r7, lr}
 8013416:	b082      	sub	sp, #8
 8013418:	af00      	add	r7, sp, #0
 801341a:	4603      	mov	r3, r0
 801341c:	6039      	str	r1, [r7, #0]
 801341e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8013420:	79fb      	ldrb	r3, [r7, #7]
 8013422:	2b00      	cmp	r3, #0
 8013424:	d105      	bne.n	8013432 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8013426:	683a      	ldr	r2, [r7, #0]
 8013428:	4907      	ldr	r1, [pc, #28]	@ (8013448 <USBD_FS_ProductStrDescriptor+0x34>)
 801342a:	4808      	ldr	r0, [pc, #32]	@ (801344c <USBD_FS_ProductStrDescriptor+0x38>)
 801342c:	f7fc ffe0 	bl	80103f0 <USBD_GetString>
 8013430:	e004      	b.n	801343c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8013432:	683a      	ldr	r2, [r7, #0]
 8013434:	4904      	ldr	r1, [pc, #16]	@ (8013448 <USBD_FS_ProductStrDescriptor+0x34>)
 8013436:	4805      	ldr	r0, [pc, #20]	@ (801344c <USBD_FS_ProductStrDescriptor+0x38>)
 8013438:	f7fc ffda 	bl	80103f0 <USBD_GetString>
  }
  return USBD_StrDesc;
 801343c:	4b02      	ldr	r3, [pc, #8]	@ (8013448 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801343e:	4618      	mov	r0, r3
 8013440:	3708      	adds	r7, #8
 8013442:	46bd      	mov	sp, r7
 8013444:	bd80      	pop	{r7, pc}
 8013446:	bf00      	nop
 8013448:	20008538 	.word	0x20008538
 801344c:	08017080 	.word	0x08017080

08013450 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013450:	b580      	push	{r7, lr}
 8013452:	b082      	sub	sp, #8
 8013454:	af00      	add	r7, sp, #0
 8013456:	4603      	mov	r3, r0
 8013458:	6039      	str	r1, [r7, #0]
 801345a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801345c:	683a      	ldr	r2, [r7, #0]
 801345e:	4904      	ldr	r1, [pc, #16]	@ (8013470 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8013460:	4804      	ldr	r0, [pc, #16]	@ (8013474 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8013462:	f7fc ffc5 	bl	80103f0 <USBD_GetString>
  return USBD_StrDesc;
 8013466:	4b02      	ldr	r3, [pc, #8]	@ (8013470 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8013468:	4618      	mov	r0, r3
 801346a:	3708      	adds	r7, #8
 801346c:	46bd      	mov	sp, r7
 801346e:	bd80      	pop	{r7, pc}
 8013470:	20008538 	.word	0x20008538
 8013474:	08017098 	.word	0x08017098

08013478 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013478:	b580      	push	{r7, lr}
 801347a:	b082      	sub	sp, #8
 801347c:	af00      	add	r7, sp, #0
 801347e:	4603      	mov	r3, r0
 8013480:	6039      	str	r1, [r7, #0]
 8013482:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8013484:	683b      	ldr	r3, [r7, #0]
 8013486:	221a      	movs	r2, #26
 8013488:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801348a:	f000 f855 	bl	8013538 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801348e:	4b02      	ldr	r3, [pc, #8]	@ (8013498 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8013490:	4618      	mov	r0, r3
 8013492:	3708      	adds	r7, #8
 8013494:	46bd      	mov	sp, r7
 8013496:	bd80      	pop	{r7, pc}
 8013498:	2000038c 	.word	0x2000038c

0801349c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801349c:	b580      	push	{r7, lr}
 801349e:	b082      	sub	sp, #8
 80134a0:	af00      	add	r7, sp, #0
 80134a2:	4603      	mov	r3, r0
 80134a4:	6039      	str	r1, [r7, #0]
 80134a6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80134a8:	79fb      	ldrb	r3, [r7, #7]
 80134aa:	2b00      	cmp	r3, #0
 80134ac:	d105      	bne.n	80134ba <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80134ae:	683a      	ldr	r2, [r7, #0]
 80134b0:	4907      	ldr	r1, [pc, #28]	@ (80134d0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80134b2:	4808      	ldr	r0, [pc, #32]	@ (80134d4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80134b4:	f7fc ff9c 	bl	80103f0 <USBD_GetString>
 80134b8:	e004      	b.n	80134c4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80134ba:	683a      	ldr	r2, [r7, #0]
 80134bc:	4904      	ldr	r1, [pc, #16]	@ (80134d0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80134be:	4805      	ldr	r0, [pc, #20]	@ (80134d4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80134c0:	f7fc ff96 	bl	80103f0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80134c4:	4b02      	ldr	r3, [pc, #8]	@ (80134d0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80134c6:	4618      	mov	r0, r3
 80134c8:	3708      	adds	r7, #8
 80134ca:	46bd      	mov	sp, r7
 80134cc:	bd80      	pop	{r7, pc}
 80134ce:	bf00      	nop
 80134d0:	20008538 	.word	0x20008538
 80134d4:	080170ac 	.word	0x080170ac

080134d8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80134d8:	b580      	push	{r7, lr}
 80134da:	b082      	sub	sp, #8
 80134dc:	af00      	add	r7, sp, #0
 80134de:	4603      	mov	r3, r0
 80134e0:	6039      	str	r1, [r7, #0]
 80134e2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80134e4:	79fb      	ldrb	r3, [r7, #7]
 80134e6:	2b00      	cmp	r3, #0
 80134e8:	d105      	bne.n	80134f6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80134ea:	683a      	ldr	r2, [r7, #0]
 80134ec:	4907      	ldr	r1, [pc, #28]	@ (801350c <USBD_FS_InterfaceStrDescriptor+0x34>)
 80134ee:	4808      	ldr	r0, [pc, #32]	@ (8013510 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80134f0:	f7fc ff7e 	bl	80103f0 <USBD_GetString>
 80134f4:	e004      	b.n	8013500 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80134f6:	683a      	ldr	r2, [r7, #0]
 80134f8:	4904      	ldr	r1, [pc, #16]	@ (801350c <USBD_FS_InterfaceStrDescriptor+0x34>)
 80134fa:	4805      	ldr	r0, [pc, #20]	@ (8013510 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80134fc:	f7fc ff78 	bl	80103f0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8013500:	4b02      	ldr	r3, [pc, #8]	@ (801350c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8013502:	4618      	mov	r0, r3
 8013504:	3708      	adds	r7, #8
 8013506:	46bd      	mov	sp, r7
 8013508:	bd80      	pop	{r7, pc}
 801350a:	bf00      	nop
 801350c:	20008538 	.word	0x20008538
 8013510:	080170b8 	.word	0x080170b8

08013514 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013514:	b480      	push	{r7}
 8013516:	b083      	sub	sp, #12
 8013518:	af00      	add	r7, sp, #0
 801351a:	4603      	mov	r3, r0
 801351c:	6039      	str	r1, [r7, #0]
 801351e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8013520:	683b      	ldr	r3, [r7, #0]
 8013522:	220c      	movs	r2, #12
 8013524:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8013526:	4b03      	ldr	r3, [pc, #12]	@ (8013534 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8013528:	4618      	mov	r0, r3
 801352a:	370c      	adds	r7, #12
 801352c:	46bd      	mov	sp, r7
 801352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013532:	4770      	bx	lr
 8013534:	2000037c 	.word	0x2000037c

08013538 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8013538:	b580      	push	{r7, lr}
 801353a:	b084      	sub	sp, #16
 801353c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801353e:	4b0f      	ldr	r3, [pc, #60]	@ (801357c <Get_SerialNum+0x44>)
 8013540:	681b      	ldr	r3, [r3, #0]
 8013542:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8013544:	4b0e      	ldr	r3, [pc, #56]	@ (8013580 <Get_SerialNum+0x48>)
 8013546:	681b      	ldr	r3, [r3, #0]
 8013548:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801354a:	4b0e      	ldr	r3, [pc, #56]	@ (8013584 <Get_SerialNum+0x4c>)
 801354c:	681b      	ldr	r3, [r3, #0]
 801354e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8013550:	68fa      	ldr	r2, [r7, #12]
 8013552:	687b      	ldr	r3, [r7, #4]
 8013554:	4413      	add	r3, r2
 8013556:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8013558:	68fb      	ldr	r3, [r7, #12]
 801355a:	2b00      	cmp	r3, #0
 801355c:	d009      	beq.n	8013572 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801355e:	2208      	movs	r2, #8
 8013560:	4909      	ldr	r1, [pc, #36]	@ (8013588 <Get_SerialNum+0x50>)
 8013562:	68f8      	ldr	r0, [r7, #12]
 8013564:	f000 f814 	bl	8013590 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8013568:	2204      	movs	r2, #4
 801356a:	4908      	ldr	r1, [pc, #32]	@ (801358c <Get_SerialNum+0x54>)
 801356c:	68b8      	ldr	r0, [r7, #8]
 801356e:	f000 f80f 	bl	8013590 <IntToUnicode>
  }
}
 8013572:	bf00      	nop
 8013574:	3710      	adds	r7, #16
 8013576:	46bd      	mov	sp, r7
 8013578:	bd80      	pop	{r7, pc}
 801357a:	bf00      	nop
 801357c:	1fff7590 	.word	0x1fff7590
 8013580:	1fff7594 	.word	0x1fff7594
 8013584:	1fff7598 	.word	0x1fff7598
 8013588:	2000038e 	.word	0x2000038e
 801358c:	2000039e 	.word	0x2000039e

08013590 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8013590:	b480      	push	{r7}
 8013592:	b087      	sub	sp, #28
 8013594:	af00      	add	r7, sp, #0
 8013596:	60f8      	str	r0, [r7, #12]
 8013598:	60b9      	str	r1, [r7, #8]
 801359a:	4613      	mov	r3, r2
 801359c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801359e:	2300      	movs	r3, #0
 80135a0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80135a2:	2300      	movs	r3, #0
 80135a4:	75fb      	strb	r3, [r7, #23]
 80135a6:	e027      	b.n	80135f8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80135a8:	68fb      	ldr	r3, [r7, #12]
 80135aa:	0f1b      	lsrs	r3, r3, #28
 80135ac:	2b09      	cmp	r3, #9
 80135ae:	d80b      	bhi.n	80135c8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80135b0:	68fb      	ldr	r3, [r7, #12]
 80135b2:	0f1b      	lsrs	r3, r3, #28
 80135b4:	b2da      	uxtb	r2, r3
 80135b6:	7dfb      	ldrb	r3, [r7, #23]
 80135b8:	005b      	lsls	r3, r3, #1
 80135ba:	4619      	mov	r1, r3
 80135bc:	68bb      	ldr	r3, [r7, #8]
 80135be:	440b      	add	r3, r1
 80135c0:	3230      	adds	r2, #48	@ 0x30
 80135c2:	b2d2      	uxtb	r2, r2
 80135c4:	701a      	strb	r2, [r3, #0]
 80135c6:	e00a      	b.n	80135de <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80135c8:	68fb      	ldr	r3, [r7, #12]
 80135ca:	0f1b      	lsrs	r3, r3, #28
 80135cc:	b2da      	uxtb	r2, r3
 80135ce:	7dfb      	ldrb	r3, [r7, #23]
 80135d0:	005b      	lsls	r3, r3, #1
 80135d2:	4619      	mov	r1, r3
 80135d4:	68bb      	ldr	r3, [r7, #8]
 80135d6:	440b      	add	r3, r1
 80135d8:	3237      	adds	r2, #55	@ 0x37
 80135da:	b2d2      	uxtb	r2, r2
 80135dc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80135de:	68fb      	ldr	r3, [r7, #12]
 80135e0:	011b      	lsls	r3, r3, #4
 80135e2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80135e4:	7dfb      	ldrb	r3, [r7, #23]
 80135e6:	005b      	lsls	r3, r3, #1
 80135e8:	3301      	adds	r3, #1
 80135ea:	68ba      	ldr	r2, [r7, #8]
 80135ec:	4413      	add	r3, r2
 80135ee:	2200      	movs	r2, #0
 80135f0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80135f2:	7dfb      	ldrb	r3, [r7, #23]
 80135f4:	3301      	adds	r3, #1
 80135f6:	75fb      	strb	r3, [r7, #23]
 80135f8:	7dfa      	ldrb	r2, [r7, #23]
 80135fa:	79fb      	ldrb	r3, [r7, #7]
 80135fc:	429a      	cmp	r2, r3
 80135fe:	d3d3      	bcc.n	80135a8 <IntToUnicode+0x18>
  }
}
 8013600:	bf00      	nop
 8013602:	bf00      	nop
 8013604:	371c      	adds	r7, #28
 8013606:	46bd      	mov	sp, r7
 8013608:	f85d 7b04 	ldr.w	r7, [sp], #4
 801360c:	4770      	bx	lr
	...

08013610 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8013610:	b580      	push	{r7, lr}
 8013612:	b0b0      	sub	sp, #192	@ 0xc0
 8013614:	af00      	add	r7, sp, #0
 8013616:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8013618:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 801361c:	2200      	movs	r2, #0
 801361e:	601a      	str	r2, [r3, #0]
 8013620:	605a      	str	r2, [r3, #4]
 8013622:	609a      	str	r2, [r3, #8]
 8013624:	60da      	str	r2, [r3, #12]
 8013626:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8013628:	f107 0314 	add.w	r3, r7, #20
 801362c:	2298      	movs	r2, #152	@ 0x98
 801362e:	2100      	movs	r1, #0
 8013630:	4618      	mov	r0, r3
 8013632:	f001 fb04 	bl	8014c3e <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8013636:	687b      	ldr	r3, [r7, #4]
 8013638:	681b      	ldr	r3, [r3, #0]
 801363a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801363e:	d17a      	bne.n	8013736 <HAL_PCD_MspInit+0x126>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8013640:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8013644:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8013646:	2300      	movs	r3, #0
 8013648:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 801364c:	f107 0314 	add.w	r3, r7, #20
 8013650:	4618      	mov	r0, r3
 8013652:	f7f7 fa21 	bl	800aa98 <HAL_RCCEx_PeriphCLKConfig>
 8013656:	4603      	mov	r3, r0
 8013658:	2b00      	cmp	r3, #0
 801365a:	d001      	beq.n	8013660 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 801365c:	f7f0 fbac 	bl	8003db8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8013660:	4b37      	ldr	r3, [pc, #220]	@ (8013740 <HAL_PCD_MspInit+0x130>)
 8013662:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013664:	4a36      	ldr	r2, [pc, #216]	@ (8013740 <HAL_PCD_MspInit+0x130>)
 8013666:	f043 0301 	orr.w	r3, r3, #1
 801366a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 801366c:	4b34      	ldr	r3, [pc, #208]	@ (8013740 <HAL_PCD_MspInit+0x130>)
 801366e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013670:	f003 0301 	and.w	r3, r3, #1
 8013674:	613b      	str	r3, [r7, #16]
 8013676:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8013678:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801367c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013680:	2302      	movs	r3, #2
 8013682:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013686:	2300      	movs	r3, #0
 8013688:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801368c:	2303      	movs	r3, #3
 801368e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8013692:	230a      	movs	r3, #10
 8013694:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8013698:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 801369c:	4619      	mov	r1, r3
 801369e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80136a2:	f7f4 fdfb 	bl	800829c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80136a6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80136aa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80136ae:	2302      	movs	r3, #2
 80136b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80136b4:	2301      	movs	r3, #1
 80136b6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80136ba:	2303      	movs	r3, #3
 80136bc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80136c0:	230a      	movs	r3, #10
 80136c2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80136c6:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80136ca:	4619      	mov	r1, r3
 80136cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80136d0:	f7f4 fde4 	bl	800829c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80136d4:	4b1a      	ldr	r3, [pc, #104]	@ (8013740 <HAL_PCD_MspInit+0x130>)
 80136d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80136d8:	4a19      	ldr	r2, [pc, #100]	@ (8013740 <HAL_PCD_MspInit+0x130>)
 80136da:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80136de:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80136e0:	4b17      	ldr	r3, [pc, #92]	@ (8013740 <HAL_PCD_MspInit+0x130>)
 80136e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80136e4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80136e8:	60fb      	str	r3, [r7, #12]
 80136ea:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80136ec:	4b14      	ldr	r3, [pc, #80]	@ (8013740 <HAL_PCD_MspInit+0x130>)
 80136ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80136f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80136f4:	2b00      	cmp	r3, #0
 80136f6:	d114      	bne.n	8013722 <HAL_PCD_MspInit+0x112>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80136f8:	4b11      	ldr	r3, [pc, #68]	@ (8013740 <HAL_PCD_MspInit+0x130>)
 80136fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80136fc:	4a10      	ldr	r2, [pc, #64]	@ (8013740 <HAL_PCD_MspInit+0x130>)
 80136fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8013702:	6593      	str	r3, [r2, #88]	@ 0x58
 8013704:	4b0e      	ldr	r3, [pc, #56]	@ (8013740 <HAL_PCD_MspInit+0x130>)
 8013706:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013708:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801370c:	60bb      	str	r3, [r7, #8]
 801370e:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8013710:	f7f6 fa0a 	bl	8009b28 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8013714:	4b0a      	ldr	r3, [pc, #40]	@ (8013740 <HAL_PCD_MspInit+0x130>)
 8013716:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013718:	4a09      	ldr	r2, [pc, #36]	@ (8013740 <HAL_PCD_MspInit+0x130>)
 801371a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801371e:	6593      	str	r3, [r2, #88]	@ 0x58
 8013720:	e001      	b.n	8013726 <HAL_PCD_MspInit+0x116>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8013722:	f7f6 fa01 	bl	8009b28 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8013726:	2200      	movs	r2, #0
 8013728:	2105      	movs	r1, #5
 801372a:	2043      	movs	r0, #67	@ 0x43
 801372c:	f7f4 fb1a 	bl	8007d64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8013730:	2043      	movs	r0, #67	@ 0x43
 8013732:	f7f4 fb33 	bl	8007d9c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8013736:	bf00      	nop
 8013738:	37c0      	adds	r7, #192	@ 0xc0
 801373a:	46bd      	mov	sp, r7
 801373c:	bd80      	pop	{r7, pc}
 801373e:	bf00      	nop
 8013740:	40021000 	.word	0x40021000

08013744 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013744:	b580      	push	{r7, lr}
 8013746:	b082      	sub	sp, #8
 8013748:	af00      	add	r7, sp, #0
 801374a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801374c:	687b      	ldr	r3, [r7, #4]
 801374e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	@ 0x508
 8013752:	687b      	ldr	r3, [r7, #4]
 8013754:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8013758:	4619      	mov	r1, r3
 801375a:	4610      	mov	r0, r2
 801375c:	f7fb fcbb 	bl	800f0d6 <USBD_LL_SetupStage>
}
 8013760:	bf00      	nop
 8013762:	3708      	adds	r7, #8
 8013764:	46bd      	mov	sp, r7
 8013766:	bd80      	pop	{r7, pc}

08013768 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013768:	b580      	push	{r7, lr}
 801376a:	b082      	sub	sp, #8
 801376c:	af00      	add	r7, sp, #0
 801376e:	6078      	str	r0, [r7, #4]
 8013770:	460b      	mov	r3, r1
 8013772:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8013774:	687b      	ldr	r3, [r7, #4]
 8013776:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 801377a:	78fa      	ldrb	r2, [r7, #3]
 801377c:	6879      	ldr	r1, [r7, #4]
 801377e:	4613      	mov	r3, r2
 8013780:	00db      	lsls	r3, r3, #3
 8013782:	4413      	add	r3, r2
 8013784:	009b      	lsls	r3, r3, #2
 8013786:	440b      	add	r3, r1
 8013788:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 801378c:	681a      	ldr	r2, [r3, #0]
 801378e:	78fb      	ldrb	r3, [r7, #3]
 8013790:	4619      	mov	r1, r3
 8013792:	f7fb fcf5 	bl	800f180 <USBD_LL_DataOutStage>
}
 8013796:	bf00      	nop
 8013798:	3708      	adds	r7, #8
 801379a:	46bd      	mov	sp, r7
 801379c:	bd80      	pop	{r7, pc}

0801379e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801379e:	b580      	push	{r7, lr}
 80137a0:	b082      	sub	sp, #8
 80137a2:	af00      	add	r7, sp, #0
 80137a4:	6078      	str	r0, [r7, #4]
 80137a6:	460b      	mov	r3, r1
 80137a8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80137aa:	687b      	ldr	r3, [r7, #4]
 80137ac:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 80137b0:	78fa      	ldrb	r2, [r7, #3]
 80137b2:	6879      	ldr	r1, [r7, #4]
 80137b4:	4613      	mov	r3, r2
 80137b6:	00db      	lsls	r3, r3, #3
 80137b8:	4413      	add	r3, r2
 80137ba:	009b      	lsls	r3, r3, #2
 80137bc:	440b      	add	r3, r1
 80137be:	3348      	adds	r3, #72	@ 0x48
 80137c0:	681a      	ldr	r2, [r3, #0]
 80137c2:	78fb      	ldrb	r3, [r7, #3]
 80137c4:	4619      	mov	r1, r3
 80137c6:	f7fb fd8e 	bl	800f2e6 <USBD_LL_DataInStage>
}
 80137ca:	bf00      	nop
 80137cc:	3708      	adds	r7, #8
 80137ce:	46bd      	mov	sp, r7
 80137d0:	bd80      	pop	{r7, pc}

080137d2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80137d2:	b580      	push	{r7, lr}
 80137d4:	b082      	sub	sp, #8
 80137d6:	af00      	add	r7, sp, #0
 80137d8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80137da:	687b      	ldr	r3, [r7, #4]
 80137dc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 80137e0:	4618      	mov	r0, r3
 80137e2:	f7fb fec8 	bl	800f576 <USBD_LL_SOF>
}
 80137e6:	bf00      	nop
 80137e8:	3708      	adds	r7, #8
 80137ea:	46bd      	mov	sp, r7
 80137ec:	bd80      	pop	{r7, pc}

080137ee <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80137ee:	b580      	push	{r7, lr}
 80137f0:	b084      	sub	sp, #16
 80137f2:	af00      	add	r7, sp, #0
 80137f4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80137f6:	2301      	movs	r3, #1
 80137f8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80137fa:	687b      	ldr	r3, [r7, #4]
 80137fc:	691b      	ldr	r3, [r3, #16]
 80137fe:	2b02      	cmp	r3, #2
 8013800:	d001      	beq.n	8013806 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8013802:	f7f0 fad9 	bl	8003db8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8013806:	687b      	ldr	r3, [r7, #4]
 8013808:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 801380c:	7bfa      	ldrb	r2, [r7, #15]
 801380e:	4611      	mov	r1, r2
 8013810:	4618      	mov	r0, r3
 8013812:	f7fb fe6c 	bl	800f4ee <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8013816:	687b      	ldr	r3, [r7, #4]
 8013818:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 801381c:	4618      	mov	r0, r3
 801381e:	f7fb fe14 	bl	800f44a <USBD_LL_Reset>
}
 8013822:	bf00      	nop
 8013824:	3710      	adds	r7, #16
 8013826:	46bd      	mov	sp, r7
 8013828:	bd80      	pop	{r7, pc}
	...

0801382c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801382c:	b580      	push	{r7, lr}
 801382e:	b082      	sub	sp, #8
 8013830:	af00      	add	r7, sp, #0
 8013832:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8013834:	687b      	ldr	r3, [r7, #4]
 8013836:	681b      	ldr	r3, [r3, #0]
 8013838:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 801383c:	681b      	ldr	r3, [r3, #0]
 801383e:	687a      	ldr	r2, [r7, #4]
 8013840:	6812      	ldr	r2, [r2, #0]
 8013842:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8013846:	f043 0301 	orr.w	r3, r3, #1
 801384a:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801384c:	687b      	ldr	r3, [r7, #4]
 801384e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8013852:	4618      	mov	r0, r3
 8013854:	f7fb fe5b 	bl	800f50e <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8013858:	687b      	ldr	r3, [r7, #4]
 801385a:	6a1b      	ldr	r3, [r3, #32]
 801385c:	2b00      	cmp	r3, #0
 801385e:	d005      	beq.n	801386c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8013860:	4b04      	ldr	r3, [pc, #16]	@ (8013874 <HAL_PCD_SuspendCallback+0x48>)
 8013862:	691b      	ldr	r3, [r3, #16]
 8013864:	4a03      	ldr	r2, [pc, #12]	@ (8013874 <HAL_PCD_SuspendCallback+0x48>)
 8013866:	f043 0306 	orr.w	r3, r3, #6
 801386a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801386c:	bf00      	nop
 801386e:	3708      	adds	r7, #8
 8013870:	46bd      	mov	sp, r7
 8013872:	bd80      	pop	{r7, pc}
 8013874:	e000ed00 	.word	0xe000ed00

08013878 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013878:	b580      	push	{r7, lr}
 801387a:	b082      	sub	sp, #8
 801387c:	af00      	add	r7, sp, #0
 801387e:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8013880:	687b      	ldr	r3, [r7, #4]
 8013882:	681b      	ldr	r3, [r3, #0]
 8013884:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8013888:	681b      	ldr	r3, [r3, #0]
 801388a:	687a      	ldr	r2, [r7, #4]
 801388c:	6812      	ldr	r2, [r2, #0]
 801388e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8013892:	f023 0301 	bic.w	r3, r3, #1
 8013896:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8013898:	687b      	ldr	r3, [r7, #4]
 801389a:	6a1b      	ldr	r3, [r3, #32]
 801389c:	2b00      	cmp	r3, #0
 801389e:	d007      	beq.n	80138b0 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80138a0:	4b08      	ldr	r3, [pc, #32]	@ (80138c4 <HAL_PCD_ResumeCallback+0x4c>)
 80138a2:	691b      	ldr	r3, [r3, #16]
 80138a4:	4a07      	ldr	r2, [pc, #28]	@ (80138c4 <HAL_PCD_ResumeCallback+0x4c>)
 80138a6:	f023 0306 	bic.w	r3, r3, #6
 80138aa:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 80138ac:	f000 faf6 	bl	8013e9c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80138b0:	687b      	ldr	r3, [r7, #4]
 80138b2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 80138b6:	4618      	mov	r0, r3
 80138b8:	f7fb fe45 	bl	800f546 <USBD_LL_Resume>
}
 80138bc:	bf00      	nop
 80138be:	3708      	adds	r7, #8
 80138c0:	46bd      	mov	sp, r7
 80138c2:	bd80      	pop	{r7, pc}
 80138c4:	e000ed00 	.word	0xe000ed00

080138c8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80138c8:	b580      	push	{r7, lr}
 80138ca:	b082      	sub	sp, #8
 80138cc:	af00      	add	r7, sp, #0
 80138ce:	6078      	str	r0, [r7, #4]
 80138d0:	460b      	mov	r3, r1
 80138d2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80138d4:	687b      	ldr	r3, [r7, #4]
 80138d6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 80138da:	78fa      	ldrb	r2, [r7, #3]
 80138dc:	4611      	mov	r1, r2
 80138de:	4618      	mov	r0, r3
 80138e0:	f7fb fe9b 	bl	800f61a <USBD_LL_IsoOUTIncomplete>
}
 80138e4:	bf00      	nop
 80138e6:	3708      	adds	r7, #8
 80138e8:	46bd      	mov	sp, r7
 80138ea:	bd80      	pop	{r7, pc}

080138ec <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80138ec:	b580      	push	{r7, lr}
 80138ee:	b082      	sub	sp, #8
 80138f0:	af00      	add	r7, sp, #0
 80138f2:	6078      	str	r0, [r7, #4]
 80138f4:	460b      	mov	r3, r1
 80138f6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80138f8:	687b      	ldr	r3, [r7, #4]
 80138fa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 80138fe:	78fa      	ldrb	r2, [r7, #3]
 8013900:	4611      	mov	r1, r2
 8013902:	4618      	mov	r0, r3
 8013904:	f7fb fe57 	bl	800f5b6 <USBD_LL_IsoINIncomplete>
}
 8013908:	bf00      	nop
 801390a:	3708      	adds	r7, #8
 801390c:	46bd      	mov	sp, r7
 801390e:	bd80      	pop	{r7, pc}

08013910 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013910:	b580      	push	{r7, lr}
 8013912:	b082      	sub	sp, #8
 8013914:	af00      	add	r7, sp, #0
 8013916:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8013918:	687b      	ldr	r3, [r7, #4]
 801391a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 801391e:	4618      	mov	r0, r3
 8013920:	f7fb fead 	bl	800f67e <USBD_LL_DevConnected>
}
 8013924:	bf00      	nop
 8013926:	3708      	adds	r7, #8
 8013928:	46bd      	mov	sp, r7
 801392a:	bd80      	pop	{r7, pc}

0801392c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801392c:	b580      	push	{r7, lr}
 801392e:	b082      	sub	sp, #8
 8013930:	af00      	add	r7, sp, #0
 8013932:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8013934:	687b      	ldr	r3, [r7, #4]
 8013936:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 801393a:	4618      	mov	r0, r3
 801393c:	f7fb feaa 	bl	800f694 <USBD_LL_DevDisconnected>
}
 8013940:	bf00      	nop
 8013942:	3708      	adds	r7, #8
 8013944:	46bd      	mov	sp, r7
 8013946:	bd80      	pop	{r7, pc}

08013948 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8013948:	b580      	push	{r7, lr}
 801394a:	b082      	sub	sp, #8
 801394c:	af00      	add	r7, sp, #0
 801394e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8013950:	687b      	ldr	r3, [r7, #4]
 8013952:	781b      	ldrb	r3, [r3, #0]
 8013954:	2b00      	cmp	r3, #0
 8013956:	d13c      	bne.n	80139d2 <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8013958:	4a20      	ldr	r2, [pc, #128]	@ (80139dc <USBD_LL_Init+0x94>)
 801395a:	687b      	ldr	r3, [r7, #4]
 801395c:	f8c2 3508 	str.w	r3, [r2, #1288]	@ 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8013960:	687b      	ldr	r3, [r7, #4]
 8013962:	4a1e      	ldr	r2, [pc, #120]	@ (80139dc <USBD_LL_Init+0x94>)
 8013964:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8013968:	4b1c      	ldr	r3, [pc, #112]	@ (80139dc <USBD_LL_Init+0x94>)
 801396a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 801396e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8013970:	4b1a      	ldr	r3, [pc, #104]	@ (80139dc <USBD_LL_Init+0x94>)
 8013972:	2206      	movs	r2, #6
 8013974:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8013976:	4b19      	ldr	r3, [pc, #100]	@ (80139dc <USBD_LL_Init+0x94>)
 8013978:	2202      	movs	r2, #2
 801397a:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801397c:	4b17      	ldr	r3, [pc, #92]	@ (80139dc <USBD_LL_Init+0x94>)
 801397e:	2202      	movs	r2, #2
 8013980:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8013982:	4b16      	ldr	r3, [pc, #88]	@ (80139dc <USBD_LL_Init+0x94>)
 8013984:	2200      	movs	r2, #0
 8013986:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8013988:	4b14      	ldr	r3, [pc, #80]	@ (80139dc <USBD_LL_Init+0x94>)
 801398a:	2200      	movs	r2, #0
 801398c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801398e:	4b13      	ldr	r3, [pc, #76]	@ (80139dc <USBD_LL_Init+0x94>)
 8013990:	2200      	movs	r2, #0
 8013992:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8013994:	4b11      	ldr	r3, [pc, #68]	@ (80139dc <USBD_LL_Init+0x94>)
 8013996:	2200      	movs	r2, #0
 8013998:	629a      	str	r2, [r3, #40]	@ 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801399a:	4b10      	ldr	r3, [pc, #64]	@ (80139dc <USBD_LL_Init+0x94>)
 801399c:	2200      	movs	r2, #0
 801399e:	631a      	str	r2, [r3, #48]	@ 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80139a0:	4b0e      	ldr	r3, [pc, #56]	@ (80139dc <USBD_LL_Init+0x94>)
 80139a2:	2200      	movs	r2, #0
 80139a4:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80139a6:	480d      	ldr	r0, [pc, #52]	@ (80139dc <USBD_LL_Init+0x94>)
 80139a8:	f7f4 fe3a 	bl	8008620 <HAL_PCD_Init>
 80139ac:	4603      	mov	r3, r0
 80139ae:	2b00      	cmp	r3, #0
 80139b0:	d001      	beq.n	80139b6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80139b2:	f7f0 fa01 	bl	8003db8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80139b6:	2180      	movs	r1, #128	@ 0x80
 80139b8:	4808      	ldr	r0, [pc, #32]	@ (80139dc <USBD_LL_Init+0x94>)
 80139ba:	f7f5 ffa4 	bl	8009906 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80139be:	2240      	movs	r2, #64	@ 0x40
 80139c0:	2100      	movs	r1, #0
 80139c2:	4806      	ldr	r0, [pc, #24]	@ (80139dc <USBD_LL_Init+0x94>)
 80139c4:	f7f5 ff58 	bl	8009878 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80139c8:	2280      	movs	r2, #128	@ 0x80
 80139ca:	2101      	movs	r1, #1
 80139cc:	4803      	ldr	r0, [pc, #12]	@ (80139dc <USBD_LL_Init+0x94>)
 80139ce:	f7f5 ff53 	bl	8009878 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80139d2:	2300      	movs	r3, #0
}
 80139d4:	4618      	mov	r0, r3
 80139d6:	3708      	adds	r7, #8
 80139d8:	46bd      	mov	sp, r7
 80139da:	bd80      	pop	{r7, pc}
 80139dc:	20008738 	.word	0x20008738

080139e0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80139e0:	b580      	push	{r7, lr}
 80139e2:	b084      	sub	sp, #16
 80139e4:	af00      	add	r7, sp, #0
 80139e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80139e8:	2300      	movs	r3, #0
 80139ea:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80139ec:	2300      	movs	r3, #0
 80139ee:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 80139f0:	687b      	ldr	r3, [r7, #4]
 80139f2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80139f6:	4618      	mov	r0, r3
 80139f8:	f7f4 ff36 	bl	8008868 <HAL_PCD_Start>
 80139fc:	4603      	mov	r3, r0
 80139fe:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8013a00:	7bbb      	ldrb	r3, [r7, #14]
 8013a02:	2b03      	cmp	r3, #3
 8013a04:	d816      	bhi.n	8013a34 <USBD_LL_Start+0x54>
 8013a06:	a201      	add	r2, pc, #4	@ (adr r2, 8013a0c <USBD_LL_Start+0x2c>)
 8013a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013a0c:	08013a1d 	.word	0x08013a1d
 8013a10:	08013a23 	.word	0x08013a23
 8013a14:	08013a29 	.word	0x08013a29
 8013a18:	08013a2f 	.word	0x08013a2f
    case HAL_OK :
      usb_status = USBD_OK;
 8013a1c:	2300      	movs	r3, #0
 8013a1e:	73fb      	strb	r3, [r7, #15]
    break;
 8013a20:	e00b      	b.n	8013a3a <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8013a22:	2303      	movs	r3, #3
 8013a24:	73fb      	strb	r3, [r7, #15]
    break;
 8013a26:	e008      	b.n	8013a3a <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8013a28:	2301      	movs	r3, #1
 8013a2a:	73fb      	strb	r3, [r7, #15]
    break;
 8013a2c:	e005      	b.n	8013a3a <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8013a2e:	2303      	movs	r3, #3
 8013a30:	73fb      	strb	r3, [r7, #15]
    break;
 8013a32:	e002      	b.n	8013a3a <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8013a34:	2303      	movs	r3, #3
 8013a36:	73fb      	strb	r3, [r7, #15]
    break;
 8013a38:	bf00      	nop
  }
  return usb_status;
 8013a3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8013a3c:	4618      	mov	r0, r3
 8013a3e:	3710      	adds	r7, #16
 8013a40:	46bd      	mov	sp, r7
 8013a42:	bd80      	pop	{r7, pc}

08013a44 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8013a44:	b580      	push	{r7, lr}
 8013a46:	b084      	sub	sp, #16
 8013a48:	af00      	add	r7, sp, #0
 8013a4a:	6078      	str	r0, [r7, #4]
 8013a4c:	4608      	mov	r0, r1
 8013a4e:	4611      	mov	r1, r2
 8013a50:	461a      	mov	r2, r3
 8013a52:	4603      	mov	r3, r0
 8013a54:	70fb      	strb	r3, [r7, #3]
 8013a56:	460b      	mov	r3, r1
 8013a58:	70bb      	strb	r3, [r7, #2]
 8013a5a:	4613      	mov	r3, r2
 8013a5c:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013a5e:	2300      	movs	r3, #0
 8013a60:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013a62:	2300      	movs	r3, #0
 8013a64:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8013a66:	687b      	ldr	r3, [r7, #4]
 8013a68:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8013a6c:	78bb      	ldrb	r3, [r7, #2]
 8013a6e:	883a      	ldrh	r2, [r7, #0]
 8013a70:	78f9      	ldrb	r1, [r7, #3]
 8013a72:	f7f5 fbe0 	bl	8009236 <HAL_PCD_EP_Open>
 8013a76:	4603      	mov	r3, r0
 8013a78:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8013a7a:	7bbb      	ldrb	r3, [r7, #14]
 8013a7c:	2b03      	cmp	r3, #3
 8013a7e:	d817      	bhi.n	8013ab0 <USBD_LL_OpenEP+0x6c>
 8013a80:	a201      	add	r2, pc, #4	@ (adr r2, 8013a88 <USBD_LL_OpenEP+0x44>)
 8013a82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013a86:	bf00      	nop
 8013a88:	08013a99 	.word	0x08013a99
 8013a8c:	08013a9f 	.word	0x08013a9f
 8013a90:	08013aa5 	.word	0x08013aa5
 8013a94:	08013aab 	.word	0x08013aab
    case HAL_OK :
      usb_status = USBD_OK;
 8013a98:	2300      	movs	r3, #0
 8013a9a:	73fb      	strb	r3, [r7, #15]
    break;
 8013a9c:	e00b      	b.n	8013ab6 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8013a9e:	2303      	movs	r3, #3
 8013aa0:	73fb      	strb	r3, [r7, #15]
    break;
 8013aa2:	e008      	b.n	8013ab6 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8013aa4:	2301      	movs	r3, #1
 8013aa6:	73fb      	strb	r3, [r7, #15]
    break;
 8013aa8:	e005      	b.n	8013ab6 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8013aaa:	2303      	movs	r3, #3
 8013aac:	73fb      	strb	r3, [r7, #15]
    break;
 8013aae:	e002      	b.n	8013ab6 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8013ab0:	2303      	movs	r3, #3
 8013ab2:	73fb      	strb	r3, [r7, #15]
    break;
 8013ab4:	bf00      	nop
  }
  return usb_status;
 8013ab6:	7bfb      	ldrb	r3, [r7, #15]
}
 8013ab8:	4618      	mov	r0, r3
 8013aba:	3710      	adds	r7, #16
 8013abc:	46bd      	mov	sp, r7
 8013abe:	bd80      	pop	{r7, pc}

08013ac0 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013ac0:	b580      	push	{r7, lr}
 8013ac2:	b084      	sub	sp, #16
 8013ac4:	af00      	add	r7, sp, #0
 8013ac6:	6078      	str	r0, [r7, #4]
 8013ac8:	460b      	mov	r3, r1
 8013aca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013acc:	2300      	movs	r3, #0
 8013ace:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013ad0:	2300      	movs	r3, #0
 8013ad2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8013ad4:	687b      	ldr	r3, [r7, #4]
 8013ad6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8013ada:	78fa      	ldrb	r2, [r7, #3]
 8013adc:	4611      	mov	r1, r2
 8013ade:	4618      	mov	r0, r3
 8013ae0:	f7f5 fc11 	bl	8009306 <HAL_PCD_EP_Close>
 8013ae4:	4603      	mov	r3, r0
 8013ae6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8013ae8:	7bbb      	ldrb	r3, [r7, #14]
 8013aea:	2b03      	cmp	r3, #3
 8013aec:	d816      	bhi.n	8013b1c <USBD_LL_CloseEP+0x5c>
 8013aee:	a201      	add	r2, pc, #4	@ (adr r2, 8013af4 <USBD_LL_CloseEP+0x34>)
 8013af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013af4:	08013b05 	.word	0x08013b05
 8013af8:	08013b0b 	.word	0x08013b0b
 8013afc:	08013b11 	.word	0x08013b11
 8013b00:	08013b17 	.word	0x08013b17
    case HAL_OK :
      usb_status = USBD_OK;
 8013b04:	2300      	movs	r3, #0
 8013b06:	73fb      	strb	r3, [r7, #15]
    break;
 8013b08:	e00b      	b.n	8013b22 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8013b0a:	2303      	movs	r3, #3
 8013b0c:	73fb      	strb	r3, [r7, #15]
    break;
 8013b0e:	e008      	b.n	8013b22 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8013b10:	2301      	movs	r3, #1
 8013b12:	73fb      	strb	r3, [r7, #15]
    break;
 8013b14:	e005      	b.n	8013b22 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8013b16:	2303      	movs	r3, #3
 8013b18:	73fb      	strb	r3, [r7, #15]
    break;
 8013b1a:	e002      	b.n	8013b22 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8013b1c:	2303      	movs	r3, #3
 8013b1e:	73fb      	strb	r3, [r7, #15]
    break;
 8013b20:	bf00      	nop
  }
  return usb_status;
 8013b22:	7bfb      	ldrb	r3, [r7, #15]
}
 8013b24:	4618      	mov	r0, r3
 8013b26:	3710      	adds	r7, #16
 8013b28:	46bd      	mov	sp, r7
 8013b2a:	bd80      	pop	{r7, pc}

08013b2c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013b2c:	b580      	push	{r7, lr}
 8013b2e:	b084      	sub	sp, #16
 8013b30:	af00      	add	r7, sp, #0
 8013b32:	6078      	str	r0, [r7, #4]
 8013b34:	460b      	mov	r3, r1
 8013b36:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013b38:	2300      	movs	r3, #0
 8013b3a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013b3c:	2300      	movs	r3, #0
 8013b3e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8013b40:	687b      	ldr	r3, [r7, #4]
 8013b42:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8013b46:	78fa      	ldrb	r2, [r7, #3]
 8013b48:	4611      	mov	r1, r2
 8013b4a:	4618      	mov	r0, r3
 8013b4c:	f7f5 fca0 	bl	8009490 <HAL_PCD_EP_SetStall>
 8013b50:	4603      	mov	r3, r0
 8013b52:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8013b54:	7bbb      	ldrb	r3, [r7, #14]
 8013b56:	2b03      	cmp	r3, #3
 8013b58:	d816      	bhi.n	8013b88 <USBD_LL_StallEP+0x5c>
 8013b5a:	a201      	add	r2, pc, #4	@ (adr r2, 8013b60 <USBD_LL_StallEP+0x34>)
 8013b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013b60:	08013b71 	.word	0x08013b71
 8013b64:	08013b77 	.word	0x08013b77
 8013b68:	08013b7d 	.word	0x08013b7d
 8013b6c:	08013b83 	.word	0x08013b83
    case HAL_OK :
      usb_status = USBD_OK;
 8013b70:	2300      	movs	r3, #0
 8013b72:	73fb      	strb	r3, [r7, #15]
    break;
 8013b74:	e00b      	b.n	8013b8e <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8013b76:	2303      	movs	r3, #3
 8013b78:	73fb      	strb	r3, [r7, #15]
    break;
 8013b7a:	e008      	b.n	8013b8e <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8013b7c:	2301      	movs	r3, #1
 8013b7e:	73fb      	strb	r3, [r7, #15]
    break;
 8013b80:	e005      	b.n	8013b8e <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8013b82:	2303      	movs	r3, #3
 8013b84:	73fb      	strb	r3, [r7, #15]
    break;
 8013b86:	e002      	b.n	8013b8e <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8013b88:	2303      	movs	r3, #3
 8013b8a:	73fb      	strb	r3, [r7, #15]
    break;
 8013b8c:	bf00      	nop
  }
  return usb_status;
 8013b8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8013b90:	4618      	mov	r0, r3
 8013b92:	3710      	adds	r7, #16
 8013b94:	46bd      	mov	sp, r7
 8013b96:	bd80      	pop	{r7, pc}

08013b98 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013b98:	b580      	push	{r7, lr}
 8013b9a:	b084      	sub	sp, #16
 8013b9c:	af00      	add	r7, sp, #0
 8013b9e:	6078      	str	r0, [r7, #4]
 8013ba0:	460b      	mov	r3, r1
 8013ba2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013ba4:	2300      	movs	r3, #0
 8013ba6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013ba8:	2300      	movs	r3, #0
 8013baa:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8013bac:	687b      	ldr	r3, [r7, #4]
 8013bae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8013bb2:	78fa      	ldrb	r2, [r7, #3]
 8013bb4:	4611      	mov	r1, r2
 8013bb6:	4618      	mov	r0, r3
 8013bb8:	f7f5 fccc 	bl	8009554 <HAL_PCD_EP_ClrStall>
 8013bbc:	4603      	mov	r3, r0
 8013bbe:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8013bc0:	7bbb      	ldrb	r3, [r7, #14]
 8013bc2:	2b03      	cmp	r3, #3
 8013bc4:	d816      	bhi.n	8013bf4 <USBD_LL_ClearStallEP+0x5c>
 8013bc6:	a201      	add	r2, pc, #4	@ (adr r2, 8013bcc <USBD_LL_ClearStallEP+0x34>)
 8013bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013bcc:	08013bdd 	.word	0x08013bdd
 8013bd0:	08013be3 	.word	0x08013be3
 8013bd4:	08013be9 	.word	0x08013be9
 8013bd8:	08013bef 	.word	0x08013bef
    case HAL_OK :
      usb_status = USBD_OK;
 8013bdc:	2300      	movs	r3, #0
 8013bde:	73fb      	strb	r3, [r7, #15]
    break;
 8013be0:	e00b      	b.n	8013bfa <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8013be2:	2303      	movs	r3, #3
 8013be4:	73fb      	strb	r3, [r7, #15]
    break;
 8013be6:	e008      	b.n	8013bfa <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8013be8:	2301      	movs	r3, #1
 8013bea:	73fb      	strb	r3, [r7, #15]
    break;
 8013bec:	e005      	b.n	8013bfa <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8013bee:	2303      	movs	r3, #3
 8013bf0:	73fb      	strb	r3, [r7, #15]
    break;
 8013bf2:	e002      	b.n	8013bfa <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8013bf4:	2303      	movs	r3, #3
 8013bf6:	73fb      	strb	r3, [r7, #15]
    break;
 8013bf8:	bf00      	nop
  }
  return usb_status;
 8013bfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8013bfc:	4618      	mov	r0, r3
 8013bfe:	3710      	adds	r7, #16
 8013c00:	46bd      	mov	sp, r7
 8013c02:	bd80      	pop	{r7, pc}

08013c04 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013c04:	b480      	push	{r7}
 8013c06:	b085      	sub	sp, #20
 8013c08:	af00      	add	r7, sp, #0
 8013c0a:	6078      	str	r0, [r7, #4]
 8013c0c:	460b      	mov	r3, r1
 8013c0e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8013c10:	687b      	ldr	r3, [r7, #4]
 8013c12:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8013c16:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8013c18:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8013c1c:	2b00      	cmp	r3, #0
 8013c1e:	da0b      	bge.n	8013c38 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8013c20:	78fb      	ldrb	r3, [r7, #3]
 8013c22:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8013c26:	68f9      	ldr	r1, [r7, #12]
 8013c28:	4613      	mov	r3, r2
 8013c2a:	00db      	lsls	r3, r3, #3
 8013c2c:	4413      	add	r3, r2
 8013c2e:	009b      	lsls	r3, r3, #2
 8013c30:	440b      	add	r3, r1
 8013c32:	333e      	adds	r3, #62	@ 0x3e
 8013c34:	781b      	ldrb	r3, [r3, #0]
 8013c36:	e00b      	b.n	8013c50 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8013c38:	78fb      	ldrb	r3, [r7, #3]
 8013c3a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8013c3e:	68f9      	ldr	r1, [r7, #12]
 8013c40:	4613      	mov	r3, r2
 8013c42:	00db      	lsls	r3, r3, #3
 8013c44:	4413      	add	r3, r2
 8013c46:	009b      	lsls	r3, r3, #2
 8013c48:	440b      	add	r3, r1
 8013c4a:	f203 237e 	addw	r3, r3, #638	@ 0x27e
 8013c4e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8013c50:	4618      	mov	r0, r3
 8013c52:	3714      	adds	r7, #20
 8013c54:	46bd      	mov	sp, r7
 8013c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c5a:	4770      	bx	lr

08013c5c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8013c5c:	b580      	push	{r7, lr}
 8013c5e:	b084      	sub	sp, #16
 8013c60:	af00      	add	r7, sp, #0
 8013c62:	6078      	str	r0, [r7, #4]
 8013c64:	460b      	mov	r3, r1
 8013c66:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013c68:	2300      	movs	r3, #0
 8013c6a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013c6c:	2300      	movs	r3, #0
 8013c6e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8013c70:	687b      	ldr	r3, [r7, #4]
 8013c72:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8013c76:	78fa      	ldrb	r2, [r7, #3]
 8013c78:	4611      	mov	r1, r2
 8013c7a:	4618      	mov	r0, r3
 8013c7c:	f7f5 fab6 	bl	80091ec <HAL_PCD_SetAddress>
 8013c80:	4603      	mov	r3, r0
 8013c82:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8013c84:	7bbb      	ldrb	r3, [r7, #14]
 8013c86:	2b03      	cmp	r3, #3
 8013c88:	d816      	bhi.n	8013cb8 <USBD_LL_SetUSBAddress+0x5c>
 8013c8a:	a201      	add	r2, pc, #4	@ (adr r2, 8013c90 <USBD_LL_SetUSBAddress+0x34>)
 8013c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013c90:	08013ca1 	.word	0x08013ca1
 8013c94:	08013ca7 	.word	0x08013ca7
 8013c98:	08013cad 	.word	0x08013cad
 8013c9c:	08013cb3 	.word	0x08013cb3
    case HAL_OK :
      usb_status = USBD_OK;
 8013ca0:	2300      	movs	r3, #0
 8013ca2:	73fb      	strb	r3, [r7, #15]
    break;
 8013ca4:	e00b      	b.n	8013cbe <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8013ca6:	2303      	movs	r3, #3
 8013ca8:	73fb      	strb	r3, [r7, #15]
    break;
 8013caa:	e008      	b.n	8013cbe <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8013cac:	2301      	movs	r3, #1
 8013cae:	73fb      	strb	r3, [r7, #15]
    break;
 8013cb0:	e005      	b.n	8013cbe <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8013cb2:	2303      	movs	r3, #3
 8013cb4:	73fb      	strb	r3, [r7, #15]
    break;
 8013cb6:	e002      	b.n	8013cbe <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8013cb8:	2303      	movs	r3, #3
 8013cba:	73fb      	strb	r3, [r7, #15]
    break;
 8013cbc:	bf00      	nop
  }
  return usb_status;
 8013cbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8013cc0:	4618      	mov	r0, r3
 8013cc2:	3710      	adds	r7, #16
 8013cc4:	46bd      	mov	sp, r7
 8013cc6:	bd80      	pop	{r7, pc}

08013cc8 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8013cc8:	b580      	push	{r7, lr}
 8013cca:	b086      	sub	sp, #24
 8013ccc:	af00      	add	r7, sp, #0
 8013cce:	60f8      	str	r0, [r7, #12]
 8013cd0:	607a      	str	r2, [r7, #4]
 8013cd2:	603b      	str	r3, [r7, #0]
 8013cd4:	460b      	mov	r3, r1
 8013cd6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013cd8:	2300      	movs	r3, #0
 8013cda:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013cdc:	2300      	movs	r3, #0
 8013cde:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8013ce0:	68fb      	ldr	r3, [r7, #12]
 8013ce2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8013ce6:	7af9      	ldrb	r1, [r7, #11]
 8013ce8:	683b      	ldr	r3, [r7, #0]
 8013cea:	687a      	ldr	r2, [r7, #4]
 8013cec:	f7f5 fb9f 	bl	800942e <HAL_PCD_EP_Transmit>
 8013cf0:	4603      	mov	r3, r0
 8013cf2:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8013cf4:	7dbb      	ldrb	r3, [r7, #22]
 8013cf6:	2b03      	cmp	r3, #3
 8013cf8:	d816      	bhi.n	8013d28 <USBD_LL_Transmit+0x60>
 8013cfa:	a201      	add	r2, pc, #4	@ (adr r2, 8013d00 <USBD_LL_Transmit+0x38>)
 8013cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013d00:	08013d11 	.word	0x08013d11
 8013d04:	08013d17 	.word	0x08013d17
 8013d08:	08013d1d 	.word	0x08013d1d
 8013d0c:	08013d23 	.word	0x08013d23
    case HAL_OK :
      usb_status = USBD_OK;
 8013d10:	2300      	movs	r3, #0
 8013d12:	75fb      	strb	r3, [r7, #23]
    break;
 8013d14:	e00b      	b.n	8013d2e <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8013d16:	2303      	movs	r3, #3
 8013d18:	75fb      	strb	r3, [r7, #23]
    break;
 8013d1a:	e008      	b.n	8013d2e <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8013d1c:	2301      	movs	r3, #1
 8013d1e:	75fb      	strb	r3, [r7, #23]
    break;
 8013d20:	e005      	b.n	8013d2e <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8013d22:	2303      	movs	r3, #3
 8013d24:	75fb      	strb	r3, [r7, #23]
    break;
 8013d26:	e002      	b.n	8013d2e <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8013d28:	2303      	movs	r3, #3
 8013d2a:	75fb      	strb	r3, [r7, #23]
    break;
 8013d2c:	bf00      	nop
  }
  return usb_status;
 8013d2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8013d30:	4618      	mov	r0, r3
 8013d32:	3718      	adds	r7, #24
 8013d34:	46bd      	mov	sp, r7
 8013d36:	bd80      	pop	{r7, pc}

08013d38 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8013d38:	b580      	push	{r7, lr}
 8013d3a:	b086      	sub	sp, #24
 8013d3c:	af00      	add	r7, sp, #0
 8013d3e:	60f8      	str	r0, [r7, #12]
 8013d40:	607a      	str	r2, [r7, #4]
 8013d42:	603b      	str	r3, [r7, #0]
 8013d44:	460b      	mov	r3, r1
 8013d46:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013d48:	2300      	movs	r3, #0
 8013d4a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013d4c:	2300      	movs	r3, #0
 8013d4e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8013d50:	68fb      	ldr	r3, [r7, #12]
 8013d52:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8013d56:	7af9      	ldrb	r1, [r7, #11]
 8013d58:	683b      	ldr	r3, [r7, #0]
 8013d5a:	687a      	ldr	r2, [r7, #4]
 8013d5c:	f7f5 fb1d 	bl	800939a <HAL_PCD_EP_Receive>
 8013d60:	4603      	mov	r3, r0
 8013d62:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8013d64:	7dbb      	ldrb	r3, [r7, #22]
 8013d66:	2b03      	cmp	r3, #3
 8013d68:	d816      	bhi.n	8013d98 <USBD_LL_PrepareReceive+0x60>
 8013d6a:	a201      	add	r2, pc, #4	@ (adr r2, 8013d70 <USBD_LL_PrepareReceive+0x38>)
 8013d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013d70:	08013d81 	.word	0x08013d81
 8013d74:	08013d87 	.word	0x08013d87
 8013d78:	08013d8d 	.word	0x08013d8d
 8013d7c:	08013d93 	.word	0x08013d93
    case HAL_OK :
      usb_status = USBD_OK;
 8013d80:	2300      	movs	r3, #0
 8013d82:	75fb      	strb	r3, [r7, #23]
    break;
 8013d84:	e00b      	b.n	8013d9e <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8013d86:	2303      	movs	r3, #3
 8013d88:	75fb      	strb	r3, [r7, #23]
    break;
 8013d8a:	e008      	b.n	8013d9e <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8013d8c:	2301      	movs	r3, #1
 8013d8e:	75fb      	strb	r3, [r7, #23]
    break;
 8013d90:	e005      	b.n	8013d9e <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8013d92:	2303      	movs	r3, #3
 8013d94:	75fb      	strb	r3, [r7, #23]
    break;
 8013d96:	e002      	b.n	8013d9e <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8013d98:	2303      	movs	r3, #3
 8013d9a:	75fb      	strb	r3, [r7, #23]
    break;
 8013d9c:	bf00      	nop
  }
  return usb_status;
 8013d9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8013da0:	4618      	mov	r0, r3
 8013da2:	3718      	adds	r7, #24
 8013da4:	46bd      	mov	sp, r7
 8013da6:	bd80      	pop	{r7, pc}

08013da8 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013da8:	b580      	push	{r7, lr}
 8013daa:	b082      	sub	sp, #8
 8013dac:	af00      	add	r7, sp, #0
 8013dae:	6078      	str	r0, [r7, #4]
 8013db0:	460b      	mov	r3, r1
 8013db2:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8013db4:	687b      	ldr	r3, [r7, #4]
 8013db6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8013dba:	78fa      	ldrb	r2, [r7, #3]
 8013dbc:	4611      	mov	r1, r2
 8013dbe:	4618      	mov	r0, r3
 8013dc0:	f7f5 fb1d 	bl	80093fe <HAL_PCD_EP_GetRxCount>
 8013dc4:	4603      	mov	r3, r0
}
 8013dc6:	4618      	mov	r0, r3
 8013dc8:	3708      	adds	r7, #8
 8013dca:	46bd      	mov	sp, r7
 8013dcc:	bd80      	pop	{r7, pc}
	...

08013dd0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8013dd0:	b580      	push	{r7, lr}
 8013dd2:	b082      	sub	sp, #8
 8013dd4:	af00      	add	r7, sp, #0
 8013dd6:	6078      	str	r0, [r7, #4]
 8013dd8:	460b      	mov	r3, r1
 8013dda:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8013ddc:	78fb      	ldrb	r3, [r7, #3]
 8013dde:	2b00      	cmp	r3, #0
 8013de0:	d002      	beq.n	8013de8 <HAL_PCDEx_LPM_Callback+0x18>
 8013de2:	2b01      	cmp	r3, #1
 8013de4:	d01f      	beq.n	8013e26 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8013de6:	e03b      	b.n	8013e60 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8013de8:	687b      	ldr	r3, [r7, #4]
 8013dea:	6a1b      	ldr	r3, [r3, #32]
 8013dec:	2b00      	cmp	r3, #0
 8013dee:	d007      	beq.n	8013e00 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8013df0:	f000 f854 	bl	8013e9c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8013df4:	4b1c      	ldr	r3, [pc, #112]	@ (8013e68 <HAL_PCDEx_LPM_Callback+0x98>)
 8013df6:	691b      	ldr	r3, [r3, #16]
 8013df8:	4a1b      	ldr	r2, [pc, #108]	@ (8013e68 <HAL_PCDEx_LPM_Callback+0x98>)
 8013dfa:	f023 0306 	bic.w	r3, r3, #6
 8013dfe:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8013e00:	687b      	ldr	r3, [r7, #4]
 8013e02:	681b      	ldr	r3, [r3, #0]
 8013e04:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8013e08:	681b      	ldr	r3, [r3, #0]
 8013e0a:	687a      	ldr	r2, [r7, #4]
 8013e0c:	6812      	ldr	r2, [r2, #0]
 8013e0e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8013e12:	f023 0301 	bic.w	r3, r3, #1
 8013e16:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8013e18:	687b      	ldr	r3, [r7, #4]
 8013e1a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8013e1e:	4618      	mov	r0, r3
 8013e20:	f7fb fb91 	bl	800f546 <USBD_LL_Resume>
    break;
 8013e24:	e01c      	b.n	8013e60 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8013e26:	687b      	ldr	r3, [r7, #4]
 8013e28:	681b      	ldr	r3, [r3, #0]
 8013e2a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8013e2e:	681b      	ldr	r3, [r3, #0]
 8013e30:	687a      	ldr	r2, [r7, #4]
 8013e32:	6812      	ldr	r2, [r2, #0]
 8013e34:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8013e38:	f043 0301 	orr.w	r3, r3, #1
 8013e3c:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8013e3e:	687b      	ldr	r3, [r7, #4]
 8013e40:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8013e44:	4618      	mov	r0, r3
 8013e46:	f7fb fb62 	bl	800f50e <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8013e4a:	687b      	ldr	r3, [r7, #4]
 8013e4c:	6a1b      	ldr	r3, [r3, #32]
 8013e4e:	2b00      	cmp	r3, #0
 8013e50:	d005      	beq.n	8013e5e <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8013e52:	4b05      	ldr	r3, [pc, #20]	@ (8013e68 <HAL_PCDEx_LPM_Callback+0x98>)
 8013e54:	691b      	ldr	r3, [r3, #16]
 8013e56:	4a04      	ldr	r2, [pc, #16]	@ (8013e68 <HAL_PCDEx_LPM_Callback+0x98>)
 8013e58:	f043 0306 	orr.w	r3, r3, #6
 8013e5c:	6113      	str	r3, [r2, #16]
    break;
 8013e5e:	bf00      	nop
}
 8013e60:	bf00      	nop
 8013e62:	3708      	adds	r7, #8
 8013e64:	46bd      	mov	sp, r7
 8013e66:	bd80      	pop	{r7, pc}
 8013e68:	e000ed00 	.word	0xe000ed00

08013e6c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8013e6c:	b480      	push	{r7}
 8013e6e:	b083      	sub	sp, #12
 8013e70:	af00      	add	r7, sp, #0
 8013e72:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8013e74:	4b03      	ldr	r3, [pc, #12]	@ (8013e84 <USBD_static_malloc+0x18>)
}
 8013e76:	4618      	mov	r0, r3
 8013e78:	370c      	adds	r7, #12
 8013e7a:	46bd      	mov	sp, r7
 8013e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e80:	4770      	bx	lr
 8013e82:	bf00      	nop
 8013e84:	20008c44 	.word	0x20008c44

08013e88 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8013e88:	b480      	push	{r7}
 8013e8a:	b083      	sub	sp, #12
 8013e8c:	af00      	add	r7, sp, #0
 8013e8e:	6078      	str	r0, [r7, #4]

}
 8013e90:	bf00      	nop
 8013e92:	370c      	adds	r7, #12
 8013e94:	46bd      	mov	sp, r7
 8013e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e9a:	4770      	bx	lr

08013e9c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8013e9c:	b580      	push	{r7, lr}
 8013e9e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8013ea0:	f7ef fac0 	bl	8003424 <SystemClock_Config>
}
 8013ea4:	bf00      	nop
 8013ea6:	bd80      	pop	{r7, pc}

08013ea8 <expf>:
 8013ea8:	b508      	push	{r3, lr}
 8013eaa:	ed2d 8b02 	vpush	{d8}
 8013eae:	eef0 8a40 	vmov.f32	s17, s0
 8013eb2:	f000 f839 	bl	8013f28 <__ieee754_expf>
 8013eb6:	eeb0 8a40 	vmov.f32	s16, s0
 8013eba:	eeb0 0a68 	vmov.f32	s0, s17
 8013ebe:	f000 f829 	bl	8013f14 <finitef>
 8013ec2:	b160      	cbz	r0, 8013ede <expf+0x36>
 8013ec4:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 8013f04 <expf+0x5c>
 8013ec8:	eef4 8ae7 	vcmpe.f32	s17, s15
 8013ecc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ed0:	dd0a      	ble.n	8013ee8 <expf+0x40>
 8013ed2:	f000 ff5d 	bl	8014d90 <__errno>
 8013ed6:	ed9f 8a0c 	vldr	s16, [pc, #48]	@ 8013f08 <expf+0x60>
 8013eda:	2322      	movs	r3, #34	@ 0x22
 8013edc:	6003      	str	r3, [r0, #0]
 8013ede:	eeb0 0a48 	vmov.f32	s0, s16
 8013ee2:	ecbd 8b02 	vpop	{d8}
 8013ee6:	bd08      	pop	{r3, pc}
 8013ee8:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8013f0c <expf+0x64>
 8013eec:	eef4 8ae7 	vcmpe.f32	s17, s15
 8013ef0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ef4:	d5f3      	bpl.n	8013ede <expf+0x36>
 8013ef6:	f000 ff4b 	bl	8014d90 <__errno>
 8013efa:	2322      	movs	r3, #34	@ 0x22
 8013efc:	ed9f 8a04 	vldr	s16, [pc, #16]	@ 8013f10 <expf+0x68>
 8013f00:	6003      	str	r3, [r0, #0]
 8013f02:	e7ec      	b.n	8013ede <expf+0x36>
 8013f04:	42b17217 	.word	0x42b17217
 8013f08:	7f800000 	.word	0x7f800000
 8013f0c:	c2cff1b5 	.word	0xc2cff1b5
 8013f10:	00000000 	.word	0x00000000

08013f14 <finitef>:
 8013f14:	ee10 3a10 	vmov	r3, s0
 8013f18:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 8013f1c:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 8013f20:	bfac      	ite	ge
 8013f22:	2000      	movge	r0, #0
 8013f24:	2001      	movlt	r0, #1
 8013f26:	4770      	bx	lr

08013f28 <__ieee754_expf>:
 8013f28:	ee10 2a10 	vmov	r2, s0
 8013f2c:	f022 4300 	bic.w	r3, r2, #2147483648	@ 0x80000000
 8013f30:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8013f34:	d902      	bls.n	8013f3c <__ieee754_expf+0x14>
 8013f36:	ee30 0a00 	vadd.f32	s0, s0, s0
 8013f3a:	4770      	bx	lr
 8013f3c:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 8013f40:	d106      	bne.n	8013f50 <__ieee754_expf+0x28>
 8013f42:	eddf 7a4e 	vldr	s15, [pc, #312]	@ 801407c <__ieee754_expf+0x154>
 8013f46:	2900      	cmp	r1, #0
 8013f48:	bf18      	it	ne
 8013f4a:	eeb0 0a67 	vmovne.f32	s0, s15
 8013f4e:	4770      	bx	lr
 8013f50:	484b      	ldr	r0, [pc, #300]	@ (8014080 <__ieee754_expf+0x158>)
 8013f52:	4282      	cmp	r2, r0
 8013f54:	dd02      	ble.n	8013f5c <__ieee754_expf+0x34>
 8013f56:	2000      	movs	r0, #0
 8013f58:	f000 b8d4 	b.w	8014104 <__math_oflowf>
 8013f5c:	2a00      	cmp	r2, #0
 8013f5e:	da05      	bge.n	8013f6c <__ieee754_expf+0x44>
 8013f60:	4a48      	ldr	r2, [pc, #288]	@ (8014084 <__ieee754_expf+0x15c>)
 8013f62:	4293      	cmp	r3, r2
 8013f64:	d902      	bls.n	8013f6c <__ieee754_expf+0x44>
 8013f66:	2000      	movs	r0, #0
 8013f68:	f000 b8c6 	b.w	80140f8 <__math_uflowf>
 8013f6c:	4a46      	ldr	r2, [pc, #280]	@ (8014088 <__ieee754_expf+0x160>)
 8013f6e:	4293      	cmp	r3, r2
 8013f70:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8013f74:	d952      	bls.n	801401c <__ieee754_expf+0xf4>
 8013f76:	4a45      	ldr	r2, [pc, #276]	@ (801408c <__ieee754_expf+0x164>)
 8013f78:	4293      	cmp	r3, r2
 8013f7a:	ea4f 0281 	mov.w	r2, r1, lsl #2
 8013f7e:	d834      	bhi.n	8013fea <__ieee754_expf+0xc2>
 8013f80:	4b43      	ldr	r3, [pc, #268]	@ (8014090 <__ieee754_expf+0x168>)
 8013f82:	4413      	add	r3, r2
 8013f84:	ed93 7a00 	vldr	s14, [r3]
 8013f88:	4b42      	ldr	r3, [pc, #264]	@ (8014094 <__ieee754_expf+0x16c>)
 8013f8a:	4413      	add	r3, r2
 8013f8c:	ee30 7a47 	vsub.f32	s14, s0, s14
 8013f90:	f1c1 0201 	rsb	r2, r1, #1
 8013f94:	edd3 7a00 	vldr	s15, [r3]
 8013f98:	1a52      	subs	r2, r2, r1
 8013f9a:	ee37 0a67 	vsub.f32	s0, s14, s15
 8013f9e:	ee20 6a00 	vmul.f32	s12, s0, s0
 8013fa2:	ed9f 5a3d 	vldr	s10, [pc, #244]	@ 8014098 <__ieee754_expf+0x170>
 8013fa6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 801409c <__ieee754_expf+0x174>
 8013faa:	eee6 6a05 	vfma.f32	s13, s12, s10
 8013fae:	ed9f 5a3c 	vldr	s10, [pc, #240]	@ 80140a0 <__ieee754_expf+0x178>
 8013fb2:	eea6 5a86 	vfma.f32	s10, s13, s12
 8013fb6:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 80140a4 <__ieee754_expf+0x17c>
 8013fba:	eee5 6a06 	vfma.f32	s13, s10, s12
 8013fbe:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 80140a8 <__ieee754_expf+0x180>
 8013fc2:	eea6 5a86 	vfma.f32	s10, s13, s12
 8013fc6:	eef0 6a40 	vmov.f32	s13, s0
 8013fca:	eee5 6a46 	vfms.f32	s13, s10, s12
 8013fce:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8013fd2:	ee20 5a26 	vmul.f32	s10, s0, s13
 8013fd6:	bb92      	cbnz	r2, 801403e <__ieee754_expf+0x116>
 8013fd8:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8013fdc:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8013fe0:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8013fe4:	ee35 0ac0 	vsub.f32	s0, s11, s0
 8013fe8:	4770      	bx	lr
 8013fea:	4b30      	ldr	r3, [pc, #192]	@ (80140ac <__ieee754_expf+0x184>)
 8013fec:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 80140b0 <__ieee754_expf+0x188>
 8013ff0:	eddf 6a30 	vldr	s13, [pc, #192]	@ 80140b4 <__ieee754_expf+0x18c>
 8013ff4:	4413      	add	r3, r2
 8013ff6:	edd3 7a00 	vldr	s15, [r3]
 8013ffa:	eee0 7a07 	vfma.f32	s15, s0, s14
 8013ffe:	eeb0 7a40 	vmov.f32	s14, s0
 8014002:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014006:	ee17 2a90 	vmov	r2, s15
 801400a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801400e:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8014012:	eddf 6a29 	vldr	s13, [pc, #164]	@ 80140b8 <__ieee754_expf+0x190>
 8014016:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801401a:	e7be      	b.n	8013f9a <__ieee754_expf+0x72>
 801401c:	f1b3 5f50 	cmp.w	r3, #872415232	@ 0x34000000
 8014020:	d20b      	bcs.n	801403a <__ieee754_expf+0x112>
 8014022:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80140bc <__ieee754_expf+0x194>
 8014026:	ee70 6a26 	vadd.f32	s13, s0, s13
 801402a:	eef4 6ae5 	vcmpe.f32	s13, s11
 801402e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014032:	dd02      	ble.n	801403a <__ieee754_expf+0x112>
 8014034:	ee30 0a25 	vadd.f32	s0, s0, s11
 8014038:	4770      	bx	lr
 801403a:	2200      	movs	r2, #0
 801403c:	e7af      	b.n	8013f9e <__ieee754_expf+0x76>
 801403e:	ee36 6a66 	vsub.f32	s12, s12, s13
 8014042:	f112 0f7d 	cmn.w	r2, #125	@ 0x7d
 8014046:	eec5 6a06 	vdiv.f32	s13, s10, s12
 801404a:	bfb8      	it	lt
 801404c:	3264      	addlt	r2, #100	@ 0x64
 801404e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8014052:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014056:	ee75 7ae7 	vsub.f32	s15, s11, s15
 801405a:	ee17 3a90 	vmov	r3, s15
 801405e:	bfab      	itete	ge
 8014060:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 8014064:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8014068:	ee00 3a10 	vmovge	s0, r3
 801406c:	eddf 7a14 	vldrlt	s15, [pc, #80]	@ 80140c0 <__ieee754_expf+0x198>
 8014070:	bfbc      	itt	lt
 8014072:	ee00 3a10 	vmovlt	s0, r3
 8014076:	ee20 0a27 	vmullt.f32	s0, s0, s15
 801407a:	4770      	bx	lr
 801407c:	00000000 	.word	0x00000000
 8014080:	42b17217 	.word	0x42b17217
 8014084:	42cff1b5 	.word	0x42cff1b5
 8014088:	3eb17218 	.word	0x3eb17218
 801408c:	3f851591 	.word	0x3f851591
 8014090:	080174e8 	.word	0x080174e8
 8014094:	080174e0 	.word	0x080174e0
 8014098:	3331bb4c 	.word	0x3331bb4c
 801409c:	b5ddea0e 	.word	0xb5ddea0e
 80140a0:	388ab355 	.word	0x388ab355
 80140a4:	bb360b61 	.word	0xbb360b61
 80140a8:	3e2aaaab 	.word	0x3e2aaaab
 80140ac:	080174f0 	.word	0x080174f0
 80140b0:	3fb8aa3b 	.word	0x3fb8aa3b
 80140b4:	3f317180 	.word	0x3f317180
 80140b8:	3717f7d1 	.word	0x3717f7d1
 80140bc:	7149f2ca 	.word	0x7149f2ca
 80140c0:	0d800000 	.word	0x0d800000

080140c4 <with_errnof>:
 80140c4:	b510      	push	{r4, lr}
 80140c6:	ed2d 8b02 	vpush	{d8}
 80140ca:	eeb0 8a40 	vmov.f32	s16, s0
 80140ce:	4604      	mov	r4, r0
 80140d0:	f000 fe5e 	bl	8014d90 <__errno>
 80140d4:	eeb0 0a48 	vmov.f32	s0, s16
 80140d8:	ecbd 8b02 	vpop	{d8}
 80140dc:	6004      	str	r4, [r0, #0]
 80140de:	bd10      	pop	{r4, pc}

080140e0 <xflowf>:
 80140e0:	b130      	cbz	r0, 80140f0 <xflowf+0x10>
 80140e2:	eef1 7a40 	vneg.f32	s15, s0
 80140e6:	ee27 0a80 	vmul.f32	s0, s15, s0
 80140ea:	2022      	movs	r0, #34	@ 0x22
 80140ec:	f7ff bfea 	b.w	80140c4 <with_errnof>
 80140f0:	eef0 7a40 	vmov.f32	s15, s0
 80140f4:	e7f7      	b.n	80140e6 <xflowf+0x6>
	...

080140f8 <__math_uflowf>:
 80140f8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8014100 <__math_uflowf+0x8>
 80140fc:	f7ff bff0 	b.w	80140e0 <xflowf>
 8014100:	10000000 	.word	0x10000000

08014104 <__math_oflowf>:
 8014104:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 801410c <__math_oflowf+0x8>
 8014108:	f7ff bfea 	b.w	80140e0 <xflowf>
 801410c:	70000000 	.word	0x70000000

08014110 <__cvt>:
 8014110:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014114:	ec57 6b10 	vmov	r6, r7, d0
 8014118:	2f00      	cmp	r7, #0
 801411a:	460c      	mov	r4, r1
 801411c:	4619      	mov	r1, r3
 801411e:	463b      	mov	r3, r7
 8014120:	bfbb      	ittet	lt
 8014122:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8014126:	461f      	movlt	r7, r3
 8014128:	2300      	movge	r3, #0
 801412a:	232d      	movlt	r3, #45	@ 0x2d
 801412c:	700b      	strb	r3, [r1, #0]
 801412e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014130:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8014134:	4691      	mov	r9, r2
 8014136:	f023 0820 	bic.w	r8, r3, #32
 801413a:	bfbc      	itt	lt
 801413c:	4632      	movlt	r2, r6
 801413e:	4616      	movlt	r6, r2
 8014140:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8014144:	d005      	beq.n	8014152 <__cvt+0x42>
 8014146:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 801414a:	d100      	bne.n	801414e <__cvt+0x3e>
 801414c:	3401      	adds	r4, #1
 801414e:	2102      	movs	r1, #2
 8014150:	e000      	b.n	8014154 <__cvt+0x44>
 8014152:	2103      	movs	r1, #3
 8014154:	ab03      	add	r3, sp, #12
 8014156:	9301      	str	r3, [sp, #4]
 8014158:	ab02      	add	r3, sp, #8
 801415a:	9300      	str	r3, [sp, #0]
 801415c:	ec47 6b10 	vmov	d0, r6, r7
 8014160:	4653      	mov	r3, sl
 8014162:	4622      	mov	r2, r4
 8014164:	f000 fed8 	bl	8014f18 <_dtoa_r>
 8014168:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 801416c:	4605      	mov	r5, r0
 801416e:	d119      	bne.n	80141a4 <__cvt+0x94>
 8014170:	f019 0f01 	tst.w	r9, #1
 8014174:	d00e      	beq.n	8014194 <__cvt+0x84>
 8014176:	eb00 0904 	add.w	r9, r0, r4
 801417a:	2200      	movs	r2, #0
 801417c:	2300      	movs	r3, #0
 801417e:	4630      	mov	r0, r6
 8014180:	4639      	mov	r1, r7
 8014182:	f7ec fcc9 	bl	8000b18 <__aeabi_dcmpeq>
 8014186:	b108      	cbz	r0, 801418c <__cvt+0x7c>
 8014188:	f8cd 900c 	str.w	r9, [sp, #12]
 801418c:	2230      	movs	r2, #48	@ 0x30
 801418e:	9b03      	ldr	r3, [sp, #12]
 8014190:	454b      	cmp	r3, r9
 8014192:	d31e      	bcc.n	80141d2 <__cvt+0xc2>
 8014194:	9b03      	ldr	r3, [sp, #12]
 8014196:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8014198:	1b5b      	subs	r3, r3, r5
 801419a:	4628      	mov	r0, r5
 801419c:	6013      	str	r3, [r2, #0]
 801419e:	b004      	add	sp, #16
 80141a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80141a4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80141a8:	eb00 0904 	add.w	r9, r0, r4
 80141ac:	d1e5      	bne.n	801417a <__cvt+0x6a>
 80141ae:	7803      	ldrb	r3, [r0, #0]
 80141b0:	2b30      	cmp	r3, #48	@ 0x30
 80141b2:	d10a      	bne.n	80141ca <__cvt+0xba>
 80141b4:	2200      	movs	r2, #0
 80141b6:	2300      	movs	r3, #0
 80141b8:	4630      	mov	r0, r6
 80141ba:	4639      	mov	r1, r7
 80141bc:	f7ec fcac 	bl	8000b18 <__aeabi_dcmpeq>
 80141c0:	b918      	cbnz	r0, 80141ca <__cvt+0xba>
 80141c2:	f1c4 0401 	rsb	r4, r4, #1
 80141c6:	f8ca 4000 	str.w	r4, [sl]
 80141ca:	f8da 3000 	ldr.w	r3, [sl]
 80141ce:	4499      	add	r9, r3
 80141d0:	e7d3      	b.n	801417a <__cvt+0x6a>
 80141d2:	1c59      	adds	r1, r3, #1
 80141d4:	9103      	str	r1, [sp, #12]
 80141d6:	701a      	strb	r2, [r3, #0]
 80141d8:	e7d9      	b.n	801418e <__cvt+0x7e>

080141da <__exponent>:
 80141da:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80141dc:	2900      	cmp	r1, #0
 80141de:	bfba      	itte	lt
 80141e0:	4249      	neglt	r1, r1
 80141e2:	232d      	movlt	r3, #45	@ 0x2d
 80141e4:	232b      	movge	r3, #43	@ 0x2b
 80141e6:	2909      	cmp	r1, #9
 80141e8:	7002      	strb	r2, [r0, #0]
 80141ea:	7043      	strb	r3, [r0, #1]
 80141ec:	dd29      	ble.n	8014242 <__exponent+0x68>
 80141ee:	f10d 0307 	add.w	r3, sp, #7
 80141f2:	461d      	mov	r5, r3
 80141f4:	270a      	movs	r7, #10
 80141f6:	461a      	mov	r2, r3
 80141f8:	fbb1 f6f7 	udiv	r6, r1, r7
 80141fc:	fb07 1416 	mls	r4, r7, r6, r1
 8014200:	3430      	adds	r4, #48	@ 0x30
 8014202:	f802 4c01 	strb.w	r4, [r2, #-1]
 8014206:	460c      	mov	r4, r1
 8014208:	2c63      	cmp	r4, #99	@ 0x63
 801420a:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 801420e:	4631      	mov	r1, r6
 8014210:	dcf1      	bgt.n	80141f6 <__exponent+0x1c>
 8014212:	3130      	adds	r1, #48	@ 0x30
 8014214:	1e94      	subs	r4, r2, #2
 8014216:	f803 1c01 	strb.w	r1, [r3, #-1]
 801421a:	1c41      	adds	r1, r0, #1
 801421c:	4623      	mov	r3, r4
 801421e:	42ab      	cmp	r3, r5
 8014220:	d30a      	bcc.n	8014238 <__exponent+0x5e>
 8014222:	f10d 0309 	add.w	r3, sp, #9
 8014226:	1a9b      	subs	r3, r3, r2
 8014228:	42ac      	cmp	r4, r5
 801422a:	bf88      	it	hi
 801422c:	2300      	movhi	r3, #0
 801422e:	3302      	adds	r3, #2
 8014230:	4403      	add	r3, r0
 8014232:	1a18      	subs	r0, r3, r0
 8014234:	b003      	add	sp, #12
 8014236:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014238:	f813 6b01 	ldrb.w	r6, [r3], #1
 801423c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8014240:	e7ed      	b.n	801421e <__exponent+0x44>
 8014242:	2330      	movs	r3, #48	@ 0x30
 8014244:	3130      	adds	r1, #48	@ 0x30
 8014246:	7083      	strb	r3, [r0, #2]
 8014248:	70c1      	strb	r1, [r0, #3]
 801424a:	1d03      	adds	r3, r0, #4
 801424c:	e7f1      	b.n	8014232 <__exponent+0x58>
	...

08014250 <_printf_float>:
 8014250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014254:	b08d      	sub	sp, #52	@ 0x34
 8014256:	460c      	mov	r4, r1
 8014258:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801425c:	4616      	mov	r6, r2
 801425e:	461f      	mov	r7, r3
 8014260:	4605      	mov	r5, r0
 8014262:	f000 fcf5 	bl	8014c50 <_localeconv_r>
 8014266:	6803      	ldr	r3, [r0, #0]
 8014268:	9304      	str	r3, [sp, #16]
 801426a:	4618      	mov	r0, r3
 801426c:	f7ec f828 	bl	80002c0 <strlen>
 8014270:	2300      	movs	r3, #0
 8014272:	930a      	str	r3, [sp, #40]	@ 0x28
 8014274:	f8d8 3000 	ldr.w	r3, [r8]
 8014278:	9005      	str	r0, [sp, #20]
 801427a:	3307      	adds	r3, #7
 801427c:	f023 0307 	bic.w	r3, r3, #7
 8014280:	f103 0208 	add.w	r2, r3, #8
 8014284:	f894 a018 	ldrb.w	sl, [r4, #24]
 8014288:	f8d4 b000 	ldr.w	fp, [r4]
 801428c:	f8c8 2000 	str.w	r2, [r8]
 8014290:	e9d3 8900 	ldrd	r8, r9, [r3]
 8014294:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8014298:	9307      	str	r3, [sp, #28]
 801429a:	f8cd 8018 	str.w	r8, [sp, #24]
 801429e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80142a2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80142a6:	4b9c      	ldr	r3, [pc, #624]	@ (8014518 <_printf_float+0x2c8>)
 80142a8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80142ac:	f7ec fc66 	bl	8000b7c <__aeabi_dcmpun>
 80142b0:	bb70      	cbnz	r0, 8014310 <_printf_float+0xc0>
 80142b2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80142b6:	4b98      	ldr	r3, [pc, #608]	@ (8014518 <_printf_float+0x2c8>)
 80142b8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80142bc:	f7ec fc40 	bl	8000b40 <__aeabi_dcmple>
 80142c0:	bb30      	cbnz	r0, 8014310 <_printf_float+0xc0>
 80142c2:	2200      	movs	r2, #0
 80142c4:	2300      	movs	r3, #0
 80142c6:	4640      	mov	r0, r8
 80142c8:	4649      	mov	r1, r9
 80142ca:	f7ec fc2f 	bl	8000b2c <__aeabi_dcmplt>
 80142ce:	b110      	cbz	r0, 80142d6 <_printf_float+0x86>
 80142d0:	232d      	movs	r3, #45	@ 0x2d
 80142d2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80142d6:	4a91      	ldr	r2, [pc, #580]	@ (801451c <_printf_float+0x2cc>)
 80142d8:	4b91      	ldr	r3, [pc, #580]	@ (8014520 <_printf_float+0x2d0>)
 80142da:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80142de:	bf94      	ite	ls
 80142e0:	4690      	movls	r8, r2
 80142e2:	4698      	movhi	r8, r3
 80142e4:	2303      	movs	r3, #3
 80142e6:	6123      	str	r3, [r4, #16]
 80142e8:	f02b 0304 	bic.w	r3, fp, #4
 80142ec:	6023      	str	r3, [r4, #0]
 80142ee:	f04f 0900 	mov.w	r9, #0
 80142f2:	9700      	str	r7, [sp, #0]
 80142f4:	4633      	mov	r3, r6
 80142f6:	aa0b      	add	r2, sp, #44	@ 0x2c
 80142f8:	4621      	mov	r1, r4
 80142fa:	4628      	mov	r0, r5
 80142fc:	f000 f9d2 	bl	80146a4 <_printf_common>
 8014300:	3001      	adds	r0, #1
 8014302:	f040 808d 	bne.w	8014420 <_printf_float+0x1d0>
 8014306:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801430a:	b00d      	add	sp, #52	@ 0x34
 801430c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014310:	4642      	mov	r2, r8
 8014312:	464b      	mov	r3, r9
 8014314:	4640      	mov	r0, r8
 8014316:	4649      	mov	r1, r9
 8014318:	f7ec fc30 	bl	8000b7c <__aeabi_dcmpun>
 801431c:	b140      	cbz	r0, 8014330 <_printf_float+0xe0>
 801431e:	464b      	mov	r3, r9
 8014320:	2b00      	cmp	r3, #0
 8014322:	bfbc      	itt	lt
 8014324:	232d      	movlt	r3, #45	@ 0x2d
 8014326:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801432a:	4a7e      	ldr	r2, [pc, #504]	@ (8014524 <_printf_float+0x2d4>)
 801432c:	4b7e      	ldr	r3, [pc, #504]	@ (8014528 <_printf_float+0x2d8>)
 801432e:	e7d4      	b.n	80142da <_printf_float+0x8a>
 8014330:	6863      	ldr	r3, [r4, #4]
 8014332:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8014336:	9206      	str	r2, [sp, #24]
 8014338:	1c5a      	adds	r2, r3, #1
 801433a:	d13b      	bne.n	80143b4 <_printf_float+0x164>
 801433c:	2306      	movs	r3, #6
 801433e:	6063      	str	r3, [r4, #4]
 8014340:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8014344:	2300      	movs	r3, #0
 8014346:	6022      	str	r2, [r4, #0]
 8014348:	9303      	str	r3, [sp, #12]
 801434a:	ab0a      	add	r3, sp, #40	@ 0x28
 801434c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8014350:	ab09      	add	r3, sp, #36	@ 0x24
 8014352:	9300      	str	r3, [sp, #0]
 8014354:	6861      	ldr	r1, [r4, #4]
 8014356:	ec49 8b10 	vmov	d0, r8, r9
 801435a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 801435e:	4628      	mov	r0, r5
 8014360:	f7ff fed6 	bl	8014110 <__cvt>
 8014364:	9b06      	ldr	r3, [sp, #24]
 8014366:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8014368:	2b47      	cmp	r3, #71	@ 0x47
 801436a:	4680      	mov	r8, r0
 801436c:	d129      	bne.n	80143c2 <_printf_float+0x172>
 801436e:	1cc8      	adds	r0, r1, #3
 8014370:	db02      	blt.n	8014378 <_printf_float+0x128>
 8014372:	6863      	ldr	r3, [r4, #4]
 8014374:	4299      	cmp	r1, r3
 8014376:	dd41      	ble.n	80143fc <_printf_float+0x1ac>
 8014378:	f1aa 0a02 	sub.w	sl, sl, #2
 801437c:	fa5f fa8a 	uxtb.w	sl, sl
 8014380:	3901      	subs	r1, #1
 8014382:	4652      	mov	r2, sl
 8014384:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8014388:	9109      	str	r1, [sp, #36]	@ 0x24
 801438a:	f7ff ff26 	bl	80141da <__exponent>
 801438e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8014390:	1813      	adds	r3, r2, r0
 8014392:	2a01      	cmp	r2, #1
 8014394:	4681      	mov	r9, r0
 8014396:	6123      	str	r3, [r4, #16]
 8014398:	dc02      	bgt.n	80143a0 <_printf_float+0x150>
 801439a:	6822      	ldr	r2, [r4, #0]
 801439c:	07d2      	lsls	r2, r2, #31
 801439e:	d501      	bpl.n	80143a4 <_printf_float+0x154>
 80143a0:	3301      	adds	r3, #1
 80143a2:	6123      	str	r3, [r4, #16]
 80143a4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80143a8:	2b00      	cmp	r3, #0
 80143aa:	d0a2      	beq.n	80142f2 <_printf_float+0xa2>
 80143ac:	232d      	movs	r3, #45	@ 0x2d
 80143ae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80143b2:	e79e      	b.n	80142f2 <_printf_float+0xa2>
 80143b4:	9a06      	ldr	r2, [sp, #24]
 80143b6:	2a47      	cmp	r2, #71	@ 0x47
 80143b8:	d1c2      	bne.n	8014340 <_printf_float+0xf0>
 80143ba:	2b00      	cmp	r3, #0
 80143bc:	d1c0      	bne.n	8014340 <_printf_float+0xf0>
 80143be:	2301      	movs	r3, #1
 80143c0:	e7bd      	b.n	801433e <_printf_float+0xee>
 80143c2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80143c6:	d9db      	bls.n	8014380 <_printf_float+0x130>
 80143c8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80143cc:	d118      	bne.n	8014400 <_printf_float+0x1b0>
 80143ce:	2900      	cmp	r1, #0
 80143d0:	6863      	ldr	r3, [r4, #4]
 80143d2:	dd0b      	ble.n	80143ec <_printf_float+0x19c>
 80143d4:	6121      	str	r1, [r4, #16]
 80143d6:	b913      	cbnz	r3, 80143de <_printf_float+0x18e>
 80143d8:	6822      	ldr	r2, [r4, #0]
 80143da:	07d0      	lsls	r0, r2, #31
 80143dc:	d502      	bpl.n	80143e4 <_printf_float+0x194>
 80143de:	3301      	adds	r3, #1
 80143e0:	440b      	add	r3, r1
 80143e2:	6123      	str	r3, [r4, #16]
 80143e4:	65a1      	str	r1, [r4, #88]	@ 0x58
 80143e6:	f04f 0900 	mov.w	r9, #0
 80143ea:	e7db      	b.n	80143a4 <_printf_float+0x154>
 80143ec:	b913      	cbnz	r3, 80143f4 <_printf_float+0x1a4>
 80143ee:	6822      	ldr	r2, [r4, #0]
 80143f0:	07d2      	lsls	r2, r2, #31
 80143f2:	d501      	bpl.n	80143f8 <_printf_float+0x1a8>
 80143f4:	3302      	adds	r3, #2
 80143f6:	e7f4      	b.n	80143e2 <_printf_float+0x192>
 80143f8:	2301      	movs	r3, #1
 80143fa:	e7f2      	b.n	80143e2 <_printf_float+0x192>
 80143fc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8014400:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014402:	4299      	cmp	r1, r3
 8014404:	db05      	blt.n	8014412 <_printf_float+0x1c2>
 8014406:	6823      	ldr	r3, [r4, #0]
 8014408:	6121      	str	r1, [r4, #16]
 801440a:	07d8      	lsls	r0, r3, #31
 801440c:	d5ea      	bpl.n	80143e4 <_printf_float+0x194>
 801440e:	1c4b      	adds	r3, r1, #1
 8014410:	e7e7      	b.n	80143e2 <_printf_float+0x192>
 8014412:	2900      	cmp	r1, #0
 8014414:	bfd4      	ite	le
 8014416:	f1c1 0202 	rsble	r2, r1, #2
 801441a:	2201      	movgt	r2, #1
 801441c:	4413      	add	r3, r2
 801441e:	e7e0      	b.n	80143e2 <_printf_float+0x192>
 8014420:	6823      	ldr	r3, [r4, #0]
 8014422:	055a      	lsls	r2, r3, #21
 8014424:	d407      	bmi.n	8014436 <_printf_float+0x1e6>
 8014426:	6923      	ldr	r3, [r4, #16]
 8014428:	4642      	mov	r2, r8
 801442a:	4631      	mov	r1, r6
 801442c:	4628      	mov	r0, r5
 801442e:	47b8      	blx	r7
 8014430:	3001      	adds	r0, #1
 8014432:	d12b      	bne.n	801448c <_printf_float+0x23c>
 8014434:	e767      	b.n	8014306 <_printf_float+0xb6>
 8014436:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801443a:	f240 80dd 	bls.w	80145f8 <_printf_float+0x3a8>
 801443e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8014442:	2200      	movs	r2, #0
 8014444:	2300      	movs	r3, #0
 8014446:	f7ec fb67 	bl	8000b18 <__aeabi_dcmpeq>
 801444a:	2800      	cmp	r0, #0
 801444c:	d033      	beq.n	80144b6 <_printf_float+0x266>
 801444e:	4a37      	ldr	r2, [pc, #220]	@ (801452c <_printf_float+0x2dc>)
 8014450:	2301      	movs	r3, #1
 8014452:	4631      	mov	r1, r6
 8014454:	4628      	mov	r0, r5
 8014456:	47b8      	blx	r7
 8014458:	3001      	adds	r0, #1
 801445a:	f43f af54 	beq.w	8014306 <_printf_float+0xb6>
 801445e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8014462:	4543      	cmp	r3, r8
 8014464:	db02      	blt.n	801446c <_printf_float+0x21c>
 8014466:	6823      	ldr	r3, [r4, #0]
 8014468:	07d8      	lsls	r0, r3, #31
 801446a:	d50f      	bpl.n	801448c <_printf_float+0x23c>
 801446c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014470:	4631      	mov	r1, r6
 8014472:	4628      	mov	r0, r5
 8014474:	47b8      	blx	r7
 8014476:	3001      	adds	r0, #1
 8014478:	f43f af45 	beq.w	8014306 <_printf_float+0xb6>
 801447c:	f04f 0900 	mov.w	r9, #0
 8014480:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8014484:	f104 0a1a 	add.w	sl, r4, #26
 8014488:	45c8      	cmp	r8, r9
 801448a:	dc09      	bgt.n	80144a0 <_printf_float+0x250>
 801448c:	6823      	ldr	r3, [r4, #0]
 801448e:	079b      	lsls	r3, r3, #30
 8014490:	f100 8103 	bmi.w	801469a <_printf_float+0x44a>
 8014494:	68e0      	ldr	r0, [r4, #12]
 8014496:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014498:	4298      	cmp	r0, r3
 801449a:	bfb8      	it	lt
 801449c:	4618      	movlt	r0, r3
 801449e:	e734      	b.n	801430a <_printf_float+0xba>
 80144a0:	2301      	movs	r3, #1
 80144a2:	4652      	mov	r2, sl
 80144a4:	4631      	mov	r1, r6
 80144a6:	4628      	mov	r0, r5
 80144a8:	47b8      	blx	r7
 80144aa:	3001      	adds	r0, #1
 80144ac:	f43f af2b 	beq.w	8014306 <_printf_float+0xb6>
 80144b0:	f109 0901 	add.w	r9, r9, #1
 80144b4:	e7e8      	b.n	8014488 <_printf_float+0x238>
 80144b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80144b8:	2b00      	cmp	r3, #0
 80144ba:	dc39      	bgt.n	8014530 <_printf_float+0x2e0>
 80144bc:	4a1b      	ldr	r2, [pc, #108]	@ (801452c <_printf_float+0x2dc>)
 80144be:	2301      	movs	r3, #1
 80144c0:	4631      	mov	r1, r6
 80144c2:	4628      	mov	r0, r5
 80144c4:	47b8      	blx	r7
 80144c6:	3001      	adds	r0, #1
 80144c8:	f43f af1d 	beq.w	8014306 <_printf_float+0xb6>
 80144cc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80144d0:	ea59 0303 	orrs.w	r3, r9, r3
 80144d4:	d102      	bne.n	80144dc <_printf_float+0x28c>
 80144d6:	6823      	ldr	r3, [r4, #0]
 80144d8:	07d9      	lsls	r1, r3, #31
 80144da:	d5d7      	bpl.n	801448c <_printf_float+0x23c>
 80144dc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80144e0:	4631      	mov	r1, r6
 80144e2:	4628      	mov	r0, r5
 80144e4:	47b8      	blx	r7
 80144e6:	3001      	adds	r0, #1
 80144e8:	f43f af0d 	beq.w	8014306 <_printf_float+0xb6>
 80144ec:	f04f 0a00 	mov.w	sl, #0
 80144f0:	f104 0b1a 	add.w	fp, r4, #26
 80144f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80144f6:	425b      	negs	r3, r3
 80144f8:	4553      	cmp	r3, sl
 80144fa:	dc01      	bgt.n	8014500 <_printf_float+0x2b0>
 80144fc:	464b      	mov	r3, r9
 80144fe:	e793      	b.n	8014428 <_printf_float+0x1d8>
 8014500:	2301      	movs	r3, #1
 8014502:	465a      	mov	r2, fp
 8014504:	4631      	mov	r1, r6
 8014506:	4628      	mov	r0, r5
 8014508:	47b8      	blx	r7
 801450a:	3001      	adds	r0, #1
 801450c:	f43f aefb 	beq.w	8014306 <_printf_float+0xb6>
 8014510:	f10a 0a01 	add.w	sl, sl, #1
 8014514:	e7ee      	b.n	80144f4 <_printf_float+0x2a4>
 8014516:	bf00      	nop
 8014518:	7fefffff 	.word	0x7fefffff
 801451c:	080174f8 	.word	0x080174f8
 8014520:	080174fc 	.word	0x080174fc
 8014524:	08017500 	.word	0x08017500
 8014528:	08017504 	.word	0x08017504
 801452c:	08017508 	.word	0x08017508
 8014530:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8014532:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8014536:	4553      	cmp	r3, sl
 8014538:	bfa8      	it	ge
 801453a:	4653      	movge	r3, sl
 801453c:	2b00      	cmp	r3, #0
 801453e:	4699      	mov	r9, r3
 8014540:	dc36      	bgt.n	80145b0 <_printf_float+0x360>
 8014542:	f04f 0b00 	mov.w	fp, #0
 8014546:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801454a:	f104 021a 	add.w	r2, r4, #26
 801454e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8014550:	9306      	str	r3, [sp, #24]
 8014552:	eba3 0309 	sub.w	r3, r3, r9
 8014556:	455b      	cmp	r3, fp
 8014558:	dc31      	bgt.n	80145be <_printf_float+0x36e>
 801455a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801455c:	459a      	cmp	sl, r3
 801455e:	dc3a      	bgt.n	80145d6 <_printf_float+0x386>
 8014560:	6823      	ldr	r3, [r4, #0]
 8014562:	07da      	lsls	r2, r3, #31
 8014564:	d437      	bmi.n	80145d6 <_printf_float+0x386>
 8014566:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014568:	ebaa 0903 	sub.w	r9, sl, r3
 801456c:	9b06      	ldr	r3, [sp, #24]
 801456e:	ebaa 0303 	sub.w	r3, sl, r3
 8014572:	4599      	cmp	r9, r3
 8014574:	bfa8      	it	ge
 8014576:	4699      	movge	r9, r3
 8014578:	f1b9 0f00 	cmp.w	r9, #0
 801457c:	dc33      	bgt.n	80145e6 <_printf_float+0x396>
 801457e:	f04f 0800 	mov.w	r8, #0
 8014582:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8014586:	f104 0b1a 	add.w	fp, r4, #26
 801458a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801458c:	ebaa 0303 	sub.w	r3, sl, r3
 8014590:	eba3 0309 	sub.w	r3, r3, r9
 8014594:	4543      	cmp	r3, r8
 8014596:	f77f af79 	ble.w	801448c <_printf_float+0x23c>
 801459a:	2301      	movs	r3, #1
 801459c:	465a      	mov	r2, fp
 801459e:	4631      	mov	r1, r6
 80145a0:	4628      	mov	r0, r5
 80145a2:	47b8      	blx	r7
 80145a4:	3001      	adds	r0, #1
 80145a6:	f43f aeae 	beq.w	8014306 <_printf_float+0xb6>
 80145aa:	f108 0801 	add.w	r8, r8, #1
 80145ae:	e7ec      	b.n	801458a <_printf_float+0x33a>
 80145b0:	4642      	mov	r2, r8
 80145b2:	4631      	mov	r1, r6
 80145b4:	4628      	mov	r0, r5
 80145b6:	47b8      	blx	r7
 80145b8:	3001      	adds	r0, #1
 80145ba:	d1c2      	bne.n	8014542 <_printf_float+0x2f2>
 80145bc:	e6a3      	b.n	8014306 <_printf_float+0xb6>
 80145be:	2301      	movs	r3, #1
 80145c0:	4631      	mov	r1, r6
 80145c2:	4628      	mov	r0, r5
 80145c4:	9206      	str	r2, [sp, #24]
 80145c6:	47b8      	blx	r7
 80145c8:	3001      	adds	r0, #1
 80145ca:	f43f ae9c 	beq.w	8014306 <_printf_float+0xb6>
 80145ce:	9a06      	ldr	r2, [sp, #24]
 80145d0:	f10b 0b01 	add.w	fp, fp, #1
 80145d4:	e7bb      	b.n	801454e <_printf_float+0x2fe>
 80145d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80145da:	4631      	mov	r1, r6
 80145dc:	4628      	mov	r0, r5
 80145de:	47b8      	blx	r7
 80145e0:	3001      	adds	r0, #1
 80145e2:	d1c0      	bne.n	8014566 <_printf_float+0x316>
 80145e4:	e68f      	b.n	8014306 <_printf_float+0xb6>
 80145e6:	9a06      	ldr	r2, [sp, #24]
 80145e8:	464b      	mov	r3, r9
 80145ea:	4442      	add	r2, r8
 80145ec:	4631      	mov	r1, r6
 80145ee:	4628      	mov	r0, r5
 80145f0:	47b8      	blx	r7
 80145f2:	3001      	adds	r0, #1
 80145f4:	d1c3      	bne.n	801457e <_printf_float+0x32e>
 80145f6:	e686      	b.n	8014306 <_printf_float+0xb6>
 80145f8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80145fc:	f1ba 0f01 	cmp.w	sl, #1
 8014600:	dc01      	bgt.n	8014606 <_printf_float+0x3b6>
 8014602:	07db      	lsls	r3, r3, #31
 8014604:	d536      	bpl.n	8014674 <_printf_float+0x424>
 8014606:	2301      	movs	r3, #1
 8014608:	4642      	mov	r2, r8
 801460a:	4631      	mov	r1, r6
 801460c:	4628      	mov	r0, r5
 801460e:	47b8      	blx	r7
 8014610:	3001      	adds	r0, #1
 8014612:	f43f ae78 	beq.w	8014306 <_printf_float+0xb6>
 8014616:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801461a:	4631      	mov	r1, r6
 801461c:	4628      	mov	r0, r5
 801461e:	47b8      	blx	r7
 8014620:	3001      	adds	r0, #1
 8014622:	f43f ae70 	beq.w	8014306 <_printf_float+0xb6>
 8014626:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801462a:	2200      	movs	r2, #0
 801462c:	2300      	movs	r3, #0
 801462e:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8014632:	f7ec fa71 	bl	8000b18 <__aeabi_dcmpeq>
 8014636:	b9c0      	cbnz	r0, 801466a <_printf_float+0x41a>
 8014638:	4653      	mov	r3, sl
 801463a:	f108 0201 	add.w	r2, r8, #1
 801463e:	4631      	mov	r1, r6
 8014640:	4628      	mov	r0, r5
 8014642:	47b8      	blx	r7
 8014644:	3001      	adds	r0, #1
 8014646:	d10c      	bne.n	8014662 <_printf_float+0x412>
 8014648:	e65d      	b.n	8014306 <_printf_float+0xb6>
 801464a:	2301      	movs	r3, #1
 801464c:	465a      	mov	r2, fp
 801464e:	4631      	mov	r1, r6
 8014650:	4628      	mov	r0, r5
 8014652:	47b8      	blx	r7
 8014654:	3001      	adds	r0, #1
 8014656:	f43f ae56 	beq.w	8014306 <_printf_float+0xb6>
 801465a:	f108 0801 	add.w	r8, r8, #1
 801465e:	45d0      	cmp	r8, sl
 8014660:	dbf3      	blt.n	801464a <_printf_float+0x3fa>
 8014662:	464b      	mov	r3, r9
 8014664:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8014668:	e6df      	b.n	801442a <_printf_float+0x1da>
 801466a:	f04f 0800 	mov.w	r8, #0
 801466e:	f104 0b1a 	add.w	fp, r4, #26
 8014672:	e7f4      	b.n	801465e <_printf_float+0x40e>
 8014674:	2301      	movs	r3, #1
 8014676:	4642      	mov	r2, r8
 8014678:	e7e1      	b.n	801463e <_printf_float+0x3ee>
 801467a:	2301      	movs	r3, #1
 801467c:	464a      	mov	r2, r9
 801467e:	4631      	mov	r1, r6
 8014680:	4628      	mov	r0, r5
 8014682:	47b8      	blx	r7
 8014684:	3001      	adds	r0, #1
 8014686:	f43f ae3e 	beq.w	8014306 <_printf_float+0xb6>
 801468a:	f108 0801 	add.w	r8, r8, #1
 801468e:	68e3      	ldr	r3, [r4, #12]
 8014690:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8014692:	1a5b      	subs	r3, r3, r1
 8014694:	4543      	cmp	r3, r8
 8014696:	dcf0      	bgt.n	801467a <_printf_float+0x42a>
 8014698:	e6fc      	b.n	8014494 <_printf_float+0x244>
 801469a:	f04f 0800 	mov.w	r8, #0
 801469e:	f104 0919 	add.w	r9, r4, #25
 80146a2:	e7f4      	b.n	801468e <_printf_float+0x43e>

080146a4 <_printf_common>:
 80146a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80146a8:	4616      	mov	r6, r2
 80146aa:	4698      	mov	r8, r3
 80146ac:	688a      	ldr	r2, [r1, #8]
 80146ae:	690b      	ldr	r3, [r1, #16]
 80146b0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80146b4:	4293      	cmp	r3, r2
 80146b6:	bfb8      	it	lt
 80146b8:	4613      	movlt	r3, r2
 80146ba:	6033      	str	r3, [r6, #0]
 80146bc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80146c0:	4607      	mov	r7, r0
 80146c2:	460c      	mov	r4, r1
 80146c4:	b10a      	cbz	r2, 80146ca <_printf_common+0x26>
 80146c6:	3301      	adds	r3, #1
 80146c8:	6033      	str	r3, [r6, #0]
 80146ca:	6823      	ldr	r3, [r4, #0]
 80146cc:	0699      	lsls	r1, r3, #26
 80146ce:	bf42      	ittt	mi
 80146d0:	6833      	ldrmi	r3, [r6, #0]
 80146d2:	3302      	addmi	r3, #2
 80146d4:	6033      	strmi	r3, [r6, #0]
 80146d6:	6825      	ldr	r5, [r4, #0]
 80146d8:	f015 0506 	ands.w	r5, r5, #6
 80146dc:	d106      	bne.n	80146ec <_printf_common+0x48>
 80146de:	f104 0a19 	add.w	sl, r4, #25
 80146e2:	68e3      	ldr	r3, [r4, #12]
 80146e4:	6832      	ldr	r2, [r6, #0]
 80146e6:	1a9b      	subs	r3, r3, r2
 80146e8:	42ab      	cmp	r3, r5
 80146ea:	dc26      	bgt.n	801473a <_printf_common+0x96>
 80146ec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80146f0:	6822      	ldr	r2, [r4, #0]
 80146f2:	3b00      	subs	r3, #0
 80146f4:	bf18      	it	ne
 80146f6:	2301      	movne	r3, #1
 80146f8:	0692      	lsls	r2, r2, #26
 80146fa:	d42b      	bmi.n	8014754 <_printf_common+0xb0>
 80146fc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8014700:	4641      	mov	r1, r8
 8014702:	4638      	mov	r0, r7
 8014704:	47c8      	blx	r9
 8014706:	3001      	adds	r0, #1
 8014708:	d01e      	beq.n	8014748 <_printf_common+0xa4>
 801470a:	6823      	ldr	r3, [r4, #0]
 801470c:	6922      	ldr	r2, [r4, #16]
 801470e:	f003 0306 	and.w	r3, r3, #6
 8014712:	2b04      	cmp	r3, #4
 8014714:	bf02      	ittt	eq
 8014716:	68e5      	ldreq	r5, [r4, #12]
 8014718:	6833      	ldreq	r3, [r6, #0]
 801471a:	1aed      	subeq	r5, r5, r3
 801471c:	68a3      	ldr	r3, [r4, #8]
 801471e:	bf0c      	ite	eq
 8014720:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014724:	2500      	movne	r5, #0
 8014726:	4293      	cmp	r3, r2
 8014728:	bfc4      	itt	gt
 801472a:	1a9b      	subgt	r3, r3, r2
 801472c:	18ed      	addgt	r5, r5, r3
 801472e:	2600      	movs	r6, #0
 8014730:	341a      	adds	r4, #26
 8014732:	42b5      	cmp	r5, r6
 8014734:	d11a      	bne.n	801476c <_printf_common+0xc8>
 8014736:	2000      	movs	r0, #0
 8014738:	e008      	b.n	801474c <_printf_common+0xa8>
 801473a:	2301      	movs	r3, #1
 801473c:	4652      	mov	r2, sl
 801473e:	4641      	mov	r1, r8
 8014740:	4638      	mov	r0, r7
 8014742:	47c8      	blx	r9
 8014744:	3001      	adds	r0, #1
 8014746:	d103      	bne.n	8014750 <_printf_common+0xac>
 8014748:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801474c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014750:	3501      	adds	r5, #1
 8014752:	e7c6      	b.n	80146e2 <_printf_common+0x3e>
 8014754:	18e1      	adds	r1, r4, r3
 8014756:	1c5a      	adds	r2, r3, #1
 8014758:	2030      	movs	r0, #48	@ 0x30
 801475a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801475e:	4422      	add	r2, r4
 8014760:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8014764:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8014768:	3302      	adds	r3, #2
 801476a:	e7c7      	b.n	80146fc <_printf_common+0x58>
 801476c:	2301      	movs	r3, #1
 801476e:	4622      	mov	r2, r4
 8014770:	4641      	mov	r1, r8
 8014772:	4638      	mov	r0, r7
 8014774:	47c8      	blx	r9
 8014776:	3001      	adds	r0, #1
 8014778:	d0e6      	beq.n	8014748 <_printf_common+0xa4>
 801477a:	3601      	adds	r6, #1
 801477c:	e7d9      	b.n	8014732 <_printf_common+0x8e>
	...

08014780 <_printf_i>:
 8014780:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014784:	7e0f      	ldrb	r7, [r1, #24]
 8014786:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8014788:	2f78      	cmp	r7, #120	@ 0x78
 801478a:	4691      	mov	r9, r2
 801478c:	4680      	mov	r8, r0
 801478e:	460c      	mov	r4, r1
 8014790:	469a      	mov	sl, r3
 8014792:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8014796:	d807      	bhi.n	80147a8 <_printf_i+0x28>
 8014798:	2f62      	cmp	r7, #98	@ 0x62
 801479a:	d80a      	bhi.n	80147b2 <_printf_i+0x32>
 801479c:	2f00      	cmp	r7, #0
 801479e:	f000 80d2 	beq.w	8014946 <_printf_i+0x1c6>
 80147a2:	2f58      	cmp	r7, #88	@ 0x58
 80147a4:	f000 80b9 	beq.w	801491a <_printf_i+0x19a>
 80147a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80147ac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80147b0:	e03a      	b.n	8014828 <_printf_i+0xa8>
 80147b2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80147b6:	2b15      	cmp	r3, #21
 80147b8:	d8f6      	bhi.n	80147a8 <_printf_i+0x28>
 80147ba:	a101      	add	r1, pc, #4	@ (adr r1, 80147c0 <_printf_i+0x40>)
 80147bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80147c0:	08014819 	.word	0x08014819
 80147c4:	0801482d 	.word	0x0801482d
 80147c8:	080147a9 	.word	0x080147a9
 80147cc:	080147a9 	.word	0x080147a9
 80147d0:	080147a9 	.word	0x080147a9
 80147d4:	080147a9 	.word	0x080147a9
 80147d8:	0801482d 	.word	0x0801482d
 80147dc:	080147a9 	.word	0x080147a9
 80147e0:	080147a9 	.word	0x080147a9
 80147e4:	080147a9 	.word	0x080147a9
 80147e8:	080147a9 	.word	0x080147a9
 80147ec:	0801492d 	.word	0x0801492d
 80147f0:	08014857 	.word	0x08014857
 80147f4:	080148e7 	.word	0x080148e7
 80147f8:	080147a9 	.word	0x080147a9
 80147fc:	080147a9 	.word	0x080147a9
 8014800:	0801494f 	.word	0x0801494f
 8014804:	080147a9 	.word	0x080147a9
 8014808:	08014857 	.word	0x08014857
 801480c:	080147a9 	.word	0x080147a9
 8014810:	080147a9 	.word	0x080147a9
 8014814:	080148ef 	.word	0x080148ef
 8014818:	6833      	ldr	r3, [r6, #0]
 801481a:	1d1a      	adds	r2, r3, #4
 801481c:	681b      	ldr	r3, [r3, #0]
 801481e:	6032      	str	r2, [r6, #0]
 8014820:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8014824:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8014828:	2301      	movs	r3, #1
 801482a:	e09d      	b.n	8014968 <_printf_i+0x1e8>
 801482c:	6833      	ldr	r3, [r6, #0]
 801482e:	6820      	ldr	r0, [r4, #0]
 8014830:	1d19      	adds	r1, r3, #4
 8014832:	6031      	str	r1, [r6, #0]
 8014834:	0606      	lsls	r6, r0, #24
 8014836:	d501      	bpl.n	801483c <_printf_i+0xbc>
 8014838:	681d      	ldr	r5, [r3, #0]
 801483a:	e003      	b.n	8014844 <_printf_i+0xc4>
 801483c:	0645      	lsls	r5, r0, #25
 801483e:	d5fb      	bpl.n	8014838 <_printf_i+0xb8>
 8014840:	f9b3 5000 	ldrsh.w	r5, [r3]
 8014844:	2d00      	cmp	r5, #0
 8014846:	da03      	bge.n	8014850 <_printf_i+0xd0>
 8014848:	232d      	movs	r3, #45	@ 0x2d
 801484a:	426d      	negs	r5, r5
 801484c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014850:	4859      	ldr	r0, [pc, #356]	@ (80149b8 <_printf_i+0x238>)
 8014852:	230a      	movs	r3, #10
 8014854:	e011      	b.n	801487a <_printf_i+0xfa>
 8014856:	6821      	ldr	r1, [r4, #0]
 8014858:	6833      	ldr	r3, [r6, #0]
 801485a:	0608      	lsls	r0, r1, #24
 801485c:	f853 5b04 	ldr.w	r5, [r3], #4
 8014860:	d402      	bmi.n	8014868 <_printf_i+0xe8>
 8014862:	0649      	lsls	r1, r1, #25
 8014864:	bf48      	it	mi
 8014866:	b2ad      	uxthmi	r5, r5
 8014868:	2f6f      	cmp	r7, #111	@ 0x6f
 801486a:	4853      	ldr	r0, [pc, #332]	@ (80149b8 <_printf_i+0x238>)
 801486c:	6033      	str	r3, [r6, #0]
 801486e:	bf14      	ite	ne
 8014870:	230a      	movne	r3, #10
 8014872:	2308      	moveq	r3, #8
 8014874:	2100      	movs	r1, #0
 8014876:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801487a:	6866      	ldr	r6, [r4, #4]
 801487c:	60a6      	str	r6, [r4, #8]
 801487e:	2e00      	cmp	r6, #0
 8014880:	bfa2      	ittt	ge
 8014882:	6821      	ldrge	r1, [r4, #0]
 8014884:	f021 0104 	bicge.w	r1, r1, #4
 8014888:	6021      	strge	r1, [r4, #0]
 801488a:	b90d      	cbnz	r5, 8014890 <_printf_i+0x110>
 801488c:	2e00      	cmp	r6, #0
 801488e:	d04b      	beq.n	8014928 <_printf_i+0x1a8>
 8014890:	4616      	mov	r6, r2
 8014892:	fbb5 f1f3 	udiv	r1, r5, r3
 8014896:	fb03 5711 	mls	r7, r3, r1, r5
 801489a:	5dc7      	ldrb	r7, [r0, r7]
 801489c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80148a0:	462f      	mov	r7, r5
 80148a2:	42bb      	cmp	r3, r7
 80148a4:	460d      	mov	r5, r1
 80148a6:	d9f4      	bls.n	8014892 <_printf_i+0x112>
 80148a8:	2b08      	cmp	r3, #8
 80148aa:	d10b      	bne.n	80148c4 <_printf_i+0x144>
 80148ac:	6823      	ldr	r3, [r4, #0]
 80148ae:	07df      	lsls	r7, r3, #31
 80148b0:	d508      	bpl.n	80148c4 <_printf_i+0x144>
 80148b2:	6923      	ldr	r3, [r4, #16]
 80148b4:	6861      	ldr	r1, [r4, #4]
 80148b6:	4299      	cmp	r1, r3
 80148b8:	bfde      	ittt	le
 80148ba:	2330      	movle	r3, #48	@ 0x30
 80148bc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80148c0:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80148c4:	1b92      	subs	r2, r2, r6
 80148c6:	6122      	str	r2, [r4, #16]
 80148c8:	f8cd a000 	str.w	sl, [sp]
 80148cc:	464b      	mov	r3, r9
 80148ce:	aa03      	add	r2, sp, #12
 80148d0:	4621      	mov	r1, r4
 80148d2:	4640      	mov	r0, r8
 80148d4:	f7ff fee6 	bl	80146a4 <_printf_common>
 80148d8:	3001      	adds	r0, #1
 80148da:	d14a      	bne.n	8014972 <_printf_i+0x1f2>
 80148dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80148e0:	b004      	add	sp, #16
 80148e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80148e6:	6823      	ldr	r3, [r4, #0]
 80148e8:	f043 0320 	orr.w	r3, r3, #32
 80148ec:	6023      	str	r3, [r4, #0]
 80148ee:	4833      	ldr	r0, [pc, #204]	@ (80149bc <_printf_i+0x23c>)
 80148f0:	2778      	movs	r7, #120	@ 0x78
 80148f2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80148f6:	6823      	ldr	r3, [r4, #0]
 80148f8:	6831      	ldr	r1, [r6, #0]
 80148fa:	061f      	lsls	r7, r3, #24
 80148fc:	f851 5b04 	ldr.w	r5, [r1], #4
 8014900:	d402      	bmi.n	8014908 <_printf_i+0x188>
 8014902:	065f      	lsls	r7, r3, #25
 8014904:	bf48      	it	mi
 8014906:	b2ad      	uxthmi	r5, r5
 8014908:	6031      	str	r1, [r6, #0]
 801490a:	07d9      	lsls	r1, r3, #31
 801490c:	bf44      	itt	mi
 801490e:	f043 0320 	orrmi.w	r3, r3, #32
 8014912:	6023      	strmi	r3, [r4, #0]
 8014914:	b11d      	cbz	r5, 801491e <_printf_i+0x19e>
 8014916:	2310      	movs	r3, #16
 8014918:	e7ac      	b.n	8014874 <_printf_i+0xf4>
 801491a:	4827      	ldr	r0, [pc, #156]	@ (80149b8 <_printf_i+0x238>)
 801491c:	e7e9      	b.n	80148f2 <_printf_i+0x172>
 801491e:	6823      	ldr	r3, [r4, #0]
 8014920:	f023 0320 	bic.w	r3, r3, #32
 8014924:	6023      	str	r3, [r4, #0]
 8014926:	e7f6      	b.n	8014916 <_printf_i+0x196>
 8014928:	4616      	mov	r6, r2
 801492a:	e7bd      	b.n	80148a8 <_printf_i+0x128>
 801492c:	6833      	ldr	r3, [r6, #0]
 801492e:	6825      	ldr	r5, [r4, #0]
 8014930:	6961      	ldr	r1, [r4, #20]
 8014932:	1d18      	adds	r0, r3, #4
 8014934:	6030      	str	r0, [r6, #0]
 8014936:	062e      	lsls	r6, r5, #24
 8014938:	681b      	ldr	r3, [r3, #0]
 801493a:	d501      	bpl.n	8014940 <_printf_i+0x1c0>
 801493c:	6019      	str	r1, [r3, #0]
 801493e:	e002      	b.n	8014946 <_printf_i+0x1c6>
 8014940:	0668      	lsls	r0, r5, #25
 8014942:	d5fb      	bpl.n	801493c <_printf_i+0x1bc>
 8014944:	8019      	strh	r1, [r3, #0]
 8014946:	2300      	movs	r3, #0
 8014948:	6123      	str	r3, [r4, #16]
 801494a:	4616      	mov	r6, r2
 801494c:	e7bc      	b.n	80148c8 <_printf_i+0x148>
 801494e:	6833      	ldr	r3, [r6, #0]
 8014950:	1d1a      	adds	r2, r3, #4
 8014952:	6032      	str	r2, [r6, #0]
 8014954:	681e      	ldr	r6, [r3, #0]
 8014956:	6862      	ldr	r2, [r4, #4]
 8014958:	2100      	movs	r1, #0
 801495a:	4630      	mov	r0, r6
 801495c:	f7eb fc60 	bl	8000220 <memchr>
 8014960:	b108      	cbz	r0, 8014966 <_printf_i+0x1e6>
 8014962:	1b80      	subs	r0, r0, r6
 8014964:	6060      	str	r0, [r4, #4]
 8014966:	6863      	ldr	r3, [r4, #4]
 8014968:	6123      	str	r3, [r4, #16]
 801496a:	2300      	movs	r3, #0
 801496c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014970:	e7aa      	b.n	80148c8 <_printf_i+0x148>
 8014972:	6923      	ldr	r3, [r4, #16]
 8014974:	4632      	mov	r2, r6
 8014976:	4649      	mov	r1, r9
 8014978:	4640      	mov	r0, r8
 801497a:	47d0      	blx	sl
 801497c:	3001      	adds	r0, #1
 801497e:	d0ad      	beq.n	80148dc <_printf_i+0x15c>
 8014980:	6823      	ldr	r3, [r4, #0]
 8014982:	079b      	lsls	r3, r3, #30
 8014984:	d413      	bmi.n	80149ae <_printf_i+0x22e>
 8014986:	68e0      	ldr	r0, [r4, #12]
 8014988:	9b03      	ldr	r3, [sp, #12]
 801498a:	4298      	cmp	r0, r3
 801498c:	bfb8      	it	lt
 801498e:	4618      	movlt	r0, r3
 8014990:	e7a6      	b.n	80148e0 <_printf_i+0x160>
 8014992:	2301      	movs	r3, #1
 8014994:	4632      	mov	r2, r6
 8014996:	4649      	mov	r1, r9
 8014998:	4640      	mov	r0, r8
 801499a:	47d0      	blx	sl
 801499c:	3001      	adds	r0, #1
 801499e:	d09d      	beq.n	80148dc <_printf_i+0x15c>
 80149a0:	3501      	adds	r5, #1
 80149a2:	68e3      	ldr	r3, [r4, #12]
 80149a4:	9903      	ldr	r1, [sp, #12]
 80149a6:	1a5b      	subs	r3, r3, r1
 80149a8:	42ab      	cmp	r3, r5
 80149aa:	dcf2      	bgt.n	8014992 <_printf_i+0x212>
 80149ac:	e7eb      	b.n	8014986 <_printf_i+0x206>
 80149ae:	2500      	movs	r5, #0
 80149b0:	f104 0619 	add.w	r6, r4, #25
 80149b4:	e7f5      	b.n	80149a2 <_printf_i+0x222>
 80149b6:	bf00      	nop
 80149b8:	0801750a 	.word	0x0801750a
 80149bc:	0801751b 	.word	0x0801751b

080149c0 <std>:
 80149c0:	2300      	movs	r3, #0
 80149c2:	b510      	push	{r4, lr}
 80149c4:	4604      	mov	r4, r0
 80149c6:	e9c0 3300 	strd	r3, r3, [r0]
 80149ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80149ce:	6083      	str	r3, [r0, #8]
 80149d0:	8181      	strh	r1, [r0, #12]
 80149d2:	6643      	str	r3, [r0, #100]	@ 0x64
 80149d4:	81c2      	strh	r2, [r0, #14]
 80149d6:	6183      	str	r3, [r0, #24]
 80149d8:	4619      	mov	r1, r3
 80149da:	2208      	movs	r2, #8
 80149dc:	305c      	adds	r0, #92	@ 0x5c
 80149de:	f000 f92e 	bl	8014c3e <memset>
 80149e2:	4b0d      	ldr	r3, [pc, #52]	@ (8014a18 <std+0x58>)
 80149e4:	6263      	str	r3, [r4, #36]	@ 0x24
 80149e6:	4b0d      	ldr	r3, [pc, #52]	@ (8014a1c <std+0x5c>)
 80149e8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80149ea:	4b0d      	ldr	r3, [pc, #52]	@ (8014a20 <std+0x60>)
 80149ec:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80149ee:	4b0d      	ldr	r3, [pc, #52]	@ (8014a24 <std+0x64>)
 80149f0:	6323      	str	r3, [r4, #48]	@ 0x30
 80149f2:	4b0d      	ldr	r3, [pc, #52]	@ (8014a28 <std+0x68>)
 80149f4:	6224      	str	r4, [r4, #32]
 80149f6:	429c      	cmp	r4, r3
 80149f8:	d006      	beq.n	8014a08 <std+0x48>
 80149fa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80149fe:	4294      	cmp	r4, r2
 8014a00:	d002      	beq.n	8014a08 <std+0x48>
 8014a02:	33d0      	adds	r3, #208	@ 0xd0
 8014a04:	429c      	cmp	r4, r3
 8014a06:	d105      	bne.n	8014a14 <std+0x54>
 8014a08:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8014a0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014a10:	f000 b9e8 	b.w	8014de4 <__retarget_lock_init_recursive>
 8014a14:	bd10      	pop	{r4, pc}
 8014a16:	bf00      	nop
 8014a18:	08014b85 	.word	0x08014b85
 8014a1c:	08014ba7 	.word	0x08014ba7
 8014a20:	08014bdf 	.word	0x08014bdf
 8014a24:	08014c03 	.word	0x08014c03
 8014a28:	20008e64 	.word	0x20008e64

08014a2c <stdio_exit_handler>:
 8014a2c:	4a02      	ldr	r2, [pc, #8]	@ (8014a38 <stdio_exit_handler+0xc>)
 8014a2e:	4903      	ldr	r1, [pc, #12]	@ (8014a3c <stdio_exit_handler+0x10>)
 8014a30:	4803      	ldr	r0, [pc, #12]	@ (8014a40 <stdio_exit_handler+0x14>)
 8014a32:	f000 b869 	b.w	8014b08 <_fwalk_sglue>
 8014a36:	bf00      	nop
 8014a38:	200003a8 	.word	0x200003a8
 8014a3c:	0801675d 	.word	0x0801675d
 8014a40:	200003b8 	.word	0x200003b8

08014a44 <cleanup_stdio>:
 8014a44:	6841      	ldr	r1, [r0, #4]
 8014a46:	4b0c      	ldr	r3, [pc, #48]	@ (8014a78 <cleanup_stdio+0x34>)
 8014a48:	4299      	cmp	r1, r3
 8014a4a:	b510      	push	{r4, lr}
 8014a4c:	4604      	mov	r4, r0
 8014a4e:	d001      	beq.n	8014a54 <cleanup_stdio+0x10>
 8014a50:	f001 fe84 	bl	801675c <_fflush_r>
 8014a54:	68a1      	ldr	r1, [r4, #8]
 8014a56:	4b09      	ldr	r3, [pc, #36]	@ (8014a7c <cleanup_stdio+0x38>)
 8014a58:	4299      	cmp	r1, r3
 8014a5a:	d002      	beq.n	8014a62 <cleanup_stdio+0x1e>
 8014a5c:	4620      	mov	r0, r4
 8014a5e:	f001 fe7d 	bl	801675c <_fflush_r>
 8014a62:	68e1      	ldr	r1, [r4, #12]
 8014a64:	4b06      	ldr	r3, [pc, #24]	@ (8014a80 <cleanup_stdio+0x3c>)
 8014a66:	4299      	cmp	r1, r3
 8014a68:	d004      	beq.n	8014a74 <cleanup_stdio+0x30>
 8014a6a:	4620      	mov	r0, r4
 8014a6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014a70:	f001 be74 	b.w	801675c <_fflush_r>
 8014a74:	bd10      	pop	{r4, pc}
 8014a76:	bf00      	nop
 8014a78:	20008e64 	.word	0x20008e64
 8014a7c:	20008ecc 	.word	0x20008ecc
 8014a80:	20008f34 	.word	0x20008f34

08014a84 <global_stdio_init.part.0>:
 8014a84:	b510      	push	{r4, lr}
 8014a86:	4b0b      	ldr	r3, [pc, #44]	@ (8014ab4 <global_stdio_init.part.0+0x30>)
 8014a88:	4c0b      	ldr	r4, [pc, #44]	@ (8014ab8 <global_stdio_init.part.0+0x34>)
 8014a8a:	4a0c      	ldr	r2, [pc, #48]	@ (8014abc <global_stdio_init.part.0+0x38>)
 8014a8c:	601a      	str	r2, [r3, #0]
 8014a8e:	4620      	mov	r0, r4
 8014a90:	2200      	movs	r2, #0
 8014a92:	2104      	movs	r1, #4
 8014a94:	f7ff ff94 	bl	80149c0 <std>
 8014a98:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8014a9c:	2201      	movs	r2, #1
 8014a9e:	2109      	movs	r1, #9
 8014aa0:	f7ff ff8e 	bl	80149c0 <std>
 8014aa4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8014aa8:	2202      	movs	r2, #2
 8014aaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014aae:	2112      	movs	r1, #18
 8014ab0:	f7ff bf86 	b.w	80149c0 <std>
 8014ab4:	20008f9c 	.word	0x20008f9c
 8014ab8:	20008e64 	.word	0x20008e64
 8014abc:	08014a2d 	.word	0x08014a2d

08014ac0 <__sfp_lock_acquire>:
 8014ac0:	4801      	ldr	r0, [pc, #4]	@ (8014ac8 <__sfp_lock_acquire+0x8>)
 8014ac2:	f000 b990 	b.w	8014de6 <__retarget_lock_acquire_recursive>
 8014ac6:	bf00      	nop
 8014ac8:	20008fa5 	.word	0x20008fa5

08014acc <__sfp_lock_release>:
 8014acc:	4801      	ldr	r0, [pc, #4]	@ (8014ad4 <__sfp_lock_release+0x8>)
 8014ace:	f000 b98b 	b.w	8014de8 <__retarget_lock_release_recursive>
 8014ad2:	bf00      	nop
 8014ad4:	20008fa5 	.word	0x20008fa5

08014ad8 <__sinit>:
 8014ad8:	b510      	push	{r4, lr}
 8014ada:	4604      	mov	r4, r0
 8014adc:	f7ff fff0 	bl	8014ac0 <__sfp_lock_acquire>
 8014ae0:	6a23      	ldr	r3, [r4, #32]
 8014ae2:	b11b      	cbz	r3, 8014aec <__sinit+0x14>
 8014ae4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014ae8:	f7ff bff0 	b.w	8014acc <__sfp_lock_release>
 8014aec:	4b04      	ldr	r3, [pc, #16]	@ (8014b00 <__sinit+0x28>)
 8014aee:	6223      	str	r3, [r4, #32]
 8014af0:	4b04      	ldr	r3, [pc, #16]	@ (8014b04 <__sinit+0x2c>)
 8014af2:	681b      	ldr	r3, [r3, #0]
 8014af4:	2b00      	cmp	r3, #0
 8014af6:	d1f5      	bne.n	8014ae4 <__sinit+0xc>
 8014af8:	f7ff ffc4 	bl	8014a84 <global_stdio_init.part.0>
 8014afc:	e7f2      	b.n	8014ae4 <__sinit+0xc>
 8014afe:	bf00      	nop
 8014b00:	08014a45 	.word	0x08014a45
 8014b04:	20008f9c 	.word	0x20008f9c

08014b08 <_fwalk_sglue>:
 8014b08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014b0c:	4607      	mov	r7, r0
 8014b0e:	4688      	mov	r8, r1
 8014b10:	4614      	mov	r4, r2
 8014b12:	2600      	movs	r6, #0
 8014b14:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014b18:	f1b9 0901 	subs.w	r9, r9, #1
 8014b1c:	d505      	bpl.n	8014b2a <_fwalk_sglue+0x22>
 8014b1e:	6824      	ldr	r4, [r4, #0]
 8014b20:	2c00      	cmp	r4, #0
 8014b22:	d1f7      	bne.n	8014b14 <_fwalk_sglue+0xc>
 8014b24:	4630      	mov	r0, r6
 8014b26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014b2a:	89ab      	ldrh	r3, [r5, #12]
 8014b2c:	2b01      	cmp	r3, #1
 8014b2e:	d907      	bls.n	8014b40 <_fwalk_sglue+0x38>
 8014b30:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014b34:	3301      	adds	r3, #1
 8014b36:	d003      	beq.n	8014b40 <_fwalk_sglue+0x38>
 8014b38:	4629      	mov	r1, r5
 8014b3a:	4638      	mov	r0, r7
 8014b3c:	47c0      	blx	r8
 8014b3e:	4306      	orrs	r6, r0
 8014b40:	3568      	adds	r5, #104	@ 0x68
 8014b42:	e7e9      	b.n	8014b18 <_fwalk_sglue+0x10>

08014b44 <siprintf>:
 8014b44:	b40e      	push	{r1, r2, r3}
 8014b46:	b500      	push	{lr}
 8014b48:	b09c      	sub	sp, #112	@ 0x70
 8014b4a:	ab1d      	add	r3, sp, #116	@ 0x74
 8014b4c:	9002      	str	r0, [sp, #8]
 8014b4e:	9006      	str	r0, [sp, #24]
 8014b50:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8014b54:	4809      	ldr	r0, [pc, #36]	@ (8014b7c <siprintf+0x38>)
 8014b56:	9107      	str	r1, [sp, #28]
 8014b58:	9104      	str	r1, [sp, #16]
 8014b5a:	4909      	ldr	r1, [pc, #36]	@ (8014b80 <siprintf+0x3c>)
 8014b5c:	f853 2b04 	ldr.w	r2, [r3], #4
 8014b60:	9105      	str	r1, [sp, #20]
 8014b62:	6800      	ldr	r0, [r0, #0]
 8014b64:	9301      	str	r3, [sp, #4]
 8014b66:	a902      	add	r1, sp, #8
 8014b68:	f001 fc78 	bl	801645c <_svfiprintf_r>
 8014b6c:	9b02      	ldr	r3, [sp, #8]
 8014b6e:	2200      	movs	r2, #0
 8014b70:	701a      	strb	r2, [r3, #0]
 8014b72:	b01c      	add	sp, #112	@ 0x70
 8014b74:	f85d eb04 	ldr.w	lr, [sp], #4
 8014b78:	b003      	add	sp, #12
 8014b7a:	4770      	bx	lr
 8014b7c:	200003b4 	.word	0x200003b4
 8014b80:	ffff0208 	.word	0xffff0208

08014b84 <__sread>:
 8014b84:	b510      	push	{r4, lr}
 8014b86:	460c      	mov	r4, r1
 8014b88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014b8c:	f000 f8dc 	bl	8014d48 <_read_r>
 8014b90:	2800      	cmp	r0, #0
 8014b92:	bfab      	itete	ge
 8014b94:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8014b96:	89a3      	ldrhlt	r3, [r4, #12]
 8014b98:	181b      	addge	r3, r3, r0
 8014b9a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8014b9e:	bfac      	ite	ge
 8014ba0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8014ba2:	81a3      	strhlt	r3, [r4, #12]
 8014ba4:	bd10      	pop	{r4, pc}

08014ba6 <__swrite>:
 8014ba6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014baa:	461f      	mov	r7, r3
 8014bac:	898b      	ldrh	r3, [r1, #12]
 8014bae:	05db      	lsls	r3, r3, #23
 8014bb0:	4605      	mov	r5, r0
 8014bb2:	460c      	mov	r4, r1
 8014bb4:	4616      	mov	r6, r2
 8014bb6:	d505      	bpl.n	8014bc4 <__swrite+0x1e>
 8014bb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014bbc:	2302      	movs	r3, #2
 8014bbe:	2200      	movs	r2, #0
 8014bc0:	f000 f8b0 	bl	8014d24 <_lseek_r>
 8014bc4:	89a3      	ldrh	r3, [r4, #12]
 8014bc6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014bca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8014bce:	81a3      	strh	r3, [r4, #12]
 8014bd0:	4632      	mov	r2, r6
 8014bd2:	463b      	mov	r3, r7
 8014bd4:	4628      	mov	r0, r5
 8014bd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014bda:	f000 b8c7 	b.w	8014d6c <_write_r>

08014bde <__sseek>:
 8014bde:	b510      	push	{r4, lr}
 8014be0:	460c      	mov	r4, r1
 8014be2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014be6:	f000 f89d 	bl	8014d24 <_lseek_r>
 8014bea:	1c43      	adds	r3, r0, #1
 8014bec:	89a3      	ldrh	r3, [r4, #12]
 8014bee:	bf15      	itete	ne
 8014bf0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8014bf2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8014bf6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8014bfa:	81a3      	strheq	r3, [r4, #12]
 8014bfc:	bf18      	it	ne
 8014bfe:	81a3      	strhne	r3, [r4, #12]
 8014c00:	bd10      	pop	{r4, pc}

08014c02 <__sclose>:
 8014c02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014c06:	f000 b827 	b.w	8014c58 <_close_r>

08014c0a <memmove>:
 8014c0a:	4288      	cmp	r0, r1
 8014c0c:	b510      	push	{r4, lr}
 8014c0e:	eb01 0402 	add.w	r4, r1, r2
 8014c12:	d902      	bls.n	8014c1a <memmove+0x10>
 8014c14:	4284      	cmp	r4, r0
 8014c16:	4623      	mov	r3, r4
 8014c18:	d807      	bhi.n	8014c2a <memmove+0x20>
 8014c1a:	1e43      	subs	r3, r0, #1
 8014c1c:	42a1      	cmp	r1, r4
 8014c1e:	d008      	beq.n	8014c32 <memmove+0x28>
 8014c20:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014c24:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014c28:	e7f8      	b.n	8014c1c <memmove+0x12>
 8014c2a:	4402      	add	r2, r0
 8014c2c:	4601      	mov	r1, r0
 8014c2e:	428a      	cmp	r2, r1
 8014c30:	d100      	bne.n	8014c34 <memmove+0x2a>
 8014c32:	bd10      	pop	{r4, pc}
 8014c34:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014c38:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014c3c:	e7f7      	b.n	8014c2e <memmove+0x24>

08014c3e <memset>:
 8014c3e:	4402      	add	r2, r0
 8014c40:	4603      	mov	r3, r0
 8014c42:	4293      	cmp	r3, r2
 8014c44:	d100      	bne.n	8014c48 <memset+0xa>
 8014c46:	4770      	bx	lr
 8014c48:	f803 1b01 	strb.w	r1, [r3], #1
 8014c4c:	e7f9      	b.n	8014c42 <memset+0x4>
	...

08014c50 <_localeconv_r>:
 8014c50:	4800      	ldr	r0, [pc, #0]	@ (8014c54 <_localeconv_r+0x4>)
 8014c52:	4770      	bx	lr
 8014c54:	200004f4 	.word	0x200004f4

08014c58 <_close_r>:
 8014c58:	b538      	push	{r3, r4, r5, lr}
 8014c5a:	4d06      	ldr	r5, [pc, #24]	@ (8014c74 <_close_r+0x1c>)
 8014c5c:	2300      	movs	r3, #0
 8014c5e:	4604      	mov	r4, r0
 8014c60:	4608      	mov	r0, r1
 8014c62:	602b      	str	r3, [r5, #0]
 8014c64:	f7f0 fb04 	bl	8005270 <_close>
 8014c68:	1c43      	adds	r3, r0, #1
 8014c6a:	d102      	bne.n	8014c72 <_close_r+0x1a>
 8014c6c:	682b      	ldr	r3, [r5, #0]
 8014c6e:	b103      	cbz	r3, 8014c72 <_close_r+0x1a>
 8014c70:	6023      	str	r3, [r4, #0]
 8014c72:	bd38      	pop	{r3, r4, r5, pc}
 8014c74:	20008fa0 	.word	0x20008fa0

08014c78 <_reclaim_reent>:
 8014c78:	4b29      	ldr	r3, [pc, #164]	@ (8014d20 <_reclaim_reent+0xa8>)
 8014c7a:	681b      	ldr	r3, [r3, #0]
 8014c7c:	4283      	cmp	r3, r0
 8014c7e:	b570      	push	{r4, r5, r6, lr}
 8014c80:	4604      	mov	r4, r0
 8014c82:	d04b      	beq.n	8014d1c <_reclaim_reent+0xa4>
 8014c84:	69c3      	ldr	r3, [r0, #28]
 8014c86:	b1ab      	cbz	r3, 8014cb4 <_reclaim_reent+0x3c>
 8014c88:	68db      	ldr	r3, [r3, #12]
 8014c8a:	b16b      	cbz	r3, 8014ca8 <_reclaim_reent+0x30>
 8014c8c:	2500      	movs	r5, #0
 8014c8e:	69e3      	ldr	r3, [r4, #28]
 8014c90:	68db      	ldr	r3, [r3, #12]
 8014c92:	5959      	ldr	r1, [r3, r5]
 8014c94:	2900      	cmp	r1, #0
 8014c96:	d13b      	bne.n	8014d10 <_reclaim_reent+0x98>
 8014c98:	3504      	adds	r5, #4
 8014c9a:	2d80      	cmp	r5, #128	@ 0x80
 8014c9c:	d1f7      	bne.n	8014c8e <_reclaim_reent+0x16>
 8014c9e:	69e3      	ldr	r3, [r4, #28]
 8014ca0:	4620      	mov	r0, r4
 8014ca2:	68d9      	ldr	r1, [r3, #12]
 8014ca4:	f000 fefc 	bl	8015aa0 <_free_r>
 8014ca8:	69e3      	ldr	r3, [r4, #28]
 8014caa:	6819      	ldr	r1, [r3, #0]
 8014cac:	b111      	cbz	r1, 8014cb4 <_reclaim_reent+0x3c>
 8014cae:	4620      	mov	r0, r4
 8014cb0:	f000 fef6 	bl	8015aa0 <_free_r>
 8014cb4:	6961      	ldr	r1, [r4, #20]
 8014cb6:	b111      	cbz	r1, 8014cbe <_reclaim_reent+0x46>
 8014cb8:	4620      	mov	r0, r4
 8014cba:	f000 fef1 	bl	8015aa0 <_free_r>
 8014cbe:	69e1      	ldr	r1, [r4, #28]
 8014cc0:	b111      	cbz	r1, 8014cc8 <_reclaim_reent+0x50>
 8014cc2:	4620      	mov	r0, r4
 8014cc4:	f000 feec 	bl	8015aa0 <_free_r>
 8014cc8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8014cca:	b111      	cbz	r1, 8014cd2 <_reclaim_reent+0x5a>
 8014ccc:	4620      	mov	r0, r4
 8014cce:	f000 fee7 	bl	8015aa0 <_free_r>
 8014cd2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014cd4:	b111      	cbz	r1, 8014cdc <_reclaim_reent+0x64>
 8014cd6:	4620      	mov	r0, r4
 8014cd8:	f000 fee2 	bl	8015aa0 <_free_r>
 8014cdc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8014cde:	b111      	cbz	r1, 8014ce6 <_reclaim_reent+0x6e>
 8014ce0:	4620      	mov	r0, r4
 8014ce2:	f000 fedd 	bl	8015aa0 <_free_r>
 8014ce6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8014ce8:	b111      	cbz	r1, 8014cf0 <_reclaim_reent+0x78>
 8014cea:	4620      	mov	r0, r4
 8014cec:	f000 fed8 	bl	8015aa0 <_free_r>
 8014cf0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8014cf2:	b111      	cbz	r1, 8014cfa <_reclaim_reent+0x82>
 8014cf4:	4620      	mov	r0, r4
 8014cf6:	f000 fed3 	bl	8015aa0 <_free_r>
 8014cfa:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8014cfc:	b111      	cbz	r1, 8014d04 <_reclaim_reent+0x8c>
 8014cfe:	4620      	mov	r0, r4
 8014d00:	f000 fece 	bl	8015aa0 <_free_r>
 8014d04:	6a23      	ldr	r3, [r4, #32]
 8014d06:	b14b      	cbz	r3, 8014d1c <_reclaim_reent+0xa4>
 8014d08:	4620      	mov	r0, r4
 8014d0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014d0e:	4718      	bx	r3
 8014d10:	680e      	ldr	r6, [r1, #0]
 8014d12:	4620      	mov	r0, r4
 8014d14:	f000 fec4 	bl	8015aa0 <_free_r>
 8014d18:	4631      	mov	r1, r6
 8014d1a:	e7bb      	b.n	8014c94 <_reclaim_reent+0x1c>
 8014d1c:	bd70      	pop	{r4, r5, r6, pc}
 8014d1e:	bf00      	nop
 8014d20:	200003b4 	.word	0x200003b4

08014d24 <_lseek_r>:
 8014d24:	b538      	push	{r3, r4, r5, lr}
 8014d26:	4d07      	ldr	r5, [pc, #28]	@ (8014d44 <_lseek_r+0x20>)
 8014d28:	4604      	mov	r4, r0
 8014d2a:	4608      	mov	r0, r1
 8014d2c:	4611      	mov	r1, r2
 8014d2e:	2200      	movs	r2, #0
 8014d30:	602a      	str	r2, [r5, #0]
 8014d32:	461a      	mov	r2, r3
 8014d34:	f7f0 fac3 	bl	80052be <_lseek>
 8014d38:	1c43      	adds	r3, r0, #1
 8014d3a:	d102      	bne.n	8014d42 <_lseek_r+0x1e>
 8014d3c:	682b      	ldr	r3, [r5, #0]
 8014d3e:	b103      	cbz	r3, 8014d42 <_lseek_r+0x1e>
 8014d40:	6023      	str	r3, [r4, #0]
 8014d42:	bd38      	pop	{r3, r4, r5, pc}
 8014d44:	20008fa0 	.word	0x20008fa0

08014d48 <_read_r>:
 8014d48:	b538      	push	{r3, r4, r5, lr}
 8014d4a:	4d07      	ldr	r5, [pc, #28]	@ (8014d68 <_read_r+0x20>)
 8014d4c:	4604      	mov	r4, r0
 8014d4e:	4608      	mov	r0, r1
 8014d50:	4611      	mov	r1, r2
 8014d52:	2200      	movs	r2, #0
 8014d54:	602a      	str	r2, [r5, #0]
 8014d56:	461a      	mov	r2, r3
 8014d58:	f7f0 fa51 	bl	80051fe <_read>
 8014d5c:	1c43      	adds	r3, r0, #1
 8014d5e:	d102      	bne.n	8014d66 <_read_r+0x1e>
 8014d60:	682b      	ldr	r3, [r5, #0]
 8014d62:	b103      	cbz	r3, 8014d66 <_read_r+0x1e>
 8014d64:	6023      	str	r3, [r4, #0]
 8014d66:	bd38      	pop	{r3, r4, r5, pc}
 8014d68:	20008fa0 	.word	0x20008fa0

08014d6c <_write_r>:
 8014d6c:	b538      	push	{r3, r4, r5, lr}
 8014d6e:	4d07      	ldr	r5, [pc, #28]	@ (8014d8c <_write_r+0x20>)
 8014d70:	4604      	mov	r4, r0
 8014d72:	4608      	mov	r0, r1
 8014d74:	4611      	mov	r1, r2
 8014d76:	2200      	movs	r2, #0
 8014d78:	602a      	str	r2, [r5, #0]
 8014d7a:	461a      	mov	r2, r3
 8014d7c:	f7f0 fa5c 	bl	8005238 <_write>
 8014d80:	1c43      	adds	r3, r0, #1
 8014d82:	d102      	bne.n	8014d8a <_write_r+0x1e>
 8014d84:	682b      	ldr	r3, [r5, #0]
 8014d86:	b103      	cbz	r3, 8014d8a <_write_r+0x1e>
 8014d88:	6023      	str	r3, [r4, #0]
 8014d8a:	bd38      	pop	{r3, r4, r5, pc}
 8014d8c:	20008fa0 	.word	0x20008fa0

08014d90 <__errno>:
 8014d90:	4b01      	ldr	r3, [pc, #4]	@ (8014d98 <__errno+0x8>)
 8014d92:	6818      	ldr	r0, [r3, #0]
 8014d94:	4770      	bx	lr
 8014d96:	bf00      	nop
 8014d98:	200003b4 	.word	0x200003b4

08014d9c <__libc_init_array>:
 8014d9c:	b570      	push	{r4, r5, r6, lr}
 8014d9e:	4d0d      	ldr	r5, [pc, #52]	@ (8014dd4 <__libc_init_array+0x38>)
 8014da0:	4c0d      	ldr	r4, [pc, #52]	@ (8014dd8 <__libc_init_array+0x3c>)
 8014da2:	1b64      	subs	r4, r4, r5
 8014da4:	10a4      	asrs	r4, r4, #2
 8014da6:	2600      	movs	r6, #0
 8014da8:	42a6      	cmp	r6, r4
 8014daa:	d109      	bne.n	8014dc0 <__libc_init_array+0x24>
 8014dac:	4d0b      	ldr	r5, [pc, #44]	@ (8014ddc <__libc_init_array+0x40>)
 8014dae:	4c0c      	ldr	r4, [pc, #48]	@ (8014de0 <__libc_init_array+0x44>)
 8014db0:	f002 f84a 	bl	8016e48 <_init>
 8014db4:	1b64      	subs	r4, r4, r5
 8014db6:	10a4      	asrs	r4, r4, #2
 8014db8:	2600      	movs	r6, #0
 8014dba:	42a6      	cmp	r6, r4
 8014dbc:	d105      	bne.n	8014dca <__libc_init_array+0x2e>
 8014dbe:	bd70      	pop	{r4, r5, r6, pc}
 8014dc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8014dc4:	4798      	blx	r3
 8014dc6:	3601      	adds	r6, #1
 8014dc8:	e7ee      	b.n	8014da8 <__libc_init_array+0xc>
 8014dca:	f855 3b04 	ldr.w	r3, [r5], #4
 8014dce:	4798      	blx	r3
 8014dd0:	3601      	adds	r6, #1
 8014dd2:	e7f2      	b.n	8014dba <__libc_init_array+0x1e>
 8014dd4:	08017870 	.word	0x08017870
 8014dd8:	08017870 	.word	0x08017870
 8014ddc:	08017870 	.word	0x08017870
 8014de0:	08017880 	.word	0x08017880

08014de4 <__retarget_lock_init_recursive>:
 8014de4:	4770      	bx	lr

08014de6 <__retarget_lock_acquire_recursive>:
 8014de6:	4770      	bx	lr

08014de8 <__retarget_lock_release_recursive>:
 8014de8:	4770      	bx	lr

08014dea <memcpy>:
 8014dea:	440a      	add	r2, r1
 8014dec:	4291      	cmp	r1, r2
 8014dee:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8014df2:	d100      	bne.n	8014df6 <memcpy+0xc>
 8014df4:	4770      	bx	lr
 8014df6:	b510      	push	{r4, lr}
 8014df8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014dfc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014e00:	4291      	cmp	r1, r2
 8014e02:	d1f9      	bne.n	8014df8 <memcpy+0xe>
 8014e04:	bd10      	pop	{r4, pc}

08014e06 <quorem>:
 8014e06:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e0a:	6903      	ldr	r3, [r0, #16]
 8014e0c:	690c      	ldr	r4, [r1, #16]
 8014e0e:	42a3      	cmp	r3, r4
 8014e10:	4607      	mov	r7, r0
 8014e12:	db7e      	blt.n	8014f12 <quorem+0x10c>
 8014e14:	3c01      	subs	r4, #1
 8014e16:	f101 0814 	add.w	r8, r1, #20
 8014e1a:	00a3      	lsls	r3, r4, #2
 8014e1c:	f100 0514 	add.w	r5, r0, #20
 8014e20:	9300      	str	r3, [sp, #0]
 8014e22:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014e26:	9301      	str	r3, [sp, #4]
 8014e28:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8014e2c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014e30:	3301      	adds	r3, #1
 8014e32:	429a      	cmp	r2, r3
 8014e34:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8014e38:	fbb2 f6f3 	udiv	r6, r2, r3
 8014e3c:	d32e      	bcc.n	8014e9c <quorem+0x96>
 8014e3e:	f04f 0a00 	mov.w	sl, #0
 8014e42:	46c4      	mov	ip, r8
 8014e44:	46ae      	mov	lr, r5
 8014e46:	46d3      	mov	fp, sl
 8014e48:	f85c 3b04 	ldr.w	r3, [ip], #4
 8014e4c:	b298      	uxth	r0, r3
 8014e4e:	fb06 a000 	mla	r0, r6, r0, sl
 8014e52:	0c02      	lsrs	r2, r0, #16
 8014e54:	0c1b      	lsrs	r3, r3, #16
 8014e56:	fb06 2303 	mla	r3, r6, r3, r2
 8014e5a:	f8de 2000 	ldr.w	r2, [lr]
 8014e5e:	b280      	uxth	r0, r0
 8014e60:	b292      	uxth	r2, r2
 8014e62:	1a12      	subs	r2, r2, r0
 8014e64:	445a      	add	r2, fp
 8014e66:	f8de 0000 	ldr.w	r0, [lr]
 8014e6a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014e6e:	b29b      	uxth	r3, r3
 8014e70:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8014e74:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8014e78:	b292      	uxth	r2, r2
 8014e7a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8014e7e:	45e1      	cmp	r9, ip
 8014e80:	f84e 2b04 	str.w	r2, [lr], #4
 8014e84:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8014e88:	d2de      	bcs.n	8014e48 <quorem+0x42>
 8014e8a:	9b00      	ldr	r3, [sp, #0]
 8014e8c:	58eb      	ldr	r3, [r5, r3]
 8014e8e:	b92b      	cbnz	r3, 8014e9c <quorem+0x96>
 8014e90:	9b01      	ldr	r3, [sp, #4]
 8014e92:	3b04      	subs	r3, #4
 8014e94:	429d      	cmp	r5, r3
 8014e96:	461a      	mov	r2, r3
 8014e98:	d32f      	bcc.n	8014efa <quorem+0xf4>
 8014e9a:	613c      	str	r4, [r7, #16]
 8014e9c:	4638      	mov	r0, r7
 8014e9e:	f001 f979 	bl	8016194 <__mcmp>
 8014ea2:	2800      	cmp	r0, #0
 8014ea4:	db25      	blt.n	8014ef2 <quorem+0xec>
 8014ea6:	4629      	mov	r1, r5
 8014ea8:	2000      	movs	r0, #0
 8014eaa:	f858 2b04 	ldr.w	r2, [r8], #4
 8014eae:	f8d1 c000 	ldr.w	ip, [r1]
 8014eb2:	fa1f fe82 	uxth.w	lr, r2
 8014eb6:	fa1f f38c 	uxth.w	r3, ip
 8014eba:	eba3 030e 	sub.w	r3, r3, lr
 8014ebe:	4403      	add	r3, r0
 8014ec0:	0c12      	lsrs	r2, r2, #16
 8014ec2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8014ec6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8014eca:	b29b      	uxth	r3, r3
 8014ecc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014ed0:	45c1      	cmp	r9, r8
 8014ed2:	f841 3b04 	str.w	r3, [r1], #4
 8014ed6:	ea4f 4022 	mov.w	r0, r2, asr #16
 8014eda:	d2e6      	bcs.n	8014eaa <quorem+0xa4>
 8014edc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014ee0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014ee4:	b922      	cbnz	r2, 8014ef0 <quorem+0xea>
 8014ee6:	3b04      	subs	r3, #4
 8014ee8:	429d      	cmp	r5, r3
 8014eea:	461a      	mov	r2, r3
 8014eec:	d30b      	bcc.n	8014f06 <quorem+0x100>
 8014eee:	613c      	str	r4, [r7, #16]
 8014ef0:	3601      	adds	r6, #1
 8014ef2:	4630      	mov	r0, r6
 8014ef4:	b003      	add	sp, #12
 8014ef6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014efa:	6812      	ldr	r2, [r2, #0]
 8014efc:	3b04      	subs	r3, #4
 8014efe:	2a00      	cmp	r2, #0
 8014f00:	d1cb      	bne.n	8014e9a <quorem+0x94>
 8014f02:	3c01      	subs	r4, #1
 8014f04:	e7c6      	b.n	8014e94 <quorem+0x8e>
 8014f06:	6812      	ldr	r2, [r2, #0]
 8014f08:	3b04      	subs	r3, #4
 8014f0a:	2a00      	cmp	r2, #0
 8014f0c:	d1ef      	bne.n	8014eee <quorem+0xe8>
 8014f0e:	3c01      	subs	r4, #1
 8014f10:	e7ea      	b.n	8014ee8 <quorem+0xe2>
 8014f12:	2000      	movs	r0, #0
 8014f14:	e7ee      	b.n	8014ef4 <quorem+0xee>
	...

08014f18 <_dtoa_r>:
 8014f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f1c:	69c7      	ldr	r7, [r0, #28]
 8014f1e:	b099      	sub	sp, #100	@ 0x64
 8014f20:	ed8d 0b02 	vstr	d0, [sp, #8]
 8014f24:	ec55 4b10 	vmov	r4, r5, d0
 8014f28:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8014f2a:	9109      	str	r1, [sp, #36]	@ 0x24
 8014f2c:	4683      	mov	fp, r0
 8014f2e:	920e      	str	r2, [sp, #56]	@ 0x38
 8014f30:	9313      	str	r3, [sp, #76]	@ 0x4c
 8014f32:	b97f      	cbnz	r7, 8014f54 <_dtoa_r+0x3c>
 8014f34:	2010      	movs	r0, #16
 8014f36:	f000 fdfd 	bl	8015b34 <malloc>
 8014f3a:	4602      	mov	r2, r0
 8014f3c:	f8cb 001c 	str.w	r0, [fp, #28]
 8014f40:	b920      	cbnz	r0, 8014f4c <_dtoa_r+0x34>
 8014f42:	4ba7      	ldr	r3, [pc, #668]	@ (80151e0 <_dtoa_r+0x2c8>)
 8014f44:	21ef      	movs	r1, #239	@ 0xef
 8014f46:	48a7      	ldr	r0, [pc, #668]	@ (80151e4 <_dtoa_r+0x2cc>)
 8014f48:	f001 fc40 	bl	80167cc <__assert_func>
 8014f4c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8014f50:	6007      	str	r7, [r0, #0]
 8014f52:	60c7      	str	r7, [r0, #12]
 8014f54:	f8db 301c 	ldr.w	r3, [fp, #28]
 8014f58:	6819      	ldr	r1, [r3, #0]
 8014f5a:	b159      	cbz	r1, 8014f74 <_dtoa_r+0x5c>
 8014f5c:	685a      	ldr	r2, [r3, #4]
 8014f5e:	604a      	str	r2, [r1, #4]
 8014f60:	2301      	movs	r3, #1
 8014f62:	4093      	lsls	r3, r2
 8014f64:	608b      	str	r3, [r1, #8]
 8014f66:	4658      	mov	r0, fp
 8014f68:	f000 feda 	bl	8015d20 <_Bfree>
 8014f6c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8014f70:	2200      	movs	r2, #0
 8014f72:	601a      	str	r2, [r3, #0]
 8014f74:	1e2b      	subs	r3, r5, #0
 8014f76:	bfb9      	ittee	lt
 8014f78:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8014f7c:	9303      	strlt	r3, [sp, #12]
 8014f7e:	2300      	movge	r3, #0
 8014f80:	6033      	strge	r3, [r6, #0]
 8014f82:	9f03      	ldr	r7, [sp, #12]
 8014f84:	4b98      	ldr	r3, [pc, #608]	@ (80151e8 <_dtoa_r+0x2d0>)
 8014f86:	bfbc      	itt	lt
 8014f88:	2201      	movlt	r2, #1
 8014f8a:	6032      	strlt	r2, [r6, #0]
 8014f8c:	43bb      	bics	r3, r7
 8014f8e:	d112      	bne.n	8014fb6 <_dtoa_r+0x9e>
 8014f90:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8014f92:	f242 730f 	movw	r3, #9999	@ 0x270f
 8014f96:	6013      	str	r3, [r2, #0]
 8014f98:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8014f9c:	4323      	orrs	r3, r4
 8014f9e:	f000 854d 	beq.w	8015a3c <_dtoa_r+0xb24>
 8014fa2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8014fa4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80151fc <_dtoa_r+0x2e4>
 8014fa8:	2b00      	cmp	r3, #0
 8014faa:	f000 854f 	beq.w	8015a4c <_dtoa_r+0xb34>
 8014fae:	f10a 0303 	add.w	r3, sl, #3
 8014fb2:	f000 bd49 	b.w	8015a48 <_dtoa_r+0xb30>
 8014fb6:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014fba:	2200      	movs	r2, #0
 8014fbc:	ec51 0b17 	vmov	r0, r1, d7
 8014fc0:	2300      	movs	r3, #0
 8014fc2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8014fc6:	f7eb fda7 	bl	8000b18 <__aeabi_dcmpeq>
 8014fca:	4680      	mov	r8, r0
 8014fcc:	b158      	cbz	r0, 8014fe6 <_dtoa_r+0xce>
 8014fce:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8014fd0:	2301      	movs	r3, #1
 8014fd2:	6013      	str	r3, [r2, #0]
 8014fd4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8014fd6:	b113      	cbz	r3, 8014fde <_dtoa_r+0xc6>
 8014fd8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8014fda:	4b84      	ldr	r3, [pc, #528]	@ (80151ec <_dtoa_r+0x2d4>)
 8014fdc:	6013      	str	r3, [r2, #0]
 8014fde:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8015200 <_dtoa_r+0x2e8>
 8014fe2:	f000 bd33 	b.w	8015a4c <_dtoa_r+0xb34>
 8014fe6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8014fea:	aa16      	add	r2, sp, #88	@ 0x58
 8014fec:	a917      	add	r1, sp, #92	@ 0x5c
 8014fee:	4658      	mov	r0, fp
 8014ff0:	f001 f980 	bl	80162f4 <__d2b>
 8014ff4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8014ff8:	4681      	mov	r9, r0
 8014ffa:	2e00      	cmp	r6, #0
 8014ffc:	d077      	beq.n	80150ee <_dtoa_r+0x1d6>
 8014ffe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015000:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8015004:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015008:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801500c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8015010:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8015014:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8015018:	4619      	mov	r1, r3
 801501a:	2200      	movs	r2, #0
 801501c:	4b74      	ldr	r3, [pc, #464]	@ (80151f0 <_dtoa_r+0x2d8>)
 801501e:	f7eb f95b 	bl	80002d8 <__aeabi_dsub>
 8015022:	a369      	add	r3, pc, #420	@ (adr r3, 80151c8 <_dtoa_r+0x2b0>)
 8015024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015028:	f7eb fb0e 	bl	8000648 <__aeabi_dmul>
 801502c:	a368      	add	r3, pc, #416	@ (adr r3, 80151d0 <_dtoa_r+0x2b8>)
 801502e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015032:	f7eb f953 	bl	80002dc <__adddf3>
 8015036:	4604      	mov	r4, r0
 8015038:	4630      	mov	r0, r6
 801503a:	460d      	mov	r5, r1
 801503c:	f7eb fa9a 	bl	8000574 <__aeabi_i2d>
 8015040:	a365      	add	r3, pc, #404	@ (adr r3, 80151d8 <_dtoa_r+0x2c0>)
 8015042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015046:	f7eb faff 	bl	8000648 <__aeabi_dmul>
 801504a:	4602      	mov	r2, r0
 801504c:	460b      	mov	r3, r1
 801504e:	4620      	mov	r0, r4
 8015050:	4629      	mov	r1, r5
 8015052:	f7eb f943 	bl	80002dc <__adddf3>
 8015056:	4604      	mov	r4, r0
 8015058:	460d      	mov	r5, r1
 801505a:	f7eb fda5 	bl	8000ba8 <__aeabi_d2iz>
 801505e:	2200      	movs	r2, #0
 8015060:	4607      	mov	r7, r0
 8015062:	2300      	movs	r3, #0
 8015064:	4620      	mov	r0, r4
 8015066:	4629      	mov	r1, r5
 8015068:	f7eb fd60 	bl	8000b2c <__aeabi_dcmplt>
 801506c:	b140      	cbz	r0, 8015080 <_dtoa_r+0x168>
 801506e:	4638      	mov	r0, r7
 8015070:	f7eb fa80 	bl	8000574 <__aeabi_i2d>
 8015074:	4622      	mov	r2, r4
 8015076:	462b      	mov	r3, r5
 8015078:	f7eb fd4e 	bl	8000b18 <__aeabi_dcmpeq>
 801507c:	b900      	cbnz	r0, 8015080 <_dtoa_r+0x168>
 801507e:	3f01      	subs	r7, #1
 8015080:	2f16      	cmp	r7, #22
 8015082:	d851      	bhi.n	8015128 <_dtoa_r+0x210>
 8015084:	4b5b      	ldr	r3, [pc, #364]	@ (80151f4 <_dtoa_r+0x2dc>)
 8015086:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801508a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801508e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8015092:	f7eb fd4b 	bl	8000b2c <__aeabi_dcmplt>
 8015096:	2800      	cmp	r0, #0
 8015098:	d048      	beq.n	801512c <_dtoa_r+0x214>
 801509a:	3f01      	subs	r7, #1
 801509c:	2300      	movs	r3, #0
 801509e:	9312      	str	r3, [sp, #72]	@ 0x48
 80150a0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80150a2:	1b9b      	subs	r3, r3, r6
 80150a4:	1e5a      	subs	r2, r3, #1
 80150a6:	bf44      	itt	mi
 80150a8:	f1c3 0801 	rsbmi	r8, r3, #1
 80150ac:	2300      	movmi	r3, #0
 80150ae:	9208      	str	r2, [sp, #32]
 80150b0:	bf54      	ite	pl
 80150b2:	f04f 0800 	movpl.w	r8, #0
 80150b6:	9308      	strmi	r3, [sp, #32]
 80150b8:	2f00      	cmp	r7, #0
 80150ba:	db39      	blt.n	8015130 <_dtoa_r+0x218>
 80150bc:	9b08      	ldr	r3, [sp, #32]
 80150be:	970f      	str	r7, [sp, #60]	@ 0x3c
 80150c0:	443b      	add	r3, r7
 80150c2:	9308      	str	r3, [sp, #32]
 80150c4:	2300      	movs	r3, #0
 80150c6:	930a      	str	r3, [sp, #40]	@ 0x28
 80150c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80150ca:	2b09      	cmp	r3, #9
 80150cc:	d864      	bhi.n	8015198 <_dtoa_r+0x280>
 80150ce:	2b05      	cmp	r3, #5
 80150d0:	bfc4      	itt	gt
 80150d2:	3b04      	subgt	r3, #4
 80150d4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80150d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80150d8:	f1a3 0302 	sub.w	r3, r3, #2
 80150dc:	bfcc      	ite	gt
 80150de:	2400      	movgt	r4, #0
 80150e0:	2401      	movle	r4, #1
 80150e2:	2b03      	cmp	r3, #3
 80150e4:	d863      	bhi.n	80151ae <_dtoa_r+0x296>
 80150e6:	e8df f003 	tbb	[pc, r3]
 80150ea:	372a      	.short	0x372a
 80150ec:	5535      	.short	0x5535
 80150ee:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80150f2:	441e      	add	r6, r3
 80150f4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80150f8:	2b20      	cmp	r3, #32
 80150fa:	bfc1      	itttt	gt
 80150fc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8015100:	409f      	lslgt	r7, r3
 8015102:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8015106:	fa24 f303 	lsrgt.w	r3, r4, r3
 801510a:	bfd6      	itet	le
 801510c:	f1c3 0320 	rsble	r3, r3, #32
 8015110:	ea47 0003 	orrgt.w	r0, r7, r3
 8015114:	fa04 f003 	lslle.w	r0, r4, r3
 8015118:	f7eb fa1c 	bl	8000554 <__aeabi_ui2d>
 801511c:	2201      	movs	r2, #1
 801511e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8015122:	3e01      	subs	r6, #1
 8015124:	9214      	str	r2, [sp, #80]	@ 0x50
 8015126:	e777      	b.n	8015018 <_dtoa_r+0x100>
 8015128:	2301      	movs	r3, #1
 801512a:	e7b8      	b.n	801509e <_dtoa_r+0x186>
 801512c:	9012      	str	r0, [sp, #72]	@ 0x48
 801512e:	e7b7      	b.n	80150a0 <_dtoa_r+0x188>
 8015130:	427b      	negs	r3, r7
 8015132:	930a      	str	r3, [sp, #40]	@ 0x28
 8015134:	2300      	movs	r3, #0
 8015136:	eba8 0807 	sub.w	r8, r8, r7
 801513a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801513c:	e7c4      	b.n	80150c8 <_dtoa_r+0x1b0>
 801513e:	2300      	movs	r3, #0
 8015140:	930b      	str	r3, [sp, #44]	@ 0x2c
 8015142:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015144:	2b00      	cmp	r3, #0
 8015146:	dc35      	bgt.n	80151b4 <_dtoa_r+0x29c>
 8015148:	2301      	movs	r3, #1
 801514a:	9300      	str	r3, [sp, #0]
 801514c:	9307      	str	r3, [sp, #28]
 801514e:	461a      	mov	r2, r3
 8015150:	920e      	str	r2, [sp, #56]	@ 0x38
 8015152:	e00b      	b.n	801516c <_dtoa_r+0x254>
 8015154:	2301      	movs	r3, #1
 8015156:	e7f3      	b.n	8015140 <_dtoa_r+0x228>
 8015158:	2300      	movs	r3, #0
 801515a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801515c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801515e:	18fb      	adds	r3, r7, r3
 8015160:	9300      	str	r3, [sp, #0]
 8015162:	3301      	adds	r3, #1
 8015164:	2b01      	cmp	r3, #1
 8015166:	9307      	str	r3, [sp, #28]
 8015168:	bfb8      	it	lt
 801516a:	2301      	movlt	r3, #1
 801516c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8015170:	2100      	movs	r1, #0
 8015172:	2204      	movs	r2, #4
 8015174:	f102 0514 	add.w	r5, r2, #20
 8015178:	429d      	cmp	r5, r3
 801517a:	d91f      	bls.n	80151bc <_dtoa_r+0x2a4>
 801517c:	6041      	str	r1, [r0, #4]
 801517e:	4658      	mov	r0, fp
 8015180:	f000 fd8e 	bl	8015ca0 <_Balloc>
 8015184:	4682      	mov	sl, r0
 8015186:	2800      	cmp	r0, #0
 8015188:	d13c      	bne.n	8015204 <_dtoa_r+0x2ec>
 801518a:	4b1b      	ldr	r3, [pc, #108]	@ (80151f8 <_dtoa_r+0x2e0>)
 801518c:	4602      	mov	r2, r0
 801518e:	f240 11af 	movw	r1, #431	@ 0x1af
 8015192:	e6d8      	b.n	8014f46 <_dtoa_r+0x2e>
 8015194:	2301      	movs	r3, #1
 8015196:	e7e0      	b.n	801515a <_dtoa_r+0x242>
 8015198:	2401      	movs	r4, #1
 801519a:	2300      	movs	r3, #0
 801519c:	9309      	str	r3, [sp, #36]	@ 0x24
 801519e:	940b      	str	r4, [sp, #44]	@ 0x2c
 80151a0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80151a4:	9300      	str	r3, [sp, #0]
 80151a6:	9307      	str	r3, [sp, #28]
 80151a8:	2200      	movs	r2, #0
 80151aa:	2312      	movs	r3, #18
 80151ac:	e7d0      	b.n	8015150 <_dtoa_r+0x238>
 80151ae:	2301      	movs	r3, #1
 80151b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80151b2:	e7f5      	b.n	80151a0 <_dtoa_r+0x288>
 80151b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80151b6:	9300      	str	r3, [sp, #0]
 80151b8:	9307      	str	r3, [sp, #28]
 80151ba:	e7d7      	b.n	801516c <_dtoa_r+0x254>
 80151bc:	3101      	adds	r1, #1
 80151be:	0052      	lsls	r2, r2, #1
 80151c0:	e7d8      	b.n	8015174 <_dtoa_r+0x25c>
 80151c2:	bf00      	nop
 80151c4:	f3af 8000 	nop.w
 80151c8:	636f4361 	.word	0x636f4361
 80151cc:	3fd287a7 	.word	0x3fd287a7
 80151d0:	8b60c8b3 	.word	0x8b60c8b3
 80151d4:	3fc68a28 	.word	0x3fc68a28
 80151d8:	509f79fb 	.word	0x509f79fb
 80151dc:	3fd34413 	.word	0x3fd34413
 80151e0:	08017539 	.word	0x08017539
 80151e4:	08017550 	.word	0x08017550
 80151e8:	7ff00000 	.word	0x7ff00000
 80151ec:	08017509 	.word	0x08017509
 80151f0:	3ff80000 	.word	0x3ff80000
 80151f4:	08017648 	.word	0x08017648
 80151f8:	080175a8 	.word	0x080175a8
 80151fc:	08017535 	.word	0x08017535
 8015200:	08017508 	.word	0x08017508
 8015204:	f8db 301c 	ldr.w	r3, [fp, #28]
 8015208:	6018      	str	r0, [r3, #0]
 801520a:	9b07      	ldr	r3, [sp, #28]
 801520c:	2b0e      	cmp	r3, #14
 801520e:	f200 80a4 	bhi.w	801535a <_dtoa_r+0x442>
 8015212:	2c00      	cmp	r4, #0
 8015214:	f000 80a1 	beq.w	801535a <_dtoa_r+0x442>
 8015218:	2f00      	cmp	r7, #0
 801521a:	dd33      	ble.n	8015284 <_dtoa_r+0x36c>
 801521c:	4bad      	ldr	r3, [pc, #692]	@ (80154d4 <_dtoa_r+0x5bc>)
 801521e:	f007 020f 	and.w	r2, r7, #15
 8015222:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015226:	ed93 7b00 	vldr	d7, [r3]
 801522a:	05f8      	lsls	r0, r7, #23
 801522c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8015230:	ea4f 1427 	mov.w	r4, r7, asr #4
 8015234:	d516      	bpl.n	8015264 <_dtoa_r+0x34c>
 8015236:	4ba8      	ldr	r3, [pc, #672]	@ (80154d8 <_dtoa_r+0x5c0>)
 8015238:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801523c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8015240:	f7eb fb2c 	bl	800089c <__aeabi_ddiv>
 8015244:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015248:	f004 040f 	and.w	r4, r4, #15
 801524c:	2603      	movs	r6, #3
 801524e:	4da2      	ldr	r5, [pc, #648]	@ (80154d8 <_dtoa_r+0x5c0>)
 8015250:	b954      	cbnz	r4, 8015268 <_dtoa_r+0x350>
 8015252:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015256:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801525a:	f7eb fb1f 	bl	800089c <__aeabi_ddiv>
 801525e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015262:	e028      	b.n	80152b6 <_dtoa_r+0x39e>
 8015264:	2602      	movs	r6, #2
 8015266:	e7f2      	b.n	801524e <_dtoa_r+0x336>
 8015268:	07e1      	lsls	r1, r4, #31
 801526a:	d508      	bpl.n	801527e <_dtoa_r+0x366>
 801526c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015270:	e9d5 2300 	ldrd	r2, r3, [r5]
 8015274:	f7eb f9e8 	bl	8000648 <__aeabi_dmul>
 8015278:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801527c:	3601      	adds	r6, #1
 801527e:	1064      	asrs	r4, r4, #1
 8015280:	3508      	adds	r5, #8
 8015282:	e7e5      	b.n	8015250 <_dtoa_r+0x338>
 8015284:	f000 80d2 	beq.w	801542c <_dtoa_r+0x514>
 8015288:	427c      	negs	r4, r7
 801528a:	4b92      	ldr	r3, [pc, #584]	@ (80154d4 <_dtoa_r+0x5bc>)
 801528c:	4d92      	ldr	r5, [pc, #584]	@ (80154d8 <_dtoa_r+0x5c0>)
 801528e:	f004 020f 	and.w	r2, r4, #15
 8015292:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015296:	e9d3 2300 	ldrd	r2, r3, [r3]
 801529a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801529e:	f7eb f9d3 	bl	8000648 <__aeabi_dmul>
 80152a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80152a6:	1124      	asrs	r4, r4, #4
 80152a8:	2300      	movs	r3, #0
 80152aa:	2602      	movs	r6, #2
 80152ac:	2c00      	cmp	r4, #0
 80152ae:	f040 80b2 	bne.w	8015416 <_dtoa_r+0x4fe>
 80152b2:	2b00      	cmp	r3, #0
 80152b4:	d1d3      	bne.n	801525e <_dtoa_r+0x346>
 80152b6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80152b8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80152bc:	2b00      	cmp	r3, #0
 80152be:	f000 80b7 	beq.w	8015430 <_dtoa_r+0x518>
 80152c2:	4b86      	ldr	r3, [pc, #536]	@ (80154dc <_dtoa_r+0x5c4>)
 80152c4:	2200      	movs	r2, #0
 80152c6:	4620      	mov	r0, r4
 80152c8:	4629      	mov	r1, r5
 80152ca:	f7eb fc2f 	bl	8000b2c <__aeabi_dcmplt>
 80152ce:	2800      	cmp	r0, #0
 80152d0:	f000 80ae 	beq.w	8015430 <_dtoa_r+0x518>
 80152d4:	9b07      	ldr	r3, [sp, #28]
 80152d6:	2b00      	cmp	r3, #0
 80152d8:	f000 80aa 	beq.w	8015430 <_dtoa_r+0x518>
 80152dc:	9b00      	ldr	r3, [sp, #0]
 80152de:	2b00      	cmp	r3, #0
 80152e0:	dd37      	ble.n	8015352 <_dtoa_r+0x43a>
 80152e2:	1e7b      	subs	r3, r7, #1
 80152e4:	9304      	str	r3, [sp, #16]
 80152e6:	4620      	mov	r0, r4
 80152e8:	4b7d      	ldr	r3, [pc, #500]	@ (80154e0 <_dtoa_r+0x5c8>)
 80152ea:	2200      	movs	r2, #0
 80152ec:	4629      	mov	r1, r5
 80152ee:	f7eb f9ab 	bl	8000648 <__aeabi_dmul>
 80152f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80152f6:	9c00      	ldr	r4, [sp, #0]
 80152f8:	3601      	adds	r6, #1
 80152fa:	4630      	mov	r0, r6
 80152fc:	f7eb f93a 	bl	8000574 <__aeabi_i2d>
 8015300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015304:	f7eb f9a0 	bl	8000648 <__aeabi_dmul>
 8015308:	4b76      	ldr	r3, [pc, #472]	@ (80154e4 <_dtoa_r+0x5cc>)
 801530a:	2200      	movs	r2, #0
 801530c:	f7ea ffe6 	bl	80002dc <__adddf3>
 8015310:	4605      	mov	r5, r0
 8015312:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8015316:	2c00      	cmp	r4, #0
 8015318:	f040 808d 	bne.w	8015436 <_dtoa_r+0x51e>
 801531c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015320:	4b71      	ldr	r3, [pc, #452]	@ (80154e8 <_dtoa_r+0x5d0>)
 8015322:	2200      	movs	r2, #0
 8015324:	f7ea ffd8 	bl	80002d8 <__aeabi_dsub>
 8015328:	4602      	mov	r2, r0
 801532a:	460b      	mov	r3, r1
 801532c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8015330:	462a      	mov	r2, r5
 8015332:	4633      	mov	r3, r6
 8015334:	f7eb fc18 	bl	8000b68 <__aeabi_dcmpgt>
 8015338:	2800      	cmp	r0, #0
 801533a:	f040 828b 	bne.w	8015854 <_dtoa_r+0x93c>
 801533e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015342:	462a      	mov	r2, r5
 8015344:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8015348:	f7eb fbf0 	bl	8000b2c <__aeabi_dcmplt>
 801534c:	2800      	cmp	r0, #0
 801534e:	f040 8128 	bne.w	80155a2 <_dtoa_r+0x68a>
 8015352:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8015356:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801535a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801535c:	2b00      	cmp	r3, #0
 801535e:	f2c0 815a 	blt.w	8015616 <_dtoa_r+0x6fe>
 8015362:	2f0e      	cmp	r7, #14
 8015364:	f300 8157 	bgt.w	8015616 <_dtoa_r+0x6fe>
 8015368:	4b5a      	ldr	r3, [pc, #360]	@ (80154d4 <_dtoa_r+0x5bc>)
 801536a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801536e:	ed93 7b00 	vldr	d7, [r3]
 8015372:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015374:	2b00      	cmp	r3, #0
 8015376:	ed8d 7b00 	vstr	d7, [sp]
 801537a:	da03      	bge.n	8015384 <_dtoa_r+0x46c>
 801537c:	9b07      	ldr	r3, [sp, #28]
 801537e:	2b00      	cmp	r3, #0
 8015380:	f340 8101 	ble.w	8015586 <_dtoa_r+0x66e>
 8015384:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8015388:	4656      	mov	r6, sl
 801538a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801538e:	4620      	mov	r0, r4
 8015390:	4629      	mov	r1, r5
 8015392:	f7eb fa83 	bl	800089c <__aeabi_ddiv>
 8015396:	f7eb fc07 	bl	8000ba8 <__aeabi_d2iz>
 801539a:	4680      	mov	r8, r0
 801539c:	f7eb f8ea 	bl	8000574 <__aeabi_i2d>
 80153a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80153a4:	f7eb f950 	bl	8000648 <__aeabi_dmul>
 80153a8:	4602      	mov	r2, r0
 80153aa:	460b      	mov	r3, r1
 80153ac:	4620      	mov	r0, r4
 80153ae:	4629      	mov	r1, r5
 80153b0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80153b4:	f7ea ff90 	bl	80002d8 <__aeabi_dsub>
 80153b8:	f806 4b01 	strb.w	r4, [r6], #1
 80153bc:	9d07      	ldr	r5, [sp, #28]
 80153be:	eba6 040a 	sub.w	r4, r6, sl
 80153c2:	42a5      	cmp	r5, r4
 80153c4:	4602      	mov	r2, r0
 80153c6:	460b      	mov	r3, r1
 80153c8:	f040 8117 	bne.w	80155fa <_dtoa_r+0x6e2>
 80153cc:	f7ea ff86 	bl	80002dc <__adddf3>
 80153d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80153d4:	4604      	mov	r4, r0
 80153d6:	460d      	mov	r5, r1
 80153d8:	f7eb fbc6 	bl	8000b68 <__aeabi_dcmpgt>
 80153dc:	2800      	cmp	r0, #0
 80153de:	f040 80f9 	bne.w	80155d4 <_dtoa_r+0x6bc>
 80153e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80153e6:	4620      	mov	r0, r4
 80153e8:	4629      	mov	r1, r5
 80153ea:	f7eb fb95 	bl	8000b18 <__aeabi_dcmpeq>
 80153ee:	b118      	cbz	r0, 80153f8 <_dtoa_r+0x4e0>
 80153f0:	f018 0f01 	tst.w	r8, #1
 80153f4:	f040 80ee 	bne.w	80155d4 <_dtoa_r+0x6bc>
 80153f8:	4649      	mov	r1, r9
 80153fa:	4658      	mov	r0, fp
 80153fc:	f000 fc90 	bl	8015d20 <_Bfree>
 8015400:	2300      	movs	r3, #0
 8015402:	7033      	strb	r3, [r6, #0]
 8015404:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8015406:	3701      	adds	r7, #1
 8015408:	601f      	str	r7, [r3, #0]
 801540a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801540c:	2b00      	cmp	r3, #0
 801540e:	f000 831d 	beq.w	8015a4c <_dtoa_r+0xb34>
 8015412:	601e      	str	r6, [r3, #0]
 8015414:	e31a      	b.n	8015a4c <_dtoa_r+0xb34>
 8015416:	07e2      	lsls	r2, r4, #31
 8015418:	d505      	bpl.n	8015426 <_dtoa_r+0x50e>
 801541a:	e9d5 2300 	ldrd	r2, r3, [r5]
 801541e:	f7eb f913 	bl	8000648 <__aeabi_dmul>
 8015422:	3601      	adds	r6, #1
 8015424:	2301      	movs	r3, #1
 8015426:	1064      	asrs	r4, r4, #1
 8015428:	3508      	adds	r5, #8
 801542a:	e73f      	b.n	80152ac <_dtoa_r+0x394>
 801542c:	2602      	movs	r6, #2
 801542e:	e742      	b.n	80152b6 <_dtoa_r+0x39e>
 8015430:	9c07      	ldr	r4, [sp, #28]
 8015432:	9704      	str	r7, [sp, #16]
 8015434:	e761      	b.n	80152fa <_dtoa_r+0x3e2>
 8015436:	4b27      	ldr	r3, [pc, #156]	@ (80154d4 <_dtoa_r+0x5bc>)
 8015438:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801543a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801543e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8015442:	4454      	add	r4, sl
 8015444:	2900      	cmp	r1, #0
 8015446:	d053      	beq.n	80154f0 <_dtoa_r+0x5d8>
 8015448:	4928      	ldr	r1, [pc, #160]	@ (80154ec <_dtoa_r+0x5d4>)
 801544a:	2000      	movs	r0, #0
 801544c:	f7eb fa26 	bl	800089c <__aeabi_ddiv>
 8015450:	4633      	mov	r3, r6
 8015452:	462a      	mov	r2, r5
 8015454:	f7ea ff40 	bl	80002d8 <__aeabi_dsub>
 8015458:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801545c:	4656      	mov	r6, sl
 801545e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015462:	f7eb fba1 	bl	8000ba8 <__aeabi_d2iz>
 8015466:	4605      	mov	r5, r0
 8015468:	f7eb f884 	bl	8000574 <__aeabi_i2d>
 801546c:	4602      	mov	r2, r0
 801546e:	460b      	mov	r3, r1
 8015470:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015474:	f7ea ff30 	bl	80002d8 <__aeabi_dsub>
 8015478:	3530      	adds	r5, #48	@ 0x30
 801547a:	4602      	mov	r2, r0
 801547c:	460b      	mov	r3, r1
 801547e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8015482:	f806 5b01 	strb.w	r5, [r6], #1
 8015486:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801548a:	f7eb fb4f 	bl	8000b2c <__aeabi_dcmplt>
 801548e:	2800      	cmp	r0, #0
 8015490:	d171      	bne.n	8015576 <_dtoa_r+0x65e>
 8015492:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015496:	4911      	ldr	r1, [pc, #68]	@ (80154dc <_dtoa_r+0x5c4>)
 8015498:	2000      	movs	r0, #0
 801549a:	f7ea ff1d 	bl	80002d8 <__aeabi_dsub>
 801549e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80154a2:	f7eb fb43 	bl	8000b2c <__aeabi_dcmplt>
 80154a6:	2800      	cmp	r0, #0
 80154a8:	f040 8095 	bne.w	80155d6 <_dtoa_r+0x6be>
 80154ac:	42a6      	cmp	r6, r4
 80154ae:	f43f af50 	beq.w	8015352 <_dtoa_r+0x43a>
 80154b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80154b6:	4b0a      	ldr	r3, [pc, #40]	@ (80154e0 <_dtoa_r+0x5c8>)
 80154b8:	2200      	movs	r2, #0
 80154ba:	f7eb f8c5 	bl	8000648 <__aeabi_dmul>
 80154be:	4b08      	ldr	r3, [pc, #32]	@ (80154e0 <_dtoa_r+0x5c8>)
 80154c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80154c4:	2200      	movs	r2, #0
 80154c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80154ca:	f7eb f8bd 	bl	8000648 <__aeabi_dmul>
 80154ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80154d2:	e7c4      	b.n	801545e <_dtoa_r+0x546>
 80154d4:	08017648 	.word	0x08017648
 80154d8:	08017620 	.word	0x08017620
 80154dc:	3ff00000 	.word	0x3ff00000
 80154e0:	40240000 	.word	0x40240000
 80154e4:	401c0000 	.word	0x401c0000
 80154e8:	40140000 	.word	0x40140000
 80154ec:	3fe00000 	.word	0x3fe00000
 80154f0:	4631      	mov	r1, r6
 80154f2:	4628      	mov	r0, r5
 80154f4:	f7eb f8a8 	bl	8000648 <__aeabi_dmul>
 80154f8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80154fc:	9415      	str	r4, [sp, #84]	@ 0x54
 80154fe:	4656      	mov	r6, sl
 8015500:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015504:	f7eb fb50 	bl	8000ba8 <__aeabi_d2iz>
 8015508:	4605      	mov	r5, r0
 801550a:	f7eb f833 	bl	8000574 <__aeabi_i2d>
 801550e:	4602      	mov	r2, r0
 8015510:	460b      	mov	r3, r1
 8015512:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015516:	f7ea fedf 	bl	80002d8 <__aeabi_dsub>
 801551a:	3530      	adds	r5, #48	@ 0x30
 801551c:	f806 5b01 	strb.w	r5, [r6], #1
 8015520:	4602      	mov	r2, r0
 8015522:	460b      	mov	r3, r1
 8015524:	42a6      	cmp	r6, r4
 8015526:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801552a:	f04f 0200 	mov.w	r2, #0
 801552e:	d124      	bne.n	801557a <_dtoa_r+0x662>
 8015530:	4bac      	ldr	r3, [pc, #688]	@ (80157e4 <_dtoa_r+0x8cc>)
 8015532:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8015536:	f7ea fed1 	bl	80002dc <__adddf3>
 801553a:	4602      	mov	r2, r0
 801553c:	460b      	mov	r3, r1
 801553e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015542:	f7eb fb11 	bl	8000b68 <__aeabi_dcmpgt>
 8015546:	2800      	cmp	r0, #0
 8015548:	d145      	bne.n	80155d6 <_dtoa_r+0x6be>
 801554a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801554e:	49a5      	ldr	r1, [pc, #660]	@ (80157e4 <_dtoa_r+0x8cc>)
 8015550:	2000      	movs	r0, #0
 8015552:	f7ea fec1 	bl	80002d8 <__aeabi_dsub>
 8015556:	4602      	mov	r2, r0
 8015558:	460b      	mov	r3, r1
 801555a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801555e:	f7eb fae5 	bl	8000b2c <__aeabi_dcmplt>
 8015562:	2800      	cmp	r0, #0
 8015564:	f43f aef5 	beq.w	8015352 <_dtoa_r+0x43a>
 8015568:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 801556a:	1e73      	subs	r3, r6, #1
 801556c:	9315      	str	r3, [sp, #84]	@ 0x54
 801556e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8015572:	2b30      	cmp	r3, #48	@ 0x30
 8015574:	d0f8      	beq.n	8015568 <_dtoa_r+0x650>
 8015576:	9f04      	ldr	r7, [sp, #16]
 8015578:	e73e      	b.n	80153f8 <_dtoa_r+0x4e0>
 801557a:	4b9b      	ldr	r3, [pc, #620]	@ (80157e8 <_dtoa_r+0x8d0>)
 801557c:	f7eb f864 	bl	8000648 <__aeabi_dmul>
 8015580:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015584:	e7bc      	b.n	8015500 <_dtoa_r+0x5e8>
 8015586:	d10c      	bne.n	80155a2 <_dtoa_r+0x68a>
 8015588:	4b98      	ldr	r3, [pc, #608]	@ (80157ec <_dtoa_r+0x8d4>)
 801558a:	2200      	movs	r2, #0
 801558c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015590:	f7eb f85a 	bl	8000648 <__aeabi_dmul>
 8015594:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015598:	f7eb fadc 	bl	8000b54 <__aeabi_dcmpge>
 801559c:	2800      	cmp	r0, #0
 801559e:	f000 8157 	beq.w	8015850 <_dtoa_r+0x938>
 80155a2:	2400      	movs	r4, #0
 80155a4:	4625      	mov	r5, r4
 80155a6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80155a8:	43db      	mvns	r3, r3
 80155aa:	9304      	str	r3, [sp, #16]
 80155ac:	4656      	mov	r6, sl
 80155ae:	2700      	movs	r7, #0
 80155b0:	4621      	mov	r1, r4
 80155b2:	4658      	mov	r0, fp
 80155b4:	f000 fbb4 	bl	8015d20 <_Bfree>
 80155b8:	2d00      	cmp	r5, #0
 80155ba:	d0dc      	beq.n	8015576 <_dtoa_r+0x65e>
 80155bc:	b12f      	cbz	r7, 80155ca <_dtoa_r+0x6b2>
 80155be:	42af      	cmp	r7, r5
 80155c0:	d003      	beq.n	80155ca <_dtoa_r+0x6b2>
 80155c2:	4639      	mov	r1, r7
 80155c4:	4658      	mov	r0, fp
 80155c6:	f000 fbab 	bl	8015d20 <_Bfree>
 80155ca:	4629      	mov	r1, r5
 80155cc:	4658      	mov	r0, fp
 80155ce:	f000 fba7 	bl	8015d20 <_Bfree>
 80155d2:	e7d0      	b.n	8015576 <_dtoa_r+0x65e>
 80155d4:	9704      	str	r7, [sp, #16]
 80155d6:	4633      	mov	r3, r6
 80155d8:	461e      	mov	r6, r3
 80155da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80155de:	2a39      	cmp	r2, #57	@ 0x39
 80155e0:	d107      	bne.n	80155f2 <_dtoa_r+0x6da>
 80155e2:	459a      	cmp	sl, r3
 80155e4:	d1f8      	bne.n	80155d8 <_dtoa_r+0x6c0>
 80155e6:	9a04      	ldr	r2, [sp, #16]
 80155e8:	3201      	adds	r2, #1
 80155ea:	9204      	str	r2, [sp, #16]
 80155ec:	2230      	movs	r2, #48	@ 0x30
 80155ee:	f88a 2000 	strb.w	r2, [sl]
 80155f2:	781a      	ldrb	r2, [r3, #0]
 80155f4:	3201      	adds	r2, #1
 80155f6:	701a      	strb	r2, [r3, #0]
 80155f8:	e7bd      	b.n	8015576 <_dtoa_r+0x65e>
 80155fa:	4b7b      	ldr	r3, [pc, #492]	@ (80157e8 <_dtoa_r+0x8d0>)
 80155fc:	2200      	movs	r2, #0
 80155fe:	f7eb f823 	bl	8000648 <__aeabi_dmul>
 8015602:	2200      	movs	r2, #0
 8015604:	2300      	movs	r3, #0
 8015606:	4604      	mov	r4, r0
 8015608:	460d      	mov	r5, r1
 801560a:	f7eb fa85 	bl	8000b18 <__aeabi_dcmpeq>
 801560e:	2800      	cmp	r0, #0
 8015610:	f43f aebb 	beq.w	801538a <_dtoa_r+0x472>
 8015614:	e6f0      	b.n	80153f8 <_dtoa_r+0x4e0>
 8015616:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8015618:	2a00      	cmp	r2, #0
 801561a:	f000 80db 	beq.w	80157d4 <_dtoa_r+0x8bc>
 801561e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015620:	2a01      	cmp	r2, #1
 8015622:	f300 80bf 	bgt.w	80157a4 <_dtoa_r+0x88c>
 8015626:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8015628:	2a00      	cmp	r2, #0
 801562a:	f000 80b7 	beq.w	801579c <_dtoa_r+0x884>
 801562e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8015632:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8015634:	4646      	mov	r6, r8
 8015636:	9a08      	ldr	r2, [sp, #32]
 8015638:	2101      	movs	r1, #1
 801563a:	441a      	add	r2, r3
 801563c:	4658      	mov	r0, fp
 801563e:	4498      	add	r8, r3
 8015640:	9208      	str	r2, [sp, #32]
 8015642:	f000 fc21 	bl	8015e88 <__i2b>
 8015646:	4605      	mov	r5, r0
 8015648:	b15e      	cbz	r6, 8015662 <_dtoa_r+0x74a>
 801564a:	9b08      	ldr	r3, [sp, #32]
 801564c:	2b00      	cmp	r3, #0
 801564e:	dd08      	ble.n	8015662 <_dtoa_r+0x74a>
 8015650:	42b3      	cmp	r3, r6
 8015652:	9a08      	ldr	r2, [sp, #32]
 8015654:	bfa8      	it	ge
 8015656:	4633      	movge	r3, r6
 8015658:	eba8 0803 	sub.w	r8, r8, r3
 801565c:	1af6      	subs	r6, r6, r3
 801565e:	1ad3      	subs	r3, r2, r3
 8015660:	9308      	str	r3, [sp, #32]
 8015662:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015664:	b1f3      	cbz	r3, 80156a4 <_dtoa_r+0x78c>
 8015666:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8015668:	2b00      	cmp	r3, #0
 801566a:	f000 80b7 	beq.w	80157dc <_dtoa_r+0x8c4>
 801566e:	b18c      	cbz	r4, 8015694 <_dtoa_r+0x77c>
 8015670:	4629      	mov	r1, r5
 8015672:	4622      	mov	r2, r4
 8015674:	4658      	mov	r0, fp
 8015676:	f000 fcc7 	bl	8016008 <__pow5mult>
 801567a:	464a      	mov	r2, r9
 801567c:	4601      	mov	r1, r0
 801567e:	4605      	mov	r5, r0
 8015680:	4658      	mov	r0, fp
 8015682:	f000 fc17 	bl	8015eb4 <__multiply>
 8015686:	4649      	mov	r1, r9
 8015688:	9004      	str	r0, [sp, #16]
 801568a:	4658      	mov	r0, fp
 801568c:	f000 fb48 	bl	8015d20 <_Bfree>
 8015690:	9b04      	ldr	r3, [sp, #16]
 8015692:	4699      	mov	r9, r3
 8015694:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015696:	1b1a      	subs	r2, r3, r4
 8015698:	d004      	beq.n	80156a4 <_dtoa_r+0x78c>
 801569a:	4649      	mov	r1, r9
 801569c:	4658      	mov	r0, fp
 801569e:	f000 fcb3 	bl	8016008 <__pow5mult>
 80156a2:	4681      	mov	r9, r0
 80156a4:	2101      	movs	r1, #1
 80156a6:	4658      	mov	r0, fp
 80156a8:	f000 fbee 	bl	8015e88 <__i2b>
 80156ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80156ae:	4604      	mov	r4, r0
 80156b0:	2b00      	cmp	r3, #0
 80156b2:	f000 81cf 	beq.w	8015a54 <_dtoa_r+0xb3c>
 80156b6:	461a      	mov	r2, r3
 80156b8:	4601      	mov	r1, r0
 80156ba:	4658      	mov	r0, fp
 80156bc:	f000 fca4 	bl	8016008 <__pow5mult>
 80156c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80156c2:	2b01      	cmp	r3, #1
 80156c4:	4604      	mov	r4, r0
 80156c6:	f300 8095 	bgt.w	80157f4 <_dtoa_r+0x8dc>
 80156ca:	9b02      	ldr	r3, [sp, #8]
 80156cc:	2b00      	cmp	r3, #0
 80156ce:	f040 8087 	bne.w	80157e0 <_dtoa_r+0x8c8>
 80156d2:	9b03      	ldr	r3, [sp, #12]
 80156d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80156d8:	2b00      	cmp	r3, #0
 80156da:	f040 8089 	bne.w	80157f0 <_dtoa_r+0x8d8>
 80156de:	9b03      	ldr	r3, [sp, #12]
 80156e0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80156e4:	0d1b      	lsrs	r3, r3, #20
 80156e6:	051b      	lsls	r3, r3, #20
 80156e8:	b12b      	cbz	r3, 80156f6 <_dtoa_r+0x7de>
 80156ea:	9b08      	ldr	r3, [sp, #32]
 80156ec:	3301      	adds	r3, #1
 80156ee:	9308      	str	r3, [sp, #32]
 80156f0:	f108 0801 	add.w	r8, r8, #1
 80156f4:	2301      	movs	r3, #1
 80156f6:	930a      	str	r3, [sp, #40]	@ 0x28
 80156f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80156fa:	2b00      	cmp	r3, #0
 80156fc:	f000 81b0 	beq.w	8015a60 <_dtoa_r+0xb48>
 8015700:	6923      	ldr	r3, [r4, #16]
 8015702:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8015706:	6918      	ldr	r0, [r3, #16]
 8015708:	f000 fb72 	bl	8015df0 <__hi0bits>
 801570c:	f1c0 0020 	rsb	r0, r0, #32
 8015710:	9b08      	ldr	r3, [sp, #32]
 8015712:	4418      	add	r0, r3
 8015714:	f010 001f 	ands.w	r0, r0, #31
 8015718:	d077      	beq.n	801580a <_dtoa_r+0x8f2>
 801571a:	f1c0 0320 	rsb	r3, r0, #32
 801571e:	2b04      	cmp	r3, #4
 8015720:	dd6b      	ble.n	80157fa <_dtoa_r+0x8e2>
 8015722:	9b08      	ldr	r3, [sp, #32]
 8015724:	f1c0 001c 	rsb	r0, r0, #28
 8015728:	4403      	add	r3, r0
 801572a:	4480      	add	r8, r0
 801572c:	4406      	add	r6, r0
 801572e:	9308      	str	r3, [sp, #32]
 8015730:	f1b8 0f00 	cmp.w	r8, #0
 8015734:	dd05      	ble.n	8015742 <_dtoa_r+0x82a>
 8015736:	4649      	mov	r1, r9
 8015738:	4642      	mov	r2, r8
 801573a:	4658      	mov	r0, fp
 801573c:	f000 fcbe 	bl	80160bc <__lshift>
 8015740:	4681      	mov	r9, r0
 8015742:	9b08      	ldr	r3, [sp, #32]
 8015744:	2b00      	cmp	r3, #0
 8015746:	dd05      	ble.n	8015754 <_dtoa_r+0x83c>
 8015748:	4621      	mov	r1, r4
 801574a:	461a      	mov	r2, r3
 801574c:	4658      	mov	r0, fp
 801574e:	f000 fcb5 	bl	80160bc <__lshift>
 8015752:	4604      	mov	r4, r0
 8015754:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8015756:	2b00      	cmp	r3, #0
 8015758:	d059      	beq.n	801580e <_dtoa_r+0x8f6>
 801575a:	4621      	mov	r1, r4
 801575c:	4648      	mov	r0, r9
 801575e:	f000 fd19 	bl	8016194 <__mcmp>
 8015762:	2800      	cmp	r0, #0
 8015764:	da53      	bge.n	801580e <_dtoa_r+0x8f6>
 8015766:	1e7b      	subs	r3, r7, #1
 8015768:	9304      	str	r3, [sp, #16]
 801576a:	4649      	mov	r1, r9
 801576c:	2300      	movs	r3, #0
 801576e:	220a      	movs	r2, #10
 8015770:	4658      	mov	r0, fp
 8015772:	f000 faf7 	bl	8015d64 <__multadd>
 8015776:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8015778:	4681      	mov	r9, r0
 801577a:	2b00      	cmp	r3, #0
 801577c:	f000 8172 	beq.w	8015a64 <_dtoa_r+0xb4c>
 8015780:	2300      	movs	r3, #0
 8015782:	4629      	mov	r1, r5
 8015784:	220a      	movs	r2, #10
 8015786:	4658      	mov	r0, fp
 8015788:	f000 faec 	bl	8015d64 <__multadd>
 801578c:	9b00      	ldr	r3, [sp, #0]
 801578e:	2b00      	cmp	r3, #0
 8015790:	4605      	mov	r5, r0
 8015792:	dc67      	bgt.n	8015864 <_dtoa_r+0x94c>
 8015794:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015796:	2b02      	cmp	r3, #2
 8015798:	dc41      	bgt.n	801581e <_dtoa_r+0x906>
 801579a:	e063      	b.n	8015864 <_dtoa_r+0x94c>
 801579c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801579e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80157a2:	e746      	b.n	8015632 <_dtoa_r+0x71a>
 80157a4:	9b07      	ldr	r3, [sp, #28]
 80157a6:	1e5c      	subs	r4, r3, #1
 80157a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80157aa:	42a3      	cmp	r3, r4
 80157ac:	bfbf      	itttt	lt
 80157ae:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80157b0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80157b2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80157b4:	1ae3      	sublt	r3, r4, r3
 80157b6:	bfb4      	ite	lt
 80157b8:	18d2      	addlt	r2, r2, r3
 80157ba:	1b1c      	subge	r4, r3, r4
 80157bc:	9b07      	ldr	r3, [sp, #28]
 80157be:	bfbc      	itt	lt
 80157c0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80157c2:	2400      	movlt	r4, #0
 80157c4:	2b00      	cmp	r3, #0
 80157c6:	bfb5      	itete	lt
 80157c8:	eba8 0603 	sublt.w	r6, r8, r3
 80157cc:	9b07      	ldrge	r3, [sp, #28]
 80157ce:	2300      	movlt	r3, #0
 80157d0:	4646      	movge	r6, r8
 80157d2:	e730      	b.n	8015636 <_dtoa_r+0x71e>
 80157d4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80157d6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80157d8:	4646      	mov	r6, r8
 80157da:	e735      	b.n	8015648 <_dtoa_r+0x730>
 80157dc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80157de:	e75c      	b.n	801569a <_dtoa_r+0x782>
 80157e0:	2300      	movs	r3, #0
 80157e2:	e788      	b.n	80156f6 <_dtoa_r+0x7de>
 80157e4:	3fe00000 	.word	0x3fe00000
 80157e8:	40240000 	.word	0x40240000
 80157ec:	40140000 	.word	0x40140000
 80157f0:	9b02      	ldr	r3, [sp, #8]
 80157f2:	e780      	b.n	80156f6 <_dtoa_r+0x7de>
 80157f4:	2300      	movs	r3, #0
 80157f6:	930a      	str	r3, [sp, #40]	@ 0x28
 80157f8:	e782      	b.n	8015700 <_dtoa_r+0x7e8>
 80157fa:	d099      	beq.n	8015730 <_dtoa_r+0x818>
 80157fc:	9a08      	ldr	r2, [sp, #32]
 80157fe:	331c      	adds	r3, #28
 8015800:	441a      	add	r2, r3
 8015802:	4498      	add	r8, r3
 8015804:	441e      	add	r6, r3
 8015806:	9208      	str	r2, [sp, #32]
 8015808:	e792      	b.n	8015730 <_dtoa_r+0x818>
 801580a:	4603      	mov	r3, r0
 801580c:	e7f6      	b.n	80157fc <_dtoa_r+0x8e4>
 801580e:	9b07      	ldr	r3, [sp, #28]
 8015810:	9704      	str	r7, [sp, #16]
 8015812:	2b00      	cmp	r3, #0
 8015814:	dc20      	bgt.n	8015858 <_dtoa_r+0x940>
 8015816:	9300      	str	r3, [sp, #0]
 8015818:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801581a:	2b02      	cmp	r3, #2
 801581c:	dd1e      	ble.n	801585c <_dtoa_r+0x944>
 801581e:	9b00      	ldr	r3, [sp, #0]
 8015820:	2b00      	cmp	r3, #0
 8015822:	f47f aec0 	bne.w	80155a6 <_dtoa_r+0x68e>
 8015826:	4621      	mov	r1, r4
 8015828:	2205      	movs	r2, #5
 801582a:	4658      	mov	r0, fp
 801582c:	f000 fa9a 	bl	8015d64 <__multadd>
 8015830:	4601      	mov	r1, r0
 8015832:	4604      	mov	r4, r0
 8015834:	4648      	mov	r0, r9
 8015836:	f000 fcad 	bl	8016194 <__mcmp>
 801583a:	2800      	cmp	r0, #0
 801583c:	f77f aeb3 	ble.w	80155a6 <_dtoa_r+0x68e>
 8015840:	4656      	mov	r6, sl
 8015842:	2331      	movs	r3, #49	@ 0x31
 8015844:	f806 3b01 	strb.w	r3, [r6], #1
 8015848:	9b04      	ldr	r3, [sp, #16]
 801584a:	3301      	adds	r3, #1
 801584c:	9304      	str	r3, [sp, #16]
 801584e:	e6ae      	b.n	80155ae <_dtoa_r+0x696>
 8015850:	9c07      	ldr	r4, [sp, #28]
 8015852:	9704      	str	r7, [sp, #16]
 8015854:	4625      	mov	r5, r4
 8015856:	e7f3      	b.n	8015840 <_dtoa_r+0x928>
 8015858:	9b07      	ldr	r3, [sp, #28]
 801585a:	9300      	str	r3, [sp, #0]
 801585c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801585e:	2b00      	cmp	r3, #0
 8015860:	f000 8104 	beq.w	8015a6c <_dtoa_r+0xb54>
 8015864:	2e00      	cmp	r6, #0
 8015866:	dd05      	ble.n	8015874 <_dtoa_r+0x95c>
 8015868:	4629      	mov	r1, r5
 801586a:	4632      	mov	r2, r6
 801586c:	4658      	mov	r0, fp
 801586e:	f000 fc25 	bl	80160bc <__lshift>
 8015872:	4605      	mov	r5, r0
 8015874:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015876:	2b00      	cmp	r3, #0
 8015878:	d05a      	beq.n	8015930 <_dtoa_r+0xa18>
 801587a:	6869      	ldr	r1, [r5, #4]
 801587c:	4658      	mov	r0, fp
 801587e:	f000 fa0f 	bl	8015ca0 <_Balloc>
 8015882:	4606      	mov	r6, r0
 8015884:	b928      	cbnz	r0, 8015892 <_dtoa_r+0x97a>
 8015886:	4b84      	ldr	r3, [pc, #528]	@ (8015a98 <_dtoa_r+0xb80>)
 8015888:	4602      	mov	r2, r0
 801588a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801588e:	f7ff bb5a 	b.w	8014f46 <_dtoa_r+0x2e>
 8015892:	692a      	ldr	r2, [r5, #16]
 8015894:	3202      	adds	r2, #2
 8015896:	0092      	lsls	r2, r2, #2
 8015898:	f105 010c 	add.w	r1, r5, #12
 801589c:	300c      	adds	r0, #12
 801589e:	f7ff faa4 	bl	8014dea <memcpy>
 80158a2:	2201      	movs	r2, #1
 80158a4:	4631      	mov	r1, r6
 80158a6:	4658      	mov	r0, fp
 80158a8:	f000 fc08 	bl	80160bc <__lshift>
 80158ac:	f10a 0301 	add.w	r3, sl, #1
 80158b0:	9307      	str	r3, [sp, #28]
 80158b2:	9b00      	ldr	r3, [sp, #0]
 80158b4:	4453      	add	r3, sl
 80158b6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80158b8:	9b02      	ldr	r3, [sp, #8]
 80158ba:	f003 0301 	and.w	r3, r3, #1
 80158be:	462f      	mov	r7, r5
 80158c0:	930a      	str	r3, [sp, #40]	@ 0x28
 80158c2:	4605      	mov	r5, r0
 80158c4:	9b07      	ldr	r3, [sp, #28]
 80158c6:	4621      	mov	r1, r4
 80158c8:	3b01      	subs	r3, #1
 80158ca:	4648      	mov	r0, r9
 80158cc:	9300      	str	r3, [sp, #0]
 80158ce:	f7ff fa9a 	bl	8014e06 <quorem>
 80158d2:	4639      	mov	r1, r7
 80158d4:	9002      	str	r0, [sp, #8]
 80158d6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80158da:	4648      	mov	r0, r9
 80158dc:	f000 fc5a 	bl	8016194 <__mcmp>
 80158e0:	462a      	mov	r2, r5
 80158e2:	9008      	str	r0, [sp, #32]
 80158e4:	4621      	mov	r1, r4
 80158e6:	4658      	mov	r0, fp
 80158e8:	f000 fc70 	bl	80161cc <__mdiff>
 80158ec:	68c2      	ldr	r2, [r0, #12]
 80158ee:	4606      	mov	r6, r0
 80158f0:	bb02      	cbnz	r2, 8015934 <_dtoa_r+0xa1c>
 80158f2:	4601      	mov	r1, r0
 80158f4:	4648      	mov	r0, r9
 80158f6:	f000 fc4d 	bl	8016194 <__mcmp>
 80158fa:	4602      	mov	r2, r0
 80158fc:	4631      	mov	r1, r6
 80158fe:	4658      	mov	r0, fp
 8015900:	920e      	str	r2, [sp, #56]	@ 0x38
 8015902:	f000 fa0d 	bl	8015d20 <_Bfree>
 8015906:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015908:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801590a:	9e07      	ldr	r6, [sp, #28]
 801590c:	ea43 0102 	orr.w	r1, r3, r2
 8015910:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015912:	4319      	orrs	r1, r3
 8015914:	d110      	bne.n	8015938 <_dtoa_r+0xa20>
 8015916:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801591a:	d029      	beq.n	8015970 <_dtoa_r+0xa58>
 801591c:	9b08      	ldr	r3, [sp, #32]
 801591e:	2b00      	cmp	r3, #0
 8015920:	dd02      	ble.n	8015928 <_dtoa_r+0xa10>
 8015922:	9b02      	ldr	r3, [sp, #8]
 8015924:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8015928:	9b00      	ldr	r3, [sp, #0]
 801592a:	f883 8000 	strb.w	r8, [r3]
 801592e:	e63f      	b.n	80155b0 <_dtoa_r+0x698>
 8015930:	4628      	mov	r0, r5
 8015932:	e7bb      	b.n	80158ac <_dtoa_r+0x994>
 8015934:	2201      	movs	r2, #1
 8015936:	e7e1      	b.n	80158fc <_dtoa_r+0x9e4>
 8015938:	9b08      	ldr	r3, [sp, #32]
 801593a:	2b00      	cmp	r3, #0
 801593c:	db04      	blt.n	8015948 <_dtoa_r+0xa30>
 801593e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8015940:	430b      	orrs	r3, r1
 8015942:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8015944:	430b      	orrs	r3, r1
 8015946:	d120      	bne.n	801598a <_dtoa_r+0xa72>
 8015948:	2a00      	cmp	r2, #0
 801594a:	dded      	ble.n	8015928 <_dtoa_r+0xa10>
 801594c:	4649      	mov	r1, r9
 801594e:	2201      	movs	r2, #1
 8015950:	4658      	mov	r0, fp
 8015952:	f000 fbb3 	bl	80160bc <__lshift>
 8015956:	4621      	mov	r1, r4
 8015958:	4681      	mov	r9, r0
 801595a:	f000 fc1b 	bl	8016194 <__mcmp>
 801595e:	2800      	cmp	r0, #0
 8015960:	dc03      	bgt.n	801596a <_dtoa_r+0xa52>
 8015962:	d1e1      	bne.n	8015928 <_dtoa_r+0xa10>
 8015964:	f018 0f01 	tst.w	r8, #1
 8015968:	d0de      	beq.n	8015928 <_dtoa_r+0xa10>
 801596a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801596e:	d1d8      	bne.n	8015922 <_dtoa_r+0xa0a>
 8015970:	9a00      	ldr	r2, [sp, #0]
 8015972:	2339      	movs	r3, #57	@ 0x39
 8015974:	7013      	strb	r3, [r2, #0]
 8015976:	4633      	mov	r3, r6
 8015978:	461e      	mov	r6, r3
 801597a:	3b01      	subs	r3, #1
 801597c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8015980:	2a39      	cmp	r2, #57	@ 0x39
 8015982:	d052      	beq.n	8015a2a <_dtoa_r+0xb12>
 8015984:	3201      	adds	r2, #1
 8015986:	701a      	strb	r2, [r3, #0]
 8015988:	e612      	b.n	80155b0 <_dtoa_r+0x698>
 801598a:	2a00      	cmp	r2, #0
 801598c:	dd07      	ble.n	801599e <_dtoa_r+0xa86>
 801598e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8015992:	d0ed      	beq.n	8015970 <_dtoa_r+0xa58>
 8015994:	9a00      	ldr	r2, [sp, #0]
 8015996:	f108 0301 	add.w	r3, r8, #1
 801599a:	7013      	strb	r3, [r2, #0]
 801599c:	e608      	b.n	80155b0 <_dtoa_r+0x698>
 801599e:	9b07      	ldr	r3, [sp, #28]
 80159a0:	9a07      	ldr	r2, [sp, #28]
 80159a2:	f803 8c01 	strb.w	r8, [r3, #-1]
 80159a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80159a8:	4293      	cmp	r3, r2
 80159aa:	d028      	beq.n	80159fe <_dtoa_r+0xae6>
 80159ac:	4649      	mov	r1, r9
 80159ae:	2300      	movs	r3, #0
 80159b0:	220a      	movs	r2, #10
 80159b2:	4658      	mov	r0, fp
 80159b4:	f000 f9d6 	bl	8015d64 <__multadd>
 80159b8:	42af      	cmp	r7, r5
 80159ba:	4681      	mov	r9, r0
 80159bc:	f04f 0300 	mov.w	r3, #0
 80159c0:	f04f 020a 	mov.w	r2, #10
 80159c4:	4639      	mov	r1, r7
 80159c6:	4658      	mov	r0, fp
 80159c8:	d107      	bne.n	80159da <_dtoa_r+0xac2>
 80159ca:	f000 f9cb 	bl	8015d64 <__multadd>
 80159ce:	4607      	mov	r7, r0
 80159d0:	4605      	mov	r5, r0
 80159d2:	9b07      	ldr	r3, [sp, #28]
 80159d4:	3301      	adds	r3, #1
 80159d6:	9307      	str	r3, [sp, #28]
 80159d8:	e774      	b.n	80158c4 <_dtoa_r+0x9ac>
 80159da:	f000 f9c3 	bl	8015d64 <__multadd>
 80159de:	4629      	mov	r1, r5
 80159e0:	4607      	mov	r7, r0
 80159e2:	2300      	movs	r3, #0
 80159e4:	220a      	movs	r2, #10
 80159e6:	4658      	mov	r0, fp
 80159e8:	f000 f9bc 	bl	8015d64 <__multadd>
 80159ec:	4605      	mov	r5, r0
 80159ee:	e7f0      	b.n	80159d2 <_dtoa_r+0xaba>
 80159f0:	9b00      	ldr	r3, [sp, #0]
 80159f2:	2b00      	cmp	r3, #0
 80159f4:	bfcc      	ite	gt
 80159f6:	461e      	movgt	r6, r3
 80159f8:	2601      	movle	r6, #1
 80159fa:	4456      	add	r6, sl
 80159fc:	2700      	movs	r7, #0
 80159fe:	4649      	mov	r1, r9
 8015a00:	2201      	movs	r2, #1
 8015a02:	4658      	mov	r0, fp
 8015a04:	f000 fb5a 	bl	80160bc <__lshift>
 8015a08:	4621      	mov	r1, r4
 8015a0a:	4681      	mov	r9, r0
 8015a0c:	f000 fbc2 	bl	8016194 <__mcmp>
 8015a10:	2800      	cmp	r0, #0
 8015a12:	dcb0      	bgt.n	8015976 <_dtoa_r+0xa5e>
 8015a14:	d102      	bne.n	8015a1c <_dtoa_r+0xb04>
 8015a16:	f018 0f01 	tst.w	r8, #1
 8015a1a:	d1ac      	bne.n	8015976 <_dtoa_r+0xa5e>
 8015a1c:	4633      	mov	r3, r6
 8015a1e:	461e      	mov	r6, r3
 8015a20:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8015a24:	2a30      	cmp	r2, #48	@ 0x30
 8015a26:	d0fa      	beq.n	8015a1e <_dtoa_r+0xb06>
 8015a28:	e5c2      	b.n	80155b0 <_dtoa_r+0x698>
 8015a2a:	459a      	cmp	sl, r3
 8015a2c:	d1a4      	bne.n	8015978 <_dtoa_r+0xa60>
 8015a2e:	9b04      	ldr	r3, [sp, #16]
 8015a30:	3301      	adds	r3, #1
 8015a32:	9304      	str	r3, [sp, #16]
 8015a34:	2331      	movs	r3, #49	@ 0x31
 8015a36:	f88a 3000 	strb.w	r3, [sl]
 8015a3a:	e5b9      	b.n	80155b0 <_dtoa_r+0x698>
 8015a3c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8015a3e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8015a9c <_dtoa_r+0xb84>
 8015a42:	b11b      	cbz	r3, 8015a4c <_dtoa_r+0xb34>
 8015a44:	f10a 0308 	add.w	r3, sl, #8
 8015a48:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8015a4a:	6013      	str	r3, [r2, #0]
 8015a4c:	4650      	mov	r0, sl
 8015a4e:	b019      	add	sp, #100	@ 0x64
 8015a50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015a56:	2b01      	cmp	r3, #1
 8015a58:	f77f ae37 	ble.w	80156ca <_dtoa_r+0x7b2>
 8015a5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015a5e:	930a      	str	r3, [sp, #40]	@ 0x28
 8015a60:	2001      	movs	r0, #1
 8015a62:	e655      	b.n	8015710 <_dtoa_r+0x7f8>
 8015a64:	9b00      	ldr	r3, [sp, #0]
 8015a66:	2b00      	cmp	r3, #0
 8015a68:	f77f aed6 	ble.w	8015818 <_dtoa_r+0x900>
 8015a6c:	4656      	mov	r6, sl
 8015a6e:	4621      	mov	r1, r4
 8015a70:	4648      	mov	r0, r9
 8015a72:	f7ff f9c8 	bl	8014e06 <quorem>
 8015a76:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8015a7a:	f806 8b01 	strb.w	r8, [r6], #1
 8015a7e:	9b00      	ldr	r3, [sp, #0]
 8015a80:	eba6 020a 	sub.w	r2, r6, sl
 8015a84:	4293      	cmp	r3, r2
 8015a86:	ddb3      	ble.n	80159f0 <_dtoa_r+0xad8>
 8015a88:	4649      	mov	r1, r9
 8015a8a:	2300      	movs	r3, #0
 8015a8c:	220a      	movs	r2, #10
 8015a8e:	4658      	mov	r0, fp
 8015a90:	f000 f968 	bl	8015d64 <__multadd>
 8015a94:	4681      	mov	r9, r0
 8015a96:	e7ea      	b.n	8015a6e <_dtoa_r+0xb56>
 8015a98:	080175a8 	.word	0x080175a8
 8015a9c:	0801752c 	.word	0x0801752c

08015aa0 <_free_r>:
 8015aa0:	b538      	push	{r3, r4, r5, lr}
 8015aa2:	4605      	mov	r5, r0
 8015aa4:	2900      	cmp	r1, #0
 8015aa6:	d041      	beq.n	8015b2c <_free_r+0x8c>
 8015aa8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015aac:	1f0c      	subs	r4, r1, #4
 8015aae:	2b00      	cmp	r3, #0
 8015ab0:	bfb8      	it	lt
 8015ab2:	18e4      	addlt	r4, r4, r3
 8015ab4:	f000 f8e8 	bl	8015c88 <__malloc_lock>
 8015ab8:	4a1d      	ldr	r2, [pc, #116]	@ (8015b30 <_free_r+0x90>)
 8015aba:	6813      	ldr	r3, [r2, #0]
 8015abc:	b933      	cbnz	r3, 8015acc <_free_r+0x2c>
 8015abe:	6063      	str	r3, [r4, #4]
 8015ac0:	6014      	str	r4, [r2, #0]
 8015ac2:	4628      	mov	r0, r5
 8015ac4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015ac8:	f000 b8e4 	b.w	8015c94 <__malloc_unlock>
 8015acc:	42a3      	cmp	r3, r4
 8015ace:	d908      	bls.n	8015ae2 <_free_r+0x42>
 8015ad0:	6820      	ldr	r0, [r4, #0]
 8015ad2:	1821      	adds	r1, r4, r0
 8015ad4:	428b      	cmp	r3, r1
 8015ad6:	bf01      	itttt	eq
 8015ad8:	6819      	ldreq	r1, [r3, #0]
 8015ada:	685b      	ldreq	r3, [r3, #4]
 8015adc:	1809      	addeq	r1, r1, r0
 8015ade:	6021      	streq	r1, [r4, #0]
 8015ae0:	e7ed      	b.n	8015abe <_free_r+0x1e>
 8015ae2:	461a      	mov	r2, r3
 8015ae4:	685b      	ldr	r3, [r3, #4]
 8015ae6:	b10b      	cbz	r3, 8015aec <_free_r+0x4c>
 8015ae8:	42a3      	cmp	r3, r4
 8015aea:	d9fa      	bls.n	8015ae2 <_free_r+0x42>
 8015aec:	6811      	ldr	r1, [r2, #0]
 8015aee:	1850      	adds	r0, r2, r1
 8015af0:	42a0      	cmp	r0, r4
 8015af2:	d10b      	bne.n	8015b0c <_free_r+0x6c>
 8015af4:	6820      	ldr	r0, [r4, #0]
 8015af6:	4401      	add	r1, r0
 8015af8:	1850      	adds	r0, r2, r1
 8015afa:	4283      	cmp	r3, r0
 8015afc:	6011      	str	r1, [r2, #0]
 8015afe:	d1e0      	bne.n	8015ac2 <_free_r+0x22>
 8015b00:	6818      	ldr	r0, [r3, #0]
 8015b02:	685b      	ldr	r3, [r3, #4]
 8015b04:	6053      	str	r3, [r2, #4]
 8015b06:	4408      	add	r0, r1
 8015b08:	6010      	str	r0, [r2, #0]
 8015b0a:	e7da      	b.n	8015ac2 <_free_r+0x22>
 8015b0c:	d902      	bls.n	8015b14 <_free_r+0x74>
 8015b0e:	230c      	movs	r3, #12
 8015b10:	602b      	str	r3, [r5, #0]
 8015b12:	e7d6      	b.n	8015ac2 <_free_r+0x22>
 8015b14:	6820      	ldr	r0, [r4, #0]
 8015b16:	1821      	adds	r1, r4, r0
 8015b18:	428b      	cmp	r3, r1
 8015b1a:	bf04      	itt	eq
 8015b1c:	6819      	ldreq	r1, [r3, #0]
 8015b1e:	685b      	ldreq	r3, [r3, #4]
 8015b20:	6063      	str	r3, [r4, #4]
 8015b22:	bf04      	itt	eq
 8015b24:	1809      	addeq	r1, r1, r0
 8015b26:	6021      	streq	r1, [r4, #0]
 8015b28:	6054      	str	r4, [r2, #4]
 8015b2a:	e7ca      	b.n	8015ac2 <_free_r+0x22>
 8015b2c:	bd38      	pop	{r3, r4, r5, pc}
 8015b2e:	bf00      	nop
 8015b30:	20008fac 	.word	0x20008fac

08015b34 <malloc>:
 8015b34:	4b02      	ldr	r3, [pc, #8]	@ (8015b40 <malloc+0xc>)
 8015b36:	4601      	mov	r1, r0
 8015b38:	6818      	ldr	r0, [r3, #0]
 8015b3a:	f000 b825 	b.w	8015b88 <_malloc_r>
 8015b3e:	bf00      	nop
 8015b40:	200003b4 	.word	0x200003b4

08015b44 <sbrk_aligned>:
 8015b44:	b570      	push	{r4, r5, r6, lr}
 8015b46:	4e0f      	ldr	r6, [pc, #60]	@ (8015b84 <sbrk_aligned+0x40>)
 8015b48:	460c      	mov	r4, r1
 8015b4a:	6831      	ldr	r1, [r6, #0]
 8015b4c:	4605      	mov	r5, r0
 8015b4e:	b911      	cbnz	r1, 8015b56 <sbrk_aligned+0x12>
 8015b50:	f000 fe2c 	bl	80167ac <_sbrk_r>
 8015b54:	6030      	str	r0, [r6, #0]
 8015b56:	4621      	mov	r1, r4
 8015b58:	4628      	mov	r0, r5
 8015b5a:	f000 fe27 	bl	80167ac <_sbrk_r>
 8015b5e:	1c43      	adds	r3, r0, #1
 8015b60:	d103      	bne.n	8015b6a <sbrk_aligned+0x26>
 8015b62:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8015b66:	4620      	mov	r0, r4
 8015b68:	bd70      	pop	{r4, r5, r6, pc}
 8015b6a:	1cc4      	adds	r4, r0, #3
 8015b6c:	f024 0403 	bic.w	r4, r4, #3
 8015b70:	42a0      	cmp	r0, r4
 8015b72:	d0f8      	beq.n	8015b66 <sbrk_aligned+0x22>
 8015b74:	1a21      	subs	r1, r4, r0
 8015b76:	4628      	mov	r0, r5
 8015b78:	f000 fe18 	bl	80167ac <_sbrk_r>
 8015b7c:	3001      	adds	r0, #1
 8015b7e:	d1f2      	bne.n	8015b66 <sbrk_aligned+0x22>
 8015b80:	e7ef      	b.n	8015b62 <sbrk_aligned+0x1e>
 8015b82:	bf00      	nop
 8015b84:	20008fa8 	.word	0x20008fa8

08015b88 <_malloc_r>:
 8015b88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015b8c:	1ccd      	adds	r5, r1, #3
 8015b8e:	f025 0503 	bic.w	r5, r5, #3
 8015b92:	3508      	adds	r5, #8
 8015b94:	2d0c      	cmp	r5, #12
 8015b96:	bf38      	it	cc
 8015b98:	250c      	movcc	r5, #12
 8015b9a:	2d00      	cmp	r5, #0
 8015b9c:	4606      	mov	r6, r0
 8015b9e:	db01      	blt.n	8015ba4 <_malloc_r+0x1c>
 8015ba0:	42a9      	cmp	r1, r5
 8015ba2:	d904      	bls.n	8015bae <_malloc_r+0x26>
 8015ba4:	230c      	movs	r3, #12
 8015ba6:	6033      	str	r3, [r6, #0]
 8015ba8:	2000      	movs	r0, #0
 8015baa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015bae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8015c84 <_malloc_r+0xfc>
 8015bb2:	f000 f869 	bl	8015c88 <__malloc_lock>
 8015bb6:	f8d8 3000 	ldr.w	r3, [r8]
 8015bba:	461c      	mov	r4, r3
 8015bbc:	bb44      	cbnz	r4, 8015c10 <_malloc_r+0x88>
 8015bbe:	4629      	mov	r1, r5
 8015bc0:	4630      	mov	r0, r6
 8015bc2:	f7ff ffbf 	bl	8015b44 <sbrk_aligned>
 8015bc6:	1c43      	adds	r3, r0, #1
 8015bc8:	4604      	mov	r4, r0
 8015bca:	d158      	bne.n	8015c7e <_malloc_r+0xf6>
 8015bcc:	f8d8 4000 	ldr.w	r4, [r8]
 8015bd0:	4627      	mov	r7, r4
 8015bd2:	2f00      	cmp	r7, #0
 8015bd4:	d143      	bne.n	8015c5e <_malloc_r+0xd6>
 8015bd6:	2c00      	cmp	r4, #0
 8015bd8:	d04b      	beq.n	8015c72 <_malloc_r+0xea>
 8015bda:	6823      	ldr	r3, [r4, #0]
 8015bdc:	4639      	mov	r1, r7
 8015bde:	4630      	mov	r0, r6
 8015be0:	eb04 0903 	add.w	r9, r4, r3
 8015be4:	f000 fde2 	bl	80167ac <_sbrk_r>
 8015be8:	4581      	cmp	r9, r0
 8015bea:	d142      	bne.n	8015c72 <_malloc_r+0xea>
 8015bec:	6821      	ldr	r1, [r4, #0]
 8015bee:	1a6d      	subs	r5, r5, r1
 8015bf0:	4629      	mov	r1, r5
 8015bf2:	4630      	mov	r0, r6
 8015bf4:	f7ff ffa6 	bl	8015b44 <sbrk_aligned>
 8015bf8:	3001      	adds	r0, #1
 8015bfa:	d03a      	beq.n	8015c72 <_malloc_r+0xea>
 8015bfc:	6823      	ldr	r3, [r4, #0]
 8015bfe:	442b      	add	r3, r5
 8015c00:	6023      	str	r3, [r4, #0]
 8015c02:	f8d8 3000 	ldr.w	r3, [r8]
 8015c06:	685a      	ldr	r2, [r3, #4]
 8015c08:	bb62      	cbnz	r2, 8015c64 <_malloc_r+0xdc>
 8015c0a:	f8c8 7000 	str.w	r7, [r8]
 8015c0e:	e00f      	b.n	8015c30 <_malloc_r+0xa8>
 8015c10:	6822      	ldr	r2, [r4, #0]
 8015c12:	1b52      	subs	r2, r2, r5
 8015c14:	d420      	bmi.n	8015c58 <_malloc_r+0xd0>
 8015c16:	2a0b      	cmp	r2, #11
 8015c18:	d917      	bls.n	8015c4a <_malloc_r+0xc2>
 8015c1a:	1961      	adds	r1, r4, r5
 8015c1c:	42a3      	cmp	r3, r4
 8015c1e:	6025      	str	r5, [r4, #0]
 8015c20:	bf18      	it	ne
 8015c22:	6059      	strne	r1, [r3, #4]
 8015c24:	6863      	ldr	r3, [r4, #4]
 8015c26:	bf08      	it	eq
 8015c28:	f8c8 1000 	streq.w	r1, [r8]
 8015c2c:	5162      	str	r2, [r4, r5]
 8015c2e:	604b      	str	r3, [r1, #4]
 8015c30:	4630      	mov	r0, r6
 8015c32:	f000 f82f 	bl	8015c94 <__malloc_unlock>
 8015c36:	f104 000b 	add.w	r0, r4, #11
 8015c3a:	1d23      	adds	r3, r4, #4
 8015c3c:	f020 0007 	bic.w	r0, r0, #7
 8015c40:	1ac2      	subs	r2, r0, r3
 8015c42:	bf1c      	itt	ne
 8015c44:	1a1b      	subne	r3, r3, r0
 8015c46:	50a3      	strne	r3, [r4, r2]
 8015c48:	e7af      	b.n	8015baa <_malloc_r+0x22>
 8015c4a:	6862      	ldr	r2, [r4, #4]
 8015c4c:	42a3      	cmp	r3, r4
 8015c4e:	bf0c      	ite	eq
 8015c50:	f8c8 2000 	streq.w	r2, [r8]
 8015c54:	605a      	strne	r2, [r3, #4]
 8015c56:	e7eb      	b.n	8015c30 <_malloc_r+0xa8>
 8015c58:	4623      	mov	r3, r4
 8015c5a:	6864      	ldr	r4, [r4, #4]
 8015c5c:	e7ae      	b.n	8015bbc <_malloc_r+0x34>
 8015c5e:	463c      	mov	r4, r7
 8015c60:	687f      	ldr	r7, [r7, #4]
 8015c62:	e7b6      	b.n	8015bd2 <_malloc_r+0x4a>
 8015c64:	461a      	mov	r2, r3
 8015c66:	685b      	ldr	r3, [r3, #4]
 8015c68:	42a3      	cmp	r3, r4
 8015c6a:	d1fb      	bne.n	8015c64 <_malloc_r+0xdc>
 8015c6c:	2300      	movs	r3, #0
 8015c6e:	6053      	str	r3, [r2, #4]
 8015c70:	e7de      	b.n	8015c30 <_malloc_r+0xa8>
 8015c72:	230c      	movs	r3, #12
 8015c74:	6033      	str	r3, [r6, #0]
 8015c76:	4630      	mov	r0, r6
 8015c78:	f000 f80c 	bl	8015c94 <__malloc_unlock>
 8015c7c:	e794      	b.n	8015ba8 <_malloc_r+0x20>
 8015c7e:	6005      	str	r5, [r0, #0]
 8015c80:	e7d6      	b.n	8015c30 <_malloc_r+0xa8>
 8015c82:	bf00      	nop
 8015c84:	20008fac 	.word	0x20008fac

08015c88 <__malloc_lock>:
 8015c88:	4801      	ldr	r0, [pc, #4]	@ (8015c90 <__malloc_lock+0x8>)
 8015c8a:	f7ff b8ac 	b.w	8014de6 <__retarget_lock_acquire_recursive>
 8015c8e:	bf00      	nop
 8015c90:	20008fa4 	.word	0x20008fa4

08015c94 <__malloc_unlock>:
 8015c94:	4801      	ldr	r0, [pc, #4]	@ (8015c9c <__malloc_unlock+0x8>)
 8015c96:	f7ff b8a7 	b.w	8014de8 <__retarget_lock_release_recursive>
 8015c9a:	bf00      	nop
 8015c9c:	20008fa4 	.word	0x20008fa4

08015ca0 <_Balloc>:
 8015ca0:	b570      	push	{r4, r5, r6, lr}
 8015ca2:	69c6      	ldr	r6, [r0, #28]
 8015ca4:	4604      	mov	r4, r0
 8015ca6:	460d      	mov	r5, r1
 8015ca8:	b976      	cbnz	r6, 8015cc8 <_Balloc+0x28>
 8015caa:	2010      	movs	r0, #16
 8015cac:	f7ff ff42 	bl	8015b34 <malloc>
 8015cb0:	4602      	mov	r2, r0
 8015cb2:	61e0      	str	r0, [r4, #28]
 8015cb4:	b920      	cbnz	r0, 8015cc0 <_Balloc+0x20>
 8015cb6:	4b18      	ldr	r3, [pc, #96]	@ (8015d18 <_Balloc+0x78>)
 8015cb8:	4818      	ldr	r0, [pc, #96]	@ (8015d1c <_Balloc+0x7c>)
 8015cba:	216b      	movs	r1, #107	@ 0x6b
 8015cbc:	f000 fd86 	bl	80167cc <__assert_func>
 8015cc0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015cc4:	6006      	str	r6, [r0, #0]
 8015cc6:	60c6      	str	r6, [r0, #12]
 8015cc8:	69e6      	ldr	r6, [r4, #28]
 8015cca:	68f3      	ldr	r3, [r6, #12]
 8015ccc:	b183      	cbz	r3, 8015cf0 <_Balloc+0x50>
 8015cce:	69e3      	ldr	r3, [r4, #28]
 8015cd0:	68db      	ldr	r3, [r3, #12]
 8015cd2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8015cd6:	b9b8      	cbnz	r0, 8015d08 <_Balloc+0x68>
 8015cd8:	2101      	movs	r1, #1
 8015cda:	fa01 f605 	lsl.w	r6, r1, r5
 8015cde:	1d72      	adds	r2, r6, #5
 8015ce0:	0092      	lsls	r2, r2, #2
 8015ce2:	4620      	mov	r0, r4
 8015ce4:	f000 fd90 	bl	8016808 <_calloc_r>
 8015ce8:	b160      	cbz	r0, 8015d04 <_Balloc+0x64>
 8015cea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8015cee:	e00e      	b.n	8015d0e <_Balloc+0x6e>
 8015cf0:	2221      	movs	r2, #33	@ 0x21
 8015cf2:	2104      	movs	r1, #4
 8015cf4:	4620      	mov	r0, r4
 8015cf6:	f000 fd87 	bl	8016808 <_calloc_r>
 8015cfa:	69e3      	ldr	r3, [r4, #28]
 8015cfc:	60f0      	str	r0, [r6, #12]
 8015cfe:	68db      	ldr	r3, [r3, #12]
 8015d00:	2b00      	cmp	r3, #0
 8015d02:	d1e4      	bne.n	8015cce <_Balloc+0x2e>
 8015d04:	2000      	movs	r0, #0
 8015d06:	bd70      	pop	{r4, r5, r6, pc}
 8015d08:	6802      	ldr	r2, [r0, #0]
 8015d0a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015d0e:	2300      	movs	r3, #0
 8015d10:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8015d14:	e7f7      	b.n	8015d06 <_Balloc+0x66>
 8015d16:	bf00      	nop
 8015d18:	08017539 	.word	0x08017539
 8015d1c:	080175b9 	.word	0x080175b9

08015d20 <_Bfree>:
 8015d20:	b570      	push	{r4, r5, r6, lr}
 8015d22:	69c6      	ldr	r6, [r0, #28]
 8015d24:	4605      	mov	r5, r0
 8015d26:	460c      	mov	r4, r1
 8015d28:	b976      	cbnz	r6, 8015d48 <_Bfree+0x28>
 8015d2a:	2010      	movs	r0, #16
 8015d2c:	f7ff ff02 	bl	8015b34 <malloc>
 8015d30:	4602      	mov	r2, r0
 8015d32:	61e8      	str	r0, [r5, #28]
 8015d34:	b920      	cbnz	r0, 8015d40 <_Bfree+0x20>
 8015d36:	4b09      	ldr	r3, [pc, #36]	@ (8015d5c <_Bfree+0x3c>)
 8015d38:	4809      	ldr	r0, [pc, #36]	@ (8015d60 <_Bfree+0x40>)
 8015d3a:	218f      	movs	r1, #143	@ 0x8f
 8015d3c:	f000 fd46 	bl	80167cc <__assert_func>
 8015d40:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015d44:	6006      	str	r6, [r0, #0]
 8015d46:	60c6      	str	r6, [r0, #12]
 8015d48:	b13c      	cbz	r4, 8015d5a <_Bfree+0x3a>
 8015d4a:	69eb      	ldr	r3, [r5, #28]
 8015d4c:	6862      	ldr	r2, [r4, #4]
 8015d4e:	68db      	ldr	r3, [r3, #12]
 8015d50:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8015d54:	6021      	str	r1, [r4, #0]
 8015d56:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8015d5a:	bd70      	pop	{r4, r5, r6, pc}
 8015d5c:	08017539 	.word	0x08017539
 8015d60:	080175b9 	.word	0x080175b9

08015d64 <__multadd>:
 8015d64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015d68:	690d      	ldr	r5, [r1, #16]
 8015d6a:	4607      	mov	r7, r0
 8015d6c:	460c      	mov	r4, r1
 8015d6e:	461e      	mov	r6, r3
 8015d70:	f101 0c14 	add.w	ip, r1, #20
 8015d74:	2000      	movs	r0, #0
 8015d76:	f8dc 3000 	ldr.w	r3, [ip]
 8015d7a:	b299      	uxth	r1, r3
 8015d7c:	fb02 6101 	mla	r1, r2, r1, r6
 8015d80:	0c1e      	lsrs	r6, r3, #16
 8015d82:	0c0b      	lsrs	r3, r1, #16
 8015d84:	fb02 3306 	mla	r3, r2, r6, r3
 8015d88:	b289      	uxth	r1, r1
 8015d8a:	3001      	adds	r0, #1
 8015d8c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8015d90:	4285      	cmp	r5, r0
 8015d92:	f84c 1b04 	str.w	r1, [ip], #4
 8015d96:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8015d9a:	dcec      	bgt.n	8015d76 <__multadd+0x12>
 8015d9c:	b30e      	cbz	r6, 8015de2 <__multadd+0x7e>
 8015d9e:	68a3      	ldr	r3, [r4, #8]
 8015da0:	42ab      	cmp	r3, r5
 8015da2:	dc19      	bgt.n	8015dd8 <__multadd+0x74>
 8015da4:	6861      	ldr	r1, [r4, #4]
 8015da6:	4638      	mov	r0, r7
 8015da8:	3101      	adds	r1, #1
 8015daa:	f7ff ff79 	bl	8015ca0 <_Balloc>
 8015dae:	4680      	mov	r8, r0
 8015db0:	b928      	cbnz	r0, 8015dbe <__multadd+0x5a>
 8015db2:	4602      	mov	r2, r0
 8015db4:	4b0c      	ldr	r3, [pc, #48]	@ (8015de8 <__multadd+0x84>)
 8015db6:	480d      	ldr	r0, [pc, #52]	@ (8015dec <__multadd+0x88>)
 8015db8:	21ba      	movs	r1, #186	@ 0xba
 8015dba:	f000 fd07 	bl	80167cc <__assert_func>
 8015dbe:	6922      	ldr	r2, [r4, #16]
 8015dc0:	3202      	adds	r2, #2
 8015dc2:	f104 010c 	add.w	r1, r4, #12
 8015dc6:	0092      	lsls	r2, r2, #2
 8015dc8:	300c      	adds	r0, #12
 8015dca:	f7ff f80e 	bl	8014dea <memcpy>
 8015dce:	4621      	mov	r1, r4
 8015dd0:	4638      	mov	r0, r7
 8015dd2:	f7ff ffa5 	bl	8015d20 <_Bfree>
 8015dd6:	4644      	mov	r4, r8
 8015dd8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8015ddc:	3501      	adds	r5, #1
 8015dde:	615e      	str	r6, [r3, #20]
 8015de0:	6125      	str	r5, [r4, #16]
 8015de2:	4620      	mov	r0, r4
 8015de4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015de8:	080175a8 	.word	0x080175a8
 8015dec:	080175b9 	.word	0x080175b9

08015df0 <__hi0bits>:
 8015df0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8015df4:	4603      	mov	r3, r0
 8015df6:	bf36      	itet	cc
 8015df8:	0403      	lslcc	r3, r0, #16
 8015dfa:	2000      	movcs	r0, #0
 8015dfc:	2010      	movcc	r0, #16
 8015dfe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8015e02:	bf3c      	itt	cc
 8015e04:	021b      	lslcc	r3, r3, #8
 8015e06:	3008      	addcc	r0, #8
 8015e08:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8015e0c:	bf3c      	itt	cc
 8015e0e:	011b      	lslcc	r3, r3, #4
 8015e10:	3004      	addcc	r0, #4
 8015e12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8015e16:	bf3c      	itt	cc
 8015e18:	009b      	lslcc	r3, r3, #2
 8015e1a:	3002      	addcc	r0, #2
 8015e1c:	2b00      	cmp	r3, #0
 8015e1e:	db05      	blt.n	8015e2c <__hi0bits+0x3c>
 8015e20:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8015e24:	f100 0001 	add.w	r0, r0, #1
 8015e28:	bf08      	it	eq
 8015e2a:	2020      	moveq	r0, #32
 8015e2c:	4770      	bx	lr

08015e2e <__lo0bits>:
 8015e2e:	6803      	ldr	r3, [r0, #0]
 8015e30:	4602      	mov	r2, r0
 8015e32:	f013 0007 	ands.w	r0, r3, #7
 8015e36:	d00b      	beq.n	8015e50 <__lo0bits+0x22>
 8015e38:	07d9      	lsls	r1, r3, #31
 8015e3a:	d421      	bmi.n	8015e80 <__lo0bits+0x52>
 8015e3c:	0798      	lsls	r0, r3, #30
 8015e3e:	bf49      	itett	mi
 8015e40:	085b      	lsrmi	r3, r3, #1
 8015e42:	089b      	lsrpl	r3, r3, #2
 8015e44:	2001      	movmi	r0, #1
 8015e46:	6013      	strmi	r3, [r2, #0]
 8015e48:	bf5c      	itt	pl
 8015e4a:	6013      	strpl	r3, [r2, #0]
 8015e4c:	2002      	movpl	r0, #2
 8015e4e:	4770      	bx	lr
 8015e50:	b299      	uxth	r1, r3
 8015e52:	b909      	cbnz	r1, 8015e58 <__lo0bits+0x2a>
 8015e54:	0c1b      	lsrs	r3, r3, #16
 8015e56:	2010      	movs	r0, #16
 8015e58:	b2d9      	uxtb	r1, r3
 8015e5a:	b909      	cbnz	r1, 8015e60 <__lo0bits+0x32>
 8015e5c:	3008      	adds	r0, #8
 8015e5e:	0a1b      	lsrs	r3, r3, #8
 8015e60:	0719      	lsls	r1, r3, #28
 8015e62:	bf04      	itt	eq
 8015e64:	091b      	lsreq	r3, r3, #4
 8015e66:	3004      	addeq	r0, #4
 8015e68:	0799      	lsls	r1, r3, #30
 8015e6a:	bf04      	itt	eq
 8015e6c:	089b      	lsreq	r3, r3, #2
 8015e6e:	3002      	addeq	r0, #2
 8015e70:	07d9      	lsls	r1, r3, #31
 8015e72:	d403      	bmi.n	8015e7c <__lo0bits+0x4e>
 8015e74:	085b      	lsrs	r3, r3, #1
 8015e76:	f100 0001 	add.w	r0, r0, #1
 8015e7a:	d003      	beq.n	8015e84 <__lo0bits+0x56>
 8015e7c:	6013      	str	r3, [r2, #0]
 8015e7e:	4770      	bx	lr
 8015e80:	2000      	movs	r0, #0
 8015e82:	4770      	bx	lr
 8015e84:	2020      	movs	r0, #32
 8015e86:	4770      	bx	lr

08015e88 <__i2b>:
 8015e88:	b510      	push	{r4, lr}
 8015e8a:	460c      	mov	r4, r1
 8015e8c:	2101      	movs	r1, #1
 8015e8e:	f7ff ff07 	bl	8015ca0 <_Balloc>
 8015e92:	4602      	mov	r2, r0
 8015e94:	b928      	cbnz	r0, 8015ea2 <__i2b+0x1a>
 8015e96:	4b05      	ldr	r3, [pc, #20]	@ (8015eac <__i2b+0x24>)
 8015e98:	4805      	ldr	r0, [pc, #20]	@ (8015eb0 <__i2b+0x28>)
 8015e9a:	f240 1145 	movw	r1, #325	@ 0x145
 8015e9e:	f000 fc95 	bl	80167cc <__assert_func>
 8015ea2:	2301      	movs	r3, #1
 8015ea4:	6144      	str	r4, [r0, #20]
 8015ea6:	6103      	str	r3, [r0, #16]
 8015ea8:	bd10      	pop	{r4, pc}
 8015eaa:	bf00      	nop
 8015eac:	080175a8 	.word	0x080175a8
 8015eb0:	080175b9 	.word	0x080175b9

08015eb4 <__multiply>:
 8015eb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015eb8:	4614      	mov	r4, r2
 8015eba:	690a      	ldr	r2, [r1, #16]
 8015ebc:	6923      	ldr	r3, [r4, #16]
 8015ebe:	429a      	cmp	r2, r3
 8015ec0:	bfa8      	it	ge
 8015ec2:	4623      	movge	r3, r4
 8015ec4:	460f      	mov	r7, r1
 8015ec6:	bfa4      	itt	ge
 8015ec8:	460c      	movge	r4, r1
 8015eca:	461f      	movge	r7, r3
 8015ecc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8015ed0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8015ed4:	68a3      	ldr	r3, [r4, #8]
 8015ed6:	6861      	ldr	r1, [r4, #4]
 8015ed8:	eb0a 0609 	add.w	r6, sl, r9
 8015edc:	42b3      	cmp	r3, r6
 8015ede:	b085      	sub	sp, #20
 8015ee0:	bfb8      	it	lt
 8015ee2:	3101      	addlt	r1, #1
 8015ee4:	f7ff fedc 	bl	8015ca0 <_Balloc>
 8015ee8:	b930      	cbnz	r0, 8015ef8 <__multiply+0x44>
 8015eea:	4602      	mov	r2, r0
 8015eec:	4b44      	ldr	r3, [pc, #272]	@ (8016000 <__multiply+0x14c>)
 8015eee:	4845      	ldr	r0, [pc, #276]	@ (8016004 <__multiply+0x150>)
 8015ef0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8015ef4:	f000 fc6a 	bl	80167cc <__assert_func>
 8015ef8:	f100 0514 	add.w	r5, r0, #20
 8015efc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8015f00:	462b      	mov	r3, r5
 8015f02:	2200      	movs	r2, #0
 8015f04:	4543      	cmp	r3, r8
 8015f06:	d321      	bcc.n	8015f4c <__multiply+0x98>
 8015f08:	f107 0114 	add.w	r1, r7, #20
 8015f0c:	f104 0214 	add.w	r2, r4, #20
 8015f10:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8015f14:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8015f18:	9302      	str	r3, [sp, #8]
 8015f1a:	1b13      	subs	r3, r2, r4
 8015f1c:	3b15      	subs	r3, #21
 8015f1e:	f023 0303 	bic.w	r3, r3, #3
 8015f22:	3304      	adds	r3, #4
 8015f24:	f104 0715 	add.w	r7, r4, #21
 8015f28:	42ba      	cmp	r2, r7
 8015f2a:	bf38      	it	cc
 8015f2c:	2304      	movcc	r3, #4
 8015f2e:	9301      	str	r3, [sp, #4]
 8015f30:	9b02      	ldr	r3, [sp, #8]
 8015f32:	9103      	str	r1, [sp, #12]
 8015f34:	428b      	cmp	r3, r1
 8015f36:	d80c      	bhi.n	8015f52 <__multiply+0x9e>
 8015f38:	2e00      	cmp	r6, #0
 8015f3a:	dd03      	ble.n	8015f44 <__multiply+0x90>
 8015f3c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8015f40:	2b00      	cmp	r3, #0
 8015f42:	d05b      	beq.n	8015ffc <__multiply+0x148>
 8015f44:	6106      	str	r6, [r0, #16]
 8015f46:	b005      	add	sp, #20
 8015f48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f4c:	f843 2b04 	str.w	r2, [r3], #4
 8015f50:	e7d8      	b.n	8015f04 <__multiply+0x50>
 8015f52:	f8b1 a000 	ldrh.w	sl, [r1]
 8015f56:	f1ba 0f00 	cmp.w	sl, #0
 8015f5a:	d024      	beq.n	8015fa6 <__multiply+0xf2>
 8015f5c:	f104 0e14 	add.w	lr, r4, #20
 8015f60:	46a9      	mov	r9, r5
 8015f62:	f04f 0c00 	mov.w	ip, #0
 8015f66:	f85e 7b04 	ldr.w	r7, [lr], #4
 8015f6a:	f8d9 3000 	ldr.w	r3, [r9]
 8015f6e:	fa1f fb87 	uxth.w	fp, r7
 8015f72:	b29b      	uxth	r3, r3
 8015f74:	fb0a 330b 	mla	r3, sl, fp, r3
 8015f78:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8015f7c:	f8d9 7000 	ldr.w	r7, [r9]
 8015f80:	4463      	add	r3, ip
 8015f82:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8015f86:	fb0a c70b 	mla	r7, sl, fp, ip
 8015f8a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8015f8e:	b29b      	uxth	r3, r3
 8015f90:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8015f94:	4572      	cmp	r2, lr
 8015f96:	f849 3b04 	str.w	r3, [r9], #4
 8015f9a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8015f9e:	d8e2      	bhi.n	8015f66 <__multiply+0xb2>
 8015fa0:	9b01      	ldr	r3, [sp, #4]
 8015fa2:	f845 c003 	str.w	ip, [r5, r3]
 8015fa6:	9b03      	ldr	r3, [sp, #12]
 8015fa8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8015fac:	3104      	adds	r1, #4
 8015fae:	f1b9 0f00 	cmp.w	r9, #0
 8015fb2:	d021      	beq.n	8015ff8 <__multiply+0x144>
 8015fb4:	682b      	ldr	r3, [r5, #0]
 8015fb6:	f104 0c14 	add.w	ip, r4, #20
 8015fba:	46ae      	mov	lr, r5
 8015fbc:	f04f 0a00 	mov.w	sl, #0
 8015fc0:	f8bc b000 	ldrh.w	fp, [ip]
 8015fc4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8015fc8:	fb09 770b 	mla	r7, r9, fp, r7
 8015fcc:	4457      	add	r7, sl
 8015fce:	b29b      	uxth	r3, r3
 8015fd0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8015fd4:	f84e 3b04 	str.w	r3, [lr], #4
 8015fd8:	f85c 3b04 	ldr.w	r3, [ip], #4
 8015fdc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8015fe0:	f8be 3000 	ldrh.w	r3, [lr]
 8015fe4:	fb09 330a 	mla	r3, r9, sl, r3
 8015fe8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8015fec:	4562      	cmp	r2, ip
 8015fee:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8015ff2:	d8e5      	bhi.n	8015fc0 <__multiply+0x10c>
 8015ff4:	9f01      	ldr	r7, [sp, #4]
 8015ff6:	51eb      	str	r3, [r5, r7]
 8015ff8:	3504      	adds	r5, #4
 8015ffa:	e799      	b.n	8015f30 <__multiply+0x7c>
 8015ffc:	3e01      	subs	r6, #1
 8015ffe:	e79b      	b.n	8015f38 <__multiply+0x84>
 8016000:	080175a8 	.word	0x080175a8
 8016004:	080175b9 	.word	0x080175b9

08016008 <__pow5mult>:
 8016008:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801600c:	4615      	mov	r5, r2
 801600e:	f012 0203 	ands.w	r2, r2, #3
 8016012:	4607      	mov	r7, r0
 8016014:	460e      	mov	r6, r1
 8016016:	d007      	beq.n	8016028 <__pow5mult+0x20>
 8016018:	4c25      	ldr	r4, [pc, #148]	@ (80160b0 <__pow5mult+0xa8>)
 801601a:	3a01      	subs	r2, #1
 801601c:	2300      	movs	r3, #0
 801601e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8016022:	f7ff fe9f 	bl	8015d64 <__multadd>
 8016026:	4606      	mov	r6, r0
 8016028:	10ad      	asrs	r5, r5, #2
 801602a:	d03d      	beq.n	80160a8 <__pow5mult+0xa0>
 801602c:	69fc      	ldr	r4, [r7, #28]
 801602e:	b97c      	cbnz	r4, 8016050 <__pow5mult+0x48>
 8016030:	2010      	movs	r0, #16
 8016032:	f7ff fd7f 	bl	8015b34 <malloc>
 8016036:	4602      	mov	r2, r0
 8016038:	61f8      	str	r0, [r7, #28]
 801603a:	b928      	cbnz	r0, 8016048 <__pow5mult+0x40>
 801603c:	4b1d      	ldr	r3, [pc, #116]	@ (80160b4 <__pow5mult+0xac>)
 801603e:	481e      	ldr	r0, [pc, #120]	@ (80160b8 <__pow5mult+0xb0>)
 8016040:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8016044:	f000 fbc2 	bl	80167cc <__assert_func>
 8016048:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801604c:	6004      	str	r4, [r0, #0]
 801604e:	60c4      	str	r4, [r0, #12]
 8016050:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8016054:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8016058:	b94c      	cbnz	r4, 801606e <__pow5mult+0x66>
 801605a:	f240 2171 	movw	r1, #625	@ 0x271
 801605e:	4638      	mov	r0, r7
 8016060:	f7ff ff12 	bl	8015e88 <__i2b>
 8016064:	2300      	movs	r3, #0
 8016066:	f8c8 0008 	str.w	r0, [r8, #8]
 801606a:	4604      	mov	r4, r0
 801606c:	6003      	str	r3, [r0, #0]
 801606e:	f04f 0900 	mov.w	r9, #0
 8016072:	07eb      	lsls	r3, r5, #31
 8016074:	d50a      	bpl.n	801608c <__pow5mult+0x84>
 8016076:	4631      	mov	r1, r6
 8016078:	4622      	mov	r2, r4
 801607a:	4638      	mov	r0, r7
 801607c:	f7ff ff1a 	bl	8015eb4 <__multiply>
 8016080:	4631      	mov	r1, r6
 8016082:	4680      	mov	r8, r0
 8016084:	4638      	mov	r0, r7
 8016086:	f7ff fe4b 	bl	8015d20 <_Bfree>
 801608a:	4646      	mov	r6, r8
 801608c:	106d      	asrs	r5, r5, #1
 801608e:	d00b      	beq.n	80160a8 <__pow5mult+0xa0>
 8016090:	6820      	ldr	r0, [r4, #0]
 8016092:	b938      	cbnz	r0, 80160a4 <__pow5mult+0x9c>
 8016094:	4622      	mov	r2, r4
 8016096:	4621      	mov	r1, r4
 8016098:	4638      	mov	r0, r7
 801609a:	f7ff ff0b 	bl	8015eb4 <__multiply>
 801609e:	6020      	str	r0, [r4, #0]
 80160a0:	f8c0 9000 	str.w	r9, [r0]
 80160a4:	4604      	mov	r4, r0
 80160a6:	e7e4      	b.n	8016072 <__pow5mult+0x6a>
 80160a8:	4630      	mov	r0, r6
 80160aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80160ae:	bf00      	nop
 80160b0:	08017614 	.word	0x08017614
 80160b4:	08017539 	.word	0x08017539
 80160b8:	080175b9 	.word	0x080175b9

080160bc <__lshift>:
 80160bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80160c0:	460c      	mov	r4, r1
 80160c2:	6849      	ldr	r1, [r1, #4]
 80160c4:	6923      	ldr	r3, [r4, #16]
 80160c6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80160ca:	68a3      	ldr	r3, [r4, #8]
 80160cc:	4607      	mov	r7, r0
 80160ce:	4691      	mov	r9, r2
 80160d0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80160d4:	f108 0601 	add.w	r6, r8, #1
 80160d8:	42b3      	cmp	r3, r6
 80160da:	db0b      	blt.n	80160f4 <__lshift+0x38>
 80160dc:	4638      	mov	r0, r7
 80160de:	f7ff fddf 	bl	8015ca0 <_Balloc>
 80160e2:	4605      	mov	r5, r0
 80160e4:	b948      	cbnz	r0, 80160fa <__lshift+0x3e>
 80160e6:	4602      	mov	r2, r0
 80160e8:	4b28      	ldr	r3, [pc, #160]	@ (801618c <__lshift+0xd0>)
 80160ea:	4829      	ldr	r0, [pc, #164]	@ (8016190 <__lshift+0xd4>)
 80160ec:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80160f0:	f000 fb6c 	bl	80167cc <__assert_func>
 80160f4:	3101      	adds	r1, #1
 80160f6:	005b      	lsls	r3, r3, #1
 80160f8:	e7ee      	b.n	80160d8 <__lshift+0x1c>
 80160fa:	2300      	movs	r3, #0
 80160fc:	f100 0114 	add.w	r1, r0, #20
 8016100:	f100 0210 	add.w	r2, r0, #16
 8016104:	4618      	mov	r0, r3
 8016106:	4553      	cmp	r3, sl
 8016108:	db33      	blt.n	8016172 <__lshift+0xb6>
 801610a:	6920      	ldr	r0, [r4, #16]
 801610c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8016110:	f104 0314 	add.w	r3, r4, #20
 8016114:	f019 091f 	ands.w	r9, r9, #31
 8016118:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801611c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8016120:	d02b      	beq.n	801617a <__lshift+0xbe>
 8016122:	f1c9 0e20 	rsb	lr, r9, #32
 8016126:	468a      	mov	sl, r1
 8016128:	2200      	movs	r2, #0
 801612a:	6818      	ldr	r0, [r3, #0]
 801612c:	fa00 f009 	lsl.w	r0, r0, r9
 8016130:	4310      	orrs	r0, r2
 8016132:	f84a 0b04 	str.w	r0, [sl], #4
 8016136:	f853 2b04 	ldr.w	r2, [r3], #4
 801613a:	459c      	cmp	ip, r3
 801613c:	fa22 f20e 	lsr.w	r2, r2, lr
 8016140:	d8f3      	bhi.n	801612a <__lshift+0x6e>
 8016142:	ebac 0304 	sub.w	r3, ip, r4
 8016146:	3b15      	subs	r3, #21
 8016148:	f023 0303 	bic.w	r3, r3, #3
 801614c:	3304      	adds	r3, #4
 801614e:	f104 0015 	add.w	r0, r4, #21
 8016152:	4584      	cmp	ip, r0
 8016154:	bf38      	it	cc
 8016156:	2304      	movcc	r3, #4
 8016158:	50ca      	str	r2, [r1, r3]
 801615a:	b10a      	cbz	r2, 8016160 <__lshift+0xa4>
 801615c:	f108 0602 	add.w	r6, r8, #2
 8016160:	3e01      	subs	r6, #1
 8016162:	4638      	mov	r0, r7
 8016164:	612e      	str	r6, [r5, #16]
 8016166:	4621      	mov	r1, r4
 8016168:	f7ff fdda 	bl	8015d20 <_Bfree>
 801616c:	4628      	mov	r0, r5
 801616e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016172:	f842 0f04 	str.w	r0, [r2, #4]!
 8016176:	3301      	adds	r3, #1
 8016178:	e7c5      	b.n	8016106 <__lshift+0x4a>
 801617a:	3904      	subs	r1, #4
 801617c:	f853 2b04 	ldr.w	r2, [r3], #4
 8016180:	f841 2f04 	str.w	r2, [r1, #4]!
 8016184:	459c      	cmp	ip, r3
 8016186:	d8f9      	bhi.n	801617c <__lshift+0xc0>
 8016188:	e7ea      	b.n	8016160 <__lshift+0xa4>
 801618a:	bf00      	nop
 801618c:	080175a8 	.word	0x080175a8
 8016190:	080175b9 	.word	0x080175b9

08016194 <__mcmp>:
 8016194:	690a      	ldr	r2, [r1, #16]
 8016196:	4603      	mov	r3, r0
 8016198:	6900      	ldr	r0, [r0, #16]
 801619a:	1a80      	subs	r0, r0, r2
 801619c:	b530      	push	{r4, r5, lr}
 801619e:	d10e      	bne.n	80161be <__mcmp+0x2a>
 80161a0:	3314      	adds	r3, #20
 80161a2:	3114      	adds	r1, #20
 80161a4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80161a8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80161ac:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80161b0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80161b4:	4295      	cmp	r5, r2
 80161b6:	d003      	beq.n	80161c0 <__mcmp+0x2c>
 80161b8:	d205      	bcs.n	80161c6 <__mcmp+0x32>
 80161ba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80161be:	bd30      	pop	{r4, r5, pc}
 80161c0:	42a3      	cmp	r3, r4
 80161c2:	d3f3      	bcc.n	80161ac <__mcmp+0x18>
 80161c4:	e7fb      	b.n	80161be <__mcmp+0x2a>
 80161c6:	2001      	movs	r0, #1
 80161c8:	e7f9      	b.n	80161be <__mcmp+0x2a>
	...

080161cc <__mdiff>:
 80161cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80161d0:	4689      	mov	r9, r1
 80161d2:	4606      	mov	r6, r0
 80161d4:	4611      	mov	r1, r2
 80161d6:	4648      	mov	r0, r9
 80161d8:	4614      	mov	r4, r2
 80161da:	f7ff ffdb 	bl	8016194 <__mcmp>
 80161de:	1e05      	subs	r5, r0, #0
 80161e0:	d112      	bne.n	8016208 <__mdiff+0x3c>
 80161e2:	4629      	mov	r1, r5
 80161e4:	4630      	mov	r0, r6
 80161e6:	f7ff fd5b 	bl	8015ca0 <_Balloc>
 80161ea:	4602      	mov	r2, r0
 80161ec:	b928      	cbnz	r0, 80161fa <__mdiff+0x2e>
 80161ee:	4b3f      	ldr	r3, [pc, #252]	@ (80162ec <__mdiff+0x120>)
 80161f0:	f240 2137 	movw	r1, #567	@ 0x237
 80161f4:	483e      	ldr	r0, [pc, #248]	@ (80162f0 <__mdiff+0x124>)
 80161f6:	f000 fae9 	bl	80167cc <__assert_func>
 80161fa:	2301      	movs	r3, #1
 80161fc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8016200:	4610      	mov	r0, r2
 8016202:	b003      	add	sp, #12
 8016204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016208:	bfbc      	itt	lt
 801620a:	464b      	movlt	r3, r9
 801620c:	46a1      	movlt	r9, r4
 801620e:	4630      	mov	r0, r6
 8016210:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8016214:	bfba      	itte	lt
 8016216:	461c      	movlt	r4, r3
 8016218:	2501      	movlt	r5, #1
 801621a:	2500      	movge	r5, #0
 801621c:	f7ff fd40 	bl	8015ca0 <_Balloc>
 8016220:	4602      	mov	r2, r0
 8016222:	b918      	cbnz	r0, 801622c <__mdiff+0x60>
 8016224:	4b31      	ldr	r3, [pc, #196]	@ (80162ec <__mdiff+0x120>)
 8016226:	f240 2145 	movw	r1, #581	@ 0x245
 801622a:	e7e3      	b.n	80161f4 <__mdiff+0x28>
 801622c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8016230:	6926      	ldr	r6, [r4, #16]
 8016232:	60c5      	str	r5, [r0, #12]
 8016234:	f109 0310 	add.w	r3, r9, #16
 8016238:	f109 0514 	add.w	r5, r9, #20
 801623c:	f104 0e14 	add.w	lr, r4, #20
 8016240:	f100 0b14 	add.w	fp, r0, #20
 8016244:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8016248:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801624c:	9301      	str	r3, [sp, #4]
 801624e:	46d9      	mov	r9, fp
 8016250:	f04f 0c00 	mov.w	ip, #0
 8016254:	9b01      	ldr	r3, [sp, #4]
 8016256:	f85e 0b04 	ldr.w	r0, [lr], #4
 801625a:	f853 af04 	ldr.w	sl, [r3, #4]!
 801625e:	9301      	str	r3, [sp, #4]
 8016260:	fa1f f38a 	uxth.w	r3, sl
 8016264:	4619      	mov	r1, r3
 8016266:	b283      	uxth	r3, r0
 8016268:	1acb      	subs	r3, r1, r3
 801626a:	0c00      	lsrs	r0, r0, #16
 801626c:	4463      	add	r3, ip
 801626e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8016272:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8016276:	b29b      	uxth	r3, r3
 8016278:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801627c:	4576      	cmp	r6, lr
 801627e:	f849 3b04 	str.w	r3, [r9], #4
 8016282:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8016286:	d8e5      	bhi.n	8016254 <__mdiff+0x88>
 8016288:	1b33      	subs	r3, r6, r4
 801628a:	3b15      	subs	r3, #21
 801628c:	f023 0303 	bic.w	r3, r3, #3
 8016290:	3415      	adds	r4, #21
 8016292:	3304      	adds	r3, #4
 8016294:	42a6      	cmp	r6, r4
 8016296:	bf38      	it	cc
 8016298:	2304      	movcc	r3, #4
 801629a:	441d      	add	r5, r3
 801629c:	445b      	add	r3, fp
 801629e:	461e      	mov	r6, r3
 80162a0:	462c      	mov	r4, r5
 80162a2:	4544      	cmp	r4, r8
 80162a4:	d30e      	bcc.n	80162c4 <__mdiff+0xf8>
 80162a6:	f108 0103 	add.w	r1, r8, #3
 80162aa:	1b49      	subs	r1, r1, r5
 80162ac:	f021 0103 	bic.w	r1, r1, #3
 80162b0:	3d03      	subs	r5, #3
 80162b2:	45a8      	cmp	r8, r5
 80162b4:	bf38      	it	cc
 80162b6:	2100      	movcc	r1, #0
 80162b8:	440b      	add	r3, r1
 80162ba:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80162be:	b191      	cbz	r1, 80162e6 <__mdiff+0x11a>
 80162c0:	6117      	str	r7, [r2, #16]
 80162c2:	e79d      	b.n	8016200 <__mdiff+0x34>
 80162c4:	f854 1b04 	ldr.w	r1, [r4], #4
 80162c8:	46e6      	mov	lr, ip
 80162ca:	0c08      	lsrs	r0, r1, #16
 80162cc:	fa1c fc81 	uxtah	ip, ip, r1
 80162d0:	4471      	add	r1, lr
 80162d2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80162d6:	b289      	uxth	r1, r1
 80162d8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80162dc:	f846 1b04 	str.w	r1, [r6], #4
 80162e0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80162e4:	e7dd      	b.n	80162a2 <__mdiff+0xd6>
 80162e6:	3f01      	subs	r7, #1
 80162e8:	e7e7      	b.n	80162ba <__mdiff+0xee>
 80162ea:	bf00      	nop
 80162ec:	080175a8 	.word	0x080175a8
 80162f0:	080175b9 	.word	0x080175b9

080162f4 <__d2b>:
 80162f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80162f8:	460f      	mov	r7, r1
 80162fa:	2101      	movs	r1, #1
 80162fc:	ec59 8b10 	vmov	r8, r9, d0
 8016300:	4616      	mov	r6, r2
 8016302:	f7ff fccd 	bl	8015ca0 <_Balloc>
 8016306:	4604      	mov	r4, r0
 8016308:	b930      	cbnz	r0, 8016318 <__d2b+0x24>
 801630a:	4602      	mov	r2, r0
 801630c:	4b23      	ldr	r3, [pc, #140]	@ (801639c <__d2b+0xa8>)
 801630e:	4824      	ldr	r0, [pc, #144]	@ (80163a0 <__d2b+0xac>)
 8016310:	f240 310f 	movw	r1, #783	@ 0x30f
 8016314:	f000 fa5a 	bl	80167cc <__assert_func>
 8016318:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801631c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016320:	b10d      	cbz	r5, 8016326 <__d2b+0x32>
 8016322:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8016326:	9301      	str	r3, [sp, #4]
 8016328:	f1b8 0300 	subs.w	r3, r8, #0
 801632c:	d023      	beq.n	8016376 <__d2b+0x82>
 801632e:	4668      	mov	r0, sp
 8016330:	9300      	str	r3, [sp, #0]
 8016332:	f7ff fd7c 	bl	8015e2e <__lo0bits>
 8016336:	e9dd 1200 	ldrd	r1, r2, [sp]
 801633a:	b1d0      	cbz	r0, 8016372 <__d2b+0x7e>
 801633c:	f1c0 0320 	rsb	r3, r0, #32
 8016340:	fa02 f303 	lsl.w	r3, r2, r3
 8016344:	430b      	orrs	r3, r1
 8016346:	40c2      	lsrs	r2, r0
 8016348:	6163      	str	r3, [r4, #20]
 801634a:	9201      	str	r2, [sp, #4]
 801634c:	9b01      	ldr	r3, [sp, #4]
 801634e:	61a3      	str	r3, [r4, #24]
 8016350:	2b00      	cmp	r3, #0
 8016352:	bf0c      	ite	eq
 8016354:	2201      	moveq	r2, #1
 8016356:	2202      	movne	r2, #2
 8016358:	6122      	str	r2, [r4, #16]
 801635a:	b1a5      	cbz	r5, 8016386 <__d2b+0x92>
 801635c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8016360:	4405      	add	r5, r0
 8016362:	603d      	str	r5, [r7, #0]
 8016364:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8016368:	6030      	str	r0, [r6, #0]
 801636a:	4620      	mov	r0, r4
 801636c:	b003      	add	sp, #12
 801636e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016372:	6161      	str	r1, [r4, #20]
 8016374:	e7ea      	b.n	801634c <__d2b+0x58>
 8016376:	a801      	add	r0, sp, #4
 8016378:	f7ff fd59 	bl	8015e2e <__lo0bits>
 801637c:	9b01      	ldr	r3, [sp, #4]
 801637e:	6163      	str	r3, [r4, #20]
 8016380:	3020      	adds	r0, #32
 8016382:	2201      	movs	r2, #1
 8016384:	e7e8      	b.n	8016358 <__d2b+0x64>
 8016386:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801638a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801638e:	6038      	str	r0, [r7, #0]
 8016390:	6918      	ldr	r0, [r3, #16]
 8016392:	f7ff fd2d 	bl	8015df0 <__hi0bits>
 8016396:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801639a:	e7e5      	b.n	8016368 <__d2b+0x74>
 801639c:	080175a8 	.word	0x080175a8
 80163a0:	080175b9 	.word	0x080175b9

080163a4 <__ssputs_r>:
 80163a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80163a8:	688e      	ldr	r6, [r1, #8]
 80163aa:	461f      	mov	r7, r3
 80163ac:	42be      	cmp	r6, r7
 80163ae:	680b      	ldr	r3, [r1, #0]
 80163b0:	4682      	mov	sl, r0
 80163b2:	460c      	mov	r4, r1
 80163b4:	4690      	mov	r8, r2
 80163b6:	d82d      	bhi.n	8016414 <__ssputs_r+0x70>
 80163b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80163bc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80163c0:	d026      	beq.n	8016410 <__ssputs_r+0x6c>
 80163c2:	6965      	ldr	r5, [r4, #20]
 80163c4:	6909      	ldr	r1, [r1, #16]
 80163c6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80163ca:	eba3 0901 	sub.w	r9, r3, r1
 80163ce:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80163d2:	1c7b      	adds	r3, r7, #1
 80163d4:	444b      	add	r3, r9
 80163d6:	106d      	asrs	r5, r5, #1
 80163d8:	429d      	cmp	r5, r3
 80163da:	bf38      	it	cc
 80163dc:	461d      	movcc	r5, r3
 80163de:	0553      	lsls	r3, r2, #21
 80163e0:	d527      	bpl.n	8016432 <__ssputs_r+0x8e>
 80163e2:	4629      	mov	r1, r5
 80163e4:	f7ff fbd0 	bl	8015b88 <_malloc_r>
 80163e8:	4606      	mov	r6, r0
 80163ea:	b360      	cbz	r0, 8016446 <__ssputs_r+0xa2>
 80163ec:	6921      	ldr	r1, [r4, #16]
 80163ee:	464a      	mov	r2, r9
 80163f0:	f7fe fcfb 	bl	8014dea <memcpy>
 80163f4:	89a3      	ldrh	r3, [r4, #12]
 80163f6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80163fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80163fe:	81a3      	strh	r3, [r4, #12]
 8016400:	6126      	str	r6, [r4, #16]
 8016402:	6165      	str	r5, [r4, #20]
 8016404:	444e      	add	r6, r9
 8016406:	eba5 0509 	sub.w	r5, r5, r9
 801640a:	6026      	str	r6, [r4, #0]
 801640c:	60a5      	str	r5, [r4, #8]
 801640e:	463e      	mov	r6, r7
 8016410:	42be      	cmp	r6, r7
 8016412:	d900      	bls.n	8016416 <__ssputs_r+0x72>
 8016414:	463e      	mov	r6, r7
 8016416:	6820      	ldr	r0, [r4, #0]
 8016418:	4632      	mov	r2, r6
 801641a:	4641      	mov	r1, r8
 801641c:	f7fe fbf5 	bl	8014c0a <memmove>
 8016420:	68a3      	ldr	r3, [r4, #8]
 8016422:	1b9b      	subs	r3, r3, r6
 8016424:	60a3      	str	r3, [r4, #8]
 8016426:	6823      	ldr	r3, [r4, #0]
 8016428:	4433      	add	r3, r6
 801642a:	6023      	str	r3, [r4, #0]
 801642c:	2000      	movs	r0, #0
 801642e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016432:	462a      	mov	r2, r5
 8016434:	f000 fa0e 	bl	8016854 <_realloc_r>
 8016438:	4606      	mov	r6, r0
 801643a:	2800      	cmp	r0, #0
 801643c:	d1e0      	bne.n	8016400 <__ssputs_r+0x5c>
 801643e:	6921      	ldr	r1, [r4, #16]
 8016440:	4650      	mov	r0, sl
 8016442:	f7ff fb2d 	bl	8015aa0 <_free_r>
 8016446:	230c      	movs	r3, #12
 8016448:	f8ca 3000 	str.w	r3, [sl]
 801644c:	89a3      	ldrh	r3, [r4, #12]
 801644e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016452:	81a3      	strh	r3, [r4, #12]
 8016454:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016458:	e7e9      	b.n	801642e <__ssputs_r+0x8a>
	...

0801645c <_svfiprintf_r>:
 801645c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016460:	4698      	mov	r8, r3
 8016462:	898b      	ldrh	r3, [r1, #12]
 8016464:	061b      	lsls	r3, r3, #24
 8016466:	b09d      	sub	sp, #116	@ 0x74
 8016468:	4607      	mov	r7, r0
 801646a:	460d      	mov	r5, r1
 801646c:	4614      	mov	r4, r2
 801646e:	d510      	bpl.n	8016492 <_svfiprintf_r+0x36>
 8016470:	690b      	ldr	r3, [r1, #16]
 8016472:	b973      	cbnz	r3, 8016492 <_svfiprintf_r+0x36>
 8016474:	2140      	movs	r1, #64	@ 0x40
 8016476:	f7ff fb87 	bl	8015b88 <_malloc_r>
 801647a:	6028      	str	r0, [r5, #0]
 801647c:	6128      	str	r0, [r5, #16]
 801647e:	b930      	cbnz	r0, 801648e <_svfiprintf_r+0x32>
 8016480:	230c      	movs	r3, #12
 8016482:	603b      	str	r3, [r7, #0]
 8016484:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016488:	b01d      	add	sp, #116	@ 0x74
 801648a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801648e:	2340      	movs	r3, #64	@ 0x40
 8016490:	616b      	str	r3, [r5, #20]
 8016492:	2300      	movs	r3, #0
 8016494:	9309      	str	r3, [sp, #36]	@ 0x24
 8016496:	2320      	movs	r3, #32
 8016498:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801649c:	f8cd 800c 	str.w	r8, [sp, #12]
 80164a0:	2330      	movs	r3, #48	@ 0x30
 80164a2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8016640 <_svfiprintf_r+0x1e4>
 80164a6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80164aa:	f04f 0901 	mov.w	r9, #1
 80164ae:	4623      	mov	r3, r4
 80164b0:	469a      	mov	sl, r3
 80164b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80164b6:	b10a      	cbz	r2, 80164bc <_svfiprintf_r+0x60>
 80164b8:	2a25      	cmp	r2, #37	@ 0x25
 80164ba:	d1f9      	bne.n	80164b0 <_svfiprintf_r+0x54>
 80164bc:	ebba 0b04 	subs.w	fp, sl, r4
 80164c0:	d00b      	beq.n	80164da <_svfiprintf_r+0x7e>
 80164c2:	465b      	mov	r3, fp
 80164c4:	4622      	mov	r2, r4
 80164c6:	4629      	mov	r1, r5
 80164c8:	4638      	mov	r0, r7
 80164ca:	f7ff ff6b 	bl	80163a4 <__ssputs_r>
 80164ce:	3001      	adds	r0, #1
 80164d0:	f000 80a7 	beq.w	8016622 <_svfiprintf_r+0x1c6>
 80164d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80164d6:	445a      	add	r2, fp
 80164d8:	9209      	str	r2, [sp, #36]	@ 0x24
 80164da:	f89a 3000 	ldrb.w	r3, [sl]
 80164de:	2b00      	cmp	r3, #0
 80164e0:	f000 809f 	beq.w	8016622 <_svfiprintf_r+0x1c6>
 80164e4:	2300      	movs	r3, #0
 80164e6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80164ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80164ee:	f10a 0a01 	add.w	sl, sl, #1
 80164f2:	9304      	str	r3, [sp, #16]
 80164f4:	9307      	str	r3, [sp, #28]
 80164f6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80164fa:	931a      	str	r3, [sp, #104]	@ 0x68
 80164fc:	4654      	mov	r4, sl
 80164fe:	2205      	movs	r2, #5
 8016500:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016504:	484e      	ldr	r0, [pc, #312]	@ (8016640 <_svfiprintf_r+0x1e4>)
 8016506:	f7e9 fe8b 	bl	8000220 <memchr>
 801650a:	9a04      	ldr	r2, [sp, #16]
 801650c:	b9d8      	cbnz	r0, 8016546 <_svfiprintf_r+0xea>
 801650e:	06d0      	lsls	r0, r2, #27
 8016510:	bf44      	itt	mi
 8016512:	2320      	movmi	r3, #32
 8016514:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016518:	0711      	lsls	r1, r2, #28
 801651a:	bf44      	itt	mi
 801651c:	232b      	movmi	r3, #43	@ 0x2b
 801651e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016522:	f89a 3000 	ldrb.w	r3, [sl]
 8016526:	2b2a      	cmp	r3, #42	@ 0x2a
 8016528:	d015      	beq.n	8016556 <_svfiprintf_r+0xfa>
 801652a:	9a07      	ldr	r2, [sp, #28]
 801652c:	4654      	mov	r4, sl
 801652e:	2000      	movs	r0, #0
 8016530:	f04f 0c0a 	mov.w	ip, #10
 8016534:	4621      	mov	r1, r4
 8016536:	f811 3b01 	ldrb.w	r3, [r1], #1
 801653a:	3b30      	subs	r3, #48	@ 0x30
 801653c:	2b09      	cmp	r3, #9
 801653e:	d94b      	bls.n	80165d8 <_svfiprintf_r+0x17c>
 8016540:	b1b0      	cbz	r0, 8016570 <_svfiprintf_r+0x114>
 8016542:	9207      	str	r2, [sp, #28]
 8016544:	e014      	b.n	8016570 <_svfiprintf_r+0x114>
 8016546:	eba0 0308 	sub.w	r3, r0, r8
 801654a:	fa09 f303 	lsl.w	r3, r9, r3
 801654e:	4313      	orrs	r3, r2
 8016550:	9304      	str	r3, [sp, #16]
 8016552:	46a2      	mov	sl, r4
 8016554:	e7d2      	b.n	80164fc <_svfiprintf_r+0xa0>
 8016556:	9b03      	ldr	r3, [sp, #12]
 8016558:	1d19      	adds	r1, r3, #4
 801655a:	681b      	ldr	r3, [r3, #0]
 801655c:	9103      	str	r1, [sp, #12]
 801655e:	2b00      	cmp	r3, #0
 8016560:	bfbb      	ittet	lt
 8016562:	425b      	neglt	r3, r3
 8016564:	f042 0202 	orrlt.w	r2, r2, #2
 8016568:	9307      	strge	r3, [sp, #28]
 801656a:	9307      	strlt	r3, [sp, #28]
 801656c:	bfb8      	it	lt
 801656e:	9204      	strlt	r2, [sp, #16]
 8016570:	7823      	ldrb	r3, [r4, #0]
 8016572:	2b2e      	cmp	r3, #46	@ 0x2e
 8016574:	d10a      	bne.n	801658c <_svfiprintf_r+0x130>
 8016576:	7863      	ldrb	r3, [r4, #1]
 8016578:	2b2a      	cmp	r3, #42	@ 0x2a
 801657a:	d132      	bne.n	80165e2 <_svfiprintf_r+0x186>
 801657c:	9b03      	ldr	r3, [sp, #12]
 801657e:	1d1a      	adds	r2, r3, #4
 8016580:	681b      	ldr	r3, [r3, #0]
 8016582:	9203      	str	r2, [sp, #12]
 8016584:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8016588:	3402      	adds	r4, #2
 801658a:	9305      	str	r3, [sp, #20]
 801658c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8016650 <_svfiprintf_r+0x1f4>
 8016590:	7821      	ldrb	r1, [r4, #0]
 8016592:	2203      	movs	r2, #3
 8016594:	4650      	mov	r0, sl
 8016596:	f7e9 fe43 	bl	8000220 <memchr>
 801659a:	b138      	cbz	r0, 80165ac <_svfiprintf_r+0x150>
 801659c:	9b04      	ldr	r3, [sp, #16]
 801659e:	eba0 000a 	sub.w	r0, r0, sl
 80165a2:	2240      	movs	r2, #64	@ 0x40
 80165a4:	4082      	lsls	r2, r0
 80165a6:	4313      	orrs	r3, r2
 80165a8:	3401      	adds	r4, #1
 80165aa:	9304      	str	r3, [sp, #16]
 80165ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80165b0:	4824      	ldr	r0, [pc, #144]	@ (8016644 <_svfiprintf_r+0x1e8>)
 80165b2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80165b6:	2206      	movs	r2, #6
 80165b8:	f7e9 fe32 	bl	8000220 <memchr>
 80165bc:	2800      	cmp	r0, #0
 80165be:	d036      	beq.n	801662e <_svfiprintf_r+0x1d2>
 80165c0:	4b21      	ldr	r3, [pc, #132]	@ (8016648 <_svfiprintf_r+0x1ec>)
 80165c2:	bb1b      	cbnz	r3, 801660c <_svfiprintf_r+0x1b0>
 80165c4:	9b03      	ldr	r3, [sp, #12]
 80165c6:	3307      	adds	r3, #7
 80165c8:	f023 0307 	bic.w	r3, r3, #7
 80165cc:	3308      	adds	r3, #8
 80165ce:	9303      	str	r3, [sp, #12]
 80165d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80165d2:	4433      	add	r3, r6
 80165d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80165d6:	e76a      	b.n	80164ae <_svfiprintf_r+0x52>
 80165d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80165dc:	460c      	mov	r4, r1
 80165de:	2001      	movs	r0, #1
 80165e0:	e7a8      	b.n	8016534 <_svfiprintf_r+0xd8>
 80165e2:	2300      	movs	r3, #0
 80165e4:	3401      	adds	r4, #1
 80165e6:	9305      	str	r3, [sp, #20]
 80165e8:	4619      	mov	r1, r3
 80165ea:	f04f 0c0a 	mov.w	ip, #10
 80165ee:	4620      	mov	r0, r4
 80165f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80165f4:	3a30      	subs	r2, #48	@ 0x30
 80165f6:	2a09      	cmp	r2, #9
 80165f8:	d903      	bls.n	8016602 <_svfiprintf_r+0x1a6>
 80165fa:	2b00      	cmp	r3, #0
 80165fc:	d0c6      	beq.n	801658c <_svfiprintf_r+0x130>
 80165fe:	9105      	str	r1, [sp, #20]
 8016600:	e7c4      	b.n	801658c <_svfiprintf_r+0x130>
 8016602:	fb0c 2101 	mla	r1, ip, r1, r2
 8016606:	4604      	mov	r4, r0
 8016608:	2301      	movs	r3, #1
 801660a:	e7f0      	b.n	80165ee <_svfiprintf_r+0x192>
 801660c:	ab03      	add	r3, sp, #12
 801660e:	9300      	str	r3, [sp, #0]
 8016610:	462a      	mov	r2, r5
 8016612:	4b0e      	ldr	r3, [pc, #56]	@ (801664c <_svfiprintf_r+0x1f0>)
 8016614:	a904      	add	r1, sp, #16
 8016616:	4638      	mov	r0, r7
 8016618:	f7fd fe1a 	bl	8014250 <_printf_float>
 801661c:	1c42      	adds	r2, r0, #1
 801661e:	4606      	mov	r6, r0
 8016620:	d1d6      	bne.n	80165d0 <_svfiprintf_r+0x174>
 8016622:	89ab      	ldrh	r3, [r5, #12]
 8016624:	065b      	lsls	r3, r3, #25
 8016626:	f53f af2d 	bmi.w	8016484 <_svfiprintf_r+0x28>
 801662a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801662c:	e72c      	b.n	8016488 <_svfiprintf_r+0x2c>
 801662e:	ab03      	add	r3, sp, #12
 8016630:	9300      	str	r3, [sp, #0]
 8016632:	462a      	mov	r2, r5
 8016634:	4b05      	ldr	r3, [pc, #20]	@ (801664c <_svfiprintf_r+0x1f0>)
 8016636:	a904      	add	r1, sp, #16
 8016638:	4638      	mov	r0, r7
 801663a:	f7fe f8a1 	bl	8014780 <_printf_i>
 801663e:	e7ed      	b.n	801661c <_svfiprintf_r+0x1c0>
 8016640:	08017710 	.word	0x08017710
 8016644:	0801771a 	.word	0x0801771a
 8016648:	08014251 	.word	0x08014251
 801664c:	080163a5 	.word	0x080163a5
 8016650:	08017716 	.word	0x08017716

08016654 <__sflush_r>:
 8016654:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8016658:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801665c:	0716      	lsls	r6, r2, #28
 801665e:	4605      	mov	r5, r0
 8016660:	460c      	mov	r4, r1
 8016662:	d454      	bmi.n	801670e <__sflush_r+0xba>
 8016664:	684b      	ldr	r3, [r1, #4]
 8016666:	2b00      	cmp	r3, #0
 8016668:	dc02      	bgt.n	8016670 <__sflush_r+0x1c>
 801666a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801666c:	2b00      	cmp	r3, #0
 801666e:	dd48      	ble.n	8016702 <__sflush_r+0xae>
 8016670:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8016672:	2e00      	cmp	r6, #0
 8016674:	d045      	beq.n	8016702 <__sflush_r+0xae>
 8016676:	2300      	movs	r3, #0
 8016678:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801667c:	682f      	ldr	r7, [r5, #0]
 801667e:	6a21      	ldr	r1, [r4, #32]
 8016680:	602b      	str	r3, [r5, #0]
 8016682:	d030      	beq.n	80166e6 <__sflush_r+0x92>
 8016684:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8016686:	89a3      	ldrh	r3, [r4, #12]
 8016688:	0759      	lsls	r1, r3, #29
 801668a:	d505      	bpl.n	8016698 <__sflush_r+0x44>
 801668c:	6863      	ldr	r3, [r4, #4]
 801668e:	1ad2      	subs	r2, r2, r3
 8016690:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8016692:	b10b      	cbz	r3, 8016698 <__sflush_r+0x44>
 8016694:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8016696:	1ad2      	subs	r2, r2, r3
 8016698:	2300      	movs	r3, #0
 801669a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801669c:	6a21      	ldr	r1, [r4, #32]
 801669e:	4628      	mov	r0, r5
 80166a0:	47b0      	blx	r6
 80166a2:	1c43      	adds	r3, r0, #1
 80166a4:	89a3      	ldrh	r3, [r4, #12]
 80166a6:	d106      	bne.n	80166b6 <__sflush_r+0x62>
 80166a8:	6829      	ldr	r1, [r5, #0]
 80166aa:	291d      	cmp	r1, #29
 80166ac:	d82b      	bhi.n	8016706 <__sflush_r+0xb2>
 80166ae:	4a2a      	ldr	r2, [pc, #168]	@ (8016758 <__sflush_r+0x104>)
 80166b0:	410a      	asrs	r2, r1
 80166b2:	07d6      	lsls	r6, r2, #31
 80166b4:	d427      	bmi.n	8016706 <__sflush_r+0xb2>
 80166b6:	2200      	movs	r2, #0
 80166b8:	6062      	str	r2, [r4, #4]
 80166ba:	04d9      	lsls	r1, r3, #19
 80166bc:	6922      	ldr	r2, [r4, #16]
 80166be:	6022      	str	r2, [r4, #0]
 80166c0:	d504      	bpl.n	80166cc <__sflush_r+0x78>
 80166c2:	1c42      	adds	r2, r0, #1
 80166c4:	d101      	bne.n	80166ca <__sflush_r+0x76>
 80166c6:	682b      	ldr	r3, [r5, #0]
 80166c8:	b903      	cbnz	r3, 80166cc <__sflush_r+0x78>
 80166ca:	6560      	str	r0, [r4, #84]	@ 0x54
 80166cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80166ce:	602f      	str	r7, [r5, #0]
 80166d0:	b1b9      	cbz	r1, 8016702 <__sflush_r+0xae>
 80166d2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80166d6:	4299      	cmp	r1, r3
 80166d8:	d002      	beq.n	80166e0 <__sflush_r+0x8c>
 80166da:	4628      	mov	r0, r5
 80166dc:	f7ff f9e0 	bl	8015aa0 <_free_r>
 80166e0:	2300      	movs	r3, #0
 80166e2:	6363      	str	r3, [r4, #52]	@ 0x34
 80166e4:	e00d      	b.n	8016702 <__sflush_r+0xae>
 80166e6:	2301      	movs	r3, #1
 80166e8:	4628      	mov	r0, r5
 80166ea:	47b0      	blx	r6
 80166ec:	4602      	mov	r2, r0
 80166ee:	1c50      	adds	r0, r2, #1
 80166f0:	d1c9      	bne.n	8016686 <__sflush_r+0x32>
 80166f2:	682b      	ldr	r3, [r5, #0]
 80166f4:	2b00      	cmp	r3, #0
 80166f6:	d0c6      	beq.n	8016686 <__sflush_r+0x32>
 80166f8:	2b1d      	cmp	r3, #29
 80166fa:	d001      	beq.n	8016700 <__sflush_r+0xac>
 80166fc:	2b16      	cmp	r3, #22
 80166fe:	d11e      	bne.n	801673e <__sflush_r+0xea>
 8016700:	602f      	str	r7, [r5, #0]
 8016702:	2000      	movs	r0, #0
 8016704:	e022      	b.n	801674c <__sflush_r+0xf8>
 8016706:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801670a:	b21b      	sxth	r3, r3
 801670c:	e01b      	b.n	8016746 <__sflush_r+0xf2>
 801670e:	690f      	ldr	r7, [r1, #16]
 8016710:	2f00      	cmp	r7, #0
 8016712:	d0f6      	beq.n	8016702 <__sflush_r+0xae>
 8016714:	0793      	lsls	r3, r2, #30
 8016716:	680e      	ldr	r6, [r1, #0]
 8016718:	bf08      	it	eq
 801671a:	694b      	ldreq	r3, [r1, #20]
 801671c:	600f      	str	r7, [r1, #0]
 801671e:	bf18      	it	ne
 8016720:	2300      	movne	r3, #0
 8016722:	eba6 0807 	sub.w	r8, r6, r7
 8016726:	608b      	str	r3, [r1, #8]
 8016728:	f1b8 0f00 	cmp.w	r8, #0
 801672c:	dde9      	ble.n	8016702 <__sflush_r+0xae>
 801672e:	6a21      	ldr	r1, [r4, #32]
 8016730:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8016732:	4643      	mov	r3, r8
 8016734:	463a      	mov	r2, r7
 8016736:	4628      	mov	r0, r5
 8016738:	47b0      	blx	r6
 801673a:	2800      	cmp	r0, #0
 801673c:	dc08      	bgt.n	8016750 <__sflush_r+0xfc>
 801673e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016742:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016746:	81a3      	strh	r3, [r4, #12]
 8016748:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801674c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016750:	4407      	add	r7, r0
 8016752:	eba8 0800 	sub.w	r8, r8, r0
 8016756:	e7e7      	b.n	8016728 <__sflush_r+0xd4>
 8016758:	dfbffffe 	.word	0xdfbffffe

0801675c <_fflush_r>:
 801675c:	b538      	push	{r3, r4, r5, lr}
 801675e:	690b      	ldr	r3, [r1, #16]
 8016760:	4605      	mov	r5, r0
 8016762:	460c      	mov	r4, r1
 8016764:	b913      	cbnz	r3, 801676c <_fflush_r+0x10>
 8016766:	2500      	movs	r5, #0
 8016768:	4628      	mov	r0, r5
 801676a:	bd38      	pop	{r3, r4, r5, pc}
 801676c:	b118      	cbz	r0, 8016776 <_fflush_r+0x1a>
 801676e:	6a03      	ldr	r3, [r0, #32]
 8016770:	b90b      	cbnz	r3, 8016776 <_fflush_r+0x1a>
 8016772:	f7fe f9b1 	bl	8014ad8 <__sinit>
 8016776:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801677a:	2b00      	cmp	r3, #0
 801677c:	d0f3      	beq.n	8016766 <_fflush_r+0xa>
 801677e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8016780:	07d0      	lsls	r0, r2, #31
 8016782:	d404      	bmi.n	801678e <_fflush_r+0x32>
 8016784:	0599      	lsls	r1, r3, #22
 8016786:	d402      	bmi.n	801678e <_fflush_r+0x32>
 8016788:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801678a:	f7fe fb2c 	bl	8014de6 <__retarget_lock_acquire_recursive>
 801678e:	4628      	mov	r0, r5
 8016790:	4621      	mov	r1, r4
 8016792:	f7ff ff5f 	bl	8016654 <__sflush_r>
 8016796:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8016798:	07da      	lsls	r2, r3, #31
 801679a:	4605      	mov	r5, r0
 801679c:	d4e4      	bmi.n	8016768 <_fflush_r+0xc>
 801679e:	89a3      	ldrh	r3, [r4, #12]
 80167a0:	059b      	lsls	r3, r3, #22
 80167a2:	d4e1      	bmi.n	8016768 <_fflush_r+0xc>
 80167a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80167a6:	f7fe fb1f 	bl	8014de8 <__retarget_lock_release_recursive>
 80167aa:	e7dd      	b.n	8016768 <_fflush_r+0xc>

080167ac <_sbrk_r>:
 80167ac:	b538      	push	{r3, r4, r5, lr}
 80167ae:	4d06      	ldr	r5, [pc, #24]	@ (80167c8 <_sbrk_r+0x1c>)
 80167b0:	2300      	movs	r3, #0
 80167b2:	4604      	mov	r4, r0
 80167b4:	4608      	mov	r0, r1
 80167b6:	602b      	str	r3, [r5, #0]
 80167b8:	f7ee fd8e 	bl	80052d8 <_sbrk>
 80167bc:	1c43      	adds	r3, r0, #1
 80167be:	d102      	bne.n	80167c6 <_sbrk_r+0x1a>
 80167c0:	682b      	ldr	r3, [r5, #0]
 80167c2:	b103      	cbz	r3, 80167c6 <_sbrk_r+0x1a>
 80167c4:	6023      	str	r3, [r4, #0]
 80167c6:	bd38      	pop	{r3, r4, r5, pc}
 80167c8:	20008fa0 	.word	0x20008fa0

080167cc <__assert_func>:
 80167cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80167ce:	4614      	mov	r4, r2
 80167d0:	461a      	mov	r2, r3
 80167d2:	4b09      	ldr	r3, [pc, #36]	@ (80167f8 <__assert_func+0x2c>)
 80167d4:	681b      	ldr	r3, [r3, #0]
 80167d6:	4605      	mov	r5, r0
 80167d8:	68d8      	ldr	r0, [r3, #12]
 80167da:	b954      	cbnz	r4, 80167f2 <__assert_func+0x26>
 80167dc:	4b07      	ldr	r3, [pc, #28]	@ (80167fc <__assert_func+0x30>)
 80167de:	461c      	mov	r4, r3
 80167e0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80167e4:	9100      	str	r1, [sp, #0]
 80167e6:	462b      	mov	r3, r5
 80167e8:	4905      	ldr	r1, [pc, #20]	@ (8016800 <__assert_func+0x34>)
 80167ea:	f000 f86f 	bl	80168cc <fiprintf>
 80167ee:	f000 f87f 	bl	80168f0 <abort>
 80167f2:	4b04      	ldr	r3, [pc, #16]	@ (8016804 <__assert_func+0x38>)
 80167f4:	e7f4      	b.n	80167e0 <__assert_func+0x14>
 80167f6:	bf00      	nop
 80167f8:	200003b4 	.word	0x200003b4
 80167fc:	08017766 	.word	0x08017766
 8016800:	08017738 	.word	0x08017738
 8016804:	0801772b 	.word	0x0801772b

08016808 <_calloc_r>:
 8016808:	b570      	push	{r4, r5, r6, lr}
 801680a:	fba1 5402 	umull	r5, r4, r1, r2
 801680e:	b93c      	cbnz	r4, 8016820 <_calloc_r+0x18>
 8016810:	4629      	mov	r1, r5
 8016812:	f7ff f9b9 	bl	8015b88 <_malloc_r>
 8016816:	4606      	mov	r6, r0
 8016818:	b928      	cbnz	r0, 8016826 <_calloc_r+0x1e>
 801681a:	2600      	movs	r6, #0
 801681c:	4630      	mov	r0, r6
 801681e:	bd70      	pop	{r4, r5, r6, pc}
 8016820:	220c      	movs	r2, #12
 8016822:	6002      	str	r2, [r0, #0]
 8016824:	e7f9      	b.n	801681a <_calloc_r+0x12>
 8016826:	462a      	mov	r2, r5
 8016828:	4621      	mov	r1, r4
 801682a:	f7fe fa08 	bl	8014c3e <memset>
 801682e:	e7f5      	b.n	801681c <_calloc_r+0x14>

08016830 <__ascii_mbtowc>:
 8016830:	b082      	sub	sp, #8
 8016832:	b901      	cbnz	r1, 8016836 <__ascii_mbtowc+0x6>
 8016834:	a901      	add	r1, sp, #4
 8016836:	b142      	cbz	r2, 801684a <__ascii_mbtowc+0x1a>
 8016838:	b14b      	cbz	r3, 801684e <__ascii_mbtowc+0x1e>
 801683a:	7813      	ldrb	r3, [r2, #0]
 801683c:	600b      	str	r3, [r1, #0]
 801683e:	7812      	ldrb	r2, [r2, #0]
 8016840:	1e10      	subs	r0, r2, #0
 8016842:	bf18      	it	ne
 8016844:	2001      	movne	r0, #1
 8016846:	b002      	add	sp, #8
 8016848:	4770      	bx	lr
 801684a:	4610      	mov	r0, r2
 801684c:	e7fb      	b.n	8016846 <__ascii_mbtowc+0x16>
 801684e:	f06f 0001 	mvn.w	r0, #1
 8016852:	e7f8      	b.n	8016846 <__ascii_mbtowc+0x16>

08016854 <_realloc_r>:
 8016854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016858:	4680      	mov	r8, r0
 801685a:	4615      	mov	r5, r2
 801685c:	460c      	mov	r4, r1
 801685e:	b921      	cbnz	r1, 801686a <_realloc_r+0x16>
 8016860:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016864:	4611      	mov	r1, r2
 8016866:	f7ff b98f 	b.w	8015b88 <_malloc_r>
 801686a:	b92a      	cbnz	r2, 8016878 <_realloc_r+0x24>
 801686c:	f7ff f918 	bl	8015aa0 <_free_r>
 8016870:	2400      	movs	r4, #0
 8016872:	4620      	mov	r0, r4
 8016874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016878:	f000 f841 	bl	80168fe <_malloc_usable_size_r>
 801687c:	4285      	cmp	r5, r0
 801687e:	4606      	mov	r6, r0
 8016880:	d802      	bhi.n	8016888 <_realloc_r+0x34>
 8016882:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8016886:	d8f4      	bhi.n	8016872 <_realloc_r+0x1e>
 8016888:	4629      	mov	r1, r5
 801688a:	4640      	mov	r0, r8
 801688c:	f7ff f97c 	bl	8015b88 <_malloc_r>
 8016890:	4607      	mov	r7, r0
 8016892:	2800      	cmp	r0, #0
 8016894:	d0ec      	beq.n	8016870 <_realloc_r+0x1c>
 8016896:	42b5      	cmp	r5, r6
 8016898:	462a      	mov	r2, r5
 801689a:	4621      	mov	r1, r4
 801689c:	bf28      	it	cs
 801689e:	4632      	movcs	r2, r6
 80168a0:	f7fe faa3 	bl	8014dea <memcpy>
 80168a4:	4621      	mov	r1, r4
 80168a6:	4640      	mov	r0, r8
 80168a8:	f7ff f8fa 	bl	8015aa0 <_free_r>
 80168ac:	463c      	mov	r4, r7
 80168ae:	e7e0      	b.n	8016872 <_realloc_r+0x1e>

080168b0 <__ascii_wctomb>:
 80168b0:	4603      	mov	r3, r0
 80168b2:	4608      	mov	r0, r1
 80168b4:	b141      	cbz	r1, 80168c8 <__ascii_wctomb+0x18>
 80168b6:	2aff      	cmp	r2, #255	@ 0xff
 80168b8:	d904      	bls.n	80168c4 <__ascii_wctomb+0x14>
 80168ba:	228a      	movs	r2, #138	@ 0x8a
 80168bc:	601a      	str	r2, [r3, #0]
 80168be:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80168c2:	4770      	bx	lr
 80168c4:	700a      	strb	r2, [r1, #0]
 80168c6:	2001      	movs	r0, #1
 80168c8:	4770      	bx	lr
	...

080168cc <fiprintf>:
 80168cc:	b40e      	push	{r1, r2, r3}
 80168ce:	b503      	push	{r0, r1, lr}
 80168d0:	4601      	mov	r1, r0
 80168d2:	ab03      	add	r3, sp, #12
 80168d4:	4805      	ldr	r0, [pc, #20]	@ (80168ec <fiprintf+0x20>)
 80168d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80168da:	6800      	ldr	r0, [r0, #0]
 80168dc:	9301      	str	r3, [sp, #4]
 80168de:	f000 f83f 	bl	8016960 <_vfiprintf_r>
 80168e2:	b002      	add	sp, #8
 80168e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80168e8:	b003      	add	sp, #12
 80168ea:	4770      	bx	lr
 80168ec:	200003b4 	.word	0x200003b4

080168f0 <abort>:
 80168f0:	b508      	push	{r3, lr}
 80168f2:	2006      	movs	r0, #6
 80168f4:	f000 fa08 	bl	8016d08 <raise>
 80168f8:	2001      	movs	r0, #1
 80168fa:	f7ee fc75 	bl	80051e8 <_exit>

080168fe <_malloc_usable_size_r>:
 80168fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016902:	1f18      	subs	r0, r3, #4
 8016904:	2b00      	cmp	r3, #0
 8016906:	bfbc      	itt	lt
 8016908:	580b      	ldrlt	r3, [r1, r0]
 801690a:	18c0      	addlt	r0, r0, r3
 801690c:	4770      	bx	lr

0801690e <__sfputc_r>:
 801690e:	6893      	ldr	r3, [r2, #8]
 8016910:	3b01      	subs	r3, #1
 8016912:	2b00      	cmp	r3, #0
 8016914:	b410      	push	{r4}
 8016916:	6093      	str	r3, [r2, #8]
 8016918:	da08      	bge.n	801692c <__sfputc_r+0x1e>
 801691a:	6994      	ldr	r4, [r2, #24]
 801691c:	42a3      	cmp	r3, r4
 801691e:	db01      	blt.n	8016924 <__sfputc_r+0x16>
 8016920:	290a      	cmp	r1, #10
 8016922:	d103      	bne.n	801692c <__sfputc_r+0x1e>
 8016924:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016928:	f000 b932 	b.w	8016b90 <__swbuf_r>
 801692c:	6813      	ldr	r3, [r2, #0]
 801692e:	1c58      	adds	r0, r3, #1
 8016930:	6010      	str	r0, [r2, #0]
 8016932:	7019      	strb	r1, [r3, #0]
 8016934:	4608      	mov	r0, r1
 8016936:	f85d 4b04 	ldr.w	r4, [sp], #4
 801693a:	4770      	bx	lr

0801693c <__sfputs_r>:
 801693c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801693e:	4606      	mov	r6, r0
 8016940:	460f      	mov	r7, r1
 8016942:	4614      	mov	r4, r2
 8016944:	18d5      	adds	r5, r2, r3
 8016946:	42ac      	cmp	r4, r5
 8016948:	d101      	bne.n	801694e <__sfputs_r+0x12>
 801694a:	2000      	movs	r0, #0
 801694c:	e007      	b.n	801695e <__sfputs_r+0x22>
 801694e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016952:	463a      	mov	r2, r7
 8016954:	4630      	mov	r0, r6
 8016956:	f7ff ffda 	bl	801690e <__sfputc_r>
 801695a:	1c43      	adds	r3, r0, #1
 801695c:	d1f3      	bne.n	8016946 <__sfputs_r+0xa>
 801695e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08016960 <_vfiprintf_r>:
 8016960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016964:	460d      	mov	r5, r1
 8016966:	b09d      	sub	sp, #116	@ 0x74
 8016968:	4614      	mov	r4, r2
 801696a:	4698      	mov	r8, r3
 801696c:	4606      	mov	r6, r0
 801696e:	b118      	cbz	r0, 8016978 <_vfiprintf_r+0x18>
 8016970:	6a03      	ldr	r3, [r0, #32]
 8016972:	b90b      	cbnz	r3, 8016978 <_vfiprintf_r+0x18>
 8016974:	f7fe f8b0 	bl	8014ad8 <__sinit>
 8016978:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801697a:	07d9      	lsls	r1, r3, #31
 801697c:	d405      	bmi.n	801698a <_vfiprintf_r+0x2a>
 801697e:	89ab      	ldrh	r3, [r5, #12]
 8016980:	059a      	lsls	r2, r3, #22
 8016982:	d402      	bmi.n	801698a <_vfiprintf_r+0x2a>
 8016984:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8016986:	f7fe fa2e 	bl	8014de6 <__retarget_lock_acquire_recursive>
 801698a:	89ab      	ldrh	r3, [r5, #12]
 801698c:	071b      	lsls	r3, r3, #28
 801698e:	d501      	bpl.n	8016994 <_vfiprintf_r+0x34>
 8016990:	692b      	ldr	r3, [r5, #16]
 8016992:	b99b      	cbnz	r3, 80169bc <_vfiprintf_r+0x5c>
 8016994:	4629      	mov	r1, r5
 8016996:	4630      	mov	r0, r6
 8016998:	f000 f938 	bl	8016c0c <__swsetup_r>
 801699c:	b170      	cbz	r0, 80169bc <_vfiprintf_r+0x5c>
 801699e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80169a0:	07dc      	lsls	r4, r3, #31
 80169a2:	d504      	bpl.n	80169ae <_vfiprintf_r+0x4e>
 80169a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80169a8:	b01d      	add	sp, #116	@ 0x74
 80169aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80169ae:	89ab      	ldrh	r3, [r5, #12]
 80169b0:	0598      	lsls	r0, r3, #22
 80169b2:	d4f7      	bmi.n	80169a4 <_vfiprintf_r+0x44>
 80169b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80169b6:	f7fe fa17 	bl	8014de8 <__retarget_lock_release_recursive>
 80169ba:	e7f3      	b.n	80169a4 <_vfiprintf_r+0x44>
 80169bc:	2300      	movs	r3, #0
 80169be:	9309      	str	r3, [sp, #36]	@ 0x24
 80169c0:	2320      	movs	r3, #32
 80169c2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80169c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80169ca:	2330      	movs	r3, #48	@ 0x30
 80169cc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8016b7c <_vfiprintf_r+0x21c>
 80169d0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80169d4:	f04f 0901 	mov.w	r9, #1
 80169d8:	4623      	mov	r3, r4
 80169da:	469a      	mov	sl, r3
 80169dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80169e0:	b10a      	cbz	r2, 80169e6 <_vfiprintf_r+0x86>
 80169e2:	2a25      	cmp	r2, #37	@ 0x25
 80169e4:	d1f9      	bne.n	80169da <_vfiprintf_r+0x7a>
 80169e6:	ebba 0b04 	subs.w	fp, sl, r4
 80169ea:	d00b      	beq.n	8016a04 <_vfiprintf_r+0xa4>
 80169ec:	465b      	mov	r3, fp
 80169ee:	4622      	mov	r2, r4
 80169f0:	4629      	mov	r1, r5
 80169f2:	4630      	mov	r0, r6
 80169f4:	f7ff ffa2 	bl	801693c <__sfputs_r>
 80169f8:	3001      	adds	r0, #1
 80169fa:	f000 80a7 	beq.w	8016b4c <_vfiprintf_r+0x1ec>
 80169fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016a00:	445a      	add	r2, fp
 8016a02:	9209      	str	r2, [sp, #36]	@ 0x24
 8016a04:	f89a 3000 	ldrb.w	r3, [sl]
 8016a08:	2b00      	cmp	r3, #0
 8016a0a:	f000 809f 	beq.w	8016b4c <_vfiprintf_r+0x1ec>
 8016a0e:	2300      	movs	r3, #0
 8016a10:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8016a14:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016a18:	f10a 0a01 	add.w	sl, sl, #1
 8016a1c:	9304      	str	r3, [sp, #16]
 8016a1e:	9307      	str	r3, [sp, #28]
 8016a20:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8016a24:	931a      	str	r3, [sp, #104]	@ 0x68
 8016a26:	4654      	mov	r4, sl
 8016a28:	2205      	movs	r2, #5
 8016a2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016a2e:	4853      	ldr	r0, [pc, #332]	@ (8016b7c <_vfiprintf_r+0x21c>)
 8016a30:	f7e9 fbf6 	bl	8000220 <memchr>
 8016a34:	9a04      	ldr	r2, [sp, #16]
 8016a36:	b9d8      	cbnz	r0, 8016a70 <_vfiprintf_r+0x110>
 8016a38:	06d1      	lsls	r1, r2, #27
 8016a3a:	bf44      	itt	mi
 8016a3c:	2320      	movmi	r3, #32
 8016a3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016a42:	0713      	lsls	r3, r2, #28
 8016a44:	bf44      	itt	mi
 8016a46:	232b      	movmi	r3, #43	@ 0x2b
 8016a48:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016a4c:	f89a 3000 	ldrb.w	r3, [sl]
 8016a50:	2b2a      	cmp	r3, #42	@ 0x2a
 8016a52:	d015      	beq.n	8016a80 <_vfiprintf_r+0x120>
 8016a54:	9a07      	ldr	r2, [sp, #28]
 8016a56:	4654      	mov	r4, sl
 8016a58:	2000      	movs	r0, #0
 8016a5a:	f04f 0c0a 	mov.w	ip, #10
 8016a5e:	4621      	mov	r1, r4
 8016a60:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016a64:	3b30      	subs	r3, #48	@ 0x30
 8016a66:	2b09      	cmp	r3, #9
 8016a68:	d94b      	bls.n	8016b02 <_vfiprintf_r+0x1a2>
 8016a6a:	b1b0      	cbz	r0, 8016a9a <_vfiprintf_r+0x13a>
 8016a6c:	9207      	str	r2, [sp, #28]
 8016a6e:	e014      	b.n	8016a9a <_vfiprintf_r+0x13a>
 8016a70:	eba0 0308 	sub.w	r3, r0, r8
 8016a74:	fa09 f303 	lsl.w	r3, r9, r3
 8016a78:	4313      	orrs	r3, r2
 8016a7a:	9304      	str	r3, [sp, #16]
 8016a7c:	46a2      	mov	sl, r4
 8016a7e:	e7d2      	b.n	8016a26 <_vfiprintf_r+0xc6>
 8016a80:	9b03      	ldr	r3, [sp, #12]
 8016a82:	1d19      	adds	r1, r3, #4
 8016a84:	681b      	ldr	r3, [r3, #0]
 8016a86:	9103      	str	r1, [sp, #12]
 8016a88:	2b00      	cmp	r3, #0
 8016a8a:	bfbb      	ittet	lt
 8016a8c:	425b      	neglt	r3, r3
 8016a8e:	f042 0202 	orrlt.w	r2, r2, #2
 8016a92:	9307      	strge	r3, [sp, #28]
 8016a94:	9307      	strlt	r3, [sp, #28]
 8016a96:	bfb8      	it	lt
 8016a98:	9204      	strlt	r2, [sp, #16]
 8016a9a:	7823      	ldrb	r3, [r4, #0]
 8016a9c:	2b2e      	cmp	r3, #46	@ 0x2e
 8016a9e:	d10a      	bne.n	8016ab6 <_vfiprintf_r+0x156>
 8016aa0:	7863      	ldrb	r3, [r4, #1]
 8016aa2:	2b2a      	cmp	r3, #42	@ 0x2a
 8016aa4:	d132      	bne.n	8016b0c <_vfiprintf_r+0x1ac>
 8016aa6:	9b03      	ldr	r3, [sp, #12]
 8016aa8:	1d1a      	adds	r2, r3, #4
 8016aaa:	681b      	ldr	r3, [r3, #0]
 8016aac:	9203      	str	r2, [sp, #12]
 8016aae:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8016ab2:	3402      	adds	r4, #2
 8016ab4:	9305      	str	r3, [sp, #20]
 8016ab6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8016b8c <_vfiprintf_r+0x22c>
 8016aba:	7821      	ldrb	r1, [r4, #0]
 8016abc:	2203      	movs	r2, #3
 8016abe:	4650      	mov	r0, sl
 8016ac0:	f7e9 fbae 	bl	8000220 <memchr>
 8016ac4:	b138      	cbz	r0, 8016ad6 <_vfiprintf_r+0x176>
 8016ac6:	9b04      	ldr	r3, [sp, #16]
 8016ac8:	eba0 000a 	sub.w	r0, r0, sl
 8016acc:	2240      	movs	r2, #64	@ 0x40
 8016ace:	4082      	lsls	r2, r0
 8016ad0:	4313      	orrs	r3, r2
 8016ad2:	3401      	adds	r4, #1
 8016ad4:	9304      	str	r3, [sp, #16]
 8016ad6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016ada:	4829      	ldr	r0, [pc, #164]	@ (8016b80 <_vfiprintf_r+0x220>)
 8016adc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8016ae0:	2206      	movs	r2, #6
 8016ae2:	f7e9 fb9d 	bl	8000220 <memchr>
 8016ae6:	2800      	cmp	r0, #0
 8016ae8:	d03f      	beq.n	8016b6a <_vfiprintf_r+0x20a>
 8016aea:	4b26      	ldr	r3, [pc, #152]	@ (8016b84 <_vfiprintf_r+0x224>)
 8016aec:	bb1b      	cbnz	r3, 8016b36 <_vfiprintf_r+0x1d6>
 8016aee:	9b03      	ldr	r3, [sp, #12]
 8016af0:	3307      	adds	r3, #7
 8016af2:	f023 0307 	bic.w	r3, r3, #7
 8016af6:	3308      	adds	r3, #8
 8016af8:	9303      	str	r3, [sp, #12]
 8016afa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016afc:	443b      	add	r3, r7
 8016afe:	9309      	str	r3, [sp, #36]	@ 0x24
 8016b00:	e76a      	b.n	80169d8 <_vfiprintf_r+0x78>
 8016b02:	fb0c 3202 	mla	r2, ip, r2, r3
 8016b06:	460c      	mov	r4, r1
 8016b08:	2001      	movs	r0, #1
 8016b0a:	e7a8      	b.n	8016a5e <_vfiprintf_r+0xfe>
 8016b0c:	2300      	movs	r3, #0
 8016b0e:	3401      	adds	r4, #1
 8016b10:	9305      	str	r3, [sp, #20]
 8016b12:	4619      	mov	r1, r3
 8016b14:	f04f 0c0a 	mov.w	ip, #10
 8016b18:	4620      	mov	r0, r4
 8016b1a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016b1e:	3a30      	subs	r2, #48	@ 0x30
 8016b20:	2a09      	cmp	r2, #9
 8016b22:	d903      	bls.n	8016b2c <_vfiprintf_r+0x1cc>
 8016b24:	2b00      	cmp	r3, #0
 8016b26:	d0c6      	beq.n	8016ab6 <_vfiprintf_r+0x156>
 8016b28:	9105      	str	r1, [sp, #20]
 8016b2a:	e7c4      	b.n	8016ab6 <_vfiprintf_r+0x156>
 8016b2c:	fb0c 2101 	mla	r1, ip, r1, r2
 8016b30:	4604      	mov	r4, r0
 8016b32:	2301      	movs	r3, #1
 8016b34:	e7f0      	b.n	8016b18 <_vfiprintf_r+0x1b8>
 8016b36:	ab03      	add	r3, sp, #12
 8016b38:	9300      	str	r3, [sp, #0]
 8016b3a:	462a      	mov	r2, r5
 8016b3c:	4b12      	ldr	r3, [pc, #72]	@ (8016b88 <_vfiprintf_r+0x228>)
 8016b3e:	a904      	add	r1, sp, #16
 8016b40:	4630      	mov	r0, r6
 8016b42:	f7fd fb85 	bl	8014250 <_printf_float>
 8016b46:	4607      	mov	r7, r0
 8016b48:	1c78      	adds	r0, r7, #1
 8016b4a:	d1d6      	bne.n	8016afa <_vfiprintf_r+0x19a>
 8016b4c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016b4e:	07d9      	lsls	r1, r3, #31
 8016b50:	d405      	bmi.n	8016b5e <_vfiprintf_r+0x1fe>
 8016b52:	89ab      	ldrh	r3, [r5, #12]
 8016b54:	059a      	lsls	r2, r3, #22
 8016b56:	d402      	bmi.n	8016b5e <_vfiprintf_r+0x1fe>
 8016b58:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8016b5a:	f7fe f945 	bl	8014de8 <__retarget_lock_release_recursive>
 8016b5e:	89ab      	ldrh	r3, [r5, #12]
 8016b60:	065b      	lsls	r3, r3, #25
 8016b62:	f53f af1f 	bmi.w	80169a4 <_vfiprintf_r+0x44>
 8016b66:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016b68:	e71e      	b.n	80169a8 <_vfiprintf_r+0x48>
 8016b6a:	ab03      	add	r3, sp, #12
 8016b6c:	9300      	str	r3, [sp, #0]
 8016b6e:	462a      	mov	r2, r5
 8016b70:	4b05      	ldr	r3, [pc, #20]	@ (8016b88 <_vfiprintf_r+0x228>)
 8016b72:	a904      	add	r1, sp, #16
 8016b74:	4630      	mov	r0, r6
 8016b76:	f7fd fe03 	bl	8014780 <_printf_i>
 8016b7a:	e7e4      	b.n	8016b46 <_vfiprintf_r+0x1e6>
 8016b7c:	08017710 	.word	0x08017710
 8016b80:	0801771a 	.word	0x0801771a
 8016b84:	08014251 	.word	0x08014251
 8016b88:	0801693d 	.word	0x0801693d
 8016b8c:	08017716 	.word	0x08017716

08016b90 <__swbuf_r>:
 8016b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016b92:	460e      	mov	r6, r1
 8016b94:	4614      	mov	r4, r2
 8016b96:	4605      	mov	r5, r0
 8016b98:	b118      	cbz	r0, 8016ba2 <__swbuf_r+0x12>
 8016b9a:	6a03      	ldr	r3, [r0, #32]
 8016b9c:	b90b      	cbnz	r3, 8016ba2 <__swbuf_r+0x12>
 8016b9e:	f7fd ff9b 	bl	8014ad8 <__sinit>
 8016ba2:	69a3      	ldr	r3, [r4, #24]
 8016ba4:	60a3      	str	r3, [r4, #8]
 8016ba6:	89a3      	ldrh	r3, [r4, #12]
 8016ba8:	071a      	lsls	r2, r3, #28
 8016baa:	d501      	bpl.n	8016bb0 <__swbuf_r+0x20>
 8016bac:	6923      	ldr	r3, [r4, #16]
 8016bae:	b943      	cbnz	r3, 8016bc2 <__swbuf_r+0x32>
 8016bb0:	4621      	mov	r1, r4
 8016bb2:	4628      	mov	r0, r5
 8016bb4:	f000 f82a 	bl	8016c0c <__swsetup_r>
 8016bb8:	b118      	cbz	r0, 8016bc2 <__swbuf_r+0x32>
 8016bba:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8016bbe:	4638      	mov	r0, r7
 8016bc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016bc2:	6823      	ldr	r3, [r4, #0]
 8016bc4:	6922      	ldr	r2, [r4, #16]
 8016bc6:	1a98      	subs	r0, r3, r2
 8016bc8:	6963      	ldr	r3, [r4, #20]
 8016bca:	b2f6      	uxtb	r6, r6
 8016bcc:	4283      	cmp	r3, r0
 8016bce:	4637      	mov	r7, r6
 8016bd0:	dc05      	bgt.n	8016bde <__swbuf_r+0x4e>
 8016bd2:	4621      	mov	r1, r4
 8016bd4:	4628      	mov	r0, r5
 8016bd6:	f7ff fdc1 	bl	801675c <_fflush_r>
 8016bda:	2800      	cmp	r0, #0
 8016bdc:	d1ed      	bne.n	8016bba <__swbuf_r+0x2a>
 8016bde:	68a3      	ldr	r3, [r4, #8]
 8016be0:	3b01      	subs	r3, #1
 8016be2:	60a3      	str	r3, [r4, #8]
 8016be4:	6823      	ldr	r3, [r4, #0]
 8016be6:	1c5a      	adds	r2, r3, #1
 8016be8:	6022      	str	r2, [r4, #0]
 8016bea:	701e      	strb	r6, [r3, #0]
 8016bec:	6962      	ldr	r2, [r4, #20]
 8016bee:	1c43      	adds	r3, r0, #1
 8016bf0:	429a      	cmp	r2, r3
 8016bf2:	d004      	beq.n	8016bfe <__swbuf_r+0x6e>
 8016bf4:	89a3      	ldrh	r3, [r4, #12]
 8016bf6:	07db      	lsls	r3, r3, #31
 8016bf8:	d5e1      	bpl.n	8016bbe <__swbuf_r+0x2e>
 8016bfa:	2e0a      	cmp	r6, #10
 8016bfc:	d1df      	bne.n	8016bbe <__swbuf_r+0x2e>
 8016bfe:	4621      	mov	r1, r4
 8016c00:	4628      	mov	r0, r5
 8016c02:	f7ff fdab 	bl	801675c <_fflush_r>
 8016c06:	2800      	cmp	r0, #0
 8016c08:	d0d9      	beq.n	8016bbe <__swbuf_r+0x2e>
 8016c0a:	e7d6      	b.n	8016bba <__swbuf_r+0x2a>

08016c0c <__swsetup_r>:
 8016c0c:	b538      	push	{r3, r4, r5, lr}
 8016c0e:	4b29      	ldr	r3, [pc, #164]	@ (8016cb4 <__swsetup_r+0xa8>)
 8016c10:	4605      	mov	r5, r0
 8016c12:	6818      	ldr	r0, [r3, #0]
 8016c14:	460c      	mov	r4, r1
 8016c16:	b118      	cbz	r0, 8016c20 <__swsetup_r+0x14>
 8016c18:	6a03      	ldr	r3, [r0, #32]
 8016c1a:	b90b      	cbnz	r3, 8016c20 <__swsetup_r+0x14>
 8016c1c:	f7fd ff5c 	bl	8014ad8 <__sinit>
 8016c20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016c24:	0719      	lsls	r1, r3, #28
 8016c26:	d422      	bmi.n	8016c6e <__swsetup_r+0x62>
 8016c28:	06da      	lsls	r2, r3, #27
 8016c2a:	d407      	bmi.n	8016c3c <__swsetup_r+0x30>
 8016c2c:	2209      	movs	r2, #9
 8016c2e:	602a      	str	r2, [r5, #0]
 8016c30:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016c34:	81a3      	strh	r3, [r4, #12]
 8016c36:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016c3a:	e033      	b.n	8016ca4 <__swsetup_r+0x98>
 8016c3c:	0758      	lsls	r0, r3, #29
 8016c3e:	d512      	bpl.n	8016c66 <__swsetup_r+0x5a>
 8016c40:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8016c42:	b141      	cbz	r1, 8016c56 <__swsetup_r+0x4a>
 8016c44:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8016c48:	4299      	cmp	r1, r3
 8016c4a:	d002      	beq.n	8016c52 <__swsetup_r+0x46>
 8016c4c:	4628      	mov	r0, r5
 8016c4e:	f7fe ff27 	bl	8015aa0 <_free_r>
 8016c52:	2300      	movs	r3, #0
 8016c54:	6363      	str	r3, [r4, #52]	@ 0x34
 8016c56:	89a3      	ldrh	r3, [r4, #12]
 8016c58:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8016c5c:	81a3      	strh	r3, [r4, #12]
 8016c5e:	2300      	movs	r3, #0
 8016c60:	6063      	str	r3, [r4, #4]
 8016c62:	6923      	ldr	r3, [r4, #16]
 8016c64:	6023      	str	r3, [r4, #0]
 8016c66:	89a3      	ldrh	r3, [r4, #12]
 8016c68:	f043 0308 	orr.w	r3, r3, #8
 8016c6c:	81a3      	strh	r3, [r4, #12]
 8016c6e:	6923      	ldr	r3, [r4, #16]
 8016c70:	b94b      	cbnz	r3, 8016c86 <__swsetup_r+0x7a>
 8016c72:	89a3      	ldrh	r3, [r4, #12]
 8016c74:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8016c78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8016c7c:	d003      	beq.n	8016c86 <__swsetup_r+0x7a>
 8016c7e:	4621      	mov	r1, r4
 8016c80:	4628      	mov	r0, r5
 8016c82:	f000 f883 	bl	8016d8c <__smakebuf_r>
 8016c86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016c8a:	f013 0201 	ands.w	r2, r3, #1
 8016c8e:	d00a      	beq.n	8016ca6 <__swsetup_r+0x9a>
 8016c90:	2200      	movs	r2, #0
 8016c92:	60a2      	str	r2, [r4, #8]
 8016c94:	6962      	ldr	r2, [r4, #20]
 8016c96:	4252      	negs	r2, r2
 8016c98:	61a2      	str	r2, [r4, #24]
 8016c9a:	6922      	ldr	r2, [r4, #16]
 8016c9c:	b942      	cbnz	r2, 8016cb0 <__swsetup_r+0xa4>
 8016c9e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8016ca2:	d1c5      	bne.n	8016c30 <__swsetup_r+0x24>
 8016ca4:	bd38      	pop	{r3, r4, r5, pc}
 8016ca6:	0799      	lsls	r1, r3, #30
 8016ca8:	bf58      	it	pl
 8016caa:	6962      	ldrpl	r2, [r4, #20]
 8016cac:	60a2      	str	r2, [r4, #8]
 8016cae:	e7f4      	b.n	8016c9a <__swsetup_r+0x8e>
 8016cb0:	2000      	movs	r0, #0
 8016cb2:	e7f7      	b.n	8016ca4 <__swsetup_r+0x98>
 8016cb4:	200003b4 	.word	0x200003b4

08016cb8 <_raise_r>:
 8016cb8:	291f      	cmp	r1, #31
 8016cba:	b538      	push	{r3, r4, r5, lr}
 8016cbc:	4605      	mov	r5, r0
 8016cbe:	460c      	mov	r4, r1
 8016cc0:	d904      	bls.n	8016ccc <_raise_r+0x14>
 8016cc2:	2316      	movs	r3, #22
 8016cc4:	6003      	str	r3, [r0, #0]
 8016cc6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016cca:	bd38      	pop	{r3, r4, r5, pc}
 8016ccc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8016cce:	b112      	cbz	r2, 8016cd6 <_raise_r+0x1e>
 8016cd0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8016cd4:	b94b      	cbnz	r3, 8016cea <_raise_r+0x32>
 8016cd6:	4628      	mov	r0, r5
 8016cd8:	f000 f830 	bl	8016d3c <_getpid_r>
 8016cdc:	4622      	mov	r2, r4
 8016cde:	4601      	mov	r1, r0
 8016ce0:	4628      	mov	r0, r5
 8016ce2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016ce6:	f000 b817 	b.w	8016d18 <_kill_r>
 8016cea:	2b01      	cmp	r3, #1
 8016cec:	d00a      	beq.n	8016d04 <_raise_r+0x4c>
 8016cee:	1c59      	adds	r1, r3, #1
 8016cf0:	d103      	bne.n	8016cfa <_raise_r+0x42>
 8016cf2:	2316      	movs	r3, #22
 8016cf4:	6003      	str	r3, [r0, #0]
 8016cf6:	2001      	movs	r0, #1
 8016cf8:	e7e7      	b.n	8016cca <_raise_r+0x12>
 8016cfa:	2100      	movs	r1, #0
 8016cfc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8016d00:	4620      	mov	r0, r4
 8016d02:	4798      	blx	r3
 8016d04:	2000      	movs	r0, #0
 8016d06:	e7e0      	b.n	8016cca <_raise_r+0x12>

08016d08 <raise>:
 8016d08:	4b02      	ldr	r3, [pc, #8]	@ (8016d14 <raise+0xc>)
 8016d0a:	4601      	mov	r1, r0
 8016d0c:	6818      	ldr	r0, [r3, #0]
 8016d0e:	f7ff bfd3 	b.w	8016cb8 <_raise_r>
 8016d12:	bf00      	nop
 8016d14:	200003b4 	.word	0x200003b4

08016d18 <_kill_r>:
 8016d18:	b538      	push	{r3, r4, r5, lr}
 8016d1a:	4d07      	ldr	r5, [pc, #28]	@ (8016d38 <_kill_r+0x20>)
 8016d1c:	2300      	movs	r3, #0
 8016d1e:	4604      	mov	r4, r0
 8016d20:	4608      	mov	r0, r1
 8016d22:	4611      	mov	r1, r2
 8016d24:	602b      	str	r3, [r5, #0]
 8016d26:	f7ee fa4f 	bl	80051c8 <_kill>
 8016d2a:	1c43      	adds	r3, r0, #1
 8016d2c:	d102      	bne.n	8016d34 <_kill_r+0x1c>
 8016d2e:	682b      	ldr	r3, [r5, #0]
 8016d30:	b103      	cbz	r3, 8016d34 <_kill_r+0x1c>
 8016d32:	6023      	str	r3, [r4, #0]
 8016d34:	bd38      	pop	{r3, r4, r5, pc}
 8016d36:	bf00      	nop
 8016d38:	20008fa0 	.word	0x20008fa0

08016d3c <_getpid_r>:
 8016d3c:	f7ee ba3c 	b.w	80051b8 <_getpid>

08016d40 <__swhatbuf_r>:
 8016d40:	b570      	push	{r4, r5, r6, lr}
 8016d42:	460c      	mov	r4, r1
 8016d44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016d48:	2900      	cmp	r1, #0
 8016d4a:	b096      	sub	sp, #88	@ 0x58
 8016d4c:	4615      	mov	r5, r2
 8016d4e:	461e      	mov	r6, r3
 8016d50:	da0d      	bge.n	8016d6e <__swhatbuf_r+0x2e>
 8016d52:	89a3      	ldrh	r3, [r4, #12]
 8016d54:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8016d58:	f04f 0100 	mov.w	r1, #0
 8016d5c:	bf14      	ite	ne
 8016d5e:	2340      	movne	r3, #64	@ 0x40
 8016d60:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8016d64:	2000      	movs	r0, #0
 8016d66:	6031      	str	r1, [r6, #0]
 8016d68:	602b      	str	r3, [r5, #0]
 8016d6a:	b016      	add	sp, #88	@ 0x58
 8016d6c:	bd70      	pop	{r4, r5, r6, pc}
 8016d6e:	466a      	mov	r2, sp
 8016d70:	f000 f848 	bl	8016e04 <_fstat_r>
 8016d74:	2800      	cmp	r0, #0
 8016d76:	dbec      	blt.n	8016d52 <__swhatbuf_r+0x12>
 8016d78:	9901      	ldr	r1, [sp, #4]
 8016d7a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8016d7e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8016d82:	4259      	negs	r1, r3
 8016d84:	4159      	adcs	r1, r3
 8016d86:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8016d8a:	e7eb      	b.n	8016d64 <__swhatbuf_r+0x24>

08016d8c <__smakebuf_r>:
 8016d8c:	898b      	ldrh	r3, [r1, #12]
 8016d8e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016d90:	079d      	lsls	r5, r3, #30
 8016d92:	4606      	mov	r6, r0
 8016d94:	460c      	mov	r4, r1
 8016d96:	d507      	bpl.n	8016da8 <__smakebuf_r+0x1c>
 8016d98:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8016d9c:	6023      	str	r3, [r4, #0]
 8016d9e:	6123      	str	r3, [r4, #16]
 8016da0:	2301      	movs	r3, #1
 8016da2:	6163      	str	r3, [r4, #20]
 8016da4:	b003      	add	sp, #12
 8016da6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016da8:	ab01      	add	r3, sp, #4
 8016daa:	466a      	mov	r2, sp
 8016dac:	f7ff ffc8 	bl	8016d40 <__swhatbuf_r>
 8016db0:	9f00      	ldr	r7, [sp, #0]
 8016db2:	4605      	mov	r5, r0
 8016db4:	4639      	mov	r1, r7
 8016db6:	4630      	mov	r0, r6
 8016db8:	f7fe fee6 	bl	8015b88 <_malloc_r>
 8016dbc:	b948      	cbnz	r0, 8016dd2 <__smakebuf_r+0x46>
 8016dbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016dc2:	059a      	lsls	r2, r3, #22
 8016dc4:	d4ee      	bmi.n	8016da4 <__smakebuf_r+0x18>
 8016dc6:	f023 0303 	bic.w	r3, r3, #3
 8016dca:	f043 0302 	orr.w	r3, r3, #2
 8016dce:	81a3      	strh	r3, [r4, #12]
 8016dd0:	e7e2      	b.n	8016d98 <__smakebuf_r+0xc>
 8016dd2:	89a3      	ldrh	r3, [r4, #12]
 8016dd4:	6020      	str	r0, [r4, #0]
 8016dd6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016dda:	81a3      	strh	r3, [r4, #12]
 8016ddc:	9b01      	ldr	r3, [sp, #4]
 8016dde:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8016de2:	b15b      	cbz	r3, 8016dfc <__smakebuf_r+0x70>
 8016de4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016de8:	4630      	mov	r0, r6
 8016dea:	f000 f81d 	bl	8016e28 <_isatty_r>
 8016dee:	b128      	cbz	r0, 8016dfc <__smakebuf_r+0x70>
 8016df0:	89a3      	ldrh	r3, [r4, #12]
 8016df2:	f023 0303 	bic.w	r3, r3, #3
 8016df6:	f043 0301 	orr.w	r3, r3, #1
 8016dfa:	81a3      	strh	r3, [r4, #12]
 8016dfc:	89a3      	ldrh	r3, [r4, #12]
 8016dfe:	431d      	orrs	r5, r3
 8016e00:	81a5      	strh	r5, [r4, #12]
 8016e02:	e7cf      	b.n	8016da4 <__smakebuf_r+0x18>

08016e04 <_fstat_r>:
 8016e04:	b538      	push	{r3, r4, r5, lr}
 8016e06:	4d07      	ldr	r5, [pc, #28]	@ (8016e24 <_fstat_r+0x20>)
 8016e08:	2300      	movs	r3, #0
 8016e0a:	4604      	mov	r4, r0
 8016e0c:	4608      	mov	r0, r1
 8016e0e:	4611      	mov	r1, r2
 8016e10:	602b      	str	r3, [r5, #0]
 8016e12:	f7ee fa39 	bl	8005288 <_fstat>
 8016e16:	1c43      	adds	r3, r0, #1
 8016e18:	d102      	bne.n	8016e20 <_fstat_r+0x1c>
 8016e1a:	682b      	ldr	r3, [r5, #0]
 8016e1c:	b103      	cbz	r3, 8016e20 <_fstat_r+0x1c>
 8016e1e:	6023      	str	r3, [r4, #0]
 8016e20:	bd38      	pop	{r3, r4, r5, pc}
 8016e22:	bf00      	nop
 8016e24:	20008fa0 	.word	0x20008fa0

08016e28 <_isatty_r>:
 8016e28:	b538      	push	{r3, r4, r5, lr}
 8016e2a:	4d06      	ldr	r5, [pc, #24]	@ (8016e44 <_isatty_r+0x1c>)
 8016e2c:	2300      	movs	r3, #0
 8016e2e:	4604      	mov	r4, r0
 8016e30:	4608      	mov	r0, r1
 8016e32:	602b      	str	r3, [r5, #0]
 8016e34:	f7ee fa38 	bl	80052a8 <_isatty>
 8016e38:	1c43      	adds	r3, r0, #1
 8016e3a:	d102      	bne.n	8016e42 <_isatty_r+0x1a>
 8016e3c:	682b      	ldr	r3, [r5, #0]
 8016e3e:	b103      	cbz	r3, 8016e42 <_isatty_r+0x1a>
 8016e40:	6023      	str	r3, [r4, #0]
 8016e42:	bd38      	pop	{r3, r4, r5, pc}
 8016e44:	20008fa0 	.word	0x20008fa0

08016e48 <_init>:
 8016e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016e4a:	bf00      	nop
 8016e4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016e4e:	bc08      	pop	{r3}
 8016e50:	469e      	mov	lr, r3
 8016e52:	4770      	bx	lr

08016e54 <_fini>:
 8016e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016e56:	bf00      	nop
 8016e58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016e5a:	bc08      	pop	{r3}
 8016e5c:	469e      	mov	lr, r3
 8016e5e:	4770      	bx	lr
