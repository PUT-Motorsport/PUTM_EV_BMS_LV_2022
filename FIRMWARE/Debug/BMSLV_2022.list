
BMSLV_2022.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000166a0  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009c4  08016860  08016860  00026860  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017224  08017224  00030580  2**0
                  CONTENTS
  4 .ARM          00000000  08017224  08017224  00030580  2**0
                  CONTENTS
  5 .preinit_array 00000000  08017224  08017224  00030580  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000010  08017224  08017224  00027224  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017234  08017234  00027234  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000580  20000000  08017238  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000093f4  20000580  080177b8  00030580  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20009974  080177b8  00039974  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030580  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000305b0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0004b380  00000000  00000000  000305f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00008c0d  00000000  00000000  0007b973  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002b68  00000000  00000000  00084580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00002111  00000000  00000000  000870e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003c092  00000000  00000000  000891f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003bfd8  00000000  00000000  000c528b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0014f6f4  00000000  00000000  00101263  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000c960  00000000  00000000  00250958  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  0025d2b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000580 	.word	0x20000580
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08016848 	.word	0x08016848

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000584 	.word	0x20000584
 80001fc:	08016848 	.word	0x08016848

08000200 <strcmp>:
 8000200:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000204:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000208:	2a01      	cmp	r2, #1
 800020a:	bf28      	it	cs
 800020c:	429a      	cmpcs	r2, r3
 800020e:	d0f7      	beq.n	8000200 <strcmp>
 8000210:	1ad0      	subs	r0, r2, r3
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <_Z20discharge_cells_taili>:
			the next cell to discharge has to be the first one.
			So generally it sets the array tail at the beginning.
 * Param:	index
 * Retval:	index
 */
int discharge_cells_tail(int i){
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
	if(5 == i || 6 == i)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	2b05      	cmp	r3, #5
 8000c04:	d002      	beq.n	8000c0c <_Z20discharge_cells_taili+0x14>
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	2b06      	cmp	r3, #6
 8000c0a:	d102      	bne.n	8000c12 <_Z20discharge_cells_taili+0x1a>
		return -1;
 8000c0c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c10:	e000      	b.n	8000c14 <_Z20discharge_cells_taili+0x1c>
	else
		return i;
 8000c12:	687b      	ldr	r3, [r7, #4]
}
 8000c14:	4618      	mov	r0, r3
 8000c16:	370c      	adds	r7, #12
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr

08000c20 <_Z18set_discharge_cellRhRi>:
/**
 * Brief:	It sets cell to be discharged
 * Param:	Index
 * Retval:	None
 */
void set_discharge_cell(uint8_t &discharge_at_once, int &i){
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
 8000c28:	6039      	str	r1, [r7, #0]
	if(discharge_at_once < MAX_CELLS_DISCHARGE_AT_ONCE)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	2b01      	cmp	r3, #1
 8000c30:	d826      	bhi.n	8000c80 <_Z18set_discharge_cellRhRi+0x60>
	{
		data.charging.cell_discharge[i] = true;
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	4a14      	ldr	r2, [pc, #80]	; (8000c88 <_Z18set_discharge_cellRhRi+0x68>)
 8000c38:	4413      	add	r3, r2
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
		discharge_at_once++;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	3301      	adds	r3, #1
 8000c46:	b2da      	uxtb	r2, r3
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	701a      	strb	r2, [r3, #0]
		i++;	//impossible to discharge 2 cells next to each other
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	1c5a      	adds	r2, r3, #1
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	601a      	str	r2, [r3, #0]
		i=discharge_cells_tail(i);
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f7ff ffcc 	bl	8000bf8 <_Z20discharge_cells_taili>
 8000c60:	4602      	mov	r2, r0
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	601a      	str	r2, [r3, #0]

		data.charging.discharge_activation = true;
 8000c66:	4b08      	ldr	r3, [pc, #32]	; (8000c88 <_Z18set_discharge_cellRhRi+0x68>)
 8000c68:	2201      	movs	r2, #1
 8000c6a:	f883 2298 	strb.w	r2, [r3, #664]	; 0x298
		data.charging.discharge_tick_end = HAL_GetTick() + BALANCE_TIME;
 8000c6e:	f004 fb39 	bl	80052e4 <HAL_GetTick>
 8000c72:	4603      	mov	r3, r0
 8000c74:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8000c78:	3310      	adds	r3, #16
 8000c7a:	4a03      	ldr	r2, [pc, #12]	; (8000c88 <_Z18set_discharge_cellRhRi+0x68>)
 8000c7c:	f8c2 329c 	str.w	r3, [r2, #668]	; 0x29c
	}
}
 8000c80:	bf00      	nop
 8000c82:	3708      	adds	r7, #8
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	20001478 	.word	0x20001478

08000c8c <_Z22set_discharge_cell_maxRhRiRb>:
/**
 * Brief:	It sets cell having the highest voltage to be discharged
 * Param:	Index
 * Retval:	None
 */
void set_discharge_cell_max(uint8_t &discharge_at_once, int &i, bool &max_voltage_discharge_activation){
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b084      	sub	sp, #16
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	60f8      	str	r0, [r7, #12]
 8000c94:	60b9      	str	r1, [r7, #8]
 8000c96:	607a      	str	r2, [r7, #4]
	max_voltage_discharge_activation = false;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	701a      	strb	r2, [r3, #0]
	if(discharge_at_once < MAX_CELLS_DISCHARGE_AT_ONCE)
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	2b01      	cmp	r3, #1
 8000ca4:	d827      	bhi.n	8000cf6 <_Z22set_discharge_cell_maxRhRiRb+0x6a>
	{
		data.charging.cell_discharge[data.voltages.highest_cell_voltage_index] = true;
 8000ca6:	4b16      	ldr	r3, [pc, #88]	; (8000d00 <_Z22set_discharge_cell_maxRhRiRb+0x74>)
 8000ca8:	7c9b      	ldrb	r3, [r3, #18]
 8000caa:	461a      	mov	r2, r3
 8000cac:	4b14      	ldr	r3, [pc, #80]	; (8000d00 <_Z22set_discharge_cell_maxRhRiRb+0x74>)
 8000cae:	4413      	add	r3, r2
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
		discharge_at_once++;
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	3301      	adds	r3, #1
 8000cbc:	b2da      	uxtb	r2, r3
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	701a      	strb	r2, [r3, #0]
		i = data.voltages.highest_cell_voltage_index + 1; //impossible to discharge 2 cells next to each other
 8000cc2:	4b0f      	ldr	r3, [pc, #60]	; (8000d00 <_Z22set_discharge_cell_maxRhRiRb+0x74>)
 8000cc4:	7c9b      	ldrb	r3, [r3, #18]
 8000cc6:	1c5a      	adds	r2, r3, #1
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	601a      	str	r2, [r3, #0]
		i=discharge_cells_tail(i);
 8000ccc:	68bb      	ldr	r3, [r7, #8]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f7ff ff91 	bl	8000bf8 <_Z20discharge_cells_taili>
 8000cd6:	4602      	mov	r2, r0
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	601a      	str	r2, [r3, #0]

		data.charging.discharge_activation = true;
 8000cdc:	4b08      	ldr	r3, [pc, #32]	; (8000d00 <_Z22set_discharge_cell_maxRhRiRb+0x74>)
 8000cde:	2201      	movs	r2, #1
 8000ce0:	f883 2298 	strb.w	r2, [r3, #664]	; 0x298
		data.charging.discharge_tick_end = HAL_GetTick() + BALANCE_TIME;
 8000ce4:	f004 fafe 	bl	80052e4 <HAL_GetTick>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8000cee:	3310      	adds	r3, #16
 8000cf0:	4a03      	ldr	r2, [pc, #12]	; (8000d00 <_Z22set_discharge_cell_maxRhRiRb+0x74>)
 8000cf2:	f8c2 329c 	str.w	r3, [r2, #668]	; 0x29c
	}
}
 8000cf6:	bf00      	nop
 8000cf8:	3710      	adds	r7, #16
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	20001478 	.word	0x20001478

08000d04 <_Z15balance_controlv>:
 * Brief:	Control of cell discharges
 * Param:	None
 * Retval:	None
 */
void balance_control()
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b086      	sub	sp, #24
 8000d08:	af00      	add	r7, sp, #0
	uint8_t charged_cells = 0, nearly_charged_cells = 0, cell_overcharged = 0, discharge_at_once = 0;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	75fb      	strb	r3, [r7, #23]
 8000d0e:	2300      	movs	r3, #0
 8000d10:	75bb      	strb	r3, [r7, #22]
 8000d12:	2300      	movs	r3, #0
 8000d14:	757b      	strb	r3, [r7, #21]
 8000d16:	2300      	movs	r3, #0
 8000d18:	73fb      	strb	r3, [r7, #15]
	bool max_voltage_discharge_activation= 0, max_voltage_discharge_activation_charging_off = 0;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	73bb      	strb	r3, [r7, #14]
 8000d1e:	2300      	movs	r3, #0
 8000d20:	737b      	strb	r3, [r7, #13]

	for(unsigned int i = 0; i < NUMBER_OF_CELLS; i++)
 8000d22:	2300      	movs	r3, #0
 8000d24:	613b      	str	r3, [r7, #16]
 8000d26:	e03c      	b.n	8000da2 <_Z15balance_controlv+0x9e>
	{
		if(data.voltages.highest_cell_voltage > VOL_UP_OK || (data.voltages.highest_cell_voltage - data.voltages.lowest_cell_voltage) > BALANCE_VALUE)
 8000d28:	4b9f      	ldr	r3, [pc, #636]	; (8000fa8 <_Z15balance_controlv+0x2a4>)
 8000d2a:	8b9b      	ldrh	r3, [r3, #28]
 8000d2c:	f24a 420b 	movw	r2, #41995	; 0xa40b
 8000d30:	4293      	cmp	r3, r2
 8000d32:	d808      	bhi.n	8000d46 <_Z15balance_controlv+0x42>
 8000d34:	4b9c      	ldr	r3, [pc, #624]	; (8000fa8 <_Z15balance_controlv+0x2a4>)
 8000d36:	8b9b      	ldrh	r3, [r3, #28]
 8000d38:	461a      	mov	r2, r3
 8000d3a:	4b9b      	ldr	r3, [pc, #620]	; (8000fa8 <_Z15balance_controlv+0x2a4>)
 8000d3c:	8b5b      	ldrh	r3, [r3, #26]
 8000d3e:	1ad3      	subs	r3, r2, r3
 8000d40:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000d44:	dd01      	ble.n	8000d4a <_Z15balance_controlv+0x46>
		{
			max_voltage_discharge_activation= true;
 8000d46:	2301      	movs	r3, #1
 8000d48:	73bb      	strb	r3, [r7, #14]
		}
		if(data.voltages.highest_cell_voltage > VOL_UP_OK)
 8000d4a:	4b97      	ldr	r3, [pc, #604]	; (8000fa8 <_Z15balance_controlv+0x2a4>)
 8000d4c:	8b9b      	ldrh	r3, [r3, #28]
 8000d4e:	f24a 420b 	movw	r2, #41995	; 0xa40b
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d901      	bls.n	8000d5a <_Z15balance_controlv+0x56>
		{
			max_voltage_discharge_activation_charging_off = true;
 8000d56:	2301      	movs	r3, #1
 8000d58:	737b      	strb	r3, [r7, #13]
		}
		if(data.voltages.cells[i] > VOL_UP_OK)
 8000d5a:	4a93      	ldr	r2, [pc, #588]	; (8000fa8 <_Z15balance_controlv+0x2a4>)
 8000d5c:	693b      	ldr	r3, [r7, #16]
 8000d5e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d62:	f24a 420b 	movw	r2, #41995	; 0xa40b
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d902      	bls.n	8000d70 <_Z15balance_controlv+0x6c>
		{
			charged_cells++;
 8000d6a:	7dfb      	ldrb	r3, [r7, #23]
 8000d6c:	3301      	adds	r3, #1
 8000d6e:	75fb      	strb	r3, [r7, #23]
		}
		if(data.voltages.cells[i] > VOL_UP_NEARLY_OK)
 8000d70:	4a8d      	ldr	r2, [pc, #564]	; (8000fa8 <_Z15balance_controlv+0x2a4>)
 8000d72:	693b      	ldr	r3, [r7, #16]
 8000d74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d78:	f24a 32c0 	movw	r2, #41920	; 0xa3c0
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	d902      	bls.n	8000d86 <_Z15balance_controlv+0x82>
		{
			nearly_charged_cells++;
 8000d80:	7dbb      	ldrb	r3, [r7, #22]
 8000d82:	3301      	adds	r3, #1
 8000d84:	75bb      	strb	r3, [r7, #22]
		}
		if(data.voltages.cells[i] > VOL_UP_OVERCHARGE)
 8000d86:	4a88      	ldr	r2, [pc, #544]	; (8000fa8 <_Z15balance_controlv+0x2a4>)
 8000d88:	693b      	ldr	r3, [r7, #16]
 8000d8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d8e:	f24a 4274 	movw	r2, #42100	; 0xa474
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d902      	bls.n	8000d9c <_Z15balance_controlv+0x98>
		{
			cell_overcharged++;
 8000d96:	7d7b      	ldrb	r3, [r7, #21]
 8000d98:	3301      	adds	r3, #1
 8000d9a:	757b      	strb	r3, [r7, #21]
	for(unsigned int i = 0; i < NUMBER_OF_CELLS; i++)
 8000d9c:	693b      	ldr	r3, [r7, #16]
 8000d9e:	3301      	adds	r3, #1
 8000da0:	613b      	str	r3, [r7, #16]
 8000da2:	693b      	ldr	r3, [r7, #16]
 8000da4:	2b05      	cmp	r3, #5
 8000da6:	d9bf      	bls.n	8000d28 <_Z15balance_controlv+0x24>
		}
	}

	//EFUSE switch off - battery full
	if(charged_cells >= 4 && fabsf(data.current.value) < CHARGING_CUTOFF_CURRENT && nearly_charged_cells == 6)
 8000da8:	7dfb      	ldrb	r3, [r7, #23]
 8000daa:	2b03      	cmp	r3, #3
 8000dac:	d926      	bls.n	8000dfc <_Z15balance_controlv+0xf8>
 8000dae:	4b7e      	ldr	r3, [pc, #504]	; (8000fa8 <_Z15balance_controlv+0x2a4>)
 8000db0:	edd3 7a72 	vldr	s15, [r3, #456]	; 0x1c8
 8000db4:	eef0 7ae7 	vabs.f32	s15, s15
 8000db8:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 8000fac <_Z15balance_controlv+0x2a8>
 8000dbc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000dc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dc4:	d51a      	bpl.n	8000dfc <_Z15balance_controlv+0xf8>
 8000dc6:	7dbb      	ldrb	r3, [r7, #22]
 8000dc8:	2b06      	cmp	r3, #6
 8000dca:	d117      	bne.n	8000dfc <_Z15balance_controlv+0xf8>
	{
		HAL_GPIO_WritePin(EFUSE_GPIO_Port, EFUSE_Pin, GPIO_PIN_RESET);
 8000dcc:	2200      	movs	r2, #0
 8000dce:	2104      	movs	r1, #4
 8000dd0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dd4:	f007 fb68 	bl	80084a8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 8000dd8:	2200      	movs	r2, #0
 8000dda:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dde:	4874      	ldr	r0, [pc, #464]	; (8000fb0 <_Z15balance_controlv+0x2ac>)
 8000de0:	f007 fb62 	bl	80084a8 <HAL_GPIO_WritePin>
		data.soc.main.set_full_battery();
 8000de4:	4873      	ldr	r0, [pc, #460]	; (8000fb4 <_Z15balance_controlv+0x2b0>)
 8000de6:	f003 faff 	bl	80043e8 <_ZN7SoC_EKF16set_full_batteryEv>
		data.charging.charging_state = false;
 8000dea:	4b6f      	ldr	r3, [pc, #444]	; (8000fa8 <_Z15balance_controlv+0x2a4>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	f883 2297 	strb.w	r2, [r3, #663]	; 0x297
		data.acu_state = 0;
 8000df2:	4b6d      	ldr	r3, [pc, #436]	; (8000fa8 <_Z15balance_controlv+0x2a4>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8000dfa:	e043      	b.n	8000e84 <_Z15balance_controlv+0x180>
	}
	//EFUSE switch off - cell overcharged
	else if(cell_overcharged > 1 && data.charging.discharge_activation == 0)
 8000dfc:	7d7b      	ldrb	r3, [r7, #21]
 8000dfe:	2b01      	cmp	r3, #1
 8000e00:	d919      	bls.n	8000e36 <_Z15balance_controlv+0x132>
 8000e02:	4b69      	ldr	r3, [pc, #420]	; (8000fa8 <_Z15balance_controlv+0x2a4>)
 8000e04:	f893 3298 	ldrb.w	r3, [r3, #664]	; 0x298
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d114      	bne.n	8000e36 <_Z15balance_controlv+0x132>
	{
		HAL_GPIO_WritePin(EFUSE_GPIO_Port, EFUSE_Pin, GPIO_PIN_RESET);
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	2104      	movs	r1, #4
 8000e10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e14:	f007 fb48 	bl	80084a8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 8000e18:	2200      	movs	r2, #0
 8000e1a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e1e:	4864      	ldr	r0, [pc, #400]	; (8000fb0 <_Z15balance_controlv+0x2ac>)
 8000e20:	f007 fb42 	bl	80084a8 <HAL_GPIO_WritePin>
		data.charging.charging_state = false;
 8000e24:	4b60      	ldr	r3, [pc, #384]	; (8000fa8 <_Z15balance_controlv+0x2a4>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	f883 2297 	strb.w	r2, [r3, #663]	; 0x297
		data.acu_state = 0;
 8000e2c:	4b5e      	ldr	r3, [pc, #376]	; (8000fa8 <_Z15balance_controlv+0x2a4>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8000e34:	e026      	b.n	8000e84 <_Z15balance_controlv+0x180>
	}
	//EFUSE switch on
	else if(!data.charging.charger_plugged && nearly_charged_cells < 6 && cell_overcharged == 0 && data.charging.discharge_activation == 0)// && acuState == 0
 8000e36:	4b5c      	ldr	r3, [pc, #368]	; (8000fa8 <_Z15balance_controlv+0x2a4>)
 8000e38:	f893 3296 	ldrb.w	r3, [r3, #662]	; 0x296
 8000e3c:	f083 0301 	eor.w	r3, r3, #1
 8000e40:	b2db      	uxtb	r3, r3
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d01e      	beq.n	8000e84 <_Z15balance_controlv+0x180>
 8000e46:	7dbb      	ldrb	r3, [r7, #22]
 8000e48:	2b05      	cmp	r3, #5
 8000e4a:	d81b      	bhi.n	8000e84 <_Z15balance_controlv+0x180>
 8000e4c:	7d7b      	ldrb	r3, [r7, #21]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d118      	bne.n	8000e84 <_Z15balance_controlv+0x180>
 8000e52:	4b55      	ldr	r3, [pc, #340]	; (8000fa8 <_Z15balance_controlv+0x2a4>)
 8000e54:	f893 3298 	ldrb.w	r3, [r3, #664]	; 0x298
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d113      	bne.n	8000e84 <_Z15balance_controlv+0x180>
	{
		HAL_GPIO_WritePin(EFUSE_GPIO_Port, EFUSE_Pin, GPIO_PIN_SET);
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	2104      	movs	r1, #4
 8000e60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e64:	f007 fb20 	bl	80084a8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET);
 8000e68:	2201      	movs	r2, #1
 8000e6a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e6e:	4850      	ldr	r0, [pc, #320]	; (8000fb0 <_Z15balance_controlv+0x2ac>)
 8000e70:	f007 fb1a 	bl	80084a8 <HAL_GPIO_WritePin>
		data.charging.charging_state = true;
 8000e74:	4b4c      	ldr	r3, [pc, #304]	; (8000fa8 <_Z15balance_controlv+0x2a4>)
 8000e76:	2201      	movs	r2, #1
 8000e78:	f883 2297 	strb.w	r2, [r3, #663]	; 0x297
		data.acu_state = 1;
 8000e7c:	4b4a      	ldr	r3, [pc, #296]	; (8000fa8 <_Z15balance_controlv+0x2a4>)
 8000e7e:	2201      	movs	r2, #1
 8000e80:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
	}


	//cell choice algorithm when charger is connected
	if(true == data.charging.charging_state && fabsf(data.current.value) > CHARGING_CUTOFF_CURRENT ) //charging on
 8000e84:	4b48      	ldr	r3, [pc, #288]	; (8000fa8 <_Z15balance_controlv+0x2a4>)
 8000e86:	f893 3297 	ldrb.w	r3, [r3, #663]	; 0x297
 8000e8a:	2b01      	cmp	r3, #1
 8000e8c:	d152      	bne.n	8000f34 <_Z15balance_controlv+0x230>
 8000e8e:	4b46      	ldr	r3, [pc, #280]	; (8000fa8 <_Z15balance_controlv+0x2a4>)
 8000e90:	edd3 7a72 	vldr	s15, [r3, #456]	; 0x1c8
 8000e94:	eef0 7ae7 	vabs.f32	s15, s15
 8000e98:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8000fac <_Z15balance_controlv+0x2a8>
 8000e9c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ea0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ea4:	dd46      	ble.n	8000f34 <_Z15balance_controlv+0x230>
	{
		if(false == data.charging.discharge_activation)
 8000ea6:	4b40      	ldr	r3, [pc, #256]	; (8000fa8 <_Z15balance_controlv+0x2a4>)
 8000ea8:	f893 3298 	ldrb.w	r3, [r3, #664]	; 0x298
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d175      	bne.n	8000f9c <_Z15balance_controlv+0x298>
		{
			for(int i = 0; i < NUMBER_OF_CELLS; i++)
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	60bb      	str	r3, [r7, #8]
 8000eb4:	e03a      	b.n	8000f2c <_Z15balance_controlv+0x228>
			{
				//discharge activation for the cell with the highest voltage
				if(true == max_voltage_discharge_activation)
 8000eb6:	7bbb      	ldrb	r3, [r7, #14]
 8000eb8:	2b01      	cmp	r3, #1
 8000eba:	d109      	bne.n	8000ed0 <_Z15balance_controlv+0x1cc>
				{
					set_discharge_cell_max(discharge_at_once, i, max_voltage_discharge_activation);
 8000ebc:	f107 020e 	add.w	r2, r7, #14
 8000ec0:	f107 0108 	add.w	r1, r7, #8
 8000ec4:	f107 030f 	add.w	r3, r7, #15
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f7ff fedf 	bl	8000c8c <_Z22set_discharge_cell_maxRhRiRb>
 8000ece:	e02a      	b.n	8000f26 <_Z15balance_controlv+0x222>
				}
				//discharge activation for the cells with maximum voltage level - 4.201V
				else if(data.voltages.cells[i] > VOL_DIS)
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	4a35      	ldr	r2, [pc, #212]	; (8000fa8 <_Z15balance_controlv+0x2a4>)
 8000ed4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ed8:	f24a 421a 	movw	r2, #42010	; 0xa41a
 8000edc:	4293      	cmp	r3, r2
 8000ede:	d908      	bls.n	8000ef2 <_Z15balance_controlv+0x1ee>
				{
					set_discharge_cell(discharge_at_once, i);
 8000ee0:	f107 0208 	add.w	r2, r7, #8
 8000ee4:	f107 030f 	add.w	r3, r7, #15
 8000ee8:	4611      	mov	r1, r2
 8000eea:	4618      	mov	r0, r3
 8000eec:	f7ff fe98 	bl	8000c20 <_Z18set_discharge_cellRhRi>
 8000ef0:	e019      	b.n	8000f26 <_Z15balance_controlv+0x222>
				}
				//discharge activation for rest cells if needed
				else if((data.voltages.cells[i] - data.voltages.lowest_cell_voltage) > BALANCE_VALUE)
 8000ef2:	68bb      	ldr	r3, [r7, #8]
 8000ef4:	4a2c      	ldr	r2, [pc, #176]	; (8000fa8 <_Z15balance_controlv+0x2a4>)
 8000ef6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000efa:	461a      	mov	r2, r3
 8000efc:	4b2a      	ldr	r3, [pc, #168]	; (8000fa8 <_Z15balance_controlv+0x2a4>)
 8000efe:	8b5b      	ldrh	r3, [r3, #26]
 8000f00:	1ad3      	subs	r3, r2, r3
 8000f02:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000f06:	dd08      	ble.n	8000f1a <_Z15balance_controlv+0x216>
				{
					set_discharge_cell(discharge_at_once, i);
 8000f08:	f107 0208 	add.w	r2, r7, #8
 8000f0c:	f107 030f 	add.w	r3, r7, #15
 8000f10:	4611      	mov	r1, r2
 8000f12:	4618      	mov	r0, r3
 8000f14:	f7ff fe84 	bl	8000c20 <_Z18set_discharge_cellRhRi>
 8000f18:	e005      	b.n	8000f26 <_Z15balance_controlv+0x222>
				}
				else
					data.charging.cell_discharge[i] = false;
 8000f1a:	68bb      	ldr	r3, [r7, #8]
 8000f1c:	4a22      	ldr	r2, [pc, #136]	; (8000fa8 <_Z15balance_controlv+0x2a4>)
 8000f1e:	4413      	add	r3, r2
 8000f20:	2200      	movs	r2, #0
 8000f22:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
			for(int i = 0; i < NUMBER_OF_CELLS; i++)
 8000f26:	68bb      	ldr	r3, [r7, #8]
 8000f28:	3301      	adds	r3, #1
 8000f2a:	60bb      	str	r3, [r7, #8]
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	2b05      	cmp	r3, #5
 8000f30:	ddc1      	ble.n	8000eb6 <_Z15balance_controlv+0x1b2>
			}
		}
	}
 8000f32:	e033      	b.n	8000f9c <_Z15balance_controlv+0x298>
	else //charging off
	{
		//balance if the cell voltages are overcharged
		if(not  data.charging.discharge_activation)
 8000f34:	4b1c      	ldr	r3, [pc, #112]	; (8000fa8 <_Z15balance_controlv+0x2a4>)
 8000f36:	f893 3298 	ldrb.w	r3, [r3, #664]	; 0x298
 8000f3a:	f083 0301 	eor.w	r3, r3, #1
 8000f3e:	b2db      	uxtb	r3, r3
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d02c      	beq.n	8000f9e <_Z15balance_controlv+0x29a>
		{
			for(int i = 0; i < NUMBER_OF_CELLS; i++)
 8000f44:	2300      	movs	r3, #0
 8000f46:	607b      	str	r3, [r7, #4]
 8000f48:	e024      	b.n	8000f94 <_Z15balance_controlv+0x290>
			{
				//discharge activation for the cell with the highest voltage
				if(true == max_voltage_discharge_activation_charging_off)
 8000f4a:	7b7b      	ldrb	r3, [r7, #13]
 8000f4c:	2b01      	cmp	r3, #1
 8000f4e:	d108      	bne.n	8000f62 <_Z15balance_controlv+0x25e>
				{
					set_discharge_cell_max(discharge_at_once, i, max_voltage_discharge_activation_charging_off);
 8000f50:	f107 020d 	add.w	r2, r7, #13
 8000f54:	1d39      	adds	r1, r7, #4
 8000f56:	f107 030f 	add.w	r3, r7, #15
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f7ff fe96 	bl	8000c8c <_Z22set_discharge_cell_maxRhRiRb>
 8000f60:	e015      	b.n	8000f8e <_Z15balance_controlv+0x28a>
				}
				//discharge activation for the cells with maximum voltage level - 4.201V
				else if(data.voltages.cells[i] > VOL_DIS)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4a10      	ldr	r2, [pc, #64]	; (8000fa8 <_Z15balance_controlv+0x2a4>)
 8000f66:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f6a:	f24a 421a 	movw	r2, #42010	; 0xa41a
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d907      	bls.n	8000f82 <_Z15balance_controlv+0x27e>
				{
					set_discharge_cell(discharge_at_once, i);
 8000f72:	1d3a      	adds	r2, r7, #4
 8000f74:	f107 030f 	add.w	r3, r7, #15
 8000f78:	4611      	mov	r1, r2
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f7ff fe50 	bl	8000c20 <_Z18set_discharge_cellRhRi>
 8000f80:	e005      	b.n	8000f8e <_Z15balance_controlv+0x28a>
				}
				else
					data.charging.cell_discharge[i] = false;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4a08      	ldr	r2, [pc, #32]	; (8000fa8 <_Z15balance_controlv+0x2a4>)
 8000f86:	4413      	add	r3, r2
 8000f88:	2200      	movs	r2, #0
 8000f8a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
			for(int i = 0; i < NUMBER_OF_CELLS; i++)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	3301      	adds	r3, #1
 8000f92:	607b      	str	r3, [r7, #4]
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2b05      	cmp	r3, #5
 8000f98:	ddd7      	ble.n	8000f4a <_Z15balance_controlv+0x246>
			}
		}
	}
}
 8000f9a:	e000      	b.n	8000f9e <_Z15balance_controlv+0x29a>
	}
 8000f9c:	bf00      	nop
}
 8000f9e:	bf00      	nop
 8000fa0:	3718      	adds	r7, #24
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	20001478 	.word	0x20001478
 8000fac:	3e99999a 	.word	0x3e99999a
 8000fb0:	48000800 	.word	0x48000800
 8000fb4:	2000164c 	.word	0x2000164c

08000fb8 <_Z31balance_activation_deactivationv>:
 * Brief:	Activation or deactivation of balance
 * Param:	None
 * Retval:	None
 */
void balance_activation_deactivation()
{
 8000fb8:	b590      	push	{r4, r7, lr}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
	if(true == data.charging.discharge_activation)
 8000fbe:	4b27      	ldr	r3, [pc, #156]	; (800105c <_Z31balance_activation_deactivationv+0xa4>)
 8000fc0:	f893 3298 	ldrb.w	r3, [r3, #664]	; 0x298
 8000fc4:	2b01      	cmp	r3, #1
 8000fc6:	d117      	bne.n	8000ff8 <_Z31balance_activation_deactivationv+0x40>
	{
		for(int i = 0; i < NUMBER_OF_CELLS ; i++)
 8000fc8:	2300      	movs	r3, #0
 8000fca:	607b      	str	r3, [r7, #4]
 8000fcc:	e00e      	b.n	8000fec <_Z31balance_activation_deactivationv+0x34>
		{
			if(true == data.charging.cell_discharge[i])
 8000fce:	4a23      	ldr	r2, [pc, #140]	; (800105c <_Z31balance_activation_deactivationv+0xa4>)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	4413      	add	r3, r2
 8000fd4:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	2b01      	cmp	r3, #1
 8000fdc:	d103      	bne.n	8000fe6 <_Z31balance_activation_deactivationv+0x2e>
			{
				LTC_turn_on_discharge(i, data.charging.cell_discharge);
 8000fde:	4920      	ldr	r1, [pc, #128]	; (8001060 <_Z31balance_activation_deactivationv+0xa8>)
 8000fe0:	6878      	ldr	r0, [r7, #4]
 8000fe2:	f001 fe19 	bl	8002c18 <_Z21LTC_turn_on_dischargeiPb>
		for(int i = 0; i < NUMBER_OF_CELLS ; i++)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	3301      	adds	r3, #1
 8000fea:	607b      	str	r3, [r7, #4]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2b05      	cmp	r3, #5
 8000ff0:	dded      	ble.n	8000fce <_Z31balance_activation_deactivationv+0x16>
			}
		}
		balance_deactivation_flag = true;
 8000ff2:	4b1c      	ldr	r3, [pc, #112]	; (8001064 <_Z31balance_activation_deactivationv+0xac>)
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	701a      	strb	r2, [r3, #0]
	}
	if(data.charging.discharge_tick_end <= HAL_GetTick() && balance_deactivation_flag)
 8000ff8:	4b18      	ldr	r3, [pc, #96]	; (800105c <_Z31balance_activation_deactivationv+0xa4>)
 8000ffa:	f8d3 429c 	ldr.w	r4, [r3, #668]	; 0x29c
 8000ffe:	f004 f971 	bl	80052e4 <HAL_GetTick>
 8001002:	4603      	mov	r3, r0
 8001004:	429c      	cmp	r4, r3
 8001006:	d805      	bhi.n	8001014 <_Z31balance_activation_deactivationv+0x5c>
 8001008:	4b16      	ldr	r3, [pc, #88]	; (8001064 <_Z31balance_activation_deactivationv+0xac>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <_Z31balance_activation_deactivationv+0x5c>
 8001010:	2301      	movs	r3, #1
 8001012:	e000      	b.n	8001016 <_Z31balance_activation_deactivationv+0x5e>
 8001014:	2300      	movs	r3, #0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d01b      	beq.n	8001052 <_Z31balance_activation_deactivationv+0x9a>
	{
		balance_deactivation_flag = false;
 800101a:	4b12      	ldr	r3, [pc, #72]	; (8001064 <_Z31balance_activation_deactivationv+0xac>)
 800101c:	2200      	movs	r2, #0
 800101e:	701a      	strb	r2, [r3, #0]
		data.charging.discharge_activation = 0;
 8001020:	4b0e      	ldr	r3, [pc, #56]	; (800105c <_Z31balance_activation_deactivationv+0xa4>)
 8001022:	2200      	movs	r2, #0
 8001024:	f883 2298 	strb.w	r2, [r3, #664]	; 0x298
		for(int i = 0; i < NUMBER_OF_CELLS ; i++)
 8001028:	2300      	movs	r3, #0
 800102a:	603b      	str	r3, [r7, #0]
 800102c:	e009      	b.n	8001042 <_Z31balance_activation_deactivationv+0x8a>
		{
			data.charging.cell_discharge[i] = false;
 800102e:	4a0b      	ldr	r2, [pc, #44]	; (800105c <_Z31balance_activation_deactivationv+0xa4>)
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	4413      	add	r3, r2
 8001034:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8001038:	2200      	movs	r2, #0
 800103a:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < NUMBER_OF_CELLS ; i++)
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	3301      	adds	r3, #1
 8001040:	603b      	str	r3, [r7, #0]
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	2b05      	cmp	r3, #5
 8001046:	ddf2      	ble.n	800102e <_Z31balance_activation_deactivationv+0x76>
		}
		LTC_turn_off_discharge();
 8001048:	f001 fed6 	bl	8002df8 <_Z22LTC_turn_off_dischargev>
		tick_counter = 0; // time to wait for proper voltage values
 800104c:	4b06      	ldr	r3, [pc, #24]	; (8001068 <_Z31balance_activation_deactivationv+0xb0>)
 800104e:	2200      	movs	r2, #0
 8001050:	601a      	str	r2, [r3, #0]
	}
}
 8001052:	bf00      	nop
 8001054:	370c      	adds	r7, #12
 8001056:	46bd      	mov	sp, r7
 8001058:	bd90      	pop	{r4, r7, pc}
 800105a:	bf00      	nop
 800105c:	20001478 	.word	0x20001478
 8001060:	20001708 	.word	0x20001708
 8001064:	2000059c 	.word	0x2000059c
 8001068:	200005a0 	.word	0x200005a0

0800106c <_Z22start_balance_functionPv>:



void start_balance_function(void *argument){
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
	data.charging.charger_plugged = HAL_GPIO_ReadPin(INTERLOCK_GPIO_Port, INTERLOCK_Pin);
 8001074:	2104      	movs	r1, #4
 8001076:	481e      	ldr	r0, [pc, #120]	; (80010f0 <_Z22start_balance_functionPv+0x84>)
 8001078:	f007 f9fe 	bl	8008478 <HAL_GPIO_ReadPin>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	bf14      	ite	ne
 8001082:	2301      	movne	r3, #1
 8001084:	2300      	moveq	r3, #0
 8001086:	b2da      	uxtb	r2, r3
 8001088:	4b1a      	ldr	r3, [pc, #104]	; (80010f4 <_Z22start_balance_functionPv+0x88>)
 800108a:	f883 2296 	strb.w	r2, [r3, #662]	; 0x296
	for(;;){
		osDelay(100);
 800108e:	2064      	movs	r0, #100	; 0x64
 8001090:	f00f f8be 	bl	8010210 <osDelay>
		//calling the function that checks messages from USB
		CheckMessage(&USB_Receive_Buffer);
 8001094:	4818      	ldr	r0, [pc, #96]	; (80010f8 <_Z22start_balance_functionPv+0x8c>)
 8001096:	f002 fe67 	bl	8003d68 <_Z12CheckMessageP12RingBuffer_t>
		//balance test on cell 0
		//data.charging.cell_discharge[0]=true;
		//LTC_turn_on_discharge(0, data.charging.cell_discharge);
		tick_counter++;
 800109a:	4b18      	ldr	r3, [pc, #96]	; (80010fc <_Z22start_balance_functionPv+0x90>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	3301      	adds	r3, #1
 80010a0:	4a16      	ldr	r2, [pc, #88]	; (80010fc <_Z22start_balance_functionPv+0x90>)
 80010a2:	6013      	str	r3, [r2, #0]
		if(tick_counter > BALANCE_TICKS_AFTER_BALANCE){
 80010a4:	4b15      	ldr	r3, [pc, #84]	; (80010fc <_Z22start_balance_functionPv+0x90>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	2b1e      	cmp	r3, #30
 80010aa:	d9f0      	bls.n	800108e <_Z22start_balance_functionPv+0x22>
			if(!data.charging.charger_plugged) //charger is plugged
 80010ac:	4b11      	ldr	r3, [pc, #68]	; (80010f4 <_Z22start_balance_functionPv+0x88>)
 80010ae:	f893 3296 	ldrb.w	r3, [r3, #662]	; 0x296
 80010b2:	f083 0301 	eor.w	r3, r3, #1
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d00f      	beq.n	80010dc <_Z22start_balance_functionPv+0x70>
			{
				HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_RESET);
 80010bc:	2200      	movs	r2, #0
 80010be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010c2:	480f      	ldr	r0, [pc, #60]	; (8001100 <_Z22start_balance_functionPv+0x94>)
 80010c4:	f007 f9f0 	bl	80084a8 <HAL_GPIO_WritePin>
				if(1 == data.charging.balance_on)
 80010c8:	4b0a      	ldr	r3, [pc, #40]	; (80010f4 <_Z22start_balance_functionPv+0x88>)
 80010ca:	f893 3299 	ldrb.w	r3, [r3, #665]	; 0x299
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	d1dd      	bne.n	800108e <_Z22start_balance_functionPv+0x22>
				{
				balance_control();
 80010d2:	f7ff fe17 	bl	8000d04 <_Z15balance_controlv>
				balance_activation_deactivation();
 80010d6:	f7ff ff6f 	bl	8000fb8 <_Z31balance_activation_deactivationv>
 80010da:	e7d8      	b.n	800108e <_Z22start_balance_functionPv+0x22>
				}

			}
			else	//charger is unplugged
			{
				HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_SET);
 80010dc:	2201      	movs	r2, #1
 80010de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010e2:	4807      	ldr	r0, [pc, #28]	; (8001100 <_Z22start_balance_functionPv+0x94>)
 80010e4:	f007 f9e0 	bl	80084a8 <HAL_GPIO_WritePin>
				balance_activation_deactivation();
 80010e8:	f7ff ff66 	bl	8000fb8 <_Z31balance_activation_deactivationv>
		osDelay(100);
 80010ec:	e7cf      	b.n	800108e <_Z22start_balance_functionPv+0x22>
 80010ee:	bf00      	nop
 80010f0:	48000400 	.word	0x48000400
 80010f4:	20001478 	.word	0x20001478
 80010f8:	200005a4 	.word	0x200005a4
 80010fc:	200005a0 	.word	0x200005a0
 8001100:	48000800 	.word	0x48000800

08001104 <_ZSt21is_constant_evaluatedv>:
#define __cpp_lib_is_constant_evaluated 201811L

  /// Returns true only when called during constant evaluation.
  constexpr inline bool
  is_constant_evaluated() noexcept
  { return __builtin_is_constant_evaluated(); }
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
 8001108:	2300      	movs	r3, #0
 800110a:	4618      	mov	r0, r3
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr

08001114 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
 800111c:	6039      	str	r1, [r7, #0]
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	4618      	mov	r0, r3
 8001122:	370c      	adds	r7, #12
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr

0800112c <_ZN3etl11vector_baseC1Ej>:
  protected:

    //*************************************************************************
    /// Constructor.
    //*************************************************************************
    vector_base(size_t max_size_)
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	6039      	str	r1, [r7, #0]
      : CAPACITY(max_size_)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	683a      	ldr	r2, [r7, #0]
 800113a:	601a      	str	r2, [r3, #0]
    {
    }
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	4618      	mov	r0, r3
 8001140:	370c      	adds	r7, #12
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr

0800114a <_ZN3etl11vector_baseD1Ev>:
    virtual ~vector_base()
    {
    }
#else
  protected:
    ~vector_base()
 800114a:	b480      	push	{r7}
 800114c:	b083      	sub	sp, #12
 800114e:	af00      	add	r7, sp, #0
 8001150:	6078      	str	r0, [r7, #4]
    {
    }
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4618      	mov	r0, r3
 8001156:	370c      	adds	r7, #12
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr

08001160 <_ZN8PUTM_CAN14Can_rx_messageC1ER19__CAN_HandleTypeDefm>:
namespace PUTM_CAN {

static const std::size_t max_dlc_size = 8;

struct Can_rx_message {
  Can_rx_message(CAN_HandleTypeDef &hcan, uint32_t RxFifo) : header{}, data{0} {
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
 8001166:	60f8      	str	r0, [r7, #12]
 8001168:	60b9      	str	r1, [r7, #8]
 800116a:	607a      	str	r2, [r7, #4]
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	461a      	mov	r2, r3
 8001170:	2300      	movs	r3, #0
 8001172:	6013      	str	r3, [r2, #0]
 8001174:	6053      	str	r3, [r2, #4]
 8001176:	6093      	str	r3, [r2, #8]
 8001178:	60d3      	str	r3, [r2, #12]
 800117a:	6113      	str	r3, [r2, #16]
 800117c:	6153      	str	r3, [r2, #20]
 800117e:	6193      	str	r3, [r2, #24]
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	331c      	adds	r3, #28
 8001184:	2200      	movs	r2, #0
 8001186:	601a      	str	r2, [r3, #0]
 8001188:	605a      	str	r2, [r3, #4]
    this->status =
        HAL_CAN_GetRxMessage(&hcan, RxFifo, &this->header, this->data);
 800118a:	68fa      	ldr	r2, [r7, #12]
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	331c      	adds	r3, #28
 8001190:	6879      	ldr	r1, [r7, #4]
 8001192:	68b8      	ldr	r0, [r7, #8]
 8001194:	f006 f923 	bl	80073de <HAL_CAN_GetRxMessage>
 8001198:	4603      	mov	r3, r0
 800119a:	461a      	mov	r2, r3
    this->status =
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	4618      	mov	r0, r3
 80011a6:	3710      	adds	r7, #16
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}

080011ac <_ZN8PUTM_CAN11Device_base6get_IDEv>:
  bool new_data : 1;

public:
  constexpr Device_base(uint32_t ide, uint8_t dlc)
      : IDE{ide}, DLC{dlc}, new_data{false} {}
  [[nodiscard]] constexpr uint32_t get_ID() { return IDE; }
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	791a      	ldrb	r2, [r3, #4]
 80011b8:	795b      	ldrb	r3, [r3, #5]
 80011ba:	f003 030f 	and.w	r3, r3, #15
 80011be:	021b      	lsls	r3, r3, #8
 80011c0:	4313      	orrs	r3, r2
 80011c2:	b29b      	uxth	r3, r3
 80011c4:	4618      	mov	r0, r3
 80011c6:	370c      	adds	r7, #12
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr

080011d0 <_ZN8PUTM_CAN13Can_interface13parse_messageERKNS_14Can_rx_messageE>:
                                                &wheel_temp_main};

public:
  Can_interface() = default;

  bool parse_message(const Can_rx_message &m) {
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b086      	sub	sp, #24
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	6039      	str	r1, [r7, #0]
    for (auto &device : device_array) {
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80011e0:	613b      	str	r3, [r7, #16]
 80011e2:	6938      	ldr	r0, [r7, #16]
 80011e4:	f000 fd04 	bl	8001bf0 <_ZNSt5arrayIPN8PUTM_CAN11Device_baseELj33EE5beginEv>
 80011e8:	6178      	str	r0, [r7, #20]
 80011ea:	6938      	ldr	r0, [r7, #16]
 80011ec:	f000 fd0c 	bl	8001c08 <_ZNSt5arrayIPN8PUTM_CAN11Device_baseELj33EE3endEv>
 80011f0:	60f8      	str	r0, [r7, #12]
 80011f2:	e01e      	b.n	8001232 <_ZN8PUTM_CAN13Can_interface13parse_messageERKNS_14Can_rx_messageE+0x62>
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	60bb      	str	r3, [r7, #8]
      if (device->get_ID() == m.header.StdId) {
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff ffd5 	bl	80011ac <_ZN8PUTM_CAN11Device_base6get_IDEv>
 8001202:	4602      	mov	r2, r0
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	429a      	cmp	r2, r3
 800120a:	bf0c      	ite	eq
 800120c:	2301      	moveq	r3, #1
 800120e:	2300      	movne	r3, #0
 8001210:	b2db      	uxtb	r3, r3
 8001212:	2b00      	cmp	r3, #0
 8001214:	d00a      	beq.n	800122c <_ZN8PUTM_CAN13Can_interface13parse_messageERKNS_14Can_rx_messageE+0x5c>
        device->set_data(m);
 8001216:	68bb      	ldr	r3, [r7, #8]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	68ba      	ldr	r2, [r7, #8]
 8001220:	6812      	ldr	r2, [r2, #0]
 8001222:	6839      	ldr	r1, [r7, #0]
 8001224:	4610      	mov	r0, r2
 8001226:	4798      	blx	r3
        return true;
 8001228:	2301      	movs	r3, #1
 800122a:	e007      	b.n	800123c <_ZN8PUTM_CAN13Can_interface13parse_messageERKNS_14Can_rx_messageE+0x6c>
    for (auto &device : device_array) {
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	3304      	adds	r3, #4
 8001230:	617b      	str	r3, [r7, #20]
 8001232:	697a      	ldr	r2, [r7, #20]
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	429a      	cmp	r2, r3
 8001238:	d1dc      	bne.n	80011f4 <_ZN8PUTM_CAN13Can_interface13parse_messageERKNS_14Can_rx_messageE+0x24>
      }
    }
    return false;
 800123a:	2300      	movs	r3, #0
  }
 800123c:	4618      	mov	r0, r3
 800123e:	3718      	adds	r7, #24
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}

08001244 <HAL_CAN_RxFifo0MsgPendingCallback>:

Can_interface can;

} // namespace PUTM_CAN

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001244:	b580      	push	{r7, lr}
 8001246:	b08c      	sub	sp, #48	; 0x30
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  PUTM_CAN::Can_rx_message rx{*hcan, 0};
 800124c:	f107 0308 	add.w	r3, r7, #8
 8001250:	2200      	movs	r2, #0
 8001252:	6879      	ldr	r1, [r7, #4]
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff ff83 	bl	8001160 <_ZN8PUTM_CAN14Can_rx_messageC1ER19__CAN_HandleTypeDefm>
  if (rx.status == HAL_StatusTypeDef::HAL_OK) {
 800125a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800125e:	2b00      	cmp	r3, #0
 8001260:	d105      	bne.n	800126e <HAL_CAN_RxFifo0MsgPendingCallback+0x2a>
    if (not PUTM_CAN::can.parse_message(rx)) {
 8001262:	f107 0308 	add.w	r3, r7, #8
 8001266:	4619      	mov	r1, r3
 8001268:	4803      	ldr	r0, [pc, #12]	; (8001278 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 800126a:	f7ff ffb1 	bl	80011d0 <_ZN8PUTM_CAN13Can_interface13parse_messageERKNS_14Can_rx_messageE>
      // Unknown message
      //Error_Handler();
    }
  }
}
 800126e:	bf00      	nop
 8001270:	3730      	adds	r7, #48	; 0x30
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	20000000 	.word	0x20000000

0800127c <_Z8can_initv>:
		{Error_condition::CURRENT_HIGH,20,100,data.current.value,ERROR_TIME,7}

};

void can_init()
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b08a      	sub	sp, #40	; 0x28
 8001280:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef filter;
	filter.FilterActivation = ENABLE;
 8001282:	2301      	movs	r3, #1
 8001284:	623b      	str	r3, [r7, #32]
	filter.FilterBank = 10;
 8001286:	230a      	movs	r3, #10
 8001288:	617b      	str	r3, [r7, #20]
	filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 800128a:	2300      	movs	r3, #0
 800128c:	613b      	str	r3, [r7, #16]
	filter.FilterIdHigh = 0x00;
 800128e:	2300      	movs	r3, #0
 8001290:	603b      	str	r3, [r7, #0]
	filter.FilterIdLow = 0x00;
 8001292:	2300      	movs	r3, #0
 8001294:	607b      	str	r3, [r7, #4]
	filter.FilterMaskIdHigh = 0x00;
 8001296:	2300      	movs	r3, #0
 8001298:	60bb      	str	r3, [r7, #8]
	filter.FilterMaskIdLow = 0x00;
 800129a:	2300      	movs	r3, #0
 800129c:	60fb      	str	r3, [r7, #12]
	filter.FilterMode = CAN_FILTERMODE_IDMASK;
 800129e:	2300      	movs	r3, #0
 80012a0:	61bb      	str	r3, [r7, #24]
	filter.FilterScale = CAN_FILTERSCALE_32BIT;
 80012a2:	2301      	movs	r3, #1
 80012a4:	61fb      	str	r3, [r7, #28]
	filter.SlaveStartFilterBank = 10;
 80012a6:	230a      	movs	r3, #10
 80012a8:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan1, &filter);
 80012aa:	463b      	mov	r3, r7
 80012ac:	4619      	mov	r1, r3
 80012ae:	4807      	ldr	r0, [pc, #28]	; (80012cc <_Z8can_initv+0x50>)
 80012b0:	f005 feb7 	bl	8007022 <HAL_CAN_ConfigFilter>
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80012b4:	2102      	movs	r1, #2
 80012b6:	4805      	ldr	r0, [pc, #20]	; (80012cc <_Z8can_initv+0x50>)
 80012b8:	f006 f9a3 	bl	8007602 <HAL_CAN_ActivateNotification>
	HAL_CAN_Start(&hcan1);
 80012bc:	4803      	ldr	r0, [pc, #12]	; (80012cc <_Z8can_initv+0x50>)
 80012be:	f005 ff7a 	bl	80071b6 <HAL_CAN_Start>

}
 80012c2:	bf00      	nop
 80012c4:	3728      	adds	r7, #40	; 0x28
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	20001aac 	.word	0x20001aac

080012d0 <_Z11error_checkv>:

// error if value is in range <min, max>
void error_check(){
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b090      	sub	sp, #64	; 0x40
 80012d4:	af00      	add	r7, sp, #0
	etl::vector<Error_condition, 8> errors_vector;
 80012d6:	1d3b      	adds	r3, r7, #4
 80012d8:	4618      	mov	r0, r3
 80012da:	f000 fcaf 	bl	8001c3c <_ZN3etl6vectorI15Error_conditionLj8EEC1Ev>

	for(auto& error : error_conditions){
 80012de:	4b2f      	ldr	r3, [pc, #188]	; (800139c <_Z11error_checkv+0xcc>)
 80012e0:	63bb      	str	r3, [r7, #56]	; 0x38
 80012e2:	4b2e      	ldr	r3, [pc, #184]	; (800139c <_Z11error_checkv+0xcc>)
 80012e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80012e6:	4b2e      	ldr	r3, [pc, #184]	; (80013a0 <_Z11error_checkv+0xd0>)
 80012e8:	637b      	str	r3, [r7, #52]	; 0x34
 80012ea:	e040      	b.n	800136e <_Z11error_checkv+0x9e>
 80012ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80012ee:	633b      	str	r3, [r7, #48]	; 0x30
		if(error.min <= error.value && error.value <= error.max){
 80012f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012f2:	ed93 7a01 	vldr	s14, [r3, #4]
 80012f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012f8:	edd3 7a03 	vldr	s15, [r3, #12]
 80012fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001300:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001304:	d825      	bhi.n	8001352 <_Z11error_checkv+0x82>
 8001306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001308:	ed93 7a03 	vldr	s14, [r3, #12]
 800130c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800130e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001312:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001316:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800131a:	d81a      	bhi.n	8001352 <_Z11error_checkv+0x82>
			errors_vector.emplace_back(error.error);
 800131c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800131e:	1d3b      	adds	r3, r7, #4
 8001320:	4611      	mov	r1, r2
 8001322:	4618      	mov	r0, r3
 8001324:	f000 fcaf 	bl	8001c86 <_ZN3etl7ivectorI15Error_conditionE12emplace_backIJRS1_EEEvDpOT_>
			data.acu_state=error.acu_state_code;
 8001328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800132a:	7d1a      	ldrb	r2, [r3, #20]
 800132c:	4b1d      	ldr	r3, [pc, #116]	; (80013a4 <_Z11error_checkv+0xd4>)
 800132e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
			if(false == error.flag)
 8001332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001334:	7f1b      	ldrb	r3, [r3, #28]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d116      	bne.n	8001368 <_Z11error_checkv+0x98>
			{
				error.timer = HAL_GetTick() + error.error_time;
 800133a:	f003 ffd3 	bl	80052e4 <HAL_GetTick>
 800133e:	4602      	mov	r2, r0
 8001340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001342:	691b      	ldr	r3, [r3, #16]
 8001344:	441a      	add	r2, r3
 8001346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001348:	619a      	str	r2, [r3, #24]
				error.flag = true;
 800134a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800134c:	2201      	movs	r2, #1
 800134e:	771a      	strb	r2, [r3, #28]
			if(false == error.flag)
 8001350:	e00a      	b.n	8001368 <_Z11error_checkv+0x98>
			}
		}
		else{
			error.timer = HAL_GetTick() + error.error_time;
 8001352:	f003 ffc7 	bl	80052e4 <HAL_GetTick>
 8001356:	4602      	mov	r2, r0
 8001358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800135a:	691b      	ldr	r3, [r3, #16]
 800135c:	441a      	add	r2, r3
 800135e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001360:	619a      	str	r2, [r3, #24]
			error.flag = false;
 8001362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001364:	2200      	movs	r2, #0
 8001366:	771a      	strb	r2, [r3, #28]
	for(auto& error : error_conditions){
 8001368:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800136a:	3320      	adds	r3, #32
 800136c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800136e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001370:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001372:	429a      	cmp	r2, r3
 8001374:	d1ba      	bne.n	80012ec <_Z11error_checkv+0x1c>
		}
	}

	if(errors_vector.empty())
 8001376:	1d3b      	adds	r3, r7, #4
 8001378:	4618      	mov	r0, r3
 800137a:	f000 fc9f 	bl	8001cbc <_ZNK3etl7ivectorI15Error_conditionE5emptyEv>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d003      	beq.n	800138c <_Z11error_checkv+0xbc>
	{
		data.acu_state = NORMAL_STATE;
 8001384:	4b07      	ldr	r3, [pc, #28]	; (80013a4 <_Z11error_checkv+0xd4>)
 8001386:	2200      	movs	r2, #0
 8001388:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
	}
}
 800138c:	1d3b      	adds	r3, r7, #4
 800138e:	4618      	mov	r0, r3
 8001390:	f000 fc68 	bl	8001c64 <_ZN3etl6vectorI15Error_conditionLj8EED1Ev>
 8001394:	3740      	adds	r7, #64	; 0x40
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	200005c4 	.word	0x200005c4
 80013a0:	200006c4 	.word	0x200006c4
 80013a4:	20001478 	.word	0x20001478

080013a8 <_Z13error_executev>:

void error_execute(){
 80013a8:	b590      	push	{r4, r7, lr}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
	uint32_t time = HAL_GetTick();
 80013ae:	f003 ff99 	bl	80052e4 <HAL_GetTick>
 80013b2:	6038      	str	r0, [r7, #0]
	if(error_conditions[0].timer <= HAL_GetTick()) //shut down and sleep
 80013b4:	4b23      	ldr	r3, [pc, #140]	; (8001444 <_Z13error_executev+0x9c>)
 80013b6:	699c      	ldr	r4, [r3, #24]
 80013b8:	f003 ff94 	bl	80052e4 <HAL_GetTick>
 80013bc:	4603      	mov	r3, r0
 80013be:	429c      	cmp	r4, r3
 80013c0:	bf94      	ite	ls
 80013c2:	2301      	movls	r3, #1
 80013c4:	2300      	movhi	r3, #0
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d00a      	beq.n	80013e2 <_Z13error_executev+0x3a>
	{
		HAL_GPIO_WritePin(EFUSE_GPIO_Port, EFUSE_Pin, GPIO_PIN_RESET);
 80013cc:	2200      	movs	r2, #0
 80013ce:	2104      	movs	r1, #4
 80013d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013d4:	f007 f868 	bl	80084a8 <HAL_GPIO_WritePin>
		HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 80013d8:	2101      	movs	r1, #1
 80013da:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80013de:	f008 fa3b 	bl	8009858 <HAL_PWR_EnterSTOPMode>
	}
	for(unsigned int i = 3; i < 8; i++){
 80013e2:	2303      	movs	r3, #3
 80013e4:	607b      	str	r3, [r7, #4]
 80013e6:	e018      	b.n	800141a <_Z13error_executev+0x72>
		{
			if(error_conditions[i].timer <= HAL_GetTick()) //shut down
 80013e8:	4a16      	ldr	r2, [pc, #88]	; (8001444 <_Z13error_executev+0x9c>)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	015b      	lsls	r3, r3, #5
 80013ee:	4413      	add	r3, r2
 80013f0:	3318      	adds	r3, #24
 80013f2:	681c      	ldr	r4, [r3, #0]
 80013f4:	f003 ff76 	bl	80052e4 <HAL_GetTick>
 80013f8:	4603      	mov	r3, r0
 80013fa:	429c      	cmp	r4, r3
 80013fc:	bf94      	ite	ls
 80013fe:	2301      	movls	r3, #1
 8001400:	2300      	movhi	r3, #0
 8001402:	b2db      	uxtb	r3, r3
 8001404:	2b00      	cmp	r3, #0
 8001406:	d005      	beq.n	8001414 <_Z13error_executev+0x6c>
			{

				HAL_GPIO_WritePin(EFUSE_GPIO_Port, EFUSE_Pin, GPIO_PIN_RESET);
 8001408:	2200      	movs	r2, #0
 800140a:	2104      	movs	r1, #4
 800140c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001410:	f007 f84a 	bl	80084a8 <HAL_GPIO_WritePin>
	for(unsigned int i = 3; i < 8; i++){
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	3301      	adds	r3, #1
 8001418:	607b      	str	r3, [r7, #4]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2b07      	cmp	r3, #7
 800141e:	d9e3      	bls.n	80013e8 <_Z13error_executev+0x40>
				}*/
			}
		}
	}

	data.EFUSE_state = HAL_GPIO_ReadPin(EFUSE_GPIO_Port, EFUSE_Pin);
 8001420:	2104      	movs	r1, #4
 8001422:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001426:	f007 f827 	bl	8008478 <HAL_GPIO_ReadPin>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	bf14      	ite	ne
 8001430:	2301      	movne	r3, #1
 8001432:	2300      	moveq	r3, #0
 8001434:	b2da      	uxtb	r2, r3
 8001436:	4b04      	ldr	r3, [pc, #16]	; (8001448 <_Z13error_executev+0xa0>)
 8001438:	f883 22a1 	strb.w	r2, [r3, #673]	; 0x2a1
}
 800143c:	bf00      	nop
 800143e:	370c      	adds	r7, #12
 8001440:	46bd      	mov	sp, r7
 8001442:	bd90      	pop	{r4, r7, pc}
 8001444:	200005c4 	.word	0x200005c4
 8001448:	20001478 	.word	0x20001478

0800144c <_Z11serialPrintv>:

void serialPrint()
{
 800144c:	b590      	push	{r4, r7, lr}
 800144e:	b08d      	sub	sp, #52	; 0x34
 8001450:	af02      	add	r7, sp, #8
	// FIXME count chars
	// or use {fmt}
	static char tab[3500];
	uint16_t n=0;
 8001452:	2300      	movs	r3, #0
 8001454:	84fb      	strh	r3, [r7, #38]	; 0x26

	RTC_DateTypeDef rtc_date;
	RTC_TimeTypeDef rtc_time;
	HAL_RTC_GetTime(&hrtc, &rtc_time, RTC_FORMAT_BIN);
 8001456:	463b      	mov	r3, r7
 8001458:	2200      	movs	r2, #0
 800145a:	4619      	mov	r1, r3
 800145c:	48ab      	ldr	r0, [pc, #684]	; (800170c <_Z11serialPrintv+0x2c0>)
 800145e:	f00a f913 	bl	800b688 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &rtc_date, RTC_FORMAT_BIN);
 8001462:	f107 0314 	add.w	r3, r7, #20
 8001466:	2200      	movs	r2, #0
 8001468:	4619      	mov	r1, r3
 800146a:	48a8      	ldr	r0, [pc, #672]	; (800170c <_Z11serialPrintv+0x2c0>)
 800146c:	f00a f9f6 	bl	800b85c <HAL_RTC_GetDate>

	float cell_values_sum = (float)data.voltages.total / 10'000.0;
 8001470:	4ba7      	ldr	r3, [pc, #668]	; (8001710 <_Z11serialPrintv+0x2c4>)
 8001472:	695b      	ldr	r3, [r3, #20]
 8001474:	ee07 3a90 	vmov	s15, r3
 8001478:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800147c:	eddf 6aa5 	vldr	s13, [pc, #660]	; 8001714 <_Z11serialPrintv+0x2c8>
 8001480:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001484:	edc7 7a07 	vstr	s15, [r7, #28]
	n += sprintf(&tab[n], "%02d:%02d:%02d\r\n", rtc_time.Hours, rtc_time.Minutes, rtc_time.Seconds);
 8001488:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800148a:	4aa3      	ldr	r2, [pc, #652]	; (8001718 <_Z11serialPrintv+0x2cc>)
 800148c:	1898      	adds	r0, r3, r2
 800148e:	783b      	ldrb	r3, [r7, #0]
 8001490:	461a      	mov	r2, r3
 8001492:	787b      	ldrb	r3, [r7, #1]
 8001494:	4619      	mov	r1, r3
 8001496:	78bb      	ldrb	r3, [r7, #2]
 8001498:	9300      	str	r3, [sp, #0]
 800149a:	460b      	mov	r3, r1
 800149c:	499f      	ldr	r1, [pc, #636]	; (800171c <_Z11serialPrintv+0x2d0>)
 800149e:	f013 f81f 	bl	80144e0 <siprintf>
 80014a2:	4603      	mov	r3, r0
 80014a4:	b29a      	uxth	r2, r3
 80014a6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80014a8:	4413      	add	r3, r2
 80014aa:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "*** Battery state: %d ***", data.acu_state);
 80014ac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80014ae:	4a9a      	ldr	r2, [pc, #616]	; (8001718 <_Z11serialPrintv+0x2cc>)
 80014b0:	4413      	add	r3, r2
 80014b2:	4a97      	ldr	r2, [pc, #604]	; (8001710 <_Z11serialPrintv+0x2c4>)
 80014b4:	f892 22a0 	ldrb.w	r2, [r2, #672]	; 0x2a0
 80014b8:	4999      	ldr	r1, [pc, #612]	; (8001720 <_Z11serialPrintv+0x2d4>)
 80014ba:	4618      	mov	r0, r3
 80014bc:	f013 f810 	bl	80144e0 <siprintf>
 80014c0:	4603      	mov	r3, r0
 80014c2:	b29a      	uxth	r2, r3
 80014c4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80014c6:	4413      	add	r3, r2
 80014c8:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "\r\n");
 80014ca:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80014cc:	4a92      	ldr	r2, [pc, #584]	; (8001718 <_Z11serialPrintv+0x2cc>)
 80014ce:	4413      	add	r3, r2
 80014d0:	4994      	ldr	r1, [pc, #592]	; (8001724 <_Z11serialPrintv+0x2d8>)
 80014d2:	4618      	mov	r0, r3
 80014d4:	f013 f804 	bl	80144e0 <siprintf>
 80014d8:	4603      	mov	r3, r0
 80014da:	b29a      	uxth	r2, r3
 80014dc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80014de:	4413      	add	r3, r2
 80014e0:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "LEGEND FOR BATTERY STATE:");
 80014e2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80014e4:	4a8c      	ldr	r2, [pc, #560]	; (8001718 <_Z11serialPrintv+0x2cc>)
 80014e6:	4413      	add	r3, r2
 80014e8:	498f      	ldr	r1, [pc, #572]	; (8001728 <_Z11serialPrintv+0x2dc>)
 80014ea:	4618      	mov	r0, r3
 80014ec:	f012 fff8 	bl	80144e0 <siprintf>
 80014f0:	4603      	mov	r3, r0
 80014f2:	b29a      	uxth	r2, r3
 80014f4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80014f6:	4413      	add	r3, r2
 80014f8:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "\r\n");
 80014fa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80014fc:	4a86      	ldr	r2, [pc, #536]	; (8001718 <_Z11serialPrintv+0x2cc>)
 80014fe:	4413      	add	r3, r2
 8001500:	4988      	ldr	r1, [pc, #544]	; (8001724 <_Z11serialPrintv+0x2d8>)
 8001502:	4618      	mov	r0, r3
 8001504:	f012 ffec 	bl	80144e0 <siprintf>
 8001508:	4603      	mov	r3, r0
 800150a:	b29a      	uxth	r2, r3
 800150c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800150e:	4413      	add	r3, r2
 8001510:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "0- all good");
 8001512:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001514:	4a80      	ldr	r2, [pc, #512]	; (8001718 <_Z11serialPrintv+0x2cc>)
 8001516:	4413      	add	r3, r2
 8001518:	4984      	ldr	r1, [pc, #528]	; (800172c <_Z11serialPrintv+0x2e0>)
 800151a:	4618      	mov	r0, r3
 800151c:	f012 ffe0 	bl	80144e0 <siprintf>
 8001520:	4603      	mov	r3, r0
 8001522:	b29a      	uxth	r2, r3
 8001524:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001526:	4413      	add	r3, r2
 8001528:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "\r\n");
 800152a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800152c:	4a7a      	ldr	r2, [pc, #488]	; (8001718 <_Z11serialPrintv+0x2cc>)
 800152e:	4413      	add	r3, r2
 8001530:	497c      	ldr	r1, [pc, #496]	; (8001724 <_Z11serialPrintv+0x2d8>)
 8001532:	4618      	mov	r0, r3
 8001534:	f012 ffd4 	bl	80144e0 <siprintf>
 8001538:	4603      	mov	r3, r0
 800153a:	b29a      	uxth	r2, r3
 800153c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800153e:	4413      	add	r3, r2
 8001540:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "1- charging");
 8001542:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001544:	4a74      	ldr	r2, [pc, #464]	; (8001718 <_Z11serialPrintv+0x2cc>)
 8001546:	4413      	add	r3, r2
 8001548:	4979      	ldr	r1, [pc, #484]	; (8001730 <_Z11serialPrintv+0x2e4>)
 800154a:	4618      	mov	r0, r3
 800154c:	f012 ffc8 	bl	80144e0 <siprintf>
 8001550:	4603      	mov	r3, r0
 8001552:	b29a      	uxth	r2, r3
 8001554:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001556:	4413      	add	r3, r2
 8001558:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "\r\n");
 800155a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800155c:	4a6e      	ldr	r2, [pc, #440]	; (8001718 <_Z11serialPrintv+0x2cc>)
 800155e:	4413      	add	r3, r2
 8001560:	4970      	ldr	r1, [pc, #448]	; (8001724 <_Z11serialPrintv+0x2d8>)
 8001562:	4618      	mov	r0, r3
 8001564:	f012 ffbc 	bl	80144e0 <siprintf>
 8001568:	4603      	mov	r3, r0
 800156a:	b29a      	uxth	r2, r3
 800156c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800156e:	4413      	add	r3, r2
 8001570:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "2- unbalanced(difference from lowest to highest >0.2V)");
 8001572:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001574:	4a68      	ldr	r2, [pc, #416]	; (8001718 <_Z11serialPrintv+0x2cc>)
 8001576:	4413      	add	r3, r2
 8001578:	496e      	ldr	r1, [pc, #440]	; (8001734 <_Z11serialPrintv+0x2e8>)
 800157a:	4618      	mov	r0, r3
 800157c:	f012 ffb0 	bl	80144e0 <siprintf>
 8001580:	4603      	mov	r3, r0
 8001582:	b29a      	uxth	r2, r3
 8001584:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001586:	4413      	add	r3, r2
 8001588:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "\r\n");
 800158a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800158c:	4a62      	ldr	r2, [pc, #392]	; (8001718 <_Z11serialPrintv+0x2cc>)
 800158e:	4413      	add	r3, r2
 8001590:	4964      	ldr	r1, [pc, #400]	; (8001724 <_Z11serialPrintv+0x2d8>)
 8001592:	4618      	mov	r0, r3
 8001594:	f012 ffa4 	bl	80144e0 <siprintf>
 8001598:	4603      	mov	r3, r0
 800159a:	b29a      	uxth	r2, r3
 800159c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800159e:	4413      	add	r3, r2
 80015a0:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "3- highest temperature is more than 48C");
 80015a2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80015a4:	4a5c      	ldr	r2, [pc, #368]	; (8001718 <_Z11serialPrintv+0x2cc>)
 80015a6:	4413      	add	r3, r2
 80015a8:	4963      	ldr	r1, [pc, #396]	; (8001738 <_Z11serialPrintv+0x2ec>)
 80015aa:	4618      	mov	r0, r3
 80015ac:	f012 ff98 	bl	80144e0 <siprintf>
 80015b0:	4603      	mov	r3, r0
 80015b2:	b29a      	uxth	r2, r3
 80015b4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80015b6:	4413      	add	r3, r2
 80015b8:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "\r\n");
 80015ba:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80015bc:	4a56      	ldr	r2, [pc, #344]	; (8001718 <_Z11serialPrintv+0x2cc>)
 80015be:	4413      	add	r3, r2
 80015c0:	4958      	ldr	r1, [pc, #352]	; (8001724 <_Z11serialPrintv+0x2d8>)
 80015c2:	4618      	mov	r0, r3
 80015c4:	f012 ff8c 	bl	80144e0 <siprintf>
 80015c8:	4603      	mov	r3, r0
 80015ca:	b29a      	uxth	r2, r3
 80015cc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80015ce:	4413      	add	r3, r2
 80015d0:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "4- too low voltage");
 80015d2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80015d4:	4a50      	ldr	r2, [pc, #320]	; (8001718 <_Z11serialPrintv+0x2cc>)
 80015d6:	4413      	add	r3, r2
 80015d8:	4958      	ldr	r1, [pc, #352]	; (800173c <_Z11serialPrintv+0x2f0>)
 80015da:	4618      	mov	r0, r3
 80015dc:	f012 ff80 	bl	80144e0 <siprintf>
 80015e0:	4603      	mov	r3, r0
 80015e2:	b29a      	uxth	r2, r3
 80015e4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80015e6:	4413      	add	r3, r2
 80015e8:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "\r\n");
 80015ea:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80015ec:	4a4a      	ldr	r2, [pc, #296]	; (8001718 <_Z11serialPrintv+0x2cc>)
 80015ee:	4413      	add	r3, r2
 80015f0:	494c      	ldr	r1, [pc, #304]	; (8001724 <_Z11serialPrintv+0x2d8>)
 80015f2:	4618      	mov	r0, r3
 80015f4:	f012 ff74 	bl	80144e0 <siprintf>
 80015f8:	4603      	mov	r3, r0
 80015fa:	b29a      	uxth	r2, r3
 80015fc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80015fe:	4413      	add	r3, r2
 8001600:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "5- too high voltage");
 8001602:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001604:	4a44      	ldr	r2, [pc, #272]	; (8001718 <_Z11serialPrintv+0x2cc>)
 8001606:	4413      	add	r3, r2
 8001608:	494d      	ldr	r1, [pc, #308]	; (8001740 <_Z11serialPrintv+0x2f4>)
 800160a:	4618      	mov	r0, r3
 800160c:	f012 ff68 	bl	80144e0 <siprintf>
 8001610:	4603      	mov	r3, r0
 8001612:	b29a      	uxth	r2, r3
 8001614:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001616:	4413      	add	r3, r2
 8001618:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "\r\n");
 800161a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800161c:	4a3e      	ldr	r2, [pc, #248]	; (8001718 <_Z11serialPrintv+0x2cc>)
 800161e:	4413      	add	r3, r2
 8001620:	4940      	ldr	r1, [pc, #256]	; (8001724 <_Z11serialPrintv+0x2d8>)
 8001622:	4618      	mov	r0, r3
 8001624:	f012 ff5c 	bl	80144e0 <siprintf>
 8001628:	4603      	mov	r3, r0
 800162a:	b29a      	uxth	r2, r3
 800162c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800162e:	4413      	add	r3, r2
 8001630:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "6- too high temperature");
 8001632:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001634:	4a38      	ldr	r2, [pc, #224]	; (8001718 <_Z11serialPrintv+0x2cc>)
 8001636:	4413      	add	r3, r2
 8001638:	4942      	ldr	r1, [pc, #264]	; (8001744 <_Z11serialPrintv+0x2f8>)
 800163a:	4618      	mov	r0, r3
 800163c:	f012 ff50 	bl	80144e0 <siprintf>
 8001640:	4603      	mov	r3, r0
 8001642:	b29a      	uxth	r2, r3
 8001644:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001646:	4413      	add	r3, r2
 8001648:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "\r\n");
 800164a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800164c:	4a32      	ldr	r2, [pc, #200]	; (8001718 <_Z11serialPrintv+0x2cc>)
 800164e:	4413      	add	r3, r2
 8001650:	4934      	ldr	r1, [pc, #208]	; (8001724 <_Z11serialPrintv+0x2d8>)
 8001652:	4618      	mov	r0, r3
 8001654:	f012 ff44 	bl	80144e0 <siprintf>
 8001658:	4603      	mov	r3, r0
 800165a:	b29a      	uxth	r2, r3
 800165c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800165e:	4413      	add	r3, r2
 8001660:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "7- too high current");
 8001662:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001664:	4a2c      	ldr	r2, [pc, #176]	; (8001718 <_Z11serialPrintv+0x2cc>)
 8001666:	4413      	add	r3, r2
 8001668:	4937      	ldr	r1, [pc, #220]	; (8001748 <_Z11serialPrintv+0x2fc>)
 800166a:	4618      	mov	r0, r3
 800166c:	f012 ff38 	bl	80144e0 <siprintf>
 8001670:	4603      	mov	r3, r0
 8001672:	b29a      	uxth	r2, r3
 8001674:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001676:	4413      	add	r3, r2
 8001678:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "\r\n");
 800167a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800167c:	4a26      	ldr	r2, [pc, #152]	; (8001718 <_Z11serialPrintv+0x2cc>)
 800167e:	4413      	add	r3, r2
 8001680:	4928      	ldr	r1, [pc, #160]	; (8001724 <_Z11serialPrintv+0x2d8>)
 8001682:	4618      	mov	r0, r3
 8001684:	f012 ff2c 	bl	80144e0 <siprintf>
 8001688:	4603      	mov	r3, r0
 800168a:	b29a      	uxth	r2, r3
 800168c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800168e:	4413      	add	r3, r2
 8001690:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "8- sleep mode");
 8001692:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001694:	4a20      	ldr	r2, [pc, #128]	; (8001718 <_Z11serialPrintv+0x2cc>)
 8001696:	4413      	add	r3, r2
 8001698:	492c      	ldr	r1, [pc, #176]	; (800174c <_Z11serialPrintv+0x300>)
 800169a:	4618      	mov	r0, r3
 800169c:	f012 ff20 	bl	80144e0 <siprintf>
 80016a0:	4603      	mov	r3, r0
 80016a2:	b29a      	uxth	r2, r3
 80016a4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80016a6:	4413      	add	r3, r2
 80016a8:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "\r\n\n");
 80016aa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80016ac:	4a1a      	ldr	r2, [pc, #104]	; (8001718 <_Z11serialPrintv+0x2cc>)
 80016ae:	4413      	add	r3, r2
 80016b0:	4927      	ldr	r1, [pc, #156]	; (8001750 <_Z11serialPrintv+0x304>)
 80016b2:	4618      	mov	r0, r3
 80016b4:	f012 ff14 	bl	80144e0 <siprintf>
 80016b8:	4603      	mov	r3, r0
 80016ba:	b29a      	uxth	r2, r3
 80016bc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80016be:	4413      	add	r3, r2
 80016c0:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "*** Stack voltage:\t%3.2f V ***", cell_values_sum);
 80016c2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80016c4:	4a14      	ldr	r2, [pc, #80]	; (8001718 <_Z11serialPrintv+0x2cc>)
 80016c6:	189c      	adds	r4, r3, r2
 80016c8:	69f8      	ldr	r0, [r7, #28]
 80016ca:	f7fe ff65 	bl	8000598 <__aeabi_f2d>
 80016ce:	4602      	mov	r2, r0
 80016d0:	460b      	mov	r3, r1
 80016d2:	4920      	ldr	r1, [pc, #128]	; (8001754 <_Z11serialPrintv+0x308>)
 80016d4:	4620      	mov	r0, r4
 80016d6:	f012 ff03 	bl	80144e0 <siprintf>
 80016da:	4603      	mov	r3, r0
 80016dc:	b29a      	uxth	r2, r3
 80016de:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80016e0:	4413      	add	r3, r2
 80016e2:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "\r\n");
 80016e4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80016e6:	4a0c      	ldr	r2, [pc, #48]	; (8001718 <_Z11serialPrintv+0x2cc>)
 80016e8:	4413      	add	r3, r2
 80016ea:	490e      	ldr	r1, [pc, #56]	; (8001724 <_Z11serialPrintv+0x2d8>)
 80016ec:	4618      	mov	r0, r3
 80016ee:	f012 fef7 	bl	80144e0 <siprintf>
 80016f2:	4603      	mov	r3, r0
 80016f4:	b29a      	uxth	r2, r3
 80016f6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80016f8:	4413      	add	r3, r2
 80016fa:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "*** State of charge: %f ***", data.soc.value * 100);
 80016fc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80016fe:	4a06      	ldr	r2, [pc, #24]	; (8001718 <_Z11serialPrintv+0x2cc>)
 8001700:	189c      	adds	r4, r3, r2
 8001702:	4b03      	ldr	r3, [pc, #12]	; (8001710 <_Z11serialPrintv+0x2c4>)
 8001704:	edd3 7aa2 	vldr	s15, [r3, #648]	; 0x288
 8001708:	e028      	b.n	800175c <_Z11serialPrintv+0x310>
 800170a:	bf00      	nop
 800170c:	20001ad4 	.word	0x20001ad4
 8001710:	20001478 	.word	0x20001478
 8001714:	461c4000 	.word	0x461c4000
 8001718:	200006c4 	.word	0x200006c4
 800171c:	08016860 	.word	0x08016860
 8001720:	08016874 	.word	0x08016874
 8001724:	08016890 	.word	0x08016890
 8001728:	08016894 	.word	0x08016894
 800172c:	080168b0 	.word	0x080168b0
 8001730:	080168bc 	.word	0x080168bc
 8001734:	080168c8 	.word	0x080168c8
 8001738:	08016900 	.word	0x08016900
 800173c:	08016928 	.word	0x08016928
 8001740:	0801693c 	.word	0x0801693c
 8001744:	08016950 	.word	0x08016950
 8001748:	08016968 	.word	0x08016968
 800174c:	0801697c 	.word	0x0801697c
 8001750:	0801698c 	.word	0x0801698c
 8001754:	08016990 	.word	0x08016990
 8001758:	42c80000 	.word	0x42c80000
 800175c:	ed1f 7a02 	vldr	s14, [pc, #-8]	; 8001758 <_Z11serialPrintv+0x30c>
 8001760:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001764:	ee17 0a90 	vmov	r0, s15
 8001768:	f7fe ff16 	bl	8000598 <__aeabi_f2d>
 800176c:	4602      	mov	r2, r0
 800176e:	460b      	mov	r3, r1
 8001770:	496b      	ldr	r1, [pc, #428]	; (8001920 <_Z11serialPrintv+0x4d4>)
 8001772:	4620      	mov	r0, r4
 8001774:	f012 feb4 	bl	80144e0 <siprintf>
 8001778:	4603      	mov	r3, r0
 800177a:	b29a      	uxth	r2, r3
 800177c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800177e:	4413      	add	r3, r2
 8001780:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "\r\n");
 8001782:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001784:	4a67      	ldr	r2, [pc, #412]	; (8001924 <_Z11serialPrintv+0x4d8>)
 8001786:	4413      	add	r3, r2
 8001788:	4967      	ldr	r1, [pc, #412]	; (8001928 <_Z11serialPrintv+0x4dc>)
 800178a:	4618      	mov	r0, r3
 800178c:	f012 fea8 	bl	80144e0 <siprintf>
 8001790:	4603      	mov	r3, r0
 8001792:	b29a      	uxth	r2, r3
 8001794:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001796:	4413      	add	r3, r2
 8001798:	84fb      	strh	r3, [r7, #38]	; 0x26

	for(int i = 0; i < NUMBER_OF_CELLS; i++)
 800179a:	2300      	movs	r3, #0
 800179c:	623b      	str	r3, [r7, #32]
 800179e:	e067      	b.n	8001870 <_Z11serialPrintv+0x424>
	{
		float cell_value = (float)data.voltages.cells[i] / 10'000.0;
 80017a0:	4a62      	ldr	r2, [pc, #392]	; (800192c <_Z11serialPrintv+0x4e0>)
 80017a2:	6a3b      	ldr	r3, [r7, #32]
 80017a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80017a8:	ee07 3a90 	vmov	s15, r3
 80017ac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80017b0:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8001930 <_Z11serialPrintv+0x4e4>
 80017b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017b8:	edc7 7a06 	vstr	s15, [r7, #24]
		n += sprintf(&tab[n], "-V.%d-\t", i);
 80017bc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80017be:	4a59      	ldr	r2, [pc, #356]	; (8001924 <_Z11serialPrintv+0x4d8>)
 80017c0:	4413      	add	r3, r2
 80017c2:	6a3a      	ldr	r2, [r7, #32]
 80017c4:	495b      	ldr	r1, [pc, #364]	; (8001934 <_Z11serialPrintv+0x4e8>)
 80017c6:	4618      	mov	r0, r3
 80017c8:	f012 fe8a 	bl	80144e0 <siprintf>
 80017cc:	4603      	mov	r3, r0
 80017ce:	b29a      	uxth	r2, r3
 80017d0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80017d2:	4413      	add	r3, r2
 80017d4:	84fb      	strh	r3, [r7, #38]	; 0x26
		n += sprintf(&tab[n], "%1.3f%c\t", cell_value, data.charging.cell_discharge[i] == 0 ? ' ' : '*');
 80017d6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80017d8:	4a52      	ldr	r2, [pc, #328]	; (8001924 <_Z11serialPrintv+0x4d8>)
 80017da:	189c      	adds	r4, r3, r2
 80017dc:	69b8      	ldr	r0, [r7, #24]
 80017de:	f7fe fedb 	bl	8000598 <__aeabi_f2d>
 80017e2:	4602      	mov	r2, r0
 80017e4:	460b      	mov	r3, r1
 80017e6:	4851      	ldr	r0, [pc, #324]	; (800192c <_Z11serialPrintv+0x4e0>)
 80017e8:	6a39      	ldr	r1, [r7, #32]
 80017ea:	4401      	add	r1, r0
 80017ec:	f501 7124 	add.w	r1, r1, #656	; 0x290
 80017f0:	7809      	ldrb	r1, [r1, #0]
 80017f2:	2900      	cmp	r1, #0
 80017f4:	d101      	bne.n	80017fa <_Z11serialPrintv+0x3ae>
 80017f6:	2120      	movs	r1, #32
 80017f8:	e000      	b.n	80017fc <_Z11serialPrintv+0x3b0>
 80017fa:	212a      	movs	r1, #42	; 0x2a
 80017fc:	9100      	str	r1, [sp, #0]
 80017fe:	494e      	ldr	r1, [pc, #312]	; (8001938 <_Z11serialPrintv+0x4ec>)
 8001800:	4620      	mov	r0, r4
 8001802:	f012 fe6d 	bl	80144e0 <siprintf>
 8001806:	4603      	mov	r3, r0
 8001808:	b29a      	uxth	r2, r3
 800180a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800180c:	4413      	add	r3, r2
 800180e:	84fb      	strh	r3, [r7, #38]	; 0x26
		if(i != 5)
 8001810:	6a3b      	ldr	r3, [r7, #32]
 8001812:	2b05      	cmp	r3, #5
 8001814:	d01d      	beq.n	8001852 <_Z11serialPrintv+0x406>
		{
		n += sprintf(&tab[n], " -T.%d-\t", i);
 8001816:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001818:	4a42      	ldr	r2, [pc, #264]	; (8001924 <_Z11serialPrintv+0x4d8>)
 800181a:	4413      	add	r3, r2
 800181c:	6a3a      	ldr	r2, [r7, #32]
 800181e:	4947      	ldr	r1, [pc, #284]	; (800193c <_Z11serialPrintv+0x4f0>)
 8001820:	4618      	mov	r0, r3
 8001822:	f012 fe5d 	bl	80144e0 <siprintf>
 8001826:	4603      	mov	r3, r0
 8001828:	b29a      	uxth	r2, r3
 800182a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800182c:	4413      	add	r3, r2
 800182e:	84fb      	strh	r3, [r7, #38]	; 0x26
		n += sprintf(&tab[n], "%d\t", data.temperatures.values[i]);
 8001830:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001832:	4a3c      	ldr	r2, [pc, #240]	; (8001924 <_Z11serialPrintv+0x4d8>)
 8001834:	1898      	adds	r0, r3, r2
 8001836:	4a3d      	ldr	r2, [pc, #244]	; (800192c <_Z11serialPrintv+0x4e0>)
 8001838:	6a3b      	ldr	r3, [r7, #32]
 800183a:	4413      	add	r3, r2
 800183c:	3320      	adds	r3, #32
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	461a      	mov	r2, r3
 8001842:	493f      	ldr	r1, [pc, #252]	; (8001940 <_Z11serialPrintv+0x4f4>)
 8001844:	f012 fe4c 	bl	80144e0 <siprintf>
 8001848:	4603      	mov	r3, r0
 800184a:	b29a      	uxth	r2, r3
 800184c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800184e:	4413      	add	r3, r2
 8001850:	84fb      	strh	r3, [r7, #38]	; 0x26
		}
		n += sprintf(&tab[n], "\r\n");
 8001852:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001854:	4a33      	ldr	r2, [pc, #204]	; (8001924 <_Z11serialPrintv+0x4d8>)
 8001856:	4413      	add	r3, r2
 8001858:	4933      	ldr	r1, [pc, #204]	; (8001928 <_Z11serialPrintv+0x4dc>)
 800185a:	4618      	mov	r0, r3
 800185c:	f012 fe40 	bl	80144e0 <siprintf>
 8001860:	4603      	mov	r3, r0
 8001862:	b29a      	uxth	r2, r3
 8001864:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001866:	4413      	add	r3, r2
 8001868:	84fb      	strh	r3, [r7, #38]	; 0x26
	for(int i = 0; i < NUMBER_OF_CELLS; i++)
 800186a:	6a3b      	ldr	r3, [r7, #32]
 800186c:	3301      	adds	r3, #1
 800186e:	623b      	str	r3, [r7, #32]
 8001870:	6a3b      	ldr	r3, [r7, #32]
 8001872:	2b05      	cmp	r3, #5
 8001874:	dd94      	ble.n	80017a0 <_Z11serialPrintv+0x354>
	}

	n += sprintf(&tab[n], "\r\n");
 8001876:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001878:	4a2a      	ldr	r2, [pc, #168]	; (8001924 <_Z11serialPrintv+0x4d8>)
 800187a:	4413      	add	r3, r2
 800187c:	492a      	ldr	r1, [pc, #168]	; (8001928 <_Z11serialPrintv+0x4dc>)
 800187e:	4618      	mov	r0, r3
 8001880:	f012 fe2e 	bl	80144e0 <siprintf>
 8001884:	4603      	mov	r3, r0
 8001886:	b29a      	uxth	r2, r3
 8001888:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800188a:	4413      	add	r3, r2
 800188c:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "Output current:\t%3.2f\r\n", data.current.value);
 800188e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001890:	4a24      	ldr	r2, [pc, #144]	; (8001924 <_Z11serialPrintv+0x4d8>)
 8001892:	189c      	adds	r4, r3, r2
 8001894:	4b25      	ldr	r3, [pc, #148]	; (800192c <_Z11serialPrintv+0x4e0>)
 8001896:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 800189a:	4618      	mov	r0, r3
 800189c:	f7fe fe7c 	bl	8000598 <__aeabi_f2d>
 80018a0:	4602      	mov	r2, r0
 80018a2:	460b      	mov	r3, r1
 80018a4:	4927      	ldr	r1, [pc, #156]	; (8001944 <_Z11serialPrintv+0x4f8>)
 80018a6:	4620      	mov	r0, r4
 80018a8:	f012 fe1a 	bl	80144e0 <siprintf>
 80018ac:	4603      	mov	r3, r0
 80018ae:	b29a      	uxth	r2, r3
 80018b0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80018b2:	4413      	add	r3, r2
 80018b4:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "\r\n");
 80018b6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80018b8:	4a1a      	ldr	r2, [pc, #104]	; (8001924 <_Z11serialPrintv+0x4d8>)
 80018ba:	4413      	add	r3, r2
 80018bc:	491a      	ldr	r1, [pc, #104]	; (8001928 <_Z11serialPrintv+0x4dc>)
 80018be:	4618      	mov	r0, r3
 80018c0:	f012 fe0e 	bl	80144e0 <siprintf>
 80018c4:	4603      	mov	r3, r0
 80018c6:	b29a      	uxth	r2, r3
 80018c8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80018ca:	4413      	add	r3, r2
 80018cc:	84fb      	strh	r3, [r7, #38]	; 0x26

	n += sprintf(&tab[n], "EFUSE state:\t%d\r\n", HAL_GPIO_ReadPin(EFUSE_GPIO_Port, EFUSE_Pin));
 80018ce:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80018d0:	4a14      	ldr	r2, [pc, #80]	; (8001924 <_Z11serialPrintv+0x4d8>)
 80018d2:	189c      	adds	r4, r3, r2
 80018d4:	2104      	movs	r1, #4
 80018d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018da:	f006 fdcd 	bl	8008478 <HAL_GPIO_ReadPin>
 80018de:	4603      	mov	r3, r0
 80018e0:	461a      	mov	r2, r3
 80018e2:	4919      	ldr	r1, [pc, #100]	; (8001948 <_Z11serialPrintv+0x4fc>)
 80018e4:	4620      	mov	r0, r4
 80018e6:	f012 fdfb 	bl	80144e0 <siprintf>
 80018ea:	4603      	mov	r3, r0
 80018ec:	b29a      	uxth	r2, r3
 80018ee:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80018f0:	4413      	add	r3, r2
 80018f2:	84fb      	strh	r3, [r7, #38]	; 0x26
	n += sprintf(&tab[n], "\r\n");
 80018f4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80018f6:	4a0b      	ldr	r2, [pc, #44]	; (8001924 <_Z11serialPrintv+0x4d8>)
 80018f8:	4413      	add	r3, r2
 80018fa:	490b      	ldr	r1, [pc, #44]	; (8001928 <_Z11serialPrintv+0x4dc>)
 80018fc:	4618      	mov	r0, r3
 80018fe:	f012 fdef 	bl	80144e0 <siprintf>
 8001902:	4603      	mov	r3, r0
 8001904:	b29a      	uxth	r2, r3
 8001906:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001908:	4413      	add	r3, r2
 800190a:	84fb      	strh	r3, [r7, #38]	; 0x26

	CDC_Transmit_FS((uint8_t*)tab, n);
 800190c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800190e:	4619      	mov	r1, r3
 8001910:	4804      	ldr	r0, [pc, #16]	; (8001924 <_Z11serialPrintv+0x4d8>)
 8001912:	f011 f9df 	bl	8012cd4 <CDC_Transmit_FS>
}
 8001916:	bf00      	nop
 8001918:	372c      	adds	r7, #44	; 0x2c
 800191a:	46bd      	mov	sp, r7
 800191c:	bd90      	pop	{r4, r7, pc}
 800191e:	bf00      	nop
 8001920:	080169b0 	.word	0x080169b0
 8001924:	200006c4 	.word	0x200006c4
 8001928:	08016890 	.word	0x08016890
 800192c:	20001478 	.word	0x20001478
 8001930:	461c4000 	.word	0x461c4000
 8001934:	080169cc 	.word	0x080169cc
 8001938:	080169d4 	.word	0x080169d4
 800193c:	080169e0 	.word	0x080169e0
 8001940:	080169ec 	.word	0x080169ec
 8001944:	080169f0 	.word	0x080169f0
 8001948:	08016a08 	.word	0x08016a08

0800194c <_ZN8PUTM_CAN14Can_tx_messageINS_11BMS_LV_mainEEC1ERKS1_RK19CAN_TxHeaderTypeDef>:
  constexpr Can_tx_message(const T &data,
 800194c:	b5b0      	push	{r4, r5, r7, lr}
 800194e:	b084      	sub	sp, #16
 8001950:	af00      	add	r7, sp, #0
 8001952:	60f8      	str	r0, [r7, #12]
 8001954:	60b9      	str	r1, [r7, #8]
 8001956:	607a      	str	r2, [r7, #4]
      : header{message_header} {
 8001958:	68fa      	ldr	r2, [r7, #12]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4614      	mov	r4, r2
 800195e:	461d      	mov	r5, r3
 8001960:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001962:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001964:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001968:	e884 0003 	stmia.w	r4, {r0, r1}
    std::memcpy(this->buff, &data, sizeof(T));
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	3318      	adds	r3, #24
 8001970:	2206      	movs	r2, #6
 8001972:	68b9      	ldr	r1, [r7, #8]
 8001974:	4618      	mov	r0, r3
 8001976:	f012 ff06 	bl	8014786 <memcpy>
  }
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	4618      	mov	r0, r3
 800197e:	3710      	adds	r7, #16
 8001980:	46bd      	mov	sp, r7
 8001982:	bdb0      	pop	{r4, r5, r7, pc}

08001984 <_ZN8PUTM_CAN14Can_tx_messageINS_18BMS_LV_temperatureEEC1ERKS1_RK19CAN_TxHeaderTypeDef>:
  constexpr Can_tx_message(const T &data,
 8001984:	b5b0      	push	{r4, r5, r7, lr}
 8001986:	b084      	sub	sp, #16
 8001988:	af00      	add	r7, sp, #0
 800198a:	60f8      	str	r0, [r7, #12]
 800198c:	60b9      	str	r1, [r7, #8]
 800198e:	607a      	str	r2, [r7, #4]
      : header{message_header} {
 8001990:	68fa      	ldr	r2, [r7, #12]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4614      	mov	r4, r2
 8001996:	461d      	mov	r5, r3
 8001998:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800199a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800199c:	e895 0003 	ldmia.w	r5, {r0, r1}
 80019a0:	e884 0003 	stmia.w	r4, {r0, r1}
    std::memcpy(this->buff, &data, sizeof(T));
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	3318      	adds	r3, #24
 80019a8:	2208      	movs	r2, #8
 80019aa:	68b9      	ldr	r1, [r7, #8]
 80019ac:	4618      	mov	r0, r3
 80019ae:	f012 feea 	bl	8014786 <memcpy>
  }
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	4618      	mov	r0, r3
 80019b6:	3710      	adds	r7, #16
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bdb0      	pop	{r4, r5, r7, pc}

080019bc <_Z23start_comm_err_functionPv>:

void start_comm_err_function(void *argument){
 80019bc:	b580      	push	{r7, lr}
 80019be:	b096      	sub	sp, #88	; 0x58
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]

	can_init();
 80019c4:	f7ff fc5a 	bl	800127c <_Z8can_initv>
	for(;;){
		osDelay(20);
 80019c8:	2014      	movs	r0, #20
 80019ca:	f00e fc21 	bl	8010210 <osDelay>

		error_conditions[0].value = data.current.value;
 80019ce:	4b80      	ldr	r3, [pc, #512]	; (8001bd0 <_Z23start_comm_err_functionPv+0x214>)
 80019d0:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 80019d4:	4a7f      	ldr	r2, [pc, #508]	; (8001bd4 <_Z23start_comm_err_functionPv+0x218>)
 80019d6:	60d3      	str	r3, [r2, #12]
		error_conditions[1].value = (float)(data.voltages.highest_cell_voltage-data.voltages.lowest_cell_voltage);
 80019d8:	4b7d      	ldr	r3, [pc, #500]	; (8001bd0 <_Z23start_comm_err_functionPv+0x214>)
 80019da:	8b9b      	ldrh	r3, [r3, #28]
 80019dc:	461a      	mov	r2, r3
 80019de:	4b7c      	ldr	r3, [pc, #496]	; (8001bd0 <_Z23start_comm_err_functionPv+0x214>)
 80019e0:	8b5b      	ldrh	r3, [r3, #26]
 80019e2:	1ad3      	subs	r3, r2, r3
 80019e4:	ee07 3a90 	vmov	s15, r3
 80019e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019ec:	4b79      	ldr	r3, [pc, #484]	; (8001bd4 <_Z23start_comm_err_functionPv+0x218>)
 80019ee:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		error_conditions[2].value = (float)data.temperatures.highest_temperature;
 80019f2:	4b77      	ldr	r3, [pc, #476]	; (8001bd0 <_Z23start_comm_err_functionPv+0x214>)
 80019f4:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80019f8:	ee07 3a90 	vmov	s15, r3
 80019fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a00:	4b74      	ldr	r3, [pc, #464]	; (8001bd4 <_Z23start_comm_err_functionPv+0x218>)
 8001a02:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		error_conditions[3].value = (float)data.voltages.lowest_cell_voltage;
 8001a06:	4b72      	ldr	r3, [pc, #456]	; (8001bd0 <_Z23start_comm_err_functionPv+0x214>)
 8001a08:	8b5b      	ldrh	r3, [r3, #26]
 8001a0a:	ee07 3a90 	vmov	s15, r3
 8001a0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a12:	4b70      	ldr	r3, [pc, #448]	; (8001bd4 <_Z23start_comm_err_functionPv+0x218>)
 8001a14:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
		error_conditions[4].value = (float)data.voltages.highest_cell_voltage;
 8001a18:	4b6d      	ldr	r3, [pc, #436]	; (8001bd0 <_Z23start_comm_err_functionPv+0x214>)
 8001a1a:	8b9b      	ldrh	r3, [r3, #28]
 8001a1c:	ee07 3a90 	vmov	s15, r3
 8001a20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a24:	4b6b      	ldr	r3, [pc, #428]	; (8001bd4 <_Z23start_comm_err_functionPv+0x218>)
 8001a26:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
		error_conditions[5].value = (float)data.temperatures.highest_temperature;
 8001a2a:	4b69      	ldr	r3, [pc, #420]	; (8001bd0 <_Z23start_comm_err_functionPv+0x214>)
 8001a2c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8001a30:	ee07 3a90 	vmov	s15, r3
 8001a34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a38:	4b66      	ldr	r3, [pc, #408]	; (8001bd4 <_Z23start_comm_err_functionPv+0x218>)
 8001a3a:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
		error_conditions[6].value = data.temperatures.lowest_temperature;
 8001a3e:	4b64      	ldr	r3, [pc, #400]	; (8001bd0 <_Z23start_comm_err_functionPv+0x214>)
 8001a40:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001a44:	ee07 3a90 	vmov	s15, r3
 8001a48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a4c:	4b61      	ldr	r3, [pc, #388]	; (8001bd4 <_Z23start_comm_err_functionPv+0x218>)
 8001a4e:	edc3 7a33 	vstr	s15, [r3, #204]	; 0xcc
		error_conditions[7].value = data.current.value;
 8001a52:	4b5f      	ldr	r3, [pc, #380]	; (8001bd0 <_Z23start_comm_err_functionPv+0x214>)
 8001a54:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 8001a58:	4a5e      	ldr	r2, [pc, #376]	; (8001bd4 <_Z23start_comm_err_functionPv+0x218>)
 8001a5a:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec

		PUTM_CAN::BMS_LV_main can_message_main{
			.voltage_sum{data.voltages.total_can},
 8001a5e:	4b5c      	ldr	r3, [pc, #368]	; (8001bd0 <_Z23start_comm_err_functionPv+0x214>)
 8001a60:	8b1b      	ldrh	r3, [r3, #24]
			.soc{data.soc.value_can},
			.temp_avg{data.temperatures.average},
			.current{(uint8_t)data.current.value},
			.device_state{static_cast<PUTM_CAN::BMS_LV_states>(data.acu_state)}
		};
 8001a62:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
			.soc{data.soc.value_can},
 8001a66:	4b5a      	ldr	r3, [pc, #360]	; (8001bd0 <_Z23start_comm_err_functionPv+0x214>)
 8001a68:	f893 328c 	ldrb.w	r3, [r3, #652]	; 0x28c
		};
 8001a6c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
			.temp_avg{data.temperatures.average},
 8001a70:	4b57      	ldr	r3, [pc, #348]	; (8001bd0 <_Z23start_comm_err_functionPv+0x214>)
 8001a72:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
		};
 8001a76:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			.current{(uint8_t)data.current.value},
 8001a7a:	4b55      	ldr	r3, [pc, #340]	; (8001bd0 <_Z23start_comm_err_functionPv+0x214>)
 8001a7c:	edd3 7a72 	vldr	s15, [r3, #456]	; 0x1c8
 8001a80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a84:	edc7 7a00 	vstr	s15, [r7]
 8001a88:	783b      	ldrb	r3, [r7, #0]
 8001a8a:	b2db      	uxtb	r3, r3
		};
 8001a8c:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
			.device_state{static_cast<PUTM_CAN::BMS_LV_states>(data.acu_state)}
 8001a90:	4b4f      	ldr	r3, [pc, #316]	; (8001bd0 <_Z23start_comm_err_functionPv+0x214>)
 8001a92:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
		};
 8001a96:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

		PUTM_CAN::BMS_LV_temperature can_message_temp{
 8001a9a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	601a      	str	r2, [r3, #0]
 8001aa2:	605a      	str	r2, [r3, #4]
			data.temperatures.values[0],
 8001aa4:	4b4a      	ldr	r3, [pc, #296]	; (8001bd0 <_Z23start_comm_err_functionPv+0x214>)
 8001aa6:	f893 3020 	ldrb.w	r3, [r3, #32]
			data.temperatures.values[3],
			data.temperatures.values[4],
			0,//data.temperatures.values[5],
			0,//data.temperatures.values[6],
			0//data.temperatures.values[7]
		};
 8001aaa:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
			data.temperatures.values[1],
 8001aae:	4b48      	ldr	r3, [pc, #288]	; (8001bd0 <_Z23start_comm_err_functionPv+0x214>)
 8001ab0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
		};
 8001ab4:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
			data.temperatures.values[2],
 8001ab8:	4b45      	ldr	r3, [pc, #276]	; (8001bd0 <_Z23start_comm_err_functionPv+0x214>)
 8001aba:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
		};
 8001abe:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
			data.temperatures.values[3],
 8001ac2:	4b43      	ldr	r3, [pc, #268]	; (8001bd0 <_Z23start_comm_err_functionPv+0x214>)
 8001ac4:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
		};
 8001ac8:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
			data.temperatures.values[4],
 8001acc:	4b40      	ldr	r3, [pc, #256]	; (8001bd0 <_Z23start_comm_err_functionPv+0x214>)
 8001ace:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
		};
 8001ad2:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c

		if(serial_tick < HAL_GetTick())
 8001ad6:	f003 fc05 	bl	80052e4 <HAL_GetTick>
 8001ada:	4602      	mov	r2, r0
 8001adc:	4b3e      	ldr	r3, [pc, #248]	; (8001bd8 <_Z23start_comm_err_functionPv+0x21c>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	bf8c      	ite	hi
 8001ae4:	2301      	movhi	r3, #1
 8001ae6:	2300      	movls	r3, #0
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d008      	beq.n	8001b00 <_Z23start_comm_err_functionPv+0x144>
		{
			serialPrint();
 8001aee:	f7ff fcad 	bl	800144c <_Z11serialPrintv>
			serial_tick = HAL_GetTick() + 500; //0.5s
 8001af2:	f003 fbf7 	bl	80052e4 <HAL_GetTick>
 8001af6:	4603      	mov	r3, r0
 8001af8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001afc:	4a36      	ldr	r2, [pc, #216]	; (8001bd8 <_Z23start_comm_err_functionPv+0x21c>)
 8001afe:	6013      	str	r3, [r2, #0]
		}

		auto can_message_main_frame = PUTM_CAN::Can_tx_message<PUTM_CAN::BMS_LV_main>(can_message_main, PUTM_CAN::can_tx_header_BMS_LV_MAIN);
 8001b00:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8001b04:	f107 0308 	add.w	r3, r7, #8
 8001b08:	4a34      	ldr	r2, [pc, #208]	; (8001bdc <_Z23start_comm_err_functionPv+0x220>)
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7ff ff1e 	bl	800194c <_ZN8PUTM_CAN14Can_tx_messageINS_11BMS_LV_mainEEC1ERKS1_RK19CAN_TxHeaderTypeDef>
		auto can_message_temp_frame = PUTM_CAN::Can_tx_message<PUTM_CAN::BMS_LV_temperature>(can_message_temp, PUTM_CAN::can_tx_header_BMS_LV_TEMPERATURE);
 8001b10:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001b14:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b18:	4a31      	ldr	r2, [pc, #196]	; (8001be0 <_Z23start_comm_err_functionPv+0x224>)
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f7ff ff32 	bl	8001984 <_ZN8PUTM_CAN14Can_tx_messageINS_18BMS_LV_temperatureEEC1ERKS1_RK19CAN_TxHeaderTypeDef>

		if(can_main_tick < HAL_GetTick())
 8001b20:	f003 fbe0 	bl	80052e4 <HAL_GetTick>
 8001b24:	4602      	mov	r2, r0
 8001b26:	4b2f      	ldr	r3, [pc, #188]	; (8001be4 <_Z23start_comm_err_functionPv+0x228>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	429a      	cmp	r2, r3
 8001b2c:	bf8c      	ite	hi
 8001b2e:	2301      	movhi	r3, #1
 8001b30:	2300      	movls	r3, #0
 8001b32:	b2db      	uxtb	r3, r3
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d00e      	beq.n	8001b56 <_Z23start_comm_err_functionPv+0x19a>
		{
			auto status_main = can_message_main_frame.send(hcan1);
 8001b38:	f107 0308 	add.w	r3, r7, #8
 8001b3c:	492a      	ldr	r1, [pc, #168]	; (8001be8 <_Z23start_comm_err_functionPv+0x22c>)
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f000 f8d0 	bl	8001ce4 <_ZN8PUTM_CAN14Can_tx_messageINS_11BMS_LV_mainEE4sendER19__CAN_HandleTypeDef>
 8001b44:	4603      	mov	r3, r0
 8001b46:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			can_main_tick = HAL_GetTick() + 40; //0.04s
 8001b4a:	f003 fbcb 	bl	80052e4 <HAL_GetTick>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	3328      	adds	r3, #40	; 0x28
 8001b52:	4a24      	ldr	r2, [pc, #144]	; (8001be4 <_Z23start_comm_err_functionPv+0x228>)
 8001b54:	6013      	str	r3, [r2, #0]
		}

		if(can_temp_tick < HAL_GetTick())
 8001b56:	f003 fbc5 	bl	80052e4 <HAL_GetTick>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	4b23      	ldr	r3, [pc, #140]	; (8001bec <_Z23start_comm_err_functionPv+0x230>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	429a      	cmp	r2, r3
 8001b62:	bf8c      	ite	hi
 8001b64:	2301      	movhi	r3, #1
 8001b66:	2300      	movls	r3, #0
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d00e      	beq.n	8001b8c <_Z23start_comm_err_functionPv+0x1d0>
		{
			auto status_temp = can_message_temp_frame.send(hcan1);
 8001b6e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b72:	491d      	ldr	r1, [pc, #116]	; (8001be8 <_Z23start_comm_err_functionPv+0x22c>)
 8001b74:	4618      	mov	r0, r3
 8001b76:	f000 f8c9 	bl	8001d0c <_ZN8PUTM_CAN14Can_tx_messageINS_18BMS_LV_temperatureEE4sendER19__CAN_HandleTypeDef>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
			can_temp_tick = HAL_GetTick() + 200; //0.2s
 8001b80:	f003 fbb0 	bl	80052e4 <HAL_GetTick>
 8001b84:	4603      	mov	r3, r0
 8001b86:	33c8      	adds	r3, #200	; 0xc8
 8001b88:	4a18      	ldr	r2, [pc, #96]	; (8001bec <_Z23start_comm_err_functionPv+0x230>)
 8001b8a:	6013      	str	r3, [r2, #0]
		}
		if(!data.charging.balance_on) //error check is on
 8001b8c:	4b10      	ldr	r3, [pc, #64]	; (8001bd0 <_Z23start_comm_err_functionPv+0x214>)
 8001b8e:	f893 3299 	ldrb.w	r3, [r3, #665]	; 0x299
 8001b92:	f083 0301 	eor.w	r3, r3, #1
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d004      	beq.n	8001ba6 <_Z23start_comm_err_functionPv+0x1ea>
		{
			error_check();
 8001b9c:	f7ff fb98 	bl	80012d0 <_Z11error_checkv>
			error_execute();
 8001ba0:	f7ff fc02 	bl	80013a8 <_Z13error_executev>
 8001ba4:	e710      	b.n	80019c8 <_Z23start_comm_err_functionPv+0xc>
		} 
		else //error check is off
		{
			if(HAL_GPIO_ReadPin(EFUSE_GPIO_Port, EFUSE_Pin) == GPIO_PIN_RESET)
 8001ba6:	2104      	movs	r1, #4
 8001ba8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bac:	f006 fc64 	bl	8008478 <HAL_GPIO_ReadPin>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	bf0c      	ite	eq
 8001bb6:	2301      	moveq	r3, #1
 8001bb8:	2300      	movne	r3, #0
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	f43f af03 	beq.w	80019c8 <_Z23start_comm_err_functionPv+0xc>
			{
				HAL_GPIO_WritePin(EFUSE_GPIO_Port, EFUSE_Pin, GPIO_PIN_SET);
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	2104      	movs	r1, #4
 8001bc6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bca:	f006 fc6d 	bl	80084a8 <HAL_GPIO_WritePin>
			}
		}
	}
 8001bce:	e6fb      	b.n	80019c8 <_Z23start_comm_err_functionPv+0xc>
 8001bd0:	20001478 	.word	0x20001478
 8001bd4:	200005c4 	.word	0x200005c4
 8001bd8:	200005b8 	.word	0x200005b8
 8001bdc:	08016ad8 	.word	0x08016ad8
 8001be0:	08016af0 	.word	0x08016af0
 8001be4:	200005bc 	.word	0x200005bc
 8001be8:	20001aac 	.word	0x20001aac
 8001bec:	200005c0 	.word	0x200005c0

08001bf0 <_ZNSt5arrayIPN8PUTM_CAN11Device_baseELj33EE5beginEv>:
      noexcept(_AT_Type::_Is_nothrow_swappable::value)
      { std::swap_ranges(begin(), end(), __other.begin()); }

      // Iterators.
      _GLIBCXX17_CONSTEXPR iterator
      begin() noexcept
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
      { return iterator(data()); }
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	f000 f89b 	bl	8001d34 <_ZNSt5arrayIPN8PUTM_CAN11Device_baseELj33EE4dataEv>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	4618      	mov	r0, r3
 8001c02:	3708      	adds	r7, #8
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}

08001c08 <_ZNSt5arrayIPN8PUTM_CAN11Device_baseELj33EE3endEv>:
      _GLIBCXX17_CONSTEXPR const_iterator
      begin() const noexcept
      { return const_iterator(data()); }

      _GLIBCXX17_CONSTEXPR iterator
      end() noexcept
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
      { return iterator(data() + _Nm); }
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	f000 f88f 	bl	8001d34 <_ZNSt5arrayIPN8PUTM_CAN11Device_baseELj33EE4dataEv>
 8001c16:	4603      	mov	r3, r0
 8001c18:	3384      	adds	r3, #132	; 0x84
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3708      	adds	r7, #8
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}

08001c22 <_ZN3etl7ivectorI15Error_conditionED1Ev>:
  /// The base class for specifically sized vectors.
  /// Can be used as a reference type for all vectors containing a specific type.
  ///\ingroup vector
  //***************************************************************************
  template <typename T>
  class ivector : public etl::vector_base
 8001c22:	b580      	push	{r7, lr}
 8001c24:	b082      	sub	sp, #8
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7ff fa8c 	bl	800114a <_ZN3etl11vector_baseD1Ev>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4618      	mov	r0, r3
 8001c36:	3708      	adds	r7, #8
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <_ZN3etl6vectorI15Error_conditionLj8EEC1Ev>:
    static const size_t MAX_SIZE = MAX_SIZE_;

    //*************************************************************************
    /// Constructor.
    //*************************************************************************
    vector()
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
      : etl::ivector<T>(reinterpret_cast<T*>(&buffer), MAX_SIZE)
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	330c      	adds	r3, #12
 8001c4a:	2208      	movs	r2, #8
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	f000 f87e 	bl	8001d4e <_ZN3etl7ivectorI15Error_conditionEC1EPS1_j>
    {
      this->initialise();
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4618      	mov	r0, r3
 8001c56:	f000 f890 	bl	8001d7a <_ZN3etl7ivectorI15Error_conditionE10initialiseEv>
    }
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3708      	adds	r7, #8
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}

08001c64 <_ZN3etl6vectorI15Error_conditionLj8EED1Ev>:
#endif

    //*************************************************************************
    /// Destructor.
    //*************************************************************************
    ~vector()
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
    {
      this->clear();
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f000 f897 	bl	8001da2 <_ZN3etl7ivectorI15Error_conditionE5clearEv>
    }
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	4618      	mov	r0, r3
 8001c78:	f7ff ffd3 	bl	8001c22 <_ZN3etl7ivectorI15Error_conditionED1Ev>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3708      	adds	r7, #8
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}

08001c86 <_ZN3etl7ivectorI15Error_conditionE12emplace_backIJRS1_EEEvDpOT_>:
    void emplace_back(Args && ... args)
 8001c86:	b590      	push	{r4, r7, lr}
 8001c88:	b083      	sub	sp, #12
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	6078      	str	r0, [r7, #4]
 8001c8e:	6039      	str	r1, [r7, #0]
      ::new (p_end) T(etl::forward<Args>(args)...);
 8001c90:	6838      	ldr	r0, [r7, #0]
 8001c92:	f000 f891 	bl	8001db8 <_ZN3etl7forwardIR15Error_conditionEEOT_RNS_16remove_referenceIS3_E4typeE>
 8001c96:	4603      	mov	r3, r0
 8001c98:	681c      	ldr	r4, [r3, #0]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	2004      	movs	r0, #4
 8001ca2:	f7ff fa37 	bl	8001114 <_ZnwjPv>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	601c      	str	r4, [r3, #0]
      ++p_end;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	1d1a      	adds	r2, r3, #4
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	609a      	str	r2, [r3, #8]
    }
 8001cb4:	bf00      	nop
 8001cb6:	370c      	adds	r7, #12
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd90      	pop	{r4, r7, pc}

08001cbc <_ZNK3etl7ivectorI15Error_conditionE5emptyEv>:
    bool empty() const
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
      return (p_end == p_buffer);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	689a      	ldr	r2, [r3, #8]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	bf0c      	ite	eq
 8001cd0:	2301      	moveq	r3, #1
 8001cd2:	2300      	movne	r3, #0
 8001cd4:	b2db      	uxtb	r3, r3
    }
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	370c      	adds	r7, #12
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
	...

08001ce4 <_ZN8PUTM_CAN14Can_tx_messageINS_11BMS_LV_mainEE4sendER19__CAN_HandleTypeDef>:
  HAL_StatusTypeDef send(CAN_HandleTypeDef &hcan) {
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	6039      	str	r1, [r7, #0]
    return HAL_CAN_AddTxMessage(&hcan, &this->header, this->buff, &TxMailbox);
 8001cee:	6879      	ldr	r1, [r7, #4]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	f103 0218 	add.w	r2, r3, #24
 8001cf6:	4b04      	ldr	r3, [pc, #16]	; (8001d08 <_ZN8PUTM_CAN14Can_tx_messageINS_11BMS_LV_mainEE4sendER19__CAN_HandleTypeDef+0x24>)
 8001cf8:	6838      	ldr	r0, [r7, #0]
 8001cfa:	f005 faa0 	bl	800723e <HAL_CAN_AddTxMessage>
 8001cfe:	4603      	mov	r3, r0
  }
 8001d00:	4618      	mov	r0, r3
 8001d02:	3708      	adds	r7, #8
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	20001470 	.word	0x20001470

08001d0c <_ZN8PUTM_CAN14Can_tx_messageINS_18BMS_LV_temperatureEE4sendER19__CAN_HandleTypeDef>:
  HAL_StatusTypeDef send(CAN_HandleTypeDef &hcan) {
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
 8001d14:	6039      	str	r1, [r7, #0]
    return HAL_CAN_AddTxMessage(&hcan, &this->header, this->buff, &TxMailbox);
 8001d16:	6879      	ldr	r1, [r7, #4]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	f103 0218 	add.w	r2, r3, #24
 8001d1e:	4b04      	ldr	r3, [pc, #16]	; (8001d30 <_ZN8PUTM_CAN14Can_tx_messageINS_18BMS_LV_temperatureEE4sendER19__CAN_HandleTypeDef+0x24>)
 8001d20:	6838      	ldr	r0, [r7, #0]
 8001d22:	f005 fa8c 	bl	800723e <HAL_CAN_AddTxMessage>
 8001d26:	4603      	mov	r3, r0
  }
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3708      	adds	r7, #8
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	20001474 	.word	0x20001474

08001d34 <_ZNSt5arrayIPN8PUTM_CAN11Device_baseELj33EE4dataEv>:
	return _Nm ? _AT_Type::_S_ref(_M_elems, _Nm - 1)
 	           : _AT_Type::_S_ref(_M_elems, 0);
      }

      _GLIBCXX17_CONSTEXPR pointer
      data() noexcept
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f000 f845 	bl	8001dce <_ZNSt14__array_traitsIPN8PUTM_CAN11Device_baseELj33EE6_S_ptrERA33_KS2_>
 8001d44:	4603      	mov	r3, r0
 8001d46:	4618      	mov	r0, r3
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}

08001d4e <_ZN3etl7ivectorI15Error_conditionEC1EPS1_j>:
    ivector(T* p_buffer_, size_t MAX_SIZE)
 8001d4e:	b580      	push	{r7, lr}
 8001d50:	b084      	sub	sp, #16
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	60f8      	str	r0, [r7, #12]
 8001d56:	60b9      	str	r1, [r7, #8]
 8001d58:	607a      	str	r2, [r7, #4]
      , p_end(p_buffer_)
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	6879      	ldr	r1, [r7, #4]
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f7ff f9e4 	bl	800112c <_ZN3etl11vector_baseC1Ej>
      , p_buffer(p_buffer_)
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	68ba      	ldr	r2, [r7, #8]
 8001d68:	605a      	str	r2, [r3, #4]
      , p_end(p_buffer_)
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	68ba      	ldr	r2, [r7, #8]
 8001d6e:	609a      	str	r2, [r3, #8]
    }
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	4618      	mov	r0, r3
 8001d74:	3710      	adds	r7, #16
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}

08001d7a <_ZN3etl7ivectorI15Error_conditionE10initialiseEv>:
    void initialise()
 8001d7a:	b580      	push	{r7, lr}
 8001d7c:	b082      	sub	sp, #8
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	6078      	str	r0, [r7, #4]
      etl::destroy(p_buffer, p_end);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	685a      	ldr	r2, [r3, #4]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	4610      	mov	r0, r2
 8001d8e:	f000 f829 	bl	8001de4 <_ZN3etl7destroyIP15Error_conditionEEvT_S3_>
      p_end = p_buffer;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	685a      	ldr	r2, [r3, #4]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	609a      	str	r2, [r3, #8]
    }
 8001d9a:	bf00      	nop
 8001d9c:	3708      	adds	r7, #8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <_ZN3etl7ivectorI15Error_conditionE5clearEv>:
    void clear()
 8001da2:	b580      	push	{r7, lr}
 8001da4:	b082      	sub	sp, #8
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	6078      	str	r0, [r7, #4]
      initialise();
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f7ff ffe5 	bl	8001d7a <_ZN3etl7ivectorI15Error_conditionE10initialiseEv>
    }
 8001db0:	bf00      	nop
 8001db2:	3708      	adds	r7, #8
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}

08001db8 <_ZN3etl7forwardIR15Error_conditionEEOT_RNS_16remove_referenceIS3_E4typeE>:
    return static_cast<typename etl::remove_reference<T>::type&&>(t);
  }

  //******************************************************************************
  template <typename T>
  constexpr T&& forward(typename etl::remove_reference<T>::type& t) ETL_NOEXCEPT
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  {
    return static_cast<T&&>(t);
 8001dc0:	687b      	ldr	r3, [r7, #4]
  }
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	370c      	adds	r7, #12
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr

08001dce <_ZNSt14__array_traitsIPN8PUTM_CAN11Device_baseELj33EE6_S_ptrERA33_KS2_>:
      _S_ptr(const _Type& __t) noexcept
 8001dce:	b480      	push	{r7}
 8001dd0:	b083      	sub	sp, #12
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4618      	mov	r0, r3
 8001dda:	370c      	adds	r7, #12
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr

08001de4 <_ZN3etl7destroyIP15Error_conditionEEvT_S3_>:
  /// Destroys a range of items.
  /// https://en.cppreference.com/w/cpp/memory/destroy
  ///\ingroup memory
  //*****************************************************************************
  template <typename TIterator>
  void destroy(TIterator i_begin, TIterator i_end)
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	6039      	str	r1, [r7, #0]
  {
    std::destroy(i_begin, i_end);
 8001dee:	6839      	ldr	r1, [r7, #0]
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	f000 f804 	bl	8001dfe <_ZSt7destroyIP15Error_conditionEvT_S2_>
  }
 8001df6:	bf00      	nop
 8001df8:	3708      	adds	r7, #8
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}

08001dfe <_ZSt7destroyIP15Error_conditionEvT_S2_>:
    }

#if __cplusplus >= 201703L
  template <typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    destroy(_ForwardIterator __first, _ForwardIterator __last)
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	b082      	sub	sp, #8
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	6078      	str	r0, [r7, #4]
 8001e06:	6039      	str	r1, [r7, #0]
    {
      std::_Destroy(__first, __last);
 8001e08:	6839      	ldr	r1, [r7, #0]
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f000 f804 	bl	8001e18 <_ZSt8_DestroyIP15Error_conditionEvT_S2_>
    }
 8001e10:	bf00      	nop
 8001e12:	3708      	adds	r7, #8
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}

08001e18 <_ZSt8_DestroyIP15Error_conditionEvT_S2_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 8001e22:	f7ff f96f 	bl	8001104 <_ZSt21is_constant_evaluatedv>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d004      	beq.n	8001e36 <_ZSt8_DestroyIP15Error_conditionEvT_S2_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 8001e2c:	6839      	ldr	r1, [r7, #0]
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f000 f808 	bl	8001e44 <_ZNSt12_Destroy_auxILb0EE9__destroyIP15Error_conditionEEvT_S4_>
 8001e34:	e003      	b.n	8001e3e <_ZSt8_DestroyIP15Error_conditionEvT_S2_+0x26>
	__destroy(__first, __last);
 8001e36:	6839      	ldr	r1, [r7, #0]
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	f000 f81c 	bl	8001e76 <_ZNSt12_Destroy_auxILb1EE9__destroyIP15Error_conditionEEvT_S4_>
    }
 8001e3e:	3708      	adds	r7, #8
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}

08001e44 <_ZNSt12_Destroy_auxILb0EE9__destroyIP15Error_conditionEEvT_S4_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 8001e4e:	e009      	b.n	8001e64 <_ZNSt12_Destroy_auxILb0EE9__destroyIP15Error_conditionEEvT_S4_+0x20>
	    std::_Destroy(std::__addressof(*__first));
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f000 f81b 	bl	8001e8c <_ZSt11__addressofI15Error_conditionEPT_RS1_>
 8001e56:	4603      	mov	r3, r0
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f000 f822 	bl	8001ea2 <_ZSt8_DestroyI15Error_conditionEvPT_>
	  for (; __first != __last; ++__first)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	3304      	adds	r3, #4
 8001e62:	607b      	str	r3, [r7, #4]
 8001e64:	687a      	ldr	r2, [r7, #4]
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d1f1      	bne.n	8001e50 <_ZNSt12_Destroy_auxILb0EE9__destroyIP15Error_conditionEEvT_S4_+0xc>
	}
 8001e6c:	bf00      	nop
 8001e6e:	bf00      	nop
 8001e70:	3708      	adds	r7, #8
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}

08001e76 <_ZNSt12_Destroy_auxILb1EE9__destroyIP15Error_conditionEEvT_S4_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8001e76:	b480      	push	{r7}
 8001e78:	b083      	sub	sp, #12
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	6078      	str	r0, [r7, #4]
 8001e7e:	6039      	str	r1, [r7, #0]
 8001e80:	bf00      	nop
 8001e82:	370c      	adds	r7, #12
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr

08001e8c <_ZSt11__addressofI15Error_conditionEPT_RS1_>:
   *  @brief Same as C++11 std::addressof
   *  @ingroup utilities
   */
  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR _Tp*
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	4618      	mov	r0, r3
 8001e98:	370c      	adds	r7, #12
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr

08001ea2 <_ZSt8_DestroyI15Error_conditionEvPT_>:
    _Destroy(_Tp* __pointer)
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b082      	sub	sp, #8
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f000 f804 	bl	8001eb8 <_ZSt10destroy_atI15Error_conditionEvPT_>
    }
 8001eb0:	bf00      	nop
 8001eb2:	3708      	adds	r7, #8
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}

08001eb8 <_ZSt10destroy_atI15Error_conditionEvPT_>:
    destroy_at(_Tp* __location)
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
    }
 8001ec0:	bf00      	nop
 8001ec2:	370c      	adds	r7, #12
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr

08001ecc <_Z41__static_initialization_and_destruction_0ii>:
}
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	6039      	str	r1, [r7, #0]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	f040 80c6 	bne.w	800206a <_Z41__static_initialization_and_destruction_0ii+0x19e>
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	f040 80c0 	bne.w	800206a <_Z41__static_initialization_and_destruction_0ii+0x19e>
};
 8001eea:	4b63      	ldr	r3, [pc, #396]	; (8002078 <_Z41__static_initialization_and_destruction_0ii+0x1ac>)
 8001eec:	2207      	movs	r2, #7
 8001eee:	601a      	str	r2, [r3, #0]
 8001ef0:	4a62      	ldr	r2, [pc, #392]	; (800207c <_Z41__static_initialization_and_destruction_0ii+0x1b0>)
 8001ef2:	605a      	str	r2, [r3, #4]
 8001ef4:	4a62      	ldr	r2, [pc, #392]	; (8002080 <_Z41__static_initialization_and_destruction_0ii+0x1b4>)
 8001ef6:	609a      	str	r2, [r3, #8]
		{Error_condition::NEUTRAL_CURRENT_CAR,-0.3,0.3,data.current.value,TIME_TO_SLEEP,8}, //to check //acu_state 0 or 8?
 8001ef8:	4a62      	ldr	r2, [pc, #392]	; (8002084 <_Z41__static_initialization_and_destruction_0ii+0x1b8>)
 8001efa:	f8d2 21c8 	ldr.w	r2, [r2, #456]	; 0x1c8
};
 8001efe:	60da      	str	r2, [r3, #12]
 8001f00:	4a61      	ldr	r2, [pc, #388]	; (8002088 <_Z41__static_initialization_and_destruction_0ii+0x1bc>)
 8001f02:	611a      	str	r2, [r3, #16]
 8001f04:	2208      	movs	r2, #8
 8001f06:	751a      	strb	r2, [r3, #20]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	619a      	str	r2, [r3, #24]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	771a      	strb	r2, [r3, #28]
 8001f10:	3320      	adds	r3, #32
 8001f12:	2200      	movs	r2, #0
 8001f14:	601a      	str	r2, [r3, #0]
 8001f16:	4a5d      	ldr	r2, [pc, #372]	; (800208c <_Z41__static_initialization_and_destruction_0ii+0x1c0>)
 8001f18:	605a      	str	r2, [r3, #4]
 8001f1a:	4a5d      	ldr	r2, [pc, #372]	; (8002090 <_Z41__static_initialization_and_destruction_0ii+0x1c4>)
 8001f1c:	609a      	str	r2, [r3, #8]
		{Error_condition::UNBALANCE,2000,50000,(float)(data.voltages.highest_cell_voltage-data.voltages.lowest_cell_voltage),ERROR_TIME,2},
 8001f1e:	4a59      	ldr	r2, [pc, #356]	; (8002084 <_Z41__static_initialization_and_destruction_0ii+0x1b8>)
 8001f20:	8b92      	ldrh	r2, [r2, #28]
 8001f22:	4611      	mov	r1, r2
 8001f24:	4a57      	ldr	r2, [pc, #348]	; (8002084 <_Z41__static_initialization_and_destruction_0ii+0x1b8>)
 8001f26:	8b52      	ldrh	r2, [r2, #26]
 8001f28:	1a8a      	subs	r2, r1, r2
 8001f2a:	ee07 2a90 	vmov	s15, r2
 8001f2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
};
 8001f32:	edc3 7a03 	vstr	s15, [r3, #12]
 8001f36:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001f3a:	611a      	str	r2, [r3, #16]
 8001f3c:	2202      	movs	r2, #2
 8001f3e:	751a      	strb	r2, [r3, #20]
 8001f40:	2200      	movs	r2, #0
 8001f42:	619a      	str	r2, [r3, #24]
 8001f44:	2200      	movs	r2, #0
 8001f46:	771a      	strb	r2, [r3, #28]
 8001f48:	3320      	adds	r3, #32
 8001f4a:	2203      	movs	r2, #3
 8001f4c:	601a      	str	r2, [r3, #0]
 8001f4e:	4a51      	ldr	r2, [pc, #324]	; (8002094 <_Z41__static_initialization_and_destruction_0ii+0x1c8>)
 8001f50:	605a      	str	r2, [r3, #4]
 8001f52:	4a51      	ldr	r2, [pc, #324]	; (8002098 <_Z41__static_initialization_and_destruction_0ii+0x1cc>)
 8001f54:	609a      	str	r2, [r3, #8]
		{Error_condition::TEMPERATURE_WARNING,48,55,(float)data.temperatures.highest_temperature,ERROR_TIME_TEMPERATURES,3},
 8001f56:	4a4b      	ldr	r2, [pc, #300]	; (8002084 <_Z41__static_initialization_and_destruction_0ii+0x1b8>)
 8001f58:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
 8001f5c:	ee07 2a90 	vmov	s15, r2
 8001f60:	eef8 7a67 	vcvt.f32.u32	s15, s15
};
 8001f64:	edc3 7a03 	vstr	s15, [r3, #12]
 8001f68:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f6c:	611a      	str	r2, [r3, #16]
 8001f6e:	2203      	movs	r2, #3
 8001f70:	751a      	strb	r2, [r3, #20]
 8001f72:	2200      	movs	r2, #0
 8001f74:	619a      	str	r2, [r3, #24]
 8001f76:	2200      	movs	r2, #0
 8001f78:	771a      	strb	r2, [r3, #28]
 8001f7a:	3320      	adds	r3, #32
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	601a      	str	r2, [r3, #0]
 8001f80:	f04f 0200 	mov.w	r2, #0
 8001f84:	605a      	str	r2, [r3, #4]
 8001f86:	4a45      	ldr	r2, [pc, #276]	; (800209c <_Z41__static_initialization_and_destruction_0ii+0x1d0>)
 8001f88:	609a      	str	r2, [r3, #8]
		{Error_condition::VOLTAGE_LOW,0,30000,(float)data.voltages.lowest_cell_voltage,ERROR_TIME,4},
 8001f8a:	4a3e      	ldr	r2, [pc, #248]	; (8002084 <_Z41__static_initialization_and_destruction_0ii+0x1b8>)
 8001f8c:	8b52      	ldrh	r2, [r2, #26]
 8001f8e:	ee07 2a90 	vmov	s15, r2
 8001f92:	eef8 7a67 	vcvt.f32.u32	s15, s15
};
 8001f96:	edc3 7a03 	vstr	s15, [r3, #12]
 8001f9a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001f9e:	611a      	str	r2, [r3, #16]
 8001fa0:	2204      	movs	r2, #4
 8001fa2:	751a      	strb	r2, [r3, #20]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	619a      	str	r2, [r3, #24]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	771a      	strb	r2, [r3, #28]
 8001fac:	3320      	adds	r3, #32
 8001fae:	2202      	movs	r2, #2
 8001fb0:	601a      	str	r2, [r3, #0]
 8001fb2:	4a3b      	ldr	r2, [pc, #236]	; (80020a0 <_Z41__static_initialization_and_destruction_0ii+0x1d4>)
 8001fb4:	605a      	str	r2, [r3, #4]
 8001fb6:	4a3b      	ldr	r2, [pc, #236]	; (80020a4 <_Z41__static_initialization_and_destruction_0ii+0x1d8>)
 8001fb8:	609a      	str	r2, [r3, #8]
		{Error_condition::VOLTAGE_HIGH,42200,500000,(float)data.voltages.highest_cell_voltage,ERROR_TIME,5},
 8001fba:	4a32      	ldr	r2, [pc, #200]	; (8002084 <_Z41__static_initialization_and_destruction_0ii+0x1b8>)
 8001fbc:	8b92      	ldrh	r2, [r2, #28]
 8001fbe:	ee07 2a90 	vmov	s15, r2
 8001fc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
};
 8001fc6:	edc3 7a03 	vstr	s15, [r3, #12]
 8001fca:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001fce:	611a      	str	r2, [r3, #16]
 8001fd0:	2205      	movs	r2, #5
 8001fd2:	751a      	strb	r2, [r3, #20]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	619a      	str	r2, [r3, #24]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	771a      	strb	r2, [r3, #28]
 8001fdc:	3320      	adds	r3, #32
 8001fde:	2204      	movs	r2, #4
 8001fe0:	601a      	str	r2, [r3, #0]
 8001fe2:	4a2d      	ldr	r2, [pc, #180]	; (8002098 <_Z41__static_initialization_and_destruction_0ii+0x1cc>)
 8001fe4:	605a      	str	r2, [r3, #4]
 8001fe6:	4a30      	ldr	r2, [pc, #192]	; (80020a8 <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 8001fe8:	609a      	str	r2, [r3, #8]
		{Error_condition::TEMPERATURE_HIGH,55,120,(float)data.temperatures.highest_temperature,ERROR_TIME_TEMPERATURES,6},
 8001fea:	4a26      	ldr	r2, [pc, #152]	; (8002084 <_Z41__static_initialization_and_destruction_0ii+0x1b8>)
 8001fec:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
 8001ff0:	ee07 2a90 	vmov	s15, r2
 8001ff4:	eef8 7a67 	vcvt.f32.u32	s15, s15
};
 8001ff8:	edc3 7a03 	vstr	s15, [r3, #12]
 8001ffc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002000:	611a      	str	r2, [r3, #16]
 8002002:	2206      	movs	r2, #6
 8002004:	751a      	strb	r2, [r3, #20]
 8002006:	2200      	movs	r2, #0
 8002008:	619a      	str	r2, [r3, #24]
 800200a:	2200      	movs	r2, #0
 800200c:	771a      	strb	r2, [r3, #28]
 800200e:	3320      	adds	r3, #32
 8002010:	2205      	movs	r2, #5
 8002012:	601a      	str	r2, [r3, #0]
 8002014:	4a25      	ldr	r2, [pc, #148]	; (80020ac <_Z41__static_initialization_and_destruction_0ii+0x1e0>)
 8002016:	605a      	str	r2, [r3, #4]
 8002018:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800201c:	609a      	str	r2, [r3, #8]
		{Error_condition::TEMPERATURE_LOST,-1,1,data.temperatures.lowest_temperature,ERROR_TIME_TEMPERATURES,6},
 800201e:	4a19      	ldr	r2, [pc, #100]	; (8002084 <_Z41__static_initialization_and_destruction_0ii+0x1b8>)
 8002020:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
};
 8002024:	ee07 2a90 	vmov	s15, r2
 8002028:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800202c:	edc3 7a03 	vstr	s15, [r3, #12]
 8002030:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002034:	611a      	str	r2, [r3, #16]
 8002036:	2206      	movs	r2, #6
 8002038:	751a      	strb	r2, [r3, #20]
 800203a:	2200      	movs	r2, #0
 800203c:	619a      	str	r2, [r3, #24]
 800203e:	2200      	movs	r2, #0
 8002040:	771a      	strb	r2, [r3, #28]
 8002042:	3320      	adds	r3, #32
 8002044:	2206      	movs	r2, #6
 8002046:	601a      	str	r2, [r3, #0]
 8002048:	4a19      	ldr	r2, [pc, #100]	; (80020b0 <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 800204a:	605a      	str	r2, [r3, #4]
 800204c:	4a19      	ldr	r2, [pc, #100]	; (80020b4 <_Z41__static_initialization_and_destruction_0ii+0x1e8>)
 800204e:	609a      	str	r2, [r3, #8]
		{Error_condition::CURRENT_HIGH,20,100,data.current.value,ERROR_TIME,7}
 8002050:	4a0c      	ldr	r2, [pc, #48]	; (8002084 <_Z41__static_initialization_and_destruction_0ii+0x1b8>)
 8002052:	f8d2 21c8 	ldr.w	r2, [r2, #456]	; 0x1c8
};
 8002056:	60da      	str	r2, [r3, #12]
 8002058:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800205c:	611a      	str	r2, [r3, #16]
 800205e:	2207      	movs	r2, #7
 8002060:	751a      	strb	r2, [r3, #20]
 8002062:	2200      	movs	r2, #0
 8002064:	619a      	str	r2, [r3, #24]
 8002066:	2200      	movs	r2, #0
 8002068:	771a      	strb	r2, [r3, #28]
}
 800206a:	bf00      	nop
 800206c:	370c      	adds	r7, #12
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
 8002076:	bf00      	nop
 8002078:	200005c4 	.word	0x200005c4
 800207c:	be99999a 	.word	0xbe99999a
 8002080:	3e99999a 	.word	0x3e99999a
 8002084:	20001478 	.word	0x20001478
 8002088:	00124f80 	.word	0x00124f80
 800208c:	44fa0000 	.word	0x44fa0000
 8002090:	47435000 	.word	0x47435000
 8002094:	42400000 	.word	0x42400000
 8002098:	425c0000 	.word	0x425c0000
 800209c:	46ea6000 	.word	0x46ea6000
 80020a0:	4724d800 	.word	0x4724d800
 80020a4:	48f42400 	.word	0x48f42400
 80020a8:	42f00000 	.word	0x42f00000
 80020ac:	bf800000 	.word	0xbf800000
 80020b0:	41a00000 	.word	0x41a00000
 80020b4:	42c80000 	.word	0x42c80000

080020b8 <_ZN8PUTM_CAN6DeviceINS_17YawProbe_air_flowEE8set_dataERKNS_14Can_rx_messageE>:
        static_assert(sizeof(Device_data_type) <= 8);
      };

  Device_data_type data{};

  void set_data(const Can_rx_message &m) override {
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	6039      	str	r1, [r7, #0]
    new_data = true;
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	7993      	ldrb	r3, [r2, #6]
 80020c6:	f043 0301 	orr.w	r3, r3, #1
 80020ca:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	1dd8      	adds	r0, r3, #7
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	331c      	adds	r3, #28
 80020d4:	2203      	movs	r2, #3
 80020d6:	4619      	mov	r1, r3
 80020d8:	f012 fb55 	bl	8014786 <memcpy>
  }
 80020dc:	bf00      	nop
 80020de:	3708      	adds	r7, #8
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}

080020e4 <_ZN8PUTM_CAN6DeviceINS_14WheelTemp_mainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	6039      	str	r1, [r7, #0]
    new_data = true;
 80020ee:	687a      	ldr	r2, [r7, #4]
 80020f0:	7993      	ldrb	r3, [r2, #6]
 80020f2:	f043 0301 	orr.w	r3, r3, #1
 80020f6:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	3307      	adds	r3, #7
 80020fc:	683a      	ldr	r2, [r7, #0]
 80020fe:	321c      	adds	r2, #28
 8002100:	8812      	ldrh	r2, [r2, #0]
 8002102:	b292      	uxth	r2, r2
 8002104:	801a      	strh	r2, [r3, #0]
  }
 8002106:	bf00      	nop
 8002108:	370c      	adds	r7, #12
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr

08002112 <_ZN8PUTM_CAN6DeviceINS_14Telemetry_MainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8002112:	b480      	push	{r7}
 8002114:	b083      	sub	sp, #12
 8002116:	af00      	add	r7, sp, #0
 8002118:	6078      	str	r0, [r7, #4]
 800211a:	6039      	str	r1, [r7, #0]
    new_data = true;
 800211c:	687a      	ldr	r2, [r7, #4]
 800211e:	7993      	ldrb	r3, [r2, #6]
 8002120:	f043 0301 	orr.w	r3, r3, #1
 8002124:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	3307      	adds	r3, #7
 800212a:	683a      	ldr	r2, [r7, #0]
 800212c:	321c      	adds	r2, #28
 800212e:	6812      	ldr	r2, [r2, #0]
 8002130:	601a      	str	r2, [r3, #0]
  }
 8002132:	bf00      	nop
 8002134:	370c      	adds	r7, #12
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr

0800213e <_ZN8PUTM_CAN6DeviceINS_11TC_imu_gyroEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 800213e:	b580      	push	{r7, lr}
 8002140:	b082      	sub	sp, #8
 8002142:	af00      	add	r7, sp, #0
 8002144:	6078      	str	r0, [r7, #4]
 8002146:	6039      	str	r1, [r7, #0]
    new_data = true;
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	7993      	ldrb	r3, [r2, #6]
 800214c:	f043 0301 	orr.w	r3, r3, #1
 8002150:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	1dd8      	adds	r0, r3, #7
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	331c      	adds	r3, #28
 800215a:	2206      	movs	r2, #6
 800215c:	4619      	mov	r1, r3
 800215e:	f012 fb12 	bl	8014786 <memcpy>
  }
 8002162:	bf00      	nop
 8002164:	3708      	adds	r7, #8
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}

0800216a <_ZN8PUTM_CAN6DeviceINS_10TC_imu_accEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 800216a:	b580      	push	{r7, lr}
 800216c:	b082      	sub	sp, #8
 800216e:	af00      	add	r7, sp, #0
 8002170:	6078      	str	r0, [r7, #4]
 8002172:	6039      	str	r1, [r7, #0]
    new_data = true;
 8002174:	687a      	ldr	r2, [r7, #4]
 8002176:	7993      	ldrb	r3, [r2, #6]
 8002178:	f043 0301 	orr.w	r3, r3, #1
 800217c:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	1dd8      	adds	r0, r3, #7
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	331c      	adds	r3, #28
 8002186:	2206      	movs	r2, #6
 8002188:	4619      	mov	r1, r3
 800218a:	f012 fafc 	bl	8014786 <memcpy>
  }
 800218e:	bf00      	nop
 8002190:	3708      	adds	r7, #8
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}

08002196 <_ZN8PUTM_CAN6DeviceINS_15TC_temperaturesEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8002196:	b580      	push	{r7, lr}
 8002198:	b082      	sub	sp, #8
 800219a:	af00      	add	r7, sp, #0
 800219c:	6078      	str	r0, [r7, #4]
 800219e:	6039      	str	r1, [r7, #0]
    new_data = true;
 80021a0:	687a      	ldr	r2, [r7, #4]
 80021a2:	7993      	ldrb	r3, [r2, #6]
 80021a4:	f043 0301 	orr.w	r3, r3, #1
 80021a8:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	1dd8      	adds	r0, r3, #7
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	331c      	adds	r3, #28
 80021b2:	2206      	movs	r2, #6
 80021b4:	4619      	mov	r1, r3
 80021b6:	f012 fae6 	bl	8014786 <memcpy>
  }
 80021ba:	bf00      	nop
 80021bc:	3708      	adds	r7, #8
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}

080021c2 <_ZN8PUTM_CAN6DeviceINS_19TC_wheel_velocitiesEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80021c2:	b580      	push	{r7, lr}
 80021c4:	b082      	sub	sp, #8
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	6078      	str	r0, [r7, #4]
 80021ca:	6039      	str	r1, [r7, #0]
    new_data = true;
 80021cc:	687a      	ldr	r2, [r7, #4]
 80021ce:	7993      	ldrb	r3, [r2, #6]
 80021d0:	f043 0301 	orr.w	r3, r3, #1
 80021d4:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	1dd8      	adds	r0, r3, #7
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	331c      	adds	r3, #28
 80021de:	2208      	movs	r2, #8
 80021e0:	4619      	mov	r1, r3
 80021e2:	f012 fad0 	bl	8014786 <memcpy>
  }
 80021e6:	bf00      	nop
 80021e8:	3708      	adds	r7, #8
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}

080021ee <_ZN8PUTM_CAN6DeviceINS_18TC_rear_suspensionEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80021ee:	b480      	push	{r7}
 80021f0:	b083      	sub	sp, #12
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	6078      	str	r0, [r7, #4]
 80021f6:	6039      	str	r1, [r7, #0]
    new_data = true;
 80021f8:	687a      	ldr	r2, [r7, #4]
 80021fa:	7993      	ldrb	r3, [r2, #6]
 80021fc:	f043 0301 	orr.w	r3, r3, #1
 8002200:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	3307      	adds	r3, #7
 8002206:	683a      	ldr	r2, [r7, #0]
 8002208:	321c      	adds	r2, #28
 800220a:	6812      	ldr	r2, [r2, #0]
 800220c:	601a      	str	r2, [r3, #0]
  }
 800220e:	bf00      	nop
 8002210:	370c      	adds	r7, #12
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr

0800221a <_ZN8PUTM_CAN6DeviceINS_7TC_mainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 800221a:	b580      	push	{r7, lr}
 800221c:	b082      	sub	sp, #8
 800221e:	af00      	add	r7, sp, #0
 8002220:	6078      	str	r0, [r7, #4]
 8002222:	6039      	str	r1, [r7, #0]
    new_data = true;
 8002224:	687a      	ldr	r2, [r7, #4]
 8002226:	7993      	ldrb	r3, [r2, #6]
 8002228:	f043 0301 	orr.w	r3, r3, #1
 800222c:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	1dd8      	adds	r0, r3, #7
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	331c      	adds	r3, #28
 8002236:	2208      	movs	r2, #8
 8002238:	4619      	mov	r1, r3
 800223a:	f012 faa4 	bl	8014786 <memcpy>
  }
 800223e:	bf00      	nop
 8002240:	3708      	adds	r7, #8
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}

08002246 <_ZN8PUTM_CAN6DeviceINS_20Steering_Wheel_eventEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8002246:	b580      	push	{r7, lr}
 8002248:	b082      	sub	sp, #8
 800224a:	af00      	add	r7, sp, #0
 800224c:	6078      	str	r0, [r7, #4]
 800224e:	6039      	str	r1, [r7, #0]
    new_data = true;
 8002250:	687a      	ldr	r2, [r7, #4]
 8002252:	7993      	ldrb	r3, [r2, #6]
 8002254:	f043 0301 	orr.w	r3, r3, #1
 8002258:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	1dd8      	adds	r0, r3, #7
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	331c      	adds	r3, #28
 8002262:	2203      	movs	r2, #3
 8002264:	4619      	mov	r1, r3
 8002266:	f012 fa8e 	bl	8014786 <memcpy>
  }
 800226a:	bf00      	nop
 800226c:	3708      	adds	r7, #8
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}

08002272 <_ZN8PUTM_CAN6DeviceINS_19Steering_Wheel_mainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8002272:	b580      	push	{r7, lr}
 8002274:	b082      	sub	sp, #8
 8002276:	af00      	add	r7, sp, #0
 8002278:	6078      	str	r0, [r7, #4]
 800227a:	6039      	str	r1, [r7, #0]
    new_data = true;
 800227c:	687a      	ldr	r2, [r7, #4]
 800227e:	7993      	ldrb	r3, [r2, #6]
 8002280:	f043 0301 	orr.w	r3, r3, #1
 8002284:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	1dd8      	adds	r0, r3, #7
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	331c      	adds	r3, #28
 800228e:	2203      	movs	r2, #3
 8002290:	4619      	mov	r1, r3
 8002292:	f012 fa78 	bl	8014786 <memcpy>
  }
 8002296:	bf00      	nop
 8002298:	3708      	adds	r7, #8
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}

0800229e <_ZN8PUTM_CAN6DeviceINS_7SF_NUCSEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 800229e:	b480      	push	{r7}
 80022a0:	b083      	sub	sp, #12
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	6078      	str	r0, [r7, #4]
 80022a6:	6039      	str	r1, [r7, #0]
    new_data = true;
 80022a8:	687a      	ldr	r2, [r7, #4]
 80022aa:	7993      	ldrb	r3, [r2, #6]
 80022ac:	f043 0301 	orr.w	r3, r3, #1
 80022b0:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	3307      	adds	r3, #7
 80022b6:	683a      	ldr	r2, [r7, #0]
 80022b8:	321c      	adds	r2, #28
 80022ba:	6812      	ldr	r2, [r2, #0]
 80022bc:	601a      	str	r2, [r3, #0]
  }
 80022be:	bf00      	nop
 80022c0:	370c      	adds	r7, #12
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr

080022ca <_ZN8PUTM_CAN6DeviceINS_5SF_WSEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80022ca:	b580      	push	{r7, lr}
 80022cc:	b082      	sub	sp, #8
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	6078      	str	r0, [r7, #4]
 80022d2:	6039      	str	r1, [r7, #0]
    new_data = true;
 80022d4:	687a      	ldr	r2, [r7, #4]
 80022d6:	7993      	ldrb	r3, [r2, #6]
 80022d8:	f043 0301 	orr.w	r3, r3, #1
 80022dc:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	1dd8      	adds	r0, r3, #7
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	331c      	adds	r3, #28
 80022e6:	2208      	movs	r2, #8
 80022e8:	4619      	mov	r1, r3
 80022ea:	f012 fa4c 	bl	8014786 <memcpy>
  }
 80022ee:	bf00      	nop
 80022f0:	3708      	adds	r7, #8
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}

080022f6 <_ZN8PUTM_CAN6DeviceINS_5SF_DVEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80022f6:	b580      	push	{r7, lr}
 80022f8:	b082      	sub	sp, #8
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
 80022fe:	6039      	str	r1, [r7, #0]
    new_data = true;
 8002300:	687a      	ldr	r2, [r7, #4]
 8002302:	7993      	ldrb	r3, [r2, #6]
 8002304:	f043 0301 	orr.w	r3, r3, #1
 8002308:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	1dd8      	adds	r0, r3, #7
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	331c      	adds	r3, #28
 8002312:	2208      	movs	r2, #8
 8002314:	4619      	mov	r1, r3
 8002316:	f012 fa36 	bl	8014786 <memcpy>
  }
 800231a:	bf00      	nop
 800231c:	3708      	adds	r7, #8
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}

08002322 <_ZN8PUTM_CAN6DeviceINS_20SF_CoolingAndVSafetyEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8002322:	b580      	push	{r7, lr}
 8002324:	b082      	sub	sp, #8
 8002326:	af00      	add	r7, sp, #0
 8002328:	6078      	str	r0, [r7, #4]
 800232a:	6039      	str	r1, [r7, #0]
    new_data = true;
 800232c:	687a      	ldr	r2, [r7, #4]
 800232e:	7993      	ldrb	r3, [r2, #6]
 8002330:	f043 0301 	orr.w	r3, r3, #1
 8002334:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	1dd8      	adds	r0, r3, #7
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	331c      	adds	r3, #28
 800233e:	2208      	movs	r2, #8
 8002340:	4619      	mov	r1, r3
 8002342:	f012 fa20 	bl	8014786 <memcpy>
  }
 8002346:	bf00      	nop
 8002348:	3708      	adds	r7, #8
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}

0800234e <_ZN8PUTM_CAN6DeviceINS_11SF_FrontBoxEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 800234e:	b580      	push	{r7, lr}
 8002350:	b082      	sub	sp, #8
 8002352:	af00      	add	r7, sp, #0
 8002354:	6078      	str	r0, [r7, #4]
 8002356:	6039      	str	r1, [r7, #0]
    new_data = true;
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	7993      	ldrb	r3, [r2, #6]
 800235c:	f043 0301 	orr.w	r3, r3, #1
 8002360:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	1dd8      	adds	r0, r3, #7
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	331c      	adds	r3, #28
 800236a:	2208      	movs	r2, #8
 800236c:	4619      	mov	r1, r3
 800236e:	f012 fa0a 	bl	8014786 <memcpy>
  }
 8002372:	bf00      	nop
 8002374:	3708      	adds	r7, #8
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}

0800237a <_ZN8PUTM_CAN6DeviceINS_7SF_mainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 800237a:	b580      	push	{r7, lr}
 800237c:	b082      	sub	sp, #8
 800237e:	af00      	add	r7, sp, #0
 8002380:	6078      	str	r0, [r7, #4]
 8002382:	6039      	str	r1, [r7, #0]
    new_data = true;
 8002384:	687a      	ldr	r2, [r7, #4]
 8002386:	7993      	ldrb	r3, [r2, #6]
 8002388:	f043 0301 	orr.w	r3, r3, #1
 800238c:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	1dd8      	adds	r0, r3, #7
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	331c      	adds	r3, #28
 8002396:	2203      	movs	r2, #3
 8002398:	4619      	mov	r1, r3
 800239a:	f012 f9f4 	bl	8014786 <memcpy>
  }
 800239e:	bf00      	nop
 80023a0:	3708      	adds	r7, #8
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}

080023a6 <_ZN8PUTM_CAN6DeviceINS_9SF_safetyEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80023a6:	b580      	push	{r7, lr}
 80023a8:	b082      	sub	sp, #8
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	6078      	str	r0, [r7, #4]
 80023ae:	6039      	str	r1, [r7, #0]
    new_data = true;
 80023b0:	687a      	ldr	r2, [r7, #4]
 80023b2:	7993      	ldrb	r3, [r2, #6]
 80023b4:	f043 0301 	orr.w	r3, r3, #1
 80023b8:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	1dd8      	adds	r0, r3, #7
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	331c      	adds	r3, #28
 80023c2:	2205      	movs	r2, #5
 80023c4:	4619      	mov	r1, r3
 80023c6:	f012 f9de 	bl	8014786 <memcpy>
  }
 80023ca:	bf00      	nop
 80023cc:	3708      	adds	r7, #8
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}

080023d2 <_ZN8PUTM_CAN6DeviceINS_14Lap_timer_PassEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80023d2:	b480      	push	{r7}
 80023d4:	b083      	sub	sp, #12
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	6078      	str	r0, [r7, #4]
 80023da:	6039      	str	r1, [r7, #0]
    new_data = true;
 80023dc:	687a      	ldr	r2, [r7, #4]
 80023de:	7993      	ldrb	r3, [r2, #6]
 80023e0:	f043 0301 	orr.w	r3, r3, #1
 80023e4:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	3307      	adds	r3, #7
 80023ea:	683a      	ldr	r2, [r7, #0]
 80023ec:	321c      	adds	r2, #28
 80023ee:	8812      	ldrh	r2, [r2, #0]
 80023f0:	b292      	uxth	r2, r2
 80023f2:	801a      	strh	r2, [r3, #0]
  }
 80023f4:	bf00      	nop
 80023f6:	370c      	adds	r7, #12
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr

08002400 <_ZN8PUTM_CAN6DeviceINS_14Lap_timer_MainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	6039      	str	r1, [r7, #0]
    new_data = true;
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	7993      	ldrb	r3, [r2, #6]
 800240e:	f043 0301 	orr.w	r3, r3, #1
 8002412:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	3307      	adds	r3, #7
 8002418:	683a      	ldr	r2, [r7, #0]
 800241a:	321c      	adds	r2, #28
 800241c:	7812      	ldrb	r2, [r2, #0]
 800241e:	701a      	strb	r2, [r3, #0]
  }
 8002420:	bf00      	nop
 8002422:	370c      	adds	r7, #12
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr

0800242c <_ZN8PUTM_CAN6DeviceINS_17Dash_lap_finishedEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	6039      	str	r1, [r7, #0]
    new_data = true;
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	7993      	ldrb	r3, [r2, #6]
 800243a:	f043 0301 	orr.w	r3, r3, #1
 800243e:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	3307      	adds	r3, #7
 8002444:	683a      	ldr	r2, [r7, #0]
 8002446:	321c      	adds	r2, #28
 8002448:	6812      	ldr	r2, [r2, #0]
 800244a:	601a      	str	r2, [r3, #0]
  }
 800244c:	bf00      	nop
 800244e:	370c      	adds	r7, #12
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr

08002458 <_ZN8PUTM_CAN6DeviceINS_27Dash_steering_wheel_requestEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
 8002460:	6039      	str	r1, [r7, #0]
    new_data = true;
 8002462:	687a      	ldr	r2, [r7, #4]
 8002464:	7993      	ldrb	r3, [r2, #6]
 8002466:	f043 0301 	orr.w	r3, r3, #1
 800246a:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	3307      	adds	r3, #7
 8002470:	683a      	ldr	r2, [r7, #0]
 8002472:	321c      	adds	r2, #28
 8002474:	7812      	ldrb	r2, [r2, #0]
 8002476:	701a      	strb	r2, [r3, #0]
  }
 8002478:	bf00      	nop
 800247a:	370c      	adds	r7, #12
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr

08002484 <_ZN8PUTM_CAN6DeviceINS_26Dash_Smart_Fuses_FAN_speedEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	6039      	str	r1, [r7, #0]
    new_data = true;
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	7993      	ldrb	r3, [r2, #6]
 8002492:	f043 0301 	orr.w	r3, r3, #1
 8002496:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	3307      	adds	r3, #7
 800249c:	683a      	ldr	r2, [r7, #0]
 800249e:	321c      	adds	r2, #28
 80024a0:	8812      	ldrh	r2, [r2, #0]
 80024a2:	b292      	uxth	r2, r2
 80024a4:	801a      	strh	r2, [r3, #0]
  }
 80024a6:	bf00      	nop
 80024a8:	370c      	adds	r7, #12
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr

080024b2 <_ZN8PUTM_CAN6DeviceINS_8Dash_TCSEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80024b2:	b580      	push	{r7, lr}
 80024b4:	b082      	sub	sp, #8
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	6078      	str	r0, [r7, #4]
 80024ba:	6039      	str	r1, [r7, #0]
    new_data = true;
 80024bc:	687a      	ldr	r2, [r7, #4]
 80024be:	7993      	ldrb	r3, [r2, #6]
 80024c0:	f043 0301 	orr.w	r3, r3, #1
 80024c4:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	1dd8      	adds	r0, r3, #7
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	331c      	adds	r3, #28
 80024ce:	2208      	movs	r2, #8
 80024d0:	4619      	mov	r1, r3
 80024d2:	f012 f958 	bl	8014786 <memcpy>
  }
 80024d6:	bf00      	nop
 80024d8:	3708      	adds	r7, #8
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}

080024de <_ZN8PUTM_CAN6DeviceINS_9Dash_MainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80024de:	b480      	push	{r7}
 80024e0:	b083      	sub	sp, #12
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
 80024e6:	6039      	str	r1, [r7, #0]
    new_data = true;
 80024e8:	687a      	ldr	r2, [r7, #4]
 80024ea:	7993      	ldrb	r3, [r2, #6]
 80024ec:	f043 0301 	orr.w	r3, r3, #1
 80024f0:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	3307      	adds	r3, #7
 80024f6:	683a      	ldr	r2, [r7, #0]
 80024f8:	321c      	adds	r2, #28
 80024fa:	7812      	ldrb	r2, [r2, #0]
 80024fc:	701a      	strb	r2, [r3, #0]
  }
 80024fe:	bf00      	nop
 8002500:	370c      	adds	r7, #12
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr

0800250a <_ZN8PUTM_CAN6DeviceINS_18BMS_LV_temperatureEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 800250a:	b580      	push	{r7, lr}
 800250c:	b082      	sub	sp, #8
 800250e:	af00      	add	r7, sp, #0
 8002510:	6078      	str	r0, [r7, #4]
 8002512:	6039      	str	r1, [r7, #0]
    new_data = true;
 8002514:	687a      	ldr	r2, [r7, #4]
 8002516:	7993      	ldrb	r3, [r2, #6]
 8002518:	f043 0301 	orr.w	r3, r3, #1
 800251c:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	1dd8      	adds	r0, r3, #7
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	331c      	adds	r3, #28
 8002526:	2208      	movs	r2, #8
 8002528:	4619      	mov	r1, r3
 800252a:	f012 f92c 	bl	8014786 <memcpy>
  }
 800252e:	bf00      	nop
 8002530:	3708      	adds	r7, #8
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}

08002536 <_ZN8PUTM_CAN6DeviceINS_11BMS_LV_mainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8002536:	b580      	push	{r7, lr}
 8002538:	b082      	sub	sp, #8
 800253a:	af00      	add	r7, sp, #0
 800253c:	6078      	str	r0, [r7, #4]
 800253e:	6039      	str	r1, [r7, #0]
    new_data = true;
 8002540:	687a      	ldr	r2, [r7, #4]
 8002542:	7993      	ldrb	r3, [r2, #6]
 8002544:	f043 0301 	orr.w	r3, r3, #1
 8002548:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	1dd8      	adds	r0, r3, #7
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	331c      	adds	r3, #28
 8002552:	2206      	movs	r2, #6
 8002554:	4619      	mov	r1, r3
 8002556:	f012 f916 	bl	8014786 <memcpy>
  }
 800255a:	bf00      	nop
 800255c:	3708      	adds	r7, #8
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}

08002562 <_ZN8PUTM_CAN6DeviceINS_11BMS_HV_mainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8002562:	b580      	push	{r7, lr}
 8002564:	b082      	sub	sp, #8
 8002566:	af00      	add	r7, sp, #0
 8002568:	6078      	str	r0, [r7, #4]
 800256a:	6039      	str	r1, [r7, #0]
    new_data = true;
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	7993      	ldrb	r3, [r2, #6]
 8002570:	f043 0301 	orr.w	r3, r3, #1
 8002574:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	1dd8      	adds	r0, r3, #7
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	331c      	adds	r3, #28
 800257e:	2208      	movs	r2, #8
 8002580:	4619      	mov	r1, r3
 8002582:	f012 f900 	bl	8014786 <memcpy>
  }
 8002586:	bf00      	nop
 8002588:	3708      	adds	r7, #8
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}

0800258e <_ZN8PUTM_CAN6DeviceINS_12AQ_ts_buttonEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 800258e:	b480      	push	{r7}
 8002590:	b083      	sub	sp, #12
 8002592:	af00      	add	r7, sp, #0
 8002594:	6078      	str	r0, [r7, #4]
 8002596:	6039      	str	r1, [r7, #0]
    new_data = true;
 8002598:	687a      	ldr	r2, [r7, #4]
 800259a:	7993      	ldrb	r3, [r2, #6]
 800259c:	f043 0301 	orr.w	r3, r3, #1
 80025a0:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	3307      	adds	r3, #7
 80025a6:	683a      	ldr	r2, [r7, #0]
 80025a8:	321c      	adds	r2, #28
 80025aa:	7812      	ldrb	r2, [r2, #0]
 80025ac:	701a      	strb	r2, [r3, #0]
  }
 80025ae:	bf00      	nop
 80025b0:	370c      	adds	r7, #12
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr

080025ba <_ZN8PUTM_CAN6DeviceINS_12AQ_gyroscopeEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80025ba:	b580      	push	{r7, lr}
 80025bc:	b082      	sub	sp, #8
 80025be:	af00      	add	r7, sp, #0
 80025c0:	6078      	str	r0, [r7, #4]
 80025c2:	6039      	str	r1, [r7, #0]
    new_data = true;
 80025c4:	687a      	ldr	r2, [r7, #4]
 80025c6:	7993      	ldrb	r3, [r2, #6]
 80025c8:	f043 0301 	orr.w	r3, r3, #1
 80025cc:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	1dd8      	adds	r0, r3, #7
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	331c      	adds	r3, #28
 80025d6:	2206      	movs	r2, #6
 80025d8:	4619      	mov	r1, r3
 80025da:	f012 f8d4 	bl	8014786 <memcpy>
  }
 80025de:	bf00      	nop
 80025e0:	3708      	adds	r7, #8
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}

080025e6 <_ZN8PUTM_CAN6DeviceINS_15AQ_accelerationEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 80025e6:	b580      	push	{r7, lr}
 80025e8:	b082      	sub	sp, #8
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	6078      	str	r0, [r7, #4]
 80025ee:	6039      	str	r1, [r7, #0]
    new_data = true;
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	7993      	ldrb	r3, [r2, #6]
 80025f4:	f043 0301 	orr.w	r3, r3, #1
 80025f8:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	1dd8      	adds	r0, r3, #7
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	331c      	adds	r3, #28
 8002602:	2206      	movs	r2, #6
 8002604:	4619      	mov	r1, r3
 8002606:	f012 f8be 	bl	8014786 <memcpy>
  }
 800260a:	bf00      	nop
 800260c:	3708      	adds	r7, #8
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}

08002612 <_ZN8PUTM_CAN6DeviceINS_7AQ_mainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 8002612:	b580      	push	{r7, lr}
 8002614:	b082      	sub	sp, #8
 8002616:	af00      	add	r7, sp, #0
 8002618:	6078      	str	r0, [r7, #4]
 800261a:	6039      	str	r1, [r7, #0]
    new_data = true;
 800261c:	687a      	ldr	r2, [r7, #4]
 800261e:	7993      	ldrb	r3, [r2, #6]
 8002620:	f043 0301 	orr.w	r3, r3, #1
 8002624:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	1dd8      	adds	r0, r3, #7
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	331c      	adds	r3, #28
 800262e:	2208      	movs	r2, #8
 8002630:	4619      	mov	r1, r3
 8002632:	f012 f8a8 	bl	8014786 <memcpy>
  }
 8002636:	bf00      	nop
 8002638:	3708      	adds	r7, #8
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}

0800263e <_ZN8PUTM_CAN6DeviceINS_9Apps_mainEE8set_dataERKNS_14Can_rx_messageE>:
  void set_data(const Can_rx_message &m) override {
 800263e:	b580      	push	{r7, lr}
 8002640:	b082      	sub	sp, #8
 8002642:	af00      	add	r7, sp, #0
 8002644:	6078      	str	r0, [r7, #4]
 8002646:	6039      	str	r1, [r7, #0]
    new_data = true;
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	7993      	ldrb	r3, [r2, #6]
 800264c:	f043 0301 	orr.w	r3, r3, #1
 8002650:	7193      	strb	r3, [r2, #6]
    std::memcpy(&data, m.data, sizeof(Device_data_type));
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	1dd8      	adds	r0, r3, #7
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	331c      	adds	r3, #28
 800265a:	2205      	movs	r2, #5
 800265c:	4619      	mov	r1, r3
 800265e:	f012 f892 	bl	8014786 <memcpy>
  }
 8002662:	bf00      	nop
 8002664:	3708      	adds	r7, #8
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}

0800266a <_GLOBAL__sub_I__ZN8PUTM_CAN3canE>:
 800266a:	b580      	push	{r7, lr}
 800266c:	af00      	add	r7, sp, #0
 800266e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002672:	2001      	movs	r0, #1
 8002674:	f7ff fc2a 	bl	8001ecc <_Z41__static_initialization_and_destruction_0ii>
 8002678:	bd80      	pop	{r7, pc}

0800267a <_ZN22Battery_characteristicC1Ev>:
    Vttc2
};

float horner(const float *arry,unsigned int n, const float *x);

struct Battery_characteristic{
 800267a:	b480      	push	{r7}
 800267c:	b083      	sub	sp, #12
 800267e:	af00      	add	r7, sp, #0
 8002680:	6078      	str	r0, [r7, #4]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2201      	movs	r2, #1
 8002686:	601a      	str	r2, [r3, #0]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2201      	movs	r2, #1
 800268c:	605a      	str	r2, [r3, #4]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4618      	mov	r0, r3
 8002692:	370c      	adds	r7, #12
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr

0800269c <_ZN7SoC_EKFC1Ev>:
    float _Q_matrix[3];
    float _State_vector[3];
    

public:
    SoC_EKF() = default;
 800269c:	b580      	push	{r7, lr}
 800269e:	b082      	sub	sp, #8
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	4618      	mov	r0, r3
 80026a8:	f7ff ffe7 	bl	800267a <_ZN22Battery_characteristicC1Ev>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	4618      	mov	r0, r3
 80026b0:	3708      	adds	r7, #8
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}

080026b6 <_ZN15State_of_ChargeC1Ev>:
	float value_max;
	float value_min;

};

struct State_of_Charge{
 80026b6:	b580      	push	{r7, lr}
 80026b8:	b082      	sub	sp, #8
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	6078      	str	r0, [r7, #4]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	4618      	mov	r0, r3
 80026c2:	f7ff ffeb 	bl	800269c <_ZN7SoC_EKFC1Ev>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	4618      	mov	r0, r3
 80026ca:	3708      	adds	r7, #8
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}

080026d0 <_ZN4DataC1Ev>:
	bool discharge_activation;
	bool balance_on;
	uint32_t discharge_tick_end;
};

struct Data{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	f503 73ea 	add.w	r3, r3, #468	; 0x1d4
 80026de:	4618      	mov	r0, r3
 80026e0:	f7ff ffe9 	bl	80026b6 <_ZN15State_of_ChargeC1Ev>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	4618      	mov	r0, r3
 80026e8:	3708      	adds	r7, #8
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
	...

080026f0 <_Z41__static_initialization_and_destruction_0ii>:
 *  Created on: May 22, 2022
 *      Author: Maks
 */
#include <global_variables.hpp>

Data data;
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	6039      	str	r1, [r7, #0]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d107      	bne.n	8002710 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002706:	4293      	cmp	r3, r2
 8002708:	d102      	bne.n	8002710 <_Z41__static_initialization_and_destruction_0ii+0x20>
 800270a:	4803      	ldr	r0, [pc, #12]	; (8002718 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 800270c:	f7ff ffe0 	bl	80026d0 <_ZN4DataC1Ev>
 8002710:	bf00      	nop
 8002712:	3708      	adds	r7, #8
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}
 8002718:	20001478 	.word	0x20001478

0800271c <_GLOBAL__sub_I_data>:
 800271c:	b580      	push	{r7, lr}
 800271e:	af00      	add	r7, sp, #0
 8002720:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002724:	2001      	movs	r0, #1
 8002726:	f7ff ffe3 	bl	80026f0 <_Z41__static_initialization_and_destruction_0ii>
 800272a:	bd80      	pop	{r7, pc}

0800272c <_Z16init_PEC15_Tablev>:
uint16_t pec15Table[256];
uint16_t CRC15_POLY = 0x4599;
uint8_t ltcConfig[6] = {0xFC, (uint8_t)(1874 & 0xff), (uint8_t)((1874>>4)|(2625<<4)), (uint8_t)(2625>>4), 0, 0};

void init_PEC15_Table()
{
 800272c:	b480      	push	{r7}
 800272e:	b085      	sub	sp, #20
 8002730:	af00      	add	r7, sp, #0
	uint16_t remainder;
	for (int i = 0; i < 256; i++)
 8002732:	2300      	movs	r3, #0
 8002734:	60bb      	str	r3, [r7, #8]
 8002736:	e025      	b.n	8002784 <_Z16init_PEC15_Tablev+0x58>
	{
		remainder = i << 7;
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	b29b      	uxth	r3, r3
 800273c:	01db      	lsls	r3, r3, #7
 800273e:	81fb      	strh	r3, [r7, #14]
		for (int bit = 8; bit > 0; --bit)
 8002740:	2308      	movs	r3, #8
 8002742:	607b      	str	r3, [r7, #4]
 8002744:	e013      	b.n	800276e <_Z16init_PEC15_Tablev+0x42>
		{
			if (remainder & 0x4000)
 8002746:	89fb      	ldrh	r3, [r7, #14]
 8002748:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800274c:	2b00      	cmp	r3, #0
 800274e:	d008      	beq.n	8002762 <_Z16init_PEC15_Tablev+0x36>
			{
				remainder = ((remainder << 1));
 8002750:	89fb      	ldrh	r3, [r7, #14]
 8002752:	005b      	lsls	r3, r3, #1
 8002754:	81fb      	strh	r3, [r7, #14]
				remainder = (remainder ^ CRC15_POLY);
 8002756:	4b10      	ldr	r3, [pc, #64]	; (8002798 <_Z16init_PEC15_Tablev+0x6c>)
 8002758:	881a      	ldrh	r2, [r3, #0]
 800275a:	89fb      	ldrh	r3, [r7, #14]
 800275c:	4053      	eors	r3, r2
 800275e:	81fb      	strh	r3, [r7, #14]
 8002760:	e002      	b.n	8002768 <_Z16init_PEC15_Tablev+0x3c>
			}
			else
			{
				remainder = ((remainder << 1));
 8002762:	89fb      	ldrh	r3, [r7, #14]
 8002764:	005b      	lsls	r3, r3, #1
 8002766:	81fb      	strh	r3, [r7, #14]
		for (int bit = 8; bit > 0; --bit)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	3b01      	subs	r3, #1
 800276c:	607b      	str	r3, [r7, #4]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2b00      	cmp	r3, #0
 8002772:	dce8      	bgt.n	8002746 <_Z16init_PEC15_Tablev+0x1a>
			}
		}
		pec15Table[i] = remainder&0xFFFF;
 8002774:	4909      	ldr	r1, [pc, #36]	; (800279c <_Z16init_PEC15_Tablev+0x70>)
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	89fa      	ldrh	r2, [r7, #14]
 800277a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for (int i = 0; i < 256; i++)
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	3301      	adds	r3, #1
 8002782:	60bb      	str	r3, [r7, #8]
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	2bff      	cmp	r3, #255	; 0xff
 8002788:	ddd6      	ble.n	8002738 <_Z16init_PEC15_Tablev+0xc>
	}
}
 800278a:	bf00      	nop
 800278c:	bf00      	nop
 800278e:	3714      	adds	r7, #20
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr
 8002798:	20000210 	.word	0x20000210
 800279c:	2000171c 	.word	0x2000171c

080027a0 <_Z5pec15Pci>:

uint16_t pec15(char *data , int len)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b087      	sub	sp, #28
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	6039      	str	r1, [r7, #0]
	uint16_t remainder,address;
	remainder = 16;//PEC seed
 80027aa:	2310      	movs	r3, #16
 80027ac:	82fb      	strh	r3, [r7, #22]
	for (int i = 0; i < len; i++)
 80027ae:	2300      	movs	r3, #0
 80027b0:	613b      	str	r3, [r7, #16]
 80027b2:	e019      	b.n	80027e8 <_Z5pec15Pci+0x48>
	{
		address = ((remainder >> 7) ^ data[i]) & 0xff;//calculate PEC table address
 80027b4:	8afb      	ldrh	r3, [r7, #22]
 80027b6:	09db      	lsrs	r3, r3, #7
 80027b8:	b29a      	uxth	r2, r3
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	6879      	ldr	r1, [r7, #4]
 80027be:	440b      	add	r3, r1
 80027c0:	781b      	ldrb	r3, [r3, #0]
 80027c2:	b29b      	uxth	r3, r3
 80027c4:	4053      	eors	r3, r2
 80027c6:	b29b      	uxth	r3, r3
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	81fb      	strh	r3, [r7, #14]
		remainder = (remainder << 8 ) ^ pec15Table[address];
 80027cc:	8afb      	ldrh	r3, [r7, #22]
 80027ce:	021b      	lsls	r3, r3, #8
 80027d0:	b21a      	sxth	r2, r3
 80027d2:	89fb      	ldrh	r3, [r7, #14]
 80027d4:	490b      	ldr	r1, [pc, #44]	; (8002804 <_Z5pec15Pci+0x64>)
 80027d6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80027da:	b21b      	sxth	r3, r3
 80027dc:	4053      	eors	r3, r2
 80027de:	b21b      	sxth	r3, r3
 80027e0:	82fb      	strh	r3, [r7, #22]
	for (int i = 0; i < len; i++)
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	3301      	adds	r3, #1
 80027e6:	613b      	str	r3, [r7, #16]
 80027e8:	693a      	ldr	r2, [r7, #16]
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	429a      	cmp	r2, r3
 80027ee:	dbe1      	blt.n	80027b4 <_Z5pec15Pci+0x14>
	}
	return (remainder*2);//The CRC15 has a 0 in the LSB so the final value must be multiplied by 2
 80027f0:	8afb      	ldrh	r3, [r7, #22]
 80027f2:	005b      	lsls	r3, r3, #1
 80027f4:	b29b      	uxth	r3, r3
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	371c      	adds	r7, #28
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr
 8002802:	bf00      	nop
 8002804:	2000171c 	.word	0x2000171c

08002808 <_Z11LTC_wake_upv>:
 * Brief:	Send wakeup for LTC, BLOCKING MODE
 * Param:	None
 * Retval:	None
 */
void LTC_wake_up()
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0
	uint8_t tab[2] = {0xFF};
 800280e:	23ff      	movs	r3, #255	; 0xff
 8002810:	80bb      	strh	r3, [r7, #4]

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8002812:	2200      	movs	r2, #0
 8002814:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002818:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800281c:	f005 fe44 	bl	80084a8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, tab, 2, 1);
 8002820:	1d39      	adds	r1, r7, #4
 8002822:	2301      	movs	r3, #1
 8002824:	2202      	movs	r2, #2
 8002826:	4807      	ldr	r0, [pc, #28]	; (8002844 <_Z11LTC_wake_upv+0x3c>)
 8002828:	f009 f9dd 	bl	800bbe6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 800282c:	2201      	movs	r2, #1
 800282e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002832:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002836:	f005 fe37 	bl	80084a8 <HAL_GPIO_WritePin>
}
 800283a:	bf00      	nop
 800283c:	3708      	adds	r7, #8
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	20001b08 	.word	0x20001b08

08002848 <_Z18LTC_start_cell_adcv>:
 * Brief:	Send adc config for ltc and start conversion, BLOCKING MODE
 * Param:	None
 * Retval:	None
 */
void LTC_start_cell_adc()
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b084      	sub	sp, #16
 800284c:	af00      	add	r7, sp, #0
	uint8_t tab[12];
	uint16_t pec;

	uint16_t cmd = (1<<15) | 0x01;
 800284e:	f248 0301 	movw	r3, #32769	; 0x8001
 8002852:	81fb      	strh	r3, [r7, #14]
	// configuration
	tab[0] = (cmd>>8);
 8002854:	89fb      	ldrh	r3, [r7, #14]
 8002856:	0a1b      	lsrs	r3, r3, #8
 8002858:	b29b      	uxth	r3, r3
 800285a:	b2db      	uxtb	r3, r3
 800285c:	703b      	strb	r3, [r7, #0]
	tab[1] = cmd;
 800285e:	89fb      	ldrh	r3, [r7, #14]
 8002860:	b2db      	uxtb	r3, r3
 8002862:	707b      	strb	r3, [r7, #1]
	pec = pec15((char*)tab, 2);
 8002864:	463b      	mov	r3, r7
 8002866:	2102      	movs	r1, #2
 8002868:	4618      	mov	r0, r3
 800286a:	f7ff ff99 	bl	80027a0 <_Z5pec15Pci>
 800286e:	4603      	mov	r3, r0
 8002870:	81bb      	strh	r3, [r7, #12]
	tab[2] = pec >> 8;
 8002872:	89bb      	ldrh	r3, [r7, #12]
 8002874:	0a1b      	lsrs	r3, r3, #8
 8002876:	b29b      	uxth	r3, r3
 8002878:	b2db      	uxtb	r3, r3
 800287a:	70bb      	strb	r3, [r7, #2]
	tab[3] = pec;
 800287c:	89bb      	ldrh	r3, [r7, #12]
 800287e:	b2db      	uxtb	r3, r3
 8002880:	70fb      	strb	r3, [r7, #3]

	tab[4] = ltcConfig[0];
 8002882:	4b38      	ldr	r3, [pc, #224]	; (8002964 <_Z18LTC_start_cell_adcv+0x11c>)
 8002884:	781b      	ldrb	r3, [r3, #0]
 8002886:	713b      	strb	r3, [r7, #4]
	tab[5] = ltcConfig[1];
 8002888:	4b36      	ldr	r3, [pc, #216]	; (8002964 <_Z18LTC_start_cell_adcv+0x11c>)
 800288a:	785b      	ldrb	r3, [r3, #1]
 800288c:	717b      	strb	r3, [r7, #5]
	tab[6] = ltcConfig[2];
 800288e:	4b35      	ldr	r3, [pc, #212]	; (8002964 <_Z18LTC_start_cell_adcv+0x11c>)
 8002890:	789b      	ldrb	r3, [r3, #2]
 8002892:	71bb      	strb	r3, [r7, #6]
	tab[7] = ltcConfig[3];
 8002894:	4b33      	ldr	r3, [pc, #204]	; (8002964 <_Z18LTC_start_cell_adcv+0x11c>)
 8002896:	78db      	ldrb	r3, [r3, #3]
 8002898:	71fb      	strb	r3, [r7, #7]
	tab[8] = ltcConfig[4];
 800289a:	4b32      	ldr	r3, [pc, #200]	; (8002964 <_Z18LTC_start_cell_adcv+0x11c>)
 800289c:	791b      	ldrb	r3, [r3, #4]
 800289e:	723b      	strb	r3, [r7, #8]
	tab[9] = ltcConfig[5];
 80028a0:	4b30      	ldr	r3, [pc, #192]	; (8002964 <_Z18LTC_start_cell_adcv+0x11c>)
 80028a2:	795b      	ldrb	r3, [r3, #5]
 80028a4:	727b      	strb	r3, [r7, #9]
	pec = pec15((char*)&tab[4], 6);
 80028a6:	463b      	mov	r3, r7
 80028a8:	3304      	adds	r3, #4
 80028aa:	2106      	movs	r1, #6
 80028ac:	4618      	mov	r0, r3
 80028ae:	f7ff ff77 	bl	80027a0 <_Z5pec15Pci>
 80028b2:	4603      	mov	r3, r0
 80028b4:	81bb      	strh	r3, [r7, #12]
	tab[10] = pec >> 8;
 80028b6:	89bb      	ldrh	r3, [r7, #12]
 80028b8:	0a1b      	lsrs	r3, r3, #8
 80028ba:	b29b      	uxth	r3, r3
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	72bb      	strb	r3, [r7, #10]
	tab[11] = pec;
 80028c0:	89bb      	ldrh	r3, [r7, #12]
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	72fb      	strb	r3, [r7, #11]

	LTC_wake_up();
 80028c6:	f7ff ff9f 	bl	8002808 <_Z11LTC_wake_upv>

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80028ca:	2200      	movs	r2, #0
 80028cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80028d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028d4:	f005 fde8 	bl	80084a8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, tab, 12, 20);
 80028d8:	4639      	mov	r1, r7
 80028da:	2314      	movs	r3, #20
 80028dc:	220c      	movs	r2, #12
 80028de:	4822      	ldr	r0, [pc, #136]	; (8002968 <_Z18LTC_start_cell_adcv+0x120>)
 80028e0:	f009 f981 	bl	800bbe6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 80028e4:	2201      	movs	r2, #1
 80028e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80028ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028ee:	f005 fddb 	bl	80084a8 <HAL_GPIO_WritePin>


	// adc conversion

	memset(tab, 0, 12);
 80028f2:	463b      	mov	r3, r7
 80028f4:	220c      	movs	r2, #12
 80028f6:	2100      	movs	r1, #0
 80028f8:	4618      	mov	r0, r3
 80028fa:	f011 fe6e 	bl	80145da <memset>

	//cmd = 0b1001100000 | (0b00 << 7); // discharge not permitted
	cmd = 0b1001110000 | (0b00 << 7); // discharge permitted
 80028fe:	f44f 731c 	mov.w	r3, #624	; 0x270
 8002902:	81fb      	strh	r3, [r7, #14]
	tab[0] = cmd>>8;
 8002904:	89fb      	ldrh	r3, [r7, #14]
 8002906:	0a1b      	lsrs	r3, r3, #8
 8002908:	b29b      	uxth	r3, r3
 800290a:	b2db      	uxtb	r3, r3
 800290c:	703b      	strb	r3, [r7, #0]
	tab[1] = cmd;
 800290e:	89fb      	ldrh	r3, [r7, #14]
 8002910:	b2db      	uxtb	r3, r3
 8002912:	707b      	strb	r3, [r7, #1]
	pec = pec15((char*)tab, 2);
 8002914:	463b      	mov	r3, r7
 8002916:	2102      	movs	r1, #2
 8002918:	4618      	mov	r0, r3
 800291a:	f7ff ff41 	bl	80027a0 <_Z5pec15Pci>
 800291e:	4603      	mov	r3, r0
 8002920:	81bb      	strh	r3, [r7, #12]
	tab[2] = pec >> 8;
 8002922:	89bb      	ldrh	r3, [r7, #12]
 8002924:	0a1b      	lsrs	r3, r3, #8
 8002926:	b29b      	uxth	r3, r3
 8002928:	b2db      	uxtb	r3, r3
 800292a:	70bb      	strb	r3, [r7, #2]
	tab[3] = pec;
 800292c:	89bb      	ldrh	r3, [r7, #12]
 800292e:	b2db      	uxtb	r3, r3
 8002930:	70fb      	strb	r3, [r7, #3]

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8002932:	2200      	movs	r2, #0
 8002934:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002938:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800293c:	f005 fdb4 	bl	80084a8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, tab, 4, 20);
 8002940:	4639      	mov	r1, r7
 8002942:	2314      	movs	r3, #20
 8002944:	2204      	movs	r2, #4
 8002946:	4808      	ldr	r0, [pc, #32]	; (8002968 <_Z18LTC_start_cell_adcv+0x120>)
 8002948:	f009 f94d 	bl	800bbe6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 800294c:	2201      	movs	r2, #1
 800294e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002952:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002956:	f005 fda7 	bl	80084a8 <HAL_GPIO_WritePin>
}
 800295a:	bf00      	nop
 800295c:	3710      	adds	r7, #16
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	20000214 	.word	0x20000214
 8002968:	20001b08 	.word	0x20001b08

0800296c <_Z18LTC_get_values_adcPt>:
 * Brief:	Receveing adc data from ltc, BLOCKING MODE
 * Param:	None
 * Retval:	None
 */
void LTC_get_values_adc(uint16_t *cell_values)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b0b8      	sub	sp, #224	; 0xe0
 8002970:	af02      	add	r7, sp, #8
 8002972:	6078      	str	r0, [r7, #4]
	uint8_t tab[100], rx_tab[100];
	uint16_t pec;

	// read cell voltage group A
	uint16_t cmd = (1<<15) | 0b100;
 8002974:	f248 0304 	movw	r3, #32772	; 0x8004
 8002978:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
	memset(tab, 0, 12);
 800297c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002980:	220c      	movs	r2, #12
 8002982:	2100      	movs	r1, #0
 8002984:	4618      	mov	r0, r3
 8002986:	f011 fe28 	bl	80145da <memset>
	tab[0] = (cmd>>8);
 800298a:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 800298e:	0a1b      	lsrs	r3, r3, #8
 8002990:	b29b      	uxth	r3, r3
 8002992:	b2db      	uxtb	r3, r3
 8002994:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
	tab[1] = cmd;
 8002998:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 800299c:	b2db      	uxtb	r3, r3
 800299e:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
	pec = pec15((char*)tab, 2);
 80029a2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80029a6:	2102      	movs	r1, #2
 80029a8:	4618      	mov	r0, r3
 80029aa:	f7ff fef9 	bl	80027a0 <_Z5pec15Pci>
 80029ae:	4603      	mov	r3, r0
 80029b0:	f8a7 30d4 	strh.w	r3, [r7, #212]	; 0xd4
	tab[2] = pec >> 8;
 80029b4:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 80029b8:	0a1b      	lsrs	r3, r3, #8
 80029ba:	b29b      	uxth	r3, r3
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
	tab[3] = pec;
 80029c2:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

	LTC_wake_up();
 80029cc:	f7ff ff1c 	bl	8002808 <_Z11LTC_wake_upv>

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80029d0:	2200      	movs	r2, #0
 80029d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80029d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029da:	f005 fd65 	bl	80084a8 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, tab, rx_tab, 12, 20);
 80029de:	f107 020c 	add.w	r2, r7, #12
 80029e2:	f107 0170 	add.w	r1, r7, #112	; 0x70
 80029e6:	2314      	movs	r3, #20
 80029e8:	9300      	str	r3, [sp, #0]
 80029ea:	230c      	movs	r3, #12
 80029ec:	4849      	ldr	r0, [pc, #292]	; (8002b14 <_Z18LTC_get_values_adcPt+0x1a8>)
 80029ee:	f009 fa68 	bl	800bec2 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 80029f2:	2201      	movs	r2, #1
 80029f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80029f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029fc:	f005 fd54 	bl	80084a8 <HAL_GPIO_WritePin>


	cell_values[0] = (uint16_t)rx_tab[4] | (((uint16_t)rx_tab[5])<<8);
 8002a00:	7c3b      	ldrb	r3, [r7, #16]
 8002a02:	b21a      	sxth	r2, r3
 8002a04:	7c7b      	ldrb	r3, [r7, #17]
 8002a06:	021b      	lsls	r3, r3, #8
 8002a08:	b21b      	sxth	r3, r3
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	b21b      	sxth	r3, r3
 8002a0e:	b29a      	uxth	r2, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	801a      	strh	r2, [r3, #0]
	cell_values[1] = (uint16_t)rx_tab[6] | (((uint16_t)rx_tab[7])<<8);
 8002a14:	7cbb      	ldrb	r3, [r7, #18]
 8002a16:	b21a      	sxth	r2, r3
 8002a18:	7cfb      	ldrb	r3, [r7, #19]
 8002a1a:	021b      	lsls	r3, r3, #8
 8002a1c:	b21b      	sxth	r3, r3
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	b21a      	sxth	r2, r3
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	3302      	adds	r3, #2
 8002a26:	b292      	uxth	r2, r2
 8002a28:	801a      	strh	r2, [r3, #0]
	cell_values[2] = (uint16_t)rx_tab[8] | (((uint16_t)rx_tab[9])<<8);
 8002a2a:	7d3b      	ldrb	r3, [r7, #20]
 8002a2c:	b21a      	sxth	r2, r3
 8002a2e:	7d7b      	ldrb	r3, [r7, #21]
 8002a30:	021b      	lsls	r3, r3, #8
 8002a32:	b21b      	sxth	r3, r3
 8002a34:	4313      	orrs	r3, r2
 8002a36:	b21a      	sxth	r2, r3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	3304      	adds	r3, #4
 8002a3c:	b292      	uxth	r2, r2
 8002a3e:	801a      	strh	r2, [r3, #0]


	// read cell voltage group B
	cmd = (1<<15) | 0b110;
 8002a40:	f248 0306 	movw	r3, #32774	; 0x8006
 8002a44:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
	memset(tab, 0, 12);
 8002a48:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002a4c:	220c      	movs	r2, #12
 8002a4e:	2100      	movs	r1, #0
 8002a50:	4618      	mov	r0, r3
 8002a52:	f011 fdc2 	bl	80145da <memset>
	tab[0] = (cmd>>8);
 8002a56:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 8002a5a:	0a1b      	lsrs	r3, r3, #8
 8002a5c:	b29b      	uxth	r3, r3
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
	tab[1] = cmd;
 8002a64:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
	pec = pec15((char*)tab, 2);
 8002a6e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002a72:	2102      	movs	r1, #2
 8002a74:	4618      	mov	r0, r3
 8002a76:	f7ff fe93 	bl	80027a0 <_Z5pec15Pci>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	f8a7 30d4 	strh.w	r3, [r7, #212]	; 0xd4
	tab[2] = pec >> 8;
 8002a80:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 8002a84:	0a1b      	lsrs	r3, r3, #8
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
	tab[3] = pec;
 8002a8e:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8002a98:	2200      	movs	r2, #0
 8002a9a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002aa2:	f005 fd01 	bl	80084a8 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, tab, rx_tab, 12, 20);
 8002aa6:	f107 020c 	add.w	r2, r7, #12
 8002aaa:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8002aae:	2314      	movs	r3, #20
 8002ab0:	9300      	str	r3, [sp, #0]
 8002ab2:	230c      	movs	r3, #12
 8002ab4:	4817      	ldr	r0, [pc, #92]	; (8002b14 <_Z18LTC_get_values_adcPt+0x1a8>)
 8002ab6:	f009 fa04 	bl	800bec2 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8002aba:	2201      	movs	r2, #1
 8002abc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002ac0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ac4:	f005 fcf0 	bl	80084a8 <HAL_GPIO_WritePin>

	cell_values[3] = (uint16_t)rx_tab[4] | (((uint16_t)rx_tab[5])<<8);
 8002ac8:	7c3b      	ldrb	r3, [r7, #16]
 8002aca:	b21a      	sxth	r2, r3
 8002acc:	7c7b      	ldrb	r3, [r7, #17]
 8002ace:	021b      	lsls	r3, r3, #8
 8002ad0:	b21b      	sxth	r3, r3
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	b21a      	sxth	r2, r3
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	3306      	adds	r3, #6
 8002ada:	b292      	uxth	r2, r2
 8002adc:	801a      	strh	r2, [r3, #0]
	cell_values[4] = (uint16_t)rx_tab[6] | (((uint16_t)rx_tab[7])<<8);
 8002ade:	7cbb      	ldrb	r3, [r7, #18]
 8002ae0:	b21a      	sxth	r2, r3
 8002ae2:	7cfb      	ldrb	r3, [r7, #19]
 8002ae4:	021b      	lsls	r3, r3, #8
 8002ae6:	b21b      	sxth	r3, r3
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	b21a      	sxth	r2, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	3308      	adds	r3, #8
 8002af0:	b292      	uxth	r2, r2
 8002af2:	801a      	strh	r2, [r3, #0]
	cell_values[5] = (uint16_t)rx_tab[8] | (((uint16_t)rx_tab[9])<<8);
 8002af4:	7d3b      	ldrb	r3, [r7, #20]
 8002af6:	b21a      	sxth	r2, r3
 8002af8:	7d7b      	ldrb	r3, [r7, #21]
 8002afa:	021b      	lsls	r3, r3, #8
 8002afc:	b21b      	sxth	r3, r3
 8002afe:	4313      	orrs	r3, r2
 8002b00:	b21a      	sxth	r2, r3
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	330a      	adds	r3, #10
 8002b06:	b292      	uxth	r2, r2
 8002b08:	801a      	strh	r2, [r3, #0]


}
 8002b0a:	bf00      	nop
 8002b0c:	37d8      	adds	r7, #216	; 0xd8
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	20001b08 	.word	0x20001b08

08002b18 <_Z8mute_disv>:
 * Brief:	Muting discharge
 * Param:	None
 * Retval:	None
 */
void mute_dis()
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b082      	sub	sp, #8
 8002b1c:	af00      	add	r7, sp, #0
	uint8_t tab[4];
	uint16_t pec;


	uint16_t cmd = (1<<15) | 0b101000;
 8002b1e:	f248 0328 	movw	r3, #32808	; 0x8028
 8002b22:	80fb      	strh	r3, [r7, #6]
	memset(tab, 0, 4);
 8002b24:	463b      	mov	r3, r7
 8002b26:	2204      	movs	r2, #4
 8002b28:	2100      	movs	r1, #0
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f011 fd55 	bl	80145da <memset>
	tab[0] = (cmd>>8);
 8002b30:	88fb      	ldrh	r3, [r7, #6]
 8002b32:	0a1b      	lsrs	r3, r3, #8
 8002b34:	b29b      	uxth	r3, r3
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	703b      	strb	r3, [r7, #0]
	tab[1] = cmd;
 8002b3a:	88fb      	ldrh	r3, [r7, #6]
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	707b      	strb	r3, [r7, #1]
	pec = pec15((char*)tab, 2);
 8002b40:	463b      	mov	r3, r7
 8002b42:	2102      	movs	r1, #2
 8002b44:	4618      	mov	r0, r3
 8002b46:	f7ff fe2b 	bl	80027a0 <_Z5pec15Pci>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	80bb      	strh	r3, [r7, #4]
	tab[2] = pec >> 8;
 8002b4e:	88bb      	ldrh	r3, [r7, #4]
 8002b50:	0a1b      	lsrs	r3, r3, #8
 8002b52:	b29b      	uxth	r3, r3
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	70bb      	strb	r3, [r7, #2]
	tab[3] = pec;
 8002b58:	88bb      	ldrh	r3, [r7, #4]
 8002b5a:	b2db      	uxtb	r3, r3
 8002b5c:	70fb      	strb	r3, [r7, #3]

	LTC_wake_up();
 8002b5e:	f7ff fe53 	bl	8002808 <_Z11LTC_wake_upv>

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8002b62:	2200      	movs	r2, #0
 8002b64:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b6c:	f005 fc9c 	bl	80084a8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, tab, 4, 100);
 8002b70:	4639      	mov	r1, r7
 8002b72:	2364      	movs	r3, #100	; 0x64
 8002b74:	2204      	movs	r2, #4
 8002b76:	4807      	ldr	r0, [pc, #28]	; (8002b94 <_Z8mute_disv+0x7c>)
 8002b78:	f009 f835 	bl	800bbe6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b86:	f005 fc8f 	bl	80084a8 <HAL_GPIO_WritePin>
}
 8002b8a:	bf00      	nop
 8002b8c:	3708      	adds	r7, #8
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	20001b08 	.word	0x20001b08

08002b98 <_Z10unmute_disv>:
 * Brief:	Unmuting discharge
 * Param:	None
 * Retval:	None
 */
void unmute_dis()
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b082      	sub	sp, #8
 8002b9c:	af00      	add	r7, sp, #0
	uint8_t tab[4];
	uint16_t pec;


	uint16_t cmd = (1<<15) | 0b101001;
 8002b9e:	f248 0329 	movw	r3, #32809	; 0x8029
 8002ba2:	80fb      	strh	r3, [r7, #6]
	memset(tab, 0, 4);
 8002ba4:	463b      	mov	r3, r7
 8002ba6:	2204      	movs	r2, #4
 8002ba8:	2100      	movs	r1, #0
 8002baa:	4618      	mov	r0, r3
 8002bac:	f011 fd15 	bl	80145da <memset>
	tab[0] = (cmd>>8);
 8002bb0:	88fb      	ldrh	r3, [r7, #6]
 8002bb2:	0a1b      	lsrs	r3, r3, #8
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	703b      	strb	r3, [r7, #0]
	tab[1] = cmd;
 8002bba:	88fb      	ldrh	r3, [r7, #6]
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	707b      	strb	r3, [r7, #1]
	pec = pec15((char*)tab, 2);
 8002bc0:	463b      	mov	r3, r7
 8002bc2:	2102      	movs	r1, #2
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f7ff fdeb 	bl	80027a0 <_Z5pec15Pci>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	80bb      	strh	r3, [r7, #4]
	tab[2] = pec >> 8;
 8002bce:	88bb      	ldrh	r3, [r7, #4]
 8002bd0:	0a1b      	lsrs	r3, r3, #8
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	70bb      	strb	r3, [r7, #2]
	tab[3] = pec;
 8002bd8:	88bb      	ldrh	r3, [r7, #4]
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	70fb      	strb	r3, [r7, #3]

	LTC_wake_up();
 8002bde:	f7ff fe13 	bl	8002808 <_Z11LTC_wake_upv>

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8002be2:	2200      	movs	r2, #0
 8002be4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002be8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002bec:	f005 fc5c 	bl	80084a8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, tab, 4, 100);
 8002bf0:	4639      	mov	r1, r7
 8002bf2:	2364      	movs	r3, #100	; 0x64
 8002bf4:	2204      	movs	r2, #4
 8002bf6:	4807      	ldr	r0, [pc, #28]	; (8002c14 <_Z10unmute_disv+0x7c>)
 8002bf8:	f008 fff5 	bl	800bbe6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002c02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c06:	f005 fc4f 	bl	80084a8 <HAL_GPIO_WritePin>
}
 8002c0a:	bf00      	nop
 8002c0c:	3708      	adds	r7, #8
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	20001b08 	.word	0x20001b08

08002c18 <_Z21LTC_turn_on_dischargeiPb>:
 * Brief:	Send discharge configuration and start the discharge, BLOCKING MODE
 * Param:	cell: number of cell wanted to be discharged
 * Retval:	None
 */
void LTC_turn_on_discharge(int cell, bool *cellDischarge)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b086      	sub	sp, #24
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	6039      	str	r1, [r7, #0]
	uint8_t tab[12];
	uint16_t pec;

	unmute_dis();
 8002c22:	f7ff ffb9 	bl	8002b98 <_Z10unmute_disv>

	uint16_t cmd = (1<<15) | 0b10100;
 8002c26:	f248 0314 	movw	r3, #32788	; 0x8014
 8002c2a:	82fb      	strh	r3, [r7, #22]
	memset(tab, 0, 12);
 8002c2c:	f107 0308 	add.w	r3, r7, #8
 8002c30:	220c      	movs	r2, #12
 8002c32:	2100      	movs	r1, #0
 8002c34:	4618      	mov	r0, r3
 8002c36:	f011 fcd0 	bl	80145da <memset>
	tab[0] = (cmd>>8);
 8002c3a:	8afb      	ldrh	r3, [r7, #22]
 8002c3c:	0a1b      	lsrs	r3, r3, #8
 8002c3e:	b29b      	uxth	r3, r3
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	723b      	strb	r3, [r7, #8]
	tab[1] = cmd;
 8002c44:	8afb      	ldrh	r3, [r7, #22]
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	727b      	strb	r3, [r7, #9]
	pec = pec15((char*)tab, 2);
 8002c4a:	f107 0308 	add.w	r3, r7, #8
 8002c4e:	2102      	movs	r1, #2
 8002c50:	4618      	mov	r0, r3
 8002c52:	f7ff fda5 	bl	80027a0 <_Z5pec15Pci>
 8002c56:	4603      	mov	r3, r0
 8002c58:	82bb      	strh	r3, [r7, #20]
	tab[2] = pec >> 8;
 8002c5a:	8abb      	ldrh	r3, [r7, #20]
 8002c5c:	0a1b      	lsrs	r3, r3, #8
 8002c5e:	b29b      	uxth	r3, r3
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	72bb      	strb	r3, [r7, #10]
	tab[3] = pec;
 8002c64:	8abb      	ldrh	r3, [r7, #20]
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	72fb      	strb	r3, [r7, #11]


	tab[4] = (cellDischarge[0]) | (cellDischarge[1] << 4); // 1, 2
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	781b      	ldrb	r3, [r3, #0]
 8002c6e:	b25a      	sxtb	r2, r3
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	3301      	adds	r3, #1
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	011b      	lsls	r3, r3, #4
 8002c78:	b25b      	sxtb	r3, r3
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	b25b      	sxtb	r3, r3
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	733b      	strb	r3, [r7, #12]
	tab[5] = (cellDischarge[2]) | (cellDischarge[3] << 4); // 3, 4
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	3302      	adds	r3, #2
 8002c86:	781b      	ldrb	r3, [r3, #0]
 8002c88:	b25a      	sxtb	r2, r3
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	3303      	adds	r3, #3
 8002c8e:	781b      	ldrb	r3, [r3, #0]
 8002c90:	011b      	lsls	r3, r3, #4
 8002c92:	b25b      	sxtb	r3, r3
 8002c94:	4313      	orrs	r3, r2
 8002c96:	b25b      	sxtb	r3, r3
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	737b      	strb	r3, [r7, #13]
	tab[6] = (cellDischarge[4]) | (cellDischarge[5] << 4); // 5, 6
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	3304      	adds	r3, #4
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	b25a      	sxtb	r2, r3
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	3305      	adds	r3, #5
 8002ca8:	781b      	ldrb	r3, [r3, #0]
 8002caa:	011b      	lsls	r3, r3, #4
 8002cac:	b25b      	sxtb	r3, r3
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	b25b      	sxtb	r3, r3
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	73bb      	strb	r3, [r7, #14]
	tab[7] = 0;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	73fb      	strb	r3, [r7, #15]
	tab[8] = 0;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	743b      	strb	r3, [r7, #16]
	tab[9] = 0;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	747b      	strb	r3, [r7, #17]
	pec = pec15((char*)&tab[4], 6);
 8002cc2:	f107 0308 	add.w	r3, r7, #8
 8002cc6:	3304      	adds	r3, #4
 8002cc8:	2106      	movs	r1, #6
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f7ff fd68 	bl	80027a0 <_Z5pec15Pci>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	82bb      	strh	r3, [r7, #20]
	tab[10] = pec >> 8;
 8002cd4:	8abb      	ldrh	r3, [r7, #20]
 8002cd6:	0a1b      	lsrs	r3, r3, #8
 8002cd8:	b29b      	uxth	r3, r3
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	74bb      	strb	r3, [r7, #18]
	tab[11] = pec;
 8002cde:	8abb      	ldrh	r3, [r7, #20]
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	74fb      	strb	r3, [r7, #19]

	LTC_wake_up();
 8002ce4:	f7ff fd90 	bl	8002808 <_Z11LTC_wake_upv>

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8002ce8:	2200      	movs	r2, #0
 8002cea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002cee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002cf2:	f005 fbd9 	bl	80084a8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, tab, 12, 100);
 8002cf6:	f107 0108 	add.w	r1, r7, #8
 8002cfa:	2364      	movs	r3, #100	; 0x64
 8002cfc:	220c      	movs	r2, #12
 8002cfe:	483c      	ldr	r0, [pc, #240]	; (8002df0 <_Z21LTC_turn_on_dischargeiPb+0x1d8>)
 8002d00:	f008 ff71 	bl	800bbe6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8002d04:	2201      	movs	r2, #1
 8002d06:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d0e:	f005 fbcb 	bl	80084a8 <HAL_GPIO_WritePin>

	cmd = (1<<15) | 0x01;
 8002d12:	f248 0301 	movw	r3, #32769	; 0x8001
 8002d16:	82fb      	strh	r3, [r7, #22]
	memset(tab, 0, 12);
 8002d18:	f107 0308 	add.w	r3, r7, #8
 8002d1c:	220c      	movs	r2, #12
 8002d1e:	2100      	movs	r1, #0
 8002d20:	4618      	mov	r0, r3
 8002d22:	f011 fc5a 	bl	80145da <memset>
	// configuration
	tab[0] = (cmd>>8);
 8002d26:	8afb      	ldrh	r3, [r7, #22]
 8002d28:	0a1b      	lsrs	r3, r3, #8
 8002d2a:	b29b      	uxth	r3, r3
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	723b      	strb	r3, [r7, #8]
	tab[1] = cmd;
 8002d30:	8afb      	ldrh	r3, [r7, #22]
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	727b      	strb	r3, [r7, #9]
	pec = pec15((char*)tab, 2);
 8002d36:	f107 0308 	add.w	r3, r7, #8
 8002d3a:	2102      	movs	r1, #2
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f7ff fd2f 	bl	80027a0 <_Z5pec15Pci>
 8002d42:	4603      	mov	r3, r0
 8002d44:	82bb      	strh	r3, [r7, #20]
	tab[2] = pec >> 8;
 8002d46:	8abb      	ldrh	r3, [r7, #20]
 8002d48:	0a1b      	lsrs	r3, r3, #8
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	72bb      	strb	r3, [r7, #10]
	tab[3] = pec;
 8002d50:	8abb      	ldrh	r3, [r7, #20]
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	72fb      	strb	r3, [r7, #11]

	tab[4] = ltcConfig[0];
 8002d56:	4b27      	ldr	r3, [pc, #156]	; (8002df4 <_Z21LTC_turn_on_dischargeiPb+0x1dc>)
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	733b      	strb	r3, [r7, #12]
	tab[5] = ltcConfig[1];
 8002d5c:	4b25      	ldr	r3, [pc, #148]	; (8002df4 <_Z21LTC_turn_on_dischargeiPb+0x1dc>)
 8002d5e:	785b      	ldrb	r3, [r3, #1]
 8002d60:	737b      	strb	r3, [r7, #13]
	tab[6] = ltcConfig[2];
 8002d62:	4b24      	ldr	r3, [pc, #144]	; (8002df4 <_Z21LTC_turn_on_dischargeiPb+0x1dc>)
 8002d64:	789b      	ldrb	r3, [r3, #2]
 8002d66:	73bb      	strb	r3, [r7, #14]
	tab[7] = ltcConfig[3];
 8002d68:	4b22      	ldr	r3, [pc, #136]	; (8002df4 <_Z21LTC_turn_on_dischargeiPb+0x1dc>)
 8002d6a:	78db      	ldrb	r3, [r3, #3]
 8002d6c:	73fb      	strb	r3, [r7, #15]
	if(cell<7){
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2b06      	cmp	r3, #6
 8002d72:	dc0c      	bgt.n	8002d8e <_Z21LTC_turn_on_dischargeiPb+0x176>
		ltcConfig[4] = ltcConfig[4] | (1 << (cell));
 8002d74:	4b1f      	ldr	r3, [pc, #124]	; (8002df4 <_Z21LTC_turn_on_dischargeiPb+0x1dc>)
 8002d76:	791b      	ldrb	r3, [r3, #4]
 8002d78:	b25a      	sxtb	r2, r3
 8002d7a:	2101      	movs	r1, #1
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d82:	b25b      	sxtb	r3, r3
 8002d84:	4313      	orrs	r3, r2
 8002d86:	b25b      	sxtb	r3, r3
 8002d88:	b2da      	uxtb	r2, r3
 8002d8a:	4b1a      	ldr	r3, [pc, #104]	; (8002df4 <_Z21LTC_turn_on_dischargeiPb+0x1dc>)
 8002d8c:	711a      	strb	r2, [r3, #4]
	}
	tab[8] = ltcConfig[4];
 8002d8e:	4b19      	ldr	r3, [pc, #100]	; (8002df4 <_Z21LTC_turn_on_dischargeiPb+0x1dc>)
 8002d90:	791b      	ldrb	r3, [r3, #4]
 8002d92:	743b      	strb	r3, [r7, #16]
	tab[9] = ltcConfig[5];
 8002d94:	4b17      	ldr	r3, [pc, #92]	; (8002df4 <_Z21LTC_turn_on_dischargeiPb+0x1dc>)
 8002d96:	795b      	ldrb	r3, [r3, #5]
 8002d98:	747b      	strb	r3, [r7, #17]
	pec = pec15((char*)&tab[4], 6);
 8002d9a:	f107 0308 	add.w	r3, r7, #8
 8002d9e:	3304      	adds	r3, #4
 8002da0:	2106      	movs	r1, #6
 8002da2:	4618      	mov	r0, r3
 8002da4:	f7ff fcfc 	bl	80027a0 <_Z5pec15Pci>
 8002da8:	4603      	mov	r3, r0
 8002daa:	82bb      	strh	r3, [r7, #20]
	tab[10] = pec >> 8;
 8002dac:	8abb      	ldrh	r3, [r7, #20]
 8002dae:	0a1b      	lsrs	r3, r3, #8
 8002db0:	b29b      	uxth	r3, r3
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	74bb      	strb	r3, [r7, #18]
	tab[11] = pec;
 8002db6:	8abb      	ldrh	r3, [r7, #20]
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	74fb      	strb	r3, [r7, #19]


	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002dc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002dc6:	f005 fb6f 	bl	80084a8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, tab, 12, 100);
 8002dca:	f107 0108 	add.w	r1, r7, #8
 8002dce:	2364      	movs	r3, #100	; 0x64
 8002dd0:	220c      	movs	r2, #12
 8002dd2:	4807      	ldr	r0, [pc, #28]	; (8002df0 <_Z21LTC_turn_on_dischargeiPb+0x1d8>)
 8002dd4:	f008 ff07 	bl	800bbe6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8002dd8:	2201      	movs	r2, #1
 8002dda:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002dde:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002de2:	f005 fb61 	bl	80084a8 <HAL_GPIO_WritePin>


}
 8002de6:	bf00      	nop
 8002de8:	3718      	adds	r7, #24
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	20001b08 	.word	0x20001b08
 8002df4:	20000214 	.word	0x20000214

08002df8 <_Z22LTC_turn_off_dischargev>:
 * Brief:	Turn off discharge, BLOCKING MODE
 * Param:	None
 * Retval:	None
 */
void LTC_turn_off_discharge()
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b09a      	sub	sp, #104	; 0x68
 8002dfc:	af00      	add	r7, sp, #0

	uint8_t tab[100];
	uint16_t pec;


	uint16_t cmd = (1<<15) | 0b10100;
 8002dfe:	f248 0314 	movw	r3, #32788	; 0x8014
 8002e02:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
	memset(tab, 0, 12);
 8002e06:	463b      	mov	r3, r7
 8002e08:	220c      	movs	r2, #12
 8002e0a:	2100      	movs	r1, #0
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f011 fbe4 	bl	80145da <memset>
	tab[0] = (cmd>>8);
 8002e12:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8002e16:	0a1b      	lsrs	r3, r3, #8
 8002e18:	b29b      	uxth	r3, r3
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	703b      	strb	r3, [r7, #0]
	tab[1] = cmd;
 8002e1e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	707b      	strb	r3, [r7, #1]
	pec = pec15((char*)tab, 2);
 8002e26:	463b      	mov	r3, r7
 8002e28:	2102      	movs	r1, #2
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f7ff fcb8 	bl	80027a0 <_Z5pec15Pci>
 8002e30:	4603      	mov	r3, r0
 8002e32:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
	tab[2] = pec >> 8;
 8002e36:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002e3a:	0a1b      	lsrs	r3, r3, #8
 8002e3c:	b29b      	uxth	r3, r3
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	70bb      	strb	r3, [r7, #2]
	tab[3] = pec;
 8002e42:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	70fb      	strb	r3, [r7, #3]


	tab[4] = 0;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	713b      	strb	r3, [r7, #4]
	tab[5] = 0;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	717b      	strb	r3, [r7, #5]
	tab[6] = 0;
 8002e52:	2300      	movs	r3, #0
 8002e54:	71bb      	strb	r3, [r7, #6]
	tab[7] = 0;
 8002e56:	2300      	movs	r3, #0
 8002e58:	71fb      	strb	r3, [r7, #7]
	tab[8] = 0;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	723b      	strb	r3, [r7, #8]
	tab[9] = 0;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	727b      	strb	r3, [r7, #9]
	pec = pec15((char*)&tab[4], 6);
 8002e62:	463b      	mov	r3, r7
 8002e64:	3304      	adds	r3, #4
 8002e66:	2106      	movs	r1, #6
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f7ff fc99 	bl	80027a0 <_Z5pec15Pci>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
	tab[10] = pec >> 8;
 8002e74:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002e78:	0a1b      	lsrs	r3, r3, #8
 8002e7a:	b29b      	uxth	r3, r3
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	72bb      	strb	r3, [r7, #10]
	tab[11] = pec;
 8002e80:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	72fb      	strb	r3, [r7, #11]

	LTC_wake_up();
 8002e88:	f7ff fcbe 	bl	8002808 <_Z11LTC_wake_upv>

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002e92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e96:	f005 fb07 	bl	80084a8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, tab, 12, 100);
 8002e9a:	4639      	mov	r1, r7
 8002e9c:	2364      	movs	r3, #100	; 0x64
 8002e9e:	220c      	movs	r2, #12
 8002ea0:	4838      	ldr	r0, [pc, #224]	; (8002f84 <_Z22LTC_turn_off_dischargev+0x18c>)
 8002ea2:	f008 fea0 	bl	800bbe6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002eac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002eb0:	f005 fafa 	bl	80084a8 <HAL_GPIO_WritePin>


	cmd = (1<<15) | 0x01;
 8002eb4:	f248 0301 	movw	r3, #32769	; 0x8001
 8002eb8:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
	memset(tab, 0, 12);
 8002ebc:	463b      	mov	r3, r7
 8002ebe:	220c      	movs	r2, #12
 8002ec0:	2100      	movs	r1, #0
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f011 fb89 	bl	80145da <memset>
	// configuration
	tab[0] = (cmd>>8);
 8002ec8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8002ecc:	0a1b      	lsrs	r3, r3, #8
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	703b      	strb	r3, [r7, #0]
	tab[1] = cmd;
 8002ed4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	707b      	strb	r3, [r7, #1]
	pec = pec15((char*)tab, 2);
 8002edc:	463b      	mov	r3, r7
 8002ede:	2102      	movs	r1, #2
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f7ff fc5d 	bl	80027a0 <_Z5pec15Pci>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
	tab[2] = pec >> 8;
 8002eec:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002ef0:	0a1b      	lsrs	r3, r3, #8
 8002ef2:	b29b      	uxth	r3, r3
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	70bb      	strb	r3, [r7, #2]
	tab[3] = pec;
 8002ef8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	70fb      	strb	r3, [r7, #3]

	ltcConfig[4] = 0;
 8002f00:	4b21      	ldr	r3, [pc, #132]	; (8002f88 <_Z22LTC_turn_off_dischargev+0x190>)
 8002f02:	2200      	movs	r2, #0
 8002f04:	711a      	strb	r2, [r3, #4]

	tab[4] = ltcConfig[0];
 8002f06:	4b20      	ldr	r3, [pc, #128]	; (8002f88 <_Z22LTC_turn_off_dischargev+0x190>)
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	713b      	strb	r3, [r7, #4]
	tab[5] = ltcConfig[1];
 8002f0c:	4b1e      	ldr	r3, [pc, #120]	; (8002f88 <_Z22LTC_turn_off_dischargev+0x190>)
 8002f0e:	785b      	ldrb	r3, [r3, #1]
 8002f10:	717b      	strb	r3, [r7, #5]
	tab[6] = ltcConfig[2];
 8002f12:	4b1d      	ldr	r3, [pc, #116]	; (8002f88 <_Z22LTC_turn_off_dischargev+0x190>)
 8002f14:	789b      	ldrb	r3, [r3, #2]
 8002f16:	71bb      	strb	r3, [r7, #6]
	tab[7] = ltcConfig[3];
 8002f18:	4b1b      	ldr	r3, [pc, #108]	; (8002f88 <_Z22LTC_turn_off_dischargev+0x190>)
 8002f1a:	78db      	ldrb	r3, [r3, #3]
 8002f1c:	71fb      	strb	r3, [r7, #7]
	tab[8] = ltcConfig[4];
 8002f1e:	4b1a      	ldr	r3, [pc, #104]	; (8002f88 <_Z22LTC_turn_off_dischargev+0x190>)
 8002f20:	791b      	ldrb	r3, [r3, #4]
 8002f22:	723b      	strb	r3, [r7, #8]
	tab[9] = ltcConfig[5];
 8002f24:	4b18      	ldr	r3, [pc, #96]	; (8002f88 <_Z22LTC_turn_off_dischargev+0x190>)
 8002f26:	795b      	ldrb	r3, [r3, #5]
 8002f28:	727b      	strb	r3, [r7, #9]
	pec = pec15((char*)&tab[4], 6);
 8002f2a:	463b      	mov	r3, r7
 8002f2c:	3304      	adds	r3, #4
 8002f2e:	2106      	movs	r1, #6
 8002f30:	4618      	mov	r0, r3
 8002f32:	f7ff fc35 	bl	80027a0 <_Z5pec15Pci>
 8002f36:	4603      	mov	r3, r0
 8002f38:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
	tab[10] = pec >> 8;
 8002f3c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002f40:	0a1b      	lsrs	r3, r3, #8
 8002f42:	b29b      	uxth	r3, r3
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	72bb      	strb	r3, [r7, #10]
	tab[11] = pec;
 8002f48:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	72fb      	strb	r3, [r7, #11]

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8002f50:	2200      	movs	r2, #0
 8002f52:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002f56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f5a:	f005 faa5 	bl	80084a8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, tab, 12, 100);
 8002f5e:	4639      	mov	r1, r7
 8002f60:	2364      	movs	r3, #100	; 0x64
 8002f62:	220c      	movs	r2, #12
 8002f64:	4807      	ldr	r0, [pc, #28]	; (8002f84 <_Z22LTC_turn_off_dischargev+0x18c>)
 8002f66:	f008 fe3e 	bl	800bbe6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002f70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f74:	f005 fa98 	bl	80084a8 <HAL_GPIO_WritePin>

	mute_dis();
 8002f78:	f7ff fdce 	bl	8002b18 <_Z8mute_disv>
}
 8002f7c:	bf00      	nop
 8002f7e:	3768      	adds	r7, #104	; 0x68
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}
 8002f84:	20001b08 	.word	0x20001b08
 8002f88:	20000214 	.word	0x20000214

08002f8c <_Z24temperature_calculationst>:
 * Brief:	Calculation of temperature, from value of measured voltage
 * Param:	value:	Value of voltage, LSB -> 0.1 mV
 * Retval:	Temperature in *C
 */
float temperature_calculations(uint16_t value)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b085      	sub	sp, #20
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	4603      	mov	r3, r0
 8002f94:	80fb      	strh	r3, [r7, #6]
	float retval = 0.0;
 8002f96:	f04f 0300 	mov.w	r3, #0
 8002f9a:	60fb      	str	r3, [r7, #12]
	for(unsigned int i = 1; i < 28; i++)
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	60bb      	str	r3, [r7, #8]
 8002fa0:	e040      	b.n	8003024 <_Z24temperature_calculationst+0x98>
	{
		if(value >= (uint16_t)temperature_map[i][0])
 8002fa2:	4a27      	ldr	r2, [pc, #156]	; (8003040 <_Z24temperature_calculationst+0xb4>)
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002faa:	b29b      	uxth	r3, r3
 8002fac:	88fa      	ldrh	r2, [r7, #6]
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d335      	bcc.n	800301e <_Z24temperature_calculationst+0x92>
		{
			// approximation
			retval = (float)temperature_map[i][1] - 5.0 * ((float)value-(float)temperature_map[i][0]) / ((float)temperature_map[i-1][0] - (float)temperature_map[i][0]);
 8002fb2:	4a23      	ldr	r2, [pc, #140]	; (8003040 <_Z24temperature_calculationst+0xb4>)
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	00db      	lsls	r3, r3, #3
 8002fb8:	4413      	add	r3, r2
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	ee07 3a90 	vmov	s15, r3
 8002fc0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002fc4:	88fb      	ldrh	r3, [r7, #6]
 8002fc6:	ee07 3a90 	vmov	s15, r3
 8002fca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002fce:	4a1c      	ldr	r2, [pc, #112]	; (8003040 <_Z24temperature_calculationst+0xb4>)
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002fd6:	ee07 3a90 	vmov	s15, r3
 8002fda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002fde:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002fe2:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8002fe6:	ee27 6aa6 	vmul.f32	s12, s15, s13
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	3b01      	subs	r3, #1
 8002fee:	4a14      	ldr	r2, [pc, #80]	; (8003040 <_Z24temperature_calculationst+0xb4>)
 8002ff0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002ff4:	ee07 3a90 	vmov	s15, r3
 8002ff8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002ffc:	4a10      	ldr	r2, [pc, #64]	; (8003040 <_Z24temperature_calculationst+0xb4>)
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003004:	ee07 3a90 	vmov	s15, r3
 8003008:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800300c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003010:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8003014:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003018:	edc7 7a03 	vstr	s15, [r7, #12]
			break;
 800301c:	e005      	b.n	800302a <_Z24temperature_calculationst+0x9e>
	for(unsigned int i = 1; i < 28; i++)
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	3301      	adds	r3, #1
 8003022:	60bb      	str	r3, [r7, #8]
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	2b1b      	cmp	r3, #27
 8003028:	d9bb      	bls.n	8002fa2 <_Z24temperature_calculationst+0x16>
		}
	}
	return retval;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	ee07 3a90 	vmov	s15, r3
}
 8003030:	eeb0 0a67 	vmov.f32	s0, s15
 8003034:	3714      	adds	r7, #20
 8003036:	46bd      	mov	sp, r7
 8003038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303c:	4770      	bx	lr
 800303e:	bf00      	nop
 8003040:	08016c94 	.word	0x08016c94

08003044 <_Z16get_temperaturesv>:
 * Brief:	Getting proper values of temperatures on every cell in *C
 * Param:	None
 * Retval:	None
 */
void get_temperatures()
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b082      	sub	sp, #8
 8003048:	af00      	add	r7, sp, #0
	data.temperatures.average = 0;
 800304a:	4b21      	ldr	r3, [pc, #132]	; (80030d0 <_Z16get_temperaturesv+0x8c>)
 800304c:	2200      	movs	r2, #0
 800304e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	for(unsigned int i = 0; i < NUMBER_OF_TEMPERATURES; i++)
 8003052:	2300      	movs	r3, #0
 8003054:	607b      	str	r3, [r7, #4]
 8003056:	e028      	b.n	80030aa <_Z16get_temperaturesv+0x66>
	{
		data.temperatures.values[i] = (uint16_t)temperature_calculations(data.temperatures.adc[7-i]);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f1c3 0307 	rsb	r3, r3, #7
 800305e:	4a1c      	ldr	r2, [pc, #112]	; (80030d0 <_Z16get_temperaturesv+0x8c>)
 8003060:	3314      	adds	r3, #20
 8003062:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003066:	b29b      	uxth	r3, r3
 8003068:	4618      	mov	r0, r3
 800306a:	f7ff ff8f 	bl	8002f8c <_Z24temperature_calculationst>
 800306e:	eef0 7a40 	vmov.f32	s15, s0
 8003072:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003076:	ee17 3a90 	vmov	r3, s15
 800307a:	b29b      	uxth	r3, r3
 800307c:	b2d9      	uxtb	r1, r3
 800307e:	4a14      	ldr	r2, [pc, #80]	; (80030d0 <_Z16get_temperaturesv+0x8c>)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	4413      	add	r3, r2
 8003084:	3320      	adds	r3, #32
 8003086:	460a      	mov	r2, r1
 8003088:	701a      	strb	r2, [r3, #0]
		data.temperatures.average += data.temperatures.values[i];
 800308a:	4b11      	ldr	r3, [pc, #68]	; (80030d0 <_Z16get_temperaturesv+0x8c>)
 800308c:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8003090:	490f      	ldr	r1, [pc, #60]	; (80030d0 <_Z16get_temperaturesv+0x8c>)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	440b      	add	r3, r1
 8003096:	3320      	adds	r3, #32
 8003098:	781b      	ldrb	r3, [r3, #0]
 800309a:	4413      	add	r3, r2
 800309c:	b2da      	uxtb	r2, r3
 800309e:	4b0c      	ldr	r3, [pc, #48]	; (80030d0 <_Z16get_temperaturesv+0x8c>)
 80030a0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	for(unsigned int i = 0; i < NUMBER_OF_TEMPERATURES; i++)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	3301      	adds	r3, #1
 80030a8:	607b      	str	r3, [r7, #4]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2b04      	cmp	r3, #4
 80030ae:	d9d3      	bls.n	8003058 <_Z16get_temperaturesv+0x14>
	}
	data.temperatures.average = data.temperatures.average / 6;
 80030b0:	4b07      	ldr	r3, [pc, #28]	; (80030d0 <_Z16get_temperaturesv+0x8c>)
 80030b2:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80030b6:	4a07      	ldr	r2, [pc, #28]	; (80030d4 <_Z16get_temperaturesv+0x90>)
 80030b8:	fba2 2303 	umull	r2, r3, r2, r3
 80030bc:	089b      	lsrs	r3, r3, #2
 80030be:	b2da      	uxtb	r2, r3
 80030c0:	4b03      	ldr	r3, [pc, #12]	; (80030d0 <_Z16get_temperaturesv+0x8c>)
 80030c2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 80030c6:	bf00      	nop
 80030c8:	3708      	adds	r7, #8
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	20001478 	.word	0x20001478
 80030d4:	aaaaaaab 	.word	0xaaaaaaab

080030d8 <_Z15min_max_voltagev>:
/*
 * Brief:	Finding the highest and the lowest cell voltage and index of the highest one
 * Param:	None
 * Retval:	data.voltages.lowest_cell_voltage, data.voltages.highest_cell_voltage, data.voltages.highest_cell_voltage_index
 */
void min_max_voltage(){
 80030d8:	b480      	push	{r7}
 80030da:	b083      	sub	sp, #12
 80030dc:	af00      	add	r7, sp, #0
	data.voltages.lowest_cell_voltage = data.voltages.cells[0];
 80030de:	4b1d      	ldr	r3, [pc, #116]	; (8003154 <_Z15min_max_voltagev+0x7c>)
 80030e0:	881a      	ldrh	r2, [r3, #0]
 80030e2:	4b1c      	ldr	r3, [pc, #112]	; (8003154 <_Z15min_max_voltagev+0x7c>)
 80030e4:	835a      	strh	r2, [r3, #26]
	data.voltages.highest_cell_voltage = data.voltages.cells[0];
 80030e6:	4b1b      	ldr	r3, [pc, #108]	; (8003154 <_Z15min_max_voltagev+0x7c>)
 80030e8:	881a      	ldrh	r2, [r3, #0]
 80030ea:	4b1a      	ldr	r3, [pc, #104]	; (8003154 <_Z15min_max_voltagev+0x7c>)
 80030ec:	839a      	strh	r2, [r3, #28]
	data.voltages.highest_cell_voltage_index = 0;
 80030ee:	4b19      	ldr	r3, [pc, #100]	; (8003154 <_Z15min_max_voltagev+0x7c>)
 80030f0:	2200      	movs	r2, #0
 80030f2:	749a      	strb	r2, [r3, #18]
	for(uint8_t i = 1; i < NUMBER_OF_CELLS; i++)
 80030f4:	2301      	movs	r3, #1
 80030f6:	71fb      	strb	r3, [r7, #7]
 80030f8:	e021      	b.n	800313e <_Z15min_max_voltagev+0x66>
	{
		if(data.voltages.lowest_cell_voltage > data.voltages.cells[i])
 80030fa:	4b16      	ldr	r3, [pc, #88]	; (8003154 <_Z15min_max_voltagev+0x7c>)
 80030fc:	8b5a      	ldrh	r2, [r3, #26]
 80030fe:	79fb      	ldrb	r3, [r7, #7]
 8003100:	4914      	ldr	r1, [pc, #80]	; (8003154 <_Z15min_max_voltagev+0x7c>)
 8003102:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8003106:	429a      	cmp	r2, r3
 8003108:	d905      	bls.n	8003116 <_Z15min_max_voltagev+0x3e>
		{
			data.voltages.lowest_cell_voltage = data.voltages.cells[i];
 800310a:	79fb      	ldrb	r3, [r7, #7]
 800310c:	4a11      	ldr	r2, [pc, #68]	; (8003154 <_Z15min_max_voltagev+0x7c>)
 800310e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8003112:	4b10      	ldr	r3, [pc, #64]	; (8003154 <_Z15min_max_voltagev+0x7c>)
 8003114:	835a      	strh	r2, [r3, #26]
		}
		if(data.voltages.highest_cell_voltage < data.voltages.cells[i])
 8003116:	4b0f      	ldr	r3, [pc, #60]	; (8003154 <_Z15min_max_voltagev+0x7c>)
 8003118:	8b9a      	ldrh	r2, [r3, #28]
 800311a:	79fb      	ldrb	r3, [r7, #7]
 800311c:	490d      	ldr	r1, [pc, #52]	; (8003154 <_Z15min_max_voltagev+0x7c>)
 800311e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8003122:	429a      	cmp	r2, r3
 8003124:	d208      	bcs.n	8003138 <_Z15min_max_voltagev+0x60>
		{
			data.voltages.highest_cell_voltage = data.voltages.cells[i];
 8003126:	79fb      	ldrb	r3, [r7, #7]
 8003128:	4a0a      	ldr	r2, [pc, #40]	; (8003154 <_Z15min_max_voltagev+0x7c>)
 800312a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800312e:	4b09      	ldr	r3, [pc, #36]	; (8003154 <_Z15min_max_voltagev+0x7c>)
 8003130:	839a      	strh	r2, [r3, #28]
			data.voltages.highest_cell_voltage_index = i;
 8003132:	4a08      	ldr	r2, [pc, #32]	; (8003154 <_Z15min_max_voltagev+0x7c>)
 8003134:	79fb      	ldrb	r3, [r7, #7]
 8003136:	7493      	strb	r3, [r2, #18]
	for(uint8_t i = 1; i < NUMBER_OF_CELLS; i++)
 8003138:	79fb      	ldrb	r3, [r7, #7]
 800313a:	3301      	adds	r3, #1
 800313c:	71fb      	strb	r3, [r7, #7]
 800313e:	79fb      	ldrb	r3, [r7, #7]
 8003140:	2b05      	cmp	r3, #5
 8003142:	d9da      	bls.n	80030fa <_Z15min_max_voltagev+0x22>
		}
	}
}
 8003144:	bf00      	nop
 8003146:	bf00      	nop
 8003148:	370c      	adds	r7, #12
 800314a:	46bd      	mov	sp, r7
 800314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003150:	4770      	bx	lr
 8003152:	bf00      	nop
 8003154:	20001478 	.word	0x20001478

08003158 <_Z19min_max_temperaturev>:

void min_max_temperature(){
 8003158:	b480      	push	{r7}
 800315a:	b083      	sub	sp, #12
 800315c:	af00      	add	r7, sp, #0
	data.temperatures.lowest_temperature = data.temperatures.values[0];
 800315e:	4b20      	ldr	r3, [pc, #128]	; (80031e0 <_Z19min_max_temperaturev+0x88>)
 8003160:	f893 2020 	ldrb.w	r2, [r3, #32]
 8003164:	4b1e      	ldr	r3, [pc, #120]	; (80031e0 <_Z19min_max_temperaturev+0x88>)
 8003166:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	data.temperatures.highest_temperature = data.temperatures.values[0];
 800316a:	4b1d      	ldr	r3, [pc, #116]	; (80031e0 <_Z19min_max_temperaturev+0x88>)
 800316c:	f893 2020 	ldrb.w	r2, [r3, #32]
 8003170:	4b1b      	ldr	r3, [pc, #108]	; (80031e0 <_Z19min_max_temperaturev+0x88>)
 8003172:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	for(unsigned int i = 1; i < NUMBER_OF_TEMPERATURES; i++)
 8003176:	2301      	movs	r3, #1
 8003178:	607b      	str	r3, [r7, #4]
 800317a:	e026      	b.n	80031ca <_Z19min_max_temperaturev+0x72>
	{
		if(data.temperatures.lowest_temperature > data.temperatures.values[i])
 800317c:	4b18      	ldr	r3, [pc, #96]	; (80031e0 <_Z19min_max_temperaturev+0x88>)
 800317e:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8003182:	4917      	ldr	r1, [pc, #92]	; (80031e0 <_Z19min_max_temperaturev+0x88>)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	440b      	add	r3, r1
 8003188:	3320      	adds	r3, #32
 800318a:	781b      	ldrb	r3, [r3, #0]
 800318c:	429a      	cmp	r2, r3
 800318e:	d907      	bls.n	80031a0 <_Z19min_max_temperaturev+0x48>
		{
			data.temperatures.lowest_temperature = data.temperatures.values[i];
 8003190:	4a13      	ldr	r2, [pc, #76]	; (80031e0 <_Z19min_max_temperaturev+0x88>)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4413      	add	r3, r2
 8003196:	3320      	adds	r3, #32
 8003198:	781a      	ldrb	r2, [r3, #0]
 800319a:	4b11      	ldr	r3, [pc, #68]	; (80031e0 <_Z19min_max_temperaturev+0x88>)
 800319c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		}
		if(data.temperatures.highest_temperature < data.temperatures.values[i])
 80031a0:	4b0f      	ldr	r3, [pc, #60]	; (80031e0 <_Z19min_max_temperaturev+0x88>)
 80031a2:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 80031a6:	490e      	ldr	r1, [pc, #56]	; (80031e0 <_Z19min_max_temperaturev+0x88>)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	440b      	add	r3, r1
 80031ac:	3320      	adds	r3, #32
 80031ae:	781b      	ldrb	r3, [r3, #0]
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d207      	bcs.n	80031c4 <_Z19min_max_temperaturev+0x6c>
		{
			data.temperatures.highest_temperature = data.temperatures.values[i];
 80031b4:	4a0a      	ldr	r2, [pc, #40]	; (80031e0 <_Z19min_max_temperaturev+0x88>)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4413      	add	r3, r2
 80031ba:	3320      	adds	r3, #32
 80031bc:	781a      	ldrb	r2, [r3, #0]
 80031be:	4b08      	ldr	r3, [pc, #32]	; (80031e0 <_Z19min_max_temperaturev+0x88>)
 80031c0:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	for(unsigned int i = 1; i < NUMBER_OF_TEMPERATURES; i++)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	3301      	adds	r3, #1
 80031c8:	607b      	str	r3, [r7, #4]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2b04      	cmp	r3, #4
 80031ce:	d9d5      	bls.n	800317c <_Z19min_max_temperaturev+0x24>
		}
	}
}
 80031d0:	bf00      	nop
 80031d2:	bf00      	nop
 80031d4:	370c      	adds	r7, #12
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr
 80031de:	bf00      	nop
 80031e0:	20001478 	.word	0x20001478

080031e4 <_Z16voltage_can_calcv>:

void voltage_can_calc(){
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
	data.voltages.total = 0;
 80031ea:	4b1a      	ldr	r3, [pc, #104]	; (8003254 <_Z16voltage_can_calcv+0x70>)
 80031ec:	2200      	movs	r2, #0
 80031ee:	615a      	str	r2, [r3, #20]
	//voltage calculations for CAN
	for(int i = 0; i < NUMBER_OF_CELLS; i++)
 80031f0:	2300      	movs	r3, #0
 80031f2:	607b      	str	r3, [r7, #4]
 80031f4:	e01b      	b.n	800322e <_Z16voltage_can_calcv+0x4a>
	{
		data.voltages.total += (uint32_t)data.voltages.cells[i];
 80031f6:	4b17      	ldr	r3, [pc, #92]	; (8003254 <_Z16voltage_can_calcv+0x70>)
 80031f8:	695b      	ldr	r3, [r3, #20]
 80031fa:	4916      	ldr	r1, [pc, #88]	; (8003254 <_Z16voltage_can_calcv+0x70>)
 80031fc:	687a      	ldr	r2, [r7, #4]
 80031fe:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8003202:	4413      	add	r3, r2
 8003204:	4a13      	ldr	r2, [pc, #76]	; (8003254 <_Z16voltage_can_calcv+0x70>)
 8003206:	6153      	str	r3, [r2, #20]
		data.voltages.cells_can[i] = (uint8_t)(data.voltages.cells[i] / 1000);
 8003208:	4a12      	ldr	r2, [pc, #72]	; (8003254 <_Z16voltage_can_calcv+0x70>)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003210:	4a11      	ldr	r2, [pc, #68]	; (8003258 <_Z16voltage_can_calcv+0x74>)
 8003212:	fba2 2303 	umull	r2, r3, r2, r3
 8003216:	099b      	lsrs	r3, r3, #6
 8003218:	b29b      	uxth	r3, r3
 800321a:	b2d9      	uxtb	r1, r3
 800321c:	4a0d      	ldr	r2, [pc, #52]	; (8003254 <_Z16voltage_can_calcv+0x70>)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	4413      	add	r3, r2
 8003222:	330c      	adds	r3, #12
 8003224:	460a      	mov	r2, r1
 8003226:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < NUMBER_OF_CELLS; i++)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	3301      	adds	r3, #1
 800322c:	607b      	str	r3, [r7, #4]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2b05      	cmp	r3, #5
 8003232:	dde0      	ble.n	80031f6 <_Z16voltage_can_calcv+0x12>
	}

	data.voltages.total_can = data.voltages.total / 100;
 8003234:	4b07      	ldr	r3, [pc, #28]	; (8003254 <_Z16voltage_can_calcv+0x70>)
 8003236:	695b      	ldr	r3, [r3, #20]
 8003238:	4a08      	ldr	r2, [pc, #32]	; (800325c <_Z16voltage_can_calcv+0x78>)
 800323a:	fba2 2303 	umull	r2, r3, r2, r3
 800323e:	095b      	lsrs	r3, r3, #5
 8003240:	b29a      	uxth	r2, r3
 8003242:	4b04      	ldr	r3, [pc, #16]	; (8003254 <_Z16voltage_can_calcv+0x70>)
 8003244:	831a      	strh	r2, [r3, #24]
}
 8003246:	bf00      	nop
 8003248:	370c      	adds	r7, #12
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr
 8003252:	bf00      	nop
 8003254:	20001478 	.word	0x20001478
 8003258:	10624dd3 	.word	0x10624dd3
 800325c:	51eb851f 	.word	0x51eb851f

08003260 <_Z18start_ltc_functionPv>:
/**
 * Brief:	ltc_task main function
 * Param:	None
 * Retval:	None
 */
void start_ltc_function(void *argument){
 8003260:	b580      	push	{r7, lr}
 8003262:	b082      	sub	sp, #8
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
	  init_PEC15_Table();
 8003268:	f7ff fa60 	bl	800272c <_Z16init_PEC15_Tablev>
	for(;;){

		osDelay(1);
 800326c:	2001      	movs	r0, #1
 800326e:	f00c ffcf 	bl	8010210 <osDelay>
		LTC_start_cell_adc();
 8003272:	f7ff fae9 	bl	8002848 <_Z18LTC_start_cell_adcv>
		osDelay(30);
 8003276:	201e      	movs	r0, #30
 8003278:	f00c ffca 	bl	8010210 <osDelay>

		LTC_get_values_adc(data.voltages.cells);
 800327c:	4805      	ldr	r0, [pc, #20]	; (8003294 <_Z18start_ltc_functionPv+0x34>)
 800327e:	f7ff fb75 	bl	800296c <_Z18LTC_get_values_adcPt>

		min_max_voltage();
 8003282:	f7ff ff29 	bl	80030d8 <_Z15min_max_voltagev>

		voltage_can_calc();
 8003286:	f7ff ffad 	bl	80031e4 <_Z16voltage_can_calcv>

		get_temperatures();
 800328a:	f7ff fedb 	bl	8003044 <_Z16get_temperaturesv>

		min_max_temperature();
 800328e:	f7ff ff63 	bl	8003158 <_Z19min_max_temperaturev>
		osDelay(1);
 8003292:	e7eb      	b.n	800326c <_Z18start_ltc_functionPv+0xc>
 8003294:	20001478 	.word	0x20001478

08003298 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800329c:	f001 fff5 	bl	800528a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80032a0:	f000 f892 	bl	80033c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80032a4:	f000 fcac 	bl	8003c00 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 80032a8:	f000 fc6c 	bl	8003b84 <_ZL11MX_DMA_Initv>
  MX_ADC1_Init();
 80032ac:	f000 f8f0 	bl	8003490 <_ZL12MX_ADC1_Initv>
  MX_ADC2_Init();
 80032b0:	f000 fa0c 	bl	80036cc <_ZL12MX_ADC2_Initv>
  MX_CAN1_Init();
 80032b4:	f000 fa78 	bl	80037a8 <_ZL12MX_CAN1_Initv>
  MX_RTC_Init();
 80032b8:	f000 fab2 	bl	8003820 <_ZL11MX_RTC_Initv>
  MX_SPI1_Init();
 80032bc:	f000 fb20 	bl	8003900 <_ZL12MX_SPI1_Initv>
  MX_TIM3_Init();
 80032c0:	f000 fb60 	bl	8003984 <_ZL12MX_TIM3_Initv>
  MX_TIM6_Init();
 80032c4:	f000 fbbc 	bl	8003a40 <_ZL12MX_TIM6_Initv>
  MX_TIM8_Init();
 80032c8:	f000 fbfa 	bl	8003ac0 <_ZL12MX_TIM8_Initv>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80032cc:	f00c fec4 	bl	8010058 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80032d0:	4a27      	ldr	r2, [pc, #156]	; (8003370 <main+0xd8>)
 80032d2:	2100      	movs	r1, #0
 80032d4:	4827      	ldr	r0, [pc, #156]	; (8003374 <main+0xdc>)
 80032d6:	f00c ff09 	bl	80100ec <osThreadNew>
 80032da:	4603      	mov	r3, r0
 80032dc:	4a26      	ldr	r2, [pc, #152]	; (8003378 <main+0xe0>)
 80032de:	6013      	str	r3, [r2, #0]

  /* creation of ltc_task */
  ltc_taskHandle = osThreadNew(start_ltc_function, NULL, &ltc_task_attributes);
 80032e0:	4a26      	ldr	r2, [pc, #152]	; (800337c <main+0xe4>)
 80032e2:	2100      	movs	r1, #0
 80032e4:	4826      	ldr	r0, [pc, #152]	; (8003380 <main+0xe8>)
 80032e6:	f00c ff01 	bl	80100ec <osThreadNew>
 80032ea:	4603      	mov	r3, r0
 80032ec:	4a25      	ldr	r2, [pc, #148]	; (8003384 <main+0xec>)
 80032ee:	6013      	str	r3, [r2, #0]

  /* creation of soc_update_task */
  soc_update_taskHandle = osThreadNew(start_soc_function, NULL, &soc_update_task_attributes);
 80032f0:	4a25      	ldr	r2, [pc, #148]	; (8003388 <main+0xf0>)
 80032f2:	2100      	movs	r1, #0
 80032f4:	4825      	ldr	r0, [pc, #148]	; (800338c <main+0xf4>)
 80032f6:	f00c fef9 	bl	80100ec <osThreadNew>
 80032fa:	4603      	mov	r3, r0
 80032fc:	4a24      	ldr	r2, [pc, #144]	; (8003390 <main+0xf8>)
 80032fe:	6013      	str	r3, [r2, #0]

  /* creation of balance_task */
  balance_taskHandle = osThreadNew(start_balance_function, NULL, &balance_task_attributes);
 8003300:	4a24      	ldr	r2, [pc, #144]	; (8003394 <main+0xfc>)
 8003302:	2100      	movs	r1, #0
 8003304:	4824      	ldr	r0, [pc, #144]	; (8003398 <main+0x100>)
 8003306:	f00c fef1 	bl	80100ec <osThreadNew>
 800330a:	4603      	mov	r3, r0
 800330c:	4a23      	ldr	r2, [pc, #140]	; (800339c <main+0x104>)
 800330e:	6013      	str	r3, [r2, #0]

  /* creation of comm_err_task */
  comm_err_taskHandle = osThreadNew(start_comm_err_function, NULL, &comm_err_task_attributes);
 8003310:	4a23      	ldr	r2, [pc, #140]	; (80033a0 <main+0x108>)
 8003312:	2100      	movs	r1, #0
 8003314:	4823      	ldr	r0, [pc, #140]	; (80033a4 <main+0x10c>)
 8003316:	f00c fee9 	bl	80100ec <osThreadNew>
 800331a:	4603      	mov	r3, r0
 800331c:	4a22      	ldr	r2, [pc, #136]	; (80033a8 <main+0x110>)
 800331e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */


  HAL_Delay(2000);
 8003320:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003324:	f001 ffea 	bl	80052fc <HAL_Delay>
  HAL_GPIO_WritePin(EFUSE_GPIO_Port, EFUSE_Pin, GPIO_PIN_SET);
 8003328:	2201      	movs	r2, #1
 800332a:	2104      	movs	r1, #4
 800332c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003330:	f005 f8ba 	bl	80084a8 <HAL_GPIO_WritePin>
  HAL_TIM_Base_Start_IT(&htim3);
 8003334:	481d      	ldr	r0, [pc, #116]	; (80033ac <main+0x114>)
 8003336:	f009 f9fb 	bl	800c730 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim6);
 800333a:	481d      	ldr	r0, [pc, #116]	; (80033b0 <main+0x118>)
 800333c:	f009 f990 	bl	800c660 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim8);
 8003340:	481c      	ldr	r0, [pc, #112]	; (80033b4 <main+0x11c>)
 8003342:	f009 f98d 	bl	800c660 <HAL_TIM_Base_Start>


  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8003346:	217f      	movs	r1, #127	; 0x7f
 8003348:	481b      	ldr	r0, [pc, #108]	; (80033b8 <main+0x120>)
 800334a:	f003 fc39 	bl	8006bc0 <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 800334e:	217f      	movs	r1, #127	; 0x7f
 8003350:	481a      	ldr	r0, [pc, #104]	; (80033bc <main+0x124>)
 8003352:	f003 fc35 	bl	8006bc0 <HAL_ADCEx_Calibration_Start>

  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)data.temperatures.adc, MAX_NUMBER_OF_TEMPERATURES);
 8003356:	2208      	movs	r2, #8
 8003358:	4919      	ldr	r1, [pc, #100]	; (80033c0 <main+0x128>)
 800335a:	4817      	ldr	r0, [pc, #92]	; (80033b8 <main+0x120>)
 800335c:	f002 fb74 	bl	8005a48 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc2, (uint32_t*)data.current.adc, NUMBER_OF_CS_SAMPLES);
 8003360:	2264      	movs	r2, #100	; 0x64
 8003362:	4918      	ldr	r1, [pc, #96]	; (80033c4 <main+0x12c>)
 8003364:	4815      	ldr	r0, [pc, #84]	; (80033bc <main+0x124>)
 8003366:	f002 fb6f 	bl	8005a48 <HAL_ADC_Start_DMA>

  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800336a:	f00c fe99 	bl	80100a0 <osKernelStart>
  /* USER CODE BEGIN WHILE */




  while (1)
 800336e:	e7fe      	b.n	800336e <main+0xd6>
 8003370:	08016d64 	.word	0x08016d64
 8003374:	08003d25 	.word	0x08003d25
 8003378:	20001c50 	.word	0x20001c50
 800337c:	08016d88 	.word	0x08016d88
 8003380:	08003261 	.word	0x08003261
 8003384:	20001c54 	.word	0x20001c54
 8003388:	08016dac 	.word	0x08016dac
 800338c:	0800483d 	.word	0x0800483d
 8003390:	20002500 	.word	0x20002500
 8003394:	08016dd0 	.word	0x08016dd0
 8003398:	0800106d 	.word	0x0800106d
 800339c:	20002dac 	.word	0x20002dac
 80033a0:	08016df4 	.word	0x08016df4
 80033a4:	080019bd 	.word	0x080019bd
 80033a8:	20003658 	.word	0x20003658
 80033ac:	20001b6c 	.word	0x20001b6c
 80033b0:	20001bb8 	.word	0x20001bb8
 80033b4:	20001c04 	.word	0x20001c04
 80033b8:	2000191c 	.word	0x2000191c
 80033bc:	20001984 	.word	0x20001984
 80033c0:	200014a0 	.word	0x200014a0
 80033c4:	200014b0 	.word	0x200014b0

080033c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b098      	sub	sp, #96	; 0x60
 80033cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80033ce:	f107 0318 	add.w	r3, r7, #24
 80033d2:	2248      	movs	r2, #72	; 0x48
 80033d4:	2100      	movs	r1, #0
 80033d6:	4618      	mov	r0, r3
 80033d8:	f011 f8ff 	bl	80145da <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80033dc:	1d3b      	adds	r3, r7, #4
 80033de:	2200      	movs	r2, #0
 80033e0:	601a      	str	r2, [r3, #0]
 80033e2:	605a      	str	r2, [r3, #4]
 80033e4:	609a      	str	r2, [r3, #8]
 80033e6:	60da      	str	r2, [r3, #12]
 80033e8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80033ea:	f44f 7000 	mov.w	r0, #512	; 0x200
 80033ee:	f006 fa6b 	bl	80098c8 <HAL_PWREx_ControlVoltageScaling>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	bf14      	ite	ne
 80033f8:	2301      	movne	r3, #1
 80033fa:	2300      	moveq	r3, #0
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d001      	beq.n	8003406 <SystemClock_Config+0x3e>
  {
    Error_Handler();
 8003402:	f000 fcab 	bl	8003d5c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSI
 8003406:	2329      	movs	r3, #41	; 0x29
 8003408:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800340a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800340e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8003410:	2301      	movs	r3, #1
 8003412:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003414:	2301      	movs	r3, #1
 8003416:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003418:	2302      	movs	r3, #2
 800341a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800341c:	2303      	movs	r3, #3
 800341e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 2;
 8003420:	2302      	movs	r3, #2
 8003422:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 16;
 8003424:	2310      	movs	r3, #16
 8003426:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003428:	2302      	movs	r3, #2
 800342a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800342c:	2302      	movs	r3, #2
 800342e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003430:	2302      	movs	r3, #2
 8003432:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003434:	f107 0318 	add.w	r3, r7, #24
 8003438:	4618      	mov	r0, r3
 800343a:	f006 fb4f 	bl	8009adc <HAL_RCC_OscConfig>
 800343e:	4603      	mov	r3, r0
 8003440:	2b00      	cmp	r3, #0
 8003442:	bf14      	ite	ne
 8003444:	2301      	movne	r3, #1
 8003446:	2300      	moveq	r3, #0
 8003448:	b2db      	uxtb	r3, r3
 800344a:	2b00      	cmp	r3, #0
 800344c:	d001      	beq.n	8003452 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800344e:	f000 fc85 	bl	8003d5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003452:	230f      	movs	r3, #15
 8003454:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003456:	2303      	movs	r3, #3
 8003458:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800345a:	2300      	movs	r3, #0
 800345c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800345e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003462:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003464:	2300      	movs	r3, #0
 8003466:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8003468:	1d3b      	adds	r3, r7, #4
 800346a:	2103      	movs	r1, #3
 800346c:	4618      	mov	r0, r3
 800346e:	f006 ffb1 	bl	800a3d4 <HAL_RCC_ClockConfig>
 8003472:	4603      	mov	r3, r0
 8003474:	2b00      	cmp	r3, #0
 8003476:	bf14      	ite	ne
 8003478:	2301      	movne	r3, #1
 800347a:	2300      	moveq	r3, #0
 800347c:	b2db      	uxtb	r3, r3
 800347e:	2b00      	cmp	r3, #0
 8003480:	d001      	beq.n	8003486 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8003482:	f000 fc6b 	bl	8003d5c <Error_Handler>
  }
}
 8003486:	bf00      	nop
 8003488:	3760      	adds	r7, #96	; 0x60
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
	...

08003490 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b08a      	sub	sp, #40	; 0x28
 8003494:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8003496:	f107 031c 	add.w	r3, r7, #28
 800349a:	2200      	movs	r2, #0
 800349c:	601a      	str	r2, [r3, #0]
 800349e:	605a      	str	r2, [r3, #4]
 80034a0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80034a2:	1d3b      	adds	r3, r7, #4
 80034a4:	2200      	movs	r2, #0
 80034a6:	601a      	str	r2, [r3, #0]
 80034a8:	605a      	str	r2, [r3, #4]
 80034aa:	609a      	str	r2, [r3, #8]
 80034ac:	60da      	str	r2, [r3, #12]
 80034ae:	611a      	str	r2, [r3, #16]
 80034b0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80034b2:	4b7c      	ldr	r3, [pc, #496]	; (80036a4 <_ZL12MX_ADC1_Initv+0x214>)
 80034b4:	4a7c      	ldr	r2, [pc, #496]	; (80036a8 <_ZL12MX_ADC1_Initv+0x218>)
 80034b6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80034b8:	4b7a      	ldr	r3, [pc, #488]	; (80036a4 <_ZL12MX_ADC1_Initv+0x214>)
 80034ba:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80034be:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80034c0:	4b78      	ldr	r3, [pc, #480]	; (80036a4 <_ZL12MX_ADC1_Initv+0x214>)
 80034c2:	2200      	movs	r2, #0
 80034c4:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80034c6:	4b77      	ldr	r3, [pc, #476]	; (80036a4 <_ZL12MX_ADC1_Initv+0x214>)
 80034c8:	2200      	movs	r2, #0
 80034ca:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80034cc:	4b75      	ldr	r3, [pc, #468]	; (80036a4 <_ZL12MX_ADC1_Initv+0x214>)
 80034ce:	2201      	movs	r2, #1
 80034d0:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80034d2:	4b74      	ldr	r3, [pc, #464]	; (80036a4 <_ZL12MX_ADC1_Initv+0x214>)
 80034d4:	2204      	movs	r2, #4
 80034d6:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80034d8:	4b72      	ldr	r3, [pc, #456]	; (80036a4 <_ZL12MX_ADC1_Initv+0x214>)
 80034da:	2200      	movs	r2, #0
 80034dc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80034de:	4b71      	ldr	r3, [pc, #452]	; (80036a4 <_ZL12MX_ADC1_Initv+0x214>)
 80034e0:	2201      	movs	r2, #1
 80034e2:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 8;
 80034e4:	4b6f      	ldr	r3, [pc, #444]	; (80036a4 <_ZL12MX_ADC1_Initv+0x214>)
 80034e6:	2208      	movs	r2, #8
 80034e8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80034ea:	4b6e      	ldr	r3, [pc, #440]	; (80036a4 <_ZL12MX_ADC1_Initv+0x214>)
 80034ec:	2200      	movs	r2, #0
 80034ee:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80034f2:	4b6c      	ldr	r3, [pc, #432]	; (80036a4 <_ZL12MX_ADC1_Initv+0x214>)
 80034f4:	2200      	movs	r2, #0
 80034f6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80034f8:	4b6a      	ldr	r3, [pc, #424]	; (80036a4 <_ZL12MX_ADC1_Initv+0x214>)
 80034fa:	2200      	movs	r2, #0
 80034fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80034fe:	4b69      	ldr	r3, [pc, #420]	; (80036a4 <_ZL12MX_ADC1_Initv+0x214>)
 8003500:	2201      	movs	r2, #1
 8003502:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003506:	4b67      	ldr	r3, [pc, #412]	; (80036a4 <_ZL12MX_ADC1_Initv+0x214>)
 8003508:	2200      	movs	r2, #0
 800350a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800350c:	4b65      	ldr	r3, [pc, #404]	; (80036a4 <_ZL12MX_ADC1_Initv+0x214>)
 800350e:	2200      	movs	r2, #0
 8003510:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003514:	4863      	ldr	r0, [pc, #396]	; (80036a4 <_ZL12MX_ADC1_Initv+0x214>)
 8003516:	f002 f945 	bl	80057a4 <HAL_ADC_Init>
 800351a:	4603      	mov	r3, r0
 800351c:	2b00      	cmp	r3, #0
 800351e:	bf14      	ite	ne
 8003520:	2301      	movne	r3, #1
 8003522:	2300      	moveq	r3, #0
 8003524:	b2db      	uxtb	r3, r3
 8003526:	2b00      	cmp	r3, #0
 8003528:	d001      	beq.n	800352e <_ZL12MX_ADC1_Initv+0x9e>
  {
    Error_Handler();
 800352a:	f000 fc17 	bl	8003d5c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800352e:	2300      	movs	r3, #0
 8003530:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8003532:	f107 031c 	add.w	r3, r7, #28
 8003536:	4619      	mov	r1, r3
 8003538:	485a      	ldr	r0, [pc, #360]	; (80036a4 <_ZL12MX_ADC1_Initv+0x214>)
 800353a:	f003 fbd3 	bl	8006ce4 <HAL_ADCEx_MultiModeConfigChannel>
 800353e:	4603      	mov	r3, r0
 8003540:	2b00      	cmp	r3, #0
 8003542:	bf14      	ite	ne
 8003544:	2301      	movne	r3, #1
 8003546:	2300      	moveq	r3, #0
 8003548:	b2db      	uxtb	r3, r3
 800354a:	2b00      	cmp	r3, #0
 800354c:	d001      	beq.n	8003552 <_ZL12MX_ADC1_Initv+0xc2>
  {
    Error_Handler();
 800354e:	f000 fc05 	bl	8003d5c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8003552:	4b56      	ldr	r3, [pc, #344]	; (80036ac <_ZL12MX_ADC1_Initv+0x21c>)
 8003554:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003556:	2306      	movs	r3, #6
 8003558:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 800355a:	2306      	movs	r3, #6
 800355c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800355e:	237f      	movs	r3, #127	; 0x7f
 8003560:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003562:	2304      	movs	r3, #4
 8003564:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8003566:	2300      	movs	r3, #0
 8003568:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800356a:	1d3b      	adds	r3, r7, #4
 800356c:	4619      	mov	r1, r3
 800356e:	484d      	ldr	r0, [pc, #308]	; (80036a4 <_ZL12MX_ADC1_Initv+0x214>)
 8003570:	f002 fd60 	bl	8006034 <HAL_ADC_ConfigChannel>
 8003574:	4603      	mov	r3, r0
 8003576:	2b00      	cmp	r3, #0
 8003578:	bf14      	ite	ne
 800357a:	2301      	movne	r3, #1
 800357c:	2300      	moveq	r3, #0
 800357e:	b2db      	uxtb	r3, r3
 8003580:	2b00      	cmp	r3, #0
 8003582:	d001      	beq.n	8003588 <_ZL12MX_ADC1_Initv+0xf8>
  {
    Error_Handler();
 8003584:	f000 fbea 	bl	8003d5c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8003588:	4b49      	ldr	r3, [pc, #292]	; (80036b0 <_ZL12MX_ADC1_Initv+0x220>)
 800358a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800358c:	230c      	movs	r3, #12
 800358e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003590:	1d3b      	adds	r3, r7, #4
 8003592:	4619      	mov	r1, r3
 8003594:	4843      	ldr	r0, [pc, #268]	; (80036a4 <_ZL12MX_ADC1_Initv+0x214>)
 8003596:	f002 fd4d 	bl	8006034 <HAL_ADC_ConfigChannel>
 800359a:	4603      	mov	r3, r0
 800359c:	2b00      	cmp	r3, #0
 800359e:	bf14      	ite	ne
 80035a0:	2301      	movne	r3, #1
 80035a2:	2300      	moveq	r3, #0
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d001      	beq.n	80035ae <_ZL12MX_ADC1_Initv+0x11e>
  {
    Error_Handler();
 80035aa:	f000 fbd7 	bl	8003d5c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80035ae:	4b41      	ldr	r3, [pc, #260]	; (80036b4 <_ZL12MX_ADC1_Initv+0x224>)
 80035b0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80035b2:	2312      	movs	r3, #18
 80035b4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80035b6:	1d3b      	adds	r3, r7, #4
 80035b8:	4619      	mov	r1, r3
 80035ba:	483a      	ldr	r0, [pc, #232]	; (80036a4 <_ZL12MX_ADC1_Initv+0x214>)
 80035bc:	f002 fd3a 	bl	8006034 <HAL_ADC_ConfigChannel>
 80035c0:	4603      	mov	r3, r0
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	bf14      	ite	ne
 80035c6:	2301      	movne	r3, #1
 80035c8:	2300      	moveq	r3, #0
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d001      	beq.n	80035d4 <_ZL12MX_ADC1_Initv+0x144>
  {
    Error_Handler();
 80035d0:	f000 fbc4 	bl	8003d5c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80035d4:	4b38      	ldr	r3, [pc, #224]	; (80036b8 <_ZL12MX_ADC1_Initv+0x228>)
 80035d6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80035d8:	2318      	movs	r3, #24
 80035da:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80035dc:	1d3b      	adds	r3, r7, #4
 80035de:	4619      	mov	r1, r3
 80035e0:	4830      	ldr	r0, [pc, #192]	; (80036a4 <_ZL12MX_ADC1_Initv+0x214>)
 80035e2:	f002 fd27 	bl	8006034 <HAL_ADC_ConfigChannel>
 80035e6:	4603      	mov	r3, r0
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	bf14      	ite	ne
 80035ec:	2301      	movne	r3, #1
 80035ee:	2300      	moveq	r3, #0
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d001      	beq.n	80035fa <_ZL12MX_ADC1_Initv+0x16a>
  {
    Error_Handler();
 80035f6:	f000 fbb1 	bl	8003d5c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80035fa:	4b30      	ldr	r3, [pc, #192]	; (80036bc <_ZL12MX_ADC1_Initv+0x22c>)
 80035fc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80035fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003602:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003604:	1d3b      	adds	r3, r7, #4
 8003606:	4619      	mov	r1, r3
 8003608:	4826      	ldr	r0, [pc, #152]	; (80036a4 <_ZL12MX_ADC1_Initv+0x214>)
 800360a:	f002 fd13 	bl	8006034 <HAL_ADC_ConfigChannel>
 800360e:	4603      	mov	r3, r0
 8003610:	2b00      	cmp	r3, #0
 8003612:	bf14      	ite	ne
 8003614:	2301      	movne	r3, #1
 8003616:	2300      	moveq	r3, #0
 8003618:	b2db      	uxtb	r3, r3
 800361a:	2b00      	cmp	r3, #0
 800361c:	d001      	beq.n	8003622 <_ZL12MX_ADC1_Initv+0x192>
  {
    Error_Handler();
 800361e:	f000 fb9d 	bl	8003d5c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8003622:	4b27      	ldr	r3, [pc, #156]	; (80036c0 <_ZL12MX_ADC1_Initv+0x230>)
 8003624:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8003626:	f44f 7383 	mov.w	r3, #262	; 0x106
 800362a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800362c:	1d3b      	adds	r3, r7, #4
 800362e:	4619      	mov	r1, r3
 8003630:	481c      	ldr	r0, [pc, #112]	; (80036a4 <_ZL12MX_ADC1_Initv+0x214>)
 8003632:	f002 fcff 	bl	8006034 <HAL_ADC_ConfigChannel>
 8003636:	4603      	mov	r3, r0
 8003638:	2b00      	cmp	r3, #0
 800363a:	bf14      	ite	ne
 800363c:	2301      	movne	r3, #1
 800363e:	2300      	moveq	r3, #0
 8003640:	b2db      	uxtb	r3, r3
 8003642:	2b00      	cmp	r3, #0
 8003644:	d001      	beq.n	800364a <_ZL12MX_ADC1_Initv+0x1ba>
  {
    Error_Handler();
 8003646:	f000 fb89 	bl	8003d5c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800364a:	4b1e      	ldr	r3, [pc, #120]	; (80036c4 <_ZL12MX_ADC1_Initv+0x234>)
 800364c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 800364e:	f44f 7386 	mov.w	r3, #268	; 0x10c
 8003652:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003654:	1d3b      	adds	r3, r7, #4
 8003656:	4619      	mov	r1, r3
 8003658:	4812      	ldr	r0, [pc, #72]	; (80036a4 <_ZL12MX_ADC1_Initv+0x214>)
 800365a:	f002 fceb 	bl	8006034 <HAL_ADC_ConfigChannel>
 800365e:	4603      	mov	r3, r0
 8003660:	2b00      	cmp	r3, #0
 8003662:	bf14      	ite	ne
 8003664:	2301      	movne	r3, #1
 8003666:	2300      	moveq	r3, #0
 8003668:	b2db      	uxtb	r3, r3
 800366a:	2b00      	cmp	r3, #0
 800366c:	d001      	beq.n	8003672 <_ZL12MX_ADC1_Initv+0x1e2>
  {
    Error_Handler();
 800366e:	f000 fb75 	bl	8003d5c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8003672:	4b15      	ldr	r3, [pc, #84]	; (80036c8 <_ZL12MX_ADC1_Initv+0x238>)
 8003674:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8003676:	f44f 7389 	mov.w	r3, #274	; 0x112
 800367a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800367c:	1d3b      	adds	r3, r7, #4
 800367e:	4619      	mov	r1, r3
 8003680:	4808      	ldr	r0, [pc, #32]	; (80036a4 <_ZL12MX_ADC1_Initv+0x214>)
 8003682:	f002 fcd7 	bl	8006034 <HAL_ADC_ConfigChannel>
 8003686:	4603      	mov	r3, r0
 8003688:	2b00      	cmp	r3, #0
 800368a:	bf14      	ite	ne
 800368c:	2301      	movne	r3, #1
 800368e:	2300      	moveq	r3, #0
 8003690:	b2db      	uxtb	r3, r3
 8003692:	2b00      	cmp	r3, #0
 8003694:	d001      	beq.n	800369a <_ZL12MX_ADC1_Initv+0x20a>
  {
    Error_Handler();
 8003696:	f000 fb61 	bl	8003d5c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800369a:	bf00      	nop
 800369c:	3728      	adds	r7, #40	; 0x28
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	2000191c 	.word	0x2000191c
 80036a8:	50040000 	.word	0x50040000
 80036ac:	21800100 	.word	0x21800100
 80036b0:	25b00200 	.word	0x25b00200
 80036b4:	2a000400 	.word	0x2a000400
 80036b8:	2e300800 	.word	0x2e300800
 80036bc:	32601000 	.word	0x32601000
 80036c0:	36902000 	.word	0x36902000
 80036c4:	3ac04000 	.word	0x3ac04000
 80036c8:	3ef08000 	.word	0x3ef08000

080036cc <_ZL12MX_ADC2_Initv>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b086      	sub	sp, #24
 80036d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80036d2:	463b      	mov	r3, r7
 80036d4:	2200      	movs	r2, #0
 80036d6:	601a      	str	r2, [r3, #0]
 80036d8:	605a      	str	r2, [r3, #4]
 80036da:	609a      	str	r2, [r3, #8]
 80036dc:	60da      	str	r2, [r3, #12]
 80036de:	611a      	str	r2, [r3, #16]
 80036e0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80036e2:	4b2e      	ldr	r3, [pc, #184]	; (800379c <_ZL12MX_ADC2_Initv+0xd0>)
 80036e4:	4a2e      	ldr	r2, [pc, #184]	; (80037a0 <_ZL12MX_ADC2_Initv+0xd4>)
 80036e6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80036e8:	4b2c      	ldr	r3, [pc, #176]	; (800379c <_ZL12MX_ADC2_Initv+0xd0>)
 80036ea:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80036ee:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80036f0:	4b2a      	ldr	r3, [pc, #168]	; (800379c <_ZL12MX_ADC2_Initv+0xd0>)
 80036f2:	2200      	movs	r2, #0
 80036f4:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80036f6:	4b29      	ldr	r3, [pc, #164]	; (800379c <_ZL12MX_ADC2_Initv+0xd0>)
 80036f8:	2200      	movs	r2, #0
 80036fa:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80036fc:	4b27      	ldr	r3, [pc, #156]	; (800379c <_ZL12MX_ADC2_Initv+0xd0>)
 80036fe:	2200      	movs	r2, #0
 8003700:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003702:	4b26      	ldr	r3, [pc, #152]	; (800379c <_ZL12MX_ADC2_Initv+0xd0>)
 8003704:	2204      	movs	r2, #4
 8003706:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8003708:	4b24      	ldr	r3, [pc, #144]	; (800379c <_ZL12MX_ADC2_Initv+0xd0>)
 800370a:	2200      	movs	r2, #0
 800370c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = ENABLE;
 800370e:	4b23      	ldr	r3, [pc, #140]	; (800379c <_ZL12MX_ADC2_Initv+0xd0>)
 8003710:	2201      	movs	r2, #1
 8003712:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8003714:	4b21      	ldr	r3, [pc, #132]	; (800379c <_ZL12MX_ADC2_Initv+0xd0>)
 8003716:	2201      	movs	r2, #1
 8003718:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800371a:	4b20      	ldr	r3, [pc, #128]	; (800379c <_ZL12MX_ADC2_Initv+0xd0>)
 800371c:	2200      	movs	r2, #0
 800371e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003722:	4b1e      	ldr	r3, [pc, #120]	; (800379c <_ZL12MX_ADC2_Initv+0xd0>)
 8003724:	2200      	movs	r2, #0
 8003726:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003728:	4b1c      	ldr	r3, [pc, #112]	; (800379c <_ZL12MX_ADC2_Initv+0xd0>)
 800372a:	2200      	movs	r2, #0
 800372c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800372e:	4b1b      	ldr	r3, [pc, #108]	; (800379c <_ZL12MX_ADC2_Initv+0xd0>)
 8003730:	2201      	movs	r2, #1
 8003732:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003736:	4b19      	ldr	r3, [pc, #100]	; (800379c <_ZL12MX_ADC2_Initv+0xd0>)
 8003738:	2200      	movs	r2, #0
 800373a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 800373c:	4b17      	ldr	r3, [pc, #92]	; (800379c <_ZL12MX_ADC2_Initv+0xd0>)
 800373e:	2200      	movs	r2, #0
 8003740:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8003744:	4815      	ldr	r0, [pc, #84]	; (800379c <_ZL12MX_ADC2_Initv+0xd0>)
 8003746:	f002 f82d 	bl	80057a4 <HAL_ADC_Init>
 800374a:	4603      	mov	r3, r0
 800374c:	2b00      	cmp	r3, #0
 800374e:	bf14      	ite	ne
 8003750:	2301      	movne	r3, #1
 8003752:	2300      	moveq	r3, #0
 8003754:	b2db      	uxtb	r3, r3
 8003756:	2b00      	cmp	r3, #0
 8003758:	d001      	beq.n	800375e <_ZL12MX_ADC2_Initv+0x92>
  {
    Error_Handler();
 800375a:	f000 faff 	bl	8003d5c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 800375e:	4b11      	ldr	r3, [pc, #68]	; (80037a4 <_ZL12MX_ADC2_Initv+0xd8>)
 8003760:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003762:	2306      	movs	r3, #6
 8003764:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8003766:	2306      	movs	r3, #6
 8003768:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800376a:	237f      	movs	r3, #127	; 0x7f
 800376c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_1;
 800376e:	2300      	movs	r3, #0
 8003770:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8003772:	2300      	movs	r3, #0
 8003774:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003776:	463b      	mov	r3, r7
 8003778:	4619      	mov	r1, r3
 800377a:	4808      	ldr	r0, [pc, #32]	; (800379c <_ZL12MX_ADC2_Initv+0xd0>)
 800377c:	f002 fc5a 	bl	8006034 <HAL_ADC_ConfigChannel>
 8003780:	4603      	mov	r3, r0
 8003782:	2b00      	cmp	r3, #0
 8003784:	bf14      	ite	ne
 8003786:	2301      	movne	r3, #1
 8003788:	2300      	moveq	r3, #0
 800378a:	b2db      	uxtb	r3, r3
 800378c:	2b00      	cmp	r3, #0
 800378e:	d001      	beq.n	8003794 <_ZL12MX_ADC2_Initv+0xc8>
  {
    Error_Handler();
 8003790:	f000 fae4 	bl	8003d5c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8003794:	bf00      	nop
 8003796:	3718      	adds	r7, #24
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}
 800379c:	20001984 	.word	0x20001984
 80037a0:	50040100 	.word	0x50040100
 80037a4:	43210000 	.word	0x43210000

080037a8 <_ZL12MX_CAN1_Initv>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80037ac:	4b1a      	ldr	r3, [pc, #104]	; (8003818 <_ZL12MX_CAN1_Initv+0x70>)
 80037ae:	4a1b      	ldr	r2, [pc, #108]	; (800381c <_ZL12MX_CAN1_Initv+0x74>)
 80037b0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 2;
 80037b2:	4b19      	ldr	r3, [pc, #100]	; (8003818 <_ZL12MX_CAN1_Initv+0x70>)
 80037b4:	2202      	movs	r2, #2
 80037b6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80037b8:	4b17      	ldr	r3, [pc, #92]	; (8003818 <_ZL12MX_CAN1_Initv+0x70>)
 80037ba:	2200      	movs	r2, #0
 80037bc:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80037be:	4b16      	ldr	r3, [pc, #88]	; (8003818 <_ZL12MX_CAN1_Initv+0x70>)
 80037c0:	2200      	movs	r2, #0
 80037c2:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 80037c4:	4b14      	ldr	r3, [pc, #80]	; (8003818 <_ZL12MX_CAN1_Initv+0x70>)
 80037c6:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 80037ca:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80037cc:	4b12      	ldr	r3, [pc, #72]	; (8003818 <_ZL12MX_CAN1_Initv+0x70>)
 80037ce:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80037d2:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80037d4:	4b10      	ldr	r3, [pc, #64]	; (8003818 <_ZL12MX_CAN1_Initv+0x70>)
 80037d6:	2200      	movs	r2, #0
 80037d8:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80037da:	4b0f      	ldr	r3, [pc, #60]	; (8003818 <_ZL12MX_CAN1_Initv+0x70>)
 80037dc:	2200      	movs	r2, #0
 80037de:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80037e0:	4b0d      	ldr	r3, [pc, #52]	; (8003818 <_ZL12MX_CAN1_Initv+0x70>)
 80037e2:	2200      	movs	r2, #0
 80037e4:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80037e6:	4b0c      	ldr	r3, [pc, #48]	; (8003818 <_ZL12MX_CAN1_Initv+0x70>)
 80037e8:	2200      	movs	r2, #0
 80037ea:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80037ec:	4b0a      	ldr	r3, [pc, #40]	; (8003818 <_ZL12MX_CAN1_Initv+0x70>)
 80037ee:	2200      	movs	r2, #0
 80037f0:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80037f2:	4b09      	ldr	r3, [pc, #36]	; (8003818 <_ZL12MX_CAN1_Initv+0x70>)
 80037f4:	2200      	movs	r2, #0
 80037f6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80037f8:	4807      	ldr	r0, [pc, #28]	; (8003818 <_ZL12MX_CAN1_Initv+0x70>)
 80037fa:	f003 fb17 	bl	8006e2c <HAL_CAN_Init>
 80037fe:	4603      	mov	r3, r0
 8003800:	2b00      	cmp	r3, #0
 8003802:	bf14      	ite	ne
 8003804:	2301      	movne	r3, #1
 8003806:	2300      	moveq	r3, #0
 8003808:	b2db      	uxtb	r3, r3
 800380a:	2b00      	cmp	r3, #0
 800380c:	d001      	beq.n	8003812 <_ZL12MX_CAN1_Initv+0x6a>
  {
    Error_Handler();
 800380e:	f000 faa5 	bl	8003d5c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8003812:	bf00      	nop
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	20001aac 	.word	0x20001aac
 800381c:	40006400 	.word	0x40006400

08003820 <_ZL11MX_RTC_Initv>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b086      	sub	sp, #24
 8003824:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8003826:	1d3b      	adds	r3, r7, #4
 8003828:	2200      	movs	r2, #0
 800382a:	601a      	str	r2, [r3, #0]
 800382c:	605a      	str	r2, [r3, #4]
 800382e:	609a      	str	r2, [r3, #8]
 8003830:	60da      	str	r2, [r3, #12]
 8003832:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8003834:	2300      	movs	r3, #0
 8003836:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003838:	4b2f      	ldr	r3, [pc, #188]	; (80038f8 <_ZL11MX_RTC_Initv+0xd8>)
 800383a:	4a30      	ldr	r2, [pc, #192]	; (80038fc <_ZL11MX_RTC_Initv+0xdc>)
 800383c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800383e:	4b2e      	ldr	r3, [pc, #184]	; (80038f8 <_ZL11MX_RTC_Initv+0xd8>)
 8003840:	2200      	movs	r2, #0
 8003842:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8003844:	4b2c      	ldr	r3, [pc, #176]	; (80038f8 <_ZL11MX_RTC_Initv+0xd8>)
 8003846:	227f      	movs	r2, #127	; 0x7f
 8003848:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 800384a:	4b2b      	ldr	r3, [pc, #172]	; (80038f8 <_ZL11MX_RTC_Initv+0xd8>)
 800384c:	22ff      	movs	r2, #255	; 0xff
 800384e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003850:	4b29      	ldr	r3, [pc, #164]	; (80038f8 <_ZL11MX_RTC_Initv+0xd8>)
 8003852:	2200      	movs	r2, #0
 8003854:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8003856:	4b28      	ldr	r3, [pc, #160]	; (80038f8 <_ZL11MX_RTC_Initv+0xd8>)
 8003858:	2200      	movs	r2, #0
 800385a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800385c:	4b26      	ldr	r3, [pc, #152]	; (80038f8 <_ZL11MX_RTC_Initv+0xd8>)
 800385e:	2200      	movs	r2, #0
 8003860:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003862:	4b25      	ldr	r3, [pc, #148]	; (80038f8 <_ZL11MX_RTC_Initv+0xd8>)
 8003864:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003868:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 800386a:	4b23      	ldr	r3, [pc, #140]	; (80038f8 <_ZL11MX_RTC_Initv+0xd8>)
 800386c:	2200      	movs	r2, #0
 800386e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003870:	4821      	ldr	r0, [pc, #132]	; (80038f8 <_ZL11MX_RTC_Initv+0xd8>)
 8003872:	f007 fdd9 	bl	800b428 <HAL_RTC_Init>
 8003876:	4603      	mov	r3, r0
 8003878:	2b00      	cmp	r3, #0
 800387a:	bf14      	ite	ne
 800387c:	2301      	movne	r3, #1
 800387e:	2300      	moveq	r3, #0
 8003880:	b2db      	uxtb	r3, r3
 8003882:	2b00      	cmp	r3, #0
 8003884:	d001      	beq.n	800388a <_ZL11MX_RTC_Initv+0x6a>
  {
    Error_Handler();
 8003886:	f000 fa69 	bl	8003d5c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800388a:	2300      	movs	r3, #0
 800388c:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 800388e:	2300      	movs	r3, #0
 8003890:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8003892:	2300      	movs	r3, #0
 8003894:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003896:	2300      	movs	r3, #0
 8003898:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800389a:	2300      	movs	r3, #0
 800389c:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800389e:	1d3b      	adds	r3, r7, #4
 80038a0:	2201      	movs	r2, #1
 80038a2:	4619      	mov	r1, r3
 80038a4:	4814      	ldr	r0, [pc, #80]	; (80038f8 <_ZL11MX_RTC_Initv+0xd8>)
 80038a6:	f007 fe4f 	bl	800b548 <HAL_RTC_SetTime>
 80038aa:	4603      	mov	r3, r0
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	bf14      	ite	ne
 80038b0:	2301      	movne	r3, #1
 80038b2:	2300      	moveq	r3, #0
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d001      	beq.n	80038be <_ZL11MX_RTC_Initv+0x9e>
  {
    Error_Handler();
 80038ba:	f000 fa4f 	bl	8003d5c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80038be:	2301      	movs	r3, #1
 80038c0:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80038c2:	2301      	movs	r3, #1
 80038c4:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 80038c6:	2301      	movs	r3, #1
 80038c8:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 80038ca:	2300      	movs	r3, #0
 80038cc:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80038ce:	463b      	mov	r3, r7
 80038d0:	2201      	movs	r2, #1
 80038d2:	4619      	mov	r1, r3
 80038d4:	4808      	ldr	r0, [pc, #32]	; (80038f8 <_ZL11MX_RTC_Initv+0xd8>)
 80038d6:	f007 ff39 	bl	800b74c <HAL_RTC_SetDate>
 80038da:	4603      	mov	r3, r0
 80038dc:	2b00      	cmp	r3, #0
 80038de:	bf14      	ite	ne
 80038e0:	2301      	movne	r3, #1
 80038e2:	2300      	moveq	r3, #0
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d001      	beq.n	80038ee <_ZL11MX_RTC_Initv+0xce>
  {
    Error_Handler();
 80038ea:	f000 fa37 	bl	8003d5c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80038ee:	bf00      	nop
 80038f0:	3718      	adds	r7, #24
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	20001ad4 	.word	0x20001ad4
 80038fc:	40002800 	.word	0x40002800

08003900 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003904:	4b1d      	ldr	r3, [pc, #116]	; (800397c <_ZL12MX_SPI1_Initv+0x7c>)
 8003906:	4a1e      	ldr	r2, [pc, #120]	; (8003980 <_ZL12MX_SPI1_Initv+0x80>)
 8003908:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800390a:	4b1c      	ldr	r3, [pc, #112]	; (800397c <_ZL12MX_SPI1_Initv+0x7c>)
 800390c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003910:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003912:	4b1a      	ldr	r3, [pc, #104]	; (800397c <_ZL12MX_SPI1_Initv+0x7c>)
 8003914:	2200      	movs	r2, #0
 8003916:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003918:	4b18      	ldr	r3, [pc, #96]	; (800397c <_ZL12MX_SPI1_Initv+0x7c>)
 800391a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800391e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8003920:	4b16      	ldr	r3, [pc, #88]	; (800397c <_ZL12MX_SPI1_Initv+0x7c>)
 8003922:	2202      	movs	r2, #2
 8003924:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003926:	4b15      	ldr	r3, [pc, #84]	; (800397c <_ZL12MX_SPI1_Initv+0x7c>)
 8003928:	2201      	movs	r2, #1
 800392a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800392c:	4b13      	ldr	r3, [pc, #76]	; (800397c <_ZL12MX_SPI1_Initv+0x7c>)
 800392e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003932:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8003934:	4b11      	ldr	r3, [pc, #68]	; (800397c <_ZL12MX_SPI1_Initv+0x7c>)
 8003936:	2228      	movs	r2, #40	; 0x28
 8003938:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800393a:	4b10      	ldr	r3, [pc, #64]	; (800397c <_ZL12MX_SPI1_Initv+0x7c>)
 800393c:	2200      	movs	r2, #0
 800393e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003940:	4b0e      	ldr	r3, [pc, #56]	; (800397c <_ZL12MX_SPI1_Initv+0x7c>)
 8003942:	2200      	movs	r2, #0
 8003944:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003946:	4b0d      	ldr	r3, [pc, #52]	; (800397c <_ZL12MX_SPI1_Initv+0x7c>)
 8003948:	2200      	movs	r2, #0
 800394a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800394c:	4b0b      	ldr	r3, [pc, #44]	; (800397c <_ZL12MX_SPI1_Initv+0x7c>)
 800394e:	2207      	movs	r2, #7
 8003950:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003952:	4b0a      	ldr	r3, [pc, #40]	; (800397c <_ZL12MX_SPI1_Initv+0x7c>)
 8003954:	2200      	movs	r2, #0
 8003956:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8003958:	4b08      	ldr	r3, [pc, #32]	; (800397c <_ZL12MX_SPI1_Initv+0x7c>)
 800395a:	2200      	movs	r2, #0
 800395c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800395e:	4807      	ldr	r0, [pc, #28]	; (800397c <_ZL12MX_SPI1_Initv+0x7c>)
 8003960:	f008 f89e 	bl	800baa0 <HAL_SPI_Init>
 8003964:	4603      	mov	r3, r0
 8003966:	2b00      	cmp	r3, #0
 8003968:	bf14      	ite	ne
 800396a:	2301      	movne	r3, #1
 800396c:	2300      	moveq	r3, #0
 800396e:	b2db      	uxtb	r3, r3
 8003970:	2b00      	cmp	r3, #0
 8003972:	d001      	beq.n	8003978 <_ZL12MX_SPI1_Initv+0x78>
  {
    Error_Handler();
 8003974:	f000 f9f2 	bl	8003d5c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003978:	bf00      	nop
 800397a:	bd80      	pop	{r7, pc}
 800397c:	20001b08 	.word	0x20001b08
 8003980:	40013000 	.word	0x40013000

08003984 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b088      	sub	sp, #32
 8003988:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800398a:	f107 0310 	add.w	r3, r7, #16
 800398e:	2200      	movs	r2, #0
 8003990:	601a      	str	r2, [r3, #0]
 8003992:	605a      	str	r2, [r3, #4]
 8003994:	609a      	str	r2, [r3, #8]
 8003996:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003998:	1d3b      	adds	r3, r7, #4
 800399a:	2200      	movs	r2, #0
 800399c:	601a      	str	r2, [r3, #0]
 800399e:	605a      	str	r2, [r3, #4]
 80039a0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80039a2:	4b25      	ldr	r3, [pc, #148]	; (8003a38 <_ZL12MX_TIM3_Initv+0xb4>)
 80039a4:	4a25      	ldr	r2, [pc, #148]	; (8003a3c <_ZL12MX_TIM3_Initv+0xb8>)
 80039a6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 6399;
 80039a8:	4b23      	ldr	r3, [pc, #140]	; (8003a38 <_ZL12MX_TIM3_Initv+0xb4>)
 80039aa:	f641 02ff 	movw	r2, #6399	; 0x18ff
 80039ae:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039b0:	4b21      	ldr	r3, [pc, #132]	; (8003a38 <_ZL12MX_TIM3_Initv+0xb4>)
 80039b2:	2200      	movs	r2, #0
 80039b4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 49;
 80039b6:	4b20      	ldr	r3, [pc, #128]	; (8003a38 <_ZL12MX_TIM3_Initv+0xb4>)
 80039b8:	2231      	movs	r2, #49	; 0x31
 80039ba:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80039bc:	4b1e      	ldr	r3, [pc, #120]	; (8003a38 <_ZL12MX_TIM3_Initv+0xb4>)
 80039be:	2200      	movs	r2, #0
 80039c0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80039c2:	4b1d      	ldr	r3, [pc, #116]	; (8003a38 <_ZL12MX_TIM3_Initv+0xb4>)
 80039c4:	2200      	movs	r2, #0
 80039c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80039c8:	481b      	ldr	r0, [pc, #108]	; (8003a38 <_ZL12MX_TIM3_Initv+0xb4>)
 80039ca:	f008 fdf1 	bl	800c5b0 <HAL_TIM_Base_Init>
 80039ce:	4603      	mov	r3, r0
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	bf14      	ite	ne
 80039d4:	2301      	movne	r3, #1
 80039d6:	2300      	moveq	r3, #0
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d001      	beq.n	80039e2 <_ZL12MX_TIM3_Initv+0x5e>
  {
    Error_Handler();
 80039de:	f000 f9bd 	bl	8003d5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80039e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80039e6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80039e8:	f107 0310 	add.w	r3, r7, #16
 80039ec:	4619      	mov	r1, r3
 80039ee:	4812      	ldr	r0, [pc, #72]	; (8003a38 <_ZL12MX_TIM3_Initv+0xb4>)
 80039f0:	f009 f82d 	bl	800ca4e <HAL_TIM_ConfigClockSource>
 80039f4:	4603      	mov	r3, r0
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	bf14      	ite	ne
 80039fa:	2301      	movne	r3, #1
 80039fc:	2300      	moveq	r3, #0
 80039fe:	b2db      	uxtb	r3, r3
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d001      	beq.n	8003a08 <_ZL12MX_TIM3_Initv+0x84>
  {
    Error_Handler();
 8003a04:	f000 f9aa 	bl	8003d5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003a10:	1d3b      	adds	r3, r7, #4
 8003a12:	4619      	mov	r1, r3
 8003a14:	4808      	ldr	r0, [pc, #32]	; (8003a38 <_ZL12MX_TIM3_Initv+0xb4>)
 8003a16:	f009 fa3f 	bl	800ce98 <HAL_TIMEx_MasterConfigSynchronization>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	bf14      	ite	ne
 8003a20:	2301      	movne	r3, #1
 8003a22:	2300      	moveq	r3, #0
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d001      	beq.n	8003a2e <_ZL12MX_TIM3_Initv+0xaa>
  {
    Error_Handler();
 8003a2a:	f000 f997 	bl	8003d5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003a2e:	bf00      	nop
 8003a30:	3720      	adds	r7, #32
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	20001b6c 	.word	0x20001b6c
 8003a3c:	40000400 	.word	0x40000400

08003a40 <_ZL12MX_TIM6_Initv>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b084      	sub	sp, #16
 8003a44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a46:	1d3b      	adds	r3, r7, #4
 8003a48:	2200      	movs	r2, #0
 8003a4a:	601a      	str	r2, [r3, #0]
 8003a4c:	605a      	str	r2, [r3, #4]
 8003a4e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003a50:	4b19      	ldr	r3, [pc, #100]	; (8003ab8 <_ZL12MX_TIM6_Initv+0x78>)
 8003a52:	4a1a      	ldr	r2, [pc, #104]	; (8003abc <_ZL12MX_TIM6_Initv+0x7c>)
 8003a54:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 2399;
 8003a56:	4b18      	ldr	r3, [pc, #96]	; (8003ab8 <_ZL12MX_TIM6_Initv+0x78>)
 8003a58:	f640 125f 	movw	r2, #2399	; 0x95f
 8003a5c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a5e:	4b16      	ldr	r3, [pc, #88]	; (8003ab8 <_ZL12MX_TIM6_Initv+0x78>)
 8003a60:	2200      	movs	r2, #0
 8003a62:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9;
 8003a64:	4b14      	ldr	r3, [pc, #80]	; (8003ab8 <_ZL12MX_TIM6_Initv+0x78>)
 8003a66:	2209      	movs	r2, #9
 8003a68:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a6a:	4b13      	ldr	r3, [pc, #76]	; (8003ab8 <_ZL12MX_TIM6_Initv+0x78>)
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003a70:	4811      	ldr	r0, [pc, #68]	; (8003ab8 <_ZL12MX_TIM6_Initv+0x78>)
 8003a72:	f008 fd9d 	bl	800c5b0 <HAL_TIM_Base_Init>
 8003a76:	4603      	mov	r3, r0
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	bf14      	ite	ne
 8003a7c:	2301      	movne	r3, #1
 8003a7e:	2300      	moveq	r3, #0
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d001      	beq.n	8003a8a <_ZL12MX_TIM6_Initv+0x4a>
  {
    Error_Handler();
 8003a86:	f000 f969 	bl	8003d5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003a8a:	2320      	movs	r3, #32
 8003a8c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003a92:	1d3b      	adds	r3, r7, #4
 8003a94:	4619      	mov	r1, r3
 8003a96:	4808      	ldr	r0, [pc, #32]	; (8003ab8 <_ZL12MX_TIM6_Initv+0x78>)
 8003a98:	f009 f9fe 	bl	800ce98 <HAL_TIMEx_MasterConfigSynchronization>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	bf14      	ite	ne
 8003aa2:	2301      	movne	r3, #1
 8003aa4:	2300      	moveq	r3, #0
 8003aa6:	b2db      	uxtb	r3, r3
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d001      	beq.n	8003ab0 <_ZL12MX_TIM6_Initv+0x70>
  {
    Error_Handler();
 8003aac:	f000 f956 	bl	8003d5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003ab0:	bf00      	nop
 8003ab2:	3710      	adds	r7, #16
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	20001bb8 	.word	0x20001bb8
 8003abc:	40001000 	.word	0x40001000

08003ac0 <_ZL12MX_TIM8_Initv>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b088      	sub	sp, #32
 8003ac4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003ac6:	f107 0310 	add.w	r3, r7, #16
 8003aca:	2200      	movs	r2, #0
 8003acc:	601a      	str	r2, [r3, #0]
 8003ace:	605a      	str	r2, [r3, #4]
 8003ad0:	609a      	str	r2, [r3, #8]
 8003ad2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ad4:	1d3b      	adds	r3, r7, #4
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	601a      	str	r2, [r3, #0]
 8003ada:	605a      	str	r2, [r3, #4]
 8003adc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8003ade:	4b27      	ldr	r3, [pc, #156]	; (8003b7c <_ZL12MX_TIM8_Initv+0xbc>)
 8003ae0:	4a27      	ldr	r2, [pc, #156]	; (8003b80 <_ZL12MX_TIM8_Initv+0xc0>)
 8003ae2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 95;
 8003ae4:	4b25      	ldr	r3, [pc, #148]	; (8003b7c <_ZL12MX_TIM8_Initv+0xbc>)
 8003ae6:	225f      	movs	r2, #95	; 0x5f
 8003ae8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003aea:	4b24      	ldr	r3, [pc, #144]	; (8003b7c <_ZL12MX_TIM8_Initv+0xbc>)
 8003aec:	2200      	movs	r2, #0
 8003aee:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 49;
 8003af0:	4b22      	ldr	r3, [pc, #136]	; (8003b7c <_ZL12MX_TIM8_Initv+0xbc>)
 8003af2:	2231      	movs	r2, #49	; 0x31
 8003af4:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003af6:	4b21      	ldr	r3, [pc, #132]	; (8003b7c <_ZL12MX_TIM8_Initv+0xbc>)
 8003af8:	2200      	movs	r2, #0
 8003afa:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8003afc:	4b1f      	ldr	r3, [pc, #124]	; (8003b7c <_ZL12MX_TIM8_Initv+0xbc>)
 8003afe:	2200      	movs	r2, #0
 8003b00:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b02:	4b1e      	ldr	r3, [pc, #120]	; (8003b7c <_ZL12MX_TIM8_Initv+0xbc>)
 8003b04:	2200      	movs	r2, #0
 8003b06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8003b08:	481c      	ldr	r0, [pc, #112]	; (8003b7c <_ZL12MX_TIM8_Initv+0xbc>)
 8003b0a:	f008 fd51 	bl	800c5b0 <HAL_TIM_Base_Init>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	bf14      	ite	ne
 8003b14:	2301      	movne	r3, #1
 8003b16:	2300      	moveq	r3, #0
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d001      	beq.n	8003b22 <_ZL12MX_TIM8_Initv+0x62>
  {
    Error_Handler();
 8003b1e:	f000 f91d 	bl	8003d5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003b22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b26:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8003b28:	f107 0310 	add.w	r3, r7, #16
 8003b2c:	4619      	mov	r1, r3
 8003b2e:	4813      	ldr	r0, [pc, #76]	; (8003b7c <_ZL12MX_TIM8_Initv+0xbc>)
 8003b30:	f008 ff8d 	bl	800ca4e <HAL_TIM_ConfigClockSource>
 8003b34:	4603      	mov	r3, r0
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	bf14      	ite	ne
 8003b3a:	2301      	movne	r3, #1
 8003b3c:	2300      	moveq	r3, #0
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d001      	beq.n	8003b48 <_ZL12MX_TIM8_Initv+0x88>
  {
    Error_Handler();
 8003b44:	f000 f90a 	bl	8003d5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003b48:	2320      	movs	r3, #32
 8003b4a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_UPDATE;
 8003b4c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003b50:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b52:	2300      	movs	r3, #0
 8003b54:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003b56:	1d3b      	adds	r3, r7, #4
 8003b58:	4619      	mov	r1, r3
 8003b5a:	4808      	ldr	r0, [pc, #32]	; (8003b7c <_ZL12MX_TIM8_Initv+0xbc>)
 8003b5c:	f009 f99c 	bl	800ce98 <HAL_TIMEx_MasterConfigSynchronization>
 8003b60:	4603      	mov	r3, r0
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	bf14      	ite	ne
 8003b66:	2301      	movne	r3, #1
 8003b68:	2300      	moveq	r3, #0
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d001      	beq.n	8003b74 <_ZL12MX_TIM8_Initv+0xb4>
  {
    Error_Handler();
 8003b70:	f000 f8f4 	bl	8003d5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8003b74:	bf00      	nop
 8003b76:	3720      	adds	r7, #32
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}
 8003b7c:	20001c04 	.word	0x20001c04
 8003b80:	40013400 	.word	0x40013400

08003b84 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b084      	sub	sp, #16
 8003b88:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8003b8a:	4b1c      	ldr	r3, [pc, #112]	; (8003bfc <_ZL11MX_DMA_Initv+0x78>)
 8003b8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b8e:	4a1b      	ldr	r2, [pc, #108]	; (8003bfc <_ZL11MX_DMA_Initv+0x78>)
 8003b90:	f043 0304 	orr.w	r3, r3, #4
 8003b94:	6493      	str	r3, [r2, #72]	; 0x48
 8003b96:	4b19      	ldr	r3, [pc, #100]	; (8003bfc <_ZL11MX_DMA_Initv+0x78>)
 8003b98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b9a:	f003 0304 	and.w	r3, r3, #4
 8003b9e:	60fb      	str	r3, [r7, #12]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003ba2:	4b16      	ldr	r3, [pc, #88]	; (8003bfc <_ZL11MX_DMA_Initv+0x78>)
 8003ba4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ba6:	4a15      	ldr	r2, [pc, #84]	; (8003bfc <_ZL11MX_DMA_Initv+0x78>)
 8003ba8:	f043 0301 	orr.w	r3, r3, #1
 8003bac:	6493      	str	r3, [r2, #72]	; 0x48
 8003bae:	4b13      	ldr	r3, [pc, #76]	; (8003bfc <_ZL11MX_DMA_Initv+0x78>)
 8003bb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bb2:	f003 0301 	and.w	r3, r3, #1
 8003bb6:	60bb      	str	r3, [r7, #8]
 8003bb8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003bba:	4b10      	ldr	r3, [pc, #64]	; (8003bfc <_ZL11MX_DMA_Initv+0x78>)
 8003bbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bbe:	4a0f      	ldr	r2, [pc, #60]	; (8003bfc <_ZL11MX_DMA_Initv+0x78>)
 8003bc0:	f043 0302 	orr.w	r3, r3, #2
 8003bc4:	6493      	str	r3, [r2, #72]	; 0x48
 8003bc6:	4b0d      	ldr	r3, [pc, #52]	; (8003bfc <_ZL11MX_DMA_Initv+0x78>)
 8003bc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bca:	f003 0302 	and.w	r3, r3, #2
 8003bce:	607b      	str	r3, [r7, #4]
 8003bd0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	2105      	movs	r1, #5
 8003bd6:	200b      	movs	r0, #11
 8003bd8:	f004 f820 	bl	8007c1c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003bdc:	200b      	movs	r0, #11
 8003bde:	f004 f839 	bl	8007c54 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 5, 0);
 8003be2:	2200      	movs	r2, #0
 8003be4:	2105      	movs	r1, #5
 8003be6:	2038      	movs	r0, #56	; 0x38
 8003be8:	f004 f818 	bl	8007c1c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8003bec:	2038      	movs	r0, #56	; 0x38
 8003bee:	f004 f831 	bl	8007c54 <HAL_NVIC_EnableIRQ>

}
 8003bf2:	bf00      	nop
 8003bf4:	3710      	adds	r7, #16
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}
 8003bfa:	bf00      	nop
 8003bfc:	40021000 	.word	0x40021000

08003c00 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b08a      	sub	sp, #40	; 0x28
 8003c04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c06:	f107 0314 	add.w	r3, r7, #20
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	601a      	str	r2, [r3, #0]
 8003c0e:	605a      	str	r2, [r3, #4]
 8003c10:	609a      	str	r2, [r3, #8]
 8003c12:	60da      	str	r2, [r3, #12]
 8003c14:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003c16:	4b40      	ldr	r3, [pc, #256]	; (8003d18 <_ZL12MX_GPIO_Initv+0x118>)
 8003c18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c1a:	4a3f      	ldr	r2, [pc, #252]	; (8003d18 <_ZL12MX_GPIO_Initv+0x118>)
 8003c1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c22:	4b3d      	ldr	r3, [pc, #244]	; (8003d18 <_ZL12MX_GPIO_Initv+0x118>)
 8003c24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c2a:	613b      	str	r3, [r7, #16]
 8003c2c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c2e:	4b3a      	ldr	r3, [pc, #232]	; (8003d18 <_ZL12MX_GPIO_Initv+0x118>)
 8003c30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c32:	4a39      	ldr	r2, [pc, #228]	; (8003d18 <_ZL12MX_GPIO_Initv+0x118>)
 8003c34:	f043 0301 	orr.w	r3, r3, #1
 8003c38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c3a:	4b37      	ldr	r3, [pc, #220]	; (8003d18 <_ZL12MX_GPIO_Initv+0x118>)
 8003c3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c3e:	f003 0301 	and.w	r3, r3, #1
 8003c42:	60fb      	str	r3, [r7, #12]
 8003c44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c46:	4b34      	ldr	r3, [pc, #208]	; (8003d18 <_ZL12MX_GPIO_Initv+0x118>)
 8003c48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c4a:	4a33      	ldr	r2, [pc, #204]	; (8003d18 <_ZL12MX_GPIO_Initv+0x118>)
 8003c4c:	f043 0304 	orr.w	r3, r3, #4
 8003c50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c52:	4b31      	ldr	r3, [pc, #196]	; (8003d18 <_ZL12MX_GPIO_Initv+0x118>)
 8003c54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c56:	f003 0304 	and.w	r3, r3, #4
 8003c5a:	60bb      	str	r3, [r7, #8]
 8003c5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c5e:	4b2e      	ldr	r3, [pc, #184]	; (8003d18 <_ZL12MX_GPIO_Initv+0x118>)
 8003c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c62:	4a2d      	ldr	r2, [pc, #180]	; (8003d18 <_ZL12MX_GPIO_Initv+0x118>)
 8003c64:	f043 0302 	orr.w	r3, r3, #2
 8003c68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c6a:	4b2b      	ldr	r3, [pc, #172]	; (8003d18 <_ZL12MX_GPIO_Initv+0x118>)
 8003c6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c6e:	f003 0302 	and.w	r3, r3, #2
 8003c72:	607b      	str	r3, [r7, #4]
 8003c74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EFUSE_Pin|SPI1_CS_Pin, GPIO_PIN_RESET);
 8003c76:	2200      	movs	r2, #0
 8003c78:	f248 0104 	movw	r1, #32772	; 0x8004
 8003c7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c80:	f004 fc12 	bl	80084a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FUSE_VOLTAGE_GPIO_Port, FUSE_VOLTAGE_Pin, GPIO_PIN_RESET);
 8003c84:	2200      	movs	r2, #0
 8003c86:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003c8a:	4824      	ldr	r0, [pc, #144]	; (8003d1c <_ZL12MX_GPIO_Initv+0x11c>)
 8003c8c:	f004 fc0c 	bl	80084a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin, GPIO_PIN_SET);
 8003c90:	2201      	movs	r2, #1
 8003c92:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8003c96:	4822      	ldr	r0, [pc, #136]	; (8003d20 <_ZL12MX_GPIO_Initv+0x120>)
 8003c98:	f004 fc06 	bl	80084a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : EFUSE_Pin SPI1_CS_Pin */
  GPIO_InitStruct.Pin = EFUSE_Pin|SPI1_CS_Pin;
 8003c9c:	f248 0304 	movw	r3, #32772	; 0x8004
 8003ca0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003caa:	2300      	movs	r3, #0
 8003cac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cae:	f107 0314 	add.w	r3, r7, #20
 8003cb2:	4619      	mov	r1, r3
 8003cb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003cb8:	f004 fa4c 	bl	8008154 <HAL_GPIO_Init>

  /*Configure GPIO pin : INTERLOCK_Pin */
  GPIO_InitStruct.Pin = INTERLOCK_Pin;
 8003cbc:	2304      	movs	r3, #4
 8003cbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INTERLOCK_GPIO_Port, &GPIO_InitStruct);
 8003cc8:	f107 0314 	add.w	r3, r7, #20
 8003ccc:	4619      	mov	r1, r3
 8003cce:	4813      	ldr	r0, [pc, #76]	; (8003d1c <_ZL12MX_GPIO_Initv+0x11c>)
 8003cd0:	f004 fa40 	bl	8008154 <HAL_GPIO_Init>

  /*Configure GPIO pin : FUSE_VOLTAGE_Pin */
  GPIO_InitStruct.Pin = FUSE_VOLTAGE_Pin;
 8003cd4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003cd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(FUSE_VOLTAGE_GPIO_Port, &GPIO_InitStruct);
 8003ce6:	f107 0314 	add.w	r3, r7, #20
 8003cea:	4619      	mov	r1, r3
 8003cec:	480b      	ldr	r0, [pc, #44]	; (8003d1c <_ZL12MX_GPIO_Initv+0x11c>)
 8003cee:	f004 fa31 	bl	8008154 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_1_Pin LED_2_Pin LED_3_Pin LED_4_Pin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin;
 8003cf2:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8003cf6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d00:	2300      	movs	r3, #0
 8003d02:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d04:	f107 0314 	add.w	r3, r7, #20
 8003d08:	4619      	mov	r1, r3
 8003d0a:	4805      	ldr	r0, [pc, #20]	; (8003d20 <_ZL12MX_GPIO_Initv+0x120>)
 8003d0c:	f004 fa22 	bl	8008154 <HAL_GPIO_Init>

}
 8003d10:	bf00      	nop
 8003d12:	3728      	adds	r7, #40	; 0x28
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}
 8003d18:	40021000 	.word	0x40021000
 8003d1c:	48000400 	.word	0x48000400
 8003d20:	48000800 	.word	0x48000800

08003d24 <_Z16StartDefaultTaskPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b082      	sub	sp, #8
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8003d2c:	f00e ff0e 	bl	8012b4c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8003d30:	2001      	movs	r0, #1
 8003d32:	f00c fa6d 	bl	8010210 <osDelay>
 8003d36:	e7fb      	b.n	8003d30 <_Z16StartDefaultTaskPv+0xc>

08003d38 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b082      	sub	sp, #8
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM16) {
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a04      	ldr	r2, [pc, #16]	; (8003d58 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d101      	bne.n	8003d4e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003d4a:	f001 fab7 	bl	80052bc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003d4e:	bf00      	nop
 8003d50:	3708      	adds	r7, #8
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
 8003d56:	bf00      	nop
 8003d58:	40014400 	.word	0x40014400

08003d5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003d60:	b672      	cpsid	i
}
 8003d62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003d64:	e7fe      	b.n	8003d64 <Error_Handler+0x8>
	...

08003d68 <_Z12CheckMessageP12RingBuffer_t>:
#include "string.h"
#include <usbd_cdc_if.h>

// Function to check if the ring buffer contains "BB_Start" or "BB_Stop"
// Returns 1 for "BB_Start", 0 for "BB_Stop", or -1 if neither of these strings are found
int CheckMessage(RingBuffer_t *Buf) {
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b086      	sub	sp, #24
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
    char command[9]; // Sized to fit "BB_Start\0" or "BB_Stop\0"
    uint8_t index = 0;
 8003d70:	2300      	movs	r3, #0
 8003d72:	75fb      	strb	r3, [r7, #23]
    uint8_t value;

    // Read bytes from the buffer until a command is assembled or the buffer is exhausted
    while (RB_Read(Buf, &value) == RB_OK) {
 8003d74:	e014      	b.n	8003da0 <_Z12CheckMessageP12RingBuffer_t+0x38>
        // Check if we've reached the end of a command ('\0' or '\n')
        if (value == '\0' || value == '\n') {
 8003d76:	7afb      	ldrb	r3, [r7, #11]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d01f      	beq.n	8003dbc <_Z12CheckMessageP12RingBuffer_t+0x54>
 8003d7c:	7afb      	ldrb	r3, [r7, #11]
 8003d7e:	2b0a      	cmp	r3, #10
 8003d80:	d01c      	beq.n	8003dbc <_Z12CheckMessageP12RingBuffer_t+0x54>
            break;
        }
        // Ensure we do not exceed the command buffer size
        if (index < sizeof(command) - 1) {
 8003d82:	7dfb      	ldrb	r3, [r7, #23]
 8003d84:	2b07      	cmp	r3, #7
 8003d86:	d808      	bhi.n	8003d9a <_Z12CheckMessageP12RingBuffer_t+0x32>
            command[index++] = value;
 8003d88:	7afa      	ldrb	r2, [r7, #11]
 8003d8a:	7dfb      	ldrb	r3, [r7, #23]
 8003d8c:	1c59      	adds	r1, r3, #1
 8003d8e:	75f9      	strb	r1, [r7, #23]
 8003d90:	3318      	adds	r3, #24
 8003d92:	443b      	add	r3, r7
 8003d94:	f803 2c0c 	strb.w	r2, [r3, #-12]
 8003d98:	e002      	b.n	8003da0 <_Z12CheckMessageP12RingBuffer_t+0x38>
        } else {
            // Too much data for one command, something went wrong
            return -1;
 8003d9a:	f04f 33ff 	mov.w	r3, #4294967295
 8003d9e:	e033      	b.n	8003e08 <_Z12CheckMessageP12RingBuffer_t+0xa0>
    while (RB_Read(Buf, &value) == RB_OK) {
 8003da0:	f107 030b 	add.w	r3, r7, #11
 8003da4:	4619      	mov	r1, r3
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f000 f838 	bl	8003e1c <RB_Read>
 8003dac:	4603      	mov	r3, r0
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	bf0c      	ite	eq
 8003db2:	2301      	moveq	r3, #1
 8003db4:	2300      	movne	r3, #0
 8003db6:	b2db      	uxtb	r3, r3
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d1dc      	bne.n	8003d76 <_Z12CheckMessageP12RingBuffer_t+0xe>
        }
    }
    command[index] = '\0'; // Null-terminate the string
 8003dbc:	7dfb      	ldrb	r3, [r7, #23]
 8003dbe:	3318      	adds	r3, #24
 8003dc0:	443b      	add	r3, r7
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	f803 2c0c 	strb.w	r2, [r3, #-12]

    // Compare the assembled command
    if (strcmp(command, "BB_Start") == 0)
 8003dc8:	f107 030c 	add.w	r3, r7, #12
 8003dcc:	4910      	ldr	r1, [pc, #64]	; (8003e10 <_Z12CheckMessageP12RingBuffer_t+0xa8>)
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f7fc fa16 	bl	8000200 <strcmp>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d105      	bne.n	8003de6 <_Z12CheckMessageP12RingBuffer_t+0x7e>
    {
    	data.charging.balance_on = true;
 8003dda:	4b0e      	ldr	r3, [pc, #56]	; (8003e14 <_Z12CheckMessageP12RingBuffer_t+0xac>)
 8003ddc:	2201      	movs	r2, #1
 8003dde:	f883 2299 	strb.w	r2, [r3, #665]	; 0x299
        return 1;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e010      	b.n	8003e08 <_Z12CheckMessageP12RingBuffer_t+0xa0>
    }
    else if (strcmp(command, "BB_Stop") == 0)
 8003de6:	f107 030c 	add.w	r3, r7, #12
 8003dea:	490b      	ldr	r1, [pc, #44]	; (8003e18 <_Z12CheckMessageP12RingBuffer_t+0xb0>)
 8003dec:	4618      	mov	r0, r3
 8003dee:	f7fc fa07 	bl	8000200 <strcmp>
 8003df2:	4603      	mov	r3, r0
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d105      	bne.n	8003e04 <_Z12CheckMessageP12RingBuffer_t+0x9c>
    {
    	data.charging.balance_on = false;
 8003df8:	4b06      	ldr	r3, [pc, #24]	; (8003e14 <_Z12CheckMessageP12RingBuffer_t+0xac>)
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	f883 2299 	strb.w	r2, [r3, #665]	; 0x299
        return 0;
 8003e00:	2300      	movs	r3, #0
 8003e02:	e001      	b.n	8003e08 <_Z12CheckMessageP12RingBuffer_t+0xa0>
    }

    // Neither "BB_Start" nor "BB_Stop" were found
    return -1;
 8003e04:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	3718      	adds	r7, #24
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}
 8003e10:	08016a64 	.word	0x08016a64
 8003e14:	20001478 	.word	0x20001478
 8003e18:	08016a70 	.word	0x08016a70

08003e1c <RB_Read>:
//
// RingBuffer_t *Buf - pointer to Ring Buffer structure
// uint8_t *Value - pointer to place where a value from buffer is read
//
RB_Status RB_Read(RingBuffer_t *Buf, uint8_t *Value)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b083      	sub	sp, #12
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	6039      	str	r1, [r7, #0]
	// Check if Tail hit Head
	if(Buf->Head == Buf->Tail)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	8a1a      	ldrh	r2, [r3, #16]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	8a5b      	ldrh	r3, [r3, #18]
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d101      	bne.n	8003e36 <RB_Read+0x1a>
	{
		// If yes - there is nothing to read
		return RB_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	e014      	b.n	8003e60 <RB_Read+0x44>
	}

	// Write current value from buffer to pointer from argument
	*Value = Buf->Buffer[Buf->Tail];
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	8a5b      	ldrh	r3, [r3, #18]
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	5c9a      	ldrb	r2, [r3, r2]
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	701a      	strb	r2, [r3, #0]

	// Calculate new Tail pointer
	Buf->Tail = (Buf->Tail + 1) % RING_BUFFER_SIZE;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	8a5b      	ldrh	r3, [r3, #18]
 8003e48:	3301      	adds	r3, #1
 8003e4a:	425a      	negs	r2, r3
 8003e4c:	f003 030f 	and.w	r3, r3, #15
 8003e50:	f002 020f 	and.w	r2, r2, #15
 8003e54:	bf58      	it	pl
 8003e56:	4253      	negpl	r3, r2
 8003e58:	b29a      	uxth	r2, r3
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	825a      	strh	r2, [r3, #18]

	// Everything is ok - return OK status
	return RB_OK;
 8003e5e:	2300      	movs	r3, #0
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	370c      	adds	r7, #12
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr

08003e6c <RB_Write>:
//
// RingBuffer_t *Buf - pointer to Ring Buffer structure
// uint8_t Value - a value to store in the buffer
//
RB_Status RB_Write(RingBuffer_t *Buf, uint8_t Value)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b085      	sub	sp, #20
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	460b      	mov	r3, r1
 8003e76:	70fb      	strb	r3, [r7, #3]
	// Calculate new Head pointer value
	uint8_t HeadTmp = (Buf->Head + 1) % RING_BUFFER_SIZE;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	8a1b      	ldrh	r3, [r3, #16]
 8003e7c:	3301      	adds	r3, #1
 8003e7e:	425a      	negs	r2, r3
 8003e80:	f003 030f 	and.w	r3, r3, #15
 8003e84:	f002 020f 	and.w	r2, r2, #15
 8003e88:	bf58      	it	pl
 8003e8a:	4253      	negpl	r3, r2
 8003e8c:	73fb      	strb	r3, [r7, #15]

	// Check if there is one free space ahead the Head buffer
	if(HeadTmp == Buf->Tail)
 8003e8e:	7bfb      	ldrb	r3, [r7, #15]
 8003e90:	b29a      	uxth	r2, r3
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	8a5b      	ldrh	r3, [r3, #18]
 8003e96:	429a      	cmp	r2, r3
 8003e98:	d101      	bne.n	8003e9e <RB_Write+0x32>
	{
		// There is no space in the buffer - return an error
		return RB_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e00a      	b.n	8003eb4 <RB_Write+0x48>
	}

	// Store a value into the buffer
	Buf->Buffer[Buf->Head] = Value;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	8a1b      	ldrh	r3, [r3, #16]
 8003ea2:	4619      	mov	r1, r3
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	78fa      	ldrb	r2, [r7, #3]
 8003ea8:	545a      	strb	r2, [r3, r1]

	// Remember a new Head pointer value
	Buf->Head = HeadTmp;
 8003eaa:	7bfb      	ldrb	r3, [r7, #15]
 8003eac:	b29a      	uxth	r2, r3
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	821a      	strh	r2, [r3, #16]

	// Everything is ok - return OK status
	return RB_OK;
 8003eb2:	2300      	movs	r3, #0
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3714      	adds	r7, #20
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr

08003ec0 <_ZN7SoC_EKF17set_update_matrixEv>:
#include "soc_ekf.h"
#include <math.h>
#include <algorithm>

void SoC_EKF::set_update_matrix()
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b082      	sub	sp, #8
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
    _State_vector[ttc1] = 0;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	f04f 0200 	mov.w	r2, #0
 8003ece:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
    _State_vector[ttc2] = 0;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f04f 0200 	mov.w	r2, #0
 8003ed8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

    _et1 = expf(-_Ts / _battery.battery_equivalent_model[ttc1]);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8003ee2:	eeb1 7a67 	vneg.f32	s14, s15
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	edd3 7a03 	vldr	s15, [r3, #12]
 8003eec:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003ef0:	eeb0 0a66 	vmov.f32	s0, s13
 8003ef4:	f00f fc98 	bl	8013828 <expf>
 8003ef8:	eef0 7a40 	vmov.f32	s15, s0
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
    _et2 = expf(-_Ts / _battery.battery_equivalent_model[ttc2]);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8003f08:	eeb1 7a67 	vneg.f32	s14, s15
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	edd3 7a04 	vldr	s15, [r3, #16]
 8003f12:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003f16:	eeb0 0a66 	vmov.f32	s0, s13
 8003f1a:	f00f fc85 	bl	8013828 <expf>
 8003f1e:	eef0 7a40 	vmov.f32	s15, s0
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c

    _A_matrix[SoC] = 1;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003f2e:	675a      	str	r2, [r3, #116]	; 0x74
    _A_matrix[ttc1] = _et1;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	679a      	str	r2, [r3, #120]	; 0x78
    _A_matrix[ttc2] = _et2;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	67da      	str	r2, [r3, #124]	; 0x7c

    _B_matrix[SoC] = - _Ts/_battery.battery_equivalent_model[Qnom]/60/60
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8003f46:	eef1 6a67 	vneg.f32	s13, s15
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	edd3 7a07 	vldr	s15, [r3, #28]
 8003f50:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f54:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8004000 <_ZN7SoC_EKF17set_update_matrixEv+0x140>
 8003f58:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003f5c:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8004000 <_ZN7SoC_EKF17set_update_matrixEv+0x140>
 8003f60:	eec7 6a87 	vdiv.f32	s13, s15, s14
            /_battery.cell_in_parallel;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	ee07 3a90 	vmov	s15, r3
 8003f6c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003f70:	eec6 7a87 	vdiv.f32	s15, s13, s14
    _B_matrix[SoC] = - _Ts/_battery.battery_equivalent_model[Qnom]/60/60
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80

    _B_matrix[ttc1] = _battery.battery_equivalent_model[Rttc1]*(1 - _et1);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	ed93 7a05 	vldr	s14, [r3, #20]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8003f86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f8a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003f8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
    _B_matrix[ttc2] = _battery.battery_equivalent_model[Rttc2]*(1 - _et2);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	ed93 7a06 	vldr	s14, [r3, #24]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8003fa4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003fa8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003fac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88

    _P_matrix[SoC] = 0.005;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	4a12      	ldr	r2, [pc, #72]	; (8004004 <_ZN7SoC_EKF17set_update_matrixEv+0x144>)
 8003fba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    _P_matrix[ttc1] = 0.1;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	4a11      	ldr	r2, [pc, #68]	; (8004008 <_ZN7SoC_EKF17set_update_matrixEv+0x148>)
 8003fc2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    _P_matrix[ttc2] = 0.1;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	4a0f      	ldr	r2, [pc, #60]	; (8004008 <_ZN7SoC_EKF17set_update_matrixEv+0x148>)
 8003fca:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    _Q_matrix[SoC] = default_Q_value;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	4a0e      	ldr	r2, [pc, #56]	; (800400c <_ZN7SoC_EKF17set_update_matrixEv+0x14c>)
 8003fd2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    _Q_matrix[ttc1] = _P_matrix[ttc1];
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    _Q_matrix[ttc2] = _P_matrix[ttc2];
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    _R_coeff = default_R_value;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	4a07      	ldr	r2, [pc, #28]	; (8004010 <_ZN7SoC_EKF17set_update_matrixEv+0x150>)
 8003ff2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
}
 8003ff6:	bf00      	nop
 8003ff8:	3708      	adds	r7, #8
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}
 8003ffe:	bf00      	nop
 8004000:	42700000 	.word	0x42700000
 8004004:	3ba3d70a 	.word	0x3ba3d70a
 8004008:	3dcccccd 	.word	0x3dcccccd
 800400c:	3951b717 	.word	0x3951b717
 8004010:	48f42400 	.word	0x48f42400

08004014 <_ZN7SoC_EKF21set_filter_covarianceEffff>:

void SoC_EKF::set_filter_covariance(float R, float Q_soc, float Q_v1, float Q_v2)
{
 8004014:	b480      	push	{r7}
 8004016:	b087      	sub	sp, #28
 8004018:	af00      	add	r7, sp, #0
 800401a:	6178      	str	r0, [r7, #20]
 800401c:	ed87 0a04 	vstr	s0, [r7, #16]
 8004020:	edc7 0a03 	vstr	s1, [r7, #12]
 8004024:	ed87 1a02 	vstr	s2, [r7, #8]
 8004028:	edc7 1a01 	vstr	s3, [r7, #4]
    _R_coeff = R;
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	693a      	ldr	r2, [r7, #16]
 8004030:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    _Q_matrix[SoC] = Q_soc;
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	68fa      	ldr	r2, [r7, #12]
 8004038:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    _Q_matrix[Vttc1] = Q_v1;
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	68ba      	ldr	r2, [r7, #8]
 8004040:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    _Q_matrix[Vttc2] = Q_v2;
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	687a      	ldr	r2, [r7, #4]
 8004048:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
 800404c:	bf00      	nop
 800404e:	371c      	adds	r7, #28
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr

08004058 <_ZN7SoC_EKF6updateERKfS1_>:

void SoC_EKF::update(const float &Current, const float &Voltage)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b08c      	sub	sp, #48	; 0x30
 800405c:	af00      	add	r7, sp, #0
 800405e:	60f8      	str	r0, [r7, #12]
 8004060:	60b9      	str	r1, [r7, #8]
 8004062:	607a      	str	r2, [r7, #4]
//    }
//    else {
//        set_filter_covariance(default_R_value, default_Q_value);
//    }
    // Predict
    _State_vector[SoC] =  _State_vector[SoC] * _A_matrix[SoC] + Current * _B_matrix[SoC];
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	ed93 7a2a 	vldr	s14, [r3, #168]	; 0xa8
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8004070:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	edd3 6a00 	vldr	s13, [r3]
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8004080:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004084:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
    _State_vector[ttc1] =  _State_vector[ttc1] * _A_matrix[ttc1] + Current * _B_matrix[ttc1];
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	ed93 7a2b 	vldr	s14, [r3, #172]	; 0xac
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 800409a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	edd3 6a00 	vldr	s13, [r3]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 80040aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80040ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
    _State_vector[ttc2] =  _State_vector[ttc2] * _A_matrix[ttc2] + Current * _B_matrix[ttc2];
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	ed93 7a2c 	vldr	s14, [r3, #176]	; 0xb0
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 80040c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	edd3 6a00 	vldr	s13, [r3]
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 80040d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80040d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0

    // Covariance matrix
    _P_matrix[SoC] =  _A_matrix[SoC]  * _A_matrix[SoC] *  _P_matrix[SoC]  + _Q_matrix[SoC];
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	ed93 7a1d 	vldr	s14, [r3, #116]	; 0x74
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 80040ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 80040f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 8004102:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
    _P_matrix[ttc1] = _A_matrix[ttc1] * _A_matrix[ttc1] * _P_matrix[ttc1] + _Q_matrix[ttc1];
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8004118:	ee27 7a27 	vmul.f32	s14, s14, s15
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8004122:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 800412c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	edc3 7a24 	vstr	s15, [r3, #144]	; 0x90
    _P_matrix[ttc2] = _A_matrix[ttc2] * _A_matrix[ttc2] * _P_matrix[ttc2] + _Q_matrix[ttc2];
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	ed93 7a1f 	vldr	s14, [r3, #124]	; 0x7c
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8004142:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 800414c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	edd3 7a29 	vldr	s15, [r3, #164]	; 0xa4
 8004156:	ee77 7a27 	vadd.f32	s15, s14, s15
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	edc3 7a25 	vstr	s15, [r3, #148]	; 0x94

    // Predict Opec circiut voltage single call voltage based on SoC
    float Voltage_predict_OCV = horner(_battery.battery_ocv_poli, SOC_OCV_poli_coeff_lenght, &_State_vector[SoC]);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	f103 0020 	add.w	r0, r3, #32
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	33a8      	adds	r3, #168	; 0xa8
 800416a:	461a      	mov	r2, r3
 800416c:	2109      	movs	r1, #9
 800416e:	f000 f9a5 	bl	80044bc <_Z6hornerPKfjS0_>
 8004172:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c

    float Voltage_predict = Voltage_predict_OCV - _State_vector[Vttc1]/_battery.cell_in_parallel
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	edd3 6a2b 	vldr	s13, [r3, #172]	; 0xac
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	ee07 3a90 	vmov	s15, r3
 8004184:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004188:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800418c:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8004190:	ee37 7a67 	vsub.f32	s14, s14, s15
            - _State_vector[Vttc2]/_battery.cell_in_parallel
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	ed93 6a2c 	vldr	s12, [r3, #176]	; 0xb0
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	ee07 3a90 	vmov	s15, r3
 80041a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041a6:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80041aa:	ee37 7a67 	vsub.f32	s14, s14, s15
            - (Current) * _battery.battery_equivalent_model[Rs]
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	edd3 6a00 	vldr	s13, [r3]
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	edd3 7a02 	vldr	s15, [r3, #8]
 80041ba:	ee66 6aa7 	vmul.f32	s13, s13, s15
                        *_battery.cell_in_series
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	ee07 3a90 	vmov	s15, r3
 80041c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041ca:	ee26 6aa7 	vmul.f32	s12, s13, s15
                        /_battery.cell_in_parallel; // for multiple cell voltage
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	ee07 3a90 	vmov	s15, r3
 80041d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041da:	eec6 7a26 	vdiv.f32	s15, s12, s13
    float Voltage_predict = Voltage_predict_OCV - _State_vector[Vttc1]/_battery.cell_in_parallel
 80041de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80041e2:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

    float innovation = (Voltage) - Voltage_predict;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	ed93 7a00 	vldr	s14, [r3]
 80041ec:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80041f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80041f4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

    float H = horner(_battery.battery_d_ocv_poli, SOC_OCV_poli_coeff_lenght - 1, &_State_vector[SoC]);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f103 0044 	add.w	r0, r3, #68	; 0x44
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	33a8      	adds	r3, #168	; 0xa8
 8004202:	461a      	mov	r2, r3
 8004204:	2108      	movs	r1, #8
 8004206:	f000 f959 	bl	80044bc <_Z6hornerPKfjS0_>
 800420a:	ed87 0a08 	vstr	s0, [r7, #32]

    float S = H *  _P_matrix[SoC] * H + _R_coeff;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 8004214:	edd7 7a08 	vldr	s15, [r7, #32]
 8004218:	ee27 7a27 	vmul.f32	s14, s14, s15
 800421c:	edd7 7a08 	vldr	s15, [r7, #32]
 8004220:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800422a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800422e:	edc7 7a07 	vstr	s15, [r7, #28]

    float Kf = _P_matrix[SoC] * H * (1/S);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 8004238:	edd7 7a08 	vldr	s15, [r7, #32]
 800423c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004240:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8004244:	edd7 6a07 	vldr	s13, [r7, #28]
 8004248:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800424c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004250:	edc7 7a06 	vstr	s15, [r7, #24]

    _State_vector[SoC] += Kf*innovation;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	ed93 7a2a 	vldr	s14, [r3, #168]	; 0xa8
 800425a:	edd7 6a06 	vldr	s13, [r7, #24]
 800425e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8004262:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004266:	ee77 7a27 	vadd.f32	s15, s14, s15
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8

    _P_matrix[SoC] = (1 - Kf*H) * _P_matrix[SoC];
 8004270:	ed97 7a06 	vldr	s14, [r7, #24]
 8004274:	edd7 7a08 	vldr	s15, [r7, #32]
 8004278:	ee67 7a27 	vmul.f32	s15, s14, s15
 800427c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004280:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 800428a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c

    // to ensure that (0.0 <= SoC <= 1.0)
    _State_vector[SoC] = std::clamp(_State_vector[SoC], 0.00f, 1.00f);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	33a8      	adds	r3, #168	; 0xa8
 8004298:	f04f 0200 	mov.w	r2, #0
 800429c:	613a      	str	r2, [r7, #16]
 800429e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80042a2:	617a      	str	r2, [r7, #20]
 80042a4:	f107 0214 	add.w	r2, r7, #20
 80042a8:	f107 0110 	add.w	r1, r7, #16
 80042ac:	4618      	mov	r0, r3
 80042ae:	f000 f933 	bl	8004518 <_ZSt5clampIfERKT_S2_S2_S2_>
 80042b2:	4603      	mov	r3, r0
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
}
 80042bc:	bf00      	nop
 80042be:	3730      	adds	r7, #48	; 0x30
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}

080042c4 <_ZN7SoC_EKF27update_SoC_based_on_voltageERKf>:

void SoC_EKF::update_SoC_based_on_voltage(const float &Voltage)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b084      	sub	sp, #16
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
 80042cc:	6039      	str	r1, [r7, #0]
    // set low observation noice covariance to calculate faster voltage soc prediction

    set_time_sampling(100.0f);
 80042ce:	ed9f 0a23 	vldr	s0, [pc, #140]	; 800435c <_ZN7SoC_EKF27update_SoC_based_on_voltageERKf+0x98>
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f000 f897 	bl	8004406 <_ZN7SoC_EKF17set_time_samplingEf>
    set_update_matrix();
 80042d8:	6878      	ldr	r0, [r7, #4]
 80042da:	f7ff fdf1 	bl	8003ec0 <_ZN7SoC_EKF17set_update_matrixEv>
    set_filter_covariance(1);
 80042de:	eddf 1a20 	vldr	s3, [pc, #128]	; 8004360 <_ZN7SoC_EKF27update_SoC_based_on_voltageERKf+0x9c>
 80042e2:	ed9f 1a1f 	vldr	s2, [pc, #124]	; 8004360 <_ZN7SoC_EKF27update_SoC_based_on_voltageERKf+0x9c>
 80042e6:	eddf 0a1f 	vldr	s1, [pc, #124]	; 8004364 <_ZN7SoC_EKF27update_SoC_based_on_voltageERKf+0xa0>
 80042ea:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f7ff fe90 	bl	8004014 <_ZN7SoC_EKF21set_filter_covarianceEffff>

    for(int i=0; i < 10e3; ++i){
 80042f4:	2300      	movs	r3, #0
 80042f6:	60fb      	str	r3, [r7, #12]
 80042f8:	e00c      	b.n	8004314 <_ZN7SoC_EKF27update_SoC_based_on_voltageERKf+0x50>
        update(0, Voltage);
 80042fa:	f04f 0300 	mov.w	r3, #0
 80042fe:	60bb      	str	r3, [r7, #8]
 8004300:	f107 0308 	add.w	r3, r7, #8
 8004304:	683a      	ldr	r2, [r7, #0]
 8004306:	4619      	mov	r1, r3
 8004308:	6878      	ldr	r0, [r7, #4]
 800430a:	f7ff fea5 	bl	8004058 <_ZN7SoC_EKF6updateERKfS1_>
    for(int i=0; i < 10e3; ++i){
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	3301      	adds	r3, #1
 8004312:	60fb      	str	r3, [r7, #12]
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	ee07 3a90 	vmov	s15, r3
 800431a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800431e:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8004368 <_ZN7SoC_EKF27update_SoC_based_on_voltageERKf+0xa4>
 8004322:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004326:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800432a:	d4e6      	bmi.n	80042fa <_ZN7SoC_EKF27update_SoC_based_on_voltageERKf+0x36>
    }

    set_filter_covariance();
 800432c:	eddf 1a0c 	vldr	s3, [pc, #48]	; 8004360 <_ZN7SoC_EKF27update_SoC_based_on_voltageERKf+0x9c>
 8004330:	ed9f 1a0b 	vldr	s2, [pc, #44]	; 8004360 <_ZN7SoC_EKF27update_SoC_based_on_voltageERKf+0x9c>
 8004334:	eddf 0a0b 	vldr	s1, [pc, #44]	; 8004364 <_ZN7SoC_EKF27update_SoC_based_on_voltageERKf+0xa0>
 8004338:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800436c <_ZN7SoC_EKF27update_SoC_based_on_voltageERKf+0xa8>
 800433c:	6878      	ldr	r0, [r7, #4]
 800433e:	f7ff fe69 	bl	8004014 <_ZN7SoC_EKF21set_filter_covarianceEffff>
    set_time_sampling(0.05f);
 8004342:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8004370 <_ZN7SoC_EKF27update_SoC_based_on_voltageERKf+0xac>
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f000 f85d 	bl	8004406 <_ZN7SoC_EKF17set_time_samplingEf>
    set_update_matrix();
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	f7ff fdb7 	bl	8003ec0 <_ZN7SoC_EKF17set_update_matrixEv>
}
 8004352:	bf00      	nop
 8004354:	3710      	adds	r7, #16
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}
 800435a:	bf00      	nop
 800435c:	42c80000 	.word	0x42c80000
 8004360:	3dcccccd 	.word	0x3dcccccd
 8004364:	3951b717 	.word	0x3951b717
 8004368:	461c4000 	.word	0x461c4000
 800436c:	48f42400 	.word	0x48f42400
 8004370:	3d4ccccd 	.word	0x3d4ccccd

08004374 <_ZSt4copyIPKfPfET0_T_S4_S3_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 8004374:	b590      	push	{r4, r7, lr}
 8004376:	b085      	sub	sp, #20
 8004378:	af00      	add	r7, sp, #0
 800437a:	60f8      	str	r0, [r7, #12]
 800437c:	60b9      	str	r1, [r7, #8]
 800437e:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8004380:	68f8      	ldr	r0, [r7, #12]
 8004382:	f000 f8f0 	bl	8004566 <_ZSt12__miter_baseIPKfET_S2_>
 8004386:	4604      	mov	r4, r0
 8004388:	68b8      	ldr	r0, [r7, #8]
 800438a:	f000 f8ec 	bl	8004566 <_ZSt12__miter_baseIPKfET_S2_>
 800438e:	4603      	mov	r3, r0
 8004390:	687a      	ldr	r2, [r7, #4]
 8004392:	4619      	mov	r1, r3
 8004394:	4620      	mov	r0, r4
 8004396:	f000 f8f1 	bl	800457c <_ZSt13__copy_move_aILb0EPKfPfET1_T0_S4_S3_>
 800439a:	4603      	mov	r3, r0
    }
 800439c:	4618      	mov	r0, r3
 800439e:	3714      	adds	r7, #20
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd90      	pop	{r4, r7, pc}

080043a4 <_ZN7SoC_EKF32set_single_cell_equivalent_modelEPKf>:

void SoC_EKF::set_single_cell_equivalent_model(const float *battery_model){
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b082      	sub	sp, #8
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
 80043ac:	6039      	str	r1, [r7, #0]
    std::copy(battery_model, battery_model+6, _battery.battery_equivalent_model);
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	f103 0118 	add.w	r1, r3, #24
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	3308      	adds	r3, #8
 80043b8:	461a      	mov	r2, r3
 80043ba:	6838      	ldr	r0, [r7, #0]
 80043bc:	f7ff ffda 	bl	8004374 <_ZSt4copyIPKfPfET0_T_S4_S3_>
};
 80043c0:	bf00      	nop
 80043c2:	3708      	adds	r7, #8
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}

080043c8 <_ZN7SoC_EKF15set_initial_SoCEf>:

void SoC_EKF::set_initial_SoC(float aSoC){
 80043c8:	b480      	push	{r7}
 80043ca:	b083      	sub	sp, #12
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
 80043d0:	ed87 0a00 	vstr	s0, [r7]
    _State_vector[SoC] = aSoC;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	683a      	ldr	r2, [r7, #0]
 80043d8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
}
 80043dc:	bf00      	nop
 80043de:	370c      	adds	r7, #12
 80043e0:	46bd      	mov	sp, r7
 80043e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e6:	4770      	bx	lr

080043e8 <_ZN7SoC_EKF16set_full_batteryEv>:

void SoC_EKF::set_full_battery()
{
 80043e8:	b480      	push	{r7}
 80043ea:	b083      	sub	sp, #12
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
    _State_vector[SoC] = 1.00f;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80043f6:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
};
 80043fa:	bf00      	nop
 80043fc:	370c      	adds	r7, #12
 80043fe:	46bd      	mov	sp, r7
 8004400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004404:	4770      	bx	lr

08004406 <_ZN7SoC_EKF17set_time_samplingEf>:

void SoC_EKF::set_time_sampling(float Ts){
 8004406:	b480      	push	{r7}
 8004408:	b083      	sub	sp, #12
 800440a:	af00      	add	r7, sp, #0
 800440c:	6078      	str	r0, [r7, #4]
 800440e:	ed87 0a00 	vstr	s0, [r7]
    _Ts = Ts;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	683a      	ldr	r2, [r7, #0]
 8004416:	671a      	str	r2, [r3, #112]	; 0x70
};
 8004418:	bf00      	nop
 800441a:	370c      	adds	r7, #12
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr

08004424 <_ZN7SoC_EKF25set_battery_configurationEOjS0_>:

void SoC_EKF::set_battery_configuration(unsigned int &&s, unsigned int &&p){
 8004424:	b480      	push	{r7}
 8004426:	b085      	sub	sp, #20
 8004428:	af00      	add	r7, sp, #0
 800442a:	60f8      	str	r0, [r7, #12]
 800442c:	60b9      	str	r1, [r7, #8]
 800442e:	607a      	str	r2, [r7, #4]
    _battery.cell_in_parallel = p;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	601a      	str	r2, [r3, #0]
    _battery.cell_in_series = s;
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	605a      	str	r2, [r3, #4]
};
 8004440:	bf00      	nop
 8004442:	3714      	adds	r7, #20
 8004444:	46bd      	mov	sp, r7
 8004446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444a:	4770      	bx	lr

0800444c <_ZN7SoC_EKF30set_single_cell_ocv_polinomialEPKfj>:

void SoC_EKF::set_single_cell_ocv_polinomial(const float *battery_ocv, unsigned int number_of_coef){
 800444c:	b580      	push	{r7, lr}
 800444e:	b086      	sub	sp, #24
 8004450:	af00      	add	r7, sp, #0
 8004452:	60f8      	str	r0, [r7, #12]
 8004454:	60b9      	str	r1, [r7, #8]
 8004456:	607a      	str	r2, [r7, #4]

    std::copy(battery_ocv, battery_ocv + number_of_coef, _battery.battery_ocv_poli);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	009b      	lsls	r3, r3, #2
 800445c:	68ba      	ldr	r2, [r7, #8]
 800445e:	18d1      	adds	r1, r2, r3
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	3320      	adds	r3, #32
 8004464:	461a      	mov	r2, r3
 8004466:	68b8      	ldr	r0, [r7, #8]
 8004468:	f7ff ff84 	bl	8004374 <_ZSt4copyIPKfPfET0_T_S4_S3_>

    for(unsigned int ocv_poly_iter = 0; ocv_poly_iter < number_of_coef - 1; ocv_poly_iter++){
 800446c:	2300      	movs	r3, #0
 800446e:	617b      	str	r3, [r7, #20]
 8004470:	e01a      	b.n	80044a8 <_ZN7SoC_EKF30set_single_cell_ocv_polinomialEPKfj+0x5c>
        _battery.battery_d_ocv_poli[ocv_poly_iter] = static_cast<float>(number_of_coef - ocv_poly_iter - 1) * battery_ocv[ocv_poly_iter];
 8004472:	687a      	ldr	r2, [r7, #4]
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	1ad3      	subs	r3, r2, r3
 8004478:	3b01      	subs	r3, #1
 800447a:	ee07 3a90 	vmov	s15, r3
 800447e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	009b      	lsls	r3, r3, #2
 8004486:	68ba      	ldr	r2, [r7, #8]
 8004488:	4413      	add	r3, r2
 800448a:	edd3 7a00 	vldr	s15, [r3]
 800448e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004492:	68fa      	ldr	r2, [r7, #12]
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	3310      	adds	r3, #16
 8004498:	009b      	lsls	r3, r3, #2
 800449a:	4413      	add	r3, r2
 800449c:	3304      	adds	r3, #4
 800449e:	edc3 7a00 	vstr	s15, [r3]
    for(unsigned int ocv_poly_iter = 0; ocv_poly_iter < number_of_coef - 1; ocv_poly_iter++){
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	3301      	adds	r3, #1
 80044a6:	617b      	str	r3, [r7, #20]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	3b01      	subs	r3, #1
 80044ac:	697a      	ldr	r2, [r7, #20]
 80044ae:	429a      	cmp	r2, r3
 80044b0:	d3df      	bcc.n	8004472 <_ZN7SoC_EKF30set_single_cell_ocv_polinomialEPKfj+0x26>
    }
};
 80044b2:	bf00      	nop
 80044b4:	bf00      	nop
 80044b6:	3718      	adds	r7, #24
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}

080044bc <_Z6hornerPKfjS0_>:
    //    std::cout<<"Kf: "<<Kf <<std::endl;
    //    std::cout<<"SoC: "<<State_vector[0]<<std::endl;
}

[[nodiscard]] float horner(const float *arry, unsigned int n, const float *x)
{
 80044bc:	b480      	push	{r7}
 80044be:	b087      	sub	sp, #28
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	60f8      	str	r0, [r7, #12]
 80044c4:	60b9      	str	r1, [r7, #8]
 80044c6:	607a      	str	r2, [r7, #4]
    float s = 0;
 80044c8:	f04f 0300 	mov.w	r3, #0
 80044cc:	617b      	str	r3, [r7, #20]
    for(unsigned int i = 0; i < n ; i++){
 80044ce:	2300      	movs	r3, #0
 80044d0:	613b      	str	r3, [r7, #16]
 80044d2:	e013      	b.n	80044fc <_Z6hornerPKfjS0_+0x40>
        s = s*(*x) + arry[i];
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	ed93 7a00 	vldr	s14, [r3]
 80044da:	edd7 7a05 	vldr	s15, [r7, #20]
 80044de:	ee27 7a27 	vmul.f32	s14, s14, s15
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	009b      	lsls	r3, r3, #2
 80044e6:	68fa      	ldr	r2, [r7, #12]
 80044e8:	4413      	add	r3, r2
 80044ea:	edd3 7a00 	vldr	s15, [r3]
 80044ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80044f2:	edc7 7a05 	vstr	s15, [r7, #20]
    for(unsigned int i = 0; i < n ; i++){
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	3301      	adds	r3, #1
 80044fa:	613b      	str	r3, [r7, #16]
 80044fc:	693a      	ldr	r2, [r7, #16]
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	429a      	cmp	r2, r3
 8004502:	d3e7      	bcc.n	80044d4 <_Z6hornerPKfjS0_+0x18>
    }
    return s;
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	ee07 3a90 	vmov	s15, r3
}
 800450a:	eeb0 0a67 	vmov.f32	s0, s15
 800450e:	371c      	adds	r7, #28
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr

08004518 <_ZSt5clampIfERKT_S2_S2_S2_>:
   *  @param  __hi   An upper limit of arbitrary type.
   *  @return max(__val, __lo) if __val < __hi or min(__val, __hi) otherwise.
   */
  template<typename _Tp>
    constexpr const _Tp&
    clamp(const _Tp& __val, const _Tp& __lo, const _Tp& __hi)
 8004518:	b480      	push	{r7}
 800451a:	b085      	sub	sp, #20
 800451c:	af00      	add	r7, sp, #0
 800451e:	60f8      	str	r0, [r7, #12]
 8004520:	60b9      	str	r1, [r7, #8]
 8004522:	607a      	str	r2, [r7, #4]
    {
      __glibcxx_assert(!(__hi < __lo));
      return (__val < __lo) ? __lo : (__hi < __val) ? __hi : __val;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	ed93 7a00 	vldr	s14, [r3]
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	edd3 7a00 	vldr	s15, [r3]
 8004530:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004534:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004538:	d501      	bpl.n	800453e <_ZSt5clampIfERKT_S2_S2_S2_+0x26>
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	e00d      	b.n	800455a <_ZSt5clampIfERKT_S2_S2_S2_+0x42>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	ed93 7a00 	vldr	s14, [r3]
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	edd3 7a00 	vldr	s15, [r3]
 800454a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800454e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004552:	d501      	bpl.n	8004558 <_ZSt5clampIfERKT_S2_S2_S2_+0x40>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	e000      	b.n	800455a <_ZSt5clampIfERKT_S2_S2_S2_+0x42>
 8004558:	68fb      	ldr	r3, [r7, #12]
    }
 800455a:	4618      	mov	r0, r3
 800455c:	3714      	adds	r7, #20
 800455e:	46bd      	mov	sp, r7
 8004560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004564:	4770      	bx	lr

08004566 <_ZSt12__miter_baseIPKfET_S2_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 8004566:	b480      	push	{r7}
 8004568:	b083      	sub	sp, #12
 800456a:	af00      	add	r7, sp, #0
 800456c:	6078      	str	r0, [r7, #4]
    { return __it; }
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	4618      	mov	r0, r3
 8004572:	370c      	adds	r7, #12
 8004574:	46bd      	mov	sp, r7
 8004576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457a:	4770      	bx	lr

0800457c <_ZSt13__copy_move_aILb0EPKfPfET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 800457c:	b5b0      	push	{r4, r5, r7, lr}
 800457e:	b084      	sub	sp, #16
 8004580:	af00      	add	r7, sp, #0
 8004582:	60f8      	str	r0, [r7, #12]
 8004584:	60b9      	str	r1, [r7, #8]
 8004586:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8004588:	68f8      	ldr	r0, [r7, #12]
 800458a:	f000 f81a 	bl	80045c2 <_ZSt12__niter_baseIPKfET_S2_>
 800458e:	4604      	mov	r4, r0
 8004590:	68b8      	ldr	r0, [r7, #8]
 8004592:	f000 f816 	bl	80045c2 <_ZSt12__niter_baseIPKfET_S2_>
 8004596:	4605      	mov	r5, r0
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	4618      	mov	r0, r3
 800459c:	f000 f81c 	bl	80045d8 <_ZSt12__niter_baseIPfET_S1_>
 80045a0:	4603      	mov	r3, r0
 80045a2:	461a      	mov	r2, r3
 80045a4:	4629      	mov	r1, r5
 80045a6:	4620      	mov	r0, r4
 80045a8:	f000 f821 	bl	80045ee <_ZSt14__copy_move_a1ILb0EPKfPfET1_T0_S4_S3_>
 80045ac:	4602      	mov	r2, r0
 80045ae:	1d3b      	adds	r3, r7, #4
 80045b0:	4611      	mov	r1, r2
 80045b2:	4618      	mov	r0, r3
 80045b4:	f000 f82b 	bl	800460e <_ZSt12__niter_wrapIPfET_RKS1_S1_>
 80045b8:	4603      	mov	r3, r0
    }
 80045ba:	4618      	mov	r0, r3
 80045bc:	3710      	adds	r7, #16
 80045be:	46bd      	mov	sp, r7
 80045c0:	bdb0      	pop	{r4, r5, r7, pc}

080045c2 <_ZSt12__niter_baseIPKfET_S2_>:
    __niter_base(_Iterator __it)
 80045c2:	b480      	push	{r7}
 80045c4:	b083      	sub	sp, #12
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	6078      	str	r0, [r7, #4]
    { return __it; }
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	4618      	mov	r0, r3
 80045ce:	370c      	adds	r7, #12
 80045d0:	46bd      	mov	sp, r7
 80045d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d6:	4770      	bx	lr

080045d8 <_ZSt12__niter_baseIPfET_S1_>:
    __niter_base(_Iterator __it)
 80045d8:	b480      	push	{r7}
 80045da:	b083      	sub	sp, #12
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
    { return __it; }
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	4618      	mov	r0, r3
 80045e4:	370c      	adds	r7, #12
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr

080045ee <_ZSt14__copy_move_a1ILb0EPKfPfET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 80045ee:	b580      	push	{r7, lr}
 80045f0:	b084      	sub	sp, #16
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	60f8      	str	r0, [r7, #12]
 80045f6:	60b9      	str	r1, [r7, #8]
 80045f8:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 80045fa:	687a      	ldr	r2, [r7, #4]
 80045fc:	68b9      	ldr	r1, [r7, #8]
 80045fe:	68f8      	ldr	r0, [r7, #12]
 8004600:	f000 f811 	bl	8004626 <_ZSt14__copy_move_a2ILb0EPKfPfET1_T0_S4_S3_>
 8004604:	4603      	mov	r3, r0
 8004606:	4618      	mov	r0, r3
 8004608:	3710      	adds	r7, #16
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}

0800460e <_ZSt12__niter_wrapIPfET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 800460e:	b480      	push	{r7}
 8004610:	b083      	sub	sp, #12
 8004612:	af00      	add	r7, sp, #0
 8004614:	6078      	str	r0, [r7, #4]
 8004616:	6039      	str	r1, [r7, #0]
    { return __res; }
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	4618      	mov	r0, r3
 800461c:	370c      	adds	r7, #12
 800461e:	46bd      	mov	sp, r7
 8004620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004624:	4770      	bx	lr

08004626 <_ZSt14__copy_move_a2ILb0EPKfPfET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8004626:	b580      	push	{r7, lr}
 8004628:	b084      	sub	sp, #16
 800462a:	af00      	add	r7, sp, #0
 800462c:	60f8      	str	r0, [r7, #12]
 800462e:	60b9      	str	r1, [r7, #8]
 8004630:	607a      	str	r2, [r7, #4]
      if (std::is_constant_evaluated())
 8004632:	f7fc fd67 	bl	8001104 <_ZSt21is_constant_evaluatedv>
 8004636:	4603      	mov	r3, r0
 8004638:	2b00      	cmp	r3, #0
 800463a:	d006      	beq.n	800464a <_ZSt14__copy_move_a2ILb0EPKfPfET1_T0_S4_S3_+0x24>
	  __copy_m(__first, __last, __result);
 800463c:	687a      	ldr	r2, [r7, #4]
 800463e:	68b9      	ldr	r1, [r7, #8]
 8004640:	68f8      	ldr	r0, [r7, #12]
 8004642:	f000 f80d 	bl	8004660 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKfPfEET0_T_S7_S6_>
 8004646:	4603      	mov	r3, r0
 8004648:	e006      	b.n	8004658 <_ZSt14__copy_move_a2ILb0EPKfPfET1_T0_S4_S3_+0x32>
			      _Category>::__copy_m(__first, __last, __result);
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	68b9      	ldr	r1, [r7, #8]
 800464e:	68f8      	ldr	r0, [r7, #12]
 8004650:	f000 f829 	bl	80046a6 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
 8004654:	4603      	mov	r3, r0
 8004656:	bf00      	nop
    }
 8004658:	4618      	mov	r0, r3
 800465a:	3710      	adds	r7, #16
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}

08004660 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKfPfEET0_T_S7_S6_>:
	__copy_m(_II __first, _II __last, _OI __result)
 8004660:	b480      	push	{r7}
 8004662:	b087      	sub	sp, #28
 8004664:	af00      	add	r7, sp, #0
 8004666:	60f8      	str	r0, [r7, #12]
 8004668:	60b9      	str	r1, [r7, #8]
 800466a:	607a      	str	r2, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 800466c:	68ba      	ldr	r2, [r7, #8]
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	1ad3      	subs	r3, r2, r3
 8004672:	109b      	asrs	r3, r3, #2
 8004674:	617b      	str	r3, [r7, #20]
 8004676:	e00c      	b.n	8004692 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKfPfEET0_T_S7_S6_+0x32>
	      *__result = *__first;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681a      	ldr	r2, [r3, #0]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	601a      	str	r2, [r3, #0]
	      ++__first;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	3304      	adds	r3, #4
 8004684:	60fb      	str	r3, [r7, #12]
	      ++__result;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	3304      	adds	r3, #4
 800468a:	607b      	str	r3, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	3b01      	subs	r3, #1
 8004690:	617b      	str	r3, [r7, #20]
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	2b00      	cmp	r3, #0
 8004696:	dcef      	bgt.n	8004678 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKfPfEET0_T_S7_S6_+0x18>
	  return __result;
 8004698:	687b      	ldr	r3, [r7, #4]
	}
 800469a:	4618      	mov	r0, r3
 800469c:	371c      	adds	r7, #28
 800469e:	46bd      	mov	sp, r7
 80046a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a4:	4770      	bx	lr

080046a6 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80046a6:	b580      	push	{r7, lr}
 80046a8:	b086      	sub	sp, #24
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	60f8      	str	r0, [r7, #12]
 80046ae:	60b9      	str	r1, [r7, #8]
 80046b0:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80046b2:	68ba      	ldr	r2, [r7, #8]
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	1ad3      	subs	r3, r2, r3
 80046b8:	109b      	asrs	r3, r3, #2
 80046ba:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d006      	beq.n	80046d0 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	009b      	lsls	r3, r3, #2
 80046c6:	461a      	mov	r2, r3
 80046c8:	68f9      	ldr	r1, [r7, #12]
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f00f ff6b 	bl	80145a6 <memmove>
	  return __result + _Num;
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	009b      	lsls	r3, r3, #2
 80046d4:	687a      	ldr	r2, [r7, #4]
 80046d6:	4413      	add	r3, r2
	}
 80046d8:	4618      	mov	r0, r3
 80046da:	3718      	adds	r7, #24
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}

080046e0 <_ZN7SoC_EKF7get_SoCEv>:
    // negative current -> charge
    void update(const float &Current, const float &Voltage);

    void update_SoC_based_on_voltage(const float &Voltage);
    
    [[nodiscard]] float get_SoC(){return _State_vector[SoC];};
 80046e0:	b480      	push	{r7}
 80046e2:	b083      	sub	sp, #12
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80046ee:	ee07 3a90 	vmov	s15, r3
 80046f2:	eeb0 0a67 	vmov.f32	s0, s15
 80046f6:	370c      	adds	r7, #12
 80046f8:	46bd      	mov	sp, r7
 80046fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fe:	4770      	bx	lr

08004700 <_Z17calculate_currentv>:
float max_divided_current_sensor_output_voltage = ((float)(CS_MAX_OUTPUT_VOLTAGE * RESISTOR_2) / (float)(RESISTOR_1 + RESISTOR_2)) / 1000.0;
float current_sensor_volts_to_amper = ((float)(CS_MVOLT_TO_AMPER * RESISTOR_2) / (float)(RESISTOR_1 + RESISTOR_2)) / 1000.0;
float output_current_factor = max_divided_current_sensor_output_voltage / 4096.0 * (1.0 / current_sensor_volts_to_amper);

void calculate_current()
{
 8004700:	b480      	push	{r7}
 8004702:	b087      	sub	sp, #28
 8004704:	af00      	add	r7, sp, #0
	float raw_sum = 0, raw_max = INT32_MIN, raw_min = INT32_MAX, avarage_adc;
 8004706:	f04f 0300 	mov.w	r3, #0
 800470a:	617b      	str	r3, [r7, #20]
 800470c:	f04f 434f 	mov.w	r3, #3472883712	; 0xcf000000
 8004710:	613b      	str	r3, [r7, #16]
 8004712:	f04f 439e 	mov.w	r3, #1325400064	; 0x4f000000
 8004716:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < NUMBER_OF_CS_SAMPLES; i++)
 8004718:	2300      	movs	r3, #0
 800471a:	60bb      	str	r3, [r7, #8]
 800471c:	e03e      	b.n	800479c <_Z17calculate_currentv+0x9c>
	{
		int16_t raw_value = data.current.adc[i];
 800471e:	4a43      	ldr	r2, [pc, #268]	; (800482c <_Z17calculate_currentv+0x12c>)
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	330e      	adds	r3, #14
 8004724:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004728:	807b      	strh	r3, [r7, #2]
		raw_sum += raw_value;
 800472a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800472e:	ee07 3a90 	vmov	s15, r3
 8004732:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004736:	ed97 7a05 	vldr	s14, [r7, #20]
 800473a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800473e:	edc7 7a05 	vstr	s15, [r7, #20]
		if(raw_value > raw_max) raw_max = raw_value;
 8004742:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004746:	ee07 3a90 	vmov	s15, r3
 800474a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800474e:	ed97 7a04 	vldr	s14, [r7, #16]
 8004752:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800475a:	d507      	bpl.n	800476c <_Z17calculate_currentv+0x6c>
 800475c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004760:	ee07 3a90 	vmov	s15, r3
 8004764:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004768:	edc7 7a04 	vstr	s15, [r7, #16]
		if(raw_value < raw_min) raw_min = raw_value;
 800476c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004770:	ee07 3a90 	vmov	s15, r3
 8004774:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004778:	ed97 7a03 	vldr	s14, [r7, #12]
 800477c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004780:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004784:	dd07      	ble.n	8004796 <_Z17calculate_currentv+0x96>
 8004786:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800478a:	ee07 3a90 	vmov	s15, r3
 800478e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004792:	edc7 7a03 	vstr	s15, [r7, #12]
	for(int i = 0; i < NUMBER_OF_CS_SAMPLES; i++)
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	3301      	adds	r3, #1
 800479a:	60bb      	str	r3, [r7, #8]
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	2b63      	cmp	r3, #99	; 0x63
 80047a0:	ddbd      	ble.n	800471e <_Z17calculate_currentv+0x1e>
	}
	avarage_adc = raw_sum / NUMBER_OF_CS_SAMPLES;
 80047a2:	ed97 7a05 	vldr	s14, [r7, #20]
 80047a6:	eddf 6a22 	vldr	s13, [pc, #136]	; 8004830 <_Z17calculate_currentv+0x130>
 80047aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80047ae:	edc7 7a01 	vstr	s15, [r7, #4]

	avarage_adc -= NEUTRAL_CURRENT_SENSOR;
 80047b2:	edd7 7a01 	vldr	s15, [r7, #4]
 80047b6:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8004834 <_Z17calculate_currentv+0x134>
 80047ba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80047be:	edc7 7a01 	vstr	s15, [r7, #4]
	raw_max -= NEUTRAL_CURRENT_SENSOR;
 80047c2:	edd7 7a04 	vldr	s15, [r7, #16]
 80047c6:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8004834 <_Z17calculate_currentv+0x134>
 80047ca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80047ce:	edc7 7a04 	vstr	s15, [r7, #16]
	raw_min -= NEUTRAL_CURRENT_SENSOR;
 80047d2:	edd7 7a03 	vldr	s15, [r7, #12]
 80047d6:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8004834 <_Z17calculate_currentv+0x134>
 80047da:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80047de:	edc7 7a03 	vstr	s15, [r7, #12]

	data.current.value = avarage_adc * output_current_factor;
 80047e2:	4b15      	ldr	r3, [pc, #84]	; (8004838 <_Z17calculate_currentv+0x138>)
 80047e4:	ed93 7a00 	vldr	s14, [r3]
 80047e8:	edd7 7a01 	vldr	s15, [r7, #4]
 80047ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047f0:	4b0e      	ldr	r3, [pc, #56]	; (800482c <_Z17calculate_currentv+0x12c>)
 80047f2:	edc3 7a72 	vstr	s15, [r3, #456]	; 0x1c8
	data.current.value_max = (float)raw_max * output_current_factor;
 80047f6:	4b10      	ldr	r3, [pc, #64]	; (8004838 <_Z17calculate_currentv+0x138>)
 80047f8:	ed93 7a00 	vldr	s14, [r3]
 80047fc:	edd7 7a04 	vldr	s15, [r7, #16]
 8004800:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004804:	4b09      	ldr	r3, [pc, #36]	; (800482c <_Z17calculate_currentv+0x12c>)
 8004806:	edc3 7a73 	vstr	s15, [r3, #460]	; 0x1cc
	data.current.value_min = (float)raw_min * output_current_factor;
 800480a:	4b0b      	ldr	r3, [pc, #44]	; (8004838 <_Z17calculate_currentv+0x138>)
 800480c:	ed93 7a00 	vldr	s14, [r3]
 8004810:	edd7 7a03 	vldr	s15, [r7, #12]
 8004814:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004818:	4b04      	ldr	r3, [pc, #16]	; (800482c <_Z17calculate_currentv+0x12c>)
 800481a:	edc3 7a74 	vstr	s15, [r3, #464]	; 0x1d0
		chargingState = 1;
	}else if (outputCurrent >= 0 || HAL_GPIO_ReadPin(LED_2_GPIO_Port, LED_2_Pin) == 1){
		chargingState = 0;
	}*/

}
 800481e:	bf00      	nop
 8004820:	371c      	adds	r7, #28
 8004822:	46bd      	mov	sp, r7
 8004824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004828:	4770      	bx	lr
 800482a:	bf00      	nop
 800482c:	20001478 	.word	0x20001478
 8004830:	42c80000 	.word	0x42c80000
 8004834:	4501b000 	.word	0x4501b000
 8004838:	20003f04 	.word	0x20003f04

0800483c <_Z18start_soc_functionPv>:

void start_soc_function(void *argument){
 800483c:	b580      	push	{r7, lr}
 800483e:	b086      	sub	sp, #24
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
	data.soc.main.set_single_cell_equivalent_model(ICR18650);
 8004844:	4933      	ldr	r1, [pc, #204]	; (8004914 <_Z18start_soc_functionPv+0xd8>)
 8004846:	4834      	ldr	r0, [pc, #208]	; (8004918 <_Z18start_soc_functionPv+0xdc>)
 8004848:	f7ff fdac 	bl	80043a4 <_ZN7SoC_EKF32set_single_cell_equivalent_modelEPKf>
	data.soc.main.set_single_cell_ocv_polinomial(Li_Ion_ocv, Li_Ion_ocv_length);
 800484c:	2209      	movs	r2, #9
 800484e:	4933      	ldr	r1, [pc, #204]	; (800491c <_Z18start_soc_functionPv+0xe0>)
 8004850:	4831      	ldr	r0, [pc, #196]	; (8004918 <_Z18start_soc_functionPv+0xdc>)
 8004852:	f7ff fdfb 	bl	800444c <_ZN7SoC_EKF30set_single_cell_ocv_polinomialEPKfj>
	data.soc.main.set_battery_configuration(1, 2);
 8004856:	2301      	movs	r3, #1
 8004858:	613b      	str	r3, [r7, #16]
 800485a:	2302      	movs	r3, #2
 800485c:	617b      	str	r3, [r7, #20]
 800485e:	f107 0214 	add.w	r2, r7, #20
 8004862:	f107 0310 	add.w	r3, r7, #16
 8004866:	4619      	mov	r1, r3
 8004868:	482b      	ldr	r0, [pc, #172]	; (8004918 <_Z18start_soc_functionPv+0xdc>)
 800486a:	f7ff fddb 	bl	8004424 <_ZN7SoC_EKF25set_battery_configurationEOjS0_>
	data.soc.main.set_time_sampling(0.03f);
 800486e:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8004920 <_Z18start_soc_functionPv+0xe4>
 8004872:	4829      	ldr	r0, [pc, #164]	; (8004918 <_Z18start_soc_functionPv+0xdc>)
 8004874:	f7ff fdc7 	bl	8004406 <_ZN7SoC_EKF17set_time_samplingEf>
	data.soc.main.set_update_matrix();
 8004878:	4827      	ldr	r0, [pc, #156]	; (8004918 <_Z18start_soc_functionPv+0xdc>)
 800487a:	f7ff fb21 	bl	8003ec0 <_ZN7SoC_EKF17set_update_matrixEv>
	data.soc.main.set_initial_SoC(0.5);
 800487e:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8004882:	4825      	ldr	r0, [pc, #148]	; (8004918 <_Z18start_soc_functionPv+0xdc>)
 8004884:	f7ff fda0 	bl	80043c8 <_ZN7SoC_EKF15set_initial_SoCEf>

	osDelay(100);
 8004888:	2064      	movs	r0, #100	; 0x64
 800488a:	f00b fcc1 	bl	8010210 <osDelay>

	float temp_voltage = (float)data.voltages.cells[0] / 10'000.0f;
 800488e:	4b25      	ldr	r3, [pc, #148]	; (8004924 <_Z18start_soc_functionPv+0xe8>)
 8004890:	881b      	ldrh	r3, [r3, #0]
 8004892:	ee07 3a90 	vmov	s15, r3
 8004896:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800489a:	eddf 6a23 	vldr	s13, [pc, #140]	; 8004928 <_Z18start_soc_functionPv+0xec>
 800489e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80048a2:	edc7 7a03 	vstr	s15, [r7, #12]
	data.soc.main.update_SoC_based_on_voltage(temp_voltage);
 80048a6:	f107 030c 	add.w	r3, r7, #12
 80048aa:	4619      	mov	r1, r3
 80048ac:	481a      	ldr	r0, [pc, #104]	; (8004918 <_Z18start_soc_functionPv+0xdc>)
 80048ae:	f7ff fd09 	bl	80042c4 <_ZN7SoC_EKF27update_SoC_based_on_voltageERKf>

	for(;;){
		osDelay(30);
 80048b2:	201e      	movs	r0, #30
 80048b4:	f00b fcac 	bl	8010210 <osDelay>

		calculate_current();
 80048b8:	f7ff ff22 	bl	8004700 <_Z17calculate_currentv>

		float temp_voltage = (float)data.voltages.cells[0] / 10'000.0f;
 80048bc:	4b19      	ldr	r3, [pc, #100]	; (8004924 <_Z18start_soc_functionPv+0xe8>)
 80048be:	881b      	ldrh	r3, [r3, #0]
 80048c0:	ee07 3a90 	vmov	s15, r3
 80048c4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80048c8:	eddf 6a17 	vldr	s13, [pc, #92]	; 8004928 <_Z18start_soc_functionPv+0xec>
 80048cc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80048d0:	edc7 7a02 	vstr	s15, [r7, #8]
		data.soc.main.update(data.current.value, temp_voltage);
 80048d4:	f107 0308 	add.w	r3, r7, #8
 80048d8:	461a      	mov	r2, r3
 80048da:	4914      	ldr	r1, [pc, #80]	; (800492c <_Z18start_soc_functionPv+0xf0>)
 80048dc:	480e      	ldr	r0, [pc, #56]	; (8004918 <_Z18start_soc_functionPv+0xdc>)
 80048de:	f7ff fbbb 	bl	8004058 <_ZN7SoC_EKF6updateERKfS1_>
		data.soc.value = data.soc.main.get_SoC();
 80048e2:	480d      	ldr	r0, [pc, #52]	; (8004918 <_Z18start_soc_functionPv+0xdc>)
 80048e4:	f7ff fefc 	bl	80046e0 <_ZN7SoC_EKF7get_SoCEv>
 80048e8:	eef0 7a40 	vmov.f32	s15, s0
 80048ec:	4b0d      	ldr	r3, [pc, #52]	; (8004924 <_Z18start_soc_functionPv+0xe8>)
 80048ee:	edc3 7aa2 	vstr	s15, [r3, #648]	; 0x288
		data.soc.value_can = (uint8_t)(data.soc.value * 100);
 80048f2:	4b0c      	ldr	r3, [pc, #48]	; (8004924 <_Z18start_soc_functionPv+0xe8>)
 80048f4:	edd3 7aa2 	vldr	s15, [r3, #648]	; 0x288
 80048f8:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8004930 <_Z18start_soc_functionPv+0xf4>
 80048fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004900:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004904:	edc7 7a00 	vstr	s15, [r7]
 8004908:	783b      	ldrb	r3, [r7, #0]
 800490a:	b2da      	uxtb	r2, r3
 800490c:	4b05      	ldr	r3, [pc, #20]	; (8004924 <_Z18start_soc_functionPv+0xe8>)
 800490e:	f883 228c 	strb.w	r2, [r3, #652]	; 0x28c

	}
 8004912:	e7ce      	b.n	80048b2 <_Z18start_soc_functionPv+0x76>
 8004914:	08016e18 	.word	0x08016e18
 8004918:	2000164c 	.word	0x2000164c
 800491c:	08016e30 	.word	0x08016e30
 8004920:	3cf5c28f 	.word	0x3cf5c28f
 8004924:	20001478 	.word	0x20001478
 8004928:	461c4000 	.word	0x461c4000
 800492c:	20001640 	.word	0x20001640
 8004930:	42c80000 	.word	0x42c80000

08004934 <_Z41__static_initialization_and_destruction_0ii>:
}
 8004934:	b480      	push	{r7}
 8004936:	b083      	sub	sp, #12
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
 800493c:	6039      	str	r1, [r7, #0]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2b01      	cmp	r3, #1
 8004942:	d117      	bne.n	8004974 <_Z41__static_initialization_and_destruction_0ii+0x40>
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800494a:	4293      	cmp	r3, r2
 800494c:	d112      	bne.n	8004974 <_Z41__static_initialization_and_destruction_0ii+0x40>
float output_current_factor = max_divided_current_sensor_output_voltage / 4096.0 * (1.0 / current_sensor_volts_to_amper);
 800494e:	4b0c      	ldr	r3, [pc, #48]	; (8004980 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8004950:	edd3 7a00 	vldr	s15, [r3]
 8004954:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8004984 <_Z41__static_initialization_and_destruction_0ii+0x50>
 8004958:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800495c:	4b0a      	ldr	r3, [pc, #40]	; (8004988 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 800495e:	edd3 6a00 	vldr	s13, [r3]
 8004962:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8004966:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800496a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800496e:	4b07      	ldr	r3, [pc, #28]	; (800498c <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8004970:	edc3 7a00 	vstr	s15, [r3]
}
 8004974:	bf00      	nop
 8004976:	370c      	adds	r7, #12
 8004978:	46bd      	mov	sp, r7
 800497a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497e:	4770      	bx	lr
 8004980:	2000021c 	.word	0x2000021c
 8004984:	45800000 	.word	0x45800000
 8004988:	20000220 	.word	0x20000220
 800498c:	20003f04 	.word	0x20003f04

08004990 <_GLOBAL__sub_I_max_divided_current_sensor_output_voltage>:
 8004990:	b580      	push	{r7, lr}
 8004992:	af00      	add	r7, sp, #0
 8004994:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004998:	2001      	movs	r0, #1
 800499a:	f7ff ffcb 	bl	8004934 <_Z41__static_initialization_and_destruction_0ii>
 800499e:	bd80      	pop	{r7, pc}

080049a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b082      	sub	sp, #8
 80049a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80049a6:	4b11      	ldr	r3, [pc, #68]	; (80049ec <HAL_MspInit+0x4c>)
 80049a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049aa:	4a10      	ldr	r2, [pc, #64]	; (80049ec <HAL_MspInit+0x4c>)
 80049ac:	f043 0301 	orr.w	r3, r3, #1
 80049b0:	6613      	str	r3, [r2, #96]	; 0x60
 80049b2:	4b0e      	ldr	r3, [pc, #56]	; (80049ec <HAL_MspInit+0x4c>)
 80049b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049b6:	f003 0301 	and.w	r3, r3, #1
 80049ba:	607b      	str	r3, [r7, #4]
 80049bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80049be:	4b0b      	ldr	r3, [pc, #44]	; (80049ec <HAL_MspInit+0x4c>)
 80049c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049c2:	4a0a      	ldr	r2, [pc, #40]	; (80049ec <HAL_MspInit+0x4c>)
 80049c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049c8:	6593      	str	r3, [r2, #88]	; 0x58
 80049ca:	4b08      	ldr	r3, [pc, #32]	; (80049ec <HAL_MspInit+0x4c>)
 80049cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049d2:	603b      	str	r3, [r7, #0]
 80049d4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80049d6:	2200      	movs	r2, #0
 80049d8:	210f      	movs	r1, #15
 80049da:	f06f 0001 	mvn.w	r0, #1
 80049de:	f003 f91d 	bl	8007c1c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80049e2:	bf00      	nop
 80049e4:	3708      	adds	r7, #8
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}
 80049ea:	bf00      	nop
 80049ec:	40021000 	.word	0x40021000

080049f0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b0b4      	sub	sp, #208	; 0xd0
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049f8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80049fc:	2200      	movs	r2, #0
 80049fe:	601a      	str	r2, [r3, #0]
 8004a00:	605a      	str	r2, [r3, #4]
 8004a02:	609a      	str	r2, [r3, #8]
 8004a04:	60da      	str	r2, [r3, #12]
 8004a06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004a08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a0c:	2298      	movs	r2, #152	; 0x98
 8004a0e:	2100      	movs	r1, #0
 8004a10:	4618      	mov	r0, r3
 8004a12:	f00f fde2 	bl	80145da <memset>
  if(hadc->Instance==ADC1)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a97      	ldr	r2, [pc, #604]	; (8004c78 <HAL_ADC_MspInit+0x288>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	f040 80ad 	bne.w	8004b7c <HAL_ADC_MspInit+0x18c>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8004a22:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004a26:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8004a28:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8004a2c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004a30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a34:	4618      	mov	r0, r3
 8004a36:	f005 ffa3 	bl	800a980 <HAL_RCCEx_PeriphCLKConfig>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d001      	beq.n	8004a44 <HAL_ADC_MspInit+0x54>
    {
      Error_Handler();
 8004a40:	f7ff f98c 	bl	8003d5c <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 8004a44:	4b8d      	ldr	r3, [pc, #564]	; (8004c7c <HAL_ADC_MspInit+0x28c>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	3301      	adds	r3, #1
 8004a4a:	4a8c      	ldr	r2, [pc, #560]	; (8004c7c <HAL_ADC_MspInit+0x28c>)
 8004a4c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8004a4e:	4b8b      	ldr	r3, [pc, #556]	; (8004c7c <HAL_ADC_MspInit+0x28c>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d10b      	bne.n	8004a6e <HAL_ADC_MspInit+0x7e>
      __HAL_RCC_ADC_CLK_ENABLE();
 8004a56:	4b8a      	ldr	r3, [pc, #552]	; (8004c80 <HAL_ADC_MspInit+0x290>)
 8004a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a5a:	4a89      	ldr	r2, [pc, #548]	; (8004c80 <HAL_ADC_MspInit+0x290>)
 8004a5c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004a60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004a62:	4b87      	ldr	r3, [pc, #540]	; (8004c80 <HAL_ADC_MspInit+0x290>)
 8004a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a66:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a6a:	623b      	str	r3, [r7, #32]
 8004a6c:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a6e:	4b84      	ldr	r3, [pc, #528]	; (8004c80 <HAL_ADC_MspInit+0x290>)
 8004a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a72:	4a83      	ldr	r2, [pc, #524]	; (8004c80 <HAL_ADC_MspInit+0x290>)
 8004a74:	f043 0301 	orr.w	r3, r3, #1
 8004a78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004a7a:	4b81      	ldr	r3, [pc, #516]	; (8004c80 <HAL_ADC_MspInit+0x290>)
 8004a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a7e:	f003 0301 	and.w	r3, r3, #1
 8004a82:	61fb      	str	r3, [r7, #28]
 8004a84:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004a86:	4b7e      	ldr	r3, [pc, #504]	; (8004c80 <HAL_ADC_MspInit+0x290>)
 8004a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a8a:	4a7d      	ldr	r2, [pc, #500]	; (8004c80 <HAL_ADC_MspInit+0x290>)
 8004a8c:	f043 0304 	orr.w	r3, r3, #4
 8004a90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004a92:	4b7b      	ldr	r3, [pc, #492]	; (8004c80 <HAL_ADC_MspInit+0x290>)
 8004a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a96:	f003 0304 	and.w	r3, r3, #4
 8004a9a:	61bb      	str	r3, [r7, #24]
 8004a9c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a9e:	4b78      	ldr	r3, [pc, #480]	; (8004c80 <HAL_ADC_MspInit+0x290>)
 8004aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004aa2:	4a77      	ldr	r2, [pc, #476]	; (8004c80 <HAL_ADC_MspInit+0x290>)
 8004aa4:	f043 0302 	orr.w	r3, r3, #2
 8004aa8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004aaa:	4b75      	ldr	r3, [pc, #468]	; (8004c80 <HAL_ADC_MspInit+0x290>)
 8004aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004aae:	f003 0302 	and.w	r3, r3, #2
 8004ab2:	617b      	str	r3, [r7, #20]
 8004ab4:	697b      	ldr	r3, [r7, #20]
    PA7     ------> ADC1_IN12
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = THERM_1_Pin|THERM_2_Pin|THERM_3_Pin|THERM_4_Pin
 8004ab6:	23f8      	movs	r3, #248	; 0xf8
 8004ab8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
                          |THERM_5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8004abc:	230b      	movs	r3, #11
 8004abe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ac8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8004acc:	4619      	mov	r1, r3
 8004ace:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004ad2:	f003 fb3f 	bl	8008154 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = THERM_6_Pin|THERM_7_Pin;
 8004ad6:	2330      	movs	r3, #48	; 0x30
 8004ad8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8004adc:	230b      	movs	r3, #11
 8004ade:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004ae8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8004aec:	4619      	mov	r1, r3
 8004aee:	4865      	ldr	r0, [pc, #404]	; (8004c84 <HAL_ADC_MspInit+0x294>)
 8004af0:	f003 fb30 	bl	8008154 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = THERM_8_Pin;
 8004af4:	2301      	movs	r3, #1
 8004af6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8004afa:	230b      	movs	r3, #11
 8004afc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b00:	2300      	movs	r3, #0
 8004b02:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(THERM_8_GPIO_Port, &GPIO_InitStruct);
 8004b06:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8004b0a:	4619      	mov	r1, r3
 8004b0c:	485e      	ldr	r0, [pc, #376]	; (8004c88 <HAL_ADC_MspInit+0x298>)
 8004b0e:	f003 fb21 	bl	8008154 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8004b12:	4b5e      	ldr	r3, [pc, #376]	; (8004c8c <HAL_ADC_MspInit+0x29c>)
 8004b14:	4a5e      	ldr	r2, [pc, #376]	; (8004c90 <HAL_ADC_MspInit+0x2a0>)
 8004b16:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8004b18:	4b5c      	ldr	r3, [pc, #368]	; (8004c8c <HAL_ADC_MspInit+0x29c>)
 8004b1a:	2205      	movs	r2, #5
 8004b1c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004b1e:	4b5b      	ldr	r3, [pc, #364]	; (8004c8c <HAL_ADC_MspInit+0x29c>)
 8004b20:	2200      	movs	r2, #0
 8004b22:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004b24:	4b59      	ldr	r3, [pc, #356]	; (8004c8c <HAL_ADC_MspInit+0x29c>)
 8004b26:	2200      	movs	r2, #0
 8004b28:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004b2a:	4b58      	ldr	r3, [pc, #352]	; (8004c8c <HAL_ADC_MspInit+0x29c>)
 8004b2c:	2280      	movs	r2, #128	; 0x80
 8004b2e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004b30:	4b56      	ldr	r3, [pc, #344]	; (8004c8c <HAL_ADC_MspInit+0x29c>)
 8004b32:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004b36:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004b38:	4b54      	ldr	r3, [pc, #336]	; (8004c8c <HAL_ADC_MspInit+0x29c>)
 8004b3a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004b3e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004b40:	4b52      	ldr	r3, [pc, #328]	; (8004c8c <HAL_ADC_MspInit+0x29c>)
 8004b42:	2220      	movs	r2, #32
 8004b44:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8004b46:	4b51      	ldr	r3, [pc, #324]	; (8004c8c <HAL_ADC_MspInit+0x29c>)
 8004b48:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004b4c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004b4e:	484f      	ldr	r0, [pc, #316]	; (8004c8c <HAL_ADC_MspInit+0x29c>)
 8004b50:	f003 f88e 	bl	8007c70 <HAL_DMA_Init>
 8004b54:	4603      	mov	r3, r0
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d001      	beq.n	8004b5e <HAL_ADC_MspInit+0x16e>
    {
      Error_Handler();
 8004b5a:	f7ff f8ff 	bl	8003d5c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	4a4a      	ldr	r2, [pc, #296]	; (8004c8c <HAL_ADC_MspInit+0x29c>)
 8004b62:	651a      	str	r2, [r3, #80]	; 0x50
 8004b64:	4a49      	ldr	r2, [pc, #292]	; (8004c8c <HAL_ADC_MspInit+0x29c>)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	2105      	movs	r1, #5
 8004b6e:	2012      	movs	r0, #18
 8004b70:	f003 f854 	bl	8007c1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8004b74:	2012      	movs	r0, #18
 8004b76:	f003 f86d 	bl	8007c54 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8004b7a:	e079      	b.n	8004c70 <HAL_ADC_MspInit+0x280>
  else if(hadc->Instance==ADC2)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a44      	ldr	r2, [pc, #272]	; (8004c94 <HAL_ADC_MspInit+0x2a4>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d174      	bne.n	8004c70 <HAL_ADC_MspInit+0x280>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8004b86:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004b8a:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8004b8c:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8004b90:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004b94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b98:	4618      	mov	r0, r3
 8004b9a:	f005 fef1 	bl	800a980 <HAL_RCCEx_PeriphCLKConfig>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d001      	beq.n	8004ba8 <HAL_ADC_MspInit+0x1b8>
      Error_Handler();
 8004ba4:	f7ff f8da 	bl	8003d5c <Error_Handler>
    HAL_RCC_ADC_CLK_ENABLED++;
 8004ba8:	4b34      	ldr	r3, [pc, #208]	; (8004c7c <HAL_ADC_MspInit+0x28c>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	3301      	adds	r3, #1
 8004bae:	4a33      	ldr	r2, [pc, #204]	; (8004c7c <HAL_ADC_MspInit+0x28c>)
 8004bb0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8004bb2:	4b32      	ldr	r3, [pc, #200]	; (8004c7c <HAL_ADC_MspInit+0x28c>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	d10b      	bne.n	8004bd2 <HAL_ADC_MspInit+0x1e2>
      __HAL_RCC_ADC_CLK_ENABLE();
 8004bba:	4b31      	ldr	r3, [pc, #196]	; (8004c80 <HAL_ADC_MspInit+0x290>)
 8004bbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bbe:	4a30      	ldr	r2, [pc, #192]	; (8004c80 <HAL_ADC_MspInit+0x290>)
 8004bc0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004bc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004bc6:	4b2e      	ldr	r3, [pc, #184]	; (8004c80 <HAL_ADC_MspInit+0x290>)
 8004bc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004bce:	613b      	str	r3, [r7, #16]
 8004bd0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004bd2:	4b2b      	ldr	r3, [pc, #172]	; (8004c80 <HAL_ADC_MspInit+0x290>)
 8004bd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bd6:	4a2a      	ldr	r2, [pc, #168]	; (8004c80 <HAL_ADC_MspInit+0x290>)
 8004bd8:	f043 0302 	orr.w	r3, r3, #2
 8004bdc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004bde:	4b28      	ldr	r3, [pc, #160]	; (8004c80 <HAL_ADC_MspInit+0x290>)
 8004be0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004be2:	f003 0302 	and.w	r3, r3, #2
 8004be6:	60fb      	str	r3, [r7, #12]
 8004be8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = CURRENT_SENSOR_Pin;
 8004bea:	2302      	movs	r3, #2
 8004bec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8004bf0:	230b      	movs	r3, #11
 8004bf2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(CURRENT_SENSOR_GPIO_Port, &GPIO_InitStruct);
 8004bfc:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8004c00:	4619      	mov	r1, r3
 8004c02:	4821      	ldr	r0, [pc, #132]	; (8004c88 <HAL_ADC_MspInit+0x298>)
 8004c04:	f003 faa6 	bl	8008154 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Channel1;
 8004c08:	4b23      	ldr	r3, [pc, #140]	; (8004c98 <HAL_ADC_MspInit+0x2a8>)
 8004c0a:	4a24      	ldr	r2, [pc, #144]	; (8004c9c <HAL_ADC_MspInit+0x2ac>)
 8004c0c:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8004c0e:	4b22      	ldr	r3, [pc, #136]	; (8004c98 <HAL_ADC_MspInit+0x2a8>)
 8004c10:	2206      	movs	r2, #6
 8004c12:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004c14:	4b20      	ldr	r3, [pc, #128]	; (8004c98 <HAL_ADC_MspInit+0x2a8>)
 8004c16:	2200      	movs	r2, #0
 8004c18:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8004c1a:	4b1f      	ldr	r3, [pc, #124]	; (8004c98 <HAL_ADC_MspInit+0x2a8>)
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8004c20:	4b1d      	ldr	r3, [pc, #116]	; (8004c98 <HAL_ADC_MspInit+0x2a8>)
 8004c22:	2280      	movs	r2, #128	; 0x80
 8004c24:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004c26:	4b1c      	ldr	r3, [pc, #112]	; (8004c98 <HAL_ADC_MspInit+0x2a8>)
 8004c28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c2c:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004c2e:	4b1a      	ldr	r3, [pc, #104]	; (8004c98 <HAL_ADC_MspInit+0x2a8>)
 8004c30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c34:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8004c36:	4b18      	ldr	r3, [pc, #96]	; (8004c98 <HAL_ADC_MspInit+0x2a8>)
 8004c38:	2220      	movs	r2, #32
 8004c3a:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_HIGH;
 8004c3c:	4b16      	ldr	r3, [pc, #88]	; (8004c98 <HAL_ADC_MspInit+0x2a8>)
 8004c3e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004c42:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8004c44:	4814      	ldr	r0, [pc, #80]	; (8004c98 <HAL_ADC_MspInit+0x2a8>)
 8004c46:	f003 f813 	bl	8007c70 <HAL_DMA_Init>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d001      	beq.n	8004c54 <HAL_ADC_MspInit+0x264>
      Error_Handler();
 8004c50:	f7ff f884 	bl	8003d5c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	4a10      	ldr	r2, [pc, #64]	; (8004c98 <HAL_ADC_MspInit+0x2a8>)
 8004c58:	651a      	str	r2, [r3, #80]	; 0x50
 8004c5a:	4a0f      	ldr	r2, [pc, #60]	; (8004c98 <HAL_ADC_MspInit+0x2a8>)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8004c60:	2200      	movs	r2, #0
 8004c62:	2105      	movs	r1, #5
 8004c64:	2012      	movs	r0, #18
 8004c66:	f002 ffd9 	bl	8007c1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8004c6a:	2012      	movs	r0, #18
 8004c6c:	f002 fff2 	bl	8007c54 <HAL_NVIC_EnableIRQ>
}
 8004c70:	bf00      	nop
 8004c72:	37d0      	adds	r7, #208	; 0xd0
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}
 8004c78:	50040000 	.word	0x50040000
 8004c7c:	20003f08 	.word	0x20003f08
 8004c80:	40021000 	.word	0x40021000
 8004c84:	48000800 	.word	0x48000800
 8004c88:	48000400 	.word	0x48000400
 8004c8c:	200019ec 	.word	0x200019ec
 8004c90:	40020008 	.word	0x40020008
 8004c94:	50040100 	.word	0x50040100
 8004c98:	20001a4c 	.word	0x20001a4c
 8004c9c:	40020408 	.word	0x40020408

08004ca0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b08a      	sub	sp, #40	; 0x28
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ca8:	f107 0314 	add.w	r3, r7, #20
 8004cac:	2200      	movs	r2, #0
 8004cae:	601a      	str	r2, [r3, #0]
 8004cb0:	605a      	str	r2, [r3, #4]
 8004cb2:	609a      	str	r2, [r3, #8]
 8004cb4:	60da      	str	r2, [r3, #12]
 8004cb6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a1b      	ldr	r2, [pc, #108]	; (8004d2c <HAL_CAN_MspInit+0x8c>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d130      	bne.n	8004d24 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8004cc2:	4b1b      	ldr	r3, [pc, #108]	; (8004d30 <HAL_CAN_MspInit+0x90>)
 8004cc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cc6:	4a1a      	ldr	r2, [pc, #104]	; (8004d30 <HAL_CAN_MspInit+0x90>)
 8004cc8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004ccc:	6593      	str	r3, [r2, #88]	; 0x58
 8004cce:	4b18      	ldr	r3, [pc, #96]	; (8004d30 <HAL_CAN_MspInit+0x90>)
 8004cd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cd6:	613b      	str	r3, [r7, #16]
 8004cd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004cda:	4b15      	ldr	r3, [pc, #84]	; (8004d30 <HAL_CAN_MspInit+0x90>)
 8004cdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cde:	4a14      	ldr	r2, [pc, #80]	; (8004d30 <HAL_CAN_MspInit+0x90>)
 8004ce0:	f043 0302 	orr.w	r3, r3, #2
 8004ce4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004ce6:	4b12      	ldr	r3, [pc, #72]	; (8004d30 <HAL_CAN_MspInit+0x90>)
 8004ce8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cea:	f003 0302 	and.w	r3, r3, #2
 8004cee:	60fb      	str	r3, [r7, #12]
 8004cf0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004cf2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004cf6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cf8:	2302      	movs	r3, #2
 8004cfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d00:	2303      	movs	r3, #3
 8004d02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8004d04:	2309      	movs	r3, #9
 8004d06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d08:	f107 0314 	add.w	r3, r7, #20
 8004d0c:	4619      	mov	r1, r3
 8004d0e:	4809      	ldr	r0, [pc, #36]	; (8004d34 <HAL_CAN_MspInit+0x94>)
 8004d10:	f003 fa20 	bl	8008154 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 8004d14:	2200      	movs	r2, #0
 8004d16:	2105      	movs	r1, #5
 8004d18:	2013      	movs	r0, #19
 8004d1a:	f002 ff7f 	bl	8007c1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8004d1e:	2013      	movs	r0, #19
 8004d20:	f002 ff98 	bl	8007c54 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8004d24:	bf00      	nop
 8004d26:	3728      	adds	r7, #40	; 0x28
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bd80      	pop	{r7, pc}
 8004d2c:	40006400 	.word	0x40006400
 8004d30:	40021000 	.word	0x40021000
 8004d34:	48000400 	.word	0x48000400

08004d38 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b0aa      	sub	sp, #168	; 0xa8
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004d40:	f107 0310 	add.w	r3, r7, #16
 8004d44:	2298      	movs	r2, #152	; 0x98
 8004d46:	2100      	movs	r1, #0
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f00f fc46 	bl	80145da <memset>
  if(hrtc->Instance==RTC)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a16      	ldr	r2, [pc, #88]	; (8004dac <HAL_RTC_MspInit+0x74>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d124      	bne.n	8004da2 <HAL_RTC_MspInit+0x6a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004d58:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004d5c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8004d5e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004d62:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004d66:	f107 0310 	add.w	r3, r7, #16
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f005 fe08 	bl	800a980 <HAL_RCCEx_PeriphCLKConfig>
 8004d70:	4603      	mov	r3, r0
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d001      	beq.n	8004d7a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8004d76:	f7fe fff1 	bl	8003d5c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004d7a:	4b0d      	ldr	r3, [pc, #52]	; (8004db0 <HAL_RTC_MspInit+0x78>)
 8004d7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d80:	4a0b      	ldr	r2, [pc, #44]	; (8004db0 <HAL_RTC_MspInit+0x78>)
 8004d82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d86:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8004d8a:	4b09      	ldr	r3, [pc, #36]	; (8004db0 <HAL_RTC_MspInit+0x78>)
 8004d8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d8e:	4a08      	ldr	r2, [pc, #32]	; (8004db0 <HAL_RTC_MspInit+0x78>)
 8004d90:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004d94:	6593      	str	r3, [r2, #88]	; 0x58
 8004d96:	4b06      	ldr	r3, [pc, #24]	; (8004db0 <HAL_RTC_MspInit+0x78>)
 8004d98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d9e:	60fb      	str	r3, [r7, #12]
 8004da0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8004da2:	bf00      	nop
 8004da4:	37a8      	adds	r7, #168	; 0xa8
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}
 8004daa:	bf00      	nop
 8004dac:	40002800 	.word	0x40002800
 8004db0:	40021000 	.word	0x40021000

08004db4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b08a      	sub	sp, #40	; 0x28
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004dbc:	f107 0314 	add.w	r3, r7, #20
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	601a      	str	r2, [r3, #0]
 8004dc4:	605a      	str	r2, [r3, #4]
 8004dc6:	609a      	str	r2, [r3, #8]
 8004dc8:	60da      	str	r2, [r3, #12]
 8004dca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a1f      	ldr	r2, [pc, #124]	; (8004e50 <HAL_SPI_MspInit+0x9c>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d137      	bne.n	8004e46 <HAL_SPI_MspInit+0x92>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004dd6:	4b1f      	ldr	r3, [pc, #124]	; (8004e54 <HAL_SPI_MspInit+0xa0>)
 8004dd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dda:	4a1e      	ldr	r2, [pc, #120]	; (8004e54 <HAL_SPI_MspInit+0xa0>)
 8004ddc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004de0:	6613      	str	r3, [r2, #96]	; 0x60
 8004de2:	4b1c      	ldr	r3, [pc, #112]	; (8004e54 <HAL_SPI_MspInit+0xa0>)
 8004de4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004de6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004dea:	613b      	str	r3, [r7, #16]
 8004dec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004dee:	4b19      	ldr	r3, [pc, #100]	; (8004e54 <HAL_SPI_MspInit+0xa0>)
 8004df0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004df2:	4a18      	ldr	r2, [pc, #96]	; (8004e54 <HAL_SPI_MspInit+0xa0>)
 8004df4:	f043 0302 	orr.w	r3, r3, #2
 8004df8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004dfa:	4b16      	ldr	r3, [pc, #88]	; (8004e54 <HAL_SPI_MspInit+0xa0>)
 8004dfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dfe:	f003 0302 	and.w	r3, r3, #2
 8004e02:	60fb      	str	r3, [r7, #12]
 8004e04:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8004e06:	2328      	movs	r3, #40	; 0x28
 8004e08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e0a:	2302      	movs	r3, #2
 8004e0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e12:	2303      	movs	r3, #3
 8004e14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004e16:	2305      	movs	r3, #5
 8004e18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e1a:	f107 0314 	add.w	r3, r7, #20
 8004e1e:	4619      	mov	r1, r3
 8004e20:	480d      	ldr	r0, [pc, #52]	; (8004e58 <HAL_SPI_MspInit+0xa4>)
 8004e22:	f003 f997 	bl	8008154 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004e26:	2310      	movs	r3, #16
 8004e28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e2a:	2302      	movs	r3, #2
 8004e2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e32:	2303      	movs	r3, #3
 8004e34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004e36:	2305      	movs	r3, #5
 8004e38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e3a:	f107 0314 	add.w	r3, r7, #20
 8004e3e:	4619      	mov	r1, r3
 8004e40:	4805      	ldr	r0, [pc, #20]	; (8004e58 <HAL_SPI_MspInit+0xa4>)
 8004e42:	f003 f987 	bl	8008154 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8004e46:	bf00      	nop
 8004e48:	3728      	adds	r7, #40	; 0x28
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}
 8004e4e:	bf00      	nop
 8004e50:	40013000 	.word	0x40013000
 8004e54:	40021000 	.word	0x40021000
 8004e58:	48000400 	.word	0x48000400

08004e5c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b086      	sub	sp, #24
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a23      	ldr	r2, [pc, #140]	; (8004ef8 <HAL_TIM_Base_MspInit+0x9c>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d114      	bne.n	8004e98 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004e6e:	4b23      	ldr	r3, [pc, #140]	; (8004efc <HAL_TIM_Base_MspInit+0xa0>)
 8004e70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e72:	4a22      	ldr	r2, [pc, #136]	; (8004efc <HAL_TIM_Base_MspInit+0xa0>)
 8004e74:	f043 0302 	orr.w	r3, r3, #2
 8004e78:	6593      	str	r3, [r2, #88]	; 0x58
 8004e7a:	4b20      	ldr	r3, [pc, #128]	; (8004efc <HAL_TIM_Base_MspInit+0xa0>)
 8004e7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e7e:	f003 0302 	and.w	r3, r3, #2
 8004e82:	617b      	str	r3, [r7, #20]
 8004e84:	697b      	ldr	r3, [r7, #20]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8004e86:	2200      	movs	r2, #0
 8004e88:	2105      	movs	r1, #5
 8004e8a:	201d      	movs	r0, #29
 8004e8c:	f002 fec6 	bl	8007c1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004e90:	201d      	movs	r0, #29
 8004e92:	f002 fedf 	bl	8007c54 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8004e96:	e02a      	b.n	8004eee <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM6)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a18      	ldr	r2, [pc, #96]	; (8004f00 <HAL_TIM_Base_MspInit+0xa4>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d114      	bne.n	8004ecc <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004ea2:	4b16      	ldr	r3, [pc, #88]	; (8004efc <HAL_TIM_Base_MspInit+0xa0>)
 8004ea4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ea6:	4a15      	ldr	r2, [pc, #84]	; (8004efc <HAL_TIM_Base_MspInit+0xa0>)
 8004ea8:	f043 0310 	orr.w	r3, r3, #16
 8004eac:	6593      	str	r3, [r2, #88]	; 0x58
 8004eae:	4b13      	ldr	r3, [pc, #76]	; (8004efc <HAL_TIM_Base_MspInit+0xa0>)
 8004eb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eb2:	f003 0310 	and.w	r3, r3, #16
 8004eb6:	613b      	str	r3, [r7, #16]
 8004eb8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8004eba:	2200      	movs	r2, #0
 8004ebc:	2105      	movs	r1, #5
 8004ebe:	2036      	movs	r0, #54	; 0x36
 8004ec0:	f002 feac 	bl	8007c1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004ec4:	2036      	movs	r0, #54	; 0x36
 8004ec6:	f002 fec5 	bl	8007c54 <HAL_NVIC_EnableIRQ>
}
 8004eca:	e010      	b.n	8004eee <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM8)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a0c      	ldr	r2, [pc, #48]	; (8004f04 <HAL_TIM_Base_MspInit+0xa8>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d10b      	bne.n	8004eee <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004ed6:	4b09      	ldr	r3, [pc, #36]	; (8004efc <HAL_TIM_Base_MspInit+0xa0>)
 8004ed8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004eda:	4a08      	ldr	r2, [pc, #32]	; (8004efc <HAL_TIM_Base_MspInit+0xa0>)
 8004edc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004ee0:	6613      	str	r3, [r2, #96]	; 0x60
 8004ee2:	4b06      	ldr	r3, [pc, #24]	; (8004efc <HAL_TIM_Base_MspInit+0xa0>)
 8004ee4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ee6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004eea:	60fb      	str	r3, [r7, #12]
 8004eec:	68fb      	ldr	r3, [r7, #12]
}
 8004eee:	bf00      	nop
 8004ef0:	3718      	adds	r7, #24
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}
 8004ef6:	bf00      	nop
 8004ef8:	40000400 	.word	0x40000400
 8004efc:	40021000 	.word	0x40021000
 8004f00:	40001000 	.word	0x40001000
 8004f04:	40013400 	.word	0x40013400

08004f08 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b08c      	sub	sp, #48	; 0x30
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8004f10:	2300      	movs	r3, #0
 8004f12:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8004f14:	2300      	movs	r3, #0
 8004f16:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM16 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8004f18:	2200      	movs	r2, #0
 8004f1a:	6879      	ldr	r1, [r7, #4]
 8004f1c:	2019      	movs	r0, #25
 8004f1e:	f002 fe7d 	bl	8007c1c <HAL_NVIC_SetPriority>

  /* Enable the TIM16 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8004f22:	2019      	movs	r0, #25
 8004f24:	f002 fe96 	bl	8007c54 <HAL_NVIC_EnableIRQ>

  /* Enable TIM16 clock */
  __HAL_RCC_TIM16_CLK_ENABLE();
 8004f28:	4b1e      	ldr	r3, [pc, #120]	; (8004fa4 <HAL_InitTick+0x9c>)
 8004f2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f2c:	4a1d      	ldr	r2, [pc, #116]	; (8004fa4 <HAL_InitTick+0x9c>)
 8004f2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f32:	6613      	str	r3, [r2, #96]	; 0x60
 8004f34:	4b1b      	ldr	r3, [pc, #108]	; (8004fa4 <HAL_InitTick+0x9c>)
 8004f36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f3c:	60fb      	str	r3, [r7, #12]
 8004f3e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004f40:	f107 0210 	add.w	r2, r7, #16
 8004f44:	f107 0314 	add.w	r3, r7, #20
 8004f48:	4611      	mov	r1, r2
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f005 fc28 	bl	800a7a0 <HAL_RCC_GetClockConfig>

  /* Compute TIM16 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8004f50:	f005 fc10 	bl	800a774 <HAL_RCC_GetPCLK2Freq>
 8004f54:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM16 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f58:	4a13      	ldr	r2, [pc, #76]	; (8004fa8 <HAL_InitTick+0xa0>)
 8004f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f5e:	0c9b      	lsrs	r3, r3, #18
 8004f60:	3b01      	subs	r3, #1
 8004f62:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM16 */
  htim16.Instance = TIM16;
 8004f64:	4b11      	ldr	r3, [pc, #68]	; (8004fac <HAL_InitTick+0xa4>)
 8004f66:	4a12      	ldr	r2, [pc, #72]	; (8004fb0 <HAL_InitTick+0xa8>)
 8004f68:	601a      	str	r2, [r3, #0]
  + Period = [(TIM16CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim16.Init.Period = (1000000U / 1000U) - 1U;
 8004f6a:	4b10      	ldr	r3, [pc, #64]	; (8004fac <HAL_InitTick+0xa4>)
 8004f6c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004f70:	60da      	str	r2, [r3, #12]
  htim16.Init.Prescaler = uwPrescalerValue;
 8004f72:	4a0e      	ldr	r2, [pc, #56]	; (8004fac <HAL_InitTick+0xa4>)
 8004f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f76:	6053      	str	r3, [r2, #4]
  htim16.Init.ClockDivision = 0;
 8004f78:	4b0c      	ldr	r3, [pc, #48]	; (8004fac <HAL_InitTick+0xa4>)
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	611a      	str	r2, [r3, #16]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004f7e:	4b0b      	ldr	r3, [pc, #44]	; (8004fac <HAL_InitTick+0xa4>)
 8004f80:	2200      	movs	r2, #0
 8004f82:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim16) == HAL_OK)
 8004f84:	4809      	ldr	r0, [pc, #36]	; (8004fac <HAL_InitTick+0xa4>)
 8004f86:	f007 fb13 	bl	800c5b0 <HAL_TIM_Base_Init>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d104      	bne.n	8004f9a <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim16);
 8004f90:	4806      	ldr	r0, [pc, #24]	; (8004fac <HAL_InitTick+0xa4>)
 8004f92:	f007 fbcd 	bl	800c730 <HAL_TIM_Base_Start_IT>
 8004f96:	4603      	mov	r3, r0
 8004f98:	e000      	b.n	8004f9c <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	3730      	adds	r7, #48	; 0x30
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}
 8004fa4:	40021000 	.word	0x40021000
 8004fa8:	431bde83 	.word	0x431bde83
 8004fac:	20003f0c 	.word	0x20003f0c
 8004fb0:	40014400 	.word	0x40014400

08004fb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004fb8:	e7fe      	b.n	8004fb8 <NMI_Handler+0x4>

08004fba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004fba:	b480      	push	{r7}
 8004fbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004fbe:	e7fe      	b.n	8004fbe <HardFault_Handler+0x4>

08004fc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004fc4:	e7fe      	b.n	8004fc4 <MemManage_Handler+0x4>

08004fc6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004fc6:	b480      	push	{r7}
 8004fc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004fca:	e7fe      	b.n	8004fca <BusFault_Handler+0x4>

08004fcc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004fd0:	e7fe      	b.n	8004fd0 <UsageFault_Handler+0x4>

08004fd2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004fd2:	b480      	push	{r7}
 8004fd4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004fd6:	bf00      	nop
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fde:	4770      	bx	lr

08004fe0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004fe4:	4802      	ldr	r0, [pc, #8]	; (8004ff0 <DMA1_Channel1_IRQHandler+0x10>)
 8004fe6:	f002 ff66 	bl	8007eb6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004fea:	bf00      	nop
 8004fec:	bd80      	pop	{r7, pc}
 8004fee:	bf00      	nop
 8004ff0:	200019ec 	.word	0x200019ec

08004ff4 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8004ff8:	4803      	ldr	r0, [pc, #12]	; (8005008 <ADC1_2_IRQHandler+0x14>)
 8004ffa:	f000 fdd9 	bl	8005bb0 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8004ffe:	4803      	ldr	r0, [pc, #12]	; (800500c <ADC1_2_IRQHandler+0x18>)
 8005000:	f000 fdd6 	bl	8005bb0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8005004:	bf00      	nop
 8005006:	bd80      	pop	{r7, pc}
 8005008:	2000191c 	.word	0x2000191c
 800500c:	20001984 	.word	0x20001984

08005010 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8005014:	4802      	ldr	r0, [pc, #8]	; (8005020 <CAN1_TX_IRQHandler+0x10>)
 8005016:	f002 fb1a 	bl	800764e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 800501a:	bf00      	nop
 800501c:	bd80      	pop	{r7, pc}
 800501e:	bf00      	nop
 8005020:	20001aac 	.word	0x20001aac

08005024 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8005028:	4802      	ldr	r0, [pc, #8]	; (8005034 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800502a:	f007 fbf1 	bl	800c810 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800502e:	bf00      	nop
 8005030:	bd80      	pop	{r7, pc}
 8005032:	bf00      	nop
 8005034:	20003f0c 	.word	0x20003f0c

08005038 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800503c:	4802      	ldr	r0, [pc, #8]	; (8005048 <TIM3_IRQHandler+0x10>)
 800503e:	f007 fbe7 	bl	800c810 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8005042:	bf00      	nop
 8005044:	bd80      	pop	{r7, pc}
 8005046:	bf00      	nop
 8005048:	20001b6c 	.word	0x20001b6c

0800504c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8005050:	4802      	ldr	r0, [pc, #8]	; (800505c <TIM6_DAC_IRQHandler+0x10>)
 8005052:	f007 fbdd 	bl	800c810 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8005056:	bf00      	nop
 8005058:	bd80      	pop	{r7, pc}
 800505a:	bf00      	nop
 800505c:	20001bb8 	.word	0x20001bb8

08005060 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8005064:	4802      	ldr	r0, [pc, #8]	; (8005070 <DMA2_Channel1_IRQHandler+0x10>)
 8005066:	f002 ff26 	bl	8007eb6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 800506a:	bf00      	nop
 800506c:	bd80      	pop	{r7, pc}
 800506e:	bf00      	nop
 8005070:	20001a4c 	.word	0x20001a4c

08005074 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8005078:	4802      	ldr	r0, [pc, #8]	; (8005084 <OTG_FS_IRQHandler+0x10>)
 800507a:	f003 fb80 	bl	800877e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800507e:	bf00      	nop
 8005080:	bd80      	pop	{r7, pc}
 8005082:	bf00      	nop
 8005084:	200090fc 	.word	0x200090fc

08005088 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005088:	b480      	push	{r7}
 800508a:	af00      	add	r7, sp, #0
	return 1;
 800508c:	2301      	movs	r3, #1
}
 800508e:	4618      	mov	r0, r3
 8005090:	46bd      	mov	sp, r7
 8005092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005096:	4770      	bx	lr

08005098 <_kill>:

int _kill(int pid, int sig)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b082      	sub	sp, #8
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
 80050a0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80050a2:	f00f fb43 	bl	801472c <__errno>
 80050a6:	4603      	mov	r3, r0
 80050a8:	2216      	movs	r2, #22
 80050aa:	601a      	str	r2, [r3, #0]
	return -1;
 80050ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	3708      	adds	r7, #8
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}

080050b8 <_exit>:

void _exit (int status)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b082      	sub	sp, #8
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80050c0:	f04f 31ff 	mov.w	r1, #4294967295
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	f7ff ffe7 	bl	8005098 <_kill>
	while (1) {}		/* Make sure we hang here */
 80050ca:	e7fe      	b.n	80050ca <_exit+0x12>

080050cc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b086      	sub	sp, #24
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	60f8      	str	r0, [r7, #12]
 80050d4:	60b9      	str	r1, [r7, #8]
 80050d6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80050d8:	2300      	movs	r3, #0
 80050da:	617b      	str	r3, [r7, #20]
 80050dc:	e00a      	b.n	80050f4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80050de:	f3af 8000 	nop.w
 80050e2:	4601      	mov	r1, r0
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	1c5a      	adds	r2, r3, #1
 80050e8:	60ba      	str	r2, [r7, #8]
 80050ea:	b2ca      	uxtb	r2, r1
 80050ec:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	3301      	adds	r3, #1
 80050f2:	617b      	str	r3, [r7, #20]
 80050f4:	697a      	ldr	r2, [r7, #20]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	429a      	cmp	r2, r3
 80050fa:	dbf0      	blt.n	80050de <_read+0x12>
	}

return len;
 80050fc:	687b      	ldr	r3, [r7, #4]
}
 80050fe:	4618      	mov	r0, r3
 8005100:	3718      	adds	r7, #24
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}

08005106 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005106:	b580      	push	{r7, lr}
 8005108:	b086      	sub	sp, #24
 800510a:	af00      	add	r7, sp, #0
 800510c:	60f8      	str	r0, [r7, #12]
 800510e:	60b9      	str	r1, [r7, #8]
 8005110:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005112:	2300      	movs	r3, #0
 8005114:	617b      	str	r3, [r7, #20]
 8005116:	e009      	b.n	800512c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	1c5a      	adds	r2, r3, #1
 800511c:	60ba      	str	r2, [r7, #8]
 800511e:	781b      	ldrb	r3, [r3, #0]
 8005120:	4618      	mov	r0, r3
 8005122:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	3301      	adds	r3, #1
 800512a:	617b      	str	r3, [r7, #20]
 800512c:	697a      	ldr	r2, [r7, #20]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	429a      	cmp	r2, r3
 8005132:	dbf1      	blt.n	8005118 <_write+0x12>
	}
	return len;
 8005134:	687b      	ldr	r3, [r7, #4]
}
 8005136:	4618      	mov	r0, r3
 8005138:	3718      	adds	r7, #24
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}

0800513e <_close>:

int _close(int file)
{
 800513e:	b480      	push	{r7}
 8005140:	b083      	sub	sp, #12
 8005142:	af00      	add	r7, sp, #0
 8005144:	6078      	str	r0, [r7, #4]
	return -1;
 8005146:	f04f 33ff 	mov.w	r3, #4294967295
}
 800514a:	4618      	mov	r0, r3
 800514c:	370c      	adds	r7, #12
 800514e:	46bd      	mov	sp, r7
 8005150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005154:	4770      	bx	lr

08005156 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005156:	b480      	push	{r7}
 8005158:	b083      	sub	sp, #12
 800515a:	af00      	add	r7, sp, #0
 800515c:	6078      	str	r0, [r7, #4]
 800515e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005166:	605a      	str	r2, [r3, #4]
	return 0;
 8005168:	2300      	movs	r3, #0
}
 800516a:	4618      	mov	r0, r3
 800516c:	370c      	adds	r7, #12
 800516e:	46bd      	mov	sp, r7
 8005170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005174:	4770      	bx	lr

08005176 <_isatty>:

int _isatty(int file)
{
 8005176:	b480      	push	{r7}
 8005178:	b083      	sub	sp, #12
 800517a:	af00      	add	r7, sp, #0
 800517c:	6078      	str	r0, [r7, #4]
	return 1;
 800517e:	2301      	movs	r3, #1
}
 8005180:	4618      	mov	r0, r3
 8005182:	370c      	adds	r7, #12
 8005184:	46bd      	mov	sp, r7
 8005186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518a:	4770      	bx	lr

0800518c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800518c:	b480      	push	{r7}
 800518e:	b085      	sub	sp, #20
 8005190:	af00      	add	r7, sp, #0
 8005192:	60f8      	str	r0, [r7, #12]
 8005194:	60b9      	str	r1, [r7, #8]
 8005196:	607a      	str	r2, [r7, #4]
	return 0;
 8005198:	2300      	movs	r3, #0
}
 800519a:	4618      	mov	r0, r3
 800519c:	3714      	adds	r7, #20
 800519e:	46bd      	mov	sp, r7
 80051a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a4:	4770      	bx	lr
	...

080051a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b086      	sub	sp, #24
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80051b0:	4a14      	ldr	r2, [pc, #80]	; (8005204 <_sbrk+0x5c>)
 80051b2:	4b15      	ldr	r3, [pc, #84]	; (8005208 <_sbrk+0x60>)
 80051b4:	1ad3      	subs	r3, r2, r3
 80051b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80051bc:	4b13      	ldr	r3, [pc, #76]	; (800520c <_sbrk+0x64>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d102      	bne.n	80051ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80051c4:	4b11      	ldr	r3, [pc, #68]	; (800520c <_sbrk+0x64>)
 80051c6:	4a12      	ldr	r2, [pc, #72]	; (8005210 <_sbrk+0x68>)
 80051c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80051ca:	4b10      	ldr	r3, [pc, #64]	; (800520c <_sbrk+0x64>)
 80051cc:	681a      	ldr	r2, [r3, #0]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	4413      	add	r3, r2
 80051d2:	693a      	ldr	r2, [r7, #16]
 80051d4:	429a      	cmp	r2, r3
 80051d6:	d207      	bcs.n	80051e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80051d8:	f00f faa8 	bl	801472c <__errno>
 80051dc:	4603      	mov	r3, r0
 80051de:	220c      	movs	r2, #12
 80051e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80051e2:	f04f 33ff 	mov.w	r3, #4294967295
 80051e6:	e009      	b.n	80051fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80051e8:	4b08      	ldr	r3, [pc, #32]	; (800520c <_sbrk+0x64>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80051ee:	4b07      	ldr	r3, [pc, #28]	; (800520c <_sbrk+0x64>)
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	4413      	add	r3, r2
 80051f6:	4a05      	ldr	r2, [pc, #20]	; (800520c <_sbrk+0x64>)
 80051f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80051fa:	68fb      	ldr	r3, [r7, #12]
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	3718      	adds	r7, #24
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}
 8005204:	20050000 	.word	0x20050000
 8005208:	00000400 	.word	0x00000400
 800520c:	20003f58 	.word	0x20003f58
 8005210:	20009978 	.word	0x20009978

08005214 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8005214:	b480      	push	{r7}
 8005216:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8005218:	4b06      	ldr	r3, [pc, #24]	; (8005234 <SystemInit+0x20>)
 800521a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800521e:	4a05      	ldr	r2, [pc, #20]	; (8005234 <SystemInit+0x20>)
 8005220:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005224:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8005228:	bf00      	nop
 800522a:	46bd      	mov	sp, r7
 800522c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005230:	4770      	bx	lr
 8005232:	bf00      	nop
 8005234:	e000ed00 	.word	0xe000ed00

08005238 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8005238:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005270 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800523c:	f7ff ffea 	bl	8005214 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005240:	480c      	ldr	r0, [pc, #48]	; (8005274 <LoopForever+0x6>)
  ldr r1, =_edata
 8005242:	490d      	ldr	r1, [pc, #52]	; (8005278 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005244:	4a0d      	ldr	r2, [pc, #52]	; (800527c <LoopForever+0xe>)
  movs r3, #0
 8005246:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005248:	e002      	b.n	8005250 <LoopCopyDataInit>

0800524a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800524a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800524c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800524e:	3304      	adds	r3, #4

08005250 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005250:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005252:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005254:	d3f9      	bcc.n	800524a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005256:	4a0a      	ldr	r2, [pc, #40]	; (8005280 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005258:	4c0a      	ldr	r4, [pc, #40]	; (8005284 <LoopForever+0x16>)
  movs r3, #0
 800525a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800525c:	e001      	b.n	8005262 <LoopFillZerobss>

0800525e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800525e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005260:	3204      	adds	r2, #4

08005262 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005262:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005264:	d3fb      	bcc.n	800525e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005266:	f00f fa67 	bl	8014738 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800526a:	f7fe f815 	bl	8003298 <main>

0800526e <LoopForever>:

LoopForever:
    b LoopForever
 800526e:	e7fe      	b.n	800526e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8005270:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8005274:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005278:	20000580 	.word	0x20000580
  ldr r2, =_sidata
 800527c:	08017238 	.word	0x08017238
  ldr r2, =_sbss
 8005280:	20000580 	.word	0x20000580
  ldr r4, =_ebss
 8005284:	20009974 	.word	0x20009974

08005288 <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005288:	e7fe      	b.n	8005288 <CAN1_RX0_IRQHandler>

0800528a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800528a:	b580      	push	{r7, lr}
 800528c:	b082      	sub	sp, #8
 800528e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005290:	2300      	movs	r3, #0
 8005292:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005294:	2003      	movs	r0, #3
 8005296:	f002 fcb6 	bl	8007c06 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800529a:	200f      	movs	r0, #15
 800529c:	f7ff fe34 	bl	8004f08 <HAL_InitTick>
 80052a0:	4603      	mov	r3, r0
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d002      	beq.n	80052ac <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	71fb      	strb	r3, [r7, #7]
 80052aa:	e001      	b.n	80052b0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80052ac:	f7ff fb78 	bl	80049a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80052b0:	79fb      	ldrb	r3, [r7, #7]
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3708      	adds	r7, #8
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}
	...

080052bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80052bc:	b480      	push	{r7}
 80052be:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80052c0:	4b06      	ldr	r3, [pc, #24]	; (80052dc <HAL_IncTick+0x20>)
 80052c2:	781b      	ldrb	r3, [r3, #0]
 80052c4:	461a      	mov	r2, r3
 80052c6:	4b06      	ldr	r3, [pc, #24]	; (80052e0 <HAL_IncTick+0x24>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4413      	add	r3, r2
 80052cc:	4a04      	ldr	r2, [pc, #16]	; (80052e0 <HAL_IncTick+0x24>)
 80052ce:	6013      	str	r3, [r2, #0]
}
 80052d0:	bf00      	nop
 80052d2:	46bd      	mov	sp, r7
 80052d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d8:	4770      	bx	lr
 80052da:	bf00      	nop
 80052dc:	2000022c 	.word	0x2000022c
 80052e0:	20003f5c 	.word	0x20003f5c

080052e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80052e4:	b480      	push	{r7}
 80052e6:	af00      	add	r7, sp, #0
  return uwTick;
 80052e8:	4b03      	ldr	r3, [pc, #12]	; (80052f8 <HAL_GetTick+0x14>)
 80052ea:	681b      	ldr	r3, [r3, #0]
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	46bd      	mov	sp, r7
 80052f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f4:	4770      	bx	lr
 80052f6:	bf00      	nop
 80052f8:	20003f5c 	.word	0x20003f5c

080052fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b084      	sub	sp, #16
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005304:	f7ff ffee 	bl	80052e4 <HAL_GetTick>
 8005308:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005314:	d005      	beq.n	8005322 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8005316:	4b0a      	ldr	r3, [pc, #40]	; (8005340 <HAL_Delay+0x44>)
 8005318:	781b      	ldrb	r3, [r3, #0]
 800531a:	461a      	mov	r2, r3
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	4413      	add	r3, r2
 8005320:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005322:	bf00      	nop
 8005324:	f7ff ffde 	bl	80052e4 <HAL_GetTick>
 8005328:	4602      	mov	r2, r0
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	1ad3      	subs	r3, r2, r3
 800532e:	68fa      	ldr	r2, [r7, #12]
 8005330:	429a      	cmp	r2, r3
 8005332:	d8f7      	bhi.n	8005324 <HAL_Delay+0x28>
  {
  }
}
 8005334:	bf00      	nop
 8005336:	bf00      	nop
 8005338:	3710      	adds	r7, #16
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}
 800533e:	bf00      	nop
 8005340:	2000022c 	.word	0x2000022c

08005344 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8005344:	b480      	push	{r7}
 8005346:	b083      	sub	sp, #12
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
 800534c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	689b      	ldr	r3, [r3, #8]
 8005352:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	431a      	orrs	r2, r3
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	609a      	str	r2, [r3, #8]
}
 800535e:	bf00      	nop
 8005360:	370c      	adds	r7, #12
 8005362:	46bd      	mov	sp, r7
 8005364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005368:	4770      	bx	lr

0800536a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800536a:	b480      	push	{r7}
 800536c:	b083      	sub	sp, #12
 800536e:	af00      	add	r7, sp, #0
 8005370:	6078      	str	r0, [r7, #4]
 8005372:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	431a      	orrs	r2, r3
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	609a      	str	r2, [r3, #8]
}
 8005384:	bf00      	nop
 8005386:	370c      	adds	r7, #12
 8005388:	46bd      	mov	sp, r7
 800538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538e:	4770      	bx	lr

08005390 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005390:	b480      	push	{r7}
 8005392:	b083      	sub	sp, #12
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80053a0:	4618      	mov	r0, r3
 80053a2:	370c      	adds	r7, #12
 80053a4:	46bd      	mov	sp, r7
 80053a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053aa:	4770      	bx	lr

080053ac <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b087      	sub	sp, #28
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	60f8      	str	r0, [r7, #12]
 80053b4:	60b9      	str	r1, [r7, #8]
 80053b6:	607a      	str	r2, [r7, #4]
 80053b8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	3360      	adds	r3, #96	; 0x60
 80053be:	461a      	mov	r2, r3
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	009b      	lsls	r3, r3, #2
 80053c4:	4413      	add	r3, r2
 80053c6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	681a      	ldr	r2, [r3, #0]
 80053cc:	4b08      	ldr	r3, [pc, #32]	; (80053f0 <LL_ADC_SetOffset+0x44>)
 80053ce:	4013      	ands	r3, r2
 80053d0:	687a      	ldr	r2, [r7, #4]
 80053d2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80053d6:	683a      	ldr	r2, [r7, #0]
 80053d8:	430a      	orrs	r2, r1
 80053da:	4313      	orrs	r3, r2
 80053dc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80053e4:	bf00      	nop
 80053e6:	371c      	adds	r7, #28
 80053e8:	46bd      	mov	sp, r7
 80053ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ee:	4770      	bx	lr
 80053f0:	03fff000 	.word	0x03fff000

080053f4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b085      	sub	sp, #20
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
 80053fc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	3360      	adds	r3, #96	; 0x60
 8005402:	461a      	mov	r2, r3
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	009b      	lsls	r3, r3, #2
 8005408:	4413      	add	r3, r2
 800540a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8005414:	4618      	mov	r0, r3
 8005416:	3714      	adds	r7, #20
 8005418:	46bd      	mov	sp, r7
 800541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541e:	4770      	bx	lr

08005420 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8005420:	b480      	push	{r7}
 8005422:	b087      	sub	sp, #28
 8005424:	af00      	add	r7, sp, #0
 8005426:	60f8      	str	r0, [r7, #12]
 8005428:	60b9      	str	r1, [r7, #8]
 800542a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	3360      	adds	r3, #96	; 0x60
 8005430:	461a      	mov	r2, r3
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	009b      	lsls	r3, r3, #2
 8005436:	4413      	add	r3, r2
 8005438:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	431a      	orrs	r2, r3
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800544a:	bf00      	nop
 800544c:	371c      	adds	r7, #28
 800544e:	46bd      	mov	sp, r7
 8005450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005454:	4770      	bx	lr

08005456 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8005456:	b480      	push	{r7}
 8005458:	b083      	sub	sp, #12
 800545a:	af00      	add	r7, sp, #0
 800545c:	6078      	str	r0, [r7, #4]
 800545e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	695b      	ldr	r3, [r3, #20]
 8005464:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	431a      	orrs	r2, r3
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	615a      	str	r2, [r3, #20]
}
 8005470:	bf00      	nop
 8005472:	370c      	adds	r7, #12
 8005474:	46bd      	mov	sp, r7
 8005476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547a:	4770      	bx	lr

0800547c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800547c:	b480      	push	{r7}
 800547e:	b083      	sub	sp, #12
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	68db      	ldr	r3, [r3, #12]
 8005488:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800548c:	2b00      	cmp	r3, #0
 800548e:	d101      	bne.n	8005494 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8005490:	2301      	movs	r3, #1
 8005492:	e000      	b.n	8005496 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8005494:	2300      	movs	r3, #0
}
 8005496:	4618      	mov	r0, r3
 8005498:	370c      	adds	r7, #12
 800549a:	46bd      	mov	sp, r7
 800549c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a0:	4770      	bx	lr

080054a2 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80054a2:	b480      	push	{r7}
 80054a4:	b087      	sub	sp, #28
 80054a6:	af00      	add	r7, sp, #0
 80054a8:	60f8      	str	r0, [r7, #12]
 80054aa:	60b9      	str	r1, [r7, #8]
 80054ac:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	3330      	adds	r3, #48	; 0x30
 80054b2:	461a      	mov	r2, r3
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	0a1b      	lsrs	r3, r3, #8
 80054b8:	009b      	lsls	r3, r3, #2
 80054ba:	f003 030c 	and.w	r3, r3, #12
 80054be:	4413      	add	r3, r2
 80054c0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	681a      	ldr	r2, [r3, #0]
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	f003 031f 	and.w	r3, r3, #31
 80054cc:	211f      	movs	r1, #31
 80054ce:	fa01 f303 	lsl.w	r3, r1, r3
 80054d2:	43db      	mvns	r3, r3
 80054d4:	401a      	ands	r2, r3
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	0e9b      	lsrs	r3, r3, #26
 80054da:	f003 011f 	and.w	r1, r3, #31
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	f003 031f 	and.w	r3, r3, #31
 80054e4:	fa01 f303 	lsl.w	r3, r1, r3
 80054e8:	431a      	orrs	r2, r3
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80054ee:	bf00      	nop
 80054f0:	371c      	adds	r7, #28
 80054f2:	46bd      	mov	sp, r7
 80054f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f8:	4770      	bx	lr

080054fa <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80054fa:	b480      	push	{r7}
 80054fc:	b083      	sub	sp, #12
 80054fe:	af00      	add	r7, sp, #0
 8005500:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005506:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800550a:	2b00      	cmp	r3, #0
 800550c:	d101      	bne.n	8005512 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800550e:	2301      	movs	r3, #1
 8005510:	e000      	b.n	8005514 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8005512:	2300      	movs	r3, #0
}
 8005514:	4618      	mov	r0, r3
 8005516:	370c      	adds	r7, #12
 8005518:	46bd      	mov	sp, r7
 800551a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551e:	4770      	bx	lr

08005520 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8005520:	b480      	push	{r7}
 8005522:	b087      	sub	sp, #28
 8005524:	af00      	add	r7, sp, #0
 8005526:	60f8      	str	r0, [r7, #12]
 8005528:	60b9      	str	r1, [r7, #8]
 800552a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	3314      	adds	r3, #20
 8005530:	461a      	mov	r2, r3
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	0e5b      	lsrs	r3, r3, #25
 8005536:	009b      	lsls	r3, r3, #2
 8005538:	f003 0304 	and.w	r3, r3, #4
 800553c:	4413      	add	r3, r2
 800553e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	681a      	ldr	r2, [r3, #0]
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	0d1b      	lsrs	r3, r3, #20
 8005548:	f003 031f 	and.w	r3, r3, #31
 800554c:	2107      	movs	r1, #7
 800554e:	fa01 f303 	lsl.w	r3, r1, r3
 8005552:	43db      	mvns	r3, r3
 8005554:	401a      	ands	r2, r3
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	0d1b      	lsrs	r3, r3, #20
 800555a:	f003 031f 	and.w	r3, r3, #31
 800555e:	6879      	ldr	r1, [r7, #4]
 8005560:	fa01 f303 	lsl.w	r3, r1, r3
 8005564:	431a      	orrs	r2, r3
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800556a:	bf00      	nop
 800556c:	371c      	adds	r7, #28
 800556e:	46bd      	mov	sp, r7
 8005570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005574:	4770      	bx	lr
	...

08005578 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8005578:	b480      	push	{r7}
 800557a:	b085      	sub	sp, #20
 800557c:	af00      	add	r7, sp, #0
 800557e:	60f8      	str	r0, [r7, #12]
 8005580:	60b9      	str	r1, [r7, #8]
 8005582:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005590:	43db      	mvns	r3, r3
 8005592:	401a      	ands	r2, r3
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	f003 0318 	and.w	r3, r3, #24
 800559a:	4908      	ldr	r1, [pc, #32]	; (80055bc <LL_ADC_SetChannelSingleDiff+0x44>)
 800559c:	40d9      	lsrs	r1, r3
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	400b      	ands	r3, r1
 80055a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055a6:	431a      	orrs	r2, r3
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80055ae:	bf00      	nop
 80055b0:	3714      	adds	r7, #20
 80055b2:	46bd      	mov	sp, r7
 80055b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b8:	4770      	bx	lr
 80055ba:	bf00      	nop
 80055bc:	0007ffff 	.word	0x0007ffff

080055c0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b083      	sub	sp, #12
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	689b      	ldr	r3, [r3, #8]
 80055cc:	f003 031f 	and.w	r3, r3, #31
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	370c      	adds	r7, #12
 80055d4:	46bd      	mov	sp, r7
 80055d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055da:	4770      	bx	lr

080055dc <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80055dc:	b480      	push	{r7}
 80055de:	b083      	sub	sp, #12
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	689b      	ldr	r3, [r3, #8]
 80055e8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	370c      	adds	r7, #12
 80055f0:	46bd      	mov	sp, r7
 80055f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f6:	4770      	bx	lr

080055f8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b083      	sub	sp, #12
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	689b      	ldr	r3, [r3, #8]
 8005604:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8005608:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800560c:	687a      	ldr	r2, [r7, #4]
 800560e:	6093      	str	r3, [r2, #8]
}
 8005610:	bf00      	nop
 8005612:	370c      	adds	r7, #12
 8005614:	46bd      	mov	sp, r7
 8005616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561a:	4770      	bx	lr

0800561c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800561c:	b480      	push	{r7}
 800561e:	b083      	sub	sp, #12
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	689b      	ldr	r3, [r3, #8]
 8005628:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800562c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005630:	d101      	bne.n	8005636 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8005632:	2301      	movs	r3, #1
 8005634:	e000      	b.n	8005638 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8005636:	2300      	movs	r3, #0
}
 8005638:	4618      	mov	r0, r3
 800563a:	370c      	adds	r7, #12
 800563c:	46bd      	mov	sp, r7
 800563e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005642:	4770      	bx	lr

08005644 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005644:	b480      	push	{r7}
 8005646:	b083      	sub	sp, #12
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	689b      	ldr	r3, [r3, #8]
 8005650:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8005654:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005658:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8005660:	bf00      	nop
 8005662:	370c      	adds	r7, #12
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr

0800566c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800566c:	b480      	push	{r7}
 800566e:	b083      	sub	sp, #12
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	689b      	ldr	r3, [r3, #8]
 8005678:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800567c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005680:	d101      	bne.n	8005686 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8005682:	2301      	movs	r3, #1
 8005684:	e000      	b.n	8005688 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8005686:	2300      	movs	r3, #0
}
 8005688:	4618      	mov	r0, r3
 800568a:	370c      	adds	r7, #12
 800568c:	46bd      	mov	sp, r7
 800568e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005692:	4770      	bx	lr

08005694 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8005694:	b480      	push	{r7}
 8005696:	b083      	sub	sp, #12
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	689b      	ldr	r3, [r3, #8]
 80056a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80056a4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80056a8:	f043 0201 	orr.w	r2, r3, #1
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80056b0:	bf00      	nop
 80056b2:	370c      	adds	r7, #12
 80056b4:	46bd      	mov	sp, r7
 80056b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ba:	4770      	bx	lr

080056bc <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80056bc:	b480      	push	{r7}
 80056be:	b083      	sub	sp, #12
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	689b      	ldr	r3, [r3, #8]
 80056c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80056cc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80056d0:	f043 0202 	orr.w	r2, r3, #2
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80056d8:	bf00      	nop
 80056da:	370c      	adds	r7, #12
 80056dc:	46bd      	mov	sp, r7
 80056de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e2:	4770      	bx	lr

080056e4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b083      	sub	sp, #12
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	689b      	ldr	r3, [r3, #8]
 80056f0:	f003 0301 	and.w	r3, r3, #1
 80056f4:	2b01      	cmp	r3, #1
 80056f6:	d101      	bne.n	80056fc <LL_ADC_IsEnabled+0x18>
 80056f8:	2301      	movs	r3, #1
 80056fa:	e000      	b.n	80056fe <LL_ADC_IsEnabled+0x1a>
 80056fc:	2300      	movs	r3, #0
}
 80056fe:	4618      	mov	r0, r3
 8005700:	370c      	adds	r7, #12
 8005702:	46bd      	mov	sp, r7
 8005704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005708:	4770      	bx	lr

0800570a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800570a:	b480      	push	{r7}
 800570c:	b083      	sub	sp, #12
 800570e:	af00      	add	r7, sp, #0
 8005710:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	689b      	ldr	r3, [r3, #8]
 8005716:	f003 0302 	and.w	r3, r3, #2
 800571a:	2b02      	cmp	r3, #2
 800571c:	d101      	bne.n	8005722 <LL_ADC_IsDisableOngoing+0x18>
 800571e:	2301      	movs	r3, #1
 8005720:	e000      	b.n	8005724 <LL_ADC_IsDisableOngoing+0x1a>
 8005722:	2300      	movs	r3, #0
}
 8005724:	4618      	mov	r0, r3
 8005726:	370c      	adds	r7, #12
 8005728:	46bd      	mov	sp, r7
 800572a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572e:	4770      	bx	lr

08005730 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8005730:	b480      	push	{r7}
 8005732:	b083      	sub	sp, #12
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005740:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005744:	f043 0204 	orr.w	r2, r3, #4
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800574c:	bf00      	nop
 800574e:	370c      	adds	r7, #12
 8005750:	46bd      	mov	sp, r7
 8005752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005756:	4770      	bx	lr

08005758 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005758:	b480      	push	{r7}
 800575a:	b083      	sub	sp, #12
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	689b      	ldr	r3, [r3, #8]
 8005764:	f003 0304 	and.w	r3, r3, #4
 8005768:	2b04      	cmp	r3, #4
 800576a:	d101      	bne.n	8005770 <LL_ADC_REG_IsConversionOngoing+0x18>
 800576c:	2301      	movs	r3, #1
 800576e:	e000      	b.n	8005772 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005770:	2300      	movs	r3, #0
}
 8005772:	4618      	mov	r0, r3
 8005774:	370c      	adds	r7, #12
 8005776:	46bd      	mov	sp, r7
 8005778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577c:	4770      	bx	lr

0800577e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800577e:	b480      	push	{r7}
 8005780:	b083      	sub	sp, #12
 8005782:	af00      	add	r7, sp, #0
 8005784:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	689b      	ldr	r3, [r3, #8]
 800578a:	f003 0308 	and.w	r3, r3, #8
 800578e:	2b08      	cmp	r3, #8
 8005790:	d101      	bne.n	8005796 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8005792:	2301      	movs	r3, #1
 8005794:	e000      	b.n	8005798 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8005796:	2300      	movs	r3, #0
}
 8005798:	4618      	mov	r0, r3
 800579a:	370c      	adds	r7, #12
 800579c:	46bd      	mov	sp, r7
 800579e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a2:	4770      	bx	lr

080057a4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80057a4:	b590      	push	{r4, r7, lr}
 80057a6:	b089      	sub	sp, #36	; 0x24
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80057ac:	2300      	movs	r3, #0
 80057ae:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80057b0:	2300      	movs	r3, #0
 80057b2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d101      	bne.n	80057be <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80057ba:	2301      	movs	r3, #1
 80057bc:	e134      	b.n	8005a28 <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	691b      	ldr	r3, [r3, #16]
 80057c2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d109      	bne.n	80057e0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f7ff f90f 	bl	80049f0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2200      	movs	r2, #0
 80057d6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2200      	movs	r2, #0
 80057dc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4618      	mov	r0, r3
 80057e6:	f7ff ff19 	bl	800561c <LL_ADC_IsDeepPowerDownEnabled>
 80057ea:	4603      	mov	r3, r0
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d004      	beq.n	80057fa <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4618      	mov	r0, r3
 80057f6:	f7ff feff 	bl	80055f8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4618      	mov	r0, r3
 8005800:	f7ff ff34 	bl	800566c <LL_ADC_IsInternalRegulatorEnabled>
 8005804:	4603      	mov	r3, r0
 8005806:	2b00      	cmp	r3, #0
 8005808:	d115      	bne.n	8005836 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4618      	mov	r0, r3
 8005810:	f7ff ff18 	bl	8005644 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005814:	4b86      	ldr	r3, [pc, #536]	; (8005a30 <HAL_ADC_Init+0x28c>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	099b      	lsrs	r3, r3, #6
 800581a:	4a86      	ldr	r2, [pc, #536]	; (8005a34 <HAL_ADC_Init+0x290>)
 800581c:	fba2 2303 	umull	r2, r3, r2, r3
 8005820:	099b      	lsrs	r3, r3, #6
 8005822:	3301      	adds	r3, #1
 8005824:	005b      	lsls	r3, r3, #1
 8005826:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005828:	e002      	b.n	8005830 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	3b01      	subs	r3, #1
 800582e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d1f9      	bne.n	800582a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4618      	mov	r0, r3
 800583c:	f7ff ff16 	bl	800566c <LL_ADC_IsInternalRegulatorEnabled>
 8005840:	4603      	mov	r3, r0
 8005842:	2b00      	cmp	r3, #0
 8005844:	d10d      	bne.n	8005862 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800584a:	f043 0210 	orr.w	r2, r3, #16
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005856:	f043 0201 	orr.w	r2, r3, #1
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4618      	mov	r0, r3
 8005868:	f7ff ff76 	bl	8005758 <LL_ADC_REG_IsConversionOngoing>
 800586c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005872:	f003 0310 	and.w	r3, r3, #16
 8005876:	2b00      	cmp	r3, #0
 8005878:	f040 80cd 	bne.w	8005a16 <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	2b00      	cmp	r3, #0
 8005880:	f040 80c9 	bne.w	8005a16 <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005888:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800588c:	f043 0202 	orr.w	r2, r3, #2
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4618      	mov	r0, r3
 800589a:	f7ff ff23 	bl	80056e4 <LL_ADC_IsEnabled>
 800589e:	4603      	mov	r3, r0
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d110      	bne.n	80058c6 <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80058a4:	4864      	ldr	r0, [pc, #400]	; (8005a38 <HAL_ADC_Init+0x294>)
 80058a6:	f7ff ff1d 	bl	80056e4 <LL_ADC_IsEnabled>
 80058aa:	4604      	mov	r4, r0
 80058ac:	4863      	ldr	r0, [pc, #396]	; (8005a3c <HAL_ADC_Init+0x298>)
 80058ae:	f7ff ff19 	bl	80056e4 <LL_ADC_IsEnabled>
 80058b2:	4603      	mov	r3, r0
 80058b4:	4323      	orrs	r3, r4
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d105      	bne.n	80058c6 <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	4619      	mov	r1, r3
 80058c0:	485f      	ldr	r0, [pc, #380]	; (8005a40 <HAL_ADC_Init+0x29c>)
 80058c2:	f7ff fd3f 	bl	8005344 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	7e5b      	ldrb	r3, [r3, #25]
 80058ca:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80058d0:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80058d6:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80058dc:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80058e4:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80058e6:	4313      	orrs	r3, r2
 80058e8:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80058f0:	2b01      	cmp	r3, #1
 80058f2:	d106      	bne.n	8005902 <HAL_ADC_Init+0x15e>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f8:	3b01      	subs	r3, #1
 80058fa:	045b      	lsls	r3, r3, #17
 80058fc:	69ba      	ldr	r2, [r7, #24]
 80058fe:	4313      	orrs	r3, r2
 8005900:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005906:	2b00      	cmp	r3, #0
 8005908:	d009      	beq.n	800591e <HAL_ADC_Init+0x17a>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800590e:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005916:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005918:	69ba      	ldr	r2, [r7, #24]
 800591a:	4313      	orrs	r3, r2
 800591c:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	68da      	ldr	r2, [r3, #12]
 8005924:	4b47      	ldr	r3, [pc, #284]	; (8005a44 <HAL_ADC_Init+0x2a0>)
 8005926:	4013      	ands	r3, r2
 8005928:	687a      	ldr	r2, [r7, #4]
 800592a:	6812      	ldr	r2, [r2, #0]
 800592c:	69b9      	ldr	r1, [r7, #24]
 800592e:	430b      	orrs	r3, r1
 8005930:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4618      	mov	r0, r3
 8005938:	f7ff ff0e 	bl	8005758 <LL_ADC_REG_IsConversionOngoing>
 800593c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4618      	mov	r0, r3
 8005944:	f7ff ff1b 	bl	800577e <LL_ADC_INJ_IsConversionOngoing>
 8005948:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800594a:	693b      	ldr	r3, [r7, #16]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d140      	bne.n	80059d2 <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d13d      	bne.n	80059d2 <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	7e1b      	ldrb	r3, [r3, #24]
 800595e:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8005960:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005968:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800596a:	4313      	orrs	r3, r2
 800596c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	68db      	ldr	r3, [r3, #12]
 8005974:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005978:	f023 0306 	bic.w	r3, r3, #6
 800597c:	687a      	ldr	r2, [r7, #4]
 800597e:	6812      	ldr	r2, [r2, #0]
 8005980:	69b9      	ldr	r1, [r7, #24]
 8005982:	430b      	orrs	r3, r1
 8005984:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800598c:	2b01      	cmp	r3, #1
 800598e:	d118      	bne.n	80059c2 <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	691b      	ldr	r3, [r3, #16]
 8005996:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800599a:	f023 0304 	bic.w	r3, r3, #4
 800599e:	687a      	ldr	r2, [r7, #4]
 80059a0:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80059a2:	687a      	ldr	r2, [r7, #4]
 80059a4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80059a6:	4311      	orrs	r1, r2
 80059a8:	687a      	ldr	r2, [r7, #4]
 80059aa:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80059ac:	4311      	orrs	r1, r2
 80059ae:	687a      	ldr	r2, [r7, #4]
 80059b0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80059b2:	430a      	orrs	r2, r1
 80059b4:	431a      	orrs	r2, r3
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f042 0201 	orr.w	r2, r2, #1
 80059be:	611a      	str	r2, [r3, #16]
 80059c0:	e007      	b.n	80059d2 <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	691a      	ldr	r2, [r3, #16]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f022 0201 	bic.w	r2, r2, #1
 80059d0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	691b      	ldr	r3, [r3, #16]
 80059d6:	2b01      	cmp	r3, #1
 80059d8:	d10c      	bne.n	80059f4 <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059e0:	f023 010f 	bic.w	r1, r3, #15
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	69db      	ldr	r3, [r3, #28]
 80059e8:	1e5a      	subs	r2, r3, #1
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	430a      	orrs	r2, r1
 80059f0:	631a      	str	r2, [r3, #48]	; 0x30
 80059f2:	e007      	b.n	8005a04 <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f022 020f 	bic.w	r2, r2, #15
 8005a02:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a08:	f023 0303 	bic.w	r3, r3, #3
 8005a0c:	f043 0201 	orr.w	r2, r3, #1
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	659a      	str	r2, [r3, #88]	; 0x58
 8005a14:	e007      	b.n	8005a26 <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a1a:	f043 0210 	orr.w	r2, r3, #16
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8005a22:	2301      	movs	r3, #1
 8005a24:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005a26:	7ffb      	ldrb	r3, [r7, #31]
}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	3724      	adds	r7, #36	; 0x24
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bd90      	pop	{r4, r7, pc}
 8005a30:	20000224 	.word	0x20000224
 8005a34:	053e2d63 	.word	0x053e2d63
 8005a38:	50040000 	.word	0x50040000
 8005a3c:	50040100 	.word	0x50040100
 8005a40:	50040300 	.word	0x50040300
 8005a44:	fff0c007 	.word	0xfff0c007

08005a48 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b086      	sub	sp, #24
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	60f8      	str	r0, [r7, #12]
 8005a50:	60b9      	str	r1, [r7, #8]
 8005a52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005a54:	4850      	ldr	r0, [pc, #320]	; (8005b98 <HAL_ADC_Start_DMA+0x150>)
 8005a56:	f7ff fdb3 	bl	80055c0 <LL_ADC_GetMultimode>
 8005a5a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4618      	mov	r0, r3
 8005a62:	f7ff fe79 	bl	8005758 <LL_ADC_REG_IsConversionOngoing>
 8005a66:	4603      	mov	r3, r0
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	f040 808e 	bne.w	8005b8a <HAL_ADC_Start_DMA+0x142>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8005a74:	2b01      	cmp	r3, #1
 8005a76:	d101      	bne.n	8005a7c <HAL_ADC_Start_DMA+0x34>
 8005a78:	2302      	movs	r3, #2
 8005a7a:	e089      	b.n	8005b90 <HAL_ADC_Start_DMA+0x148>
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2201      	movs	r2, #1
 8005a80:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d005      	beq.n	8005a96 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	2b05      	cmp	r3, #5
 8005a8e:	d002      	beq.n	8005a96 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	2b09      	cmp	r3, #9
 8005a94:	d172      	bne.n	8005b7c <HAL_ADC_Start_DMA+0x134>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8005a96:	68f8      	ldr	r0, [r7, #12]
 8005a98:	f000 fec6 	bl	8006828 <ADC_Enable>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8005aa0:	7dfb      	ldrb	r3, [r7, #23]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d165      	bne.n	8005b72 <HAL_ADC_Start_DMA+0x12a>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005aaa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005aae:	f023 0301 	bic.w	r3, r3, #1
 8005ab2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	659a      	str	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a37      	ldr	r2, [pc, #220]	; (8005b9c <HAL_ADC_Start_DMA+0x154>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d002      	beq.n	8005aca <HAL_ADC_Start_DMA+0x82>
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	e000      	b.n	8005acc <HAL_ADC_Start_DMA+0x84>
 8005aca:	4b35      	ldr	r3, [pc, #212]	; (8005ba0 <HAL_ADC_Start_DMA+0x158>)
 8005acc:	68fa      	ldr	r2, [r7, #12]
 8005ace:	6812      	ldr	r2, [r2, #0]
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d002      	beq.n	8005ada <HAL_ADC_Start_DMA+0x92>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d105      	bne.n	8005ae6 <HAL_ADC_Start_DMA+0x9e>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ade:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	659a      	str	r2, [r3, #88]	; 0x58
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005aea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d006      	beq.n	8005b00 <HAL_ADC_Start_DMA+0xb8>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005af6:	f023 0206 	bic.w	r2, r3, #6
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	65da      	str	r2, [r3, #92]	; 0x5c
 8005afe:	e002      	b.n	8005b06 <HAL_ADC_Start_DMA+0xbe>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	2200      	movs	r2, #0
 8005b04:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b0a:	4a26      	ldr	r2, [pc, #152]	; (8005ba4 <HAL_ADC_Start_DMA+0x15c>)
 8005b0c:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b12:	4a25      	ldr	r2, [pc, #148]	; (8005ba8 <HAL_ADC_Start_DMA+0x160>)
 8005b14:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b1a:	4a24      	ldr	r2, [pc, #144]	; (8005bac <HAL_ADC_Start_DMA+0x164>)
 8005b1c:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	221c      	movs	r2, #28
 8005b24:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	685a      	ldr	r2, [r3, #4]
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f042 0210 	orr.w	r2, r2, #16
 8005b3c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	68da      	ldr	r2, [r3, #12]
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f042 0201 	orr.w	r2, r2, #1
 8005b4c:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	3340      	adds	r3, #64	; 0x40
 8005b58:	4619      	mov	r1, r3
 8005b5a:	68ba      	ldr	r2, [r7, #8]
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	f002 f92f 	bl	8007dc0 <HAL_DMA_Start_IT>
 8005b62:	4603      	mov	r3, r0
 8005b64:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	f7ff fde0 	bl	8005730 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8005b70:	e00d      	b.n	8005b8e <HAL_ADC_Start_DMA+0x146>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	2200      	movs	r2, #0
 8005b76:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      if (tmp_hal_status == HAL_OK)
 8005b7a:	e008      	b.n	8005b8e <HAL_ADC_Start_DMA+0x146>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2200      	movs	r2, #0
 8005b84:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8005b88:	e001      	b.n	8005b8e <HAL_ADC_Start_DMA+0x146>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005b8a:	2302      	movs	r3, #2
 8005b8c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8005b8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	3718      	adds	r7, #24
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}
 8005b98:	50040300 	.word	0x50040300
 8005b9c:	50040100 	.word	0x50040100
 8005ba0:	50040000 	.word	0x50040000
 8005ba4:	080069f3 	.word	0x080069f3
 8005ba8:	08006acb 	.word	0x08006acb
 8005bac:	08006ae7 	.word	0x08006ae7

08005bb0 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b08a      	sub	sp, #40	; 0x28
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8005bb8:	2300      	movs	r3, #0
 8005bba:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005bcc:	4882      	ldr	r0, [pc, #520]	; (8005dd8 <HAL_ADC_IRQHandler+0x228>)
 8005bce:	f7ff fcf7 	bl	80055c0 <LL_ADC_GetMultimode>
 8005bd2:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8005bd4:	69fb      	ldr	r3, [r7, #28]
 8005bd6:	f003 0302 	and.w	r3, r3, #2
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d017      	beq.n	8005c0e <HAL_ADC_IRQHandler+0x5e>
 8005bde:	69bb      	ldr	r3, [r7, #24]
 8005be0:	f003 0302 	and.w	r3, r3, #2
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d012      	beq.n	8005c0e <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bec:	f003 0310 	and.w	r3, r3, #16
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d105      	bne.n	8005c00 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bf8:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	659a      	str	r2, [r3, #88]	; 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	f001 f865 	bl	8006cd0 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	2202      	movs	r2, #2
 8005c0c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005c0e:	69fb      	ldr	r3, [r7, #28]
 8005c10:	f003 0304 	and.w	r3, r3, #4
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d004      	beq.n	8005c22 <HAL_ADC_IRQHandler+0x72>
 8005c18:	69bb      	ldr	r3, [r7, #24]
 8005c1a:	f003 0304 	and.w	r3, r3, #4
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d10a      	bne.n	8005c38 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005c22:	69fb      	ldr	r3, [r7, #28]
 8005c24:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	f000 8083 	beq.w	8005d34 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005c2e:	69bb      	ldr	r3, [r7, #24]
 8005c30:	f003 0308 	and.w	r3, r3, #8
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d07d      	beq.n	8005d34 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c3c:	f003 0310 	and.w	r3, r3, #16
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d105      	bne.n	8005c50 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c48:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4618      	mov	r0, r3
 8005c56:	f7ff fc11 	bl	800547c <LL_ADC_REG_IsTriggerSourceSWStart>
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d062      	beq.n	8005d26 <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a5d      	ldr	r2, [pc, #372]	; (8005ddc <HAL_ADC_IRQHandler+0x22c>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d002      	beq.n	8005c70 <HAL_ADC_IRQHandler+0xc0>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	e000      	b.n	8005c72 <HAL_ADC_IRQHandler+0xc2>
 8005c70:	4b5b      	ldr	r3, [pc, #364]	; (8005de0 <HAL_ADC_IRQHandler+0x230>)
 8005c72:	687a      	ldr	r2, [r7, #4]
 8005c74:	6812      	ldr	r2, [r2, #0]
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d008      	beq.n	8005c8c <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d005      	beq.n	8005c8c <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005c80:	697b      	ldr	r3, [r7, #20]
 8005c82:	2b05      	cmp	r3, #5
 8005c84:	d002      	beq.n	8005c8c <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005c86:	697b      	ldr	r3, [r7, #20]
 8005c88:	2b09      	cmp	r3, #9
 8005c8a:	d104      	bne.n	8005c96 <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	68db      	ldr	r3, [r3, #12]
 8005c92:	623b      	str	r3, [r7, #32]
 8005c94:	e00c      	b.n	8005cb0 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a50      	ldr	r2, [pc, #320]	; (8005ddc <HAL_ADC_IRQHandler+0x22c>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d002      	beq.n	8005ca6 <HAL_ADC_IRQHandler+0xf6>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	e000      	b.n	8005ca8 <HAL_ADC_IRQHandler+0xf8>
 8005ca6:	4b4e      	ldr	r3, [pc, #312]	; (8005de0 <HAL_ADC_IRQHandler+0x230>)
 8005ca8:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	68db      	ldr	r3, [r3, #12]
 8005cae:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8005cb0:	6a3b      	ldr	r3, [r7, #32]
 8005cb2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d135      	bne.n	8005d26 <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f003 0308 	and.w	r3, r3, #8
 8005cc4:	2b08      	cmp	r3, #8
 8005cc6:	d12e      	bne.n	8005d26 <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4618      	mov	r0, r3
 8005cce:	f7ff fd43 	bl	8005758 <LL_ADC_REG_IsConversionOngoing>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d11a      	bne.n	8005d0e <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	685a      	ldr	r2, [r3, #4]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f022 020c 	bic.w	r2, r2, #12
 8005ce6:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	659a      	str	r2, [r3, #88]	; 0x58

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cf8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d112      	bne.n	8005d26 <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d04:	f043 0201 	orr.w	r2, r3, #1
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	659a      	str	r2, [r3, #88]	; 0x58
 8005d0c:	e00b      	b.n	8005d26 <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d12:	f043 0210 	orr.w	r2, r3, #16
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d1e:	f043 0201 	orr.w	r2, r3, #1
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	65da      	str	r2, [r3, #92]	; 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f000 f95c 	bl	8005fe4 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	220c      	movs	r2, #12
 8005d32:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8005d34:	69fb      	ldr	r3, [r7, #28]
 8005d36:	f003 0320 	and.w	r3, r3, #32
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d004      	beq.n	8005d48 <HAL_ADC_IRQHandler+0x198>
 8005d3e:	69bb      	ldr	r3, [r7, #24]
 8005d40:	f003 0320 	and.w	r3, r3, #32
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d10b      	bne.n	8005d60 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8005d48:	69fb      	ldr	r3, [r7, #28]
 8005d4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	f000 809f 	beq.w	8005e92 <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8005d54:	69bb      	ldr	r3, [r7, #24]
 8005d56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	f000 8099 	beq.w	8005e92 <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d64:	f003 0310 	and.w	r3, r3, #16
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d105      	bne.n	8005d78 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d70:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	f7ff fbbc 	bl	80054fa <LL_ADC_INJ_IsTriggerSourceSWStart>
 8005d82:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4618      	mov	r0, r3
 8005d8a:	f7ff fb77 	bl	800547c <LL_ADC_REG_IsTriggerSourceSWStart>
 8005d8e:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a11      	ldr	r2, [pc, #68]	; (8005ddc <HAL_ADC_IRQHandler+0x22c>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d002      	beq.n	8005da0 <HAL_ADC_IRQHandler+0x1f0>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	e000      	b.n	8005da2 <HAL_ADC_IRQHandler+0x1f2>
 8005da0:	4b0f      	ldr	r3, [pc, #60]	; (8005de0 <HAL_ADC_IRQHandler+0x230>)
 8005da2:	687a      	ldr	r2, [r7, #4]
 8005da4:	6812      	ldr	r2, [r2, #0]
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d008      	beq.n	8005dbc <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d005      	beq.n	8005dbc <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	2b06      	cmp	r3, #6
 8005db4:	d002      	beq.n	8005dbc <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	2b07      	cmp	r3, #7
 8005dba:	d104      	bne.n	8005dc6 <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	68db      	ldr	r3, [r3, #12]
 8005dc2:	623b      	str	r3, [r7, #32]
 8005dc4:	e013      	b.n	8005dee <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a04      	ldr	r2, [pc, #16]	; (8005ddc <HAL_ADC_IRQHandler+0x22c>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d009      	beq.n	8005de4 <HAL_ADC_IRQHandler+0x234>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	e007      	b.n	8005de6 <HAL_ADC_IRQHandler+0x236>
 8005dd6:	bf00      	nop
 8005dd8:	50040300 	.word	0x50040300
 8005ddc:	50040100 	.word	0x50040100
 8005de0:	50040000 	.word	0x50040000
 8005de4:	4b7d      	ldr	r3, [pc, #500]	; (8005fdc <HAL_ADC_IRQHandler+0x42c>)
 8005de6:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	68db      	ldr	r3, [r3, #12]
 8005dec:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d047      	beq.n	8005e84 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8005df4:	6a3b      	ldr	r3, [r7, #32]
 8005df6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d007      	beq.n	8005e0e <HAL_ADC_IRQHandler+0x25e>
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d03f      	beq.n	8005e84 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8005e04:	6a3b      	ldr	r3, [r7, #32]
 8005e06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d13a      	bne.n	8005e84 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e18:	2b40      	cmp	r3, #64	; 0x40
 8005e1a:	d133      	bne.n	8005e84 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8005e1c:	6a3b      	ldr	r3, [r7, #32]
 8005e1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d12e      	bne.n	8005e84 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	f7ff fca7 	bl	800577e <LL_ADC_INJ_IsConversionOngoing>
 8005e30:	4603      	mov	r3, r0
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d11a      	bne.n	8005e6c <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	685a      	ldr	r2, [r3, #4]
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005e44:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e4a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	659a      	str	r2, [r3, #88]	; 0x58

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d112      	bne.n	8005e84 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e62:	f043 0201 	orr.w	r2, r3, #1
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	659a      	str	r2, [r3, #88]	; 0x58
 8005e6a:	e00b      	b.n	8005e84 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e70:	f043 0210 	orr.w	r2, r3, #16
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	659a      	str	r2, [r3, #88]	; 0x58

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e7c:	f043 0201 	orr.w	r2, r3, #1
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	65da      	str	r2, [r3, #92]	; 0x5c
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	f000 fefb 	bl	8006c80 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	2260      	movs	r2, #96	; 0x60
 8005e90:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8005e92:	69fb      	ldr	r3, [r7, #28]
 8005e94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d011      	beq.n	8005ec0 <HAL_ADC_IRQHandler+0x310>
 8005e9c:	69bb      	ldr	r3, [r7, #24]
 8005e9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d00c      	beq.n	8005ec0 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005eaa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f000 f8aa 	bl	800600c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	2280      	movs	r2, #128	; 0x80
 8005ebe:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8005ec0:	69fb      	ldr	r3, [r7, #28]
 8005ec2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d012      	beq.n	8005ef0 <HAL_ADC_IRQHandler+0x340>
 8005eca:	69bb      	ldr	r3, [r7, #24]
 8005ecc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d00d      	beq.n	8005ef0 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ed8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8005ee0:	6878      	ldr	r0, [r7, #4]
 8005ee2:	f000 fee1 	bl	8006ca8 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005eee:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8005ef0:	69fb      	ldr	r3, [r7, #28]
 8005ef2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d012      	beq.n	8005f20 <HAL_ADC_IRQHandler+0x370>
 8005efa:	69bb      	ldr	r3, [r7, #24]
 8005efc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d00d      	beq.n	8005f20 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f08:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f000 fed3 	bl	8006cbc <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f1e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8005f20:	69fb      	ldr	r3, [r7, #28]
 8005f22:	f003 0310 	and.w	r3, r3, #16
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d036      	beq.n	8005f98 <HAL_ADC_IRQHandler+0x3e8>
 8005f2a:	69bb      	ldr	r3, [r7, #24]
 8005f2c:	f003 0310 	and.w	r3, r3, #16
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d031      	beq.n	8005f98 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d102      	bne.n	8005f42 <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	627b      	str	r3, [r7, #36]	; 0x24
 8005f40:	e014      	b.n	8005f6c <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d008      	beq.n	8005f5a <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8005f48:	4825      	ldr	r0, [pc, #148]	; (8005fe0 <HAL_ADC_IRQHandler+0x430>)
 8005f4a:	f7ff fb47 	bl	80055dc <LL_ADC_GetMultiDMATransfer>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d00b      	beq.n	8005f6c <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8005f54:	2301      	movs	r3, #1
 8005f56:	627b      	str	r3, [r7, #36]	; 0x24
 8005f58:	e008      	b.n	8005f6c <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	68db      	ldr	r3, [r3, #12]
 8005f60:	f003 0301 	and.w	r3, r3, #1
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d001      	beq.n	8005f6c <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8005f68:	2301      	movs	r3, #1
 8005f6a:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8005f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f6e:	2b01      	cmp	r3, #1
 8005f70:	d10e      	bne.n	8005f90 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f76:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f82:	f043 0202 	orr.w	r2, r3, #2
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	65da      	str	r2, [r3, #92]	; 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f000 f848 	bl	8006020 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	2210      	movs	r2, #16
 8005f96:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8005f98:	69fb      	ldr	r3, [r7, #28]
 8005f9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d018      	beq.n	8005fd4 <HAL_ADC_IRQHandler+0x424>
 8005fa2:	69bb      	ldr	r3, [r7, #24]
 8005fa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d013      	beq.n	8005fd4 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fb0:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fbc:	f043 0208 	orr.w	r2, r3, #8
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005fcc:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f000 fe60 	bl	8006c94 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8005fd4:	bf00      	nop
 8005fd6:	3728      	adds	r7, #40	; 0x28
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	bd80      	pop	{r7, pc}
 8005fdc:	50040000 	.word	0x50040000
 8005fe0:	50040300 	.word	0x50040300

08005fe4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b083      	sub	sp, #12
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8005fec:	bf00      	nop
 8005fee:	370c      	adds	r7, #12
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff6:	4770      	bx	lr

08005ff8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b083      	sub	sp, #12
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8006000:	bf00      	nop
 8006002:	370c      	adds	r7, #12
 8006004:	46bd      	mov	sp, r7
 8006006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600a:	4770      	bx	lr

0800600c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800600c:	b480      	push	{r7}
 800600e:	b083      	sub	sp, #12
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8006014:	bf00      	nop
 8006016:	370c      	adds	r7, #12
 8006018:	46bd      	mov	sp, r7
 800601a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601e:	4770      	bx	lr

08006020 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006020:	b480      	push	{r7}
 8006022:	b083      	sub	sp, #12
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8006028:	bf00      	nop
 800602a:	370c      	adds	r7, #12
 800602c:	46bd      	mov	sp, r7
 800602e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006032:	4770      	bx	lr

08006034 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b0b6      	sub	sp, #216	; 0xd8
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
 800603c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800603e:	2300      	movs	r3, #0
 8006040:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8006044:	2300      	movs	r3, #0
 8006046:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800604e:	2b01      	cmp	r3, #1
 8006050:	d101      	bne.n	8006056 <HAL_ADC_ConfigChannel+0x22>
 8006052:	2302      	movs	r3, #2
 8006054:	e3d3      	b.n	80067fe <HAL_ADC_ConfigChannel+0x7ca>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2201      	movs	r2, #1
 800605a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4618      	mov	r0, r3
 8006064:	f7ff fb78 	bl	8005758 <LL_ADC_REG_IsConversionOngoing>
 8006068:	4603      	mov	r3, r0
 800606a:	2b00      	cmp	r3, #0
 800606c:	f040 83b8 	bne.w	80067e0 <HAL_ADC_ConfigChannel+0x7ac>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	2b05      	cmp	r3, #5
 8006076:	d824      	bhi.n	80060c2 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	3b02      	subs	r3, #2
 800607e:	2b03      	cmp	r3, #3
 8006080:	d81b      	bhi.n	80060ba <HAL_ADC_ConfigChannel+0x86>
 8006082:	a201      	add	r2, pc, #4	; (adr r2, 8006088 <HAL_ADC_ConfigChannel+0x54>)
 8006084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006088:	08006099 	.word	0x08006099
 800608c:	080060a1 	.word	0x080060a1
 8006090:	080060a9 	.word	0x080060a9
 8006094:	080060b1 	.word	0x080060b1
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	220c      	movs	r2, #12
 800609c:	605a      	str	r2, [r3, #4]
          break;
 800609e:	e010      	b.n	80060c2 <HAL_ADC_ConfigChannel+0x8e>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	2212      	movs	r2, #18
 80060a4:	605a      	str	r2, [r3, #4]
          break;
 80060a6:	e00c      	b.n	80060c2 <HAL_ADC_ConfigChannel+0x8e>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	2218      	movs	r2, #24
 80060ac:	605a      	str	r2, [r3, #4]
          break;
 80060ae:	e008      	b.n	80060c2 <HAL_ADC_ConfigChannel+0x8e>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80060b6:	605a      	str	r2, [r3, #4]
          break;
 80060b8:	e003      	b.n	80060c2 <HAL_ADC_ConfigChannel+0x8e>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	2206      	movs	r2, #6
 80060be:	605a      	str	r2, [r3, #4]
          break;
 80060c0:	bf00      	nop
      }
    }
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6818      	ldr	r0, [r3, #0]
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	6859      	ldr	r1, [r3, #4]
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	461a      	mov	r2, r3
 80060d0:	f7ff f9e7 	bl	80054a2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4618      	mov	r0, r3
 80060da:	f7ff fb3d 	bl	8005758 <LL_ADC_REG_IsConversionOngoing>
 80060de:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4618      	mov	r0, r3
 80060e8:	f7ff fb49 	bl	800577e <LL_ADC_INJ_IsConversionOngoing>
 80060ec:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80060f0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	f040 81c1 	bne.w	800647c <HAL_ADC_ConfigChannel+0x448>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80060fa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80060fe:	2b00      	cmp	r3, #0
 8006100:	f040 81bc 	bne.w	800647c <HAL_ADC_ConfigChannel+0x448>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	689b      	ldr	r3, [r3, #8]
 8006108:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800610c:	d10f      	bne.n	800612e <HAL_ADC_ConfigChannel+0xfa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6818      	ldr	r0, [r3, #0]
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	2200      	movs	r2, #0
 8006118:	4619      	mov	r1, r3
 800611a:	f7ff fa01 	bl	8005520 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8006126:	4618      	mov	r0, r3
 8006128:	f7ff f995 	bl	8005456 <LL_ADC_SetSamplingTimeCommonConfig>
 800612c:	e00e      	b.n	800614c <HAL_ADC_ConfigChannel+0x118>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6818      	ldr	r0, [r3, #0]
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	6819      	ldr	r1, [r3, #0]
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	689b      	ldr	r3, [r3, #8]
 800613a:	461a      	mov	r2, r3
 800613c:	f7ff f9f0 	bl	8005520 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	2100      	movs	r1, #0
 8006146:	4618      	mov	r0, r3
 8006148:	f7ff f985 	bl	8005456 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	695a      	ldr	r2, [r3, #20]
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	68db      	ldr	r3, [r3, #12]
 8006156:	08db      	lsrs	r3, r3, #3
 8006158:	f003 0303 	and.w	r3, r3, #3
 800615c:	005b      	lsls	r3, r3, #1
 800615e:	fa02 f303 	lsl.w	r3, r2, r3
 8006162:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	691b      	ldr	r3, [r3, #16]
 800616a:	2b04      	cmp	r3, #4
 800616c:	d00a      	beq.n	8006184 <HAL_ADC_ConfigChannel+0x150>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6818      	ldr	r0, [r3, #0]
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	6919      	ldr	r1, [r3, #16]
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	681a      	ldr	r2, [r3, #0]
 800617a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800617e:	f7ff f915 	bl	80053ac <LL_ADC_SetOffset>
 8006182:	e17b      	b.n	800647c <HAL_ADC_ConfigChannel+0x448>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	2100      	movs	r1, #0
 800618a:	4618      	mov	r0, r3
 800618c:	f7ff f932 	bl	80053f4 <LL_ADC_GetOffsetChannel>
 8006190:	4603      	mov	r3, r0
 8006192:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006196:	2b00      	cmp	r3, #0
 8006198:	d10a      	bne.n	80061b0 <HAL_ADC_ConfigChannel+0x17c>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	2100      	movs	r1, #0
 80061a0:	4618      	mov	r0, r3
 80061a2:	f7ff f927 	bl	80053f4 <LL_ADC_GetOffsetChannel>
 80061a6:	4603      	mov	r3, r0
 80061a8:	0e9b      	lsrs	r3, r3, #26
 80061aa:	f003 021f 	and.w	r2, r3, #31
 80061ae:	e01e      	b.n	80061ee <HAL_ADC_ConfigChannel+0x1ba>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	2100      	movs	r1, #0
 80061b6:	4618      	mov	r0, r3
 80061b8:	f7ff f91c 	bl	80053f4 <LL_ADC_GetOffsetChannel>
 80061bc:	4603      	mov	r3, r0
 80061be:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061c2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80061c6:	fa93 f3a3 	rbit	r3, r3
 80061ca:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80061ce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80061d2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80061d6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d101      	bne.n	80061e2 <HAL_ADC_ConfigChannel+0x1ae>
  {
    return 32U;
 80061de:	2320      	movs	r3, #32
 80061e0:	e004      	b.n	80061ec <HAL_ADC_ConfigChannel+0x1b8>
  }
  return __builtin_clz(value);
 80061e2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80061e6:	fab3 f383 	clz	r3, r3
 80061ea:	b2db      	uxtb	r3, r3
 80061ec:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d105      	bne.n	8006206 <HAL_ADC_ConfigChannel+0x1d2>
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	0e9b      	lsrs	r3, r3, #26
 8006200:	f003 031f 	and.w	r3, r3, #31
 8006204:	e018      	b.n	8006238 <HAL_ADC_ConfigChannel+0x204>
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800620e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006212:	fa93 f3a3 	rbit	r3, r3
 8006216:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800621a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800621e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8006222:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006226:	2b00      	cmp	r3, #0
 8006228:	d101      	bne.n	800622e <HAL_ADC_ConfigChannel+0x1fa>
    return 32U;
 800622a:	2320      	movs	r3, #32
 800622c:	e004      	b.n	8006238 <HAL_ADC_ConfigChannel+0x204>
  return __builtin_clz(value);
 800622e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006232:	fab3 f383 	clz	r3, r3
 8006236:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006238:	429a      	cmp	r2, r3
 800623a:	d106      	bne.n	800624a <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	2200      	movs	r2, #0
 8006242:	2100      	movs	r1, #0
 8006244:	4618      	mov	r0, r3
 8006246:	f7ff f8eb 	bl	8005420 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	2101      	movs	r1, #1
 8006250:	4618      	mov	r0, r3
 8006252:	f7ff f8cf 	bl	80053f4 <LL_ADC_GetOffsetChannel>
 8006256:	4603      	mov	r3, r0
 8006258:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800625c:	2b00      	cmp	r3, #0
 800625e:	d10a      	bne.n	8006276 <HAL_ADC_ConfigChannel+0x242>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	2101      	movs	r1, #1
 8006266:	4618      	mov	r0, r3
 8006268:	f7ff f8c4 	bl	80053f4 <LL_ADC_GetOffsetChannel>
 800626c:	4603      	mov	r3, r0
 800626e:	0e9b      	lsrs	r3, r3, #26
 8006270:	f003 021f 	and.w	r2, r3, #31
 8006274:	e01e      	b.n	80062b4 <HAL_ADC_ConfigChannel+0x280>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	2101      	movs	r1, #1
 800627c:	4618      	mov	r0, r3
 800627e:	f7ff f8b9 	bl	80053f4 <LL_ADC_GetOffsetChannel>
 8006282:	4603      	mov	r3, r0
 8006284:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006288:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800628c:	fa93 f3a3 	rbit	r3, r3
 8006290:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8006294:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006298:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800629c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d101      	bne.n	80062a8 <HAL_ADC_ConfigChannel+0x274>
    return 32U;
 80062a4:	2320      	movs	r3, #32
 80062a6:	e004      	b.n	80062b2 <HAL_ADC_ConfigChannel+0x27e>
  return __builtin_clz(value);
 80062a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80062ac:	fab3 f383 	clz	r3, r3
 80062b0:	b2db      	uxtb	r3, r3
 80062b2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d105      	bne.n	80062cc <HAL_ADC_ConfigChannel+0x298>
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	0e9b      	lsrs	r3, r3, #26
 80062c6:	f003 031f 	and.w	r3, r3, #31
 80062ca:	e018      	b.n	80062fe <HAL_ADC_ConfigChannel+0x2ca>
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80062d8:	fa93 f3a3 	rbit	r3, r3
 80062dc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80062e0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80062e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80062e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d101      	bne.n	80062f4 <HAL_ADC_ConfigChannel+0x2c0>
    return 32U;
 80062f0:	2320      	movs	r3, #32
 80062f2:	e004      	b.n	80062fe <HAL_ADC_ConfigChannel+0x2ca>
  return __builtin_clz(value);
 80062f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80062f8:	fab3 f383 	clz	r3, r3
 80062fc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80062fe:	429a      	cmp	r2, r3
 8006300:	d106      	bne.n	8006310 <HAL_ADC_ConfigChannel+0x2dc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	2200      	movs	r2, #0
 8006308:	2101      	movs	r1, #1
 800630a:	4618      	mov	r0, r3
 800630c:	f7ff f888 	bl	8005420 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	2102      	movs	r1, #2
 8006316:	4618      	mov	r0, r3
 8006318:	f7ff f86c 	bl	80053f4 <LL_ADC_GetOffsetChannel>
 800631c:	4603      	mov	r3, r0
 800631e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006322:	2b00      	cmp	r3, #0
 8006324:	d10a      	bne.n	800633c <HAL_ADC_ConfigChannel+0x308>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	2102      	movs	r1, #2
 800632c:	4618      	mov	r0, r3
 800632e:	f7ff f861 	bl	80053f4 <LL_ADC_GetOffsetChannel>
 8006332:	4603      	mov	r3, r0
 8006334:	0e9b      	lsrs	r3, r3, #26
 8006336:	f003 021f 	and.w	r2, r3, #31
 800633a:	e01e      	b.n	800637a <HAL_ADC_ConfigChannel+0x346>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	2102      	movs	r1, #2
 8006342:	4618      	mov	r0, r3
 8006344:	f7ff f856 	bl	80053f4 <LL_ADC_GetOffsetChannel>
 8006348:	4603      	mov	r3, r0
 800634a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800634e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006352:	fa93 f3a3 	rbit	r3, r3
 8006356:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800635a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800635e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8006362:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006366:	2b00      	cmp	r3, #0
 8006368:	d101      	bne.n	800636e <HAL_ADC_ConfigChannel+0x33a>
    return 32U;
 800636a:	2320      	movs	r3, #32
 800636c:	e004      	b.n	8006378 <HAL_ADC_ConfigChannel+0x344>
  return __builtin_clz(value);
 800636e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006372:	fab3 f383 	clz	r3, r3
 8006376:	b2db      	uxtb	r3, r3
 8006378:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006382:	2b00      	cmp	r3, #0
 8006384:	d105      	bne.n	8006392 <HAL_ADC_ConfigChannel+0x35e>
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	0e9b      	lsrs	r3, r3, #26
 800638c:	f003 031f 	and.w	r3, r3, #31
 8006390:	e016      	b.n	80063c0 <HAL_ADC_ConfigChannel+0x38c>
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800639a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800639e:	fa93 f3a3 	rbit	r3, r3
 80063a2:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80063a4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80063a6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80063aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d101      	bne.n	80063b6 <HAL_ADC_ConfigChannel+0x382>
    return 32U;
 80063b2:	2320      	movs	r3, #32
 80063b4:	e004      	b.n	80063c0 <HAL_ADC_ConfigChannel+0x38c>
  return __builtin_clz(value);
 80063b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80063ba:	fab3 f383 	clz	r3, r3
 80063be:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80063c0:	429a      	cmp	r2, r3
 80063c2:	d106      	bne.n	80063d2 <HAL_ADC_ConfigChannel+0x39e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	2200      	movs	r2, #0
 80063ca:	2102      	movs	r1, #2
 80063cc:	4618      	mov	r0, r3
 80063ce:	f7ff f827 	bl	8005420 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	2103      	movs	r1, #3
 80063d8:	4618      	mov	r0, r3
 80063da:	f7ff f80b 	bl	80053f4 <LL_ADC_GetOffsetChannel>
 80063de:	4603      	mov	r3, r0
 80063e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d10a      	bne.n	80063fe <HAL_ADC_ConfigChannel+0x3ca>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	2103      	movs	r1, #3
 80063ee:	4618      	mov	r0, r3
 80063f0:	f7ff f800 	bl	80053f4 <LL_ADC_GetOffsetChannel>
 80063f4:	4603      	mov	r3, r0
 80063f6:	0e9b      	lsrs	r3, r3, #26
 80063f8:	f003 021f 	and.w	r2, r3, #31
 80063fc:	e017      	b.n	800642e <HAL_ADC_ConfigChannel+0x3fa>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	2103      	movs	r1, #3
 8006404:	4618      	mov	r0, r3
 8006406:	f7fe fff5 	bl	80053f4 <LL_ADC_GetOffsetChannel>
 800640a:	4603      	mov	r3, r0
 800640c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800640e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006410:	fa93 f3a3 	rbit	r3, r3
 8006414:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8006416:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006418:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800641a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800641c:	2b00      	cmp	r3, #0
 800641e:	d101      	bne.n	8006424 <HAL_ADC_ConfigChannel+0x3f0>
    return 32U;
 8006420:	2320      	movs	r3, #32
 8006422:	e003      	b.n	800642c <HAL_ADC_ConfigChannel+0x3f8>
  return __builtin_clz(value);
 8006424:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006426:	fab3 f383 	clz	r3, r3
 800642a:	b2db      	uxtb	r3, r3
 800642c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006436:	2b00      	cmp	r3, #0
 8006438:	d105      	bne.n	8006446 <HAL_ADC_ConfigChannel+0x412>
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	0e9b      	lsrs	r3, r3, #26
 8006440:	f003 031f 	and.w	r3, r3, #31
 8006444:	e011      	b.n	800646a <HAL_ADC_ConfigChannel+0x436>
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800644c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800644e:	fa93 f3a3 	rbit	r3, r3
 8006452:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8006454:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006456:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8006458:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800645a:	2b00      	cmp	r3, #0
 800645c:	d101      	bne.n	8006462 <HAL_ADC_ConfigChannel+0x42e>
    return 32U;
 800645e:	2320      	movs	r3, #32
 8006460:	e003      	b.n	800646a <HAL_ADC_ConfigChannel+0x436>
  return __builtin_clz(value);
 8006462:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006464:	fab3 f383 	clz	r3, r3
 8006468:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800646a:	429a      	cmp	r2, r3
 800646c:	d106      	bne.n	800647c <HAL_ADC_ConfigChannel+0x448>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	2200      	movs	r2, #0
 8006474:	2103      	movs	r1, #3
 8006476:	4618      	mov	r0, r3
 8006478:	f7fe ffd2 	bl	8005420 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4618      	mov	r0, r3
 8006482:	f7ff f92f 	bl	80056e4 <LL_ADC_IsEnabled>
 8006486:	4603      	mov	r3, r0
 8006488:	2b00      	cmp	r3, #0
 800648a:	f040 813f 	bne.w	800670c <HAL_ADC_ConfigChannel+0x6d8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6818      	ldr	r0, [r3, #0]
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	6819      	ldr	r1, [r3, #0]
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	68db      	ldr	r3, [r3, #12]
 800649a:	461a      	mov	r2, r3
 800649c:	f7ff f86c 	bl	8005578 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	68db      	ldr	r3, [r3, #12]
 80064a4:	4a8e      	ldr	r2, [pc, #568]	; (80066e0 <HAL_ADC_ConfigChannel+0x6ac>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	f040 8130 	bne.w	800670c <HAL_ADC_ConfigChannel+0x6d8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d10b      	bne.n	80064d4 <HAL_ADC_ConfigChannel+0x4a0>
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	0e9b      	lsrs	r3, r3, #26
 80064c2:	3301      	adds	r3, #1
 80064c4:	f003 031f 	and.w	r3, r3, #31
 80064c8:	2b09      	cmp	r3, #9
 80064ca:	bf94      	ite	ls
 80064cc:	2301      	movls	r3, #1
 80064ce:	2300      	movhi	r3, #0
 80064d0:	b2db      	uxtb	r3, r3
 80064d2:	e019      	b.n	8006508 <HAL_ADC_ConfigChannel+0x4d4>
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80064dc:	fa93 f3a3 	rbit	r3, r3
 80064e0:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80064e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80064e4:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80064e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d101      	bne.n	80064f0 <HAL_ADC_ConfigChannel+0x4bc>
    return 32U;
 80064ec:	2320      	movs	r3, #32
 80064ee:	e003      	b.n	80064f8 <HAL_ADC_ConfigChannel+0x4c4>
  return __builtin_clz(value);
 80064f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80064f2:	fab3 f383 	clz	r3, r3
 80064f6:	b2db      	uxtb	r3, r3
 80064f8:	3301      	adds	r3, #1
 80064fa:	f003 031f 	and.w	r3, r3, #31
 80064fe:	2b09      	cmp	r3, #9
 8006500:	bf94      	ite	ls
 8006502:	2301      	movls	r3, #1
 8006504:	2300      	movhi	r3, #0
 8006506:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006508:	2b00      	cmp	r3, #0
 800650a:	d079      	beq.n	8006600 <HAL_ADC_ConfigChannel+0x5cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006514:	2b00      	cmp	r3, #0
 8006516:	d107      	bne.n	8006528 <HAL_ADC_ConfigChannel+0x4f4>
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	0e9b      	lsrs	r3, r3, #26
 800651e:	3301      	adds	r3, #1
 8006520:	069b      	lsls	r3, r3, #26
 8006522:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006526:	e015      	b.n	8006554 <HAL_ADC_ConfigChannel+0x520>
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800652e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006530:	fa93 f3a3 	rbit	r3, r3
 8006534:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8006536:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006538:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800653a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800653c:	2b00      	cmp	r3, #0
 800653e:	d101      	bne.n	8006544 <HAL_ADC_ConfigChannel+0x510>
    return 32U;
 8006540:	2320      	movs	r3, #32
 8006542:	e003      	b.n	800654c <HAL_ADC_ConfigChannel+0x518>
  return __builtin_clz(value);
 8006544:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006546:	fab3 f383 	clz	r3, r3
 800654a:	b2db      	uxtb	r3, r3
 800654c:	3301      	adds	r3, #1
 800654e:	069b      	lsls	r3, r3, #26
 8006550:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800655c:	2b00      	cmp	r3, #0
 800655e:	d109      	bne.n	8006574 <HAL_ADC_ConfigChannel+0x540>
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	0e9b      	lsrs	r3, r3, #26
 8006566:	3301      	adds	r3, #1
 8006568:	f003 031f 	and.w	r3, r3, #31
 800656c:	2101      	movs	r1, #1
 800656e:	fa01 f303 	lsl.w	r3, r1, r3
 8006572:	e017      	b.n	80065a4 <HAL_ADC_ConfigChannel+0x570>
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800657a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800657c:	fa93 f3a3 	rbit	r3, r3
 8006580:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8006582:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006584:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8006586:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006588:	2b00      	cmp	r3, #0
 800658a:	d101      	bne.n	8006590 <HAL_ADC_ConfigChannel+0x55c>
    return 32U;
 800658c:	2320      	movs	r3, #32
 800658e:	e003      	b.n	8006598 <HAL_ADC_ConfigChannel+0x564>
  return __builtin_clz(value);
 8006590:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006592:	fab3 f383 	clz	r3, r3
 8006596:	b2db      	uxtb	r3, r3
 8006598:	3301      	adds	r3, #1
 800659a:	f003 031f 	and.w	r3, r3, #31
 800659e:	2101      	movs	r1, #1
 80065a0:	fa01 f303 	lsl.w	r3, r1, r3
 80065a4:	ea42 0103 	orr.w	r1, r2, r3
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d10a      	bne.n	80065ca <HAL_ADC_ConfigChannel+0x596>
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	0e9b      	lsrs	r3, r3, #26
 80065ba:	3301      	adds	r3, #1
 80065bc:	f003 021f 	and.w	r2, r3, #31
 80065c0:	4613      	mov	r3, r2
 80065c2:	005b      	lsls	r3, r3, #1
 80065c4:	4413      	add	r3, r2
 80065c6:	051b      	lsls	r3, r3, #20
 80065c8:	e018      	b.n	80065fc <HAL_ADC_ConfigChannel+0x5c8>
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065d2:	fa93 f3a3 	rbit	r3, r3
 80065d6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80065d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065da:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80065dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d101      	bne.n	80065e6 <HAL_ADC_ConfigChannel+0x5b2>
    return 32U;
 80065e2:	2320      	movs	r3, #32
 80065e4:	e003      	b.n	80065ee <HAL_ADC_ConfigChannel+0x5ba>
  return __builtin_clz(value);
 80065e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065e8:	fab3 f383 	clz	r3, r3
 80065ec:	b2db      	uxtb	r3, r3
 80065ee:	3301      	adds	r3, #1
 80065f0:	f003 021f 	and.w	r2, r3, #31
 80065f4:	4613      	mov	r3, r2
 80065f6:	005b      	lsls	r3, r3, #1
 80065f8:	4413      	add	r3, r2
 80065fa:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80065fc:	430b      	orrs	r3, r1
 80065fe:	e080      	b.n	8006702 <HAL_ADC_ConfigChannel+0x6ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006608:	2b00      	cmp	r3, #0
 800660a:	d107      	bne.n	800661c <HAL_ADC_ConfigChannel+0x5e8>
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	0e9b      	lsrs	r3, r3, #26
 8006612:	3301      	adds	r3, #1
 8006614:	069b      	lsls	r3, r3, #26
 8006616:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800661a:	e015      	b.n	8006648 <HAL_ADC_ConfigChannel+0x614>
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006624:	fa93 f3a3 	rbit	r3, r3
 8006628:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800662a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800662c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800662e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006630:	2b00      	cmp	r3, #0
 8006632:	d101      	bne.n	8006638 <HAL_ADC_ConfigChannel+0x604>
    return 32U;
 8006634:	2320      	movs	r3, #32
 8006636:	e003      	b.n	8006640 <HAL_ADC_ConfigChannel+0x60c>
  return __builtin_clz(value);
 8006638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800663a:	fab3 f383 	clz	r3, r3
 800663e:	b2db      	uxtb	r3, r3
 8006640:	3301      	adds	r3, #1
 8006642:	069b      	lsls	r3, r3, #26
 8006644:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006650:	2b00      	cmp	r3, #0
 8006652:	d109      	bne.n	8006668 <HAL_ADC_ConfigChannel+0x634>
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	0e9b      	lsrs	r3, r3, #26
 800665a:	3301      	adds	r3, #1
 800665c:	f003 031f 	and.w	r3, r3, #31
 8006660:	2101      	movs	r1, #1
 8006662:	fa01 f303 	lsl.w	r3, r1, r3
 8006666:	e017      	b.n	8006698 <HAL_ADC_ConfigChannel+0x664>
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800666e:	6a3b      	ldr	r3, [r7, #32]
 8006670:	fa93 f3a3 	rbit	r3, r3
 8006674:	61fb      	str	r3, [r7, #28]
  return result;
 8006676:	69fb      	ldr	r3, [r7, #28]
 8006678:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800667a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800667c:	2b00      	cmp	r3, #0
 800667e:	d101      	bne.n	8006684 <HAL_ADC_ConfigChannel+0x650>
    return 32U;
 8006680:	2320      	movs	r3, #32
 8006682:	e003      	b.n	800668c <HAL_ADC_ConfigChannel+0x658>
  return __builtin_clz(value);
 8006684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006686:	fab3 f383 	clz	r3, r3
 800668a:	b2db      	uxtb	r3, r3
 800668c:	3301      	adds	r3, #1
 800668e:	f003 031f 	and.w	r3, r3, #31
 8006692:	2101      	movs	r1, #1
 8006694:	fa01 f303 	lsl.w	r3, r1, r3
 8006698:	ea42 0103 	orr.w	r1, r2, r3
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d10d      	bne.n	80066c4 <HAL_ADC_ConfigChannel+0x690>
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	0e9b      	lsrs	r3, r3, #26
 80066ae:	3301      	adds	r3, #1
 80066b0:	f003 021f 	and.w	r2, r3, #31
 80066b4:	4613      	mov	r3, r2
 80066b6:	005b      	lsls	r3, r3, #1
 80066b8:	4413      	add	r3, r2
 80066ba:	3b1e      	subs	r3, #30
 80066bc:	051b      	lsls	r3, r3, #20
 80066be:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80066c2:	e01d      	b.n	8006700 <HAL_ADC_ConfigChannel+0x6cc>
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066ca:	697b      	ldr	r3, [r7, #20]
 80066cc:	fa93 f3a3 	rbit	r3, r3
 80066d0:	613b      	str	r3, [r7, #16]
  return result;
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80066d6:	69bb      	ldr	r3, [r7, #24]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d103      	bne.n	80066e4 <HAL_ADC_ConfigChannel+0x6b0>
    return 32U;
 80066dc:	2320      	movs	r3, #32
 80066de:	e005      	b.n	80066ec <HAL_ADC_ConfigChannel+0x6b8>
 80066e0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80066e4:	69bb      	ldr	r3, [r7, #24]
 80066e6:	fab3 f383 	clz	r3, r3
 80066ea:	b2db      	uxtb	r3, r3
 80066ec:	3301      	adds	r3, #1
 80066ee:	f003 021f 	and.w	r2, r3, #31
 80066f2:	4613      	mov	r3, r2
 80066f4:	005b      	lsls	r3, r3, #1
 80066f6:	4413      	add	r3, r2
 80066f8:	3b1e      	subs	r3, #30
 80066fa:	051b      	lsls	r3, r3, #20
 80066fc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006700:	430b      	orrs	r3, r1
 8006702:	683a      	ldr	r2, [r7, #0]
 8006704:	6892      	ldr	r2, [r2, #8]
 8006706:	4619      	mov	r1, r3
 8006708:	f7fe ff0a 	bl	8005520 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	681a      	ldr	r2, [r3, #0]
 8006710:	4b3d      	ldr	r3, [pc, #244]	; (8006808 <HAL_ADC_ConfigChannel+0x7d4>)
 8006712:	4013      	ands	r3, r2
 8006714:	2b00      	cmp	r3, #0
 8006716:	d06c      	beq.n	80067f2 <HAL_ADC_ConfigChannel+0x7be>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006718:	483c      	ldr	r0, [pc, #240]	; (800680c <HAL_ADC_ConfigChannel+0x7d8>)
 800671a:	f7fe fe39 	bl	8005390 <LL_ADC_GetCommonPathInternalCh>
 800671e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4a3a      	ldr	r2, [pc, #232]	; (8006810 <HAL_ADC_ConfigChannel+0x7dc>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d127      	bne.n	800677c <HAL_ADC_ConfigChannel+0x748>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800672c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006730:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006734:	2b00      	cmp	r3, #0
 8006736:	d121      	bne.n	800677c <HAL_ADC_ConfigChannel+0x748>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	4a35      	ldr	r2, [pc, #212]	; (8006814 <HAL_ADC_ConfigChannel+0x7e0>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d157      	bne.n	80067f2 <HAL_ADC_ConfigChannel+0x7be>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006742:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006746:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800674a:	4619      	mov	r1, r3
 800674c:	482f      	ldr	r0, [pc, #188]	; (800680c <HAL_ADC_ConfigChannel+0x7d8>)
 800674e:	f7fe fe0c 	bl	800536a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006752:	4b31      	ldr	r3, [pc, #196]	; (8006818 <HAL_ADC_ConfigChannel+0x7e4>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	099b      	lsrs	r3, r3, #6
 8006758:	4a30      	ldr	r2, [pc, #192]	; (800681c <HAL_ADC_ConfigChannel+0x7e8>)
 800675a:	fba2 2303 	umull	r2, r3, r2, r3
 800675e:	099b      	lsrs	r3, r3, #6
 8006760:	1c5a      	adds	r2, r3, #1
 8006762:	4613      	mov	r3, r2
 8006764:	005b      	lsls	r3, r3, #1
 8006766:	4413      	add	r3, r2
 8006768:	009b      	lsls	r3, r3, #2
 800676a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800676c:	e002      	b.n	8006774 <HAL_ADC_ConfigChannel+0x740>
          {
            wait_loop_index--;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	3b01      	subs	r3, #1
 8006772:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d1f9      	bne.n	800676e <HAL_ADC_ConfigChannel+0x73a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800677a:	e03a      	b.n	80067f2 <HAL_ADC_ConfigChannel+0x7be>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4a27      	ldr	r2, [pc, #156]	; (8006820 <HAL_ADC_ConfigChannel+0x7ec>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d113      	bne.n	80067ae <HAL_ADC_ConfigChannel+0x77a>
 8006786:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800678a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800678e:	2b00      	cmp	r3, #0
 8006790:	d10d      	bne.n	80067ae <HAL_ADC_ConfigChannel+0x77a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a1f      	ldr	r2, [pc, #124]	; (8006814 <HAL_ADC_ConfigChannel+0x7e0>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d12a      	bne.n	80067f2 <HAL_ADC_ConfigChannel+0x7be>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800679c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80067a0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80067a4:	4619      	mov	r1, r3
 80067a6:	4819      	ldr	r0, [pc, #100]	; (800680c <HAL_ADC_ConfigChannel+0x7d8>)
 80067a8:	f7fe fddf 	bl	800536a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80067ac:	e021      	b.n	80067f2 <HAL_ADC_ConfigChannel+0x7be>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4a1c      	ldr	r2, [pc, #112]	; (8006824 <HAL_ADC_ConfigChannel+0x7f0>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d11c      	bne.n	80067f2 <HAL_ADC_ConfigChannel+0x7be>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80067b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80067bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d116      	bne.n	80067f2 <HAL_ADC_ConfigChannel+0x7be>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4a12      	ldr	r2, [pc, #72]	; (8006814 <HAL_ADC_ConfigChannel+0x7e0>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d111      	bne.n	80067f2 <HAL_ADC_ConfigChannel+0x7be>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80067ce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80067d2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80067d6:	4619      	mov	r1, r3
 80067d8:	480c      	ldr	r0, [pc, #48]	; (800680c <HAL_ADC_ConfigChannel+0x7d8>)
 80067da:	f7fe fdc6 	bl	800536a <LL_ADC_SetCommonPathInternalCh>
 80067de:	e008      	b.n	80067f2 <HAL_ADC_ConfigChannel+0x7be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067e4:	f043 0220 	orr.w	r2, r3, #32
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80067ec:	2301      	movs	r3, #1
 80067ee:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2200      	movs	r2, #0
 80067f6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80067fa:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80067fe:	4618      	mov	r0, r3
 8006800:	37d8      	adds	r7, #216	; 0xd8
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}
 8006806:	bf00      	nop
 8006808:	80080000 	.word	0x80080000
 800680c:	50040300 	.word	0x50040300
 8006810:	c7520000 	.word	0xc7520000
 8006814:	50040000 	.word	0x50040000
 8006818:	20000224 	.word	0x20000224
 800681c:	053e2d63 	.word	0x053e2d63
 8006820:	cb840000 	.word	0xcb840000
 8006824:	80000001 	.word	0x80000001

08006828 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b084      	sub	sp, #16
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8006830:	2300      	movs	r3, #0
 8006832:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4618      	mov	r0, r3
 800683a:	f7fe ff53 	bl	80056e4 <LL_ADC_IsEnabled>
 800683e:	4603      	mov	r3, r0
 8006840:	2b00      	cmp	r3, #0
 8006842:	d169      	bne.n	8006918 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	689a      	ldr	r2, [r3, #8]
 800684a:	4b36      	ldr	r3, [pc, #216]	; (8006924 <ADC_Enable+0xfc>)
 800684c:	4013      	ands	r3, r2
 800684e:	2b00      	cmp	r3, #0
 8006850:	d00d      	beq.n	800686e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006856:	f043 0210 	orr.w	r2, r3, #16
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006862:	f043 0201 	orr.w	r2, r3, #1
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800686a:	2301      	movs	r3, #1
 800686c:	e055      	b.n	800691a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4618      	mov	r0, r3
 8006874:	f7fe ff0e 	bl	8005694 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8006878:	482b      	ldr	r0, [pc, #172]	; (8006928 <ADC_Enable+0x100>)
 800687a:	f7fe fd89 	bl	8005390 <LL_ADC_GetCommonPathInternalCh>
 800687e:	4603      	mov	r3, r0
 8006880:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006884:	2b00      	cmp	r3, #0
 8006886:	d013      	beq.n	80068b0 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006888:	4b28      	ldr	r3, [pc, #160]	; (800692c <ADC_Enable+0x104>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	099b      	lsrs	r3, r3, #6
 800688e:	4a28      	ldr	r2, [pc, #160]	; (8006930 <ADC_Enable+0x108>)
 8006890:	fba2 2303 	umull	r2, r3, r2, r3
 8006894:	099b      	lsrs	r3, r3, #6
 8006896:	1c5a      	adds	r2, r3, #1
 8006898:	4613      	mov	r3, r2
 800689a:	005b      	lsls	r3, r3, #1
 800689c:	4413      	add	r3, r2
 800689e:	009b      	lsls	r3, r3, #2
 80068a0:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80068a2:	e002      	b.n	80068aa <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	3b01      	subs	r3, #1
 80068a8:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d1f9      	bne.n	80068a4 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80068b0:	f7fe fd18 	bl	80052e4 <HAL_GetTick>
 80068b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80068b6:	e028      	b.n	800690a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	4618      	mov	r0, r3
 80068be:	f7fe ff11 	bl	80056e4 <LL_ADC_IsEnabled>
 80068c2:	4603      	mov	r3, r0
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d104      	bne.n	80068d2 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4618      	mov	r0, r3
 80068ce:	f7fe fee1 	bl	8005694 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80068d2:	f7fe fd07 	bl	80052e4 <HAL_GetTick>
 80068d6:	4602      	mov	r2, r0
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	1ad3      	subs	r3, r2, r3
 80068dc:	2b02      	cmp	r3, #2
 80068de:	d914      	bls.n	800690a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f003 0301 	and.w	r3, r3, #1
 80068ea:	2b01      	cmp	r3, #1
 80068ec:	d00d      	beq.n	800690a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068f2:	f043 0210 	orr.w	r2, r3, #16
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068fe:	f043 0201 	orr.w	r2, r3, #1
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8006906:	2301      	movs	r3, #1
 8006908:	e007      	b.n	800691a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f003 0301 	and.w	r3, r3, #1
 8006914:	2b01      	cmp	r3, #1
 8006916:	d1cf      	bne.n	80068b8 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006918:	2300      	movs	r3, #0
}
 800691a:	4618      	mov	r0, r3
 800691c:	3710      	adds	r7, #16
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}
 8006922:	bf00      	nop
 8006924:	8000003f 	.word	0x8000003f
 8006928:	50040300 	.word	0x50040300
 800692c:	20000224 	.word	0x20000224
 8006930:	053e2d63 	.word	0x053e2d63

08006934 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b084      	sub	sp, #16
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4618      	mov	r0, r3
 8006942:	f7fe fee2 	bl	800570a <LL_ADC_IsDisableOngoing>
 8006946:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4618      	mov	r0, r3
 800694e:	f7fe fec9 	bl	80056e4 <LL_ADC_IsEnabled>
 8006952:	4603      	mov	r3, r0
 8006954:	2b00      	cmp	r3, #0
 8006956:	d047      	beq.n	80069e8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d144      	bne.n	80069e8 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	689b      	ldr	r3, [r3, #8]
 8006964:	f003 030d 	and.w	r3, r3, #13
 8006968:	2b01      	cmp	r3, #1
 800696a:	d10c      	bne.n	8006986 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4618      	mov	r0, r3
 8006972:	f7fe fea3 	bl	80056bc <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	2203      	movs	r2, #3
 800697c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800697e:	f7fe fcb1 	bl	80052e4 <HAL_GetTick>
 8006982:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006984:	e029      	b.n	80069da <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800698a:	f043 0210 	orr.w	r2, r3, #16
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006996:	f043 0201 	orr.w	r2, r3, #1
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 800699e:	2301      	movs	r3, #1
 80069a0:	e023      	b.n	80069ea <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80069a2:	f7fe fc9f 	bl	80052e4 <HAL_GetTick>
 80069a6:	4602      	mov	r2, r0
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	1ad3      	subs	r3, r2, r3
 80069ac:	2b02      	cmp	r3, #2
 80069ae:	d914      	bls.n	80069da <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	689b      	ldr	r3, [r3, #8]
 80069b6:	f003 0301 	and.w	r3, r3, #1
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d00d      	beq.n	80069da <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069c2:	f043 0210 	orr.w	r2, r3, #16
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069ce:	f043 0201 	orr.w	r2, r3, #1
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80069d6:	2301      	movs	r3, #1
 80069d8:	e007      	b.n	80069ea <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	689b      	ldr	r3, [r3, #8]
 80069e0:	f003 0301 	and.w	r3, r3, #1
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d1dc      	bne.n	80069a2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80069e8:	2300      	movs	r3, #0
}
 80069ea:	4618      	mov	r0, r3
 80069ec:	3710      	adds	r7, #16
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}

080069f2 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80069f2:	b580      	push	{r7, lr}
 80069f4:	b084      	sub	sp, #16
 80069f6:	af00      	add	r7, sp, #0
 80069f8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069fe:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a04:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d14b      	bne.n	8006aa4 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a10:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f003 0308 	and.w	r3, r3, #8
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d021      	beq.n	8006a6a <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	f7fe fd26 	bl	800547c <LL_ADC_REG_IsTriggerSourceSWStart>
 8006a30:	4603      	mov	r3, r0
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d032      	beq.n	8006a9c <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	68db      	ldr	r3, [r3, #12]
 8006a3c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d12b      	bne.n	8006a9c <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a48:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	659a      	str	r2, [r3, #88]	; 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d11f      	bne.n	8006a9c <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a60:	f043 0201 	orr.w	r2, r3, #1
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	659a      	str	r2, [r3, #88]	; 0x58
 8006a68:	e018      	b.n	8006a9c <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	68db      	ldr	r3, [r3, #12]
 8006a70:	f003 0302 	and.w	r3, r3, #2
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d111      	bne.n	8006a9c <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a7c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	659a      	str	r2, [r3, #88]	; 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d105      	bne.n	8006a9c <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a94:	f043 0201 	orr.w	r2, r3, #1
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006a9c:	68f8      	ldr	r0, [r7, #12]
 8006a9e:	f7ff faa1 	bl	8005fe4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006aa2:	e00e      	b.n	8006ac2 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006aa8:	f003 0310 	and.w	r3, r3, #16
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d003      	beq.n	8006ab8 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8006ab0:	68f8      	ldr	r0, [r7, #12]
 8006ab2:	f7ff fab5 	bl	8006020 <HAL_ADC_ErrorCallback>
}
 8006ab6:	e004      	b.n	8006ac2 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006abc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	4798      	blx	r3
}
 8006ac2:	bf00      	nop
 8006ac4:	3710      	adds	r7, #16
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd80      	pop	{r7, pc}

08006aca <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8006aca:	b580      	push	{r7, lr}
 8006acc:	b084      	sub	sp, #16
 8006ace:	af00      	add	r7, sp, #0
 8006ad0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ad6:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006ad8:	68f8      	ldr	r0, [r7, #12]
 8006ada:	f7ff fa8d 	bl	8005ff8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006ade:	bf00      	nop
 8006ae0:	3710      	adds	r7, #16
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bd80      	pop	{r7, pc}

08006ae6 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8006ae6:	b580      	push	{r7, lr}
 8006ae8:	b084      	sub	sp, #16
 8006aea:	af00      	add	r7, sp, #0
 8006aec:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006af2:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006af8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b04:	f043 0204 	orr.w	r2, r3, #4
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006b0c:	68f8      	ldr	r0, [r7, #12]
 8006b0e:	f7ff fa87 	bl	8006020 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006b12:	bf00      	nop
 8006b14:	3710      	adds	r7, #16
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}

08006b1a <LL_ADC_IsEnabled>:
{
 8006b1a:	b480      	push	{r7}
 8006b1c:	b083      	sub	sp, #12
 8006b1e:	af00      	add	r7, sp, #0
 8006b20:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	689b      	ldr	r3, [r3, #8]
 8006b26:	f003 0301 	and.w	r3, r3, #1
 8006b2a:	2b01      	cmp	r3, #1
 8006b2c:	d101      	bne.n	8006b32 <LL_ADC_IsEnabled+0x18>
 8006b2e:	2301      	movs	r3, #1
 8006b30:	e000      	b.n	8006b34 <LL_ADC_IsEnabled+0x1a>
 8006b32:	2300      	movs	r3, #0
}
 8006b34:	4618      	mov	r0, r3
 8006b36:	370c      	adds	r7, #12
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3e:	4770      	bx	lr

08006b40 <LL_ADC_StartCalibration>:
{
 8006b40:	b480      	push	{r7}
 8006b42:	b083      	sub	sp, #12
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
 8006b48:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	689b      	ldr	r3, [r3, #8]
 8006b4e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8006b52:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006b56:	683a      	ldr	r2, [r7, #0]
 8006b58:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8006b5c:	4313      	orrs	r3, r2
 8006b5e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	609a      	str	r2, [r3, #8]
}
 8006b66:	bf00      	nop
 8006b68:	370c      	adds	r7, #12
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b70:	4770      	bx	lr

08006b72 <LL_ADC_IsCalibrationOnGoing>:
{
 8006b72:	b480      	push	{r7}
 8006b74:	b083      	sub	sp, #12
 8006b76:	af00      	add	r7, sp, #0
 8006b78:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	689b      	ldr	r3, [r3, #8]
 8006b7e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006b82:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b86:	d101      	bne.n	8006b8c <LL_ADC_IsCalibrationOnGoing+0x1a>
 8006b88:	2301      	movs	r3, #1
 8006b8a:	e000      	b.n	8006b8e <LL_ADC_IsCalibrationOnGoing+0x1c>
 8006b8c:	2300      	movs	r3, #0
}
 8006b8e:	4618      	mov	r0, r3
 8006b90:	370c      	adds	r7, #12
 8006b92:	46bd      	mov	sp, r7
 8006b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b98:	4770      	bx	lr

08006b9a <LL_ADC_REG_IsConversionOngoing>:
{
 8006b9a:	b480      	push	{r7}
 8006b9c:	b083      	sub	sp, #12
 8006b9e:	af00      	add	r7, sp, #0
 8006ba0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	689b      	ldr	r3, [r3, #8]
 8006ba6:	f003 0304 	and.w	r3, r3, #4
 8006baa:	2b04      	cmp	r3, #4
 8006bac:	d101      	bne.n	8006bb2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8006bae:	2301      	movs	r3, #1
 8006bb0:	e000      	b.n	8006bb4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006bb2:	2300      	movs	r3, #0
}
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	370c      	adds	r7, #12
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbe:	4770      	bx	lr

08006bc0 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b084      	sub	sp, #16
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
 8006bc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8006bca:	2300      	movs	r3, #0
 8006bcc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8006bd4:	2b01      	cmp	r3, #1
 8006bd6:	d101      	bne.n	8006bdc <HAL_ADCEx_Calibration_Start+0x1c>
 8006bd8:	2302      	movs	r3, #2
 8006bda:	e04d      	b.n	8006c78 <HAL_ADCEx_Calibration_Start+0xb8>
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2201      	movs	r2, #1
 8006be0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f7ff fea5 	bl	8006934 <ADC_Disable>
 8006bea:	4603      	mov	r3, r0
 8006bec:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8006bee:	7bfb      	ldrb	r3, [r7, #15]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d136      	bne.n	8006c62 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bf8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006bfc:	f023 0302 	bic.w	r3, r3, #2
 8006c00:	f043 0202 	orr.w	r2, r3, #2
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	659a      	str	r2, [r3, #88]	; 0x58
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	6839      	ldr	r1, [r7, #0]
 8006c0e:	4618      	mov	r0, r3
 8006c10:	f7ff ff96 	bl	8006b40 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8006c14:	e014      	b.n	8006c40 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	3301      	adds	r3, #1
 8006c1a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 8006c22:	d30d      	bcc.n	8006c40 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c28:	f023 0312 	bic.w	r3, r3, #18
 8006c2c:	f043 0210 	orr.w	r2, r3, #16
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	659a      	str	r2, [r3, #88]	; 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2200      	movs	r2, #0
 8006c38:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        return HAL_ERROR;
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	e01b      	b.n	8006c78 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4618      	mov	r0, r3
 8006c46:	f7ff ff94 	bl	8006b72 <LL_ADC_IsCalibrationOnGoing>
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d1e2      	bne.n	8006c16 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c54:	f023 0303 	bic.w	r3, r3, #3
 8006c58:	f043 0201 	orr.w	r2, r3, #1
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	659a      	str	r2, [r3, #88]	; 0x58
 8006c60:	e005      	b.n	8006c6e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c66:	f043 0210 	orr.w	r2, r3, #16
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2200      	movs	r2, #0
 8006c72:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8006c76:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c78:	4618      	mov	r0, r3
 8006c7a:	3710      	adds	r7, #16
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	bd80      	pop	{r7, pc}

08006c80 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006c80:	b480      	push	{r7}
 8006c82:	b083      	sub	sp, #12
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8006c88:	bf00      	nop
 8006c8a:	370c      	adds	r7, #12
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c92:	4770      	bx	lr

08006c94 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8006c94:	b480      	push	{r7}
 8006c96:	b083      	sub	sp, #12
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8006c9c:	bf00      	nop
 8006c9e:	370c      	adds	r7, #12
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca6:	4770      	bx	lr

08006ca8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8006ca8:	b480      	push	{r7}
 8006caa:	b083      	sub	sp, #12
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8006cb0:	bf00      	nop
 8006cb2:	370c      	adds	r7, #12
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cba:	4770      	bx	lr

08006cbc <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b083      	sub	sp, #12
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8006cc4:	bf00      	nop
 8006cc6:	370c      	adds	r7, #12
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cce:	4770      	bx	lr

08006cd0 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	b083      	sub	sp, #12
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8006cd8:	bf00      	nop
 8006cda:	370c      	adds	r7, #12
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce2:	4770      	bx	lr

08006ce4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8006ce4:	b590      	push	{r4, r7, lr}
 8006ce6:	b0a1      	sub	sp, #132	; 0x84
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
 8006cec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006cee:	2300      	movs	r3, #0
 8006cf0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8006cfa:	2b01      	cmp	r3, #1
 8006cfc:	d101      	bne.n	8006d02 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8006cfe:	2302      	movs	r3, #2
 8006d00:	e089      	b.n	8006e16 <HAL_ADCEx_MultiModeConfigChannel+0x132>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2201      	movs	r2, #1
 8006d06:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8006d0e:	2300      	movs	r3, #0
 8006d10:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4a42      	ldr	r2, [pc, #264]	; (8006e20 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d102      	bne.n	8006d22 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8006d1c:	4b41      	ldr	r3, [pc, #260]	; (8006e24 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8006d1e:	60fb      	str	r3, [r7, #12]
 8006d20:	e001      	b.n	8006d26 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8006d22:	2300      	movs	r3, #0
 8006d24:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d10b      	bne.n	8006d44 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d30:	f043 0220 	orr.w	r2, r3, #32
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 8006d40:	2301      	movs	r3, #1
 8006d42:	e068      	b.n	8006e16 <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	4618      	mov	r0, r3
 8006d48:	f7ff ff27 	bl	8006b9a <LL_ADC_REG_IsConversionOngoing>
 8006d4c:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4618      	mov	r0, r3
 8006d54:	f7ff ff21 	bl	8006b9a <LL_ADC_REG_IsConversionOngoing>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d14a      	bne.n	8006df4 <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8006d5e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d147      	bne.n	8006df4 <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006d64:	4b30      	ldr	r3, [pc, #192]	; (8006e28 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8006d66:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d027      	beq.n	8006dc0 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8006d70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d72:	689b      	ldr	r3, [r3, #8]
 8006d74:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	6859      	ldr	r1, [r3, #4]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006d82:	035b      	lsls	r3, r3, #13
 8006d84:	430b      	orrs	r3, r1
 8006d86:	431a      	orrs	r2, r3
 8006d88:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d8a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006d8c:	4824      	ldr	r0, [pc, #144]	; (8006e20 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8006d8e:	f7ff fec4 	bl	8006b1a <LL_ADC_IsEnabled>
 8006d92:	4604      	mov	r4, r0
 8006d94:	4823      	ldr	r0, [pc, #140]	; (8006e24 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8006d96:	f7ff fec0 	bl	8006b1a <LL_ADC_IsEnabled>
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	4323      	orrs	r3, r4
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d132      	bne.n	8006e08 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8006da2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006da4:	689b      	ldr	r3, [r3, #8]
 8006da6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8006daa:	f023 030f 	bic.w	r3, r3, #15
 8006dae:	683a      	ldr	r2, [r7, #0]
 8006db0:	6811      	ldr	r1, [r2, #0]
 8006db2:	683a      	ldr	r2, [r7, #0]
 8006db4:	6892      	ldr	r2, [r2, #8]
 8006db6:	430a      	orrs	r2, r1
 8006db8:	431a      	orrs	r2, r3
 8006dba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006dbc:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006dbe:	e023      	b.n	8006e08 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8006dc0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006dc2:	689b      	ldr	r3, [r3, #8]
 8006dc4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006dc8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006dca:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006dcc:	4814      	ldr	r0, [pc, #80]	; (8006e20 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8006dce:	f7ff fea4 	bl	8006b1a <LL_ADC_IsEnabled>
 8006dd2:	4604      	mov	r4, r0
 8006dd4:	4813      	ldr	r0, [pc, #76]	; (8006e24 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8006dd6:	f7ff fea0 	bl	8006b1a <LL_ADC_IsEnabled>
 8006dda:	4603      	mov	r3, r0
 8006ddc:	4323      	orrs	r3, r4
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d112      	bne.n	8006e08 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8006de2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006de4:	689b      	ldr	r3, [r3, #8]
 8006de6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8006dea:	f023 030f 	bic.w	r3, r3, #15
 8006dee:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8006df0:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006df2:	e009      	b.n	8006e08 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006df8:	f043 0220 	orr.w	r2, r3, #32
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8006e00:	2301      	movs	r3, #1
 8006e02:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8006e06:	e000      	b.n	8006e0a <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006e08:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8006e12:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	3784      	adds	r7, #132	; 0x84
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd90      	pop	{r4, r7, pc}
 8006e1e:	bf00      	nop
 8006e20:	50040000 	.word	0x50040000
 8006e24:	50040100 	.word	0x50040100
 8006e28:	50040300 	.word	0x50040300

08006e2c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b084      	sub	sp, #16
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d101      	bne.n	8006e3e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	e0ed      	b.n	800701a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006e44:	b2db      	uxtb	r3, r3
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d102      	bne.n	8006e50 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	f7fd ff28 	bl	8004ca0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	681a      	ldr	r2, [r3, #0]
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f042 0201 	orr.w	r2, r2, #1
 8006e5e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006e60:	f7fe fa40 	bl	80052e4 <HAL_GetTick>
 8006e64:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8006e66:	e012      	b.n	8006e8e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006e68:	f7fe fa3c 	bl	80052e4 <HAL_GetTick>
 8006e6c:	4602      	mov	r2, r0
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	1ad3      	subs	r3, r2, r3
 8006e72:	2b0a      	cmp	r3, #10
 8006e74:	d90b      	bls.n	8006e8e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e7a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2205      	movs	r2, #5
 8006e86:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	e0c5      	b.n	800701a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	685b      	ldr	r3, [r3, #4]
 8006e94:	f003 0301 	and.w	r3, r3, #1
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d0e5      	beq.n	8006e68 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	681a      	ldr	r2, [r3, #0]
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f022 0202 	bic.w	r2, r2, #2
 8006eaa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006eac:	f7fe fa1a 	bl	80052e4 <HAL_GetTick>
 8006eb0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8006eb2:	e012      	b.n	8006eda <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006eb4:	f7fe fa16 	bl	80052e4 <HAL_GetTick>
 8006eb8:	4602      	mov	r2, r0
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	1ad3      	subs	r3, r2, r3
 8006ebe:	2b0a      	cmp	r3, #10
 8006ec0:	d90b      	bls.n	8006eda <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ec6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2205      	movs	r2, #5
 8006ed2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	e09f      	b.n	800701a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	685b      	ldr	r3, [r3, #4]
 8006ee0:	f003 0302 	and.w	r3, r3, #2
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d1e5      	bne.n	8006eb4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	7e1b      	ldrb	r3, [r3, #24]
 8006eec:	2b01      	cmp	r3, #1
 8006eee:	d108      	bne.n	8006f02 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	681a      	ldr	r2, [r3, #0]
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006efe:	601a      	str	r2, [r3, #0]
 8006f00:	e007      	b.n	8006f12 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	681a      	ldr	r2, [r3, #0]
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f10:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	7e5b      	ldrb	r3, [r3, #25]
 8006f16:	2b01      	cmp	r3, #1
 8006f18:	d108      	bne.n	8006f2c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	681a      	ldr	r2, [r3, #0]
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f28:	601a      	str	r2, [r3, #0]
 8006f2a:	e007      	b.n	8006f3c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	681a      	ldr	r2, [r3, #0]
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f3a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	7e9b      	ldrb	r3, [r3, #26]
 8006f40:	2b01      	cmp	r3, #1
 8006f42:	d108      	bne.n	8006f56 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	681a      	ldr	r2, [r3, #0]
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f042 0220 	orr.w	r2, r2, #32
 8006f52:	601a      	str	r2, [r3, #0]
 8006f54:	e007      	b.n	8006f66 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	681a      	ldr	r2, [r3, #0]
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f022 0220 	bic.w	r2, r2, #32
 8006f64:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	7edb      	ldrb	r3, [r3, #27]
 8006f6a:	2b01      	cmp	r3, #1
 8006f6c:	d108      	bne.n	8006f80 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	681a      	ldr	r2, [r3, #0]
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f022 0210 	bic.w	r2, r2, #16
 8006f7c:	601a      	str	r2, [r3, #0]
 8006f7e:	e007      	b.n	8006f90 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	681a      	ldr	r2, [r3, #0]
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f042 0210 	orr.w	r2, r2, #16
 8006f8e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	7f1b      	ldrb	r3, [r3, #28]
 8006f94:	2b01      	cmp	r3, #1
 8006f96:	d108      	bne.n	8006faa <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	681a      	ldr	r2, [r3, #0]
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f042 0208 	orr.w	r2, r2, #8
 8006fa6:	601a      	str	r2, [r3, #0]
 8006fa8:	e007      	b.n	8006fba <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	681a      	ldr	r2, [r3, #0]
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f022 0208 	bic.w	r2, r2, #8
 8006fb8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	7f5b      	ldrb	r3, [r3, #29]
 8006fbe:	2b01      	cmp	r3, #1
 8006fc0:	d108      	bne.n	8006fd4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	681a      	ldr	r2, [r3, #0]
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f042 0204 	orr.w	r2, r2, #4
 8006fd0:	601a      	str	r2, [r3, #0]
 8006fd2:	e007      	b.n	8006fe4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	681a      	ldr	r2, [r3, #0]
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f022 0204 	bic.w	r2, r2, #4
 8006fe2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	689a      	ldr	r2, [r3, #8]
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	68db      	ldr	r3, [r3, #12]
 8006fec:	431a      	orrs	r2, r3
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	691b      	ldr	r3, [r3, #16]
 8006ff2:	431a      	orrs	r2, r3
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	695b      	ldr	r3, [r3, #20]
 8006ff8:	ea42 0103 	orr.w	r1, r2, r3
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	685b      	ldr	r3, [r3, #4]
 8007000:	1e5a      	subs	r2, r3, #1
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	430a      	orrs	r2, r1
 8007008:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2200      	movs	r2, #0
 800700e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2201      	movs	r2, #1
 8007014:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8007018:	2300      	movs	r3, #0
}
 800701a:	4618      	mov	r0, r3
 800701c:	3710      	adds	r7, #16
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}

08007022 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8007022:	b480      	push	{r7}
 8007024:	b087      	sub	sp, #28
 8007026:	af00      	add	r7, sp, #0
 8007028:	6078      	str	r0, [r7, #4]
 800702a:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007038:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800703a:	7cfb      	ldrb	r3, [r7, #19]
 800703c:	2b01      	cmp	r3, #1
 800703e:	d003      	beq.n	8007048 <HAL_CAN_ConfigFilter+0x26>
 8007040:	7cfb      	ldrb	r3, [r7, #19]
 8007042:	2b02      	cmp	r3, #2
 8007044:	f040 80aa 	bne.w	800719c <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8007048:	697b      	ldr	r3, [r7, #20]
 800704a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800704e:	f043 0201 	orr.w	r2, r3, #1
 8007052:	697b      	ldr	r3, [r7, #20]
 8007054:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	695b      	ldr	r3, [r3, #20]
 800705c:	f003 031f 	and.w	r3, r3, #31
 8007060:	2201      	movs	r2, #1
 8007062:	fa02 f303 	lsl.w	r3, r2, r3
 8007066:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	43db      	mvns	r3, r3
 8007072:	401a      	ands	r2, r3
 8007074:	697b      	ldr	r3, [r7, #20]
 8007076:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	69db      	ldr	r3, [r3, #28]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d123      	bne.n	80070ca <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	43db      	mvns	r3, r3
 800708c:	401a      	ands	r2, r3
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	68db      	ldr	r3, [r3, #12]
 8007098:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	685b      	ldr	r3, [r3, #4]
 800709e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80070a0:	683a      	ldr	r2, [r7, #0]
 80070a2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80070a4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	3248      	adds	r2, #72	; 0x48
 80070aa:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	689b      	ldr	r3, [r3, #8]
 80070b2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80070be:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80070c0:	6979      	ldr	r1, [r7, #20]
 80070c2:	3348      	adds	r3, #72	; 0x48
 80070c4:	00db      	lsls	r3, r3, #3
 80070c6:	440b      	add	r3, r1
 80070c8:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	69db      	ldr	r3, [r3, #28]
 80070ce:	2b01      	cmp	r3, #1
 80070d0:	d122      	bne.n	8007118 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80070d2:	697b      	ldr	r3, [r7, #20]
 80070d4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	431a      	orrs	r2, r3
 80070dc:	697b      	ldr	r3, [r7, #20]
 80070de:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	685b      	ldr	r3, [r3, #4]
 80070ec:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80070ee:	683a      	ldr	r2, [r7, #0]
 80070f0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80070f2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80070f4:	697b      	ldr	r3, [r7, #20]
 80070f6:	3248      	adds	r2, #72	; 0x48
 80070f8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	689b      	ldr	r3, [r3, #8]
 8007100:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	68db      	ldr	r3, [r3, #12]
 8007106:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800710c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800710e:	6979      	ldr	r1, [r7, #20]
 8007110:	3348      	adds	r3, #72	; 0x48
 8007112:	00db      	lsls	r3, r3, #3
 8007114:	440b      	add	r3, r1
 8007116:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	699b      	ldr	r3, [r3, #24]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d109      	bne.n	8007134 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8007120:	697b      	ldr	r3, [r7, #20]
 8007122:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	43db      	mvns	r3, r3
 800712a:	401a      	ands	r2, r3
 800712c:	697b      	ldr	r3, [r7, #20]
 800712e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8007132:	e007      	b.n	8007144 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8007134:	697b      	ldr	r3, [r7, #20]
 8007136:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	431a      	orrs	r2, r3
 800713e:	697b      	ldr	r3, [r7, #20]
 8007140:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	691b      	ldr	r3, [r3, #16]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d109      	bne.n	8007160 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800714c:	697b      	ldr	r3, [r7, #20]
 800714e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	43db      	mvns	r3, r3
 8007156:	401a      	ands	r2, r3
 8007158:	697b      	ldr	r3, [r7, #20]
 800715a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800715e:	e007      	b.n	8007170 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8007160:	697b      	ldr	r3, [r7, #20]
 8007162:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	431a      	orrs	r2, r3
 800716a:	697b      	ldr	r3, [r7, #20]
 800716c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	6a1b      	ldr	r3, [r3, #32]
 8007174:	2b01      	cmp	r3, #1
 8007176:	d107      	bne.n	8007188 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8007178:	697b      	ldr	r3, [r7, #20]
 800717a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	431a      	orrs	r2, r3
 8007182:	697b      	ldr	r3, [r7, #20]
 8007184:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8007188:	697b      	ldr	r3, [r7, #20]
 800718a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800718e:	f023 0201 	bic.w	r2, r3, #1
 8007192:	697b      	ldr	r3, [r7, #20]
 8007194:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8007198:	2300      	movs	r3, #0
 800719a:	e006      	b.n	80071aa <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071a0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80071a8:	2301      	movs	r3, #1
  }
}
 80071aa:	4618      	mov	r0, r3
 80071ac:	371c      	adds	r7, #28
 80071ae:	46bd      	mov	sp, r7
 80071b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b4:	4770      	bx	lr

080071b6 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80071b6:	b580      	push	{r7, lr}
 80071b8:	b084      	sub	sp, #16
 80071ba:	af00      	add	r7, sp, #0
 80071bc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80071c4:	b2db      	uxtb	r3, r3
 80071c6:	2b01      	cmp	r3, #1
 80071c8:	d12e      	bne.n	8007228 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2202      	movs	r2, #2
 80071ce:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	681a      	ldr	r2, [r3, #0]
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f022 0201 	bic.w	r2, r2, #1
 80071e0:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80071e2:	f7fe f87f 	bl	80052e4 <HAL_GetTick>
 80071e6:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80071e8:	e012      	b.n	8007210 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80071ea:	f7fe f87b 	bl	80052e4 <HAL_GetTick>
 80071ee:	4602      	mov	r2, r0
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	1ad3      	subs	r3, r2, r3
 80071f4:	2b0a      	cmp	r3, #10
 80071f6:	d90b      	bls.n	8007210 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071fc:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2205      	movs	r2, #5
 8007208:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800720c:	2301      	movs	r3, #1
 800720e:	e012      	b.n	8007236 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	685b      	ldr	r3, [r3, #4]
 8007216:	f003 0301 	and.w	r3, r3, #1
 800721a:	2b00      	cmp	r3, #0
 800721c:	d1e5      	bne.n	80071ea <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2200      	movs	r2, #0
 8007222:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8007224:	2300      	movs	r3, #0
 8007226:	e006      	b.n	8007236 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800722c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007234:	2301      	movs	r3, #1
  }
}
 8007236:	4618      	mov	r0, r3
 8007238:	3710      	adds	r7, #16
 800723a:	46bd      	mov	sp, r7
 800723c:	bd80      	pop	{r7, pc}

0800723e <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800723e:	b480      	push	{r7}
 8007240:	b089      	sub	sp, #36	; 0x24
 8007242:	af00      	add	r7, sp, #0
 8007244:	60f8      	str	r0, [r7, #12]
 8007246:	60b9      	str	r1, [r7, #8]
 8007248:	607a      	str	r2, [r7, #4]
 800724a:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007252:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	689b      	ldr	r3, [r3, #8]
 800725a:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800725c:	7ffb      	ldrb	r3, [r7, #31]
 800725e:	2b01      	cmp	r3, #1
 8007260:	d003      	beq.n	800726a <HAL_CAN_AddTxMessage+0x2c>
 8007262:	7ffb      	ldrb	r3, [r7, #31]
 8007264:	2b02      	cmp	r3, #2
 8007266:	f040 80ad 	bne.w	80073c4 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800726a:	69bb      	ldr	r3, [r7, #24]
 800726c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007270:	2b00      	cmp	r3, #0
 8007272:	d10a      	bne.n	800728a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8007274:	69bb      	ldr	r3, [r7, #24]
 8007276:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800727a:	2b00      	cmp	r3, #0
 800727c:	d105      	bne.n	800728a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800727e:	69bb      	ldr	r3, [r7, #24]
 8007280:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8007284:	2b00      	cmp	r3, #0
 8007286:	f000 8095 	beq.w	80073b4 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800728a:	69bb      	ldr	r3, [r7, #24]
 800728c:	0e1b      	lsrs	r3, r3, #24
 800728e:	f003 0303 	and.w	r3, r3, #3
 8007292:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8007294:	2201      	movs	r2, #1
 8007296:	697b      	ldr	r3, [r7, #20]
 8007298:	409a      	lsls	r2, r3
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	689b      	ldr	r3, [r3, #8]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d10d      	bne.n	80072c2 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80072b0:	68f9      	ldr	r1, [r7, #12]
 80072b2:	6809      	ldr	r1, [r1, #0]
 80072b4:	431a      	orrs	r2, r3
 80072b6:	697b      	ldr	r3, [r7, #20]
 80072b8:	3318      	adds	r3, #24
 80072ba:	011b      	lsls	r3, r3, #4
 80072bc:	440b      	add	r3, r1
 80072be:	601a      	str	r2, [r3, #0]
 80072c0:	e00f      	b.n	80072e2 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80072c2:	68bb      	ldr	r3, [r7, #8]
 80072c4:	685b      	ldr	r3, [r3, #4]
 80072c6:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80072cc:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80072ce:	68bb      	ldr	r3, [r7, #8]
 80072d0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80072d2:	68f9      	ldr	r1, [r7, #12]
 80072d4:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80072d6:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80072d8:	697b      	ldr	r3, [r7, #20]
 80072da:	3318      	adds	r3, #24
 80072dc:	011b      	lsls	r3, r3, #4
 80072de:	440b      	add	r3, r1
 80072e0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	6819      	ldr	r1, [r3, #0]
 80072e6:	68bb      	ldr	r3, [r7, #8]
 80072e8:	691a      	ldr	r2, [r3, #16]
 80072ea:	697b      	ldr	r3, [r7, #20]
 80072ec:	3318      	adds	r3, #24
 80072ee:	011b      	lsls	r3, r3, #4
 80072f0:	440b      	add	r3, r1
 80072f2:	3304      	adds	r3, #4
 80072f4:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	7d1b      	ldrb	r3, [r3, #20]
 80072fa:	2b01      	cmp	r3, #1
 80072fc:	d111      	bne.n	8007322 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681a      	ldr	r2, [r3, #0]
 8007302:	697b      	ldr	r3, [r7, #20]
 8007304:	3318      	adds	r3, #24
 8007306:	011b      	lsls	r3, r3, #4
 8007308:	4413      	add	r3, r2
 800730a:	3304      	adds	r3, #4
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	68fa      	ldr	r2, [r7, #12]
 8007310:	6811      	ldr	r1, [r2, #0]
 8007312:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007316:	697b      	ldr	r3, [r7, #20]
 8007318:	3318      	adds	r3, #24
 800731a:	011b      	lsls	r3, r3, #4
 800731c:	440b      	add	r3, r1
 800731e:	3304      	adds	r3, #4
 8007320:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	3307      	adds	r3, #7
 8007326:	781b      	ldrb	r3, [r3, #0]
 8007328:	061a      	lsls	r2, r3, #24
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	3306      	adds	r3, #6
 800732e:	781b      	ldrb	r3, [r3, #0]
 8007330:	041b      	lsls	r3, r3, #16
 8007332:	431a      	orrs	r2, r3
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	3305      	adds	r3, #5
 8007338:	781b      	ldrb	r3, [r3, #0]
 800733a:	021b      	lsls	r3, r3, #8
 800733c:	4313      	orrs	r3, r2
 800733e:	687a      	ldr	r2, [r7, #4]
 8007340:	3204      	adds	r2, #4
 8007342:	7812      	ldrb	r2, [r2, #0]
 8007344:	4610      	mov	r0, r2
 8007346:	68fa      	ldr	r2, [r7, #12]
 8007348:	6811      	ldr	r1, [r2, #0]
 800734a:	ea43 0200 	orr.w	r2, r3, r0
 800734e:	697b      	ldr	r3, [r7, #20]
 8007350:	011b      	lsls	r3, r3, #4
 8007352:	440b      	add	r3, r1
 8007354:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8007358:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	3303      	adds	r3, #3
 800735e:	781b      	ldrb	r3, [r3, #0]
 8007360:	061a      	lsls	r2, r3, #24
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	3302      	adds	r3, #2
 8007366:	781b      	ldrb	r3, [r3, #0]
 8007368:	041b      	lsls	r3, r3, #16
 800736a:	431a      	orrs	r2, r3
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	3301      	adds	r3, #1
 8007370:	781b      	ldrb	r3, [r3, #0]
 8007372:	021b      	lsls	r3, r3, #8
 8007374:	4313      	orrs	r3, r2
 8007376:	687a      	ldr	r2, [r7, #4]
 8007378:	7812      	ldrb	r2, [r2, #0]
 800737a:	4610      	mov	r0, r2
 800737c:	68fa      	ldr	r2, [r7, #12]
 800737e:	6811      	ldr	r1, [r2, #0]
 8007380:	ea43 0200 	orr.w	r2, r3, r0
 8007384:	697b      	ldr	r3, [r7, #20]
 8007386:	011b      	lsls	r3, r3, #4
 8007388:	440b      	add	r3, r1
 800738a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800738e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	681a      	ldr	r2, [r3, #0]
 8007394:	697b      	ldr	r3, [r7, #20]
 8007396:	3318      	adds	r3, #24
 8007398:	011b      	lsls	r3, r3, #4
 800739a:	4413      	add	r3, r2
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	68fa      	ldr	r2, [r7, #12]
 80073a0:	6811      	ldr	r1, [r2, #0]
 80073a2:	f043 0201 	orr.w	r2, r3, #1
 80073a6:	697b      	ldr	r3, [r7, #20]
 80073a8:	3318      	adds	r3, #24
 80073aa:	011b      	lsls	r3, r3, #4
 80073ac:	440b      	add	r3, r1
 80073ae:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80073b0:	2300      	movs	r3, #0
 80073b2:	e00e      	b.n	80073d2 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073b8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80073c0:	2301      	movs	r3, #1
 80073c2:	e006      	b.n	80073d2 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073c8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80073d0:	2301      	movs	r3, #1
  }
}
 80073d2:	4618      	mov	r0, r3
 80073d4:	3724      	adds	r7, #36	; 0x24
 80073d6:	46bd      	mov	sp, r7
 80073d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073dc:	4770      	bx	lr

080073de <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80073de:	b480      	push	{r7}
 80073e0:	b087      	sub	sp, #28
 80073e2:	af00      	add	r7, sp, #0
 80073e4:	60f8      	str	r0, [r7, #12]
 80073e6:	60b9      	str	r1, [r7, #8]
 80073e8:	607a      	str	r2, [r7, #4]
 80073ea:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80073f2:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80073f4:	7dfb      	ldrb	r3, [r7, #23]
 80073f6:	2b01      	cmp	r3, #1
 80073f8:	d003      	beq.n	8007402 <HAL_CAN_GetRxMessage+0x24>
 80073fa:	7dfb      	ldrb	r3, [r7, #23]
 80073fc:	2b02      	cmp	r3, #2
 80073fe:	f040 80f3 	bne.w	80075e8 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d10e      	bne.n	8007426 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	68db      	ldr	r3, [r3, #12]
 800740e:	f003 0303 	and.w	r3, r3, #3
 8007412:	2b00      	cmp	r3, #0
 8007414:	d116      	bne.n	8007444 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800741a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8007422:	2301      	movs	r3, #1
 8007424:	e0e7      	b.n	80075f6 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	691b      	ldr	r3, [r3, #16]
 800742c:	f003 0303 	and.w	r3, r3, #3
 8007430:	2b00      	cmp	r3, #0
 8007432:	d107      	bne.n	8007444 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007438:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8007440:	2301      	movs	r3, #1
 8007442:	e0d8      	b.n	80075f6 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681a      	ldr	r2, [r3, #0]
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	331b      	adds	r3, #27
 800744c:	011b      	lsls	r3, r3, #4
 800744e:	4413      	add	r3, r2
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f003 0204 	and.w	r2, r3, #4
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	689b      	ldr	r3, [r3, #8]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d10c      	bne.n	800747c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	681a      	ldr	r2, [r3, #0]
 8007466:	68bb      	ldr	r3, [r7, #8]
 8007468:	331b      	adds	r3, #27
 800746a:	011b      	lsls	r3, r3, #4
 800746c:	4413      	add	r3, r2
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	0d5b      	lsrs	r3, r3, #21
 8007472:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	601a      	str	r2, [r3, #0]
 800747a:	e00b      	b.n	8007494 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	681a      	ldr	r2, [r3, #0]
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	331b      	adds	r3, #27
 8007484:	011b      	lsls	r3, r3, #4
 8007486:	4413      	add	r3, r2
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	08db      	lsrs	r3, r3, #3
 800748c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	681a      	ldr	r2, [r3, #0]
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	331b      	adds	r3, #27
 800749c:	011b      	lsls	r3, r3, #4
 800749e:	4413      	add	r3, r2
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f003 0202 	and.w	r2, r3, #2
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681a      	ldr	r2, [r3, #0]
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	331b      	adds	r3, #27
 80074b2:	011b      	lsls	r3, r3, #4
 80074b4:	4413      	add	r3, r2
 80074b6:	3304      	adds	r3, #4
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f003 020f 	and.w	r2, r3, #15
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	681a      	ldr	r2, [r3, #0]
 80074c6:	68bb      	ldr	r3, [r7, #8]
 80074c8:	331b      	adds	r3, #27
 80074ca:	011b      	lsls	r3, r3, #4
 80074cc:	4413      	add	r3, r2
 80074ce:	3304      	adds	r3, #4
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	0a1b      	lsrs	r3, r3, #8
 80074d4:	b2da      	uxtb	r2, r3
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681a      	ldr	r2, [r3, #0]
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	331b      	adds	r3, #27
 80074e2:	011b      	lsls	r3, r3, #4
 80074e4:	4413      	add	r3, r2
 80074e6:	3304      	adds	r3, #4
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	0c1b      	lsrs	r3, r3, #16
 80074ec:	b29a      	uxth	r2, r3
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681a      	ldr	r2, [r3, #0]
 80074f6:	68bb      	ldr	r3, [r7, #8]
 80074f8:	011b      	lsls	r3, r3, #4
 80074fa:	4413      	add	r3, r2
 80074fc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	b2da      	uxtb	r2, r3
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681a      	ldr	r2, [r3, #0]
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	011b      	lsls	r3, r3, #4
 8007510:	4413      	add	r3, r2
 8007512:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	0a1a      	lsrs	r2, r3, #8
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	3301      	adds	r3, #1
 800751e:	b2d2      	uxtb	r2, r2
 8007520:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681a      	ldr	r2, [r3, #0]
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	011b      	lsls	r3, r3, #4
 800752a:	4413      	add	r3, r2
 800752c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	0c1a      	lsrs	r2, r3, #16
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	3302      	adds	r3, #2
 8007538:	b2d2      	uxtb	r2, r2
 800753a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	681a      	ldr	r2, [r3, #0]
 8007540:	68bb      	ldr	r3, [r7, #8]
 8007542:	011b      	lsls	r3, r3, #4
 8007544:	4413      	add	r3, r2
 8007546:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	0e1a      	lsrs	r2, r3, #24
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	3303      	adds	r3, #3
 8007552:	b2d2      	uxtb	r2, r2
 8007554:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	681a      	ldr	r2, [r3, #0]
 800755a:	68bb      	ldr	r3, [r7, #8]
 800755c:	011b      	lsls	r3, r3, #4
 800755e:	4413      	add	r3, r2
 8007560:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8007564:	681a      	ldr	r2, [r3, #0]
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	3304      	adds	r3, #4
 800756a:	b2d2      	uxtb	r2, r2
 800756c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	681a      	ldr	r2, [r3, #0]
 8007572:	68bb      	ldr	r3, [r7, #8]
 8007574:	011b      	lsls	r3, r3, #4
 8007576:	4413      	add	r3, r2
 8007578:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	0a1a      	lsrs	r2, r3, #8
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	3305      	adds	r3, #5
 8007584:	b2d2      	uxtb	r2, r2
 8007586:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	681a      	ldr	r2, [r3, #0]
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	011b      	lsls	r3, r3, #4
 8007590:	4413      	add	r3, r2
 8007592:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	0c1a      	lsrs	r2, r3, #16
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	3306      	adds	r3, #6
 800759e:	b2d2      	uxtb	r2, r2
 80075a0:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	681a      	ldr	r2, [r3, #0]
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	011b      	lsls	r3, r3, #4
 80075aa:	4413      	add	r3, r2
 80075ac:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	0e1a      	lsrs	r2, r3, #24
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	3307      	adds	r3, #7
 80075b8:	b2d2      	uxtb	r2, r2
 80075ba:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d108      	bne.n	80075d4 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	68da      	ldr	r2, [r3, #12]
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f042 0220 	orr.w	r2, r2, #32
 80075d0:	60da      	str	r2, [r3, #12]
 80075d2:	e007      	b.n	80075e4 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	691a      	ldr	r2, [r3, #16]
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f042 0220 	orr.w	r2, r2, #32
 80075e2:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80075e4:	2300      	movs	r3, #0
 80075e6:	e006      	b.n	80075f6 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ec:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80075f4:	2301      	movs	r3, #1
  }
}
 80075f6:	4618      	mov	r0, r3
 80075f8:	371c      	adds	r7, #28
 80075fa:	46bd      	mov	sp, r7
 80075fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007600:	4770      	bx	lr

08007602 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8007602:	b480      	push	{r7}
 8007604:	b085      	sub	sp, #20
 8007606:	af00      	add	r7, sp, #0
 8007608:	6078      	str	r0, [r7, #4]
 800760a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007612:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8007614:	7bfb      	ldrb	r3, [r7, #15]
 8007616:	2b01      	cmp	r3, #1
 8007618:	d002      	beq.n	8007620 <HAL_CAN_ActivateNotification+0x1e>
 800761a:	7bfb      	ldrb	r3, [r7, #15]
 800761c:	2b02      	cmp	r3, #2
 800761e:	d109      	bne.n	8007634 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	6959      	ldr	r1, [r3, #20]
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	683a      	ldr	r2, [r7, #0]
 800762c:	430a      	orrs	r2, r1
 800762e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8007630:	2300      	movs	r3, #0
 8007632:	e006      	b.n	8007642 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007638:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007640:	2301      	movs	r3, #1
  }
}
 8007642:	4618      	mov	r0, r3
 8007644:	3714      	adds	r7, #20
 8007646:	46bd      	mov	sp, r7
 8007648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764c:	4770      	bx	lr

0800764e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800764e:	b580      	push	{r7, lr}
 8007650:	b08a      	sub	sp, #40	; 0x28
 8007652:	af00      	add	r7, sp, #0
 8007654:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8007656:	2300      	movs	r3, #0
 8007658:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	695b      	ldr	r3, [r3, #20]
 8007660:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	685b      	ldr	r3, [r3, #4]
 8007668:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	689b      	ldr	r3, [r3, #8]
 8007670:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	68db      	ldr	r3, [r3, #12]
 8007678:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	691b      	ldr	r3, [r3, #16]
 8007680:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	699b      	ldr	r3, [r3, #24]
 8007688:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800768a:	6a3b      	ldr	r3, [r7, #32]
 800768c:	f003 0301 	and.w	r3, r3, #1
 8007690:	2b00      	cmp	r3, #0
 8007692:	d07c      	beq.n	800778e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8007694:	69bb      	ldr	r3, [r7, #24]
 8007696:	f003 0301 	and.w	r3, r3, #1
 800769a:	2b00      	cmp	r3, #0
 800769c:	d023      	beq.n	80076e6 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	2201      	movs	r2, #1
 80076a4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80076a6:	69bb      	ldr	r3, [r7, #24]
 80076a8:	f003 0302 	and.w	r3, r3, #2
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d003      	beq.n	80076b8 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	f000 f983 	bl	80079bc <HAL_CAN_TxMailbox0CompleteCallback>
 80076b6:	e016      	b.n	80076e6 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80076b8:	69bb      	ldr	r3, [r7, #24]
 80076ba:	f003 0304 	and.w	r3, r3, #4
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d004      	beq.n	80076cc <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80076c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076c4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80076c8:	627b      	str	r3, [r7, #36]	; 0x24
 80076ca:	e00c      	b.n	80076e6 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80076cc:	69bb      	ldr	r3, [r7, #24]
 80076ce:	f003 0308 	and.w	r3, r3, #8
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d004      	beq.n	80076e0 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80076d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80076dc:	627b      	str	r3, [r7, #36]	; 0x24
 80076de:	e002      	b.n	80076e6 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	f000 f989 	bl	80079f8 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80076e6:	69bb      	ldr	r3, [r7, #24]
 80076e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d024      	beq.n	800773a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80076f8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80076fa:	69bb      	ldr	r3, [r7, #24]
 80076fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007700:	2b00      	cmp	r3, #0
 8007702:	d003      	beq.n	800770c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	f000 f963 	bl	80079d0 <HAL_CAN_TxMailbox1CompleteCallback>
 800770a:	e016      	b.n	800773a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800770c:	69bb      	ldr	r3, [r7, #24]
 800770e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007712:	2b00      	cmp	r3, #0
 8007714:	d004      	beq.n	8007720 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8007716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007718:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800771c:	627b      	str	r3, [r7, #36]	; 0x24
 800771e:	e00c      	b.n	800773a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8007720:	69bb      	ldr	r3, [r7, #24]
 8007722:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007726:	2b00      	cmp	r3, #0
 8007728:	d004      	beq.n	8007734 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800772a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800772c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007730:	627b      	str	r3, [r7, #36]	; 0x24
 8007732:	e002      	b.n	800773a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8007734:	6878      	ldr	r0, [r7, #4]
 8007736:	f000 f969 	bl	8007a0c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800773a:	69bb      	ldr	r3, [r7, #24]
 800773c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007740:	2b00      	cmp	r3, #0
 8007742:	d024      	beq.n	800778e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800774c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800774e:	69bb      	ldr	r3, [r7, #24]
 8007750:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007754:	2b00      	cmp	r3, #0
 8007756:	d003      	beq.n	8007760 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f000 f943 	bl	80079e4 <HAL_CAN_TxMailbox2CompleteCallback>
 800775e:	e016      	b.n	800778e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8007760:	69bb      	ldr	r3, [r7, #24]
 8007762:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007766:	2b00      	cmp	r3, #0
 8007768:	d004      	beq.n	8007774 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800776a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800776c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007770:	627b      	str	r3, [r7, #36]	; 0x24
 8007772:	e00c      	b.n	800778e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8007774:	69bb      	ldr	r3, [r7, #24]
 8007776:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800777a:	2b00      	cmp	r3, #0
 800777c:	d004      	beq.n	8007788 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800777e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007780:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007784:	627b      	str	r3, [r7, #36]	; 0x24
 8007786:	e002      	b.n	800778e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f000 f949 	bl	8007a20 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800778e:	6a3b      	ldr	r3, [r7, #32]
 8007790:	f003 0308 	and.w	r3, r3, #8
 8007794:	2b00      	cmp	r3, #0
 8007796:	d00c      	beq.n	80077b2 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8007798:	697b      	ldr	r3, [r7, #20]
 800779a:	f003 0310 	and.w	r3, r3, #16
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d007      	beq.n	80077b2 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80077a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077a4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80077a8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	2210      	movs	r2, #16
 80077b0:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80077b2:	6a3b      	ldr	r3, [r7, #32]
 80077b4:	f003 0304 	and.w	r3, r3, #4
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d00b      	beq.n	80077d4 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80077bc:	697b      	ldr	r3, [r7, #20]
 80077be:	f003 0308 	and.w	r3, r3, #8
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d006      	beq.n	80077d4 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	2208      	movs	r2, #8
 80077cc:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f000 f930 	bl	8007a34 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80077d4:	6a3b      	ldr	r3, [r7, #32]
 80077d6:	f003 0302 	and.w	r3, r3, #2
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d009      	beq.n	80077f2 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	68db      	ldr	r3, [r3, #12]
 80077e4:	f003 0303 	and.w	r3, r3, #3
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d002      	beq.n	80077f2 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	f7f9 fd29 	bl	8001244 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80077f2:	6a3b      	ldr	r3, [r7, #32]
 80077f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d00c      	beq.n	8007816 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80077fc:	693b      	ldr	r3, [r7, #16]
 80077fe:	f003 0310 	and.w	r3, r3, #16
 8007802:	2b00      	cmp	r3, #0
 8007804:	d007      	beq.n	8007816 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8007806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007808:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800780c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	2210      	movs	r2, #16
 8007814:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8007816:	6a3b      	ldr	r3, [r7, #32]
 8007818:	f003 0320 	and.w	r3, r3, #32
 800781c:	2b00      	cmp	r3, #0
 800781e:	d00b      	beq.n	8007838 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8007820:	693b      	ldr	r3, [r7, #16]
 8007822:	f003 0308 	and.w	r3, r3, #8
 8007826:	2b00      	cmp	r3, #0
 8007828:	d006      	beq.n	8007838 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	2208      	movs	r2, #8
 8007830:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	f000 f912 	bl	8007a5c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8007838:	6a3b      	ldr	r3, [r7, #32]
 800783a:	f003 0310 	and.w	r3, r3, #16
 800783e:	2b00      	cmp	r3, #0
 8007840:	d009      	beq.n	8007856 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	691b      	ldr	r3, [r3, #16]
 8007848:	f003 0303 	and.w	r3, r3, #3
 800784c:	2b00      	cmp	r3, #0
 800784e:	d002      	beq.n	8007856 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	f000 f8f9 	bl	8007a48 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8007856:	6a3b      	ldr	r3, [r7, #32]
 8007858:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800785c:	2b00      	cmp	r3, #0
 800785e:	d00b      	beq.n	8007878 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8007860:	69fb      	ldr	r3, [r7, #28]
 8007862:	f003 0310 	and.w	r3, r3, #16
 8007866:	2b00      	cmp	r3, #0
 8007868:	d006      	beq.n	8007878 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	2210      	movs	r2, #16
 8007870:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f000 f8fc 	bl	8007a70 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8007878:	6a3b      	ldr	r3, [r7, #32]
 800787a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800787e:	2b00      	cmp	r3, #0
 8007880:	d00b      	beq.n	800789a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8007882:	69fb      	ldr	r3, [r7, #28]
 8007884:	f003 0308 	and.w	r3, r3, #8
 8007888:	2b00      	cmp	r3, #0
 800788a:	d006      	beq.n	800789a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	2208      	movs	r2, #8
 8007892:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8007894:	6878      	ldr	r0, [r7, #4]
 8007896:	f000 f8f5 	bl	8007a84 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800789a:	6a3b      	ldr	r3, [r7, #32]
 800789c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d07b      	beq.n	800799c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80078a4:	69fb      	ldr	r3, [r7, #28]
 80078a6:	f003 0304 	and.w	r3, r3, #4
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d072      	beq.n	8007994 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80078ae:	6a3b      	ldr	r3, [r7, #32]
 80078b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d008      	beq.n	80078ca <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d003      	beq.n	80078ca <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80078c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078c4:	f043 0301 	orr.w	r3, r3, #1
 80078c8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80078ca:	6a3b      	ldr	r3, [r7, #32]
 80078cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d008      	beq.n	80078e6 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d003      	beq.n	80078e6 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80078de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078e0:	f043 0302 	orr.w	r3, r3, #2
 80078e4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80078e6:	6a3b      	ldr	r3, [r7, #32]
 80078e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d008      	beq.n	8007902 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d003      	beq.n	8007902 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80078fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078fc:	f043 0304 	orr.w	r3, r3, #4
 8007900:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8007902:	6a3b      	ldr	r3, [r7, #32]
 8007904:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007908:	2b00      	cmp	r3, #0
 800790a:	d043      	beq.n	8007994 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8007912:	2b00      	cmp	r3, #0
 8007914:	d03e      	beq.n	8007994 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800791c:	2b60      	cmp	r3, #96	; 0x60
 800791e:	d02b      	beq.n	8007978 <HAL_CAN_IRQHandler+0x32a>
 8007920:	2b60      	cmp	r3, #96	; 0x60
 8007922:	d82e      	bhi.n	8007982 <HAL_CAN_IRQHandler+0x334>
 8007924:	2b50      	cmp	r3, #80	; 0x50
 8007926:	d022      	beq.n	800796e <HAL_CAN_IRQHandler+0x320>
 8007928:	2b50      	cmp	r3, #80	; 0x50
 800792a:	d82a      	bhi.n	8007982 <HAL_CAN_IRQHandler+0x334>
 800792c:	2b40      	cmp	r3, #64	; 0x40
 800792e:	d019      	beq.n	8007964 <HAL_CAN_IRQHandler+0x316>
 8007930:	2b40      	cmp	r3, #64	; 0x40
 8007932:	d826      	bhi.n	8007982 <HAL_CAN_IRQHandler+0x334>
 8007934:	2b30      	cmp	r3, #48	; 0x30
 8007936:	d010      	beq.n	800795a <HAL_CAN_IRQHandler+0x30c>
 8007938:	2b30      	cmp	r3, #48	; 0x30
 800793a:	d822      	bhi.n	8007982 <HAL_CAN_IRQHandler+0x334>
 800793c:	2b10      	cmp	r3, #16
 800793e:	d002      	beq.n	8007946 <HAL_CAN_IRQHandler+0x2f8>
 8007940:	2b20      	cmp	r3, #32
 8007942:	d005      	beq.n	8007950 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8007944:	e01d      	b.n	8007982 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8007946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007948:	f043 0308 	orr.w	r3, r3, #8
 800794c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800794e:	e019      	b.n	8007984 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8007950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007952:	f043 0310 	orr.w	r3, r3, #16
 8007956:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007958:	e014      	b.n	8007984 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800795a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800795c:	f043 0320 	orr.w	r3, r3, #32
 8007960:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007962:	e00f      	b.n	8007984 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8007964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007966:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800796a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800796c:	e00a      	b.n	8007984 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800796e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007970:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007974:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007976:	e005      	b.n	8007984 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8007978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800797a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800797e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007980:	e000      	b.n	8007984 <HAL_CAN_IRQHandler+0x336>
            break;
 8007982:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	699a      	ldr	r2, [r3, #24]
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8007992:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	2204      	movs	r2, #4
 800799a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800799c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d008      	beq.n	80079b4 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80079a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079a8:	431a      	orrs	r2, r3
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f000 f872 	bl	8007a98 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80079b4:	bf00      	nop
 80079b6:	3728      	adds	r7, #40	; 0x28
 80079b8:	46bd      	mov	sp, r7
 80079ba:	bd80      	pop	{r7, pc}

080079bc <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80079bc:	b480      	push	{r7}
 80079be:	b083      	sub	sp, #12
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80079c4:	bf00      	nop
 80079c6:	370c      	adds	r7, #12
 80079c8:	46bd      	mov	sp, r7
 80079ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ce:	4770      	bx	lr

080079d0 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80079d0:	b480      	push	{r7}
 80079d2:	b083      	sub	sp, #12
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80079d8:	bf00      	nop
 80079da:	370c      	adds	r7, #12
 80079dc:	46bd      	mov	sp, r7
 80079de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e2:	4770      	bx	lr

080079e4 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80079e4:	b480      	push	{r7}
 80079e6:	b083      	sub	sp, #12
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80079ec:	bf00      	nop
 80079ee:	370c      	adds	r7, #12
 80079f0:	46bd      	mov	sp, r7
 80079f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f6:	4770      	bx	lr

080079f8 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80079f8:	b480      	push	{r7}
 80079fa:	b083      	sub	sp, #12
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8007a00:	bf00      	nop
 8007a02:	370c      	adds	r7, #12
 8007a04:	46bd      	mov	sp, r7
 8007a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0a:	4770      	bx	lr

08007a0c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8007a0c:	b480      	push	{r7}
 8007a0e:	b083      	sub	sp, #12
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8007a14:	bf00      	nop
 8007a16:	370c      	adds	r7, #12
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1e:	4770      	bx	lr

08007a20 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8007a20:	b480      	push	{r7}
 8007a22:	b083      	sub	sp, #12
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8007a28:	bf00      	nop
 8007a2a:	370c      	adds	r7, #12
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a32:	4770      	bx	lr

08007a34 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8007a34:	b480      	push	{r7}
 8007a36:	b083      	sub	sp, #12
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8007a3c:	bf00      	nop
 8007a3e:	370c      	adds	r7, #12
 8007a40:	46bd      	mov	sp, r7
 8007a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a46:	4770      	bx	lr

08007a48 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8007a48:	b480      	push	{r7}
 8007a4a:	b083      	sub	sp, #12
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8007a50:	bf00      	nop
 8007a52:	370c      	adds	r7, #12
 8007a54:	46bd      	mov	sp, r7
 8007a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5a:	4770      	bx	lr

08007a5c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8007a5c:	b480      	push	{r7}
 8007a5e:	b083      	sub	sp, #12
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8007a64:	bf00      	nop
 8007a66:	370c      	adds	r7, #12
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6e:	4770      	bx	lr

08007a70 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8007a70:	b480      	push	{r7}
 8007a72:	b083      	sub	sp, #12
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8007a78:	bf00      	nop
 8007a7a:	370c      	adds	r7, #12
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a82:	4770      	bx	lr

08007a84 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8007a84:	b480      	push	{r7}
 8007a86:	b083      	sub	sp, #12
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8007a8c:	bf00      	nop
 8007a8e:	370c      	adds	r7, #12
 8007a90:	46bd      	mov	sp, r7
 8007a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a96:	4770      	bx	lr

08007a98 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8007a98:	b480      	push	{r7}
 8007a9a:	b083      	sub	sp, #12
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8007aa0:	bf00      	nop
 8007aa2:	370c      	adds	r7, #12
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aaa:	4770      	bx	lr

08007aac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007aac:	b480      	push	{r7}
 8007aae:	b085      	sub	sp, #20
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f003 0307 	and.w	r3, r3, #7
 8007aba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007abc:	4b0c      	ldr	r3, [pc, #48]	; (8007af0 <__NVIC_SetPriorityGrouping+0x44>)
 8007abe:	68db      	ldr	r3, [r3, #12]
 8007ac0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007ac2:	68ba      	ldr	r2, [r7, #8]
 8007ac4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007ac8:	4013      	ands	r3, r2
 8007aca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007ad0:	68bb      	ldr	r3, [r7, #8]
 8007ad2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007ad4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007ad8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007adc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007ade:	4a04      	ldr	r2, [pc, #16]	; (8007af0 <__NVIC_SetPriorityGrouping+0x44>)
 8007ae0:	68bb      	ldr	r3, [r7, #8]
 8007ae2:	60d3      	str	r3, [r2, #12]
}
 8007ae4:	bf00      	nop
 8007ae6:	3714      	adds	r7, #20
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aee:	4770      	bx	lr
 8007af0:	e000ed00 	.word	0xe000ed00

08007af4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007af4:	b480      	push	{r7}
 8007af6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007af8:	4b04      	ldr	r3, [pc, #16]	; (8007b0c <__NVIC_GetPriorityGrouping+0x18>)
 8007afa:	68db      	ldr	r3, [r3, #12]
 8007afc:	0a1b      	lsrs	r3, r3, #8
 8007afe:	f003 0307 	and.w	r3, r3, #7
}
 8007b02:	4618      	mov	r0, r3
 8007b04:	46bd      	mov	sp, r7
 8007b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0a:	4770      	bx	lr
 8007b0c:	e000ed00 	.word	0xe000ed00

08007b10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007b10:	b480      	push	{r7}
 8007b12:	b083      	sub	sp, #12
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	4603      	mov	r3, r0
 8007b18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	db0b      	blt.n	8007b3a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007b22:	79fb      	ldrb	r3, [r7, #7]
 8007b24:	f003 021f 	and.w	r2, r3, #31
 8007b28:	4907      	ldr	r1, [pc, #28]	; (8007b48 <__NVIC_EnableIRQ+0x38>)
 8007b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b2e:	095b      	lsrs	r3, r3, #5
 8007b30:	2001      	movs	r0, #1
 8007b32:	fa00 f202 	lsl.w	r2, r0, r2
 8007b36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8007b3a:	bf00      	nop
 8007b3c:	370c      	adds	r7, #12
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b44:	4770      	bx	lr
 8007b46:	bf00      	nop
 8007b48:	e000e100 	.word	0xe000e100

08007b4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	b083      	sub	sp, #12
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	4603      	mov	r3, r0
 8007b54:	6039      	str	r1, [r7, #0]
 8007b56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007b58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	db0a      	blt.n	8007b76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	b2da      	uxtb	r2, r3
 8007b64:	490c      	ldr	r1, [pc, #48]	; (8007b98 <__NVIC_SetPriority+0x4c>)
 8007b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b6a:	0112      	lsls	r2, r2, #4
 8007b6c:	b2d2      	uxtb	r2, r2
 8007b6e:	440b      	add	r3, r1
 8007b70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007b74:	e00a      	b.n	8007b8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	b2da      	uxtb	r2, r3
 8007b7a:	4908      	ldr	r1, [pc, #32]	; (8007b9c <__NVIC_SetPriority+0x50>)
 8007b7c:	79fb      	ldrb	r3, [r7, #7]
 8007b7e:	f003 030f 	and.w	r3, r3, #15
 8007b82:	3b04      	subs	r3, #4
 8007b84:	0112      	lsls	r2, r2, #4
 8007b86:	b2d2      	uxtb	r2, r2
 8007b88:	440b      	add	r3, r1
 8007b8a:	761a      	strb	r2, [r3, #24]
}
 8007b8c:	bf00      	nop
 8007b8e:	370c      	adds	r7, #12
 8007b90:	46bd      	mov	sp, r7
 8007b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b96:	4770      	bx	lr
 8007b98:	e000e100 	.word	0xe000e100
 8007b9c:	e000ed00 	.word	0xe000ed00

08007ba0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007ba0:	b480      	push	{r7}
 8007ba2:	b089      	sub	sp, #36	; 0x24
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	60f8      	str	r0, [r7, #12]
 8007ba8:	60b9      	str	r1, [r7, #8]
 8007baa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	f003 0307 	and.w	r3, r3, #7
 8007bb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007bb4:	69fb      	ldr	r3, [r7, #28]
 8007bb6:	f1c3 0307 	rsb	r3, r3, #7
 8007bba:	2b04      	cmp	r3, #4
 8007bbc:	bf28      	it	cs
 8007bbe:	2304      	movcs	r3, #4
 8007bc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007bc2:	69fb      	ldr	r3, [r7, #28]
 8007bc4:	3304      	adds	r3, #4
 8007bc6:	2b06      	cmp	r3, #6
 8007bc8:	d902      	bls.n	8007bd0 <NVIC_EncodePriority+0x30>
 8007bca:	69fb      	ldr	r3, [r7, #28]
 8007bcc:	3b03      	subs	r3, #3
 8007bce:	e000      	b.n	8007bd2 <NVIC_EncodePriority+0x32>
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007bd4:	f04f 32ff 	mov.w	r2, #4294967295
 8007bd8:	69bb      	ldr	r3, [r7, #24]
 8007bda:	fa02 f303 	lsl.w	r3, r2, r3
 8007bde:	43da      	mvns	r2, r3
 8007be0:	68bb      	ldr	r3, [r7, #8]
 8007be2:	401a      	ands	r2, r3
 8007be4:	697b      	ldr	r3, [r7, #20]
 8007be6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007be8:	f04f 31ff 	mov.w	r1, #4294967295
 8007bec:	697b      	ldr	r3, [r7, #20]
 8007bee:	fa01 f303 	lsl.w	r3, r1, r3
 8007bf2:	43d9      	mvns	r1, r3
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007bf8:	4313      	orrs	r3, r2
         );
}
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	3724      	adds	r7, #36	; 0x24
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c04:	4770      	bx	lr

08007c06 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007c06:	b580      	push	{r7, lr}
 8007c08:	b082      	sub	sp, #8
 8007c0a:	af00      	add	r7, sp, #0
 8007c0c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f7ff ff4c 	bl	8007aac <__NVIC_SetPriorityGrouping>
}
 8007c14:	bf00      	nop
 8007c16:	3708      	adds	r7, #8
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	bd80      	pop	{r7, pc}

08007c1c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b086      	sub	sp, #24
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	4603      	mov	r3, r0
 8007c24:	60b9      	str	r1, [r7, #8]
 8007c26:	607a      	str	r2, [r7, #4]
 8007c28:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007c2e:	f7ff ff61 	bl	8007af4 <__NVIC_GetPriorityGrouping>
 8007c32:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007c34:	687a      	ldr	r2, [r7, #4]
 8007c36:	68b9      	ldr	r1, [r7, #8]
 8007c38:	6978      	ldr	r0, [r7, #20]
 8007c3a:	f7ff ffb1 	bl	8007ba0 <NVIC_EncodePriority>
 8007c3e:	4602      	mov	r2, r0
 8007c40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007c44:	4611      	mov	r1, r2
 8007c46:	4618      	mov	r0, r3
 8007c48:	f7ff ff80 	bl	8007b4c <__NVIC_SetPriority>
}
 8007c4c:	bf00      	nop
 8007c4e:	3718      	adds	r7, #24
 8007c50:	46bd      	mov	sp, r7
 8007c52:	bd80      	pop	{r7, pc}

08007c54 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b082      	sub	sp, #8
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c62:	4618      	mov	r0, r3
 8007c64:	f7ff ff54 	bl	8007b10 <__NVIC_EnableIRQ>
}
 8007c68:	bf00      	nop
 8007c6a:	3708      	adds	r7, #8
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	bd80      	pop	{r7, pc}

08007c70 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b084      	sub	sp, #16
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d101      	bne.n	8007c82 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8007c7e:	2301      	movs	r3, #1
 8007c80:	e08d      	b.n	8007d9e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	461a      	mov	r2, r3
 8007c88:	4b47      	ldr	r3, [pc, #284]	; (8007da8 <HAL_DMA_Init+0x138>)
 8007c8a:	429a      	cmp	r2, r3
 8007c8c:	d80f      	bhi.n	8007cae <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	461a      	mov	r2, r3
 8007c94:	4b45      	ldr	r3, [pc, #276]	; (8007dac <HAL_DMA_Init+0x13c>)
 8007c96:	4413      	add	r3, r2
 8007c98:	4a45      	ldr	r2, [pc, #276]	; (8007db0 <HAL_DMA_Init+0x140>)
 8007c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8007c9e:	091b      	lsrs	r3, r3, #4
 8007ca0:	009a      	lsls	r2, r3, #2
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	4a42      	ldr	r2, [pc, #264]	; (8007db4 <HAL_DMA_Init+0x144>)
 8007caa:	641a      	str	r2, [r3, #64]	; 0x40
 8007cac:	e00e      	b.n	8007ccc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	461a      	mov	r2, r3
 8007cb4:	4b40      	ldr	r3, [pc, #256]	; (8007db8 <HAL_DMA_Init+0x148>)
 8007cb6:	4413      	add	r3, r2
 8007cb8:	4a3d      	ldr	r2, [pc, #244]	; (8007db0 <HAL_DMA_Init+0x140>)
 8007cba:	fba2 2303 	umull	r2, r3, r2, r3
 8007cbe:	091b      	lsrs	r3, r3, #4
 8007cc0:	009a      	lsls	r2, r3, #2
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	4a3c      	ldr	r2, [pc, #240]	; (8007dbc <HAL_DMA_Init+0x14c>)
 8007cca:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2202      	movs	r2, #2
 8007cd0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007ce2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ce6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8007cf0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	691b      	ldr	r3, [r3, #16]
 8007cf6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007cfc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	699b      	ldr	r3, [r3, #24]
 8007d02:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007d08:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	6a1b      	ldr	r3, [r3, #32]
 8007d0e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8007d10:	68fa      	ldr	r2, [r7, #12]
 8007d12:	4313      	orrs	r3, r2
 8007d14:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	68fa      	ldr	r2, [r7, #12]
 8007d1c:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f000 f9b6 	bl	8008090 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	689b      	ldr	r3, [r3, #8]
 8007d28:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007d2c:	d102      	bne.n	8007d34 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2200      	movs	r2, #0
 8007d32:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	685a      	ldr	r2, [r3, #4]
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d3c:	b2d2      	uxtb	r2, r2
 8007d3e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d44:	687a      	ldr	r2, [r7, #4]
 8007d46:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007d48:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	685b      	ldr	r3, [r3, #4]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d010      	beq.n	8007d74 <HAL_DMA_Init+0x104>
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	685b      	ldr	r3, [r3, #4]
 8007d56:	2b04      	cmp	r3, #4
 8007d58:	d80c      	bhi.n	8007d74 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8007d5a:	6878      	ldr	r0, [r7, #4]
 8007d5c:	f000 f9d6 	bl	800810c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d64:	2200      	movs	r2, #0
 8007d66:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d6c:	687a      	ldr	r2, [r7, #4]
 8007d6e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007d70:	605a      	str	r2, [r3, #4]
 8007d72:	e008      	b.n	8007d86 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2200      	movs	r2, #0
 8007d78:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2200      	movs	r2, #0
 8007d84:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2200      	movs	r2, #0
 8007d8a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2201      	movs	r2, #1
 8007d90:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2200      	movs	r2, #0
 8007d98:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8007d9c:	2300      	movs	r3, #0
}
 8007d9e:	4618      	mov	r0, r3
 8007da0:	3710      	adds	r7, #16
 8007da2:	46bd      	mov	sp, r7
 8007da4:	bd80      	pop	{r7, pc}
 8007da6:	bf00      	nop
 8007da8:	40020407 	.word	0x40020407
 8007dac:	bffdfff8 	.word	0xbffdfff8
 8007db0:	cccccccd 	.word	0xcccccccd
 8007db4:	40020000 	.word	0x40020000
 8007db8:	bffdfbf8 	.word	0xbffdfbf8
 8007dbc:	40020400 	.word	0x40020400

08007dc0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b086      	sub	sp, #24
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	60f8      	str	r0, [r7, #12]
 8007dc8:	60b9      	str	r1, [r7, #8]
 8007dca:	607a      	str	r2, [r7, #4]
 8007dcc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007dce:	2300      	movs	r3, #0
 8007dd0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007dd8:	2b01      	cmp	r3, #1
 8007dda:	d101      	bne.n	8007de0 <HAL_DMA_Start_IT+0x20>
 8007ddc:	2302      	movs	r3, #2
 8007dde:	e066      	b.n	8007eae <HAL_DMA_Start_IT+0xee>
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	2201      	movs	r2, #1
 8007de4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007dee:	b2db      	uxtb	r3, r3
 8007df0:	2b01      	cmp	r3, #1
 8007df2:	d155      	bne.n	8007ea0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	2202      	movs	r2, #2
 8007df8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	2200      	movs	r2, #0
 8007e00:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	681a      	ldr	r2, [r3, #0]
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f022 0201 	bic.w	r2, r2, #1
 8007e10:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	687a      	ldr	r2, [r7, #4]
 8007e16:	68b9      	ldr	r1, [r7, #8]
 8007e18:	68f8      	ldr	r0, [r7, #12]
 8007e1a:	f000 f8fb 	bl	8008014 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d008      	beq.n	8007e38 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	681a      	ldr	r2, [r3, #0]
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f042 020e 	orr.w	r2, r2, #14
 8007e34:	601a      	str	r2, [r3, #0]
 8007e36:	e00f      	b.n	8007e58 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	681a      	ldr	r2, [r3, #0]
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f022 0204 	bic.w	r2, r2, #4
 8007e46:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	681a      	ldr	r2, [r3, #0]
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	f042 020a 	orr.w	r2, r2, #10
 8007e56:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d007      	beq.n	8007e76 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e6a:	681a      	ldr	r2, [r3, #0]
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007e74:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d007      	beq.n	8007e8e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e82:	681a      	ldr	r2, [r3, #0]
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007e8c:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	681a      	ldr	r2, [r3, #0]
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	f042 0201 	orr.w	r2, r2, #1
 8007e9c:	601a      	str	r2, [r3, #0]
 8007e9e:	e005      	b.n	8007eac <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8007ea8:	2302      	movs	r3, #2
 8007eaa:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8007eac:	7dfb      	ldrb	r3, [r7, #23]
}
 8007eae:	4618      	mov	r0, r3
 8007eb0:	3718      	adds	r7, #24
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	bd80      	pop	{r7, pc}

08007eb6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007eb6:	b580      	push	{r7, lr}
 8007eb8:	b084      	sub	sp, #16
 8007eba:	af00      	add	r7, sp, #0
 8007ebc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ed2:	f003 031c 	and.w	r3, r3, #28
 8007ed6:	2204      	movs	r2, #4
 8007ed8:	409a      	lsls	r2, r3
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	4013      	ands	r3, r2
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d026      	beq.n	8007f30 <HAL_DMA_IRQHandler+0x7a>
 8007ee2:	68bb      	ldr	r3, [r7, #8]
 8007ee4:	f003 0304 	and.w	r3, r3, #4
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d021      	beq.n	8007f30 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	f003 0320 	and.w	r3, r3, #32
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d107      	bne.n	8007f0a <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	681a      	ldr	r2, [r3, #0]
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f022 0204 	bic.w	r2, r2, #4
 8007f08:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f0e:	f003 021c 	and.w	r2, r3, #28
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f16:	2104      	movs	r1, #4
 8007f18:	fa01 f202 	lsl.w	r2, r1, r2
 8007f1c:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d071      	beq.n	800800a <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8007f2e:	e06c      	b.n	800800a <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f34:	f003 031c 	and.w	r3, r3, #28
 8007f38:	2202      	movs	r2, #2
 8007f3a:	409a      	lsls	r2, r3
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	4013      	ands	r3, r2
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d02e      	beq.n	8007fa2 <HAL_DMA_IRQHandler+0xec>
 8007f44:	68bb      	ldr	r3, [r7, #8]
 8007f46:	f003 0302 	and.w	r3, r3, #2
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d029      	beq.n	8007fa2 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f003 0320 	and.w	r3, r3, #32
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d10b      	bne.n	8007f74 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	681a      	ldr	r2, [r3, #0]
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f022 020a 	bic.w	r2, r2, #10
 8007f6a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2201      	movs	r2, #1
 8007f70:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f78:	f003 021c 	and.w	r2, r3, #28
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f80:	2102      	movs	r1, #2
 8007f82:	fa01 f202 	lsl.w	r2, r1, r2
 8007f86:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d038      	beq.n	800800a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8007fa0:	e033      	b.n	800800a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fa6:	f003 031c 	and.w	r3, r3, #28
 8007faa:	2208      	movs	r2, #8
 8007fac:	409a      	lsls	r2, r3
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	4013      	ands	r3, r2
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d02a      	beq.n	800800c <HAL_DMA_IRQHandler+0x156>
 8007fb6:	68bb      	ldr	r3, [r7, #8]
 8007fb8:	f003 0308 	and.w	r3, r3, #8
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d025      	beq.n	800800c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	681a      	ldr	r2, [r3, #0]
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f022 020e 	bic.w	r2, r2, #14
 8007fce:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fd4:	f003 021c 	and.w	r2, r3, #28
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fdc:	2101      	movs	r1, #1
 8007fde:	fa01 f202 	lsl.w	r2, r1, r2
 8007fe2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2201      	movs	r2, #1
 8007fe8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2201      	movs	r2, #1
 8007fee:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d004      	beq.n	800800c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008006:	6878      	ldr	r0, [r7, #4]
 8008008:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800800a:	bf00      	nop
 800800c:	bf00      	nop
}
 800800e:	3710      	adds	r7, #16
 8008010:	46bd      	mov	sp, r7
 8008012:	bd80      	pop	{r7, pc}

08008014 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008014:	b480      	push	{r7}
 8008016:	b085      	sub	sp, #20
 8008018:	af00      	add	r7, sp, #0
 800801a:	60f8      	str	r0, [r7, #12]
 800801c:	60b9      	str	r1, [r7, #8]
 800801e:	607a      	str	r2, [r7, #4]
 8008020:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008026:	68fa      	ldr	r2, [r7, #12]
 8008028:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800802a:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008030:	2b00      	cmp	r3, #0
 8008032:	d004      	beq.n	800803e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008038:	68fa      	ldr	r2, [r7, #12]
 800803a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800803c:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008042:	f003 021c 	and.w	r2, r3, #28
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800804a:	2101      	movs	r1, #1
 800804c:	fa01 f202 	lsl.w	r2, r1, r2
 8008050:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	683a      	ldr	r2, [r7, #0]
 8008058:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	689b      	ldr	r3, [r3, #8]
 800805e:	2b10      	cmp	r3, #16
 8008060:	d108      	bne.n	8008074 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	687a      	ldr	r2, [r7, #4]
 8008068:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	68ba      	ldr	r2, [r7, #8]
 8008070:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8008072:	e007      	b.n	8008084 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	68ba      	ldr	r2, [r7, #8]
 800807a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	687a      	ldr	r2, [r7, #4]
 8008082:	60da      	str	r2, [r3, #12]
}
 8008084:	bf00      	nop
 8008086:	3714      	adds	r7, #20
 8008088:	46bd      	mov	sp, r7
 800808a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808e:	4770      	bx	lr

08008090 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008090:	b480      	push	{r7}
 8008092:	b085      	sub	sp, #20
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	461a      	mov	r2, r3
 800809e:	4b17      	ldr	r3, [pc, #92]	; (80080fc <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80080a0:	429a      	cmp	r2, r3
 80080a2:	d80a      	bhi.n	80080ba <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080a8:	089b      	lsrs	r3, r3, #2
 80080aa:	009b      	lsls	r3, r3, #2
 80080ac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80080b0:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80080b4:	687a      	ldr	r2, [r7, #4]
 80080b6:	6493      	str	r3, [r2, #72]	; 0x48
 80080b8:	e007      	b.n	80080ca <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080be:	089b      	lsrs	r3, r3, #2
 80080c0:	009a      	lsls	r2, r3, #2
 80080c2:	4b0f      	ldr	r3, [pc, #60]	; (8008100 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80080c4:	4413      	add	r3, r2
 80080c6:	687a      	ldr	r2, [r7, #4]
 80080c8:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	b2db      	uxtb	r3, r3
 80080d0:	3b08      	subs	r3, #8
 80080d2:	4a0c      	ldr	r2, [pc, #48]	; (8008104 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80080d4:	fba2 2303 	umull	r2, r3, r2, r3
 80080d8:	091b      	lsrs	r3, r3, #4
 80080da:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	4a0a      	ldr	r2, [pc, #40]	; (8008108 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80080e0:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	f003 031f 	and.w	r3, r3, #31
 80080e8:	2201      	movs	r2, #1
 80080ea:	409a      	lsls	r2, r3
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	651a      	str	r2, [r3, #80]	; 0x50
}
 80080f0:	bf00      	nop
 80080f2:	3714      	adds	r7, #20
 80080f4:	46bd      	mov	sp, r7
 80080f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fa:	4770      	bx	lr
 80080fc:	40020407 	.word	0x40020407
 8008100:	4002081c 	.word	0x4002081c
 8008104:	cccccccd 	.word	0xcccccccd
 8008108:	40020880 	.word	0x40020880

0800810c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800810c:	b480      	push	{r7}
 800810e:	b085      	sub	sp, #20
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	685b      	ldr	r3, [r3, #4]
 8008118:	b2db      	uxtb	r3, r3
 800811a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800811c:	68fa      	ldr	r2, [r7, #12]
 800811e:	4b0b      	ldr	r3, [pc, #44]	; (800814c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8008120:	4413      	add	r3, r2
 8008122:	009b      	lsls	r3, r3, #2
 8008124:	461a      	mov	r2, r3
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	4a08      	ldr	r2, [pc, #32]	; (8008150 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800812e:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	3b01      	subs	r3, #1
 8008134:	f003 0303 	and.w	r3, r3, #3
 8008138:	2201      	movs	r2, #1
 800813a:	409a      	lsls	r2, r3
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8008140:	bf00      	nop
 8008142:	3714      	adds	r7, #20
 8008144:	46bd      	mov	sp, r7
 8008146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814a:	4770      	bx	lr
 800814c:	1000823f 	.word	0x1000823f
 8008150:	40020940 	.word	0x40020940

08008154 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008154:	b480      	push	{r7}
 8008156:	b087      	sub	sp, #28
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
 800815c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800815e:	2300      	movs	r3, #0
 8008160:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008162:	e166      	b.n	8008432 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	681a      	ldr	r2, [r3, #0]
 8008168:	2101      	movs	r1, #1
 800816a:	697b      	ldr	r3, [r7, #20]
 800816c:	fa01 f303 	lsl.w	r3, r1, r3
 8008170:	4013      	ands	r3, r2
 8008172:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	2b00      	cmp	r3, #0
 8008178:	f000 8158 	beq.w	800842c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	685b      	ldr	r3, [r3, #4]
 8008180:	f003 0303 	and.w	r3, r3, #3
 8008184:	2b01      	cmp	r3, #1
 8008186:	d005      	beq.n	8008194 <HAL_GPIO_Init+0x40>
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	685b      	ldr	r3, [r3, #4]
 800818c:	f003 0303 	and.w	r3, r3, #3
 8008190:	2b02      	cmp	r3, #2
 8008192:	d130      	bne.n	80081f6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	689b      	ldr	r3, [r3, #8]
 8008198:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800819a:	697b      	ldr	r3, [r7, #20]
 800819c:	005b      	lsls	r3, r3, #1
 800819e:	2203      	movs	r2, #3
 80081a0:	fa02 f303 	lsl.w	r3, r2, r3
 80081a4:	43db      	mvns	r3, r3
 80081a6:	693a      	ldr	r2, [r7, #16]
 80081a8:	4013      	ands	r3, r2
 80081aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	68da      	ldr	r2, [r3, #12]
 80081b0:	697b      	ldr	r3, [r7, #20]
 80081b2:	005b      	lsls	r3, r3, #1
 80081b4:	fa02 f303 	lsl.w	r3, r2, r3
 80081b8:	693a      	ldr	r2, [r7, #16]
 80081ba:	4313      	orrs	r3, r2
 80081bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	693a      	ldr	r2, [r7, #16]
 80081c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	685b      	ldr	r3, [r3, #4]
 80081c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80081ca:	2201      	movs	r2, #1
 80081cc:	697b      	ldr	r3, [r7, #20]
 80081ce:	fa02 f303 	lsl.w	r3, r2, r3
 80081d2:	43db      	mvns	r3, r3
 80081d4:	693a      	ldr	r2, [r7, #16]
 80081d6:	4013      	ands	r3, r2
 80081d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	685b      	ldr	r3, [r3, #4]
 80081de:	091b      	lsrs	r3, r3, #4
 80081e0:	f003 0201 	and.w	r2, r3, #1
 80081e4:	697b      	ldr	r3, [r7, #20]
 80081e6:	fa02 f303 	lsl.w	r3, r2, r3
 80081ea:	693a      	ldr	r2, [r7, #16]
 80081ec:	4313      	orrs	r3, r2
 80081ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	693a      	ldr	r2, [r7, #16]
 80081f4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	685b      	ldr	r3, [r3, #4]
 80081fa:	f003 0303 	and.w	r3, r3, #3
 80081fe:	2b03      	cmp	r3, #3
 8008200:	d017      	beq.n	8008232 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	68db      	ldr	r3, [r3, #12]
 8008206:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008208:	697b      	ldr	r3, [r7, #20]
 800820a:	005b      	lsls	r3, r3, #1
 800820c:	2203      	movs	r2, #3
 800820e:	fa02 f303 	lsl.w	r3, r2, r3
 8008212:	43db      	mvns	r3, r3
 8008214:	693a      	ldr	r2, [r7, #16]
 8008216:	4013      	ands	r3, r2
 8008218:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	689a      	ldr	r2, [r3, #8]
 800821e:	697b      	ldr	r3, [r7, #20]
 8008220:	005b      	lsls	r3, r3, #1
 8008222:	fa02 f303 	lsl.w	r3, r2, r3
 8008226:	693a      	ldr	r2, [r7, #16]
 8008228:	4313      	orrs	r3, r2
 800822a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	693a      	ldr	r2, [r7, #16]
 8008230:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	685b      	ldr	r3, [r3, #4]
 8008236:	f003 0303 	and.w	r3, r3, #3
 800823a:	2b02      	cmp	r3, #2
 800823c:	d123      	bne.n	8008286 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800823e:	697b      	ldr	r3, [r7, #20]
 8008240:	08da      	lsrs	r2, r3, #3
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	3208      	adds	r2, #8
 8008246:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800824a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800824c:	697b      	ldr	r3, [r7, #20]
 800824e:	f003 0307 	and.w	r3, r3, #7
 8008252:	009b      	lsls	r3, r3, #2
 8008254:	220f      	movs	r2, #15
 8008256:	fa02 f303 	lsl.w	r3, r2, r3
 800825a:	43db      	mvns	r3, r3
 800825c:	693a      	ldr	r2, [r7, #16]
 800825e:	4013      	ands	r3, r2
 8008260:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	691a      	ldr	r2, [r3, #16]
 8008266:	697b      	ldr	r3, [r7, #20]
 8008268:	f003 0307 	and.w	r3, r3, #7
 800826c:	009b      	lsls	r3, r3, #2
 800826e:	fa02 f303 	lsl.w	r3, r2, r3
 8008272:	693a      	ldr	r2, [r7, #16]
 8008274:	4313      	orrs	r3, r2
 8008276:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8008278:	697b      	ldr	r3, [r7, #20]
 800827a:	08da      	lsrs	r2, r3, #3
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	3208      	adds	r2, #8
 8008280:	6939      	ldr	r1, [r7, #16]
 8008282:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800828c:	697b      	ldr	r3, [r7, #20]
 800828e:	005b      	lsls	r3, r3, #1
 8008290:	2203      	movs	r2, #3
 8008292:	fa02 f303 	lsl.w	r3, r2, r3
 8008296:	43db      	mvns	r3, r3
 8008298:	693a      	ldr	r2, [r7, #16]
 800829a:	4013      	ands	r3, r2
 800829c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	685b      	ldr	r3, [r3, #4]
 80082a2:	f003 0203 	and.w	r2, r3, #3
 80082a6:	697b      	ldr	r3, [r7, #20]
 80082a8:	005b      	lsls	r3, r3, #1
 80082aa:	fa02 f303 	lsl.w	r3, r2, r3
 80082ae:	693a      	ldr	r2, [r7, #16]
 80082b0:	4313      	orrs	r3, r2
 80082b2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	693a      	ldr	r2, [r7, #16]
 80082b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	685b      	ldr	r3, [r3, #4]
 80082be:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	f000 80b2 	beq.w	800842c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80082c8:	4b61      	ldr	r3, [pc, #388]	; (8008450 <HAL_GPIO_Init+0x2fc>)
 80082ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80082cc:	4a60      	ldr	r2, [pc, #384]	; (8008450 <HAL_GPIO_Init+0x2fc>)
 80082ce:	f043 0301 	orr.w	r3, r3, #1
 80082d2:	6613      	str	r3, [r2, #96]	; 0x60
 80082d4:	4b5e      	ldr	r3, [pc, #376]	; (8008450 <HAL_GPIO_Init+0x2fc>)
 80082d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80082d8:	f003 0301 	and.w	r3, r3, #1
 80082dc:	60bb      	str	r3, [r7, #8]
 80082de:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80082e0:	4a5c      	ldr	r2, [pc, #368]	; (8008454 <HAL_GPIO_Init+0x300>)
 80082e2:	697b      	ldr	r3, [r7, #20]
 80082e4:	089b      	lsrs	r3, r3, #2
 80082e6:	3302      	adds	r3, #2
 80082e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80082ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80082ee:	697b      	ldr	r3, [r7, #20]
 80082f0:	f003 0303 	and.w	r3, r3, #3
 80082f4:	009b      	lsls	r3, r3, #2
 80082f6:	220f      	movs	r2, #15
 80082f8:	fa02 f303 	lsl.w	r3, r2, r3
 80082fc:	43db      	mvns	r3, r3
 80082fe:	693a      	ldr	r2, [r7, #16]
 8008300:	4013      	ands	r3, r2
 8008302:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800830a:	d02b      	beq.n	8008364 <HAL_GPIO_Init+0x210>
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	4a52      	ldr	r2, [pc, #328]	; (8008458 <HAL_GPIO_Init+0x304>)
 8008310:	4293      	cmp	r3, r2
 8008312:	d025      	beq.n	8008360 <HAL_GPIO_Init+0x20c>
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	4a51      	ldr	r2, [pc, #324]	; (800845c <HAL_GPIO_Init+0x308>)
 8008318:	4293      	cmp	r3, r2
 800831a:	d01f      	beq.n	800835c <HAL_GPIO_Init+0x208>
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	4a50      	ldr	r2, [pc, #320]	; (8008460 <HAL_GPIO_Init+0x30c>)
 8008320:	4293      	cmp	r3, r2
 8008322:	d019      	beq.n	8008358 <HAL_GPIO_Init+0x204>
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	4a4f      	ldr	r2, [pc, #316]	; (8008464 <HAL_GPIO_Init+0x310>)
 8008328:	4293      	cmp	r3, r2
 800832a:	d013      	beq.n	8008354 <HAL_GPIO_Init+0x200>
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	4a4e      	ldr	r2, [pc, #312]	; (8008468 <HAL_GPIO_Init+0x314>)
 8008330:	4293      	cmp	r3, r2
 8008332:	d00d      	beq.n	8008350 <HAL_GPIO_Init+0x1fc>
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	4a4d      	ldr	r2, [pc, #308]	; (800846c <HAL_GPIO_Init+0x318>)
 8008338:	4293      	cmp	r3, r2
 800833a:	d007      	beq.n	800834c <HAL_GPIO_Init+0x1f8>
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	4a4c      	ldr	r2, [pc, #304]	; (8008470 <HAL_GPIO_Init+0x31c>)
 8008340:	4293      	cmp	r3, r2
 8008342:	d101      	bne.n	8008348 <HAL_GPIO_Init+0x1f4>
 8008344:	2307      	movs	r3, #7
 8008346:	e00e      	b.n	8008366 <HAL_GPIO_Init+0x212>
 8008348:	2308      	movs	r3, #8
 800834a:	e00c      	b.n	8008366 <HAL_GPIO_Init+0x212>
 800834c:	2306      	movs	r3, #6
 800834e:	e00a      	b.n	8008366 <HAL_GPIO_Init+0x212>
 8008350:	2305      	movs	r3, #5
 8008352:	e008      	b.n	8008366 <HAL_GPIO_Init+0x212>
 8008354:	2304      	movs	r3, #4
 8008356:	e006      	b.n	8008366 <HAL_GPIO_Init+0x212>
 8008358:	2303      	movs	r3, #3
 800835a:	e004      	b.n	8008366 <HAL_GPIO_Init+0x212>
 800835c:	2302      	movs	r3, #2
 800835e:	e002      	b.n	8008366 <HAL_GPIO_Init+0x212>
 8008360:	2301      	movs	r3, #1
 8008362:	e000      	b.n	8008366 <HAL_GPIO_Init+0x212>
 8008364:	2300      	movs	r3, #0
 8008366:	697a      	ldr	r2, [r7, #20]
 8008368:	f002 0203 	and.w	r2, r2, #3
 800836c:	0092      	lsls	r2, r2, #2
 800836e:	4093      	lsls	r3, r2
 8008370:	693a      	ldr	r2, [r7, #16]
 8008372:	4313      	orrs	r3, r2
 8008374:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8008376:	4937      	ldr	r1, [pc, #220]	; (8008454 <HAL_GPIO_Init+0x300>)
 8008378:	697b      	ldr	r3, [r7, #20]
 800837a:	089b      	lsrs	r3, r3, #2
 800837c:	3302      	adds	r3, #2
 800837e:	693a      	ldr	r2, [r7, #16]
 8008380:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008384:	4b3b      	ldr	r3, [pc, #236]	; (8008474 <HAL_GPIO_Init+0x320>)
 8008386:	689b      	ldr	r3, [r3, #8]
 8008388:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	43db      	mvns	r3, r3
 800838e:	693a      	ldr	r2, [r7, #16]
 8008390:	4013      	ands	r3, r2
 8008392:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8008394:	683b      	ldr	r3, [r7, #0]
 8008396:	685b      	ldr	r3, [r3, #4]
 8008398:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800839c:	2b00      	cmp	r3, #0
 800839e:	d003      	beq.n	80083a8 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80083a0:	693a      	ldr	r2, [r7, #16]
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	4313      	orrs	r3, r2
 80083a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80083a8:	4a32      	ldr	r2, [pc, #200]	; (8008474 <HAL_GPIO_Init+0x320>)
 80083aa:	693b      	ldr	r3, [r7, #16]
 80083ac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80083ae:	4b31      	ldr	r3, [pc, #196]	; (8008474 <HAL_GPIO_Init+0x320>)
 80083b0:	68db      	ldr	r3, [r3, #12]
 80083b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	43db      	mvns	r3, r3
 80083b8:	693a      	ldr	r2, [r7, #16]
 80083ba:	4013      	ands	r3, r2
 80083bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	685b      	ldr	r3, [r3, #4]
 80083c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d003      	beq.n	80083d2 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80083ca:	693a      	ldr	r2, [r7, #16]
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	4313      	orrs	r3, r2
 80083d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80083d2:	4a28      	ldr	r2, [pc, #160]	; (8008474 <HAL_GPIO_Init+0x320>)
 80083d4:	693b      	ldr	r3, [r7, #16]
 80083d6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80083d8:	4b26      	ldr	r3, [pc, #152]	; (8008474 <HAL_GPIO_Init+0x320>)
 80083da:	685b      	ldr	r3, [r3, #4]
 80083dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	43db      	mvns	r3, r3
 80083e2:	693a      	ldr	r2, [r7, #16]
 80083e4:	4013      	ands	r3, r2
 80083e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	685b      	ldr	r3, [r3, #4]
 80083ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d003      	beq.n	80083fc <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80083f4:	693a      	ldr	r2, [r7, #16]
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	4313      	orrs	r3, r2
 80083fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80083fc:	4a1d      	ldr	r2, [pc, #116]	; (8008474 <HAL_GPIO_Init+0x320>)
 80083fe:	693b      	ldr	r3, [r7, #16]
 8008400:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8008402:	4b1c      	ldr	r3, [pc, #112]	; (8008474 <HAL_GPIO_Init+0x320>)
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	43db      	mvns	r3, r3
 800840c:	693a      	ldr	r2, [r7, #16]
 800840e:	4013      	ands	r3, r2
 8008410:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	685b      	ldr	r3, [r3, #4]
 8008416:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800841a:	2b00      	cmp	r3, #0
 800841c:	d003      	beq.n	8008426 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800841e:	693a      	ldr	r2, [r7, #16]
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	4313      	orrs	r3, r2
 8008424:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8008426:	4a13      	ldr	r2, [pc, #76]	; (8008474 <HAL_GPIO_Init+0x320>)
 8008428:	693b      	ldr	r3, [r7, #16]
 800842a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800842c:	697b      	ldr	r3, [r7, #20]
 800842e:	3301      	adds	r3, #1
 8008430:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	681a      	ldr	r2, [r3, #0]
 8008436:	697b      	ldr	r3, [r7, #20]
 8008438:	fa22 f303 	lsr.w	r3, r2, r3
 800843c:	2b00      	cmp	r3, #0
 800843e:	f47f ae91 	bne.w	8008164 <HAL_GPIO_Init+0x10>
  }
}
 8008442:	bf00      	nop
 8008444:	bf00      	nop
 8008446:	371c      	adds	r7, #28
 8008448:	46bd      	mov	sp, r7
 800844a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844e:	4770      	bx	lr
 8008450:	40021000 	.word	0x40021000
 8008454:	40010000 	.word	0x40010000
 8008458:	48000400 	.word	0x48000400
 800845c:	48000800 	.word	0x48000800
 8008460:	48000c00 	.word	0x48000c00
 8008464:	48001000 	.word	0x48001000
 8008468:	48001400 	.word	0x48001400
 800846c:	48001800 	.word	0x48001800
 8008470:	48001c00 	.word	0x48001c00
 8008474:	40010400 	.word	0x40010400

08008478 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008478:	b480      	push	{r7}
 800847a:	b085      	sub	sp, #20
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
 8008480:	460b      	mov	r3, r1
 8008482:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	691a      	ldr	r2, [r3, #16]
 8008488:	887b      	ldrh	r3, [r7, #2]
 800848a:	4013      	ands	r3, r2
 800848c:	2b00      	cmp	r3, #0
 800848e:	d002      	beq.n	8008496 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008490:	2301      	movs	r3, #1
 8008492:	73fb      	strb	r3, [r7, #15]
 8008494:	e001      	b.n	800849a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008496:	2300      	movs	r3, #0
 8008498:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800849a:	7bfb      	ldrb	r3, [r7, #15]
}
 800849c:	4618      	mov	r0, r3
 800849e:	3714      	adds	r7, #20
 80084a0:	46bd      	mov	sp, r7
 80084a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a6:	4770      	bx	lr

080084a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80084a8:	b480      	push	{r7}
 80084aa:	b083      	sub	sp, #12
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
 80084b0:	460b      	mov	r3, r1
 80084b2:	807b      	strh	r3, [r7, #2]
 80084b4:	4613      	mov	r3, r2
 80084b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80084b8:	787b      	ldrb	r3, [r7, #1]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d003      	beq.n	80084c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80084be:	887a      	ldrh	r2, [r7, #2]
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80084c4:	e002      	b.n	80084cc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80084c6:	887a      	ldrh	r2, [r7, #2]
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	629a      	str	r2, [r3, #40]	; 0x28
}
 80084cc:	bf00      	nop
 80084ce:	370c      	adds	r7, #12
 80084d0:	46bd      	mov	sp, r7
 80084d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d6:	4770      	bx	lr

080084d8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80084d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80084da:	b08f      	sub	sp, #60	; 0x3c
 80084dc:	af0a      	add	r7, sp, #40	; 0x28
 80084de:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d101      	bne.n	80084ea <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80084e6:	2301      	movs	r3, #1
 80084e8:	e116      	b.n	8008718 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80084f6:	b2db      	uxtb	r3, r3
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d106      	bne.n	800850a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2200      	movs	r2, #0
 8008500:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	f00a fd5d 	bl	8012fc4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	2203      	movs	r2, #3
 800850e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8008512:	68bb      	ldr	r3, [r7, #8]
 8008514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008516:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800851a:	2b00      	cmp	r3, #0
 800851c:	d102      	bne.n	8008524 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	2200      	movs	r2, #0
 8008522:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	4618      	mov	r0, r3
 800852a:	f004 fe34 	bl	800d196 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	603b      	str	r3, [r7, #0]
 8008534:	687e      	ldr	r6, [r7, #4]
 8008536:	466d      	mov	r5, sp
 8008538:	f106 0410 	add.w	r4, r6, #16
 800853c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800853e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008540:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008542:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008544:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008548:	e885 0003 	stmia.w	r5, {r0, r1}
 800854c:	1d33      	adds	r3, r6, #4
 800854e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008550:	6838      	ldr	r0, [r7, #0]
 8008552:	f004 fd47 	bl	800cfe4 <USB_CoreInit>
 8008556:	4603      	mov	r3, r0
 8008558:	2b00      	cmp	r3, #0
 800855a:	d005      	beq.n	8008568 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2202      	movs	r2, #2
 8008560:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8008564:	2301      	movs	r3, #1
 8008566:	e0d7      	b.n	8008718 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	2100      	movs	r1, #0
 800856e:	4618      	mov	r0, r3
 8008570:	f004 fe22 	bl	800d1b8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008574:	2300      	movs	r3, #0
 8008576:	73fb      	strb	r3, [r7, #15]
 8008578:	e04a      	b.n	8008610 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800857a:	7bfa      	ldrb	r2, [r7, #15]
 800857c:	6879      	ldr	r1, [r7, #4]
 800857e:	4613      	mov	r3, r2
 8008580:	00db      	lsls	r3, r3, #3
 8008582:	4413      	add	r3, r2
 8008584:	009b      	lsls	r3, r3, #2
 8008586:	440b      	add	r3, r1
 8008588:	333d      	adds	r3, #61	; 0x3d
 800858a:	2201      	movs	r2, #1
 800858c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800858e:	7bfa      	ldrb	r2, [r7, #15]
 8008590:	6879      	ldr	r1, [r7, #4]
 8008592:	4613      	mov	r3, r2
 8008594:	00db      	lsls	r3, r3, #3
 8008596:	4413      	add	r3, r2
 8008598:	009b      	lsls	r3, r3, #2
 800859a:	440b      	add	r3, r1
 800859c:	333c      	adds	r3, #60	; 0x3c
 800859e:	7bfa      	ldrb	r2, [r7, #15]
 80085a0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80085a2:	7bfa      	ldrb	r2, [r7, #15]
 80085a4:	7bfb      	ldrb	r3, [r7, #15]
 80085a6:	b298      	uxth	r0, r3
 80085a8:	6879      	ldr	r1, [r7, #4]
 80085aa:	4613      	mov	r3, r2
 80085ac:	00db      	lsls	r3, r3, #3
 80085ae:	4413      	add	r3, r2
 80085b0:	009b      	lsls	r3, r3, #2
 80085b2:	440b      	add	r3, r1
 80085b4:	3344      	adds	r3, #68	; 0x44
 80085b6:	4602      	mov	r2, r0
 80085b8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80085ba:	7bfa      	ldrb	r2, [r7, #15]
 80085bc:	6879      	ldr	r1, [r7, #4]
 80085be:	4613      	mov	r3, r2
 80085c0:	00db      	lsls	r3, r3, #3
 80085c2:	4413      	add	r3, r2
 80085c4:	009b      	lsls	r3, r3, #2
 80085c6:	440b      	add	r3, r1
 80085c8:	3340      	adds	r3, #64	; 0x40
 80085ca:	2200      	movs	r2, #0
 80085cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80085ce:	7bfa      	ldrb	r2, [r7, #15]
 80085d0:	6879      	ldr	r1, [r7, #4]
 80085d2:	4613      	mov	r3, r2
 80085d4:	00db      	lsls	r3, r3, #3
 80085d6:	4413      	add	r3, r2
 80085d8:	009b      	lsls	r3, r3, #2
 80085da:	440b      	add	r3, r1
 80085dc:	3348      	adds	r3, #72	; 0x48
 80085de:	2200      	movs	r2, #0
 80085e0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80085e2:	7bfa      	ldrb	r2, [r7, #15]
 80085e4:	6879      	ldr	r1, [r7, #4]
 80085e6:	4613      	mov	r3, r2
 80085e8:	00db      	lsls	r3, r3, #3
 80085ea:	4413      	add	r3, r2
 80085ec:	009b      	lsls	r3, r3, #2
 80085ee:	440b      	add	r3, r1
 80085f0:	334c      	adds	r3, #76	; 0x4c
 80085f2:	2200      	movs	r2, #0
 80085f4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80085f6:	7bfa      	ldrb	r2, [r7, #15]
 80085f8:	6879      	ldr	r1, [r7, #4]
 80085fa:	4613      	mov	r3, r2
 80085fc:	00db      	lsls	r3, r3, #3
 80085fe:	4413      	add	r3, r2
 8008600:	009b      	lsls	r3, r3, #2
 8008602:	440b      	add	r3, r1
 8008604:	3354      	adds	r3, #84	; 0x54
 8008606:	2200      	movs	r2, #0
 8008608:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800860a:	7bfb      	ldrb	r3, [r7, #15]
 800860c:	3301      	adds	r3, #1
 800860e:	73fb      	strb	r3, [r7, #15]
 8008610:	7bfa      	ldrb	r2, [r7, #15]
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	685b      	ldr	r3, [r3, #4]
 8008616:	429a      	cmp	r2, r3
 8008618:	d3af      	bcc.n	800857a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800861a:	2300      	movs	r3, #0
 800861c:	73fb      	strb	r3, [r7, #15]
 800861e:	e044      	b.n	80086aa <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8008620:	7bfa      	ldrb	r2, [r7, #15]
 8008622:	6879      	ldr	r1, [r7, #4]
 8008624:	4613      	mov	r3, r2
 8008626:	00db      	lsls	r3, r3, #3
 8008628:	4413      	add	r3, r2
 800862a:	009b      	lsls	r3, r3, #2
 800862c:	440b      	add	r3, r1
 800862e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8008632:	2200      	movs	r2, #0
 8008634:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8008636:	7bfa      	ldrb	r2, [r7, #15]
 8008638:	6879      	ldr	r1, [r7, #4]
 800863a:	4613      	mov	r3, r2
 800863c:	00db      	lsls	r3, r3, #3
 800863e:	4413      	add	r3, r2
 8008640:	009b      	lsls	r3, r3, #2
 8008642:	440b      	add	r3, r1
 8008644:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8008648:	7bfa      	ldrb	r2, [r7, #15]
 800864a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800864c:	7bfa      	ldrb	r2, [r7, #15]
 800864e:	6879      	ldr	r1, [r7, #4]
 8008650:	4613      	mov	r3, r2
 8008652:	00db      	lsls	r3, r3, #3
 8008654:	4413      	add	r3, r2
 8008656:	009b      	lsls	r3, r3, #2
 8008658:	440b      	add	r3, r1
 800865a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800865e:	2200      	movs	r2, #0
 8008660:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8008662:	7bfa      	ldrb	r2, [r7, #15]
 8008664:	6879      	ldr	r1, [r7, #4]
 8008666:	4613      	mov	r3, r2
 8008668:	00db      	lsls	r3, r3, #3
 800866a:	4413      	add	r3, r2
 800866c:	009b      	lsls	r3, r3, #2
 800866e:	440b      	add	r3, r1
 8008670:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8008674:	2200      	movs	r2, #0
 8008676:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8008678:	7bfa      	ldrb	r2, [r7, #15]
 800867a:	6879      	ldr	r1, [r7, #4]
 800867c:	4613      	mov	r3, r2
 800867e:	00db      	lsls	r3, r3, #3
 8008680:	4413      	add	r3, r2
 8008682:	009b      	lsls	r3, r3, #2
 8008684:	440b      	add	r3, r1
 8008686:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800868a:	2200      	movs	r2, #0
 800868c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800868e:	7bfa      	ldrb	r2, [r7, #15]
 8008690:	6879      	ldr	r1, [r7, #4]
 8008692:	4613      	mov	r3, r2
 8008694:	00db      	lsls	r3, r3, #3
 8008696:	4413      	add	r3, r2
 8008698:	009b      	lsls	r3, r3, #2
 800869a:	440b      	add	r3, r1
 800869c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80086a0:	2200      	movs	r2, #0
 80086a2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80086a4:	7bfb      	ldrb	r3, [r7, #15]
 80086a6:	3301      	adds	r3, #1
 80086a8:	73fb      	strb	r3, [r7, #15]
 80086aa:	7bfa      	ldrb	r2, [r7, #15]
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	685b      	ldr	r3, [r3, #4]
 80086b0:	429a      	cmp	r2, r3
 80086b2:	d3b5      	bcc.n	8008620 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	603b      	str	r3, [r7, #0]
 80086ba:	687e      	ldr	r6, [r7, #4]
 80086bc:	466d      	mov	r5, sp
 80086be:	f106 0410 	add.w	r4, r6, #16
 80086c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80086c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80086c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80086c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80086ca:	e894 0003 	ldmia.w	r4, {r0, r1}
 80086ce:	e885 0003 	stmia.w	r5, {r0, r1}
 80086d2:	1d33      	adds	r3, r6, #4
 80086d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80086d6:	6838      	ldr	r0, [r7, #0]
 80086d8:	f004 fdba 	bl	800d250 <USB_DevInit>
 80086dc:	4603      	mov	r3, r0
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d005      	beq.n	80086ee <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2202      	movs	r2, #2
 80086e6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80086ea:	2301      	movs	r3, #1
 80086ec:	e014      	b.n	8008718 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	2200      	movs	r2, #0
 80086f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	2201      	movs	r2, #1
 80086fa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008702:	2b01      	cmp	r3, #1
 8008704:	d102      	bne.n	800870c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8008706:	6878      	ldr	r0, [r7, #4]
 8008708:	f001 f882 	bl	8009810 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	4618      	mov	r0, r3
 8008712:	f005 fe42 	bl	800e39a <USB_DevDisconnect>

  return HAL_OK;
 8008716:	2300      	movs	r3, #0
}
 8008718:	4618      	mov	r0, r3
 800871a:	3714      	adds	r7, #20
 800871c:	46bd      	mov	sp, r7
 800871e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008720 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b084      	sub	sp, #16
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008734:	2b01      	cmp	r3, #1
 8008736:	d101      	bne.n	800873c <HAL_PCD_Start+0x1c>
 8008738:	2302      	movs	r3, #2
 800873a:	e01c      	b.n	8008776 <HAL_PCD_Start+0x56>
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2201      	movs	r2, #1
 8008740:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008748:	2b01      	cmp	r3, #1
 800874a:	d105      	bne.n	8008758 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008750:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	4618      	mov	r0, r3
 800875e:	f004 fd09 	bl	800d174 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	4618      	mov	r0, r3
 8008768:	f005 fdf6 	bl	800e358 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2200      	movs	r2, #0
 8008770:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8008774:	2300      	movs	r3, #0
}
 8008776:	4618      	mov	r0, r3
 8008778:	3710      	adds	r7, #16
 800877a:	46bd      	mov	sp, r7
 800877c:	bd80      	pop	{r7, pc}

0800877e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800877e:	b590      	push	{r4, r7, lr}
 8008780:	b08d      	sub	sp, #52	; 0x34
 8008782:	af00      	add	r7, sp, #0
 8008784:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800878c:	6a3b      	ldr	r3, [r7, #32]
 800878e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	4618      	mov	r0, r3
 8008796:	f005 feb4 	bl	800e502 <USB_GetMode>
 800879a:	4603      	mov	r3, r0
 800879c:	2b00      	cmp	r3, #0
 800879e:	f040 847e 	bne.w	800909e <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	4618      	mov	r0, r3
 80087a8:	f005 fe18 	bl	800e3dc <USB_ReadInterrupts>
 80087ac:	4603      	mov	r3, r0
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	f000 8474 	beq.w	800909c <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80087b4:	69fb      	ldr	r3, [r7, #28]
 80087b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087ba:	689b      	ldr	r3, [r3, #8]
 80087bc:	0a1b      	lsrs	r3, r3, #8
 80087be:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	4618      	mov	r0, r3
 80087ce:	f005 fe05 	bl	800e3dc <USB_ReadInterrupts>
 80087d2:	4603      	mov	r3, r0
 80087d4:	f003 0302 	and.w	r3, r3, #2
 80087d8:	2b02      	cmp	r3, #2
 80087da:	d107      	bne.n	80087ec <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	695a      	ldr	r2, [r3, #20]
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	f002 0202 	and.w	r2, r2, #2
 80087ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	4618      	mov	r0, r3
 80087f2:	f005 fdf3 	bl	800e3dc <USB_ReadInterrupts>
 80087f6:	4603      	mov	r3, r0
 80087f8:	f003 0310 	and.w	r3, r3, #16
 80087fc:	2b10      	cmp	r3, #16
 80087fe:	d161      	bne.n	80088c4 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	699a      	ldr	r2, [r3, #24]
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	f022 0210 	bic.w	r2, r2, #16
 800880e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8008810:	6a3b      	ldr	r3, [r7, #32]
 8008812:	6a1b      	ldr	r3, [r3, #32]
 8008814:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8008816:	69bb      	ldr	r3, [r7, #24]
 8008818:	f003 020f 	and.w	r2, r3, #15
 800881c:	4613      	mov	r3, r2
 800881e:	00db      	lsls	r3, r3, #3
 8008820:	4413      	add	r3, r2
 8008822:	009b      	lsls	r3, r3, #2
 8008824:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008828:	687a      	ldr	r2, [r7, #4]
 800882a:	4413      	add	r3, r2
 800882c:	3304      	adds	r3, #4
 800882e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8008830:	69bb      	ldr	r3, [r7, #24]
 8008832:	0c5b      	lsrs	r3, r3, #17
 8008834:	f003 030f 	and.w	r3, r3, #15
 8008838:	2b02      	cmp	r3, #2
 800883a:	d124      	bne.n	8008886 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800883c:	69ba      	ldr	r2, [r7, #24]
 800883e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8008842:	4013      	ands	r3, r2
 8008844:	2b00      	cmp	r3, #0
 8008846:	d035      	beq.n	80088b4 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008848:	697b      	ldr	r3, [r7, #20]
 800884a:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800884c:	69bb      	ldr	r3, [r7, #24]
 800884e:	091b      	lsrs	r3, r3, #4
 8008850:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008852:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008856:	b29b      	uxth	r3, r3
 8008858:	461a      	mov	r2, r3
 800885a:	6a38      	ldr	r0, [r7, #32]
 800885c:	f005 fc2a 	bl	800e0b4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008860:	697b      	ldr	r3, [r7, #20]
 8008862:	691a      	ldr	r2, [r3, #16]
 8008864:	69bb      	ldr	r3, [r7, #24]
 8008866:	091b      	lsrs	r3, r3, #4
 8008868:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800886c:	441a      	add	r2, r3
 800886e:	697b      	ldr	r3, [r7, #20]
 8008870:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008872:	697b      	ldr	r3, [r7, #20]
 8008874:	6a1a      	ldr	r2, [r3, #32]
 8008876:	69bb      	ldr	r3, [r7, #24]
 8008878:	091b      	lsrs	r3, r3, #4
 800887a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800887e:	441a      	add	r2, r3
 8008880:	697b      	ldr	r3, [r7, #20]
 8008882:	621a      	str	r2, [r3, #32]
 8008884:	e016      	b.n	80088b4 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8008886:	69bb      	ldr	r3, [r7, #24]
 8008888:	0c5b      	lsrs	r3, r3, #17
 800888a:	f003 030f 	and.w	r3, r3, #15
 800888e:	2b06      	cmp	r3, #6
 8008890:	d110      	bne.n	80088b4 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008898:	2208      	movs	r2, #8
 800889a:	4619      	mov	r1, r3
 800889c:	6a38      	ldr	r0, [r7, #32]
 800889e:	f005 fc09 	bl	800e0b4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80088a2:	697b      	ldr	r3, [r7, #20]
 80088a4:	6a1a      	ldr	r2, [r3, #32]
 80088a6:	69bb      	ldr	r3, [r7, #24]
 80088a8:	091b      	lsrs	r3, r3, #4
 80088aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80088ae:	441a      	add	r2, r3
 80088b0:	697b      	ldr	r3, [r7, #20]
 80088b2:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	699a      	ldr	r2, [r3, #24]
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	f042 0210 	orr.w	r2, r2, #16
 80088c2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	4618      	mov	r0, r3
 80088ca:	f005 fd87 	bl	800e3dc <USB_ReadInterrupts>
 80088ce:	4603      	mov	r3, r0
 80088d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80088d4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80088d8:	f040 80a7 	bne.w	8008a2a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80088dc:	2300      	movs	r3, #0
 80088de:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	4618      	mov	r0, r3
 80088e6:	f005 fd8c 	bl	800e402 <USB_ReadDevAllOutEpInterrupt>
 80088ea:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80088ec:	e099      	b.n	8008a22 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80088ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088f0:	f003 0301 	and.w	r3, r3, #1
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	f000 808e 	beq.w	8008a16 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008900:	b2d2      	uxtb	r2, r2
 8008902:	4611      	mov	r1, r2
 8008904:	4618      	mov	r0, r3
 8008906:	f005 fdb0 	bl	800e46a <USB_ReadDevOutEPInterrupt>
 800890a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800890c:	693b      	ldr	r3, [r7, #16]
 800890e:	f003 0301 	and.w	r3, r3, #1
 8008912:	2b00      	cmp	r3, #0
 8008914:	d00c      	beq.n	8008930 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8008916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008918:	015a      	lsls	r2, r3, #5
 800891a:	69fb      	ldr	r3, [r7, #28]
 800891c:	4413      	add	r3, r2
 800891e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008922:	461a      	mov	r2, r3
 8008924:	2301      	movs	r3, #1
 8008926:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8008928:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800892a:	6878      	ldr	r0, [r7, #4]
 800892c:	f000 fe96 	bl	800965c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8008930:	693b      	ldr	r3, [r7, #16]
 8008932:	f003 0308 	and.w	r3, r3, #8
 8008936:	2b00      	cmp	r3, #0
 8008938:	d00c      	beq.n	8008954 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800893a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800893c:	015a      	lsls	r2, r3, #5
 800893e:	69fb      	ldr	r3, [r7, #28]
 8008940:	4413      	add	r3, r2
 8008942:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008946:	461a      	mov	r2, r3
 8008948:	2308      	movs	r3, #8
 800894a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800894c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800894e:	6878      	ldr	r0, [r7, #4]
 8008950:	f000 fed2 	bl	80096f8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8008954:	693b      	ldr	r3, [r7, #16]
 8008956:	f003 0310 	and.w	r3, r3, #16
 800895a:	2b00      	cmp	r3, #0
 800895c:	d008      	beq.n	8008970 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800895e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008960:	015a      	lsls	r2, r3, #5
 8008962:	69fb      	ldr	r3, [r7, #28]
 8008964:	4413      	add	r3, r2
 8008966:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800896a:	461a      	mov	r2, r3
 800896c:	2310      	movs	r3, #16
 800896e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8008970:	693b      	ldr	r3, [r7, #16]
 8008972:	f003 0302 	and.w	r3, r3, #2
 8008976:	2b00      	cmp	r3, #0
 8008978:	d030      	beq.n	80089dc <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800897a:	6a3b      	ldr	r3, [r7, #32]
 800897c:	695b      	ldr	r3, [r3, #20]
 800897e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008982:	2b80      	cmp	r3, #128	; 0x80
 8008984:	d109      	bne.n	800899a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8008986:	69fb      	ldr	r3, [r7, #28]
 8008988:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800898c:	685b      	ldr	r3, [r3, #4]
 800898e:	69fa      	ldr	r2, [r7, #28]
 8008990:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008994:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008998:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800899a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800899c:	4613      	mov	r3, r2
 800899e:	00db      	lsls	r3, r3, #3
 80089a0:	4413      	add	r3, r2
 80089a2:	009b      	lsls	r3, r3, #2
 80089a4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80089a8:	687a      	ldr	r2, [r7, #4]
 80089aa:	4413      	add	r3, r2
 80089ac:	3304      	adds	r3, #4
 80089ae:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80089b0:	697b      	ldr	r3, [r7, #20]
 80089b2:	78db      	ldrb	r3, [r3, #3]
 80089b4:	2b01      	cmp	r3, #1
 80089b6:	d108      	bne.n	80089ca <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80089b8:	697b      	ldr	r3, [r7, #20]
 80089ba:	2200      	movs	r2, #0
 80089bc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80089be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089c0:	b2db      	uxtb	r3, r3
 80089c2:	4619      	mov	r1, r3
 80089c4:	6878      	ldr	r0, [r7, #4]
 80089c6:	f00a fc41 	bl	801324c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80089ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089cc:	015a      	lsls	r2, r3, #5
 80089ce:	69fb      	ldr	r3, [r7, #28]
 80089d0:	4413      	add	r3, r2
 80089d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089d6:	461a      	mov	r2, r3
 80089d8:	2302      	movs	r3, #2
 80089da:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80089dc:	693b      	ldr	r3, [r7, #16]
 80089de:	f003 0320 	and.w	r3, r3, #32
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d008      	beq.n	80089f8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80089e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089e8:	015a      	lsls	r2, r3, #5
 80089ea:	69fb      	ldr	r3, [r7, #28]
 80089ec:	4413      	add	r3, r2
 80089ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089f2:	461a      	mov	r2, r3
 80089f4:	2320      	movs	r3, #32
 80089f6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80089f8:	693b      	ldr	r3, [r7, #16]
 80089fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d009      	beq.n	8008a16 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8008a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a04:	015a      	lsls	r2, r3, #5
 8008a06:	69fb      	ldr	r3, [r7, #28]
 8008a08:	4413      	add	r3, r2
 8008a0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a0e:	461a      	mov	r2, r3
 8008a10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008a14:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8008a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a18:	3301      	adds	r3, #1
 8008a1a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8008a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a1e:	085b      	lsrs	r3, r3, #1
 8008a20:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	f47f af62 	bne.w	80088ee <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	4618      	mov	r0, r3
 8008a30:	f005 fcd4 	bl	800e3dc <USB_ReadInterrupts>
 8008a34:	4603      	mov	r3, r0
 8008a36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008a3a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008a3e:	f040 80a4 	bne.w	8008b8a <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	4618      	mov	r0, r3
 8008a48:	f005 fcf5 	bl	800e436 <USB_ReadDevAllInEpInterrupt>
 8008a4c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8008a4e:	2300      	movs	r3, #0
 8008a50:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8008a52:	e096      	b.n	8008b82 <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8008a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a56:	f003 0301 	and.w	r3, r3, #1
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	f000 808b 	beq.w	8008b76 <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a66:	b2d2      	uxtb	r2, r2
 8008a68:	4611      	mov	r1, r2
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	f005 fd1b 	bl	800e4a6 <USB_ReadDevInEPInterrupt>
 8008a70:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8008a72:	693b      	ldr	r3, [r7, #16]
 8008a74:	f003 0301 	and.w	r3, r3, #1
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d020      	beq.n	8008abe <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a7e:	f003 030f 	and.w	r3, r3, #15
 8008a82:	2201      	movs	r2, #1
 8008a84:	fa02 f303 	lsl.w	r3, r2, r3
 8008a88:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008a8a:	69fb      	ldr	r3, [r7, #28]
 8008a8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	43db      	mvns	r3, r3
 8008a96:	69f9      	ldr	r1, [r7, #28]
 8008a98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008a9c:	4013      	ands	r3, r2
 8008a9e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8008aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aa2:	015a      	lsls	r2, r3, #5
 8008aa4:	69fb      	ldr	r3, [r7, #28]
 8008aa6:	4413      	add	r3, r2
 8008aa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008aac:	461a      	mov	r2, r3
 8008aae:	2301      	movs	r3, #1
 8008ab0:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8008ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ab4:	b2db      	uxtb	r3, r3
 8008ab6:	4619      	mov	r1, r3
 8008ab8:	6878      	ldr	r0, [r7, #4]
 8008aba:	f00a fb32 	bl	8013122 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8008abe:	693b      	ldr	r3, [r7, #16]
 8008ac0:	f003 0308 	and.w	r3, r3, #8
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d008      	beq.n	8008ada <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8008ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aca:	015a      	lsls	r2, r3, #5
 8008acc:	69fb      	ldr	r3, [r7, #28]
 8008ace:	4413      	add	r3, r2
 8008ad0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ad4:	461a      	mov	r2, r3
 8008ad6:	2308      	movs	r3, #8
 8008ad8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8008ada:	693b      	ldr	r3, [r7, #16]
 8008adc:	f003 0310 	and.w	r3, r3, #16
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d008      	beq.n	8008af6 <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8008ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ae6:	015a      	lsls	r2, r3, #5
 8008ae8:	69fb      	ldr	r3, [r7, #28]
 8008aea:	4413      	add	r3, r2
 8008aec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008af0:	461a      	mov	r2, r3
 8008af2:	2310      	movs	r3, #16
 8008af4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8008af6:	693b      	ldr	r3, [r7, #16]
 8008af8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d008      	beq.n	8008b12 <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8008b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b02:	015a      	lsls	r2, r3, #5
 8008b04:	69fb      	ldr	r3, [r7, #28]
 8008b06:	4413      	add	r3, r2
 8008b08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b0c:	461a      	mov	r2, r3
 8008b0e:	2340      	movs	r3, #64	; 0x40
 8008b10:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8008b12:	693b      	ldr	r3, [r7, #16]
 8008b14:	f003 0302 	and.w	r3, r3, #2
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d023      	beq.n	8008b64 <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8008b1c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008b1e:	6a38      	ldr	r0, [r7, #32]
 8008b20:	f004 fce2 	bl	800d4e8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8008b24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b26:	4613      	mov	r3, r2
 8008b28:	00db      	lsls	r3, r3, #3
 8008b2a:	4413      	add	r3, r2
 8008b2c:	009b      	lsls	r3, r3, #2
 8008b2e:	3338      	adds	r3, #56	; 0x38
 8008b30:	687a      	ldr	r2, [r7, #4]
 8008b32:	4413      	add	r3, r2
 8008b34:	3304      	adds	r3, #4
 8008b36:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8008b38:	697b      	ldr	r3, [r7, #20]
 8008b3a:	78db      	ldrb	r3, [r3, #3]
 8008b3c:	2b01      	cmp	r3, #1
 8008b3e:	d108      	bne.n	8008b52 <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 8008b40:	697b      	ldr	r3, [r7, #20]
 8008b42:	2200      	movs	r2, #0
 8008b44:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8008b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b48:	b2db      	uxtb	r3, r3
 8008b4a:	4619      	mov	r1, r3
 8008b4c:	6878      	ldr	r0, [r7, #4]
 8008b4e:	f00a fb8f 	bl	8013270 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8008b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b54:	015a      	lsls	r2, r3, #5
 8008b56:	69fb      	ldr	r3, [r7, #28]
 8008b58:	4413      	add	r3, r2
 8008b5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b5e:	461a      	mov	r2, r3
 8008b60:	2302      	movs	r3, #2
 8008b62:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8008b64:	693b      	ldr	r3, [r7, #16]
 8008b66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d003      	beq.n	8008b76 <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8008b6e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008b70:	6878      	ldr	r0, [r7, #4]
 8008b72:	f000 fcea 	bl	800954a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8008b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b78:	3301      	adds	r3, #1
 8008b7a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8008b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b7e:	085b      	lsrs	r3, r3, #1
 8008b80:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	f47f af65 	bne.w	8008a54 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	4618      	mov	r0, r3
 8008b90:	f005 fc24 	bl	800e3dc <USB_ReadInterrupts>
 8008b94:	4603      	mov	r3, r0
 8008b96:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008b9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008b9e:	d122      	bne.n	8008be6 <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008ba0:	69fb      	ldr	r3, [r7, #28]
 8008ba2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ba6:	685b      	ldr	r3, [r3, #4]
 8008ba8:	69fa      	ldr	r2, [r7, #28]
 8008baa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008bae:	f023 0301 	bic.w	r3, r3, #1
 8008bb2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8008bba:	2b01      	cmp	r3, #1
 8008bbc:	d108      	bne.n	8008bd0 <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8008bc6:	2100      	movs	r1, #0
 8008bc8:	6878      	ldr	r0, [r7, #4]
 8008bca:	f00a fdc1 	bl	8013750 <HAL_PCDEx_LPM_Callback>
 8008bce:	e002      	b.n	8008bd6 <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8008bd0:	6878      	ldr	r0, [r7, #4]
 8008bd2:	f00a fb13 	bl	80131fc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	695a      	ldr	r2, [r3, #20]
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8008be4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	4618      	mov	r0, r3
 8008bec:	f005 fbf6 	bl	800e3dc <USB_ReadInterrupts>
 8008bf0:	4603      	mov	r3, r0
 8008bf2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008bf6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008bfa:	d112      	bne.n	8008c22 <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8008bfc:	69fb      	ldr	r3, [r7, #28]
 8008bfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c02:	689b      	ldr	r3, [r3, #8]
 8008c04:	f003 0301 	and.w	r3, r3, #1
 8008c08:	2b01      	cmp	r3, #1
 8008c0a:	d102      	bne.n	8008c12 <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008c0c:	6878      	ldr	r0, [r7, #4]
 8008c0e:	f00a facf 	bl	80131b0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	695a      	ldr	r2, [r3, #20]
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8008c20:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	4618      	mov	r0, r3
 8008c28:	f005 fbd8 	bl	800e3dc <USB_ReadInterrupts>
 8008c2c:	4603      	mov	r3, r0
 8008c2e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008c32:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008c36:	d121      	bne.n	8008c7c <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	695a      	ldr	r2, [r3, #20]
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8008c46:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d111      	bne.n	8008c76 <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	2201      	movs	r2, #1
 8008c56:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c60:	089b      	lsrs	r3, r3, #2
 8008c62:	f003 020f 	and.w	r2, r3, #15
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8008c6c:	2101      	movs	r1, #1
 8008c6e:	6878      	ldr	r0, [r7, #4]
 8008c70:	f00a fd6e 	bl	8013750 <HAL_PCDEx_LPM_Callback>
 8008c74:	e002      	b.n	8008c7c <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008c76:	6878      	ldr	r0, [r7, #4]
 8008c78:	f00a fa9a 	bl	80131b0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	4618      	mov	r0, r3
 8008c82:	f005 fbab 	bl	800e3dc <USB_ReadInterrupts>
 8008c86:	4603      	mov	r3, r0
 8008c88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008c8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c90:	f040 80b5 	bne.w	8008dfe <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008c94:	69fb      	ldr	r3, [r7, #28]
 8008c96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c9a:	685b      	ldr	r3, [r3, #4]
 8008c9c:	69fa      	ldr	r2, [r7, #28]
 8008c9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008ca2:	f023 0301 	bic.w	r3, r3, #1
 8008ca6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	2110      	movs	r1, #16
 8008cae:	4618      	mov	r0, r3
 8008cb0:	f004 fc1a 	bl	800d4e8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008cb8:	e046      	b.n	8008d48 <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8008cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cbc:	015a      	lsls	r2, r3, #5
 8008cbe:	69fb      	ldr	r3, [r7, #28]
 8008cc0:	4413      	add	r3, r2
 8008cc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cc6:	461a      	mov	r2, r3
 8008cc8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008ccc:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cd0:	015a      	lsls	r2, r3, #5
 8008cd2:	69fb      	ldr	r3, [r7, #28]
 8008cd4:	4413      	add	r3, r2
 8008cd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008cde:	0151      	lsls	r1, r2, #5
 8008ce0:	69fa      	ldr	r2, [r7, #28]
 8008ce2:	440a      	add	r2, r1
 8008ce4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ce8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008cec:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8008cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cf0:	015a      	lsls	r2, r3, #5
 8008cf2:	69fb      	ldr	r3, [r7, #28]
 8008cf4:	4413      	add	r3, r2
 8008cf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cfa:	461a      	mov	r2, r3
 8008cfc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008d00:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d04:	015a      	lsls	r2, r3, #5
 8008d06:	69fb      	ldr	r3, [r7, #28]
 8008d08:	4413      	add	r3, r2
 8008d0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008d12:	0151      	lsls	r1, r2, #5
 8008d14:	69fa      	ldr	r2, [r7, #28]
 8008d16:	440a      	add	r2, r1
 8008d18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008d1c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008d20:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d24:	015a      	lsls	r2, r3, #5
 8008d26:	69fb      	ldr	r3, [r7, #28]
 8008d28:	4413      	add	r3, r2
 8008d2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008d32:	0151      	lsls	r1, r2, #5
 8008d34:	69fa      	ldr	r2, [r7, #28]
 8008d36:	440a      	add	r2, r1
 8008d38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008d3c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008d40:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d44:	3301      	adds	r3, #1
 8008d46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	685b      	ldr	r3, [r3, #4]
 8008d4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008d4e:	429a      	cmp	r2, r3
 8008d50:	d3b3      	bcc.n	8008cba <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8008d52:	69fb      	ldr	r3, [r7, #28]
 8008d54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d58:	69db      	ldr	r3, [r3, #28]
 8008d5a:	69fa      	ldr	r2, [r7, #28]
 8008d5c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008d60:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8008d64:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d016      	beq.n	8008d9c <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8008d6e:	69fb      	ldr	r3, [r7, #28]
 8008d70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008d78:	69fa      	ldr	r2, [r7, #28]
 8008d7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008d7e:	f043 030b 	orr.w	r3, r3, #11
 8008d82:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8008d86:	69fb      	ldr	r3, [r7, #28]
 8008d88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d8e:	69fa      	ldr	r2, [r7, #28]
 8008d90:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008d94:	f043 030b 	orr.w	r3, r3, #11
 8008d98:	6453      	str	r3, [r2, #68]	; 0x44
 8008d9a:	e015      	b.n	8008dc8 <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8008d9c:	69fb      	ldr	r3, [r7, #28]
 8008d9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008da2:	695b      	ldr	r3, [r3, #20]
 8008da4:	69fa      	ldr	r2, [r7, #28]
 8008da6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008daa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008dae:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8008db2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8008db4:	69fb      	ldr	r3, [r7, #28]
 8008db6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008dba:	691b      	ldr	r3, [r3, #16]
 8008dbc:	69fa      	ldr	r2, [r7, #28]
 8008dbe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008dc2:	f043 030b 	orr.w	r3, r3, #11
 8008dc6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8008dc8:	69fb      	ldr	r3, [r7, #28]
 8008dca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	69fa      	ldr	r2, [r7, #28]
 8008dd2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008dd6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008dda:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681a      	ldr	r2, [r3, #0]
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008de6:	4619      	mov	r1, r3
 8008de8:	4610      	mov	r0, r2
 8008dea:	f005 fbbb 	bl	800e564 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	695a      	ldr	r2, [r3, #20]
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8008dfc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	4618      	mov	r0, r3
 8008e04:	f005 faea 	bl	800e3dc <USB_ReadInterrupts>
 8008e08:	4603      	mov	r3, r0
 8008e0a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008e0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e12:	d124      	bne.n	8008e5e <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	4618      	mov	r0, r3
 8008e1a:	f005 fb80 	bl	800e51e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	4618      	mov	r0, r3
 8008e24:	f004 fbdd 	bl	800d5e2 <USB_GetDevSpeed>
 8008e28:	4603      	mov	r3, r0
 8008e2a:	461a      	mov	r2, r3
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681c      	ldr	r4, [r3, #0]
 8008e34:	f001 fc92 	bl	800a75c <HAL_RCC_GetHCLKFreq>
 8008e38:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008e3e:	b2db      	uxtb	r3, r3
 8008e40:	461a      	mov	r2, r3
 8008e42:	4620      	mov	r0, r4
 8008e44:	f004 f8fa 	bl	800d03c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8008e48:	6878      	ldr	r0, [r7, #4]
 8008e4a:	f00a f992 	bl	8013172 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	695a      	ldr	r2, [r3, #20]
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8008e5c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	4618      	mov	r0, r3
 8008e64:	f005 faba 	bl	800e3dc <USB_ReadInterrupts>
 8008e68:	4603      	mov	r3, r0
 8008e6a:	f003 0308 	and.w	r3, r3, #8
 8008e6e:	2b08      	cmp	r3, #8
 8008e70:	d10a      	bne.n	8008e88 <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8008e72:	6878      	ldr	r0, [r7, #4]
 8008e74:	f00a f96f 	bl	8013156 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	695a      	ldr	r2, [r3, #20]
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	f002 0208 	and.w	r2, r2, #8
 8008e86:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	f005 faa5 	bl	800e3dc <USB_ReadInterrupts>
 8008e92:	4603      	mov	r3, r0
 8008e94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e98:	2b80      	cmp	r3, #128	; 0x80
 8008e9a:	d122      	bne.n	8008ee2 <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8008e9c:	6a3b      	ldr	r3, [r7, #32]
 8008e9e:	699b      	ldr	r3, [r3, #24]
 8008ea0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008ea4:	6a3b      	ldr	r3, [r7, #32]
 8008ea6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008ea8:	2301      	movs	r3, #1
 8008eaa:	627b      	str	r3, [r7, #36]	; 0x24
 8008eac:	e014      	b.n	8008ed8 <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8008eae:	6879      	ldr	r1, [r7, #4]
 8008eb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008eb2:	4613      	mov	r3, r2
 8008eb4:	00db      	lsls	r3, r3, #3
 8008eb6:	4413      	add	r3, r2
 8008eb8:	009b      	lsls	r3, r3, #2
 8008eba:	440b      	add	r3, r1
 8008ebc:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8008ec0:	781b      	ldrb	r3, [r3, #0]
 8008ec2:	2b01      	cmp	r3, #1
 8008ec4:	d105      	bne.n	8008ed2 <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8008ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ec8:	b2db      	uxtb	r3, r3
 8008eca:	4619      	mov	r1, r3
 8008ecc:	6878      	ldr	r0, [r7, #4]
 8008ece:	f000 fb0b 	bl	80094e8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ed4:	3301      	adds	r3, #1
 8008ed6:	627b      	str	r3, [r7, #36]	; 0x24
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	685b      	ldr	r3, [r3, #4]
 8008edc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ede:	429a      	cmp	r2, r3
 8008ee0:	d3e5      	bcc.n	8008eae <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	f005 fa78 	bl	800e3dc <USB_ReadInterrupts>
 8008eec:	4603      	mov	r3, r0
 8008eee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008ef2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008ef6:	d13b      	bne.n	8008f70 <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008ef8:	2301      	movs	r3, #1
 8008efa:	627b      	str	r3, [r7, #36]	; 0x24
 8008efc:	e02b      	b.n	8008f56 <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8008efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f00:	015a      	lsls	r2, r3, #5
 8008f02:	69fb      	ldr	r3, [r7, #28]
 8008f04:	4413      	add	r3, r2
 8008f06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8008f0e:	6879      	ldr	r1, [r7, #4]
 8008f10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f12:	4613      	mov	r3, r2
 8008f14:	00db      	lsls	r3, r3, #3
 8008f16:	4413      	add	r3, r2
 8008f18:	009b      	lsls	r3, r3, #2
 8008f1a:	440b      	add	r3, r1
 8008f1c:	3340      	adds	r3, #64	; 0x40
 8008f1e:	781b      	ldrb	r3, [r3, #0]
 8008f20:	2b01      	cmp	r3, #1
 8008f22:	d115      	bne.n	8008f50 <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8008f24:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	da12      	bge.n	8008f50 <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8008f2a:	6879      	ldr	r1, [r7, #4]
 8008f2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f2e:	4613      	mov	r3, r2
 8008f30:	00db      	lsls	r3, r3, #3
 8008f32:	4413      	add	r3, r2
 8008f34:	009b      	lsls	r3, r3, #2
 8008f36:	440b      	add	r3, r1
 8008f38:	333f      	adds	r3, #63	; 0x3f
 8008f3a:	2201      	movs	r2, #1
 8008f3c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8008f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f40:	b2db      	uxtb	r3, r3
 8008f42:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008f46:	b2db      	uxtb	r3, r3
 8008f48:	4619      	mov	r1, r3
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	f000 facc 	bl	80094e8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f52:	3301      	adds	r3, #1
 8008f54:	627b      	str	r3, [r7, #36]	; 0x24
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	685b      	ldr	r3, [r3, #4]
 8008f5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f5c:	429a      	cmp	r2, r3
 8008f5e:	d3ce      	bcc.n	8008efe <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	695a      	ldr	r2, [r3, #20]
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8008f6e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	4618      	mov	r0, r3
 8008f76:	f005 fa31 	bl	800e3dc <USB_ReadInterrupts>
 8008f7a:	4603      	mov	r3, r0
 8008f7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008f80:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008f84:	d155      	bne.n	8009032 <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008f86:	2301      	movs	r3, #1
 8008f88:	627b      	str	r3, [r7, #36]	; 0x24
 8008f8a:	e045      	b.n	8009018 <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8008f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f8e:	015a      	lsls	r2, r3, #5
 8008f90:	69fb      	ldr	r3, [r7, #28]
 8008f92:	4413      	add	r3, r2
 8008f94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8008f9c:	6879      	ldr	r1, [r7, #4]
 8008f9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008fa0:	4613      	mov	r3, r2
 8008fa2:	00db      	lsls	r3, r3, #3
 8008fa4:	4413      	add	r3, r2
 8008fa6:	009b      	lsls	r3, r3, #2
 8008fa8:	440b      	add	r3, r1
 8008faa:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008fae:	781b      	ldrb	r3, [r3, #0]
 8008fb0:	2b01      	cmp	r3, #1
 8008fb2:	d12e      	bne.n	8009012 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8008fb4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	da2b      	bge.n	8009012 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8008fba:	69bb      	ldr	r3, [r7, #24]
 8008fbc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8008fc6:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8008fca:	429a      	cmp	r2, r3
 8008fcc:	d121      	bne.n	8009012 <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8008fce:	6879      	ldr	r1, [r7, #4]
 8008fd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008fd2:	4613      	mov	r3, r2
 8008fd4:	00db      	lsls	r3, r3, #3
 8008fd6:	4413      	add	r3, r2
 8008fd8:	009b      	lsls	r3, r3, #2
 8008fda:	440b      	add	r3, r1
 8008fdc:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8008fe0:	2201      	movs	r2, #1
 8008fe2:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8008fe4:	6a3b      	ldr	r3, [r7, #32]
 8008fe6:	699b      	ldr	r3, [r3, #24]
 8008fe8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008fec:	6a3b      	ldr	r3, [r7, #32]
 8008fee:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8008ff0:	6a3b      	ldr	r3, [r7, #32]
 8008ff2:	695b      	ldr	r3, [r3, #20]
 8008ff4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d10a      	bne.n	8009012 <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8008ffc:	69fb      	ldr	r3, [r7, #28]
 8008ffe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009002:	685b      	ldr	r3, [r3, #4]
 8009004:	69fa      	ldr	r2, [r7, #28]
 8009006:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800900a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800900e:	6053      	str	r3, [r2, #4]
            break;
 8009010:	e007      	b.n	8009022 <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009014:	3301      	adds	r3, #1
 8009016:	627b      	str	r3, [r7, #36]	; 0x24
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	685b      	ldr	r3, [r3, #4]
 800901c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800901e:	429a      	cmp	r2, r3
 8009020:	d3b4      	bcc.n	8008f8c <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	695a      	ldr	r2, [r3, #20]
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8009030:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	4618      	mov	r0, r3
 8009038:	f005 f9d0 	bl	800e3dc <USB_ReadInterrupts>
 800903c:	4603      	mov	r3, r0
 800903e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009042:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009046:	d10a      	bne.n	800905e <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8009048:	6878      	ldr	r0, [r7, #4]
 800904a:	f00a f923 	bl	8013294 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	695a      	ldr	r2, [r3, #20]
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800905c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	4618      	mov	r0, r3
 8009064:	f005 f9ba 	bl	800e3dc <USB_ReadInterrupts>
 8009068:	4603      	mov	r3, r0
 800906a:	f003 0304 	and.w	r3, r3, #4
 800906e:	2b04      	cmp	r3, #4
 8009070:	d115      	bne.n	800909e <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	685b      	ldr	r3, [r3, #4]
 8009078:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800907a:	69bb      	ldr	r3, [r7, #24]
 800907c:	f003 0304 	and.w	r3, r3, #4
 8009080:	2b00      	cmp	r3, #0
 8009082:	d002      	beq.n	800908a <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8009084:	6878      	ldr	r0, [r7, #4]
 8009086:	f00a f913 	bl	80132b0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	6859      	ldr	r1, [r3, #4]
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	69ba      	ldr	r2, [r7, #24]
 8009096:	430a      	orrs	r2, r1
 8009098:	605a      	str	r2, [r3, #4]
 800909a:	e000      	b.n	800909e <HAL_PCD_IRQHandler+0x920>
      return;
 800909c:	bf00      	nop
    }
  }
}
 800909e:	3734      	adds	r7, #52	; 0x34
 80090a0:	46bd      	mov	sp, r7
 80090a2:	bd90      	pop	{r4, r7, pc}

080090a4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b082      	sub	sp, #8
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
 80090ac:	460b      	mov	r3, r1
 80090ae:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80090b6:	2b01      	cmp	r3, #1
 80090b8:	d101      	bne.n	80090be <HAL_PCD_SetAddress+0x1a>
 80090ba:	2302      	movs	r3, #2
 80090bc:	e013      	b.n	80090e6 <HAL_PCD_SetAddress+0x42>
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	2201      	movs	r2, #1
 80090c2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	78fa      	ldrb	r2, [r7, #3]
 80090ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	78fa      	ldrb	r2, [r7, #3]
 80090d4:	4611      	mov	r1, r2
 80090d6:	4618      	mov	r0, r3
 80090d8:	f005 f918 	bl	800e30c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2200      	movs	r2, #0
 80090e0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80090e4:	2300      	movs	r3, #0
}
 80090e6:	4618      	mov	r0, r3
 80090e8:	3708      	adds	r7, #8
 80090ea:	46bd      	mov	sp, r7
 80090ec:	bd80      	pop	{r7, pc}

080090ee <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80090ee:	b580      	push	{r7, lr}
 80090f0:	b084      	sub	sp, #16
 80090f2:	af00      	add	r7, sp, #0
 80090f4:	6078      	str	r0, [r7, #4]
 80090f6:	4608      	mov	r0, r1
 80090f8:	4611      	mov	r1, r2
 80090fa:	461a      	mov	r2, r3
 80090fc:	4603      	mov	r3, r0
 80090fe:	70fb      	strb	r3, [r7, #3]
 8009100:	460b      	mov	r3, r1
 8009102:	803b      	strh	r3, [r7, #0]
 8009104:	4613      	mov	r3, r2
 8009106:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8009108:	2300      	movs	r3, #0
 800910a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800910c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009110:	2b00      	cmp	r3, #0
 8009112:	da0f      	bge.n	8009134 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009114:	78fb      	ldrb	r3, [r7, #3]
 8009116:	f003 020f 	and.w	r2, r3, #15
 800911a:	4613      	mov	r3, r2
 800911c:	00db      	lsls	r3, r3, #3
 800911e:	4413      	add	r3, r2
 8009120:	009b      	lsls	r3, r3, #2
 8009122:	3338      	adds	r3, #56	; 0x38
 8009124:	687a      	ldr	r2, [r7, #4]
 8009126:	4413      	add	r3, r2
 8009128:	3304      	adds	r3, #4
 800912a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	2201      	movs	r2, #1
 8009130:	705a      	strb	r2, [r3, #1]
 8009132:	e00f      	b.n	8009154 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009134:	78fb      	ldrb	r3, [r7, #3]
 8009136:	f003 020f 	and.w	r2, r3, #15
 800913a:	4613      	mov	r3, r2
 800913c:	00db      	lsls	r3, r3, #3
 800913e:	4413      	add	r3, r2
 8009140:	009b      	lsls	r3, r3, #2
 8009142:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009146:	687a      	ldr	r2, [r7, #4]
 8009148:	4413      	add	r3, r2
 800914a:	3304      	adds	r3, #4
 800914c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	2200      	movs	r2, #0
 8009152:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8009154:	78fb      	ldrb	r3, [r7, #3]
 8009156:	f003 030f 	and.w	r3, r3, #15
 800915a:	b2da      	uxtb	r2, r3
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8009160:	883a      	ldrh	r2, [r7, #0]
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	78ba      	ldrb	r2, [r7, #2]
 800916a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	785b      	ldrb	r3, [r3, #1]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d004      	beq.n	800917e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	781b      	ldrb	r3, [r3, #0]
 8009178:	b29a      	uxth	r2, r3
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800917e:	78bb      	ldrb	r3, [r7, #2]
 8009180:	2b02      	cmp	r3, #2
 8009182:	d102      	bne.n	800918a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	2200      	movs	r2, #0
 8009188:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009190:	2b01      	cmp	r3, #1
 8009192:	d101      	bne.n	8009198 <HAL_PCD_EP_Open+0xaa>
 8009194:	2302      	movs	r3, #2
 8009196:	e00e      	b.n	80091b6 <HAL_PCD_EP_Open+0xc8>
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2201      	movs	r2, #1
 800919c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	68f9      	ldr	r1, [r7, #12]
 80091a6:	4618      	mov	r0, r3
 80091a8:	f004 fa3a 	bl	800d620 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2200      	movs	r2, #0
 80091b0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80091b4:	7afb      	ldrb	r3, [r7, #11]
}
 80091b6:	4618      	mov	r0, r3
 80091b8:	3710      	adds	r7, #16
 80091ba:	46bd      	mov	sp, r7
 80091bc:	bd80      	pop	{r7, pc}

080091be <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80091be:	b580      	push	{r7, lr}
 80091c0:	b084      	sub	sp, #16
 80091c2:	af00      	add	r7, sp, #0
 80091c4:	6078      	str	r0, [r7, #4]
 80091c6:	460b      	mov	r3, r1
 80091c8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80091ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	da0f      	bge.n	80091f2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80091d2:	78fb      	ldrb	r3, [r7, #3]
 80091d4:	f003 020f 	and.w	r2, r3, #15
 80091d8:	4613      	mov	r3, r2
 80091da:	00db      	lsls	r3, r3, #3
 80091dc:	4413      	add	r3, r2
 80091de:	009b      	lsls	r3, r3, #2
 80091e0:	3338      	adds	r3, #56	; 0x38
 80091e2:	687a      	ldr	r2, [r7, #4]
 80091e4:	4413      	add	r3, r2
 80091e6:	3304      	adds	r3, #4
 80091e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	2201      	movs	r2, #1
 80091ee:	705a      	strb	r2, [r3, #1]
 80091f0:	e00f      	b.n	8009212 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80091f2:	78fb      	ldrb	r3, [r7, #3]
 80091f4:	f003 020f 	and.w	r2, r3, #15
 80091f8:	4613      	mov	r3, r2
 80091fa:	00db      	lsls	r3, r3, #3
 80091fc:	4413      	add	r3, r2
 80091fe:	009b      	lsls	r3, r3, #2
 8009200:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009204:	687a      	ldr	r2, [r7, #4]
 8009206:	4413      	add	r3, r2
 8009208:	3304      	adds	r3, #4
 800920a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	2200      	movs	r2, #0
 8009210:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8009212:	78fb      	ldrb	r3, [r7, #3]
 8009214:	f003 030f 	and.w	r3, r3, #15
 8009218:	b2da      	uxtb	r2, r3
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009224:	2b01      	cmp	r3, #1
 8009226:	d101      	bne.n	800922c <HAL_PCD_EP_Close+0x6e>
 8009228:	2302      	movs	r3, #2
 800922a:	e00e      	b.n	800924a <HAL_PCD_EP_Close+0x8c>
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	2201      	movs	r2, #1
 8009230:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	68f9      	ldr	r1, [r7, #12]
 800923a:	4618      	mov	r0, r3
 800923c:	f004 fa78 	bl	800d730 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	2200      	movs	r2, #0
 8009244:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8009248:	2300      	movs	r3, #0
}
 800924a:	4618      	mov	r0, r3
 800924c:	3710      	adds	r7, #16
 800924e:	46bd      	mov	sp, r7
 8009250:	bd80      	pop	{r7, pc}

08009252 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009252:	b580      	push	{r7, lr}
 8009254:	b086      	sub	sp, #24
 8009256:	af00      	add	r7, sp, #0
 8009258:	60f8      	str	r0, [r7, #12]
 800925a:	607a      	str	r2, [r7, #4]
 800925c:	603b      	str	r3, [r7, #0]
 800925e:	460b      	mov	r3, r1
 8009260:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009262:	7afb      	ldrb	r3, [r7, #11]
 8009264:	f003 020f 	and.w	r2, r3, #15
 8009268:	4613      	mov	r3, r2
 800926a:	00db      	lsls	r3, r3, #3
 800926c:	4413      	add	r3, r2
 800926e:	009b      	lsls	r3, r3, #2
 8009270:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009274:	68fa      	ldr	r2, [r7, #12]
 8009276:	4413      	add	r3, r2
 8009278:	3304      	adds	r3, #4
 800927a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800927c:	697b      	ldr	r3, [r7, #20]
 800927e:	687a      	ldr	r2, [r7, #4]
 8009280:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8009282:	697b      	ldr	r3, [r7, #20]
 8009284:	683a      	ldr	r2, [r7, #0]
 8009286:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8009288:	697b      	ldr	r3, [r7, #20]
 800928a:	2200      	movs	r2, #0
 800928c:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800928e:	697b      	ldr	r3, [r7, #20]
 8009290:	2200      	movs	r2, #0
 8009292:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009294:	7afb      	ldrb	r3, [r7, #11]
 8009296:	f003 030f 	and.w	r3, r3, #15
 800929a:	b2da      	uxtb	r2, r3
 800929c:	697b      	ldr	r3, [r7, #20]
 800929e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80092a0:	7afb      	ldrb	r3, [r7, #11]
 80092a2:	f003 030f 	and.w	r3, r3, #15
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d106      	bne.n	80092b8 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	6979      	ldr	r1, [r7, #20]
 80092b0:	4618      	mov	r0, r3
 80092b2:	f004 fcf9 	bl	800dca8 <USB_EP0StartXfer>
 80092b6:	e005      	b.n	80092c4 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	6979      	ldr	r1, [r7, #20]
 80092be:	4618      	mov	r0, r3
 80092c0:	f004 fb12 	bl	800d8e8 <USB_EPStartXfer>
  }

  return HAL_OK;
 80092c4:	2300      	movs	r3, #0
}
 80092c6:	4618      	mov	r0, r3
 80092c8:	3718      	adds	r7, #24
 80092ca:	46bd      	mov	sp, r7
 80092cc:	bd80      	pop	{r7, pc}

080092ce <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80092ce:	b480      	push	{r7}
 80092d0:	b083      	sub	sp, #12
 80092d2:	af00      	add	r7, sp, #0
 80092d4:	6078      	str	r0, [r7, #4]
 80092d6:	460b      	mov	r3, r1
 80092d8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80092da:	78fb      	ldrb	r3, [r7, #3]
 80092dc:	f003 020f 	and.w	r2, r3, #15
 80092e0:	6879      	ldr	r1, [r7, #4]
 80092e2:	4613      	mov	r3, r2
 80092e4:	00db      	lsls	r3, r3, #3
 80092e6:	4413      	add	r3, r2
 80092e8:	009b      	lsls	r3, r3, #2
 80092ea:	440b      	add	r3, r1
 80092ec:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80092f0:	681b      	ldr	r3, [r3, #0]
}
 80092f2:	4618      	mov	r0, r3
 80092f4:	370c      	adds	r7, #12
 80092f6:	46bd      	mov	sp, r7
 80092f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fc:	4770      	bx	lr

080092fe <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80092fe:	b580      	push	{r7, lr}
 8009300:	b086      	sub	sp, #24
 8009302:	af00      	add	r7, sp, #0
 8009304:	60f8      	str	r0, [r7, #12]
 8009306:	607a      	str	r2, [r7, #4]
 8009308:	603b      	str	r3, [r7, #0]
 800930a:	460b      	mov	r3, r1
 800930c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800930e:	7afb      	ldrb	r3, [r7, #11]
 8009310:	f003 020f 	and.w	r2, r3, #15
 8009314:	4613      	mov	r3, r2
 8009316:	00db      	lsls	r3, r3, #3
 8009318:	4413      	add	r3, r2
 800931a:	009b      	lsls	r3, r3, #2
 800931c:	3338      	adds	r3, #56	; 0x38
 800931e:	68fa      	ldr	r2, [r7, #12]
 8009320:	4413      	add	r3, r2
 8009322:	3304      	adds	r3, #4
 8009324:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009326:	697b      	ldr	r3, [r7, #20]
 8009328:	687a      	ldr	r2, [r7, #4]
 800932a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800932c:	697b      	ldr	r3, [r7, #20]
 800932e:	683a      	ldr	r2, [r7, #0]
 8009330:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8009332:	697b      	ldr	r3, [r7, #20]
 8009334:	2200      	movs	r2, #0
 8009336:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8009338:	697b      	ldr	r3, [r7, #20]
 800933a:	2201      	movs	r2, #1
 800933c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800933e:	7afb      	ldrb	r3, [r7, #11]
 8009340:	f003 030f 	and.w	r3, r3, #15
 8009344:	b2da      	uxtb	r2, r3
 8009346:	697b      	ldr	r3, [r7, #20]
 8009348:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800934a:	7afb      	ldrb	r3, [r7, #11]
 800934c:	f003 030f 	and.w	r3, r3, #15
 8009350:	2b00      	cmp	r3, #0
 8009352:	d106      	bne.n	8009362 <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	6979      	ldr	r1, [r7, #20]
 800935a:	4618      	mov	r0, r3
 800935c:	f004 fca4 	bl	800dca8 <USB_EP0StartXfer>
 8009360:	e005      	b.n	800936e <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	6979      	ldr	r1, [r7, #20]
 8009368:	4618      	mov	r0, r3
 800936a:	f004 fabd 	bl	800d8e8 <USB_EPStartXfer>
  }

  return HAL_OK;
 800936e:	2300      	movs	r3, #0
}
 8009370:	4618      	mov	r0, r3
 8009372:	3718      	adds	r7, #24
 8009374:	46bd      	mov	sp, r7
 8009376:	bd80      	pop	{r7, pc}

08009378 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b084      	sub	sp, #16
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
 8009380:	460b      	mov	r3, r1
 8009382:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8009384:	78fb      	ldrb	r3, [r7, #3]
 8009386:	f003 020f 	and.w	r2, r3, #15
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	685b      	ldr	r3, [r3, #4]
 800938e:	429a      	cmp	r2, r3
 8009390:	d901      	bls.n	8009396 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8009392:	2301      	movs	r3, #1
 8009394:	e04e      	b.n	8009434 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009396:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800939a:	2b00      	cmp	r3, #0
 800939c:	da0f      	bge.n	80093be <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800939e:	78fb      	ldrb	r3, [r7, #3]
 80093a0:	f003 020f 	and.w	r2, r3, #15
 80093a4:	4613      	mov	r3, r2
 80093a6:	00db      	lsls	r3, r3, #3
 80093a8:	4413      	add	r3, r2
 80093aa:	009b      	lsls	r3, r3, #2
 80093ac:	3338      	adds	r3, #56	; 0x38
 80093ae:	687a      	ldr	r2, [r7, #4]
 80093b0:	4413      	add	r3, r2
 80093b2:	3304      	adds	r3, #4
 80093b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	2201      	movs	r2, #1
 80093ba:	705a      	strb	r2, [r3, #1]
 80093bc:	e00d      	b.n	80093da <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80093be:	78fa      	ldrb	r2, [r7, #3]
 80093c0:	4613      	mov	r3, r2
 80093c2:	00db      	lsls	r3, r3, #3
 80093c4:	4413      	add	r3, r2
 80093c6:	009b      	lsls	r3, r3, #2
 80093c8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80093cc:	687a      	ldr	r2, [r7, #4]
 80093ce:	4413      	add	r3, r2
 80093d0:	3304      	adds	r3, #4
 80093d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	2200      	movs	r2, #0
 80093d8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	2201      	movs	r2, #1
 80093de:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80093e0:	78fb      	ldrb	r3, [r7, #3]
 80093e2:	f003 030f 	and.w	r3, r3, #15
 80093e6:	b2da      	uxtb	r2, r3
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80093f2:	2b01      	cmp	r3, #1
 80093f4:	d101      	bne.n	80093fa <HAL_PCD_EP_SetStall+0x82>
 80093f6:	2302      	movs	r3, #2
 80093f8:	e01c      	b.n	8009434 <HAL_PCD_EP_SetStall+0xbc>
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	2201      	movs	r2, #1
 80093fe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	68f9      	ldr	r1, [r7, #12]
 8009408:	4618      	mov	r0, r3
 800940a:	f004 feab 	bl	800e164 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800940e:	78fb      	ldrb	r3, [r7, #3]
 8009410:	f003 030f 	and.w	r3, r3, #15
 8009414:	2b00      	cmp	r3, #0
 8009416:	d108      	bne.n	800942a <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681a      	ldr	r2, [r3, #0]
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009422:	4619      	mov	r1, r3
 8009424:	4610      	mov	r0, r2
 8009426:	f005 f89d 	bl	800e564 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	2200      	movs	r2, #0
 800942e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8009432:	2300      	movs	r3, #0
}
 8009434:	4618      	mov	r0, r3
 8009436:	3710      	adds	r7, #16
 8009438:	46bd      	mov	sp, r7
 800943a:	bd80      	pop	{r7, pc}

0800943c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800943c:	b580      	push	{r7, lr}
 800943e:	b084      	sub	sp, #16
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
 8009444:	460b      	mov	r3, r1
 8009446:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8009448:	78fb      	ldrb	r3, [r7, #3]
 800944a:	f003 020f 	and.w	r2, r3, #15
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	685b      	ldr	r3, [r3, #4]
 8009452:	429a      	cmp	r2, r3
 8009454:	d901      	bls.n	800945a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8009456:	2301      	movs	r3, #1
 8009458:	e042      	b.n	80094e0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800945a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800945e:	2b00      	cmp	r3, #0
 8009460:	da0f      	bge.n	8009482 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009462:	78fb      	ldrb	r3, [r7, #3]
 8009464:	f003 020f 	and.w	r2, r3, #15
 8009468:	4613      	mov	r3, r2
 800946a:	00db      	lsls	r3, r3, #3
 800946c:	4413      	add	r3, r2
 800946e:	009b      	lsls	r3, r3, #2
 8009470:	3338      	adds	r3, #56	; 0x38
 8009472:	687a      	ldr	r2, [r7, #4]
 8009474:	4413      	add	r3, r2
 8009476:	3304      	adds	r3, #4
 8009478:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	2201      	movs	r2, #1
 800947e:	705a      	strb	r2, [r3, #1]
 8009480:	e00f      	b.n	80094a2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009482:	78fb      	ldrb	r3, [r7, #3]
 8009484:	f003 020f 	and.w	r2, r3, #15
 8009488:	4613      	mov	r3, r2
 800948a:	00db      	lsls	r3, r3, #3
 800948c:	4413      	add	r3, r2
 800948e:	009b      	lsls	r3, r3, #2
 8009490:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009494:	687a      	ldr	r2, [r7, #4]
 8009496:	4413      	add	r3, r2
 8009498:	3304      	adds	r3, #4
 800949a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	2200      	movs	r2, #0
 80094a0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	2200      	movs	r2, #0
 80094a6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80094a8:	78fb      	ldrb	r3, [r7, #3]
 80094aa:	f003 030f 	and.w	r3, r3, #15
 80094ae:	b2da      	uxtb	r2, r3
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80094ba:	2b01      	cmp	r3, #1
 80094bc:	d101      	bne.n	80094c2 <HAL_PCD_EP_ClrStall+0x86>
 80094be:	2302      	movs	r3, #2
 80094c0:	e00e      	b.n	80094e0 <HAL_PCD_EP_ClrStall+0xa4>
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	2201      	movs	r2, #1
 80094c6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	68f9      	ldr	r1, [r7, #12]
 80094d0:	4618      	mov	r0, r3
 80094d2:	f004 feb5 	bl	800e240 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	2200      	movs	r2, #0
 80094da:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80094de:	2300      	movs	r3, #0
}
 80094e0:	4618      	mov	r0, r3
 80094e2:	3710      	adds	r7, #16
 80094e4:	46bd      	mov	sp, r7
 80094e6:	bd80      	pop	{r7, pc}

080094e8 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b084      	sub	sp, #16
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
 80094f0:	460b      	mov	r3, r1
 80094f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80094f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	da0c      	bge.n	8009516 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80094fc:	78fb      	ldrb	r3, [r7, #3]
 80094fe:	f003 020f 	and.w	r2, r3, #15
 8009502:	4613      	mov	r3, r2
 8009504:	00db      	lsls	r3, r3, #3
 8009506:	4413      	add	r3, r2
 8009508:	009b      	lsls	r3, r3, #2
 800950a:	3338      	adds	r3, #56	; 0x38
 800950c:	687a      	ldr	r2, [r7, #4]
 800950e:	4413      	add	r3, r2
 8009510:	3304      	adds	r3, #4
 8009512:	60fb      	str	r3, [r7, #12]
 8009514:	e00c      	b.n	8009530 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009516:	78fb      	ldrb	r3, [r7, #3]
 8009518:	f003 020f 	and.w	r2, r3, #15
 800951c:	4613      	mov	r3, r2
 800951e:	00db      	lsls	r3, r3, #3
 8009520:	4413      	add	r3, r2
 8009522:	009b      	lsls	r3, r3, #2
 8009524:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009528:	687a      	ldr	r2, [r7, #4]
 800952a:	4413      	add	r3, r2
 800952c:	3304      	adds	r3, #4
 800952e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	68f9      	ldr	r1, [r7, #12]
 8009536:	4618      	mov	r0, r3
 8009538:	f004 fcd8 	bl	800deec <USB_EPStopXfer>
 800953c:	4603      	mov	r3, r0
 800953e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8009540:	7afb      	ldrb	r3, [r7, #11]
}
 8009542:	4618      	mov	r0, r3
 8009544:	3710      	adds	r7, #16
 8009546:	46bd      	mov	sp, r7
 8009548:	bd80      	pop	{r7, pc}

0800954a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800954a:	b580      	push	{r7, lr}
 800954c:	b088      	sub	sp, #32
 800954e:	af00      	add	r7, sp, #0
 8009550:	6078      	str	r0, [r7, #4]
 8009552:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800955a:	697b      	ldr	r3, [r7, #20]
 800955c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800955e:	683a      	ldr	r2, [r7, #0]
 8009560:	4613      	mov	r3, r2
 8009562:	00db      	lsls	r3, r3, #3
 8009564:	4413      	add	r3, r2
 8009566:	009b      	lsls	r3, r3, #2
 8009568:	3338      	adds	r3, #56	; 0x38
 800956a:	687a      	ldr	r2, [r7, #4]
 800956c:	4413      	add	r3, r2
 800956e:	3304      	adds	r3, #4
 8009570:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	6a1a      	ldr	r2, [r3, #32]
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	699b      	ldr	r3, [r3, #24]
 800957a:	429a      	cmp	r2, r3
 800957c:	d901      	bls.n	8009582 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800957e:	2301      	movs	r3, #1
 8009580:	e067      	b.n	8009652 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	699a      	ldr	r2, [r3, #24]
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	6a1b      	ldr	r3, [r3, #32]
 800958a:	1ad3      	subs	r3, r2, r3
 800958c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	68db      	ldr	r3, [r3, #12]
 8009592:	69fa      	ldr	r2, [r7, #28]
 8009594:	429a      	cmp	r2, r3
 8009596:	d902      	bls.n	800959e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	68db      	ldr	r3, [r3, #12]
 800959c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800959e:	69fb      	ldr	r3, [r7, #28]
 80095a0:	3303      	adds	r3, #3
 80095a2:	089b      	lsrs	r3, r3, #2
 80095a4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80095a6:	e026      	b.n	80095f6 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	699a      	ldr	r2, [r3, #24]
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	6a1b      	ldr	r3, [r3, #32]
 80095b0:	1ad3      	subs	r3, r2, r3
 80095b2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	68db      	ldr	r3, [r3, #12]
 80095b8:	69fa      	ldr	r2, [r7, #28]
 80095ba:	429a      	cmp	r2, r3
 80095bc:	d902      	bls.n	80095c4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	68db      	ldr	r3, [r3, #12]
 80095c2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80095c4:	69fb      	ldr	r3, [r7, #28]
 80095c6:	3303      	adds	r3, #3
 80095c8:	089b      	lsrs	r3, r3, #2
 80095ca:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	6919      	ldr	r1, [r3, #16]
 80095d0:	683b      	ldr	r3, [r7, #0]
 80095d2:	b2da      	uxtb	r2, r3
 80095d4:	69fb      	ldr	r3, [r7, #28]
 80095d6:	b29b      	uxth	r3, r3
 80095d8:	6978      	ldr	r0, [r7, #20]
 80095da:	f004 fd31 	bl	800e040 <USB_WritePacket>

    ep->xfer_buff  += len;
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	691a      	ldr	r2, [r3, #16]
 80095e2:	69fb      	ldr	r3, [r7, #28]
 80095e4:	441a      	add	r2, r3
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	6a1a      	ldr	r2, [r3, #32]
 80095ee:	69fb      	ldr	r3, [r7, #28]
 80095f0:	441a      	add	r2, r3
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80095f6:	683b      	ldr	r3, [r7, #0]
 80095f8:	015a      	lsls	r2, r3, #5
 80095fa:	693b      	ldr	r3, [r7, #16]
 80095fc:	4413      	add	r3, r2
 80095fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009602:	699b      	ldr	r3, [r3, #24]
 8009604:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009606:	69ba      	ldr	r2, [r7, #24]
 8009608:	429a      	cmp	r2, r3
 800960a:	d809      	bhi.n	8009620 <PCD_WriteEmptyTxFifo+0xd6>
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	6a1a      	ldr	r2, [r3, #32]
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009614:	429a      	cmp	r2, r3
 8009616:	d203      	bcs.n	8009620 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	699b      	ldr	r3, [r3, #24]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d1c3      	bne.n	80095a8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	699a      	ldr	r2, [r3, #24]
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	6a1b      	ldr	r3, [r3, #32]
 8009628:	429a      	cmp	r2, r3
 800962a:	d811      	bhi.n	8009650 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800962c:	683b      	ldr	r3, [r7, #0]
 800962e:	f003 030f 	and.w	r3, r3, #15
 8009632:	2201      	movs	r2, #1
 8009634:	fa02 f303 	lsl.w	r3, r2, r3
 8009638:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800963a:	693b      	ldr	r3, [r7, #16]
 800963c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009640:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009642:	68bb      	ldr	r3, [r7, #8]
 8009644:	43db      	mvns	r3, r3
 8009646:	6939      	ldr	r1, [r7, #16]
 8009648:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800964c:	4013      	ands	r3, r2
 800964e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8009650:	2300      	movs	r3, #0
}
 8009652:	4618      	mov	r0, r3
 8009654:	3720      	adds	r7, #32
 8009656:	46bd      	mov	sp, r7
 8009658:	bd80      	pop	{r7, pc}
	...

0800965c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b086      	sub	sp, #24
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
 8009664:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800966c:	697b      	ldr	r3, [r7, #20]
 800966e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009670:	697b      	ldr	r3, [r7, #20]
 8009672:	333c      	adds	r3, #60	; 0x3c
 8009674:	3304      	adds	r3, #4
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	015a      	lsls	r2, r3, #5
 800967e:	693b      	ldr	r3, [r7, #16]
 8009680:	4413      	add	r3, r2
 8009682:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009686:	689b      	ldr	r3, [r3, #8]
 8009688:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	4a19      	ldr	r2, [pc, #100]	; (80096f4 <PCD_EP_OutXfrComplete_int+0x98>)
 800968e:	4293      	cmp	r3, r2
 8009690:	d124      	bne.n	80096dc <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8009692:	68bb      	ldr	r3, [r7, #8]
 8009694:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009698:	2b00      	cmp	r3, #0
 800969a:	d00a      	beq.n	80096b2 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800969c:	683b      	ldr	r3, [r7, #0]
 800969e:	015a      	lsls	r2, r3, #5
 80096a0:	693b      	ldr	r3, [r7, #16]
 80096a2:	4413      	add	r3, r2
 80096a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096a8:	461a      	mov	r2, r3
 80096aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80096ae:	6093      	str	r3, [r2, #8]
 80096b0:	e01a      	b.n	80096e8 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80096b2:	68bb      	ldr	r3, [r7, #8]
 80096b4:	f003 0320 	and.w	r3, r3, #32
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d008      	beq.n	80096ce <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80096bc:	683b      	ldr	r3, [r7, #0]
 80096be:	015a      	lsls	r2, r3, #5
 80096c0:	693b      	ldr	r3, [r7, #16]
 80096c2:	4413      	add	r3, r2
 80096c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096c8:	461a      	mov	r2, r3
 80096ca:	2320      	movs	r3, #32
 80096cc:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80096ce:	683b      	ldr	r3, [r7, #0]
 80096d0:	b2db      	uxtb	r3, r3
 80096d2:	4619      	mov	r1, r3
 80096d4:	6878      	ldr	r0, [r7, #4]
 80096d6:	f009 fd09 	bl	80130ec <HAL_PCD_DataOutStageCallback>
 80096da:	e005      	b.n	80096e8 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80096dc:	683b      	ldr	r3, [r7, #0]
 80096de:	b2db      	uxtb	r3, r3
 80096e0:	4619      	mov	r1, r3
 80096e2:	6878      	ldr	r0, [r7, #4]
 80096e4:	f009 fd02 	bl	80130ec <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 80096e8:	2300      	movs	r3, #0
}
 80096ea:	4618      	mov	r0, r3
 80096ec:	3718      	adds	r7, #24
 80096ee:	46bd      	mov	sp, r7
 80096f0:	bd80      	pop	{r7, pc}
 80096f2:	bf00      	nop
 80096f4:	4f54310a 	.word	0x4f54310a

080096f8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b086      	sub	sp, #24
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
 8009700:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009708:	697b      	ldr	r3, [r7, #20]
 800970a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800970c:	697b      	ldr	r3, [r7, #20]
 800970e:	333c      	adds	r3, #60	; 0x3c
 8009710:	3304      	adds	r3, #4
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009716:	683b      	ldr	r3, [r7, #0]
 8009718:	015a      	lsls	r2, r3, #5
 800971a:	693b      	ldr	r3, [r7, #16]
 800971c:	4413      	add	r3, r2
 800971e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009722:	689b      	ldr	r3, [r3, #8]
 8009724:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	4a0c      	ldr	r2, [pc, #48]	; (800975c <PCD_EP_OutSetupPacket_int+0x64>)
 800972a:	4293      	cmp	r3, r2
 800972c:	d90e      	bls.n	800974c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800972e:	68bb      	ldr	r3, [r7, #8]
 8009730:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009734:	2b00      	cmp	r3, #0
 8009736:	d009      	beq.n	800974c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009738:	683b      	ldr	r3, [r7, #0]
 800973a:	015a      	lsls	r2, r3, #5
 800973c:	693b      	ldr	r3, [r7, #16]
 800973e:	4413      	add	r3, r2
 8009740:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009744:	461a      	mov	r2, r3
 8009746:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800974a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800974c:	6878      	ldr	r0, [r7, #4]
 800974e:	f009 fcbb 	bl	80130c8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8009752:	2300      	movs	r3, #0
}
 8009754:	4618      	mov	r0, r3
 8009756:	3718      	adds	r7, #24
 8009758:	46bd      	mov	sp, r7
 800975a:	bd80      	pop	{r7, pc}
 800975c:	4f54300a 	.word	0x4f54300a

08009760 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8009760:	b480      	push	{r7}
 8009762:	b085      	sub	sp, #20
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
 8009768:	460b      	mov	r3, r1
 800976a:	70fb      	strb	r3, [r7, #3]
 800976c:	4613      	mov	r3, r2
 800976e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009776:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8009778:	78fb      	ldrb	r3, [r7, #3]
 800977a:	2b00      	cmp	r3, #0
 800977c:	d107      	bne.n	800978e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800977e:	883b      	ldrh	r3, [r7, #0]
 8009780:	0419      	lsls	r1, r3, #16
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	68ba      	ldr	r2, [r7, #8]
 8009788:	430a      	orrs	r2, r1
 800978a:	629a      	str	r2, [r3, #40]	; 0x28
 800978c:	e028      	b.n	80097e0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009794:	0c1b      	lsrs	r3, r3, #16
 8009796:	68ba      	ldr	r2, [r7, #8]
 8009798:	4413      	add	r3, r2
 800979a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800979c:	2300      	movs	r3, #0
 800979e:	73fb      	strb	r3, [r7, #15]
 80097a0:	e00d      	b.n	80097be <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681a      	ldr	r2, [r3, #0]
 80097a6:	7bfb      	ldrb	r3, [r7, #15]
 80097a8:	3340      	adds	r3, #64	; 0x40
 80097aa:	009b      	lsls	r3, r3, #2
 80097ac:	4413      	add	r3, r2
 80097ae:	685b      	ldr	r3, [r3, #4]
 80097b0:	0c1b      	lsrs	r3, r3, #16
 80097b2:	68ba      	ldr	r2, [r7, #8]
 80097b4:	4413      	add	r3, r2
 80097b6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80097b8:	7bfb      	ldrb	r3, [r7, #15]
 80097ba:	3301      	adds	r3, #1
 80097bc:	73fb      	strb	r3, [r7, #15]
 80097be:	7bfa      	ldrb	r2, [r7, #15]
 80097c0:	78fb      	ldrb	r3, [r7, #3]
 80097c2:	3b01      	subs	r3, #1
 80097c4:	429a      	cmp	r2, r3
 80097c6:	d3ec      	bcc.n	80097a2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80097c8:	883b      	ldrh	r3, [r7, #0]
 80097ca:	0418      	lsls	r0, r3, #16
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	6819      	ldr	r1, [r3, #0]
 80097d0:	78fb      	ldrb	r3, [r7, #3]
 80097d2:	3b01      	subs	r3, #1
 80097d4:	68ba      	ldr	r2, [r7, #8]
 80097d6:	4302      	orrs	r2, r0
 80097d8:	3340      	adds	r3, #64	; 0x40
 80097da:	009b      	lsls	r3, r3, #2
 80097dc:	440b      	add	r3, r1
 80097de:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80097e0:	2300      	movs	r3, #0
}
 80097e2:	4618      	mov	r0, r3
 80097e4:	3714      	adds	r7, #20
 80097e6:	46bd      	mov	sp, r7
 80097e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ec:	4770      	bx	lr

080097ee <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80097ee:	b480      	push	{r7}
 80097f0:	b083      	sub	sp, #12
 80097f2:	af00      	add	r7, sp, #0
 80097f4:	6078      	str	r0, [r7, #4]
 80097f6:	460b      	mov	r3, r1
 80097f8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	887a      	ldrh	r2, [r7, #2]
 8009800:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8009802:	2300      	movs	r3, #0
}
 8009804:	4618      	mov	r0, r3
 8009806:	370c      	adds	r7, #12
 8009808:	46bd      	mov	sp, r7
 800980a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980e:	4770      	bx	lr

08009810 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8009810:	b480      	push	{r7}
 8009812:	b085      	sub	sp, #20
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	2201      	movs	r2, #1
 8009822:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	2200      	movs	r2, #0
 800982a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	699b      	ldr	r3, [r3, #24]
 8009832:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800983e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009842:	f043 0303 	orr.w	r3, r3, #3
 8009846:	68fa      	ldr	r2, [r7, #12]
 8009848:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800984a:	2300      	movs	r3, #0
}
 800984c:	4618      	mov	r0, r3
 800984e:	3714      	adds	r7, #20
 8009850:	46bd      	mov	sp, r7
 8009852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009856:	4770      	bx	lr

08009858 <HAL_PWR_EnterSTOPMode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop 0 or Stop 1 mode with WFI instruction.
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop 0 or Stop 1 mode with WFE instruction.
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b082      	sub	sp, #8
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
 8009860:	460b      	mov	r3, r1
 8009862:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));

  if(Regulator == PWR_LOWPOWERREGULATOR_ON)
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800986a:	d104      	bne.n	8009876 <HAL_PWR_EnterSTOPMode+0x1e>
  {
    HAL_PWREx_EnterSTOP1Mode(STOPEntry);
 800986c:	78fb      	ldrb	r3, [r7, #3]
 800986e:	4618      	mov	r0, r3
 8009870:	f000 f908 	bl	8009a84 <HAL_PWREx_EnterSTOP1Mode>
  }
  else
  {
    HAL_PWREx_EnterSTOP0Mode(STOPEntry);
  }
}
 8009874:	e003      	b.n	800987e <HAL_PWR_EnterSTOPMode+0x26>
    HAL_PWREx_EnterSTOP0Mode(STOPEntry);
 8009876:	78fb      	ldrb	r3, [r7, #3]
 8009878:	4618      	mov	r0, r3
 800987a:	f000 f8d9 	bl	8009a30 <HAL_PWREx_EnterSTOP0Mode>
}
 800987e:	bf00      	nop
 8009880:	3708      	adds	r7, #8
 8009882:	46bd      	mov	sp, r7
 8009884:	bd80      	pop	{r7, pc}
	...

08009888 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8009888:	b480      	push	{r7}
 800988a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800988c:	4b0d      	ldr	r3, [pc, #52]	; (80098c4 <HAL_PWREx_GetVoltageRange+0x3c>)
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009894:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009898:	d102      	bne.n	80098a0 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800989a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800989e:	e00b      	b.n	80098b8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80098a0:	4b08      	ldr	r3, [pc, #32]	; (80098c4 <HAL_PWREx_GetVoltageRange+0x3c>)
 80098a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80098a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80098ae:	d102      	bne.n	80098b6 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80098b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80098b4:	e000      	b.n	80098b8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80098b6:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80098b8:	4618      	mov	r0, r3
 80098ba:	46bd      	mov	sp, r7
 80098bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c0:	4770      	bx	lr
 80098c2:	bf00      	nop
 80098c4:	40007000 	.word	0x40007000

080098c8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80098c8:	b480      	push	{r7}
 80098ca:	b085      	sub	sp, #20
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d141      	bne.n	800995a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80098d6:	4b4b      	ldr	r3, [pc, #300]	; (8009a04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80098de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80098e2:	d131      	bne.n	8009948 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80098e4:	4b47      	ldr	r3, [pc, #284]	; (8009a04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80098e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80098ea:	4a46      	ldr	r2, [pc, #280]	; (8009a04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80098ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80098f0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80098f4:	4b43      	ldr	r3, [pc, #268]	; (8009a04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80098fc:	4a41      	ldr	r2, [pc, #260]	; (8009a04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80098fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009902:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8009904:	4b40      	ldr	r3, [pc, #256]	; (8009a08 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	2232      	movs	r2, #50	; 0x32
 800990a:	fb02 f303 	mul.w	r3, r2, r3
 800990e:	4a3f      	ldr	r2, [pc, #252]	; (8009a0c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8009910:	fba2 2303 	umull	r2, r3, r2, r3
 8009914:	0c9b      	lsrs	r3, r3, #18
 8009916:	3301      	adds	r3, #1
 8009918:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800991a:	e002      	b.n	8009922 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	3b01      	subs	r3, #1
 8009920:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009922:	4b38      	ldr	r3, [pc, #224]	; (8009a04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009924:	695b      	ldr	r3, [r3, #20]
 8009926:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800992a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800992e:	d102      	bne.n	8009936 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	2b00      	cmp	r3, #0
 8009934:	d1f2      	bne.n	800991c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8009936:	4b33      	ldr	r3, [pc, #204]	; (8009a04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009938:	695b      	ldr	r3, [r3, #20]
 800993a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800993e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009942:	d158      	bne.n	80099f6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8009944:	2303      	movs	r3, #3
 8009946:	e057      	b.n	80099f8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009948:	4b2e      	ldr	r3, [pc, #184]	; (8009a04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800994a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800994e:	4a2d      	ldr	r2, [pc, #180]	; (8009a04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009950:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009954:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8009958:	e04d      	b.n	80099f6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009960:	d141      	bne.n	80099e6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8009962:	4b28      	ldr	r3, [pc, #160]	; (8009a04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800996a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800996e:	d131      	bne.n	80099d4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009970:	4b24      	ldr	r3, [pc, #144]	; (8009a04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009972:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009976:	4a23      	ldr	r2, [pc, #140]	; (8009a04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009978:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800997c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8009980:	4b20      	ldr	r3, [pc, #128]	; (8009a04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8009988:	4a1e      	ldr	r2, [pc, #120]	; (8009a04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800998a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800998e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8009990:	4b1d      	ldr	r3, [pc, #116]	; (8009a08 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	2232      	movs	r2, #50	; 0x32
 8009996:	fb02 f303 	mul.w	r3, r2, r3
 800999a:	4a1c      	ldr	r2, [pc, #112]	; (8009a0c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800999c:	fba2 2303 	umull	r2, r3, r2, r3
 80099a0:	0c9b      	lsrs	r3, r3, #18
 80099a2:	3301      	adds	r3, #1
 80099a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80099a6:	e002      	b.n	80099ae <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	3b01      	subs	r3, #1
 80099ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80099ae:	4b15      	ldr	r3, [pc, #84]	; (8009a04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80099b0:	695b      	ldr	r3, [r3, #20]
 80099b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80099b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80099ba:	d102      	bne.n	80099c2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d1f2      	bne.n	80099a8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80099c2:	4b10      	ldr	r3, [pc, #64]	; (8009a04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80099c4:	695b      	ldr	r3, [r3, #20]
 80099c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80099ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80099ce:	d112      	bne.n	80099f6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80099d0:	2303      	movs	r3, #3
 80099d2:	e011      	b.n	80099f8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80099d4:	4b0b      	ldr	r3, [pc, #44]	; (8009a04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80099d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80099da:	4a0a      	ldr	r2, [pc, #40]	; (8009a04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80099dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80099e0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80099e4:	e007      	b.n	80099f6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80099e6:	4b07      	ldr	r3, [pc, #28]	; (8009a04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80099ee:	4a05      	ldr	r2, [pc, #20]	; (8009a04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80099f0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80099f4:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80099f6:	2300      	movs	r3, #0
}
 80099f8:	4618      	mov	r0, r3
 80099fa:	3714      	adds	r7, #20
 80099fc:	46bd      	mov	sp, r7
 80099fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a02:	4770      	bx	lr
 8009a04:	40007000 	.word	0x40007000
 8009a08:	20000224 	.word	0x20000224
 8009a0c:	431bde83 	.word	0x431bde83

08009a10 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8009a10:	b480      	push	{r7}
 8009a12:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8009a14:	4b05      	ldr	r3, [pc, #20]	; (8009a2c <HAL_PWREx_EnableVddUSB+0x1c>)
 8009a16:	685b      	ldr	r3, [r3, #4]
 8009a18:	4a04      	ldr	r2, [pc, #16]	; (8009a2c <HAL_PWREx_EnableVddUSB+0x1c>)
 8009a1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009a1e:	6053      	str	r3, [r2, #4]
}
 8009a20:	bf00      	nop
 8009a22:	46bd      	mov	sp, r7
 8009a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a28:	4770      	bx	lr
 8009a2a:	bf00      	nop
 8009a2c:	40007000 	.word	0x40007000

08009a30 <HAL_PWREx_EnterSTOP0Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP0Mode(uint8_t STOPEntry)
{
 8009a30:	b480      	push	{r7}
 8009a32:	b083      	sub	sp, #12
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	4603      	mov	r3, r0
 8009a38:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Stop 0 mode with Main Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP0);
 8009a3a:	4b10      	ldr	r3, [pc, #64]	; (8009a7c <HAL_PWREx_EnterSTOP0Mode+0x4c>)
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	4a0f      	ldr	r2, [pc, #60]	; (8009a7c <HAL_PWREx_EnterSTOP0Mode+0x4c>)
 8009a40:	f023 0307 	bic.w	r3, r3, #7
 8009a44:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8009a46:	4b0e      	ldr	r3, [pc, #56]	; (8009a80 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8009a48:	691b      	ldr	r3, [r3, #16]
 8009a4a:	4a0d      	ldr	r2, [pc, #52]	; (8009a80 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8009a4c:	f043 0304 	orr.w	r3, r3, #4
 8009a50:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8009a52:	79fb      	ldrb	r3, [r7, #7]
 8009a54:	2b01      	cmp	r3, #1
 8009a56:	d101      	bne.n	8009a5c <HAL_PWREx_EnterSTOP0Mode+0x2c>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8009a58:	bf30      	wfi
 8009a5a:	e002      	b.n	8009a62 <HAL_PWREx_EnterSTOP0Mode+0x32>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8009a5c:	bf40      	sev
    __WFE();
 8009a5e:	bf20      	wfe
    __WFE();
 8009a60:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8009a62:	4b07      	ldr	r3, [pc, #28]	; (8009a80 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8009a64:	691b      	ldr	r3, [r3, #16]
 8009a66:	4a06      	ldr	r2, [pc, #24]	; (8009a80 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8009a68:	f023 0304 	bic.w	r3, r3, #4
 8009a6c:	6113      	str	r3, [r2, #16]
}
 8009a6e:	bf00      	nop
 8009a70:	370c      	adds	r7, #12
 8009a72:	46bd      	mov	sp, r7
 8009a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a78:	4770      	bx	lr
 8009a7a:	bf00      	nop
 8009a7c:	40007000 	.word	0x40007000
 8009a80:	e000ed00 	.word	0xe000ed00

08009a84 <HAL_PWREx_EnterSTOP1Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP1Mode(uint8_t STOPEntry)
{
 8009a84:	b480      	push	{r7}
 8009a86:	b083      	sub	sp, #12
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	4603      	mov	r3, r0
 8009a8c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Stop 1 mode with Low-Power Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP1);
 8009a8e:	4b11      	ldr	r3, [pc, #68]	; (8009ad4 <HAL_PWREx_EnterSTOP1Mode+0x50>)
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	f023 0307 	bic.w	r3, r3, #7
 8009a96:	4a0f      	ldr	r2, [pc, #60]	; (8009ad4 <HAL_PWREx_EnterSTOP1Mode+0x50>)
 8009a98:	f043 0301 	orr.w	r3, r3, #1
 8009a9c:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8009a9e:	4b0e      	ldr	r3, [pc, #56]	; (8009ad8 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8009aa0:	691b      	ldr	r3, [r3, #16]
 8009aa2:	4a0d      	ldr	r2, [pc, #52]	; (8009ad8 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8009aa4:	f043 0304 	orr.w	r3, r3, #4
 8009aa8:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8009aaa:	79fb      	ldrb	r3, [r7, #7]
 8009aac:	2b01      	cmp	r3, #1
 8009aae:	d101      	bne.n	8009ab4 <HAL_PWREx_EnterSTOP1Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8009ab0:	bf30      	wfi
 8009ab2:	e002      	b.n	8009aba <HAL_PWREx_EnterSTOP1Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8009ab4:	bf40      	sev
    __WFE();
 8009ab6:	bf20      	wfe
    __WFE();
 8009ab8:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8009aba:	4b07      	ldr	r3, [pc, #28]	; (8009ad8 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8009abc:	691b      	ldr	r3, [r3, #16]
 8009abe:	4a06      	ldr	r2, [pc, #24]	; (8009ad8 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8009ac0:	f023 0304 	bic.w	r3, r3, #4
 8009ac4:	6113      	str	r3, [r2, #16]
}
 8009ac6:	bf00      	nop
 8009ac8:	370c      	adds	r7, #12
 8009aca:	46bd      	mov	sp, r7
 8009acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad0:	4770      	bx	lr
 8009ad2:	bf00      	nop
 8009ad4:	40007000 	.word	0x40007000
 8009ad8:	e000ed00 	.word	0xe000ed00

08009adc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b08a      	sub	sp, #40	; 0x28
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d102      	bne.n	8009af0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8009aea:	2301      	movs	r3, #1
 8009aec:	f000 bc68 	b.w	800a3c0 <HAL_RCC_OscConfig+0x8e4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009af0:	4b97      	ldr	r3, [pc, #604]	; (8009d50 <HAL_RCC_OscConfig+0x274>)
 8009af2:	689b      	ldr	r3, [r3, #8]
 8009af4:	f003 030c 	and.w	r3, r3, #12
 8009af8:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009afa:	4b95      	ldr	r3, [pc, #596]	; (8009d50 <HAL_RCC_OscConfig+0x274>)
 8009afc:	68db      	ldr	r3, [r3, #12]
 8009afe:	f003 0303 	and.w	r3, r3, #3
 8009b02:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	f003 0310 	and.w	r3, r3, #16
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	f000 80e6 	beq.w	8009cde <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8009b12:	6a3b      	ldr	r3, [r7, #32]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d007      	beq.n	8009b28 <HAL_RCC_OscConfig+0x4c>
 8009b18:	6a3b      	ldr	r3, [r7, #32]
 8009b1a:	2b0c      	cmp	r3, #12
 8009b1c:	f040 808d 	bne.w	8009c3a <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8009b20:	69fb      	ldr	r3, [r7, #28]
 8009b22:	2b01      	cmp	r3, #1
 8009b24:	f040 8089 	bne.w	8009c3a <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8009b28:	4b89      	ldr	r3, [pc, #548]	; (8009d50 <HAL_RCC_OscConfig+0x274>)
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	f003 0302 	and.w	r3, r3, #2
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d006      	beq.n	8009b42 <HAL_RCC_OscConfig+0x66>
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	69db      	ldr	r3, [r3, #28]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d102      	bne.n	8009b42 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8009b3c:	2301      	movs	r3, #1
 8009b3e:	f000 bc3f 	b.w	800a3c0 <HAL_RCC_OscConfig+0x8e4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009b46:	4b82      	ldr	r3, [pc, #520]	; (8009d50 <HAL_RCC_OscConfig+0x274>)
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	f003 0308 	and.w	r3, r3, #8
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d004      	beq.n	8009b5c <HAL_RCC_OscConfig+0x80>
 8009b52:	4b7f      	ldr	r3, [pc, #508]	; (8009d50 <HAL_RCC_OscConfig+0x274>)
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009b5a:	e005      	b.n	8009b68 <HAL_RCC_OscConfig+0x8c>
 8009b5c:	4b7c      	ldr	r3, [pc, #496]	; (8009d50 <HAL_RCC_OscConfig+0x274>)
 8009b5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009b62:	091b      	lsrs	r3, r3, #4
 8009b64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009b68:	4293      	cmp	r3, r2
 8009b6a:	d224      	bcs.n	8009bb6 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b70:	4618      	mov	r0, r3
 8009b72:	f000 fe47 	bl	800a804 <RCC_SetFlashLatencyFromMSIRange>
 8009b76:	4603      	mov	r3, r0
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d002      	beq.n	8009b82 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8009b7c:	2301      	movs	r3, #1
 8009b7e:	f000 bc1f 	b.w	800a3c0 <HAL_RCC_OscConfig+0x8e4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009b82:	4b73      	ldr	r3, [pc, #460]	; (8009d50 <HAL_RCC_OscConfig+0x274>)
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	4a72      	ldr	r2, [pc, #456]	; (8009d50 <HAL_RCC_OscConfig+0x274>)
 8009b88:	f043 0308 	orr.w	r3, r3, #8
 8009b8c:	6013      	str	r3, [r2, #0]
 8009b8e:	4b70      	ldr	r3, [pc, #448]	; (8009d50 <HAL_RCC_OscConfig+0x274>)
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b9a:	496d      	ldr	r1, [pc, #436]	; (8009d50 <HAL_RCC_OscConfig+0x274>)
 8009b9c:	4313      	orrs	r3, r2
 8009b9e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009ba0:	4b6b      	ldr	r3, [pc, #428]	; (8009d50 <HAL_RCC_OscConfig+0x274>)
 8009ba2:	685b      	ldr	r3, [r3, #4]
 8009ba4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	6a1b      	ldr	r3, [r3, #32]
 8009bac:	021b      	lsls	r3, r3, #8
 8009bae:	4968      	ldr	r1, [pc, #416]	; (8009d50 <HAL_RCC_OscConfig+0x274>)
 8009bb0:	4313      	orrs	r3, r2
 8009bb2:	604b      	str	r3, [r1, #4]
 8009bb4:	e025      	b.n	8009c02 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009bb6:	4b66      	ldr	r3, [pc, #408]	; (8009d50 <HAL_RCC_OscConfig+0x274>)
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	4a65      	ldr	r2, [pc, #404]	; (8009d50 <HAL_RCC_OscConfig+0x274>)
 8009bbc:	f043 0308 	orr.w	r3, r3, #8
 8009bc0:	6013      	str	r3, [r2, #0]
 8009bc2:	4b63      	ldr	r3, [pc, #396]	; (8009d50 <HAL_RCC_OscConfig+0x274>)
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bce:	4960      	ldr	r1, [pc, #384]	; (8009d50 <HAL_RCC_OscConfig+0x274>)
 8009bd0:	4313      	orrs	r3, r2
 8009bd2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009bd4:	4b5e      	ldr	r3, [pc, #376]	; (8009d50 <HAL_RCC_OscConfig+0x274>)
 8009bd6:	685b      	ldr	r3, [r3, #4]
 8009bd8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	6a1b      	ldr	r3, [r3, #32]
 8009be0:	021b      	lsls	r3, r3, #8
 8009be2:	495b      	ldr	r1, [pc, #364]	; (8009d50 <HAL_RCC_OscConfig+0x274>)
 8009be4:	4313      	orrs	r3, r2
 8009be6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8009be8:	6a3b      	ldr	r3, [r7, #32]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d109      	bne.n	8009c02 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	f000 fe06 	bl	800a804 <RCC_SetFlashLatencyFromMSIRange>
 8009bf8:	4603      	mov	r3, r0
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d001      	beq.n	8009c02 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8009bfe:	2301      	movs	r3, #1
 8009c00:	e3de      	b.n	800a3c0 <HAL_RCC_OscConfig+0x8e4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8009c02:	f000 fd21 	bl	800a648 <HAL_RCC_GetSysClockFreq>
 8009c06:	4602      	mov	r2, r0
 8009c08:	4b51      	ldr	r3, [pc, #324]	; (8009d50 <HAL_RCC_OscConfig+0x274>)
 8009c0a:	689b      	ldr	r3, [r3, #8]
 8009c0c:	091b      	lsrs	r3, r3, #4
 8009c0e:	f003 030f 	and.w	r3, r3, #15
 8009c12:	4950      	ldr	r1, [pc, #320]	; (8009d54 <HAL_RCC_OscConfig+0x278>)
 8009c14:	5ccb      	ldrb	r3, [r1, r3]
 8009c16:	f003 031f 	and.w	r3, r3, #31
 8009c1a:	fa22 f303 	lsr.w	r3, r2, r3
 8009c1e:	4a4e      	ldr	r2, [pc, #312]	; (8009d58 <HAL_RCC_OscConfig+0x27c>)
 8009c20:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8009c22:	4b4e      	ldr	r3, [pc, #312]	; (8009d5c <HAL_RCC_OscConfig+0x280>)
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	4618      	mov	r0, r3
 8009c28:	f7fb f96e 	bl	8004f08 <HAL_InitTick>
 8009c2c:	4603      	mov	r3, r0
 8009c2e:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8009c30:	7dfb      	ldrb	r3, [r7, #23]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d052      	beq.n	8009cdc <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8009c36:	7dfb      	ldrb	r3, [r7, #23]
 8009c38:	e3c2      	b.n	800a3c0 <HAL_RCC_OscConfig+0x8e4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	69db      	ldr	r3, [r3, #28]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d032      	beq.n	8009ca8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8009c42:	4b43      	ldr	r3, [pc, #268]	; (8009d50 <HAL_RCC_OscConfig+0x274>)
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	4a42      	ldr	r2, [pc, #264]	; (8009d50 <HAL_RCC_OscConfig+0x274>)
 8009c48:	f043 0301 	orr.w	r3, r3, #1
 8009c4c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8009c4e:	f7fb fb49 	bl	80052e4 <HAL_GetTick>
 8009c52:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8009c54:	e008      	b.n	8009c68 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009c56:	f7fb fb45 	bl	80052e4 <HAL_GetTick>
 8009c5a:	4602      	mov	r2, r0
 8009c5c:	69bb      	ldr	r3, [r7, #24]
 8009c5e:	1ad3      	subs	r3, r2, r3
 8009c60:	2b02      	cmp	r3, #2
 8009c62:	d901      	bls.n	8009c68 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8009c64:	2303      	movs	r3, #3
 8009c66:	e3ab      	b.n	800a3c0 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8009c68:	4b39      	ldr	r3, [pc, #228]	; (8009d50 <HAL_RCC_OscConfig+0x274>)
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	f003 0302 	and.w	r3, r3, #2
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d0f0      	beq.n	8009c56 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009c74:	4b36      	ldr	r3, [pc, #216]	; (8009d50 <HAL_RCC_OscConfig+0x274>)
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	4a35      	ldr	r2, [pc, #212]	; (8009d50 <HAL_RCC_OscConfig+0x274>)
 8009c7a:	f043 0308 	orr.w	r3, r3, #8
 8009c7e:	6013      	str	r3, [r2, #0]
 8009c80:	4b33      	ldr	r3, [pc, #204]	; (8009d50 <HAL_RCC_OscConfig+0x274>)
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c8c:	4930      	ldr	r1, [pc, #192]	; (8009d50 <HAL_RCC_OscConfig+0x274>)
 8009c8e:	4313      	orrs	r3, r2
 8009c90:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009c92:	4b2f      	ldr	r3, [pc, #188]	; (8009d50 <HAL_RCC_OscConfig+0x274>)
 8009c94:	685b      	ldr	r3, [r3, #4]
 8009c96:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	6a1b      	ldr	r3, [r3, #32]
 8009c9e:	021b      	lsls	r3, r3, #8
 8009ca0:	492b      	ldr	r1, [pc, #172]	; (8009d50 <HAL_RCC_OscConfig+0x274>)
 8009ca2:	4313      	orrs	r3, r2
 8009ca4:	604b      	str	r3, [r1, #4]
 8009ca6:	e01a      	b.n	8009cde <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8009ca8:	4b29      	ldr	r3, [pc, #164]	; (8009d50 <HAL_RCC_OscConfig+0x274>)
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	4a28      	ldr	r2, [pc, #160]	; (8009d50 <HAL_RCC_OscConfig+0x274>)
 8009cae:	f023 0301 	bic.w	r3, r3, #1
 8009cb2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8009cb4:	f7fb fb16 	bl	80052e4 <HAL_GetTick>
 8009cb8:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8009cba:	e008      	b.n	8009cce <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009cbc:	f7fb fb12 	bl	80052e4 <HAL_GetTick>
 8009cc0:	4602      	mov	r2, r0
 8009cc2:	69bb      	ldr	r3, [r7, #24]
 8009cc4:	1ad3      	subs	r3, r2, r3
 8009cc6:	2b02      	cmp	r3, #2
 8009cc8:	d901      	bls.n	8009cce <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8009cca:	2303      	movs	r3, #3
 8009ccc:	e378      	b.n	800a3c0 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8009cce:	4b20      	ldr	r3, [pc, #128]	; (8009d50 <HAL_RCC_OscConfig+0x274>)
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	f003 0302 	and.w	r3, r3, #2
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d1f0      	bne.n	8009cbc <HAL_RCC_OscConfig+0x1e0>
 8009cda:	e000      	b.n	8009cde <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8009cdc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	f003 0301 	and.w	r3, r3, #1
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d073      	beq.n	8009dd2 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8009cea:	6a3b      	ldr	r3, [r7, #32]
 8009cec:	2b08      	cmp	r3, #8
 8009cee:	d005      	beq.n	8009cfc <HAL_RCC_OscConfig+0x220>
 8009cf0:	6a3b      	ldr	r3, [r7, #32]
 8009cf2:	2b0c      	cmp	r3, #12
 8009cf4:	d10e      	bne.n	8009d14 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8009cf6:	69fb      	ldr	r3, [r7, #28]
 8009cf8:	2b03      	cmp	r3, #3
 8009cfa:	d10b      	bne.n	8009d14 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009cfc:	4b14      	ldr	r3, [pc, #80]	; (8009d50 <HAL_RCC_OscConfig+0x274>)
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d063      	beq.n	8009dd0 <HAL_RCC_OscConfig+0x2f4>
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	685b      	ldr	r3, [r3, #4]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d15f      	bne.n	8009dd0 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8009d10:	2301      	movs	r3, #1
 8009d12:	e355      	b.n	800a3c0 <HAL_RCC_OscConfig+0x8e4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	685b      	ldr	r3, [r3, #4]
 8009d18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d1c:	d106      	bne.n	8009d2c <HAL_RCC_OscConfig+0x250>
 8009d1e:	4b0c      	ldr	r3, [pc, #48]	; (8009d50 <HAL_RCC_OscConfig+0x274>)
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	4a0b      	ldr	r2, [pc, #44]	; (8009d50 <HAL_RCC_OscConfig+0x274>)
 8009d24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009d28:	6013      	str	r3, [r2, #0]
 8009d2a:	e025      	b.n	8009d78 <HAL_RCC_OscConfig+0x29c>
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	685b      	ldr	r3, [r3, #4]
 8009d30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009d34:	d114      	bne.n	8009d60 <HAL_RCC_OscConfig+0x284>
 8009d36:	4b06      	ldr	r3, [pc, #24]	; (8009d50 <HAL_RCC_OscConfig+0x274>)
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	4a05      	ldr	r2, [pc, #20]	; (8009d50 <HAL_RCC_OscConfig+0x274>)
 8009d3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009d40:	6013      	str	r3, [r2, #0]
 8009d42:	4b03      	ldr	r3, [pc, #12]	; (8009d50 <HAL_RCC_OscConfig+0x274>)
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	4a02      	ldr	r2, [pc, #8]	; (8009d50 <HAL_RCC_OscConfig+0x274>)
 8009d48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009d4c:	6013      	str	r3, [r2, #0]
 8009d4e:	e013      	b.n	8009d78 <HAL_RCC_OscConfig+0x29c>
 8009d50:	40021000 	.word	0x40021000
 8009d54:	08016e54 	.word	0x08016e54
 8009d58:	20000224 	.word	0x20000224
 8009d5c:	20000228 	.word	0x20000228
 8009d60:	4b8f      	ldr	r3, [pc, #572]	; (8009fa0 <HAL_RCC_OscConfig+0x4c4>)
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	4a8e      	ldr	r2, [pc, #568]	; (8009fa0 <HAL_RCC_OscConfig+0x4c4>)
 8009d66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009d6a:	6013      	str	r3, [r2, #0]
 8009d6c:	4b8c      	ldr	r3, [pc, #560]	; (8009fa0 <HAL_RCC_OscConfig+0x4c4>)
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	4a8b      	ldr	r2, [pc, #556]	; (8009fa0 <HAL_RCC_OscConfig+0x4c4>)
 8009d72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009d76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	685b      	ldr	r3, [r3, #4]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d013      	beq.n	8009da8 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d80:	f7fb fab0 	bl	80052e4 <HAL_GetTick>
 8009d84:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009d86:	e008      	b.n	8009d9a <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009d88:	f7fb faac 	bl	80052e4 <HAL_GetTick>
 8009d8c:	4602      	mov	r2, r0
 8009d8e:	69bb      	ldr	r3, [r7, #24]
 8009d90:	1ad3      	subs	r3, r2, r3
 8009d92:	2b64      	cmp	r3, #100	; 0x64
 8009d94:	d901      	bls.n	8009d9a <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8009d96:	2303      	movs	r3, #3
 8009d98:	e312      	b.n	800a3c0 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009d9a:	4b81      	ldr	r3, [pc, #516]	; (8009fa0 <HAL_RCC_OscConfig+0x4c4>)
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d0f0      	beq.n	8009d88 <HAL_RCC_OscConfig+0x2ac>
 8009da6:	e014      	b.n	8009dd2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009da8:	f7fb fa9c 	bl	80052e4 <HAL_GetTick>
 8009dac:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009dae:	e008      	b.n	8009dc2 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009db0:	f7fb fa98 	bl	80052e4 <HAL_GetTick>
 8009db4:	4602      	mov	r2, r0
 8009db6:	69bb      	ldr	r3, [r7, #24]
 8009db8:	1ad3      	subs	r3, r2, r3
 8009dba:	2b64      	cmp	r3, #100	; 0x64
 8009dbc:	d901      	bls.n	8009dc2 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8009dbe:	2303      	movs	r3, #3
 8009dc0:	e2fe      	b.n	800a3c0 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009dc2:	4b77      	ldr	r3, [pc, #476]	; (8009fa0 <HAL_RCC_OscConfig+0x4c4>)
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d1f0      	bne.n	8009db0 <HAL_RCC_OscConfig+0x2d4>
 8009dce:	e000      	b.n	8009dd2 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009dd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	f003 0302 	and.w	r3, r3, #2
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d060      	beq.n	8009ea0 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8009dde:	6a3b      	ldr	r3, [r7, #32]
 8009de0:	2b04      	cmp	r3, #4
 8009de2:	d005      	beq.n	8009df0 <HAL_RCC_OscConfig+0x314>
 8009de4:	6a3b      	ldr	r3, [r7, #32]
 8009de6:	2b0c      	cmp	r3, #12
 8009de8:	d119      	bne.n	8009e1e <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8009dea:	69fb      	ldr	r3, [r7, #28]
 8009dec:	2b02      	cmp	r3, #2
 8009dee:	d116      	bne.n	8009e1e <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009df0:	4b6b      	ldr	r3, [pc, #428]	; (8009fa0 <HAL_RCC_OscConfig+0x4c4>)
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d005      	beq.n	8009e08 <HAL_RCC_OscConfig+0x32c>
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	68db      	ldr	r3, [r3, #12]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d101      	bne.n	8009e08 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8009e04:	2301      	movs	r3, #1
 8009e06:	e2db      	b.n	800a3c0 <HAL_RCC_OscConfig+0x8e4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009e08:	4b65      	ldr	r3, [pc, #404]	; (8009fa0 <HAL_RCC_OscConfig+0x4c4>)
 8009e0a:	685b      	ldr	r3, [r3, #4]
 8009e0c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	691b      	ldr	r3, [r3, #16]
 8009e14:	061b      	lsls	r3, r3, #24
 8009e16:	4962      	ldr	r1, [pc, #392]	; (8009fa0 <HAL_RCC_OscConfig+0x4c4>)
 8009e18:	4313      	orrs	r3, r2
 8009e1a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009e1c:	e040      	b.n	8009ea0 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	68db      	ldr	r3, [r3, #12]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d023      	beq.n	8009e6e <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009e26:	4b5e      	ldr	r3, [pc, #376]	; (8009fa0 <HAL_RCC_OscConfig+0x4c4>)
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	4a5d      	ldr	r2, [pc, #372]	; (8009fa0 <HAL_RCC_OscConfig+0x4c4>)
 8009e2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009e30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e32:	f7fb fa57 	bl	80052e4 <HAL_GetTick>
 8009e36:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009e38:	e008      	b.n	8009e4c <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009e3a:	f7fb fa53 	bl	80052e4 <HAL_GetTick>
 8009e3e:	4602      	mov	r2, r0
 8009e40:	69bb      	ldr	r3, [r7, #24]
 8009e42:	1ad3      	subs	r3, r2, r3
 8009e44:	2b02      	cmp	r3, #2
 8009e46:	d901      	bls.n	8009e4c <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8009e48:	2303      	movs	r3, #3
 8009e4a:	e2b9      	b.n	800a3c0 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009e4c:	4b54      	ldr	r3, [pc, #336]	; (8009fa0 <HAL_RCC_OscConfig+0x4c4>)
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d0f0      	beq.n	8009e3a <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009e58:	4b51      	ldr	r3, [pc, #324]	; (8009fa0 <HAL_RCC_OscConfig+0x4c4>)
 8009e5a:	685b      	ldr	r3, [r3, #4]
 8009e5c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	691b      	ldr	r3, [r3, #16]
 8009e64:	061b      	lsls	r3, r3, #24
 8009e66:	494e      	ldr	r1, [pc, #312]	; (8009fa0 <HAL_RCC_OscConfig+0x4c4>)
 8009e68:	4313      	orrs	r3, r2
 8009e6a:	604b      	str	r3, [r1, #4]
 8009e6c:	e018      	b.n	8009ea0 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009e6e:	4b4c      	ldr	r3, [pc, #304]	; (8009fa0 <HAL_RCC_OscConfig+0x4c4>)
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	4a4b      	ldr	r2, [pc, #300]	; (8009fa0 <HAL_RCC_OscConfig+0x4c4>)
 8009e74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009e78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e7a:	f7fb fa33 	bl	80052e4 <HAL_GetTick>
 8009e7e:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009e80:	e008      	b.n	8009e94 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009e82:	f7fb fa2f 	bl	80052e4 <HAL_GetTick>
 8009e86:	4602      	mov	r2, r0
 8009e88:	69bb      	ldr	r3, [r7, #24]
 8009e8a:	1ad3      	subs	r3, r2, r3
 8009e8c:	2b02      	cmp	r3, #2
 8009e8e:	d901      	bls.n	8009e94 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8009e90:	2303      	movs	r3, #3
 8009e92:	e295      	b.n	800a3c0 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009e94:	4b42      	ldr	r3, [pc, #264]	; (8009fa0 <HAL_RCC_OscConfig+0x4c4>)
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d1f0      	bne.n	8009e82 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	f003 0308 	and.w	r3, r3, #8
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	f000 8082 	beq.w	8009fb2 <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	695b      	ldr	r3, [r3, #20]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d05f      	beq.n	8009f76 <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8009eb6:	4b3a      	ldr	r3, [pc, #232]	; (8009fa0 <HAL_RCC_OscConfig+0x4c4>)
 8009eb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009ebc:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	699a      	ldr	r2, [r3, #24]
 8009ec2:	693b      	ldr	r3, [r7, #16]
 8009ec4:	f003 0310 	and.w	r3, r3, #16
 8009ec8:	429a      	cmp	r2, r3
 8009eca:	d037      	beq.n	8009f3c <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8009ecc:	693b      	ldr	r3, [r7, #16]
 8009ece:	f003 0302 	and.w	r3, r3, #2
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d006      	beq.n	8009ee4 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8009ed6:	693b      	ldr	r3, [r7, #16]
 8009ed8:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d101      	bne.n	8009ee4 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8009ee0:	2301      	movs	r3, #1
 8009ee2:	e26d      	b.n	800a3c0 <HAL_RCC_OscConfig+0x8e4>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8009ee4:	693b      	ldr	r3, [r7, #16]
 8009ee6:	f003 0301 	and.w	r3, r3, #1
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d01b      	beq.n	8009f26 <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 8009eee:	4b2c      	ldr	r3, [pc, #176]	; (8009fa0 <HAL_RCC_OscConfig+0x4c4>)
 8009ef0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009ef4:	4a2a      	ldr	r2, [pc, #168]	; (8009fa0 <HAL_RCC_OscConfig+0x4c4>)
 8009ef6:	f023 0301 	bic.w	r3, r3, #1
 8009efa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009efe:	f7fb f9f1 	bl	80052e4 <HAL_GetTick>
 8009f02:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009f04:	e008      	b.n	8009f18 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009f06:	f7fb f9ed 	bl	80052e4 <HAL_GetTick>
 8009f0a:	4602      	mov	r2, r0
 8009f0c:	69bb      	ldr	r3, [r7, #24]
 8009f0e:	1ad3      	subs	r3, r2, r3
 8009f10:	2b11      	cmp	r3, #17
 8009f12:	d901      	bls.n	8009f18 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8009f14:	2303      	movs	r3, #3
 8009f16:	e253      	b.n	800a3c0 <HAL_RCC_OscConfig+0x8e4>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009f18:	4b21      	ldr	r3, [pc, #132]	; (8009fa0 <HAL_RCC_OscConfig+0x4c4>)
 8009f1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009f1e:	f003 0302 	and.w	r3, r3, #2
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d1ef      	bne.n	8009f06 <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8009f26:	4b1e      	ldr	r3, [pc, #120]	; (8009fa0 <HAL_RCC_OscConfig+0x4c4>)
 8009f28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009f2c:	f023 0210 	bic.w	r2, r3, #16
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	699b      	ldr	r3, [r3, #24]
 8009f34:	491a      	ldr	r1, [pc, #104]	; (8009fa0 <HAL_RCC_OscConfig+0x4c4>)
 8009f36:	4313      	orrs	r3, r2
 8009f38:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009f3c:	4b18      	ldr	r3, [pc, #96]	; (8009fa0 <HAL_RCC_OscConfig+0x4c4>)
 8009f3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009f42:	4a17      	ldr	r2, [pc, #92]	; (8009fa0 <HAL_RCC_OscConfig+0x4c4>)
 8009f44:	f043 0301 	orr.w	r3, r3, #1
 8009f48:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009f4c:	f7fb f9ca 	bl	80052e4 <HAL_GetTick>
 8009f50:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009f52:	e008      	b.n	8009f66 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009f54:	f7fb f9c6 	bl	80052e4 <HAL_GetTick>
 8009f58:	4602      	mov	r2, r0
 8009f5a:	69bb      	ldr	r3, [r7, #24]
 8009f5c:	1ad3      	subs	r3, r2, r3
 8009f5e:	2b11      	cmp	r3, #17
 8009f60:	d901      	bls.n	8009f66 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8009f62:	2303      	movs	r3, #3
 8009f64:	e22c      	b.n	800a3c0 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009f66:	4b0e      	ldr	r3, [pc, #56]	; (8009fa0 <HAL_RCC_OscConfig+0x4c4>)
 8009f68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009f6c:	f003 0302 	and.w	r3, r3, #2
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d0ef      	beq.n	8009f54 <HAL_RCC_OscConfig+0x478>
 8009f74:	e01d      	b.n	8009fb2 <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009f76:	4b0a      	ldr	r3, [pc, #40]	; (8009fa0 <HAL_RCC_OscConfig+0x4c4>)
 8009f78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009f7c:	4a08      	ldr	r2, [pc, #32]	; (8009fa0 <HAL_RCC_OscConfig+0x4c4>)
 8009f7e:	f023 0301 	bic.w	r3, r3, #1
 8009f82:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009f86:	f7fb f9ad 	bl	80052e4 <HAL_GetTick>
 8009f8a:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009f8c:	e00a      	b.n	8009fa4 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009f8e:	f7fb f9a9 	bl	80052e4 <HAL_GetTick>
 8009f92:	4602      	mov	r2, r0
 8009f94:	69bb      	ldr	r3, [r7, #24]
 8009f96:	1ad3      	subs	r3, r2, r3
 8009f98:	2b11      	cmp	r3, #17
 8009f9a:	d903      	bls.n	8009fa4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8009f9c:	2303      	movs	r3, #3
 8009f9e:	e20f      	b.n	800a3c0 <HAL_RCC_OscConfig+0x8e4>
 8009fa0:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009fa4:	4b83      	ldr	r3, [pc, #524]	; (800a1b4 <HAL_RCC_OscConfig+0x6d8>)
 8009fa6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009faa:	f003 0302 	and.w	r3, r3, #2
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d1ed      	bne.n	8009f8e <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	f003 0304 	and.w	r3, r3, #4
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	f000 80bd 	beq.w	800a13a <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8009fc6:	4b7b      	ldr	r3, [pc, #492]	; (800a1b4 <HAL_RCC_OscConfig+0x6d8>)
 8009fc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009fca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d10e      	bne.n	8009ff0 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009fd2:	4b78      	ldr	r3, [pc, #480]	; (800a1b4 <HAL_RCC_OscConfig+0x6d8>)
 8009fd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009fd6:	4a77      	ldr	r2, [pc, #476]	; (800a1b4 <HAL_RCC_OscConfig+0x6d8>)
 8009fd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009fdc:	6593      	str	r3, [r2, #88]	; 0x58
 8009fde:	4b75      	ldr	r3, [pc, #468]	; (800a1b4 <HAL_RCC_OscConfig+0x6d8>)
 8009fe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009fe2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009fe6:	60fb      	str	r3, [r7, #12]
 8009fe8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8009fea:	2301      	movs	r3, #1
 8009fec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009ff0:	4b71      	ldr	r3, [pc, #452]	; (800a1b8 <HAL_RCC_OscConfig+0x6dc>)
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d118      	bne.n	800a02e <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009ffc:	4b6e      	ldr	r3, [pc, #440]	; (800a1b8 <HAL_RCC_OscConfig+0x6dc>)
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	4a6d      	ldr	r2, [pc, #436]	; (800a1b8 <HAL_RCC_OscConfig+0x6dc>)
 800a002:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a006:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a008:	f7fb f96c 	bl	80052e4 <HAL_GetTick>
 800a00c:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a00e:	e008      	b.n	800a022 <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a010:	f7fb f968 	bl	80052e4 <HAL_GetTick>
 800a014:	4602      	mov	r2, r0
 800a016:	69bb      	ldr	r3, [r7, #24]
 800a018:	1ad3      	subs	r3, r2, r3
 800a01a:	2b02      	cmp	r3, #2
 800a01c:	d901      	bls.n	800a022 <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 800a01e:	2303      	movs	r3, #3
 800a020:	e1ce      	b.n	800a3c0 <HAL_RCC_OscConfig+0x8e4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a022:	4b65      	ldr	r3, [pc, #404]	; (800a1b8 <HAL_RCC_OscConfig+0x6dc>)
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d0f0      	beq.n	800a010 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	689b      	ldr	r3, [r3, #8]
 800a032:	f003 0301 	and.w	r3, r3, #1
 800a036:	2b00      	cmp	r3, #0
 800a038:	d02c      	beq.n	800a094 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 800a03a:	4b5e      	ldr	r3, [pc, #376]	; (800a1b4 <HAL_RCC_OscConfig+0x6d8>)
 800a03c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a040:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	689b      	ldr	r3, [r3, #8]
 800a048:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a04c:	4959      	ldr	r1, [pc, #356]	; (800a1b4 <HAL_RCC_OscConfig+0x6d8>)
 800a04e:	4313      	orrs	r3, r2
 800a050:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	689b      	ldr	r3, [r3, #8]
 800a058:	f003 0304 	and.w	r3, r3, #4
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d010      	beq.n	800a082 <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800a060:	4b54      	ldr	r3, [pc, #336]	; (800a1b4 <HAL_RCC_OscConfig+0x6d8>)
 800a062:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a066:	4a53      	ldr	r2, [pc, #332]	; (800a1b4 <HAL_RCC_OscConfig+0x6d8>)
 800a068:	f043 0304 	orr.w	r3, r3, #4
 800a06c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800a070:	4b50      	ldr	r3, [pc, #320]	; (800a1b4 <HAL_RCC_OscConfig+0x6d8>)
 800a072:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a076:	4a4f      	ldr	r2, [pc, #316]	; (800a1b4 <HAL_RCC_OscConfig+0x6d8>)
 800a078:	f043 0301 	orr.w	r3, r3, #1
 800a07c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a080:	e018      	b.n	800a0b4 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800a082:	4b4c      	ldr	r3, [pc, #304]	; (800a1b4 <HAL_RCC_OscConfig+0x6d8>)
 800a084:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a088:	4a4a      	ldr	r2, [pc, #296]	; (800a1b4 <HAL_RCC_OscConfig+0x6d8>)
 800a08a:	f043 0301 	orr.w	r3, r3, #1
 800a08e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a092:	e00f      	b.n	800a0b4 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800a094:	4b47      	ldr	r3, [pc, #284]	; (800a1b4 <HAL_RCC_OscConfig+0x6d8>)
 800a096:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a09a:	4a46      	ldr	r2, [pc, #280]	; (800a1b4 <HAL_RCC_OscConfig+0x6d8>)
 800a09c:	f023 0301 	bic.w	r3, r3, #1
 800a0a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800a0a4:	4b43      	ldr	r3, [pc, #268]	; (800a1b4 <HAL_RCC_OscConfig+0x6d8>)
 800a0a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a0aa:	4a42      	ldr	r2, [pc, #264]	; (800a1b4 <HAL_RCC_OscConfig+0x6d8>)
 800a0ac:	f023 0304 	bic.w	r3, r3, #4
 800a0b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	689b      	ldr	r3, [r3, #8]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d016      	beq.n	800a0ea <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a0bc:	f7fb f912 	bl	80052e4 <HAL_GetTick>
 800a0c0:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a0c2:	e00a      	b.n	800a0da <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a0c4:	f7fb f90e 	bl	80052e4 <HAL_GetTick>
 800a0c8:	4602      	mov	r2, r0
 800a0ca:	69bb      	ldr	r3, [r7, #24]
 800a0cc:	1ad3      	subs	r3, r2, r3
 800a0ce:	f241 3288 	movw	r2, #5000	; 0x1388
 800a0d2:	4293      	cmp	r3, r2
 800a0d4:	d901      	bls.n	800a0da <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 800a0d6:	2303      	movs	r3, #3
 800a0d8:	e172      	b.n	800a3c0 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a0da:	4b36      	ldr	r3, [pc, #216]	; (800a1b4 <HAL_RCC_OscConfig+0x6d8>)
 800a0dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a0e0:	f003 0302 	and.w	r3, r3, #2
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d0ed      	beq.n	800a0c4 <HAL_RCC_OscConfig+0x5e8>
 800a0e8:	e01d      	b.n	800a126 <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a0ea:	f7fb f8fb 	bl	80052e4 <HAL_GetTick>
 800a0ee:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a0f0:	e00a      	b.n	800a108 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a0f2:	f7fb f8f7 	bl	80052e4 <HAL_GetTick>
 800a0f6:	4602      	mov	r2, r0
 800a0f8:	69bb      	ldr	r3, [r7, #24]
 800a0fa:	1ad3      	subs	r3, r2, r3
 800a0fc:	f241 3288 	movw	r2, #5000	; 0x1388
 800a100:	4293      	cmp	r3, r2
 800a102:	d901      	bls.n	800a108 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 800a104:	2303      	movs	r3, #3
 800a106:	e15b      	b.n	800a3c0 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a108:	4b2a      	ldr	r3, [pc, #168]	; (800a1b4 <HAL_RCC_OscConfig+0x6d8>)
 800a10a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a10e:	f003 0302 	and.w	r3, r3, #2
 800a112:	2b00      	cmp	r3, #0
 800a114:	d1ed      	bne.n	800a0f2 <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 800a116:	4b27      	ldr	r3, [pc, #156]	; (800a1b4 <HAL_RCC_OscConfig+0x6d8>)
 800a118:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a11c:	4a25      	ldr	r2, [pc, #148]	; (800a1b4 <HAL_RCC_OscConfig+0x6d8>)
 800a11e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a122:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a126:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a12a:	2b01      	cmp	r3, #1
 800a12c:	d105      	bne.n	800a13a <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a12e:	4b21      	ldr	r3, [pc, #132]	; (800a1b4 <HAL_RCC_OscConfig+0x6d8>)
 800a130:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a132:	4a20      	ldr	r2, [pc, #128]	; (800a1b4 <HAL_RCC_OscConfig+0x6d8>)
 800a134:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a138:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	f003 0320 	and.w	r3, r3, #32
 800a142:	2b00      	cmp	r3, #0
 800a144:	d041      	beq.n	800a1ca <HAL_RCC_OscConfig+0x6ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d01c      	beq.n	800a188 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a14e:	4b19      	ldr	r3, [pc, #100]	; (800a1b4 <HAL_RCC_OscConfig+0x6d8>)
 800a150:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a154:	4a17      	ldr	r2, [pc, #92]	; (800a1b4 <HAL_RCC_OscConfig+0x6d8>)
 800a156:	f043 0301 	orr.w	r3, r3, #1
 800a15a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a15e:	f7fb f8c1 	bl	80052e4 <HAL_GetTick>
 800a162:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800a164:	e008      	b.n	800a178 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a166:	f7fb f8bd 	bl	80052e4 <HAL_GetTick>
 800a16a:	4602      	mov	r2, r0
 800a16c:	69bb      	ldr	r3, [r7, #24]
 800a16e:	1ad3      	subs	r3, r2, r3
 800a170:	2b02      	cmp	r3, #2
 800a172:	d901      	bls.n	800a178 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 800a174:	2303      	movs	r3, #3
 800a176:	e123      	b.n	800a3c0 <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800a178:	4b0e      	ldr	r3, [pc, #56]	; (800a1b4 <HAL_RCC_OscConfig+0x6d8>)
 800a17a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a17e:	f003 0302 	and.w	r3, r3, #2
 800a182:	2b00      	cmp	r3, #0
 800a184:	d0ef      	beq.n	800a166 <HAL_RCC_OscConfig+0x68a>
 800a186:	e020      	b.n	800a1ca <HAL_RCC_OscConfig+0x6ee>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a188:	4b0a      	ldr	r3, [pc, #40]	; (800a1b4 <HAL_RCC_OscConfig+0x6d8>)
 800a18a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a18e:	4a09      	ldr	r2, [pc, #36]	; (800a1b4 <HAL_RCC_OscConfig+0x6d8>)
 800a190:	f023 0301 	bic.w	r3, r3, #1
 800a194:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a198:	f7fb f8a4 	bl	80052e4 <HAL_GetTick>
 800a19c:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800a19e:	e00d      	b.n	800a1bc <HAL_RCC_OscConfig+0x6e0>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a1a0:	f7fb f8a0 	bl	80052e4 <HAL_GetTick>
 800a1a4:	4602      	mov	r2, r0
 800a1a6:	69bb      	ldr	r3, [r7, #24]
 800a1a8:	1ad3      	subs	r3, r2, r3
 800a1aa:	2b02      	cmp	r3, #2
 800a1ac:	d906      	bls.n	800a1bc <HAL_RCC_OscConfig+0x6e0>
        {
          return HAL_TIMEOUT;
 800a1ae:	2303      	movs	r3, #3
 800a1b0:	e106      	b.n	800a3c0 <HAL_RCC_OscConfig+0x8e4>
 800a1b2:	bf00      	nop
 800a1b4:	40021000 	.word	0x40021000
 800a1b8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800a1bc:	4b82      	ldr	r3, [pc, #520]	; (800a3c8 <HAL_RCC_OscConfig+0x8ec>)
 800a1be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a1c2:	f003 0302 	and.w	r3, r3, #2
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d1ea      	bne.n	800a1a0 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	f000 80f5 	beq.w	800a3be <HAL_RCC_OscConfig+0x8e2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1d8:	2b02      	cmp	r3, #2
 800a1da:	f040 80cb 	bne.w	800a374 <HAL_RCC_OscConfig+0x898>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800a1de:	4b7a      	ldr	r3, [pc, #488]	; (800a3c8 <HAL_RCC_OscConfig+0x8ec>)
 800a1e0:	68db      	ldr	r3, [r3, #12]
 800a1e2:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800a1e4:	69fb      	ldr	r3, [r7, #28]
 800a1e6:	f003 0203 	and.w	r2, r3, #3
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1ee:	429a      	cmp	r2, r3
 800a1f0:	d12c      	bne.n	800a24c <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800a1f2:	69fb      	ldr	r3, [r7, #28]
 800a1f4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1fc:	3b01      	subs	r3, #1
 800a1fe:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800a200:	429a      	cmp	r2, r3
 800a202:	d123      	bne.n	800a24c <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a204:	69fb      	ldr	r3, [r7, #28]
 800a206:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a20e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800a210:	429a      	cmp	r2, r3
 800a212:	d11b      	bne.n	800a24c <HAL_RCC_OscConfig+0x770>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800a214:	69fb      	ldr	r3, [r7, #28]
 800a216:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a21e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a220:	429a      	cmp	r2, r3
 800a222:	d113      	bne.n	800a24c <HAL_RCC_OscConfig+0x770>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a224:	69fb      	ldr	r3, [r7, #28]
 800a226:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a22e:	085b      	lsrs	r3, r3, #1
 800a230:	3b01      	subs	r3, #1
 800a232:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800a234:	429a      	cmp	r2, r3
 800a236:	d109      	bne.n	800a24c <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800a238:	69fb      	ldr	r3, [r7, #28]
 800a23a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a242:	085b      	lsrs	r3, r3, #1
 800a244:	3b01      	subs	r3, #1
 800a246:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a248:	429a      	cmp	r2, r3
 800a24a:	d06d      	beq.n	800a328 <HAL_RCC_OscConfig+0x84c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800a24c:	6a3b      	ldr	r3, [r7, #32]
 800a24e:	2b0c      	cmp	r3, #12
 800a250:	d068      	beq.n	800a324 <HAL_RCC_OscConfig+0x848>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800a252:	4b5d      	ldr	r3, [pc, #372]	; (800a3c8 <HAL_RCC_OscConfig+0x8ec>)
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d105      	bne.n	800a26a <HAL_RCC_OscConfig+0x78e>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800a25e:	4b5a      	ldr	r3, [pc, #360]	; (800a3c8 <HAL_RCC_OscConfig+0x8ec>)
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a266:	2b00      	cmp	r3, #0
 800a268:	d001      	beq.n	800a26e <HAL_RCC_OscConfig+0x792>
#endif
            )
          {
            return HAL_ERROR;
 800a26a:	2301      	movs	r3, #1
 800a26c:	e0a8      	b.n	800a3c0 <HAL_RCC_OscConfig+0x8e4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800a26e:	4b56      	ldr	r3, [pc, #344]	; (800a3c8 <HAL_RCC_OscConfig+0x8ec>)
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	4a55      	ldr	r2, [pc, #340]	; (800a3c8 <HAL_RCC_OscConfig+0x8ec>)
 800a274:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a278:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800a27a:	f7fb f833 	bl	80052e4 <HAL_GetTick>
 800a27e:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a280:	e008      	b.n	800a294 <HAL_RCC_OscConfig+0x7b8>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a282:	f7fb f82f 	bl	80052e4 <HAL_GetTick>
 800a286:	4602      	mov	r2, r0
 800a288:	69bb      	ldr	r3, [r7, #24]
 800a28a:	1ad3      	subs	r3, r2, r3
 800a28c:	2b02      	cmp	r3, #2
 800a28e:	d901      	bls.n	800a294 <HAL_RCC_OscConfig+0x7b8>
              {
                return HAL_TIMEOUT;
 800a290:	2303      	movs	r3, #3
 800a292:	e095      	b.n	800a3c0 <HAL_RCC_OscConfig+0x8e4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a294:	4b4c      	ldr	r3, [pc, #304]	; (800a3c8 <HAL_RCC_OscConfig+0x8ec>)
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d1f0      	bne.n	800a282 <HAL_RCC_OscConfig+0x7a6>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a2a0:	4b49      	ldr	r3, [pc, #292]	; (800a3c8 <HAL_RCC_OscConfig+0x8ec>)
 800a2a2:	68da      	ldr	r2, [r3, #12]
 800a2a4:	4b49      	ldr	r3, [pc, #292]	; (800a3cc <HAL_RCC_OscConfig+0x8f0>)
 800a2a6:	4013      	ands	r3, r2
 800a2a8:	687a      	ldr	r2, [r7, #4]
 800a2aa:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800a2ac:	687a      	ldr	r2, [r7, #4]
 800a2ae:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800a2b0:	3a01      	subs	r2, #1
 800a2b2:	0112      	lsls	r2, r2, #4
 800a2b4:	4311      	orrs	r1, r2
 800a2b6:	687a      	ldr	r2, [r7, #4]
 800a2b8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a2ba:	0212      	lsls	r2, r2, #8
 800a2bc:	4311      	orrs	r1, r2
 800a2be:	687a      	ldr	r2, [r7, #4]
 800a2c0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800a2c2:	0852      	lsrs	r2, r2, #1
 800a2c4:	3a01      	subs	r2, #1
 800a2c6:	0552      	lsls	r2, r2, #21
 800a2c8:	4311      	orrs	r1, r2
 800a2ca:	687a      	ldr	r2, [r7, #4]
 800a2cc:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800a2ce:	0852      	lsrs	r2, r2, #1
 800a2d0:	3a01      	subs	r2, #1
 800a2d2:	0652      	lsls	r2, r2, #25
 800a2d4:	4311      	orrs	r1, r2
 800a2d6:	687a      	ldr	r2, [r7, #4]
 800a2d8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800a2da:	06d2      	lsls	r2, r2, #27
 800a2dc:	430a      	orrs	r2, r1
 800a2de:	493a      	ldr	r1, [pc, #232]	; (800a3c8 <HAL_RCC_OscConfig+0x8ec>)
 800a2e0:	4313      	orrs	r3, r2
 800a2e2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800a2e4:	4b38      	ldr	r3, [pc, #224]	; (800a3c8 <HAL_RCC_OscConfig+0x8ec>)
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	4a37      	ldr	r2, [pc, #220]	; (800a3c8 <HAL_RCC_OscConfig+0x8ec>)
 800a2ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a2ee:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800a2f0:	4b35      	ldr	r3, [pc, #212]	; (800a3c8 <HAL_RCC_OscConfig+0x8ec>)
 800a2f2:	68db      	ldr	r3, [r3, #12]
 800a2f4:	4a34      	ldr	r2, [pc, #208]	; (800a3c8 <HAL_RCC_OscConfig+0x8ec>)
 800a2f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a2fa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800a2fc:	f7fa fff2 	bl	80052e4 <HAL_GetTick>
 800a300:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a302:	e008      	b.n	800a316 <HAL_RCC_OscConfig+0x83a>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a304:	f7fa ffee 	bl	80052e4 <HAL_GetTick>
 800a308:	4602      	mov	r2, r0
 800a30a:	69bb      	ldr	r3, [r7, #24]
 800a30c:	1ad3      	subs	r3, r2, r3
 800a30e:	2b02      	cmp	r3, #2
 800a310:	d901      	bls.n	800a316 <HAL_RCC_OscConfig+0x83a>
              {
                return HAL_TIMEOUT;
 800a312:	2303      	movs	r3, #3
 800a314:	e054      	b.n	800a3c0 <HAL_RCC_OscConfig+0x8e4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a316:	4b2c      	ldr	r3, [pc, #176]	; (800a3c8 <HAL_RCC_OscConfig+0x8ec>)
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d0f0      	beq.n	800a304 <HAL_RCC_OscConfig+0x828>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800a322:	e04c      	b.n	800a3be <HAL_RCC_OscConfig+0x8e2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800a324:	2301      	movs	r3, #1
 800a326:	e04b      	b.n	800a3c0 <HAL_RCC_OscConfig+0x8e4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a328:	4b27      	ldr	r3, [pc, #156]	; (800a3c8 <HAL_RCC_OscConfig+0x8ec>)
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a330:	2b00      	cmp	r3, #0
 800a332:	d144      	bne.n	800a3be <HAL_RCC_OscConfig+0x8e2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800a334:	4b24      	ldr	r3, [pc, #144]	; (800a3c8 <HAL_RCC_OscConfig+0x8ec>)
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	4a23      	ldr	r2, [pc, #140]	; (800a3c8 <HAL_RCC_OscConfig+0x8ec>)
 800a33a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a33e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800a340:	4b21      	ldr	r3, [pc, #132]	; (800a3c8 <HAL_RCC_OscConfig+0x8ec>)
 800a342:	68db      	ldr	r3, [r3, #12]
 800a344:	4a20      	ldr	r2, [pc, #128]	; (800a3c8 <HAL_RCC_OscConfig+0x8ec>)
 800a346:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a34a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a34c:	f7fa ffca 	bl	80052e4 <HAL_GetTick>
 800a350:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a352:	e008      	b.n	800a366 <HAL_RCC_OscConfig+0x88a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a354:	f7fa ffc6 	bl	80052e4 <HAL_GetTick>
 800a358:	4602      	mov	r2, r0
 800a35a:	69bb      	ldr	r3, [r7, #24]
 800a35c:	1ad3      	subs	r3, r2, r3
 800a35e:	2b02      	cmp	r3, #2
 800a360:	d901      	bls.n	800a366 <HAL_RCC_OscConfig+0x88a>
            {
              return HAL_TIMEOUT;
 800a362:	2303      	movs	r3, #3
 800a364:	e02c      	b.n	800a3c0 <HAL_RCC_OscConfig+0x8e4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a366:	4b18      	ldr	r3, [pc, #96]	; (800a3c8 <HAL_RCC_OscConfig+0x8ec>)
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d0f0      	beq.n	800a354 <HAL_RCC_OscConfig+0x878>
 800a372:	e024      	b.n	800a3be <HAL_RCC_OscConfig+0x8e2>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800a374:	6a3b      	ldr	r3, [r7, #32]
 800a376:	2b0c      	cmp	r3, #12
 800a378:	d01f      	beq.n	800a3ba <HAL_RCC_OscConfig+0x8de>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a37a:	4b13      	ldr	r3, [pc, #76]	; (800a3c8 <HAL_RCC_OscConfig+0x8ec>)
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	4a12      	ldr	r2, [pc, #72]	; (800a3c8 <HAL_RCC_OscConfig+0x8ec>)
 800a380:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a384:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a386:	f7fa ffad 	bl	80052e4 <HAL_GetTick>
 800a38a:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a38c:	e008      	b.n	800a3a0 <HAL_RCC_OscConfig+0x8c4>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a38e:	f7fa ffa9 	bl	80052e4 <HAL_GetTick>
 800a392:	4602      	mov	r2, r0
 800a394:	69bb      	ldr	r3, [r7, #24]
 800a396:	1ad3      	subs	r3, r2, r3
 800a398:	2b02      	cmp	r3, #2
 800a39a:	d901      	bls.n	800a3a0 <HAL_RCC_OscConfig+0x8c4>
          {
            return HAL_TIMEOUT;
 800a39c:	2303      	movs	r3, #3
 800a39e:	e00f      	b.n	800a3c0 <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a3a0:	4b09      	ldr	r3, [pc, #36]	; (800a3c8 <HAL_RCC_OscConfig+0x8ec>)
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d1f0      	bne.n	800a38e <HAL_RCC_OscConfig+0x8b2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800a3ac:	4b06      	ldr	r3, [pc, #24]	; (800a3c8 <HAL_RCC_OscConfig+0x8ec>)
 800a3ae:	68da      	ldr	r2, [r3, #12]
 800a3b0:	4905      	ldr	r1, [pc, #20]	; (800a3c8 <HAL_RCC_OscConfig+0x8ec>)
 800a3b2:	4b07      	ldr	r3, [pc, #28]	; (800a3d0 <HAL_RCC_OscConfig+0x8f4>)
 800a3b4:	4013      	ands	r3, r2
 800a3b6:	60cb      	str	r3, [r1, #12]
 800a3b8:	e001      	b.n	800a3be <HAL_RCC_OscConfig+0x8e2>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800a3ba:	2301      	movs	r3, #1
 800a3bc:	e000      	b.n	800a3c0 <HAL_RCC_OscConfig+0x8e4>
      }
    }
  }
  return HAL_OK;
 800a3be:	2300      	movs	r3, #0
}
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	3728      	adds	r7, #40	; 0x28
 800a3c4:	46bd      	mov	sp, r7
 800a3c6:	bd80      	pop	{r7, pc}
 800a3c8:	40021000 	.word	0x40021000
 800a3cc:	019d800c 	.word	0x019d800c
 800a3d0:	feeefffc 	.word	0xfeeefffc

0800a3d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	b086      	sub	sp, #24
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
 800a3dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800a3de:	2300      	movs	r3, #0
 800a3e0:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d101      	bne.n	800a3ec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800a3e8:	2301      	movs	r3, #1
 800a3ea:	e11d      	b.n	800a628 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a3ec:	4b90      	ldr	r3, [pc, #576]	; (800a630 <HAL_RCC_ClockConfig+0x25c>)
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	f003 030f 	and.w	r3, r3, #15
 800a3f4:	683a      	ldr	r2, [r7, #0]
 800a3f6:	429a      	cmp	r2, r3
 800a3f8:	d910      	bls.n	800a41c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a3fa:	4b8d      	ldr	r3, [pc, #564]	; (800a630 <HAL_RCC_ClockConfig+0x25c>)
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	f023 020f 	bic.w	r2, r3, #15
 800a402:	498b      	ldr	r1, [pc, #556]	; (800a630 <HAL_RCC_ClockConfig+0x25c>)
 800a404:	683b      	ldr	r3, [r7, #0]
 800a406:	4313      	orrs	r3, r2
 800a408:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a40a:	4b89      	ldr	r3, [pc, #548]	; (800a630 <HAL_RCC_ClockConfig+0x25c>)
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	f003 030f 	and.w	r3, r3, #15
 800a412:	683a      	ldr	r2, [r7, #0]
 800a414:	429a      	cmp	r2, r3
 800a416:	d001      	beq.n	800a41c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800a418:	2301      	movs	r3, #1
 800a41a:	e105      	b.n	800a628 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	f003 0302 	and.w	r3, r3, #2
 800a424:	2b00      	cmp	r3, #0
 800a426:	d010      	beq.n	800a44a <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	689a      	ldr	r2, [r3, #8]
 800a42c:	4b81      	ldr	r3, [pc, #516]	; (800a634 <HAL_RCC_ClockConfig+0x260>)
 800a42e:	689b      	ldr	r3, [r3, #8]
 800a430:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a434:	429a      	cmp	r2, r3
 800a436:	d908      	bls.n	800a44a <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a438:	4b7e      	ldr	r3, [pc, #504]	; (800a634 <HAL_RCC_ClockConfig+0x260>)
 800a43a:	689b      	ldr	r3, [r3, #8]
 800a43c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	689b      	ldr	r3, [r3, #8]
 800a444:	497b      	ldr	r1, [pc, #492]	; (800a634 <HAL_RCC_ClockConfig+0x260>)
 800a446:	4313      	orrs	r3, r2
 800a448:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	f003 0301 	and.w	r3, r3, #1
 800a452:	2b00      	cmp	r3, #0
 800a454:	d079      	beq.n	800a54a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	685b      	ldr	r3, [r3, #4]
 800a45a:	2b03      	cmp	r3, #3
 800a45c:	d11e      	bne.n	800a49c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a45e:	4b75      	ldr	r3, [pc, #468]	; (800a634 <HAL_RCC_ClockConfig+0x260>)
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a466:	2b00      	cmp	r3, #0
 800a468:	d101      	bne.n	800a46e <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800a46a:	2301      	movs	r3, #1
 800a46c:	e0dc      	b.n	800a628 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800a46e:	f000 fa23 	bl	800a8b8 <RCC_GetSysClockFreqFromPLLSource>
 800a472:	4603      	mov	r3, r0
 800a474:	4a70      	ldr	r2, [pc, #448]	; (800a638 <HAL_RCC_ClockConfig+0x264>)
 800a476:	4293      	cmp	r3, r2
 800a478:	d946      	bls.n	800a508 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800a47a:	4b6e      	ldr	r3, [pc, #440]	; (800a634 <HAL_RCC_ClockConfig+0x260>)
 800a47c:	689b      	ldr	r3, [r3, #8]
 800a47e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a482:	2b00      	cmp	r3, #0
 800a484:	d140      	bne.n	800a508 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800a486:	4b6b      	ldr	r3, [pc, #428]	; (800a634 <HAL_RCC_ClockConfig+0x260>)
 800a488:	689b      	ldr	r3, [r3, #8]
 800a48a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a48e:	4a69      	ldr	r2, [pc, #420]	; (800a634 <HAL_RCC_ClockConfig+0x260>)
 800a490:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a494:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800a496:	2380      	movs	r3, #128	; 0x80
 800a498:	617b      	str	r3, [r7, #20]
 800a49a:	e035      	b.n	800a508 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	685b      	ldr	r3, [r3, #4]
 800a4a0:	2b02      	cmp	r3, #2
 800a4a2:	d107      	bne.n	800a4b4 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a4a4:	4b63      	ldr	r3, [pc, #396]	; (800a634 <HAL_RCC_ClockConfig+0x260>)
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d115      	bne.n	800a4dc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800a4b0:	2301      	movs	r3, #1
 800a4b2:	e0b9      	b.n	800a628 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	685b      	ldr	r3, [r3, #4]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d107      	bne.n	800a4cc <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800a4bc:	4b5d      	ldr	r3, [pc, #372]	; (800a634 <HAL_RCC_ClockConfig+0x260>)
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	f003 0302 	and.w	r3, r3, #2
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d109      	bne.n	800a4dc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800a4c8:	2301      	movs	r3, #1
 800a4ca:	e0ad      	b.n	800a628 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a4cc:	4b59      	ldr	r3, [pc, #356]	; (800a634 <HAL_RCC_ClockConfig+0x260>)
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d101      	bne.n	800a4dc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800a4d8:	2301      	movs	r3, #1
 800a4da:	e0a5      	b.n	800a628 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800a4dc:	f000 f8b4 	bl	800a648 <HAL_RCC_GetSysClockFreq>
 800a4e0:	4603      	mov	r3, r0
 800a4e2:	4a55      	ldr	r2, [pc, #340]	; (800a638 <HAL_RCC_ClockConfig+0x264>)
 800a4e4:	4293      	cmp	r3, r2
 800a4e6:	d90f      	bls.n	800a508 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800a4e8:	4b52      	ldr	r3, [pc, #328]	; (800a634 <HAL_RCC_ClockConfig+0x260>)
 800a4ea:	689b      	ldr	r3, [r3, #8]
 800a4ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d109      	bne.n	800a508 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800a4f4:	4b4f      	ldr	r3, [pc, #316]	; (800a634 <HAL_RCC_ClockConfig+0x260>)
 800a4f6:	689b      	ldr	r3, [r3, #8]
 800a4f8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a4fc:	4a4d      	ldr	r2, [pc, #308]	; (800a634 <HAL_RCC_ClockConfig+0x260>)
 800a4fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a502:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800a504:	2380      	movs	r3, #128	; 0x80
 800a506:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a508:	4b4a      	ldr	r3, [pc, #296]	; (800a634 <HAL_RCC_ClockConfig+0x260>)
 800a50a:	689b      	ldr	r3, [r3, #8]
 800a50c:	f023 0203 	bic.w	r2, r3, #3
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	685b      	ldr	r3, [r3, #4]
 800a514:	4947      	ldr	r1, [pc, #284]	; (800a634 <HAL_RCC_ClockConfig+0x260>)
 800a516:	4313      	orrs	r3, r2
 800a518:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a51a:	f7fa fee3 	bl	80052e4 <HAL_GetTick>
 800a51e:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a520:	e00a      	b.n	800a538 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a522:	f7fa fedf 	bl	80052e4 <HAL_GetTick>
 800a526:	4602      	mov	r2, r0
 800a528:	693b      	ldr	r3, [r7, #16]
 800a52a:	1ad3      	subs	r3, r2, r3
 800a52c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a530:	4293      	cmp	r3, r2
 800a532:	d901      	bls.n	800a538 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 800a534:	2303      	movs	r3, #3
 800a536:	e077      	b.n	800a628 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a538:	4b3e      	ldr	r3, [pc, #248]	; (800a634 <HAL_RCC_ClockConfig+0x260>)
 800a53a:	689b      	ldr	r3, [r3, #8]
 800a53c:	f003 020c 	and.w	r2, r3, #12
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	685b      	ldr	r3, [r3, #4]
 800a544:	009b      	lsls	r3, r3, #2
 800a546:	429a      	cmp	r2, r3
 800a548:	d1eb      	bne.n	800a522 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800a54a:	697b      	ldr	r3, [r7, #20]
 800a54c:	2b80      	cmp	r3, #128	; 0x80
 800a54e:	d105      	bne.n	800a55c <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800a550:	4b38      	ldr	r3, [pc, #224]	; (800a634 <HAL_RCC_ClockConfig+0x260>)
 800a552:	689b      	ldr	r3, [r3, #8]
 800a554:	4a37      	ldr	r2, [pc, #220]	; (800a634 <HAL_RCC_ClockConfig+0x260>)
 800a556:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a55a:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	f003 0302 	and.w	r3, r3, #2
 800a564:	2b00      	cmp	r3, #0
 800a566:	d010      	beq.n	800a58a <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	689a      	ldr	r2, [r3, #8]
 800a56c:	4b31      	ldr	r3, [pc, #196]	; (800a634 <HAL_RCC_ClockConfig+0x260>)
 800a56e:	689b      	ldr	r3, [r3, #8]
 800a570:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a574:	429a      	cmp	r2, r3
 800a576:	d208      	bcs.n	800a58a <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a578:	4b2e      	ldr	r3, [pc, #184]	; (800a634 <HAL_RCC_ClockConfig+0x260>)
 800a57a:	689b      	ldr	r3, [r3, #8]
 800a57c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	689b      	ldr	r3, [r3, #8]
 800a584:	492b      	ldr	r1, [pc, #172]	; (800a634 <HAL_RCC_ClockConfig+0x260>)
 800a586:	4313      	orrs	r3, r2
 800a588:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a58a:	4b29      	ldr	r3, [pc, #164]	; (800a630 <HAL_RCC_ClockConfig+0x25c>)
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	f003 030f 	and.w	r3, r3, #15
 800a592:	683a      	ldr	r2, [r7, #0]
 800a594:	429a      	cmp	r2, r3
 800a596:	d210      	bcs.n	800a5ba <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a598:	4b25      	ldr	r3, [pc, #148]	; (800a630 <HAL_RCC_ClockConfig+0x25c>)
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	f023 020f 	bic.w	r2, r3, #15
 800a5a0:	4923      	ldr	r1, [pc, #140]	; (800a630 <HAL_RCC_ClockConfig+0x25c>)
 800a5a2:	683b      	ldr	r3, [r7, #0]
 800a5a4:	4313      	orrs	r3, r2
 800a5a6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a5a8:	4b21      	ldr	r3, [pc, #132]	; (800a630 <HAL_RCC_ClockConfig+0x25c>)
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	f003 030f 	and.w	r3, r3, #15
 800a5b0:	683a      	ldr	r2, [r7, #0]
 800a5b2:	429a      	cmp	r2, r3
 800a5b4:	d001      	beq.n	800a5ba <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 800a5b6:	2301      	movs	r3, #1
 800a5b8:	e036      	b.n	800a628 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	f003 0304 	and.w	r3, r3, #4
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d008      	beq.n	800a5d8 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a5c6:	4b1b      	ldr	r3, [pc, #108]	; (800a634 <HAL_RCC_ClockConfig+0x260>)
 800a5c8:	689b      	ldr	r3, [r3, #8]
 800a5ca:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	68db      	ldr	r3, [r3, #12]
 800a5d2:	4918      	ldr	r1, [pc, #96]	; (800a634 <HAL_RCC_ClockConfig+0x260>)
 800a5d4:	4313      	orrs	r3, r2
 800a5d6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	f003 0308 	and.w	r3, r3, #8
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d009      	beq.n	800a5f8 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a5e4:	4b13      	ldr	r3, [pc, #76]	; (800a634 <HAL_RCC_ClockConfig+0x260>)
 800a5e6:	689b      	ldr	r3, [r3, #8]
 800a5e8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	691b      	ldr	r3, [r3, #16]
 800a5f0:	00db      	lsls	r3, r3, #3
 800a5f2:	4910      	ldr	r1, [pc, #64]	; (800a634 <HAL_RCC_ClockConfig+0x260>)
 800a5f4:	4313      	orrs	r3, r2
 800a5f6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800a5f8:	f000 f826 	bl	800a648 <HAL_RCC_GetSysClockFreq>
 800a5fc:	4602      	mov	r2, r0
 800a5fe:	4b0d      	ldr	r3, [pc, #52]	; (800a634 <HAL_RCC_ClockConfig+0x260>)
 800a600:	689b      	ldr	r3, [r3, #8]
 800a602:	091b      	lsrs	r3, r3, #4
 800a604:	f003 030f 	and.w	r3, r3, #15
 800a608:	490c      	ldr	r1, [pc, #48]	; (800a63c <HAL_RCC_ClockConfig+0x268>)
 800a60a:	5ccb      	ldrb	r3, [r1, r3]
 800a60c:	f003 031f 	and.w	r3, r3, #31
 800a610:	fa22 f303 	lsr.w	r3, r2, r3
 800a614:	4a0a      	ldr	r2, [pc, #40]	; (800a640 <HAL_RCC_ClockConfig+0x26c>)
 800a616:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800a618:	4b0a      	ldr	r3, [pc, #40]	; (800a644 <HAL_RCC_ClockConfig+0x270>)
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	4618      	mov	r0, r3
 800a61e:	f7fa fc73 	bl	8004f08 <HAL_InitTick>
 800a622:	4603      	mov	r3, r0
 800a624:	73fb      	strb	r3, [r7, #15]

  return status;
 800a626:	7bfb      	ldrb	r3, [r7, #15]
}
 800a628:	4618      	mov	r0, r3
 800a62a:	3718      	adds	r7, #24
 800a62c:	46bd      	mov	sp, r7
 800a62e:	bd80      	pop	{r7, pc}
 800a630:	40022000 	.word	0x40022000
 800a634:	40021000 	.word	0x40021000
 800a638:	04c4b400 	.word	0x04c4b400
 800a63c:	08016e54 	.word	0x08016e54
 800a640:	20000224 	.word	0x20000224
 800a644:	20000228 	.word	0x20000228

0800a648 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a648:	b480      	push	{r7}
 800a64a:	b089      	sub	sp, #36	; 0x24
 800a64c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800a64e:	2300      	movs	r3, #0
 800a650:	61fb      	str	r3, [r7, #28]
 800a652:	2300      	movs	r3, #0
 800a654:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a656:	4b3e      	ldr	r3, [pc, #248]	; (800a750 <HAL_RCC_GetSysClockFreq+0x108>)
 800a658:	689b      	ldr	r3, [r3, #8]
 800a65a:	f003 030c 	and.w	r3, r3, #12
 800a65e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a660:	4b3b      	ldr	r3, [pc, #236]	; (800a750 <HAL_RCC_GetSysClockFreq+0x108>)
 800a662:	68db      	ldr	r3, [r3, #12]
 800a664:	f003 0303 	and.w	r3, r3, #3
 800a668:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800a66a:	693b      	ldr	r3, [r7, #16]
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d005      	beq.n	800a67c <HAL_RCC_GetSysClockFreq+0x34>
 800a670:	693b      	ldr	r3, [r7, #16]
 800a672:	2b0c      	cmp	r3, #12
 800a674:	d121      	bne.n	800a6ba <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	2b01      	cmp	r3, #1
 800a67a:	d11e      	bne.n	800a6ba <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800a67c:	4b34      	ldr	r3, [pc, #208]	; (800a750 <HAL_RCC_GetSysClockFreq+0x108>)
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	f003 0308 	and.w	r3, r3, #8
 800a684:	2b00      	cmp	r3, #0
 800a686:	d107      	bne.n	800a698 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800a688:	4b31      	ldr	r3, [pc, #196]	; (800a750 <HAL_RCC_GetSysClockFreq+0x108>)
 800a68a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a68e:	0a1b      	lsrs	r3, r3, #8
 800a690:	f003 030f 	and.w	r3, r3, #15
 800a694:	61fb      	str	r3, [r7, #28]
 800a696:	e005      	b.n	800a6a4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800a698:	4b2d      	ldr	r3, [pc, #180]	; (800a750 <HAL_RCC_GetSysClockFreq+0x108>)
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	091b      	lsrs	r3, r3, #4
 800a69e:	f003 030f 	and.w	r3, r3, #15
 800a6a2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800a6a4:	4a2b      	ldr	r2, [pc, #172]	; (800a754 <HAL_RCC_GetSysClockFreq+0x10c>)
 800a6a6:	69fb      	ldr	r3, [r7, #28]
 800a6a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a6ac:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800a6ae:	693b      	ldr	r3, [r7, #16]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d10d      	bne.n	800a6d0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800a6b4:	69fb      	ldr	r3, [r7, #28]
 800a6b6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800a6b8:	e00a      	b.n	800a6d0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800a6ba:	693b      	ldr	r3, [r7, #16]
 800a6bc:	2b04      	cmp	r3, #4
 800a6be:	d102      	bne.n	800a6c6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800a6c0:	4b25      	ldr	r3, [pc, #148]	; (800a758 <HAL_RCC_GetSysClockFreq+0x110>)
 800a6c2:	61bb      	str	r3, [r7, #24]
 800a6c4:	e004      	b.n	800a6d0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800a6c6:	693b      	ldr	r3, [r7, #16]
 800a6c8:	2b08      	cmp	r3, #8
 800a6ca:	d101      	bne.n	800a6d0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800a6cc:	4b22      	ldr	r3, [pc, #136]	; (800a758 <HAL_RCC_GetSysClockFreq+0x110>)
 800a6ce:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800a6d0:	693b      	ldr	r3, [r7, #16]
 800a6d2:	2b0c      	cmp	r3, #12
 800a6d4:	d134      	bne.n	800a740 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800a6d6:	4b1e      	ldr	r3, [pc, #120]	; (800a750 <HAL_RCC_GetSysClockFreq+0x108>)
 800a6d8:	68db      	ldr	r3, [r3, #12]
 800a6da:	f003 0303 	and.w	r3, r3, #3
 800a6de:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800a6e0:	68bb      	ldr	r3, [r7, #8]
 800a6e2:	2b02      	cmp	r3, #2
 800a6e4:	d003      	beq.n	800a6ee <HAL_RCC_GetSysClockFreq+0xa6>
 800a6e6:	68bb      	ldr	r3, [r7, #8]
 800a6e8:	2b03      	cmp	r3, #3
 800a6ea:	d003      	beq.n	800a6f4 <HAL_RCC_GetSysClockFreq+0xac>
 800a6ec:	e005      	b.n	800a6fa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800a6ee:	4b1a      	ldr	r3, [pc, #104]	; (800a758 <HAL_RCC_GetSysClockFreq+0x110>)
 800a6f0:	617b      	str	r3, [r7, #20]
      break;
 800a6f2:	e005      	b.n	800a700 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800a6f4:	4b18      	ldr	r3, [pc, #96]	; (800a758 <HAL_RCC_GetSysClockFreq+0x110>)
 800a6f6:	617b      	str	r3, [r7, #20]
      break;
 800a6f8:	e002      	b.n	800a700 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800a6fa:	69fb      	ldr	r3, [r7, #28]
 800a6fc:	617b      	str	r3, [r7, #20]
      break;
 800a6fe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800a700:	4b13      	ldr	r3, [pc, #76]	; (800a750 <HAL_RCC_GetSysClockFreq+0x108>)
 800a702:	68db      	ldr	r3, [r3, #12]
 800a704:	091b      	lsrs	r3, r3, #4
 800a706:	f003 030f 	and.w	r3, r3, #15
 800a70a:	3301      	adds	r3, #1
 800a70c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800a70e:	4b10      	ldr	r3, [pc, #64]	; (800a750 <HAL_RCC_GetSysClockFreq+0x108>)
 800a710:	68db      	ldr	r3, [r3, #12]
 800a712:	0a1b      	lsrs	r3, r3, #8
 800a714:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a718:	697a      	ldr	r2, [r7, #20]
 800a71a:	fb03 f202 	mul.w	r2, r3, r2
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	fbb2 f3f3 	udiv	r3, r2, r3
 800a724:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800a726:	4b0a      	ldr	r3, [pc, #40]	; (800a750 <HAL_RCC_GetSysClockFreq+0x108>)
 800a728:	68db      	ldr	r3, [r3, #12]
 800a72a:	0e5b      	lsrs	r3, r3, #25
 800a72c:	f003 0303 	and.w	r3, r3, #3
 800a730:	3301      	adds	r3, #1
 800a732:	005b      	lsls	r3, r3, #1
 800a734:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800a736:	697a      	ldr	r2, [r7, #20]
 800a738:	683b      	ldr	r3, [r7, #0]
 800a73a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a73e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800a740:	69bb      	ldr	r3, [r7, #24]
}
 800a742:	4618      	mov	r0, r3
 800a744:	3724      	adds	r7, #36	; 0x24
 800a746:	46bd      	mov	sp, r7
 800a748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74c:	4770      	bx	lr
 800a74e:	bf00      	nop
 800a750:	40021000 	.word	0x40021000
 800a754:	08016e6c 	.word	0x08016e6c
 800a758:	00f42400 	.word	0x00f42400

0800a75c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a75c:	b480      	push	{r7}
 800a75e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a760:	4b03      	ldr	r3, [pc, #12]	; (800a770 <HAL_RCC_GetHCLKFreq+0x14>)
 800a762:	681b      	ldr	r3, [r3, #0]
}
 800a764:	4618      	mov	r0, r3
 800a766:	46bd      	mov	sp, r7
 800a768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76c:	4770      	bx	lr
 800a76e:	bf00      	nop
 800a770:	20000224 	.word	0x20000224

0800a774 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a774:	b580      	push	{r7, lr}
 800a776:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800a778:	f7ff fff0 	bl	800a75c <HAL_RCC_GetHCLKFreq>
 800a77c:	4602      	mov	r2, r0
 800a77e:	4b06      	ldr	r3, [pc, #24]	; (800a798 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a780:	689b      	ldr	r3, [r3, #8]
 800a782:	0adb      	lsrs	r3, r3, #11
 800a784:	f003 0307 	and.w	r3, r3, #7
 800a788:	4904      	ldr	r1, [pc, #16]	; (800a79c <HAL_RCC_GetPCLK2Freq+0x28>)
 800a78a:	5ccb      	ldrb	r3, [r1, r3]
 800a78c:	f003 031f 	and.w	r3, r3, #31
 800a790:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a794:	4618      	mov	r0, r3
 800a796:	bd80      	pop	{r7, pc}
 800a798:	40021000 	.word	0x40021000
 800a79c:	08016e64 	.word	0x08016e64

0800a7a0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800a7a0:	b480      	push	{r7}
 800a7a2:	b083      	sub	sp, #12
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	6078      	str	r0, [r7, #4]
 800a7a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	220f      	movs	r2, #15
 800a7ae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800a7b0:	4b12      	ldr	r3, [pc, #72]	; (800a7fc <HAL_RCC_GetClockConfig+0x5c>)
 800a7b2:	689b      	ldr	r3, [r3, #8]
 800a7b4:	f003 0203 	and.w	r2, r3, #3
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800a7bc:	4b0f      	ldr	r3, [pc, #60]	; (800a7fc <HAL_RCC_GetClockConfig+0x5c>)
 800a7be:	689b      	ldr	r3, [r3, #8]
 800a7c0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800a7c8:	4b0c      	ldr	r3, [pc, #48]	; (800a7fc <HAL_RCC_GetClockConfig+0x5c>)
 800a7ca:	689b      	ldr	r3, [r3, #8]
 800a7cc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800a7d4:	4b09      	ldr	r3, [pc, #36]	; (800a7fc <HAL_RCC_GetClockConfig+0x5c>)
 800a7d6:	689b      	ldr	r3, [r3, #8]
 800a7d8:	08db      	lsrs	r3, r3, #3
 800a7da:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800a7e2:	4b07      	ldr	r3, [pc, #28]	; (800a800 <HAL_RCC_GetClockConfig+0x60>)
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	f003 020f 	and.w	r2, r3, #15
 800a7ea:	683b      	ldr	r3, [r7, #0]
 800a7ec:	601a      	str	r2, [r3, #0]
}
 800a7ee:	bf00      	nop
 800a7f0:	370c      	adds	r7, #12
 800a7f2:	46bd      	mov	sp, r7
 800a7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f8:	4770      	bx	lr
 800a7fa:	bf00      	nop
 800a7fc:	40021000 	.word	0x40021000
 800a800:	40022000 	.word	0x40022000

0800a804 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800a804:	b580      	push	{r7, lr}
 800a806:	b086      	sub	sp, #24
 800a808:	af00      	add	r7, sp, #0
 800a80a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800a80c:	2300      	movs	r3, #0
 800a80e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800a810:	4b27      	ldr	r3, [pc, #156]	; (800a8b0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800a812:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a814:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d003      	beq.n	800a824 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800a81c:	f7ff f834 	bl	8009888 <HAL_PWREx_GetVoltageRange>
 800a820:	6178      	str	r0, [r7, #20]
 800a822:	e014      	b.n	800a84e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800a824:	4b22      	ldr	r3, [pc, #136]	; (800a8b0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800a826:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a828:	4a21      	ldr	r2, [pc, #132]	; (800a8b0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800a82a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a82e:	6593      	str	r3, [r2, #88]	; 0x58
 800a830:	4b1f      	ldr	r3, [pc, #124]	; (800a8b0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800a832:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a834:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a838:	60fb      	str	r3, [r7, #12]
 800a83a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800a83c:	f7ff f824 	bl	8009888 <HAL_PWREx_GetVoltageRange>
 800a840:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800a842:	4b1b      	ldr	r3, [pc, #108]	; (800a8b0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800a844:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a846:	4a1a      	ldr	r2, [pc, #104]	; (800a8b0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800a848:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a84c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800a84e:	697b      	ldr	r3, [r7, #20]
 800a850:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a854:	d10b      	bne.n	800a86e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	2b80      	cmp	r3, #128	; 0x80
 800a85a:	d913      	bls.n	800a884 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	2ba0      	cmp	r3, #160	; 0xa0
 800a860:	d902      	bls.n	800a868 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800a862:	2302      	movs	r3, #2
 800a864:	613b      	str	r3, [r7, #16]
 800a866:	e00d      	b.n	800a884 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800a868:	2301      	movs	r3, #1
 800a86a:	613b      	str	r3, [r7, #16]
 800a86c:	e00a      	b.n	800a884 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	2b7f      	cmp	r3, #127	; 0x7f
 800a872:	d902      	bls.n	800a87a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 800a874:	2302      	movs	r3, #2
 800a876:	613b      	str	r3, [r7, #16]
 800a878:	e004      	b.n	800a884 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	2b70      	cmp	r3, #112	; 0x70
 800a87e:	d101      	bne.n	800a884 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800a880:	2301      	movs	r3, #1
 800a882:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800a884:	4b0b      	ldr	r3, [pc, #44]	; (800a8b4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	f023 020f 	bic.w	r2, r3, #15
 800a88c:	4909      	ldr	r1, [pc, #36]	; (800a8b4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800a88e:	693b      	ldr	r3, [r7, #16]
 800a890:	4313      	orrs	r3, r2
 800a892:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800a894:	4b07      	ldr	r3, [pc, #28]	; (800a8b4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	f003 030f 	and.w	r3, r3, #15
 800a89c:	693a      	ldr	r2, [r7, #16]
 800a89e:	429a      	cmp	r2, r3
 800a8a0:	d001      	beq.n	800a8a6 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800a8a2:	2301      	movs	r3, #1
 800a8a4:	e000      	b.n	800a8a8 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800a8a6:	2300      	movs	r3, #0
}
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	3718      	adds	r7, #24
 800a8ac:	46bd      	mov	sp, r7
 800a8ae:	bd80      	pop	{r7, pc}
 800a8b0:	40021000 	.word	0x40021000
 800a8b4:	40022000 	.word	0x40022000

0800a8b8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800a8b8:	b480      	push	{r7}
 800a8ba:	b087      	sub	sp, #28
 800a8bc:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800a8be:	4b2d      	ldr	r3, [pc, #180]	; (800a974 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800a8c0:	68db      	ldr	r3, [r3, #12]
 800a8c2:	f003 0303 	and.w	r3, r3, #3
 800a8c6:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	2b03      	cmp	r3, #3
 800a8cc:	d00b      	beq.n	800a8e6 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	2b03      	cmp	r3, #3
 800a8d2:	d825      	bhi.n	800a920 <RCC_GetSysClockFreqFromPLLSource+0x68>
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	2b01      	cmp	r3, #1
 800a8d8:	d008      	beq.n	800a8ec <RCC_GetSysClockFreqFromPLLSource+0x34>
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	2b02      	cmp	r3, #2
 800a8de:	d11f      	bne.n	800a920 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 800a8e0:	4b25      	ldr	r3, [pc, #148]	; (800a978 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800a8e2:	613b      	str	r3, [r7, #16]
    break;
 800a8e4:	e01f      	b.n	800a926 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800a8e6:	4b24      	ldr	r3, [pc, #144]	; (800a978 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800a8e8:	613b      	str	r3, [r7, #16]
    break;
 800a8ea:	e01c      	b.n	800a926 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800a8ec:	4b21      	ldr	r3, [pc, #132]	; (800a974 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	f003 0308 	and.w	r3, r3, #8
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d107      	bne.n	800a908 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800a8f8:	4b1e      	ldr	r3, [pc, #120]	; (800a974 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800a8fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a8fe:	0a1b      	lsrs	r3, r3, #8
 800a900:	f003 030f 	and.w	r3, r3, #15
 800a904:	617b      	str	r3, [r7, #20]
 800a906:	e005      	b.n	800a914 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800a908:	4b1a      	ldr	r3, [pc, #104]	; (800a974 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	091b      	lsrs	r3, r3, #4
 800a90e:	f003 030f 	and.w	r3, r3, #15
 800a912:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 800a914:	4a19      	ldr	r2, [pc, #100]	; (800a97c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 800a916:	697b      	ldr	r3, [r7, #20]
 800a918:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a91c:	613b      	str	r3, [r7, #16]
    break;
 800a91e:	e002      	b.n	800a926 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 800a920:	2300      	movs	r3, #0
 800a922:	613b      	str	r3, [r7, #16]
    break;
 800a924:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800a926:	4b13      	ldr	r3, [pc, #76]	; (800a974 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800a928:	68db      	ldr	r3, [r3, #12]
 800a92a:	091b      	lsrs	r3, r3, #4
 800a92c:	f003 030f 	and.w	r3, r3, #15
 800a930:	3301      	adds	r3, #1
 800a932:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800a934:	4b0f      	ldr	r3, [pc, #60]	; (800a974 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800a936:	68db      	ldr	r3, [r3, #12]
 800a938:	0a1b      	lsrs	r3, r3, #8
 800a93a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a93e:	693a      	ldr	r2, [r7, #16]
 800a940:	fb03 f202 	mul.w	r2, r3, r2
 800a944:	68bb      	ldr	r3, [r7, #8]
 800a946:	fbb2 f3f3 	udiv	r3, r2, r3
 800a94a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800a94c:	4b09      	ldr	r3, [pc, #36]	; (800a974 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800a94e:	68db      	ldr	r3, [r3, #12]
 800a950:	0e5b      	lsrs	r3, r3, #25
 800a952:	f003 0303 	and.w	r3, r3, #3
 800a956:	3301      	adds	r3, #1
 800a958:	005b      	lsls	r3, r3, #1
 800a95a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800a95c:	693a      	ldr	r2, [r7, #16]
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	fbb2 f3f3 	udiv	r3, r2, r3
 800a964:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800a966:	683b      	ldr	r3, [r7, #0]
}
 800a968:	4618      	mov	r0, r3
 800a96a:	371c      	adds	r7, #28
 800a96c:	46bd      	mov	sp, r7
 800a96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a972:	4770      	bx	lr
 800a974:	40021000 	.word	0x40021000
 800a978:	00f42400 	.word	0x00f42400
 800a97c:	08016e6c 	.word	0x08016e6c

0800a980 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a980:	b580      	push	{r7, lr}
 800a982:	b086      	sub	sp, #24
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a988:	2300      	movs	r3, #0
 800a98a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a98c:	2300      	movs	r3, #0
 800a98e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d040      	beq.n	800aa1e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a9a0:	2b80      	cmp	r3, #128	; 0x80
 800a9a2:	d02a      	beq.n	800a9fa <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800a9a4:	2b80      	cmp	r3, #128	; 0x80
 800a9a6:	d825      	bhi.n	800a9f4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800a9a8:	2b60      	cmp	r3, #96	; 0x60
 800a9aa:	d026      	beq.n	800a9fa <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800a9ac:	2b60      	cmp	r3, #96	; 0x60
 800a9ae:	d821      	bhi.n	800a9f4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800a9b0:	2b40      	cmp	r3, #64	; 0x40
 800a9b2:	d006      	beq.n	800a9c2 <HAL_RCCEx_PeriphCLKConfig+0x42>
 800a9b4:	2b40      	cmp	r3, #64	; 0x40
 800a9b6:	d81d      	bhi.n	800a9f4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d009      	beq.n	800a9d0 <HAL_RCCEx_PeriphCLKConfig+0x50>
 800a9bc:	2b20      	cmp	r3, #32
 800a9be:	d010      	beq.n	800a9e2 <HAL_RCCEx_PeriphCLKConfig+0x62>
 800a9c0:	e018      	b.n	800a9f4 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800a9c2:	4b89      	ldr	r3, [pc, #548]	; (800abe8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a9c4:	68db      	ldr	r3, [r3, #12]
 800a9c6:	4a88      	ldr	r2, [pc, #544]	; (800abe8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800a9c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a9cc:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800a9ce:	e015      	b.n	800a9fc <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	3304      	adds	r3, #4
 800a9d4:	2100      	movs	r1, #0
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	f000 fb3e 	bl	800b058 <RCCEx_PLLSAI1_Config>
 800a9dc:	4603      	mov	r3, r0
 800a9de:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800a9e0:	e00c      	b.n	800a9fc <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	3320      	adds	r3, #32
 800a9e6:	2100      	movs	r1, #0
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	f000 fc29 	bl	800b240 <RCCEx_PLLSAI2_Config>
 800a9ee:	4603      	mov	r3, r0
 800a9f0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800a9f2:	e003      	b.n	800a9fc <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a9f4:	2301      	movs	r3, #1
 800a9f6:	74fb      	strb	r3, [r7, #19]
      break;
 800a9f8:	e000      	b.n	800a9fc <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800a9fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a9fc:	7cfb      	ldrb	r3, [r7, #19]
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d10b      	bne.n	800aa1a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800aa02:	4b79      	ldr	r3, [pc, #484]	; (800abe8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800aa04:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800aa08:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa10:	4975      	ldr	r1, [pc, #468]	; (800abe8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800aa12:	4313      	orrs	r3, r2
 800aa14:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800aa18:	e001      	b.n	800aa1e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa1a:	7cfb      	ldrb	r3, [r7, #19]
 800aa1c:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d047      	beq.n	800aaba <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aa32:	d030      	beq.n	800aa96 <HAL_RCCEx_PeriphCLKConfig+0x116>
 800aa34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aa38:	d82a      	bhi.n	800aa90 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800aa3a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800aa3e:	d02a      	beq.n	800aa96 <HAL_RCCEx_PeriphCLKConfig+0x116>
 800aa40:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800aa44:	d824      	bhi.n	800aa90 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800aa46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aa4a:	d008      	beq.n	800aa5e <HAL_RCCEx_PeriphCLKConfig+0xde>
 800aa4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aa50:	d81e      	bhi.n	800aa90 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d00a      	beq.n	800aa6c <HAL_RCCEx_PeriphCLKConfig+0xec>
 800aa56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa5a:	d010      	beq.n	800aa7e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800aa5c:	e018      	b.n	800aa90 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800aa5e:	4b62      	ldr	r3, [pc, #392]	; (800abe8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800aa60:	68db      	ldr	r3, [r3, #12]
 800aa62:	4a61      	ldr	r2, [pc, #388]	; (800abe8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800aa64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aa68:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800aa6a:	e015      	b.n	800aa98 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	3304      	adds	r3, #4
 800aa70:	2100      	movs	r1, #0
 800aa72:	4618      	mov	r0, r3
 800aa74:	f000 faf0 	bl	800b058 <RCCEx_PLLSAI1_Config>
 800aa78:	4603      	mov	r3, r0
 800aa7a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800aa7c:	e00c      	b.n	800aa98 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	3320      	adds	r3, #32
 800aa82:	2100      	movs	r1, #0
 800aa84:	4618      	mov	r0, r3
 800aa86:	f000 fbdb 	bl	800b240 <RCCEx_PLLSAI2_Config>
 800aa8a:	4603      	mov	r3, r0
 800aa8c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800aa8e:	e003      	b.n	800aa98 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800aa90:	2301      	movs	r3, #1
 800aa92:	74fb      	strb	r3, [r7, #19]
      break;
 800aa94:	e000      	b.n	800aa98 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800aa96:	bf00      	nop
    }

    if(ret == HAL_OK)
 800aa98:	7cfb      	ldrb	r3, [r7, #19]
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d10b      	bne.n	800aab6 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800aa9e:	4b52      	ldr	r3, [pc, #328]	; (800abe8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800aaa0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800aaa4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aaac:	494e      	ldr	r1, [pc, #312]	; (800abe8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800aaae:	4313      	orrs	r3, r2
 800aab0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800aab4:	e001      	b.n	800aaba <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aab6:	7cfb      	ldrb	r3, [r7, #19]
 800aab8:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	f000 809f 	beq.w	800ac06 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 800aac8:	2300      	movs	r3, #0
 800aaca:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800aacc:	4b46      	ldr	r3, [pc, #280]	; (800abe8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800aace:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aad0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d101      	bne.n	800aadc <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800aad8:	2301      	movs	r3, #1
 800aada:	e000      	b.n	800aade <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800aadc:	2300      	movs	r3, #0
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d00d      	beq.n	800aafe <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800aae2:	4b41      	ldr	r3, [pc, #260]	; (800abe8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800aae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aae6:	4a40      	ldr	r2, [pc, #256]	; (800abe8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800aae8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aaec:	6593      	str	r3, [r2, #88]	; 0x58
 800aaee:	4b3e      	ldr	r3, [pc, #248]	; (800abe8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800aaf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aaf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aaf6:	60bb      	str	r3, [r7, #8]
 800aaf8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800aafa:	2301      	movs	r3, #1
 800aafc:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800aafe:	4b3b      	ldr	r3, [pc, #236]	; (800abec <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	4a3a      	ldr	r2, [pc, #232]	; (800abec <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800ab04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ab08:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ab0a:	f7fa fbeb 	bl	80052e4 <HAL_GetTick>
 800ab0e:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800ab10:	e009      	b.n	800ab26 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ab12:	f7fa fbe7 	bl	80052e4 <HAL_GetTick>
 800ab16:	4602      	mov	r2, r0
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	1ad3      	subs	r3, r2, r3
 800ab1c:	2b02      	cmp	r3, #2
 800ab1e:	d902      	bls.n	800ab26 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 800ab20:	2303      	movs	r3, #3
 800ab22:	74fb      	strb	r3, [r7, #19]
        break;
 800ab24:	e005      	b.n	800ab32 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800ab26:	4b31      	ldr	r3, [pc, #196]	; (800abec <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d0ef      	beq.n	800ab12 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800ab32:	7cfb      	ldrb	r3, [r7, #19]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d15b      	bne.n	800abf0 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800ab38:	4b2b      	ldr	r3, [pc, #172]	; (800abe8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800ab3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ab3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ab42:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800ab44:	697b      	ldr	r3, [r7, #20]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d01f      	beq.n	800ab8a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ab50:	697a      	ldr	r2, [r7, #20]
 800ab52:	429a      	cmp	r2, r3
 800ab54:	d019      	beq.n	800ab8a <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800ab56:	4b24      	ldr	r3, [pc, #144]	; (800abe8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800ab58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ab5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ab60:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800ab62:	4b21      	ldr	r3, [pc, #132]	; (800abe8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800ab64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ab68:	4a1f      	ldr	r2, [pc, #124]	; (800abe8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800ab6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ab6e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800ab72:	4b1d      	ldr	r3, [pc, #116]	; (800abe8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800ab74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ab78:	4a1b      	ldr	r2, [pc, #108]	; (800abe8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800ab7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ab7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800ab82:	4a19      	ldr	r2, [pc, #100]	; (800abe8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800ab84:	697b      	ldr	r3, [r7, #20]
 800ab86:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800ab8a:	697b      	ldr	r3, [r7, #20]
 800ab8c:	f003 0301 	and.w	r3, r3, #1
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d016      	beq.n	800abc2 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab94:	f7fa fba6 	bl	80052e4 <HAL_GetTick>
 800ab98:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800ab9a:	e00b      	b.n	800abb4 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ab9c:	f7fa fba2 	bl	80052e4 <HAL_GetTick>
 800aba0:	4602      	mov	r2, r0
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	1ad3      	subs	r3, r2, r3
 800aba6:	f241 3288 	movw	r2, #5000	; 0x1388
 800abaa:	4293      	cmp	r3, r2
 800abac:	d902      	bls.n	800abb4 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800abae:	2303      	movs	r3, #3
 800abb0:	74fb      	strb	r3, [r7, #19]
            break;
 800abb2:	e006      	b.n	800abc2 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800abb4:	4b0c      	ldr	r3, [pc, #48]	; (800abe8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800abb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800abba:	f003 0302 	and.w	r3, r3, #2
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d0ec      	beq.n	800ab9c <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800abc2:	7cfb      	ldrb	r3, [r7, #19]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d10c      	bne.n	800abe2 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800abc8:	4b07      	ldr	r3, [pc, #28]	; (800abe8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800abca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800abce:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800abd8:	4903      	ldr	r1, [pc, #12]	; (800abe8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800abda:	4313      	orrs	r3, r2
 800abdc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800abe0:	e008      	b.n	800abf4 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800abe2:	7cfb      	ldrb	r3, [r7, #19]
 800abe4:	74bb      	strb	r3, [r7, #18]
 800abe6:	e005      	b.n	800abf4 <HAL_RCCEx_PeriphCLKConfig+0x274>
 800abe8:	40021000 	.word	0x40021000
 800abec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800abf0:	7cfb      	ldrb	r3, [r7, #19]
 800abf2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800abf4:	7c7b      	ldrb	r3, [r7, #17]
 800abf6:	2b01      	cmp	r3, #1
 800abf8:	d105      	bne.n	800ac06 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800abfa:	4ba0      	ldr	r3, [pc, #640]	; (800ae7c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800abfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800abfe:	4a9f      	ldr	r2, [pc, #636]	; (800ae7c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ac00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ac04:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	f003 0301 	and.w	r3, r3, #1
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d00a      	beq.n	800ac28 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800ac12:	4b9a      	ldr	r3, [pc, #616]	; (800ae7c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ac14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac18:	f023 0203 	bic.w	r2, r3, #3
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac20:	4996      	ldr	r1, [pc, #600]	; (800ae7c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ac22:	4313      	orrs	r3, r2
 800ac24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	f003 0302 	and.w	r3, r3, #2
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d00a      	beq.n	800ac4a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800ac34:	4b91      	ldr	r3, [pc, #580]	; (800ae7c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ac36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac3a:	f023 020c 	bic.w	r2, r3, #12
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac42:	498e      	ldr	r1, [pc, #568]	; (800ae7c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ac44:	4313      	orrs	r3, r2
 800ac46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	f003 0304 	and.w	r3, r3, #4
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d00a      	beq.n	800ac6c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800ac56:	4b89      	ldr	r3, [pc, #548]	; (800ae7c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ac58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac5c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac64:	4985      	ldr	r1, [pc, #532]	; (800ae7c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ac66:	4313      	orrs	r3, r2
 800ac68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	f003 0308 	and.w	r3, r3, #8
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d00a      	beq.n	800ac8e <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800ac78:	4b80      	ldr	r3, [pc, #512]	; (800ae7c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ac7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac7e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ac86:	497d      	ldr	r1, [pc, #500]	; (800ae7c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ac88:	4313      	orrs	r3, r2
 800ac8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	f003 0310 	and.w	r3, r3, #16
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d00a      	beq.n	800acb0 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800ac9a:	4b78      	ldr	r3, [pc, #480]	; (800ae7c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ac9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aca0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aca8:	4974      	ldr	r1, [pc, #464]	; (800ae7c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800acaa:	4313      	orrs	r3, r2
 800acac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	f003 0320 	and.w	r3, r3, #32
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d00a      	beq.n	800acd2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800acbc:	4b6f      	ldr	r3, [pc, #444]	; (800ae7c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800acbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800acc2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800acca:	496c      	ldr	r1, [pc, #432]	; (800ae7c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800accc:	4313      	orrs	r3, r2
 800acce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d00a      	beq.n	800acf4 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800acde:	4b67      	ldr	r3, [pc, #412]	; (800ae7c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ace0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ace4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800acec:	4963      	ldr	r1, [pc, #396]	; (800ae7c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800acee:	4313      	orrs	r3, r2
 800acf0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d00a      	beq.n	800ad16 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800ad00:	4b5e      	ldr	r3, [pc, #376]	; (800ae7c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ad02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad06:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ad0e:	495b      	ldr	r1, [pc, #364]	; (800ae7c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ad10:	4313      	orrs	r3, r2
 800ad12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d00a      	beq.n	800ad38 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800ad22:	4b56      	ldr	r3, [pc, #344]	; (800ae7c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ad24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad28:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad30:	4952      	ldr	r1, [pc, #328]	; (800ae7c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ad32:	4313      	orrs	r3, r2
 800ad34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d00a      	beq.n	800ad5a <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800ad44:	4b4d      	ldr	r3, [pc, #308]	; (800ae7c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ad46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad4a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad52:	494a      	ldr	r1, [pc, #296]	; (800ae7c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ad54:	4313      	orrs	r3, r2
 800ad56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d00a      	beq.n	800ad7c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800ad66:	4b45      	ldr	r3, [pc, #276]	; (800ae7c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ad68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad6c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ad74:	4941      	ldr	r1, [pc, #260]	; (800ae7c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ad76:	4313      	orrs	r3, r2
 800ad78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d00a      	beq.n	800ad9e <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800ad88:	4b3c      	ldr	r3, [pc, #240]	; (800ae7c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ad8a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ad8e:	f023 0203 	bic.w	r2, r3, #3
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ad96:	4939      	ldr	r1, [pc, #228]	; (800ae7c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ad98:	4313      	orrs	r3, r2
 800ad9a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d028      	beq.n	800adfc <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800adaa:	4b34      	ldr	r3, [pc, #208]	; (800ae7c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800adac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800adb0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800adb8:	4930      	ldr	r1, [pc, #192]	; (800ae7c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800adba:	4313      	orrs	r3, r2
 800adbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800adc4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800adc8:	d106      	bne.n	800add8 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800adca:	4b2c      	ldr	r3, [pc, #176]	; (800ae7c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800adcc:	68db      	ldr	r3, [r3, #12]
 800adce:	4a2b      	ldr	r2, [pc, #172]	; (800ae7c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800add0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800add4:	60d3      	str	r3, [r2, #12]
 800add6:	e011      	b.n	800adfc <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800addc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ade0:	d10c      	bne.n	800adfc <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	3304      	adds	r3, #4
 800ade6:	2101      	movs	r1, #1
 800ade8:	4618      	mov	r0, r3
 800adea:	f000 f935 	bl	800b058 <RCCEx_PLLSAI1_Config>
 800adee:	4603      	mov	r3, r0
 800adf0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800adf2:	7cfb      	ldrb	r3, [r7, #19]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d001      	beq.n	800adfc <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 800adf8:	7cfb      	ldrb	r3, [r7, #19]
 800adfa:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d04d      	beq.n	800aea4 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ae0c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ae10:	d108      	bne.n	800ae24 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800ae12:	4b1a      	ldr	r3, [pc, #104]	; (800ae7c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ae14:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ae18:	4a18      	ldr	r2, [pc, #96]	; (800ae7c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ae1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ae1e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800ae22:	e012      	b.n	800ae4a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800ae24:	4b15      	ldr	r3, [pc, #84]	; (800ae7c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ae26:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ae2a:	4a14      	ldr	r2, [pc, #80]	; (800ae7c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ae2c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ae30:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800ae34:	4b11      	ldr	r3, [pc, #68]	; (800ae7c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ae36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae3a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ae42:	490e      	ldr	r1, [pc, #56]	; (800ae7c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ae44:	4313      	orrs	r3, r2
 800ae46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ae4e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ae52:	d106      	bne.n	800ae62 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800ae54:	4b09      	ldr	r3, [pc, #36]	; (800ae7c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ae56:	68db      	ldr	r3, [r3, #12]
 800ae58:	4a08      	ldr	r2, [pc, #32]	; (800ae7c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ae5a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ae5e:	60d3      	str	r3, [r2, #12]
 800ae60:	e020      	b.n	800aea4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ae66:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ae6a:	d109      	bne.n	800ae80 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800ae6c:	4b03      	ldr	r3, [pc, #12]	; (800ae7c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ae6e:	68db      	ldr	r3, [r3, #12]
 800ae70:	4a02      	ldr	r2, [pc, #8]	; (800ae7c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800ae72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ae76:	60d3      	str	r3, [r2, #12]
 800ae78:	e014      	b.n	800aea4 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800ae7a:	bf00      	nop
 800ae7c:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ae84:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ae88:	d10c      	bne.n	800aea4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	3304      	adds	r3, #4
 800ae8e:	2101      	movs	r1, #1
 800ae90:	4618      	mov	r0, r3
 800ae92:	f000 f8e1 	bl	800b058 <RCCEx_PLLSAI1_Config>
 800ae96:	4603      	mov	r3, r0
 800ae98:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800ae9a:	7cfb      	ldrb	r3, [r7, #19]
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d001      	beq.n	800aea4 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 800aea0:	7cfb      	ldrb	r3, [r7, #19]
 800aea2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d028      	beq.n	800af02 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800aeb0:	4b68      	ldr	r3, [pc, #416]	; (800b054 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800aeb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aeb6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aebe:	4965      	ldr	r1, [pc, #404]	; (800b054 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800aec0:	4313      	orrs	r3, r2
 800aec2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aeca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800aece:	d106      	bne.n	800aede <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800aed0:	4b60      	ldr	r3, [pc, #384]	; (800b054 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800aed2:	68db      	ldr	r3, [r3, #12]
 800aed4:	4a5f      	ldr	r2, [pc, #380]	; (800b054 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800aed6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800aeda:	60d3      	str	r3, [r2, #12]
 800aedc:	e011      	b.n	800af02 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aee2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800aee6:	d10c      	bne.n	800af02 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	3304      	adds	r3, #4
 800aeec:	2101      	movs	r1, #1
 800aeee:	4618      	mov	r0, r3
 800aef0:	f000 f8b2 	bl	800b058 <RCCEx_PLLSAI1_Config>
 800aef4:	4603      	mov	r3, r0
 800aef6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800aef8:	7cfb      	ldrb	r3, [r7, #19]
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d001      	beq.n	800af02 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800aefe:	7cfb      	ldrb	r3, [r7, #19]
 800af00:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d01e      	beq.n	800af4c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800af0e:	4b51      	ldr	r3, [pc, #324]	; (800b054 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800af10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af14:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800af1e:	494d      	ldr	r1, [pc, #308]	; (800b054 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800af20:	4313      	orrs	r3, r2
 800af22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800af2c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800af30:	d10c      	bne.n	800af4c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	3304      	adds	r3, #4
 800af36:	2102      	movs	r1, #2
 800af38:	4618      	mov	r0, r3
 800af3a:	f000 f88d 	bl	800b058 <RCCEx_PLLSAI1_Config>
 800af3e:	4603      	mov	r3, r0
 800af40:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800af42:	7cfb      	ldrb	r3, [r7, #19]
 800af44:	2b00      	cmp	r3, #0
 800af46:	d001      	beq.n	800af4c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 800af48:	7cfb      	ldrb	r3, [r7, #19]
 800af4a:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800af54:	2b00      	cmp	r3, #0
 800af56:	d00b      	beq.n	800af70 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800af58:	4b3e      	ldr	r3, [pc, #248]	; (800b054 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800af5a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800af5e:	f023 0204 	bic.w	r2, r3, #4
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800af68:	493a      	ldr	r1, [pc, #232]	; (800b054 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800af6a:	4313      	orrs	r3, r2
 800af6c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d00b      	beq.n	800af94 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800af7c:	4b35      	ldr	r3, [pc, #212]	; (800b054 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800af7e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800af82:	f023 0218 	bic.w	r2, r3, #24
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af8c:	4931      	ldr	r1, [pc, #196]	; (800b054 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800af8e:	4313      	orrs	r3, r2
 800af90:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d035      	beq.n	800b00c <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800afa0:	4b2c      	ldr	r3, [pc, #176]	; (800b054 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	4a2b      	ldr	r2, [pc, #172]	; (800b054 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800afa6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800afaa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800afac:	f7fa f99a 	bl	80052e4 <HAL_GetTick>
 800afb0:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800afb2:	e009      	b.n	800afc8 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800afb4:	f7fa f996 	bl	80052e4 <HAL_GetTick>
 800afb8:	4602      	mov	r2, r0
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	1ad3      	subs	r3, r2, r3
 800afbe:	2b02      	cmp	r3, #2
 800afc0:	d902      	bls.n	800afc8 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 800afc2:	2303      	movs	r3, #3
 800afc4:	74fb      	strb	r3, [r7, #19]
        break;
 800afc6:	e005      	b.n	800afd4 <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800afc8:	4b22      	ldr	r3, [pc, #136]	; (800b054 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d1ef      	bne.n	800afb4 <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 800afd4:	7cfb      	ldrb	r3, [r7, #19]
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d113      	bne.n	800b002 <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 800afda:	4b1e      	ldr	r3, [pc, #120]	; (800b054 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800afdc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800afe0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800afea:	491a      	ldr	r1, [pc, #104]	; (800b054 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800afec:	4313      	orrs	r3, r2
 800afee:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	3320      	adds	r3, #32
 800aff6:	2102      	movs	r1, #2
 800aff8:	4618      	mov	r0, r3
 800affa:	f000 f921 	bl	800b240 <RCCEx_PLLSAI2_Config>
 800affe:	4603      	mov	r3, r0
 800b000:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 800b002:	7cfb      	ldrb	r3, [r7, #19]
 800b004:	2b00      	cmp	r3, #0
 800b006:	d001      	beq.n	800b00c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 800b008:	7cfb      	ldrb	r3, [r7, #19]
 800b00a:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b014:	2b00      	cmp	r3, #0
 800b016:	d017      	beq.n	800b048 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800b018:	4b0e      	ldr	r3, [pc, #56]	; (800b054 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b01a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b01e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b028:	490a      	ldr	r1, [pc, #40]	; (800b054 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b02a:	4313      	orrs	r3, r2
 800b02c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b036:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b03a:	d105      	bne.n	800b048 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b03c:	4b05      	ldr	r3, [pc, #20]	; (800b054 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b03e:	68db      	ldr	r3, [r3, #12]
 800b040:	4a04      	ldr	r2, [pc, #16]	; (800b054 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800b042:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b046:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800b048:	7cbb      	ldrb	r3, [r7, #18]
}
 800b04a:	4618      	mov	r0, r3
 800b04c:	3718      	adds	r7, #24
 800b04e:	46bd      	mov	sp, r7
 800b050:	bd80      	pop	{r7, pc}
 800b052:	bf00      	nop
 800b054:	40021000 	.word	0x40021000

0800b058 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800b058:	b580      	push	{r7, lr}
 800b05a:	b084      	sub	sp, #16
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	6078      	str	r0, [r7, #4]
 800b060:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b062:	2300      	movs	r3, #0
 800b064:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800b066:	4b72      	ldr	r3, [pc, #456]	; (800b230 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b068:	68db      	ldr	r3, [r3, #12]
 800b06a:	f003 0303 	and.w	r3, r3, #3
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d00e      	beq.n	800b090 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800b072:	4b6f      	ldr	r3, [pc, #444]	; (800b230 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b074:	68db      	ldr	r3, [r3, #12]
 800b076:	f003 0203 	and.w	r2, r3, #3
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	429a      	cmp	r2, r3
 800b080:	d103      	bne.n	800b08a <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	681b      	ldr	r3, [r3, #0]
       ||
 800b086:	2b00      	cmp	r3, #0
 800b088:	d142      	bne.n	800b110 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800b08a:	2301      	movs	r3, #1
 800b08c:	73fb      	strb	r3, [r7, #15]
 800b08e:	e03f      	b.n	800b110 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	2b03      	cmp	r3, #3
 800b096:	d018      	beq.n	800b0ca <RCCEx_PLLSAI1_Config+0x72>
 800b098:	2b03      	cmp	r3, #3
 800b09a:	d825      	bhi.n	800b0e8 <RCCEx_PLLSAI1_Config+0x90>
 800b09c:	2b01      	cmp	r3, #1
 800b09e:	d002      	beq.n	800b0a6 <RCCEx_PLLSAI1_Config+0x4e>
 800b0a0:	2b02      	cmp	r3, #2
 800b0a2:	d009      	beq.n	800b0b8 <RCCEx_PLLSAI1_Config+0x60>
 800b0a4:	e020      	b.n	800b0e8 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800b0a6:	4b62      	ldr	r3, [pc, #392]	; (800b230 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	f003 0302 	and.w	r3, r3, #2
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d11d      	bne.n	800b0ee <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800b0b2:	2301      	movs	r3, #1
 800b0b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b0b6:	e01a      	b.n	800b0ee <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800b0b8:	4b5d      	ldr	r3, [pc, #372]	; (800b230 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d116      	bne.n	800b0f2 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 800b0c4:	2301      	movs	r3, #1
 800b0c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b0c8:	e013      	b.n	800b0f2 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800b0ca:	4b59      	ldr	r3, [pc, #356]	; (800b230 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d10f      	bne.n	800b0f6 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800b0d6:	4b56      	ldr	r3, [pc, #344]	; (800b230 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d109      	bne.n	800b0f6 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800b0e2:	2301      	movs	r3, #1
 800b0e4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b0e6:	e006      	b.n	800b0f6 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 800b0e8:	2301      	movs	r3, #1
 800b0ea:	73fb      	strb	r3, [r7, #15]
      break;
 800b0ec:	e004      	b.n	800b0f8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800b0ee:	bf00      	nop
 800b0f0:	e002      	b.n	800b0f8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800b0f2:	bf00      	nop
 800b0f4:	e000      	b.n	800b0f8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800b0f6:	bf00      	nop
    }

    if(status == HAL_OK)
 800b0f8:	7bfb      	ldrb	r3, [r7, #15]
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d108      	bne.n	800b110 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800b0fe:	4b4c      	ldr	r3, [pc, #304]	; (800b230 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b100:	68db      	ldr	r3, [r3, #12]
 800b102:	f023 0203 	bic.w	r2, r3, #3
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	4949      	ldr	r1, [pc, #292]	; (800b230 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b10c:	4313      	orrs	r3, r2
 800b10e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800b110:	7bfb      	ldrb	r3, [r7, #15]
 800b112:	2b00      	cmp	r3, #0
 800b114:	f040 8086 	bne.w	800b224 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800b118:	4b45      	ldr	r3, [pc, #276]	; (800b230 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	4a44      	ldr	r2, [pc, #272]	; (800b230 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b11e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b122:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b124:	f7fa f8de 	bl	80052e4 <HAL_GetTick>
 800b128:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800b12a:	e009      	b.n	800b140 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800b12c:	f7fa f8da 	bl	80052e4 <HAL_GetTick>
 800b130:	4602      	mov	r2, r0
 800b132:	68bb      	ldr	r3, [r7, #8]
 800b134:	1ad3      	subs	r3, r2, r3
 800b136:	2b02      	cmp	r3, #2
 800b138:	d902      	bls.n	800b140 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800b13a:	2303      	movs	r3, #3
 800b13c:	73fb      	strb	r3, [r7, #15]
        break;
 800b13e:	e005      	b.n	800b14c <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800b140:	4b3b      	ldr	r3, [pc, #236]	; (800b230 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d1ef      	bne.n	800b12c <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800b14c:	7bfb      	ldrb	r3, [r7, #15]
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d168      	bne.n	800b224 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800b152:	683b      	ldr	r3, [r7, #0]
 800b154:	2b00      	cmp	r3, #0
 800b156:	d113      	bne.n	800b180 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800b158:	4b35      	ldr	r3, [pc, #212]	; (800b230 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b15a:	691a      	ldr	r2, [r3, #16]
 800b15c:	4b35      	ldr	r3, [pc, #212]	; (800b234 <RCCEx_PLLSAI1_Config+0x1dc>)
 800b15e:	4013      	ands	r3, r2
 800b160:	687a      	ldr	r2, [r7, #4]
 800b162:	6892      	ldr	r2, [r2, #8]
 800b164:	0211      	lsls	r1, r2, #8
 800b166:	687a      	ldr	r2, [r7, #4]
 800b168:	68d2      	ldr	r2, [r2, #12]
 800b16a:	06d2      	lsls	r2, r2, #27
 800b16c:	4311      	orrs	r1, r2
 800b16e:	687a      	ldr	r2, [r7, #4]
 800b170:	6852      	ldr	r2, [r2, #4]
 800b172:	3a01      	subs	r2, #1
 800b174:	0112      	lsls	r2, r2, #4
 800b176:	430a      	orrs	r2, r1
 800b178:	492d      	ldr	r1, [pc, #180]	; (800b230 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b17a:	4313      	orrs	r3, r2
 800b17c:	610b      	str	r3, [r1, #16]
 800b17e:	e02d      	b.n	800b1dc <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800b180:	683b      	ldr	r3, [r7, #0]
 800b182:	2b01      	cmp	r3, #1
 800b184:	d115      	bne.n	800b1b2 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800b186:	4b2a      	ldr	r3, [pc, #168]	; (800b230 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b188:	691a      	ldr	r2, [r3, #16]
 800b18a:	4b2b      	ldr	r3, [pc, #172]	; (800b238 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b18c:	4013      	ands	r3, r2
 800b18e:	687a      	ldr	r2, [r7, #4]
 800b190:	6892      	ldr	r2, [r2, #8]
 800b192:	0211      	lsls	r1, r2, #8
 800b194:	687a      	ldr	r2, [r7, #4]
 800b196:	6912      	ldr	r2, [r2, #16]
 800b198:	0852      	lsrs	r2, r2, #1
 800b19a:	3a01      	subs	r2, #1
 800b19c:	0552      	lsls	r2, r2, #21
 800b19e:	4311      	orrs	r1, r2
 800b1a0:	687a      	ldr	r2, [r7, #4]
 800b1a2:	6852      	ldr	r2, [r2, #4]
 800b1a4:	3a01      	subs	r2, #1
 800b1a6:	0112      	lsls	r2, r2, #4
 800b1a8:	430a      	orrs	r2, r1
 800b1aa:	4921      	ldr	r1, [pc, #132]	; (800b230 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b1ac:	4313      	orrs	r3, r2
 800b1ae:	610b      	str	r3, [r1, #16]
 800b1b0:	e014      	b.n	800b1dc <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800b1b2:	4b1f      	ldr	r3, [pc, #124]	; (800b230 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b1b4:	691a      	ldr	r2, [r3, #16]
 800b1b6:	4b21      	ldr	r3, [pc, #132]	; (800b23c <RCCEx_PLLSAI1_Config+0x1e4>)
 800b1b8:	4013      	ands	r3, r2
 800b1ba:	687a      	ldr	r2, [r7, #4]
 800b1bc:	6892      	ldr	r2, [r2, #8]
 800b1be:	0211      	lsls	r1, r2, #8
 800b1c0:	687a      	ldr	r2, [r7, #4]
 800b1c2:	6952      	ldr	r2, [r2, #20]
 800b1c4:	0852      	lsrs	r2, r2, #1
 800b1c6:	3a01      	subs	r2, #1
 800b1c8:	0652      	lsls	r2, r2, #25
 800b1ca:	4311      	orrs	r1, r2
 800b1cc:	687a      	ldr	r2, [r7, #4]
 800b1ce:	6852      	ldr	r2, [r2, #4]
 800b1d0:	3a01      	subs	r2, #1
 800b1d2:	0112      	lsls	r2, r2, #4
 800b1d4:	430a      	orrs	r2, r1
 800b1d6:	4916      	ldr	r1, [pc, #88]	; (800b230 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b1d8:	4313      	orrs	r3, r2
 800b1da:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800b1dc:	4b14      	ldr	r3, [pc, #80]	; (800b230 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	4a13      	ldr	r2, [pc, #76]	; (800b230 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b1e2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b1e6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b1e8:	f7fa f87c 	bl	80052e4 <HAL_GetTick>
 800b1ec:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800b1ee:	e009      	b.n	800b204 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800b1f0:	f7fa f878 	bl	80052e4 <HAL_GetTick>
 800b1f4:	4602      	mov	r2, r0
 800b1f6:	68bb      	ldr	r3, [r7, #8]
 800b1f8:	1ad3      	subs	r3, r2, r3
 800b1fa:	2b02      	cmp	r3, #2
 800b1fc:	d902      	bls.n	800b204 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800b1fe:	2303      	movs	r3, #3
 800b200:	73fb      	strb	r3, [r7, #15]
          break;
 800b202:	e005      	b.n	800b210 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800b204:	4b0a      	ldr	r3, [pc, #40]	; (800b230 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d0ef      	beq.n	800b1f0 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800b210:	7bfb      	ldrb	r3, [r7, #15]
 800b212:	2b00      	cmp	r3, #0
 800b214:	d106      	bne.n	800b224 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800b216:	4b06      	ldr	r3, [pc, #24]	; (800b230 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b218:	691a      	ldr	r2, [r3, #16]
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	699b      	ldr	r3, [r3, #24]
 800b21e:	4904      	ldr	r1, [pc, #16]	; (800b230 <RCCEx_PLLSAI1_Config+0x1d8>)
 800b220:	4313      	orrs	r3, r2
 800b222:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800b224:	7bfb      	ldrb	r3, [r7, #15]
}
 800b226:	4618      	mov	r0, r3
 800b228:	3710      	adds	r7, #16
 800b22a:	46bd      	mov	sp, r7
 800b22c:	bd80      	pop	{r7, pc}
 800b22e:	bf00      	nop
 800b230:	40021000 	.word	0x40021000
 800b234:	07ff800f 	.word	0x07ff800f
 800b238:	ff9f800f 	.word	0xff9f800f
 800b23c:	f9ff800f 	.word	0xf9ff800f

0800b240 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800b240:	b580      	push	{r7, lr}
 800b242:	b084      	sub	sp, #16
 800b244:	af00      	add	r7, sp, #0
 800b246:	6078      	str	r0, [r7, #4]
 800b248:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b24a:	2300      	movs	r3, #0
 800b24c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800b24e:	4b72      	ldr	r3, [pc, #456]	; (800b418 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b250:	68db      	ldr	r3, [r3, #12]
 800b252:	f003 0303 	and.w	r3, r3, #3
 800b256:	2b00      	cmp	r3, #0
 800b258:	d00e      	beq.n	800b278 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800b25a:	4b6f      	ldr	r3, [pc, #444]	; (800b418 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b25c:	68db      	ldr	r3, [r3, #12]
 800b25e:	f003 0203 	and.w	r2, r3, #3
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	429a      	cmp	r2, r3
 800b268:	d103      	bne.n	800b272 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	681b      	ldr	r3, [r3, #0]
       ||
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d142      	bne.n	800b2f8 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800b272:	2301      	movs	r3, #1
 800b274:	73fb      	strb	r3, [r7, #15]
 800b276:	e03f      	b.n	800b2f8 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	2b03      	cmp	r3, #3
 800b27e:	d018      	beq.n	800b2b2 <RCCEx_PLLSAI2_Config+0x72>
 800b280:	2b03      	cmp	r3, #3
 800b282:	d825      	bhi.n	800b2d0 <RCCEx_PLLSAI2_Config+0x90>
 800b284:	2b01      	cmp	r3, #1
 800b286:	d002      	beq.n	800b28e <RCCEx_PLLSAI2_Config+0x4e>
 800b288:	2b02      	cmp	r3, #2
 800b28a:	d009      	beq.n	800b2a0 <RCCEx_PLLSAI2_Config+0x60>
 800b28c:	e020      	b.n	800b2d0 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800b28e:	4b62      	ldr	r3, [pc, #392]	; (800b418 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	f003 0302 	and.w	r3, r3, #2
 800b296:	2b00      	cmp	r3, #0
 800b298:	d11d      	bne.n	800b2d6 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800b29a:	2301      	movs	r3, #1
 800b29c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b29e:	e01a      	b.n	800b2d6 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800b2a0:	4b5d      	ldr	r3, [pc, #372]	; (800b418 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d116      	bne.n	800b2da <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 800b2ac:	2301      	movs	r3, #1
 800b2ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b2b0:	e013      	b.n	800b2da <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800b2b2:	4b59      	ldr	r3, [pc, #356]	; (800b418 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d10f      	bne.n	800b2de <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800b2be:	4b56      	ldr	r3, [pc, #344]	; (800b418 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d109      	bne.n	800b2de <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800b2ca:	2301      	movs	r3, #1
 800b2cc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b2ce:	e006      	b.n	800b2de <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 800b2d0:	2301      	movs	r3, #1
 800b2d2:	73fb      	strb	r3, [r7, #15]
      break;
 800b2d4:	e004      	b.n	800b2e0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800b2d6:	bf00      	nop
 800b2d8:	e002      	b.n	800b2e0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800b2da:	bf00      	nop
 800b2dc:	e000      	b.n	800b2e0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800b2de:	bf00      	nop
    }

    if(status == HAL_OK)
 800b2e0:	7bfb      	ldrb	r3, [r7, #15]
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d108      	bne.n	800b2f8 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800b2e6:	4b4c      	ldr	r3, [pc, #304]	; (800b418 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b2e8:	68db      	ldr	r3, [r3, #12]
 800b2ea:	f023 0203 	bic.w	r2, r3, #3
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	4949      	ldr	r1, [pc, #292]	; (800b418 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b2f4:	4313      	orrs	r3, r2
 800b2f6:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800b2f8:	7bfb      	ldrb	r3, [r7, #15]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	f040 8086 	bne.w	800b40c <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800b300:	4b45      	ldr	r3, [pc, #276]	; (800b418 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	4a44      	ldr	r2, [pc, #272]	; (800b418 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b306:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b30a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b30c:	f7f9 ffea 	bl	80052e4 <HAL_GetTick>
 800b310:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800b312:	e009      	b.n	800b328 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800b314:	f7f9 ffe6 	bl	80052e4 <HAL_GetTick>
 800b318:	4602      	mov	r2, r0
 800b31a:	68bb      	ldr	r3, [r7, #8]
 800b31c:	1ad3      	subs	r3, r2, r3
 800b31e:	2b02      	cmp	r3, #2
 800b320:	d902      	bls.n	800b328 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800b322:	2303      	movs	r3, #3
 800b324:	73fb      	strb	r3, [r7, #15]
        break;
 800b326:	e005      	b.n	800b334 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800b328:	4b3b      	ldr	r3, [pc, #236]	; (800b418 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b330:	2b00      	cmp	r3, #0
 800b332:	d1ef      	bne.n	800b314 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800b334:	7bfb      	ldrb	r3, [r7, #15]
 800b336:	2b00      	cmp	r3, #0
 800b338:	d168      	bne.n	800b40c <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800b33a:	683b      	ldr	r3, [r7, #0]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d113      	bne.n	800b368 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800b340:	4b35      	ldr	r3, [pc, #212]	; (800b418 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b342:	695a      	ldr	r2, [r3, #20]
 800b344:	4b35      	ldr	r3, [pc, #212]	; (800b41c <RCCEx_PLLSAI2_Config+0x1dc>)
 800b346:	4013      	ands	r3, r2
 800b348:	687a      	ldr	r2, [r7, #4]
 800b34a:	6892      	ldr	r2, [r2, #8]
 800b34c:	0211      	lsls	r1, r2, #8
 800b34e:	687a      	ldr	r2, [r7, #4]
 800b350:	68d2      	ldr	r2, [r2, #12]
 800b352:	06d2      	lsls	r2, r2, #27
 800b354:	4311      	orrs	r1, r2
 800b356:	687a      	ldr	r2, [r7, #4]
 800b358:	6852      	ldr	r2, [r2, #4]
 800b35a:	3a01      	subs	r2, #1
 800b35c:	0112      	lsls	r2, r2, #4
 800b35e:	430a      	orrs	r2, r1
 800b360:	492d      	ldr	r1, [pc, #180]	; (800b418 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b362:	4313      	orrs	r3, r2
 800b364:	614b      	str	r3, [r1, #20]
 800b366:	e02d      	b.n	800b3c4 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 800b368:	683b      	ldr	r3, [r7, #0]
 800b36a:	2b01      	cmp	r3, #1
 800b36c:	d115      	bne.n	800b39a <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800b36e:	4b2a      	ldr	r3, [pc, #168]	; (800b418 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b370:	695a      	ldr	r2, [r3, #20]
 800b372:	4b2b      	ldr	r3, [pc, #172]	; (800b420 <RCCEx_PLLSAI2_Config+0x1e0>)
 800b374:	4013      	ands	r3, r2
 800b376:	687a      	ldr	r2, [r7, #4]
 800b378:	6892      	ldr	r2, [r2, #8]
 800b37a:	0211      	lsls	r1, r2, #8
 800b37c:	687a      	ldr	r2, [r7, #4]
 800b37e:	6912      	ldr	r2, [r2, #16]
 800b380:	0852      	lsrs	r2, r2, #1
 800b382:	3a01      	subs	r2, #1
 800b384:	0552      	lsls	r2, r2, #21
 800b386:	4311      	orrs	r1, r2
 800b388:	687a      	ldr	r2, [r7, #4]
 800b38a:	6852      	ldr	r2, [r2, #4]
 800b38c:	3a01      	subs	r2, #1
 800b38e:	0112      	lsls	r2, r2, #4
 800b390:	430a      	orrs	r2, r1
 800b392:	4921      	ldr	r1, [pc, #132]	; (800b418 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b394:	4313      	orrs	r3, r2
 800b396:	614b      	str	r3, [r1, #20]
 800b398:	e014      	b.n	800b3c4 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800b39a:	4b1f      	ldr	r3, [pc, #124]	; (800b418 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b39c:	695a      	ldr	r2, [r3, #20]
 800b39e:	4b21      	ldr	r3, [pc, #132]	; (800b424 <RCCEx_PLLSAI2_Config+0x1e4>)
 800b3a0:	4013      	ands	r3, r2
 800b3a2:	687a      	ldr	r2, [r7, #4]
 800b3a4:	6892      	ldr	r2, [r2, #8]
 800b3a6:	0211      	lsls	r1, r2, #8
 800b3a8:	687a      	ldr	r2, [r7, #4]
 800b3aa:	6952      	ldr	r2, [r2, #20]
 800b3ac:	0852      	lsrs	r2, r2, #1
 800b3ae:	3a01      	subs	r2, #1
 800b3b0:	0652      	lsls	r2, r2, #25
 800b3b2:	4311      	orrs	r1, r2
 800b3b4:	687a      	ldr	r2, [r7, #4]
 800b3b6:	6852      	ldr	r2, [r2, #4]
 800b3b8:	3a01      	subs	r2, #1
 800b3ba:	0112      	lsls	r2, r2, #4
 800b3bc:	430a      	orrs	r2, r1
 800b3be:	4916      	ldr	r1, [pc, #88]	; (800b418 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b3c0:	4313      	orrs	r3, r2
 800b3c2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800b3c4:	4b14      	ldr	r3, [pc, #80]	; (800b418 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	4a13      	ldr	r2, [pc, #76]	; (800b418 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b3ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b3ce:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b3d0:	f7f9 ff88 	bl	80052e4 <HAL_GetTick>
 800b3d4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800b3d6:	e009      	b.n	800b3ec <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800b3d8:	f7f9 ff84 	bl	80052e4 <HAL_GetTick>
 800b3dc:	4602      	mov	r2, r0
 800b3de:	68bb      	ldr	r3, [r7, #8]
 800b3e0:	1ad3      	subs	r3, r2, r3
 800b3e2:	2b02      	cmp	r3, #2
 800b3e4:	d902      	bls.n	800b3ec <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800b3e6:	2303      	movs	r3, #3
 800b3e8:	73fb      	strb	r3, [r7, #15]
          break;
 800b3ea:	e005      	b.n	800b3f8 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800b3ec:	4b0a      	ldr	r3, [pc, #40]	; (800b418 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d0ef      	beq.n	800b3d8 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800b3f8:	7bfb      	ldrb	r3, [r7, #15]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d106      	bne.n	800b40c <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800b3fe:	4b06      	ldr	r3, [pc, #24]	; (800b418 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b400:	695a      	ldr	r2, [r3, #20]
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	699b      	ldr	r3, [r3, #24]
 800b406:	4904      	ldr	r1, [pc, #16]	; (800b418 <RCCEx_PLLSAI2_Config+0x1d8>)
 800b408:	4313      	orrs	r3, r2
 800b40a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800b40c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b40e:	4618      	mov	r0, r3
 800b410:	3710      	adds	r7, #16
 800b412:	46bd      	mov	sp, r7
 800b414:	bd80      	pop	{r7, pc}
 800b416:	bf00      	nop
 800b418:	40021000 	.word	0x40021000
 800b41c:	07ff800f 	.word	0x07ff800f
 800b420:	ff9f800f 	.word	0xff9f800f
 800b424:	f9ff800f 	.word	0xf9ff800f

0800b428 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800b428:	b580      	push	{r7, lr}
 800b42a:	b084      	sub	sp, #16
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800b430:	2301      	movs	r3, #1
 800b432:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	2b00      	cmp	r3, #0
 800b438:	d07f      	beq.n	800b53a <HAL_RTC_Init+0x112>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b440:	b2db      	uxtb	r3, r3
 800b442:	2b00      	cmp	r3, #0
 800b444:	d106      	bne.n	800b454 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	2200      	movs	r2, #0
 800b44a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800b44e:	6878      	ldr	r0, [r7, #4]
 800b450:	f7f9 fc72 	bl	8004d38 <HAL_RTC_MspInit>
    }
#endif /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 800b45a:	605a      	str	r2, [r3, #4]
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	2202      	movs	r2, #2
 800b460:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	22ca      	movs	r2, #202	; 0xca
 800b46a:	625a      	str	r2, [r3, #36]	; 0x24
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	2253      	movs	r2, #83	; 0x53
 800b472:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800b474:	6878      	ldr	r0, [r7, #4]
 800b476:	f000 fa65 	bl	800b944 <RTC_EnterInitMode>
 800b47a:	4603      	mov	r3, r0
 800b47c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800b47e:	7bfb      	ldrb	r3, [r7, #15]
 800b480:	2b00      	cmp	r3, #0
 800b482:	d15a      	bne.n	800b53a <HAL_RTC_Init+0x112>
    {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	699b      	ldr	r3, [r3, #24]
 800b48a:	687a      	ldr	r2, [r7, #4]
 800b48c:	6812      	ldr	r2, [r2, #0]
 800b48e:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 800b492:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b496:	6193      	str	r3, [r2, #24]
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	6999      	ldr	r1, [r3, #24]
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	689a      	ldr	r2, [r3, #8]
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	695b      	ldr	r3, [r3, #20]
 800b4a6:	431a      	orrs	r2, r3
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	69db      	ldr	r3, [r3, #28]
 800b4ac:	431a      	orrs	r2, r3
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	430a      	orrs	r2, r1
 800b4b4:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	687a      	ldr	r2, [r7, #4]
 800b4bc:	6912      	ldr	r2, [r2, #16]
 800b4be:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	6919      	ldr	r1, [r3, #16]
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	68db      	ldr	r3, [r3, #12]
 800b4ca:	041a      	lsls	r2, r3, #16
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	430a      	orrs	r2, r1
 800b4d2:	611a      	str	r2, [r3, #16]

#if defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800b4d4:	4b1b      	ldr	r3, [pc, #108]	; (800b544 <HAL_RTC_Init+0x11c>)
 800b4d6:	68db      	ldr	r3, [r3, #12]
 800b4d8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4e4:	430b      	orrs	r3, r1
 800b4e6:	4917      	ldr	r1, [pc, #92]	; (800b544 <HAL_RTC_Init+0x11c>)
 800b4e8:	4313      	orrs	r3, r2
 800b4ea:	60cb      	str	r3, [r1, #12]
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800b4ec:	6878      	ldr	r0, [r7, #4]
 800b4ee:	f000 fa5f 	bl	800b9b0 <RTC_ExitInitMode>
 800b4f2:	4603      	mov	r3, r0
 800b4f4:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800b4f6:	7bfb      	ldrb	r3, [r7, #15]
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d11e      	bne.n	800b53a <HAL_RTC_Init+0x112>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	699a      	ldr	r2, [r3, #24]
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 800b50a:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	6999      	ldr	r1, [r3, #24]
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	6a1b      	ldr	r3, [r3, #32]
 800b51a:	431a      	orrs	r2, r3
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	699b      	ldr	r3, [r3, #24]
 800b520:	431a      	orrs	r2, r3
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	430a      	orrs	r2, r1
 800b528:	619a      	str	r2, [r3, #24]
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	22ff      	movs	r2, #255	; 0xff
 800b530:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	2201      	movs	r2, #1
 800b536:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      }
    }
  }

  return status;
 800b53a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b53c:	4618      	mov	r0, r3
 800b53e:	3710      	adds	r7, #16
 800b540:	46bd      	mov	sp, r7
 800b542:	bd80      	pop	{r7, pc}
 800b544:	40002800 	.word	0x40002800

0800b548 <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800b548:	b590      	push	{r4, r7, lr}
 800b54a:	b087      	sub	sp, #28
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	60f8      	str	r0, [r7, #12]
 800b550:	60b9      	str	r1, [r7, #8]
 800b552:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));
  }
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b55a:	2b01      	cmp	r3, #1
 800b55c:	d101      	bne.n	800b562 <HAL_RTC_SetTime+0x1a>
 800b55e:	2302      	movs	r3, #2
 800b560:	e08b      	b.n	800b67a <HAL_RTC_SetTime+0x132>
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	2201      	movs	r2, #1
 800b566:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  hrtc->State = HAL_RTC_STATE_BUSY;
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	2202      	movs	r2, #2
 800b56e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	22ca      	movs	r2, #202	; 0xca
 800b578:	625a      	str	r2, [r3, #36]	; 0x24
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	2253      	movs	r2, #83	; 0x53
 800b580:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800b582:	68f8      	ldr	r0, [r7, #12]
 800b584:	f000 f9de 	bl	800b944 <RTC_EnterInitMode>
 800b588:	4603      	mov	r3, r0
 800b58a:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800b58c:	7cfb      	ldrb	r3, [r7, #19]
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d15e      	bne.n	800b650 <HAL_RTC_SetTime+0x108>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 800b592:	4b3c      	ldr	r3, [pc, #240]	; (800b684 <HAL_RTC_SetTime+0x13c>)
 800b594:	68db      	ldr	r3, [r3, #12]
 800b596:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b59a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b59e:	d057      	beq.n	800b650 <HAL_RTC_SetTime+0x108>
    {
      if (Format == RTC_FORMAT_BIN)
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d125      	bne.n	800b5f2 <HAL_RTC_SetTime+0xaa>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800b5a6:	4b37      	ldr	r3, [pc, #220]	; (800b684 <HAL_RTC_SetTime+0x13c>)
 800b5a8:	699b      	ldr	r3, [r3, #24]
 800b5aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d102      	bne.n	800b5b8 <HAL_RTC_SetTime+0x70>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800b5b2:	68bb      	ldr	r3, [r7, #8]
 800b5b4:	2200      	movs	r2, #0
 800b5b6:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800b5b8:	68bb      	ldr	r3, [r7, #8]
 800b5ba:	781b      	ldrb	r3, [r3, #0]
 800b5bc:	4618      	mov	r0, r3
 800b5be:	f000 fa35 	bl	800ba2c <RTC_ByteToBcd2>
 800b5c2:	4603      	mov	r3, r0
 800b5c4:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b5c6:	68bb      	ldr	r3, [r7, #8]
 800b5c8:	785b      	ldrb	r3, [r3, #1]
 800b5ca:	4618      	mov	r0, r3
 800b5cc:	f000 fa2e 	bl	800ba2c <RTC_ByteToBcd2>
 800b5d0:	4603      	mov	r3, r0
 800b5d2:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800b5d4:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800b5d6:	68bb      	ldr	r3, [r7, #8]
 800b5d8:	789b      	ldrb	r3, [r3, #2]
 800b5da:	4618      	mov	r0, r3
 800b5dc:	f000 fa26 	bl	800ba2c <RTC_ByteToBcd2>
 800b5e0:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b5e2:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800b5e6:	68bb      	ldr	r3, [r7, #8]
 800b5e8:	78db      	ldrb	r3, [r3, #3]
 800b5ea:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800b5ec:	4313      	orrs	r3, r2
 800b5ee:	617b      	str	r3, [r7, #20]
 800b5f0:	e017      	b.n	800b622 <HAL_RTC_SetTime+0xda>

      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800b5f2:	4b24      	ldr	r3, [pc, #144]	; (800b684 <HAL_RTC_SetTime+0x13c>)
 800b5f4:	699b      	ldr	r3, [r3, #24]
 800b5f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d102      	bne.n	800b604 <HAL_RTC_SetTime+0xbc>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800b5fe:	68bb      	ldr	r3, [r7, #8]
 800b600:	2200      	movs	r2, #0
 800b602:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800b604:	68bb      	ldr	r3, [r7, #8]
 800b606:	781b      	ldrb	r3, [r3, #0]
 800b608:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b60a:	68bb      	ldr	r3, [r7, #8]
 800b60c:	785b      	ldrb	r3, [r3, #1]
 800b60e:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800b610:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800b612:	68ba      	ldr	r2, [r7, #8]
 800b614:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b616:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800b618:	68bb      	ldr	r3, [r7, #8]
 800b61a:	78db      	ldrb	r3, [r3, #3]
 800b61c:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800b61e:	4313      	orrs	r3, r2
 800b620:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 800b622:	4a18      	ldr	r2, [pc, #96]	; (800b684 <HAL_RTC_SetTime+0x13c>)
 800b624:	697b      	ldr	r3, [r7, #20]
 800b626:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800b62a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800b62e:	6013      	str	r3, [r2, #0]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 800b630:	4b14      	ldr	r3, [pc, #80]	; (800b684 <HAL_RTC_SetTime+0x13c>)
 800b632:	699b      	ldr	r3, [r3, #24]
 800b634:	4a13      	ldr	r2, [pc, #76]	; (800b684 <HAL_RTC_SetTime+0x13c>)
 800b636:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b63a:	6193      	str	r3, [r2, #24]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 800b63c:	4b11      	ldr	r3, [pc, #68]	; (800b684 <HAL_RTC_SetTime+0x13c>)
 800b63e:	699a      	ldr	r2, [r3, #24]
 800b640:	68bb      	ldr	r3, [r7, #8]
 800b642:	68d9      	ldr	r1, [r3, #12]
 800b644:	68bb      	ldr	r3, [r7, #8]
 800b646:	691b      	ldr	r3, [r3, #16]
 800b648:	430b      	orrs	r3, r1
 800b64a:	490e      	ldr	r1, [pc, #56]	; (800b684 <HAL_RTC_SetTime+0x13c>)
 800b64c:	4313      	orrs	r3, r2
 800b64e:	618b      	str	r3, [r1, #24]
    }
  }

  /* Exit Initialization mode */
  status = RTC_ExitInitMode(hrtc);
 800b650:	68f8      	ldr	r0, [r7, #12]
 800b652:	f000 f9ad 	bl	800b9b0 <RTC_ExitInitMode>
 800b656:	4603      	mov	r3, r0
 800b658:	74fb      	strb	r3, [r7, #19]


  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	22ff      	movs	r2, #255	; 0xff
 800b660:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800b662:	7cfb      	ldrb	r3, [r7, #19]
 800b664:	2b00      	cmp	r3, #0
 800b666:	d103      	bne.n	800b670 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	2201      	movs	r2, #1
 800b66c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	2200      	movs	r2, #0
 800b674:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800b678:	7cfb      	ldrb	r3, [r7, #19]
}
 800b67a:	4618      	mov	r0, r3
 800b67c:	371c      	adds	r7, #28
 800b67e:	46bd      	mov	sp, r7
 800b680:	bd90      	pop	{r4, r7, pc}
 800b682:	bf00      	nop
 800b684:	40002800 	.word	0x40002800

0800b688 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800b688:	b580      	push	{r7, lr}
 800b68a:	b086      	sub	sp, #24
 800b68c:	af00      	add	r7, sp, #0
 800b68e:	60f8      	str	r0, [r7, #12]
 800b690:	60b9      	str	r1, [r7, #8]
 800b692:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg;

  UNUSED(hrtc);
  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = READ_REG(RTC->SSR);
 800b694:	4b2c      	ldr	r3, [pc, #176]	; (800b748 <HAL_RTC_GetTime+0xc0>)
 800b696:	689a      	ldr	r2, [r3, #8]
 800b698:	68bb      	ldr	r3, [r7, #8]
 800b69a:	605a      	str	r2, [r3, #4]

  if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 800b69c:	4b2a      	ldr	r3, [pc, #168]	; (800b748 <HAL_RTC_GetTime+0xc0>)
 800b69e:	68db      	ldr	r3, [r3, #12]
 800b6a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b6a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b6a8:	d049      	beq.n	800b73e <HAL_RTC_GetTime+0xb6>
  {
    /* Check the parameters */
    assert_param(IS_RTC_FORMAT(Format));

    /* Get SecondFraction structure field from the corresponding register field*/
    sTime->SecondFraction = (uint32_t)(READ_REG(RTC->PRER) & RTC_PRER_PREDIV_S);
 800b6aa:	4b27      	ldr	r3, [pc, #156]	; (800b748 <HAL_RTC_GetTime+0xc0>)
 800b6ac:	691b      	ldr	r3, [r3, #16]
 800b6ae:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800b6b2:	68bb      	ldr	r3, [r7, #8]
 800b6b4:	609a      	str	r2, [r3, #8]

    /* Get the TR register */
    tmpreg = (uint32_t)(READ_REG(RTC->TR) & RTC_TR_RESERVED_MASK);
 800b6b6:	4b24      	ldr	r3, [pc, #144]	; (800b748 <HAL_RTC_GetTime+0xc0>)
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800b6be:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800b6c2:	617b      	str	r3, [r7, #20]

    /* Fill the structure fields with the read parameters */
    sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 800b6c4:	697b      	ldr	r3, [r7, #20]
 800b6c6:	0c1b      	lsrs	r3, r3, #16
 800b6c8:	b2db      	uxtb	r3, r3
 800b6ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b6ce:	b2da      	uxtb	r2, r3
 800b6d0:	68bb      	ldr	r3, [r7, #8]
 800b6d2:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800b6d4:	697b      	ldr	r3, [r7, #20]
 800b6d6:	0a1b      	lsrs	r3, r3, #8
 800b6d8:	b2db      	uxtb	r3, r3
 800b6da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b6de:	b2da      	uxtb	r2, r3
 800b6e0:	68bb      	ldr	r3, [r7, #8]
 800b6e2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 800b6e4:	697b      	ldr	r3, [r7, #20]
 800b6e6:	b2db      	uxtb	r3, r3
 800b6e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b6ec:	b2da      	uxtb	r2, r3
 800b6ee:	68bb      	ldr	r3, [r7, #8]
 800b6f0:	709a      	strb	r2, [r3, #2]
    sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 800b6f2:	697b      	ldr	r3, [r7, #20]
 800b6f4:	0d9b      	lsrs	r3, r3, #22
 800b6f6:	b2db      	uxtb	r3, r3
 800b6f8:	f003 0301 	and.w	r3, r3, #1
 800b6fc:	b2da      	uxtb	r2, r3
 800b6fe:	68bb      	ldr	r3, [r7, #8]
 800b700:	70da      	strb	r2, [r3, #3]

    /* Check the input parameters format */
    if (Format == RTC_FORMAT_BIN)
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	2b00      	cmp	r3, #0
 800b706:	d11a      	bne.n	800b73e <HAL_RTC_GetTime+0xb6>
    {
      /* Convert the time structure parameters to Binary format */
      sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800b708:	68bb      	ldr	r3, [r7, #8]
 800b70a:	781b      	ldrb	r3, [r3, #0]
 800b70c:	4618      	mov	r0, r3
 800b70e:	f000 f9ad 	bl	800ba6c <RTC_Bcd2ToByte>
 800b712:	4603      	mov	r3, r0
 800b714:	461a      	mov	r2, r3
 800b716:	68bb      	ldr	r3, [r7, #8]
 800b718:	701a      	strb	r2, [r3, #0]
      sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800b71a:	68bb      	ldr	r3, [r7, #8]
 800b71c:	785b      	ldrb	r3, [r3, #1]
 800b71e:	4618      	mov	r0, r3
 800b720:	f000 f9a4 	bl	800ba6c <RTC_Bcd2ToByte>
 800b724:	4603      	mov	r3, r0
 800b726:	461a      	mov	r2, r3
 800b728:	68bb      	ldr	r3, [r7, #8]
 800b72a:	705a      	strb	r2, [r3, #1]
      sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800b72c:	68bb      	ldr	r3, [r7, #8]
 800b72e:	789b      	ldrb	r3, [r3, #2]
 800b730:	4618      	mov	r0, r3
 800b732:	f000 f99b 	bl	800ba6c <RTC_Bcd2ToByte>
 800b736:	4603      	mov	r3, r0
 800b738:	461a      	mov	r2, r3
 800b73a:	68bb      	ldr	r3, [r7, #8]
 800b73c:	709a      	strb	r2, [r3, #2]
    }
  }

  return HAL_OK;
 800b73e:	2300      	movs	r3, #0
}
 800b740:	4618      	mov	r0, r3
 800b742:	3718      	adds	r7, #24
 800b744:	46bd      	mov	sp, r7
 800b746:	bd80      	pop	{r7, pc}
 800b748:	40002800 	.word	0x40002800

0800b74c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800b74c:	b590      	push	{r4, r7, lr}
 800b74e:	b087      	sub	sp, #28
 800b750:	af00      	add	r7, sp, #0
 800b752:	60f8      	str	r0, [r7, #12]
 800b754:	60b9      	str	r1, [r7, #8]
 800b756:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b75e:	2b01      	cmp	r3, #1
 800b760:	d101      	bne.n	800b766 <HAL_RTC_SetDate+0x1a>
 800b762:	2302      	movs	r3, #2
 800b764:	e074      	b.n	800b850 <HAL_RTC_SetDate+0x104>
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	2201      	movs	r2, #1
 800b76a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  hrtc->State = HAL_RTC_STATE_BUSY;
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	2202      	movs	r2, #2
 800b772:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d10e      	bne.n	800b79a <HAL_RTC_SetDate+0x4e>
 800b77c:	68bb      	ldr	r3, [r7, #8]
 800b77e:	785b      	ldrb	r3, [r3, #1]
 800b780:	f003 0310 	and.w	r3, r3, #16
 800b784:	2b00      	cmp	r3, #0
 800b786:	d008      	beq.n	800b79a <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800b788:	68bb      	ldr	r3, [r7, #8]
 800b78a:	785b      	ldrb	r3, [r3, #1]
 800b78c:	f023 0310 	bic.w	r3, r3, #16
 800b790:	b2db      	uxtb	r3, r3
 800b792:	330a      	adds	r3, #10
 800b794:	b2da      	uxtb	r2, r3
 800b796:	68bb      	ldr	r3, [r7, #8]
 800b798:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d11c      	bne.n	800b7da <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800b7a0:	68bb      	ldr	r3, [r7, #8]
 800b7a2:	78db      	ldrb	r3, [r3, #3]
 800b7a4:	4618      	mov	r0, r3
 800b7a6:	f000 f941 	bl	800ba2c <RTC_ByteToBcd2>
 800b7aa:	4603      	mov	r3, r0
 800b7ac:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800b7ae:	68bb      	ldr	r3, [r7, #8]
 800b7b0:	785b      	ldrb	r3, [r3, #1]
 800b7b2:	4618      	mov	r0, r3
 800b7b4:	f000 f93a 	bl	800ba2c <RTC_ByteToBcd2>
 800b7b8:	4603      	mov	r3, r0
 800b7ba:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800b7bc:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800b7be:	68bb      	ldr	r3, [r7, #8]
 800b7c0:	789b      	ldrb	r3, [r3, #2]
 800b7c2:	4618      	mov	r0, r3
 800b7c4:	f000 f932 	bl	800ba2c <RTC_ByteToBcd2>
 800b7c8:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800b7ca:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800b7ce:	68bb      	ldr	r3, [r7, #8]
 800b7d0:	781b      	ldrb	r3, [r3, #0]
 800b7d2:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800b7d4:	4313      	orrs	r3, r2
 800b7d6:	617b      	str	r3, [r7, #20]
 800b7d8:	e00e      	b.n	800b7f8 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800b7da:	68bb      	ldr	r3, [r7, #8]
 800b7dc:	78db      	ldrb	r3, [r3, #3]
 800b7de:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800b7e0:	68bb      	ldr	r3, [r7, #8]
 800b7e2:	785b      	ldrb	r3, [r3, #1]
 800b7e4:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800b7e6:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800b7e8:	68ba      	ldr	r2, [r7, #8]
 800b7ea:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800b7ec:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800b7ee:	68bb      	ldr	r3, [r7, #8]
 800b7f0:	781b      	ldrb	r3, [r3, #0]
 800b7f2:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800b7f4:	4313      	orrs	r3, r2
 800b7f6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	22ca      	movs	r2, #202	; 0xca
 800b7fe:	625a      	str	r2, [r3, #36]	; 0x24
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	2253      	movs	r2, #83	; 0x53
 800b806:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800b808:	68f8      	ldr	r0, [r7, #12]
 800b80a:	f000 f89b 	bl	800b944 <RTC_EnterInitMode>
 800b80e:	4603      	mov	r3, r0
 800b810:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800b812:	7cfb      	ldrb	r3, [r7, #19]
 800b814:	2b00      	cmp	r3, #0
 800b816:	d10b      	bne.n	800b830 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 800b818:	4a0f      	ldr	r2, [pc, #60]	; (800b858 <HAL_RTC_SetDate+0x10c>)
 800b81a:	697b      	ldr	r3, [r7, #20]
 800b81c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b820:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b824:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800b826:	68f8      	ldr	r0, [r7, #12]
 800b828:	f000 f8c2 	bl	800b9b0 <RTC_ExitInitMode>
 800b82c:	4603      	mov	r3, r0
 800b82e:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	22ff      	movs	r2, #255	; 0xff
 800b836:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800b838:	7cfb      	ldrb	r3, [r7, #19]
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d103      	bne.n	800b846 <HAL_RTC_SetDate+0xfa>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	2201      	movs	r2, #1
 800b842:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	2200      	movs	r2, #0
 800b84a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800b84e:	7cfb      	ldrb	r3, [r7, #19]
}
 800b850:	4618      	mov	r0, r3
 800b852:	371c      	adds	r7, #28
 800b854:	46bd      	mov	sp, r7
 800b856:	bd90      	pop	{r4, r7, pc}
 800b858:	40002800 	.word	0x40002800

0800b85c <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800b85c:	b580      	push	{r7, lr}
 800b85e:	b086      	sub	sp, #24
 800b860:	af00      	add	r7, sp, #0
 800b862:	60f8      	str	r0, [r7, #12]
 800b864:	60b9      	str	r1, [r7, #8]
 800b866:	607a      	str	r2, [r7, #4]
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(READ_REG(RTC->DR) & RTC_DR_RESERVED_MASK);
 800b868:	4b22      	ldr	r3, [pc, #136]	; (800b8f4 <HAL_RTC_GetDate+0x98>)
 800b86a:	685b      	ldr	r3, [r3, #4]
 800b86c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b870:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b874:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800b876:	697b      	ldr	r3, [r7, #20]
 800b878:	0c1b      	lsrs	r3, r3, #16
 800b87a:	b2da      	uxtb	r2, r3
 800b87c:	68bb      	ldr	r3, [r7, #8]
 800b87e:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800b880:	697b      	ldr	r3, [r7, #20]
 800b882:	0a1b      	lsrs	r3, r3, #8
 800b884:	b2db      	uxtb	r3, r3
 800b886:	f003 031f 	and.w	r3, r3, #31
 800b88a:	b2da      	uxtb	r2, r3
 800b88c:	68bb      	ldr	r3, [r7, #8]
 800b88e:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800b890:	697b      	ldr	r3, [r7, #20]
 800b892:	b2db      	uxtb	r3, r3
 800b894:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b898:	b2da      	uxtb	r2, r3
 800b89a:	68bb      	ldr	r3, [r7, #8]
 800b89c:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 800b89e:	697b      	ldr	r3, [r7, #20]
 800b8a0:	0b5b      	lsrs	r3, r3, #13
 800b8a2:	b2db      	uxtb	r3, r3
 800b8a4:	f003 0307 	and.w	r3, r3, #7
 800b8a8:	b2da      	uxtb	r2, r3
 800b8aa:	68bb      	ldr	r3, [r7, #8]
 800b8ac:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d11a      	bne.n	800b8ea <HAL_RTC_GetDate+0x8e>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800b8b4:	68bb      	ldr	r3, [r7, #8]
 800b8b6:	78db      	ldrb	r3, [r3, #3]
 800b8b8:	4618      	mov	r0, r3
 800b8ba:	f000 f8d7 	bl	800ba6c <RTC_Bcd2ToByte>
 800b8be:	4603      	mov	r3, r0
 800b8c0:	461a      	mov	r2, r3
 800b8c2:	68bb      	ldr	r3, [r7, #8]
 800b8c4:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800b8c6:	68bb      	ldr	r3, [r7, #8]
 800b8c8:	785b      	ldrb	r3, [r3, #1]
 800b8ca:	4618      	mov	r0, r3
 800b8cc:	f000 f8ce 	bl	800ba6c <RTC_Bcd2ToByte>
 800b8d0:	4603      	mov	r3, r0
 800b8d2:	461a      	mov	r2, r3
 800b8d4:	68bb      	ldr	r3, [r7, #8]
 800b8d6:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800b8d8:	68bb      	ldr	r3, [r7, #8]
 800b8da:	789b      	ldrb	r3, [r3, #2]
 800b8dc:	4618      	mov	r0, r3
 800b8de:	f000 f8c5 	bl	800ba6c <RTC_Bcd2ToByte>
 800b8e2:	4603      	mov	r3, r0
 800b8e4:	461a      	mov	r2, r3
 800b8e6:	68bb      	ldr	r3, [r7, #8]
 800b8e8:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800b8ea:	2300      	movs	r3, #0
}
 800b8ec:	4618      	mov	r0, r3
 800b8ee:	3718      	adds	r7, #24
 800b8f0:	46bd      	mov	sp, r7
 800b8f2:	bd80      	pop	{r7, pc}
 800b8f4:	40002800 	.word	0x40002800

0800b8f8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800b8f8:	b580      	push	{r7, lr}
 800b8fa:	b084      	sub	sp, #16
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	68da      	ldr	r2, [r3, #12]
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800b90e:	60da      	str	r2, [r3, #12]
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
#endif

  tickstart = HAL_GetTick();
 800b910:	f7f9 fce8 	bl	80052e4 <HAL_GetTick>
 800b914:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800b916:	e009      	b.n	800b92c <HAL_RTC_WaitForSynchro+0x34>
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800b918:	f7f9 fce4 	bl	80052e4 <HAL_GetTick>
 800b91c:	4602      	mov	r2, r0
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	1ad3      	subs	r3, r2, r3
 800b922:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b926:	d901      	bls.n	800b92c <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800b928:	2303      	movs	r3, #3
 800b92a:	e007      	b.n	800b93c <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	68db      	ldr	r3, [r3, #12]
 800b932:	f003 0320 	and.w	r3, r3, #32
 800b936:	2b00      	cmp	r3, #0
 800b938:	d0ee      	beq.n	800b918 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800b93a:	2300      	movs	r3, #0
}
 800b93c:	4618      	mov	r0, r3
 800b93e:	3710      	adds	r7, #16
 800b940:	46bd      	mov	sp, r7
 800b942:	bd80      	pop	{r7, pc}

0800b944 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800b944:	b580      	push	{r7, lr}
 800b946:	b084      	sub	sp, #16
 800b948:	af00      	add	r7, sp, #0
 800b94a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b94c:	2300      	movs	r3, #0
 800b94e:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if ((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	68db      	ldr	r3, [r3, #12]
 800b956:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d123      	bne.n	800b9a6 <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	68da      	ldr	r2, [r3, #12]
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b96c:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800b96e:	f7f9 fcb9 	bl	80052e4 <HAL_GetTick>
 800b972:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800b974:	e00d      	b.n	800b992 <RTC_EnterInitMode+0x4e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800b976:	f7f9 fcb5 	bl	80052e4 <HAL_GetTick>
 800b97a:	4602      	mov	r2, r0
 800b97c:	68bb      	ldr	r3, [r7, #8]
 800b97e:	1ad3      	subs	r3, r2, r3
 800b980:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b984:	d905      	bls.n	800b992 <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 800b986:	2303      	movs	r3, #3
 800b988:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	2203      	movs	r2, #3
 800b98e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	68db      	ldr	r3, [r3, #12]
 800b998:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d102      	bne.n	800b9a6 <RTC_EnterInitMode+0x62>
 800b9a0:	7bfb      	ldrb	r3, [r7, #15]
 800b9a2:	2b03      	cmp	r3, #3
 800b9a4:	d1e7      	bne.n	800b976 <RTC_EnterInitMode+0x32>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800b9a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9a8:	4618      	mov	r0, r3
 800b9aa:	3710      	adds	r7, #16
 800b9ac:	46bd      	mov	sp, r7
 800b9ae:	bd80      	pop	{r7, pc}

0800b9b0 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800b9b0:	b580      	push	{r7, lr}
 800b9b2:	b084      	sub	sp, #16
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b9b8:	2300      	movs	r3, #0
 800b9ba:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800b9bc:	4b1a      	ldr	r3, [pc, #104]	; (800ba28 <RTC_ExitInitMode+0x78>)
 800b9be:	68db      	ldr	r3, [r3, #12]
 800b9c0:	4a19      	ldr	r2, [pc, #100]	; (800ba28 <RTC_ExitInitMode+0x78>)
 800b9c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b9c6:	60d3      	str	r3, [r2, #12]
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800b9c8:	4b17      	ldr	r3, [pc, #92]	; (800ba28 <RTC_ExitInitMode+0x78>)
 800b9ca:	699b      	ldr	r3, [r3, #24]
 800b9cc:	f003 0320 	and.w	r3, r3, #32
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d10c      	bne.n	800b9ee <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800b9d4:	6878      	ldr	r0, [r7, #4]
 800b9d6:	f7ff ff8f 	bl	800b8f8 <HAL_RTC_WaitForSynchro>
 800b9da:	4603      	mov	r3, r0
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d01e      	beq.n	800ba1e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	2203      	movs	r2, #3
 800b9e4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      status = HAL_TIMEOUT;
 800b9e8:	2303      	movs	r3, #3
 800b9ea:	73fb      	strb	r3, [r7, #15]
 800b9ec:	e017      	b.n	800ba1e <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800b9ee:	4b0e      	ldr	r3, [pc, #56]	; (800ba28 <RTC_ExitInitMode+0x78>)
 800b9f0:	699b      	ldr	r3, [r3, #24]
 800b9f2:	4a0d      	ldr	r2, [pc, #52]	; (800ba28 <RTC_ExitInitMode+0x78>)
 800b9f4:	f023 0320 	bic.w	r3, r3, #32
 800b9f8:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800b9fa:	6878      	ldr	r0, [r7, #4]
 800b9fc:	f7ff ff7c 	bl	800b8f8 <HAL_RTC_WaitForSynchro>
 800ba00:	4603      	mov	r3, r0
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d005      	beq.n	800ba12 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	2203      	movs	r2, #3
 800ba0a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      status = HAL_TIMEOUT;
 800ba0e:	2303      	movs	r3, #3
 800ba10:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800ba12:	4b05      	ldr	r3, [pc, #20]	; (800ba28 <RTC_ExitInitMode+0x78>)
 800ba14:	699b      	ldr	r3, [r3, #24]
 800ba16:	4a04      	ldr	r2, [pc, #16]	; (800ba28 <RTC_ExitInitMode+0x78>)
 800ba18:	f043 0320 	orr.w	r3, r3, #32
 800ba1c:	6193      	str	r3, [r2, #24]
  }

  return status;
 800ba1e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba20:	4618      	mov	r0, r3
 800ba22:	3710      	adds	r7, #16
 800ba24:	46bd      	mov	sp, r7
 800ba26:	bd80      	pop	{r7, pc}
 800ba28:	40002800 	.word	0x40002800

0800ba2c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800ba2c:	b480      	push	{r7}
 800ba2e:	b085      	sub	sp, #20
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	4603      	mov	r3, r0
 800ba34:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800ba36:	2300      	movs	r3, #0
 800ba38:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 800ba3a:	79fb      	ldrb	r3, [r7, #7]
 800ba3c:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 800ba3e:	e005      	b.n	800ba4c <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	3301      	adds	r3, #1
 800ba44:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 800ba46:	7afb      	ldrb	r3, [r7, #11]
 800ba48:	3b0a      	subs	r3, #10
 800ba4a:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 800ba4c:	7afb      	ldrb	r3, [r7, #11]
 800ba4e:	2b09      	cmp	r3, #9
 800ba50:	d8f6      	bhi.n	800ba40 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	b2db      	uxtb	r3, r3
 800ba56:	011b      	lsls	r3, r3, #4
 800ba58:	b2da      	uxtb	r2, r3
 800ba5a:	7afb      	ldrb	r3, [r7, #11]
 800ba5c:	4313      	orrs	r3, r2
 800ba5e:	b2db      	uxtb	r3, r3
}
 800ba60:	4618      	mov	r0, r3
 800ba62:	3714      	adds	r7, #20
 800ba64:	46bd      	mov	sp, r7
 800ba66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba6a:	4770      	bx	lr

0800ba6c <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800ba6c:	b480      	push	{r7}
 800ba6e:	b085      	sub	sp, #20
 800ba70:	af00      	add	r7, sp, #0
 800ba72:	4603      	mov	r3, r0
 800ba74:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800ba76:	79fb      	ldrb	r3, [r7, #7]
 800ba78:	091b      	lsrs	r3, r3, #4
 800ba7a:	b2db      	uxtb	r3, r3
 800ba7c:	461a      	mov	r2, r3
 800ba7e:	0092      	lsls	r2, r2, #2
 800ba80:	4413      	add	r3, r2
 800ba82:	005b      	lsls	r3, r3, #1
 800ba84:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800ba86:	79fb      	ldrb	r3, [r7, #7]
 800ba88:	f003 030f 	and.w	r3, r3, #15
 800ba8c:	b2da      	uxtb	r2, r3
 800ba8e:	7bfb      	ldrb	r3, [r7, #15]
 800ba90:	4413      	add	r3, r2
 800ba92:	b2db      	uxtb	r3, r3
}
 800ba94:	4618      	mov	r0, r3
 800ba96:	3714      	adds	r7, #20
 800ba98:	46bd      	mov	sp, r7
 800ba9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba9e:	4770      	bx	lr

0800baa0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800baa0:	b580      	push	{r7, lr}
 800baa2:	b084      	sub	sp, #16
 800baa4:	af00      	add	r7, sp, #0
 800baa6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d101      	bne.n	800bab2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800baae:	2301      	movs	r3, #1
 800bab0:	e095      	b.n	800bbde <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d108      	bne.n	800bacc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	685b      	ldr	r3, [r3, #4]
 800babe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bac2:	d009      	beq.n	800bad8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	2200      	movs	r2, #0
 800bac8:	61da      	str	r2, [r3, #28]
 800baca:	e005      	b.n	800bad8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	2200      	movs	r2, #0
 800bad0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	2200      	movs	r2, #0
 800bad6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	2200      	movs	r2, #0
 800badc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800bae4:	b2db      	uxtb	r3, r3
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d106      	bne.n	800baf8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	2200      	movs	r2, #0
 800baee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800baf2:	6878      	ldr	r0, [r7, #4]
 800baf4:	f7f9 f95e 	bl	8004db4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	2202      	movs	r2, #2
 800bafc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	681a      	ldr	r2, [r3, #0]
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bb0e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	68db      	ldr	r3, [r3, #12]
 800bb14:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800bb18:	d902      	bls.n	800bb20 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800bb1a:	2300      	movs	r3, #0
 800bb1c:	60fb      	str	r3, [r7, #12]
 800bb1e:	e002      	b.n	800bb26 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800bb20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bb24:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	68db      	ldr	r3, [r3, #12]
 800bb2a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800bb2e:	d007      	beq.n	800bb40 <HAL_SPI_Init+0xa0>
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	68db      	ldr	r3, [r3, #12]
 800bb34:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800bb38:	d002      	beq.n	800bb40 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	2200      	movs	r2, #0
 800bb3e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	685b      	ldr	r3, [r3, #4]
 800bb44:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	689b      	ldr	r3, [r3, #8]
 800bb4c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800bb50:	431a      	orrs	r2, r3
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	691b      	ldr	r3, [r3, #16]
 800bb56:	f003 0302 	and.w	r3, r3, #2
 800bb5a:	431a      	orrs	r2, r3
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	695b      	ldr	r3, [r3, #20]
 800bb60:	f003 0301 	and.w	r3, r3, #1
 800bb64:	431a      	orrs	r2, r3
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	699b      	ldr	r3, [r3, #24]
 800bb6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bb6e:	431a      	orrs	r2, r3
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	69db      	ldr	r3, [r3, #28]
 800bb74:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bb78:	431a      	orrs	r2, r3
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	6a1b      	ldr	r3, [r3, #32]
 800bb7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb82:	ea42 0103 	orr.w	r1, r2, r3
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb8a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	430a      	orrs	r2, r1
 800bb94:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	699b      	ldr	r3, [r3, #24]
 800bb9a:	0c1b      	lsrs	r3, r3, #16
 800bb9c:	f003 0204 	and.w	r2, r3, #4
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bba4:	f003 0310 	and.w	r3, r3, #16
 800bba8:	431a      	orrs	r2, r3
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbae:	f003 0308 	and.w	r3, r3, #8
 800bbb2:	431a      	orrs	r2, r3
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	68db      	ldr	r3, [r3, #12]
 800bbb8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800bbbc:	ea42 0103 	orr.w	r1, r2, r3
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	430a      	orrs	r2, r1
 800bbcc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	2200      	movs	r2, #0
 800bbd2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	2201      	movs	r2, #1
 800bbd8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800bbdc:	2300      	movs	r3, #0
}
 800bbde:	4618      	mov	r0, r3
 800bbe0:	3710      	adds	r7, #16
 800bbe2:	46bd      	mov	sp, r7
 800bbe4:	bd80      	pop	{r7, pc}

0800bbe6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bbe6:	b580      	push	{r7, lr}
 800bbe8:	b088      	sub	sp, #32
 800bbea:	af00      	add	r7, sp, #0
 800bbec:	60f8      	str	r0, [r7, #12]
 800bbee:	60b9      	str	r1, [r7, #8]
 800bbf0:	603b      	str	r3, [r7, #0]
 800bbf2:	4613      	mov	r3, r2
 800bbf4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800bbf6:	2300      	movs	r3, #0
 800bbf8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800bc00:	2b01      	cmp	r3, #1
 800bc02:	d101      	bne.n	800bc08 <HAL_SPI_Transmit+0x22>
 800bc04:	2302      	movs	r3, #2
 800bc06:	e158      	b.n	800beba <HAL_SPI_Transmit+0x2d4>
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	2201      	movs	r2, #1
 800bc0c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bc10:	f7f9 fb68 	bl	80052e4 <HAL_GetTick>
 800bc14:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800bc16:	88fb      	ldrh	r3, [r7, #6]
 800bc18:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800bc20:	b2db      	uxtb	r3, r3
 800bc22:	2b01      	cmp	r3, #1
 800bc24:	d002      	beq.n	800bc2c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800bc26:	2302      	movs	r3, #2
 800bc28:	77fb      	strb	r3, [r7, #31]
    goto error;
 800bc2a:	e13d      	b.n	800bea8 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800bc2c:	68bb      	ldr	r3, [r7, #8]
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d002      	beq.n	800bc38 <HAL_SPI_Transmit+0x52>
 800bc32:	88fb      	ldrh	r3, [r7, #6]
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d102      	bne.n	800bc3e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800bc38:	2301      	movs	r3, #1
 800bc3a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800bc3c:	e134      	b.n	800bea8 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	2203      	movs	r2, #3
 800bc42:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	2200      	movs	r2, #0
 800bc4a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	68ba      	ldr	r2, [r7, #8]
 800bc50:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	88fa      	ldrh	r2, [r7, #6]
 800bc56:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	88fa      	ldrh	r2, [r7, #6]
 800bc5c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	2200      	movs	r2, #0
 800bc62:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	2200      	movs	r2, #0
 800bc68:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	2200      	movs	r2, #0
 800bc70:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	2200      	movs	r2, #0
 800bc78:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	2200      	movs	r2, #0
 800bc7e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	689b      	ldr	r3, [r3, #8]
 800bc84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bc88:	d10f      	bne.n	800bcaa <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	681a      	ldr	r2, [r3, #0]
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bc98:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	681a      	ldr	r2, [r3, #0]
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bca8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bcb4:	2b40      	cmp	r3, #64	; 0x40
 800bcb6:	d007      	beq.n	800bcc8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	681a      	ldr	r2, [r3, #0]
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bcc6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	68db      	ldr	r3, [r3, #12]
 800bccc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800bcd0:	d94b      	bls.n	800bd6a <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	685b      	ldr	r3, [r3, #4]
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d002      	beq.n	800bce0 <HAL_SPI_Transmit+0xfa>
 800bcda:	8afb      	ldrh	r3, [r7, #22]
 800bcdc:	2b01      	cmp	r3, #1
 800bcde:	d13e      	bne.n	800bd5e <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bce4:	881a      	ldrh	r2, [r3, #0]
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcf0:	1c9a      	adds	r2, r3, #2
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bcfa:	b29b      	uxth	r3, r3
 800bcfc:	3b01      	subs	r3, #1
 800bcfe:	b29a      	uxth	r2, r3
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800bd04:	e02b      	b.n	800bd5e <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	689b      	ldr	r3, [r3, #8]
 800bd0c:	f003 0302 	and.w	r3, r3, #2
 800bd10:	2b02      	cmp	r3, #2
 800bd12:	d112      	bne.n	800bd3a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd18:	881a      	ldrh	r2, [r3, #0]
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd24:	1c9a      	adds	r2, r3, #2
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bd2e:	b29b      	uxth	r3, r3
 800bd30:	3b01      	subs	r3, #1
 800bd32:	b29a      	uxth	r2, r3
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	87da      	strh	r2, [r3, #62]	; 0x3e
 800bd38:	e011      	b.n	800bd5e <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bd3a:	f7f9 fad3 	bl	80052e4 <HAL_GetTick>
 800bd3e:	4602      	mov	r2, r0
 800bd40:	69bb      	ldr	r3, [r7, #24]
 800bd42:	1ad3      	subs	r3, r2, r3
 800bd44:	683a      	ldr	r2, [r7, #0]
 800bd46:	429a      	cmp	r2, r3
 800bd48:	d803      	bhi.n	800bd52 <HAL_SPI_Transmit+0x16c>
 800bd4a:	683b      	ldr	r3, [r7, #0]
 800bd4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd50:	d102      	bne.n	800bd58 <HAL_SPI_Transmit+0x172>
 800bd52:	683b      	ldr	r3, [r7, #0]
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d102      	bne.n	800bd5e <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800bd58:	2303      	movs	r3, #3
 800bd5a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800bd5c:	e0a4      	b.n	800bea8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bd62:	b29b      	uxth	r3, r3
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d1ce      	bne.n	800bd06 <HAL_SPI_Transmit+0x120>
 800bd68:	e07c      	b.n	800be64 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	685b      	ldr	r3, [r3, #4]
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d002      	beq.n	800bd78 <HAL_SPI_Transmit+0x192>
 800bd72:	8afb      	ldrh	r3, [r7, #22]
 800bd74:	2b01      	cmp	r3, #1
 800bd76:	d170      	bne.n	800be5a <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bd7c:	b29b      	uxth	r3, r3
 800bd7e:	2b01      	cmp	r3, #1
 800bd80:	d912      	bls.n	800bda8 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd86:	881a      	ldrh	r2, [r3, #0]
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd92:	1c9a      	adds	r2, r3, #2
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bd9c:	b29b      	uxth	r3, r3
 800bd9e:	3b02      	subs	r3, #2
 800bda0:	b29a      	uxth	r2, r3
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	87da      	strh	r2, [r3, #62]	; 0x3e
 800bda6:	e058      	b.n	800be5a <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	330c      	adds	r3, #12
 800bdb2:	7812      	ldrb	r2, [r2, #0]
 800bdb4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdba:	1c5a      	adds	r2, r3, #1
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bdc4:	b29b      	uxth	r3, r3
 800bdc6:	3b01      	subs	r3, #1
 800bdc8:	b29a      	uxth	r2, r3
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800bdce:	e044      	b.n	800be5a <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	689b      	ldr	r3, [r3, #8]
 800bdd6:	f003 0302 	and.w	r3, r3, #2
 800bdda:	2b02      	cmp	r3, #2
 800bddc:	d12b      	bne.n	800be36 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bde2:	b29b      	uxth	r3, r3
 800bde4:	2b01      	cmp	r3, #1
 800bde6:	d912      	bls.n	800be0e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdec:	881a      	ldrh	r2, [r3, #0]
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdf8:	1c9a      	adds	r2, r3, #2
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800be02:	b29b      	uxth	r3, r3
 800be04:	3b02      	subs	r3, #2
 800be06:	b29a      	uxth	r2, r3
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800be0c:	e025      	b.n	800be5a <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	330c      	adds	r3, #12
 800be18:	7812      	ldrb	r2, [r2, #0]
 800be1a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be20:	1c5a      	adds	r2, r3, #1
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800be2a:	b29b      	uxth	r3, r3
 800be2c:	3b01      	subs	r3, #1
 800be2e:	b29a      	uxth	r2, r3
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	87da      	strh	r2, [r3, #62]	; 0x3e
 800be34:	e011      	b.n	800be5a <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800be36:	f7f9 fa55 	bl	80052e4 <HAL_GetTick>
 800be3a:	4602      	mov	r2, r0
 800be3c:	69bb      	ldr	r3, [r7, #24]
 800be3e:	1ad3      	subs	r3, r2, r3
 800be40:	683a      	ldr	r2, [r7, #0]
 800be42:	429a      	cmp	r2, r3
 800be44:	d803      	bhi.n	800be4e <HAL_SPI_Transmit+0x268>
 800be46:	683b      	ldr	r3, [r7, #0]
 800be48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be4c:	d102      	bne.n	800be54 <HAL_SPI_Transmit+0x26e>
 800be4e:	683b      	ldr	r3, [r7, #0]
 800be50:	2b00      	cmp	r3, #0
 800be52:	d102      	bne.n	800be5a <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800be54:	2303      	movs	r3, #3
 800be56:	77fb      	strb	r3, [r7, #31]
          goto error;
 800be58:	e026      	b.n	800bea8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800be5e:	b29b      	uxth	r3, r3
 800be60:	2b00      	cmp	r3, #0
 800be62:	d1b5      	bne.n	800bdd0 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800be64:	69ba      	ldr	r2, [r7, #24]
 800be66:	6839      	ldr	r1, [r7, #0]
 800be68:	68f8      	ldr	r0, [r7, #12]
 800be6a:	f000 fb5b 	bl	800c524 <SPI_EndRxTxTransaction>
 800be6e:	4603      	mov	r3, r0
 800be70:	2b00      	cmp	r3, #0
 800be72:	d002      	beq.n	800be7a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	2220      	movs	r2, #32
 800be78:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	689b      	ldr	r3, [r3, #8]
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d10a      	bne.n	800be98 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800be82:	2300      	movs	r3, #0
 800be84:	613b      	str	r3, [r7, #16]
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	68db      	ldr	r3, [r3, #12]
 800be8c:	613b      	str	r3, [r7, #16]
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	689b      	ldr	r3, [r3, #8]
 800be94:	613b      	str	r3, [r7, #16]
 800be96:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d002      	beq.n	800bea6 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800bea0:	2301      	movs	r3, #1
 800bea2:	77fb      	strb	r3, [r7, #31]
 800bea4:	e000      	b.n	800bea8 <HAL_SPI_Transmit+0x2c2>
  }

error:
 800bea6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	2201      	movs	r2, #1
 800beac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	2200      	movs	r2, #0
 800beb4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800beb8:	7ffb      	ldrb	r3, [r7, #31]
}
 800beba:	4618      	mov	r0, r3
 800bebc:	3720      	adds	r7, #32
 800bebe:	46bd      	mov	sp, r7
 800bec0:	bd80      	pop	{r7, pc}

0800bec2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800bec2:	b580      	push	{r7, lr}
 800bec4:	b08a      	sub	sp, #40	; 0x28
 800bec6:	af00      	add	r7, sp, #0
 800bec8:	60f8      	str	r0, [r7, #12]
 800beca:	60b9      	str	r1, [r7, #8]
 800becc:	607a      	str	r2, [r7, #4]
 800bece:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800bed0:	2301      	movs	r3, #1
 800bed2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800bed4:	2300      	movs	r3, #0
 800bed6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800bee0:	2b01      	cmp	r3, #1
 800bee2:	d101      	bne.n	800bee8 <HAL_SPI_TransmitReceive+0x26>
 800bee4:	2302      	movs	r3, #2
 800bee6:	e1fb      	b.n	800c2e0 <HAL_SPI_TransmitReceive+0x41e>
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	2201      	movs	r2, #1
 800beec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bef0:	f7f9 f9f8 	bl	80052e4 <HAL_GetTick>
 800bef4:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800befc:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	685b      	ldr	r3, [r3, #4]
 800bf02:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800bf04:	887b      	ldrh	r3, [r7, #2]
 800bf06:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800bf08:	887b      	ldrh	r3, [r7, #2]
 800bf0a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800bf0c:	7efb      	ldrb	r3, [r7, #27]
 800bf0e:	2b01      	cmp	r3, #1
 800bf10:	d00e      	beq.n	800bf30 <HAL_SPI_TransmitReceive+0x6e>
 800bf12:	697b      	ldr	r3, [r7, #20]
 800bf14:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bf18:	d106      	bne.n	800bf28 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	689b      	ldr	r3, [r3, #8]
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d102      	bne.n	800bf28 <HAL_SPI_TransmitReceive+0x66>
 800bf22:	7efb      	ldrb	r3, [r7, #27]
 800bf24:	2b04      	cmp	r3, #4
 800bf26:	d003      	beq.n	800bf30 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800bf28:	2302      	movs	r3, #2
 800bf2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800bf2e:	e1cd      	b.n	800c2cc <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800bf30:	68bb      	ldr	r3, [r7, #8]
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d005      	beq.n	800bf42 <HAL_SPI_TransmitReceive+0x80>
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d002      	beq.n	800bf42 <HAL_SPI_TransmitReceive+0x80>
 800bf3c:	887b      	ldrh	r3, [r7, #2]
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d103      	bne.n	800bf4a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800bf42:	2301      	movs	r3, #1
 800bf44:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800bf48:	e1c0      	b.n	800c2cc <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800bf50:	b2db      	uxtb	r3, r3
 800bf52:	2b04      	cmp	r3, #4
 800bf54:	d003      	beq.n	800bf5e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	2205      	movs	r2, #5
 800bf5a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	2200      	movs	r2, #0
 800bf62:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	687a      	ldr	r2, [r7, #4]
 800bf68:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	887a      	ldrh	r2, [r7, #2]
 800bf6e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	887a      	ldrh	r2, [r7, #2]
 800bf76:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	68ba      	ldr	r2, [r7, #8]
 800bf7e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	887a      	ldrh	r2, [r7, #2]
 800bf84:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	887a      	ldrh	r2, [r7, #2]
 800bf8a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	2200      	movs	r2, #0
 800bf90:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	2200      	movs	r2, #0
 800bf96:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	68db      	ldr	r3, [r3, #12]
 800bf9c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800bfa0:	d802      	bhi.n	800bfa8 <HAL_SPI_TransmitReceive+0xe6>
 800bfa2:	8a3b      	ldrh	r3, [r7, #16]
 800bfa4:	2b01      	cmp	r3, #1
 800bfa6:	d908      	bls.n	800bfba <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	685a      	ldr	r2, [r3, #4]
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800bfb6:	605a      	str	r2, [r3, #4]
 800bfb8:	e007      	b.n	800bfca <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	685a      	ldr	r2, [r3, #4]
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800bfc8:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bfd4:	2b40      	cmp	r3, #64	; 0x40
 800bfd6:	d007      	beq.n	800bfe8 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	681a      	ldr	r2, [r3, #0]
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bfe6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	68db      	ldr	r3, [r3, #12]
 800bfec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800bff0:	d97c      	bls.n	800c0ec <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	685b      	ldr	r3, [r3, #4]
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d002      	beq.n	800c000 <HAL_SPI_TransmitReceive+0x13e>
 800bffa:	8a7b      	ldrh	r3, [r7, #18]
 800bffc:	2b01      	cmp	r3, #1
 800bffe:	d169      	bne.n	800c0d4 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c004:	881a      	ldrh	r2, [r3, #0]
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c010:	1c9a      	adds	r2, r3, #2
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c01a:	b29b      	uxth	r3, r3
 800c01c:	3b01      	subs	r3, #1
 800c01e:	b29a      	uxth	r2, r3
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c024:	e056      	b.n	800c0d4 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	689b      	ldr	r3, [r3, #8]
 800c02c:	f003 0302 	and.w	r3, r3, #2
 800c030:	2b02      	cmp	r3, #2
 800c032:	d11b      	bne.n	800c06c <HAL_SPI_TransmitReceive+0x1aa>
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c038:	b29b      	uxth	r3, r3
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d016      	beq.n	800c06c <HAL_SPI_TransmitReceive+0x1aa>
 800c03e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c040:	2b01      	cmp	r3, #1
 800c042:	d113      	bne.n	800c06c <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c048:	881a      	ldrh	r2, [r3, #0]
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c054:	1c9a      	adds	r2, r3, #2
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c05e:	b29b      	uxth	r3, r3
 800c060:	3b01      	subs	r3, #1
 800c062:	b29a      	uxth	r2, r3
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c068:	2300      	movs	r3, #0
 800c06a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	689b      	ldr	r3, [r3, #8]
 800c072:	f003 0301 	and.w	r3, r3, #1
 800c076:	2b01      	cmp	r3, #1
 800c078:	d11c      	bne.n	800c0b4 <HAL_SPI_TransmitReceive+0x1f2>
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c080:	b29b      	uxth	r3, r3
 800c082:	2b00      	cmp	r3, #0
 800c084:	d016      	beq.n	800c0b4 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	68da      	ldr	r2, [r3, #12]
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c090:	b292      	uxth	r2, r2
 800c092:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c098:	1c9a      	adds	r2, r3, #2
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c0a4:	b29b      	uxth	r3, r3
 800c0a6:	3b01      	subs	r3, #1
 800c0a8:	b29a      	uxth	r2, r3
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c0b0:	2301      	movs	r3, #1
 800c0b2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800c0b4:	f7f9 f916 	bl	80052e4 <HAL_GetTick>
 800c0b8:	4602      	mov	r2, r0
 800c0ba:	69fb      	ldr	r3, [r7, #28]
 800c0bc:	1ad3      	subs	r3, r2, r3
 800c0be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c0c0:	429a      	cmp	r2, r3
 800c0c2:	d807      	bhi.n	800c0d4 <HAL_SPI_TransmitReceive+0x212>
 800c0c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0ca:	d003      	beq.n	800c0d4 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800c0cc:	2303      	movs	r3, #3
 800c0ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800c0d2:	e0fb      	b.n	800c2cc <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c0d8:	b29b      	uxth	r3, r3
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d1a3      	bne.n	800c026 <HAL_SPI_TransmitReceive+0x164>
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c0e4:	b29b      	uxth	r3, r3
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d19d      	bne.n	800c026 <HAL_SPI_TransmitReceive+0x164>
 800c0ea:	e0df      	b.n	800c2ac <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	685b      	ldr	r3, [r3, #4]
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d003      	beq.n	800c0fc <HAL_SPI_TransmitReceive+0x23a>
 800c0f4:	8a7b      	ldrh	r3, [r7, #18]
 800c0f6:	2b01      	cmp	r3, #1
 800c0f8:	f040 80cb 	bne.w	800c292 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c100:	b29b      	uxth	r3, r3
 800c102:	2b01      	cmp	r3, #1
 800c104:	d912      	bls.n	800c12c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c10a:	881a      	ldrh	r2, [r3, #0]
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c116:	1c9a      	adds	r2, r3, #2
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c120:	b29b      	uxth	r3, r3
 800c122:	3b02      	subs	r3, #2
 800c124:	b29a      	uxth	r2, r3
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c12a:	e0b2      	b.n	800c292 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	330c      	adds	r3, #12
 800c136:	7812      	ldrb	r2, [r2, #0]
 800c138:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c13e:	1c5a      	adds	r2, r3, #1
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c148:	b29b      	uxth	r3, r3
 800c14a:	3b01      	subs	r3, #1
 800c14c:	b29a      	uxth	r2, r3
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c152:	e09e      	b.n	800c292 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	689b      	ldr	r3, [r3, #8]
 800c15a:	f003 0302 	and.w	r3, r3, #2
 800c15e:	2b02      	cmp	r3, #2
 800c160:	d134      	bne.n	800c1cc <HAL_SPI_TransmitReceive+0x30a>
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c166:	b29b      	uxth	r3, r3
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d02f      	beq.n	800c1cc <HAL_SPI_TransmitReceive+0x30a>
 800c16c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c16e:	2b01      	cmp	r3, #1
 800c170:	d12c      	bne.n	800c1cc <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c176:	b29b      	uxth	r3, r3
 800c178:	2b01      	cmp	r3, #1
 800c17a:	d912      	bls.n	800c1a2 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c180:	881a      	ldrh	r2, [r3, #0]
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c18c:	1c9a      	adds	r2, r3, #2
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c196:	b29b      	uxth	r3, r3
 800c198:	3b02      	subs	r3, #2
 800c19a:	b29a      	uxth	r2, r3
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c1a0:	e012      	b.n	800c1c8 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	330c      	adds	r3, #12
 800c1ac:	7812      	ldrb	r2, [r2, #0]
 800c1ae:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1b4:	1c5a      	adds	r2, r3, #1
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c1be:	b29b      	uxth	r3, r3
 800c1c0:	3b01      	subs	r3, #1
 800c1c2:	b29a      	uxth	r2, r3
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c1c8:	2300      	movs	r3, #0
 800c1ca:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	689b      	ldr	r3, [r3, #8]
 800c1d2:	f003 0301 	and.w	r3, r3, #1
 800c1d6:	2b01      	cmp	r3, #1
 800c1d8:	d148      	bne.n	800c26c <HAL_SPI_TransmitReceive+0x3aa>
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c1e0:	b29b      	uxth	r3, r3
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d042      	beq.n	800c26c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c1ec:	b29b      	uxth	r3, r3
 800c1ee:	2b01      	cmp	r3, #1
 800c1f0:	d923      	bls.n	800c23a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	68da      	ldr	r2, [r3, #12]
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1fc:	b292      	uxth	r2, r2
 800c1fe:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c204:	1c9a      	adds	r2, r3, #2
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c210:	b29b      	uxth	r3, r3
 800c212:	3b02      	subs	r3, #2
 800c214:	b29a      	uxth	r2, r3
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c222:	b29b      	uxth	r3, r3
 800c224:	2b01      	cmp	r3, #1
 800c226:	d81f      	bhi.n	800c268 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	685a      	ldr	r2, [r3, #4]
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c236:	605a      	str	r2, [r3, #4]
 800c238:	e016      	b.n	800c268 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	f103 020c 	add.w	r2, r3, #12
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c246:	7812      	ldrb	r2, [r2, #0]
 800c248:	b2d2      	uxtb	r2, r2
 800c24a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c250:	1c5a      	adds	r2, r3, #1
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c25c:	b29b      	uxth	r3, r3
 800c25e:	3b01      	subs	r3, #1
 800c260:	b29a      	uxth	r2, r3
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c268:	2301      	movs	r3, #1
 800c26a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800c26c:	f7f9 f83a 	bl	80052e4 <HAL_GetTick>
 800c270:	4602      	mov	r2, r0
 800c272:	69fb      	ldr	r3, [r7, #28]
 800c274:	1ad3      	subs	r3, r2, r3
 800c276:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c278:	429a      	cmp	r2, r3
 800c27a:	d803      	bhi.n	800c284 <HAL_SPI_TransmitReceive+0x3c2>
 800c27c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c27e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c282:	d102      	bne.n	800c28a <HAL_SPI_TransmitReceive+0x3c8>
 800c284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c286:	2b00      	cmp	r3, #0
 800c288:	d103      	bne.n	800c292 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800c28a:	2303      	movs	r3, #3
 800c28c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800c290:	e01c      	b.n	800c2cc <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c296:	b29b      	uxth	r3, r3
 800c298:	2b00      	cmp	r3, #0
 800c29a:	f47f af5b 	bne.w	800c154 <HAL_SPI_TransmitReceive+0x292>
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c2a4:	b29b      	uxth	r3, r3
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	f47f af54 	bne.w	800c154 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c2ac:	69fa      	ldr	r2, [r7, #28]
 800c2ae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c2b0:	68f8      	ldr	r0, [r7, #12]
 800c2b2:	f000 f937 	bl	800c524 <SPI_EndRxTxTransaction>
 800c2b6:	4603      	mov	r3, r0
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d006      	beq.n	800c2ca <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800c2bc:	2301      	movs	r3, #1
 800c2be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	2220      	movs	r2, #32
 800c2c6:	661a      	str	r2, [r3, #96]	; 0x60
 800c2c8:	e000      	b.n	800c2cc <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800c2ca:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	2201      	movs	r2, #1
 800c2d0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	2200      	movs	r2, #0
 800c2d8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800c2dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800c2e0:	4618      	mov	r0, r3
 800c2e2:	3728      	adds	r7, #40	; 0x28
 800c2e4:	46bd      	mov	sp, r7
 800c2e6:	bd80      	pop	{r7, pc}

0800c2e8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800c2e8:	b580      	push	{r7, lr}
 800c2ea:	b088      	sub	sp, #32
 800c2ec:	af00      	add	r7, sp, #0
 800c2ee:	60f8      	str	r0, [r7, #12]
 800c2f0:	60b9      	str	r1, [r7, #8]
 800c2f2:	603b      	str	r3, [r7, #0]
 800c2f4:	4613      	mov	r3, r2
 800c2f6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800c2f8:	f7f8 fff4 	bl	80052e4 <HAL_GetTick>
 800c2fc:	4602      	mov	r2, r0
 800c2fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c300:	1a9b      	subs	r3, r3, r2
 800c302:	683a      	ldr	r2, [r7, #0]
 800c304:	4413      	add	r3, r2
 800c306:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800c308:	f7f8 ffec 	bl	80052e4 <HAL_GetTick>
 800c30c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800c30e:	4b39      	ldr	r3, [pc, #228]	; (800c3f4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	015b      	lsls	r3, r3, #5
 800c314:	0d1b      	lsrs	r3, r3, #20
 800c316:	69fa      	ldr	r2, [r7, #28]
 800c318:	fb02 f303 	mul.w	r3, r2, r3
 800c31c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c31e:	e054      	b.n	800c3ca <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800c320:	683b      	ldr	r3, [r7, #0]
 800c322:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c326:	d050      	beq.n	800c3ca <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800c328:	f7f8 ffdc 	bl	80052e4 <HAL_GetTick>
 800c32c:	4602      	mov	r2, r0
 800c32e:	69bb      	ldr	r3, [r7, #24]
 800c330:	1ad3      	subs	r3, r2, r3
 800c332:	69fa      	ldr	r2, [r7, #28]
 800c334:	429a      	cmp	r2, r3
 800c336:	d902      	bls.n	800c33e <SPI_WaitFlagStateUntilTimeout+0x56>
 800c338:	69fb      	ldr	r3, [r7, #28]
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d13d      	bne.n	800c3ba <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	685a      	ldr	r2, [r3, #4]
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800c34c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	685b      	ldr	r3, [r3, #4]
 800c352:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c356:	d111      	bne.n	800c37c <SPI_WaitFlagStateUntilTimeout+0x94>
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	689b      	ldr	r3, [r3, #8]
 800c35c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c360:	d004      	beq.n	800c36c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	689b      	ldr	r3, [r3, #8]
 800c366:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c36a:	d107      	bne.n	800c37c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	681a      	ldr	r2, [r3, #0]
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c37a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c380:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c384:	d10f      	bne.n	800c3a6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	681a      	ldr	r2, [r3, #0]
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c394:	601a      	str	r2, [r3, #0]
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	681a      	ldr	r2, [r3, #0]
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c3a4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	2201      	movs	r2, #1
 800c3aa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	2200      	movs	r2, #0
 800c3b2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800c3b6:	2303      	movs	r3, #3
 800c3b8:	e017      	b.n	800c3ea <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800c3ba:	697b      	ldr	r3, [r7, #20]
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d101      	bne.n	800c3c4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800c3c0:	2300      	movs	r3, #0
 800c3c2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800c3c4:	697b      	ldr	r3, [r7, #20]
 800c3c6:	3b01      	subs	r3, #1
 800c3c8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	689a      	ldr	r2, [r3, #8]
 800c3d0:	68bb      	ldr	r3, [r7, #8]
 800c3d2:	4013      	ands	r3, r2
 800c3d4:	68ba      	ldr	r2, [r7, #8]
 800c3d6:	429a      	cmp	r2, r3
 800c3d8:	bf0c      	ite	eq
 800c3da:	2301      	moveq	r3, #1
 800c3dc:	2300      	movne	r3, #0
 800c3de:	b2db      	uxtb	r3, r3
 800c3e0:	461a      	mov	r2, r3
 800c3e2:	79fb      	ldrb	r3, [r7, #7]
 800c3e4:	429a      	cmp	r2, r3
 800c3e6:	d19b      	bne.n	800c320 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800c3e8:	2300      	movs	r3, #0
}
 800c3ea:	4618      	mov	r0, r3
 800c3ec:	3720      	adds	r7, #32
 800c3ee:	46bd      	mov	sp, r7
 800c3f0:	bd80      	pop	{r7, pc}
 800c3f2:	bf00      	nop
 800c3f4:	20000224 	.word	0x20000224

0800c3f8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800c3f8:	b580      	push	{r7, lr}
 800c3fa:	b08a      	sub	sp, #40	; 0x28
 800c3fc:	af00      	add	r7, sp, #0
 800c3fe:	60f8      	str	r0, [r7, #12]
 800c400:	60b9      	str	r1, [r7, #8]
 800c402:	607a      	str	r2, [r7, #4]
 800c404:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800c406:	2300      	movs	r3, #0
 800c408:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800c40a:	f7f8 ff6b 	bl	80052e4 <HAL_GetTick>
 800c40e:	4602      	mov	r2, r0
 800c410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c412:	1a9b      	subs	r3, r3, r2
 800c414:	683a      	ldr	r2, [r7, #0]
 800c416:	4413      	add	r3, r2
 800c418:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800c41a:	f7f8 ff63 	bl	80052e4 <HAL_GetTick>
 800c41e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	330c      	adds	r3, #12
 800c426:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800c428:	4b3d      	ldr	r3, [pc, #244]	; (800c520 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800c42a:	681a      	ldr	r2, [r3, #0]
 800c42c:	4613      	mov	r3, r2
 800c42e:	009b      	lsls	r3, r3, #2
 800c430:	4413      	add	r3, r2
 800c432:	00da      	lsls	r2, r3, #3
 800c434:	1ad3      	subs	r3, r2, r3
 800c436:	0d1b      	lsrs	r3, r3, #20
 800c438:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c43a:	fb02 f303 	mul.w	r3, r2, r3
 800c43e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800c440:	e060      	b.n	800c504 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800c442:	68bb      	ldr	r3, [r7, #8]
 800c444:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800c448:	d107      	bne.n	800c45a <SPI_WaitFifoStateUntilTimeout+0x62>
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d104      	bne.n	800c45a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800c450:	69fb      	ldr	r3, [r7, #28]
 800c452:	781b      	ldrb	r3, [r3, #0]
 800c454:	b2db      	uxtb	r3, r3
 800c456:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800c458:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800c45a:	683b      	ldr	r3, [r7, #0]
 800c45c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c460:	d050      	beq.n	800c504 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800c462:	f7f8 ff3f 	bl	80052e4 <HAL_GetTick>
 800c466:	4602      	mov	r2, r0
 800c468:	6a3b      	ldr	r3, [r7, #32]
 800c46a:	1ad3      	subs	r3, r2, r3
 800c46c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c46e:	429a      	cmp	r2, r3
 800c470:	d902      	bls.n	800c478 <SPI_WaitFifoStateUntilTimeout+0x80>
 800c472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c474:	2b00      	cmp	r3, #0
 800c476:	d13d      	bne.n	800c4f4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	685a      	ldr	r2, [r3, #4]
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800c486:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	685b      	ldr	r3, [r3, #4]
 800c48c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c490:	d111      	bne.n	800c4b6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	689b      	ldr	r3, [r3, #8]
 800c496:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c49a:	d004      	beq.n	800c4a6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	689b      	ldr	r3, [r3, #8]
 800c4a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c4a4:	d107      	bne.n	800c4b6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	681a      	ldr	r2, [r3, #0]
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c4b4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c4be:	d10f      	bne.n	800c4e0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	681a      	ldr	r2, [r3, #0]
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c4ce:	601a      	str	r2, [r3, #0]
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	681a      	ldr	r2, [r3, #0]
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c4de:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	2201      	movs	r2, #1
 800c4e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	2200      	movs	r2, #0
 800c4ec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800c4f0:	2303      	movs	r3, #3
 800c4f2:	e010      	b.n	800c516 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800c4f4:	69bb      	ldr	r3, [r7, #24]
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d101      	bne.n	800c4fe <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800c4fa:	2300      	movs	r3, #0
 800c4fc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800c4fe:	69bb      	ldr	r3, [r7, #24]
 800c500:	3b01      	subs	r3, #1
 800c502:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	689a      	ldr	r2, [r3, #8]
 800c50a:	68bb      	ldr	r3, [r7, #8]
 800c50c:	4013      	ands	r3, r2
 800c50e:	687a      	ldr	r2, [r7, #4]
 800c510:	429a      	cmp	r2, r3
 800c512:	d196      	bne.n	800c442 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800c514:	2300      	movs	r3, #0
}
 800c516:	4618      	mov	r0, r3
 800c518:	3728      	adds	r7, #40	; 0x28
 800c51a:	46bd      	mov	sp, r7
 800c51c:	bd80      	pop	{r7, pc}
 800c51e:	bf00      	nop
 800c520:	20000224 	.word	0x20000224

0800c524 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800c524:	b580      	push	{r7, lr}
 800c526:	b086      	sub	sp, #24
 800c528:	af02      	add	r7, sp, #8
 800c52a:	60f8      	str	r0, [r7, #12]
 800c52c:	60b9      	str	r1, [r7, #8]
 800c52e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	9300      	str	r3, [sp, #0]
 800c534:	68bb      	ldr	r3, [r7, #8]
 800c536:	2200      	movs	r2, #0
 800c538:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800c53c:	68f8      	ldr	r0, [r7, #12]
 800c53e:	f7ff ff5b 	bl	800c3f8 <SPI_WaitFifoStateUntilTimeout>
 800c542:	4603      	mov	r3, r0
 800c544:	2b00      	cmp	r3, #0
 800c546:	d007      	beq.n	800c558 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c54c:	f043 0220 	orr.w	r2, r3, #32
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800c554:	2303      	movs	r3, #3
 800c556:	e027      	b.n	800c5a8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	9300      	str	r3, [sp, #0]
 800c55c:	68bb      	ldr	r3, [r7, #8]
 800c55e:	2200      	movs	r2, #0
 800c560:	2180      	movs	r1, #128	; 0x80
 800c562:	68f8      	ldr	r0, [r7, #12]
 800c564:	f7ff fec0 	bl	800c2e8 <SPI_WaitFlagStateUntilTimeout>
 800c568:	4603      	mov	r3, r0
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d007      	beq.n	800c57e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c572:	f043 0220 	orr.w	r2, r3, #32
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800c57a:	2303      	movs	r3, #3
 800c57c:	e014      	b.n	800c5a8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	9300      	str	r3, [sp, #0]
 800c582:	68bb      	ldr	r3, [r7, #8]
 800c584:	2200      	movs	r2, #0
 800c586:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800c58a:	68f8      	ldr	r0, [r7, #12]
 800c58c:	f7ff ff34 	bl	800c3f8 <SPI_WaitFifoStateUntilTimeout>
 800c590:	4603      	mov	r3, r0
 800c592:	2b00      	cmp	r3, #0
 800c594:	d007      	beq.n	800c5a6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c59a:	f043 0220 	orr.w	r2, r3, #32
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800c5a2:	2303      	movs	r3, #3
 800c5a4:	e000      	b.n	800c5a8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800c5a6:	2300      	movs	r3, #0
}
 800c5a8:	4618      	mov	r0, r3
 800c5aa:	3710      	adds	r7, #16
 800c5ac:	46bd      	mov	sp, r7
 800c5ae:	bd80      	pop	{r7, pc}

0800c5b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c5b0:	b580      	push	{r7, lr}
 800c5b2:	b082      	sub	sp, #8
 800c5b4:	af00      	add	r7, sp, #0
 800c5b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d101      	bne.n	800c5c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c5be:	2301      	movs	r3, #1
 800c5c0:	e049      	b.n	800c656 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c5c8:	b2db      	uxtb	r3, r3
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d106      	bne.n	800c5dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	2200      	movs	r2, #0
 800c5d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c5d6:	6878      	ldr	r0, [r7, #4]
 800c5d8:	f7f8 fc40 	bl	8004e5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	2202      	movs	r2, #2
 800c5e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	681a      	ldr	r2, [r3, #0]
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	3304      	adds	r3, #4
 800c5ec:	4619      	mov	r1, r3
 800c5ee:	4610      	mov	r0, r2
 800c5f0:	f000 fb1e 	bl	800cc30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	2201      	movs	r2, #1
 800c5f8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	2201      	movs	r2, #1
 800c600:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	2201      	movs	r2, #1
 800c608:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	2201      	movs	r2, #1
 800c610:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	2201      	movs	r2, #1
 800c618:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	2201      	movs	r2, #1
 800c620:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	2201      	movs	r2, #1
 800c628:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	2201      	movs	r2, #1
 800c630:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	2201      	movs	r2, #1
 800c638:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	2201      	movs	r2, #1
 800c640:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	2201      	movs	r2, #1
 800c648:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	2201      	movs	r2, #1
 800c650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c654:	2300      	movs	r3, #0
}
 800c656:	4618      	mov	r0, r3
 800c658:	3708      	adds	r7, #8
 800c65a:	46bd      	mov	sp, r7
 800c65c:	bd80      	pop	{r7, pc}
	...

0800c660 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800c660:	b480      	push	{r7}
 800c662:	b085      	sub	sp, #20
 800c664:	af00      	add	r7, sp, #0
 800c666:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c66e:	b2db      	uxtb	r3, r3
 800c670:	2b01      	cmp	r3, #1
 800c672:	d001      	beq.n	800c678 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800c674:	2301      	movs	r3, #1
 800c676:	e047      	b.n	800c708 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	2202      	movs	r2, #2
 800c67c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	4a23      	ldr	r2, [pc, #140]	; (800c714 <HAL_TIM_Base_Start+0xb4>)
 800c686:	4293      	cmp	r3, r2
 800c688:	d01d      	beq.n	800c6c6 <HAL_TIM_Base_Start+0x66>
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c692:	d018      	beq.n	800c6c6 <HAL_TIM_Base_Start+0x66>
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	4a1f      	ldr	r2, [pc, #124]	; (800c718 <HAL_TIM_Base_Start+0xb8>)
 800c69a:	4293      	cmp	r3, r2
 800c69c:	d013      	beq.n	800c6c6 <HAL_TIM_Base_Start+0x66>
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	4a1e      	ldr	r2, [pc, #120]	; (800c71c <HAL_TIM_Base_Start+0xbc>)
 800c6a4:	4293      	cmp	r3, r2
 800c6a6:	d00e      	beq.n	800c6c6 <HAL_TIM_Base_Start+0x66>
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	4a1c      	ldr	r2, [pc, #112]	; (800c720 <HAL_TIM_Base_Start+0xc0>)
 800c6ae:	4293      	cmp	r3, r2
 800c6b0:	d009      	beq.n	800c6c6 <HAL_TIM_Base_Start+0x66>
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	4a1b      	ldr	r2, [pc, #108]	; (800c724 <HAL_TIM_Base_Start+0xc4>)
 800c6b8:	4293      	cmp	r3, r2
 800c6ba:	d004      	beq.n	800c6c6 <HAL_TIM_Base_Start+0x66>
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	4a19      	ldr	r2, [pc, #100]	; (800c728 <HAL_TIM_Base_Start+0xc8>)
 800c6c2:	4293      	cmp	r3, r2
 800c6c4:	d115      	bne.n	800c6f2 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	689a      	ldr	r2, [r3, #8]
 800c6cc:	4b17      	ldr	r3, [pc, #92]	; (800c72c <HAL_TIM_Base_Start+0xcc>)
 800c6ce:	4013      	ands	r3, r2
 800c6d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	2b06      	cmp	r3, #6
 800c6d6:	d015      	beq.n	800c704 <HAL_TIM_Base_Start+0xa4>
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c6de:	d011      	beq.n	800c704 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	681a      	ldr	r2, [r3, #0]
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	f042 0201 	orr.w	r2, r2, #1
 800c6ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c6f0:	e008      	b.n	800c704 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	681a      	ldr	r2, [r3, #0]
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	f042 0201 	orr.w	r2, r2, #1
 800c700:	601a      	str	r2, [r3, #0]
 800c702:	e000      	b.n	800c706 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c704:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c706:	2300      	movs	r3, #0
}
 800c708:	4618      	mov	r0, r3
 800c70a:	3714      	adds	r7, #20
 800c70c:	46bd      	mov	sp, r7
 800c70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c712:	4770      	bx	lr
 800c714:	40012c00 	.word	0x40012c00
 800c718:	40000400 	.word	0x40000400
 800c71c:	40000800 	.word	0x40000800
 800c720:	40000c00 	.word	0x40000c00
 800c724:	40013400 	.word	0x40013400
 800c728:	40014000 	.word	0x40014000
 800c72c:	00010007 	.word	0x00010007

0800c730 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c730:	b480      	push	{r7}
 800c732:	b085      	sub	sp, #20
 800c734:	af00      	add	r7, sp, #0
 800c736:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c73e:	b2db      	uxtb	r3, r3
 800c740:	2b01      	cmp	r3, #1
 800c742:	d001      	beq.n	800c748 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c744:	2301      	movs	r3, #1
 800c746:	e04f      	b.n	800c7e8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	2202      	movs	r2, #2
 800c74c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	68da      	ldr	r2, [r3, #12]
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	f042 0201 	orr.w	r2, r2, #1
 800c75e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	4a23      	ldr	r2, [pc, #140]	; (800c7f4 <HAL_TIM_Base_Start_IT+0xc4>)
 800c766:	4293      	cmp	r3, r2
 800c768:	d01d      	beq.n	800c7a6 <HAL_TIM_Base_Start_IT+0x76>
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c772:	d018      	beq.n	800c7a6 <HAL_TIM_Base_Start_IT+0x76>
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	4a1f      	ldr	r2, [pc, #124]	; (800c7f8 <HAL_TIM_Base_Start_IT+0xc8>)
 800c77a:	4293      	cmp	r3, r2
 800c77c:	d013      	beq.n	800c7a6 <HAL_TIM_Base_Start_IT+0x76>
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	4a1e      	ldr	r2, [pc, #120]	; (800c7fc <HAL_TIM_Base_Start_IT+0xcc>)
 800c784:	4293      	cmp	r3, r2
 800c786:	d00e      	beq.n	800c7a6 <HAL_TIM_Base_Start_IT+0x76>
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	4a1c      	ldr	r2, [pc, #112]	; (800c800 <HAL_TIM_Base_Start_IT+0xd0>)
 800c78e:	4293      	cmp	r3, r2
 800c790:	d009      	beq.n	800c7a6 <HAL_TIM_Base_Start_IT+0x76>
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	4a1b      	ldr	r2, [pc, #108]	; (800c804 <HAL_TIM_Base_Start_IT+0xd4>)
 800c798:	4293      	cmp	r3, r2
 800c79a:	d004      	beq.n	800c7a6 <HAL_TIM_Base_Start_IT+0x76>
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	4a19      	ldr	r2, [pc, #100]	; (800c808 <HAL_TIM_Base_Start_IT+0xd8>)
 800c7a2:	4293      	cmp	r3, r2
 800c7a4:	d115      	bne.n	800c7d2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	689a      	ldr	r2, [r3, #8]
 800c7ac:	4b17      	ldr	r3, [pc, #92]	; (800c80c <HAL_TIM_Base_Start_IT+0xdc>)
 800c7ae:	4013      	ands	r3, r2
 800c7b0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	2b06      	cmp	r3, #6
 800c7b6:	d015      	beq.n	800c7e4 <HAL_TIM_Base_Start_IT+0xb4>
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c7be:	d011      	beq.n	800c7e4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	681a      	ldr	r2, [r3, #0]
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	f042 0201 	orr.w	r2, r2, #1
 800c7ce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c7d0:	e008      	b.n	800c7e4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	681a      	ldr	r2, [r3, #0]
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	f042 0201 	orr.w	r2, r2, #1
 800c7e0:	601a      	str	r2, [r3, #0]
 800c7e2:	e000      	b.n	800c7e6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c7e4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c7e6:	2300      	movs	r3, #0
}
 800c7e8:	4618      	mov	r0, r3
 800c7ea:	3714      	adds	r7, #20
 800c7ec:	46bd      	mov	sp, r7
 800c7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7f2:	4770      	bx	lr
 800c7f4:	40012c00 	.word	0x40012c00
 800c7f8:	40000400 	.word	0x40000400
 800c7fc:	40000800 	.word	0x40000800
 800c800:	40000c00 	.word	0x40000c00
 800c804:	40013400 	.word	0x40013400
 800c808:	40014000 	.word	0x40014000
 800c80c:	00010007 	.word	0x00010007

0800c810 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c810:	b580      	push	{r7, lr}
 800c812:	b082      	sub	sp, #8
 800c814:	af00      	add	r7, sp, #0
 800c816:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	691b      	ldr	r3, [r3, #16]
 800c81e:	f003 0302 	and.w	r3, r3, #2
 800c822:	2b02      	cmp	r3, #2
 800c824:	d122      	bne.n	800c86c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	68db      	ldr	r3, [r3, #12]
 800c82c:	f003 0302 	and.w	r3, r3, #2
 800c830:	2b02      	cmp	r3, #2
 800c832:	d11b      	bne.n	800c86c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	f06f 0202 	mvn.w	r2, #2
 800c83c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	2201      	movs	r2, #1
 800c842:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	699b      	ldr	r3, [r3, #24]
 800c84a:	f003 0303 	and.w	r3, r3, #3
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d003      	beq.n	800c85a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c852:	6878      	ldr	r0, [r7, #4]
 800c854:	f000 f9ce 	bl	800cbf4 <HAL_TIM_IC_CaptureCallback>
 800c858:	e005      	b.n	800c866 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c85a:	6878      	ldr	r0, [r7, #4]
 800c85c:	f000 f9c0 	bl	800cbe0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c860:	6878      	ldr	r0, [r7, #4]
 800c862:	f000 f9d1 	bl	800cc08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	2200      	movs	r2, #0
 800c86a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	691b      	ldr	r3, [r3, #16]
 800c872:	f003 0304 	and.w	r3, r3, #4
 800c876:	2b04      	cmp	r3, #4
 800c878:	d122      	bne.n	800c8c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	68db      	ldr	r3, [r3, #12]
 800c880:	f003 0304 	and.w	r3, r3, #4
 800c884:	2b04      	cmp	r3, #4
 800c886:	d11b      	bne.n	800c8c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	f06f 0204 	mvn.w	r2, #4
 800c890:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	2202      	movs	r2, #2
 800c896:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	699b      	ldr	r3, [r3, #24]
 800c89e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d003      	beq.n	800c8ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c8a6:	6878      	ldr	r0, [r7, #4]
 800c8a8:	f000 f9a4 	bl	800cbf4 <HAL_TIM_IC_CaptureCallback>
 800c8ac:	e005      	b.n	800c8ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c8ae:	6878      	ldr	r0, [r7, #4]
 800c8b0:	f000 f996 	bl	800cbe0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c8b4:	6878      	ldr	r0, [r7, #4]
 800c8b6:	f000 f9a7 	bl	800cc08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	2200      	movs	r2, #0
 800c8be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	691b      	ldr	r3, [r3, #16]
 800c8c6:	f003 0308 	and.w	r3, r3, #8
 800c8ca:	2b08      	cmp	r3, #8
 800c8cc:	d122      	bne.n	800c914 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	68db      	ldr	r3, [r3, #12]
 800c8d4:	f003 0308 	and.w	r3, r3, #8
 800c8d8:	2b08      	cmp	r3, #8
 800c8da:	d11b      	bne.n	800c914 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	f06f 0208 	mvn.w	r2, #8
 800c8e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	2204      	movs	r2, #4
 800c8ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	69db      	ldr	r3, [r3, #28]
 800c8f2:	f003 0303 	and.w	r3, r3, #3
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d003      	beq.n	800c902 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c8fa:	6878      	ldr	r0, [r7, #4]
 800c8fc:	f000 f97a 	bl	800cbf4 <HAL_TIM_IC_CaptureCallback>
 800c900:	e005      	b.n	800c90e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c902:	6878      	ldr	r0, [r7, #4]
 800c904:	f000 f96c 	bl	800cbe0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c908:	6878      	ldr	r0, [r7, #4]
 800c90a:	f000 f97d 	bl	800cc08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	2200      	movs	r2, #0
 800c912:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	691b      	ldr	r3, [r3, #16]
 800c91a:	f003 0310 	and.w	r3, r3, #16
 800c91e:	2b10      	cmp	r3, #16
 800c920:	d122      	bne.n	800c968 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	68db      	ldr	r3, [r3, #12]
 800c928:	f003 0310 	and.w	r3, r3, #16
 800c92c:	2b10      	cmp	r3, #16
 800c92e:	d11b      	bne.n	800c968 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	f06f 0210 	mvn.w	r2, #16
 800c938:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	2208      	movs	r2, #8
 800c93e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	69db      	ldr	r3, [r3, #28]
 800c946:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d003      	beq.n	800c956 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c94e:	6878      	ldr	r0, [r7, #4]
 800c950:	f000 f950 	bl	800cbf4 <HAL_TIM_IC_CaptureCallback>
 800c954:	e005      	b.n	800c962 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c956:	6878      	ldr	r0, [r7, #4]
 800c958:	f000 f942 	bl	800cbe0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c95c:	6878      	ldr	r0, [r7, #4]
 800c95e:	f000 f953 	bl	800cc08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	2200      	movs	r2, #0
 800c966:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	691b      	ldr	r3, [r3, #16]
 800c96e:	f003 0301 	and.w	r3, r3, #1
 800c972:	2b01      	cmp	r3, #1
 800c974:	d10e      	bne.n	800c994 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	68db      	ldr	r3, [r3, #12]
 800c97c:	f003 0301 	and.w	r3, r3, #1
 800c980:	2b01      	cmp	r3, #1
 800c982:	d107      	bne.n	800c994 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	f06f 0201 	mvn.w	r2, #1
 800c98c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c98e:	6878      	ldr	r0, [r7, #4]
 800c990:	f7f7 f9d2 	bl	8003d38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	691b      	ldr	r3, [r3, #16]
 800c99a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c99e:	2b80      	cmp	r3, #128	; 0x80
 800c9a0:	d10e      	bne.n	800c9c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	68db      	ldr	r3, [r3, #12]
 800c9a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c9ac:	2b80      	cmp	r3, #128	; 0x80
 800c9ae:	d107      	bne.n	800c9c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c9b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c9ba:	6878      	ldr	r0, [r7, #4]
 800c9bc:	f000 fafe 	bl	800cfbc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	691b      	ldr	r3, [r3, #16]
 800c9c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c9ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c9ce:	d10e      	bne.n	800c9ee <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	68db      	ldr	r3, [r3, #12]
 800c9d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c9da:	2b80      	cmp	r3, #128	; 0x80
 800c9dc:	d107      	bne.n	800c9ee <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800c9e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c9e8:	6878      	ldr	r0, [r7, #4]
 800c9ea:	f000 faf1 	bl	800cfd0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	691b      	ldr	r3, [r3, #16]
 800c9f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c9f8:	2b40      	cmp	r3, #64	; 0x40
 800c9fa:	d10e      	bne.n	800ca1a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	68db      	ldr	r3, [r3, #12]
 800ca02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca06:	2b40      	cmp	r3, #64	; 0x40
 800ca08:	d107      	bne.n	800ca1a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ca12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ca14:	6878      	ldr	r0, [r7, #4]
 800ca16:	f000 f901 	bl	800cc1c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	691b      	ldr	r3, [r3, #16]
 800ca20:	f003 0320 	and.w	r3, r3, #32
 800ca24:	2b20      	cmp	r3, #32
 800ca26:	d10e      	bne.n	800ca46 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	68db      	ldr	r3, [r3, #12]
 800ca2e:	f003 0320 	and.w	r3, r3, #32
 800ca32:	2b20      	cmp	r3, #32
 800ca34:	d107      	bne.n	800ca46 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	f06f 0220 	mvn.w	r2, #32
 800ca3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ca40:	6878      	ldr	r0, [r7, #4]
 800ca42:	f000 fab1 	bl	800cfa8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ca46:	bf00      	nop
 800ca48:	3708      	adds	r7, #8
 800ca4a:	46bd      	mov	sp, r7
 800ca4c:	bd80      	pop	{r7, pc}

0800ca4e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ca4e:	b580      	push	{r7, lr}
 800ca50:	b084      	sub	sp, #16
 800ca52:	af00      	add	r7, sp, #0
 800ca54:	6078      	str	r0, [r7, #4]
 800ca56:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ca58:	2300      	movs	r3, #0
 800ca5a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ca62:	2b01      	cmp	r3, #1
 800ca64:	d101      	bne.n	800ca6a <HAL_TIM_ConfigClockSource+0x1c>
 800ca66:	2302      	movs	r3, #2
 800ca68:	e0b6      	b.n	800cbd8 <HAL_TIM_ConfigClockSource+0x18a>
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	2201      	movs	r2, #1
 800ca6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	2202      	movs	r2, #2
 800ca76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	689b      	ldr	r3, [r3, #8]
 800ca80:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ca82:	68bb      	ldr	r3, [r7, #8]
 800ca84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ca88:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800ca8c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ca8e:	68bb      	ldr	r3, [r7, #8]
 800ca90:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ca94:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	68ba      	ldr	r2, [r7, #8]
 800ca9c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ca9e:	683b      	ldr	r3, [r7, #0]
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800caa6:	d03e      	beq.n	800cb26 <HAL_TIM_ConfigClockSource+0xd8>
 800caa8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800caac:	f200 8087 	bhi.w	800cbbe <HAL_TIM_ConfigClockSource+0x170>
 800cab0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cab4:	f000 8086 	beq.w	800cbc4 <HAL_TIM_ConfigClockSource+0x176>
 800cab8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cabc:	d87f      	bhi.n	800cbbe <HAL_TIM_ConfigClockSource+0x170>
 800cabe:	2b70      	cmp	r3, #112	; 0x70
 800cac0:	d01a      	beq.n	800caf8 <HAL_TIM_ConfigClockSource+0xaa>
 800cac2:	2b70      	cmp	r3, #112	; 0x70
 800cac4:	d87b      	bhi.n	800cbbe <HAL_TIM_ConfigClockSource+0x170>
 800cac6:	2b60      	cmp	r3, #96	; 0x60
 800cac8:	d050      	beq.n	800cb6c <HAL_TIM_ConfigClockSource+0x11e>
 800caca:	2b60      	cmp	r3, #96	; 0x60
 800cacc:	d877      	bhi.n	800cbbe <HAL_TIM_ConfigClockSource+0x170>
 800cace:	2b50      	cmp	r3, #80	; 0x50
 800cad0:	d03c      	beq.n	800cb4c <HAL_TIM_ConfigClockSource+0xfe>
 800cad2:	2b50      	cmp	r3, #80	; 0x50
 800cad4:	d873      	bhi.n	800cbbe <HAL_TIM_ConfigClockSource+0x170>
 800cad6:	2b40      	cmp	r3, #64	; 0x40
 800cad8:	d058      	beq.n	800cb8c <HAL_TIM_ConfigClockSource+0x13e>
 800cada:	2b40      	cmp	r3, #64	; 0x40
 800cadc:	d86f      	bhi.n	800cbbe <HAL_TIM_ConfigClockSource+0x170>
 800cade:	2b30      	cmp	r3, #48	; 0x30
 800cae0:	d064      	beq.n	800cbac <HAL_TIM_ConfigClockSource+0x15e>
 800cae2:	2b30      	cmp	r3, #48	; 0x30
 800cae4:	d86b      	bhi.n	800cbbe <HAL_TIM_ConfigClockSource+0x170>
 800cae6:	2b20      	cmp	r3, #32
 800cae8:	d060      	beq.n	800cbac <HAL_TIM_ConfigClockSource+0x15e>
 800caea:	2b20      	cmp	r3, #32
 800caec:	d867      	bhi.n	800cbbe <HAL_TIM_ConfigClockSource+0x170>
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d05c      	beq.n	800cbac <HAL_TIM_ConfigClockSource+0x15e>
 800caf2:	2b10      	cmp	r3, #16
 800caf4:	d05a      	beq.n	800cbac <HAL_TIM_ConfigClockSource+0x15e>
 800caf6:	e062      	b.n	800cbbe <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800cafc:	683b      	ldr	r3, [r7, #0]
 800cafe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800cb00:	683b      	ldr	r3, [r7, #0]
 800cb02:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800cb04:	683b      	ldr	r3, [r7, #0]
 800cb06:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800cb08:	f000 f9a6 	bl	800ce58 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	689b      	ldr	r3, [r3, #8]
 800cb12:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800cb14:	68bb      	ldr	r3, [r7, #8]
 800cb16:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800cb1a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	68ba      	ldr	r2, [r7, #8]
 800cb22:	609a      	str	r2, [r3, #8]
      break;
 800cb24:	e04f      	b.n	800cbc6 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800cb2a:	683b      	ldr	r3, [r7, #0]
 800cb2c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800cb2e:	683b      	ldr	r3, [r7, #0]
 800cb30:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800cb32:	683b      	ldr	r3, [r7, #0]
 800cb34:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800cb36:	f000 f98f 	bl	800ce58 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	689a      	ldr	r2, [r3, #8]
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800cb48:	609a      	str	r2, [r3, #8]
      break;
 800cb4a:	e03c      	b.n	800cbc6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800cb50:	683b      	ldr	r3, [r7, #0]
 800cb52:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800cb54:	683b      	ldr	r3, [r7, #0]
 800cb56:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cb58:	461a      	mov	r2, r3
 800cb5a:	f000 f903 	bl	800cd64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	2150      	movs	r1, #80	; 0x50
 800cb64:	4618      	mov	r0, r3
 800cb66:	f000 f95c 	bl	800ce22 <TIM_ITRx_SetConfig>
      break;
 800cb6a:	e02c      	b.n	800cbc6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800cb70:	683b      	ldr	r3, [r7, #0]
 800cb72:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800cb74:	683b      	ldr	r3, [r7, #0]
 800cb76:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800cb78:	461a      	mov	r2, r3
 800cb7a:	f000 f922 	bl	800cdc2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	2160      	movs	r1, #96	; 0x60
 800cb84:	4618      	mov	r0, r3
 800cb86:	f000 f94c 	bl	800ce22 <TIM_ITRx_SetConfig>
      break;
 800cb8a:	e01c      	b.n	800cbc6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800cb90:	683b      	ldr	r3, [r7, #0]
 800cb92:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800cb94:	683b      	ldr	r3, [r7, #0]
 800cb96:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cb98:	461a      	mov	r2, r3
 800cb9a:	f000 f8e3 	bl	800cd64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	2140      	movs	r1, #64	; 0x40
 800cba4:	4618      	mov	r0, r3
 800cba6:	f000 f93c 	bl	800ce22 <TIM_ITRx_SetConfig>
      break;
 800cbaa:	e00c      	b.n	800cbc6 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	681a      	ldr	r2, [r3, #0]
 800cbb0:	683b      	ldr	r3, [r7, #0]
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	4619      	mov	r1, r3
 800cbb6:	4610      	mov	r0, r2
 800cbb8:	f000 f933 	bl	800ce22 <TIM_ITRx_SetConfig>
      break;
 800cbbc:	e003      	b.n	800cbc6 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800cbbe:	2301      	movs	r3, #1
 800cbc0:	73fb      	strb	r3, [r7, #15]
      break;
 800cbc2:	e000      	b.n	800cbc6 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800cbc4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	2201      	movs	r2, #1
 800cbca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	2200      	movs	r2, #0
 800cbd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800cbd6:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbd8:	4618      	mov	r0, r3
 800cbda:	3710      	adds	r7, #16
 800cbdc:	46bd      	mov	sp, r7
 800cbde:	bd80      	pop	{r7, pc}

0800cbe0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800cbe0:	b480      	push	{r7}
 800cbe2:	b083      	sub	sp, #12
 800cbe4:	af00      	add	r7, sp, #0
 800cbe6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800cbe8:	bf00      	nop
 800cbea:	370c      	adds	r7, #12
 800cbec:	46bd      	mov	sp, r7
 800cbee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbf2:	4770      	bx	lr

0800cbf4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800cbf4:	b480      	push	{r7}
 800cbf6:	b083      	sub	sp, #12
 800cbf8:	af00      	add	r7, sp, #0
 800cbfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800cbfc:	bf00      	nop
 800cbfe:	370c      	adds	r7, #12
 800cc00:	46bd      	mov	sp, r7
 800cc02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc06:	4770      	bx	lr

0800cc08 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800cc08:	b480      	push	{r7}
 800cc0a:	b083      	sub	sp, #12
 800cc0c:	af00      	add	r7, sp, #0
 800cc0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800cc10:	bf00      	nop
 800cc12:	370c      	adds	r7, #12
 800cc14:	46bd      	mov	sp, r7
 800cc16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc1a:	4770      	bx	lr

0800cc1c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800cc1c:	b480      	push	{r7}
 800cc1e:	b083      	sub	sp, #12
 800cc20:	af00      	add	r7, sp, #0
 800cc22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800cc24:	bf00      	nop
 800cc26:	370c      	adds	r7, #12
 800cc28:	46bd      	mov	sp, r7
 800cc2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc2e:	4770      	bx	lr

0800cc30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800cc30:	b480      	push	{r7}
 800cc32:	b085      	sub	sp, #20
 800cc34:	af00      	add	r7, sp, #0
 800cc36:	6078      	str	r0, [r7, #4]
 800cc38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	4a40      	ldr	r2, [pc, #256]	; (800cd44 <TIM_Base_SetConfig+0x114>)
 800cc44:	4293      	cmp	r3, r2
 800cc46:	d013      	beq.n	800cc70 <TIM_Base_SetConfig+0x40>
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cc4e:	d00f      	beq.n	800cc70 <TIM_Base_SetConfig+0x40>
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	4a3d      	ldr	r2, [pc, #244]	; (800cd48 <TIM_Base_SetConfig+0x118>)
 800cc54:	4293      	cmp	r3, r2
 800cc56:	d00b      	beq.n	800cc70 <TIM_Base_SetConfig+0x40>
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	4a3c      	ldr	r2, [pc, #240]	; (800cd4c <TIM_Base_SetConfig+0x11c>)
 800cc5c:	4293      	cmp	r3, r2
 800cc5e:	d007      	beq.n	800cc70 <TIM_Base_SetConfig+0x40>
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	4a3b      	ldr	r2, [pc, #236]	; (800cd50 <TIM_Base_SetConfig+0x120>)
 800cc64:	4293      	cmp	r3, r2
 800cc66:	d003      	beq.n	800cc70 <TIM_Base_SetConfig+0x40>
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	4a3a      	ldr	r2, [pc, #232]	; (800cd54 <TIM_Base_SetConfig+0x124>)
 800cc6c:	4293      	cmp	r3, r2
 800cc6e:	d108      	bne.n	800cc82 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cc76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800cc78:	683b      	ldr	r3, [r7, #0]
 800cc7a:	685b      	ldr	r3, [r3, #4]
 800cc7c:	68fa      	ldr	r2, [r7, #12]
 800cc7e:	4313      	orrs	r3, r2
 800cc80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	4a2f      	ldr	r2, [pc, #188]	; (800cd44 <TIM_Base_SetConfig+0x114>)
 800cc86:	4293      	cmp	r3, r2
 800cc88:	d01f      	beq.n	800ccca <TIM_Base_SetConfig+0x9a>
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cc90:	d01b      	beq.n	800ccca <TIM_Base_SetConfig+0x9a>
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	4a2c      	ldr	r2, [pc, #176]	; (800cd48 <TIM_Base_SetConfig+0x118>)
 800cc96:	4293      	cmp	r3, r2
 800cc98:	d017      	beq.n	800ccca <TIM_Base_SetConfig+0x9a>
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	4a2b      	ldr	r2, [pc, #172]	; (800cd4c <TIM_Base_SetConfig+0x11c>)
 800cc9e:	4293      	cmp	r3, r2
 800cca0:	d013      	beq.n	800ccca <TIM_Base_SetConfig+0x9a>
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	4a2a      	ldr	r2, [pc, #168]	; (800cd50 <TIM_Base_SetConfig+0x120>)
 800cca6:	4293      	cmp	r3, r2
 800cca8:	d00f      	beq.n	800ccca <TIM_Base_SetConfig+0x9a>
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	4a29      	ldr	r2, [pc, #164]	; (800cd54 <TIM_Base_SetConfig+0x124>)
 800ccae:	4293      	cmp	r3, r2
 800ccb0:	d00b      	beq.n	800ccca <TIM_Base_SetConfig+0x9a>
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	4a28      	ldr	r2, [pc, #160]	; (800cd58 <TIM_Base_SetConfig+0x128>)
 800ccb6:	4293      	cmp	r3, r2
 800ccb8:	d007      	beq.n	800ccca <TIM_Base_SetConfig+0x9a>
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	4a27      	ldr	r2, [pc, #156]	; (800cd5c <TIM_Base_SetConfig+0x12c>)
 800ccbe:	4293      	cmp	r3, r2
 800ccc0:	d003      	beq.n	800ccca <TIM_Base_SetConfig+0x9a>
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	4a26      	ldr	r2, [pc, #152]	; (800cd60 <TIM_Base_SetConfig+0x130>)
 800ccc6:	4293      	cmp	r3, r2
 800ccc8:	d108      	bne.n	800ccdc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ccd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ccd2:	683b      	ldr	r3, [r7, #0]
 800ccd4:	68db      	ldr	r3, [r3, #12]
 800ccd6:	68fa      	ldr	r2, [r7, #12]
 800ccd8:	4313      	orrs	r3, r2
 800ccda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800cce2:	683b      	ldr	r3, [r7, #0]
 800cce4:	695b      	ldr	r3, [r3, #20]
 800cce6:	4313      	orrs	r3, r2
 800cce8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	68fa      	ldr	r2, [r7, #12]
 800ccee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ccf0:	683b      	ldr	r3, [r7, #0]
 800ccf2:	689a      	ldr	r2, [r3, #8]
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ccf8:	683b      	ldr	r3, [r7, #0]
 800ccfa:	681a      	ldr	r2, [r3, #0]
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	4a10      	ldr	r2, [pc, #64]	; (800cd44 <TIM_Base_SetConfig+0x114>)
 800cd04:	4293      	cmp	r3, r2
 800cd06:	d00f      	beq.n	800cd28 <TIM_Base_SetConfig+0xf8>
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	4a12      	ldr	r2, [pc, #72]	; (800cd54 <TIM_Base_SetConfig+0x124>)
 800cd0c:	4293      	cmp	r3, r2
 800cd0e:	d00b      	beq.n	800cd28 <TIM_Base_SetConfig+0xf8>
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	4a11      	ldr	r2, [pc, #68]	; (800cd58 <TIM_Base_SetConfig+0x128>)
 800cd14:	4293      	cmp	r3, r2
 800cd16:	d007      	beq.n	800cd28 <TIM_Base_SetConfig+0xf8>
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	4a10      	ldr	r2, [pc, #64]	; (800cd5c <TIM_Base_SetConfig+0x12c>)
 800cd1c:	4293      	cmp	r3, r2
 800cd1e:	d003      	beq.n	800cd28 <TIM_Base_SetConfig+0xf8>
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	4a0f      	ldr	r2, [pc, #60]	; (800cd60 <TIM_Base_SetConfig+0x130>)
 800cd24:	4293      	cmp	r3, r2
 800cd26:	d103      	bne.n	800cd30 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800cd28:	683b      	ldr	r3, [r7, #0]
 800cd2a:	691a      	ldr	r2, [r3, #16]
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	2201      	movs	r2, #1
 800cd34:	615a      	str	r2, [r3, #20]
}
 800cd36:	bf00      	nop
 800cd38:	3714      	adds	r7, #20
 800cd3a:	46bd      	mov	sp, r7
 800cd3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd40:	4770      	bx	lr
 800cd42:	bf00      	nop
 800cd44:	40012c00 	.word	0x40012c00
 800cd48:	40000400 	.word	0x40000400
 800cd4c:	40000800 	.word	0x40000800
 800cd50:	40000c00 	.word	0x40000c00
 800cd54:	40013400 	.word	0x40013400
 800cd58:	40014000 	.word	0x40014000
 800cd5c:	40014400 	.word	0x40014400
 800cd60:	40014800 	.word	0x40014800

0800cd64 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cd64:	b480      	push	{r7}
 800cd66:	b087      	sub	sp, #28
 800cd68:	af00      	add	r7, sp, #0
 800cd6a:	60f8      	str	r0, [r7, #12]
 800cd6c:	60b9      	str	r1, [r7, #8]
 800cd6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	6a1b      	ldr	r3, [r3, #32]
 800cd74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	6a1b      	ldr	r3, [r3, #32]
 800cd7a:	f023 0201 	bic.w	r2, r3, #1
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	699b      	ldr	r3, [r3, #24]
 800cd86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800cd88:	693b      	ldr	r3, [r7, #16]
 800cd8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800cd8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	011b      	lsls	r3, r3, #4
 800cd94:	693a      	ldr	r2, [r7, #16]
 800cd96:	4313      	orrs	r3, r2
 800cd98:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800cd9a:	697b      	ldr	r3, [r7, #20]
 800cd9c:	f023 030a 	bic.w	r3, r3, #10
 800cda0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800cda2:	697a      	ldr	r2, [r7, #20]
 800cda4:	68bb      	ldr	r3, [r7, #8]
 800cda6:	4313      	orrs	r3, r2
 800cda8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	693a      	ldr	r2, [r7, #16]
 800cdae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	697a      	ldr	r2, [r7, #20]
 800cdb4:	621a      	str	r2, [r3, #32]
}
 800cdb6:	bf00      	nop
 800cdb8:	371c      	adds	r7, #28
 800cdba:	46bd      	mov	sp, r7
 800cdbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdc0:	4770      	bx	lr

0800cdc2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cdc2:	b480      	push	{r7}
 800cdc4:	b087      	sub	sp, #28
 800cdc6:	af00      	add	r7, sp, #0
 800cdc8:	60f8      	str	r0, [r7, #12]
 800cdca:	60b9      	str	r1, [r7, #8]
 800cdcc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	6a1b      	ldr	r3, [r3, #32]
 800cdd2:	f023 0210 	bic.w	r2, r3, #16
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	699b      	ldr	r3, [r3, #24]
 800cdde:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	6a1b      	ldr	r3, [r3, #32]
 800cde4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800cde6:	697b      	ldr	r3, [r7, #20]
 800cde8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800cdec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	031b      	lsls	r3, r3, #12
 800cdf2:	697a      	ldr	r2, [r7, #20]
 800cdf4:	4313      	orrs	r3, r2
 800cdf6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800cdf8:	693b      	ldr	r3, [r7, #16]
 800cdfa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800cdfe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ce00:	68bb      	ldr	r3, [r7, #8]
 800ce02:	011b      	lsls	r3, r3, #4
 800ce04:	693a      	ldr	r2, [r7, #16]
 800ce06:	4313      	orrs	r3, r2
 800ce08:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	697a      	ldr	r2, [r7, #20]
 800ce0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	693a      	ldr	r2, [r7, #16]
 800ce14:	621a      	str	r2, [r3, #32]
}
 800ce16:	bf00      	nop
 800ce18:	371c      	adds	r7, #28
 800ce1a:	46bd      	mov	sp, r7
 800ce1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce20:	4770      	bx	lr

0800ce22 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ce22:	b480      	push	{r7}
 800ce24:	b085      	sub	sp, #20
 800ce26:	af00      	add	r7, sp, #0
 800ce28:	6078      	str	r0, [r7, #4]
 800ce2a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	689b      	ldr	r3, [r3, #8]
 800ce30:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ce38:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ce3a:	683a      	ldr	r2, [r7, #0]
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	4313      	orrs	r3, r2
 800ce40:	f043 0307 	orr.w	r3, r3, #7
 800ce44:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	68fa      	ldr	r2, [r7, #12]
 800ce4a:	609a      	str	r2, [r3, #8]
}
 800ce4c:	bf00      	nop
 800ce4e:	3714      	adds	r7, #20
 800ce50:	46bd      	mov	sp, r7
 800ce52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce56:	4770      	bx	lr

0800ce58 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ce58:	b480      	push	{r7}
 800ce5a:	b087      	sub	sp, #28
 800ce5c:	af00      	add	r7, sp, #0
 800ce5e:	60f8      	str	r0, [r7, #12]
 800ce60:	60b9      	str	r1, [r7, #8]
 800ce62:	607a      	str	r2, [r7, #4]
 800ce64:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	689b      	ldr	r3, [r3, #8]
 800ce6a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ce6c:	697b      	ldr	r3, [r7, #20]
 800ce6e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ce72:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ce74:	683b      	ldr	r3, [r7, #0]
 800ce76:	021a      	lsls	r2, r3, #8
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	431a      	orrs	r2, r3
 800ce7c:	68bb      	ldr	r3, [r7, #8]
 800ce7e:	4313      	orrs	r3, r2
 800ce80:	697a      	ldr	r2, [r7, #20]
 800ce82:	4313      	orrs	r3, r2
 800ce84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	697a      	ldr	r2, [r7, #20]
 800ce8a:	609a      	str	r2, [r3, #8]
}
 800ce8c:	bf00      	nop
 800ce8e:	371c      	adds	r7, #28
 800ce90:	46bd      	mov	sp, r7
 800ce92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce96:	4770      	bx	lr

0800ce98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ce98:	b480      	push	{r7}
 800ce9a:	b085      	sub	sp, #20
 800ce9c:	af00      	add	r7, sp, #0
 800ce9e:	6078      	str	r0, [r7, #4]
 800cea0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cea8:	2b01      	cmp	r3, #1
 800ceaa:	d101      	bne.n	800ceb0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ceac:	2302      	movs	r3, #2
 800ceae:	e068      	b.n	800cf82 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	2201      	movs	r2, #1
 800ceb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	2202      	movs	r2, #2
 800cebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	685b      	ldr	r3, [r3, #4]
 800cec6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	689b      	ldr	r3, [r3, #8]
 800cece:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	4a2e      	ldr	r2, [pc, #184]	; (800cf90 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800ced6:	4293      	cmp	r3, r2
 800ced8:	d004      	beq.n	800cee4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	4a2d      	ldr	r2, [pc, #180]	; (800cf94 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800cee0:	4293      	cmp	r3, r2
 800cee2:	d108      	bne.n	800cef6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800ceea:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ceec:	683b      	ldr	r3, [r7, #0]
 800ceee:	685b      	ldr	r3, [r3, #4]
 800cef0:	68fa      	ldr	r2, [r7, #12]
 800cef2:	4313      	orrs	r3, r2
 800cef4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cefc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cefe:	683b      	ldr	r3, [r7, #0]
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	68fa      	ldr	r2, [r7, #12]
 800cf04:	4313      	orrs	r3, r2
 800cf06:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	68fa      	ldr	r2, [r7, #12]
 800cf0e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	4a1e      	ldr	r2, [pc, #120]	; (800cf90 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800cf16:	4293      	cmp	r3, r2
 800cf18:	d01d      	beq.n	800cf56 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cf22:	d018      	beq.n	800cf56 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	4a1b      	ldr	r2, [pc, #108]	; (800cf98 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800cf2a:	4293      	cmp	r3, r2
 800cf2c:	d013      	beq.n	800cf56 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	4a1a      	ldr	r2, [pc, #104]	; (800cf9c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800cf34:	4293      	cmp	r3, r2
 800cf36:	d00e      	beq.n	800cf56 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	4a18      	ldr	r2, [pc, #96]	; (800cfa0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800cf3e:	4293      	cmp	r3, r2
 800cf40:	d009      	beq.n	800cf56 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	4a13      	ldr	r2, [pc, #76]	; (800cf94 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800cf48:	4293      	cmp	r3, r2
 800cf4a:	d004      	beq.n	800cf56 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	4a14      	ldr	r2, [pc, #80]	; (800cfa4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800cf52:	4293      	cmp	r3, r2
 800cf54:	d10c      	bne.n	800cf70 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cf56:	68bb      	ldr	r3, [r7, #8]
 800cf58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cf5c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cf5e:	683b      	ldr	r3, [r7, #0]
 800cf60:	689b      	ldr	r3, [r3, #8]
 800cf62:	68ba      	ldr	r2, [r7, #8]
 800cf64:	4313      	orrs	r3, r2
 800cf66:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	68ba      	ldr	r2, [r7, #8]
 800cf6e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	2201      	movs	r2, #1
 800cf74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	2200      	movs	r2, #0
 800cf7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cf80:	2300      	movs	r3, #0
}
 800cf82:	4618      	mov	r0, r3
 800cf84:	3714      	adds	r7, #20
 800cf86:	46bd      	mov	sp, r7
 800cf88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf8c:	4770      	bx	lr
 800cf8e:	bf00      	nop
 800cf90:	40012c00 	.word	0x40012c00
 800cf94:	40013400 	.word	0x40013400
 800cf98:	40000400 	.word	0x40000400
 800cf9c:	40000800 	.word	0x40000800
 800cfa0:	40000c00 	.word	0x40000c00
 800cfa4:	40014000 	.word	0x40014000

0800cfa8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800cfa8:	b480      	push	{r7}
 800cfaa:	b083      	sub	sp, #12
 800cfac:	af00      	add	r7, sp, #0
 800cfae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800cfb0:	bf00      	nop
 800cfb2:	370c      	adds	r7, #12
 800cfb4:	46bd      	mov	sp, r7
 800cfb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfba:	4770      	bx	lr

0800cfbc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800cfbc:	b480      	push	{r7}
 800cfbe:	b083      	sub	sp, #12
 800cfc0:	af00      	add	r7, sp, #0
 800cfc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800cfc4:	bf00      	nop
 800cfc6:	370c      	adds	r7, #12
 800cfc8:	46bd      	mov	sp, r7
 800cfca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfce:	4770      	bx	lr

0800cfd0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800cfd0:	b480      	push	{r7}
 800cfd2:	b083      	sub	sp, #12
 800cfd4:	af00      	add	r7, sp, #0
 800cfd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800cfd8:	bf00      	nop
 800cfda:	370c      	adds	r7, #12
 800cfdc:	46bd      	mov	sp, r7
 800cfde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfe2:	4770      	bx	lr

0800cfe4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800cfe4:	b084      	sub	sp, #16
 800cfe6:	b580      	push	{r7, lr}
 800cfe8:	b084      	sub	sp, #16
 800cfea:	af00      	add	r7, sp, #0
 800cfec:	6078      	str	r0, [r7, #4]
 800cfee:	f107 001c 	add.w	r0, r7, #28
 800cff2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	68db      	ldr	r3, [r3, #12]
 800cffa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800d002:	6878      	ldr	r0, [r7, #4]
 800d004:	f001 faf6 	bl	800e5f4 <USB_CoreReset>
 800d008:	4603      	mov	r3, r0
 800d00a:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800d00c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d106      	bne.n	800d020 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d016:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	639a      	str	r2, [r3, #56]	; 0x38
 800d01e:	e005      	b.n	800d02c <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d024:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 800d02c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d02e:	4618      	mov	r0, r3
 800d030:	3710      	adds	r7, #16
 800d032:	46bd      	mov	sp, r7
 800d034:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d038:	b004      	add	sp, #16
 800d03a:	4770      	bx	lr

0800d03c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800d03c:	b480      	push	{r7}
 800d03e:	b087      	sub	sp, #28
 800d040:	af00      	add	r7, sp, #0
 800d042:	60f8      	str	r0, [r7, #12]
 800d044:	60b9      	str	r1, [r7, #8]
 800d046:	4613      	mov	r3, r2
 800d048:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800d04a:	79fb      	ldrb	r3, [r7, #7]
 800d04c:	2b02      	cmp	r3, #2
 800d04e:	d165      	bne.n	800d11c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800d050:	68bb      	ldr	r3, [r7, #8]
 800d052:	4a3e      	ldr	r2, [pc, #248]	; (800d14c <USB_SetTurnaroundTime+0x110>)
 800d054:	4293      	cmp	r3, r2
 800d056:	d906      	bls.n	800d066 <USB_SetTurnaroundTime+0x2a>
 800d058:	68bb      	ldr	r3, [r7, #8]
 800d05a:	4a3d      	ldr	r2, [pc, #244]	; (800d150 <USB_SetTurnaroundTime+0x114>)
 800d05c:	4293      	cmp	r3, r2
 800d05e:	d202      	bcs.n	800d066 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800d060:	230f      	movs	r3, #15
 800d062:	617b      	str	r3, [r7, #20]
 800d064:	e05c      	b.n	800d120 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800d066:	68bb      	ldr	r3, [r7, #8]
 800d068:	4a39      	ldr	r2, [pc, #228]	; (800d150 <USB_SetTurnaroundTime+0x114>)
 800d06a:	4293      	cmp	r3, r2
 800d06c:	d306      	bcc.n	800d07c <USB_SetTurnaroundTime+0x40>
 800d06e:	68bb      	ldr	r3, [r7, #8]
 800d070:	4a38      	ldr	r2, [pc, #224]	; (800d154 <USB_SetTurnaroundTime+0x118>)
 800d072:	4293      	cmp	r3, r2
 800d074:	d202      	bcs.n	800d07c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800d076:	230e      	movs	r3, #14
 800d078:	617b      	str	r3, [r7, #20]
 800d07a:	e051      	b.n	800d120 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800d07c:	68bb      	ldr	r3, [r7, #8]
 800d07e:	4a35      	ldr	r2, [pc, #212]	; (800d154 <USB_SetTurnaroundTime+0x118>)
 800d080:	4293      	cmp	r3, r2
 800d082:	d306      	bcc.n	800d092 <USB_SetTurnaroundTime+0x56>
 800d084:	68bb      	ldr	r3, [r7, #8]
 800d086:	4a34      	ldr	r2, [pc, #208]	; (800d158 <USB_SetTurnaroundTime+0x11c>)
 800d088:	4293      	cmp	r3, r2
 800d08a:	d202      	bcs.n	800d092 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800d08c:	230d      	movs	r3, #13
 800d08e:	617b      	str	r3, [r7, #20]
 800d090:	e046      	b.n	800d120 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800d092:	68bb      	ldr	r3, [r7, #8]
 800d094:	4a30      	ldr	r2, [pc, #192]	; (800d158 <USB_SetTurnaroundTime+0x11c>)
 800d096:	4293      	cmp	r3, r2
 800d098:	d306      	bcc.n	800d0a8 <USB_SetTurnaroundTime+0x6c>
 800d09a:	68bb      	ldr	r3, [r7, #8]
 800d09c:	4a2f      	ldr	r2, [pc, #188]	; (800d15c <USB_SetTurnaroundTime+0x120>)
 800d09e:	4293      	cmp	r3, r2
 800d0a0:	d802      	bhi.n	800d0a8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800d0a2:	230c      	movs	r3, #12
 800d0a4:	617b      	str	r3, [r7, #20]
 800d0a6:	e03b      	b.n	800d120 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800d0a8:	68bb      	ldr	r3, [r7, #8]
 800d0aa:	4a2c      	ldr	r2, [pc, #176]	; (800d15c <USB_SetTurnaroundTime+0x120>)
 800d0ac:	4293      	cmp	r3, r2
 800d0ae:	d906      	bls.n	800d0be <USB_SetTurnaroundTime+0x82>
 800d0b0:	68bb      	ldr	r3, [r7, #8]
 800d0b2:	4a2b      	ldr	r2, [pc, #172]	; (800d160 <USB_SetTurnaroundTime+0x124>)
 800d0b4:	4293      	cmp	r3, r2
 800d0b6:	d802      	bhi.n	800d0be <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800d0b8:	230b      	movs	r3, #11
 800d0ba:	617b      	str	r3, [r7, #20]
 800d0bc:	e030      	b.n	800d120 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800d0be:	68bb      	ldr	r3, [r7, #8]
 800d0c0:	4a27      	ldr	r2, [pc, #156]	; (800d160 <USB_SetTurnaroundTime+0x124>)
 800d0c2:	4293      	cmp	r3, r2
 800d0c4:	d906      	bls.n	800d0d4 <USB_SetTurnaroundTime+0x98>
 800d0c6:	68bb      	ldr	r3, [r7, #8]
 800d0c8:	4a26      	ldr	r2, [pc, #152]	; (800d164 <USB_SetTurnaroundTime+0x128>)
 800d0ca:	4293      	cmp	r3, r2
 800d0cc:	d802      	bhi.n	800d0d4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800d0ce:	230a      	movs	r3, #10
 800d0d0:	617b      	str	r3, [r7, #20]
 800d0d2:	e025      	b.n	800d120 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800d0d4:	68bb      	ldr	r3, [r7, #8]
 800d0d6:	4a23      	ldr	r2, [pc, #140]	; (800d164 <USB_SetTurnaroundTime+0x128>)
 800d0d8:	4293      	cmp	r3, r2
 800d0da:	d906      	bls.n	800d0ea <USB_SetTurnaroundTime+0xae>
 800d0dc:	68bb      	ldr	r3, [r7, #8]
 800d0de:	4a22      	ldr	r2, [pc, #136]	; (800d168 <USB_SetTurnaroundTime+0x12c>)
 800d0e0:	4293      	cmp	r3, r2
 800d0e2:	d202      	bcs.n	800d0ea <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800d0e4:	2309      	movs	r3, #9
 800d0e6:	617b      	str	r3, [r7, #20]
 800d0e8:	e01a      	b.n	800d120 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800d0ea:	68bb      	ldr	r3, [r7, #8]
 800d0ec:	4a1e      	ldr	r2, [pc, #120]	; (800d168 <USB_SetTurnaroundTime+0x12c>)
 800d0ee:	4293      	cmp	r3, r2
 800d0f0:	d306      	bcc.n	800d100 <USB_SetTurnaroundTime+0xc4>
 800d0f2:	68bb      	ldr	r3, [r7, #8]
 800d0f4:	4a1d      	ldr	r2, [pc, #116]	; (800d16c <USB_SetTurnaroundTime+0x130>)
 800d0f6:	4293      	cmp	r3, r2
 800d0f8:	d802      	bhi.n	800d100 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800d0fa:	2308      	movs	r3, #8
 800d0fc:	617b      	str	r3, [r7, #20]
 800d0fe:	e00f      	b.n	800d120 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800d100:	68bb      	ldr	r3, [r7, #8]
 800d102:	4a1a      	ldr	r2, [pc, #104]	; (800d16c <USB_SetTurnaroundTime+0x130>)
 800d104:	4293      	cmp	r3, r2
 800d106:	d906      	bls.n	800d116 <USB_SetTurnaroundTime+0xda>
 800d108:	68bb      	ldr	r3, [r7, #8]
 800d10a:	4a19      	ldr	r2, [pc, #100]	; (800d170 <USB_SetTurnaroundTime+0x134>)
 800d10c:	4293      	cmp	r3, r2
 800d10e:	d202      	bcs.n	800d116 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800d110:	2307      	movs	r3, #7
 800d112:	617b      	str	r3, [r7, #20]
 800d114:	e004      	b.n	800d120 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800d116:	2306      	movs	r3, #6
 800d118:	617b      	str	r3, [r7, #20]
 800d11a:	e001      	b.n	800d120 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800d11c:	2309      	movs	r3, #9
 800d11e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	68db      	ldr	r3, [r3, #12]
 800d124:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	68da      	ldr	r2, [r3, #12]
 800d130:	697b      	ldr	r3, [r7, #20]
 800d132:	029b      	lsls	r3, r3, #10
 800d134:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800d138:	431a      	orrs	r2, r3
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800d13e:	2300      	movs	r3, #0
}
 800d140:	4618      	mov	r0, r3
 800d142:	371c      	adds	r7, #28
 800d144:	46bd      	mov	sp, r7
 800d146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d14a:	4770      	bx	lr
 800d14c:	00d8acbf 	.word	0x00d8acbf
 800d150:	00e4e1c0 	.word	0x00e4e1c0
 800d154:	00f42400 	.word	0x00f42400
 800d158:	01067380 	.word	0x01067380
 800d15c:	011a499f 	.word	0x011a499f
 800d160:	01312cff 	.word	0x01312cff
 800d164:	014ca43f 	.word	0x014ca43f
 800d168:	016e3600 	.word	0x016e3600
 800d16c:	01a6ab1f 	.word	0x01a6ab1f
 800d170:	01e84800 	.word	0x01e84800

0800d174 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d174:	b480      	push	{r7}
 800d176:	b083      	sub	sp, #12
 800d178:	af00      	add	r7, sp, #0
 800d17a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	689b      	ldr	r3, [r3, #8]
 800d180:	f043 0201 	orr.w	r2, r3, #1
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d188:	2300      	movs	r3, #0
}
 800d18a:	4618      	mov	r0, r3
 800d18c:	370c      	adds	r7, #12
 800d18e:	46bd      	mov	sp, r7
 800d190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d194:	4770      	bx	lr

0800d196 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d196:	b480      	push	{r7}
 800d198:	b083      	sub	sp, #12
 800d19a:	af00      	add	r7, sp, #0
 800d19c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	689b      	ldr	r3, [r3, #8]
 800d1a2:	f023 0201 	bic.w	r2, r3, #1
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d1aa:	2300      	movs	r3, #0
}
 800d1ac:	4618      	mov	r0, r3
 800d1ae:	370c      	adds	r7, #12
 800d1b0:	46bd      	mov	sp, r7
 800d1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1b6:	4770      	bx	lr

0800d1b8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800d1b8:	b580      	push	{r7, lr}
 800d1ba:	b084      	sub	sp, #16
 800d1bc:	af00      	add	r7, sp, #0
 800d1be:	6078      	str	r0, [r7, #4]
 800d1c0:	460b      	mov	r3, r1
 800d1c2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800d1c4:	2300      	movs	r3, #0
 800d1c6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	68db      	ldr	r3, [r3, #12]
 800d1cc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800d1d4:	78fb      	ldrb	r3, [r7, #3]
 800d1d6:	2b01      	cmp	r3, #1
 800d1d8:	d115      	bne.n	800d206 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	68db      	ldr	r3, [r3, #12]
 800d1de:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800d1e6:	2001      	movs	r0, #1
 800d1e8:	f7f8 f888 	bl	80052fc <HAL_Delay>
      ms++;
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	3301      	adds	r3, #1
 800d1f0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800d1f2:	6878      	ldr	r0, [r7, #4]
 800d1f4:	f001 f985 	bl	800e502 <USB_GetMode>
 800d1f8:	4603      	mov	r3, r0
 800d1fa:	2b01      	cmp	r3, #1
 800d1fc:	d01e      	beq.n	800d23c <USB_SetCurrentMode+0x84>
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	2b31      	cmp	r3, #49	; 0x31
 800d202:	d9f0      	bls.n	800d1e6 <USB_SetCurrentMode+0x2e>
 800d204:	e01a      	b.n	800d23c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800d206:	78fb      	ldrb	r3, [r7, #3]
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d115      	bne.n	800d238 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	68db      	ldr	r3, [r3, #12]
 800d210:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800d218:	2001      	movs	r0, #1
 800d21a:	f7f8 f86f 	bl	80052fc <HAL_Delay>
      ms++;
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	3301      	adds	r3, #1
 800d222:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800d224:	6878      	ldr	r0, [r7, #4]
 800d226:	f001 f96c 	bl	800e502 <USB_GetMode>
 800d22a:	4603      	mov	r3, r0
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d005      	beq.n	800d23c <USB_SetCurrentMode+0x84>
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	2b31      	cmp	r3, #49	; 0x31
 800d234:	d9f0      	bls.n	800d218 <USB_SetCurrentMode+0x60>
 800d236:	e001      	b.n	800d23c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800d238:	2301      	movs	r3, #1
 800d23a:	e005      	b.n	800d248 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	2b32      	cmp	r3, #50	; 0x32
 800d240:	d101      	bne.n	800d246 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800d242:	2301      	movs	r3, #1
 800d244:	e000      	b.n	800d248 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800d246:	2300      	movs	r3, #0
}
 800d248:	4618      	mov	r0, r3
 800d24a:	3710      	adds	r7, #16
 800d24c:	46bd      	mov	sp, r7
 800d24e:	bd80      	pop	{r7, pc}

0800d250 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d250:	b084      	sub	sp, #16
 800d252:	b580      	push	{r7, lr}
 800d254:	b086      	sub	sp, #24
 800d256:	af00      	add	r7, sp, #0
 800d258:	6078      	str	r0, [r7, #4]
 800d25a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800d25e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800d262:	2300      	movs	r3, #0
 800d264:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800d26a:	2300      	movs	r3, #0
 800d26c:	613b      	str	r3, [r7, #16]
 800d26e:	e009      	b.n	800d284 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800d270:	687a      	ldr	r2, [r7, #4]
 800d272:	693b      	ldr	r3, [r7, #16]
 800d274:	3340      	adds	r3, #64	; 0x40
 800d276:	009b      	lsls	r3, r3, #2
 800d278:	4413      	add	r3, r2
 800d27a:	2200      	movs	r2, #0
 800d27c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800d27e:	693b      	ldr	r3, [r7, #16]
 800d280:	3301      	adds	r3, #1
 800d282:	613b      	str	r3, [r7, #16]
 800d284:	693b      	ldr	r3, [r7, #16]
 800d286:	2b0e      	cmp	r3, #14
 800d288:	d9f2      	bls.n	800d270 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800d28a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d11c      	bne.n	800d2ca <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d296:	685b      	ldr	r3, [r3, #4]
 800d298:	68fa      	ldr	r2, [r7, #12]
 800d29a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d29e:	f043 0302 	orr.w	r3, r3, #2
 800d2a2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2a8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	601a      	str	r2, [r3, #0]
 800d2c8:	e005      	b.n	800d2d6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2ce:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d2dc:	461a      	mov	r2, r3
 800d2de:	2300      	movs	r3, #0
 800d2e0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d2e8:	4619      	mov	r1, r3
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d2f0:	461a      	mov	r2, r3
 800d2f2:	680b      	ldr	r3, [r1, #0]
 800d2f4:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800d2f6:	2103      	movs	r1, #3
 800d2f8:	6878      	ldr	r0, [r7, #4]
 800d2fa:	f000 f959 	bl	800d5b0 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800d2fe:	2110      	movs	r1, #16
 800d300:	6878      	ldr	r0, [r7, #4]
 800d302:	f000 f8f1 	bl	800d4e8 <USB_FlushTxFifo>
 800d306:	4603      	mov	r3, r0
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d001      	beq.n	800d310 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 800d30c:	2301      	movs	r3, #1
 800d30e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800d310:	6878      	ldr	r0, [r7, #4]
 800d312:	f000 f91d 	bl	800d550 <USB_FlushRxFifo>
 800d316:	4603      	mov	r3, r0
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d001      	beq.n	800d320 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 800d31c:	2301      	movs	r3, #1
 800d31e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d326:	461a      	mov	r2, r3
 800d328:	2300      	movs	r3, #0
 800d32a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d332:	461a      	mov	r2, r3
 800d334:	2300      	movs	r3, #0
 800d336:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d33e:	461a      	mov	r2, r3
 800d340:	2300      	movs	r3, #0
 800d342:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d344:	2300      	movs	r3, #0
 800d346:	613b      	str	r3, [r7, #16]
 800d348:	e043      	b.n	800d3d2 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d34a:	693b      	ldr	r3, [r7, #16]
 800d34c:	015a      	lsls	r2, r3, #5
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	4413      	add	r3, r2
 800d352:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d35c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d360:	d118      	bne.n	800d394 <USB_DevInit+0x144>
    {
      if (i == 0U)
 800d362:	693b      	ldr	r3, [r7, #16]
 800d364:	2b00      	cmp	r3, #0
 800d366:	d10a      	bne.n	800d37e <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800d368:	693b      	ldr	r3, [r7, #16]
 800d36a:	015a      	lsls	r2, r3, #5
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	4413      	add	r3, r2
 800d370:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d374:	461a      	mov	r2, r3
 800d376:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d37a:	6013      	str	r3, [r2, #0]
 800d37c:	e013      	b.n	800d3a6 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800d37e:	693b      	ldr	r3, [r7, #16]
 800d380:	015a      	lsls	r2, r3, #5
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	4413      	add	r3, r2
 800d386:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d38a:	461a      	mov	r2, r3
 800d38c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800d390:	6013      	str	r3, [r2, #0]
 800d392:	e008      	b.n	800d3a6 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800d394:	693b      	ldr	r3, [r7, #16]
 800d396:	015a      	lsls	r2, r3, #5
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	4413      	add	r3, r2
 800d39c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d3a0:	461a      	mov	r2, r3
 800d3a2:	2300      	movs	r3, #0
 800d3a4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800d3a6:	693b      	ldr	r3, [r7, #16]
 800d3a8:	015a      	lsls	r2, r3, #5
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	4413      	add	r3, r2
 800d3ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d3b2:	461a      	mov	r2, r3
 800d3b4:	2300      	movs	r3, #0
 800d3b6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800d3b8:	693b      	ldr	r3, [r7, #16]
 800d3ba:	015a      	lsls	r2, r3, #5
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	4413      	add	r3, r2
 800d3c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d3c4:	461a      	mov	r2, r3
 800d3c6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800d3ca:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d3cc:	693b      	ldr	r3, [r7, #16]
 800d3ce:	3301      	adds	r3, #1
 800d3d0:	613b      	str	r3, [r7, #16]
 800d3d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3d4:	693a      	ldr	r2, [r7, #16]
 800d3d6:	429a      	cmp	r2, r3
 800d3d8:	d3b7      	bcc.n	800d34a <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d3da:	2300      	movs	r3, #0
 800d3dc:	613b      	str	r3, [r7, #16]
 800d3de:	e043      	b.n	800d468 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d3e0:	693b      	ldr	r3, [r7, #16]
 800d3e2:	015a      	lsls	r2, r3, #5
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	4413      	add	r3, r2
 800d3e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d3f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d3f6:	d118      	bne.n	800d42a <USB_DevInit+0x1da>
    {
      if (i == 0U)
 800d3f8:	693b      	ldr	r3, [r7, #16]
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d10a      	bne.n	800d414 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800d3fe:	693b      	ldr	r3, [r7, #16]
 800d400:	015a      	lsls	r2, r3, #5
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	4413      	add	r3, r2
 800d406:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d40a:	461a      	mov	r2, r3
 800d40c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d410:	6013      	str	r3, [r2, #0]
 800d412:	e013      	b.n	800d43c <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800d414:	693b      	ldr	r3, [r7, #16]
 800d416:	015a      	lsls	r2, r3, #5
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	4413      	add	r3, r2
 800d41c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d420:	461a      	mov	r2, r3
 800d422:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800d426:	6013      	str	r3, [r2, #0]
 800d428:	e008      	b.n	800d43c <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800d42a:	693b      	ldr	r3, [r7, #16]
 800d42c:	015a      	lsls	r2, r3, #5
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	4413      	add	r3, r2
 800d432:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d436:	461a      	mov	r2, r3
 800d438:	2300      	movs	r3, #0
 800d43a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800d43c:	693b      	ldr	r3, [r7, #16]
 800d43e:	015a      	lsls	r2, r3, #5
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	4413      	add	r3, r2
 800d444:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d448:	461a      	mov	r2, r3
 800d44a:	2300      	movs	r3, #0
 800d44c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800d44e:	693b      	ldr	r3, [r7, #16]
 800d450:	015a      	lsls	r2, r3, #5
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	4413      	add	r3, r2
 800d456:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d45a:	461a      	mov	r2, r3
 800d45c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800d460:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d462:	693b      	ldr	r3, [r7, #16]
 800d464:	3301      	adds	r3, #1
 800d466:	613b      	str	r3, [r7, #16]
 800d468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d46a:	693a      	ldr	r2, [r7, #16]
 800d46c:	429a      	cmp	r2, r3
 800d46e:	d3b7      	bcc.n	800d3e0 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d476:	691b      	ldr	r3, [r3, #16]
 800d478:	68fa      	ldr	r2, [r7, #12]
 800d47a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d47e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d482:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	2200      	movs	r2, #0
 800d488:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800d490:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	699b      	ldr	r3, [r3, #24]
 800d496:	f043 0210 	orr.w	r2, r3, #16
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	699a      	ldr	r2, [r3, #24]
 800d4a2:	4b10      	ldr	r3, [pc, #64]	; (800d4e4 <USB_DevInit+0x294>)
 800d4a4:	4313      	orrs	r3, r2
 800d4a6:	687a      	ldr	r2, [r7, #4]
 800d4a8:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800d4aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d005      	beq.n	800d4bc <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	699b      	ldr	r3, [r3, #24]
 800d4b4:	f043 0208 	orr.w	r2, r3, #8
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800d4bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d4be:	2b01      	cmp	r3, #1
 800d4c0:	d107      	bne.n	800d4d2 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	699b      	ldr	r3, [r3, #24]
 800d4c6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d4ca:	f043 0304 	orr.w	r3, r3, #4
 800d4ce:	687a      	ldr	r2, [r7, #4]
 800d4d0:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800d4d2:	7dfb      	ldrb	r3, [r7, #23]
}
 800d4d4:	4618      	mov	r0, r3
 800d4d6:	3718      	adds	r7, #24
 800d4d8:	46bd      	mov	sp, r7
 800d4da:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d4de:	b004      	add	sp, #16
 800d4e0:	4770      	bx	lr
 800d4e2:	bf00      	nop
 800d4e4:	803c3800 	.word	0x803c3800

0800d4e8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800d4e8:	b480      	push	{r7}
 800d4ea:	b085      	sub	sp, #20
 800d4ec:	af00      	add	r7, sp, #0
 800d4ee:	6078      	str	r0, [r7, #4]
 800d4f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800d4f2:	2300      	movs	r3, #0
 800d4f4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	3301      	adds	r3, #1
 800d4fa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	4a13      	ldr	r2, [pc, #76]	; (800d54c <USB_FlushTxFifo+0x64>)
 800d500:	4293      	cmp	r3, r2
 800d502:	d901      	bls.n	800d508 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800d504:	2303      	movs	r3, #3
 800d506:	e01b      	b.n	800d540 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	691b      	ldr	r3, [r3, #16]
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	daf2      	bge.n	800d4f6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800d510:	2300      	movs	r3, #0
 800d512:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800d514:	683b      	ldr	r3, [r7, #0]
 800d516:	019b      	lsls	r3, r3, #6
 800d518:	f043 0220 	orr.w	r2, r3, #32
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	3301      	adds	r3, #1
 800d524:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	4a08      	ldr	r2, [pc, #32]	; (800d54c <USB_FlushTxFifo+0x64>)
 800d52a:	4293      	cmp	r3, r2
 800d52c:	d901      	bls.n	800d532 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800d52e:	2303      	movs	r3, #3
 800d530:	e006      	b.n	800d540 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	691b      	ldr	r3, [r3, #16]
 800d536:	f003 0320 	and.w	r3, r3, #32
 800d53a:	2b20      	cmp	r3, #32
 800d53c:	d0f0      	beq.n	800d520 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800d53e:	2300      	movs	r3, #0
}
 800d540:	4618      	mov	r0, r3
 800d542:	3714      	adds	r7, #20
 800d544:	46bd      	mov	sp, r7
 800d546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d54a:	4770      	bx	lr
 800d54c:	00030d40 	.word	0x00030d40

0800d550 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800d550:	b480      	push	{r7}
 800d552:	b085      	sub	sp, #20
 800d554:	af00      	add	r7, sp, #0
 800d556:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d558:	2300      	movs	r3, #0
 800d55a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	3301      	adds	r3, #1
 800d560:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	4a11      	ldr	r2, [pc, #68]	; (800d5ac <USB_FlushRxFifo+0x5c>)
 800d566:	4293      	cmp	r3, r2
 800d568:	d901      	bls.n	800d56e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800d56a:	2303      	movs	r3, #3
 800d56c:	e018      	b.n	800d5a0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	691b      	ldr	r3, [r3, #16]
 800d572:	2b00      	cmp	r3, #0
 800d574:	daf2      	bge.n	800d55c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800d576:	2300      	movs	r3, #0
 800d578:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	2210      	movs	r2, #16
 800d57e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	3301      	adds	r3, #1
 800d584:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	4a08      	ldr	r2, [pc, #32]	; (800d5ac <USB_FlushRxFifo+0x5c>)
 800d58a:	4293      	cmp	r3, r2
 800d58c:	d901      	bls.n	800d592 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800d58e:	2303      	movs	r3, #3
 800d590:	e006      	b.n	800d5a0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	691b      	ldr	r3, [r3, #16]
 800d596:	f003 0310 	and.w	r3, r3, #16
 800d59a:	2b10      	cmp	r3, #16
 800d59c:	d0f0      	beq.n	800d580 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800d59e:	2300      	movs	r3, #0
}
 800d5a0:	4618      	mov	r0, r3
 800d5a2:	3714      	adds	r7, #20
 800d5a4:	46bd      	mov	sp, r7
 800d5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5aa:	4770      	bx	lr
 800d5ac:	00030d40 	.word	0x00030d40

0800d5b0 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800d5b0:	b480      	push	{r7}
 800d5b2:	b085      	sub	sp, #20
 800d5b4:	af00      	add	r7, sp, #0
 800d5b6:	6078      	str	r0, [r7, #4]
 800d5b8:	460b      	mov	r3, r1
 800d5ba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d5c6:	681a      	ldr	r2, [r3, #0]
 800d5c8:	78fb      	ldrb	r3, [r7, #3]
 800d5ca:	68f9      	ldr	r1, [r7, #12]
 800d5cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d5d0:	4313      	orrs	r3, r2
 800d5d2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800d5d4:	2300      	movs	r3, #0
}
 800d5d6:	4618      	mov	r0, r3
 800d5d8:	3714      	adds	r7, #20
 800d5da:	46bd      	mov	sp, r7
 800d5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5e0:	4770      	bx	lr

0800d5e2 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800d5e2:	b480      	push	{r7}
 800d5e4:	b087      	sub	sp, #28
 800d5e6:	af00      	add	r7, sp, #0
 800d5e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800d5ee:	693b      	ldr	r3, [r7, #16]
 800d5f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d5f4:	689b      	ldr	r3, [r3, #8]
 800d5f6:	f003 0306 	and.w	r3, r3, #6
 800d5fa:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	2b02      	cmp	r3, #2
 800d600:	d002      	beq.n	800d608 <USB_GetDevSpeed+0x26>
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	2b06      	cmp	r3, #6
 800d606:	d102      	bne.n	800d60e <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800d608:	2302      	movs	r3, #2
 800d60a:	75fb      	strb	r3, [r7, #23]
 800d60c:	e001      	b.n	800d612 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 800d60e:	230f      	movs	r3, #15
 800d610:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800d612:	7dfb      	ldrb	r3, [r7, #23]
}
 800d614:	4618      	mov	r0, r3
 800d616:	371c      	adds	r7, #28
 800d618:	46bd      	mov	sp, r7
 800d61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d61e:	4770      	bx	lr

0800d620 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d620:	b480      	push	{r7}
 800d622:	b085      	sub	sp, #20
 800d624:	af00      	add	r7, sp, #0
 800d626:	6078      	str	r0, [r7, #4]
 800d628:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d62e:	683b      	ldr	r3, [r7, #0]
 800d630:	781b      	ldrb	r3, [r3, #0]
 800d632:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d634:	683b      	ldr	r3, [r7, #0]
 800d636:	785b      	ldrb	r3, [r3, #1]
 800d638:	2b01      	cmp	r3, #1
 800d63a:	d13a      	bne.n	800d6b2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d642:	69da      	ldr	r2, [r3, #28]
 800d644:	683b      	ldr	r3, [r7, #0]
 800d646:	781b      	ldrb	r3, [r3, #0]
 800d648:	f003 030f 	and.w	r3, r3, #15
 800d64c:	2101      	movs	r1, #1
 800d64e:	fa01 f303 	lsl.w	r3, r1, r3
 800d652:	b29b      	uxth	r3, r3
 800d654:	68f9      	ldr	r1, [r7, #12]
 800d656:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d65a:	4313      	orrs	r3, r2
 800d65c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800d65e:	68bb      	ldr	r3, [r7, #8]
 800d660:	015a      	lsls	r2, r3, #5
 800d662:	68fb      	ldr	r3, [r7, #12]
 800d664:	4413      	add	r3, r2
 800d666:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d670:	2b00      	cmp	r3, #0
 800d672:	d155      	bne.n	800d720 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d674:	68bb      	ldr	r3, [r7, #8]
 800d676:	015a      	lsls	r2, r3, #5
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	4413      	add	r3, r2
 800d67c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d680:	681a      	ldr	r2, [r3, #0]
 800d682:	683b      	ldr	r3, [r7, #0]
 800d684:	68db      	ldr	r3, [r3, #12]
 800d686:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800d68a:	683b      	ldr	r3, [r7, #0]
 800d68c:	791b      	ldrb	r3, [r3, #4]
 800d68e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d690:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800d692:	68bb      	ldr	r3, [r7, #8]
 800d694:	059b      	lsls	r3, r3, #22
 800d696:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d698:	4313      	orrs	r3, r2
 800d69a:	68ba      	ldr	r2, [r7, #8]
 800d69c:	0151      	lsls	r1, r2, #5
 800d69e:	68fa      	ldr	r2, [r7, #12]
 800d6a0:	440a      	add	r2, r1
 800d6a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d6a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d6aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d6ae:	6013      	str	r3, [r2, #0]
 800d6b0:	e036      	b.n	800d720 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d6b8:	69da      	ldr	r2, [r3, #28]
 800d6ba:	683b      	ldr	r3, [r7, #0]
 800d6bc:	781b      	ldrb	r3, [r3, #0]
 800d6be:	f003 030f 	and.w	r3, r3, #15
 800d6c2:	2101      	movs	r1, #1
 800d6c4:	fa01 f303 	lsl.w	r3, r1, r3
 800d6c8:	041b      	lsls	r3, r3, #16
 800d6ca:	68f9      	ldr	r1, [r7, #12]
 800d6cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d6d0:	4313      	orrs	r3, r2
 800d6d2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800d6d4:	68bb      	ldr	r3, [r7, #8]
 800d6d6:	015a      	lsls	r2, r3, #5
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	4413      	add	r3, r2
 800d6dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d11a      	bne.n	800d720 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800d6ea:	68bb      	ldr	r3, [r7, #8]
 800d6ec:	015a      	lsls	r2, r3, #5
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	4413      	add	r3, r2
 800d6f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d6f6:	681a      	ldr	r2, [r3, #0]
 800d6f8:	683b      	ldr	r3, [r7, #0]
 800d6fa:	68db      	ldr	r3, [r3, #12]
 800d6fc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800d700:	683b      	ldr	r3, [r7, #0]
 800d702:	791b      	ldrb	r3, [r3, #4]
 800d704:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800d706:	430b      	orrs	r3, r1
 800d708:	4313      	orrs	r3, r2
 800d70a:	68ba      	ldr	r2, [r7, #8]
 800d70c:	0151      	lsls	r1, r2, #5
 800d70e:	68fa      	ldr	r2, [r7, #12]
 800d710:	440a      	add	r2, r1
 800d712:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d716:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d71a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d71e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800d720:	2300      	movs	r3, #0
}
 800d722:	4618      	mov	r0, r3
 800d724:	3714      	adds	r7, #20
 800d726:	46bd      	mov	sp, r7
 800d728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d72c:	4770      	bx	lr
	...

0800d730 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d730:	b480      	push	{r7}
 800d732:	b085      	sub	sp, #20
 800d734:	af00      	add	r7, sp, #0
 800d736:	6078      	str	r0, [r7, #4]
 800d738:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d73e:	683b      	ldr	r3, [r7, #0]
 800d740:	781b      	ldrb	r3, [r3, #0]
 800d742:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800d744:	683b      	ldr	r3, [r7, #0]
 800d746:	785b      	ldrb	r3, [r3, #1]
 800d748:	2b01      	cmp	r3, #1
 800d74a:	d161      	bne.n	800d810 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d74c:	68bb      	ldr	r3, [r7, #8]
 800d74e:	015a      	lsls	r2, r3, #5
 800d750:	68fb      	ldr	r3, [r7, #12]
 800d752:	4413      	add	r3, r2
 800d754:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d75e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d762:	d11f      	bne.n	800d7a4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800d764:	68bb      	ldr	r3, [r7, #8]
 800d766:	015a      	lsls	r2, r3, #5
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	4413      	add	r3, r2
 800d76c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	68ba      	ldr	r2, [r7, #8]
 800d774:	0151      	lsls	r1, r2, #5
 800d776:	68fa      	ldr	r2, [r7, #12]
 800d778:	440a      	add	r2, r1
 800d77a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d77e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800d782:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800d784:	68bb      	ldr	r3, [r7, #8]
 800d786:	015a      	lsls	r2, r3, #5
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	4413      	add	r3, r2
 800d78c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	68ba      	ldr	r2, [r7, #8]
 800d794:	0151      	lsls	r1, r2, #5
 800d796:	68fa      	ldr	r2, [r7, #12]
 800d798:	440a      	add	r2, r1
 800d79a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d79e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d7a2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d7aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d7ac:	683b      	ldr	r3, [r7, #0]
 800d7ae:	781b      	ldrb	r3, [r3, #0]
 800d7b0:	f003 030f 	and.w	r3, r3, #15
 800d7b4:	2101      	movs	r1, #1
 800d7b6:	fa01 f303 	lsl.w	r3, r1, r3
 800d7ba:	b29b      	uxth	r3, r3
 800d7bc:	43db      	mvns	r3, r3
 800d7be:	68f9      	ldr	r1, [r7, #12]
 800d7c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d7c4:	4013      	ands	r3, r2
 800d7c6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d7ce:	69da      	ldr	r2, [r3, #28]
 800d7d0:	683b      	ldr	r3, [r7, #0]
 800d7d2:	781b      	ldrb	r3, [r3, #0]
 800d7d4:	f003 030f 	and.w	r3, r3, #15
 800d7d8:	2101      	movs	r1, #1
 800d7da:	fa01 f303 	lsl.w	r3, r1, r3
 800d7de:	b29b      	uxth	r3, r3
 800d7e0:	43db      	mvns	r3, r3
 800d7e2:	68f9      	ldr	r1, [r7, #12]
 800d7e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d7e8:	4013      	ands	r3, r2
 800d7ea:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800d7ec:	68bb      	ldr	r3, [r7, #8]
 800d7ee:	015a      	lsls	r2, r3, #5
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	4413      	add	r3, r2
 800d7f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d7f8:	681a      	ldr	r2, [r3, #0]
 800d7fa:	68bb      	ldr	r3, [r7, #8]
 800d7fc:	0159      	lsls	r1, r3, #5
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	440b      	add	r3, r1
 800d802:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d806:	4619      	mov	r1, r3
 800d808:	4b35      	ldr	r3, [pc, #212]	; (800d8e0 <USB_DeactivateEndpoint+0x1b0>)
 800d80a:	4013      	ands	r3, r2
 800d80c:	600b      	str	r3, [r1, #0]
 800d80e:	e060      	b.n	800d8d2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d810:	68bb      	ldr	r3, [r7, #8]
 800d812:	015a      	lsls	r2, r3, #5
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	4413      	add	r3, r2
 800d818:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d822:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d826:	d11f      	bne.n	800d868 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800d828:	68bb      	ldr	r3, [r7, #8]
 800d82a:	015a      	lsls	r2, r3, #5
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	4413      	add	r3, r2
 800d830:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	68ba      	ldr	r2, [r7, #8]
 800d838:	0151      	lsls	r1, r2, #5
 800d83a:	68fa      	ldr	r2, [r7, #12]
 800d83c:	440a      	add	r2, r1
 800d83e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d842:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800d846:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800d848:	68bb      	ldr	r3, [r7, #8]
 800d84a:	015a      	lsls	r2, r3, #5
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	4413      	add	r3, r2
 800d850:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	68ba      	ldr	r2, [r7, #8]
 800d858:	0151      	lsls	r1, r2, #5
 800d85a:	68fa      	ldr	r2, [r7, #12]
 800d85c:	440a      	add	r2, r1
 800d85e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d862:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d866:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d86e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d870:	683b      	ldr	r3, [r7, #0]
 800d872:	781b      	ldrb	r3, [r3, #0]
 800d874:	f003 030f 	and.w	r3, r3, #15
 800d878:	2101      	movs	r1, #1
 800d87a:	fa01 f303 	lsl.w	r3, r1, r3
 800d87e:	041b      	lsls	r3, r3, #16
 800d880:	43db      	mvns	r3, r3
 800d882:	68f9      	ldr	r1, [r7, #12]
 800d884:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d888:	4013      	ands	r3, r2
 800d88a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d892:	69da      	ldr	r2, [r3, #28]
 800d894:	683b      	ldr	r3, [r7, #0]
 800d896:	781b      	ldrb	r3, [r3, #0]
 800d898:	f003 030f 	and.w	r3, r3, #15
 800d89c:	2101      	movs	r1, #1
 800d89e:	fa01 f303 	lsl.w	r3, r1, r3
 800d8a2:	041b      	lsls	r3, r3, #16
 800d8a4:	43db      	mvns	r3, r3
 800d8a6:	68f9      	ldr	r1, [r7, #12]
 800d8a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d8ac:	4013      	ands	r3, r2
 800d8ae:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800d8b0:	68bb      	ldr	r3, [r7, #8]
 800d8b2:	015a      	lsls	r2, r3, #5
 800d8b4:	68fb      	ldr	r3, [r7, #12]
 800d8b6:	4413      	add	r3, r2
 800d8b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d8bc:	681a      	ldr	r2, [r3, #0]
 800d8be:	68bb      	ldr	r3, [r7, #8]
 800d8c0:	0159      	lsls	r1, r3, #5
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	440b      	add	r3, r1
 800d8c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d8ca:	4619      	mov	r1, r3
 800d8cc:	4b05      	ldr	r3, [pc, #20]	; (800d8e4 <USB_DeactivateEndpoint+0x1b4>)
 800d8ce:	4013      	ands	r3, r2
 800d8d0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800d8d2:	2300      	movs	r3, #0
}
 800d8d4:	4618      	mov	r0, r3
 800d8d6:	3714      	adds	r7, #20
 800d8d8:	46bd      	mov	sp, r7
 800d8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8de:	4770      	bx	lr
 800d8e0:	ec337800 	.word	0xec337800
 800d8e4:	eff37800 	.word	0xeff37800

0800d8e8 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d8e8:	b580      	push	{r7, lr}
 800d8ea:	b086      	sub	sp, #24
 800d8ec:	af00      	add	r7, sp, #0
 800d8ee:	6078      	str	r0, [r7, #4]
 800d8f0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800d8f6:	683b      	ldr	r3, [r7, #0]
 800d8f8:	781b      	ldrb	r3, [r3, #0]
 800d8fa:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d8fc:	683b      	ldr	r3, [r7, #0]
 800d8fe:	785b      	ldrb	r3, [r3, #1]
 800d900:	2b01      	cmp	r3, #1
 800d902:	f040 810a 	bne.w	800db1a <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800d906:	683b      	ldr	r3, [r7, #0]
 800d908:	699b      	ldr	r3, [r3, #24]
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d132      	bne.n	800d974 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d90e:	693b      	ldr	r3, [r7, #16]
 800d910:	015a      	lsls	r2, r3, #5
 800d912:	697b      	ldr	r3, [r7, #20]
 800d914:	4413      	add	r3, r2
 800d916:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d91a:	691b      	ldr	r3, [r3, #16]
 800d91c:	693a      	ldr	r2, [r7, #16]
 800d91e:	0151      	lsls	r1, r2, #5
 800d920:	697a      	ldr	r2, [r7, #20]
 800d922:	440a      	add	r2, r1
 800d924:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d928:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d92c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d930:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d932:	693b      	ldr	r3, [r7, #16]
 800d934:	015a      	lsls	r2, r3, #5
 800d936:	697b      	ldr	r3, [r7, #20]
 800d938:	4413      	add	r3, r2
 800d93a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d93e:	691b      	ldr	r3, [r3, #16]
 800d940:	693a      	ldr	r2, [r7, #16]
 800d942:	0151      	lsls	r1, r2, #5
 800d944:	697a      	ldr	r2, [r7, #20]
 800d946:	440a      	add	r2, r1
 800d948:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d94c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d950:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d952:	693b      	ldr	r3, [r7, #16]
 800d954:	015a      	lsls	r2, r3, #5
 800d956:	697b      	ldr	r3, [r7, #20]
 800d958:	4413      	add	r3, r2
 800d95a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d95e:	691b      	ldr	r3, [r3, #16]
 800d960:	693a      	ldr	r2, [r7, #16]
 800d962:	0151      	lsls	r1, r2, #5
 800d964:	697a      	ldr	r2, [r7, #20]
 800d966:	440a      	add	r2, r1
 800d968:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d96c:	0cdb      	lsrs	r3, r3, #19
 800d96e:	04db      	lsls	r3, r3, #19
 800d970:	6113      	str	r3, [r2, #16]
 800d972:	e074      	b.n	800da5e <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d974:	693b      	ldr	r3, [r7, #16]
 800d976:	015a      	lsls	r2, r3, #5
 800d978:	697b      	ldr	r3, [r7, #20]
 800d97a:	4413      	add	r3, r2
 800d97c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d980:	691b      	ldr	r3, [r3, #16]
 800d982:	693a      	ldr	r2, [r7, #16]
 800d984:	0151      	lsls	r1, r2, #5
 800d986:	697a      	ldr	r2, [r7, #20]
 800d988:	440a      	add	r2, r1
 800d98a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d98e:	0cdb      	lsrs	r3, r3, #19
 800d990:	04db      	lsls	r3, r3, #19
 800d992:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d994:	693b      	ldr	r3, [r7, #16]
 800d996:	015a      	lsls	r2, r3, #5
 800d998:	697b      	ldr	r3, [r7, #20]
 800d99a:	4413      	add	r3, r2
 800d99c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d9a0:	691b      	ldr	r3, [r3, #16]
 800d9a2:	693a      	ldr	r2, [r7, #16]
 800d9a4:	0151      	lsls	r1, r2, #5
 800d9a6:	697a      	ldr	r2, [r7, #20]
 800d9a8:	440a      	add	r2, r1
 800d9aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d9ae:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d9b2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d9b6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800d9b8:	693b      	ldr	r3, [r7, #16]
 800d9ba:	015a      	lsls	r2, r3, #5
 800d9bc:	697b      	ldr	r3, [r7, #20]
 800d9be:	4413      	add	r3, r2
 800d9c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d9c4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800d9c6:	683b      	ldr	r3, [r7, #0]
 800d9c8:	6999      	ldr	r1, [r3, #24]
 800d9ca:	683b      	ldr	r3, [r7, #0]
 800d9cc:	68db      	ldr	r3, [r3, #12]
 800d9ce:	440b      	add	r3, r1
 800d9d0:	1e59      	subs	r1, r3, #1
 800d9d2:	683b      	ldr	r3, [r7, #0]
 800d9d4:	68db      	ldr	r3, [r3, #12]
 800d9d6:	fbb1 f3f3 	udiv	r3, r1, r3
 800d9da:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800d9dc:	4b9e      	ldr	r3, [pc, #632]	; (800dc58 <USB_EPStartXfer+0x370>)
 800d9de:	400b      	ands	r3, r1
 800d9e0:	6939      	ldr	r1, [r7, #16]
 800d9e2:	0148      	lsls	r0, r1, #5
 800d9e4:	6979      	ldr	r1, [r7, #20]
 800d9e6:	4401      	add	r1, r0
 800d9e8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d9ec:	4313      	orrs	r3, r2
 800d9ee:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800d9f0:	693b      	ldr	r3, [r7, #16]
 800d9f2:	015a      	lsls	r2, r3, #5
 800d9f4:	697b      	ldr	r3, [r7, #20]
 800d9f6:	4413      	add	r3, r2
 800d9f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d9fc:	691a      	ldr	r2, [r3, #16]
 800d9fe:	683b      	ldr	r3, [r7, #0]
 800da00:	699b      	ldr	r3, [r3, #24]
 800da02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800da06:	6939      	ldr	r1, [r7, #16]
 800da08:	0148      	lsls	r0, r1, #5
 800da0a:	6979      	ldr	r1, [r7, #20]
 800da0c:	4401      	add	r1, r0
 800da0e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800da12:	4313      	orrs	r3, r2
 800da14:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800da16:	683b      	ldr	r3, [r7, #0]
 800da18:	791b      	ldrb	r3, [r3, #4]
 800da1a:	2b01      	cmp	r3, #1
 800da1c:	d11f      	bne.n	800da5e <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800da1e:	693b      	ldr	r3, [r7, #16]
 800da20:	015a      	lsls	r2, r3, #5
 800da22:	697b      	ldr	r3, [r7, #20]
 800da24:	4413      	add	r3, r2
 800da26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800da2a:	691b      	ldr	r3, [r3, #16]
 800da2c:	693a      	ldr	r2, [r7, #16]
 800da2e:	0151      	lsls	r1, r2, #5
 800da30:	697a      	ldr	r2, [r7, #20]
 800da32:	440a      	add	r2, r1
 800da34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800da38:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800da3c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800da3e:	693b      	ldr	r3, [r7, #16]
 800da40:	015a      	lsls	r2, r3, #5
 800da42:	697b      	ldr	r3, [r7, #20]
 800da44:	4413      	add	r3, r2
 800da46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800da4a:	691b      	ldr	r3, [r3, #16]
 800da4c:	693a      	ldr	r2, [r7, #16]
 800da4e:	0151      	lsls	r1, r2, #5
 800da50:	697a      	ldr	r2, [r7, #20]
 800da52:	440a      	add	r2, r1
 800da54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800da58:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800da5c:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800da5e:	693b      	ldr	r3, [r7, #16]
 800da60:	015a      	lsls	r2, r3, #5
 800da62:	697b      	ldr	r3, [r7, #20]
 800da64:	4413      	add	r3, r2
 800da66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	693a      	ldr	r2, [r7, #16]
 800da6e:	0151      	lsls	r1, r2, #5
 800da70:	697a      	ldr	r2, [r7, #20]
 800da72:	440a      	add	r2, r1
 800da74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800da78:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800da7c:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800da7e:	683b      	ldr	r3, [r7, #0]
 800da80:	791b      	ldrb	r3, [r3, #4]
 800da82:	2b01      	cmp	r3, #1
 800da84:	d015      	beq.n	800dab2 <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800da86:	683b      	ldr	r3, [r7, #0]
 800da88:	699b      	ldr	r3, [r3, #24]
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	f000 8106 	beq.w	800dc9c <USB_EPStartXfer+0x3b4>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800da90:	697b      	ldr	r3, [r7, #20]
 800da92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800da96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800da98:	683b      	ldr	r3, [r7, #0]
 800da9a:	781b      	ldrb	r3, [r3, #0]
 800da9c:	f003 030f 	and.w	r3, r3, #15
 800daa0:	2101      	movs	r1, #1
 800daa2:	fa01 f303 	lsl.w	r3, r1, r3
 800daa6:	6979      	ldr	r1, [r7, #20]
 800daa8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800daac:	4313      	orrs	r3, r2
 800daae:	634b      	str	r3, [r1, #52]	; 0x34
 800dab0:	e0f4      	b.n	800dc9c <USB_EPStartXfer+0x3b4>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800dab2:	697b      	ldr	r3, [r7, #20]
 800dab4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dab8:	689b      	ldr	r3, [r3, #8]
 800daba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d110      	bne.n	800dae4 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800dac2:	693b      	ldr	r3, [r7, #16]
 800dac4:	015a      	lsls	r2, r3, #5
 800dac6:	697b      	ldr	r3, [r7, #20]
 800dac8:	4413      	add	r3, r2
 800daca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	693a      	ldr	r2, [r7, #16]
 800dad2:	0151      	lsls	r1, r2, #5
 800dad4:	697a      	ldr	r2, [r7, #20]
 800dad6:	440a      	add	r2, r1
 800dad8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dadc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800dae0:	6013      	str	r3, [r2, #0]
 800dae2:	e00f      	b.n	800db04 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800dae4:	693b      	ldr	r3, [r7, #16]
 800dae6:	015a      	lsls	r2, r3, #5
 800dae8:	697b      	ldr	r3, [r7, #20]
 800daea:	4413      	add	r3, r2
 800daec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800daf0:	681b      	ldr	r3, [r3, #0]
 800daf2:	693a      	ldr	r2, [r7, #16]
 800daf4:	0151      	lsls	r1, r2, #5
 800daf6:	697a      	ldr	r2, [r7, #20]
 800daf8:	440a      	add	r2, r1
 800dafa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dafe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800db02:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 800db04:	683b      	ldr	r3, [r7, #0]
 800db06:	6919      	ldr	r1, [r3, #16]
 800db08:	683b      	ldr	r3, [r7, #0]
 800db0a:	781a      	ldrb	r2, [r3, #0]
 800db0c:	683b      	ldr	r3, [r7, #0]
 800db0e:	699b      	ldr	r3, [r3, #24]
 800db10:	b29b      	uxth	r3, r3
 800db12:	6878      	ldr	r0, [r7, #4]
 800db14:	f000 fa94 	bl	800e040 <USB_WritePacket>
 800db18:	e0c0      	b.n	800dc9c <USB_EPStartXfer+0x3b4>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800db1a:	693b      	ldr	r3, [r7, #16]
 800db1c:	015a      	lsls	r2, r3, #5
 800db1e:	697b      	ldr	r3, [r7, #20]
 800db20:	4413      	add	r3, r2
 800db22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800db26:	691b      	ldr	r3, [r3, #16]
 800db28:	693a      	ldr	r2, [r7, #16]
 800db2a:	0151      	lsls	r1, r2, #5
 800db2c:	697a      	ldr	r2, [r7, #20]
 800db2e:	440a      	add	r2, r1
 800db30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800db34:	0cdb      	lsrs	r3, r3, #19
 800db36:	04db      	lsls	r3, r3, #19
 800db38:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800db3a:	693b      	ldr	r3, [r7, #16]
 800db3c:	015a      	lsls	r2, r3, #5
 800db3e:	697b      	ldr	r3, [r7, #20]
 800db40:	4413      	add	r3, r2
 800db42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800db46:	691b      	ldr	r3, [r3, #16]
 800db48:	693a      	ldr	r2, [r7, #16]
 800db4a:	0151      	lsls	r1, r2, #5
 800db4c:	697a      	ldr	r2, [r7, #20]
 800db4e:	440a      	add	r2, r1
 800db50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800db54:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800db58:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800db5c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800db5e:	683b      	ldr	r3, [r7, #0]
 800db60:	699b      	ldr	r3, [r3, #24]
 800db62:	2b00      	cmp	r3, #0
 800db64:	d123      	bne.n	800dbae <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800db66:	693b      	ldr	r3, [r7, #16]
 800db68:	015a      	lsls	r2, r3, #5
 800db6a:	697b      	ldr	r3, [r7, #20]
 800db6c:	4413      	add	r3, r2
 800db6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800db72:	691a      	ldr	r2, [r3, #16]
 800db74:	683b      	ldr	r3, [r7, #0]
 800db76:	68db      	ldr	r3, [r3, #12]
 800db78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800db7c:	6939      	ldr	r1, [r7, #16]
 800db7e:	0148      	lsls	r0, r1, #5
 800db80:	6979      	ldr	r1, [r7, #20]
 800db82:	4401      	add	r1, r0
 800db84:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800db88:	4313      	orrs	r3, r2
 800db8a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800db8c:	693b      	ldr	r3, [r7, #16]
 800db8e:	015a      	lsls	r2, r3, #5
 800db90:	697b      	ldr	r3, [r7, #20]
 800db92:	4413      	add	r3, r2
 800db94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800db98:	691b      	ldr	r3, [r3, #16]
 800db9a:	693a      	ldr	r2, [r7, #16]
 800db9c:	0151      	lsls	r1, r2, #5
 800db9e:	697a      	ldr	r2, [r7, #20]
 800dba0:	440a      	add	r2, r1
 800dba2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dba6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800dbaa:	6113      	str	r3, [r2, #16]
 800dbac:	e037      	b.n	800dc1e <USB_EPStartXfer+0x336>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800dbae:	683b      	ldr	r3, [r7, #0]
 800dbb0:	699a      	ldr	r2, [r3, #24]
 800dbb2:	683b      	ldr	r3, [r7, #0]
 800dbb4:	68db      	ldr	r3, [r3, #12]
 800dbb6:	4413      	add	r3, r2
 800dbb8:	1e5a      	subs	r2, r3, #1
 800dbba:	683b      	ldr	r3, [r7, #0]
 800dbbc:	68db      	ldr	r3, [r3, #12]
 800dbbe:	fbb2 f3f3 	udiv	r3, r2, r3
 800dbc2:	81fb      	strh	r3, [r7, #14]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800dbc4:	683b      	ldr	r3, [r7, #0]
 800dbc6:	68db      	ldr	r3, [r3, #12]
 800dbc8:	89fa      	ldrh	r2, [r7, #14]
 800dbca:	fb03 f202 	mul.w	r2, r3, r2
 800dbce:	683b      	ldr	r3, [r7, #0]
 800dbd0:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800dbd2:	693b      	ldr	r3, [r7, #16]
 800dbd4:	015a      	lsls	r2, r3, #5
 800dbd6:	697b      	ldr	r3, [r7, #20]
 800dbd8:	4413      	add	r3, r2
 800dbda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dbde:	691a      	ldr	r2, [r3, #16]
 800dbe0:	89fb      	ldrh	r3, [r7, #14]
 800dbe2:	04d9      	lsls	r1, r3, #19
 800dbe4:	4b1c      	ldr	r3, [pc, #112]	; (800dc58 <USB_EPStartXfer+0x370>)
 800dbe6:	400b      	ands	r3, r1
 800dbe8:	6939      	ldr	r1, [r7, #16]
 800dbea:	0148      	lsls	r0, r1, #5
 800dbec:	6979      	ldr	r1, [r7, #20]
 800dbee:	4401      	add	r1, r0
 800dbf0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800dbf4:	4313      	orrs	r3, r2
 800dbf6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800dbf8:	693b      	ldr	r3, [r7, #16]
 800dbfa:	015a      	lsls	r2, r3, #5
 800dbfc:	697b      	ldr	r3, [r7, #20]
 800dbfe:	4413      	add	r3, r2
 800dc00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dc04:	691a      	ldr	r2, [r3, #16]
 800dc06:	683b      	ldr	r3, [r7, #0]
 800dc08:	69db      	ldr	r3, [r3, #28]
 800dc0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800dc0e:	6939      	ldr	r1, [r7, #16]
 800dc10:	0148      	lsls	r0, r1, #5
 800dc12:	6979      	ldr	r1, [r7, #20]
 800dc14:	4401      	add	r1, r0
 800dc16:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800dc1a:	4313      	orrs	r3, r2
 800dc1c:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 800dc1e:	683b      	ldr	r3, [r7, #0]
 800dc20:	791b      	ldrb	r3, [r3, #4]
 800dc22:	2b01      	cmp	r3, #1
 800dc24:	d12a      	bne.n	800dc7c <USB_EPStartXfer+0x394>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800dc26:	697b      	ldr	r3, [r7, #20]
 800dc28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dc2c:	689b      	ldr	r3, [r3, #8]
 800dc2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d112      	bne.n	800dc5c <USB_EPStartXfer+0x374>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800dc36:	693b      	ldr	r3, [r7, #16]
 800dc38:	015a      	lsls	r2, r3, #5
 800dc3a:	697b      	ldr	r3, [r7, #20]
 800dc3c:	4413      	add	r3, r2
 800dc3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	693a      	ldr	r2, [r7, #16]
 800dc46:	0151      	lsls	r1, r2, #5
 800dc48:	697a      	ldr	r2, [r7, #20]
 800dc4a:	440a      	add	r2, r1
 800dc4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dc50:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800dc54:	6013      	str	r3, [r2, #0]
 800dc56:	e011      	b.n	800dc7c <USB_EPStartXfer+0x394>
 800dc58:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800dc5c:	693b      	ldr	r3, [r7, #16]
 800dc5e:	015a      	lsls	r2, r3, #5
 800dc60:	697b      	ldr	r3, [r7, #20]
 800dc62:	4413      	add	r3, r2
 800dc64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	693a      	ldr	r2, [r7, #16]
 800dc6c:	0151      	lsls	r1, r2, #5
 800dc6e:	697a      	ldr	r2, [r7, #20]
 800dc70:	440a      	add	r2, r1
 800dc72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dc76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dc7a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800dc7c:	693b      	ldr	r3, [r7, #16]
 800dc7e:	015a      	lsls	r2, r3, #5
 800dc80:	697b      	ldr	r3, [r7, #20]
 800dc82:	4413      	add	r3, r2
 800dc84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	693a      	ldr	r2, [r7, #16]
 800dc8c:	0151      	lsls	r1, r2, #5
 800dc8e:	697a      	ldr	r2, [r7, #20]
 800dc90:	440a      	add	r2, r1
 800dc92:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dc96:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800dc9a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800dc9c:	2300      	movs	r3, #0
}
 800dc9e:	4618      	mov	r0, r3
 800dca0:	3718      	adds	r7, #24
 800dca2:	46bd      	mov	sp, r7
 800dca4:	bd80      	pop	{r7, pc}
 800dca6:	bf00      	nop

0800dca8 <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800dca8:	b480      	push	{r7}
 800dcaa:	b085      	sub	sp, #20
 800dcac:	af00      	add	r7, sp, #0
 800dcae:	6078      	str	r0, [r7, #4]
 800dcb0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800dcb6:	683b      	ldr	r3, [r7, #0]
 800dcb8:	781b      	ldrb	r3, [r3, #0]
 800dcba:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800dcbc:	683b      	ldr	r3, [r7, #0]
 800dcbe:	785b      	ldrb	r3, [r3, #1]
 800dcc0:	2b01      	cmp	r3, #1
 800dcc2:	f040 80ab 	bne.w	800de1c <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800dcc6:	683b      	ldr	r3, [r7, #0]
 800dcc8:	699b      	ldr	r3, [r3, #24]
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d132      	bne.n	800dd34 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800dcce:	68bb      	ldr	r3, [r7, #8]
 800dcd0:	015a      	lsls	r2, r3, #5
 800dcd2:	68fb      	ldr	r3, [r7, #12]
 800dcd4:	4413      	add	r3, r2
 800dcd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dcda:	691b      	ldr	r3, [r3, #16]
 800dcdc:	68ba      	ldr	r2, [r7, #8]
 800dcde:	0151      	lsls	r1, r2, #5
 800dce0:	68fa      	ldr	r2, [r7, #12]
 800dce2:	440a      	add	r2, r1
 800dce4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dce8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800dcec:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800dcf0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800dcf2:	68bb      	ldr	r3, [r7, #8]
 800dcf4:	015a      	lsls	r2, r3, #5
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	4413      	add	r3, r2
 800dcfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dcfe:	691b      	ldr	r3, [r3, #16]
 800dd00:	68ba      	ldr	r2, [r7, #8]
 800dd02:	0151      	lsls	r1, r2, #5
 800dd04:	68fa      	ldr	r2, [r7, #12]
 800dd06:	440a      	add	r2, r1
 800dd08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dd0c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800dd10:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800dd12:	68bb      	ldr	r3, [r7, #8]
 800dd14:	015a      	lsls	r2, r3, #5
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	4413      	add	r3, r2
 800dd1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd1e:	691b      	ldr	r3, [r3, #16]
 800dd20:	68ba      	ldr	r2, [r7, #8]
 800dd22:	0151      	lsls	r1, r2, #5
 800dd24:	68fa      	ldr	r2, [r7, #12]
 800dd26:	440a      	add	r2, r1
 800dd28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dd2c:	0cdb      	lsrs	r3, r3, #19
 800dd2e:	04db      	lsls	r3, r3, #19
 800dd30:	6113      	str	r3, [r2, #16]
 800dd32:	e04e      	b.n	800ddd2 <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800dd34:	68bb      	ldr	r3, [r7, #8]
 800dd36:	015a      	lsls	r2, r3, #5
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	4413      	add	r3, r2
 800dd3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd40:	691b      	ldr	r3, [r3, #16]
 800dd42:	68ba      	ldr	r2, [r7, #8]
 800dd44:	0151      	lsls	r1, r2, #5
 800dd46:	68fa      	ldr	r2, [r7, #12]
 800dd48:	440a      	add	r2, r1
 800dd4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dd4e:	0cdb      	lsrs	r3, r3, #19
 800dd50:	04db      	lsls	r3, r3, #19
 800dd52:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800dd54:	68bb      	ldr	r3, [r7, #8]
 800dd56:	015a      	lsls	r2, r3, #5
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	4413      	add	r3, r2
 800dd5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd60:	691b      	ldr	r3, [r3, #16]
 800dd62:	68ba      	ldr	r2, [r7, #8]
 800dd64:	0151      	lsls	r1, r2, #5
 800dd66:	68fa      	ldr	r2, [r7, #12]
 800dd68:	440a      	add	r2, r1
 800dd6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dd6e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800dd72:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800dd76:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800dd78:	683b      	ldr	r3, [r7, #0]
 800dd7a:	699a      	ldr	r2, [r3, #24]
 800dd7c:	683b      	ldr	r3, [r7, #0]
 800dd7e:	68db      	ldr	r3, [r3, #12]
 800dd80:	429a      	cmp	r2, r3
 800dd82:	d903      	bls.n	800dd8c <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 800dd84:	683b      	ldr	r3, [r7, #0]
 800dd86:	68da      	ldr	r2, [r3, #12]
 800dd88:	683b      	ldr	r3, [r7, #0]
 800dd8a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800dd8c:	68bb      	ldr	r3, [r7, #8]
 800dd8e:	015a      	lsls	r2, r3, #5
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	4413      	add	r3, r2
 800dd94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd98:	691b      	ldr	r3, [r3, #16]
 800dd9a:	68ba      	ldr	r2, [r7, #8]
 800dd9c:	0151      	lsls	r1, r2, #5
 800dd9e:	68fa      	ldr	r2, [r7, #12]
 800dda0:	440a      	add	r2, r1
 800dda2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dda6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ddaa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800ddac:	68bb      	ldr	r3, [r7, #8]
 800ddae:	015a      	lsls	r2, r3, #5
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	4413      	add	r3, r2
 800ddb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ddb8:	691a      	ldr	r2, [r3, #16]
 800ddba:	683b      	ldr	r3, [r7, #0]
 800ddbc:	699b      	ldr	r3, [r3, #24]
 800ddbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ddc2:	68b9      	ldr	r1, [r7, #8]
 800ddc4:	0148      	lsls	r0, r1, #5
 800ddc6:	68f9      	ldr	r1, [r7, #12]
 800ddc8:	4401      	add	r1, r0
 800ddca:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800ddce:	4313      	orrs	r3, r2
 800ddd0:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ddd2:	68bb      	ldr	r3, [r7, #8]
 800ddd4:	015a      	lsls	r2, r3, #5
 800ddd6:	68fb      	ldr	r3, [r7, #12]
 800ddd8:	4413      	add	r3, r2
 800ddda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	68ba      	ldr	r2, [r7, #8]
 800dde2:	0151      	lsls	r1, r2, #5
 800dde4:	68fa      	ldr	r2, [r7, #12]
 800dde6:	440a      	add	r2, r1
 800dde8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ddec:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ddf0:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 800ddf2:	683b      	ldr	r3, [r7, #0]
 800ddf4:	699b      	ldr	r3, [r3, #24]
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d071      	beq.n	800dede <USB_EP0StartXfer+0x236>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800de00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800de02:	683b      	ldr	r3, [r7, #0]
 800de04:	781b      	ldrb	r3, [r3, #0]
 800de06:	f003 030f 	and.w	r3, r3, #15
 800de0a:	2101      	movs	r1, #1
 800de0c:	fa01 f303 	lsl.w	r3, r1, r3
 800de10:	68f9      	ldr	r1, [r7, #12]
 800de12:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800de16:	4313      	orrs	r3, r2
 800de18:	634b      	str	r3, [r1, #52]	; 0x34
 800de1a:	e060      	b.n	800dede <USB_EP0StartXfer+0x236>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800de1c:	68bb      	ldr	r3, [r7, #8]
 800de1e:	015a      	lsls	r2, r3, #5
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	4413      	add	r3, r2
 800de24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800de28:	691b      	ldr	r3, [r3, #16]
 800de2a:	68ba      	ldr	r2, [r7, #8]
 800de2c:	0151      	lsls	r1, r2, #5
 800de2e:	68fa      	ldr	r2, [r7, #12]
 800de30:	440a      	add	r2, r1
 800de32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800de36:	0cdb      	lsrs	r3, r3, #19
 800de38:	04db      	lsls	r3, r3, #19
 800de3a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800de3c:	68bb      	ldr	r3, [r7, #8]
 800de3e:	015a      	lsls	r2, r3, #5
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	4413      	add	r3, r2
 800de44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800de48:	691b      	ldr	r3, [r3, #16]
 800de4a:	68ba      	ldr	r2, [r7, #8]
 800de4c:	0151      	lsls	r1, r2, #5
 800de4e:	68fa      	ldr	r2, [r7, #12]
 800de50:	440a      	add	r2, r1
 800de52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800de56:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800de5a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800de5e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800de60:	683b      	ldr	r3, [r7, #0]
 800de62:	699b      	ldr	r3, [r3, #24]
 800de64:	2b00      	cmp	r3, #0
 800de66:	d003      	beq.n	800de70 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 800de68:	683b      	ldr	r3, [r7, #0]
 800de6a:	68da      	ldr	r2, [r3, #12]
 800de6c:	683b      	ldr	r3, [r7, #0]
 800de6e:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800de70:	683b      	ldr	r3, [r7, #0]
 800de72:	68da      	ldr	r2, [r3, #12]
 800de74:	683b      	ldr	r3, [r7, #0]
 800de76:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800de78:	68bb      	ldr	r3, [r7, #8]
 800de7a:	015a      	lsls	r2, r3, #5
 800de7c:	68fb      	ldr	r3, [r7, #12]
 800de7e:	4413      	add	r3, r2
 800de80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800de84:	691b      	ldr	r3, [r3, #16]
 800de86:	68ba      	ldr	r2, [r7, #8]
 800de88:	0151      	lsls	r1, r2, #5
 800de8a:	68fa      	ldr	r2, [r7, #12]
 800de8c:	440a      	add	r2, r1
 800de8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800de92:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800de96:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800de98:	68bb      	ldr	r3, [r7, #8]
 800de9a:	015a      	lsls	r2, r3, #5
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	4413      	add	r3, r2
 800dea0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dea4:	691a      	ldr	r2, [r3, #16]
 800dea6:	683b      	ldr	r3, [r7, #0]
 800dea8:	69db      	ldr	r3, [r3, #28]
 800deaa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800deae:	68b9      	ldr	r1, [r7, #8]
 800deb0:	0148      	lsls	r0, r1, #5
 800deb2:	68f9      	ldr	r1, [r7, #12]
 800deb4:	4401      	add	r1, r0
 800deb6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800deba:	4313      	orrs	r3, r2
 800debc:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800debe:	68bb      	ldr	r3, [r7, #8]
 800dec0:	015a      	lsls	r2, r3, #5
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	4413      	add	r3, r2
 800dec6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	68ba      	ldr	r2, [r7, #8]
 800dece:	0151      	lsls	r1, r2, #5
 800ded0:	68fa      	ldr	r2, [r7, #12]
 800ded2:	440a      	add	r2, r1
 800ded4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ded8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800dedc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800dede:	2300      	movs	r3, #0
}
 800dee0:	4618      	mov	r0, r3
 800dee2:	3714      	adds	r7, #20
 800dee4:	46bd      	mov	sp, r7
 800dee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deea:	4770      	bx	lr

0800deec <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800deec:	b480      	push	{r7}
 800deee:	b087      	sub	sp, #28
 800def0:	af00      	add	r7, sp, #0
 800def2:	6078      	str	r0, [r7, #4]
 800def4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800def6:	2300      	movs	r3, #0
 800def8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800defa:	2300      	movs	r3, #0
 800defc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800df02:	683b      	ldr	r3, [r7, #0]
 800df04:	785b      	ldrb	r3, [r3, #1]
 800df06:	2b01      	cmp	r3, #1
 800df08:	d14a      	bne.n	800dfa0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800df0a:	683b      	ldr	r3, [r7, #0]
 800df0c:	781b      	ldrb	r3, [r3, #0]
 800df0e:	015a      	lsls	r2, r3, #5
 800df10:	693b      	ldr	r3, [r7, #16]
 800df12:	4413      	add	r3, r2
 800df14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800df1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800df22:	f040 8086 	bne.w	800e032 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800df26:	683b      	ldr	r3, [r7, #0]
 800df28:	781b      	ldrb	r3, [r3, #0]
 800df2a:	015a      	lsls	r2, r3, #5
 800df2c:	693b      	ldr	r3, [r7, #16]
 800df2e:	4413      	add	r3, r2
 800df30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	683a      	ldr	r2, [r7, #0]
 800df38:	7812      	ldrb	r2, [r2, #0]
 800df3a:	0151      	lsls	r1, r2, #5
 800df3c:	693a      	ldr	r2, [r7, #16]
 800df3e:	440a      	add	r2, r1
 800df40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800df44:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800df48:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800df4a:	683b      	ldr	r3, [r7, #0]
 800df4c:	781b      	ldrb	r3, [r3, #0]
 800df4e:	015a      	lsls	r2, r3, #5
 800df50:	693b      	ldr	r3, [r7, #16]
 800df52:	4413      	add	r3, r2
 800df54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	683a      	ldr	r2, [r7, #0]
 800df5c:	7812      	ldrb	r2, [r2, #0]
 800df5e:	0151      	lsls	r1, r2, #5
 800df60:	693a      	ldr	r2, [r7, #16]
 800df62:	440a      	add	r2, r1
 800df64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800df68:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800df6c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	3301      	adds	r3, #1
 800df72:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800df74:	68fb      	ldr	r3, [r7, #12]
 800df76:	f242 7210 	movw	r2, #10000	; 0x2710
 800df7a:	4293      	cmp	r3, r2
 800df7c:	d902      	bls.n	800df84 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800df7e:	2301      	movs	r3, #1
 800df80:	75fb      	strb	r3, [r7, #23]
          break;
 800df82:	e056      	b.n	800e032 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800df84:	683b      	ldr	r3, [r7, #0]
 800df86:	781b      	ldrb	r3, [r3, #0]
 800df88:	015a      	lsls	r2, r3, #5
 800df8a:	693b      	ldr	r3, [r7, #16]
 800df8c:	4413      	add	r3, r2
 800df8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800df98:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800df9c:	d0e7      	beq.n	800df6e <USB_EPStopXfer+0x82>
 800df9e:	e048      	b.n	800e032 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800dfa0:	683b      	ldr	r3, [r7, #0]
 800dfa2:	781b      	ldrb	r3, [r3, #0]
 800dfa4:	015a      	lsls	r2, r3, #5
 800dfa6:	693b      	ldr	r3, [r7, #16]
 800dfa8:	4413      	add	r3, r2
 800dfaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800dfb4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800dfb8:	d13b      	bne.n	800e032 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800dfba:	683b      	ldr	r3, [r7, #0]
 800dfbc:	781b      	ldrb	r3, [r3, #0]
 800dfbe:	015a      	lsls	r2, r3, #5
 800dfc0:	693b      	ldr	r3, [r7, #16]
 800dfc2:	4413      	add	r3, r2
 800dfc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	683a      	ldr	r2, [r7, #0]
 800dfcc:	7812      	ldrb	r2, [r2, #0]
 800dfce:	0151      	lsls	r1, r2, #5
 800dfd0:	693a      	ldr	r2, [r7, #16]
 800dfd2:	440a      	add	r2, r1
 800dfd4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dfd8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800dfdc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800dfde:	683b      	ldr	r3, [r7, #0]
 800dfe0:	781b      	ldrb	r3, [r3, #0]
 800dfe2:	015a      	lsls	r2, r3, #5
 800dfe4:	693b      	ldr	r3, [r7, #16]
 800dfe6:	4413      	add	r3, r2
 800dfe8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	683a      	ldr	r2, [r7, #0]
 800dff0:	7812      	ldrb	r2, [r2, #0]
 800dff2:	0151      	lsls	r1, r2, #5
 800dff4:	693a      	ldr	r2, [r7, #16]
 800dff6:	440a      	add	r2, r1
 800dff8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dffc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e000:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	3301      	adds	r3, #1
 800e006:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	f242 7210 	movw	r2, #10000	; 0x2710
 800e00e:	4293      	cmp	r3, r2
 800e010:	d902      	bls.n	800e018 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800e012:	2301      	movs	r3, #1
 800e014:	75fb      	strb	r3, [r7, #23]
          break;
 800e016:	e00c      	b.n	800e032 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800e018:	683b      	ldr	r3, [r7, #0]
 800e01a:	781b      	ldrb	r3, [r3, #0]
 800e01c:	015a      	lsls	r2, r3, #5
 800e01e:	693b      	ldr	r3, [r7, #16]
 800e020:	4413      	add	r3, r2
 800e022:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e02c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e030:	d0e7      	beq.n	800e002 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800e032:	7dfb      	ldrb	r3, [r7, #23]
}
 800e034:	4618      	mov	r0, r3
 800e036:	371c      	adds	r7, #28
 800e038:	46bd      	mov	sp, r7
 800e03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e03e:	4770      	bx	lr

0800e040 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 800e040:	b480      	push	{r7}
 800e042:	b089      	sub	sp, #36	; 0x24
 800e044:	af00      	add	r7, sp, #0
 800e046:	60f8      	str	r0, [r7, #12]
 800e048:	60b9      	str	r1, [r7, #8]
 800e04a:	4611      	mov	r1, r2
 800e04c:	461a      	mov	r2, r3
 800e04e:	460b      	mov	r3, r1
 800e050:	71fb      	strb	r3, [r7, #7]
 800e052:	4613      	mov	r3, r2
 800e054:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800e05a:	68bb      	ldr	r3, [r7, #8]
 800e05c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 800e05e:	88bb      	ldrh	r3, [r7, #4]
 800e060:	3303      	adds	r3, #3
 800e062:	089b      	lsrs	r3, r3, #2
 800e064:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800e066:	2300      	movs	r3, #0
 800e068:	61bb      	str	r3, [r7, #24]
 800e06a:	e018      	b.n	800e09e <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800e06c:	79fb      	ldrb	r3, [r7, #7]
 800e06e:	031a      	lsls	r2, r3, #12
 800e070:	697b      	ldr	r3, [r7, #20]
 800e072:	4413      	add	r3, r2
 800e074:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e078:	461a      	mov	r2, r3
 800e07a:	69fb      	ldr	r3, [r7, #28]
 800e07c:	681b      	ldr	r3, [r3, #0]
 800e07e:	6013      	str	r3, [r2, #0]
    pSrc++;
 800e080:	69fb      	ldr	r3, [r7, #28]
 800e082:	3301      	adds	r3, #1
 800e084:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800e086:	69fb      	ldr	r3, [r7, #28]
 800e088:	3301      	adds	r3, #1
 800e08a:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800e08c:	69fb      	ldr	r3, [r7, #28]
 800e08e:	3301      	adds	r3, #1
 800e090:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800e092:	69fb      	ldr	r3, [r7, #28]
 800e094:	3301      	adds	r3, #1
 800e096:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800e098:	69bb      	ldr	r3, [r7, #24]
 800e09a:	3301      	adds	r3, #1
 800e09c:	61bb      	str	r3, [r7, #24]
 800e09e:	69ba      	ldr	r2, [r7, #24]
 800e0a0:	693b      	ldr	r3, [r7, #16]
 800e0a2:	429a      	cmp	r2, r3
 800e0a4:	d3e2      	bcc.n	800e06c <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800e0a6:	2300      	movs	r3, #0
}
 800e0a8:	4618      	mov	r0, r3
 800e0aa:	3724      	adds	r7, #36	; 0x24
 800e0ac:	46bd      	mov	sp, r7
 800e0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0b2:	4770      	bx	lr

0800e0b4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800e0b4:	b480      	push	{r7}
 800e0b6:	b08b      	sub	sp, #44	; 0x2c
 800e0b8:	af00      	add	r7, sp, #0
 800e0ba:	60f8      	str	r0, [r7, #12]
 800e0bc:	60b9      	str	r1, [r7, #8]
 800e0be:	4613      	mov	r3, r2
 800e0c0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e0c2:	68fb      	ldr	r3, [r7, #12]
 800e0c4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800e0c6:	68bb      	ldr	r3, [r7, #8]
 800e0c8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800e0ca:	88fb      	ldrh	r3, [r7, #6]
 800e0cc:	089b      	lsrs	r3, r3, #2
 800e0ce:	b29b      	uxth	r3, r3
 800e0d0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800e0d2:	88fb      	ldrh	r3, [r7, #6]
 800e0d4:	f003 0303 	and.w	r3, r3, #3
 800e0d8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800e0da:	2300      	movs	r3, #0
 800e0dc:	623b      	str	r3, [r7, #32]
 800e0de:	e014      	b.n	800e10a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800e0e0:	69bb      	ldr	r3, [r7, #24]
 800e0e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e0e6:	681a      	ldr	r2, [r3, #0]
 800e0e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0ea:	601a      	str	r2, [r3, #0]
    pDest++;
 800e0ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0ee:	3301      	adds	r3, #1
 800e0f0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800e0f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0f4:	3301      	adds	r3, #1
 800e0f6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800e0f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0fa:	3301      	adds	r3, #1
 800e0fc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800e0fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e100:	3301      	adds	r3, #1
 800e102:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800e104:	6a3b      	ldr	r3, [r7, #32]
 800e106:	3301      	adds	r3, #1
 800e108:	623b      	str	r3, [r7, #32]
 800e10a:	6a3a      	ldr	r2, [r7, #32]
 800e10c:	697b      	ldr	r3, [r7, #20]
 800e10e:	429a      	cmp	r2, r3
 800e110:	d3e6      	bcc.n	800e0e0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800e112:	8bfb      	ldrh	r3, [r7, #30]
 800e114:	2b00      	cmp	r3, #0
 800e116:	d01e      	beq.n	800e156 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800e118:	2300      	movs	r3, #0
 800e11a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800e11c:	69bb      	ldr	r3, [r7, #24]
 800e11e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e122:	461a      	mov	r2, r3
 800e124:	f107 0310 	add.w	r3, r7, #16
 800e128:	6812      	ldr	r2, [r2, #0]
 800e12a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800e12c:	693a      	ldr	r2, [r7, #16]
 800e12e:	6a3b      	ldr	r3, [r7, #32]
 800e130:	b2db      	uxtb	r3, r3
 800e132:	00db      	lsls	r3, r3, #3
 800e134:	fa22 f303 	lsr.w	r3, r2, r3
 800e138:	b2da      	uxtb	r2, r3
 800e13a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e13c:	701a      	strb	r2, [r3, #0]
      i++;
 800e13e:	6a3b      	ldr	r3, [r7, #32]
 800e140:	3301      	adds	r3, #1
 800e142:	623b      	str	r3, [r7, #32]
      pDest++;
 800e144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e146:	3301      	adds	r3, #1
 800e148:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800e14a:	8bfb      	ldrh	r3, [r7, #30]
 800e14c:	3b01      	subs	r3, #1
 800e14e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800e150:	8bfb      	ldrh	r3, [r7, #30]
 800e152:	2b00      	cmp	r3, #0
 800e154:	d1ea      	bne.n	800e12c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800e156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e158:	4618      	mov	r0, r3
 800e15a:	372c      	adds	r7, #44	; 0x2c
 800e15c:	46bd      	mov	sp, r7
 800e15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e162:	4770      	bx	lr

0800e164 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e164:	b480      	push	{r7}
 800e166:	b085      	sub	sp, #20
 800e168:	af00      	add	r7, sp, #0
 800e16a:	6078      	str	r0, [r7, #4]
 800e16c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e172:	683b      	ldr	r3, [r7, #0]
 800e174:	781b      	ldrb	r3, [r3, #0]
 800e176:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e178:	683b      	ldr	r3, [r7, #0]
 800e17a:	785b      	ldrb	r3, [r3, #1]
 800e17c:	2b01      	cmp	r3, #1
 800e17e:	d12c      	bne.n	800e1da <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800e180:	68bb      	ldr	r3, [r7, #8]
 800e182:	015a      	lsls	r2, r3, #5
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	4413      	add	r3, r2
 800e188:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	2b00      	cmp	r3, #0
 800e190:	db12      	blt.n	800e1b8 <USB_EPSetStall+0x54>
 800e192:	68bb      	ldr	r3, [r7, #8]
 800e194:	2b00      	cmp	r3, #0
 800e196:	d00f      	beq.n	800e1b8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800e198:	68bb      	ldr	r3, [r7, #8]
 800e19a:	015a      	lsls	r2, r3, #5
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	4413      	add	r3, r2
 800e1a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e1a4:	681b      	ldr	r3, [r3, #0]
 800e1a6:	68ba      	ldr	r2, [r7, #8]
 800e1a8:	0151      	lsls	r1, r2, #5
 800e1aa:	68fa      	ldr	r2, [r7, #12]
 800e1ac:	440a      	add	r2, r1
 800e1ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e1b2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800e1b6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800e1b8:	68bb      	ldr	r3, [r7, #8]
 800e1ba:	015a      	lsls	r2, r3, #5
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	4413      	add	r3, r2
 800e1c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	68ba      	ldr	r2, [r7, #8]
 800e1c8:	0151      	lsls	r1, r2, #5
 800e1ca:	68fa      	ldr	r2, [r7, #12]
 800e1cc:	440a      	add	r2, r1
 800e1ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e1d2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e1d6:	6013      	str	r3, [r2, #0]
 800e1d8:	e02b      	b.n	800e232 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800e1da:	68bb      	ldr	r3, [r7, #8]
 800e1dc:	015a      	lsls	r2, r3, #5
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	4413      	add	r3, r2
 800e1e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	db12      	blt.n	800e212 <USB_EPSetStall+0xae>
 800e1ec:	68bb      	ldr	r3, [r7, #8]
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d00f      	beq.n	800e212 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800e1f2:	68bb      	ldr	r3, [r7, #8]
 800e1f4:	015a      	lsls	r2, r3, #5
 800e1f6:	68fb      	ldr	r3, [r7, #12]
 800e1f8:	4413      	add	r3, r2
 800e1fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	68ba      	ldr	r2, [r7, #8]
 800e202:	0151      	lsls	r1, r2, #5
 800e204:	68fa      	ldr	r2, [r7, #12]
 800e206:	440a      	add	r2, r1
 800e208:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e20c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800e210:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800e212:	68bb      	ldr	r3, [r7, #8]
 800e214:	015a      	lsls	r2, r3, #5
 800e216:	68fb      	ldr	r3, [r7, #12]
 800e218:	4413      	add	r3, r2
 800e21a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	68ba      	ldr	r2, [r7, #8]
 800e222:	0151      	lsls	r1, r2, #5
 800e224:	68fa      	ldr	r2, [r7, #12]
 800e226:	440a      	add	r2, r1
 800e228:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e22c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e230:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e232:	2300      	movs	r3, #0
}
 800e234:	4618      	mov	r0, r3
 800e236:	3714      	adds	r7, #20
 800e238:	46bd      	mov	sp, r7
 800e23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e23e:	4770      	bx	lr

0800e240 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e240:	b480      	push	{r7}
 800e242:	b085      	sub	sp, #20
 800e244:	af00      	add	r7, sp, #0
 800e246:	6078      	str	r0, [r7, #4]
 800e248:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e24e:	683b      	ldr	r3, [r7, #0]
 800e250:	781b      	ldrb	r3, [r3, #0]
 800e252:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e254:	683b      	ldr	r3, [r7, #0]
 800e256:	785b      	ldrb	r3, [r3, #1]
 800e258:	2b01      	cmp	r3, #1
 800e25a:	d128      	bne.n	800e2ae <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800e25c:	68bb      	ldr	r3, [r7, #8]
 800e25e:	015a      	lsls	r2, r3, #5
 800e260:	68fb      	ldr	r3, [r7, #12]
 800e262:	4413      	add	r3, r2
 800e264:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	68ba      	ldr	r2, [r7, #8]
 800e26c:	0151      	lsls	r1, r2, #5
 800e26e:	68fa      	ldr	r2, [r7, #12]
 800e270:	440a      	add	r2, r1
 800e272:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e276:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e27a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800e27c:	683b      	ldr	r3, [r7, #0]
 800e27e:	791b      	ldrb	r3, [r3, #4]
 800e280:	2b03      	cmp	r3, #3
 800e282:	d003      	beq.n	800e28c <USB_EPClearStall+0x4c>
 800e284:	683b      	ldr	r3, [r7, #0]
 800e286:	791b      	ldrb	r3, [r3, #4]
 800e288:	2b02      	cmp	r3, #2
 800e28a:	d138      	bne.n	800e2fe <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800e28c:	68bb      	ldr	r3, [r7, #8]
 800e28e:	015a      	lsls	r2, r3, #5
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	4413      	add	r3, r2
 800e294:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	68ba      	ldr	r2, [r7, #8]
 800e29c:	0151      	lsls	r1, r2, #5
 800e29e:	68fa      	ldr	r2, [r7, #12]
 800e2a0:	440a      	add	r2, r1
 800e2a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e2a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e2aa:	6013      	str	r3, [r2, #0]
 800e2ac:	e027      	b.n	800e2fe <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800e2ae:	68bb      	ldr	r3, [r7, #8]
 800e2b0:	015a      	lsls	r2, r3, #5
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	4413      	add	r3, r2
 800e2b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	68ba      	ldr	r2, [r7, #8]
 800e2be:	0151      	lsls	r1, r2, #5
 800e2c0:	68fa      	ldr	r2, [r7, #12]
 800e2c2:	440a      	add	r2, r1
 800e2c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e2c8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e2cc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800e2ce:	683b      	ldr	r3, [r7, #0]
 800e2d0:	791b      	ldrb	r3, [r3, #4]
 800e2d2:	2b03      	cmp	r3, #3
 800e2d4:	d003      	beq.n	800e2de <USB_EPClearStall+0x9e>
 800e2d6:	683b      	ldr	r3, [r7, #0]
 800e2d8:	791b      	ldrb	r3, [r3, #4]
 800e2da:	2b02      	cmp	r3, #2
 800e2dc:	d10f      	bne.n	800e2fe <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800e2de:	68bb      	ldr	r3, [r7, #8]
 800e2e0:	015a      	lsls	r2, r3, #5
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	4413      	add	r3, r2
 800e2e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	68ba      	ldr	r2, [r7, #8]
 800e2ee:	0151      	lsls	r1, r2, #5
 800e2f0:	68fa      	ldr	r2, [r7, #12]
 800e2f2:	440a      	add	r2, r1
 800e2f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e2f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e2fc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800e2fe:	2300      	movs	r3, #0
}
 800e300:	4618      	mov	r0, r3
 800e302:	3714      	adds	r7, #20
 800e304:	46bd      	mov	sp, r7
 800e306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e30a:	4770      	bx	lr

0800e30c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800e30c:	b480      	push	{r7}
 800e30e:	b085      	sub	sp, #20
 800e310:	af00      	add	r7, sp, #0
 800e312:	6078      	str	r0, [r7, #4]
 800e314:	460b      	mov	r3, r1
 800e316:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800e31c:	68fb      	ldr	r3, [r7, #12]
 800e31e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	68fa      	ldr	r2, [r7, #12]
 800e326:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e32a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800e32e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800e330:	68fb      	ldr	r3, [r7, #12]
 800e332:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e336:	681a      	ldr	r2, [r3, #0]
 800e338:	78fb      	ldrb	r3, [r7, #3]
 800e33a:	011b      	lsls	r3, r3, #4
 800e33c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800e340:	68f9      	ldr	r1, [r7, #12]
 800e342:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e346:	4313      	orrs	r3, r2
 800e348:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800e34a:	2300      	movs	r3, #0
}
 800e34c:	4618      	mov	r0, r3
 800e34e:	3714      	adds	r7, #20
 800e350:	46bd      	mov	sp, r7
 800e352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e356:	4770      	bx	lr

0800e358 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800e358:	b480      	push	{r7}
 800e35a:	b085      	sub	sp, #20
 800e35c:	af00      	add	r7, sp, #0
 800e35e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	68fa      	ldr	r2, [r7, #12]
 800e36e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e372:	f023 0303 	bic.w	r3, r3, #3
 800e376:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800e378:	68fb      	ldr	r3, [r7, #12]
 800e37a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e37e:	685b      	ldr	r3, [r3, #4]
 800e380:	68fa      	ldr	r2, [r7, #12]
 800e382:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e386:	f023 0302 	bic.w	r3, r3, #2
 800e38a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e38c:	2300      	movs	r3, #0
}
 800e38e:	4618      	mov	r0, r3
 800e390:	3714      	adds	r7, #20
 800e392:	46bd      	mov	sp, r7
 800e394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e398:	4770      	bx	lr

0800e39a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800e39a:	b480      	push	{r7}
 800e39c:	b085      	sub	sp, #20
 800e39e:	af00      	add	r7, sp, #0
 800e3a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e3ac:	681b      	ldr	r3, [r3, #0]
 800e3ae:	68fa      	ldr	r2, [r7, #12]
 800e3b0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e3b4:	f023 0303 	bic.w	r3, r3, #3
 800e3b8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e3c0:	685b      	ldr	r3, [r3, #4]
 800e3c2:	68fa      	ldr	r2, [r7, #12]
 800e3c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e3c8:	f043 0302 	orr.w	r3, r3, #2
 800e3cc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e3ce:	2300      	movs	r3, #0
}
 800e3d0:	4618      	mov	r0, r3
 800e3d2:	3714      	adds	r7, #20
 800e3d4:	46bd      	mov	sp, r7
 800e3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3da:	4770      	bx	lr

0800e3dc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800e3dc:	b480      	push	{r7}
 800e3de:	b085      	sub	sp, #20
 800e3e0:	af00      	add	r7, sp, #0
 800e3e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	695b      	ldr	r3, [r3, #20]
 800e3e8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	699b      	ldr	r3, [r3, #24]
 800e3ee:	68fa      	ldr	r2, [r7, #12]
 800e3f0:	4013      	ands	r3, r2
 800e3f2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800e3f4:	68fb      	ldr	r3, [r7, #12]
}
 800e3f6:	4618      	mov	r0, r3
 800e3f8:	3714      	adds	r7, #20
 800e3fa:	46bd      	mov	sp, r7
 800e3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e400:	4770      	bx	lr

0800e402 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800e402:	b480      	push	{r7}
 800e404:	b085      	sub	sp, #20
 800e406:	af00      	add	r7, sp, #0
 800e408:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800e40e:	68fb      	ldr	r3, [r7, #12]
 800e410:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e414:	699b      	ldr	r3, [r3, #24]
 800e416:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800e418:	68fb      	ldr	r3, [r7, #12]
 800e41a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e41e:	69db      	ldr	r3, [r3, #28]
 800e420:	68ba      	ldr	r2, [r7, #8]
 800e422:	4013      	ands	r3, r2
 800e424:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800e426:	68bb      	ldr	r3, [r7, #8]
 800e428:	0c1b      	lsrs	r3, r3, #16
}
 800e42a:	4618      	mov	r0, r3
 800e42c:	3714      	adds	r7, #20
 800e42e:	46bd      	mov	sp, r7
 800e430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e434:	4770      	bx	lr

0800e436 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800e436:	b480      	push	{r7}
 800e438:	b085      	sub	sp, #20
 800e43a:	af00      	add	r7, sp, #0
 800e43c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800e442:	68fb      	ldr	r3, [r7, #12]
 800e444:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e448:	699b      	ldr	r3, [r3, #24]
 800e44a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800e44c:	68fb      	ldr	r3, [r7, #12]
 800e44e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e452:	69db      	ldr	r3, [r3, #28]
 800e454:	68ba      	ldr	r2, [r7, #8]
 800e456:	4013      	ands	r3, r2
 800e458:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800e45a:	68bb      	ldr	r3, [r7, #8]
 800e45c:	b29b      	uxth	r3, r3
}
 800e45e:	4618      	mov	r0, r3
 800e460:	3714      	adds	r7, #20
 800e462:	46bd      	mov	sp, r7
 800e464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e468:	4770      	bx	lr

0800e46a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800e46a:	b480      	push	{r7}
 800e46c:	b085      	sub	sp, #20
 800e46e:	af00      	add	r7, sp, #0
 800e470:	6078      	str	r0, [r7, #4]
 800e472:	460b      	mov	r3, r1
 800e474:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800e47a:	78fb      	ldrb	r3, [r7, #3]
 800e47c:	015a      	lsls	r2, r3, #5
 800e47e:	68fb      	ldr	r3, [r7, #12]
 800e480:	4413      	add	r3, r2
 800e482:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e486:	689b      	ldr	r3, [r3, #8]
 800e488:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800e48a:	68fb      	ldr	r3, [r7, #12]
 800e48c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e490:	695b      	ldr	r3, [r3, #20]
 800e492:	68ba      	ldr	r2, [r7, #8]
 800e494:	4013      	ands	r3, r2
 800e496:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800e498:	68bb      	ldr	r3, [r7, #8]
}
 800e49a:	4618      	mov	r0, r3
 800e49c:	3714      	adds	r7, #20
 800e49e:	46bd      	mov	sp, r7
 800e4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4a4:	4770      	bx	lr

0800e4a6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800e4a6:	b480      	push	{r7}
 800e4a8:	b087      	sub	sp, #28
 800e4aa:	af00      	add	r7, sp, #0
 800e4ac:	6078      	str	r0, [r7, #4]
 800e4ae:	460b      	mov	r3, r1
 800e4b0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800e4b6:	697b      	ldr	r3, [r7, #20]
 800e4b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e4bc:	691b      	ldr	r3, [r3, #16]
 800e4be:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800e4c0:	697b      	ldr	r3, [r7, #20]
 800e4c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e4c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e4c8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800e4ca:	78fb      	ldrb	r3, [r7, #3]
 800e4cc:	f003 030f 	and.w	r3, r3, #15
 800e4d0:	68fa      	ldr	r2, [r7, #12]
 800e4d2:	fa22 f303 	lsr.w	r3, r2, r3
 800e4d6:	01db      	lsls	r3, r3, #7
 800e4d8:	b2db      	uxtb	r3, r3
 800e4da:	693a      	ldr	r2, [r7, #16]
 800e4dc:	4313      	orrs	r3, r2
 800e4de:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800e4e0:	78fb      	ldrb	r3, [r7, #3]
 800e4e2:	015a      	lsls	r2, r3, #5
 800e4e4:	697b      	ldr	r3, [r7, #20]
 800e4e6:	4413      	add	r3, r2
 800e4e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e4ec:	689b      	ldr	r3, [r3, #8]
 800e4ee:	693a      	ldr	r2, [r7, #16]
 800e4f0:	4013      	ands	r3, r2
 800e4f2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800e4f4:	68bb      	ldr	r3, [r7, #8]
}
 800e4f6:	4618      	mov	r0, r3
 800e4f8:	371c      	adds	r7, #28
 800e4fa:	46bd      	mov	sp, r7
 800e4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e500:	4770      	bx	lr

0800e502 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800e502:	b480      	push	{r7}
 800e504:	b083      	sub	sp, #12
 800e506:	af00      	add	r7, sp, #0
 800e508:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	695b      	ldr	r3, [r3, #20]
 800e50e:	f003 0301 	and.w	r3, r3, #1
}
 800e512:	4618      	mov	r0, r3
 800e514:	370c      	adds	r7, #12
 800e516:	46bd      	mov	sp, r7
 800e518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e51c:	4770      	bx	lr

0800e51e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800e51e:	b480      	push	{r7}
 800e520:	b085      	sub	sp, #20
 800e522:	af00      	add	r7, sp, #0
 800e524:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800e52a:	68fb      	ldr	r3, [r7, #12]
 800e52c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e530:	681b      	ldr	r3, [r3, #0]
 800e532:	68fa      	ldr	r2, [r7, #12]
 800e534:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e538:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800e53c:	f023 0307 	bic.w	r3, r3, #7
 800e540:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800e542:	68fb      	ldr	r3, [r7, #12]
 800e544:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e548:	685b      	ldr	r3, [r3, #4]
 800e54a:	68fa      	ldr	r2, [r7, #12]
 800e54c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e550:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e554:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e556:	2300      	movs	r3, #0
}
 800e558:	4618      	mov	r0, r3
 800e55a:	3714      	adds	r7, #20
 800e55c:	46bd      	mov	sp, r7
 800e55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e562:	4770      	bx	lr

0800e564 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 800e564:	b480      	push	{r7}
 800e566:	b085      	sub	sp, #20
 800e568:	af00      	add	r7, sp, #0
 800e56a:	6078      	str	r0, [r7, #4]
 800e56c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	333c      	adds	r3, #60	; 0x3c
 800e576:	3304      	adds	r3, #4
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800e57c:	68bb      	ldr	r3, [r7, #8]
 800e57e:	4a1c      	ldr	r2, [pc, #112]	; (800e5f0 <USB_EP0_OutStart+0x8c>)
 800e580:	4293      	cmp	r3, r2
 800e582:	d90a      	bls.n	800e59a <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e590:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e594:	d101      	bne.n	800e59a <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800e596:	2300      	movs	r3, #0
 800e598:	e024      	b.n	800e5e4 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800e59a:	68fb      	ldr	r3, [r7, #12]
 800e59c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e5a0:	461a      	mov	r2, r3
 800e5a2:	2300      	movs	r3, #0
 800e5a4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e5a6:	68fb      	ldr	r3, [r7, #12]
 800e5a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e5ac:	691b      	ldr	r3, [r3, #16]
 800e5ae:	68fa      	ldr	r2, [r7, #12]
 800e5b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e5b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e5b8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800e5ba:	68fb      	ldr	r3, [r7, #12]
 800e5bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e5c0:	691b      	ldr	r3, [r3, #16]
 800e5c2:	68fa      	ldr	r2, [r7, #12]
 800e5c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e5c8:	f043 0318 	orr.w	r3, r3, #24
 800e5cc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e5d4:	691b      	ldr	r3, [r3, #16]
 800e5d6:	68fa      	ldr	r2, [r7, #12]
 800e5d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e5dc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800e5e0:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800e5e2:	2300      	movs	r3, #0
}
 800e5e4:	4618      	mov	r0, r3
 800e5e6:	3714      	adds	r7, #20
 800e5e8:	46bd      	mov	sp, r7
 800e5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ee:	4770      	bx	lr
 800e5f0:	4f54300a 	.word	0x4f54300a

0800e5f4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800e5f4:	b480      	push	{r7}
 800e5f6:	b085      	sub	sp, #20
 800e5f8:	af00      	add	r7, sp, #0
 800e5fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e5fc:	2300      	movs	r3, #0
 800e5fe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	3301      	adds	r3, #1
 800e604:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	4a13      	ldr	r2, [pc, #76]	; (800e658 <USB_CoreReset+0x64>)
 800e60a:	4293      	cmp	r3, r2
 800e60c:	d901      	bls.n	800e612 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800e60e:	2303      	movs	r3, #3
 800e610:	e01b      	b.n	800e64a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	691b      	ldr	r3, [r3, #16]
 800e616:	2b00      	cmp	r3, #0
 800e618:	daf2      	bge.n	800e600 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800e61a:	2300      	movs	r3, #0
 800e61c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	691b      	ldr	r3, [r3, #16]
 800e622:	f043 0201 	orr.w	r2, r3, #1
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e62a:	68fb      	ldr	r3, [r7, #12]
 800e62c:	3301      	adds	r3, #1
 800e62e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	4a09      	ldr	r2, [pc, #36]	; (800e658 <USB_CoreReset+0x64>)
 800e634:	4293      	cmp	r3, r2
 800e636:	d901      	bls.n	800e63c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800e638:	2303      	movs	r3, #3
 800e63a:	e006      	b.n	800e64a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	691b      	ldr	r3, [r3, #16]
 800e640:	f003 0301 	and.w	r3, r3, #1
 800e644:	2b01      	cmp	r3, #1
 800e646:	d0f0      	beq.n	800e62a <USB_CoreReset+0x36>

  return HAL_OK;
 800e648:	2300      	movs	r3, #0
}
 800e64a:	4618      	mov	r0, r3
 800e64c:	3714      	adds	r7, #20
 800e64e:	46bd      	mov	sp, r7
 800e650:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e654:	4770      	bx	lr
 800e656:	bf00      	nop
 800e658:	00030d40 	.word	0x00030d40

0800e65c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e65c:	b580      	push	{r7, lr}
 800e65e:	b084      	sub	sp, #16
 800e660:	af00      	add	r7, sp, #0
 800e662:	6078      	str	r0, [r7, #4]
 800e664:	460b      	mov	r3, r1
 800e666:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800e668:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800e66c:	f005 f8be 	bl	80137ec <USBD_static_malloc>
 800e670:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800e672:	68fb      	ldr	r3, [r7, #12]
 800e674:	2b00      	cmp	r3, #0
 800e676:	d105      	bne.n	800e684 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	2200      	movs	r2, #0
 800e67c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800e680:	2302      	movs	r3, #2
 800e682:	e066      	b.n	800e752 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	68fa      	ldr	r2, [r7, #12]
 800e688:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	7c1b      	ldrb	r3, [r3, #16]
 800e690:	2b00      	cmp	r3, #0
 800e692:	d119      	bne.n	800e6c8 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800e694:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e698:	2202      	movs	r2, #2
 800e69a:	2181      	movs	r1, #129	; 0x81
 800e69c:	6878      	ldr	r0, [r7, #4]
 800e69e:	f004 fe91 	bl	80133c4 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	2201      	movs	r2, #1
 800e6a6:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800e6a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e6ac:	2202      	movs	r2, #2
 800e6ae:	2101      	movs	r1, #1
 800e6b0:	6878      	ldr	r0, [r7, #4]
 800e6b2:	f004 fe87 	bl	80133c4 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	2201      	movs	r2, #1
 800e6ba:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	2210      	movs	r2, #16
 800e6c2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800e6c6:	e016      	b.n	800e6f6 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800e6c8:	2340      	movs	r3, #64	; 0x40
 800e6ca:	2202      	movs	r2, #2
 800e6cc:	2181      	movs	r1, #129	; 0x81
 800e6ce:	6878      	ldr	r0, [r7, #4]
 800e6d0:	f004 fe78 	bl	80133c4 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	2201      	movs	r2, #1
 800e6d8:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800e6da:	2340      	movs	r3, #64	; 0x40
 800e6dc:	2202      	movs	r2, #2
 800e6de:	2101      	movs	r1, #1
 800e6e0:	6878      	ldr	r0, [r7, #4]
 800e6e2:	f004 fe6f 	bl	80133c4 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	2201      	movs	r2, #1
 800e6ea:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	2210      	movs	r2, #16
 800e6f2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800e6f6:	2308      	movs	r3, #8
 800e6f8:	2203      	movs	r2, #3
 800e6fa:	2182      	movs	r1, #130	; 0x82
 800e6fc:	6878      	ldr	r0, [r7, #4]
 800e6fe:	f004 fe61 	bl	80133c4 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	2201      	movs	r2, #1
 800e706:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	2200      	movs	r2, #0
 800e718:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800e71c:	68fb      	ldr	r3, [r7, #12]
 800e71e:	2200      	movs	r2, #0
 800e720:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	7c1b      	ldrb	r3, [r3, #16]
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d109      	bne.n	800e740 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e732:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e736:	2101      	movs	r1, #1
 800e738:	6878      	ldr	r0, [r7, #4]
 800e73a:	f004 ffbd 	bl	80136b8 <USBD_LL_PrepareReceive>
 800e73e:	e007      	b.n	800e750 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e746:	2340      	movs	r3, #64	; 0x40
 800e748:	2101      	movs	r1, #1
 800e74a:	6878      	ldr	r0, [r7, #4]
 800e74c:	f004 ffb4 	bl	80136b8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e750:	2300      	movs	r3, #0
}
 800e752:	4618      	mov	r0, r3
 800e754:	3710      	adds	r7, #16
 800e756:	46bd      	mov	sp, r7
 800e758:	bd80      	pop	{r7, pc}

0800e75a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e75a:	b580      	push	{r7, lr}
 800e75c:	b082      	sub	sp, #8
 800e75e:	af00      	add	r7, sp, #0
 800e760:	6078      	str	r0, [r7, #4]
 800e762:	460b      	mov	r3, r1
 800e764:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800e766:	2181      	movs	r1, #129	; 0x81
 800e768:	6878      	ldr	r0, [r7, #4]
 800e76a:	f004 fe69 	bl	8013440 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	2200      	movs	r2, #0
 800e772:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800e774:	2101      	movs	r1, #1
 800e776:	6878      	ldr	r0, [r7, #4]
 800e778:	f004 fe62 	bl	8013440 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	2200      	movs	r2, #0
 800e780:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800e784:	2182      	movs	r1, #130	; 0x82
 800e786:	6878      	ldr	r0, [r7, #4]
 800e788:	f004 fe5a 	bl	8013440 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	2200      	movs	r2, #0
 800e790:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	2200      	movs	r2, #0
 800e798:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d00e      	beq.n	800e7c4 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e7ac:	685b      	ldr	r3, [r3, #4]
 800e7ae:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e7b6:	4618      	mov	r0, r3
 800e7b8:	f005 f826 	bl	8013808 <USBD_static_free>
    pdev->pClassData = NULL;
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	2200      	movs	r2, #0
 800e7c0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800e7c4:	2300      	movs	r3, #0
}
 800e7c6:	4618      	mov	r0, r3
 800e7c8:	3708      	adds	r7, #8
 800e7ca:	46bd      	mov	sp, r7
 800e7cc:	bd80      	pop	{r7, pc}
	...

0800e7d0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800e7d0:	b580      	push	{r7, lr}
 800e7d2:	b086      	sub	sp, #24
 800e7d4:	af00      	add	r7, sp, #0
 800e7d6:	6078      	str	r0, [r7, #4]
 800e7d8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e7e0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800e7e2:	2300      	movs	r3, #0
 800e7e4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800e7e6:	2300      	movs	r3, #0
 800e7e8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800e7ea:	2300      	movs	r3, #0
 800e7ec:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800e7ee:	693b      	ldr	r3, [r7, #16]
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d101      	bne.n	800e7f8 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800e7f4:	2303      	movs	r3, #3
 800e7f6:	e0af      	b.n	800e958 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e7f8:	683b      	ldr	r3, [r7, #0]
 800e7fa:	781b      	ldrb	r3, [r3, #0]
 800e7fc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e800:	2b00      	cmp	r3, #0
 800e802:	d03f      	beq.n	800e884 <USBD_CDC_Setup+0xb4>
 800e804:	2b20      	cmp	r3, #32
 800e806:	f040 809f 	bne.w	800e948 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800e80a:	683b      	ldr	r3, [r7, #0]
 800e80c:	88db      	ldrh	r3, [r3, #6]
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d02e      	beq.n	800e870 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800e812:	683b      	ldr	r3, [r7, #0]
 800e814:	781b      	ldrb	r3, [r3, #0]
 800e816:	b25b      	sxtb	r3, r3
 800e818:	2b00      	cmp	r3, #0
 800e81a:	da16      	bge.n	800e84a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e822:	689b      	ldr	r3, [r3, #8]
 800e824:	683a      	ldr	r2, [r7, #0]
 800e826:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800e828:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e82a:	683a      	ldr	r2, [r7, #0]
 800e82c:	88d2      	ldrh	r2, [r2, #6]
 800e82e:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800e830:	683b      	ldr	r3, [r7, #0]
 800e832:	88db      	ldrh	r3, [r3, #6]
 800e834:	2b07      	cmp	r3, #7
 800e836:	bf28      	it	cs
 800e838:	2307      	movcs	r3, #7
 800e83a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800e83c:	693b      	ldr	r3, [r7, #16]
 800e83e:	89fa      	ldrh	r2, [r7, #14]
 800e840:	4619      	mov	r1, r3
 800e842:	6878      	ldr	r0, [r7, #4]
 800e844:	f001 fb43 	bl	800fece <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800e848:	e085      	b.n	800e956 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800e84a:	683b      	ldr	r3, [r7, #0]
 800e84c:	785a      	ldrb	r2, [r3, #1]
 800e84e:	693b      	ldr	r3, [r7, #16]
 800e850:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800e854:	683b      	ldr	r3, [r7, #0]
 800e856:	88db      	ldrh	r3, [r3, #6]
 800e858:	b2da      	uxtb	r2, r3
 800e85a:	693b      	ldr	r3, [r7, #16]
 800e85c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800e860:	6939      	ldr	r1, [r7, #16]
 800e862:	683b      	ldr	r3, [r7, #0]
 800e864:	88db      	ldrh	r3, [r3, #6]
 800e866:	461a      	mov	r2, r3
 800e868:	6878      	ldr	r0, [r7, #4]
 800e86a:	f001 fb5c 	bl	800ff26 <USBD_CtlPrepareRx>
      break;
 800e86e:	e072      	b.n	800e956 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e876:	689b      	ldr	r3, [r3, #8]
 800e878:	683a      	ldr	r2, [r7, #0]
 800e87a:	7850      	ldrb	r0, [r2, #1]
 800e87c:	2200      	movs	r2, #0
 800e87e:	6839      	ldr	r1, [r7, #0]
 800e880:	4798      	blx	r3
      break;
 800e882:	e068      	b.n	800e956 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e884:	683b      	ldr	r3, [r7, #0]
 800e886:	785b      	ldrb	r3, [r3, #1]
 800e888:	2b0b      	cmp	r3, #11
 800e88a:	d852      	bhi.n	800e932 <USBD_CDC_Setup+0x162>
 800e88c:	a201      	add	r2, pc, #4	; (adr r2, 800e894 <USBD_CDC_Setup+0xc4>)
 800e88e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e892:	bf00      	nop
 800e894:	0800e8c5 	.word	0x0800e8c5
 800e898:	0800e941 	.word	0x0800e941
 800e89c:	0800e933 	.word	0x0800e933
 800e8a0:	0800e933 	.word	0x0800e933
 800e8a4:	0800e933 	.word	0x0800e933
 800e8a8:	0800e933 	.word	0x0800e933
 800e8ac:	0800e933 	.word	0x0800e933
 800e8b0:	0800e933 	.word	0x0800e933
 800e8b4:	0800e933 	.word	0x0800e933
 800e8b8:	0800e933 	.word	0x0800e933
 800e8bc:	0800e8ef 	.word	0x0800e8ef
 800e8c0:	0800e919 	.word	0x0800e919
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e8ca:	b2db      	uxtb	r3, r3
 800e8cc:	2b03      	cmp	r3, #3
 800e8ce:	d107      	bne.n	800e8e0 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800e8d0:	f107 030a 	add.w	r3, r7, #10
 800e8d4:	2202      	movs	r2, #2
 800e8d6:	4619      	mov	r1, r3
 800e8d8:	6878      	ldr	r0, [r7, #4]
 800e8da:	f001 faf8 	bl	800fece <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e8de:	e032      	b.n	800e946 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800e8e0:	6839      	ldr	r1, [r7, #0]
 800e8e2:	6878      	ldr	r0, [r7, #4]
 800e8e4:	f001 fa82 	bl	800fdec <USBD_CtlError>
            ret = USBD_FAIL;
 800e8e8:	2303      	movs	r3, #3
 800e8ea:	75fb      	strb	r3, [r7, #23]
          break;
 800e8ec:	e02b      	b.n	800e946 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e8f4:	b2db      	uxtb	r3, r3
 800e8f6:	2b03      	cmp	r3, #3
 800e8f8:	d107      	bne.n	800e90a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800e8fa:	f107 030d 	add.w	r3, r7, #13
 800e8fe:	2201      	movs	r2, #1
 800e900:	4619      	mov	r1, r3
 800e902:	6878      	ldr	r0, [r7, #4]
 800e904:	f001 fae3 	bl	800fece <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e908:	e01d      	b.n	800e946 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800e90a:	6839      	ldr	r1, [r7, #0]
 800e90c:	6878      	ldr	r0, [r7, #4]
 800e90e:	f001 fa6d 	bl	800fdec <USBD_CtlError>
            ret = USBD_FAIL;
 800e912:	2303      	movs	r3, #3
 800e914:	75fb      	strb	r3, [r7, #23]
          break;
 800e916:	e016      	b.n	800e946 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e91e:	b2db      	uxtb	r3, r3
 800e920:	2b03      	cmp	r3, #3
 800e922:	d00f      	beq.n	800e944 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800e924:	6839      	ldr	r1, [r7, #0]
 800e926:	6878      	ldr	r0, [r7, #4]
 800e928:	f001 fa60 	bl	800fdec <USBD_CtlError>
            ret = USBD_FAIL;
 800e92c:	2303      	movs	r3, #3
 800e92e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800e930:	e008      	b.n	800e944 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800e932:	6839      	ldr	r1, [r7, #0]
 800e934:	6878      	ldr	r0, [r7, #4]
 800e936:	f001 fa59 	bl	800fdec <USBD_CtlError>
          ret = USBD_FAIL;
 800e93a:	2303      	movs	r3, #3
 800e93c:	75fb      	strb	r3, [r7, #23]
          break;
 800e93e:	e002      	b.n	800e946 <USBD_CDC_Setup+0x176>
          break;
 800e940:	bf00      	nop
 800e942:	e008      	b.n	800e956 <USBD_CDC_Setup+0x186>
          break;
 800e944:	bf00      	nop
      }
      break;
 800e946:	e006      	b.n	800e956 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800e948:	6839      	ldr	r1, [r7, #0]
 800e94a:	6878      	ldr	r0, [r7, #4]
 800e94c:	f001 fa4e 	bl	800fdec <USBD_CtlError>
      ret = USBD_FAIL;
 800e950:	2303      	movs	r3, #3
 800e952:	75fb      	strb	r3, [r7, #23]
      break;
 800e954:	bf00      	nop
  }

  return (uint8_t)ret;
 800e956:	7dfb      	ldrb	r3, [r7, #23]
}
 800e958:	4618      	mov	r0, r3
 800e95a:	3718      	adds	r7, #24
 800e95c:	46bd      	mov	sp, r7
 800e95e:	bd80      	pop	{r7, pc}

0800e960 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e960:	b580      	push	{r7, lr}
 800e962:	b084      	sub	sp, #16
 800e964:	af00      	add	r7, sp, #0
 800e966:	6078      	str	r0, [r7, #4]
 800e968:	460b      	mov	r3, r1
 800e96a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e972:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d101      	bne.n	800e982 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e97e:	2303      	movs	r3, #3
 800e980:	e04f      	b.n	800ea22 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e988:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800e98a:	78fa      	ldrb	r2, [r7, #3]
 800e98c:	6879      	ldr	r1, [r7, #4]
 800e98e:	4613      	mov	r3, r2
 800e990:	009b      	lsls	r3, r3, #2
 800e992:	4413      	add	r3, r2
 800e994:	009b      	lsls	r3, r3, #2
 800e996:	440b      	add	r3, r1
 800e998:	3318      	adds	r3, #24
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	d029      	beq.n	800e9f4 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800e9a0:	78fa      	ldrb	r2, [r7, #3]
 800e9a2:	6879      	ldr	r1, [r7, #4]
 800e9a4:	4613      	mov	r3, r2
 800e9a6:	009b      	lsls	r3, r3, #2
 800e9a8:	4413      	add	r3, r2
 800e9aa:	009b      	lsls	r3, r3, #2
 800e9ac:	440b      	add	r3, r1
 800e9ae:	3318      	adds	r3, #24
 800e9b0:	681a      	ldr	r2, [r3, #0]
 800e9b2:	78f9      	ldrb	r1, [r7, #3]
 800e9b4:	68f8      	ldr	r0, [r7, #12]
 800e9b6:	460b      	mov	r3, r1
 800e9b8:	00db      	lsls	r3, r3, #3
 800e9ba:	440b      	add	r3, r1
 800e9bc:	009b      	lsls	r3, r3, #2
 800e9be:	4403      	add	r3, r0
 800e9c0:	3348      	adds	r3, #72	; 0x48
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	fbb2 f1f3 	udiv	r1, r2, r3
 800e9c8:	fb01 f303 	mul.w	r3, r1, r3
 800e9cc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	d110      	bne.n	800e9f4 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800e9d2:	78fa      	ldrb	r2, [r7, #3]
 800e9d4:	6879      	ldr	r1, [r7, #4]
 800e9d6:	4613      	mov	r3, r2
 800e9d8:	009b      	lsls	r3, r3, #2
 800e9da:	4413      	add	r3, r2
 800e9dc:	009b      	lsls	r3, r3, #2
 800e9de:	440b      	add	r3, r1
 800e9e0:	3318      	adds	r3, #24
 800e9e2:	2200      	movs	r2, #0
 800e9e4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800e9e6:	78f9      	ldrb	r1, [r7, #3]
 800e9e8:	2300      	movs	r3, #0
 800e9ea:	2200      	movs	r2, #0
 800e9ec:	6878      	ldr	r0, [r7, #4]
 800e9ee:	f004 fe2b 	bl	8013648 <USBD_LL_Transmit>
 800e9f2:	e015      	b.n	800ea20 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800e9f4:	68bb      	ldr	r3, [r7, #8]
 800e9f6:	2200      	movs	r2, #0
 800e9f8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ea02:	691b      	ldr	r3, [r3, #16]
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d00b      	beq.n	800ea20 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ea0e:	691b      	ldr	r3, [r3, #16]
 800ea10:	68ba      	ldr	r2, [r7, #8]
 800ea12:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800ea16:	68ba      	ldr	r2, [r7, #8]
 800ea18:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800ea1c:	78fa      	ldrb	r2, [r7, #3]
 800ea1e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800ea20:	2300      	movs	r3, #0
}
 800ea22:	4618      	mov	r0, r3
 800ea24:	3710      	adds	r7, #16
 800ea26:	46bd      	mov	sp, r7
 800ea28:	bd80      	pop	{r7, pc}

0800ea2a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ea2a:	b580      	push	{r7, lr}
 800ea2c:	b084      	sub	sp, #16
 800ea2e:	af00      	add	r7, sp, #0
 800ea30:	6078      	str	r0, [r7, #4]
 800ea32:	460b      	mov	r3, r1
 800ea34:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ea3c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	d101      	bne.n	800ea4c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ea48:	2303      	movs	r3, #3
 800ea4a:	e015      	b.n	800ea78 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800ea4c:	78fb      	ldrb	r3, [r7, #3]
 800ea4e:	4619      	mov	r1, r3
 800ea50:	6878      	ldr	r0, [r7, #4]
 800ea52:	f004 fe69 	bl	8013728 <USBD_LL_GetRxDataSize>
 800ea56:	4602      	mov	r2, r0
 800ea58:	68fb      	ldr	r3, [r7, #12]
 800ea5a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ea64:	68db      	ldr	r3, [r3, #12]
 800ea66:	68fa      	ldr	r2, [r7, #12]
 800ea68:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800ea6c:	68fa      	ldr	r2, [r7, #12]
 800ea6e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800ea72:	4611      	mov	r1, r2
 800ea74:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800ea76:	2300      	movs	r3, #0
}
 800ea78:	4618      	mov	r0, r3
 800ea7a:	3710      	adds	r7, #16
 800ea7c:	46bd      	mov	sp, r7
 800ea7e:	bd80      	pop	{r7, pc}

0800ea80 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800ea80:	b580      	push	{r7, lr}
 800ea82:	b084      	sub	sp, #16
 800ea84:	af00      	add	r7, sp, #0
 800ea86:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ea8e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ea90:	68fb      	ldr	r3, [r7, #12]
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d101      	bne.n	800ea9a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800ea96:	2303      	movs	r3, #3
 800ea98:	e01b      	b.n	800ead2 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d015      	beq.n	800ead0 <USBD_CDC_EP0_RxReady+0x50>
 800eaa4:	68fb      	ldr	r3, [r7, #12]
 800eaa6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800eaaa:	2bff      	cmp	r3, #255	; 0xff
 800eaac:	d010      	beq.n	800ead0 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800eab4:	689b      	ldr	r3, [r3, #8]
 800eab6:	68fa      	ldr	r2, [r7, #12]
 800eab8:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800eabc:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800eabe:	68fa      	ldr	r2, [r7, #12]
 800eac0:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800eac4:	b292      	uxth	r2, r2
 800eac6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800eac8:	68fb      	ldr	r3, [r7, #12]
 800eaca:	22ff      	movs	r2, #255	; 0xff
 800eacc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800ead0:	2300      	movs	r3, #0
}
 800ead2:	4618      	mov	r0, r3
 800ead4:	3710      	adds	r7, #16
 800ead6:	46bd      	mov	sp, r7
 800ead8:	bd80      	pop	{r7, pc}
	...

0800eadc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800eadc:	b480      	push	{r7}
 800eade:	b083      	sub	sp, #12
 800eae0:	af00      	add	r7, sp, #0
 800eae2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	2243      	movs	r2, #67	; 0x43
 800eae8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800eaea:	4b03      	ldr	r3, [pc, #12]	; (800eaf8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800eaec:	4618      	mov	r0, r3
 800eaee:	370c      	adds	r7, #12
 800eaf0:	46bd      	mov	sp, r7
 800eaf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaf6:	4770      	bx	lr
 800eaf8:	200002b8 	.word	0x200002b8

0800eafc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800eafc:	b480      	push	{r7}
 800eafe:	b083      	sub	sp, #12
 800eb00:	af00      	add	r7, sp, #0
 800eb02:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	2243      	movs	r2, #67	; 0x43
 800eb08:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800eb0a:	4b03      	ldr	r3, [pc, #12]	; (800eb18 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800eb0c:	4618      	mov	r0, r3
 800eb0e:	370c      	adds	r7, #12
 800eb10:	46bd      	mov	sp, r7
 800eb12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb16:	4770      	bx	lr
 800eb18:	20000274 	.word	0x20000274

0800eb1c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800eb1c:	b480      	push	{r7}
 800eb1e:	b083      	sub	sp, #12
 800eb20:	af00      	add	r7, sp, #0
 800eb22:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	2243      	movs	r2, #67	; 0x43
 800eb28:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800eb2a:	4b03      	ldr	r3, [pc, #12]	; (800eb38 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800eb2c:	4618      	mov	r0, r3
 800eb2e:	370c      	adds	r7, #12
 800eb30:	46bd      	mov	sp, r7
 800eb32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb36:	4770      	bx	lr
 800eb38:	200002fc 	.word	0x200002fc

0800eb3c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800eb3c:	b480      	push	{r7}
 800eb3e:	b083      	sub	sp, #12
 800eb40:	af00      	add	r7, sp, #0
 800eb42:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	220a      	movs	r2, #10
 800eb48:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800eb4a:	4b03      	ldr	r3, [pc, #12]	; (800eb58 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800eb4c:	4618      	mov	r0, r3
 800eb4e:	370c      	adds	r7, #12
 800eb50:	46bd      	mov	sp, r7
 800eb52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb56:	4770      	bx	lr
 800eb58:	20000230 	.word	0x20000230

0800eb5c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800eb5c:	b480      	push	{r7}
 800eb5e:	b083      	sub	sp, #12
 800eb60:	af00      	add	r7, sp, #0
 800eb62:	6078      	str	r0, [r7, #4]
 800eb64:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800eb66:	683b      	ldr	r3, [r7, #0]
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	d101      	bne.n	800eb70 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800eb6c:	2303      	movs	r3, #3
 800eb6e:	e004      	b.n	800eb7a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	683a      	ldr	r2, [r7, #0]
 800eb74:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800eb78:	2300      	movs	r3, #0
}
 800eb7a:	4618      	mov	r0, r3
 800eb7c:	370c      	adds	r7, #12
 800eb7e:	46bd      	mov	sp, r7
 800eb80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb84:	4770      	bx	lr

0800eb86 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800eb86:	b480      	push	{r7}
 800eb88:	b087      	sub	sp, #28
 800eb8a:	af00      	add	r7, sp, #0
 800eb8c:	60f8      	str	r0, [r7, #12]
 800eb8e:	60b9      	str	r1, [r7, #8]
 800eb90:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800eb92:	68fb      	ldr	r3, [r7, #12]
 800eb94:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800eb98:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800eb9a:	697b      	ldr	r3, [r7, #20]
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	d101      	bne.n	800eba4 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800eba0:	2303      	movs	r3, #3
 800eba2:	e008      	b.n	800ebb6 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800eba4:	697b      	ldr	r3, [r7, #20]
 800eba6:	68ba      	ldr	r2, [r7, #8]
 800eba8:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800ebac:	697b      	ldr	r3, [r7, #20]
 800ebae:	687a      	ldr	r2, [r7, #4]
 800ebb0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800ebb4:	2300      	movs	r3, #0
}
 800ebb6:	4618      	mov	r0, r3
 800ebb8:	371c      	adds	r7, #28
 800ebba:	46bd      	mov	sp, r7
 800ebbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebc0:	4770      	bx	lr

0800ebc2 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800ebc2:	b480      	push	{r7}
 800ebc4:	b085      	sub	sp, #20
 800ebc6:	af00      	add	r7, sp, #0
 800ebc8:	6078      	str	r0, [r7, #4]
 800ebca:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ebd2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ebd4:	68fb      	ldr	r3, [r7, #12]
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d101      	bne.n	800ebde <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800ebda:	2303      	movs	r3, #3
 800ebdc:	e004      	b.n	800ebe8 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	683a      	ldr	r2, [r7, #0]
 800ebe2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800ebe6:	2300      	movs	r3, #0
}
 800ebe8:	4618      	mov	r0, r3
 800ebea:	3714      	adds	r7, #20
 800ebec:	46bd      	mov	sp, r7
 800ebee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebf2:	4770      	bx	lr

0800ebf4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800ebf4:	b580      	push	{r7, lr}
 800ebf6:	b084      	sub	sp, #16
 800ebf8:	af00      	add	r7, sp, #0
 800ebfa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ec02:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800ec04:	2301      	movs	r3, #1
 800ec06:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d101      	bne.n	800ec16 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ec12:	2303      	movs	r3, #3
 800ec14:	e01a      	b.n	800ec4c <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800ec16:	68bb      	ldr	r3, [r7, #8]
 800ec18:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d114      	bne.n	800ec4a <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800ec20:	68bb      	ldr	r3, [r7, #8]
 800ec22:	2201      	movs	r2, #1
 800ec24:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800ec28:	68bb      	ldr	r3, [r7, #8]
 800ec2a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800ec32:	68bb      	ldr	r3, [r7, #8]
 800ec34:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800ec38:	68bb      	ldr	r3, [r7, #8]
 800ec3a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800ec3e:	2181      	movs	r1, #129	; 0x81
 800ec40:	6878      	ldr	r0, [r7, #4]
 800ec42:	f004 fd01 	bl	8013648 <USBD_LL_Transmit>

    ret = USBD_OK;
 800ec46:	2300      	movs	r3, #0
 800ec48:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800ec4a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec4c:	4618      	mov	r0, r3
 800ec4e:	3710      	adds	r7, #16
 800ec50:	46bd      	mov	sp, r7
 800ec52:	bd80      	pop	{r7, pc}

0800ec54 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800ec54:	b580      	push	{r7, lr}
 800ec56:	b084      	sub	sp, #16
 800ec58:	af00      	add	r7, sp, #0
 800ec5a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ec62:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	d101      	bne.n	800ec72 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800ec6e:	2303      	movs	r3, #3
 800ec70:	e016      	b.n	800eca0 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	7c1b      	ldrb	r3, [r3, #16]
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d109      	bne.n	800ec8e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ec7a:	68fb      	ldr	r3, [r7, #12]
 800ec7c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ec80:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ec84:	2101      	movs	r1, #1
 800ec86:	6878      	ldr	r0, [r7, #4]
 800ec88:	f004 fd16 	bl	80136b8 <USBD_LL_PrepareReceive>
 800ec8c:	e007      	b.n	800ec9e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ec8e:	68fb      	ldr	r3, [r7, #12]
 800ec90:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ec94:	2340      	movs	r3, #64	; 0x40
 800ec96:	2101      	movs	r1, #1
 800ec98:	6878      	ldr	r0, [r7, #4]
 800ec9a:	f004 fd0d 	bl	80136b8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ec9e:	2300      	movs	r3, #0
}
 800eca0:	4618      	mov	r0, r3
 800eca2:	3710      	adds	r7, #16
 800eca4:	46bd      	mov	sp, r7
 800eca6:	bd80      	pop	{r7, pc}

0800eca8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800eca8:	b580      	push	{r7, lr}
 800ecaa:	b086      	sub	sp, #24
 800ecac:	af00      	add	r7, sp, #0
 800ecae:	60f8      	str	r0, [r7, #12]
 800ecb0:	60b9      	str	r1, [r7, #8]
 800ecb2:	4613      	mov	r3, r2
 800ecb4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ecb6:	68fb      	ldr	r3, [r7, #12]
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d101      	bne.n	800ecc0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800ecbc:	2303      	movs	r3, #3
 800ecbe:	e01f      	b.n	800ed00 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800ecc0:	68fb      	ldr	r3, [r7, #12]
 800ecc2:	2200      	movs	r2, #0
 800ecc4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800ecc8:	68fb      	ldr	r3, [r7, #12]
 800ecca:	2200      	movs	r2, #0
 800eccc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	2200      	movs	r2, #0
 800ecd4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ecd8:	68bb      	ldr	r3, [r7, #8]
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	d003      	beq.n	800ece6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800ecde:	68fb      	ldr	r3, [r7, #12]
 800ece0:	68ba      	ldr	r2, [r7, #8]
 800ece2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ece6:	68fb      	ldr	r3, [r7, #12]
 800ece8:	2201      	movs	r2, #1
 800ecea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	79fa      	ldrb	r2, [r7, #7]
 800ecf2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800ecf4:	68f8      	ldr	r0, [r7, #12]
 800ecf6:	f004 fae9 	bl	80132cc <USBD_LL_Init>
 800ecfa:	4603      	mov	r3, r0
 800ecfc:	75fb      	strb	r3, [r7, #23]

  return ret;
 800ecfe:	7dfb      	ldrb	r3, [r7, #23]
}
 800ed00:	4618      	mov	r0, r3
 800ed02:	3718      	adds	r7, #24
 800ed04:	46bd      	mov	sp, r7
 800ed06:	bd80      	pop	{r7, pc}

0800ed08 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ed08:	b580      	push	{r7, lr}
 800ed0a:	b084      	sub	sp, #16
 800ed0c:	af00      	add	r7, sp, #0
 800ed0e:	6078      	str	r0, [r7, #4]
 800ed10:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ed12:	2300      	movs	r3, #0
 800ed14:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800ed16:	683b      	ldr	r3, [r7, #0]
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d101      	bne.n	800ed20 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800ed1c:	2303      	movs	r3, #3
 800ed1e:	e016      	b.n	800ed4e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	683a      	ldr	r2, [r7, #0]
 800ed24:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ed2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	d00b      	beq.n	800ed4c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ed3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed3c:	f107 020e 	add.w	r2, r7, #14
 800ed40:	4610      	mov	r0, r2
 800ed42:	4798      	blx	r3
 800ed44:	4602      	mov	r2, r0
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800ed4c:	2300      	movs	r3, #0
}
 800ed4e:	4618      	mov	r0, r3
 800ed50:	3710      	adds	r7, #16
 800ed52:	46bd      	mov	sp, r7
 800ed54:	bd80      	pop	{r7, pc}

0800ed56 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ed56:	b580      	push	{r7, lr}
 800ed58:	b082      	sub	sp, #8
 800ed5a:	af00      	add	r7, sp, #0
 800ed5c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800ed5e:	6878      	ldr	r0, [r7, #4]
 800ed60:	f004 fafe 	bl	8013360 <USBD_LL_Start>
 800ed64:	4603      	mov	r3, r0
}
 800ed66:	4618      	mov	r0, r3
 800ed68:	3708      	adds	r7, #8
 800ed6a:	46bd      	mov	sp, r7
 800ed6c:	bd80      	pop	{r7, pc}

0800ed6e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800ed6e:	b480      	push	{r7}
 800ed70:	b083      	sub	sp, #12
 800ed72:	af00      	add	r7, sp, #0
 800ed74:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ed76:	2300      	movs	r3, #0
}
 800ed78:	4618      	mov	r0, r3
 800ed7a:	370c      	adds	r7, #12
 800ed7c:	46bd      	mov	sp, r7
 800ed7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed82:	4770      	bx	lr

0800ed84 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ed84:	b580      	push	{r7, lr}
 800ed86:	b084      	sub	sp, #16
 800ed88:	af00      	add	r7, sp, #0
 800ed8a:	6078      	str	r0, [r7, #4]
 800ed8c:	460b      	mov	r3, r1
 800ed8e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800ed90:	2303      	movs	r3, #3
 800ed92:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	d009      	beq.n	800edb2 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eda4:	681b      	ldr	r3, [r3, #0]
 800eda6:	78fa      	ldrb	r2, [r7, #3]
 800eda8:	4611      	mov	r1, r2
 800edaa:	6878      	ldr	r0, [r7, #4]
 800edac:	4798      	blx	r3
 800edae:	4603      	mov	r3, r0
 800edb0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800edb2:	7bfb      	ldrb	r3, [r7, #15]
}
 800edb4:	4618      	mov	r0, r3
 800edb6:	3710      	adds	r7, #16
 800edb8:	46bd      	mov	sp, r7
 800edba:	bd80      	pop	{r7, pc}

0800edbc <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800edbc:	b580      	push	{r7, lr}
 800edbe:	b082      	sub	sp, #8
 800edc0:	af00      	add	r7, sp, #0
 800edc2:	6078      	str	r0, [r7, #4]
 800edc4:	460b      	mov	r3, r1
 800edc6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800edce:	2b00      	cmp	r3, #0
 800edd0:	d007      	beq.n	800ede2 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800edd8:	685b      	ldr	r3, [r3, #4]
 800edda:	78fa      	ldrb	r2, [r7, #3]
 800eddc:	4611      	mov	r1, r2
 800edde:	6878      	ldr	r0, [r7, #4]
 800ede0:	4798      	blx	r3
  }

  return USBD_OK;
 800ede2:	2300      	movs	r3, #0
}
 800ede4:	4618      	mov	r0, r3
 800ede6:	3708      	adds	r7, #8
 800ede8:	46bd      	mov	sp, r7
 800edea:	bd80      	pop	{r7, pc}

0800edec <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800edec:	b580      	push	{r7, lr}
 800edee:	b084      	sub	sp, #16
 800edf0:	af00      	add	r7, sp, #0
 800edf2:	6078      	str	r0, [r7, #4]
 800edf4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800edfc:	6839      	ldr	r1, [r7, #0]
 800edfe:	4618      	mov	r0, r3
 800ee00:	f000 ffba 	bl	800fd78 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	2201      	movs	r2, #1
 800ee08:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800ee12:	461a      	mov	r2, r3
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ee20:	f003 031f 	and.w	r3, r3, #31
 800ee24:	2b02      	cmp	r3, #2
 800ee26:	d01a      	beq.n	800ee5e <USBD_LL_SetupStage+0x72>
 800ee28:	2b02      	cmp	r3, #2
 800ee2a:	d822      	bhi.n	800ee72 <USBD_LL_SetupStage+0x86>
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	d002      	beq.n	800ee36 <USBD_LL_SetupStage+0x4a>
 800ee30:	2b01      	cmp	r3, #1
 800ee32:	d00a      	beq.n	800ee4a <USBD_LL_SetupStage+0x5e>
 800ee34:	e01d      	b.n	800ee72 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ee3c:	4619      	mov	r1, r3
 800ee3e:	6878      	ldr	r0, [r7, #4]
 800ee40:	f000 fa62 	bl	800f308 <USBD_StdDevReq>
 800ee44:	4603      	mov	r3, r0
 800ee46:	73fb      	strb	r3, [r7, #15]
      break;
 800ee48:	e020      	b.n	800ee8c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ee50:	4619      	mov	r1, r3
 800ee52:	6878      	ldr	r0, [r7, #4]
 800ee54:	f000 fac6 	bl	800f3e4 <USBD_StdItfReq>
 800ee58:	4603      	mov	r3, r0
 800ee5a:	73fb      	strb	r3, [r7, #15]
      break;
 800ee5c:	e016      	b.n	800ee8c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ee64:	4619      	mov	r1, r3
 800ee66:	6878      	ldr	r0, [r7, #4]
 800ee68:	f000 fb05 	bl	800f476 <USBD_StdEPReq>
 800ee6c:	4603      	mov	r3, r0
 800ee6e:	73fb      	strb	r3, [r7, #15]
      break;
 800ee70:	e00c      	b.n	800ee8c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ee78:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ee7c:	b2db      	uxtb	r3, r3
 800ee7e:	4619      	mov	r1, r3
 800ee80:	6878      	ldr	r0, [r7, #4]
 800ee82:	f004 fb13 	bl	80134ac <USBD_LL_StallEP>
 800ee86:	4603      	mov	r3, r0
 800ee88:	73fb      	strb	r3, [r7, #15]
      break;
 800ee8a:	bf00      	nop
  }

  return ret;
 800ee8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee8e:	4618      	mov	r0, r3
 800ee90:	3710      	adds	r7, #16
 800ee92:	46bd      	mov	sp, r7
 800ee94:	bd80      	pop	{r7, pc}

0800ee96 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ee96:	b580      	push	{r7, lr}
 800ee98:	b086      	sub	sp, #24
 800ee9a:	af00      	add	r7, sp, #0
 800ee9c:	60f8      	str	r0, [r7, #12]
 800ee9e:	460b      	mov	r3, r1
 800eea0:	607a      	str	r2, [r7, #4]
 800eea2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800eea4:	7afb      	ldrb	r3, [r7, #11]
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	d138      	bne.n	800ef1c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800eeb0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800eeb2:	68fb      	ldr	r3, [r7, #12]
 800eeb4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800eeb8:	2b03      	cmp	r3, #3
 800eeba:	d14a      	bne.n	800ef52 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800eebc:	693b      	ldr	r3, [r7, #16]
 800eebe:	689a      	ldr	r2, [r3, #8]
 800eec0:	693b      	ldr	r3, [r7, #16]
 800eec2:	68db      	ldr	r3, [r3, #12]
 800eec4:	429a      	cmp	r2, r3
 800eec6:	d913      	bls.n	800eef0 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800eec8:	693b      	ldr	r3, [r7, #16]
 800eeca:	689a      	ldr	r2, [r3, #8]
 800eecc:	693b      	ldr	r3, [r7, #16]
 800eece:	68db      	ldr	r3, [r3, #12]
 800eed0:	1ad2      	subs	r2, r2, r3
 800eed2:	693b      	ldr	r3, [r7, #16]
 800eed4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800eed6:	693b      	ldr	r3, [r7, #16]
 800eed8:	68da      	ldr	r2, [r3, #12]
 800eeda:	693b      	ldr	r3, [r7, #16]
 800eedc:	689b      	ldr	r3, [r3, #8]
 800eede:	4293      	cmp	r3, r2
 800eee0:	bf28      	it	cs
 800eee2:	4613      	movcs	r3, r2
 800eee4:	461a      	mov	r2, r3
 800eee6:	6879      	ldr	r1, [r7, #4]
 800eee8:	68f8      	ldr	r0, [r7, #12]
 800eeea:	f001 f839 	bl	800ff60 <USBD_CtlContinueRx>
 800eeee:	e030      	b.n	800ef52 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eef0:	68fb      	ldr	r3, [r7, #12]
 800eef2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eef6:	b2db      	uxtb	r3, r3
 800eef8:	2b03      	cmp	r3, #3
 800eefa:	d10b      	bne.n	800ef14 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800eefc:	68fb      	ldr	r3, [r7, #12]
 800eefe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ef02:	691b      	ldr	r3, [r3, #16]
 800ef04:	2b00      	cmp	r3, #0
 800ef06:	d005      	beq.n	800ef14 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800ef08:	68fb      	ldr	r3, [r7, #12]
 800ef0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ef0e:	691b      	ldr	r3, [r3, #16]
 800ef10:	68f8      	ldr	r0, [r7, #12]
 800ef12:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800ef14:	68f8      	ldr	r0, [r7, #12]
 800ef16:	f001 f834 	bl	800ff82 <USBD_CtlSendStatus>
 800ef1a:	e01a      	b.n	800ef52 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ef1c:	68fb      	ldr	r3, [r7, #12]
 800ef1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ef22:	b2db      	uxtb	r3, r3
 800ef24:	2b03      	cmp	r3, #3
 800ef26:	d114      	bne.n	800ef52 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800ef28:	68fb      	ldr	r3, [r7, #12]
 800ef2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ef2e:	699b      	ldr	r3, [r3, #24]
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	d00e      	beq.n	800ef52 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800ef34:	68fb      	ldr	r3, [r7, #12]
 800ef36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ef3a:	699b      	ldr	r3, [r3, #24]
 800ef3c:	7afa      	ldrb	r2, [r7, #11]
 800ef3e:	4611      	mov	r1, r2
 800ef40:	68f8      	ldr	r0, [r7, #12]
 800ef42:	4798      	blx	r3
 800ef44:	4603      	mov	r3, r0
 800ef46:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800ef48:	7dfb      	ldrb	r3, [r7, #23]
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d001      	beq.n	800ef52 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800ef4e:	7dfb      	ldrb	r3, [r7, #23]
 800ef50:	e000      	b.n	800ef54 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800ef52:	2300      	movs	r3, #0
}
 800ef54:	4618      	mov	r0, r3
 800ef56:	3718      	adds	r7, #24
 800ef58:	46bd      	mov	sp, r7
 800ef5a:	bd80      	pop	{r7, pc}

0800ef5c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ef5c:	b580      	push	{r7, lr}
 800ef5e:	b086      	sub	sp, #24
 800ef60:	af00      	add	r7, sp, #0
 800ef62:	60f8      	str	r0, [r7, #12]
 800ef64:	460b      	mov	r3, r1
 800ef66:	607a      	str	r2, [r7, #4]
 800ef68:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800ef6a:	7afb      	ldrb	r3, [r7, #11]
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	d16b      	bne.n	800f048 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800ef70:	68fb      	ldr	r3, [r7, #12]
 800ef72:	3314      	adds	r3, #20
 800ef74:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ef76:	68fb      	ldr	r3, [r7, #12]
 800ef78:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ef7c:	2b02      	cmp	r3, #2
 800ef7e:	d156      	bne.n	800f02e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800ef80:	693b      	ldr	r3, [r7, #16]
 800ef82:	689a      	ldr	r2, [r3, #8]
 800ef84:	693b      	ldr	r3, [r7, #16]
 800ef86:	68db      	ldr	r3, [r3, #12]
 800ef88:	429a      	cmp	r2, r3
 800ef8a:	d914      	bls.n	800efb6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ef8c:	693b      	ldr	r3, [r7, #16]
 800ef8e:	689a      	ldr	r2, [r3, #8]
 800ef90:	693b      	ldr	r3, [r7, #16]
 800ef92:	68db      	ldr	r3, [r3, #12]
 800ef94:	1ad2      	subs	r2, r2, r3
 800ef96:	693b      	ldr	r3, [r7, #16]
 800ef98:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800ef9a:	693b      	ldr	r3, [r7, #16]
 800ef9c:	689b      	ldr	r3, [r3, #8]
 800ef9e:	461a      	mov	r2, r3
 800efa0:	6879      	ldr	r1, [r7, #4]
 800efa2:	68f8      	ldr	r0, [r7, #12]
 800efa4:	f000 ffae 	bl	800ff04 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800efa8:	2300      	movs	r3, #0
 800efaa:	2200      	movs	r2, #0
 800efac:	2100      	movs	r1, #0
 800efae:	68f8      	ldr	r0, [r7, #12]
 800efb0:	f004 fb82 	bl	80136b8 <USBD_LL_PrepareReceive>
 800efb4:	e03b      	b.n	800f02e <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800efb6:	693b      	ldr	r3, [r7, #16]
 800efb8:	68da      	ldr	r2, [r3, #12]
 800efba:	693b      	ldr	r3, [r7, #16]
 800efbc:	689b      	ldr	r3, [r3, #8]
 800efbe:	429a      	cmp	r2, r3
 800efc0:	d11c      	bne.n	800effc <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800efc2:	693b      	ldr	r3, [r7, #16]
 800efc4:	685a      	ldr	r2, [r3, #4]
 800efc6:	693b      	ldr	r3, [r7, #16]
 800efc8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800efca:	429a      	cmp	r2, r3
 800efcc:	d316      	bcc.n	800effc <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800efce:	693b      	ldr	r3, [r7, #16]
 800efd0:	685a      	ldr	r2, [r3, #4]
 800efd2:	68fb      	ldr	r3, [r7, #12]
 800efd4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800efd8:	429a      	cmp	r2, r3
 800efda:	d20f      	bcs.n	800effc <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800efdc:	2200      	movs	r2, #0
 800efde:	2100      	movs	r1, #0
 800efe0:	68f8      	ldr	r0, [r7, #12]
 800efe2:	f000 ff8f 	bl	800ff04 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800efe6:	68fb      	ldr	r3, [r7, #12]
 800efe8:	2200      	movs	r2, #0
 800efea:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800efee:	2300      	movs	r3, #0
 800eff0:	2200      	movs	r2, #0
 800eff2:	2100      	movs	r1, #0
 800eff4:	68f8      	ldr	r0, [r7, #12]
 800eff6:	f004 fb5f 	bl	80136b8 <USBD_LL_PrepareReceive>
 800effa:	e018      	b.n	800f02e <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800effc:	68fb      	ldr	r3, [r7, #12]
 800effe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f002:	b2db      	uxtb	r3, r3
 800f004:	2b03      	cmp	r3, #3
 800f006:	d10b      	bne.n	800f020 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f00e:	68db      	ldr	r3, [r3, #12]
 800f010:	2b00      	cmp	r3, #0
 800f012:	d005      	beq.n	800f020 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800f014:	68fb      	ldr	r3, [r7, #12]
 800f016:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f01a:	68db      	ldr	r3, [r3, #12]
 800f01c:	68f8      	ldr	r0, [r7, #12]
 800f01e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800f020:	2180      	movs	r1, #128	; 0x80
 800f022:	68f8      	ldr	r0, [r7, #12]
 800f024:	f004 fa42 	bl	80134ac <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800f028:	68f8      	ldr	r0, [r7, #12]
 800f02a:	f000 ffbd 	bl	800ffa8 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800f02e:	68fb      	ldr	r3, [r7, #12]
 800f030:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800f034:	2b01      	cmp	r3, #1
 800f036:	d122      	bne.n	800f07e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800f038:	68f8      	ldr	r0, [r7, #12]
 800f03a:	f7ff fe98 	bl	800ed6e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800f03e:	68fb      	ldr	r3, [r7, #12]
 800f040:	2200      	movs	r2, #0
 800f042:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800f046:	e01a      	b.n	800f07e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f048:	68fb      	ldr	r3, [r7, #12]
 800f04a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f04e:	b2db      	uxtb	r3, r3
 800f050:	2b03      	cmp	r3, #3
 800f052:	d114      	bne.n	800f07e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800f054:	68fb      	ldr	r3, [r7, #12]
 800f056:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f05a:	695b      	ldr	r3, [r3, #20]
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	d00e      	beq.n	800f07e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800f060:	68fb      	ldr	r3, [r7, #12]
 800f062:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f066:	695b      	ldr	r3, [r3, #20]
 800f068:	7afa      	ldrb	r2, [r7, #11]
 800f06a:	4611      	mov	r1, r2
 800f06c:	68f8      	ldr	r0, [r7, #12]
 800f06e:	4798      	blx	r3
 800f070:	4603      	mov	r3, r0
 800f072:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800f074:	7dfb      	ldrb	r3, [r7, #23]
 800f076:	2b00      	cmp	r3, #0
 800f078:	d001      	beq.n	800f07e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800f07a:	7dfb      	ldrb	r3, [r7, #23]
 800f07c:	e000      	b.n	800f080 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800f07e:	2300      	movs	r3, #0
}
 800f080:	4618      	mov	r0, r3
 800f082:	3718      	adds	r7, #24
 800f084:	46bd      	mov	sp, r7
 800f086:	bd80      	pop	{r7, pc}

0800f088 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800f088:	b580      	push	{r7, lr}
 800f08a:	b082      	sub	sp, #8
 800f08c:	af00      	add	r7, sp, #0
 800f08e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	2201      	movs	r2, #1
 800f094:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	2200      	movs	r2, #0
 800f09c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	2200      	movs	r2, #0
 800f0a4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	2200      	movs	r2, #0
 800f0aa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d101      	bne.n	800f0bc <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800f0b8:	2303      	movs	r3, #3
 800f0ba:	e02f      	b.n	800f11c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	d00f      	beq.n	800f0e6 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f0cc:	685b      	ldr	r3, [r3, #4]
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	d009      	beq.n	800f0e6 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f0d8:	685b      	ldr	r3, [r3, #4]
 800f0da:	687a      	ldr	r2, [r7, #4]
 800f0dc:	6852      	ldr	r2, [r2, #4]
 800f0de:	b2d2      	uxtb	r2, r2
 800f0e0:	4611      	mov	r1, r2
 800f0e2:	6878      	ldr	r0, [r7, #4]
 800f0e4:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f0e6:	2340      	movs	r3, #64	; 0x40
 800f0e8:	2200      	movs	r2, #0
 800f0ea:	2100      	movs	r1, #0
 800f0ec:	6878      	ldr	r0, [r7, #4]
 800f0ee:	f004 f969 	bl	80133c4 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	2201      	movs	r2, #1
 800f0f6:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	2240      	movs	r2, #64	; 0x40
 800f0fe:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f102:	2340      	movs	r3, #64	; 0x40
 800f104:	2200      	movs	r2, #0
 800f106:	2180      	movs	r1, #128	; 0x80
 800f108:	6878      	ldr	r0, [r7, #4]
 800f10a:	f004 f95b 	bl	80133c4 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	2201      	movs	r2, #1
 800f112:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	2240      	movs	r2, #64	; 0x40
 800f118:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800f11a:	2300      	movs	r3, #0
}
 800f11c:	4618      	mov	r0, r3
 800f11e:	3708      	adds	r7, #8
 800f120:	46bd      	mov	sp, r7
 800f122:	bd80      	pop	{r7, pc}

0800f124 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800f124:	b480      	push	{r7}
 800f126:	b083      	sub	sp, #12
 800f128:	af00      	add	r7, sp, #0
 800f12a:	6078      	str	r0, [r7, #4]
 800f12c:	460b      	mov	r3, r1
 800f12e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	78fa      	ldrb	r2, [r7, #3]
 800f134:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800f136:	2300      	movs	r3, #0
}
 800f138:	4618      	mov	r0, r3
 800f13a:	370c      	adds	r7, #12
 800f13c:	46bd      	mov	sp, r7
 800f13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f142:	4770      	bx	lr

0800f144 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800f144:	b480      	push	{r7}
 800f146:	b083      	sub	sp, #12
 800f148:	af00      	add	r7, sp, #0
 800f14a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f152:	b2da      	uxtb	r2, r3
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	2204      	movs	r2, #4
 800f15e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800f162:	2300      	movs	r3, #0
}
 800f164:	4618      	mov	r0, r3
 800f166:	370c      	adds	r7, #12
 800f168:	46bd      	mov	sp, r7
 800f16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f16e:	4770      	bx	lr

0800f170 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800f170:	b480      	push	{r7}
 800f172:	b083      	sub	sp, #12
 800f174:	af00      	add	r7, sp, #0
 800f176:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f17e:	b2db      	uxtb	r3, r3
 800f180:	2b04      	cmp	r3, #4
 800f182:	d106      	bne.n	800f192 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800f18a:	b2da      	uxtb	r2, r3
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800f192:	2300      	movs	r3, #0
}
 800f194:	4618      	mov	r0, r3
 800f196:	370c      	adds	r7, #12
 800f198:	46bd      	mov	sp, r7
 800f19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f19e:	4770      	bx	lr

0800f1a0 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800f1a0:	b580      	push	{r7, lr}
 800f1a2:	b082      	sub	sp, #8
 800f1a4:	af00      	add	r7, sp, #0
 800f1a6:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	d101      	bne.n	800f1b6 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800f1b2:	2303      	movs	r3, #3
 800f1b4:	e012      	b.n	800f1dc <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f1bc:	b2db      	uxtb	r3, r3
 800f1be:	2b03      	cmp	r3, #3
 800f1c0:	d10b      	bne.n	800f1da <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f1c8:	69db      	ldr	r3, [r3, #28]
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	d005      	beq.n	800f1da <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f1d4:	69db      	ldr	r3, [r3, #28]
 800f1d6:	6878      	ldr	r0, [r7, #4]
 800f1d8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800f1da:	2300      	movs	r3, #0
}
 800f1dc:	4618      	mov	r0, r3
 800f1de:	3708      	adds	r7, #8
 800f1e0:	46bd      	mov	sp, r7
 800f1e2:	bd80      	pop	{r7, pc}

0800f1e4 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800f1e4:	b580      	push	{r7, lr}
 800f1e6:	b082      	sub	sp, #8
 800f1e8:	af00      	add	r7, sp, #0
 800f1ea:	6078      	str	r0, [r7, #4]
 800f1ec:	460b      	mov	r3, r1
 800f1ee:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f1f6:	2b00      	cmp	r3, #0
 800f1f8:	d101      	bne.n	800f1fe <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800f1fa:	2303      	movs	r3, #3
 800f1fc:	e014      	b.n	800f228 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f204:	b2db      	uxtb	r3, r3
 800f206:	2b03      	cmp	r3, #3
 800f208:	d10d      	bne.n	800f226 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f210:	6a1b      	ldr	r3, [r3, #32]
 800f212:	2b00      	cmp	r3, #0
 800f214:	d007      	beq.n	800f226 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f21c:	6a1b      	ldr	r3, [r3, #32]
 800f21e:	78fa      	ldrb	r2, [r7, #3]
 800f220:	4611      	mov	r1, r2
 800f222:	6878      	ldr	r0, [r7, #4]
 800f224:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800f226:	2300      	movs	r3, #0
}
 800f228:	4618      	mov	r0, r3
 800f22a:	3708      	adds	r7, #8
 800f22c:	46bd      	mov	sp, r7
 800f22e:	bd80      	pop	{r7, pc}

0800f230 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800f230:	b580      	push	{r7, lr}
 800f232:	b082      	sub	sp, #8
 800f234:	af00      	add	r7, sp, #0
 800f236:	6078      	str	r0, [r7, #4]
 800f238:	460b      	mov	r3, r1
 800f23a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f242:	2b00      	cmp	r3, #0
 800f244:	d101      	bne.n	800f24a <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800f246:	2303      	movs	r3, #3
 800f248:	e014      	b.n	800f274 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f250:	b2db      	uxtb	r3, r3
 800f252:	2b03      	cmp	r3, #3
 800f254:	d10d      	bne.n	800f272 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f25c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f25e:	2b00      	cmp	r3, #0
 800f260:	d007      	beq.n	800f272 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f26a:	78fa      	ldrb	r2, [r7, #3]
 800f26c:	4611      	mov	r1, r2
 800f26e:	6878      	ldr	r0, [r7, #4]
 800f270:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800f272:	2300      	movs	r3, #0
}
 800f274:	4618      	mov	r0, r3
 800f276:	3708      	adds	r7, #8
 800f278:	46bd      	mov	sp, r7
 800f27a:	bd80      	pop	{r7, pc}

0800f27c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800f27c:	b480      	push	{r7}
 800f27e:	b083      	sub	sp, #12
 800f280:	af00      	add	r7, sp, #0
 800f282:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800f284:	2300      	movs	r3, #0
}
 800f286:	4618      	mov	r0, r3
 800f288:	370c      	adds	r7, #12
 800f28a:	46bd      	mov	sp, r7
 800f28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f290:	4770      	bx	lr

0800f292 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800f292:	b580      	push	{r7, lr}
 800f294:	b082      	sub	sp, #8
 800f296:	af00      	add	r7, sp, #0
 800f298:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	2201      	movs	r2, #1
 800f29e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	d009      	beq.n	800f2c0 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f2b2:	685b      	ldr	r3, [r3, #4]
 800f2b4:	687a      	ldr	r2, [r7, #4]
 800f2b6:	6852      	ldr	r2, [r2, #4]
 800f2b8:	b2d2      	uxtb	r2, r2
 800f2ba:	4611      	mov	r1, r2
 800f2bc:	6878      	ldr	r0, [r7, #4]
 800f2be:	4798      	blx	r3
  }

  return USBD_OK;
 800f2c0:	2300      	movs	r3, #0
}
 800f2c2:	4618      	mov	r0, r3
 800f2c4:	3708      	adds	r7, #8
 800f2c6:	46bd      	mov	sp, r7
 800f2c8:	bd80      	pop	{r7, pc}

0800f2ca <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800f2ca:	b480      	push	{r7}
 800f2cc:	b087      	sub	sp, #28
 800f2ce:	af00      	add	r7, sp, #0
 800f2d0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800f2d6:	697b      	ldr	r3, [r7, #20]
 800f2d8:	781b      	ldrb	r3, [r3, #0]
 800f2da:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800f2dc:	697b      	ldr	r3, [r7, #20]
 800f2de:	3301      	adds	r3, #1
 800f2e0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800f2e2:	697b      	ldr	r3, [r7, #20]
 800f2e4:	781b      	ldrb	r3, [r3, #0]
 800f2e6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800f2e8:	8a3b      	ldrh	r3, [r7, #16]
 800f2ea:	021b      	lsls	r3, r3, #8
 800f2ec:	b21a      	sxth	r2, r3
 800f2ee:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f2f2:	4313      	orrs	r3, r2
 800f2f4:	b21b      	sxth	r3, r3
 800f2f6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800f2f8:	89fb      	ldrh	r3, [r7, #14]
}
 800f2fa:	4618      	mov	r0, r3
 800f2fc:	371c      	adds	r7, #28
 800f2fe:	46bd      	mov	sp, r7
 800f300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f304:	4770      	bx	lr
	...

0800f308 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f308:	b580      	push	{r7, lr}
 800f30a:	b084      	sub	sp, #16
 800f30c:	af00      	add	r7, sp, #0
 800f30e:	6078      	str	r0, [r7, #4]
 800f310:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f312:	2300      	movs	r3, #0
 800f314:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f316:	683b      	ldr	r3, [r7, #0]
 800f318:	781b      	ldrb	r3, [r3, #0]
 800f31a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f31e:	2b40      	cmp	r3, #64	; 0x40
 800f320:	d005      	beq.n	800f32e <USBD_StdDevReq+0x26>
 800f322:	2b40      	cmp	r3, #64	; 0x40
 800f324:	d853      	bhi.n	800f3ce <USBD_StdDevReq+0xc6>
 800f326:	2b00      	cmp	r3, #0
 800f328:	d00b      	beq.n	800f342 <USBD_StdDevReq+0x3a>
 800f32a:	2b20      	cmp	r3, #32
 800f32c:	d14f      	bne.n	800f3ce <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f334:	689b      	ldr	r3, [r3, #8]
 800f336:	6839      	ldr	r1, [r7, #0]
 800f338:	6878      	ldr	r0, [r7, #4]
 800f33a:	4798      	blx	r3
 800f33c:	4603      	mov	r3, r0
 800f33e:	73fb      	strb	r3, [r7, #15]
      break;
 800f340:	e04a      	b.n	800f3d8 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f342:	683b      	ldr	r3, [r7, #0]
 800f344:	785b      	ldrb	r3, [r3, #1]
 800f346:	2b09      	cmp	r3, #9
 800f348:	d83b      	bhi.n	800f3c2 <USBD_StdDevReq+0xba>
 800f34a:	a201      	add	r2, pc, #4	; (adr r2, 800f350 <USBD_StdDevReq+0x48>)
 800f34c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f350:	0800f3a5 	.word	0x0800f3a5
 800f354:	0800f3b9 	.word	0x0800f3b9
 800f358:	0800f3c3 	.word	0x0800f3c3
 800f35c:	0800f3af 	.word	0x0800f3af
 800f360:	0800f3c3 	.word	0x0800f3c3
 800f364:	0800f383 	.word	0x0800f383
 800f368:	0800f379 	.word	0x0800f379
 800f36c:	0800f3c3 	.word	0x0800f3c3
 800f370:	0800f39b 	.word	0x0800f39b
 800f374:	0800f38d 	.word	0x0800f38d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800f378:	6839      	ldr	r1, [r7, #0]
 800f37a:	6878      	ldr	r0, [r7, #4]
 800f37c:	f000 f9de 	bl	800f73c <USBD_GetDescriptor>
          break;
 800f380:	e024      	b.n	800f3cc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800f382:	6839      	ldr	r1, [r7, #0]
 800f384:	6878      	ldr	r0, [r7, #4]
 800f386:	f000 fb6d 	bl	800fa64 <USBD_SetAddress>
          break;
 800f38a:	e01f      	b.n	800f3cc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800f38c:	6839      	ldr	r1, [r7, #0]
 800f38e:	6878      	ldr	r0, [r7, #4]
 800f390:	f000 fbac 	bl	800faec <USBD_SetConfig>
 800f394:	4603      	mov	r3, r0
 800f396:	73fb      	strb	r3, [r7, #15]
          break;
 800f398:	e018      	b.n	800f3cc <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800f39a:	6839      	ldr	r1, [r7, #0]
 800f39c:	6878      	ldr	r0, [r7, #4]
 800f39e:	f000 fc4b 	bl	800fc38 <USBD_GetConfig>
          break;
 800f3a2:	e013      	b.n	800f3cc <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800f3a4:	6839      	ldr	r1, [r7, #0]
 800f3a6:	6878      	ldr	r0, [r7, #4]
 800f3a8:	f000 fc7c 	bl	800fca4 <USBD_GetStatus>
          break;
 800f3ac:	e00e      	b.n	800f3cc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800f3ae:	6839      	ldr	r1, [r7, #0]
 800f3b0:	6878      	ldr	r0, [r7, #4]
 800f3b2:	f000 fcab 	bl	800fd0c <USBD_SetFeature>
          break;
 800f3b6:	e009      	b.n	800f3cc <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800f3b8:	6839      	ldr	r1, [r7, #0]
 800f3ba:	6878      	ldr	r0, [r7, #4]
 800f3bc:	f000 fcba 	bl	800fd34 <USBD_ClrFeature>
          break;
 800f3c0:	e004      	b.n	800f3cc <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800f3c2:	6839      	ldr	r1, [r7, #0]
 800f3c4:	6878      	ldr	r0, [r7, #4]
 800f3c6:	f000 fd11 	bl	800fdec <USBD_CtlError>
          break;
 800f3ca:	bf00      	nop
      }
      break;
 800f3cc:	e004      	b.n	800f3d8 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800f3ce:	6839      	ldr	r1, [r7, #0]
 800f3d0:	6878      	ldr	r0, [r7, #4]
 800f3d2:	f000 fd0b 	bl	800fdec <USBD_CtlError>
      break;
 800f3d6:	bf00      	nop
  }

  return ret;
 800f3d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800f3da:	4618      	mov	r0, r3
 800f3dc:	3710      	adds	r7, #16
 800f3de:	46bd      	mov	sp, r7
 800f3e0:	bd80      	pop	{r7, pc}
 800f3e2:	bf00      	nop

0800f3e4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f3e4:	b580      	push	{r7, lr}
 800f3e6:	b084      	sub	sp, #16
 800f3e8:	af00      	add	r7, sp, #0
 800f3ea:	6078      	str	r0, [r7, #4]
 800f3ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f3ee:	2300      	movs	r3, #0
 800f3f0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f3f2:	683b      	ldr	r3, [r7, #0]
 800f3f4:	781b      	ldrb	r3, [r3, #0]
 800f3f6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f3fa:	2b40      	cmp	r3, #64	; 0x40
 800f3fc:	d005      	beq.n	800f40a <USBD_StdItfReq+0x26>
 800f3fe:	2b40      	cmp	r3, #64	; 0x40
 800f400:	d82f      	bhi.n	800f462 <USBD_StdItfReq+0x7e>
 800f402:	2b00      	cmp	r3, #0
 800f404:	d001      	beq.n	800f40a <USBD_StdItfReq+0x26>
 800f406:	2b20      	cmp	r3, #32
 800f408:	d12b      	bne.n	800f462 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f410:	b2db      	uxtb	r3, r3
 800f412:	3b01      	subs	r3, #1
 800f414:	2b02      	cmp	r3, #2
 800f416:	d81d      	bhi.n	800f454 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800f418:	683b      	ldr	r3, [r7, #0]
 800f41a:	889b      	ldrh	r3, [r3, #4]
 800f41c:	b2db      	uxtb	r3, r3
 800f41e:	2b01      	cmp	r3, #1
 800f420:	d813      	bhi.n	800f44a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f428:	689b      	ldr	r3, [r3, #8]
 800f42a:	6839      	ldr	r1, [r7, #0]
 800f42c:	6878      	ldr	r0, [r7, #4]
 800f42e:	4798      	blx	r3
 800f430:	4603      	mov	r3, r0
 800f432:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800f434:	683b      	ldr	r3, [r7, #0]
 800f436:	88db      	ldrh	r3, [r3, #6]
 800f438:	2b00      	cmp	r3, #0
 800f43a:	d110      	bne.n	800f45e <USBD_StdItfReq+0x7a>
 800f43c:	7bfb      	ldrb	r3, [r7, #15]
 800f43e:	2b00      	cmp	r3, #0
 800f440:	d10d      	bne.n	800f45e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800f442:	6878      	ldr	r0, [r7, #4]
 800f444:	f000 fd9d 	bl	800ff82 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800f448:	e009      	b.n	800f45e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800f44a:	6839      	ldr	r1, [r7, #0]
 800f44c:	6878      	ldr	r0, [r7, #4]
 800f44e:	f000 fccd 	bl	800fdec <USBD_CtlError>
          break;
 800f452:	e004      	b.n	800f45e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800f454:	6839      	ldr	r1, [r7, #0]
 800f456:	6878      	ldr	r0, [r7, #4]
 800f458:	f000 fcc8 	bl	800fdec <USBD_CtlError>
          break;
 800f45c:	e000      	b.n	800f460 <USBD_StdItfReq+0x7c>
          break;
 800f45e:	bf00      	nop
      }
      break;
 800f460:	e004      	b.n	800f46c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800f462:	6839      	ldr	r1, [r7, #0]
 800f464:	6878      	ldr	r0, [r7, #4]
 800f466:	f000 fcc1 	bl	800fdec <USBD_CtlError>
      break;
 800f46a:	bf00      	nop
  }

  return ret;
 800f46c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f46e:	4618      	mov	r0, r3
 800f470:	3710      	adds	r7, #16
 800f472:	46bd      	mov	sp, r7
 800f474:	bd80      	pop	{r7, pc}

0800f476 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f476:	b580      	push	{r7, lr}
 800f478:	b084      	sub	sp, #16
 800f47a:	af00      	add	r7, sp, #0
 800f47c:	6078      	str	r0, [r7, #4]
 800f47e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800f480:	2300      	movs	r3, #0
 800f482:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800f484:	683b      	ldr	r3, [r7, #0]
 800f486:	889b      	ldrh	r3, [r3, #4]
 800f488:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f48a:	683b      	ldr	r3, [r7, #0]
 800f48c:	781b      	ldrb	r3, [r3, #0]
 800f48e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f492:	2b40      	cmp	r3, #64	; 0x40
 800f494:	d007      	beq.n	800f4a6 <USBD_StdEPReq+0x30>
 800f496:	2b40      	cmp	r3, #64	; 0x40
 800f498:	f200 8145 	bhi.w	800f726 <USBD_StdEPReq+0x2b0>
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	d00c      	beq.n	800f4ba <USBD_StdEPReq+0x44>
 800f4a0:	2b20      	cmp	r3, #32
 800f4a2:	f040 8140 	bne.w	800f726 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f4ac:	689b      	ldr	r3, [r3, #8]
 800f4ae:	6839      	ldr	r1, [r7, #0]
 800f4b0:	6878      	ldr	r0, [r7, #4]
 800f4b2:	4798      	blx	r3
 800f4b4:	4603      	mov	r3, r0
 800f4b6:	73fb      	strb	r3, [r7, #15]
      break;
 800f4b8:	e13a      	b.n	800f730 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f4ba:	683b      	ldr	r3, [r7, #0]
 800f4bc:	785b      	ldrb	r3, [r3, #1]
 800f4be:	2b03      	cmp	r3, #3
 800f4c0:	d007      	beq.n	800f4d2 <USBD_StdEPReq+0x5c>
 800f4c2:	2b03      	cmp	r3, #3
 800f4c4:	f300 8129 	bgt.w	800f71a <USBD_StdEPReq+0x2a4>
 800f4c8:	2b00      	cmp	r3, #0
 800f4ca:	d07f      	beq.n	800f5cc <USBD_StdEPReq+0x156>
 800f4cc:	2b01      	cmp	r3, #1
 800f4ce:	d03c      	beq.n	800f54a <USBD_StdEPReq+0xd4>
 800f4d0:	e123      	b.n	800f71a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f4d8:	b2db      	uxtb	r3, r3
 800f4da:	2b02      	cmp	r3, #2
 800f4dc:	d002      	beq.n	800f4e4 <USBD_StdEPReq+0x6e>
 800f4de:	2b03      	cmp	r3, #3
 800f4e0:	d016      	beq.n	800f510 <USBD_StdEPReq+0x9a>
 800f4e2:	e02c      	b.n	800f53e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f4e4:	7bbb      	ldrb	r3, [r7, #14]
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	d00d      	beq.n	800f506 <USBD_StdEPReq+0x90>
 800f4ea:	7bbb      	ldrb	r3, [r7, #14]
 800f4ec:	2b80      	cmp	r3, #128	; 0x80
 800f4ee:	d00a      	beq.n	800f506 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f4f0:	7bbb      	ldrb	r3, [r7, #14]
 800f4f2:	4619      	mov	r1, r3
 800f4f4:	6878      	ldr	r0, [r7, #4]
 800f4f6:	f003 ffd9 	bl	80134ac <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f4fa:	2180      	movs	r1, #128	; 0x80
 800f4fc:	6878      	ldr	r0, [r7, #4]
 800f4fe:	f003 ffd5 	bl	80134ac <USBD_LL_StallEP>
 800f502:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f504:	e020      	b.n	800f548 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800f506:	6839      	ldr	r1, [r7, #0]
 800f508:	6878      	ldr	r0, [r7, #4]
 800f50a:	f000 fc6f 	bl	800fdec <USBD_CtlError>
              break;
 800f50e:	e01b      	b.n	800f548 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f510:	683b      	ldr	r3, [r7, #0]
 800f512:	885b      	ldrh	r3, [r3, #2]
 800f514:	2b00      	cmp	r3, #0
 800f516:	d10e      	bne.n	800f536 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800f518:	7bbb      	ldrb	r3, [r7, #14]
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	d00b      	beq.n	800f536 <USBD_StdEPReq+0xc0>
 800f51e:	7bbb      	ldrb	r3, [r7, #14]
 800f520:	2b80      	cmp	r3, #128	; 0x80
 800f522:	d008      	beq.n	800f536 <USBD_StdEPReq+0xc0>
 800f524:	683b      	ldr	r3, [r7, #0]
 800f526:	88db      	ldrh	r3, [r3, #6]
 800f528:	2b00      	cmp	r3, #0
 800f52a:	d104      	bne.n	800f536 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800f52c:	7bbb      	ldrb	r3, [r7, #14]
 800f52e:	4619      	mov	r1, r3
 800f530:	6878      	ldr	r0, [r7, #4]
 800f532:	f003 ffbb 	bl	80134ac <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800f536:	6878      	ldr	r0, [r7, #4]
 800f538:	f000 fd23 	bl	800ff82 <USBD_CtlSendStatus>

              break;
 800f53c:	e004      	b.n	800f548 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800f53e:	6839      	ldr	r1, [r7, #0]
 800f540:	6878      	ldr	r0, [r7, #4]
 800f542:	f000 fc53 	bl	800fdec <USBD_CtlError>
              break;
 800f546:	bf00      	nop
          }
          break;
 800f548:	e0ec      	b.n	800f724 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f550:	b2db      	uxtb	r3, r3
 800f552:	2b02      	cmp	r3, #2
 800f554:	d002      	beq.n	800f55c <USBD_StdEPReq+0xe6>
 800f556:	2b03      	cmp	r3, #3
 800f558:	d016      	beq.n	800f588 <USBD_StdEPReq+0x112>
 800f55a:	e030      	b.n	800f5be <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f55c:	7bbb      	ldrb	r3, [r7, #14]
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d00d      	beq.n	800f57e <USBD_StdEPReq+0x108>
 800f562:	7bbb      	ldrb	r3, [r7, #14]
 800f564:	2b80      	cmp	r3, #128	; 0x80
 800f566:	d00a      	beq.n	800f57e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f568:	7bbb      	ldrb	r3, [r7, #14]
 800f56a:	4619      	mov	r1, r3
 800f56c:	6878      	ldr	r0, [r7, #4]
 800f56e:	f003 ff9d 	bl	80134ac <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f572:	2180      	movs	r1, #128	; 0x80
 800f574:	6878      	ldr	r0, [r7, #4]
 800f576:	f003 ff99 	bl	80134ac <USBD_LL_StallEP>
 800f57a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f57c:	e025      	b.n	800f5ca <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800f57e:	6839      	ldr	r1, [r7, #0]
 800f580:	6878      	ldr	r0, [r7, #4]
 800f582:	f000 fc33 	bl	800fdec <USBD_CtlError>
              break;
 800f586:	e020      	b.n	800f5ca <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f588:	683b      	ldr	r3, [r7, #0]
 800f58a:	885b      	ldrh	r3, [r3, #2]
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d11b      	bne.n	800f5c8 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800f590:	7bbb      	ldrb	r3, [r7, #14]
 800f592:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f596:	2b00      	cmp	r3, #0
 800f598:	d004      	beq.n	800f5a4 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800f59a:	7bbb      	ldrb	r3, [r7, #14]
 800f59c:	4619      	mov	r1, r3
 800f59e:	6878      	ldr	r0, [r7, #4]
 800f5a0:	f003 ffba 	bl	8013518 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800f5a4:	6878      	ldr	r0, [r7, #4]
 800f5a6:	f000 fcec 	bl	800ff82 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f5b0:	689b      	ldr	r3, [r3, #8]
 800f5b2:	6839      	ldr	r1, [r7, #0]
 800f5b4:	6878      	ldr	r0, [r7, #4]
 800f5b6:	4798      	blx	r3
 800f5b8:	4603      	mov	r3, r0
 800f5ba:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800f5bc:	e004      	b.n	800f5c8 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800f5be:	6839      	ldr	r1, [r7, #0]
 800f5c0:	6878      	ldr	r0, [r7, #4]
 800f5c2:	f000 fc13 	bl	800fdec <USBD_CtlError>
              break;
 800f5c6:	e000      	b.n	800f5ca <USBD_StdEPReq+0x154>
              break;
 800f5c8:	bf00      	nop
          }
          break;
 800f5ca:	e0ab      	b.n	800f724 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f5d2:	b2db      	uxtb	r3, r3
 800f5d4:	2b02      	cmp	r3, #2
 800f5d6:	d002      	beq.n	800f5de <USBD_StdEPReq+0x168>
 800f5d8:	2b03      	cmp	r3, #3
 800f5da:	d032      	beq.n	800f642 <USBD_StdEPReq+0x1cc>
 800f5dc:	e097      	b.n	800f70e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f5de:	7bbb      	ldrb	r3, [r7, #14]
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	d007      	beq.n	800f5f4 <USBD_StdEPReq+0x17e>
 800f5e4:	7bbb      	ldrb	r3, [r7, #14]
 800f5e6:	2b80      	cmp	r3, #128	; 0x80
 800f5e8:	d004      	beq.n	800f5f4 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800f5ea:	6839      	ldr	r1, [r7, #0]
 800f5ec:	6878      	ldr	r0, [r7, #4]
 800f5ee:	f000 fbfd 	bl	800fdec <USBD_CtlError>
                break;
 800f5f2:	e091      	b.n	800f718 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f5f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	da0b      	bge.n	800f614 <USBD_StdEPReq+0x19e>
 800f5fc:	7bbb      	ldrb	r3, [r7, #14]
 800f5fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f602:	4613      	mov	r3, r2
 800f604:	009b      	lsls	r3, r3, #2
 800f606:	4413      	add	r3, r2
 800f608:	009b      	lsls	r3, r3, #2
 800f60a:	3310      	adds	r3, #16
 800f60c:	687a      	ldr	r2, [r7, #4]
 800f60e:	4413      	add	r3, r2
 800f610:	3304      	adds	r3, #4
 800f612:	e00b      	b.n	800f62c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f614:	7bbb      	ldrb	r3, [r7, #14]
 800f616:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f61a:	4613      	mov	r3, r2
 800f61c:	009b      	lsls	r3, r3, #2
 800f61e:	4413      	add	r3, r2
 800f620:	009b      	lsls	r3, r3, #2
 800f622:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800f626:	687a      	ldr	r2, [r7, #4]
 800f628:	4413      	add	r3, r2
 800f62a:	3304      	adds	r3, #4
 800f62c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800f62e:	68bb      	ldr	r3, [r7, #8]
 800f630:	2200      	movs	r2, #0
 800f632:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f634:	68bb      	ldr	r3, [r7, #8]
 800f636:	2202      	movs	r2, #2
 800f638:	4619      	mov	r1, r3
 800f63a:	6878      	ldr	r0, [r7, #4]
 800f63c:	f000 fc47 	bl	800fece <USBD_CtlSendData>
              break;
 800f640:	e06a      	b.n	800f718 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800f642:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f646:	2b00      	cmp	r3, #0
 800f648:	da11      	bge.n	800f66e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800f64a:	7bbb      	ldrb	r3, [r7, #14]
 800f64c:	f003 020f 	and.w	r2, r3, #15
 800f650:	6879      	ldr	r1, [r7, #4]
 800f652:	4613      	mov	r3, r2
 800f654:	009b      	lsls	r3, r3, #2
 800f656:	4413      	add	r3, r2
 800f658:	009b      	lsls	r3, r3, #2
 800f65a:	440b      	add	r3, r1
 800f65c:	3324      	adds	r3, #36	; 0x24
 800f65e:	881b      	ldrh	r3, [r3, #0]
 800f660:	2b00      	cmp	r3, #0
 800f662:	d117      	bne.n	800f694 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800f664:	6839      	ldr	r1, [r7, #0]
 800f666:	6878      	ldr	r0, [r7, #4]
 800f668:	f000 fbc0 	bl	800fdec <USBD_CtlError>
                  break;
 800f66c:	e054      	b.n	800f718 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800f66e:	7bbb      	ldrb	r3, [r7, #14]
 800f670:	f003 020f 	and.w	r2, r3, #15
 800f674:	6879      	ldr	r1, [r7, #4]
 800f676:	4613      	mov	r3, r2
 800f678:	009b      	lsls	r3, r3, #2
 800f67a:	4413      	add	r3, r2
 800f67c:	009b      	lsls	r3, r3, #2
 800f67e:	440b      	add	r3, r1
 800f680:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800f684:	881b      	ldrh	r3, [r3, #0]
 800f686:	2b00      	cmp	r3, #0
 800f688:	d104      	bne.n	800f694 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800f68a:	6839      	ldr	r1, [r7, #0]
 800f68c:	6878      	ldr	r0, [r7, #4]
 800f68e:	f000 fbad 	bl	800fdec <USBD_CtlError>
                  break;
 800f692:	e041      	b.n	800f718 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f694:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f698:	2b00      	cmp	r3, #0
 800f69a:	da0b      	bge.n	800f6b4 <USBD_StdEPReq+0x23e>
 800f69c:	7bbb      	ldrb	r3, [r7, #14]
 800f69e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f6a2:	4613      	mov	r3, r2
 800f6a4:	009b      	lsls	r3, r3, #2
 800f6a6:	4413      	add	r3, r2
 800f6a8:	009b      	lsls	r3, r3, #2
 800f6aa:	3310      	adds	r3, #16
 800f6ac:	687a      	ldr	r2, [r7, #4]
 800f6ae:	4413      	add	r3, r2
 800f6b0:	3304      	adds	r3, #4
 800f6b2:	e00b      	b.n	800f6cc <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f6b4:	7bbb      	ldrb	r3, [r7, #14]
 800f6b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f6ba:	4613      	mov	r3, r2
 800f6bc:	009b      	lsls	r3, r3, #2
 800f6be:	4413      	add	r3, r2
 800f6c0:	009b      	lsls	r3, r3, #2
 800f6c2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800f6c6:	687a      	ldr	r2, [r7, #4]
 800f6c8:	4413      	add	r3, r2
 800f6ca:	3304      	adds	r3, #4
 800f6cc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800f6ce:	7bbb      	ldrb	r3, [r7, #14]
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	d002      	beq.n	800f6da <USBD_StdEPReq+0x264>
 800f6d4:	7bbb      	ldrb	r3, [r7, #14]
 800f6d6:	2b80      	cmp	r3, #128	; 0x80
 800f6d8:	d103      	bne.n	800f6e2 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800f6da:	68bb      	ldr	r3, [r7, #8]
 800f6dc:	2200      	movs	r2, #0
 800f6de:	601a      	str	r2, [r3, #0]
 800f6e0:	e00e      	b.n	800f700 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800f6e2:	7bbb      	ldrb	r3, [r7, #14]
 800f6e4:	4619      	mov	r1, r3
 800f6e6:	6878      	ldr	r0, [r7, #4]
 800f6e8:	f003 ff4c 	bl	8013584 <USBD_LL_IsStallEP>
 800f6ec:	4603      	mov	r3, r0
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	d003      	beq.n	800f6fa <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800f6f2:	68bb      	ldr	r3, [r7, #8]
 800f6f4:	2201      	movs	r2, #1
 800f6f6:	601a      	str	r2, [r3, #0]
 800f6f8:	e002      	b.n	800f700 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800f6fa:	68bb      	ldr	r3, [r7, #8]
 800f6fc:	2200      	movs	r2, #0
 800f6fe:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f700:	68bb      	ldr	r3, [r7, #8]
 800f702:	2202      	movs	r2, #2
 800f704:	4619      	mov	r1, r3
 800f706:	6878      	ldr	r0, [r7, #4]
 800f708:	f000 fbe1 	bl	800fece <USBD_CtlSendData>
              break;
 800f70c:	e004      	b.n	800f718 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800f70e:	6839      	ldr	r1, [r7, #0]
 800f710:	6878      	ldr	r0, [r7, #4]
 800f712:	f000 fb6b 	bl	800fdec <USBD_CtlError>
              break;
 800f716:	bf00      	nop
          }
          break;
 800f718:	e004      	b.n	800f724 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800f71a:	6839      	ldr	r1, [r7, #0]
 800f71c:	6878      	ldr	r0, [r7, #4]
 800f71e:	f000 fb65 	bl	800fdec <USBD_CtlError>
          break;
 800f722:	bf00      	nop
      }
      break;
 800f724:	e004      	b.n	800f730 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800f726:	6839      	ldr	r1, [r7, #0]
 800f728:	6878      	ldr	r0, [r7, #4]
 800f72a:	f000 fb5f 	bl	800fdec <USBD_CtlError>
      break;
 800f72e:	bf00      	nop
  }

  return ret;
 800f730:	7bfb      	ldrb	r3, [r7, #15]
}
 800f732:	4618      	mov	r0, r3
 800f734:	3710      	adds	r7, #16
 800f736:	46bd      	mov	sp, r7
 800f738:	bd80      	pop	{r7, pc}
	...

0800f73c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f73c:	b580      	push	{r7, lr}
 800f73e:	b084      	sub	sp, #16
 800f740:	af00      	add	r7, sp, #0
 800f742:	6078      	str	r0, [r7, #4]
 800f744:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f746:	2300      	movs	r3, #0
 800f748:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800f74a:	2300      	movs	r3, #0
 800f74c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800f74e:	2300      	movs	r3, #0
 800f750:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800f752:	683b      	ldr	r3, [r7, #0]
 800f754:	885b      	ldrh	r3, [r3, #2]
 800f756:	0a1b      	lsrs	r3, r3, #8
 800f758:	b29b      	uxth	r3, r3
 800f75a:	3b01      	subs	r3, #1
 800f75c:	2b0e      	cmp	r3, #14
 800f75e:	f200 8152 	bhi.w	800fa06 <USBD_GetDescriptor+0x2ca>
 800f762:	a201      	add	r2, pc, #4	; (adr r2, 800f768 <USBD_GetDescriptor+0x2c>)
 800f764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f768:	0800f7d9 	.word	0x0800f7d9
 800f76c:	0800f7f1 	.word	0x0800f7f1
 800f770:	0800f831 	.word	0x0800f831
 800f774:	0800fa07 	.word	0x0800fa07
 800f778:	0800fa07 	.word	0x0800fa07
 800f77c:	0800f9a7 	.word	0x0800f9a7
 800f780:	0800f9d3 	.word	0x0800f9d3
 800f784:	0800fa07 	.word	0x0800fa07
 800f788:	0800fa07 	.word	0x0800fa07
 800f78c:	0800fa07 	.word	0x0800fa07
 800f790:	0800fa07 	.word	0x0800fa07
 800f794:	0800fa07 	.word	0x0800fa07
 800f798:	0800fa07 	.word	0x0800fa07
 800f79c:	0800fa07 	.word	0x0800fa07
 800f7a0:	0800f7a5 	.word	0x0800f7a5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f7aa:	69db      	ldr	r3, [r3, #28]
 800f7ac:	2b00      	cmp	r3, #0
 800f7ae:	d00b      	beq.n	800f7c8 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f7b6:	69db      	ldr	r3, [r3, #28]
 800f7b8:	687a      	ldr	r2, [r7, #4]
 800f7ba:	7c12      	ldrb	r2, [r2, #16]
 800f7bc:	f107 0108 	add.w	r1, r7, #8
 800f7c0:	4610      	mov	r0, r2
 800f7c2:	4798      	blx	r3
 800f7c4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f7c6:	e126      	b.n	800fa16 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800f7c8:	6839      	ldr	r1, [r7, #0]
 800f7ca:	6878      	ldr	r0, [r7, #4]
 800f7cc:	f000 fb0e 	bl	800fdec <USBD_CtlError>
        err++;
 800f7d0:	7afb      	ldrb	r3, [r7, #11]
 800f7d2:	3301      	adds	r3, #1
 800f7d4:	72fb      	strb	r3, [r7, #11]
      break;
 800f7d6:	e11e      	b.n	800fa16 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f7de:	681b      	ldr	r3, [r3, #0]
 800f7e0:	687a      	ldr	r2, [r7, #4]
 800f7e2:	7c12      	ldrb	r2, [r2, #16]
 800f7e4:	f107 0108 	add.w	r1, r7, #8
 800f7e8:	4610      	mov	r0, r2
 800f7ea:	4798      	blx	r3
 800f7ec:	60f8      	str	r0, [r7, #12]
      break;
 800f7ee:	e112      	b.n	800fa16 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	7c1b      	ldrb	r3, [r3, #16]
 800f7f4:	2b00      	cmp	r3, #0
 800f7f6:	d10d      	bne.n	800f814 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f7fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f800:	f107 0208 	add.w	r2, r7, #8
 800f804:	4610      	mov	r0, r2
 800f806:	4798      	blx	r3
 800f808:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f80a:	68fb      	ldr	r3, [r7, #12]
 800f80c:	3301      	adds	r3, #1
 800f80e:	2202      	movs	r2, #2
 800f810:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800f812:	e100      	b.n	800fa16 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f81a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f81c:	f107 0208 	add.w	r2, r7, #8
 800f820:	4610      	mov	r0, r2
 800f822:	4798      	blx	r3
 800f824:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f826:	68fb      	ldr	r3, [r7, #12]
 800f828:	3301      	adds	r3, #1
 800f82a:	2202      	movs	r2, #2
 800f82c:	701a      	strb	r2, [r3, #0]
      break;
 800f82e:	e0f2      	b.n	800fa16 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800f830:	683b      	ldr	r3, [r7, #0]
 800f832:	885b      	ldrh	r3, [r3, #2]
 800f834:	b2db      	uxtb	r3, r3
 800f836:	2b05      	cmp	r3, #5
 800f838:	f200 80ac 	bhi.w	800f994 <USBD_GetDescriptor+0x258>
 800f83c:	a201      	add	r2, pc, #4	; (adr r2, 800f844 <USBD_GetDescriptor+0x108>)
 800f83e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f842:	bf00      	nop
 800f844:	0800f85d 	.word	0x0800f85d
 800f848:	0800f891 	.word	0x0800f891
 800f84c:	0800f8c5 	.word	0x0800f8c5
 800f850:	0800f8f9 	.word	0x0800f8f9
 800f854:	0800f92d 	.word	0x0800f92d
 800f858:	0800f961 	.word	0x0800f961
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f862:	685b      	ldr	r3, [r3, #4]
 800f864:	2b00      	cmp	r3, #0
 800f866:	d00b      	beq.n	800f880 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f86e:	685b      	ldr	r3, [r3, #4]
 800f870:	687a      	ldr	r2, [r7, #4]
 800f872:	7c12      	ldrb	r2, [r2, #16]
 800f874:	f107 0108 	add.w	r1, r7, #8
 800f878:	4610      	mov	r0, r2
 800f87a:	4798      	blx	r3
 800f87c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f87e:	e091      	b.n	800f9a4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f880:	6839      	ldr	r1, [r7, #0]
 800f882:	6878      	ldr	r0, [r7, #4]
 800f884:	f000 fab2 	bl	800fdec <USBD_CtlError>
            err++;
 800f888:	7afb      	ldrb	r3, [r7, #11]
 800f88a:	3301      	adds	r3, #1
 800f88c:	72fb      	strb	r3, [r7, #11]
          break;
 800f88e:	e089      	b.n	800f9a4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f896:	689b      	ldr	r3, [r3, #8]
 800f898:	2b00      	cmp	r3, #0
 800f89a:	d00b      	beq.n	800f8b4 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f8a2:	689b      	ldr	r3, [r3, #8]
 800f8a4:	687a      	ldr	r2, [r7, #4]
 800f8a6:	7c12      	ldrb	r2, [r2, #16]
 800f8a8:	f107 0108 	add.w	r1, r7, #8
 800f8ac:	4610      	mov	r0, r2
 800f8ae:	4798      	blx	r3
 800f8b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f8b2:	e077      	b.n	800f9a4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f8b4:	6839      	ldr	r1, [r7, #0]
 800f8b6:	6878      	ldr	r0, [r7, #4]
 800f8b8:	f000 fa98 	bl	800fdec <USBD_CtlError>
            err++;
 800f8bc:	7afb      	ldrb	r3, [r7, #11]
 800f8be:	3301      	adds	r3, #1
 800f8c0:	72fb      	strb	r3, [r7, #11]
          break;
 800f8c2:	e06f      	b.n	800f9a4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f8ca:	68db      	ldr	r3, [r3, #12]
 800f8cc:	2b00      	cmp	r3, #0
 800f8ce:	d00b      	beq.n	800f8e8 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f8d6:	68db      	ldr	r3, [r3, #12]
 800f8d8:	687a      	ldr	r2, [r7, #4]
 800f8da:	7c12      	ldrb	r2, [r2, #16]
 800f8dc:	f107 0108 	add.w	r1, r7, #8
 800f8e0:	4610      	mov	r0, r2
 800f8e2:	4798      	blx	r3
 800f8e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f8e6:	e05d      	b.n	800f9a4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f8e8:	6839      	ldr	r1, [r7, #0]
 800f8ea:	6878      	ldr	r0, [r7, #4]
 800f8ec:	f000 fa7e 	bl	800fdec <USBD_CtlError>
            err++;
 800f8f0:	7afb      	ldrb	r3, [r7, #11]
 800f8f2:	3301      	adds	r3, #1
 800f8f4:	72fb      	strb	r3, [r7, #11]
          break;
 800f8f6:	e055      	b.n	800f9a4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f8fe:	691b      	ldr	r3, [r3, #16]
 800f900:	2b00      	cmp	r3, #0
 800f902:	d00b      	beq.n	800f91c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f90a:	691b      	ldr	r3, [r3, #16]
 800f90c:	687a      	ldr	r2, [r7, #4]
 800f90e:	7c12      	ldrb	r2, [r2, #16]
 800f910:	f107 0108 	add.w	r1, r7, #8
 800f914:	4610      	mov	r0, r2
 800f916:	4798      	blx	r3
 800f918:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f91a:	e043      	b.n	800f9a4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f91c:	6839      	ldr	r1, [r7, #0]
 800f91e:	6878      	ldr	r0, [r7, #4]
 800f920:	f000 fa64 	bl	800fdec <USBD_CtlError>
            err++;
 800f924:	7afb      	ldrb	r3, [r7, #11]
 800f926:	3301      	adds	r3, #1
 800f928:	72fb      	strb	r3, [r7, #11]
          break;
 800f92a:	e03b      	b.n	800f9a4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f932:	695b      	ldr	r3, [r3, #20]
 800f934:	2b00      	cmp	r3, #0
 800f936:	d00b      	beq.n	800f950 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f93e:	695b      	ldr	r3, [r3, #20]
 800f940:	687a      	ldr	r2, [r7, #4]
 800f942:	7c12      	ldrb	r2, [r2, #16]
 800f944:	f107 0108 	add.w	r1, r7, #8
 800f948:	4610      	mov	r0, r2
 800f94a:	4798      	blx	r3
 800f94c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f94e:	e029      	b.n	800f9a4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f950:	6839      	ldr	r1, [r7, #0]
 800f952:	6878      	ldr	r0, [r7, #4]
 800f954:	f000 fa4a 	bl	800fdec <USBD_CtlError>
            err++;
 800f958:	7afb      	ldrb	r3, [r7, #11]
 800f95a:	3301      	adds	r3, #1
 800f95c:	72fb      	strb	r3, [r7, #11]
          break;
 800f95e:	e021      	b.n	800f9a4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f966:	699b      	ldr	r3, [r3, #24]
 800f968:	2b00      	cmp	r3, #0
 800f96a:	d00b      	beq.n	800f984 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f972:	699b      	ldr	r3, [r3, #24]
 800f974:	687a      	ldr	r2, [r7, #4]
 800f976:	7c12      	ldrb	r2, [r2, #16]
 800f978:	f107 0108 	add.w	r1, r7, #8
 800f97c:	4610      	mov	r0, r2
 800f97e:	4798      	blx	r3
 800f980:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f982:	e00f      	b.n	800f9a4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f984:	6839      	ldr	r1, [r7, #0]
 800f986:	6878      	ldr	r0, [r7, #4]
 800f988:	f000 fa30 	bl	800fdec <USBD_CtlError>
            err++;
 800f98c:	7afb      	ldrb	r3, [r7, #11]
 800f98e:	3301      	adds	r3, #1
 800f990:	72fb      	strb	r3, [r7, #11]
          break;
 800f992:	e007      	b.n	800f9a4 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800f994:	6839      	ldr	r1, [r7, #0]
 800f996:	6878      	ldr	r0, [r7, #4]
 800f998:	f000 fa28 	bl	800fdec <USBD_CtlError>
          err++;
 800f99c:	7afb      	ldrb	r3, [r7, #11]
 800f99e:	3301      	adds	r3, #1
 800f9a0:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800f9a2:	bf00      	nop
      }
      break;
 800f9a4:	e037      	b.n	800fa16 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	7c1b      	ldrb	r3, [r3, #16]
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	d109      	bne.n	800f9c2 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f9b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f9b6:	f107 0208 	add.w	r2, r7, #8
 800f9ba:	4610      	mov	r0, r2
 800f9bc:	4798      	blx	r3
 800f9be:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f9c0:	e029      	b.n	800fa16 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800f9c2:	6839      	ldr	r1, [r7, #0]
 800f9c4:	6878      	ldr	r0, [r7, #4]
 800f9c6:	f000 fa11 	bl	800fdec <USBD_CtlError>
        err++;
 800f9ca:	7afb      	ldrb	r3, [r7, #11]
 800f9cc:	3301      	adds	r3, #1
 800f9ce:	72fb      	strb	r3, [r7, #11]
      break;
 800f9d0:	e021      	b.n	800fa16 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	7c1b      	ldrb	r3, [r3, #16]
 800f9d6:	2b00      	cmp	r3, #0
 800f9d8:	d10d      	bne.n	800f9f6 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f9e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f9e2:	f107 0208 	add.w	r2, r7, #8
 800f9e6:	4610      	mov	r0, r2
 800f9e8:	4798      	blx	r3
 800f9ea:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800f9ec:	68fb      	ldr	r3, [r7, #12]
 800f9ee:	3301      	adds	r3, #1
 800f9f0:	2207      	movs	r2, #7
 800f9f2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f9f4:	e00f      	b.n	800fa16 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800f9f6:	6839      	ldr	r1, [r7, #0]
 800f9f8:	6878      	ldr	r0, [r7, #4]
 800f9fa:	f000 f9f7 	bl	800fdec <USBD_CtlError>
        err++;
 800f9fe:	7afb      	ldrb	r3, [r7, #11]
 800fa00:	3301      	adds	r3, #1
 800fa02:	72fb      	strb	r3, [r7, #11]
      break;
 800fa04:	e007      	b.n	800fa16 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800fa06:	6839      	ldr	r1, [r7, #0]
 800fa08:	6878      	ldr	r0, [r7, #4]
 800fa0a:	f000 f9ef 	bl	800fdec <USBD_CtlError>
      err++;
 800fa0e:	7afb      	ldrb	r3, [r7, #11]
 800fa10:	3301      	adds	r3, #1
 800fa12:	72fb      	strb	r3, [r7, #11]
      break;
 800fa14:	bf00      	nop
  }

  if (err != 0U)
 800fa16:	7afb      	ldrb	r3, [r7, #11]
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	d11e      	bne.n	800fa5a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800fa1c:	683b      	ldr	r3, [r7, #0]
 800fa1e:	88db      	ldrh	r3, [r3, #6]
 800fa20:	2b00      	cmp	r3, #0
 800fa22:	d016      	beq.n	800fa52 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800fa24:	893b      	ldrh	r3, [r7, #8]
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d00e      	beq.n	800fa48 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800fa2a:	683b      	ldr	r3, [r7, #0]
 800fa2c:	88da      	ldrh	r2, [r3, #6]
 800fa2e:	893b      	ldrh	r3, [r7, #8]
 800fa30:	4293      	cmp	r3, r2
 800fa32:	bf28      	it	cs
 800fa34:	4613      	movcs	r3, r2
 800fa36:	b29b      	uxth	r3, r3
 800fa38:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800fa3a:	893b      	ldrh	r3, [r7, #8]
 800fa3c:	461a      	mov	r2, r3
 800fa3e:	68f9      	ldr	r1, [r7, #12]
 800fa40:	6878      	ldr	r0, [r7, #4]
 800fa42:	f000 fa44 	bl	800fece <USBD_CtlSendData>
 800fa46:	e009      	b.n	800fa5c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800fa48:	6839      	ldr	r1, [r7, #0]
 800fa4a:	6878      	ldr	r0, [r7, #4]
 800fa4c:	f000 f9ce 	bl	800fdec <USBD_CtlError>
 800fa50:	e004      	b.n	800fa5c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800fa52:	6878      	ldr	r0, [r7, #4]
 800fa54:	f000 fa95 	bl	800ff82 <USBD_CtlSendStatus>
 800fa58:	e000      	b.n	800fa5c <USBD_GetDescriptor+0x320>
    return;
 800fa5a:	bf00      	nop
  }
}
 800fa5c:	3710      	adds	r7, #16
 800fa5e:	46bd      	mov	sp, r7
 800fa60:	bd80      	pop	{r7, pc}
 800fa62:	bf00      	nop

0800fa64 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fa64:	b580      	push	{r7, lr}
 800fa66:	b084      	sub	sp, #16
 800fa68:	af00      	add	r7, sp, #0
 800fa6a:	6078      	str	r0, [r7, #4]
 800fa6c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800fa6e:	683b      	ldr	r3, [r7, #0]
 800fa70:	889b      	ldrh	r3, [r3, #4]
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	d131      	bne.n	800fada <USBD_SetAddress+0x76>
 800fa76:	683b      	ldr	r3, [r7, #0]
 800fa78:	88db      	ldrh	r3, [r3, #6]
 800fa7a:	2b00      	cmp	r3, #0
 800fa7c:	d12d      	bne.n	800fada <USBD_SetAddress+0x76>
 800fa7e:	683b      	ldr	r3, [r7, #0]
 800fa80:	885b      	ldrh	r3, [r3, #2]
 800fa82:	2b7f      	cmp	r3, #127	; 0x7f
 800fa84:	d829      	bhi.n	800fada <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800fa86:	683b      	ldr	r3, [r7, #0]
 800fa88:	885b      	ldrh	r3, [r3, #2]
 800fa8a:	b2db      	uxtb	r3, r3
 800fa8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fa90:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fa98:	b2db      	uxtb	r3, r3
 800fa9a:	2b03      	cmp	r3, #3
 800fa9c:	d104      	bne.n	800faa8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800fa9e:	6839      	ldr	r1, [r7, #0]
 800faa0:	6878      	ldr	r0, [r7, #4]
 800faa2:	f000 f9a3 	bl	800fdec <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800faa6:	e01d      	b.n	800fae4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	7bfa      	ldrb	r2, [r7, #15]
 800faac:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800fab0:	7bfb      	ldrb	r3, [r7, #15]
 800fab2:	4619      	mov	r1, r3
 800fab4:	6878      	ldr	r0, [r7, #4]
 800fab6:	f003 fd91 	bl	80135dc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800faba:	6878      	ldr	r0, [r7, #4]
 800fabc:	f000 fa61 	bl	800ff82 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800fac0:	7bfb      	ldrb	r3, [r7, #15]
 800fac2:	2b00      	cmp	r3, #0
 800fac4:	d004      	beq.n	800fad0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	2202      	movs	r2, #2
 800faca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800face:	e009      	b.n	800fae4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	2201      	movs	r2, #1
 800fad4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fad8:	e004      	b.n	800fae4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800fada:	6839      	ldr	r1, [r7, #0]
 800fadc:	6878      	ldr	r0, [r7, #4]
 800fade:	f000 f985 	bl	800fdec <USBD_CtlError>
  }
}
 800fae2:	bf00      	nop
 800fae4:	bf00      	nop
 800fae6:	3710      	adds	r7, #16
 800fae8:	46bd      	mov	sp, r7
 800faea:	bd80      	pop	{r7, pc}

0800faec <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800faec:	b580      	push	{r7, lr}
 800faee:	b084      	sub	sp, #16
 800faf0:	af00      	add	r7, sp, #0
 800faf2:	6078      	str	r0, [r7, #4]
 800faf4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800faf6:	2300      	movs	r3, #0
 800faf8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800fafa:	683b      	ldr	r3, [r7, #0]
 800fafc:	885b      	ldrh	r3, [r3, #2]
 800fafe:	b2da      	uxtb	r2, r3
 800fb00:	4b4c      	ldr	r3, [pc, #304]	; (800fc34 <USBD_SetConfig+0x148>)
 800fb02:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800fb04:	4b4b      	ldr	r3, [pc, #300]	; (800fc34 <USBD_SetConfig+0x148>)
 800fb06:	781b      	ldrb	r3, [r3, #0]
 800fb08:	2b01      	cmp	r3, #1
 800fb0a:	d905      	bls.n	800fb18 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800fb0c:	6839      	ldr	r1, [r7, #0]
 800fb0e:	6878      	ldr	r0, [r7, #4]
 800fb10:	f000 f96c 	bl	800fdec <USBD_CtlError>
    return USBD_FAIL;
 800fb14:	2303      	movs	r3, #3
 800fb16:	e088      	b.n	800fc2a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fb1e:	b2db      	uxtb	r3, r3
 800fb20:	2b02      	cmp	r3, #2
 800fb22:	d002      	beq.n	800fb2a <USBD_SetConfig+0x3e>
 800fb24:	2b03      	cmp	r3, #3
 800fb26:	d025      	beq.n	800fb74 <USBD_SetConfig+0x88>
 800fb28:	e071      	b.n	800fc0e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800fb2a:	4b42      	ldr	r3, [pc, #264]	; (800fc34 <USBD_SetConfig+0x148>)
 800fb2c:	781b      	ldrb	r3, [r3, #0]
 800fb2e:	2b00      	cmp	r3, #0
 800fb30:	d01c      	beq.n	800fb6c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800fb32:	4b40      	ldr	r3, [pc, #256]	; (800fc34 <USBD_SetConfig+0x148>)
 800fb34:	781b      	ldrb	r3, [r3, #0]
 800fb36:	461a      	mov	r2, r3
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800fb3c:	4b3d      	ldr	r3, [pc, #244]	; (800fc34 <USBD_SetConfig+0x148>)
 800fb3e:	781b      	ldrb	r3, [r3, #0]
 800fb40:	4619      	mov	r1, r3
 800fb42:	6878      	ldr	r0, [r7, #4]
 800fb44:	f7ff f91e 	bl	800ed84 <USBD_SetClassConfig>
 800fb48:	4603      	mov	r3, r0
 800fb4a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800fb4c:	7bfb      	ldrb	r3, [r7, #15]
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	d004      	beq.n	800fb5c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800fb52:	6839      	ldr	r1, [r7, #0]
 800fb54:	6878      	ldr	r0, [r7, #4]
 800fb56:	f000 f949 	bl	800fdec <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800fb5a:	e065      	b.n	800fc28 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800fb5c:	6878      	ldr	r0, [r7, #4]
 800fb5e:	f000 fa10 	bl	800ff82 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	2203      	movs	r2, #3
 800fb66:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800fb6a:	e05d      	b.n	800fc28 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800fb6c:	6878      	ldr	r0, [r7, #4]
 800fb6e:	f000 fa08 	bl	800ff82 <USBD_CtlSendStatus>
      break;
 800fb72:	e059      	b.n	800fc28 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800fb74:	4b2f      	ldr	r3, [pc, #188]	; (800fc34 <USBD_SetConfig+0x148>)
 800fb76:	781b      	ldrb	r3, [r3, #0]
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	d112      	bne.n	800fba2 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	2202      	movs	r2, #2
 800fb80:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800fb84:	4b2b      	ldr	r3, [pc, #172]	; (800fc34 <USBD_SetConfig+0x148>)
 800fb86:	781b      	ldrb	r3, [r3, #0]
 800fb88:	461a      	mov	r2, r3
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800fb8e:	4b29      	ldr	r3, [pc, #164]	; (800fc34 <USBD_SetConfig+0x148>)
 800fb90:	781b      	ldrb	r3, [r3, #0]
 800fb92:	4619      	mov	r1, r3
 800fb94:	6878      	ldr	r0, [r7, #4]
 800fb96:	f7ff f911 	bl	800edbc <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800fb9a:	6878      	ldr	r0, [r7, #4]
 800fb9c:	f000 f9f1 	bl	800ff82 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800fba0:	e042      	b.n	800fc28 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800fba2:	4b24      	ldr	r3, [pc, #144]	; (800fc34 <USBD_SetConfig+0x148>)
 800fba4:	781b      	ldrb	r3, [r3, #0]
 800fba6:	461a      	mov	r2, r3
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	685b      	ldr	r3, [r3, #4]
 800fbac:	429a      	cmp	r2, r3
 800fbae:	d02a      	beq.n	800fc06 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	685b      	ldr	r3, [r3, #4]
 800fbb4:	b2db      	uxtb	r3, r3
 800fbb6:	4619      	mov	r1, r3
 800fbb8:	6878      	ldr	r0, [r7, #4]
 800fbba:	f7ff f8ff 	bl	800edbc <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800fbbe:	4b1d      	ldr	r3, [pc, #116]	; (800fc34 <USBD_SetConfig+0x148>)
 800fbc0:	781b      	ldrb	r3, [r3, #0]
 800fbc2:	461a      	mov	r2, r3
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800fbc8:	4b1a      	ldr	r3, [pc, #104]	; (800fc34 <USBD_SetConfig+0x148>)
 800fbca:	781b      	ldrb	r3, [r3, #0]
 800fbcc:	4619      	mov	r1, r3
 800fbce:	6878      	ldr	r0, [r7, #4]
 800fbd0:	f7ff f8d8 	bl	800ed84 <USBD_SetClassConfig>
 800fbd4:	4603      	mov	r3, r0
 800fbd6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800fbd8:	7bfb      	ldrb	r3, [r7, #15]
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	d00f      	beq.n	800fbfe <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800fbde:	6839      	ldr	r1, [r7, #0]
 800fbe0:	6878      	ldr	r0, [r7, #4]
 800fbe2:	f000 f903 	bl	800fdec <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	685b      	ldr	r3, [r3, #4]
 800fbea:	b2db      	uxtb	r3, r3
 800fbec:	4619      	mov	r1, r3
 800fbee:	6878      	ldr	r0, [r7, #4]
 800fbf0:	f7ff f8e4 	bl	800edbc <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	2202      	movs	r2, #2
 800fbf8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800fbfc:	e014      	b.n	800fc28 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800fbfe:	6878      	ldr	r0, [r7, #4]
 800fc00:	f000 f9bf 	bl	800ff82 <USBD_CtlSendStatus>
      break;
 800fc04:	e010      	b.n	800fc28 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800fc06:	6878      	ldr	r0, [r7, #4]
 800fc08:	f000 f9bb 	bl	800ff82 <USBD_CtlSendStatus>
      break;
 800fc0c:	e00c      	b.n	800fc28 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800fc0e:	6839      	ldr	r1, [r7, #0]
 800fc10:	6878      	ldr	r0, [r7, #4]
 800fc12:	f000 f8eb 	bl	800fdec <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800fc16:	4b07      	ldr	r3, [pc, #28]	; (800fc34 <USBD_SetConfig+0x148>)
 800fc18:	781b      	ldrb	r3, [r3, #0]
 800fc1a:	4619      	mov	r1, r3
 800fc1c:	6878      	ldr	r0, [r7, #4]
 800fc1e:	f7ff f8cd 	bl	800edbc <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800fc22:	2303      	movs	r3, #3
 800fc24:	73fb      	strb	r3, [r7, #15]
      break;
 800fc26:	bf00      	nop
  }

  return ret;
 800fc28:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc2a:	4618      	mov	r0, r3
 800fc2c:	3710      	adds	r7, #16
 800fc2e:	46bd      	mov	sp, r7
 800fc30:	bd80      	pop	{r7, pc}
 800fc32:	bf00      	nop
 800fc34:	20003f60 	.word	0x20003f60

0800fc38 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fc38:	b580      	push	{r7, lr}
 800fc3a:	b082      	sub	sp, #8
 800fc3c:	af00      	add	r7, sp, #0
 800fc3e:	6078      	str	r0, [r7, #4]
 800fc40:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800fc42:	683b      	ldr	r3, [r7, #0]
 800fc44:	88db      	ldrh	r3, [r3, #6]
 800fc46:	2b01      	cmp	r3, #1
 800fc48:	d004      	beq.n	800fc54 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800fc4a:	6839      	ldr	r1, [r7, #0]
 800fc4c:	6878      	ldr	r0, [r7, #4]
 800fc4e:	f000 f8cd 	bl	800fdec <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800fc52:	e023      	b.n	800fc9c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fc5a:	b2db      	uxtb	r3, r3
 800fc5c:	2b02      	cmp	r3, #2
 800fc5e:	dc02      	bgt.n	800fc66 <USBD_GetConfig+0x2e>
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	dc03      	bgt.n	800fc6c <USBD_GetConfig+0x34>
 800fc64:	e015      	b.n	800fc92 <USBD_GetConfig+0x5a>
 800fc66:	2b03      	cmp	r3, #3
 800fc68:	d00b      	beq.n	800fc82 <USBD_GetConfig+0x4a>
 800fc6a:	e012      	b.n	800fc92 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	2200      	movs	r2, #0
 800fc70:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	3308      	adds	r3, #8
 800fc76:	2201      	movs	r2, #1
 800fc78:	4619      	mov	r1, r3
 800fc7a:	6878      	ldr	r0, [r7, #4]
 800fc7c:	f000 f927 	bl	800fece <USBD_CtlSendData>
        break;
 800fc80:	e00c      	b.n	800fc9c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	3304      	adds	r3, #4
 800fc86:	2201      	movs	r2, #1
 800fc88:	4619      	mov	r1, r3
 800fc8a:	6878      	ldr	r0, [r7, #4]
 800fc8c:	f000 f91f 	bl	800fece <USBD_CtlSendData>
        break;
 800fc90:	e004      	b.n	800fc9c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800fc92:	6839      	ldr	r1, [r7, #0]
 800fc94:	6878      	ldr	r0, [r7, #4]
 800fc96:	f000 f8a9 	bl	800fdec <USBD_CtlError>
        break;
 800fc9a:	bf00      	nop
}
 800fc9c:	bf00      	nop
 800fc9e:	3708      	adds	r7, #8
 800fca0:	46bd      	mov	sp, r7
 800fca2:	bd80      	pop	{r7, pc}

0800fca4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fca4:	b580      	push	{r7, lr}
 800fca6:	b082      	sub	sp, #8
 800fca8:	af00      	add	r7, sp, #0
 800fcaa:	6078      	str	r0, [r7, #4]
 800fcac:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fcb4:	b2db      	uxtb	r3, r3
 800fcb6:	3b01      	subs	r3, #1
 800fcb8:	2b02      	cmp	r3, #2
 800fcba:	d81e      	bhi.n	800fcfa <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800fcbc:	683b      	ldr	r3, [r7, #0]
 800fcbe:	88db      	ldrh	r3, [r3, #6]
 800fcc0:	2b02      	cmp	r3, #2
 800fcc2:	d004      	beq.n	800fcce <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800fcc4:	6839      	ldr	r1, [r7, #0]
 800fcc6:	6878      	ldr	r0, [r7, #4]
 800fcc8:	f000 f890 	bl	800fdec <USBD_CtlError>
        break;
 800fccc:	e01a      	b.n	800fd04 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	2201      	movs	r2, #1
 800fcd2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	d005      	beq.n	800fcea <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	68db      	ldr	r3, [r3, #12]
 800fce2:	f043 0202 	orr.w	r2, r3, #2
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	330c      	adds	r3, #12
 800fcee:	2202      	movs	r2, #2
 800fcf0:	4619      	mov	r1, r3
 800fcf2:	6878      	ldr	r0, [r7, #4]
 800fcf4:	f000 f8eb 	bl	800fece <USBD_CtlSendData>
      break;
 800fcf8:	e004      	b.n	800fd04 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800fcfa:	6839      	ldr	r1, [r7, #0]
 800fcfc:	6878      	ldr	r0, [r7, #4]
 800fcfe:	f000 f875 	bl	800fdec <USBD_CtlError>
      break;
 800fd02:	bf00      	nop
  }
}
 800fd04:	bf00      	nop
 800fd06:	3708      	adds	r7, #8
 800fd08:	46bd      	mov	sp, r7
 800fd0a:	bd80      	pop	{r7, pc}

0800fd0c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fd0c:	b580      	push	{r7, lr}
 800fd0e:	b082      	sub	sp, #8
 800fd10:	af00      	add	r7, sp, #0
 800fd12:	6078      	str	r0, [r7, #4]
 800fd14:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800fd16:	683b      	ldr	r3, [r7, #0]
 800fd18:	885b      	ldrh	r3, [r3, #2]
 800fd1a:	2b01      	cmp	r3, #1
 800fd1c:	d106      	bne.n	800fd2c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	2201      	movs	r2, #1
 800fd22:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800fd26:	6878      	ldr	r0, [r7, #4]
 800fd28:	f000 f92b 	bl	800ff82 <USBD_CtlSendStatus>
  }
}
 800fd2c:	bf00      	nop
 800fd2e:	3708      	adds	r7, #8
 800fd30:	46bd      	mov	sp, r7
 800fd32:	bd80      	pop	{r7, pc}

0800fd34 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fd34:	b580      	push	{r7, lr}
 800fd36:	b082      	sub	sp, #8
 800fd38:	af00      	add	r7, sp, #0
 800fd3a:	6078      	str	r0, [r7, #4]
 800fd3c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fd44:	b2db      	uxtb	r3, r3
 800fd46:	3b01      	subs	r3, #1
 800fd48:	2b02      	cmp	r3, #2
 800fd4a:	d80b      	bhi.n	800fd64 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800fd4c:	683b      	ldr	r3, [r7, #0]
 800fd4e:	885b      	ldrh	r3, [r3, #2]
 800fd50:	2b01      	cmp	r3, #1
 800fd52:	d10c      	bne.n	800fd6e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	2200      	movs	r2, #0
 800fd58:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800fd5c:	6878      	ldr	r0, [r7, #4]
 800fd5e:	f000 f910 	bl	800ff82 <USBD_CtlSendStatus>
      }
      break;
 800fd62:	e004      	b.n	800fd6e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800fd64:	6839      	ldr	r1, [r7, #0]
 800fd66:	6878      	ldr	r0, [r7, #4]
 800fd68:	f000 f840 	bl	800fdec <USBD_CtlError>
      break;
 800fd6c:	e000      	b.n	800fd70 <USBD_ClrFeature+0x3c>
      break;
 800fd6e:	bf00      	nop
  }
}
 800fd70:	bf00      	nop
 800fd72:	3708      	adds	r7, #8
 800fd74:	46bd      	mov	sp, r7
 800fd76:	bd80      	pop	{r7, pc}

0800fd78 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800fd78:	b580      	push	{r7, lr}
 800fd7a:	b084      	sub	sp, #16
 800fd7c:	af00      	add	r7, sp, #0
 800fd7e:	6078      	str	r0, [r7, #4]
 800fd80:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800fd82:	683b      	ldr	r3, [r7, #0]
 800fd84:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800fd86:	68fb      	ldr	r3, [r7, #12]
 800fd88:	781a      	ldrb	r2, [r3, #0]
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800fd8e:	68fb      	ldr	r3, [r7, #12]
 800fd90:	3301      	adds	r3, #1
 800fd92:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800fd94:	68fb      	ldr	r3, [r7, #12]
 800fd96:	781a      	ldrb	r2, [r3, #0]
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800fd9c:	68fb      	ldr	r3, [r7, #12]
 800fd9e:	3301      	adds	r3, #1
 800fda0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800fda2:	68f8      	ldr	r0, [r7, #12]
 800fda4:	f7ff fa91 	bl	800f2ca <SWAPBYTE>
 800fda8:	4603      	mov	r3, r0
 800fdaa:	461a      	mov	r2, r3
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800fdb0:	68fb      	ldr	r3, [r7, #12]
 800fdb2:	3301      	adds	r3, #1
 800fdb4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800fdb6:	68fb      	ldr	r3, [r7, #12]
 800fdb8:	3301      	adds	r3, #1
 800fdba:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800fdbc:	68f8      	ldr	r0, [r7, #12]
 800fdbe:	f7ff fa84 	bl	800f2ca <SWAPBYTE>
 800fdc2:	4603      	mov	r3, r0
 800fdc4:	461a      	mov	r2, r3
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800fdca:	68fb      	ldr	r3, [r7, #12]
 800fdcc:	3301      	adds	r3, #1
 800fdce:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800fdd0:	68fb      	ldr	r3, [r7, #12]
 800fdd2:	3301      	adds	r3, #1
 800fdd4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800fdd6:	68f8      	ldr	r0, [r7, #12]
 800fdd8:	f7ff fa77 	bl	800f2ca <SWAPBYTE>
 800fddc:	4603      	mov	r3, r0
 800fdde:	461a      	mov	r2, r3
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	80da      	strh	r2, [r3, #6]
}
 800fde4:	bf00      	nop
 800fde6:	3710      	adds	r7, #16
 800fde8:	46bd      	mov	sp, r7
 800fdea:	bd80      	pop	{r7, pc}

0800fdec <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fdec:	b580      	push	{r7, lr}
 800fdee:	b082      	sub	sp, #8
 800fdf0:	af00      	add	r7, sp, #0
 800fdf2:	6078      	str	r0, [r7, #4]
 800fdf4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800fdf6:	2180      	movs	r1, #128	; 0x80
 800fdf8:	6878      	ldr	r0, [r7, #4]
 800fdfa:	f003 fb57 	bl	80134ac <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800fdfe:	2100      	movs	r1, #0
 800fe00:	6878      	ldr	r0, [r7, #4]
 800fe02:	f003 fb53 	bl	80134ac <USBD_LL_StallEP>
}
 800fe06:	bf00      	nop
 800fe08:	3708      	adds	r7, #8
 800fe0a:	46bd      	mov	sp, r7
 800fe0c:	bd80      	pop	{r7, pc}

0800fe0e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800fe0e:	b580      	push	{r7, lr}
 800fe10:	b086      	sub	sp, #24
 800fe12:	af00      	add	r7, sp, #0
 800fe14:	60f8      	str	r0, [r7, #12]
 800fe16:	60b9      	str	r1, [r7, #8]
 800fe18:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800fe1a:	2300      	movs	r3, #0
 800fe1c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800fe1e:	68fb      	ldr	r3, [r7, #12]
 800fe20:	2b00      	cmp	r3, #0
 800fe22:	d036      	beq.n	800fe92 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800fe24:	68fb      	ldr	r3, [r7, #12]
 800fe26:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800fe28:	6938      	ldr	r0, [r7, #16]
 800fe2a:	f000 f836 	bl	800fe9a <USBD_GetLen>
 800fe2e:	4603      	mov	r3, r0
 800fe30:	3301      	adds	r3, #1
 800fe32:	b29b      	uxth	r3, r3
 800fe34:	005b      	lsls	r3, r3, #1
 800fe36:	b29a      	uxth	r2, r3
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800fe3c:	7dfb      	ldrb	r3, [r7, #23]
 800fe3e:	68ba      	ldr	r2, [r7, #8]
 800fe40:	4413      	add	r3, r2
 800fe42:	687a      	ldr	r2, [r7, #4]
 800fe44:	7812      	ldrb	r2, [r2, #0]
 800fe46:	701a      	strb	r2, [r3, #0]
  idx++;
 800fe48:	7dfb      	ldrb	r3, [r7, #23]
 800fe4a:	3301      	adds	r3, #1
 800fe4c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800fe4e:	7dfb      	ldrb	r3, [r7, #23]
 800fe50:	68ba      	ldr	r2, [r7, #8]
 800fe52:	4413      	add	r3, r2
 800fe54:	2203      	movs	r2, #3
 800fe56:	701a      	strb	r2, [r3, #0]
  idx++;
 800fe58:	7dfb      	ldrb	r3, [r7, #23]
 800fe5a:	3301      	adds	r3, #1
 800fe5c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800fe5e:	e013      	b.n	800fe88 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800fe60:	7dfb      	ldrb	r3, [r7, #23]
 800fe62:	68ba      	ldr	r2, [r7, #8]
 800fe64:	4413      	add	r3, r2
 800fe66:	693a      	ldr	r2, [r7, #16]
 800fe68:	7812      	ldrb	r2, [r2, #0]
 800fe6a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800fe6c:	693b      	ldr	r3, [r7, #16]
 800fe6e:	3301      	adds	r3, #1
 800fe70:	613b      	str	r3, [r7, #16]
    idx++;
 800fe72:	7dfb      	ldrb	r3, [r7, #23]
 800fe74:	3301      	adds	r3, #1
 800fe76:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800fe78:	7dfb      	ldrb	r3, [r7, #23]
 800fe7a:	68ba      	ldr	r2, [r7, #8]
 800fe7c:	4413      	add	r3, r2
 800fe7e:	2200      	movs	r2, #0
 800fe80:	701a      	strb	r2, [r3, #0]
    idx++;
 800fe82:	7dfb      	ldrb	r3, [r7, #23]
 800fe84:	3301      	adds	r3, #1
 800fe86:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800fe88:	693b      	ldr	r3, [r7, #16]
 800fe8a:	781b      	ldrb	r3, [r3, #0]
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	d1e7      	bne.n	800fe60 <USBD_GetString+0x52>
 800fe90:	e000      	b.n	800fe94 <USBD_GetString+0x86>
    return;
 800fe92:	bf00      	nop
  }
}
 800fe94:	3718      	adds	r7, #24
 800fe96:	46bd      	mov	sp, r7
 800fe98:	bd80      	pop	{r7, pc}

0800fe9a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800fe9a:	b480      	push	{r7}
 800fe9c:	b085      	sub	sp, #20
 800fe9e:	af00      	add	r7, sp, #0
 800fea0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800fea2:	2300      	movs	r3, #0
 800fea4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800feaa:	e005      	b.n	800feb8 <USBD_GetLen+0x1e>
  {
    len++;
 800feac:	7bfb      	ldrb	r3, [r7, #15]
 800feae:	3301      	adds	r3, #1
 800feb0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800feb2:	68bb      	ldr	r3, [r7, #8]
 800feb4:	3301      	adds	r3, #1
 800feb6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800feb8:	68bb      	ldr	r3, [r7, #8]
 800feba:	781b      	ldrb	r3, [r3, #0]
 800febc:	2b00      	cmp	r3, #0
 800febe:	d1f5      	bne.n	800feac <USBD_GetLen+0x12>
  }

  return len;
 800fec0:	7bfb      	ldrb	r3, [r7, #15]
}
 800fec2:	4618      	mov	r0, r3
 800fec4:	3714      	adds	r7, #20
 800fec6:	46bd      	mov	sp, r7
 800fec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fecc:	4770      	bx	lr

0800fece <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800fece:	b580      	push	{r7, lr}
 800fed0:	b084      	sub	sp, #16
 800fed2:	af00      	add	r7, sp, #0
 800fed4:	60f8      	str	r0, [r7, #12]
 800fed6:	60b9      	str	r1, [r7, #8]
 800fed8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800feda:	68fb      	ldr	r3, [r7, #12]
 800fedc:	2202      	movs	r2, #2
 800fede:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800fee2:	68fb      	ldr	r3, [r7, #12]
 800fee4:	687a      	ldr	r2, [r7, #4]
 800fee6:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800fee8:	68fb      	ldr	r3, [r7, #12]
 800feea:	687a      	ldr	r2, [r7, #4]
 800feec:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	68ba      	ldr	r2, [r7, #8]
 800fef2:	2100      	movs	r1, #0
 800fef4:	68f8      	ldr	r0, [r7, #12]
 800fef6:	f003 fba7 	bl	8013648 <USBD_LL_Transmit>

  return USBD_OK;
 800fefa:	2300      	movs	r3, #0
}
 800fefc:	4618      	mov	r0, r3
 800fefe:	3710      	adds	r7, #16
 800ff00:	46bd      	mov	sp, r7
 800ff02:	bd80      	pop	{r7, pc}

0800ff04 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ff04:	b580      	push	{r7, lr}
 800ff06:	b084      	sub	sp, #16
 800ff08:	af00      	add	r7, sp, #0
 800ff0a:	60f8      	str	r0, [r7, #12]
 800ff0c:	60b9      	str	r1, [r7, #8]
 800ff0e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	68ba      	ldr	r2, [r7, #8]
 800ff14:	2100      	movs	r1, #0
 800ff16:	68f8      	ldr	r0, [r7, #12]
 800ff18:	f003 fb96 	bl	8013648 <USBD_LL_Transmit>

  return USBD_OK;
 800ff1c:	2300      	movs	r3, #0
}
 800ff1e:	4618      	mov	r0, r3
 800ff20:	3710      	adds	r7, #16
 800ff22:	46bd      	mov	sp, r7
 800ff24:	bd80      	pop	{r7, pc}

0800ff26 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800ff26:	b580      	push	{r7, lr}
 800ff28:	b084      	sub	sp, #16
 800ff2a:	af00      	add	r7, sp, #0
 800ff2c:	60f8      	str	r0, [r7, #12]
 800ff2e:	60b9      	str	r1, [r7, #8]
 800ff30:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ff32:	68fb      	ldr	r3, [r7, #12]
 800ff34:	2203      	movs	r2, #3
 800ff36:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800ff3a:	68fb      	ldr	r3, [r7, #12]
 800ff3c:	687a      	ldr	r2, [r7, #4]
 800ff3e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800ff42:	68fb      	ldr	r3, [r7, #12]
 800ff44:	687a      	ldr	r2, [r7, #4]
 800ff46:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	68ba      	ldr	r2, [r7, #8]
 800ff4e:	2100      	movs	r1, #0
 800ff50:	68f8      	ldr	r0, [r7, #12]
 800ff52:	f003 fbb1 	bl	80136b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ff56:	2300      	movs	r3, #0
}
 800ff58:	4618      	mov	r0, r3
 800ff5a:	3710      	adds	r7, #16
 800ff5c:	46bd      	mov	sp, r7
 800ff5e:	bd80      	pop	{r7, pc}

0800ff60 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ff60:	b580      	push	{r7, lr}
 800ff62:	b084      	sub	sp, #16
 800ff64:	af00      	add	r7, sp, #0
 800ff66:	60f8      	str	r0, [r7, #12]
 800ff68:	60b9      	str	r1, [r7, #8]
 800ff6a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	68ba      	ldr	r2, [r7, #8]
 800ff70:	2100      	movs	r1, #0
 800ff72:	68f8      	ldr	r0, [r7, #12]
 800ff74:	f003 fba0 	bl	80136b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ff78:	2300      	movs	r3, #0
}
 800ff7a:	4618      	mov	r0, r3
 800ff7c:	3710      	adds	r7, #16
 800ff7e:	46bd      	mov	sp, r7
 800ff80:	bd80      	pop	{r7, pc}

0800ff82 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ff82:	b580      	push	{r7, lr}
 800ff84:	b082      	sub	sp, #8
 800ff86:	af00      	add	r7, sp, #0
 800ff88:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	2204      	movs	r2, #4
 800ff8e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ff92:	2300      	movs	r3, #0
 800ff94:	2200      	movs	r2, #0
 800ff96:	2100      	movs	r1, #0
 800ff98:	6878      	ldr	r0, [r7, #4]
 800ff9a:	f003 fb55 	bl	8013648 <USBD_LL_Transmit>

  return USBD_OK;
 800ff9e:	2300      	movs	r3, #0
}
 800ffa0:	4618      	mov	r0, r3
 800ffa2:	3708      	adds	r7, #8
 800ffa4:	46bd      	mov	sp, r7
 800ffa6:	bd80      	pop	{r7, pc}

0800ffa8 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ffa8:	b580      	push	{r7, lr}
 800ffaa:	b082      	sub	sp, #8
 800ffac:	af00      	add	r7, sp, #0
 800ffae:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	2205      	movs	r2, #5
 800ffb4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ffb8:	2300      	movs	r3, #0
 800ffba:	2200      	movs	r2, #0
 800ffbc:	2100      	movs	r1, #0
 800ffbe:	6878      	ldr	r0, [r7, #4]
 800ffc0:	f003 fb7a 	bl	80136b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ffc4:	2300      	movs	r3, #0
}
 800ffc6:	4618      	mov	r0, r3
 800ffc8:	3708      	adds	r7, #8
 800ffca:	46bd      	mov	sp, r7
 800ffcc:	bd80      	pop	{r7, pc}
	...

0800ffd0 <__NVIC_SetPriority>:
{
 800ffd0:	b480      	push	{r7}
 800ffd2:	b083      	sub	sp, #12
 800ffd4:	af00      	add	r7, sp, #0
 800ffd6:	4603      	mov	r3, r0
 800ffd8:	6039      	str	r1, [r7, #0]
 800ffda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ffdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ffe0:	2b00      	cmp	r3, #0
 800ffe2:	db0a      	blt.n	800fffa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ffe4:	683b      	ldr	r3, [r7, #0]
 800ffe6:	b2da      	uxtb	r2, r3
 800ffe8:	490c      	ldr	r1, [pc, #48]	; (801001c <__NVIC_SetPriority+0x4c>)
 800ffea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ffee:	0112      	lsls	r2, r2, #4
 800fff0:	b2d2      	uxtb	r2, r2
 800fff2:	440b      	add	r3, r1
 800fff4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800fff8:	e00a      	b.n	8010010 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800fffa:	683b      	ldr	r3, [r7, #0]
 800fffc:	b2da      	uxtb	r2, r3
 800fffe:	4908      	ldr	r1, [pc, #32]	; (8010020 <__NVIC_SetPriority+0x50>)
 8010000:	79fb      	ldrb	r3, [r7, #7]
 8010002:	f003 030f 	and.w	r3, r3, #15
 8010006:	3b04      	subs	r3, #4
 8010008:	0112      	lsls	r2, r2, #4
 801000a:	b2d2      	uxtb	r2, r2
 801000c:	440b      	add	r3, r1
 801000e:	761a      	strb	r2, [r3, #24]
}
 8010010:	bf00      	nop
 8010012:	370c      	adds	r7, #12
 8010014:	46bd      	mov	sp, r7
 8010016:	f85d 7b04 	ldr.w	r7, [sp], #4
 801001a:	4770      	bx	lr
 801001c:	e000e100 	.word	0xe000e100
 8010020:	e000ed00 	.word	0xe000ed00

08010024 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8010024:	b580      	push	{r7, lr}
 8010026:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8010028:	4b05      	ldr	r3, [pc, #20]	; (8010040 <SysTick_Handler+0x1c>)
 801002a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 801002c:	f001 fd28 	bl	8011a80 <xTaskGetSchedulerState>
 8010030:	4603      	mov	r3, r0
 8010032:	2b01      	cmp	r3, #1
 8010034:	d001      	beq.n	801003a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8010036:	f002 fb0f 	bl	8012658 <xPortSysTickHandler>
  }
}
 801003a:	bf00      	nop
 801003c:	bd80      	pop	{r7, pc}
 801003e:	bf00      	nop
 8010040:	e000e010 	.word	0xe000e010

08010044 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8010044:	b580      	push	{r7, lr}
 8010046:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8010048:	2100      	movs	r1, #0
 801004a:	f06f 0004 	mvn.w	r0, #4
 801004e:	f7ff ffbf 	bl	800ffd0 <__NVIC_SetPriority>
#endif
}
 8010052:	bf00      	nop
 8010054:	bd80      	pop	{r7, pc}
	...

08010058 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8010058:	b480      	push	{r7}
 801005a:	b083      	sub	sp, #12
 801005c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801005e:	f3ef 8305 	mrs	r3, IPSR
 8010062:	603b      	str	r3, [r7, #0]
  return(result);
 8010064:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8010066:	2b00      	cmp	r3, #0
 8010068:	d003      	beq.n	8010072 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 801006a:	f06f 0305 	mvn.w	r3, #5
 801006e:	607b      	str	r3, [r7, #4]
 8010070:	e00c      	b.n	801008c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8010072:	4b0a      	ldr	r3, [pc, #40]	; (801009c <osKernelInitialize+0x44>)
 8010074:	681b      	ldr	r3, [r3, #0]
 8010076:	2b00      	cmp	r3, #0
 8010078:	d105      	bne.n	8010086 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 801007a:	4b08      	ldr	r3, [pc, #32]	; (801009c <osKernelInitialize+0x44>)
 801007c:	2201      	movs	r2, #1
 801007e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8010080:	2300      	movs	r3, #0
 8010082:	607b      	str	r3, [r7, #4]
 8010084:	e002      	b.n	801008c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8010086:	f04f 33ff 	mov.w	r3, #4294967295
 801008a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 801008c:	687b      	ldr	r3, [r7, #4]
}
 801008e:	4618      	mov	r0, r3
 8010090:	370c      	adds	r7, #12
 8010092:	46bd      	mov	sp, r7
 8010094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010098:	4770      	bx	lr
 801009a:	bf00      	nop
 801009c:	20003f64 	.word	0x20003f64

080100a0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80100a0:	b580      	push	{r7, lr}
 80100a2:	b082      	sub	sp, #8
 80100a4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80100a6:	f3ef 8305 	mrs	r3, IPSR
 80100aa:	603b      	str	r3, [r7, #0]
  return(result);
 80100ac:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80100ae:	2b00      	cmp	r3, #0
 80100b0:	d003      	beq.n	80100ba <osKernelStart+0x1a>
    stat = osErrorISR;
 80100b2:	f06f 0305 	mvn.w	r3, #5
 80100b6:	607b      	str	r3, [r7, #4]
 80100b8:	e010      	b.n	80100dc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80100ba:	4b0b      	ldr	r3, [pc, #44]	; (80100e8 <osKernelStart+0x48>)
 80100bc:	681b      	ldr	r3, [r3, #0]
 80100be:	2b01      	cmp	r3, #1
 80100c0:	d109      	bne.n	80100d6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80100c2:	f7ff ffbf 	bl	8010044 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80100c6:	4b08      	ldr	r3, [pc, #32]	; (80100e8 <osKernelStart+0x48>)
 80100c8:	2202      	movs	r2, #2
 80100ca:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80100cc:	f001 f87c 	bl	80111c8 <vTaskStartScheduler>
      stat = osOK;
 80100d0:	2300      	movs	r3, #0
 80100d2:	607b      	str	r3, [r7, #4]
 80100d4:	e002      	b.n	80100dc <osKernelStart+0x3c>
    } else {
      stat = osError;
 80100d6:	f04f 33ff 	mov.w	r3, #4294967295
 80100da:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80100dc:	687b      	ldr	r3, [r7, #4]
}
 80100de:	4618      	mov	r0, r3
 80100e0:	3708      	adds	r7, #8
 80100e2:	46bd      	mov	sp, r7
 80100e4:	bd80      	pop	{r7, pc}
 80100e6:	bf00      	nop
 80100e8:	20003f64 	.word	0x20003f64

080100ec <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80100ec:	b580      	push	{r7, lr}
 80100ee:	b08e      	sub	sp, #56	; 0x38
 80100f0:	af04      	add	r7, sp, #16
 80100f2:	60f8      	str	r0, [r7, #12]
 80100f4:	60b9      	str	r1, [r7, #8]
 80100f6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80100f8:	2300      	movs	r3, #0
 80100fa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80100fc:	f3ef 8305 	mrs	r3, IPSR
 8010100:	617b      	str	r3, [r7, #20]
  return(result);
 8010102:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8010104:	2b00      	cmp	r3, #0
 8010106:	d17e      	bne.n	8010206 <osThreadNew+0x11a>
 8010108:	68fb      	ldr	r3, [r7, #12]
 801010a:	2b00      	cmp	r3, #0
 801010c:	d07b      	beq.n	8010206 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 801010e:	2380      	movs	r3, #128	; 0x80
 8010110:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8010112:	2318      	movs	r3, #24
 8010114:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8010116:	2300      	movs	r3, #0
 8010118:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 801011a:	f04f 33ff 	mov.w	r3, #4294967295
 801011e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	2b00      	cmp	r3, #0
 8010124:	d045      	beq.n	80101b2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	681b      	ldr	r3, [r3, #0]
 801012a:	2b00      	cmp	r3, #0
 801012c:	d002      	beq.n	8010134 <osThreadNew+0x48>
        name = attr->name;
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	681b      	ldr	r3, [r3, #0]
 8010132:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	699b      	ldr	r3, [r3, #24]
 8010138:	2b00      	cmp	r3, #0
 801013a:	d002      	beq.n	8010142 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	699b      	ldr	r3, [r3, #24]
 8010140:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8010142:	69fb      	ldr	r3, [r7, #28]
 8010144:	2b00      	cmp	r3, #0
 8010146:	d008      	beq.n	801015a <osThreadNew+0x6e>
 8010148:	69fb      	ldr	r3, [r7, #28]
 801014a:	2b38      	cmp	r3, #56	; 0x38
 801014c:	d805      	bhi.n	801015a <osThreadNew+0x6e>
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	685b      	ldr	r3, [r3, #4]
 8010152:	f003 0301 	and.w	r3, r3, #1
 8010156:	2b00      	cmp	r3, #0
 8010158:	d001      	beq.n	801015e <osThreadNew+0x72>
        return (NULL);
 801015a:	2300      	movs	r3, #0
 801015c:	e054      	b.n	8010208 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	695b      	ldr	r3, [r3, #20]
 8010162:	2b00      	cmp	r3, #0
 8010164:	d003      	beq.n	801016e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	695b      	ldr	r3, [r3, #20]
 801016a:	089b      	lsrs	r3, r3, #2
 801016c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	689b      	ldr	r3, [r3, #8]
 8010172:	2b00      	cmp	r3, #0
 8010174:	d00e      	beq.n	8010194 <osThreadNew+0xa8>
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	68db      	ldr	r3, [r3, #12]
 801017a:	2ba7      	cmp	r3, #167	; 0xa7
 801017c:	d90a      	bls.n	8010194 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8010182:	2b00      	cmp	r3, #0
 8010184:	d006      	beq.n	8010194 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	695b      	ldr	r3, [r3, #20]
 801018a:	2b00      	cmp	r3, #0
 801018c:	d002      	beq.n	8010194 <osThreadNew+0xa8>
        mem = 1;
 801018e:	2301      	movs	r3, #1
 8010190:	61bb      	str	r3, [r7, #24]
 8010192:	e010      	b.n	80101b6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	689b      	ldr	r3, [r3, #8]
 8010198:	2b00      	cmp	r3, #0
 801019a:	d10c      	bne.n	80101b6 <osThreadNew+0xca>
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	68db      	ldr	r3, [r3, #12]
 80101a0:	2b00      	cmp	r3, #0
 80101a2:	d108      	bne.n	80101b6 <osThreadNew+0xca>
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	691b      	ldr	r3, [r3, #16]
 80101a8:	2b00      	cmp	r3, #0
 80101aa:	d104      	bne.n	80101b6 <osThreadNew+0xca>
          mem = 0;
 80101ac:	2300      	movs	r3, #0
 80101ae:	61bb      	str	r3, [r7, #24]
 80101b0:	e001      	b.n	80101b6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80101b2:	2300      	movs	r3, #0
 80101b4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80101b6:	69bb      	ldr	r3, [r7, #24]
 80101b8:	2b01      	cmp	r3, #1
 80101ba:	d110      	bne.n	80101de <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80101c0:	687a      	ldr	r2, [r7, #4]
 80101c2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80101c4:	9202      	str	r2, [sp, #8]
 80101c6:	9301      	str	r3, [sp, #4]
 80101c8:	69fb      	ldr	r3, [r7, #28]
 80101ca:	9300      	str	r3, [sp, #0]
 80101cc:	68bb      	ldr	r3, [r7, #8]
 80101ce:	6a3a      	ldr	r2, [r7, #32]
 80101d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80101d2:	68f8      	ldr	r0, [r7, #12]
 80101d4:	f000 fe0c 	bl	8010df0 <xTaskCreateStatic>
 80101d8:	4603      	mov	r3, r0
 80101da:	613b      	str	r3, [r7, #16]
 80101dc:	e013      	b.n	8010206 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80101de:	69bb      	ldr	r3, [r7, #24]
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	d110      	bne.n	8010206 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80101e4:	6a3b      	ldr	r3, [r7, #32]
 80101e6:	b29a      	uxth	r2, r3
 80101e8:	f107 0310 	add.w	r3, r7, #16
 80101ec:	9301      	str	r3, [sp, #4]
 80101ee:	69fb      	ldr	r3, [r7, #28]
 80101f0:	9300      	str	r3, [sp, #0]
 80101f2:	68bb      	ldr	r3, [r7, #8]
 80101f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80101f6:	68f8      	ldr	r0, [r7, #12]
 80101f8:	f000 fe57 	bl	8010eaa <xTaskCreate>
 80101fc:	4603      	mov	r3, r0
 80101fe:	2b01      	cmp	r3, #1
 8010200:	d001      	beq.n	8010206 <osThreadNew+0x11a>
            hTask = NULL;
 8010202:	2300      	movs	r3, #0
 8010204:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8010206:	693b      	ldr	r3, [r7, #16]
}
 8010208:	4618      	mov	r0, r3
 801020a:	3728      	adds	r7, #40	; 0x28
 801020c:	46bd      	mov	sp, r7
 801020e:	bd80      	pop	{r7, pc}

08010210 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8010210:	b580      	push	{r7, lr}
 8010212:	b084      	sub	sp, #16
 8010214:	af00      	add	r7, sp, #0
 8010216:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010218:	f3ef 8305 	mrs	r3, IPSR
 801021c:	60bb      	str	r3, [r7, #8]
  return(result);
 801021e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8010220:	2b00      	cmp	r3, #0
 8010222:	d003      	beq.n	801022c <osDelay+0x1c>
    stat = osErrorISR;
 8010224:	f06f 0305 	mvn.w	r3, #5
 8010228:	60fb      	str	r3, [r7, #12]
 801022a:	e007      	b.n	801023c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 801022c:	2300      	movs	r3, #0
 801022e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	2b00      	cmp	r3, #0
 8010234:	d002      	beq.n	801023c <osDelay+0x2c>
      vTaskDelay(ticks);
 8010236:	6878      	ldr	r0, [r7, #4]
 8010238:	f000 ff92 	bl	8011160 <vTaskDelay>
    }
  }

  return (stat);
 801023c:	68fb      	ldr	r3, [r7, #12]
}
 801023e:	4618      	mov	r0, r3
 8010240:	3710      	adds	r7, #16
 8010242:	46bd      	mov	sp, r7
 8010244:	bd80      	pop	{r7, pc}
	...

08010248 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8010248:	b480      	push	{r7}
 801024a:	b085      	sub	sp, #20
 801024c:	af00      	add	r7, sp, #0
 801024e:	60f8      	str	r0, [r7, #12]
 8010250:	60b9      	str	r1, [r7, #8]
 8010252:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8010254:	68fb      	ldr	r3, [r7, #12]
 8010256:	4a07      	ldr	r2, [pc, #28]	; (8010274 <vApplicationGetIdleTaskMemory+0x2c>)
 8010258:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 801025a:	68bb      	ldr	r3, [r7, #8]
 801025c:	4a06      	ldr	r2, [pc, #24]	; (8010278 <vApplicationGetIdleTaskMemory+0x30>)
 801025e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	2280      	movs	r2, #128	; 0x80
 8010264:	601a      	str	r2, [r3, #0]
}
 8010266:	bf00      	nop
 8010268:	3714      	adds	r7, #20
 801026a:	46bd      	mov	sp, r7
 801026c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010270:	4770      	bx	lr
 8010272:	bf00      	nop
 8010274:	20003f68 	.word	0x20003f68
 8010278:	20004010 	.word	0x20004010

0801027c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 801027c:	b480      	push	{r7}
 801027e:	b085      	sub	sp, #20
 8010280:	af00      	add	r7, sp, #0
 8010282:	60f8      	str	r0, [r7, #12]
 8010284:	60b9      	str	r1, [r7, #8]
 8010286:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8010288:	68fb      	ldr	r3, [r7, #12]
 801028a:	4a07      	ldr	r2, [pc, #28]	; (80102a8 <vApplicationGetTimerTaskMemory+0x2c>)
 801028c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 801028e:	68bb      	ldr	r3, [r7, #8]
 8010290:	4a06      	ldr	r2, [pc, #24]	; (80102ac <vApplicationGetTimerTaskMemory+0x30>)
 8010292:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	f44f 7280 	mov.w	r2, #256	; 0x100
 801029a:	601a      	str	r2, [r3, #0]
}
 801029c:	bf00      	nop
 801029e:	3714      	adds	r7, #20
 80102a0:	46bd      	mov	sp, r7
 80102a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102a6:	4770      	bx	lr
 80102a8:	20004210 	.word	0x20004210
 80102ac:	200042b8 	.word	0x200042b8

080102b0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80102b0:	b480      	push	{r7}
 80102b2:	b083      	sub	sp, #12
 80102b4:	af00      	add	r7, sp, #0
 80102b6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	f103 0208 	add.w	r2, r3, #8
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	f04f 32ff 	mov.w	r2, #4294967295
 80102c8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	f103 0208 	add.w	r2, r3, #8
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	f103 0208 	add.w	r2, r3, #8
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	2200      	movs	r2, #0
 80102e2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80102e4:	bf00      	nop
 80102e6:	370c      	adds	r7, #12
 80102e8:	46bd      	mov	sp, r7
 80102ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102ee:	4770      	bx	lr

080102f0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80102f0:	b480      	push	{r7}
 80102f2:	b083      	sub	sp, #12
 80102f4:	af00      	add	r7, sp, #0
 80102f6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	2200      	movs	r2, #0
 80102fc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80102fe:	bf00      	nop
 8010300:	370c      	adds	r7, #12
 8010302:	46bd      	mov	sp, r7
 8010304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010308:	4770      	bx	lr

0801030a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801030a:	b480      	push	{r7}
 801030c:	b085      	sub	sp, #20
 801030e:	af00      	add	r7, sp, #0
 8010310:	6078      	str	r0, [r7, #4]
 8010312:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	685b      	ldr	r3, [r3, #4]
 8010318:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801031a:	683b      	ldr	r3, [r7, #0]
 801031c:	68fa      	ldr	r2, [r7, #12]
 801031e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8010320:	68fb      	ldr	r3, [r7, #12]
 8010322:	689a      	ldr	r2, [r3, #8]
 8010324:	683b      	ldr	r3, [r7, #0]
 8010326:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8010328:	68fb      	ldr	r3, [r7, #12]
 801032a:	689b      	ldr	r3, [r3, #8]
 801032c:	683a      	ldr	r2, [r7, #0]
 801032e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8010330:	68fb      	ldr	r3, [r7, #12]
 8010332:	683a      	ldr	r2, [r7, #0]
 8010334:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8010336:	683b      	ldr	r3, [r7, #0]
 8010338:	687a      	ldr	r2, [r7, #4]
 801033a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	681b      	ldr	r3, [r3, #0]
 8010340:	1c5a      	adds	r2, r3, #1
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	601a      	str	r2, [r3, #0]
}
 8010346:	bf00      	nop
 8010348:	3714      	adds	r7, #20
 801034a:	46bd      	mov	sp, r7
 801034c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010350:	4770      	bx	lr

08010352 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010352:	b480      	push	{r7}
 8010354:	b085      	sub	sp, #20
 8010356:	af00      	add	r7, sp, #0
 8010358:	6078      	str	r0, [r7, #4]
 801035a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 801035c:	683b      	ldr	r3, [r7, #0]
 801035e:	681b      	ldr	r3, [r3, #0]
 8010360:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8010362:	68bb      	ldr	r3, [r7, #8]
 8010364:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010368:	d103      	bne.n	8010372 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	691b      	ldr	r3, [r3, #16]
 801036e:	60fb      	str	r3, [r7, #12]
 8010370:	e00c      	b.n	801038c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	3308      	adds	r3, #8
 8010376:	60fb      	str	r3, [r7, #12]
 8010378:	e002      	b.n	8010380 <vListInsert+0x2e>
 801037a:	68fb      	ldr	r3, [r7, #12]
 801037c:	685b      	ldr	r3, [r3, #4]
 801037e:	60fb      	str	r3, [r7, #12]
 8010380:	68fb      	ldr	r3, [r7, #12]
 8010382:	685b      	ldr	r3, [r3, #4]
 8010384:	681b      	ldr	r3, [r3, #0]
 8010386:	68ba      	ldr	r2, [r7, #8]
 8010388:	429a      	cmp	r2, r3
 801038a:	d2f6      	bcs.n	801037a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 801038c:	68fb      	ldr	r3, [r7, #12]
 801038e:	685a      	ldr	r2, [r3, #4]
 8010390:	683b      	ldr	r3, [r7, #0]
 8010392:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8010394:	683b      	ldr	r3, [r7, #0]
 8010396:	685b      	ldr	r3, [r3, #4]
 8010398:	683a      	ldr	r2, [r7, #0]
 801039a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 801039c:	683b      	ldr	r3, [r7, #0]
 801039e:	68fa      	ldr	r2, [r7, #12]
 80103a0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80103a2:	68fb      	ldr	r3, [r7, #12]
 80103a4:	683a      	ldr	r2, [r7, #0]
 80103a6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80103a8:	683b      	ldr	r3, [r7, #0]
 80103aa:	687a      	ldr	r2, [r7, #4]
 80103ac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	681b      	ldr	r3, [r3, #0]
 80103b2:	1c5a      	adds	r2, r3, #1
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	601a      	str	r2, [r3, #0]
}
 80103b8:	bf00      	nop
 80103ba:	3714      	adds	r7, #20
 80103bc:	46bd      	mov	sp, r7
 80103be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103c2:	4770      	bx	lr

080103c4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80103c4:	b480      	push	{r7}
 80103c6:	b085      	sub	sp, #20
 80103c8:	af00      	add	r7, sp, #0
 80103ca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	691b      	ldr	r3, [r3, #16]
 80103d0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	685b      	ldr	r3, [r3, #4]
 80103d6:	687a      	ldr	r2, [r7, #4]
 80103d8:	6892      	ldr	r2, [r2, #8]
 80103da:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	689b      	ldr	r3, [r3, #8]
 80103e0:	687a      	ldr	r2, [r7, #4]
 80103e2:	6852      	ldr	r2, [r2, #4]
 80103e4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80103e6:	68fb      	ldr	r3, [r7, #12]
 80103e8:	685b      	ldr	r3, [r3, #4]
 80103ea:	687a      	ldr	r2, [r7, #4]
 80103ec:	429a      	cmp	r2, r3
 80103ee:	d103      	bne.n	80103f8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	689a      	ldr	r2, [r3, #8]
 80103f4:	68fb      	ldr	r3, [r7, #12]
 80103f6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	2200      	movs	r2, #0
 80103fc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80103fe:	68fb      	ldr	r3, [r7, #12]
 8010400:	681b      	ldr	r3, [r3, #0]
 8010402:	1e5a      	subs	r2, r3, #1
 8010404:	68fb      	ldr	r3, [r7, #12]
 8010406:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8010408:	68fb      	ldr	r3, [r7, #12]
 801040a:	681b      	ldr	r3, [r3, #0]
}
 801040c:	4618      	mov	r0, r3
 801040e:	3714      	adds	r7, #20
 8010410:	46bd      	mov	sp, r7
 8010412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010416:	4770      	bx	lr

08010418 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8010418:	b580      	push	{r7, lr}
 801041a:	b084      	sub	sp, #16
 801041c:	af00      	add	r7, sp, #0
 801041e:	6078      	str	r0, [r7, #4]
 8010420:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8010426:	68fb      	ldr	r3, [r7, #12]
 8010428:	2b00      	cmp	r3, #0
 801042a:	d10a      	bne.n	8010442 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 801042c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010430:	f383 8811 	msr	BASEPRI, r3
 8010434:	f3bf 8f6f 	isb	sy
 8010438:	f3bf 8f4f 	dsb	sy
 801043c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 801043e:	bf00      	nop
 8010440:	e7fe      	b.n	8010440 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8010442:	f002 f877 	bl	8012534 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010446:	68fb      	ldr	r3, [r7, #12]
 8010448:	681a      	ldr	r2, [r3, #0]
 801044a:	68fb      	ldr	r3, [r7, #12]
 801044c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801044e:	68f9      	ldr	r1, [r7, #12]
 8010450:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8010452:	fb01 f303 	mul.w	r3, r1, r3
 8010456:	441a      	add	r2, r3
 8010458:	68fb      	ldr	r3, [r7, #12]
 801045a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801045c:	68fb      	ldr	r3, [r7, #12]
 801045e:	2200      	movs	r2, #0
 8010460:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8010462:	68fb      	ldr	r3, [r7, #12]
 8010464:	681a      	ldr	r2, [r3, #0]
 8010466:	68fb      	ldr	r3, [r7, #12]
 8010468:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801046a:	68fb      	ldr	r3, [r7, #12]
 801046c:	681a      	ldr	r2, [r3, #0]
 801046e:	68fb      	ldr	r3, [r7, #12]
 8010470:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010472:	3b01      	subs	r3, #1
 8010474:	68f9      	ldr	r1, [r7, #12]
 8010476:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8010478:	fb01 f303 	mul.w	r3, r1, r3
 801047c:	441a      	add	r2, r3
 801047e:	68fb      	ldr	r3, [r7, #12]
 8010480:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8010482:	68fb      	ldr	r3, [r7, #12]
 8010484:	22ff      	movs	r2, #255	; 0xff
 8010486:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801048a:	68fb      	ldr	r3, [r7, #12]
 801048c:	22ff      	movs	r2, #255	; 0xff
 801048e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8010492:	683b      	ldr	r3, [r7, #0]
 8010494:	2b00      	cmp	r3, #0
 8010496:	d114      	bne.n	80104c2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010498:	68fb      	ldr	r3, [r7, #12]
 801049a:	691b      	ldr	r3, [r3, #16]
 801049c:	2b00      	cmp	r3, #0
 801049e:	d01a      	beq.n	80104d6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80104a0:	68fb      	ldr	r3, [r7, #12]
 80104a2:	3310      	adds	r3, #16
 80104a4:	4618      	mov	r0, r3
 80104a6:	f001 f929 	bl	80116fc <xTaskRemoveFromEventList>
 80104aa:	4603      	mov	r3, r0
 80104ac:	2b00      	cmp	r3, #0
 80104ae:	d012      	beq.n	80104d6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80104b0:	4b0c      	ldr	r3, [pc, #48]	; (80104e4 <xQueueGenericReset+0xcc>)
 80104b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80104b6:	601a      	str	r2, [r3, #0]
 80104b8:	f3bf 8f4f 	dsb	sy
 80104bc:	f3bf 8f6f 	isb	sy
 80104c0:	e009      	b.n	80104d6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80104c2:	68fb      	ldr	r3, [r7, #12]
 80104c4:	3310      	adds	r3, #16
 80104c6:	4618      	mov	r0, r3
 80104c8:	f7ff fef2 	bl	80102b0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80104cc:	68fb      	ldr	r3, [r7, #12]
 80104ce:	3324      	adds	r3, #36	; 0x24
 80104d0:	4618      	mov	r0, r3
 80104d2:	f7ff feed 	bl	80102b0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80104d6:	f002 f85d 	bl	8012594 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80104da:	2301      	movs	r3, #1
}
 80104dc:	4618      	mov	r0, r3
 80104de:	3710      	adds	r7, #16
 80104e0:	46bd      	mov	sp, r7
 80104e2:	bd80      	pop	{r7, pc}
 80104e4:	e000ed04 	.word	0xe000ed04

080104e8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80104e8:	b580      	push	{r7, lr}
 80104ea:	b08e      	sub	sp, #56	; 0x38
 80104ec:	af02      	add	r7, sp, #8
 80104ee:	60f8      	str	r0, [r7, #12]
 80104f0:	60b9      	str	r1, [r7, #8]
 80104f2:	607a      	str	r2, [r7, #4]
 80104f4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80104f6:	68fb      	ldr	r3, [r7, #12]
 80104f8:	2b00      	cmp	r3, #0
 80104fa:	d10a      	bne.n	8010512 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80104fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010500:	f383 8811 	msr	BASEPRI, r3
 8010504:	f3bf 8f6f 	isb	sy
 8010508:	f3bf 8f4f 	dsb	sy
 801050c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801050e:	bf00      	nop
 8010510:	e7fe      	b.n	8010510 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8010512:	683b      	ldr	r3, [r7, #0]
 8010514:	2b00      	cmp	r3, #0
 8010516:	d10a      	bne.n	801052e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8010518:	f04f 0350 	mov.w	r3, #80	; 0x50
 801051c:	f383 8811 	msr	BASEPRI, r3
 8010520:	f3bf 8f6f 	isb	sy
 8010524:	f3bf 8f4f 	dsb	sy
 8010528:	627b      	str	r3, [r7, #36]	; 0x24
}
 801052a:	bf00      	nop
 801052c:	e7fe      	b.n	801052c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	2b00      	cmp	r3, #0
 8010532:	d002      	beq.n	801053a <xQueueGenericCreateStatic+0x52>
 8010534:	68bb      	ldr	r3, [r7, #8]
 8010536:	2b00      	cmp	r3, #0
 8010538:	d001      	beq.n	801053e <xQueueGenericCreateStatic+0x56>
 801053a:	2301      	movs	r3, #1
 801053c:	e000      	b.n	8010540 <xQueueGenericCreateStatic+0x58>
 801053e:	2300      	movs	r3, #0
 8010540:	2b00      	cmp	r3, #0
 8010542:	d10a      	bne.n	801055a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8010544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010548:	f383 8811 	msr	BASEPRI, r3
 801054c:	f3bf 8f6f 	isb	sy
 8010550:	f3bf 8f4f 	dsb	sy
 8010554:	623b      	str	r3, [r7, #32]
}
 8010556:	bf00      	nop
 8010558:	e7fe      	b.n	8010558 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	2b00      	cmp	r3, #0
 801055e:	d102      	bne.n	8010566 <xQueueGenericCreateStatic+0x7e>
 8010560:	68bb      	ldr	r3, [r7, #8]
 8010562:	2b00      	cmp	r3, #0
 8010564:	d101      	bne.n	801056a <xQueueGenericCreateStatic+0x82>
 8010566:	2301      	movs	r3, #1
 8010568:	e000      	b.n	801056c <xQueueGenericCreateStatic+0x84>
 801056a:	2300      	movs	r3, #0
 801056c:	2b00      	cmp	r3, #0
 801056e:	d10a      	bne.n	8010586 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8010570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010574:	f383 8811 	msr	BASEPRI, r3
 8010578:	f3bf 8f6f 	isb	sy
 801057c:	f3bf 8f4f 	dsb	sy
 8010580:	61fb      	str	r3, [r7, #28]
}
 8010582:	bf00      	nop
 8010584:	e7fe      	b.n	8010584 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8010586:	2350      	movs	r3, #80	; 0x50
 8010588:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 801058a:	697b      	ldr	r3, [r7, #20]
 801058c:	2b50      	cmp	r3, #80	; 0x50
 801058e:	d00a      	beq.n	80105a6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8010590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010594:	f383 8811 	msr	BASEPRI, r3
 8010598:	f3bf 8f6f 	isb	sy
 801059c:	f3bf 8f4f 	dsb	sy
 80105a0:	61bb      	str	r3, [r7, #24]
}
 80105a2:	bf00      	nop
 80105a4:	e7fe      	b.n	80105a4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80105a6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80105a8:	683b      	ldr	r3, [r7, #0]
 80105aa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80105ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105ae:	2b00      	cmp	r3, #0
 80105b0:	d00d      	beq.n	80105ce <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80105b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105b4:	2201      	movs	r2, #1
 80105b6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80105ba:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80105be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105c0:	9300      	str	r3, [sp, #0]
 80105c2:	4613      	mov	r3, r2
 80105c4:	687a      	ldr	r2, [r7, #4]
 80105c6:	68b9      	ldr	r1, [r7, #8]
 80105c8:	68f8      	ldr	r0, [r7, #12]
 80105ca:	f000 f805 	bl	80105d8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80105ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80105d0:	4618      	mov	r0, r3
 80105d2:	3730      	adds	r7, #48	; 0x30
 80105d4:	46bd      	mov	sp, r7
 80105d6:	bd80      	pop	{r7, pc}

080105d8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80105d8:	b580      	push	{r7, lr}
 80105da:	b084      	sub	sp, #16
 80105dc:	af00      	add	r7, sp, #0
 80105de:	60f8      	str	r0, [r7, #12]
 80105e0:	60b9      	str	r1, [r7, #8]
 80105e2:	607a      	str	r2, [r7, #4]
 80105e4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80105e6:	68bb      	ldr	r3, [r7, #8]
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	d103      	bne.n	80105f4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80105ec:	69bb      	ldr	r3, [r7, #24]
 80105ee:	69ba      	ldr	r2, [r7, #24]
 80105f0:	601a      	str	r2, [r3, #0]
 80105f2:	e002      	b.n	80105fa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80105f4:	69bb      	ldr	r3, [r7, #24]
 80105f6:	687a      	ldr	r2, [r7, #4]
 80105f8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80105fa:	69bb      	ldr	r3, [r7, #24]
 80105fc:	68fa      	ldr	r2, [r7, #12]
 80105fe:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8010600:	69bb      	ldr	r3, [r7, #24]
 8010602:	68ba      	ldr	r2, [r7, #8]
 8010604:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8010606:	2101      	movs	r1, #1
 8010608:	69b8      	ldr	r0, [r7, #24]
 801060a:	f7ff ff05 	bl	8010418 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 801060e:	69bb      	ldr	r3, [r7, #24]
 8010610:	78fa      	ldrb	r2, [r7, #3]
 8010612:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8010616:	bf00      	nop
 8010618:	3710      	adds	r7, #16
 801061a:	46bd      	mov	sp, r7
 801061c:	bd80      	pop	{r7, pc}
	...

08010620 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8010620:	b580      	push	{r7, lr}
 8010622:	b08e      	sub	sp, #56	; 0x38
 8010624:	af00      	add	r7, sp, #0
 8010626:	60f8      	str	r0, [r7, #12]
 8010628:	60b9      	str	r1, [r7, #8]
 801062a:	607a      	str	r2, [r7, #4]
 801062c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801062e:	2300      	movs	r3, #0
 8010630:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010632:	68fb      	ldr	r3, [r7, #12]
 8010634:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010638:	2b00      	cmp	r3, #0
 801063a:	d10a      	bne.n	8010652 <xQueueGenericSend+0x32>
	__asm volatile
 801063c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010640:	f383 8811 	msr	BASEPRI, r3
 8010644:	f3bf 8f6f 	isb	sy
 8010648:	f3bf 8f4f 	dsb	sy
 801064c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801064e:	bf00      	nop
 8010650:	e7fe      	b.n	8010650 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010652:	68bb      	ldr	r3, [r7, #8]
 8010654:	2b00      	cmp	r3, #0
 8010656:	d103      	bne.n	8010660 <xQueueGenericSend+0x40>
 8010658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801065a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801065c:	2b00      	cmp	r3, #0
 801065e:	d101      	bne.n	8010664 <xQueueGenericSend+0x44>
 8010660:	2301      	movs	r3, #1
 8010662:	e000      	b.n	8010666 <xQueueGenericSend+0x46>
 8010664:	2300      	movs	r3, #0
 8010666:	2b00      	cmp	r3, #0
 8010668:	d10a      	bne.n	8010680 <xQueueGenericSend+0x60>
	__asm volatile
 801066a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801066e:	f383 8811 	msr	BASEPRI, r3
 8010672:	f3bf 8f6f 	isb	sy
 8010676:	f3bf 8f4f 	dsb	sy
 801067a:	627b      	str	r3, [r7, #36]	; 0x24
}
 801067c:	bf00      	nop
 801067e:	e7fe      	b.n	801067e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010680:	683b      	ldr	r3, [r7, #0]
 8010682:	2b02      	cmp	r3, #2
 8010684:	d103      	bne.n	801068e <xQueueGenericSend+0x6e>
 8010686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010688:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801068a:	2b01      	cmp	r3, #1
 801068c:	d101      	bne.n	8010692 <xQueueGenericSend+0x72>
 801068e:	2301      	movs	r3, #1
 8010690:	e000      	b.n	8010694 <xQueueGenericSend+0x74>
 8010692:	2300      	movs	r3, #0
 8010694:	2b00      	cmp	r3, #0
 8010696:	d10a      	bne.n	80106ae <xQueueGenericSend+0x8e>
	__asm volatile
 8010698:	f04f 0350 	mov.w	r3, #80	; 0x50
 801069c:	f383 8811 	msr	BASEPRI, r3
 80106a0:	f3bf 8f6f 	isb	sy
 80106a4:	f3bf 8f4f 	dsb	sy
 80106a8:	623b      	str	r3, [r7, #32]
}
 80106aa:	bf00      	nop
 80106ac:	e7fe      	b.n	80106ac <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80106ae:	f001 f9e7 	bl	8011a80 <xTaskGetSchedulerState>
 80106b2:	4603      	mov	r3, r0
 80106b4:	2b00      	cmp	r3, #0
 80106b6:	d102      	bne.n	80106be <xQueueGenericSend+0x9e>
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	2b00      	cmp	r3, #0
 80106bc:	d101      	bne.n	80106c2 <xQueueGenericSend+0xa2>
 80106be:	2301      	movs	r3, #1
 80106c0:	e000      	b.n	80106c4 <xQueueGenericSend+0xa4>
 80106c2:	2300      	movs	r3, #0
 80106c4:	2b00      	cmp	r3, #0
 80106c6:	d10a      	bne.n	80106de <xQueueGenericSend+0xbe>
	__asm volatile
 80106c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106cc:	f383 8811 	msr	BASEPRI, r3
 80106d0:	f3bf 8f6f 	isb	sy
 80106d4:	f3bf 8f4f 	dsb	sy
 80106d8:	61fb      	str	r3, [r7, #28]
}
 80106da:	bf00      	nop
 80106dc:	e7fe      	b.n	80106dc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80106de:	f001 ff29 	bl	8012534 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80106e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80106e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80106ea:	429a      	cmp	r2, r3
 80106ec:	d302      	bcc.n	80106f4 <xQueueGenericSend+0xd4>
 80106ee:	683b      	ldr	r3, [r7, #0]
 80106f0:	2b02      	cmp	r3, #2
 80106f2:	d129      	bne.n	8010748 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80106f4:	683a      	ldr	r2, [r7, #0]
 80106f6:	68b9      	ldr	r1, [r7, #8]
 80106f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80106fa:	f000 fa0b 	bl	8010b14 <prvCopyDataToQueue>
 80106fe:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010704:	2b00      	cmp	r3, #0
 8010706:	d010      	beq.n	801072a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801070a:	3324      	adds	r3, #36	; 0x24
 801070c:	4618      	mov	r0, r3
 801070e:	f000 fff5 	bl	80116fc <xTaskRemoveFromEventList>
 8010712:	4603      	mov	r3, r0
 8010714:	2b00      	cmp	r3, #0
 8010716:	d013      	beq.n	8010740 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8010718:	4b3f      	ldr	r3, [pc, #252]	; (8010818 <xQueueGenericSend+0x1f8>)
 801071a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801071e:	601a      	str	r2, [r3, #0]
 8010720:	f3bf 8f4f 	dsb	sy
 8010724:	f3bf 8f6f 	isb	sy
 8010728:	e00a      	b.n	8010740 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801072a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801072c:	2b00      	cmp	r3, #0
 801072e:	d007      	beq.n	8010740 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8010730:	4b39      	ldr	r3, [pc, #228]	; (8010818 <xQueueGenericSend+0x1f8>)
 8010732:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010736:	601a      	str	r2, [r3, #0]
 8010738:	f3bf 8f4f 	dsb	sy
 801073c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8010740:	f001 ff28 	bl	8012594 <vPortExitCritical>
				return pdPASS;
 8010744:	2301      	movs	r3, #1
 8010746:	e063      	b.n	8010810 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	2b00      	cmp	r3, #0
 801074c:	d103      	bne.n	8010756 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801074e:	f001 ff21 	bl	8012594 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8010752:	2300      	movs	r3, #0
 8010754:	e05c      	b.n	8010810 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010756:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010758:	2b00      	cmp	r3, #0
 801075a:	d106      	bne.n	801076a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801075c:	f107 0314 	add.w	r3, r7, #20
 8010760:	4618      	mov	r0, r3
 8010762:	f001 f82f 	bl	80117c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010766:	2301      	movs	r3, #1
 8010768:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801076a:	f001 ff13 	bl	8012594 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801076e:	f000 fd9b 	bl	80112a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010772:	f001 fedf 	bl	8012534 <vPortEnterCritical>
 8010776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010778:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801077c:	b25b      	sxtb	r3, r3
 801077e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010782:	d103      	bne.n	801078c <xQueueGenericSend+0x16c>
 8010784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010786:	2200      	movs	r2, #0
 8010788:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801078c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801078e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010792:	b25b      	sxtb	r3, r3
 8010794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010798:	d103      	bne.n	80107a2 <xQueueGenericSend+0x182>
 801079a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801079c:	2200      	movs	r2, #0
 801079e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80107a2:	f001 fef7 	bl	8012594 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80107a6:	1d3a      	adds	r2, r7, #4
 80107a8:	f107 0314 	add.w	r3, r7, #20
 80107ac:	4611      	mov	r1, r2
 80107ae:	4618      	mov	r0, r3
 80107b0:	f001 f81e 	bl	80117f0 <xTaskCheckForTimeOut>
 80107b4:	4603      	mov	r3, r0
 80107b6:	2b00      	cmp	r3, #0
 80107b8:	d124      	bne.n	8010804 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80107ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80107bc:	f000 faa2 	bl	8010d04 <prvIsQueueFull>
 80107c0:	4603      	mov	r3, r0
 80107c2:	2b00      	cmp	r3, #0
 80107c4:	d018      	beq.n	80107f8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80107c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107c8:	3310      	adds	r3, #16
 80107ca:	687a      	ldr	r2, [r7, #4]
 80107cc:	4611      	mov	r1, r2
 80107ce:	4618      	mov	r0, r3
 80107d0:	f000 ff44 	bl	801165c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80107d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80107d6:	f000 fa2d 	bl	8010c34 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80107da:	f000 fd73 	bl	80112c4 <xTaskResumeAll>
 80107de:	4603      	mov	r3, r0
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	f47f af7c 	bne.w	80106de <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80107e6:	4b0c      	ldr	r3, [pc, #48]	; (8010818 <xQueueGenericSend+0x1f8>)
 80107e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80107ec:	601a      	str	r2, [r3, #0]
 80107ee:	f3bf 8f4f 	dsb	sy
 80107f2:	f3bf 8f6f 	isb	sy
 80107f6:	e772      	b.n	80106de <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80107f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80107fa:	f000 fa1b 	bl	8010c34 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80107fe:	f000 fd61 	bl	80112c4 <xTaskResumeAll>
 8010802:	e76c      	b.n	80106de <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8010804:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010806:	f000 fa15 	bl	8010c34 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801080a:	f000 fd5b 	bl	80112c4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801080e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8010810:	4618      	mov	r0, r3
 8010812:	3738      	adds	r7, #56	; 0x38
 8010814:	46bd      	mov	sp, r7
 8010816:	bd80      	pop	{r7, pc}
 8010818:	e000ed04 	.word	0xe000ed04

0801081c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 801081c:	b580      	push	{r7, lr}
 801081e:	b090      	sub	sp, #64	; 0x40
 8010820:	af00      	add	r7, sp, #0
 8010822:	60f8      	str	r0, [r7, #12]
 8010824:	60b9      	str	r1, [r7, #8]
 8010826:	607a      	str	r2, [r7, #4]
 8010828:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801082a:	68fb      	ldr	r3, [r7, #12]
 801082c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 801082e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010830:	2b00      	cmp	r3, #0
 8010832:	d10a      	bne.n	801084a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8010834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010838:	f383 8811 	msr	BASEPRI, r3
 801083c:	f3bf 8f6f 	isb	sy
 8010840:	f3bf 8f4f 	dsb	sy
 8010844:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8010846:	bf00      	nop
 8010848:	e7fe      	b.n	8010848 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801084a:	68bb      	ldr	r3, [r7, #8]
 801084c:	2b00      	cmp	r3, #0
 801084e:	d103      	bne.n	8010858 <xQueueGenericSendFromISR+0x3c>
 8010850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010854:	2b00      	cmp	r3, #0
 8010856:	d101      	bne.n	801085c <xQueueGenericSendFromISR+0x40>
 8010858:	2301      	movs	r3, #1
 801085a:	e000      	b.n	801085e <xQueueGenericSendFromISR+0x42>
 801085c:	2300      	movs	r3, #0
 801085e:	2b00      	cmp	r3, #0
 8010860:	d10a      	bne.n	8010878 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8010862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010866:	f383 8811 	msr	BASEPRI, r3
 801086a:	f3bf 8f6f 	isb	sy
 801086e:	f3bf 8f4f 	dsb	sy
 8010872:	627b      	str	r3, [r7, #36]	; 0x24
}
 8010874:	bf00      	nop
 8010876:	e7fe      	b.n	8010876 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010878:	683b      	ldr	r3, [r7, #0]
 801087a:	2b02      	cmp	r3, #2
 801087c:	d103      	bne.n	8010886 <xQueueGenericSendFromISR+0x6a>
 801087e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010880:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010882:	2b01      	cmp	r3, #1
 8010884:	d101      	bne.n	801088a <xQueueGenericSendFromISR+0x6e>
 8010886:	2301      	movs	r3, #1
 8010888:	e000      	b.n	801088c <xQueueGenericSendFromISR+0x70>
 801088a:	2300      	movs	r3, #0
 801088c:	2b00      	cmp	r3, #0
 801088e:	d10a      	bne.n	80108a6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8010890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010894:	f383 8811 	msr	BASEPRI, r3
 8010898:	f3bf 8f6f 	isb	sy
 801089c:	f3bf 8f4f 	dsb	sy
 80108a0:	623b      	str	r3, [r7, #32]
}
 80108a2:	bf00      	nop
 80108a4:	e7fe      	b.n	80108a4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80108a6:	f001 ff27 	bl	80126f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80108aa:	f3ef 8211 	mrs	r2, BASEPRI
 80108ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108b2:	f383 8811 	msr	BASEPRI, r3
 80108b6:	f3bf 8f6f 	isb	sy
 80108ba:	f3bf 8f4f 	dsb	sy
 80108be:	61fa      	str	r2, [r7, #28]
 80108c0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80108c2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80108c4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80108c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80108ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80108ce:	429a      	cmp	r2, r3
 80108d0:	d302      	bcc.n	80108d8 <xQueueGenericSendFromISR+0xbc>
 80108d2:	683b      	ldr	r3, [r7, #0]
 80108d4:	2b02      	cmp	r3, #2
 80108d6:	d12f      	bne.n	8010938 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80108d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80108de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80108e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80108e6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80108e8:	683a      	ldr	r2, [r7, #0]
 80108ea:	68b9      	ldr	r1, [r7, #8]
 80108ec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80108ee:	f000 f911 	bl	8010b14 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80108f2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80108f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80108fa:	d112      	bne.n	8010922 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80108fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010900:	2b00      	cmp	r3, #0
 8010902:	d016      	beq.n	8010932 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010906:	3324      	adds	r3, #36	; 0x24
 8010908:	4618      	mov	r0, r3
 801090a:	f000 fef7 	bl	80116fc <xTaskRemoveFromEventList>
 801090e:	4603      	mov	r3, r0
 8010910:	2b00      	cmp	r3, #0
 8010912:	d00e      	beq.n	8010932 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	2b00      	cmp	r3, #0
 8010918:	d00b      	beq.n	8010932 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	2201      	movs	r2, #1
 801091e:	601a      	str	r2, [r3, #0]
 8010920:	e007      	b.n	8010932 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010922:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8010926:	3301      	adds	r3, #1
 8010928:	b2db      	uxtb	r3, r3
 801092a:	b25a      	sxtb	r2, r3
 801092c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801092e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8010932:	2301      	movs	r3, #1
 8010934:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8010936:	e001      	b.n	801093c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8010938:	2300      	movs	r3, #0
 801093a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801093c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801093e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8010940:	697b      	ldr	r3, [r7, #20]
 8010942:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8010946:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010948:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 801094a:	4618      	mov	r0, r3
 801094c:	3740      	adds	r7, #64	; 0x40
 801094e:	46bd      	mov	sp, r7
 8010950:	bd80      	pop	{r7, pc}
	...

08010954 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8010954:	b580      	push	{r7, lr}
 8010956:	b08c      	sub	sp, #48	; 0x30
 8010958:	af00      	add	r7, sp, #0
 801095a:	60f8      	str	r0, [r7, #12]
 801095c:	60b9      	str	r1, [r7, #8]
 801095e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8010960:	2300      	movs	r3, #0
 8010962:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010964:	68fb      	ldr	r3, [r7, #12]
 8010966:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801096a:	2b00      	cmp	r3, #0
 801096c:	d10a      	bne.n	8010984 <xQueueReceive+0x30>
	__asm volatile
 801096e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010972:	f383 8811 	msr	BASEPRI, r3
 8010976:	f3bf 8f6f 	isb	sy
 801097a:	f3bf 8f4f 	dsb	sy
 801097e:	623b      	str	r3, [r7, #32]
}
 8010980:	bf00      	nop
 8010982:	e7fe      	b.n	8010982 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010984:	68bb      	ldr	r3, [r7, #8]
 8010986:	2b00      	cmp	r3, #0
 8010988:	d103      	bne.n	8010992 <xQueueReceive+0x3e>
 801098a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801098c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801098e:	2b00      	cmp	r3, #0
 8010990:	d101      	bne.n	8010996 <xQueueReceive+0x42>
 8010992:	2301      	movs	r3, #1
 8010994:	e000      	b.n	8010998 <xQueueReceive+0x44>
 8010996:	2300      	movs	r3, #0
 8010998:	2b00      	cmp	r3, #0
 801099a:	d10a      	bne.n	80109b2 <xQueueReceive+0x5e>
	__asm volatile
 801099c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109a0:	f383 8811 	msr	BASEPRI, r3
 80109a4:	f3bf 8f6f 	isb	sy
 80109a8:	f3bf 8f4f 	dsb	sy
 80109ac:	61fb      	str	r3, [r7, #28]
}
 80109ae:	bf00      	nop
 80109b0:	e7fe      	b.n	80109b0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80109b2:	f001 f865 	bl	8011a80 <xTaskGetSchedulerState>
 80109b6:	4603      	mov	r3, r0
 80109b8:	2b00      	cmp	r3, #0
 80109ba:	d102      	bne.n	80109c2 <xQueueReceive+0x6e>
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	2b00      	cmp	r3, #0
 80109c0:	d101      	bne.n	80109c6 <xQueueReceive+0x72>
 80109c2:	2301      	movs	r3, #1
 80109c4:	e000      	b.n	80109c8 <xQueueReceive+0x74>
 80109c6:	2300      	movs	r3, #0
 80109c8:	2b00      	cmp	r3, #0
 80109ca:	d10a      	bne.n	80109e2 <xQueueReceive+0x8e>
	__asm volatile
 80109cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109d0:	f383 8811 	msr	BASEPRI, r3
 80109d4:	f3bf 8f6f 	isb	sy
 80109d8:	f3bf 8f4f 	dsb	sy
 80109dc:	61bb      	str	r3, [r7, #24]
}
 80109de:	bf00      	nop
 80109e0:	e7fe      	b.n	80109e0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80109e2:	f001 fda7 	bl	8012534 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80109e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80109ea:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80109ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109ee:	2b00      	cmp	r3, #0
 80109f0:	d01f      	beq.n	8010a32 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80109f2:	68b9      	ldr	r1, [r7, #8]
 80109f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80109f6:	f000 f8f7 	bl	8010be8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80109fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109fc:	1e5a      	subs	r2, r3, #1
 80109fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a00:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a04:	691b      	ldr	r3, [r3, #16]
 8010a06:	2b00      	cmp	r3, #0
 8010a08:	d00f      	beq.n	8010a2a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a0c:	3310      	adds	r3, #16
 8010a0e:	4618      	mov	r0, r3
 8010a10:	f000 fe74 	bl	80116fc <xTaskRemoveFromEventList>
 8010a14:	4603      	mov	r3, r0
 8010a16:	2b00      	cmp	r3, #0
 8010a18:	d007      	beq.n	8010a2a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010a1a:	4b3d      	ldr	r3, [pc, #244]	; (8010b10 <xQueueReceive+0x1bc>)
 8010a1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010a20:	601a      	str	r2, [r3, #0]
 8010a22:	f3bf 8f4f 	dsb	sy
 8010a26:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010a2a:	f001 fdb3 	bl	8012594 <vPortExitCritical>
				return pdPASS;
 8010a2e:	2301      	movs	r3, #1
 8010a30:	e069      	b.n	8010b06 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	d103      	bne.n	8010a40 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010a38:	f001 fdac 	bl	8012594 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010a3c:	2300      	movs	r3, #0
 8010a3e:	e062      	b.n	8010b06 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	d106      	bne.n	8010a54 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010a46:	f107 0310 	add.w	r3, r7, #16
 8010a4a:	4618      	mov	r0, r3
 8010a4c:	f000 feba 	bl	80117c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010a50:	2301      	movs	r3, #1
 8010a52:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010a54:	f001 fd9e 	bl	8012594 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010a58:	f000 fc26 	bl	80112a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010a5c:	f001 fd6a 	bl	8012534 <vPortEnterCritical>
 8010a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a62:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010a66:	b25b      	sxtb	r3, r3
 8010a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a6c:	d103      	bne.n	8010a76 <xQueueReceive+0x122>
 8010a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a70:	2200      	movs	r2, #0
 8010a72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010a7c:	b25b      	sxtb	r3, r3
 8010a7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a82:	d103      	bne.n	8010a8c <xQueueReceive+0x138>
 8010a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a86:	2200      	movs	r2, #0
 8010a88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010a8c:	f001 fd82 	bl	8012594 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010a90:	1d3a      	adds	r2, r7, #4
 8010a92:	f107 0310 	add.w	r3, r7, #16
 8010a96:	4611      	mov	r1, r2
 8010a98:	4618      	mov	r0, r3
 8010a9a:	f000 fea9 	bl	80117f0 <xTaskCheckForTimeOut>
 8010a9e:	4603      	mov	r3, r0
 8010aa0:	2b00      	cmp	r3, #0
 8010aa2:	d123      	bne.n	8010aec <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010aa4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010aa6:	f000 f917 	bl	8010cd8 <prvIsQueueEmpty>
 8010aaa:	4603      	mov	r3, r0
 8010aac:	2b00      	cmp	r3, #0
 8010aae:	d017      	beq.n	8010ae0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ab2:	3324      	adds	r3, #36	; 0x24
 8010ab4:	687a      	ldr	r2, [r7, #4]
 8010ab6:	4611      	mov	r1, r2
 8010ab8:	4618      	mov	r0, r3
 8010aba:	f000 fdcf 	bl	801165c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010abe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010ac0:	f000 f8b8 	bl	8010c34 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010ac4:	f000 fbfe 	bl	80112c4 <xTaskResumeAll>
 8010ac8:	4603      	mov	r3, r0
 8010aca:	2b00      	cmp	r3, #0
 8010acc:	d189      	bne.n	80109e2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8010ace:	4b10      	ldr	r3, [pc, #64]	; (8010b10 <xQueueReceive+0x1bc>)
 8010ad0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010ad4:	601a      	str	r2, [r3, #0]
 8010ad6:	f3bf 8f4f 	dsb	sy
 8010ada:	f3bf 8f6f 	isb	sy
 8010ade:	e780      	b.n	80109e2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8010ae0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010ae2:	f000 f8a7 	bl	8010c34 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010ae6:	f000 fbed 	bl	80112c4 <xTaskResumeAll>
 8010aea:	e77a      	b.n	80109e2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8010aec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010aee:	f000 f8a1 	bl	8010c34 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010af2:	f000 fbe7 	bl	80112c4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010af6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010af8:	f000 f8ee 	bl	8010cd8 <prvIsQueueEmpty>
 8010afc:	4603      	mov	r3, r0
 8010afe:	2b00      	cmp	r3, #0
 8010b00:	f43f af6f 	beq.w	80109e2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010b04:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8010b06:	4618      	mov	r0, r3
 8010b08:	3730      	adds	r7, #48	; 0x30
 8010b0a:	46bd      	mov	sp, r7
 8010b0c:	bd80      	pop	{r7, pc}
 8010b0e:	bf00      	nop
 8010b10:	e000ed04 	.word	0xe000ed04

08010b14 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8010b14:	b580      	push	{r7, lr}
 8010b16:	b086      	sub	sp, #24
 8010b18:	af00      	add	r7, sp, #0
 8010b1a:	60f8      	str	r0, [r7, #12]
 8010b1c:	60b9      	str	r1, [r7, #8]
 8010b1e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8010b20:	2300      	movs	r3, #0
 8010b22:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010b24:	68fb      	ldr	r3, [r7, #12]
 8010b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010b28:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8010b2a:	68fb      	ldr	r3, [r7, #12]
 8010b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010b2e:	2b00      	cmp	r3, #0
 8010b30:	d10d      	bne.n	8010b4e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010b32:	68fb      	ldr	r3, [r7, #12]
 8010b34:	681b      	ldr	r3, [r3, #0]
 8010b36:	2b00      	cmp	r3, #0
 8010b38:	d14d      	bne.n	8010bd6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010b3a:	68fb      	ldr	r3, [r7, #12]
 8010b3c:	689b      	ldr	r3, [r3, #8]
 8010b3e:	4618      	mov	r0, r3
 8010b40:	f000 ffbc 	bl	8011abc <xTaskPriorityDisinherit>
 8010b44:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8010b46:	68fb      	ldr	r3, [r7, #12]
 8010b48:	2200      	movs	r2, #0
 8010b4a:	609a      	str	r2, [r3, #8]
 8010b4c:	e043      	b.n	8010bd6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	2b00      	cmp	r3, #0
 8010b52:	d119      	bne.n	8010b88 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010b54:	68fb      	ldr	r3, [r7, #12]
 8010b56:	6858      	ldr	r0, [r3, #4]
 8010b58:	68fb      	ldr	r3, [r7, #12]
 8010b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010b5c:	461a      	mov	r2, r3
 8010b5e:	68b9      	ldr	r1, [r7, #8]
 8010b60:	f003 fe11 	bl	8014786 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010b64:	68fb      	ldr	r3, [r7, #12]
 8010b66:	685a      	ldr	r2, [r3, #4]
 8010b68:	68fb      	ldr	r3, [r7, #12]
 8010b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010b6c:	441a      	add	r2, r3
 8010b6e:	68fb      	ldr	r3, [r7, #12]
 8010b70:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010b72:	68fb      	ldr	r3, [r7, #12]
 8010b74:	685a      	ldr	r2, [r3, #4]
 8010b76:	68fb      	ldr	r3, [r7, #12]
 8010b78:	689b      	ldr	r3, [r3, #8]
 8010b7a:	429a      	cmp	r2, r3
 8010b7c:	d32b      	bcc.n	8010bd6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8010b7e:	68fb      	ldr	r3, [r7, #12]
 8010b80:	681a      	ldr	r2, [r3, #0]
 8010b82:	68fb      	ldr	r3, [r7, #12]
 8010b84:	605a      	str	r2, [r3, #4]
 8010b86:	e026      	b.n	8010bd6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8010b88:	68fb      	ldr	r3, [r7, #12]
 8010b8a:	68d8      	ldr	r0, [r3, #12]
 8010b8c:	68fb      	ldr	r3, [r7, #12]
 8010b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010b90:	461a      	mov	r2, r3
 8010b92:	68b9      	ldr	r1, [r7, #8]
 8010b94:	f003 fdf7 	bl	8014786 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8010b98:	68fb      	ldr	r3, [r7, #12]
 8010b9a:	68da      	ldr	r2, [r3, #12]
 8010b9c:	68fb      	ldr	r3, [r7, #12]
 8010b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ba0:	425b      	negs	r3, r3
 8010ba2:	441a      	add	r2, r3
 8010ba4:	68fb      	ldr	r3, [r7, #12]
 8010ba6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010ba8:	68fb      	ldr	r3, [r7, #12]
 8010baa:	68da      	ldr	r2, [r3, #12]
 8010bac:	68fb      	ldr	r3, [r7, #12]
 8010bae:	681b      	ldr	r3, [r3, #0]
 8010bb0:	429a      	cmp	r2, r3
 8010bb2:	d207      	bcs.n	8010bc4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8010bb4:	68fb      	ldr	r3, [r7, #12]
 8010bb6:	689a      	ldr	r2, [r3, #8]
 8010bb8:	68fb      	ldr	r3, [r7, #12]
 8010bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010bbc:	425b      	negs	r3, r3
 8010bbe:	441a      	add	r2, r3
 8010bc0:	68fb      	ldr	r3, [r7, #12]
 8010bc2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	2b02      	cmp	r3, #2
 8010bc8:	d105      	bne.n	8010bd6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010bca:	693b      	ldr	r3, [r7, #16]
 8010bcc:	2b00      	cmp	r3, #0
 8010bce:	d002      	beq.n	8010bd6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8010bd0:	693b      	ldr	r3, [r7, #16]
 8010bd2:	3b01      	subs	r3, #1
 8010bd4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010bd6:	693b      	ldr	r3, [r7, #16]
 8010bd8:	1c5a      	adds	r2, r3, #1
 8010bda:	68fb      	ldr	r3, [r7, #12]
 8010bdc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8010bde:	697b      	ldr	r3, [r7, #20]
}
 8010be0:	4618      	mov	r0, r3
 8010be2:	3718      	adds	r7, #24
 8010be4:	46bd      	mov	sp, r7
 8010be6:	bd80      	pop	{r7, pc}

08010be8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8010be8:	b580      	push	{r7, lr}
 8010bea:	b082      	sub	sp, #8
 8010bec:	af00      	add	r7, sp, #0
 8010bee:	6078      	str	r0, [r7, #4]
 8010bf0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010bf6:	2b00      	cmp	r3, #0
 8010bf8:	d018      	beq.n	8010c2c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	68da      	ldr	r2, [r3, #12]
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c02:	441a      	add	r2, r3
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	68da      	ldr	r2, [r3, #12]
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	689b      	ldr	r3, [r3, #8]
 8010c10:	429a      	cmp	r2, r3
 8010c12:	d303      	bcc.n	8010c1c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	681a      	ldr	r2, [r3, #0]
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	68d9      	ldr	r1, [r3, #12]
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c24:	461a      	mov	r2, r3
 8010c26:	6838      	ldr	r0, [r7, #0]
 8010c28:	f003 fdad 	bl	8014786 <memcpy>
	}
}
 8010c2c:	bf00      	nop
 8010c2e:	3708      	adds	r7, #8
 8010c30:	46bd      	mov	sp, r7
 8010c32:	bd80      	pop	{r7, pc}

08010c34 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8010c34:	b580      	push	{r7, lr}
 8010c36:	b084      	sub	sp, #16
 8010c38:	af00      	add	r7, sp, #0
 8010c3a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8010c3c:	f001 fc7a 	bl	8012534 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010c46:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010c48:	e011      	b.n	8010c6e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c4e:	2b00      	cmp	r3, #0
 8010c50:	d012      	beq.n	8010c78 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	3324      	adds	r3, #36	; 0x24
 8010c56:	4618      	mov	r0, r3
 8010c58:	f000 fd50 	bl	80116fc <xTaskRemoveFromEventList>
 8010c5c:	4603      	mov	r3, r0
 8010c5e:	2b00      	cmp	r3, #0
 8010c60:	d001      	beq.n	8010c66 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8010c62:	f000 fe27 	bl	80118b4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8010c66:	7bfb      	ldrb	r3, [r7, #15]
 8010c68:	3b01      	subs	r3, #1
 8010c6a:	b2db      	uxtb	r3, r3
 8010c6c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010c6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010c72:	2b00      	cmp	r3, #0
 8010c74:	dce9      	bgt.n	8010c4a <prvUnlockQueue+0x16>
 8010c76:	e000      	b.n	8010c7a <prvUnlockQueue+0x46>
					break;
 8010c78:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	22ff      	movs	r2, #255	; 0xff
 8010c7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8010c82:	f001 fc87 	bl	8012594 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8010c86:	f001 fc55 	bl	8012534 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010c90:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010c92:	e011      	b.n	8010cb8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	691b      	ldr	r3, [r3, #16]
 8010c98:	2b00      	cmp	r3, #0
 8010c9a:	d012      	beq.n	8010cc2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	3310      	adds	r3, #16
 8010ca0:	4618      	mov	r0, r3
 8010ca2:	f000 fd2b 	bl	80116fc <xTaskRemoveFromEventList>
 8010ca6:	4603      	mov	r3, r0
 8010ca8:	2b00      	cmp	r3, #0
 8010caa:	d001      	beq.n	8010cb0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8010cac:	f000 fe02 	bl	80118b4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8010cb0:	7bbb      	ldrb	r3, [r7, #14]
 8010cb2:	3b01      	subs	r3, #1
 8010cb4:	b2db      	uxtb	r3, r3
 8010cb6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010cb8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010cbc:	2b00      	cmp	r3, #0
 8010cbe:	dce9      	bgt.n	8010c94 <prvUnlockQueue+0x60>
 8010cc0:	e000      	b.n	8010cc4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8010cc2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	22ff      	movs	r2, #255	; 0xff
 8010cc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8010ccc:	f001 fc62 	bl	8012594 <vPortExitCritical>
}
 8010cd0:	bf00      	nop
 8010cd2:	3710      	adds	r7, #16
 8010cd4:	46bd      	mov	sp, r7
 8010cd6:	bd80      	pop	{r7, pc}

08010cd8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8010cd8:	b580      	push	{r7, lr}
 8010cda:	b084      	sub	sp, #16
 8010cdc:	af00      	add	r7, sp, #0
 8010cde:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010ce0:	f001 fc28 	bl	8012534 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010ce8:	2b00      	cmp	r3, #0
 8010cea:	d102      	bne.n	8010cf2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8010cec:	2301      	movs	r3, #1
 8010cee:	60fb      	str	r3, [r7, #12]
 8010cf0:	e001      	b.n	8010cf6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8010cf2:	2300      	movs	r3, #0
 8010cf4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010cf6:	f001 fc4d 	bl	8012594 <vPortExitCritical>

	return xReturn;
 8010cfa:	68fb      	ldr	r3, [r7, #12]
}
 8010cfc:	4618      	mov	r0, r3
 8010cfe:	3710      	adds	r7, #16
 8010d00:	46bd      	mov	sp, r7
 8010d02:	bd80      	pop	{r7, pc}

08010d04 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8010d04:	b580      	push	{r7, lr}
 8010d06:	b084      	sub	sp, #16
 8010d08:	af00      	add	r7, sp, #0
 8010d0a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010d0c:	f001 fc12 	bl	8012534 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010d18:	429a      	cmp	r2, r3
 8010d1a:	d102      	bne.n	8010d22 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8010d1c:	2301      	movs	r3, #1
 8010d1e:	60fb      	str	r3, [r7, #12]
 8010d20:	e001      	b.n	8010d26 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8010d22:	2300      	movs	r3, #0
 8010d24:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010d26:	f001 fc35 	bl	8012594 <vPortExitCritical>

	return xReturn;
 8010d2a:	68fb      	ldr	r3, [r7, #12]
}
 8010d2c:	4618      	mov	r0, r3
 8010d2e:	3710      	adds	r7, #16
 8010d30:	46bd      	mov	sp, r7
 8010d32:	bd80      	pop	{r7, pc}

08010d34 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8010d34:	b480      	push	{r7}
 8010d36:	b085      	sub	sp, #20
 8010d38:	af00      	add	r7, sp, #0
 8010d3a:	6078      	str	r0, [r7, #4]
 8010d3c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010d3e:	2300      	movs	r3, #0
 8010d40:	60fb      	str	r3, [r7, #12]
 8010d42:	e014      	b.n	8010d6e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8010d44:	4a0f      	ldr	r2, [pc, #60]	; (8010d84 <vQueueAddToRegistry+0x50>)
 8010d46:	68fb      	ldr	r3, [r7, #12]
 8010d48:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8010d4c:	2b00      	cmp	r3, #0
 8010d4e:	d10b      	bne.n	8010d68 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8010d50:	490c      	ldr	r1, [pc, #48]	; (8010d84 <vQueueAddToRegistry+0x50>)
 8010d52:	68fb      	ldr	r3, [r7, #12]
 8010d54:	683a      	ldr	r2, [r7, #0]
 8010d56:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8010d5a:	4a0a      	ldr	r2, [pc, #40]	; (8010d84 <vQueueAddToRegistry+0x50>)
 8010d5c:	68fb      	ldr	r3, [r7, #12]
 8010d5e:	00db      	lsls	r3, r3, #3
 8010d60:	4413      	add	r3, r2
 8010d62:	687a      	ldr	r2, [r7, #4]
 8010d64:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8010d66:	e006      	b.n	8010d76 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010d68:	68fb      	ldr	r3, [r7, #12]
 8010d6a:	3301      	adds	r3, #1
 8010d6c:	60fb      	str	r3, [r7, #12]
 8010d6e:	68fb      	ldr	r3, [r7, #12]
 8010d70:	2b07      	cmp	r3, #7
 8010d72:	d9e7      	bls.n	8010d44 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8010d74:	bf00      	nop
 8010d76:	bf00      	nop
 8010d78:	3714      	adds	r7, #20
 8010d7a:	46bd      	mov	sp, r7
 8010d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d80:	4770      	bx	lr
 8010d82:	bf00      	nop
 8010d84:	200046b8 	.word	0x200046b8

08010d88 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8010d88:	b580      	push	{r7, lr}
 8010d8a:	b086      	sub	sp, #24
 8010d8c:	af00      	add	r7, sp, #0
 8010d8e:	60f8      	str	r0, [r7, #12]
 8010d90:	60b9      	str	r1, [r7, #8]
 8010d92:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8010d94:	68fb      	ldr	r3, [r7, #12]
 8010d96:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8010d98:	f001 fbcc 	bl	8012534 <vPortEnterCritical>
 8010d9c:	697b      	ldr	r3, [r7, #20]
 8010d9e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010da2:	b25b      	sxtb	r3, r3
 8010da4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010da8:	d103      	bne.n	8010db2 <vQueueWaitForMessageRestricted+0x2a>
 8010daa:	697b      	ldr	r3, [r7, #20]
 8010dac:	2200      	movs	r2, #0
 8010dae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010db2:	697b      	ldr	r3, [r7, #20]
 8010db4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010db8:	b25b      	sxtb	r3, r3
 8010dba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010dbe:	d103      	bne.n	8010dc8 <vQueueWaitForMessageRestricted+0x40>
 8010dc0:	697b      	ldr	r3, [r7, #20]
 8010dc2:	2200      	movs	r2, #0
 8010dc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010dc8:	f001 fbe4 	bl	8012594 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8010dcc:	697b      	ldr	r3, [r7, #20]
 8010dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010dd0:	2b00      	cmp	r3, #0
 8010dd2:	d106      	bne.n	8010de2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8010dd4:	697b      	ldr	r3, [r7, #20]
 8010dd6:	3324      	adds	r3, #36	; 0x24
 8010dd8:	687a      	ldr	r2, [r7, #4]
 8010dda:	68b9      	ldr	r1, [r7, #8]
 8010ddc:	4618      	mov	r0, r3
 8010dde:	f000 fc61 	bl	80116a4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8010de2:	6978      	ldr	r0, [r7, #20]
 8010de4:	f7ff ff26 	bl	8010c34 <prvUnlockQueue>
	}
 8010de8:	bf00      	nop
 8010dea:	3718      	adds	r7, #24
 8010dec:	46bd      	mov	sp, r7
 8010dee:	bd80      	pop	{r7, pc}

08010df0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8010df0:	b580      	push	{r7, lr}
 8010df2:	b08e      	sub	sp, #56	; 0x38
 8010df4:	af04      	add	r7, sp, #16
 8010df6:	60f8      	str	r0, [r7, #12]
 8010df8:	60b9      	str	r1, [r7, #8]
 8010dfa:	607a      	str	r2, [r7, #4]
 8010dfc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8010dfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e00:	2b00      	cmp	r3, #0
 8010e02:	d10a      	bne.n	8010e1a <xTaskCreateStatic+0x2a>
	__asm volatile
 8010e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e08:	f383 8811 	msr	BASEPRI, r3
 8010e0c:	f3bf 8f6f 	isb	sy
 8010e10:	f3bf 8f4f 	dsb	sy
 8010e14:	623b      	str	r3, [r7, #32]
}
 8010e16:	bf00      	nop
 8010e18:	e7fe      	b.n	8010e18 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8010e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	d10a      	bne.n	8010e36 <xTaskCreateStatic+0x46>
	__asm volatile
 8010e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e24:	f383 8811 	msr	BASEPRI, r3
 8010e28:	f3bf 8f6f 	isb	sy
 8010e2c:	f3bf 8f4f 	dsb	sy
 8010e30:	61fb      	str	r3, [r7, #28]
}
 8010e32:	bf00      	nop
 8010e34:	e7fe      	b.n	8010e34 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8010e36:	23a8      	movs	r3, #168	; 0xa8
 8010e38:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8010e3a:	693b      	ldr	r3, [r7, #16]
 8010e3c:	2ba8      	cmp	r3, #168	; 0xa8
 8010e3e:	d00a      	beq.n	8010e56 <xTaskCreateStatic+0x66>
	__asm volatile
 8010e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e44:	f383 8811 	msr	BASEPRI, r3
 8010e48:	f3bf 8f6f 	isb	sy
 8010e4c:	f3bf 8f4f 	dsb	sy
 8010e50:	61bb      	str	r3, [r7, #24]
}
 8010e52:	bf00      	nop
 8010e54:	e7fe      	b.n	8010e54 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8010e56:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8010e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e5a:	2b00      	cmp	r3, #0
 8010e5c:	d01e      	beq.n	8010e9c <xTaskCreateStatic+0xac>
 8010e5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e60:	2b00      	cmp	r3, #0
 8010e62:	d01b      	beq.n	8010e9c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e66:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8010e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010e6c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8010e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e70:	2202      	movs	r2, #2
 8010e72:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8010e76:	2300      	movs	r3, #0
 8010e78:	9303      	str	r3, [sp, #12]
 8010e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e7c:	9302      	str	r3, [sp, #8]
 8010e7e:	f107 0314 	add.w	r3, r7, #20
 8010e82:	9301      	str	r3, [sp, #4]
 8010e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e86:	9300      	str	r3, [sp, #0]
 8010e88:	683b      	ldr	r3, [r7, #0]
 8010e8a:	687a      	ldr	r2, [r7, #4]
 8010e8c:	68b9      	ldr	r1, [r7, #8]
 8010e8e:	68f8      	ldr	r0, [r7, #12]
 8010e90:	f000 f850 	bl	8010f34 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010e94:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010e96:	f000 f8f3 	bl	8011080 <prvAddNewTaskToReadyList>
 8010e9a:	e001      	b.n	8010ea0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8010e9c:	2300      	movs	r3, #0
 8010e9e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8010ea0:	697b      	ldr	r3, [r7, #20]
	}
 8010ea2:	4618      	mov	r0, r3
 8010ea4:	3728      	adds	r7, #40	; 0x28
 8010ea6:	46bd      	mov	sp, r7
 8010ea8:	bd80      	pop	{r7, pc}

08010eaa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8010eaa:	b580      	push	{r7, lr}
 8010eac:	b08c      	sub	sp, #48	; 0x30
 8010eae:	af04      	add	r7, sp, #16
 8010eb0:	60f8      	str	r0, [r7, #12]
 8010eb2:	60b9      	str	r1, [r7, #8]
 8010eb4:	603b      	str	r3, [r7, #0]
 8010eb6:	4613      	mov	r3, r2
 8010eb8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8010eba:	88fb      	ldrh	r3, [r7, #6]
 8010ebc:	009b      	lsls	r3, r3, #2
 8010ebe:	4618      	mov	r0, r3
 8010ec0:	f001 fc5a 	bl	8012778 <pvPortMalloc>
 8010ec4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8010ec6:	697b      	ldr	r3, [r7, #20]
 8010ec8:	2b00      	cmp	r3, #0
 8010eca:	d00e      	beq.n	8010eea <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8010ecc:	20a8      	movs	r0, #168	; 0xa8
 8010ece:	f001 fc53 	bl	8012778 <pvPortMalloc>
 8010ed2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8010ed4:	69fb      	ldr	r3, [r7, #28]
 8010ed6:	2b00      	cmp	r3, #0
 8010ed8:	d003      	beq.n	8010ee2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8010eda:	69fb      	ldr	r3, [r7, #28]
 8010edc:	697a      	ldr	r2, [r7, #20]
 8010ede:	631a      	str	r2, [r3, #48]	; 0x30
 8010ee0:	e005      	b.n	8010eee <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8010ee2:	6978      	ldr	r0, [r7, #20]
 8010ee4:	f001 fd14 	bl	8012910 <vPortFree>
 8010ee8:	e001      	b.n	8010eee <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8010eea:	2300      	movs	r3, #0
 8010eec:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8010eee:	69fb      	ldr	r3, [r7, #28]
 8010ef0:	2b00      	cmp	r3, #0
 8010ef2:	d017      	beq.n	8010f24 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8010ef4:	69fb      	ldr	r3, [r7, #28]
 8010ef6:	2200      	movs	r2, #0
 8010ef8:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8010efc:	88fa      	ldrh	r2, [r7, #6]
 8010efe:	2300      	movs	r3, #0
 8010f00:	9303      	str	r3, [sp, #12]
 8010f02:	69fb      	ldr	r3, [r7, #28]
 8010f04:	9302      	str	r3, [sp, #8]
 8010f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f08:	9301      	str	r3, [sp, #4]
 8010f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f0c:	9300      	str	r3, [sp, #0]
 8010f0e:	683b      	ldr	r3, [r7, #0]
 8010f10:	68b9      	ldr	r1, [r7, #8]
 8010f12:	68f8      	ldr	r0, [r7, #12]
 8010f14:	f000 f80e 	bl	8010f34 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010f18:	69f8      	ldr	r0, [r7, #28]
 8010f1a:	f000 f8b1 	bl	8011080 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8010f1e:	2301      	movs	r3, #1
 8010f20:	61bb      	str	r3, [r7, #24]
 8010f22:	e002      	b.n	8010f2a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8010f24:	f04f 33ff 	mov.w	r3, #4294967295
 8010f28:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8010f2a:	69bb      	ldr	r3, [r7, #24]
	}
 8010f2c:	4618      	mov	r0, r3
 8010f2e:	3720      	adds	r7, #32
 8010f30:	46bd      	mov	sp, r7
 8010f32:	bd80      	pop	{r7, pc}

08010f34 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8010f34:	b580      	push	{r7, lr}
 8010f36:	b088      	sub	sp, #32
 8010f38:	af00      	add	r7, sp, #0
 8010f3a:	60f8      	str	r0, [r7, #12]
 8010f3c:	60b9      	str	r1, [r7, #8]
 8010f3e:	607a      	str	r2, [r7, #4]
 8010f40:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8010f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f44:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	009b      	lsls	r3, r3, #2
 8010f4a:	461a      	mov	r2, r3
 8010f4c:	21a5      	movs	r1, #165	; 0xa5
 8010f4e:	f003 fb44 	bl	80145da <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8010f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8010f5c:	3b01      	subs	r3, #1
 8010f5e:	009b      	lsls	r3, r3, #2
 8010f60:	4413      	add	r3, r2
 8010f62:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8010f64:	69bb      	ldr	r3, [r7, #24]
 8010f66:	f023 0307 	bic.w	r3, r3, #7
 8010f6a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8010f6c:	69bb      	ldr	r3, [r7, #24]
 8010f6e:	f003 0307 	and.w	r3, r3, #7
 8010f72:	2b00      	cmp	r3, #0
 8010f74:	d00a      	beq.n	8010f8c <prvInitialiseNewTask+0x58>
	__asm volatile
 8010f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f7a:	f383 8811 	msr	BASEPRI, r3
 8010f7e:	f3bf 8f6f 	isb	sy
 8010f82:	f3bf 8f4f 	dsb	sy
 8010f86:	617b      	str	r3, [r7, #20]
}
 8010f88:	bf00      	nop
 8010f8a:	e7fe      	b.n	8010f8a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8010f8c:	68bb      	ldr	r3, [r7, #8]
 8010f8e:	2b00      	cmp	r3, #0
 8010f90:	d01f      	beq.n	8010fd2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010f92:	2300      	movs	r3, #0
 8010f94:	61fb      	str	r3, [r7, #28]
 8010f96:	e012      	b.n	8010fbe <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8010f98:	68ba      	ldr	r2, [r7, #8]
 8010f9a:	69fb      	ldr	r3, [r7, #28]
 8010f9c:	4413      	add	r3, r2
 8010f9e:	7819      	ldrb	r1, [r3, #0]
 8010fa0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010fa2:	69fb      	ldr	r3, [r7, #28]
 8010fa4:	4413      	add	r3, r2
 8010fa6:	3334      	adds	r3, #52	; 0x34
 8010fa8:	460a      	mov	r2, r1
 8010faa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8010fac:	68ba      	ldr	r2, [r7, #8]
 8010fae:	69fb      	ldr	r3, [r7, #28]
 8010fb0:	4413      	add	r3, r2
 8010fb2:	781b      	ldrb	r3, [r3, #0]
 8010fb4:	2b00      	cmp	r3, #0
 8010fb6:	d006      	beq.n	8010fc6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010fb8:	69fb      	ldr	r3, [r7, #28]
 8010fba:	3301      	adds	r3, #1
 8010fbc:	61fb      	str	r3, [r7, #28]
 8010fbe:	69fb      	ldr	r3, [r7, #28]
 8010fc0:	2b0f      	cmp	r3, #15
 8010fc2:	d9e9      	bls.n	8010f98 <prvInitialiseNewTask+0x64>
 8010fc4:	e000      	b.n	8010fc8 <prvInitialiseNewTask+0x94>
			{
				break;
 8010fc6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8010fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fca:	2200      	movs	r2, #0
 8010fcc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8010fd0:	e003      	b.n	8010fda <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8010fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fd4:	2200      	movs	r2, #0
 8010fd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8010fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fdc:	2b37      	cmp	r3, #55	; 0x37
 8010fde:	d901      	bls.n	8010fe4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8010fe0:	2337      	movs	r3, #55	; 0x37
 8010fe2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8010fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fe6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010fe8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8010fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010fee:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8010ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ff2:	2200      	movs	r2, #0
 8010ff4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8010ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ff8:	3304      	adds	r3, #4
 8010ffa:	4618      	mov	r0, r3
 8010ffc:	f7ff f978 	bl	80102f0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8011000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011002:	3318      	adds	r3, #24
 8011004:	4618      	mov	r0, r3
 8011006:	f7ff f973 	bl	80102f0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801100a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801100c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801100e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011012:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8011016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011018:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801101a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801101c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801101e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8011020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011022:	2200      	movs	r2, #0
 8011024:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8011028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801102a:	2200      	movs	r2, #0
 801102c:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8011030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011032:	3354      	adds	r3, #84	; 0x54
 8011034:	224c      	movs	r2, #76	; 0x4c
 8011036:	2100      	movs	r1, #0
 8011038:	4618      	mov	r0, r3
 801103a:	f003 face 	bl	80145da <memset>
 801103e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011040:	4a0c      	ldr	r2, [pc, #48]	; (8011074 <prvInitialiseNewTask+0x140>)
 8011042:	659a      	str	r2, [r3, #88]	; 0x58
 8011044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011046:	4a0c      	ldr	r2, [pc, #48]	; (8011078 <prvInitialiseNewTask+0x144>)
 8011048:	65da      	str	r2, [r3, #92]	; 0x5c
 801104a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801104c:	4a0b      	ldr	r2, [pc, #44]	; (801107c <prvInitialiseNewTask+0x148>)
 801104e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8011050:	683a      	ldr	r2, [r7, #0]
 8011052:	68f9      	ldr	r1, [r7, #12]
 8011054:	69b8      	ldr	r0, [r7, #24]
 8011056:	f001 f941 	bl	80122dc <pxPortInitialiseStack>
 801105a:	4602      	mov	r2, r0
 801105c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801105e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8011060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011062:	2b00      	cmp	r3, #0
 8011064:	d002      	beq.n	801106c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8011066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011068:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801106a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801106c:	bf00      	nop
 801106e:	3720      	adds	r7, #32
 8011070:	46bd      	mov	sp, r7
 8011072:	bd80      	pop	{r7, pc}
 8011074:	20009828 	.word	0x20009828
 8011078:	20009890 	.word	0x20009890
 801107c:	200098f8 	.word	0x200098f8

08011080 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8011080:	b580      	push	{r7, lr}
 8011082:	b082      	sub	sp, #8
 8011084:	af00      	add	r7, sp, #0
 8011086:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8011088:	f001 fa54 	bl	8012534 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801108c:	4b2d      	ldr	r3, [pc, #180]	; (8011144 <prvAddNewTaskToReadyList+0xc4>)
 801108e:	681b      	ldr	r3, [r3, #0]
 8011090:	3301      	adds	r3, #1
 8011092:	4a2c      	ldr	r2, [pc, #176]	; (8011144 <prvAddNewTaskToReadyList+0xc4>)
 8011094:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8011096:	4b2c      	ldr	r3, [pc, #176]	; (8011148 <prvAddNewTaskToReadyList+0xc8>)
 8011098:	681b      	ldr	r3, [r3, #0]
 801109a:	2b00      	cmp	r3, #0
 801109c:	d109      	bne.n	80110b2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801109e:	4a2a      	ldr	r2, [pc, #168]	; (8011148 <prvAddNewTaskToReadyList+0xc8>)
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80110a4:	4b27      	ldr	r3, [pc, #156]	; (8011144 <prvAddNewTaskToReadyList+0xc4>)
 80110a6:	681b      	ldr	r3, [r3, #0]
 80110a8:	2b01      	cmp	r3, #1
 80110aa:	d110      	bne.n	80110ce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80110ac:	f000 fc26 	bl	80118fc <prvInitialiseTaskLists>
 80110b0:	e00d      	b.n	80110ce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80110b2:	4b26      	ldr	r3, [pc, #152]	; (801114c <prvAddNewTaskToReadyList+0xcc>)
 80110b4:	681b      	ldr	r3, [r3, #0]
 80110b6:	2b00      	cmp	r3, #0
 80110b8:	d109      	bne.n	80110ce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80110ba:	4b23      	ldr	r3, [pc, #140]	; (8011148 <prvAddNewTaskToReadyList+0xc8>)
 80110bc:	681b      	ldr	r3, [r3, #0]
 80110be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80110c4:	429a      	cmp	r2, r3
 80110c6:	d802      	bhi.n	80110ce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80110c8:	4a1f      	ldr	r2, [pc, #124]	; (8011148 <prvAddNewTaskToReadyList+0xc8>)
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80110ce:	4b20      	ldr	r3, [pc, #128]	; (8011150 <prvAddNewTaskToReadyList+0xd0>)
 80110d0:	681b      	ldr	r3, [r3, #0]
 80110d2:	3301      	adds	r3, #1
 80110d4:	4a1e      	ldr	r2, [pc, #120]	; (8011150 <prvAddNewTaskToReadyList+0xd0>)
 80110d6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80110d8:	4b1d      	ldr	r3, [pc, #116]	; (8011150 <prvAddNewTaskToReadyList+0xd0>)
 80110da:	681a      	ldr	r2, [r3, #0]
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80110e4:	4b1b      	ldr	r3, [pc, #108]	; (8011154 <prvAddNewTaskToReadyList+0xd4>)
 80110e6:	681b      	ldr	r3, [r3, #0]
 80110e8:	429a      	cmp	r2, r3
 80110ea:	d903      	bls.n	80110f4 <prvAddNewTaskToReadyList+0x74>
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80110f0:	4a18      	ldr	r2, [pc, #96]	; (8011154 <prvAddNewTaskToReadyList+0xd4>)
 80110f2:	6013      	str	r3, [r2, #0]
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80110f8:	4613      	mov	r3, r2
 80110fa:	009b      	lsls	r3, r3, #2
 80110fc:	4413      	add	r3, r2
 80110fe:	009b      	lsls	r3, r3, #2
 8011100:	4a15      	ldr	r2, [pc, #84]	; (8011158 <prvAddNewTaskToReadyList+0xd8>)
 8011102:	441a      	add	r2, r3
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	3304      	adds	r3, #4
 8011108:	4619      	mov	r1, r3
 801110a:	4610      	mov	r0, r2
 801110c:	f7ff f8fd 	bl	801030a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8011110:	f001 fa40 	bl	8012594 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8011114:	4b0d      	ldr	r3, [pc, #52]	; (801114c <prvAddNewTaskToReadyList+0xcc>)
 8011116:	681b      	ldr	r3, [r3, #0]
 8011118:	2b00      	cmp	r3, #0
 801111a:	d00e      	beq.n	801113a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801111c:	4b0a      	ldr	r3, [pc, #40]	; (8011148 <prvAddNewTaskToReadyList+0xc8>)
 801111e:	681b      	ldr	r3, [r3, #0]
 8011120:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011126:	429a      	cmp	r2, r3
 8011128:	d207      	bcs.n	801113a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801112a:	4b0c      	ldr	r3, [pc, #48]	; (801115c <prvAddNewTaskToReadyList+0xdc>)
 801112c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011130:	601a      	str	r2, [r3, #0]
 8011132:	f3bf 8f4f 	dsb	sy
 8011136:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801113a:	bf00      	nop
 801113c:	3708      	adds	r7, #8
 801113e:	46bd      	mov	sp, r7
 8011140:	bd80      	pop	{r7, pc}
 8011142:	bf00      	nop
 8011144:	20004bcc 	.word	0x20004bcc
 8011148:	200046f8 	.word	0x200046f8
 801114c:	20004bd8 	.word	0x20004bd8
 8011150:	20004be8 	.word	0x20004be8
 8011154:	20004bd4 	.word	0x20004bd4
 8011158:	200046fc 	.word	0x200046fc
 801115c:	e000ed04 	.word	0xe000ed04

08011160 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8011160:	b580      	push	{r7, lr}
 8011162:	b084      	sub	sp, #16
 8011164:	af00      	add	r7, sp, #0
 8011166:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8011168:	2300      	movs	r3, #0
 801116a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	2b00      	cmp	r3, #0
 8011170:	d017      	beq.n	80111a2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8011172:	4b13      	ldr	r3, [pc, #76]	; (80111c0 <vTaskDelay+0x60>)
 8011174:	681b      	ldr	r3, [r3, #0]
 8011176:	2b00      	cmp	r3, #0
 8011178:	d00a      	beq.n	8011190 <vTaskDelay+0x30>
	__asm volatile
 801117a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801117e:	f383 8811 	msr	BASEPRI, r3
 8011182:	f3bf 8f6f 	isb	sy
 8011186:	f3bf 8f4f 	dsb	sy
 801118a:	60bb      	str	r3, [r7, #8]
}
 801118c:	bf00      	nop
 801118e:	e7fe      	b.n	801118e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8011190:	f000 f88a 	bl	80112a8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8011194:	2100      	movs	r1, #0
 8011196:	6878      	ldr	r0, [r7, #4]
 8011198:	f000 fcfe 	bl	8011b98 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801119c:	f000 f892 	bl	80112c4 <xTaskResumeAll>
 80111a0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80111a2:	68fb      	ldr	r3, [r7, #12]
 80111a4:	2b00      	cmp	r3, #0
 80111a6:	d107      	bne.n	80111b8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80111a8:	4b06      	ldr	r3, [pc, #24]	; (80111c4 <vTaskDelay+0x64>)
 80111aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80111ae:	601a      	str	r2, [r3, #0]
 80111b0:	f3bf 8f4f 	dsb	sy
 80111b4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80111b8:	bf00      	nop
 80111ba:	3710      	adds	r7, #16
 80111bc:	46bd      	mov	sp, r7
 80111be:	bd80      	pop	{r7, pc}
 80111c0:	20004bf4 	.word	0x20004bf4
 80111c4:	e000ed04 	.word	0xe000ed04

080111c8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80111c8:	b580      	push	{r7, lr}
 80111ca:	b08a      	sub	sp, #40	; 0x28
 80111cc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80111ce:	2300      	movs	r3, #0
 80111d0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80111d2:	2300      	movs	r3, #0
 80111d4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80111d6:	463a      	mov	r2, r7
 80111d8:	1d39      	adds	r1, r7, #4
 80111da:	f107 0308 	add.w	r3, r7, #8
 80111de:	4618      	mov	r0, r3
 80111e0:	f7ff f832 	bl	8010248 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80111e4:	6839      	ldr	r1, [r7, #0]
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	68ba      	ldr	r2, [r7, #8]
 80111ea:	9202      	str	r2, [sp, #8]
 80111ec:	9301      	str	r3, [sp, #4]
 80111ee:	2300      	movs	r3, #0
 80111f0:	9300      	str	r3, [sp, #0]
 80111f2:	2300      	movs	r3, #0
 80111f4:	460a      	mov	r2, r1
 80111f6:	4924      	ldr	r1, [pc, #144]	; (8011288 <vTaskStartScheduler+0xc0>)
 80111f8:	4824      	ldr	r0, [pc, #144]	; (801128c <vTaskStartScheduler+0xc4>)
 80111fa:	f7ff fdf9 	bl	8010df0 <xTaskCreateStatic>
 80111fe:	4603      	mov	r3, r0
 8011200:	4a23      	ldr	r2, [pc, #140]	; (8011290 <vTaskStartScheduler+0xc8>)
 8011202:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8011204:	4b22      	ldr	r3, [pc, #136]	; (8011290 <vTaskStartScheduler+0xc8>)
 8011206:	681b      	ldr	r3, [r3, #0]
 8011208:	2b00      	cmp	r3, #0
 801120a:	d002      	beq.n	8011212 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 801120c:	2301      	movs	r3, #1
 801120e:	617b      	str	r3, [r7, #20]
 8011210:	e001      	b.n	8011216 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8011212:	2300      	movs	r3, #0
 8011214:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8011216:	697b      	ldr	r3, [r7, #20]
 8011218:	2b01      	cmp	r3, #1
 801121a:	d102      	bne.n	8011222 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 801121c:	f000 fd10 	bl	8011c40 <xTimerCreateTimerTask>
 8011220:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8011222:	697b      	ldr	r3, [r7, #20]
 8011224:	2b01      	cmp	r3, #1
 8011226:	d11b      	bne.n	8011260 <vTaskStartScheduler+0x98>
	__asm volatile
 8011228:	f04f 0350 	mov.w	r3, #80	; 0x50
 801122c:	f383 8811 	msr	BASEPRI, r3
 8011230:	f3bf 8f6f 	isb	sy
 8011234:	f3bf 8f4f 	dsb	sy
 8011238:	613b      	str	r3, [r7, #16]
}
 801123a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801123c:	4b15      	ldr	r3, [pc, #84]	; (8011294 <vTaskStartScheduler+0xcc>)
 801123e:	681b      	ldr	r3, [r3, #0]
 8011240:	3354      	adds	r3, #84	; 0x54
 8011242:	4a15      	ldr	r2, [pc, #84]	; (8011298 <vTaskStartScheduler+0xd0>)
 8011244:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8011246:	4b15      	ldr	r3, [pc, #84]	; (801129c <vTaskStartScheduler+0xd4>)
 8011248:	f04f 32ff 	mov.w	r2, #4294967295
 801124c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801124e:	4b14      	ldr	r3, [pc, #80]	; (80112a0 <vTaskStartScheduler+0xd8>)
 8011250:	2201      	movs	r2, #1
 8011252:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8011254:	4b13      	ldr	r3, [pc, #76]	; (80112a4 <vTaskStartScheduler+0xdc>)
 8011256:	2200      	movs	r2, #0
 8011258:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801125a:	f001 f8c9 	bl	80123f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801125e:	e00e      	b.n	801127e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8011260:	697b      	ldr	r3, [r7, #20]
 8011262:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011266:	d10a      	bne.n	801127e <vTaskStartScheduler+0xb6>
	__asm volatile
 8011268:	f04f 0350 	mov.w	r3, #80	; 0x50
 801126c:	f383 8811 	msr	BASEPRI, r3
 8011270:	f3bf 8f6f 	isb	sy
 8011274:	f3bf 8f4f 	dsb	sy
 8011278:	60fb      	str	r3, [r7, #12]
}
 801127a:	bf00      	nop
 801127c:	e7fe      	b.n	801127c <vTaskStartScheduler+0xb4>
}
 801127e:	bf00      	nop
 8011280:	3718      	adds	r7, #24
 8011282:	46bd      	mov	sp, r7
 8011284:	bd80      	pop	{r7, pc}
 8011286:	bf00      	nop
 8011288:	08016a78 	.word	0x08016a78
 801128c:	080118cd 	.word	0x080118cd
 8011290:	20004bf0 	.word	0x20004bf0
 8011294:	200046f8 	.word	0x200046f8
 8011298:	20000410 	.word	0x20000410
 801129c:	20004bec 	.word	0x20004bec
 80112a0:	20004bd8 	.word	0x20004bd8
 80112a4:	20004bd0 	.word	0x20004bd0

080112a8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80112a8:	b480      	push	{r7}
 80112aa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80112ac:	4b04      	ldr	r3, [pc, #16]	; (80112c0 <vTaskSuspendAll+0x18>)
 80112ae:	681b      	ldr	r3, [r3, #0]
 80112b0:	3301      	adds	r3, #1
 80112b2:	4a03      	ldr	r2, [pc, #12]	; (80112c0 <vTaskSuspendAll+0x18>)
 80112b4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80112b6:	bf00      	nop
 80112b8:	46bd      	mov	sp, r7
 80112ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112be:	4770      	bx	lr
 80112c0:	20004bf4 	.word	0x20004bf4

080112c4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80112c4:	b580      	push	{r7, lr}
 80112c6:	b084      	sub	sp, #16
 80112c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80112ca:	2300      	movs	r3, #0
 80112cc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80112ce:	2300      	movs	r3, #0
 80112d0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80112d2:	4b42      	ldr	r3, [pc, #264]	; (80113dc <xTaskResumeAll+0x118>)
 80112d4:	681b      	ldr	r3, [r3, #0]
 80112d6:	2b00      	cmp	r3, #0
 80112d8:	d10a      	bne.n	80112f0 <xTaskResumeAll+0x2c>
	__asm volatile
 80112da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112de:	f383 8811 	msr	BASEPRI, r3
 80112e2:	f3bf 8f6f 	isb	sy
 80112e6:	f3bf 8f4f 	dsb	sy
 80112ea:	603b      	str	r3, [r7, #0]
}
 80112ec:	bf00      	nop
 80112ee:	e7fe      	b.n	80112ee <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80112f0:	f001 f920 	bl	8012534 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80112f4:	4b39      	ldr	r3, [pc, #228]	; (80113dc <xTaskResumeAll+0x118>)
 80112f6:	681b      	ldr	r3, [r3, #0]
 80112f8:	3b01      	subs	r3, #1
 80112fa:	4a38      	ldr	r2, [pc, #224]	; (80113dc <xTaskResumeAll+0x118>)
 80112fc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80112fe:	4b37      	ldr	r3, [pc, #220]	; (80113dc <xTaskResumeAll+0x118>)
 8011300:	681b      	ldr	r3, [r3, #0]
 8011302:	2b00      	cmp	r3, #0
 8011304:	d162      	bne.n	80113cc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8011306:	4b36      	ldr	r3, [pc, #216]	; (80113e0 <xTaskResumeAll+0x11c>)
 8011308:	681b      	ldr	r3, [r3, #0]
 801130a:	2b00      	cmp	r3, #0
 801130c:	d05e      	beq.n	80113cc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801130e:	e02f      	b.n	8011370 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011310:	4b34      	ldr	r3, [pc, #208]	; (80113e4 <xTaskResumeAll+0x120>)
 8011312:	68db      	ldr	r3, [r3, #12]
 8011314:	68db      	ldr	r3, [r3, #12]
 8011316:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011318:	68fb      	ldr	r3, [r7, #12]
 801131a:	3318      	adds	r3, #24
 801131c:	4618      	mov	r0, r3
 801131e:	f7ff f851 	bl	80103c4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011322:	68fb      	ldr	r3, [r7, #12]
 8011324:	3304      	adds	r3, #4
 8011326:	4618      	mov	r0, r3
 8011328:	f7ff f84c 	bl	80103c4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801132c:	68fb      	ldr	r3, [r7, #12]
 801132e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011330:	4b2d      	ldr	r3, [pc, #180]	; (80113e8 <xTaskResumeAll+0x124>)
 8011332:	681b      	ldr	r3, [r3, #0]
 8011334:	429a      	cmp	r2, r3
 8011336:	d903      	bls.n	8011340 <xTaskResumeAll+0x7c>
 8011338:	68fb      	ldr	r3, [r7, #12]
 801133a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801133c:	4a2a      	ldr	r2, [pc, #168]	; (80113e8 <xTaskResumeAll+0x124>)
 801133e:	6013      	str	r3, [r2, #0]
 8011340:	68fb      	ldr	r3, [r7, #12]
 8011342:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011344:	4613      	mov	r3, r2
 8011346:	009b      	lsls	r3, r3, #2
 8011348:	4413      	add	r3, r2
 801134a:	009b      	lsls	r3, r3, #2
 801134c:	4a27      	ldr	r2, [pc, #156]	; (80113ec <xTaskResumeAll+0x128>)
 801134e:	441a      	add	r2, r3
 8011350:	68fb      	ldr	r3, [r7, #12]
 8011352:	3304      	adds	r3, #4
 8011354:	4619      	mov	r1, r3
 8011356:	4610      	mov	r0, r2
 8011358:	f7fe ffd7 	bl	801030a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801135c:	68fb      	ldr	r3, [r7, #12]
 801135e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011360:	4b23      	ldr	r3, [pc, #140]	; (80113f0 <xTaskResumeAll+0x12c>)
 8011362:	681b      	ldr	r3, [r3, #0]
 8011364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011366:	429a      	cmp	r2, r3
 8011368:	d302      	bcc.n	8011370 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 801136a:	4b22      	ldr	r3, [pc, #136]	; (80113f4 <xTaskResumeAll+0x130>)
 801136c:	2201      	movs	r2, #1
 801136e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011370:	4b1c      	ldr	r3, [pc, #112]	; (80113e4 <xTaskResumeAll+0x120>)
 8011372:	681b      	ldr	r3, [r3, #0]
 8011374:	2b00      	cmp	r3, #0
 8011376:	d1cb      	bne.n	8011310 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8011378:	68fb      	ldr	r3, [r7, #12]
 801137a:	2b00      	cmp	r3, #0
 801137c:	d001      	beq.n	8011382 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801137e:	f000 fb5f 	bl	8011a40 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8011382:	4b1d      	ldr	r3, [pc, #116]	; (80113f8 <xTaskResumeAll+0x134>)
 8011384:	681b      	ldr	r3, [r3, #0]
 8011386:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	2b00      	cmp	r3, #0
 801138c:	d010      	beq.n	80113b0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801138e:	f000 f847 	bl	8011420 <xTaskIncrementTick>
 8011392:	4603      	mov	r3, r0
 8011394:	2b00      	cmp	r3, #0
 8011396:	d002      	beq.n	801139e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8011398:	4b16      	ldr	r3, [pc, #88]	; (80113f4 <xTaskResumeAll+0x130>)
 801139a:	2201      	movs	r2, #1
 801139c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	3b01      	subs	r3, #1
 80113a2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	2b00      	cmp	r3, #0
 80113a8:	d1f1      	bne.n	801138e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80113aa:	4b13      	ldr	r3, [pc, #76]	; (80113f8 <xTaskResumeAll+0x134>)
 80113ac:	2200      	movs	r2, #0
 80113ae:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80113b0:	4b10      	ldr	r3, [pc, #64]	; (80113f4 <xTaskResumeAll+0x130>)
 80113b2:	681b      	ldr	r3, [r3, #0]
 80113b4:	2b00      	cmp	r3, #0
 80113b6:	d009      	beq.n	80113cc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80113b8:	2301      	movs	r3, #1
 80113ba:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80113bc:	4b0f      	ldr	r3, [pc, #60]	; (80113fc <xTaskResumeAll+0x138>)
 80113be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80113c2:	601a      	str	r2, [r3, #0]
 80113c4:	f3bf 8f4f 	dsb	sy
 80113c8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80113cc:	f001 f8e2 	bl	8012594 <vPortExitCritical>

	return xAlreadyYielded;
 80113d0:	68bb      	ldr	r3, [r7, #8]
}
 80113d2:	4618      	mov	r0, r3
 80113d4:	3710      	adds	r7, #16
 80113d6:	46bd      	mov	sp, r7
 80113d8:	bd80      	pop	{r7, pc}
 80113da:	bf00      	nop
 80113dc:	20004bf4 	.word	0x20004bf4
 80113e0:	20004bcc 	.word	0x20004bcc
 80113e4:	20004b8c 	.word	0x20004b8c
 80113e8:	20004bd4 	.word	0x20004bd4
 80113ec:	200046fc 	.word	0x200046fc
 80113f0:	200046f8 	.word	0x200046f8
 80113f4:	20004be0 	.word	0x20004be0
 80113f8:	20004bdc 	.word	0x20004bdc
 80113fc:	e000ed04 	.word	0xe000ed04

08011400 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8011400:	b480      	push	{r7}
 8011402:	b083      	sub	sp, #12
 8011404:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8011406:	4b05      	ldr	r3, [pc, #20]	; (801141c <xTaskGetTickCount+0x1c>)
 8011408:	681b      	ldr	r3, [r3, #0]
 801140a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 801140c:	687b      	ldr	r3, [r7, #4]
}
 801140e:	4618      	mov	r0, r3
 8011410:	370c      	adds	r7, #12
 8011412:	46bd      	mov	sp, r7
 8011414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011418:	4770      	bx	lr
 801141a:	bf00      	nop
 801141c:	20004bd0 	.word	0x20004bd0

08011420 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8011420:	b580      	push	{r7, lr}
 8011422:	b086      	sub	sp, #24
 8011424:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8011426:	2300      	movs	r3, #0
 8011428:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801142a:	4b4f      	ldr	r3, [pc, #316]	; (8011568 <xTaskIncrementTick+0x148>)
 801142c:	681b      	ldr	r3, [r3, #0]
 801142e:	2b00      	cmp	r3, #0
 8011430:	f040 808f 	bne.w	8011552 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8011434:	4b4d      	ldr	r3, [pc, #308]	; (801156c <xTaskIncrementTick+0x14c>)
 8011436:	681b      	ldr	r3, [r3, #0]
 8011438:	3301      	adds	r3, #1
 801143a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801143c:	4a4b      	ldr	r2, [pc, #300]	; (801156c <xTaskIncrementTick+0x14c>)
 801143e:	693b      	ldr	r3, [r7, #16]
 8011440:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8011442:	693b      	ldr	r3, [r7, #16]
 8011444:	2b00      	cmp	r3, #0
 8011446:	d120      	bne.n	801148a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8011448:	4b49      	ldr	r3, [pc, #292]	; (8011570 <xTaskIncrementTick+0x150>)
 801144a:	681b      	ldr	r3, [r3, #0]
 801144c:	681b      	ldr	r3, [r3, #0]
 801144e:	2b00      	cmp	r3, #0
 8011450:	d00a      	beq.n	8011468 <xTaskIncrementTick+0x48>
	__asm volatile
 8011452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011456:	f383 8811 	msr	BASEPRI, r3
 801145a:	f3bf 8f6f 	isb	sy
 801145e:	f3bf 8f4f 	dsb	sy
 8011462:	603b      	str	r3, [r7, #0]
}
 8011464:	bf00      	nop
 8011466:	e7fe      	b.n	8011466 <xTaskIncrementTick+0x46>
 8011468:	4b41      	ldr	r3, [pc, #260]	; (8011570 <xTaskIncrementTick+0x150>)
 801146a:	681b      	ldr	r3, [r3, #0]
 801146c:	60fb      	str	r3, [r7, #12]
 801146e:	4b41      	ldr	r3, [pc, #260]	; (8011574 <xTaskIncrementTick+0x154>)
 8011470:	681b      	ldr	r3, [r3, #0]
 8011472:	4a3f      	ldr	r2, [pc, #252]	; (8011570 <xTaskIncrementTick+0x150>)
 8011474:	6013      	str	r3, [r2, #0]
 8011476:	4a3f      	ldr	r2, [pc, #252]	; (8011574 <xTaskIncrementTick+0x154>)
 8011478:	68fb      	ldr	r3, [r7, #12]
 801147a:	6013      	str	r3, [r2, #0]
 801147c:	4b3e      	ldr	r3, [pc, #248]	; (8011578 <xTaskIncrementTick+0x158>)
 801147e:	681b      	ldr	r3, [r3, #0]
 8011480:	3301      	adds	r3, #1
 8011482:	4a3d      	ldr	r2, [pc, #244]	; (8011578 <xTaskIncrementTick+0x158>)
 8011484:	6013      	str	r3, [r2, #0]
 8011486:	f000 fadb 	bl	8011a40 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801148a:	4b3c      	ldr	r3, [pc, #240]	; (801157c <xTaskIncrementTick+0x15c>)
 801148c:	681b      	ldr	r3, [r3, #0]
 801148e:	693a      	ldr	r2, [r7, #16]
 8011490:	429a      	cmp	r2, r3
 8011492:	d349      	bcc.n	8011528 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011494:	4b36      	ldr	r3, [pc, #216]	; (8011570 <xTaskIncrementTick+0x150>)
 8011496:	681b      	ldr	r3, [r3, #0]
 8011498:	681b      	ldr	r3, [r3, #0]
 801149a:	2b00      	cmp	r3, #0
 801149c:	d104      	bne.n	80114a8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801149e:	4b37      	ldr	r3, [pc, #220]	; (801157c <xTaskIncrementTick+0x15c>)
 80114a0:	f04f 32ff 	mov.w	r2, #4294967295
 80114a4:	601a      	str	r2, [r3, #0]
					break;
 80114a6:	e03f      	b.n	8011528 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80114a8:	4b31      	ldr	r3, [pc, #196]	; (8011570 <xTaskIncrementTick+0x150>)
 80114aa:	681b      	ldr	r3, [r3, #0]
 80114ac:	68db      	ldr	r3, [r3, #12]
 80114ae:	68db      	ldr	r3, [r3, #12]
 80114b0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80114b2:	68bb      	ldr	r3, [r7, #8]
 80114b4:	685b      	ldr	r3, [r3, #4]
 80114b6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80114b8:	693a      	ldr	r2, [r7, #16]
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	429a      	cmp	r2, r3
 80114be:	d203      	bcs.n	80114c8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80114c0:	4a2e      	ldr	r2, [pc, #184]	; (801157c <xTaskIncrementTick+0x15c>)
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80114c6:	e02f      	b.n	8011528 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80114c8:	68bb      	ldr	r3, [r7, #8]
 80114ca:	3304      	adds	r3, #4
 80114cc:	4618      	mov	r0, r3
 80114ce:	f7fe ff79 	bl	80103c4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80114d2:	68bb      	ldr	r3, [r7, #8]
 80114d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80114d6:	2b00      	cmp	r3, #0
 80114d8:	d004      	beq.n	80114e4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80114da:	68bb      	ldr	r3, [r7, #8]
 80114dc:	3318      	adds	r3, #24
 80114de:	4618      	mov	r0, r3
 80114e0:	f7fe ff70 	bl	80103c4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80114e4:	68bb      	ldr	r3, [r7, #8]
 80114e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80114e8:	4b25      	ldr	r3, [pc, #148]	; (8011580 <xTaskIncrementTick+0x160>)
 80114ea:	681b      	ldr	r3, [r3, #0]
 80114ec:	429a      	cmp	r2, r3
 80114ee:	d903      	bls.n	80114f8 <xTaskIncrementTick+0xd8>
 80114f0:	68bb      	ldr	r3, [r7, #8]
 80114f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80114f4:	4a22      	ldr	r2, [pc, #136]	; (8011580 <xTaskIncrementTick+0x160>)
 80114f6:	6013      	str	r3, [r2, #0]
 80114f8:	68bb      	ldr	r3, [r7, #8]
 80114fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80114fc:	4613      	mov	r3, r2
 80114fe:	009b      	lsls	r3, r3, #2
 8011500:	4413      	add	r3, r2
 8011502:	009b      	lsls	r3, r3, #2
 8011504:	4a1f      	ldr	r2, [pc, #124]	; (8011584 <xTaskIncrementTick+0x164>)
 8011506:	441a      	add	r2, r3
 8011508:	68bb      	ldr	r3, [r7, #8]
 801150a:	3304      	adds	r3, #4
 801150c:	4619      	mov	r1, r3
 801150e:	4610      	mov	r0, r2
 8011510:	f7fe fefb 	bl	801030a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011514:	68bb      	ldr	r3, [r7, #8]
 8011516:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011518:	4b1b      	ldr	r3, [pc, #108]	; (8011588 <xTaskIncrementTick+0x168>)
 801151a:	681b      	ldr	r3, [r3, #0]
 801151c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801151e:	429a      	cmp	r2, r3
 8011520:	d3b8      	bcc.n	8011494 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8011522:	2301      	movs	r3, #1
 8011524:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011526:	e7b5      	b.n	8011494 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8011528:	4b17      	ldr	r3, [pc, #92]	; (8011588 <xTaskIncrementTick+0x168>)
 801152a:	681b      	ldr	r3, [r3, #0]
 801152c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801152e:	4915      	ldr	r1, [pc, #84]	; (8011584 <xTaskIncrementTick+0x164>)
 8011530:	4613      	mov	r3, r2
 8011532:	009b      	lsls	r3, r3, #2
 8011534:	4413      	add	r3, r2
 8011536:	009b      	lsls	r3, r3, #2
 8011538:	440b      	add	r3, r1
 801153a:	681b      	ldr	r3, [r3, #0]
 801153c:	2b01      	cmp	r3, #1
 801153e:	d901      	bls.n	8011544 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8011540:	2301      	movs	r3, #1
 8011542:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8011544:	4b11      	ldr	r3, [pc, #68]	; (801158c <xTaskIncrementTick+0x16c>)
 8011546:	681b      	ldr	r3, [r3, #0]
 8011548:	2b00      	cmp	r3, #0
 801154a:	d007      	beq.n	801155c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 801154c:	2301      	movs	r3, #1
 801154e:	617b      	str	r3, [r7, #20]
 8011550:	e004      	b.n	801155c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8011552:	4b0f      	ldr	r3, [pc, #60]	; (8011590 <xTaskIncrementTick+0x170>)
 8011554:	681b      	ldr	r3, [r3, #0]
 8011556:	3301      	adds	r3, #1
 8011558:	4a0d      	ldr	r2, [pc, #52]	; (8011590 <xTaskIncrementTick+0x170>)
 801155a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 801155c:	697b      	ldr	r3, [r7, #20]
}
 801155e:	4618      	mov	r0, r3
 8011560:	3718      	adds	r7, #24
 8011562:	46bd      	mov	sp, r7
 8011564:	bd80      	pop	{r7, pc}
 8011566:	bf00      	nop
 8011568:	20004bf4 	.word	0x20004bf4
 801156c:	20004bd0 	.word	0x20004bd0
 8011570:	20004b84 	.word	0x20004b84
 8011574:	20004b88 	.word	0x20004b88
 8011578:	20004be4 	.word	0x20004be4
 801157c:	20004bec 	.word	0x20004bec
 8011580:	20004bd4 	.word	0x20004bd4
 8011584:	200046fc 	.word	0x200046fc
 8011588:	200046f8 	.word	0x200046f8
 801158c:	20004be0 	.word	0x20004be0
 8011590:	20004bdc 	.word	0x20004bdc

08011594 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8011594:	b480      	push	{r7}
 8011596:	b085      	sub	sp, #20
 8011598:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801159a:	4b2a      	ldr	r3, [pc, #168]	; (8011644 <vTaskSwitchContext+0xb0>)
 801159c:	681b      	ldr	r3, [r3, #0]
 801159e:	2b00      	cmp	r3, #0
 80115a0:	d003      	beq.n	80115aa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80115a2:	4b29      	ldr	r3, [pc, #164]	; (8011648 <vTaskSwitchContext+0xb4>)
 80115a4:	2201      	movs	r2, #1
 80115a6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80115a8:	e046      	b.n	8011638 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80115aa:	4b27      	ldr	r3, [pc, #156]	; (8011648 <vTaskSwitchContext+0xb4>)
 80115ac:	2200      	movs	r2, #0
 80115ae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80115b0:	4b26      	ldr	r3, [pc, #152]	; (801164c <vTaskSwitchContext+0xb8>)
 80115b2:	681b      	ldr	r3, [r3, #0]
 80115b4:	60fb      	str	r3, [r7, #12]
 80115b6:	e010      	b.n	80115da <vTaskSwitchContext+0x46>
 80115b8:	68fb      	ldr	r3, [r7, #12]
 80115ba:	2b00      	cmp	r3, #0
 80115bc:	d10a      	bne.n	80115d4 <vTaskSwitchContext+0x40>
	__asm volatile
 80115be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115c2:	f383 8811 	msr	BASEPRI, r3
 80115c6:	f3bf 8f6f 	isb	sy
 80115ca:	f3bf 8f4f 	dsb	sy
 80115ce:	607b      	str	r3, [r7, #4]
}
 80115d0:	bf00      	nop
 80115d2:	e7fe      	b.n	80115d2 <vTaskSwitchContext+0x3e>
 80115d4:	68fb      	ldr	r3, [r7, #12]
 80115d6:	3b01      	subs	r3, #1
 80115d8:	60fb      	str	r3, [r7, #12]
 80115da:	491d      	ldr	r1, [pc, #116]	; (8011650 <vTaskSwitchContext+0xbc>)
 80115dc:	68fa      	ldr	r2, [r7, #12]
 80115de:	4613      	mov	r3, r2
 80115e0:	009b      	lsls	r3, r3, #2
 80115e2:	4413      	add	r3, r2
 80115e4:	009b      	lsls	r3, r3, #2
 80115e6:	440b      	add	r3, r1
 80115e8:	681b      	ldr	r3, [r3, #0]
 80115ea:	2b00      	cmp	r3, #0
 80115ec:	d0e4      	beq.n	80115b8 <vTaskSwitchContext+0x24>
 80115ee:	68fa      	ldr	r2, [r7, #12]
 80115f0:	4613      	mov	r3, r2
 80115f2:	009b      	lsls	r3, r3, #2
 80115f4:	4413      	add	r3, r2
 80115f6:	009b      	lsls	r3, r3, #2
 80115f8:	4a15      	ldr	r2, [pc, #84]	; (8011650 <vTaskSwitchContext+0xbc>)
 80115fa:	4413      	add	r3, r2
 80115fc:	60bb      	str	r3, [r7, #8]
 80115fe:	68bb      	ldr	r3, [r7, #8]
 8011600:	685b      	ldr	r3, [r3, #4]
 8011602:	685a      	ldr	r2, [r3, #4]
 8011604:	68bb      	ldr	r3, [r7, #8]
 8011606:	605a      	str	r2, [r3, #4]
 8011608:	68bb      	ldr	r3, [r7, #8]
 801160a:	685a      	ldr	r2, [r3, #4]
 801160c:	68bb      	ldr	r3, [r7, #8]
 801160e:	3308      	adds	r3, #8
 8011610:	429a      	cmp	r2, r3
 8011612:	d104      	bne.n	801161e <vTaskSwitchContext+0x8a>
 8011614:	68bb      	ldr	r3, [r7, #8]
 8011616:	685b      	ldr	r3, [r3, #4]
 8011618:	685a      	ldr	r2, [r3, #4]
 801161a:	68bb      	ldr	r3, [r7, #8]
 801161c:	605a      	str	r2, [r3, #4]
 801161e:	68bb      	ldr	r3, [r7, #8]
 8011620:	685b      	ldr	r3, [r3, #4]
 8011622:	68db      	ldr	r3, [r3, #12]
 8011624:	4a0b      	ldr	r2, [pc, #44]	; (8011654 <vTaskSwitchContext+0xc0>)
 8011626:	6013      	str	r3, [r2, #0]
 8011628:	4a08      	ldr	r2, [pc, #32]	; (801164c <vTaskSwitchContext+0xb8>)
 801162a:	68fb      	ldr	r3, [r7, #12]
 801162c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801162e:	4b09      	ldr	r3, [pc, #36]	; (8011654 <vTaskSwitchContext+0xc0>)
 8011630:	681b      	ldr	r3, [r3, #0]
 8011632:	3354      	adds	r3, #84	; 0x54
 8011634:	4a08      	ldr	r2, [pc, #32]	; (8011658 <vTaskSwitchContext+0xc4>)
 8011636:	6013      	str	r3, [r2, #0]
}
 8011638:	bf00      	nop
 801163a:	3714      	adds	r7, #20
 801163c:	46bd      	mov	sp, r7
 801163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011642:	4770      	bx	lr
 8011644:	20004bf4 	.word	0x20004bf4
 8011648:	20004be0 	.word	0x20004be0
 801164c:	20004bd4 	.word	0x20004bd4
 8011650:	200046fc 	.word	0x200046fc
 8011654:	200046f8 	.word	0x200046f8
 8011658:	20000410 	.word	0x20000410

0801165c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801165c:	b580      	push	{r7, lr}
 801165e:	b084      	sub	sp, #16
 8011660:	af00      	add	r7, sp, #0
 8011662:	6078      	str	r0, [r7, #4]
 8011664:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8011666:	687b      	ldr	r3, [r7, #4]
 8011668:	2b00      	cmp	r3, #0
 801166a:	d10a      	bne.n	8011682 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 801166c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011670:	f383 8811 	msr	BASEPRI, r3
 8011674:	f3bf 8f6f 	isb	sy
 8011678:	f3bf 8f4f 	dsb	sy
 801167c:	60fb      	str	r3, [r7, #12]
}
 801167e:	bf00      	nop
 8011680:	e7fe      	b.n	8011680 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011682:	4b07      	ldr	r3, [pc, #28]	; (80116a0 <vTaskPlaceOnEventList+0x44>)
 8011684:	681b      	ldr	r3, [r3, #0]
 8011686:	3318      	adds	r3, #24
 8011688:	4619      	mov	r1, r3
 801168a:	6878      	ldr	r0, [r7, #4]
 801168c:	f7fe fe61 	bl	8010352 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8011690:	2101      	movs	r1, #1
 8011692:	6838      	ldr	r0, [r7, #0]
 8011694:	f000 fa80 	bl	8011b98 <prvAddCurrentTaskToDelayedList>
}
 8011698:	bf00      	nop
 801169a:	3710      	adds	r7, #16
 801169c:	46bd      	mov	sp, r7
 801169e:	bd80      	pop	{r7, pc}
 80116a0:	200046f8 	.word	0x200046f8

080116a4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80116a4:	b580      	push	{r7, lr}
 80116a6:	b086      	sub	sp, #24
 80116a8:	af00      	add	r7, sp, #0
 80116aa:	60f8      	str	r0, [r7, #12]
 80116ac:	60b9      	str	r1, [r7, #8]
 80116ae:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80116b0:	68fb      	ldr	r3, [r7, #12]
 80116b2:	2b00      	cmp	r3, #0
 80116b4:	d10a      	bne.n	80116cc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80116b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116ba:	f383 8811 	msr	BASEPRI, r3
 80116be:	f3bf 8f6f 	isb	sy
 80116c2:	f3bf 8f4f 	dsb	sy
 80116c6:	617b      	str	r3, [r7, #20]
}
 80116c8:	bf00      	nop
 80116ca:	e7fe      	b.n	80116ca <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80116cc:	4b0a      	ldr	r3, [pc, #40]	; (80116f8 <vTaskPlaceOnEventListRestricted+0x54>)
 80116ce:	681b      	ldr	r3, [r3, #0]
 80116d0:	3318      	adds	r3, #24
 80116d2:	4619      	mov	r1, r3
 80116d4:	68f8      	ldr	r0, [r7, #12]
 80116d6:	f7fe fe18 	bl	801030a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	2b00      	cmp	r3, #0
 80116de:	d002      	beq.n	80116e6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80116e0:	f04f 33ff 	mov.w	r3, #4294967295
 80116e4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80116e6:	6879      	ldr	r1, [r7, #4]
 80116e8:	68b8      	ldr	r0, [r7, #8]
 80116ea:	f000 fa55 	bl	8011b98 <prvAddCurrentTaskToDelayedList>
	}
 80116ee:	bf00      	nop
 80116f0:	3718      	adds	r7, #24
 80116f2:	46bd      	mov	sp, r7
 80116f4:	bd80      	pop	{r7, pc}
 80116f6:	bf00      	nop
 80116f8:	200046f8 	.word	0x200046f8

080116fc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80116fc:	b580      	push	{r7, lr}
 80116fe:	b086      	sub	sp, #24
 8011700:	af00      	add	r7, sp, #0
 8011702:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011704:	687b      	ldr	r3, [r7, #4]
 8011706:	68db      	ldr	r3, [r3, #12]
 8011708:	68db      	ldr	r3, [r3, #12]
 801170a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 801170c:	693b      	ldr	r3, [r7, #16]
 801170e:	2b00      	cmp	r3, #0
 8011710:	d10a      	bne.n	8011728 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8011712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011716:	f383 8811 	msr	BASEPRI, r3
 801171a:	f3bf 8f6f 	isb	sy
 801171e:	f3bf 8f4f 	dsb	sy
 8011722:	60fb      	str	r3, [r7, #12]
}
 8011724:	bf00      	nop
 8011726:	e7fe      	b.n	8011726 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8011728:	693b      	ldr	r3, [r7, #16]
 801172a:	3318      	adds	r3, #24
 801172c:	4618      	mov	r0, r3
 801172e:	f7fe fe49 	bl	80103c4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011732:	4b1e      	ldr	r3, [pc, #120]	; (80117ac <xTaskRemoveFromEventList+0xb0>)
 8011734:	681b      	ldr	r3, [r3, #0]
 8011736:	2b00      	cmp	r3, #0
 8011738:	d11d      	bne.n	8011776 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801173a:	693b      	ldr	r3, [r7, #16]
 801173c:	3304      	adds	r3, #4
 801173e:	4618      	mov	r0, r3
 8011740:	f7fe fe40 	bl	80103c4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8011744:	693b      	ldr	r3, [r7, #16]
 8011746:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011748:	4b19      	ldr	r3, [pc, #100]	; (80117b0 <xTaskRemoveFromEventList+0xb4>)
 801174a:	681b      	ldr	r3, [r3, #0]
 801174c:	429a      	cmp	r2, r3
 801174e:	d903      	bls.n	8011758 <xTaskRemoveFromEventList+0x5c>
 8011750:	693b      	ldr	r3, [r7, #16]
 8011752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011754:	4a16      	ldr	r2, [pc, #88]	; (80117b0 <xTaskRemoveFromEventList+0xb4>)
 8011756:	6013      	str	r3, [r2, #0]
 8011758:	693b      	ldr	r3, [r7, #16]
 801175a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801175c:	4613      	mov	r3, r2
 801175e:	009b      	lsls	r3, r3, #2
 8011760:	4413      	add	r3, r2
 8011762:	009b      	lsls	r3, r3, #2
 8011764:	4a13      	ldr	r2, [pc, #76]	; (80117b4 <xTaskRemoveFromEventList+0xb8>)
 8011766:	441a      	add	r2, r3
 8011768:	693b      	ldr	r3, [r7, #16]
 801176a:	3304      	adds	r3, #4
 801176c:	4619      	mov	r1, r3
 801176e:	4610      	mov	r0, r2
 8011770:	f7fe fdcb 	bl	801030a <vListInsertEnd>
 8011774:	e005      	b.n	8011782 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8011776:	693b      	ldr	r3, [r7, #16]
 8011778:	3318      	adds	r3, #24
 801177a:	4619      	mov	r1, r3
 801177c:	480e      	ldr	r0, [pc, #56]	; (80117b8 <xTaskRemoveFromEventList+0xbc>)
 801177e:	f7fe fdc4 	bl	801030a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011782:	693b      	ldr	r3, [r7, #16]
 8011784:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011786:	4b0d      	ldr	r3, [pc, #52]	; (80117bc <xTaskRemoveFromEventList+0xc0>)
 8011788:	681b      	ldr	r3, [r3, #0]
 801178a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801178c:	429a      	cmp	r2, r3
 801178e:	d905      	bls.n	801179c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8011790:	2301      	movs	r3, #1
 8011792:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8011794:	4b0a      	ldr	r3, [pc, #40]	; (80117c0 <xTaskRemoveFromEventList+0xc4>)
 8011796:	2201      	movs	r2, #1
 8011798:	601a      	str	r2, [r3, #0]
 801179a:	e001      	b.n	80117a0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 801179c:	2300      	movs	r3, #0
 801179e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80117a0:	697b      	ldr	r3, [r7, #20]
}
 80117a2:	4618      	mov	r0, r3
 80117a4:	3718      	adds	r7, #24
 80117a6:	46bd      	mov	sp, r7
 80117a8:	bd80      	pop	{r7, pc}
 80117aa:	bf00      	nop
 80117ac:	20004bf4 	.word	0x20004bf4
 80117b0:	20004bd4 	.word	0x20004bd4
 80117b4:	200046fc 	.word	0x200046fc
 80117b8:	20004b8c 	.word	0x20004b8c
 80117bc:	200046f8 	.word	0x200046f8
 80117c0:	20004be0 	.word	0x20004be0

080117c4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80117c4:	b480      	push	{r7}
 80117c6:	b083      	sub	sp, #12
 80117c8:	af00      	add	r7, sp, #0
 80117ca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80117cc:	4b06      	ldr	r3, [pc, #24]	; (80117e8 <vTaskInternalSetTimeOutState+0x24>)
 80117ce:	681a      	ldr	r2, [r3, #0]
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80117d4:	4b05      	ldr	r3, [pc, #20]	; (80117ec <vTaskInternalSetTimeOutState+0x28>)
 80117d6:	681a      	ldr	r2, [r3, #0]
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	605a      	str	r2, [r3, #4]
}
 80117dc:	bf00      	nop
 80117de:	370c      	adds	r7, #12
 80117e0:	46bd      	mov	sp, r7
 80117e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117e6:	4770      	bx	lr
 80117e8:	20004be4 	.word	0x20004be4
 80117ec:	20004bd0 	.word	0x20004bd0

080117f0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80117f0:	b580      	push	{r7, lr}
 80117f2:	b088      	sub	sp, #32
 80117f4:	af00      	add	r7, sp, #0
 80117f6:	6078      	str	r0, [r7, #4]
 80117f8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	2b00      	cmp	r3, #0
 80117fe:	d10a      	bne.n	8011816 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8011800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011804:	f383 8811 	msr	BASEPRI, r3
 8011808:	f3bf 8f6f 	isb	sy
 801180c:	f3bf 8f4f 	dsb	sy
 8011810:	613b      	str	r3, [r7, #16]
}
 8011812:	bf00      	nop
 8011814:	e7fe      	b.n	8011814 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8011816:	683b      	ldr	r3, [r7, #0]
 8011818:	2b00      	cmp	r3, #0
 801181a:	d10a      	bne.n	8011832 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 801181c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011820:	f383 8811 	msr	BASEPRI, r3
 8011824:	f3bf 8f6f 	isb	sy
 8011828:	f3bf 8f4f 	dsb	sy
 801182c:	60fb      	str	r3, [r7, #12]
}
 801182e:	bf00      	nop
 8011830:	e7fe      	b.n	8011830 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8011832:	f000 fe7f 	bl	8012534 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8011836:	4b1d      	ldr	r3, [pc, #116]	; (80118ac <xTaskCheckForTimeOut+0xbc>)
 8011838:	681b      	ldr	r3, [r3, #0]
 801183a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	685b      	ldr	r3, [r3, #4]
 8011840:	69ba      	ldr	r2, [r7, #24]
 8011842:	1ad3      	subs	r3, r2, r3
 8011844:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8011846:	683b      	ldr	r3, [r7, #0]
 8011848:	681b      	ldr	r3, [r3, #0]
 801184a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801184e:	d102      	bne.n	8011856 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8011850:	2300      	movs	r3, #0
 8011852:	61fb      	str	r3, [r7, #28]
 8011854:	e023      	b.n	801189e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	681a      	ldr	r2, [r3, #0]
 801185a:	4b15      	ldr	r3, [pc, #84]	; (80118b0 <xTaskCheckForTimeOut+0xc0>)
 801185c:	681b      	ldr	r3, [r3, #0]
 801185e:	429a      	cmp	r2, r3
 8011860:	d007      	beq.n	8011872 <xTaskCheckForTimeOut+0x82>
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	685b      	ldr	r3, [r3, #4]
 8011866:	69ba      	ldr	r2, [r7, #24]
 8011868:	429a      	cmp	r2, r3
 801186a:	d302      	bcc.n	8011872 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801186c:	2301      	movs	r3, #1
 801186e:	61fb      	str	r3, [r7, #28]
 8011870:	e015      	b.n	801189e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8011872:	683b      	ldr	r3, [r7, #0]
 8011874:	681b      	ldr	r3, [r3, #0]
 8011876:	697a      	ldr	r2, [r7, #20]
 8011878:	429a      	cmp	r2, r3
 801187a:	d20b      	bcs.n	8011894 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801187c:	683b      	ldr	r3, [r7, #0]
 801187e:	681a      	ldr	r2, [r3, #0]
 8011880:	697b      	ldr	r3, [r7, #20]
 8011882:	1ad2      	subs	r2, r2, r3
 8011884:	683b      	ldr	r3, [r7, #0]
 8011886:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8011888:	6878      	ldr	r0, [r7, #4]
 801188a:	f7ff ff9b 	bl	80117c4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801188e:	2300      	movs	r3, #0
 8011890:	61fb      	str	r3, [r7, #28]
 8011892:	e004      	b.n	801189e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8011894:	683b      	ldr	r3, [r7, #0]
 8011896:	2200      	movs	r2, #0
 8011898:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801189a:	2301      	movs	r3, #1
 801189c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801189e:	f000 fe79 	bl	8012594 <vPortExitCritical>

	return xReturn;
 80118a2:	69fb      	ldr	r3, [r7, #28]
}
 80118a4:	4618      	mov	r0, r3
 80118a6:	3720      	adds	r7, #32
 80118a8:	46bd      	mov	sp, r7
 80118aa:	bd80      	pop	{r7, pc}
 80118ac:	20004bd0 	.word	0x20004bd0
 80118b0:	20004be4 	.word	0x20004be4

080118b4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80118b4:	b480      	push	{r7}
 80118b6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80118b8:	4b03      	ldr	r3, [pc, #12]	; (80118c8 <vTaskMissedYield+0x14>)
 80118ba:	2201      	movs	r2, #1
 80118bc:	601a      	str	r2, [r3, #0]
}
 80118be:	bf00      	nop
 80118c0:	46bd      	mov	sp, r7
 80118c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118c6:	4770      	bx	lr
 80118c8:	20004be0 	.word	0x20004be0

080118cc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80118cc:	b580      	push	{r7, lr}
 80118ce:	b082      	sub	sp, #8
 80118d0:	af00      	add	r7, sp, #0
 80118d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80118d4:	f000 f852 	bl	801197c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80118d8:	4b06      	ldr	r3, [pc, #24]	; (80118f4 <prvIdleTask+0x28>)
 80118da:	681b      	ldr	r3, [r3, #0]
 80118dc:	2b01      	cmp	r3, #1
 80118de:	d9f9      	bls.n	80118d4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80118e0:	4b05      	ldr	r3, [pc, #20]	; (80118f8 <prvIdleTask+0x2c>)
 80118e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80118e6:	601a      	str	r2, [r3, #0]
 80118e8:	f3bf 8f4f 	dsb	sy
 80118ec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80118f0:	e7f0      	b.n	80118d4 <prvIdleTask+0x8>
 80118f2:	bf00      	nop
 80118f4:	200046fc 	.word	0x200046fc
 80118f8:	e000ed04 	.word	0xe000ed04

080118fc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80118fc:	b580      	push	{r7, lr}
 80118fe:	b082      	sub	sp, #8
 8011900:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011902:	2300      	movs	r3, #0
 8011904:	607b      	str	r3, [r7, #4]
 8011906:	e00c      	b.n	8011922 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8011908:	687a      	ldr	r2, [r7, #4]
 801190a:	4613      	mov	r3, r2
 801190c:	009b      	lsls	r3, r3, #2
 801190e:	4413      	add	r3, r2
 8011910:	009b      	lsls	r3, r3, #2
 8011912:	4a12      	ldr	r2, [pc, #72]	; (801195c <prvInitialiseTaskLists+0x60>)
 8011914:	4413      	add	r3, r2
 8011916:	4618      	mov	r0, r3
 8011918:	f7fe fcca 	bl	80102b0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	3301      	adds	r3, #1
 8011920:	607b      	str	r3, [r7, #4]
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	2b37      	cmp	r3, #55	; 0x37
 8011926:	d9ef      	bls.n	8011908 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8011928:	480d      	ldr	r0, [pc, #52]	; (8011960 <prvInitialiseTaskLists+0x64>)
 801192a:	f7fe fcc1 	bl	80102b0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801192e:	480d      	ldr	r0, [pc, #52]	; (8011964 <prvInitialiseTaskLists+0x68>)
 8011930:	f7fe fcbe 	bl	80102b0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8011934:	480c      	ldr	r0, [pc, #48]	; (8011968 <prvInitialiseTaskLists+0x6c>)
 8011936:	f7fe fcbb 	bl	80102b0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801193a:	480c      	ldr	r0, [pc, #48]	; (801196c <prvInitialiseTaskLists+0x70>)
 801193c:	f7fe fcb8 	bl	80102b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8011940:	480b      	ldr	r0, [pc, #44]	; (8011970 <prvInitialiseTaskLists+0x74>)
 8011942:	f7fe fcb5 	bl	80102b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8011946:	4b0b      	ldr	r3, [pc, #44]	; (8011974 <prvInitialiseTaskLists+0x78>)
 8011948:	4a05      	ldr	r2, [pc, #20]	; (8011960 <prvInitialiseTaskLists+0x64>)
 801194a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801194c:	4b0a      	ldr	r3, [pc, #40]	; (8011978 <prvInitialiseTaskLists+0x7c>)
 801194e:	4a05      	ldr	r2, [pc, #20]	; (8011964 <prvInitialiseTaskLists+0x68>)
 8011950:	601a      	str	r2, [r3, #0]
}
 8011952:	bf00      	nop
 8011954:	3708      	adds	r7, #8
 8011956:	46bd      	mov	sp, r7
 8011958:	bd80      	pop	{r7, pc}
 801195a:	bf00      	nop
 801195c:	200046fc 	.word	0x200046fc
 8011960:	20004b5c 	.word	0x20004b5c
 8011964:	20004b70 	.word	0x20004b70
 8011968:	20004b8c 	.word	0x20004b8c
 801196c:	20004ba0 	.word	0x20004ba0
 8011970:	20004bb8 	.word	0x20004bb8
 8011974:	20004b84 	.word	0x20004b84
 8011978:	20004b88 	.word	0x20004b88

0801197c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801197c:	b580      	push	{r7, lr}
 801197e:	b082      	sub	sp, #8
 8011980:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011982:	e019      	b.n	80119b8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8011984:	f000 fdd6 	bl	8012534 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011988:	4b10      	ldr	r3, [pc, #64]	; (80119cc <prvCheckTasksWaitingTermination+0x50>)
 801198a:	68db      	ldr	r3, [r3, #12]
 801198c:	68db      	ldr	r3, [r3, #12]
 801198e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011990:	687b      	ldr	r3, [r7, #4]
 8011992:	3304      	adds	r3, #4
 8011994:	4618      	mov	r0, r3
 8011996:	f7fe fd15 	bl	80103c4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801199a:	4b0d      	ldr	r3, [pc, #52]	; (80119d0 <prvCheckTasksWaitingTermination+0x54>)
 801199c:	681b      	ldr	r3, [r3, #0]
 801199e:	3b01      	subs	r3, #1
 80119a0:	4a0b      	ldr	r2, [pc, #44]	; (80119d0 <prvCheckTasksWaitingTermination+0x54>)
 80119a2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80119a4:	4b0b      	ldr	r3, [pc, #44]	; (80119d4 <prvCheckTasksWaitingTermination+0x58>)
 80119a6:	681b      	ldr	r3, [r3, #0]
 80119a8:	3b01      	subs	r3, #1
 80119aa:	4a0a      	ldr	r2, [pc, #40]	; (80119d4 <prvCheckTasksWaitingTermination+0x58>)
 80119ac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80119ae:	f000 fdf1 	bl	8012594 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80119b2:	6878      	ldr	r0, [r7, #4]
 80119b4:	f000 f810 	bl	80119d8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80119b8:	4b06      	ldr	r3, [pc, #24]	; (80119d4 <prvCheckTasksWaitingTermination+0x58>)
 80119ba:	681b      	ldr	r3, [r3, #0]
 80119bc:	2b00      	cmp	r3, #0
 80119be:	d1e1      	bne.n	8011984 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80119c0:	bf00      	nop
 80119c2:	bf00      	nop
 80119c4:	3708      	adds	r7, #8
 80119c6:	46bd      	mov	sp, r7
 80119c8:	bd80      	pop	{r7, pc}
 80119ca:	bf00      	nop
 80119cc:	20004ba0 	.word	0x20004ba0
 80119d0:	20004bcc 	.word	0x20004bcc
 80119d4:	20004bb4 	.word	0x20004bb4

080119d8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80119d8:	b580      	push	{r7, lr}
 80119da:	b084      	sub	sp, #16
 80119dc:	af00      	add	r7, sp, #0
 80119de:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	3354      	adds	r3, #84	; 0x54
 80119e4:	4618      	mov	r0, r3
 80119e6:	f002 fe15 	bl	8014614 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80119ea:	687b      	ldr	r3, [r7, #4]
 80119ec:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80119f0:	2b00      	cmp	r3, #0
 80119f2:	d108      	bne.n	8011a06 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80119f8:	4618      	mov	r0, r3
 80119fa:	f000 ff89 	bl	8012910 <vPortFree>
				vPortFree( pxTCB );
 80119fe:	6878      	ldr	r0, [r7, #4]
 8011a00:	f000 ff86 	bl	8012910 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8011a04:	e018      	b.n	8011a38 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8011a0c:	2b01      	cmp	r3, #1
 8011a0e:	d103      	bne.n	8011a18 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8011a10:	6878      	ldr	r0, [r7, #4]
 8011a12:	f000 ff7d 	bl	8012910 <vPortFree>
	}
 8011a16:	e00f      	b.n	8011a38 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8011a18:	687b      	ldr	r3, [r7, #4]
 8011a1a:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8011a1e:	2b02      	cmp	r3, #2
 8011a20:	d00a      	beq.n	8011a38 <prvDeleteTCB+0x60>
	__asm volatile
 8011a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a26:	f383 8811 	msr	BASEPRI, r3
 8011a2a:	f3bf 8f6f 	isb	sy
 8011a2e:	f3bf 8f4f 	dsb	sy
 8011a32:	60fb      	str	r3, [r7, #12]
}
 8011a34:	bf00      	nop
 8011a36:	e7fe      	b.n	8011a36 <prvDeleteTCB+0x5e>
	}
 8011a38:	bf00      	nop
 8011a3a:	3710      	adds	r7, #16
 8011a3c:	46bd      	mov	sp, r7
 8011a3e:	bd80      	pop	{r7, pc}

08011a40 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8011a40:	b480      	push	{r7}
 8011a42:	b083      	sub	sp, #12
 8011a44:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011a46:	4b0c      	ldr	r3, [pc, #48]	; (8011a78 <prvResetNextTaskUnblockTime+0x38>)
 8011a48:	681b      	ldr	r3, [r3, #0]
 8011a4a:	681b      	ldr	r3, [r3, #0]
 8011a4c:	2b00      	cmp	r3, #0
 8011a4e:	d104      	bne.n	8011a5a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8011a50:	4b0a      	ldr	r3, [pc, #40]	; (8011a7c <prvResetNextTaskUnblockTime+0x3c>)
 8011a52:	f04f 32ff 	mov.w	r2, #4294967295
 8011a56:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8011a58:	e008      	b.n	8011a6c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011a5a:	4b07      	ldr	r3, [pc, #28]	; (8011a78 <prvResetNextTaskUnblockTime+0x38>)
 8011a5c:	681b      	ldr	r3, [r3, #0]
 8011a5e:	68db      	ldr	r3, [r3, #12]
 8011a60:	68db      	ldr	r3, [r3, #12]
 8011a62:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	685b      	ldr	r3, [r3, #4]
 8011a68:	4a04      	ldr	r2, [pc, #16]	; (8011a7c <prvResetNextTaskUnblockTime+0x3c>)
 8011a6a:	6013      	str	r3, [r2, #0]
}
 8011a6c:	bf00      	nop
 8011a6e:	370c      	adds	r7, #12
 8011a70:	46bd      	mov	sp, r7
 8011a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a76:	4770      	bx	lr
 8011a78:	20004b84 	.word	0x20004b84
 8011a7c:	20004bec 	.word	0x20004bec

08011a80 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8011a80:	b480      	push	{r7}
 8011a82:	b083      	sub	sp, #12
 8011a84:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8011a86:	4b0b      	ldr	r3, [pc, #44]	; (8011ab4 <xTaskGetSchedulerState+0x34>)
 8011a88:	681b      	ldr	r3, [r3, #0]
 8011a8a:	2b00      	cmp	r3, #0
 8011a8c:	d102      	bne.n	8011a94 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8011a8e:	2301      	movs	r3, #1
 8011a90:	607b      	str	r3, [r7, #4]
 8011a92:	e008      	b.n	8011aa6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011a94:	4b08      	ldr	r3, [pc, #32]	; (8011ab8 <xTaskGetSchedulerState+0x38>)
 8011a96:	681b      	ldr	r3, [r3, #0]
 8011a98:	2b00      	cmp	r3, #0
 8011a9a:	d102      	bne.n	8011aa2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8011a9c:	2302      	movs	r3, #2
 8011a9e:	607b      	str	r3, [r7, #4]
 8011aa0:	e001      	b.n	8011aa6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8011aa2:	2300      	movs	r3, #0
 8011aa4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8011aa6:	687b      	ldr	r3, [r7, #4]
	}
 8011aa8:	4618      	mov	r0, r3
 8011aaa:	370c      	adds	r7, #12
 8011aac:	46bd      	mov	sp, r7
 8011aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ab2:	4770      	bx	lr
 8011ab4:	20004bd8 	.word	0x20004bd8
 8011ab8:	20004bf4 	.word	0x20004bf4

08011abc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8011abc:	b580      	push	{r7, lr}
 8011abe:	b086      	sub	sp, #24
 8011ac0:	af00      	add	r7, sp, #0
 8011ac2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8011ac8:	2300      	movs	r3, #0
 8011aca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	2b00      	cmp	r3, #0
 8011ad0:	d056      	beq.n	8011b80 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8011ad2:	4b2e      	ldr	r3, [pc, #184]	; (8011b8c <xTaskPriorityDisinherit+0xd0>)
 8011ad4:	681b      	ldr	r3, [r3, #0]
 8011ad6:	693a      	ldr	r2, [r7, #16]
 8011ad8:	429a      	cmp	r2, r3
 8011ada:	d00a      	beq.n	8011af2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8011adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ae0:	f383 8811 	msr	BASEPRI, r3
 8011ae4:	f3bf 8f6f 	isb	sy
 8011ae8:	f3bf 8f4f 	dsb	sy
 8011aec:	60fb      	str	r3, [r7, #12]
}
 8011aee:	bf00      	nop
 8011af0:	e7fe      	b.n	8011af0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8011af2:	693b      	ldr	r3, [r7, #16]
 8011af4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011af6:	2b00      	cmp	r3, #0
 8011af8:	d10a      	bne.n	8011b10 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8011afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011afe:	f383 8811 	msr	BASEPRI, r3
 8011b02:	f3bf 8f6f 	isb	sy
 8011b06:	f3bf 8f4f 	dsb	sy
 8011b0a:	60bb      	str	r3, [r7, #8]
}
 8011b0c:	bf00      	nop
 8011b0e:	e7fe      	b.n	8011b0e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8011b10:	693b      	ldr	r3, [r7, #16]
 8011b12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011b14:	1e5a      	subs	r2, r3, #1
 8011b16:	693b      	ldr	r3, [r7, #16]
 8011b18:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8011b1a:	693b      	ldr	r3, [r7, #16]
 8011b1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b1e:	693b      	ldr	r3, [r7, #16]
 8011b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011b22:	429a      	cmp	r2, r3
 8011b24:	d02c      	beq.n	8011b80 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8011b26:	693b      	ldr	r3, [r7, #16]
 8011b28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011b2a:	2b00      	cmp	r3, #0
 8011b2c:	d128      	bne.n	8011b80 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011b2e:	693b      	ldr	r3, [r7, #16]
 8011b30:	3304      	adds	r3, #4
 8011b32:	4618      	mov	r0, r3
 8011b34:	f7fe fc46 	bl	80103c4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8011b38:	693b      	ldr	r3, [r7, #16]
 8011b3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011b3c:	693b      	ldr	r3, [r7, #16]
 8011b3e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011b40:	693b      	ldr	r3, [r7, #16]
 8011b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b44:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8011b48:	693b      	ldr	r3, [r7, #16]
 8011b4a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8011b4c:	693b      	ldr	r3, [r7, #16]
 8011b4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b50:	4b0f      	ldr	r3, [pc, #60]	; (8011b90 <xTaskPriorityDisinherit+0xd4>)
 8011b52:	681b      	ldr	r3, [r3, #0]
 8011b54:	429a      	cmp	r2, r3
 8011b56:	d903      	bls.n	8011b60 <xTaskPriorityDisinherit+0xa4>
 8011b58:	693b      	ldr	r3, [r7, #16]
 8011b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b5c:	4a0c      	ldr	r2, [pc, #48]	; (8011b90 <xTaskPriorityDisinherit+0xd4>)
 8011b5e:	6013      	str	r3, [r2, #0]
 8011b60:	693b      	ldr	r3, [r7, #16]
 8011b62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b64:	4613      	mov	r3, r2
 8011b66:	009b      	lsls	r3, r3, #2
 8011b68:	4413      	add	r3, r2
 8011b6a:	009b      	lsls	r3, r3, #2
 8011b6c:	4a09      	ldr	r2, [pc, #36]	; (8011b94 <xTaskPriorityDisinherit+0xd8>)
 8011b6e:	441a      	add	r2, r3
 8011b70:	693b      	ldr	r3, [r7, #16]
 8011b72:	3304      	adds	r3, #4
 8011b74:	4619      	mov	r1, r3
 8011b76:	4610      	mov	r0, r2
 8011b78:	f7fe fbc7 	bl	801030a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8011b7c:	2301      	movs	r3, #1
 8011b7e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011b80:	697b      	ldr	r3, [r7, #20]
	}
 8011b82:	4618      	mov	r0, r3
 8011b84:	3718      	adds	r7, #24
 8011b86:	46bd      	mov	sp, r7
 8011b88:	bd80      	pop	{r7, pc}
 8011b8a:	bf00      	nop
 8011b8c:	200046f8 	.word	0x200046f8
 8011b90:	20004bd4 	.word	0x20004bd4
 8011b94:	200046fc 	.word	0x200046fc

08011b98 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8011b98:	b580      	push	{r7, lr}
 8011b9a:	b084      	sub	sp, #16
 8011b9c:	af00      	add	r7, sp, #0
 8011b9e:	6078      	str	r0, [r7, #4]
 8011ba0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8011ba2:	4b21      	ldr	r3, [pc, #132]	; (8011c28 <prvAddCurrentTaskToDelayedList+0x90>)
 8011ba4:	681b      	ldr	r3, [r3, #0]
 8011ba6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011ba8:	4b20      	ldr	r3, [pc, #128]	; (8011c2c <prvAddCurrentTaskToDelayedList+0x94>)
 8011baa:	681b      	ldr	r3, [r3, #0]
 8011bac:	3304      	adds	r3, #4
 8011bae:	4618      	mov	r0, r3
 8011bb0:	f7fe fc08 	bl	80103c4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8011bb4:	687b      	ldr	r3, [r7, #4]
 8011bb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011bba:	d10a      	bne.n	8011bd2 <prvAddCurrentTaskToDelayedList+0x3a>
 8011bbc:	683b      	ldr	r3, [r7, #0]
 8011bbe:	2b00      	cmp	r3, #0
 8011bc0:	d007      	beq.n	8011bd2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011bc2:	4b1a      	ldr	r3, [pc, #104]	; (8011c2c <prvAddCurrentTaskToDelayedList+0x94>)
 8011bc4:	681b      	ldr	r3, [r3, #0]
 8011bc6:	3304      	adds	r3, #4
 8011bc8:	4619      	mov	r1, r3
 8011bca:	4819      	ldr	r0, [pc, #100]	; (8011c30 <prvAddCurrentTaskToDelayedList+0x98>)
 8011bcc:	f7fe fb9d 	bl	801030a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8011bd0:	e026      	b.n	8011c20 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8011bd2:	68fa      	ldr	r2, [r7, #12]
 8011bd4:	687b      	ldr	r3, [r7, #4]
 8011bd6:	4413      	add	r3, r2
 8011bd8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8011bda:	4b14      	ldr	r3, [pc, #80]	; (8011c2c <prvAddCurrentTaskToDelayedList+0x94>)
 8011bdc:	681b      	ldr	r3, [r3, #0]
 8011bde:	68ba      	ldr	r2, [r7, #8]
 8011be0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8011be2:	68ba      	ldr	r2, [r7, #8]
 8011be4:	68fb      	ldr	r3, [r7, #12]
 8011be6:	429a      	cmp	r2, r3
 8011be8:	d209      	bcs.n	8011bfe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011bea:	4b12      	ldr	r3, [pc, #72]	; (8011c34 <prvAddCurrentTaskToDelayedList+0x9c>)
 8011bec:	681a      	ldr	r2, [r3, #0]
 8011bee:	4b0f      	ldr	r3, [pc, #60]	; (8011c2c <prvAddCurrentTaskToDelayedList+0x94>)
 8011bf0:	681b      	ldr	r3, [r3, #0]
 8011bf2:	3304      	adds	r3, #4
 8011bf4:	4619      	mov	r1, r3
 8011bf6:	4610      	mov	r0, r2
 8011bf8:	f7fe fbab 	bl	8010352 <vListInsert>
}
 8011bfc:	e010      	b.n	8011c20 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011bfe:	4b0e      	ldr	r3, [pc, #56]	; (8011c38 <prvAddCurrentTaskToDelayedList+0xa0>)
 8011c00:	681a      	ldr	r2, [r3, #0]
 8011c02:	4b0a      	ldr	r3, [pc, #40]	; (8011c2c <prvAddCurrentTaskToDelayedList+0x94>)
 8011c04:	681b      	ldr	r3, [r3, #0]
 8011c06:	3304      	adds	r3, #4
 8011c08:	4619      	mov	r1, r3
 8011c0a:	4610      	mov	r0, r2
 8011c0c:	f7fe fba1 	bl	8010352 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8011c10:	4b0a      	ldr	r3, [pc, #40]	; (8011c3c <prvAddCurrentTaskToDelayedList+0xa4>)
 8011c12:	681b      	ldr	r3, [r3, #0]
 8011c14:	68ba      	ldr	r2, [r7, #8]
 8011c16:	429a      	cmp	r2, r3
 8011c18:	d202      	bcs.n	8011c20 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8011c1a:	4a08      	ldr	r2, [pc, #32]	; (8011c3c <prvAddCurrentTaskToDelayedList+0xa4>)
 8011c1c:	68bb      	ldr	r3, [r7, #8]
 8011c1e:	6013      	str	r3, [r2, #0]
}
 8011c20:	bf00      	nop
 8011c22:	3710      	adds	r7, #16
 8011c24:	46bd      	mov	sp, r7
 8011c26:	bd80      	pop	{r7, pc}
 8011c28:	20004bd0 	.word	0x20004bd0
 8011c2c:	200046f8 	.word	0x200046f8
 8011c30:	20004bb8 	.word	0x20004bb8
 8011c34:	20004b88 	.word	0x20004b88
 8011c38:	20004b84 	.word	0x20004b84
 8011c3c:	20004bec 	.word	0x20004bec

08011c40 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8011c40:	b580      	push	{r7, lr}
 8011c42:	b08a      	sub	sp, #40	; 0x28
 8011c44:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8011c46:	2300      	movs	r3, #0
 8011c48:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8011c4a:	f000 fb07 	bl	801225c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8011c4e:	4b1c      	ldr	r3, [pc, #112]	; (8011cc0 <xTimerCreateTimerTask+0x80>)
 8011c50:	681b      	ldr	r3, [r3, #0]
 8011c52:	2b00      	cmp	r3, #0
 8011c54:	d021      	beq.n	8011c9a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8011c56:	2300      	movs	r3, #0
 8011c58:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8011c5a:	2300      	movs	r3, #0
 8011c5c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8011c5e:	1d3a      	adds	r2, r7, #4
 8011c60:	f107 0108 	add.w	r1, r7, #8
 8011c64:	f107 030c 	add.w	r3, r7, #12
 8011c68:	4618      	mov	r0, r3
 8011c6a:	f7fe fb07 	bl	801027c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8011c6e:	6879      	ldr	r1, [r7, #4]
 8011c70:	68bb      	ldr	r3, [r7, #8]
 8011c72:	68fa      	ldr	r2, [r7, #12]
 8011c74:	9202      	str	r2, [sp, #8]
 8011c76:	9301      	str	r3, [sp, #4]
 8011c78:	2302      	movs	r3, #2
 8011c7a:	9300      	str	r3, [sp, #0]
 8011c7c:	2300      	movs	r3, #0
 8011c7e:	460a      	mov	r2, r1
 8011c80:	4910      	ldr	r1, [pc, #64]	; (8011cc4 <xTimerCreateTimerTask+0x84>)
 8011c82:	4811      	ldr	r0, [pc, #68]	; (8011cc8 <xTimerCreateTimerTask+0x88>)
 8011c84:	f7ff f8b4 	bl	8010df0 <xTaskCreateStatic>
 8011c88:	4603      	mov	r3, r0
 8011c8a:	4a10      	ldr	r2, [pc, #64]	; (8011ccc <xTimerCreateTimerTask+0x8c>)
 8011c8c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8011c8e:	4b0f      	ldr	r3, [pc, #60]	; (8011ccc <xTimerCreateTimerTask+0x8c>)
 8011c90:	681b      	ldr	r3, [r3, #0]
 8011c92:	2b00      	cmp	r3, #0
 8011c94:	d001      	beq.n	8011c9a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8011c96:	2301      	movs	r3, #1
 8011c98:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8011c9a:	697b      	ldr	r3, [r7, #20]
 8011c9c:	2b00      	cmp	r3, #0
 8011c9e:	d10a      	bne.n	8011cb6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8011ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ca4:	f383 8811 	msr	BASEPRI, r3
 8011ca8:	f3bf 8f6f 	isb	sy
 8011cac:	f3bf 8f4f 	dsb	sy
 8011cb0:	613b      	str	r3, [r7, #16]
}
 8011cb2:	bf00      	nop
 8011cb4:	e7fe      	b.n	8011cb4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8011cb6:	697b      	ldr	r3, [r7, #20]
}
 8011cb8:	4618      	mov	r0, r3
 8011cba:	3718      	adds	r7, #24
 8011cbc:	46bd      	mov	sp, r7
 8011cbe:	bd80      	pop	{r7, pc}
 8011cc0:	20004c28 	.word	0x20004c28
 8011cc4:	08016a80 	.word	0x08016a80
 8011cc8:	08011e05 	.word	0x08011e05
 8011ccc:	20004c2c 	.word	0x20004c2c

08011cd0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8011cd0:	b580      	push	{r7, lr}
 8011cd2:	b08a      	sub	sp, #40	; 0x28
 8011cd4:	af00      	add	r7, sp, #0
 8011cd6:	60f8      	str	r0, [r7, #12]
 8011cd8:	60b9      	str	r1, [r7, #8]
 8011cda:	607a      	str	r2, [r7, #4]
 8011cdc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8011cde:	2300      	movs	r3, #0
 8011ce0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8011ce2:	68fb      	ldr	r3, [r7, #12]
 8011ce4:	2b00      	cmp	r3, #0
 8011ce6:	d10a      	bne.n	8011cfe <xTimerGenericCommand+0x2e>
	__asm volatile
 8011ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011cec:	f383 8811 	msr	BASEPRI, r3
 8011cf0:	f3bf 8f6f 	isb	sy
 8011cf4:	f3bf 8f4f 	dsb	sy
 8011cf8:	623b      	str	r3, [r7, #32]
}
 8011cfa:	bf00      	nop
 8011cfc:	e7fe      	b.n	8011cfc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8011cfe:	4b1a      	ldr	r3, [pc, #104]	; (8011d68 <xTimerGenericCommand+0x98>)
 8011d00:	681b      	ldr	r3, [r3, #0]
 8011d02:	2b00      	cmp	r3, #0
 8011d04:	d02a      	beq.n	8011d5c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8011d06:	68bb      	ldr	r3, [r7, #8]
 8011d08:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8011d0e:	68fb      	ldr	r3, [r7, #12]
 8011d10:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8011d12:	68bb      	ldr	r3, [r7, #8]
 8011d14:	2b05      	cmp	r3, #5
 8011d16:	dc18      	bgt.n	8011d4a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8011d18:	f7ff feb2 	bl	8011a80 <xTaskGetSchedulerState>
 8011d1c:	4603      	mov	r3, r0
 8011d1e:	2b02      	cmp	r3, #2
 8011d20:	d109      	bne.n	8011d36 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8011d22:	4b11      	ldr	r3, [pc, #68]	; (8011d68 <xTimerGenericCommand+0x98>)
 8011d24:	6818      	ldr	r0, [r3, #0]
 8011d26:	f107 0110 	add.w	r1, r7, #16
 8011d2a:	2300      	movs	r3, #0
 8011d2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011d2e:	f7fe fc77 	bl	8010620 <xQueueGenericSend>
 8011d32:	6278      	str	r0, [r7, #36]	; 0x24
 8011d34:	e012      	b.n	8011d5c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8011d36:	4b0c      	ldr	r3, [pc, #48]	; (8011d68 <xTimerGenericCommand+0x98>)
 8011d38:	6818      	ldr	r0, [r3, #0]
 8011d3a:	f107 0110 	add.w	r1, r7, #16
 8011d3e:	2300      	movs	r3, #0
 8011d40:	2200      	movs	r2, #0
 8011d42:	f7fe fc6d 	bl	8010620 <xQueueGenericSend>
 8011d46:	6278      	str	r0, [r7, #36]	; 0x24
 8011d48:	e008      	b.n	8011d5c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8011d4a:	4b07      	ldr	r3, [pc, #28]	; (8011d68 <xTimerGenericCommand+0x98>)
 8011d4c:	6818      	ldr	r0, [r3, #0]
 8011d4e:	f107 0110 	add.w	r1, r7, #16
 8011d52:	2300      	movs	r3, #0
 8011d54:	683a      	ldr	r2, [r7, #0]
 8011d56:	f7fe fd61 	bl	801081c <xQueueGenericSendFromISR>
 8011d5a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8011d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8011d5e:	4618      	mov	r0, r3
 8011d60:	3728      	adds	r7, #40	; 0x28
 8011d62:	46bd      	mov	sp, r7
 8011d64:	bd80      	pop	{r7, pc}
 8011d66:	bf00      	nop
 8011d68:	20004c28 	.word	0x20004c28

08011d6c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8011d6c:	b580      	push	{r7, lr}
 8011d6e:	b088      	sub	sp, #32
 8011d70:	af02      	add	r7, sp, #8
 8011d72:	6078      	str	r0, [r7, #4]
 8011d74:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011d76:	4b22      	ldr	r3, [pc, #136]	; (8011e00 <prvProcessExpiredTimer+0x94>)
 8011d78:	681b      	ldr	r3, [r3, #0]
 8011d7a:	68db      	ldr	r3, [r3, #12]
 8011d7c:	68db      	ldr	r3, [r3, #12]
 8011d7e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011d80:	697b      	ldr	r3, [r7, #20]
 8011d82:	3304      	adds	r3, #4
 8011d84:	4618      	mov	r0, r3
 8011d86:	f7fe fb1d 	bl	80103c4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011d8a:	697b      	ldr	r3, [r7, #20]
 8011d8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011d90:	f003 0304 	and.w	r3, r3, #4
 8011d94:	2b00      	cmp	r3, #0
 8011d96:	d022      	beq.n	8011dde <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8011d98:	697b      	ldr	r3, [r7, #20]
 8011d9a:	699a      	ldr	r2, [r3, #24]
 8011d9c:	687b      	ldr	r3, [r7, #4]
 8011d9e:	18d1      	adds	r1, r2, r3
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	683a      	ldr	r2, [r7, #0]
 8011da4:	6978      	ldr	r0, [r7, #20]
 8011da6:	f000 f8d1 	bl	8011f4c <prvInsertTimerInActiveList>
 8011daa:	4603      	mov	r3, r0
 8011dac:	2b00      	cmp	r3, #0
 8011dae:	d01f      	beq.n	8011df0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8011db0:	2300      	movs	r3, #0
 8011db2:	9300      	str	r3, [sp, #0]
 8011db4:	2300      	movs	r3, #0
 8011db6:	687a      	ldr	r2, [r7, #4]
 8011db8:	2100      	movs	r1, #0
 8011dba:	6978      	ldr	r0, [r7, #20]
 8011dbc:	f7ff ff88 	bl	8011cd0 <xTimerGenericCommand>
 8011dc0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8011dc2:	693b      	ldr	r3, [r7, #16]
 8011dc4:	2b00      	cmp	r3, #0
 8011dc6:	d113      	bne.n	8011df0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8011dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011dcc:	f383 8811 	msr	BASEPRI, r3
 8011dd0:	f3bf 8f6f 	isb	sy
 8011dd4:	f3bf 8f4f 	dsb	sy
 8011dd8:	60fb      	str	r3, [r7, #12]
}
 8011dda:	bf00      	nop
 8011ddc:	e7fe      	b.n	8011ddc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011dde:	697b      	ldr	r3, [r7, #20]
 8011de0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011de4:	f023 0301 	bic.w	r3, r3, #1
 8011de8:	b2da      	uxtb	r2, r3
 8011dea:	697b      	ldr	r3, [r7, #20]
 8011dec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011df0:	697b      	ldr	r3, [r7, #20]
 8011df2:	6a1b      	ldr	r3, [r3, #32]
 8011df4:	6978      	ldr	r0, [r7, #20]
 8011df6:	4798      	blx	r3
}
 8011df8:	bf00      	nop
 8011dfa:	3718      	adds	r7, #24
 8011dfc:	46bd      	mov	sp, r7
 8011dfe:	bd80      	pop	{r7, pc}
 8011e00:	20004c20 	.word	0x20004c20

08011e04 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8011e04:	b580      	push	{r7, lr}
 8011e06:	b084      	sub	sp, #16
 8011e08:	af00      	add	r7, sp, #0
 8011e0a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8011e0c:	f107 0308 	add.w	r3, r7, #8
 8011e10:	4618      	mov	r0, r3
 8011e12:	f000 f857 	bl	8011ec4 <prvGetNextExpireTime>
 8011e16:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8011e18:	68bb      	ldr	r3, [r7, #8]
 8011e1a:	4619      	mov	r1, r3
 8011e1c:	68f8      	ldr	r0, [r7, #12]
 8011e1e:	f000 f803 	bl	8011e28 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8011e22:	f000 f8d5 	bl	8011fd0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8011e26:	e7f1      	b.n	8011e0c <prvTimerTask+0x8>

08011e28 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8011e28:	b580      	push	{r7, lr}
 8011e2a:	b084      	sub	sp, #16
 8011e2c:	af00      	add	r7, sp, #0
 8011e2e:	6078      	str	r0, [r7, #4]
 8011e30:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8011e32:	f7ff fa39 	bl	80112a8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8011e36:	f107 0308 	add.w	r3, r7, #8
 8011e3a:	4618      	mov	r0, r3
 8011e3c:	f000 f866 	bl	8011f0c <prvSampleTimeNow>
 8011e40:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8011e42:	68bb      	ldr	r3, [r7, #8]
 8011e44:	2b00      	cmp	r3, #0
 8011e46:	d130      	bne.n	8011eaa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8011e48:	683b      	ldr	r3, [r7, #0]
 8011e4a:	2b00      	cmp	r3, #0
 8011e4c:	d10a      	bne.n	8011e64 <prvProcessTimerOrBlockTask+0x3c>
 8011e4e:	687a      	ldr	r2, [r7, #4]
 8011e50:	68fb      	ldr	r3, [r7, #12]
 8011e52:	429a      	cmp	r2, r3
 8011e54:	d806      	bhi.n	8011e64 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8011e56:	f7ff fa35 	bl	80112c4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8011e5a:	68f9      	ldr	r1, [r7, #12]
 8011e5c:	6878      	ldr	r0, [r7, #4]
 8011e5e:	f7ff ff85 	bl	8011d6c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8011e62:	e024      	b.n	8011eae <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8011e64:	683b      	ldr	r3, [r7, #0]
 8011e66:	2b00      	cmp	r3, #0
 8011e68:	d008      	beq.n	8011e7c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8011e6a:	4b13      	ldr	r3, [pc, #76]	; (8011eb8 <prvProcessTimerOrBlockTask+0x90>)
 8011e6c:	681b      	ldr	r3, [r3, #0]
 8011e6e:	681b      	ldr	r3, [r3, #0]
 8011e70:	2b00      	cmp	r3, #0
 8011e72:	d101      	bne.n	8011e78 <prvProcessTimerOrBlockTask+0x50>
 8011e74:	2301      	movs	r3, #1
 8011e76:	e000      	b.n	8011e7a <prvProcessTimerOrBlockTask+0x52>
 8011e78:	2300      	movs	r3, #0
 8011e7a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8011e7c:	4b0f      	ldr	r3, [pc, #60]	; (8011ebc <prvProcessTimerOrBlockTask+0x94>)
 8011e7e:	6818      	ldr	r0, [r3, #0]
 8011e80:	687a      	ldr	r2, [r7, #4]
 8011e82:	68fb      	ldr	r3, [r7, #12]
 8011e84:	1ad3      	subs	r3, r2, r3
 8011e86:	683a      	ldr	r2, [r7, #0]
 8011e88:	4619      	mov	r1, r3
 8011e8a:	f7fe ff7d 	bl	8010d88 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8011e8e:	f7ff fa19 	bl	80112c4 <xTaskResumeAll>
 8011e92:	4603      	mov	r3, r0
 8011e94:	2b00      	cmp	r3, #0
 8011e96:	d10a      	bne.n	8011eae <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8011e98:	4b09      	ldr	r3, [pc, #36]	; (8011ec0 <prvProcessTimerOrBlockTask+0x98>)
 8011e9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011e9e:	601a      	str	r2, [r3, #0]
 8011ea0:	f3bf 8f4f 	dsb	sy
 8011ea4:	f3bf 8f6f 	isb	sy
}
 8011ea8:	e001      	b.n	8011eae <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8011eaa:	f7ff fa0b 	bl	80112c4 <xTaskResumeAll>
}
 8011eae:	bf00      	nop
 8011eb0:	3710      	adds	r7, #16
 8011eb2:	46bd      	mov	sp, r7
 8011eb4:	bd80      	pop	{r7, pc}
 8011eb6:	bf00      	nop
 8011eb8:	20004c24 	.word	0x20004c24
 8011ebc:	20004c28 	.word	0x20004c28
 8011ec0:	e000ed04 	.word	0xe000ed04

08011ec4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8011ec4:	b480      	push	{r7}
 8011ec6:	b085      	sub	sp, #20
 8011ec8:	af00      	add	r7, sp, #0
 8011eca:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8011ecc:	4b0e      	ldr	r3, [pc, #56]	; (8011f08 <prvGetNextExpireTime+0x44>)
 8011ece:	681b      	ldr	r3, [r3, #0]
 8011ed0:	681b      	ldr	r3, [r3, #0]
 8011ed2:	2b00      	cmp	r3, #0
 8011ed4:	d101      	bne.n	8011eda <prvGetNextExpireTime+0x16>
 8011ed6:	2201      	movs	r2, #1
 8011ed8:	e000      	b.n	8011edc <prvGetNextExpireTime+0x18>
 8011eda:	2200      	movs	r2, #0
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	681b      	ldr	r3, [r3, #0]
 8011ee4:	2b00      	cmp	r3, #0
 8011ee6:	d105      	bne.n	8011ef4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011ee8:	4b07      	ldr	r3, [pc, #28]	; (8011f08 <prvGetNextExpireTime+0x44>)
 8011eea:	681b      	ldr	r3, [r3, #0]
 8011eec:	68db      	ldr	r3, [r3, #12]
 8011eee:	681b      	ldr	r3, [r3, #0]
 8011ef0:	60fb      	str	r3, [r7, #12]
 8011ef2:	e001      	b.n	8011ef8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8011ef4:	2300      	movs	r3, #0
 8011ef6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8011ef8:	68fb      	ldr	r3, [r7, #12]
}
 8011efa:	4618      	mov	r0, r3
 8011efc:	3714      	adds	r7, #20
 8011efe:	46bd      	mov	sp, r7
 8011f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f04:	4770      	bx	lr
 8011f06:	bf00      	nop
 8011f08:	20004c20 	.word	0x20004c20

08011f0c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8011f0c:	b580      	push	{r7, lr}
 8011f0e:	b084      	sub	sp, #16
 8011f10:	af00      	add	r7, sp, #0
 8011f12:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8011f14:	f7ff fa74 	bl	8011400 <xTaskGetTickCount>
 8011f18:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8011f1a:	4b0b      	ldr	r3, [pc, #44]	; (8011f48 <prvSampleTimeNow+0x3c>)
 8011f1c:	681b      	ldr	r3, [r3, #0]
 8011f1e:	68fa      	ldr	r2, [r7, #12]
 8011f20:	429a      	cmp	r2, r3
 8011f22:	d205      	bcs.n	8011f30 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8011f24:	f000 f936 	bl	8012194 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8011f28:	687b      	ldr	r3, [r7, #4]
 8011f2a:	2201      	movs	r2, #1
 8011f2c:	601a      	str	r2, [r3, #0]
 8011f2e:	e002      	b.n	8011f36 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8011f30:	687b      	ldr	r3, [r7, #4]
 8011f32:	2200      	movs	r2, #0
 8011f34:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8011f36:	4a04      	ldr	r2, [pc, #16]	; (8011f48 <prvSampleTimeNow+0x3c>)
 8011f38:	68fb      	ldr	r3, [r7, #12]
 8011f3a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8011f3c:	68fb      	ldr	r3, [r7, #12]
}
 8011f3e:	4618      	mov	r0, r3
 8011f40:	3710      	adds	r7, #16
 8011f42:	46bd      	mov	sp, r7
 8011f44:	bd80      	pop	{r7, pc}
 8011f46:	bf00      	nop
 8011f48:	20004c30 	.word	0x20004c30

08011f4c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8011f4c:	b580      	push	{r7, lr}
 8011f4e:	b086      	sub	sp, #24
 8011f50:	af00      	add	r7, sp, #0
 8011f52:	60f8      	str	r0, [r7, #12]
 8011f54:	60b9      	str	r1, [r7, #8]
 8011f56:	607a      	str	r2, [r7, #4]
 8011f58:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8011f5a:	2300      	movs	r3, #0
 8011f5c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8011f5e:	68fb      	ldr	r3, [r7, #12]
 8011f60:	68ba      	ldr	r2, [r7, #8]
 8011f62:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8011f64:	68fb      	ldr	r3, [r7, #12]
 8011f66:	68fa      	ldr	r2, [r7, #12]
 8011f68:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8011f6a:	68ba      	ldr	r2, [r7, #8]
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	429a      	cmp	r2, r3
 8011f70:	d812      	bhi.n	8011f98 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011f72:	687a      	ldr	r2, [r7, #4]
 8011f74:	683b      	ldr	r3, [r7, #0]
 8011f76:	1ad2      	subs	r2, r2, r3
 8011f78:	68fb      	ldr	r3, [r7, #12]
 8011f7a:	699b      	ldr	r3, [r3, #24]
 8011f7c:	429a      	cmp	r2, r3
 8011f7e:	d302      	bcc.n	8011f86 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8011f80:	2301      	movs	r3, #1
 8011f82:	617b      	str	r3, [r7, #20]
 8011f84:	e01b      	b.n	8011fbe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8011f86:	4b10      	ldr	r3, [pc, #64]	; (8011fc8 <prvInsertTimerInActiveList+0x7c>)
 8011f88:	681a      	ldr	r2, [r3, #0]
 8011f8a:	68fb      	ldr	r3, [r7, #12]
 8011f8c:	3304      	adds	r3, #4
 8011f8e:	4619      	mov	r1, r3
 8011f90:	4610      	mov	r0, r2
 8011f92:	f7fe f9de 	bl	8010352 <vListInsert>
 8011f96:	e012      	b.n	8011fbe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8011f98:	687a      	ldr	r2, [r7, #4]
 8011f9a:	683b      	ldr	r3, [r7, #0]
 8011f9c:	429a      	cmp	r2, r3
 8011f9e:	d206      	bcs.n	8011fae <prvInsertTimerInActiveList+0x62>
 8011fa0:	68ba      	ldr	r2, [r7, #8]
 8011fa2:	683b      	ldr	r3, [r7, #0]
 8011fa4:	429a      	cmp	r2, r3
 8011fa6:	d302      	bcc.n	8011fae <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8011fa8:	2301      	movs	r3, #1
 8011faa:	617b      	str	r3, [r7, #20]
 8011fac:	e007      	b.n	8011fbe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8011fae:	4b07      	ldr	r3, [pc, #28]	; (8011fcc <prvInsertTimerInActiveList+0x80>)
 8011fb0:	681a      	ldr	r2, [r3, #0]
 8011fb2:	68fb      	ldr	r3, [r7, #12]
 8011fb4:	3304      	adds	r3, #4
 8011fb6:	4619      	mov	r1, r3
 8011fb8:	4610      	mov	r0, r2
 8011fba:	f7fe f9ca 	bl	8010352 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8011fbe:	697b      	ldr	r3, [r7, #20]
}
 8011fc0:	4618      	mov	r0, r3
 8011fc2:	3718      	adds	r7, #24
 8011fc4:	46bd      	mov	sp, r7
 8011fc6:	bd80      	pop	{r7, pc}
 8011fc8:	20004c24 	.word	0x20004c24
 8011fcc:	20004c20 	.word	0x20004c20

08011fd0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8011fd0:	b580      	push	{r7, lr}
 8011fd2:	b08e      	sub	sp, #56	; 0x38
 8011fd4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8011fd6:	e0ca      	b.n	801216e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8011fd8:	687b      	ldr	r3, [r7, #4]
 8011fda:	2b00      	cmp	r3, #0
 8011fdc:	da18      	bge.n	8012010 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8011fde:	1d3b      	adds	r3, r7, #4
 8011fe0:	3304      	adds	r3, #4
 8011fe2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8011fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fe6:	2b00      	cmp	r3, #0
 8011fe8:	d10a      	bne.n	8012000 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8011fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011fee:	f383 8811 	msr	BASEPRI, r3
 8011ff2:	f3bf 8f6f 	isb	sy
 8011ff6:	f3bf 8f4f 	dsb	sy
 8011ffa:	61fb      	str	r3, [r7, #28]
}
 8011ffc:	bf00      	nop
 8011ffe:	e7fe      	b.n	8011ffe <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8012000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012002:	681b      	ldr	r3, [r3, #0]
 8012004:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012006:	6850      	ldr	r0, [r2, #4]
 8012008:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801200a:	6892      	ldr	r2, [r2, #8]
 801200c:	4611      	mov	r1, r2
 801200e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8012010:	687b      	ldr	r3, [r7, #4]
 8012012:	2b00      	cmp	r3, #0
 8012014:	f2c0 80ab 	blt.w	801216e <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8012018:	68fb      	ldr	r3, [r7, #12]
 801201a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801201c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801201e:	695b      	ldr	r3, [r3, #20]
 8012020:	2b00      	cmp	r3, #0
 8012022:	d004      	beq.n	801202e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012026:	3304      	adds	r3, #4
 8012028:	4618      	mov	r0, r3
 801202a:	f7fe f9cb 	bl	80103c4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801202e:	463b      	mov	r3, r7
 8012030:	4618      	mov	r0, r3
 8012032:	f7ff ff6b 	bl	8011f0c <prvSampleTimeNow>
 8012036:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	2b09      	cmp	r3, #9
 801203c:	f200 8096 	bhi.w	801216c <prvProcessReceivedCommands+0x19c>
 8012040:	a201      	add	r2, pc, #4	; (adr r2, 8012048 <prvProcessReceivedCommands+0x78>)
 8012042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012046:	bf00      	nop
 8012048:	08012071 	.word	0x08012071
 801204c:	08012071 	.word	0x08012071
 8012050:	08012071 	.word	0x08012071
 8012054:	080120e5 	.word	0x080120e5
 8012058:	080120f9 	.word	0x080120f9
 801205c:	08012143 	.word	0x08012143
 8012060:	08012071 	.word	0x08012071
 8012064:	08012071 	.word	0x08012071
 8012068:	080120e5 	.word	0x080120e5
 801206c:	080120f9 	.word	0x080120f9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8012070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012072:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012076:	f043 0301 	orr.w	r3, r3, #1
 801207a:	b2da      	uxtb	r2, r3
 801207c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801207e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8012082:	68ba      	ldr	r2, [r7, #8]
 8012084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012086:	699b      	ldr	r3, [r3, #24]
 8012088:	18d1      	adds	r1, r2, r3
 801208a:	68bb      	ldr	r3, [r7, #8]
 801208c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801208e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012090:	f7ff ff5c 	bl	8011f4c <prvInsertTimerInActiveList>
 8012094:	4603      	mov	r3, r0
 8012096:	2b00      	cmp	r3, #0
 8012098:	d069      	beq.n	801216e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801209a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801209c:	6a1b      	ldr	r3, [r3, #32]
 801209e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80120a0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80120a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80120a8:	f003 0304 	and.w	r3, r3, #4
 80120ac:	2b00      	cmp	r3, #0
 80120ae:	d05e      	beq.n	801216e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80120b0:	68ba      	ldr	r2, [r7, #8]
 80120b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120b4:	699b      	ldr	r3, [r3, #24]
 80120b6:	441a      	add	r2, r3
 80120b8:	2300      	movs	r3, #0
 80120ba:	9300      	str	r3, [sp, #0]
 80120bc:	2300      	movs	r3, #0
 80120be:	2100      	movs	r1, #0
 80120c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80120c2:	f7ff fe05 	bl	8011cd0 <xTimerGenericCommand>
 80120c6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80120c8:	6a3b      	ldr	r3, [r7, #32]
 80120ca:	2b00      	cmp	r3, #0
 80120cc:	d14f      	bne.n	801216e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80120ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120d2:	f383 8811 	msr	BASEPRI, r3
 80120d6:	f3bf 8f6f 	isb	sy
 80120da:	f3bf 8f4f 	dsb	sy
 80120de:	61bb      	str	r3, [r7, #24]
}
 80120e0:	bf00      	nop
 80120e2:	e7fe      	b.n	80120e2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80120e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80120ea:	f023 0301 	bic.w	r3, r3, #1
 80120ee:	b2da      	uxtb	r2, r3
 80120f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80120f6:	e03a      	b.n	801216e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80120f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80120fe:	f043 0301 	orr.w	r3, r3, #1
 8012102:	b2da      	uxtb	r2, r3
 8012104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012106:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801210a:	68ba      	ldr	r2, [r7, #8]
 801210c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801210e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8012110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012112:	699b      	ldr	r3, [r3, #24]
 8012114:	2b00      	cmp	r3, #0
 8012116:	d10a      	bne.n	801212e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8012118:	f04f 0350 	mov.w	r3, #80	; 0x50
 801211c:	f383 8811 	msr	BASEPRI, r3
 8012120:	f3bf 8f6f 	isb	sy
 8012124:	f3bf 8f4f 	dsb	sy
 8012128:	617b      	str	r3, [r7, #20]
}
 801212a:	bf00      	nop
 801212c:	e7fe      	b.n	801212c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801212e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012130:	699a      	ldr	r2, [r3, #24]
 8012132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012134:	18d1      	adds	r1, r2, r3
 8012136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012138:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801213a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801213c:	f7ff ff06 	bl	8011f4c <prvInsertTimerInActiveList>
					break;
 8012140:	e015      	b.n	801216e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8012142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012144:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012148:	f003 0302 	and.w	r3, r3, #2
 801214c:	2b00      	cmp	r3, #0
 801214e:	d103      	bne.n	8012158 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8012150:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012152:	f000 fbdd 	bl	8012910 <vPortFree>
 8012156:	e00a      	b.n	801216e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801215a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801215e:	f023 0301 	bic.w	r3, r3, #1
 8012162:	b2da      	uxtb	r2, r3
 8012164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012166:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801216a:	e000      	b.n	801216e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 801216c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801216e:	4b08      	ldr	r3, [pc, #32]	; (8012190 <prvProcessReceivedCommands+0x1c0>)
 8012170:	681b      	ldr	r3, [r3, #0]
 8012172:	1d39      	adds	r1, r7, #4
 8012174:	2200      	movs	r2, #0
 8012176:	4618      	mov	r0, r3
 8012178:	f7fe fbec 	bl	8010954 <xQueueReceive>
 801217c:	4603      	mov	r3, r0
 801217e:	2b00      	cmp	r3, #0
 8012180:	f47f af2a 	bne.w	8011fd8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8012184:	bf00      	nop
 8012186:	bf00      	nop
 8012188:	3730      	adds	r7, #48	; 0x30
 801218a:	46bd      	mov	sp, r7
 801218c:	bd80      	pop	{r7, pc}
 801218e:	bf00      	nop
 8012190:	20004c28 	.word	0x20004c28

08012194 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8012194:	b580      	push	{r7, lr}
 8012196:	b088      	sub	sp, #32
 8012198:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801219a:	e048      	b.n	801222e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801219c:	4b2d      	ldr	r3, [pc, #180]	; (8012254 <prvSwitchTimerLists+0xc0>)
 801219e:	681b      	ldr	r3, [r3, #0]
 80121a0:	68db      	ldr	r3, [r3, #12]
 80121a2:	681b      	ldr	r3, [r3, #0]
 80121a4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80121a6:	4b2b      	ldr	r3, [pc, #172]	; (8012254 <prvSwitchTimerLists+0xc0>)
 80121a8:	681b      	ldr	r3, [r3, #0]
 80121aa:	68db      	ldr	r3, [r3, #12]
 80121ac:	68db      	ldr	r3, [r3, #12]
 80121ae:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80121b0:	68fb      	ldr	r3, [r7, #12]
 80121b2:	3304      	adds	r3, #4
 80121b4:	4618      	mov	r0, r3
 80121b6:	f7fe f905 	bl	80103c4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80121ba:	68fb      	ldr	r3, [r7, #12]
 80121bc:	6a1b      	ldr	r3, [r3, #32]
 80121be:	68f8      	ldr	r0, [r7, #12]
 80121c0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80121c2:	68fb      	ldr	r3, [r7, #12]
 80121c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80121c8:	f003 0304 	and.w	r3, r3, #4
 80121cc:	2b00      	cmp	r3, #0
 80121ce:	d02e      	beq.n	801222e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80121d0:	68fb      	ldr	r3, [r7, #12]
 80121d2:	699b      	ldr	r3, [r3, #24]
 80121d4:	693a      	ldr	r2, [r7, #16]
 80121d6:	4413      	add	r3, r2
 80121d8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80121da:	68ba      	ldr	r2, [r7, #8]
 80121dc:	693b      	ldr	r3, [r7, #16]
 80121de:	429a      	cmp	r2, r3
 80121e0:	d90e      	bls.n	8012200 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80121e2:	68fb      	ldr	r3, [r7, #12]
 80121e4:	68ba      	ldr	r2, [r7, #8]
 80121e6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80121e8:	68fb      	ldr	r3, [r7, #12]
 80121ea:	68fa      	ldr	r2, [r7, #12]
 80121ec:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80121ee:	4b19      	ldr	r3, [pc, #100]	; (8012254 <prvSwitchTimerLists+0xc0>)
 80121f0:	681a      	ldr	r2, [r3, #0]
 80121f2:	68fb      	ldr	r3, [r7, #12]
 80121f4:	3304      	adds	r3, #4
 80121f6:	4619      	mov	r1, r3
 80121f8:	4610      	mov	r0, r2
 80121fa:	f7fe f8aa 	bl	8010352 <vListInsert>
 80121fe:	e016      	b.n	801222e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012200:	2300      	movs	r3, #0
 8012202:	9300      	str	r3, [sp, #0]
 8012204:	2300      	movs	r3, #0
 8012206:	693a      	ldr	r2, [r7, #16]
 8012208:	2100      	movs	r1, #0
 801220a:	68f8      	ldr	r0, [r7, #12]
 801220c:	f7ff fd60 	bl	8011cd0 <xTimerGenericCommand>
 8012210:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8012212:	687b      	ldr	r3, [r7, #4]
 8012214:	2b00      	cmp	r3, #0
 8012216:	d10a      	bne.n	801222e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8012218:	f04f 0350 	mov.w	r3, #80	; 0x50
 801221c:	f383 8811 	msr	BASEPRI, r3
 8012220:	f3bf 8f6f 	isb	sy
 8012224:	f3bf 8f4f 	dsb	sy
 8012228:	603b      	str	r3, [r7, #0]
}
 801222a:	bf00      	nop
 801222c:	e7fe      	b.n	801222c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801222e:	4b09      	ldr	r3, [pc, #36]	; (8012254 <prvSwitchTimerLists+0xc0>)
 8012230:	681b      	ldr	r3, [r3, #0]
 8012232:	681b      	ldr	r3, [r3, #0]
 8012234:	2b00      	cmp	r3, #0
 8012236:	d1b1      	bne.n	801219c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8012238:	4b06      	ldr	r3, [pc, #24]	; (8012254 <prvSwitchTimerLists+0xc0>)
 801223a:	681b      	ldr	r3, [r3, #0]
 801223c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801223e:	4b06      	ldr	r3, [pc, #24]	; (8012258 <prvSwitchTimerLists+0xc4>)
 8012240:	681b      	ldr	r3, [r3, #0]
 8012242:	4a04      	ldr	r2, [pc, #16]	; (8012254 <prvSwitchTimerLists+0xc0>)
 8012244:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8012246:	4a04      	ldr	r2, [pc, #16]	; (8012258 <prvSwitchTimerLists+0xc4>)
 8012248:	697b      	ldr	r3, [r7, #20]
 801224a:	6013      	str	r3, [r2, #0]
}
 801224c:	bf00      	nop
 801224e:	3718      	adds	r7, #24
 8012250:	46bd      	mov	sp, r7
 8012252:	bd80      	pop	{r7, pc}
 8012254:	20004c20 	.word	0x20004c20
 8012258:	20004c24 	.word	0x20004c24

0801225c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801225c:	b580      	push	{r7, lr}
 801225e:	b082      	sub	sp, #8
 8012260:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8012262:	f000 f967 	bl	8012534 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8012266:	4b15      	ldr	r3, [pc, #84]	; (80122bc <prvCheckForValidListAndQueue+0x60>)
 8012268:	681b      	ldr	r3, [r3, #0]
 801226a:	2b00      	cmp	r3, #0
 801226c:	d120      	bne.n	80122b0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801226e:	4814      	ldr	r0, [pc, #80]	; (80122c0 <prvCheckForValidListAndQueue+0x64>)
 8012270:	f7fe f81e 	bl	80102b0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8012274:	4813      	ldr	r0, [pc, #76]	; (80122c4 <prvCheckForValidListAndQueue+0x68>)
 8012276:	f7fe f81b 	bl	80102b0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801227a:	4b13      	ldr	r3, [pc, #76]	; (80122c8 <prvCheckForValidListAndQueue+0x6c>)
 801227c:	4a10      	ldr	r2, [pc, #64]	; (80122c0 <prvCheckForValidListAndQueue+0x64>)
 801227e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8012280:	4b12      	ldr	r3, [pc, #72]	; (80122cc <prvCheckForValidListAndQueue+0x70>)
 8012282:	4a10      	ldr	r2, [pc, #64]	; (80122c4 <prvCheckForValidListAndQueue+0x68>)
 8012284:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8012286:	2300      	movs	r3, #0
 8012288:	9300      	str	r3, [sp, #0]
 801228a:	4b11      	ldr	r3, [pc, #68]	; (80122d0 <prvCheckForValidListAndQueue+0x74>)
 801228c:	4a11      	ldr	r2, [pc, #68]	; (80122d4 <prvCheckForValidListAndQueue+0x78>)
 801228e:	2110      	movs	r1, #16
 8012290:	200a      	movs	r0, #10
 8012292:	f7fe f929 	bl	80104e8 <xQueueGenericCreateStatic>
 8012296:	4603      	mov	r3, r0
 8012298:	4a08      	ldr	r2, [pc, #32]	; (80122bc <prvCheckForValidListAndQueue+0x60>)
 801229a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 801229c:	4b07      	ldr	r3, [pc, #28]	; (80122bc <prvCheckForValidListAndQueue+0x60>)
 801229e:	681b      	ldr	r3, [r3, #0]
 80122a0:	2b00      	cmp	r3, #0
 80122a2:	d005      	beq.n	80122b0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80122a4:	4b05      	ldr	r3, [pc, #20]	; (80122bc <prvCheckForValidListAndQueue+0x60>)
 80122a6:	681b      	ldr	r3, [r3, #0]
 80122a8:	490b      	ldr	r1, [pc, #44]	; (80122d8 <prvCheckForValidListAndQueue+0x7c>)
 80122aa:	4618      	mov	r0, r3
 80122ac:	f7fe fd42 	bl	8010d34 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80122b0:	f000 f970 	bl	8012594 <vPortExitCritical>
}
 80122b4:	bf00      	nop
 80122b6:	46bd      	mov	sp, r7
 80122b8:	bd80      	pop	{r7, pc}
 80122ba:	bf00      	nop
 80122bc:	20004c28 	.word	0x20004c28
 80122c0:	20004bf8 	.word	0x20004bf8
 80122c4:	20004c0c 	.word	0x20004c0c
 80122c8:	20004c20 	.word	0x20004c20
 80122cc:	20004c24 	.word	0x20004c24
 80122d0:	20004cd4 	.word	0x20004cd4
 80122d4:	20004c34 	.word	0x20004c34
 80122d8:	08016a88 	.word	0x08016a88

080122dc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80122dc:	b480      	push	{r7}
 80122de:	b085      	sub	sp, #20
 80122e0:	af00      	add	r7, sp, #0
 80122e2:	60f8      	str	r0, [r7, #12]
 80122e4:	60b9      	str	r1, [r7, #8]
 80122e6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80122e8:	68fb      	ldr	r3, [r7, #12]
 80122ea:	3b04      	subs	r3, #4
 80122ec:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80122ee:	68fb      	ldr	r3, [r7, #12]
 80122f0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80122f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80122f6:	68fb      	ldr	r3, [r7, #12]
 80122f8:	3b04      	subs	r3, #4
 80122fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80122fc:	68bb      	ldr	r3, [r7, #8]
 80122fe:	f023 0201 	bic.w	r2, r3, #1
 8012302:	68fb      	ldr	r3, [r7, #12]
 8012304:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012306:	68fb      	ldr	r3, [r7, #12]
 8012308:	3b04      	subs	r3, #4
 801230a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801230c:	4a0c      	ldr	r2, [pc, #48]	; (8012340 <pxPortInitialiseStack+0x64>)
 801230e:	68fb      	ldr	r3, [r7, #12]
 8012310:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8012312:	68fb      	ldr	r3, [r7, #12]
 8012314:	3b14      	subs	r3, #20
 8012316:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8012318:	687a      	ldr	r2, [r7, #4]
 801231a:	68fb      	ldr	r3, [r7, #12]
 801231c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801231e:	68fb      	ldr	r3, [r7, #12]
 8012320:	3b04      	subs	r3, #4
 8012322:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8012324:	68fb      	ldr	r3, [r7, #12]
 8012326:	f06f 0202 	mvn.w	r2, #2
 801232a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801232c:	68fb      	ldr	r3, [r7, #12]
 801232e:	3b20      	subs	r3, #32
 8012330:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8012332:	68fb      	ldr	r3, [r7, #12]
}
 8012334:	4618      	mov	r0, r3
 8012336:	3714      	adds	r7, #20
 8012338:	46bd      	mov	sp, r7
 801233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801233e:	4770      	bx	lr
 8012340:	08012345 	.word	0x08012345

08012344 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8012344:	b480      	push	{r7}
 8012346:	b085      	sub	sp, #20
 8012348:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801234a:	2300      	movs	r3, #0
 801234c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801234e:	4b12      	ldr	r3, [pc, #72]	; (8012398 <prvTaskExitError+0x54>)
 8012350:	681b      	ldr	r3, [r3, #0]
 8012352:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012356:	d00a      	beq.n	801236e <prvTaskExitError+0x2a>
	__asm volatile
 8012358:	f04f 0350 	mov.w	r3, #80	; 0x50
 801235c:	f383 8811 	msr	BASEPRI, r3
 8012360:	f3bf 8f6f 	isb	sy
 8012364:	f3bf 8f4f 	dsb	sy
 8012368:	60fb      	str	r3, [r7, #12]
}
 801236a:	bf00      	nop
 801236c:	e7fe      	b.n	801236c <prvTaskExitError+0x28>
	__asm volatile
 801236e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012372:	f383 8811 	msr	BASEPRI, r3
 8012376:	f3bf 8f6f 	isb	sy
 801237a:	f3bf 8f4f 	dsb	sy
 801237e:	60bb      	str	r3, [r7, #8]
}
 8012380:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8012382:	bf00      	nop
 8012384:	687b      	ldr	r3, [r7, #4]
 8012386:	2b00      	cmp	r3, #0
 8012388:	d0fc      	beq.n	8012384 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801238a:	bf00      	nop
 801238c:	bf00      	nop
 801238e:	3714      	adds	r7, #20
 8012390:	46bd      	mov	sp, r7
 8012392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012396:	4770      	bx	lr
 8012398:	20000340 	.word	0x20000340
 801239c:	00000000 	.word	0x00000000

080123a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80123a0:	4b07      	ldr	r3, [pc, #28]	; (80123c0 <pxCurrentTCBConst2>)
 80123a2:	6819      	ldr	r1, [r3, #0]
 80123a4:	6808      	ldr	r0, [r1, #0]
 80123a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80123aa:	f380 8809 	msr	PSP, r0
 80123ae:	f3bf 8f6f 	isb	sy
 80123b2:	f04f 0000 	mov.w	r0, #0
 80123b6:	f380 8811 	msr	BASEPRI, r0
 80123ba:	4770      	bx	lr
 80123bc:	f3af 8000 	nop.w

080123c0 <pxCurrentTCBConst2>:
 80123c0:	200046f8 	.word	0x200046f8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80123c4:	bf00      	nop
 80123c6:	bf00      	nop

080123c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80123c8:	4808      	ldr	r0, [pc, #32]	; (80123ec <prvPortStartFirstTask+0x24>)
 80123ca:	6800      	ldr	r0, [r0, #0]
 80123cc:	6800      	ldr	r0, [r0, #0]
 80123ce:	f380 8808 	msr	MSP, r0
 80123d2:	f04f 0000 	mov.w	r0, #0
 80123d6:	f380 8814 	msr	CONTROL, r0
 80123da:	b662      	cpsie	i
 80123dc:	b661      	cpsie	f
 80123de:	f3bf 8f4f 	dsb	sy
 80123e2:	f3bf 8f6f 	isb	sy
 80123e6:	df00      	svc	0
 80123e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80123ea:	bf00      	nop
 80123ec:	e000ed08 	.word	0xe000ed08

080123f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80123f0:	b580      	push	{r7, lr}
 80123f2:	b086      	sub	sp, #24
 80123f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80123f6:	4b46      	ldr	r3, [pc, #280]	; (8012510 <xPortStartScheduler+0x120>)
 80123f8:	681b      	ldr	r3, [r3, #0]
 80123fa:	4a46      	ldr	r2, [pc, #280]	; (8012514 <xPortStartScheduler+0x124>)
 80123fc:	4293      	cmp	r3, r2
 80123fe:	d10a      	bne.n	8012416 <xPortStartScheduler+0x26>
	__asm volatile
 8012400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012404:	f383 8811 	msr	BASEPRI, r3
 8012408:	f3bf 8f6f 	isb	sy
 801240c:	f3bf 8f4f 	dsb	sy
 8012410:	613b      	str	r3, [r7, #16]
}
 8012412:	bf00      	nop
 8012414:	e7fe      	b.n	8012414 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8012416:	4b3e      	ldr	r3, [pc, #248]	; (8012510 <xPortStartScheduler+0x120>)
 8012418:	681b      	ldr	r3, [r3, #0]
 801241a:	4a3f      	ldr	r2, [pc, #252]	; (8012518 <xPortStartScheduler+0x128>)
 801241c:	4293      	cmp	r3, r2
 801241e:	d10a      	bne.n	8012436 <xPortStartScheduler+0x46>
	__asm volatile
 8012420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012424:	f383 8811 	msr	BASEPRI, r3
 8012428:	f3bf 8f6f 	isb	sy
 801242c:	f3bf 8f4f 	dsb	sy
 8012430:	60fb      	str	r3, [r7, #12]
}
 8012432:	bf00      	nop
 8012434:	e7fe      	b.n	8012434 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8012436:	4b39      	ldr	r3, [pc, #228]	; (801251c <xPortStartScheduler+0x12c>)
 8012438:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801243a:	697b      	ldr	r3, [r7, #20]
 801243c:	781b      	ldrb	r3, [r3, #0]
 801243e:	b2db      	uxtb	r3, r3
 8012440:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8012442:	697b      	ldr	r3, [r7, #20]
 8012444:	22ff      	movs	r2, #255	; 0xff
 8012446:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8012448:	697b      	ldr	r3, [r7, #20]
 801244a:	781b      	ldrb	r3, [r3, #0]
 801244c:	b2db      	uxtb	r3, r3
 801244e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8012450:	78fb      	ldrb	r3, [r7, #3]
 8012452:	b2db      	uxtb	r3, r3
 8012454:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8012458:	b2da      	uxtb	r2, r3
 801245a:	4b31      	ldr	r3, [pc, #196]	; (8012520 <xPortStartScheduler+0x130>)
 801245c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801245e:	4b31      	ldr	r3, [pc, #196]	; (8012524 <xPortStartScheduler+0x134>)
 8012460:	2207      	movs	r2, #7
 8012462:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012464:	e009      	b.n	801247a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8012466:	4b2f      	ldr	r3, [pc, #188]	; (8012524 <xPortStartScheduler+0x134>)
 8012468:	681b      	ldr	r3, [r3, #0]
 801246a:	3b01      	subs	r3, #1
 801246c:	4a2d      	ldr	r2, [pc, #180]	; (8012524 <xPortStartScheduler+0x134>)
 801246e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8012470:	78fb      	ldrb	r3, [r7, #3]
 8012472:	b2db      	uxtb	r3, r3
 8012474:	005b      	lsls	r3, r3, #1
 8012476:	b2db      	uxtb	r3, r3
 8012478:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801247a:	78fb      	ldrb	r3, [r7, #3]
 801247c:	b2db      	uxtb	r3, r3
 801247e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012482:	2b80      	cmp	r3, #128	; 0x80
 8012484:	d0ef      	beq.n	8012466 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8012486:	4b27      	ldr	r3, [pc, #156]	; (8012524 <xPortStartScheduler+0x134>)
 8012488:	681b      	ldr	r3, [r3, #0]
 801248a:	f1c3 0307 	rsb	r3, r3, #7
 801248e:	2b04      	cmp	r3, #4
 8012490:	d00a      	beq.n	80124a8 <xPortStartScheduler+0xb8>
	__asm volatile
 8012492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012496:	f383 8811 	msr	BASEPRI, r3
 801249a:	f3bf 8f6f 	isb	sy
 801249e:	f3bf 8f4f 	dsb	sy
 80124a2:	60bb      	str	r3, [r7, #8]
}
 80124a4:	bf00      	nop
 80124a6:	e7fe      	b.n	80124a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80124a8:	4b1e      	ldr	r3, [pc, #120]	; (8012524 <xPortStartScheduler+0x134>)
 80124aa:	681b      	ldr	r3, [r3, #0]
 80124ac:	021b      	lsls	r3, r3, #8
 80124ae:	4a1d      	ldr	r2, [pc, #116]	; (8012524 <xPortStartScheduler+0x134>)
 80124b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80124b2:	4b1c      	ldr	r3, [pc, #112]	; (8012524 <xPortStartScheduler+0x134>)
 80124b4:	681b      	ldr	r3, [r3, #0]
 80124b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80124ba:	4a1a      	ldr	r2, [pc, #104]	; (8012524 <xPortStartScheduler+0x134>)
 80124bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80124be:	687b      	ldr	r3, [r7, #4]
 80124c0:	b2da      	uxtb	r2, r3
 80124c2:	697b      	ldr	r3, [r7, #20]
 80124c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80124c6:	4b18      	ldr	r3, [pc, #96]	; (8012528 <xPortStartScheduler+0x138>)
 80124c8:	681b      	ldr	r3, [r3, #0]
 80124ca:	4a17      	ldr	r2, [pc, #92]	; (8012528 <xPortStartScheduler+0x138>)
 80124cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80124d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80124d2:	4b15      	ldr	r3, [pc, #84]	; (8012528 <xPortStartScheduler+0x138>)
 80124d4:	681b      	ldr	r3, [r3, #0]
 80124d6:	4a14      	ldr	r2, [pc, #80]	; (8012528 <xPortStartScheduler+0x138>)
 80124d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80124dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80124de:	f000 f8dd 	bl	801269c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80124e2:	4b12      	ldr	r3, [pc, #72]	; (801252c <xPortStartScheduler+0x13c>)
 80124e4:	2200      	movs	r2, #0
 80124e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80124e8:	f000 f8fc 	bl	80126e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80124ec:	4b10      	ldr	r3, [pc, #64]	; (8012530 <xPortStartScheduler+0x140>)
 80124ee:	681b      	ldr	r3, [r3, #0]
 80124f0:	4a0f      	ldr	r2, [pc, #60]	; (8012530 <xPortStartScheduler+0x140>)
 80124f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80124f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80124f8:	f7ff ff66 	bl	80123c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80124fc:	f7ff f84a 	bl	8011594 <vTaskSwitchContext>
	prvTaskExitError();
 8012500:	f7ff ff20 	bl	8012344 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8012504:	2300      	movs	r3, #0
}
 8012506:	4618      	mov	r0, r3
 8012508:	3718      	adds	r7, #24
 801250a:	46bd      	mov	sp, r7
 801250c:	bd80      	pop	{r7, pc}
 801250e:	bf00      	nop
 8012510:	e000ed00 	.word	0xe000ed00
 8012514:	410fc271 	.word	0x410fc271
 8012518:	410fc270 	.word	0x410fc270
 801251c:	e000e400 	.word	0xe000e400
 8012520:	20004d24 	.word	0x20004d24
 8012524:	20004d28 	.word	0x20004d28
 8012528:	e000ed20 	.word	0xe000ed20
 801252c:	20000340 	.word	0x20000340
 8012530:	e000ef34 	.word	0xe000ef34

08012534 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8012534:	b480      	push	{r7}
 8012536:	b083      	sub	sp, #12
 8012538:	af00      	add	r7, sp, #0
	__asm volatile
 801253a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801253e:	f383 8811 	msr	BASEPRI, r3
 8012542:	f3bf 8f6f 	isb	sy
 8012546:	f3bf 8f4f 	dsb	sy
 801254a:	607b      	str	r3, [r7, #4]
}
 801254c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801254e:	4b0f      	ldr	r3, [pc, #60]	; (801258c <vPortEnterCritical+0x58>)
 8012550:	681b      	ldr	r3, [r3, #0]
 8012552:	3301      	adds	r3, #1
 8012554:	4a0d      	ldr	r2, [pc, #52]	; (801258c <vPortEnterCritical+0x58>)
 8012556:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8012558:	4b0c      	ldr	r3, [pc, #48]	; (801258c <vPortEnterCritical+0x58>)
 801255a:	681b      	ldr	r3, [r3, #0]
 801255c:	2b01      	cmp	r3, #1
 801255e:	d10f      	bne.n	8012580 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8012560:	4b0b      	ldr	r3, [pc, #44]	; (8012590 <vPortEnterCritical+0x5c>)
 8012562:	681b      	ldr	r3, [r3, #0]
 8012564:	b2db      	uxtb	r3, r3
 8012566:	2b00      	cmp	r3, #0
 8012568:	d00a      	beq.n	8012580 <vPortEnterCritical+0x4c>
	__asm volatile
 801256a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801256e:	f383 8811 	msr	BASEPRI, r3
 8012572:	f3bf 8f6f 	isb	sy
 8012576:	f3bf 8f4f 	dsb	sy
 801257a:	603b      	str	r3, [r7, #0]
}
 801257c:	bf00      	nop
 801257e:	e7fe      	b.n	801257e <vPortEnterCritical+0x4a>
	}
}
 8012580:	bf00      	nop
 8012582:	370c      	adds	r7, #12
 8012584:	46bd      	mov	sp, r7
 8012586:	f85d 7b04 	ldr.w	r7, [sp], #4
 801258a:	4770      	bx	lr
 801258c:	20000340 	.word	0x20000340
 8012590:	e000ed04 	.word	0xe000ed04

08012594 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8012594:	b480      	push	{r7}
 8012596:	b083      	sub	sp, #12
 8012598:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801259a:	4b12      	ldr	r3, [pc, #72]	; (80125e4 <vPortExitCritical+0x50>)
 801259c:	681b      	ldr	r3, [r3, #0]
 801259e:	2b00      	cmp	r3, #0
 80125a0:	d10a      	bne.n	80125b8 <vPortExitCritical+0x24>
	__asm volatile
 80125a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125a6:	f383 8811 	msr	BASEPRI, r3
 80125aa:	f3bf 8f6f 	isb	sy
 80125ae:	f3bf 8f4f 	dsb	sy
 80125b2:	607b      	str	r3, [r7, #4]
}
 80125b4:	bf00      	nop
 80125b6:	e7fe      	b.n	80125b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80125b8:	4b0a      	ldr	r3, [pc, #40]	; (80125e4 <vPortExitCritical+0x50>)
 80125ba:	681b      	ldr	r3, [r3, #0]
 80125bc:	3b01      	subs	r3, #1
 80125be:	4a09      	ldr	r2, [pc, #36]	; (80125e4 <vPortExitCritical+0x50>)
 80125c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80125c2:	4b08      	ldr	r3, [pc, #32]	; (80125e4 <vPortExitCritical+0x50>)
 80125c4:	681b      	ldr	r3, [r3, #0]
 80125c6:	2b00      	cmp	r3, #0
 80125c8:	d105      	bne.n	80125d6 <vPortExitCritical+0x42>
 80125ca:	2300      	movs	r3, #0
 80125cc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80125ce:	683b      	ldr	r3, [r7, #0]
 80125d0:	f383 8811 	msr	BASEPRI, r3
}
 80125d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80125d6:	bf00      	nop
 80125d8:	370c      	adds	r7, #12
 80125da:	46bd      	mov	sp, r7
 80125dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125e0:	4770      	bx	lr
 80125e2:	bf00      	nop
 80125e4:	20000340 	.word	0x20000340
	...

080125f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80125f0:	f3ef 8009 	mrs	r0, PSP
 80125f4:	f3bf 8f6f 	isb	sy
 80125f8:	4b15      	ldr	r3, [pc, #84]	; (8012650 <pxCurrentTCBConst>)
 80125fa:	681a      	ldr	r2, [r3, #0]
 80125fc:	f01e 0f10 	tst.w	lr, #16
 8012600:	bf08      	it	eq
 8012602:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8012606:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801260a:	6010      	str	r0, [r2, #0]
 801260c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8012610:	f04f 0050 	mov.w	r0, #80	; 0x50
 8012614:	f380 8811 	msr	BASEPRI, r0
 8012618:	f3bf 8f4f 	dsb	sy
 801261c:	f3bf 8f6f 	isb	sy
 8012620:	f7fe ffb8 	bl	8011594 <vTaskSwitchContext>
 8012624:	f04f 0000 	mov.w	r0, #0
 8012628:	f380 8811 	msr	BASEPRI, r0
 801262c:	bc09      	pop	{r0, r3}
 801262e:	6819      	ldr	r1, [r3, #0]
 8012630:	6808      	ldr	r0, [r1, #0]
 8012632:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012636:	f01e 0f10 	tst.w	lr, #16
 801263a:	bf08      	it	eq
 801263c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8012640:	f380 8809 	msr	PSP, r0
 8012644:	f3bf 8f6f 	isb	sy
 8012648:	4770      	bx	lr
 801264a:	bf00      	nop
 801264c:	f3af 8000 	nop.w

08012650 <pxCurrentTCBConst>:
 8012650:	200046f8 	.word	0x200046f8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8012654:	bf00      	nop
 8012656:	bf00      	nop

08012658 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8012658:	b580      	push	{r7, lr}
 801265a:	b082      	sub	sp, #8
 801265c:	af00      	add	r7, sp, #0
	__asm volatile
 801265e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012662:	f383 8811 	msr	BASEPRI, r3
 8012666:	f3bf 8f6f 	isb	sy
 801266a:	f3bf 8f4f 	dsb	sy
 801266e:	607b      	str	r3, [r7, #4]
}
 8012670:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8012672:	f7fe fed5 	bl	8011420 <xTaskIncrementTick>
 8012676:	4603      	mov	r3, r0
 8012678:	2b00      	cmp	r3, #0
 801267a:	d003      	beq.n	8012684 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801267c:	4b06      	ldr	r3, [pc, #24]	; (8012698 <xPortSysTickHandler+0x40>)
 801267e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012682:	601a      	str	r2, [r3, #0]
 8012684:	2300      	movs	r3, #0
 8012686:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012688:	683b      	ldr	r3, [r7, #0]
 801268a:	f383 8811 	msr	BASEPRI, r3
}
 801268e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8012690:	bf00      	nop
 8012692:	3708      	adds	r7, #8
 8012694:	46bd      	mov	sp, r7
 8012696:	bd80      	pop	{r7, pc}
 8012698:	e000ed04 	.word	0xe000ed04

0801269c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801269c:	b480      	push	{r7}
 801269e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80126a0:	4b0b      	ldr	r3, [pc, #44]	; (80126d0 <vPortSetupTimerInterrupt+0x34>)
 80126a2:	2200      	movs	r2, #0
 80126a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80126a6:	4b0b      	ldr	r3, [pc, #44]	; (80126d4 <vPortSetupTimerInterrupt+0x38>)
 80126a8:	2200      	movs	r2, #0
 80126aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80126ac:	4b0a      	ldr	r3, [pc, #40]	; (80126d8 <vPortSetupTimerInterrupt+0x3c>)
 80126ae:	681b      	ldr	r3, [r3, #0]
 80126b0:	4a0a      	ldr	r2, [pc, #40]	; (80126dc <vPortSetupTimerInterrupt+0x40>)
 80126b2:	fba2 2303 	umull	r2, r3, r2, r3
 80126b6:	099b      	lsrs	r3, r3, #6
 80126b8:	4a09      	ldr	r2, [pc, #36]	; (80126e0 <vPortSetupTimerInterrupt+0x44>)
 80126ba:	3b01      	subs	r3, #1
 80126bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80126be:	4b04      	ldr	r3, [pc, #16]	; (80126d0 <vPortSetupTimerInterrupt+0x34>)
 80126c0:	2207      	movs	r2, #7
 80126c2:	601a      	str	r2, [r3, #0]
}
 80126c4:	bf00      	nop
 80126c6:	46bd      	mov	sp, r7
 80126c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126cc:	4770      	bx	lr
 80126ce:	bf00      	nop
 80126d0:	e000e010 	.word	0xe000e010
 80126d4:	e000e018 	.word	0xe000e018
 80126d8:	20000224 	.word	0x20000224
 80126dc:	10624dd3 	.word	0x10624dd3
 80126e0:	e000e014 	.word	0xe000e014

080126e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80126e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80126f4 <vPortEnableVFP+0x10>
 80126e8:	6801      	ldr	r1, [r0, #0]
 80126ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80126ee:	6001      	str	r1, [r0, #0]
 80126f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80126f2:	bf00      	nop
 80126f4:	e000ed88 	.word	0xe000ed88

080126f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80126f8:	b480      	push	{r7}
 80126fa:	b085      	sub	sp, #20
 80126fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80126fe:	f3ef 8305 	mrs	r3, IPSR
 8012702:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8012704:	68fb      	ldr	r3, [r7, #12]
 8012706:	2b0f      	cmp	r3, #15
 8012708:	d914      	bls.n	8012734 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801270a:	4a17      	ldr	r2, [pc, #92]	; (8012768 <vPortValidateInterruptPriority+0x70>)
 801270c:	68fb      	ldr	r3, [r7, #12]
 801270e:	4413      	add	r3, r2
 8012710:	781b      	ldrb	r3, [r3, #0]
 8012712:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8012714:	4b15      	ldr	r3, [pc, #84]	; (801276c <vPortValidateInterruptPriority+0x74>)
 8012716:	781b      	ldrb	r3, [r3, #0]
 8012718:	7afa      	ldrb	r2, [r7, #11]
 801271a:	429a      	cmp	r2, r3
 801271c:	d20a      	bcs.n	8012734 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801271e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012722:	f383 8811 	msr	BASEPRI, r3
 8012726:	f3bf 8f6f 	isb	sy
 801272a:	f3bf 8f4f 	dsb	sy
 801272e:	607b      	str	r3, [r7, #4]
}
 8012730:	bf00      	nop
 8012732:	e7fe      	b.n	8012732 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8012734:	4b0e      	ldr	r3, [pc, #56]	; (8012770 <vPortValidateInterruptPriority+0x78>)
 8012736:	681b      	ldr	r3, [r3, #0]
 8012738:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801273c:	4b0d      	ldr	r3, [pc, #52]	; (8012774 <vPortValidateInterruptPriority+0x7c>)
 801273e:	681b      	ldr	r3, [r3, #0]
 8012740:	429a      	cmp	r2, r3
 8012742:	d90a      	bls.n	801275a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8012744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012748:	f383 8811 	msr	BASEPRI, r3
 801274c:	f3bf 8f6f 	isb	sy
 8012750:	f3bf 8f4f 	dsb	sy
 8012754:	603b      	str	r3, [r7, #0]
}
 8012756:	bf00      	nop
 8012758:	e7fe      	b.n	8012758 <vPortValidateInterruptPriority+0x60>
	}
 801275a:	bf00      	nop
 801275c:	3714      	adds	r7, #20
 801275e:	46bd      	mov	sp, r7
 8012760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012764:	4770      	bx	lr
 8012766:	bf00      	nop
 8012768:	e000e3f0 	.word	0xe000e3f0
 801276c:	20004d24 	.word	0x20004d24
 8012770:	e000ed0c 	.word	0xe000ed0c
 8012774:	20004d28 	.word	0x20004d28

08012778 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8012778:	b580      	push	{r7, lr}
 801277a:	b08a      	sub	sp, #40	; 0x28
 801277c:	af00      	add	r7, sp, #0
 801277e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8012780:	2300      	movs	r3, #0
 8012782:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8012784:	f7fe fd90 	bl	80112a8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8012788:	4b5b      	ldr	r3, [pc, #364]	; (80128f8 <pvPortMalloc+0x180>)
 801278a:	681b      	ldr	r3, [r3, #0]
 801278c:	2b00      	cmp	r3, #0
 801278e:	d101      	bne.n	8012794 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8012790:	f000 f920 	bl	80129d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8012794:	4b59      	ldr	r3, [pc, #356]	; (80128fc <pvPortMalloc+0x184>)
 8012796:	681a      	ldr	r2, [r3, #0]
 8012798:	687b      	ldr	r3, [r7, #4]
 801279a:	4013      	ands	r3, r2
 801279c:	2b00      	cmp	r3, #0
 801279e:	f040 8093 	bne.w	80128c8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80127a2:	687b      	ldr	r3, [r7, #4]
 80127a4:	2b00      	cmp	r3, #0
 80127a6:	d01d      	beq.n	80127e4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80127a8:	2208      	movs	r2, #8
 80127aa:	687b      	ldr	r3, [r7, #4]
 80127ac:	4413      	add	r3, r2
 80127ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	f003 0307 	and.w	r3, r3, #7
 80127b6:	2b00      	cmp	r3, #0
 80127b8:	d014      	beq.n	80127e4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80127ba:	687b      	ldr	r3, [r7, #4]
 80127bc:	f023 0307 	bic.w	r3, r3, #7
 80127c0:	3308      	adds	r3, #8
 80127c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80127c4:	687b      	ldr	r3, [r7, #4]
 80127c6:	f003 0307 	and.w	r3, r3, #7
 80127ca:	2b00      	cmp	r3, #0
 80127cc:	d00a      	beq.n	80127e4 <pvPortMalloc+0x6c>
	__asm volatile
 80127ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80127d2:	f383 8811 	msr	BASEPRI, r3
 80127d6:	f3bf 8f6f 	isb	sy
 80127da:	f3bf 8f4f 	dsb	sy
 80127de:	617b      	str	r3, [r7, #20]
}
 80127e0:	bf00      	nop
 80127e2:	e7fe      	b.n	80127e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80127e4:	687b      	ldr	r3, [r7, #4]
 80127e6:	2b00      	cmp	r3, #0
 80127e8:	d06e      	beq.n	80128c8 <pvPortMalloc+0x150>
 80127ea:	4b45      	ldr	r3, [pc, #276]	; (8012900 <pvPortMalloc+0x188>)
 80127ec:	681b      	ldr	r3, [r3, #0]
 80127ee:	687a      	ldr	r2, [r7, #4]
 80127f0:	429a      	cmp	r2, r3
 80127f2:	d869      	bhi.n	80128c8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80127f4:	4b43      	ldr	r3, [pc, #268]	; (8012904 <pvPortMalloc+0x18c>)
 80127f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80127f8:	4b42      	ldr	r3, [pc, #264]	; (8012904 <pvPortMalloc+0x18c>)
 80127fa:	681b      	ldr	r3, [r3, #0]
 80127fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80127fe:	e004      	b.n	801280a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8012800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012802:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8012804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012806:	681b      	ldr	r3, [r3, #0]
 8012808:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801280a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801280c:	685b      	ldr	r3, [r3, #4]
 801280e:	687a      	ldr	r2, [r7, #4]
 8012810:	429a      	cmp	r2, r3
 8012812:	d903      	bls.n	801281c <pvPortMalloc+0xa4>
 8012814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012816:	681b      	ldr	r3, [r3, #0]
 8012818:	2b00      	cmp	r3, #0
 801281a:	d1f1      	bne.n	8012800 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801281c:	4b36      	ldr	r3, [pc, #216]	; (80128f8 <pvPortMalloc+0x180>)
 801281e:	681b      	ldr	r3, [r3, #0]
 8012820:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012822:	429a      	cmp	r2, r3
 8012824:	d050      	beq.n	80128c8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8012826:	6a3b      	ldr	r3, [r7, #32]
 8012828:	681b      	ldr	r3, [r3, #0]
 801282a:	2208      	movs	r2, #8
 801282c:	4413      	add	r3, r2
 801282e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8012830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012832:	681a      	ldr	r2, [r3, #0]
 8012834:	6a3b      	ldr	r3, [r7, #32]
 8012836:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8012838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801283a:	685a      	ldr	r2, [r3, #4]
 801283c:	687b      	ldr	r3, [r7, #4]
 801283e:	1ad2      	subs	r2, r2, r3
 8012840:	2308      	movs	r3, #8
 8012842:	005b      	lsls	r3, r3, #1
 8012844:	429a      	cmp	r2, r3
 8012846:	d91f      	bls.n	8012888 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8012848:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801284a:	687b      	ldr	r3, [r7, #4]
 801284c:	4413      	add	r3, r2
 801284e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012850:	69bb      	ldr	r3, [r7, #24]
 8012852:	f003 0307 	and.w	r3, r3, #7
 8012856:	2b00      	cmp	r3, #0
 8012858:	d00a      	beq.n	8012870 <pvPortMalloc+0xf8>
	__asm volatile
 801285a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801285e:	f383 8811 	msr	BASEPRI, r3
 8012862:	f3bf 8f6f 	isb	sy
 8012866:	f3bf 8f4f 	dsb	sy
 801286a:	613b      	str	r3, [r7, #16]
}
 801286c:	bf00      	nop
 801286e:	e7fe      	b.n	801286e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8012870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012872:	685a      	ldr	r2, [r3, #4]
 8012874:	687b      	ldr	r3, [r7, #4]
 8012876:	1ad2      	subs	r2, r2, r3
 8012878:	69bb      	ldr	r3, [r7, #24]
 801287a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801287c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801287e:	687a      	ldr	r2, [r7, #4]
 8012880:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8012882:	69b8      	ldr	r0, [r7, #24]
 8012884:	f000 f908 	bl	8012a98 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8012888:	4b1d      	ldr	r3, [pc, #116]	; (8012900 <pvPortMalloc+0x188>)
 801288a:	681a      	ldr	r2, [r3, #0]
 801288c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801288e:	685b      	ldr	r3, [r3, #4]
 8012890:	1ad3      	subs	r3, r2, r3
 8012892:	4a1b      	ldr	r2, [pc, #108]	; (8012900 <pvPortMalloc+0x188>)
 8012894:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8012896:	4b1a      	ldr	r3, [pc, #104]	; (8012900 <pvPortMalloc+0x188>)
 8012898:	681a      	ldr	r2, [r3, #0]
 801289a:	4b1b      	ldr	r3, [pc, #108]	; (8012908 <pvPortMalloc+0x190>)
 801289c:	681b      	ldr	r3, [r3, #0]
 801289e:	429a      	cmp	r2, r3
 80128a0:	d203      	bcs.n	80128aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80128a2:	4b17      	ldr	r3, [pc, #92]	; (8012900 <pvPortMalloc+0x188>)
 80128a4:	681b      	ldr	r3, [r3, #0]
 80128a6:	4a18      	ldr	r2, [pc, #96]	; (8012908 <pvPortMalloc+0x190>)
 80128a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80128aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128ac:	685a      	ldr	r2, [r3, #4]
 80128ae:	4b13      	ldr	r3, [pc, #76]	; (80128fc <pvPortMalloc+0x184>)
 80128b0:	681b      	ldr	r3, [r3, #0]
 80128b2:	431a      	orrs	r2, r3
 80128b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80128b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128ba:	2200      	movs	r2, #0
 80128bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80128be:	4b13      	ldr	r3, [pc, #76]	; (801290c <pvPortMalloc+0x194>)
 80128c0:	681b      	ldr	r3, [r3, #0]
 80128c2:	3301      	adds	r3, #1
 80128c4:	4a11      	ldr	r2, [pc, #68]	; (801290c <pvPortMalloc+0x194>)
 80128c6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80128c8:	f7fe fcfc 	bl	80112c4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80128cc:	69fb      	ldr	r3, [r7, #28]
 80128ce:	f003 0307 	and.w	r3, r3, #7
 80128d2:	2b00      	cmp	r3, #0
 80128d4:	d00a      	beq.n	80128ec <pvPortMalloc+0x174>
	__asm volatile
 80128d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80128da:	f383 8811 	msr	BASEPRI, r3
 80128de:	f3bf 8f6f 	isb	sy
 80128e2:	f3bf 8f4f 	dsb	sy
 80128e6:	60fb      	str	r3, [r7, #12]
}
 80128e8:	bf00      	nop
 80128ea:	e7fe      	b.n	80128ea <pvPortMalloc+0x172>
	return pvReturn;
 80128ec:	69fb      	ldr	r3, [r7, #28]
}
 80128ee:	4618      	mov	r0, r3
 80128f0:	3728      	adds	r7, #40	; 0x28
 80128f2:	46bd      	mov	sp, r7
 80128f4:	bd80      	pop	{r7, pc}
 80128f6:	bf00      	nop
 80128f8:	20007c14 	.word	0x20007c14
 80128fc:	20007c28 	.word	0x20007c28
 8012900:	20007c18 	.word	0x20007c18
 8012904:	20007c0c 	.word	0x20007c0c
 8012908:	20007c1c 	.word	0x20007c1c
 801290c:	20007c20 	.word	0x20007c20

08012910 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8012910:	b580      	push	{r7, lr}
 8012912:	b086      	sub	sp, #24
 8012914:	af00      	add	r7, sp, #0
 8012916:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8012918:	687b      	ldr	r3, [r7, #4]
 801291a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801291c:	687b      	ldr	r3, [r7, #4]
 801291e:	2b00      	cmp	r3, #0
 8012920:	d04d      	beq.n	80129be <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8012922:	2308      	movs	r3, #8
 8012924:	425b      	negs	r3, r3
 8012926:	697a      	ldr	r2, [r7, #20]
 8012928:	4413      	add	r3, r2
 801292a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801292c:	697b      	ldr	r3, [r7, #20]
 801292e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8012930:	693b      	ldr	r3, [r7, #16]
 8012932:	685a      	ldr	r2, [r3, #4]
 8012934:	4b24      	ldr	r3, [pc, #144]	; (80129c8 <vPortFree+0xb8>)
 8012936:	681b      	ldr	r3, [r3, #0]
 8012938:	4013      	ands	r3, r2
 801293a:	2b00      	cmp	r3, #0
 801293c:	d10a      	bne.n	8012954 <vPortFree+0x44>
	__asm volatile
 801293e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012942:	f383 8811 	msr	BASEPRI, r3
 8012946:	f3bf 8f6f 	isb	sy
 801294a:	f3bf 8f4f 	dsb	sy
 801294e:	60fb      	str	r3, [r7, #12]
}
 8012950:	bf00      	nop
 8012952:	e7fe      	b.n	8012952 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8012954:	693b      	ldr	r3, [r7, #16]
 8012956:	681b      	ldr	r3, [r3, #0]
 8012958:	2b00      	cmp	r3, #0
 801295a:	d00a      	beq.n	8012972 <vPortFree+0x62>
	__asm volatile
 801295c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012960:	f383 8811 	msr	BASEPRI, r3
 8012964:	f3bf 8f6f 	isb	sy
 8012968:	f3bf 8f4f 	dsb	sy
 801296c:	60bb      	str	r3, [r7, #8]
}
 801296e:	bf00      	nop
 8012970:	e7fe      	b.n	8012970 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8012972:	693b      	ldr	r3, [r7, #16]
 8012974:	685a      	ldr	r2, [r3, #4]
 8012976:	4b14      	ldr	r3, [pc, #80]	; (80129c8 <vPortFree+0xb8>)
 8012978:	681b      	ldr	r3, [r3, #0]
 801297a:	4013      	ands	r3, r2
 801297c:	2b00      	cmp	r3, #0
 801297e:	d01e      	beq.n	80129be <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8012980:	693b      	ldr	r3, [r7, #16]
 8012982:	681b      	ldr	r3, [r3, #0]
 8012984:	2b00      	cmp	r3, #0
 8012986:	d11a      	bne.n	80129be <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8012988:	693b      	ldr	r3, [r7, #16]
 801298a:	685a      	ldr	r2, [r3, #4]
 801298c:	4b0e      	ldr	r3, [pc, #56]	; (80129c8 <vPortFree+0xb8>)
 801298e:	681b      	ldr	r3, [r3, #0]
 8012990:	43db      	mvns	r3, r3
 8012992:	401a      	ands	r2, r3
 8012994:	693b      	ldr	r3, [r7, #16]
 8012996:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8012998:	f7fe fc86 	bl	80112a8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801299c:	693b      	ldr	r3, [r7, #16]
 801299e:	685a      	ldr	r2, [r3, #4]
 80129a0:	4b0a      	ldr	r3, [pc, #40]	; (80129cc <vPortFree+0xbc>)
 80129a2:	681b      	ldr	r3, [r3, #0]
 80129a4:	4413      	add	r3, r2
 80129a6:	4a09      	ldr	r2, [pc, #36]	; (80129cc <vPortFree+0xbc>)
 80129a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80129aa:	6938      	ldr	r0, [r7, #16]
 80129ac:	f000 f874 	bl	8012a98 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80129b0:	4b07      	ldr	r3, [pc, #28]	; (80129d0 <vPortFree+0xc0>)
 80129b2:	681b      	ldr	r3, [r3, #0]
 80129b4:	3301      	adds	r3, #1
 80129b6:	4a06      	ldr	r2, [pc, #24]	; (80129d0 <vPortFree+0xc0>)
 80129b8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80129ba:	f7fe fc83 	bl	80112c4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80129be:	bf00      	nop
 80129c0:	3718      	adds	r7, #24
 80129c2:	46bd      	mov	sp, r7
 80129c4:	bd80      	pop	{r7, pc}
 80129c6:	bf00      	nop
 80129c8:	20007c28 	.word	0x20007c28
 80129cc:	20007c18 	.word	0x20007c18
 80129d0:	20007c24 	.word	0x20007c24

080129d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80129d4:	b480      	push	{r7}
 80129d6:	b085      	sub	sp, #20
 80129d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80129da:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 80129de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80129e0:	4b27      	ldr	r3, [pc, #156]	; (8012a80 <prvHeapInit+0xac>)
 80129e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80129e4:	68fb      	ldr	r3, [r7, #12]
 80129e6:	f003 0307 	and.w	r3, r3, #7
 80129ea:	2b00      	cmp	r3, #0
 80129ec:	d00c      	beq.n	8012a08 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80129ee:	68fb      	ldr	r3, [r7, #12]
 80129f0:	3307      	adds	r3, #7
 80129f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80129f4:	68fb      	ldr	r3, [r7, #12]
 80129f6:	f023 0307 	bic.w	r3, r3, #7
 80129fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80129fc:	68ba      	ldr	r2, [r7, #8]
 80129fe:	68fb      	ldr	r3, [r7, #12]
 8012a00:	1ad3      	subs	r3, r2, r3
 8012a02:	4a1f      	ldr	r2, [pc, #124]	; (8012a80 <prvHeapInit+0xac>)
 8012a04:	4413      	add	r3, r2
 8012a06:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8012a08:	68fb      	ldr	r3, [r7, #12]
 8012a0a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8012a0c:	4a1d      	ldr	r2, [pc, #116]	; (8012a84 <prvHeapInit+0xb0>)
 8012a0e:	687b      	ldr	r3, [r7, #4]
 8012a10:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8012a12:	4b1c      	ldr	r3, [pc, #112]	; (8012a84 <prvHeapInit+0xb0>)
 8012a14:	2200      	movs	r2, #0
 8012a16:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	68ba      	ldr	r2, [r7, #8]
 8012a1c:	4413      	add	r3, r2
 8012a1e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8012a20:	2208      	movs	r2, #8
 8012a22:	68fb      	ldr	r3, [r7, #12]
 8012a24:	1a9b      	subs	r3, r3, r2
 8012a26:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012a28:	68fb      	ldr	r3, [r7, #12]
 8012a2a:	f023 0307 	bic.w	r3, r3, #7
 8012a2e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8012a30:	68fb      	ldr	r3, [r7, #12]
 8012a32:	4a15      	ldr	r2, [pc, #84]	; (8012a88 <prvHeapInit+0xb4>)
 8012a34:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8012a36:	4b14      	ldr	r3, [pc, #80]	; (8012a88 <prvHeapInit+0xb4>)
 8012a38:	681b      	ldr	r3, [r3, #0]
 8012a3a:	2200      	movs	r2, #0
 8012a3c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8012a3e:	4b12      	ldr	r3, [pc, #72]	; (8012a88 <prvHeapInit+0xb4>)
 8012a40:	681b      	ldr	r3, [r3, #0]
 8012a42:	2200      	movs	r2, #0
 8012a44:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8012a46:	687b      	ldr	r3, [r7, #4]
 8012a48:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8012a4a:	683b      	ldr	r3, [r7, #0]
 8012a4c:	68fa      	ldr	r2, [r7, #12]
 8012a4e:	1ad2      	subs	r2, r2, r3
 8012a50:	683b      	ldr	r3, [r7, #0]
 8012a52:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8012a54:	4b0c      	ldr	r3, [pc, #48]	; (8012a88 <prvHeapInit+0xb4>)
 8012a56:	681a      	ldr	r2, [r3, #0]
 8012a58:	683b      	ldr	r3, [r7, #0]
 8012a5a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012a5c:	683b      	ldr	r3, [r7, #0]
 8012a5e:	685b      	ldr	r3, [r3, #4]
 8012a60:	4a0a      	ldr	r2, [pc, #40]	; (8012a8c <prvHeapInit+0xb8>)
 8012a62:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012a64:	683b      	ldr	r3, [r7, #0]
 8012a66:	685b      	ldr	r3, [r3, #4]
 8012a68:	4a09      	ldr	r2, [pc, #36]	; (8012a90 <prvHeapInit+0xbc>)
 8012a6a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8012a6c:	4b09      	ldr	r3, [pc, #36]	; (8012a94 <prvHeapInit+0xc0>)
 8012a6e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8012a72:	601a      	str	r2, [r3, #0]
}
 8012a74:	bf00      	nop
 8012a76:	3714      	adds	r7, #20
 8012a78:	46bd      	mov	sp, r7
 8012a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a7e:	4770      	bx	lr
 8012a80:	20004d2c 	.word	0x20004d2c
 8012a84:	20007c0c 	.word	0x20007c0c
 8012a88:	20007c14 	.word	0x20007c14
 8012a8c:	20007c1c 	.word	0x20007c1c
 8012a90:	20007c18 	.word	0x20007c18
 8012a94:	20007c28 	.word	0x20007c28

08012a98 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8012a98:	b480      	push	{r7}
 8012a9a:	b085      	sub	sp, #20
 8012a9c:	af00      	add	r7, sp, #0
 8012a9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8012aa0:	4b28      	ldr	r3, [pc, #160]	; (8012b44 <prvInsertBlockIntoFreeList+0xac>)
 8012aa2:	60fb      	str	r3, [r7, #12]
 8012aa4:	e002      	b.n	8012aac <prvInsertBlockIntoFreeList+0x14>
 8012aa6:	68fb      	ldr	r3, [r7, #12]
 8012aa8:	681b      	ldr	r3, [r3, #0]
 8012aaa:	60fb      	str	r3, [r7, #12]
 8012aac:	68fb      	ldr	r3, [r7, #12]
 8012aae:	681b      	ldr	r3, [r3, #0]
 8012ab0:	687a      	ldr	r2, [r7, #4]
 8012ab2:	429a      	cmp	r2, r3
 8012ab4:	d8f7      	bhi.n	8012aa6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8012ab6:	68fb      	ldr	r3, [r7, #12]
 8012ab8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8012aba:	68fb      	ldr	r3, [r7, #12]
 8012abc:	685b      	ldr	r3, [r3, #4]
 8012abe:	68ba      	ldr	r2, [r7, #8]
 8012ac0:	4413      	add	r3, r2
 8012ac2:	687a      	ldr	r2, [r7, #4]
 8012ac4:	429a      	cmp	r2, r3
 8012ac6:	d108      	bne.n	8012ada <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8012ac8:	68fb      	ldr	r3, [r7, #12]
 8012aca:	685a      	ldr	r2, [r3, #4]
 8012acc:	687b      	ldr	r3, [r7, #4]
 8012ace:	685b      	ldr	r3, [r3, #4]
 8012ad0:	441a      	add	r2, r3
 8012ad2:	68fb      	ldr	r3, [r7, #12]
 8012ad4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8012ad6:	68fb      	ldr	r3, [r7, #12]
 8012ad8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8012ada:	687b      	ldr	r3, [r7, #4]
 8012adc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8012ade:	687b      	ldr	r3, [r7, #4]
 8012ae0:	685b      	ldr	r3, [r3, #4]
 8012ae2:	68ba      	ldr	r2, [r7, #8]
 8012ae4:	441a      	add	r2, r3
 8012ae6:	68fb      	ldr	r3, [r7, #12]
 8012ae8:	681b      	ldr	r3, [r3, #0]
 8012aea:	429a      	cmp	r2, r3
 8012aec:	d118      	bne.n	8012b20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8012aee:	68fb      	ldr	r3, [r7, #12]
 8012af0:	681a      	ldr	r2, [r3, #0]
 8012af2:	4b15      	ldr	r3, [pc, #84]	; (8012b48 <prvInsertBlockIntoFreeList+0xb0>)
 8012af4:	681b      	ldr	r3, [r3, #0]
 8012af6:	429a      	cmp	r2, r3
 8012af8:	d00d      	beq.n	8012b16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8012afa:	687b      	ldr	r3, [r7, #4]
 8012afc:	685a      	ldr	r2, [r3, #4]
 8012afe:	68fb      	ldr	r3, [r7, #12]
 8012b00:	681b      	ldr	r3, [r3, #0]
 8012b02:	685b      	ldr	r3, [r3, #4]
 8012b04:	441a      	add	r2, r3
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8012b0a:	68fb      	ldr	r3, [r7, #12]
 8012b0c:	681b      	ldr	r3, [r3, #0]
 8012b0e:	681a      	ldr	r2, [r3, #0]
 8012b10:	687b      	ldr	r3, [r7, #4]
 8012b12:	601a      	str	r2, [r3, #0]
 8012b14:	e008      	b.n	8012b28 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8012b16:	4b0c      	ldr	r3, [pc, #48]	; (8012b48 <prvInsertBlockIntoFreeList+0xb0>)
 8012b18:	681a      	ldr	r2, [r3, #0]
 8012b1a:	687b      	ldr	r3, [r7, #4]
 8012b1c:	601a      	str	r2, [r3, #0]
 8012b1e:	e003      	b.n	8012b28 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8012b20:	68fb      	ldr	r3, [r7, #12]
 8012b22:	681a      	ldr	r2, [r3, #0]
 8012b24:	687b      	ldr	r3, [r7, #4]
 8012b26:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8012b28:	68fa      	ldr	r2, [r7, #12]
 8012b2a:	687b      	ldr	r3, [r7, #4]
 8012b2c:	429a      	cmp	r2, r3
 8012b2e:	d002      	beq.n	8012b36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8012b30:	68fb      	ldr	r3, [r7, #12]
 8012b32:	687a      	ldr	r2, [r7, #4]
 8012b34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012b36:	bf00      	nop
 8012b38:	3714      	adds	r7, #20
 8012b3a:	46bd      	mov	sp, r7
 8012b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b40:	4770      	bx	lr
 8012b42:	bf00      	nop
 8012b44:	20007c0c 	.word	0x20007c0c
 8012b48:	20007c14 	.word	0x20007c14

08012b4c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8012b4c:	b580      	push	{r7, lr}
 8012b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8012b50:	2200      	movs	r2, #0
 8012b52:	4912      	ldr	r1, [pc, #72]	; (8012b9c <MX_USB_DEVICE_Init+0x50>)
 8012b54:	4812      	ldr	r0, [pc, #72]	; (8012ba0 <MX_USB_DEVICE_Init+0x54>)
 8012b56:	f7fc f8a7 	bl	800eca8 <USBD_Init>
 8012b5a:	4603      	mov	r3, r0
 8012b5c:	2b00      	cmp	r3, #0
 8012b5e:	d001      	beq.n	8012b64 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8012b60:	f7f1 f8fc 	bl	8003d5c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8012b64:	490f      	ldr	r1, [pc, #60]	; (8012ba4 <MX_USB_DEVICE_Init+0x58>)
 8012b66:	480e      	ldr	r0, [pc, #56]	; (8012ba0 <MX_USB_DEVICE_Init+0x54>)
 8012b68:	f7fc f8ce 	bl	800ed08 <USBD_RegisterClass>
 8012b6c:	4603      	mov	r3, r0
 8012b6e:	2b00      	cmp	r3, #0
 8012b70:	d001      	beq.n	8012b76 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8012b72:	f7f1 f8f3 	bl	8003d5c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8012b76:	490c      	ldr	r1, [pc, #48]	; (8012ba8 <MX_USB_DEVICE_Init+0x5c>)
 8012b78:	4809      	ldr	r0, [pc, #36]	; (8012ba0 <MX_USB_DEVICE_Init+0x54>)
 8012b7a:	f7fb ffef 	bl	800eb5c <USBD_CDC_RegisterInterface>
 8012b7e:	4603      	mov	r3, r0
 8012b80:	2b00      	cmp	r3, #0
 8012b82:	d001      	beq.n	8012b88 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8012b84:	f7f1 f8ea 	bl	8003d5c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8012b88:	4805      	ldr	r0, [pc, #20]	; (8012ba0 <MX_USB_DEVICE_Init+0x54>)
 8012b8a:	f7fc f8e4 	bl	800ed56 <USBD_Start>
 8012b8e:	4603      	mov	r3, r0
 8012b90:	2b00      	cmp	r3, #0
 8012b92:	d001      	beq.n	8012b98 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8012b94:	f7f1 f8e2 	bl	8003d5c <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8012b98:	bf00      	nop
 8012b9a:	bd80      	pop	{r7, pc}
 8012b9c:	20000358 	.word	0x20000358
 8012ba0:	20007c2c 	.word	0x20007c2c
 8012ba4:	2000023c 	.word	0x2000023c
 8012ba8:	20000344 	.word	0x20000344

08012bac <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8012bac:	b580      	push	{r7, lr}
 8012bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8012bb0:	2200      	movs	r2, #0
 8012bb2:	4905      	ldr	r1, [pc, #20]	; (8012bc8 <CDC_Init_FS+0x1c>)
 8012bb4:	4805      	ldr	r0, [pc, #20]	; (8012bcc <CDC_Init_FS+0x20>)
 8012bb6:	f7fb ffe6 	bl	800eb86 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8012bba:	4905      	ldr	r1, [pc, #20]	; (8012bd0 <CDC_Init_FS+0x24>)
 8012bbc:	4803      	ldr	r0, [pc, #12]	; (8012bcc <CDC_Init_FS+0x20>)
 8012bbe:	f7fc f800 	bl	800ebc2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8012bc2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8012bc4:	4618      	mov	r0, r3
 8012bc6:	bd80      	pop	{r7, pc}
 8012bc8:	200086fc 	.word	0x200086fc
 8012bcc:	20007c2c 	.word	0x20007c2c
 8012bd0:	20007efc 	.word	0x20007efc

08012bd4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8012bd4:	b480      	push	{r7}
 8012bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8012bd8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8012bda:	4618      	mov	r0, r3
 8012bdc:	46bd      	mov	sp, r7
 8012bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012be2:	4770      	bx	lr

08012be4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8012be4:	b480      	push	{r7}
 8012be6:	b083      	sub	sp, #12
 8012be8:	af00      	add	r7, sp, #0
 8012bea:	4603      	mov	r3, r0
 8012bec:	6039      	str	r1, [r7, #0]
 8012bee:	71fb      	strb	r3, [r7, #7]
 8012bf0:	4613      	mov	r3, r2
 8012bf2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8012bf4:	79fb      	ldrb	r3, [r7, #7]
 8012bf6:	2b23      	cmp	r3, #35	; 0x23
 8012bf8:	d84a      	bhi.n	8012c90 <CDC_Control_FS+0xac>
 8012bfa:	a201      	add	r2, pc, #4	; (adr r2, 8012c00 <CDC_Control_FS+0x1c>)
 8012bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012c00:	08012c91 	.word	0x08012c91
 8012c04:	08012c91 	.word	0x08012c91
 8012c08:	08012c91 	.word	0x08012c91
 8012c0c:	08012c91 	.word	0x08012c91
 8012c10:	08012c91 	.word	0x08012c91
 8012c14:	08012c91 	.word	0x08012c91
 8012c18:	08012c91 	.word	0x08012c91
 8012c1c:	08012c91 	.word	0x08012c91
 8012c20:	08012c91 	.word	0x08012c91
 8012c24:	08012c91 	.word	0x08012c91
 8012c28:	08012c91 	.word	0x08012c91
 8012c2c:	08012c91 	.word	0x08012c91
 8012c30:	08012c91 	.word	0x08012c91
 8012c34:	08012c91 	.word	0x08012c91
 8012c38:	08012c91 	.word	0x08012c91
 8012c3c:	08012c91 	.word	0x08012c91
 8012c40:	08012c91 	.word	0x08012c91
 8012c44:	08012c91 	.word	0x08012c91
 8012c48:	08012c91 	.word	0x08012c91
 8012c4c:	08012c91 	.word	0x08012c91
 8012c50:	08012c91 	.word	0x08012c91
 8012c54:	08012c91 	.word	0x08012c91
 8012c58:	08012c91 	.word	0x08012c91
 8012c5c:	08012c91 	.word	0x08012c91
 8012c60:	08012c91 	.word	0x08012c91
 8012c64:	08012c91 	.word	0x08012c91
 8012c68:	08012c91 	.word	0x08012c91
 8012c6c:	08012c91 	.word	0x08012c91
 8012c70:	08012c91 	.word	0x08012c91
 8012c74:	08012c91 	.word	0x08012c91
 8012c78:	08012c91 	.word	0x08012c91
 8012c7c:	08012c91 	.word	0x08012c91
 8012c80:	08012c91 	.word	0x08012c91
 8012c84:	08012c91 	.word	0x08012c91
 8012c88:	08012c91 	.word	0x08012c91
 8012c8c:	08012c91 	.word	0x08012c91
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8012c90:	bf00      	nop
  }

  return (USBD_OK);
 8012c92:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8012c94:	4618      	mov	r0, r3
 8012c96:	370c      	adds	r7, #12
 8012c98:	46bd      	mov	sp, r7
 8012c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c9e:	4770      	bx	lr

08012ca0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8012ca0:	b580      	push	{r7, lr}
 8012ca2:	b082      	sub	sp, #8
 8012ca4:	af00      	add	r7, sp, #0
 8012ca6:	6078      	str	r0, [r7, #4]
 8012ca8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  WriteUSBDataToRingBuffer(Buf, *Len);
 8012caa:	683b      	ldr	r3, [r7, #0]
 8012cac:	681b      	ldr	r3, [r3, #0]
 8012cae:	4619      	mov	r1, r3
 8012cb0:	6878      	ldr	r0, [r7, #4]
 8012cb2:	f000 f847 	bl	8012d44 <WriteUSBDataToRingBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8012cb6:	6879      	ldr	r1, [r7, #4]
 8012cb8:	4805      	ldr	r0, [pc, #20]	; (8012cd0 <CDC_Receive_FS+0x30>)
 8012cba:	f7fb ff82 	bl	800ebc2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8012cbe:	4804      	ldr	r0, [pc, #16]	; (8012cd0 <CDC_Receive_FS+0x30>)
 8012cc0:	f7fb ffc8 	bl	800ec54 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8012cc4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8012cc6:	4618      	mov	r0, r3
 8012cc8:	3708      	adds	r7, #8
 8012cca:	46bd      	mov	sp, r7
 8012ccc:	bd80      	pop	{r7, pc}
 8012cce:	bf00      	nop
 8012cd0:	20007c2c 	.word	0x20007c2c

08012cd4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8012cd4:	b580      	push	{r7, lr}
 8012cd6:	b084      	sub	sp, #16
 8012cd8:	af00      	add	r7, sp, #0
 8012cda:	6078      	str	r0, [r7, #4]
 8012cdc:	460b      	mov	r3, r1
 8012cde:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8012ce0:	2300      	movs	r3, #0
 8012ce2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8012ce4:	4b0d      	ldr	r3, [pc, #52]	; (8012d1c <CDC_Transmit_FS+0x48>)
 8012ce6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012cea:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8012cec:	68bb      	ldr	r3, [r7, #8]
 8012cee:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8012cf2:	2b00      	cmp	r3, #0
 8012cf4:	d001      	beq.n	8012cfa <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8012cf6:	2301      	movs	r3, #1
 8012cf8:	e00b      	b.n	8012d12 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8012cfa:	887b      	ldrh	r3, [r7, #2]
 8012cfc:	461a      	mov	r2, r3
 8012cfe:	6879      	ldr	r1, [r7, #4]
 8012d00:	4806      	ldr	r0, [pc, #24]	; (8012d1c <CDC_Transmit_FS+0x48>)
 8012d02:	f7fb ff40 	bl	800eb86 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8012d06:	4805      	ldr	r0, [pc, #20]	; (8012d1c <CDC_Transmit_FS+0x48>)
 8012d08:	f7fb ff74 	bl	800ebf4 <USBD_CDC_TransmitPacket>
 8012d0c:	4603      	mov	r3, r0
 8012d0e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8012d10:	7bfb      	ldrb	r3, [r7, #15]
}
 8012d12:	4618      	mov	r0, r3
 8012d14:	3710      	adds	r7, #16
 8012d16:	46bd      	mov	sp, r7
 8012d18:	bd80      	pop	{r7, pc}
 8012d1a:	bf00      	nop
 8012d1c:	20007c2c 	.word	0x20007c2c

08012d20 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8012d20:	b480      	push	{r7}
 8012d22:	b087      	sub	sp, #28
 8012d24:	af00      	add	r7, sp, #0
 8012d26:	60f8      	str	r0, [r7, #12]
 8012d28:	60b9      	str	r1, [r7, #8]
 8012d2a:	4613      	mov	r3, r2
 8012d2c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8012d2e:	2300      	movs	r3, #0
 8012d30:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8012d32:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012d36:	4618      	mov	r0, r3
 8012d38:	371c      	adds	r7, #28
 8012d3a:	46bd      	mov	sp, r7
 8012d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d40:	4770      	bx	lr
	...

08012d44 <WriteUSBDataToRingBuffer>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void WriteUSBDataToRingBuffer(uint8_t *Buf, uint32_t Len) {
 8012d44:	b580      	push	{r7, lr}
 8012d46:	b084      	sub	sp, #16
 8012d48:	af00      	add	r7, sp, #0
 8012d4a:	6078      	str	r0, [r7, #4]
 8012d4c:	6039      	str	r1, [r7, #0]
    for(uint32_t i = 0; i < Len; i++) {
 8012d4e:	2300      	movs	r3, #0
 8012d50:	60fb      	str	r3, [r7, #12]
 8012d52:	e00a      	b.n	8012d6a <WriteUSBDataToRingBuffer+0x26>
        RB_Write(&USB_Receive_Buffer, Buf[i]);
 8012d54:	687a      	ldr	r2, [r7, #4]
 8012d56:	68fb      	ldr	r3, [r7, #12]
 8012d58:	4413      	add	r3, r2
 8012d5a:	781b      	ldrb	r3, [r3, #0]
 8012d5c:	4619      	mov	r1, r3
 8012d5e:	4807      	ldr	r0, [pc, #28]	; (8012d7c <WriteUSBDataToRingBuffer+0x38>)
 8012d60:	f7f1 f884 	bl	8003e6c <RB_Write>
    for(uint32_t i = 0; i < Len; i++) {
 8012d64:	68fb      	ldr	r3, [r7, #12]
 8012d66:	3301      	adds	r3, #1
 8012d68:	60fb      	str	r3, [r7, #12]
 8012d6a:	68fa      	ldr	r2, [r7, #12]
 8012d6c:	683b      	ldr	r3, [r7, #0]
 8012d6e:	429a      	cmp	r2, r3
 8012d70:	d3f0      	bcc.n	8012d54 <WriteUSBDataToRingBuffer+0x10>
    }
}
 8012d72:	bf00      	nop
 8012d74:	bf00      	nop
 8012d76:	3710      	adds	r7, #16
 8012d78:	46bd      	mov	sp, r7
 8012d7a:	bd80      	pop	{r7, pc}
 8012d7c:	200005a4 	.word	0x200005a4

08012d80 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012d80:	b480      	push	{r7}
 8012d82:	b083      	sub	sp, #12
 8012d84:	af00      	add	r7, sp, #0
 8012d86:	4603      	mov	r3, r0
 8012d88:	6039      	str	r1, [r7, #0]
 8012d8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8012d8c:	683b      	ldr	r3, [r7, #0]
 8012d8e:	2212      	movs	r2, #18
 8012d90:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8012d92:	4b03      	ldr	r3, [pc, #12]	; (8012da0 <USBD_FS_DeviceDescriptor+0x20>)
}
 8012d94:	4618      	mov	r0, r3
 8012d96:	370c      	adds	r7, #12
 8012d98:	46bd      	mov	sp, r7
 8012d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d9e:	4770      	bx	lr
 8012da0:	20000378 	.word	0x20000378

08012da4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012da4:	b480      	push	{r7}
 8012da6:	b083      	sub	sp, #12
 8012da8:	af00      	add	r7, sp, #0
 8012daa:	4603      	mov	r3, r0
 8012dac:	6039      	str	r1, [r7, #0]
 8012dae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8012db0:	683b      	ldr	r3, [r7, #0]
 8012db2:	2204      	movs	r2, #4
 8012db4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8012db6:	4b03      	ldr	r3, [pc, #12]	; (8012dc4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8012db8:	4618      	mov	r0, r3
 8012dba:	370c      	adds	r7, #12
 8012dbc:	46bd      	mov	sp, r7
 8012dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dc2:	4770      	bx	lr
 8012dc4:	20000398 	.word	0x20000398

08012dc8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012dc8:	b580      	push	{r7, lr}
 8012dca:	b082      	sub	sp, #8
 8012dcc:	af00      	add	r7, sp, #0
 8012dce:	4603      	mov	r3, r0
 8012dd0:	6039      	str	r1, [r7, #0]
 8012dd2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012dd4:	79fb      	ldrb	r3, [r7, #7]
 8012dd6:	2b00      	cmp	r3, #0
 8012dd8:	d105      	bne.n	8012de6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8012dda:	683a      	ldr	r2, [r7, #0]
 8012ddc:	4907      	ldr	r1, [pc, #28]	; (8012dfc <USBD_FS_ProductStrDescriptor+0x34>)
 8012dde:	4808      	ldr	r0, [pc, #32]	; (8012e00 <USBD_FS_ProductStrDescriptor+0x38>)
 8012de0:	f7fd f815 	bl	800fe0e <USBD_GetString>
 8012de4:	e004      	b.n	8012df0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8012de6:	683a      	ldr	r2, [r7, #0]
 8012de8:	4904      	ldr	r1, [pc, #16]	; (8012dfc <USBD_FS_ProductStrDescriptor+0x34>)
 8012dea:	4805      	ldr	r0, [pc, #20]	; (8012e00 <USBD_FS_ProductStrDescriptor+0x38>)
 8012dec:	f7fd f80f 	bl	800fe0e <USBD_GetString>
  }
  return USBD_StrDesc;
 8012df0:	4b02      	ldr	r3, [pc, #8]	; (8012dfc <USBD_FS_ProductStrDescriptor+0x34>)
}
 8012df2:	4618      	mov	r0, r3
 8012df4:	3708      	adds	r7, #8
 8012df6:	46bd      	mov	sp, r7
 8012df8:	bd80      	pop	{r7, pc}
 8012dfa:	bf00      	nop
 8012dfc:	20008efc 	.word	0x20008efc
 8012e00:	08016a90 	.word	0x08016a90

08012e04 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012e04:	b580      	push	{r7, lr}
 8012e06:	b082      	sub	sp, #8
 8012e08:	af00      	add	r7, sp, #0
 8012e0a:	4603      	mov	r3, r0
 8012e0c:	6039      	str	r1, [r7, #0]
 8012e0e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8012e10:	683a      	ldr	r2, [r7, #0]
 8012e12:	4904      	ldr	r1, [pc, #16]	; (8012e24 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8012e14:	4804      	ldr	r0, [pc, #16]	; (8012e28 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8012e16:	f7fc fffa 	bl	800fe0e <USBD_GetString>
  return USBD_StrDesc;
 8012e1a:	4b02      	ldr	r3, [pc, #8]	; (8012e24 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8012e1c:	4618      	mov	r0, r3
 8012e1e:	3708      	adds	r7, #8
 8012e20:	46bd      	mov	sp, r7
 8012e22:	bd80      	pop	{r7, pc}
 8012e24:	20008efc 	.word	0x20008efc
 8012e28:	08016aa8 	.word	0x08016aa8

08012e2c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012e2c:	b580      	push	{r7, lr}
 8012e2e:	b082      	sub	sp, #8
 8012e30:	af00      	add	r7, sp, #0
 8012e32:	4603      	mov	r3, r0
 8012e34:	6039      	str	r1, [r7, #0]
 8012e36:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8012e38:	683b      	ldr	r3, [r7, #0]
 8012e3a:	221a      	movs	r2, #26
 8012e3c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8012e3e:	f000 f855 	bl	8012eec <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8012e42:	4b02      	ldr	r3, [pc, #8]	; (8012e4c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8012e44:	4618      	mov	r0, r3
 8012e46:	3708      	adds	r7, #8
 8012e48:	46bd      	mov	sp, r7
 8012e4a:	bd80      	pop	{r7, pc}
 8012e4c:	2000039c 	.word	0x2000039c

08012e50 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012e50:	b580      	push	{r7, lr}
 8012e52:	b082      	sub	sp, #8
 8012e54:	af00      	add	r7, sp, #0
 8012e56:	4603      	mov	r3, r0
 8012e58:	6039      	str	r1, [r7, #0]
 8012e5a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8012e5c:	79fb      	ldrb	r3, [r7, #7]
 8012e5e:	2b00      	cmp	r3, #0
 8012e60:	d105      	bne.n	8012e6e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8012e62:	683a      	ldr	r2, [r7, #0]
 8012e64:	4907      	ldr	r1, [pc, #28]	; (8012e84 <USBD_FS_ConfigStrDescriptor+0x34>)
 8012e66:	4808      	ldr	r0, [pc, #32]	; (8012e88 <USBD_FS_ConfigStrDescriptor+0x38>)
 8012e68:	f7fc ffd1 	bl	800fe0e <USBD_GetString>
 8012e6c:	e004      	b.n	8012e78 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8012e6e:	683a      	ldr	r2, [r7, #0]
 8012e70:	4904      	ldr	r1, [pc, #16]	; (8012e84 <USBD_FS_ConfigStrDescriptor+0x34>)
 8012e72:	4805      	ldr	r0, [pc, #20]	; (8012e88 <USBD_FS_ConfigStrDescriptor+0x38>)
 8012e74:	f7fc ffcb 	bl	800fe0e <USBD_GetString>
  }
  return USBD_StrDesc;
 8012e78:	4b02      	ldr	r3, [pc, #8]	; (8012e84 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8012e7a:	4618      	mov	r0, r3
 8012e7c:	3708      	adds	r7, #8
 8012e7e:	46bd      	mov	sp, r7
 8012e80:	bd80      	pop	{r7, pc}
 8012e82:	bf00      	nop
 8012e84:	20008efc 	.word	0x20008efc
 8012e88:	08016abc 	.word	0x08016abc

08012e8c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012e8c:	b580      	push	{r7, lr}
 8012e8e:	b082      	sub	sp, #8
 8012e90:	af00      	add	r7, sp, #0
 8012e92:	4603      	mov	r3, r0
 8012e94:	6039      	str	r1, [r7, #0]
 8012e96:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012e98:	79fb      	ldrb	r3, [r7, #7]
 8012e9a:	2b00      	cmp	r3, #0
 8012e9c:	d105      	bne.n	8012eaa <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8012e9e:	683a      	ldr	r2, [r7, #0]
 8012ea0:	4907      	ldr	r1, [pc, #28]	; (8012ec0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8012ea2:	4808      	ldr	r0, [pc, #32]	; (8012ec4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8012ea4:	f7fc ffb3 	bl	800fe0e <USBD_GetString>
 8012ea8:	e004      	b.n	8012eb4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8012eaa:	683a      	ldr	r2, [r7, #0]
 8012eac:	4904      	ldr	r1, [pc, #16]	; (8012ec0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8012eae:	4805      	ldr	r0, [pc, #20]	; (8012ec4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8012eb0:	f7fc ffad 	bl	800fe0e <USBD_GetString>
  }
  return USBD_StrDesc;
 8012eb4:	4b02      	ldr	r3, [pc, #8]	; (8012ec0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8012eb6:	4618      	mov	r0, r3
 8012eb8:	3708      	adds	r7, #8
 8012eba:	46bd      	mov	sp, r7
 8012ebc:	bd80      	pop	{r7, pc}
 8012ebe:	bf00      	nop
 8012ec0:	20008efc 	.word	0x20008efc
 8012ec4:	08016ac8 	.word	0x08016ac8

08012ec8 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012ec8:	b480      	push	{r7}
 8012eca:	b083      	sub	sp, #12
 8012ecc:	af00      	add	r7, sp, #0
 8012ece:	4603      	mov	r3, r0
 8012ed0:	6039      	str	r1, [r7, #0]
 8012ed2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8012ed4:	683b      	ldr	r3, [r7, #0]
 8012ed6:	220c      	movs	r2, #12
 8012ed8:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8012eda:	4b03      	ldr	r3, [pc, #12]	; (8012ee8 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8012edc:	4618      	mov	r0, r3
 8012ede:	370c      	adds	r7, #12
 8012ee0:	46bd      	mov	sp, r7
 8012ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ee6:	4770      	bx	lr
 8012ee8:	2000038c 	.word	0x2000038c

08012eec <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8012eec:	b580      	push	{r7, lr}
 8012eee:	b084      	sub	sp, #16
 8012ef0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8012ef2:	4b0f      	ldr	r3, [pc, #60]	; (8012f30 <Get_SerialNum+0x44>)
 8012ef4:	681b      	ldr	r3, [r3, #0]
 8012ef6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8012ef8:	4b0e      	ldr	r3, [pc, #56]	; (8012f34 <Get_SerialNum+0x48>)
 8012efa:	681b      	ldr	r3, [r3, #0]
 8012efc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8012efe:	4b0e      	ldr	r3, [pc, #56]	; (8012f38 <Get_SerialNum+0x4c>)
 8012f00:	681b      	ldr	r3, [r3, #0]
 8012f02:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8012f04:	68fa      	ldr	r2, [r7, #12]
 8012f06:	687b      	ldr	r3, [r7, #4]
 8012f08:	4413      	add	r3, r2
 8012f0a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8012f0c:	68fb      	ldr	r3, [r7, #12]
 8012f0e:	2b00      	cmp	r3, #0
 8012f10:	d009      	beq.n	8012f26 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8012f12:	2208      	movs	r2, #8
 8012f14:	4909      	ldr	r1, [pc, #36]	; (8012f3c <Get_SerialNum+0x50>)
 8012f16:	68f8      	ldr	r0, [r7, #12]
 8012f18:	f000 f814 	bl	8012f44 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8012f1c:	2204      	movs	r2, #4
 8012f1e:	4908      	ldr	r1, [pc, #32]	; (8012f40 <Get_SerialNum+0x54>)
 8012f20:	68b8      	ldr	r0, [r7, #8]
 8012f22:	f000 f80f 	bl	8012f44 <IntToUnicode>
  }
}
 8012f26:	bf00      	nop
 8012f28:	3710      	adds	r7, #16
 8012f2a:	46bd      	mov	sp, r7
 8012f2c:	bd80      	pop	{r7, pc}
 8012f2e:	bf00      	nop
 8012f30:	1fff7590 	.word	0x1fff7590
 8012f34:	1fff7594 	.word	0x1fff7594
 8012f38:	1fff7598 	.word	0x1fff7598
 8012f3c:	2000039e 	.word	0x2000039e
 8012f40:	200003ae 	.word	0x200003ae

08012f44 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8012f44:	b480      	push	{r7}
 8012f46:	b087      	sub	sp, #28
 8012f48:	af00      	add	r7, sp, #0
 8012f4a:	60f8      	str	r0, [r7, #12]
 8012f4c:	60b9      	str	r1, [r7, #8]
 8012f4e:	4613      	mov	r3, r2
 8012f50:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8012f52:	2300      	movs	r3, #0
 8012f54:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8012f56:	2300      	movs	r3, #0
 8012f58:	75fb      	strb	r3, [r7, #23]
 8012f5a:	e027      	b.n	8012fac <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8012f5c:	68fb      	ldr	r3, [r7, #12]
 8012f5e:	0f1b      	lsrs	r3, r3, #28
 8012f60:	2b09      	cmp	r3, #9
 8012f62:	d80b      	bhi.n	8012f7c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8012f64:	68fb      	ldr	r3, [r7, #12]
 8012f66:	0f1b      	lsrs	r3, r3, #28
 8012f68:	b2da      	uxtb	r2, r3
 8012f6a:	7dfb      	ldrb	r3, [r7, #23]
 8012f6c:	005b      	lsls	r3, r3, #1
 8012f6e:	4619      	mov	r1, r3
 8012f70:	68bb      	ldr	r3, [r7, #8]
 8012f72:	440b      	add	r3, r1
 8012f74:	3230      	adds	r2, #48	; 0x30
 8012f76:	b2d2      	uxtb	r2, r2
 8012f78:	701a      	strb	r2, [r3, #0]
 8012f7a:	e00a      	b.n	8012f92 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8012f7c:	68fb      	ldr	r3, [r7, #12]
 8012f7e:	0f1b      	lsrs	r3, r3, #28
 8012f80:	b2da      	uxtb	r2, r3
 8012f82:	7dfb      	ldrb	r3, [r7, #23]
 8012f84:	005b      	lsls	r3, r3, #1
 8012f86:	4619      	mov	r1, r3
 8012f88:	68bb      	ldr	r3, [r7, #8]
 8012f8a:	440b      	add	r3, r1
 8012f8c:	3237      	adds	r2, #55	; 0x37
 8012f8e:	b2d2      	uxtb	r2, r2
 8012f90:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8012f92:	68fb      	ldr	r3, [r7, #12]
 8012f94:	011b      	lsls	r3, r3, #4
 8012f96:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8012f98:	7dfb      	ldrb	r3, [r7, #23]
 8012f9a:	005b      	lsls	r3, r3, #1
 8012f9c:	3301      	adds	r3, #1
 8012f9e:	68ba      	ldr	r2, [r7, #8]
 8012fa0:	4413      	add	r3, r2
 8012fa2:	2200      	movs	r2, #0
 8012fa4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8012fa6:	7dfb      	ldrb	r3, [r7, #23]
 8012fa8:	3301      	adds	r3, #1
 8012faa:	75fb      	strb	r3, [r7, #23]
 8012fac:	7dfa      	ldrb	r2, [r7, #23]
 8012fae:	79fb      	ldrb	r3, [r7, #7]
 8012fb0:	429a      	cmp	r2, r3
 8012fb2:	d3d3      	bcc.n	8012f5c <IntToUnicode+0x18>
  }
}
 8012fb4:	bf00      	nop
 8012fb6:	bf00      	nop
 8012fb8:	371c      	adds	r7, #28
 8012fba:	46bd      	mov	sp, r7
 8012fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fc0:	4770      	bx	lr
	...

08012fc4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8012fc4:	b580      	push	{r7, lr}
 8012fc6:	b0b0      	sub	sp, #192	; 0xc0
 8012fc8:	af00      	add	r7, sp, #0
 8012fca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012fcc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8012fd0:	2200      	movs	r2, #0
 8012fd2:	601a      	str	r2, [r3, #0]
 8012fd4:	605a      	str	r2, [r3, #4]
 8012fd6:	609a      	str	r2, [r3, #8]
 8012fd8:	60da      	str	r2, [r3, #12]
 8012fda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8012fdc:	f107 0314 	add.w	r3, r7, #20
 8012fe0:	2298      	movs	r2, #152	; 0x98
 8012fe2:	2100      	movs	r1, #0
 8012fe4:	4618      	mov	r0, r3
 8012fe6:	f001 faf8 	bl	80145da <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8012fea:	687b      	ldr	r3, [r7, #4]
 8012fec:	681b      	ldr	r3, [r3, #0]
 8012fee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8012ff2:	d163      	bne.n	80130bc <HAL_PCD_MspInit+0xf8>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8012ff4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8012ff8:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8012ffa:	2300      	movs	r3, #0
 8012ffc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8013000:	f107 0314 	add.w	r3, r7, #20
 8013004:	4618      	mov	r0, r3
 8013006:	f7f7 fcbb 	bl	800a980 <HAL_RCCEx_PeriphCLKConfig>
 801300a:	4603      	mov	r3, r0
 801300c:	2b00      	cmp	r3, #0
 801300e:	d001      	beq.n	8013014 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8013010:	f7f0 fea4 	bl	8003d5c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8013014:	4b2b      	ldr	r3, [pc, #172]	; (80130c4 <HAL_PCD_MspInit+0x100>)
 8013016:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013018:	4a2a      	ldr	r2, [pc, #168]	; (80130c4 <HAL_PCD_MspInit+0x100>)
 801301a:	f043 0301 	orr.w	r3, r3, #1
 801301e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8013020:	4b28      	ldr	r3, [pc, #160]	; (80130c4 <HAL_PCD_MspInit+0x100>)
 8013022:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013024:	f003 0301 	and.w	r3, r3, #1
 8013028:	613b      	str	r3, [r7, #16]
 801302a:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801302c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8013030:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013034:	2302      	movs	r3, #2
 8013036:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801303a:	2300      	movs	r3, #0
 801303c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013040:	2303      	movs	r3, #3
 8013042:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8013046:	230a      	movs	r3, #10
 8013048:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801304c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8013050:	4619      	mov	r1, r3
 8013052:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8013056:	f7f5 f87d 	bl	8008154 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801305a:	4b1a      	ldr	r3, [pc, #104]	; (80130c4 <HAL_PCD_MspInit+0x100>)
 801305c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801305e:	4a19      	ldr	r2, [pc, #100]	; (80130c4 <HAL_PCD_MspInit+0x100>)
 8013060:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8013064:	64d3      	str	r3, [r2, #76]	; 0x4c
 8013066:	4b17      	ldr	r3, [pc, #92]	; (80130c4 <HAL_PCD_MspInit+0x100>)
 8013068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801306a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801306e:	60fb      	str	r3, [r7, #12]
 8013070:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8013072:	4b14      	ldr	r3, [pc, #80]	; (80130c4 <HAL_PCD_MspInit+0x100>)
 8013074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013076:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801307a:	2b00      	cmp	r3, #0
 801307c:	d114      	bne.n	80130a8 <HAL_PCD_MspInit+0xe4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801307e:	4b11      	ldr	r3, [pc, #68]	; (80130c4 <HAL_PCD_MspInit+0x100>)
 8013080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013082:	4a10      	ldr	r2, [pc, #64]	; (80130c4 <HAL_PCD_MspInit+0x100>)
 8013084:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013088:	6593      	str	r3, [r2, #88]	; 0x58
 801308a:	4b0e      	ldr	r3, [pc, #56]	; (80130c4 <HAL_PCD_MspInit+0x100>)
 801308c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801308e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013092:	60bb      	str	r3, [r7, #8]
 8013094:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8013096:	f7f6 fcbb 	bl	8009a10 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 801309a:	4b0a      	ldr	r3, [pc, #40]	; (80130c4 <HAL_PCD_MspInit+0x100>)
 801309c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801309e:	4a09      	ldr	r2, [pc, #36]	; (80130c4 <HAL_PCD_MspInit+0x100>)
 80130a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80130a4:	6593      	str	r3, [r2, #88]	; 0x58
 80130a6:	e001      	b.n	80130ac <HAL_PCD_MspInit+0xe8>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 80130a8:	f7f6 fcb2 	bl	8009a10 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 80130ac:	2200      	movs	r2, #0
 80130ae:	2105      	movs	r1, #5
 80130b0:	2043      	movs	r0, #67	; 0x43
 80130b2:	f7f4 fdb3 	bl	8007c1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80130b6:	2043      	movs	r0, #67	; 0x43
 80130b8:	f7f4 fdcc 	bl	8007c54 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80130bc:	bf00      	nop
 80130be:	37c0      	adds	r7, #192	; 0xc0
 80130c0:	46bd      	mov	sp, r7
 80130c2:	bd80      	pop	{r7, pc}
 80130c4:	40021000 	.word	0x40021000

080130c8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80130c8:	b580      	push	{r7, lr}
 80130ca:	b082      	sub	sp, #8
 80130cc:	af00      	add	r7, sp, #0
 80130ce:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80130d0:	687b      	ldr	r3, [r7, #4]
 80130d2:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80130d6:	687b      	ldr	r3, [r7, #4]
 80130d8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80130dc:	4619      	mov	r1, r3
 80130de:	4610      	mov	r0, r2
 80130e0:	f7fb fe84 	bl	800edec <USBD_LL_SetupStage>
}
 80130e4:	bf00      	nop
 80130e6:	3708      	adds	r7, #8
 80130e8:	46bd      	mov	sp, r7
 80130ea:	bd80      	pop	{r7, pc}

080130ec <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80130ec:	b580      	push	{r7, lr}
 80130ee:	b082      	sub	sp, #8
 80130f0:	af00      	add	r7, sp, #0
 80130f2:	6078      	str	r0, [r7, #4]
 80130f4:	460b      	mov	r3, r1
 80130f6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80130f8:	687b      	ldr	r3, [r7, #4]
 80130fa:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80130fe:	78fa      	ldrb	r2, [r7, #3]
 8013100:	6879      	ldr	r1, [r7, #4]
 8013102:	4613      	mov	r3, r2
 8013104:	00db      	lsls	r3, r3, #3
 8013106:	4413      	add	r3, r2
 8013108:	009b      	lsls	r3, r3, #2
 801310a:	440b      	add	r3, r1
 801310c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8013110:	681a      	ldr	r2, [r3, #0]
 8013112:	78fb      	ldrb	r3, [r7, #3]
 8013114:	4619      	mov	r1, r3
 8013116:	f7fb febe 	bl	800ee96 <USBD_LL_DataOutStage>
}
 801311a:	bf00      	nop
 801311c:	3708      	adds	r7, #8
 801311e:	46bd      	mov	sp, r7
 8013120:	bd80      	pop	{r7, pc}

08013122 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013122:	b580      	push	{r7, lr}
 8013124:	b082      	sub	sp, #8
 8013126:	af00      	add	r7, sp, #0
 8013128:	6078      	str	r0, [r7, #4]
 801312a:	460b      	mov	r3, r1
 801312c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801312e:	687b      	ldr	r3, [r7, #4]
 8013130:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8013134:	78fa      	ldrb	r2, [r7, #3]
 8013136:	6879      	ldr	r1, [r7, #4]
 8013138:	4613      	mov	r3, r2
 801313a:	00db      	lsls	r3, r3, #3
 801313c:	4413      	add	r3, r2
 801313e:	009b      	lsls	r3, r3, #2
 8013140:	440b      	add	r3, r1
 8013142:	334c      	adds	r3, #76	; 0x4c
 8013144:	681a      	ldr	r2, [r3, #0]
 8013146:	78fb      	ldrb	r3, [r7, #3]
 8013148:	4619      	mov	r1, r3
 801314a:	f7fb ff07 	bl	800ef5c <USBD_LL_DataInStage>
}
 801314e:	bf00      	nop
 8013150:	3708      	adds	r7, #8
 8013152:	46bd      	mov	sp, r7
 8013154:	bd80      	pop	{r7, pc}

08013156 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013156:	b580      	push	{r7, lr}
 8013158:	b082      	sub	sp, #8
 801315a:	af00      	add	r7, sp, #0
 801315c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801315e:	687b      	ldr	r3, [r7, #4]
 8013160:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8013164:	4618      	mov	r0, r3
 8013166:	f7fc f81b 	bl	800f1a0 <USBD_LL_SOF>
}
 801316a:	bf00      	nop
 801316c:	3708      	adds	r7, #8
 801316e:	46bd      	mov	sp, r7
 8013170:	bd80      	pop	{r7, pc}

08013172 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013172:	b580      	push	{r7, lr}
 8013174:	b084      	sub	sp, #16
 8013176:	af00      	add	r7, sp, #0
 8013178:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801317a:	2301      	movs	r3, #1
 801317c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801317e:	687b      	ldr	r3, [r7, #4]
 8013180:	68db      	ldr	r3, [r3, #12]
 8013182:	2b02      	cmp	r3, #2
 8013184:	d001      	beq.n	801318a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8013186:	f7f0 fde9 	bl	8003d5c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801318a:	687b      	ldr	r3, [r7, #4]
 801318c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8013190:	7bfa      	ldrb	r2, [r7, #15]
 8013192:	4611      	mov	r1, r2
 8013194:	4618      	mov	r0, r3
 8013196:	f7fb ffc5 	bl	800f124 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801319a:	687b      	ldr	r3, [r7, #4]
 801319c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80131a0:	4618      	mov	r0, r3
 80131a2:	f7fb ff71 	bl	800f088 <USBD_LL_Reset>
}
 80131a6:	bf00      	nop
 80131a8:	3710      	adds	r7, #16
 80131aa:	46bd      	mov	sp, r7
 80131ac:	bd80      	pop	{r7, pc}
	...

080131b0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80131b0:	b580      	push	{r7, lr}
 80131b2:	b082      	sub	sp, #8
 80131b4:	af00      	add	r7, sp, #0
 80131b6:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80131b8:	687b      	ldr	r3, [r7, #4]
 80131ba:	681b      	ldr	r3, [r3, #0]
 80131bc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80131c0:	681b      	ldr	r3, [r3, #0]
 80131c2:	687a      	ldr	r2, [r7, #4]
 80131c4:	6812      	ldr	r2, [r2, #0]
 80131c6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80131ca:	f043 0301 	orr.w	r3, r3, #1
 80131ce:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80131d0:	687b      	ldr	r3, [r7, #4]
 80131d2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80131d6:	4618      	mov	r0, r3
 80131d8:	f7fb ffb4 	bl	800f144 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80131dc:	687b      	ldr	r3, [r7, #4]
 80131de:	6a1b      	ldr	r3, [r3, #32]
 80131e0:	2b00      	cmp	r3, #0
 80131e2:	d005      	beq.n	80131f0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80131e4:	4b04      	ldr	r3, [pc, #16]	; (80131f8 <HAL_PCD_SuspendCallback+0x48>)
 80131e6:	691b      	ldr	r3, [r3, #16]
 80131e8:	4a03      	ldr	r2, [pc, #12]	; (80131f8 <HAL_PCD_SuspendCallback+0x48>)
 80131ea:	f043 0306 	orr.w	r3, r3, #6
 80131ee:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80131f0:	bf00      	nop
 80131f2:	3708      	adds	r7, #8
 80131f4:	46bd      	mov	sp, r7
 80131f6:	bd80      	pop	{r7, pc}
 80131f8:	e000ed00 	.word	0xe000ed00

080131fc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80131fc:	b580      	push	{r7, lr}
 80131fe:	b082      	sub	sp, #8
 8013200:	af00      	add	r7, sp, #0
 8013202:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8013204:	687b      	ldr	r3, [r7, #4]
 8013206:	681b      	ldr	r3, [r3, #0]
 8013208:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801320c:	681b      	ldr	r3, [r3, #0]
 801320e:	687a      	ldr	r2, [r7, #4]
 8013210:	6812      	ldr	r2, [r2, #0]
 8013212:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8013216:	f023 0301 	bic.w	r3, r3, #1
 801321a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 801321c:	687b      	ldr	r3, [r7, #4]
 801321e:	6a1b      	ldr	r3, [r3, #32]
 8013220:	2b00      	cmp	r3, #0
 8013222:	d007      	beq.n	8013234 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8013224:	4b08      	ldr	r3, [pc, #32]	; (8013248 <HAL_PCD_ResumeCallback+0x4c>)
 8013226:	691b      	ldr	r3, [r3, #16]
 8013228:	4a07      	ldr	r2, [pc, #28]	; (8013248 <HAL_PCD_ResumeCallback+0x4c>)
 801322a:	f023 0306 	bic.w	r3, r3, #6
 801322e:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8013230:	f000 faf4 	bl	801381c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8013234:	687b      	ldr	r3, [r7, #4]
 8013236:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801323a:	4618      	mov	r0, r3
 801323c:	f7fb ff98 	bl	800f170 <USBD_LL_Resume>
}
 8013240:	bf00      	nop
 8013242:	3708      	adds	r7, #8
 8013244:	46bd      	mov	sp, r7
 8013246:	bd80      	pop	{r7, pc}
 8013248:	e000ed00 	.word	0xe000ed00

0801324c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801324c:	b580      	push	{r7, lr}
 801324e:	b082      	sub	sp, #8
 8013250:	af00      	add	r7, sp, #0
 8013252:	6078      	str	r0, [r7, #4]
 8013254:	460b      	mov	r3, r1
 8013256:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8013258:	687b      	ldr	r3, [r7, #4]
 801325a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801325e:	78fa      	ldrb	r2, [r7, #3]
 8013260:	4611      	mov	r1, r2
 8013262:	4618      	mov	r0, r3
 8013264:	f7fb ffe4 	bl	800f230 <USBD_LL_IsoOUTIncomplete>
}
 8013268:	bf00      	nop
 801326a:	3708      	adds	r7, #8
 801326c:	46bd      	mov	sp, r7
 801326e:	bd80      	pop	{r7, pc}

08013270 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013270:	b580      	push	{r7, lr}
 8013272:	b082      	sub	sp, #8
 8013274:	af00      	add	r7, sp, #0
 8013276:	6078      	str	r0, [r7, #4]
 8013278:	460b      	mov	r3, r1
 801327a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801327c:	687b      	ldr	r3, [r7, #4]
 801327e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8013282:	78fa      	ldrb	r2, [r7, #3]
 8013284:	4611      	mov	r1, r2
 8013286:	4618      	mov	r0, r3
 8013288:	f7fb ffac 	bl	800f1e4 <USBD_LL_IsoINIncomplete>
}
 801328c:	bf00      	nop
 801328e:	3708      	adds	r7, #8
 8013290:	46bd      	mov	sp, r7
 8013292:	bd80      	pop	{r7, pc}

08013294 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013294:	b580      	push	{r7, lr}
 8013296:	b082      	sub	sp, #8
 8013298:	af00      	add	r7, sp, #0
 801329a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801329c:	687b      	ldr	r3, [r7, #4]
 801329e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80132a2:	4618      	mov	r0, r3
 80132a4:	f7fb ffea 	bl	800f27c <USBD_LL_DevConnected>
}
 80132a8:	bf00      	nop
 80132aa:	3708      	adds	r7, #8
 80132ac:	46bd      	mov	sp, r7
 80132ae:	bd80      	pop	{r7, pc}

080132b0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80132b0:	b580      	push	{r7, lr}
 80132b2:	b082      	sub	sp, #8
 80132b4:	af00      	add	r7, sp, #0
 80132b6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80132b8:	687b      	ldr	r3, [r7, #4]
 80132ba:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80132be:	4618      	mov	r0, r3
 80132c0:	f7fb ffe7 	bl	800f292 <USBD_LL_DevDisconnected>
}
 80132c4:	bf00      	nop
 80132c6:	3708      	adds	r7, #8
 80132c8:	46bd      	mov	sp, r7
 80132ca:	bd80      	pop	{r7, pc}

080132cc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80132cc:	b580      	push	{r7, lr}
 80132ce:	b082      	sub	sp, #8
 80132d0:	af00      	add	r7, sp, #0
 80132d2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80132d4:	687b      	ldr	r3, [r7, #4]
 80132d6:	781b      	ldrb	r3, [r3, #0]
 80132d8:	2b00      	cmp	r3, #0
 80132da:	d139      	bne.n	8013350 <USBD_LL_Init+0x84>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80132dc:	4a1f      	ldr	r2, [pc, #124]	; (801335c <USBD_LL_Init+0x90>)
 80132de:	687b      	ldr	r3, [r7, #4]
 80132e0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80132e4:	687b      	ldr	r3, [r7, #4]
 80132e6:	4a1d      	ldr	r2, [pc, #116]	; (801335c <USBD_LL_Init+0x90>)
 80132e8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80132ec:	4b1b      	ldr	r3, [pc, #108]	; (801335c <USBD_LL_Init+0x90>)
 80132ee:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80132f2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80132f4:	4b19      	ldr	r3, [pc, #100]	; (801335c <USBD_LL_Init+0x90>)
 80132f6:	2206      	movs	r2, #6
 80132f8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80132fa:	4b18      	ldr	r3, [pc, #96]	; (801335c <USBD_LL_Init+0x90>)
 80132fc:	2202      	movs	r2, #2
 80132fe:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8013300:	4b16      	ldr	r3, [pc, #88]	; (801335c <USBD_LL_Init+0x90>)
 8013302:	2200      	movs	r2, #0
 8013304:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8013306:	4b15      	ldr	r3, [pc, #84]	; (801335c <USBD_LL_Init+0x90>)
 8013308:	2200      	movs	r2, #0
 801330a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801330c:	4b13      	ldr	r3, [pc, #76]	; (801335c <USBD_LL_Init+0x90>)
 801330e:	2200      	movs	r2, #0
 8013310:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8013312:	4b12      	ldr	r3, [pc, #72]	; (801335c <USBD_LL_Init+0x90>)
 8013314:	2200      	movs	r2, #0
 8013316:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8013318:	4b10      	ldr	r3, [pc, #64]	; (801335c <USBD_LL_Init+0x90>)
 801331a:	2200      	movs	r2, #0
 801331c:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801331e:	4b0f      	ldr	r3, [pc, #60]	; (801335c <USBD_LL_Init+0x90>)
 8013320:	2200      	movs	r2, #0
 8013322:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8013324:	480d      	ldr	r0, [pc, #52]	; (801335c <USBD_LL_Init+0x90>)
 8013326:	f7f5 f8d7 	bl	80084d8 <HAL_PCD_Init>
 801332a:	4603      	mov	r3, r0
 801332c:	2b00      	cmp	r3, #0
 801332e:	d001      	beq.n	8013334 <USBD_LL_Init+0x68>
  {
    Error_Handler( );
 8013330:	f7f0 fd14 	bl	8003d5c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8013334:	2180      	movs	r1, #128	; 0x80
 8013336:	4809      	ldr	r0, [pc, #36]	; (801335c <USBD_LL_Init+0x90>)
 8013338:	f7f6 fa59 	bl	80097ee <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801333c:	2240      	movs	r2, #64	; 0x40
 801333e:	2100      	movs	r1, #0
 8013340:	4806      	ldr	r0, [pc, #24]	; (801335c <USBD_LL_Init+0x90>)
 8013342:	f7f6 fa0d 	bl	8009760 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8013346:	2280      	movs	r2, #128	; 0x80
 8013348:	2101      	movs	r1, #1
 801334a:	4804      	ldr	r0, [pc, #16]	; (801335c <USBD_LL_Init+0x90>)
 801334c:	f7f6 fa08 	bl	8009760 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8013350:	2300      	movs	r3, #0
}
 8013352:	4618      	mov	r0, r3
 8013354:	3708      	adds	r7, #8
 8013356:	46bd      	mov	sp, r7
 8013358:	bd80      	pop	{r7, pc}
 801335a:	bf00      	nop
 801335c:	200090fc 	.word	0x200090fc

08013360 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8013360:	b580      	push	{r7, lr}
 8013362:	b084      	sub	sp, #16
 8013364:	af00      	add	r7, sp, #0
 8013366:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013368:	2300      	movs	r3, #0
 801336a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801336c:	2300      	movs	r3, #0
 801336e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 8013370:	687b      	ldr	r3, [r7, #4]
 8013372:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8013376:	4618      	mov	r0, r3
 8013378:	f7f5 f9d2 	bl	8008720 <HAL_PCD_Start>
 801337c:	4603      	mov	r3, r0
 801337e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8013380:	7bbb      	ldrb	r3, [r7, #14]
 8013382:	2b03      	cmp	r3, #3
 8013384:	d816      	bhi.n	80133b4 <USBD_LL_Start+0x54>
 8013386:	a201      	add	r2, pc, #4	; (adr r2, 801338c <USBD_LL_Start+0x2c>)
 8013388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801338c:	0801339d 	.word	0x0801339d
 8013390:	080133a3 	.word	0x080133a3
 8013394:	080133a9 	.word	0x080133a9
 8013398:	080133af 	.word	0x080133af
    case HAL_OK :
      usb_status = USBD_OK;
 801339c:	2300      	movs	r3, #0
 801339e:	73fb      	strb	r3, [r7, #15]
    break;
 80133a0:	e00b      	b.n	80133ba <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80133a2:	2303      	movs	r3, #3
 80133a4:	73fb      	strb	r3, [r7, #15]
    break;
 80133a6:	e008      	b.n	80133ba <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80133a8:	2301      	movs	r3, #1
 80133aa:	73fb      	strb	r3, [r7, #15]
    break;
 80133ac:	e005      	b.n	80133ba <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80133ae:	2303      	movs	r3, #3
 80133b0:	73fb      	strb	r3, [r7, #15]
    break;
 80133b2:	e002      	b.n	80133ba <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 80133b4:	2303      	movs	r3, #3
 80133b6:	73fb      	strb	r3, [r7, #15]
    break;
 80133b8:	bf00      	nop
  }
  return usb_status;
 80133ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80133bc:	4618      	mov	r0, r3
 80133be:	3710      	adds	r7, #16
 80133c0:	46bd      	mov	sp, r7
 80133c2:	bd80      	pop	{r7, pc}

080133c4 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80133c4:	b580      	push	{r7, lr}
 80133c6:	b084      	sub	sp, #16
 80133c8:	af00      	add	r7, sp, #0
 80133ca:	6078      	str	r0, [r7, #4]
 80133cc:	4608      	mov	r0, r1
 80133ce:	4611      	mov	r1, r2
 80133d0:	461a      	mov	r2, r3
 80133d2:	4603      	mov	r3, r0
 80133d4:	70fb      	strb	r3, [r7, #3]
 80133d6:	460b      	mov	r3, r1
 80133d8:	70bb      	strb	r3, [r7, #2]
 80133da:	4613      	mov	r3, r2
 80133dc:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80133de:	2300      	movs	r3, #0
 80133e0:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80133e2:	2300      	movs	r3, #0
 80133e4:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80133e6:	687b      	ldr	r3, [r7, #4]
 80133e8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80133ec:	78bb      	ldrb	r3, [r7, #2]
 80133ee:	883a      	ldrh	r2, [r7, #0]
 80133f0:	78f9      	ldrb	r1, [r7, #3]
 80133f2:	f7f5 fe7c 	bl	80090ee <HAL_PCD_EP_Open>
 80133f6:	4603      	mov	r3, r0
 80133f8:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80133fa:	7bbb      	ldrb	r3, [r7, #14]
 80133fc:	2b03      	cmp	r3, #3
 80133fe:	d817      	bhi.n	8013430 <USBD_LL_OpenEP+0x6c>
 8013400:	a201      	add	r2, pc, #4	; (adr r2, 8013408 <USBD_LL_OpenEP+0x44>)
 8013402:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013406:	bf00      	nop
 8013408:	08013419 	.word	0x08013419
 801340c:	0801341f 	.word	0x0801341f
 8013410:	08013425 	.word	0x08013425
 8013414:	0801342b 	.word	0x0801342b
    case HAL_OK :
      usb_status = USBD_OK;
 8013418:	2300      	movs	r3, #0
 801341a:	73fb      	strb	r3, [r7, #15]
    break;
 801341c:	e00b      	b.n	8013436 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801341e:	2303      	movs	r3, #3
 8013420:	73fb      	strb	r3, [r7, #15]
    break;
 8013422:	e008      	b.n	8013436 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8013424:	2301      	movs	r3, #1
 8013426:	73fb      	strb	r3, [r7, #15]
    break;
 8013428:	e005      	b.n	8013436 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801342a:	2303      	movs	r3, #3
 801342c:	73fb      	strb	r3, [r7, #15]
    break;
 801342e:	e002      	b.n	8013436 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8013430:	2303      	movs	r3, #3
 8013432:	73fb      	strb	r3, [r7, #15]
    break;
 8013434:	bf00      	nop
  }
  return usb_status;
 8013436:	7bfb      	ldrb	r3, [r7, #15]
}
 8013438:	4618      	mov	r0, r3
 801343a:	3710      	adds	r7, #16
 801343c:	46bd      	mov	sp, r7
 801343e:	bd80      	pop	{r7, pc}

08013440 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013440:	b580      	push	{r7, lr}
 8013442:	b084      	sub	sp, #16
 8013444:	af00      	add	r7, sp, #0
 8013446:	6078      	str	r0, [r7, #4]
 8013448:	460b      	mov	r3, r1
 801344a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801344c:	2300      	movs	r3, #0
 801344e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013450:	2300      	movs	r3, #0
 8013452:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8013454:	687b      	ldr	r3, [r7, #4]
 8013456:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801345a:	78fa      	ldrb	r2, [r7, #3]
 801345c:	4611      	mov	r1, r2
 801345e:	4618      	mov	r0, r3
 8013460:	f7f5 fead 	bl	80091be <HAL_PCD_EP_Close>
 8013464:	4603      	mov	r3, r0
 8013466:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8013468:	7bbb      	ldrb	r3, [r7, #14]
 801346a:	2b03      	cmp	r3, #3
 801346c:	d816      	bhi.n	801349c <USBD_LL_CloseEP+0x5c>
 801346e:	a201      	add	r2, pc, #4	; (adr r2, 8013474 <USBD_LL_CloseEP+0x34>)
 8013470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013474:	08013485 	.word	0x08013485
 8013478:	0801348b 	.word	0x0801348b
 801347c:	08013491 	.word	0x08013491
 8013480:	08013497 	.word	0x08013497
    case HAL_OK :
      usb_status = USBD_OK;
 8013484:	2300      	movs	r3, #0
 8013486:	73fb      	strb	r3, [r7, #15]
    break;
 8013488:	e00b      	b.n	80134a2 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801348a:	2303      	movs	r3, #3
 801348c:	73fb      	strb	r3, [r7, #15]
    break;
 801348e:	e008      	b.n	80134a2 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8013490:	2301      	movs	r3, #1
 8013492:	73fb      	strb	r3, [r7, #15]
    break;
 8013494:	e005      	b.n	80134a2 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8013496:	2303      	movs	r3, #3
 8013498:	73fb      	strb	r3, [r7, #15]
    break;
 801349a:	e002      	b.n	80134a2 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 801349c:	2303      	movs	r3, #3
 801349e:	73fb      	strb	r3, [r7, #15]
    break;
 80134a0:	bf00      	nop
  }
  return usb_status;
 80134a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80134a4:	4618      	mov	r0, r3
 80134a6:	3710      	adds	r7, #16
 80134a8:	46bd      	mov	sp, r7
 80134aa:	bd80      	pop	{r7, pc}

080134ac <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80134ac:	b580      	push	{r7, lr}
 80134ae:	b084      	sub	sp, #16
 80134b0:	af00      	add	r7, sp, #0
 80134b2:	6078      	str	r0, [r7, #4]
 80134b4:	460b      	mov	r3, r1
 80134b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80134b8:	2300      	movs	r3, #0
 80134ba:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80134bc:	2300      	movs	r3, #0
 80134be:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80134c0:	687b      	ldr	r3, [r7, #4]
 80134c2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80134c6:	78fa      	ldrb	r2, [r7, #3]
 80134c8:	4611      	mov	r1, r2
 80134ca:	4618      	mov	r0, r3
 80134cc:	f7f5 ff54 	bl	8009378 <HAL_PCD_EP_SetStall>
 80134d0:	4603      	mov	r3, r0
 80134d2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80134d4:	7bbb      	ldrb	r3, [r7, #14]
 80134d6:	2b03      	cmp	r3, #3
 80134d8:	d816      	bhi.n	8013508 <USBD_LL_StallEP+0x5c>
 80134da:	a201      	add	r2, pc, #4	; (adr r2, 80134e0 <USBD_LL_StallEP+0x34>)
 80134dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80134e0:	080134f1 	.word	0x080134f1
 80134e4:	080134f7 	.word	0x080134f7
 80134e8:	080134fd 	.word	0x080134fd
 80134ec:	08013503 	.word	0x08013503
    case HAL_OK :
      usb_status = USBD_OK;
 80134f0:	2300      	movs	r3, #0
 80134f2:	73fb      	strb	r3, [r7, #15]
    break;
 80134f4:	e00b      	b.n	801350e <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80134f6:	2303      	movs	r3, #3
 80134f8:	73fb      	strb	r3, [r7, #15]
    break;
 80134fa:	e008      	b.n	801350e <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80134fc:	2301      	movs	r3, #1
 80134fe:	73fb      	strb	r3, [r7, #15]
    break;
 8013500:	e005      	b.n	801350e <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8013502:	2303      	movs	r3, #3
 8013504:	73fb      	strb	r3, [r7, #15]
    break;
 8013506:	e002      	b.n	801350e <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8013508:	2303      	movs	r3, #3
 801350a:	73fb      	strb	r3, [r7, #15]
    break;
 801350c:	bf00      	nop
  }
  return usb_status;
 801350e:	7bfb      	ldrb	r3, [r7, #15]
}
 8013510:	4618      	mov	r0, r3
 8013512:	3710      	adds	r7, #16
 8013514:	46bd      	mov	sp, r7
 8013516:	bd80      	pop	{r7, pc}

08013518 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013518:	b580      	push	{r7, lr}
 801351a:	b084      	sub	sp, #16
 801351c:	af00      	add	r7, sp, #0
 801351e:	6078      	str	r0, [r7, #4]
 8013520:	460b      	mov	r3, r1
 8013522:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013524:	2300      	movs	r3, #0
 8013526:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013528:	2300      	movs	r3, #0
 801352a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801352c:	687b      	ldr	r3, [r7, #4]
 801352e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8013532:	78fa      	ldrb	r2, [r7, #3]
 8013534:	4611      	mov	r1, r2
 8013536:	4618      	mov	r0, r3
 8013538:	f7f5 ff80 	bl	800943c <HAL_PCD_EP_ClrStall>
 801353c:	4603      	mov	r3, r0
 801353e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8013540:	7bbb      	ldrb	r3, [r7, #14]
 8013542:	2b03      	cmp	r3, #3
 8013544:	d816      	bhi.n	8013574 <USBD_LL_ClearStallEP+0x5c>
 8013546:	a201      	add	r2, pc, #4	; (adr r2, 801354c <USBD_LL_ClearStallEP+0x34>)
 8013548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801354c:	0801355d 	.word	0x0801355d
 8013550:	08013563 	.word	0x08013563
 8013554:	08013569 	.word	0x08013569
 8013558:	0801356f 	.word	0x0801356f
    case HAL_OK :
      usb_status = USBD_OK;
 801355c:	2300      	movs	r3, #0
 801355e:	73fb      	strb	r3, [r7, #15]
    break;
 8013560:	e00b      	b.n	801357a <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8013562:	2303      	movs	r3, #3
 8013564:	73fb      	strb	r3, [r7, #15]
    break;
 8013566:	e008      	b.n	801357a <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8013568:	2301      	movs	r3, #1
 801356a:	73fb      	strb	r3, [r7, #15]
    break;
 801356c:	e005      	b.n	801357a <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801356e:	2303      	movs	r3, #3
 8013570:	73fb      	strb	r3, [r7, #15]
    break;
 8013572:	e002      	b.n	801357a <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8013574:	2303      	movs	r3, #3
 8013576:	73fb      	strb	r3, [r7, #15]
    break;
 8013578:	bf00      	nop
  }
  return usb_status;
 801357a:	7bfb      	ldrb	r3, [r7, #15]
}
 801357c:	4618      	mov	r0, r3
 801357e:	3710      	adds	r7, #16
 8013580:	46bd      	mov	sp, r7
 8013582:	bd80      	pop	{r7, pc}

08013584 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013584:	b480      	push	{r7}
 8013586:	b085      	sub	sp, #20
 8013588:	af00      	add	r7, sp, #0
 801358a:	6078      	str	r0, [r7, #4]
 801358c:	460b      	mov	r3, r1
 801358e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8013590:	687b      	ldr	r3, [r7, #4]
 8013592:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8013596:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8013598:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801359c:	2b00      	cmp	r3, #0
 801359e:	da0b      	bge.n	80135b8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80135a0:	78fb      	ldrb	r3, [r7, #3]
 80135a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80135a6:	68f9      	ldr	r1, [r7, #12]
 80135a8:	4613      	mov	r3, r2
 80135aa:	00db      	lsls	r3, r3, #3
 80135ac:	4413      	add	r3, r2
 80135ae:	009b      	lsls	r3, r3, #2
 80135b0:	440b      	add	r3, r1
 80135b2:	333e      	adds	r3, #62	; 0x3e
 80135b4:	781b      	ldrb	r3, [r3, #0]
 80135b6:	e00b      	b.n	80135d0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80135b8:	78fb      	ldrb	r3, [r7, #3]
 80135ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80135be:	68f9      	ldr	r1, [r7, #12]
 80135c0:	4613      	mov	r3, r2
 80135c2:	00db      	lsls	r3, r3, #3
 80135c4:	4413      	add	r3, r2
 80135c6:	009b      	lsls	r3, r3, #2
 80135c8:	440b      	add	r3, r1
 80135ca:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80135ce:	781b      	ldrb	r3, [r3, #0]
  }
}
 80135d0:	4618      	mov	r0, r3
 80135d2:	3714      	adds	r7, #20
 80135d4:	46bd      	mov	sp, r7
 80135d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135da:	4770      	bx	lr

080135dc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80135dc:	b580      	push	{r7, lr}
 80135de:	b084      	sub	sp, #16
 80135e0:	af00      	add	r7, sp, #0
 80135e2:	6078      	str	r0, [r7, #4]
 80135e4:	460b      	mov	r3, r1
 80135e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80135e8:	2300      	movs	r3, #0
 80135ea:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80135ec:	2300      	movs	r3, #0
 80135ee:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80135f0:	687b      	ldr	r3, [r7, #4]
 80135f2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80135f6:	78fa      	ldrb	r2, [r7, #3]
 80135f8:	4611      	mov	r1, r2
 80135fa:	4618      	mov	r0, r3
 80135fc:	f7f5 fd52 	bl	80090a4 <HAL_PCD_SetAddress>
 8013600:	4603      	mov	r3, r0
 8013602:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8013604:	7bbb      	ldrb	r3, [r7, #14]
 8013606:	2b03      	cmp	r3, #3
 8013608:	d816      	bhi.n	8013638 <USBD_LL_SetUSBAddress+0x5c>
 801360a:	a201      	add	r2, pc, #4	; (adr r2, 8013610 <USBD_LL_SetUSBAddress+0x34>)
 801360c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013610:	08013621 	.word	0x08013621
 8013614:	08013627 	.word	0x08013627
 8013618:	0801362d 	.word	0x0801362d
 801361c:	08013633 	.word	0x08013633
    case HAL_OK :
      usb_status = USBD_OK;
 8013620:	2300      	movs	r3, #0
 8013622:	73fb      	strb	r3, [r7, #15]
    break;
 8013624:	e00b      	b.n	801363e <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8013626:	2303      	movs	r3, #3
 8013628:	73fb      	strb	r3, [r7, #15]
    break;
 801362a:	e008      	b.n	801363e <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801362c:	2301      	movs	r3, #1
 801362e:	73fb      	strb	r3, [r7, #15]
    break;
 8013630:	e005      	b.n	801363e <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8013632:	2303      	movs	r3, #3
 8013634:	73fb      	strb	r3, [r7, #15]
    break;
 8013636:	e002      	b.n	801363e <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8013638:	2303      	movs	r3, #3
 801363a:	73fb      	strb	r3, [r7, #15]
    break;
 801363c:	bf00      	nop
  }
  return usb_status;
 801363e:	7bfb      	ldrb	r3, [r7, #15]
}
 8013640:	4618      	mov	r0, r3
 8013642:	3710      	adds	r7, #16
 8013644:	46bd      	mov	sp, r7
 8013646:	bd80      	pop	{r7, pc}

08013648 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8013648:	b580      	push	{r7, lr}
 801364a:	b086      	sub	sp, #24
 801364c:	af00      	add	r7, sp, #0
 801364e:	60f8      	str	r0, [r7, #12]
 8013650:	607a      	str	r2, [r7, #4]
 8013652:	603b      	str	r3, [r7, #0]
 8013654:	460b      	mov	r3, r1
 8013656:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013658:	2300      	movs	r3, #0
 801365a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801365c:	2300      	movs	r3, #0
 801365e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8013660:	68fb      	ldr	r3, [r7, #12]
 8013662:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8013666:	7af9      	ldrb	r1, [r7, #11]
 8013668:	683b      	ldr	r3, [r7, #0]
 801366a:	687a      	ldr	r2, [r7, #4]
 801366c:	f7f5 fe47 	bl	80092fe <HAL_PCD_EP_Transmit>
 8013670:	4603      	mov	r3, r0
 8013672:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8013674:	7dbb      	ldrb	r3, [r7, #22]
 8013676:	2b03      	cmp	r3, #3
 8013678:	d816      	bhi.n	80136a8 <USBD_LL_Transmit+0x60>
 801367a:	a201      	add	r2, pc, #4	; (adr r2, 8013680 <USBD_LL_Transmit+0x38>)
 801367c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013680:	08013691 	.word	0x08013691
 8013684:	08013697 	.word	0x08013697
 8013688:	0801369d 	.word	0x0801369d
 801368c:	080136a3 	.word	0x080136a3
    case HAL_OK :
      usb_status = USBD_OK;
 8013690:	2300      	movs	r3, #0
 8013692:	75fb      	strb	r3, [r7, #23]
    break;
 8013694:	e00b      	b.n	80136ae <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8013696:	2303      	movs	r3, #3
 8013698:	75fb      	strb	r3, [r7, #23]
    break;
 801369a:	e008      	b.n	80136ae <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801369c:	2301      	movs	r3, #1
 801369e:	75fb      	strb	r3, [r7, #23]
    break;
 80136a0:	e005      	b.n	80136ae <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80136a2:	2303      	movs	r3, #3
 80136a4:	75fb      	strb	r3, [r7, #23]
    break;
 80136a6:	e002      	b.n	80136ae <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 80136a8:	2303      	movs	r3, #3
 80136aa:	75fb      	strb	r3, [r7, #23]
    break;
 80136ac:	bf00      	nop
  }
  return usb_status;
 80136ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80136b0:	4618      	mov	r0, r3
 80136b2:	3718      	adds	r7, #24
 80136b4:	46bd      	mov	sp, r7
 80136b6:	bd80      	pop	{r7, pc}

080136b8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80136b8:	b580      	push	{r7, lr}
 80136ba:	b086      	sub	sp, #24
 80136bc:	af00      	add	r7, sp, #0
 80136be:	60f8      	str	r0, [r7, #12]
 80136c0:	607a      	str	r2, [r7, #4]
 80136c2:	603b      	str	r3, [r7, #0]
 80136c4:	460b      	mov	r3, r1
 80136c6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80136c8:	2300      	movs	r3, #0
 80136ca:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80136cc:	2300      	movs	r3, #0
 80136ce:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80136d0:	68fb      	ldr	r3, [r7, #12]
 80136d2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80136d6:	7af9      	ldrb	r1, [r7, #11]
 80136d8:	683b      	ldr	r3, [r7, #0]
 80136da:	687a      	ldr	r2, [r7, #4]
 80136dc:	f7f5 fdb9 	bl	8009252 <HAL_PCD_EP_Receive>
 80136e0:	4603      	mov	r3, r0
 80136e2:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 80136e4:	7dbb      	ldrb	r3, [r7, #22]
 80136e6:	2b03      	cmp	r3, #3
 80136e8:	d816      	bhi.n	8013718 <USBD_LL_PrepareReceive+0x60>
 80136ea:	a201      	add	r2, pc, #4	; (adr r2, 80136f0 <USBD_LL_PrepareReceive+0x38>)
 80136ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80136f0:	08013701 	.word	0x08013701
 80136f4:	08013707 	.word	0x08013707
 80136f8:	0801370d 	.word	0x0801370d
 80136fc:	08013713 	.word	0x08013713
    case HAL_OK :
      usb_status = USBD_OK;
 8013700:	2300      	movs	r3, #0
 8013702:	75fb      	strb	r3, [r7, #23]
    break;
 8013704:	e00b      	b.n	801371e <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8013706:	2303      	movs	r3, #3
 8013708:	75fb      	strb	r3, [r7, #23]
    break;
 801370a:	e008      	b.n	801371e <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801370c:	2301      	movs	r3, #1
 801370e:	75fb      	strb	r3, [r7, #23]
    break;
 8013710:	e005      	b.n	801371e <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8013712:	2303      	movs	r3, #3
 8013714:	75fb      	strb	r3, [r7, #23]
    break;
 8013716:	e002      	b.n	801371e <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8013718:	2303      	movs	r3, #3
 801371a:	75fb      	strb	r3, [r7, #23]
    break;
 801371c:	bf00      	nop
  }
  return usb_status;
 801371e:	7dfb      	ldrb	r3, [r7, #23]
}
 8013720:	4618      	mov	r0, r3
 8013722:	3718      	adds	r7, #24
 8013724:	46bd      	mov	sp, r7
 8013726:	bd80      	pop	{r7, pc}

08013728 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013728:	b580      	push	{r7, lr}
 801372a:	b082      	sub	sp, #8
 801372c:	af00      	add	r7, sp, #0
 801372e:	6078      	str	r0, [r7, #4]
 8013730:	460b      	mov	r3, r1
 8013732:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8013734:	687b      	ldr	r3, [r7, #4]
 8013736:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801373a:	78fa      	ldrb	r2, [r7, #3]
 801373c:	4611      	mov	r1, r2
 801373e:	4618      	mov	r0, r3
 8013740:	f7f5 fdc5 	bl	80092ce <HAL_PCD_EP_GetRxCount>
 8013744:	4603      	mov	r3, r0
}
 8013746:	4618      	mov	r0, r3
 8013748:	3708      	adds	r7, #8
 801374a:	46bd      	mov	sp, r7
 801374c:	bd80      	pop	{r7, pc}
	...

08013750 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8013750:	b580      	push	{r7, lr}
 8013752:	b082      	sub	sp, #8
 8013754:	af00      	add	r7, sp, #0
 8013756:	6078      	str	r0, [r7, #4]
 8013758:	460b      	mov	r3, r1
 801375a:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 801375c:	78fb      	ldrb	r3, [r7, #3]
 801375e:	2b00      	cmp	r3, #0
 8013760:	d002      	beq.n	8013768 <HAL_PCDEx_LPM_Callback+0x18>
 8013762:	2b01      	cmp	r3, #1
 8013764:	d01f      	beq.n	80137a6 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8013766:	e03b      	b.n	80137e0 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8013768:	687b      	ldr	r3, [r7, #4]
 801376a:	6a1b      	ldr	r3, [r3, #32]
 801376c:	2b00      	cmp	r3, #0
 801376e:	d007      	beq.n	8013780 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8013770:	f000 f854 	bl	801381c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8013774:	4b1c      	ldr	r3, [pc, #112]	; (80137e8 <HAL_PCDEx_LPM_Callback+0x98>)
 8013776:	691b      	ldr	r3, [r3, #16]
 8013778:	4a1b      	ldr	r2, [pc, #108]	; (80137e8 <HAL_PCDEx_LPM_Callback+0x98>)
 801377a:	f023 0306 	bic.w	r3, r3, #6
 801377e:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8013780:	687b      	ldr	r3, [r7, #4]
 8013782:	681b      	ldr	r3, [r3, #0]
 8013784:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013788:	681b      	ldr	r3, [r3, #0]
 801378a:	687a      	ldr	r2, [r7, #4]
 801378c:	6812      	ldr	r2, [r2, #0]
 801378e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8013792:	f023 0301 	bic.w	r3, r3, #1
 8013796:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8013798:	687b      	ldr	r3, [r7, #4]
 801379a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801379e:	4618      	mov	r0, r3
 80137a0:	f7fb fce6 	bl	800f170 <USBD_LL_Resume>
    break;
 80137a4:	e01c      	b.n	80137e0 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80137a6:	687b      	ldr	r3, [r7, #4]
 80137a8:	681b      	ldr	r3, [r3, #0]
 80137aa:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80137ae:	681b      	ldr	r3, [r3, #0]
 80137b0:	687a      	ldr	r2, [r7, #4]
 80137b2:	6812      	ldr	r2, [r2, #0]
 80137b4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80137b8:	f043 0301 	orr.w	r3, r3, #1
 80137bc:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 80137be:	687b      	ldr	r3, [r7, #4]
 80137c0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80137c4:	4618      	mov	r0, r3
 80137c6:	f7fb fcbd 	bl	800f144 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80137ca:	687b      	ldr	r3, [r7, #4]
 80137cc:	6a1b      	ldr	r3, [r3, #32]
 80137ce:	2b00      	cmp	r3, #0
 80137d0:	d005      	beq.n	80137de <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80137d2:	4b05      	ldr	r3, [pc, #20]	; (80137e8 <HAL_PCDEx_LPM_Callback+0x98>)
 80137d4:	691b      	ldr	r3, [r3, #16]
 80137d6:	4a04      	ldr	r2, [pc, #16]	; (80137e8 <HAL_PCDEx_LPM_Callback+0x98>)
 80137d8:	f043 0306 	orr.w	r3, r3, #6
 80137dc:	6113      	str	r3, [r2, #16]
    break;
 80137de:	bf00      	nop
}
 80137e0:	bf00      	nop
 80137e2:	3708      	adds	r7, #8
 80137e4:	46bd      	mov	sp, r7
 80137e6:	bd80      	pop	{r7, pc}
 80137e8:	e000ed00 	.word	0xe000ed00

080137ec <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80137ec:	b480      	push	{r7}
 80137ee:	b083      	sub	sp, #12
 80137f0:	af00      	add	r7, sp, #0
 80137f2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80137f4:	4b03      	ldr	r3, [pc, #12]	; (8013804 <USBD_static_malloc+0x18>)
}
 80137f6:	4618      	mov	r0, r3
 80137f8:	370c      	adds	r7, #12
 80137fa:	46bd      	mov	sp, r7
 80137fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013800:	4770      	bx	lr
 8013802:	bf00      	nop
 8013804:	20009608 	.word	0x20009608

08013808 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8013808:	b480      	push	{r7}
 801380a:	b083      	sub	sp, #12
 801380c:	af00      	add	r7, sp, #0
 801380e:	6078      	str	r0, [r7, #4]

}
 8013810:	bf00      	nop
 8013812:	370c      	adds	r7, #12
 8013814:	46bd      	mov	sp, r7
 8013816:	f85d 7b04 	ldr.w	r7, [sp], #4
 801381a:	4770      	bx	lr

0801381c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 801381c:	b580      	push	{r7, lr}
 801381e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8013820:	f7ef fdd2 	bl	80033c8 <SystemClock_Config>
}
 8013824:	bf00      	nop
 8013826:	bd80      	pop	{r7, pc}

08013828 <expf>:
 8013828:	b508      	push	{r3, lr}
 801382a:	ed2d 8b02 	vpush	{d8}
 801382e:	eef0 8a40 	vmov.f32	s17, s0
 8013832:	f000 f83d 	bl	80138b0 <__ieee754_expf>
 8013836:	eeb0 8a40 	vmov.f32	s16, s0
 801383a:	eeb0 0a68 	vmov.f32	s0, s17
 801383e:	f000 f829 	bl	8013894 <finitef>
 8013842:	b160      	cbz	r0, 801385e <expf+0x36>
 8013844:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8013884 <expf+0x5c>
 8013848:	eef4 8ae7 	vcmpe.f32	s17, s15
 801384c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013850:	dd0a      	ble.n	8013868 <expf+0x40>
 8013852:	f000 ff6b 	bl	801472c <__errno>
 8013856:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 8013888 <expf+0x60>
 801385a:	2322      	movs	r3, #34	; 0x22
 801385c:	6003      	str	r3, [r0, #0]
 801385e:	eeb0 0a48 	vmov.f32	s0, s16
 8013862:	ecbd 8b02 	vpop	{d8}
 8013866:	bd08      	pop	{r3, pc}
 8013868:	eddf 7a08 	vldr	s15, [pc, #32]	; 801388c <expf+0x64>
 801386c:	eef4 8ae7 	vcmpe.f32	s17, s15
 8013870:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013874:	d5f3      	bpl.n	801385e <expf+0x36>
 8013876:	f000 ff59 	bl	801472c <__errno>
 801387a:	2322      	movs	r3, #34	; 0x22
 801387c:	ed9f 8a04 	vldr	s16, [pc, #16]	; 8013890 <expf+0x68>
 8013880:	6003      	str	r3, [r0, #0]
 8013882:	e7ec      	b.n	801385e <expf+0x36>
 8013884:	42b17217 	.word	0x42b17217
 8013888:	7f800000 	.word	0x7f800000
 801388c:	c2cff1b5 	.word	0xc2cff1b5
 8013890:	00000000 	.word	0x00000000

08013894 <finitef>:
 8013894:	b082      	sub	sp, #8
 8013896:	ed8d 0a01 	vstr	s0, [sp, #4]
 801389a:	9801      	ldr	r0, [sp, #4]
 801389c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80138a0:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 80138a4:	bfac      	ite	ge
 80138a6:	2000      	movge	r0, #0
 80138a8:	2001      	movlt	r0, #1
 80138aa:	b002      	add	sp, #8
 80138ac:	4770      	bx	lr
	...

080138b0 <__ieee754_expf>:
 80138b0:	ee10 2a10 	vmov	r2, s0
 80138b4:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 80138b8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80138bc:	d902      	bls.n	80138c4 <__ieee754_expf+0x14>
 80138be:	ee30 0a00 	vadd.f32	s0, s0, s0
 80138c2:	4770      	bx	lr
 80138c4:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 80138c8:	d106      	bne.n	80138d8 <__ieee754_expf+0x28>
 80138ca:	eddf 7a4e 	vldr	s15, [pc, #312]	; 8013a04 <__ieee754_expf+0x154>
 80138ce:	2900      	cmp	r1, #0
 80138d0:	bf18      	it	ne
 80138d2:	eeb0 0a67 	vmovne.f32	s0, s15
 80138d6:	4770      	bx	lr
 80138d8:	484b      	ldr	r0, [pc, #300]	; (8013a08 <__ieee754_expf+0x158>)
 80138da:	4282      	cmp	r2, r0
 80138dc:	dd02      	ble.n	80138e4 <__ieee754_expf+0x34>
 80138de:	2000      	movs	r0, #0
 80138e0:	f000 b8d0 	b.w	8013a84 <__math_oflowf>
 80138e4:	2a00      	cmp	r2, #0
 80138e6:	da05      	bge.n	80138f4 <__ieee754_expf+0x44>
 80138e8:	4a48      	ldr	r2, [pc, #288]	; (8013a0c <__ieee754_expf+0x15c>)
 80138ea:	4293      	cmp	r3, r2
 80138ec:	d902      	bls.n	80138f4 <__ieee754_expf+0x44>
 80138ee:	2000      	movs	r0, #0
 80138f0:	f000 b8c2 	b.w	8013a78 <__math_uflowf>
 80138f4:	4a46      	ldr	r2, [pc, #280]	; (8013a10 <__ieee754_expf+0x160>)
 80138f6:	4293      	cmp	r3, r2
 80138f8:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80138fc:	d952      	bls.n	80139a4 <__ieee754_expf+0xf4>
 80138fe:	4a45      	ldr	r2, [pc, #276]	; (8013a14 <__ieee754_expf+0x164>)
 8013900:	4293      	cmp	r3, r2
 8013902:	ea4f 0281 	mov.w	r2, r1, lsl #2
 8013906:	d834      	bhi.n	8013972 <__ieee754_expf+0xc2>
 8013908:	4b43      	ldr	r3, [pc, #268]	; (8013a18 <__ieee754_expf+0x168>)
 801390a:	4413      	add	r3, r2
 801390c:	ed93 7a00 	vldr	s14, [r3]
 8013910:	4b42      	ldr	r3, [pc, #264]	; (8013a1c <__ieee754_expf+0x16c>)
 8013912:	4413      	add	r3, r2
 8013914:	ee30 7a47 	vsub.f32	s14, s0, s14
 8013918:	f1c1 0201 	rsb	r2, r1, #1
 801391c:	edd3 7a00 	vldr	s15, [r3]
 8013920:	1a52      	subs	r2, r2, r1
 8013922:	ee37 0a67 	vsub.f32	s0, s14, s15
 8013926:	ee20 6a00 	vmul.f32	s12, s0, s0
 801392a:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 8013a20 <__ieee754_expf+0x170>
 801392e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8013a24 <__ieee754_expf+0x174>
 8013932:	eee6 6a05 	vfma.f32	s13, s12, s10
 8013936:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 8013a28 <__ieee754_expf+0x178>
 801393a:	eea6 5a86 	vfma.f32	s10, s13, s12
 801393e:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8013a2c <__ieee754_expf+0x17c>
 8013942:	eee5 6a06 	vfma.f32	s13, s10, s12
 8013946:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 8013a30 <__ieee754_expf+0x180>
 801394a:	eea6 5a86 	vfma.f32	s10, s13, s12
 801394e:	eef0 6a40 	vmov.f32	s13, s0
 8013952:	eee5 6a46 	vfms.f32	s13, s10, s12
 8013956:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 801395a:	ee20 5a26 	vmul.f32	s10, s0, s13
 801395e:	bb92      	cbnz	r2, 80139c6 <__ieee754_expf+0x116>
 8013960:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8013964:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8013968:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801396c:	ee35 0ac0 	vsub.f32	s0, s11, s0
 8013970:	4770      	bx	lr
 8013972:	4b30      	ldr	r3, [pc, #192]	; (8013a34 <__ieee754_expf+0x184>)
 8013974:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8013a38 <__ieee754_expf+0x188>
 8013978:	eddf 6a30 	vldr	s13, [pc, #192]	; 8013a3c <__ieee754_expf+0x18c>
 801397c:	4413      	add	r3, r2
 801397e:	edd3 7a00 	vldr	s15, [r3]
 8013982:	eee0 7a07 	vfma.f32	s15, s0, s14
 8013986:	eeb0 7a40 	vmov.f32	s14, s0
 801398a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801398e:	ee17 2a90 	vmov	r2, s15
 8013992:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013996:	eea7 7ae6 	vfms.f32	s14, s15, s13
 801399a:	eddf 6a29 	vldr	s13, [pc, #164]	; 8013a40 <__ieee754_expf+0x190>
 801399e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80139a2:	e7be      	b.n	8013922 <__ieee754_expf+0x72>
 80139a4:	f1b3 5f50 	cmp.w	r3, #872415232	; 0x34000000
 80139a8:	d20b      	bcs.n	80139c2 <__ieee754_expf+0x112>
 80139aa:	eddf 6a26 	vldr	s13, [pc, #152]	; 8013a44 <__ieee754_expf+0x194>
 80139ae:	ee70 6a26 	vadd.f32	s13, s0, s13
 80139b2:	eef4 6ae5 	vcmpe.f32	s13, s11
 80139b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80139ba:	dd02      	ble.n	80139c2 <__ieee754_expf+0x112>
 80139bc:	ee30 0a25 	vadd.f32	s0, s0, s11
 80139c0:	4770      	bx	lr
 80139c2:	2200      	movs	r2, #0
 80139c4:	e7af      	b.n	8013926 <__ieee754_expf+0x76>
 80139c6:	ee36 6a66 	vsub.f32	s12, s12, s13
 80139ca:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 80139ce:	eec5 6a06 	vdiv.f32	s13, s10, s12
 80139d2:	bfb8      	it	lt
 80139d4:	3264      	addlt	r2, #100	; 0x64
 80139d6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80139da:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80139de:	ee75 7ae7 	vsub.f32	s15, s11, s15
 80139e2:	ee17 3a90 	vmov	r3, s15
 80139e6:	bfab      	itete	ge
 80139e8:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 80139ec:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 80139f0:	ee00 3a10 	vmovge	s0, r3
 80139f4:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 8013a48 <__ieee754_expf+0x198>
 80139f8:	bfbc      	itt	lt
 80139fa:	ee00 3a10 	vmovlt	s0, r3
 80139fe:	ee20 0a27 	vmullt.f32	s0, s0, s15
 8013a02:	4770      	bx	lr
 8013a04:	00000000 	.word	0x00000000
 8013a08:	42b17217 	.word	0x42b17217
 8013a0c:	42cff1b5 	.word	0x42cff1b5
 8013a10:	3eb17218 	.word	0x3eb17218
 8013a14:	3f851591 	.word	0x3f851591
 8013a18:	08016ea4 	.word	0x08016ea4
 8013a1c:	08016eac 	.word	0x08016eac
 8013a20:	3331bb4c 	.word	0x3331bb4c
 8013a24:	b5ddea0e 	.word	0xb5ddea0e
 8013a28:	388ab355 	.word	0x388ab355
 8013a2c:	bb360b61 	.word	0xbb360b61
 8013a30:	3e2aaaab 	.word	0x3e2aaaab
 8013a34:	08016e9c 	.word	0x08016e9c
 8013a38:	3fb8aa3b 	.word	0x3fb8aa3b
 8013a3c:	3f317180 	.word	0x3f317180
 8013a40:	3717f7d1 	.word	0x3717f7d1
 8013a44:	7149f2ca 	.word	0x7149f2ca
 8013a48:	0d800000 	.word	0x0d800000

08013a4c <with_errnof>:
 8013a4c:	b513      	push	{r0, r1, r4, lr}
 8013a4e:	4604      	mov	r4, r0
 8013a50:	ed8d 0a01 	vstr	s0, [sp, #4]
 8013a54:	f000 fe6a 	bl	801472c <__errno>
 8013a58:	ed9d 0a01 	vldr	s0, [sp, #4]
 8013a5c:	6004      	str	r4, [r0, #0]
 8013a5e:	b002      	add	sp, #8
 8013a60:	bd10      	pop	{r4, pc}

08013a62 <xflowf>:
 8013a62:	b130      	cbz	r0, 8013a72 <xflowf+0x10>
 8013a64:	eef1 7a40 	vneg.f32	s15, s0
 8013a68:	ee27 0a80 	vmul.f32	s0, s15, s0
 8013a6c:	2022      	movs	r0, #34	; 0x22
 8013a6e:	f7ff bfed 	b.w	8013a4c <with_errnof>
 8013a72:	eef0 7a40 	vmov.f32	s15, s0
 8013a76:	e7f7      	b.n	8013a68 <xflowf+0x6>

08013a78 <__math_uflowf>:
 8013a78:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8013a80 <__math_uflowf+0x8>
 8013a7c:	f7ff bff1 	b.w	8013a62 <xflowf>
 8013a80:	10000000 	.word	0x10000000

08013a84 <__math_oflowf>:
 8013a84:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8013a8c <__math_oflowf+0x8>
 8013a88:	f7ff bfeb 	b.w	8013a62 <xflowf>
 8013a8c:	70000000 	.word	0x70000000

08013a90 <__cvt>:
 8013a90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013a94:	ec55 4b10 	vmov	r4, r5, d0
 8013a98:	2d00      	cmp	r5, #0
 8013a9a:	460e      	mov	r6, r1
 8013a9c:	4619      	mov	r1, r3
 8013a9e:	462b      	mov	r3, r5
 8013aa0:	bfbb      	ittet	lt
 8013aa2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8013aa6:	461d      	movlt	r5, r3
 8013aa8:	2300      	movge	r3, #0
 8013aaa:	232d      	movlt	r3, #45	; 0x2d
 8013aac:	700b      	strb	r3, [r1, #0]
 8013aae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013ab0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8013ab4:	4691      	mov	r9, r2
 8013ab6:	f023 0820 	bic.w	r8, r3, #32
 8013aba:	bfbc      	itt	lt
 8013abc:	4622      	movlt	r2, r4
 8013abe:	4614      	movlt	r4, r2
 8013ac0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8013ac4:	d005      	beq.n	8013ad2 <__cvt+0x42>
 8013ac6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8013aca:	d100      	bne.n	8013ace <__cvt+0x3e>
 8013acc:	3601      	adds	r6, #1
 8013ace:	2102      	movs	r1, #2
 8013ad0:	e000      	b.n	8013ad4 <__cvt+0x44>
 8013ad2:	2103      	movs	r1, #3
 8013ad4:	ab03      	add	r3, sp, #12
 8013ad6:	9301      	str	r3, [sp, #4]
 8013ad8:	ab02      	add	r3, sp, #8
 8013ada:	9300      	str	r3, [sp, #0]
 8013adc:	ec45 4b10 	vmov	d0, r4, r5
 8013ae0:	4653      	mov	r3, sl
 8013ae2:	4632      	mov	r2, r6
 8013ae4:	f000 fee8 	bl	80148b8 <_dtoa_r>
 8013ae8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8013aec:	4607      	mov	r7, r0
 8013aee:	d102      	bne.n	8013af6 <__cvt+0x66>
 8013af0:	f019 0f01 	tst.w	r9, #1
 8013af4:	d022      	beq.n	8013b3c <__cvt+0xac>
 8013af6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8013afa:	eb07 0906 	add.w	r9, r7, r6
 8013afe:	d110      	bne.n	8013b22 <__cvt+0x92>
 8013b00:	783b      	ldrb	r3, [r7, #0]
 8013b02:	2b30      	cmp	r3, #48	; 0x30
 8013b04:	d10a      	bne.n	8013b1c <__cvt+0x8c>
 8013b06:	2200      	movs	r2, #0
 8013b08:	2300      	movs	r3, #0
 8013b0a:	4620      	mov	r0, r4
 8013b0c:	4629      	mov	r1, r5
 8013b0e:	f7ed f803 	bl	8000b18 <__aeabi_dcmpeq>
 8013b12:	b918      	cbnz	r0, 8013b1c <__cvt+0x8c>
 8013b14:	f1c6 0601 	rsb	r6, r6, #1
 8013b18:	f8ca 6000 	str.w	r6, [sl]
 8013b1c:	f8da 3000 	ldr.w	r3, [sl]
 8013b20:	4499      	add	r9, r3
 8013b22:	2200      	movs	r2, #0
 8013b24:	2300      	movs	r3, #0
 8013b26:	4620      	mov	r0, r4
 8013b28:	4629      	mov	r1, r5
 8013b2a:	f7ec fff5 	bl	8000b18 <__aeabi_dcmpeq>
 8013b2e:	b108      	cbz	r0, 8013b34 <__cvt+0xa4>
 8013b30:	f8cd 900c 	str.w	r9, [sp, #12]
 8013b34:	2230      	movs	r2, #48	; 0x30
 8013b36:	9b03      	ldr	r3, [sp, #12]
 8013b38:	454b      	cmp	r3, r9
 8013b3a:	d307      	bcc.n	8013b4c <__cvt+0xbc>
 8013b3c:	9b03      	ldr	r3, [sp, #12]
 8013b3e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013b40:	1bdb      	subs	r3, r3, r7
 8013b42:	4638      	mov	r0, r7
 8013b44:	6013      	str	r3, [r2, #0]
 8013b46:	b004      	add	sp, #16
 8013b48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013b4c:	1c59      	adds	r1, r3, #1
 8013b4e:	9103      	str	r1, [sp, #12]
 8013b50:	701a      	strb	r2, [r3, #0]
 8013b52:	e7f0      	b.n	8013b36 <__cvt+0xa6>

08013b54 <__exponent>:
 8013b54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013b56:	4603      	mov	r3, r0
 8013b58:	2900      	cmp	r1, #0
 8013b5a:	bfb8      	it	lt
 8013b5c:	4249      	neglt	r1, r1
 8013b5e:	f803 2b02 	strb.w	r2, [r3], #2
 8013b62:	bfb4      	ite	lt
 8013b64:	222d      	movlt	r2, #45	; 0x2d
 8013b66:	222b      	movge	r2, #43	; 0x2b
 8013b68:	2909      	cmp	r1, #9
 8013b6a:	7042      	strb	r2, [r0, #1]
 8013b6c:	dd2a      	ble.n	8013bc4 <__exponent+0x70>
 8013b6e:	f10d 0207 	add.w	r2, sp, #7
 8013b72:	4617      	mov	r7, r2
 8013b74:	260a      	movs	r6, #10
 8013b76:	4694      	mov	ip, r2
 8013b78:	fb91 f5f6 	sdiv	r5, r1, r6
 8013b7c:	fb06 1415 	mls	r4, r6, r5, r1
 8013b80:	3430      	adds	r4, #48	; 0x30
 8013b82:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8013b86:	460c      	mov	r4, r1
 8013b88:	2c63      	cmp	r4, #99	; 0x63
 8013b8a:	f102 32ff 	add.w	r2, r2, #4294967295
 8013b8e:	4629      	mov	r1, r5
 8013b90:	dcf1      	bgt.n	8013b76 <__exponent+0x22>
 8013b92:	3130      	adds	r1, #48	; 0x30
 8013b94:	f1ac 0402 	sub.w	r4, ip, #2
 8013b98:	f802 1c01 	strb.w	r1, [r2, #-1]
 8013b9c:	1c41      	adds	r1, r0, #1
 8013b9e:	4622      	mov	r2, r4
 8013ba0:	42ba      	cmp	r2, r7
 8013ba2:	d30a      	bcc.n	8013bba <__exponent+0x66>
 8013ba4:	f10d 0209 	add.w	r2, sp, #9
 8013ba8:	eba2 020c 	sub.w	r2, r2, ip
 8013bac:	42bc      	cmp	r4, r7
 8013bae:	bf88      	it	hi
 8013bb0:	2200      	movhi	r2, #0
 8013bb2:	4413      	add	r3, r2
 8013bb4:	1a18      	subs	r0, r3, r0
 8013bb6:	b003      	add	sp, #12
 8013bb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013bba:	f812 5b01 	ldrb.w	r5, [r2], #1
 8013bbe:	f801 5f01 	strb.w	r5, [r1, #1]!
 8013bc2:	e7ed      	b.n	8013ba0 <__exponent+0x4c>
 8013bc4:	2330      	movs	r3, #48	; 0x30
 8013bc6:	3130      	adds	r1, #48	; 0x30
 8013bc8:	7083      	strb	r3, [r0, #2]
 8013bca:	70c1      	strb	r1, [r0, #3]
 8013bcc:	1d03      	adds	r3, r0, #4
 8013bce:	e7f1      	b.n	8013bb4 <__exponent+0x60>

08013bd0 <_printf_float>:
 8013bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013bd4:	ed2d 8b02 	vpush	{d8}
 8013bd8:	b08d      	sub	sp, #52	; 0x34
 8013bda:	460c      	mov	r4, r1
 8013bdc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8013be0:	4616      	mov	r6, r2
 8013be2:	461f      	mov	r7, r3
 8013be4:	4605      	mov	r5, r0
 8013be6:	f000 fd01 	bl	80145ec <_localeconv_r>
 8013bea:	f8d0 a000 	ldr.w	sl, [r0]
 8013bee:	4650      	mov	r0, sl
 8013bf0:	f7ec fb66 	bl	80002c0 <strlen>
 8013bf4:	2300      	movs	r3, #0
 8013bf6:	930a      	str	r3, [sp, #40]	; 0x28
 8013bf8:	6823      	ldr	r3, [r4, #0]
 8013bfa:	9305      	str	r3, [sp, #20]
 8013bfc:	f8d8 3000 	ldr.w	r3, [r8]
 8013c00:	f894 b018 	ldrb.w	fp, [r4, #24]
 8013c04:	3307      	adds	r3, #7
 8013c06:	f023 0307 	bic.w	r3, r3, #7
 8013c0a:	f103 0208 	add.w	r2, r3, #8
 8013c0e:	f8c8 2000 	str.w	r2, [r8]
 8013c12:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013c16:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8013c1a:	9307      	str	r3, [sp, #28]
 8013c1c:	f8cd 8018 	str.w	r8, [sp, #24]
 8013c20:	ee08 0a10 	vmov	s16, r0
 8013c24:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8013c28:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013c2c:	4b9e      	ldr	r3, [pc, #632]	; (8013ea8 <_printf_float+0x2d8>)
 8013c2e:	f04f 32ff 	mov.w	r2, #4294967295
 8013c32:	f7ec ffa3 	bl	8000b7c <__aeabi_dcmpun>
 8013c36:	bb88      	cbnz	r0, 8013c9c <_printf_float+0xcc>
 8013c38:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013c3c:	4b9a      	ldr	r3, [pc, #616]	; (8013ea8 <_printf_float+0x2d8>)
 8013c3e:	f04f 32ff 	mov.w	r2, #4294967295
 8013c42:	f7ec ff7d 	bl	8000b40 <__aeabi_dcmple>
 8013c46:	bb48      	cbnz	r0, 8013c9c <_printf_float+0xcc>
 8013c48:	2200      	movs	r2, #0
 8013c4a:	2300      	movs	r3, #0
 8013c4c:	4640      	mov	r0, r8
 8013c4e:	4649      	mov	r1, r9
 8013c50:	f7ec ff6c 	bl	8000b2c <__aeabi_dcmplt>
 8013c54:	b110      	cbz	r0, 8013c5c <_printf_float+0x8c>
 8013c56:	232d      	movs	r3, #45	; 0x2d
 8013c58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013c5c:	4a93      	ldr	r2, [pc, #588]	; (8013eac <_printf_float+0x2dc>)
 8013c5e:	4b94      	ldr	r3, [pc, #592]	; (8013eb0 <_printf_float+0x2e0>)
 8013c60:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8013c64:	bf94      	ite	ls
 8013c66:	4690      	movls	r8, r2
 8013c68:	4698      	movhi	r8, r3
 8013c6a:	2303      	movs	r3, #3
 8013c6c:	6123      	str	r3, [r4, #16]
 8013c6e:	9b05      	ldr	r3, [sp, #20]
 8013c70:	f023 0304 	bic.w	r3, r3, #4
 8013c74:	6023      	str	r3, [r4, #0]
 8013c76:	f04f 0900 	mov.w	r9, #0
 8013c7a:	9700      	str	r7, [sp, #0]
 8013c7c:	4633      	mov	r3, r6
 8013c7e:	aa0b      	add	r2, sp, #44	; 0x2c
 8013c80:	4621      	mov	r1, r4
 8013c82:	4628      	mov	r0, r5
 8013c84:	f000 f9da 	bl	801403c <_printf_common>
 8013c88:	3001      	adds	r0, #1
 8013c8a:	f040 8090 	bne.w	8013dae <_printf_float+0x1de>
 8013c8e:	f04f 30ff 	mov.w	r0, #4294967295
 8013c92:	b00d      	add	sp, #52	; 0x34
 8013c94:	ecbd 8b02 	vpop	{d8}
 8013c98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c9c:	4642      	mov	r2, r8
 8013c9e:	464b      	mov	r3, r9
 8013ca0:	4640      	mov	r0, r8
 8013ca2:	4649      	mov	r1, r9
 8013ca4:	f7ec ff6a 	bl	8000b7c <__aeabi_dcmpun>
 8013ca8:	b140      	cbz	r0, 8013cbc <_printf_float+0xec>
 8013caa:	464b      	mov	r3, r9
 8013cac:	2b00      	cmp	r3, #0
 8013cae:	bfbc      	itt	lt
 8013cb0:	232d      	movlt	r3, #45	; 0x2d
 8013cb2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8013cb6:	4a7f      	ldr	r2, [pc, #508]	; (8013eb4 <_printf_float+0x2e4>)
 8013cb8:	4b7f      	ldr	r3, [pc, #508]	; (8013eb8 <_printf_float+0x2e8>)
 8013cba:	e7d1      	b.n	8013c60 <_printf_float+0x90>
 8013cbc:	6863      	ldr	r3, [r4, #4]
 8013cbe:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8013cc2:	9206      	str	r2, [sp, #24]
 8013cc4:	1c5a      	adds	r2, r3, #1
 8013cc6:	d13f      	bne.n	8013d48 <_printf_float+0x178>
 8013cc8:	2306      	movs	r3, #6
 8013cca:	6063      	str	r3, [r4, #4]
 8013ccc:	9b05      	ldr	r3, [sp, #20]
 8013cce:	6861      	ldr	r1, [r4, #4]
 8013cd0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8013cd4:	2300      	movs	r3, #0
 8013cd6:	9303      	str	r3, [sp, #12]
 8013cd8:	ab0a      	add	r3, sp, #40	; 0x28
 8013cda:	e9cd b301 	strd	fp, r3, [sp, #4]
 8013cde:	ab09      	add	r3, sp, #36	; 0x24
 8013ce0:	ec49 8b10 	vmov	d0, r8, r9
 8013ce4:	9300      	str	r3, [sp, #0]
 8013ce6:	6022      	str	r2, [r4, #0]
 8013ce8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8013cec:	4628      	mov	r0, r5
 8013cee:	f7ff fecf 	bl	8013a90 <__cvt>
 8013cf2:	9b06      	ldr	r3, [sp, #24]
 8013cf4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013cf6:	2b47      	cmp	r3, #71	; 0x47
 8013cf8:	4680      	mov	r8, r0
 8013cfa:	d108      	bne.n	8013d0e <_printf_float+0x13e>
 8013cfc:	1cc8      	adds	r0, r1, #3
 8013cfe:	db02      	blt.n	8013d06 <_printf_float+0x136>
 8013d00:	6863      	ldr	r3, [r4, #4]
 8013d02:	4299      	cmp	r1, r3
 8013d04:	dd41      	ble.n	8013d8a <_printf_float+0x1ba>
 8013d06:	f1ab 0302 	sub.w	r3, fp, #2
 8013d0a:	fa5f fb83 	uxtb.w	fp, r3
 8013d0e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8013d12:	d820      	bhi.n	8013d56 <_printf_float+0x186>
 8013d14:	3901      	subs	r1, #1
 8013d16:	465a      	mov	r2, fp
 8013d18:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8013d1c:	9109      	str	r1, [sp, #36]	; 0x24
 8013d1e:	f7ff ff19 	bl	8013b54 <__exponent>
 8013d22:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013d24:	1813      	adds	r3, r2, r0
 8013d26:	2a01      	cmp	r2, #1
 8013d28:	4681      	mov	r9, r0
 8013d2a:	6123      	str	r3, [r4, #16]
 8013d2c:	dc02      	bgt.n	8013d34 <_printf_float+0x164>
 8013d2e:	6822      	ldr	r2, [r4, #0]
 8013d30:	07d2      	lsls	r2, r2, #31
 8013d32:	d501      	bpl.n	8013d38 <_printf_float+0x168>
 8013d34:	3301      	adds	r3, #1
 8013d36:	6123      	str	r3, [r4, #16]
 8013d38:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8013d3c:	2b00      	cmp	r3, #0
 8013d3e:	d09c      	beq.n	8013c7a <_printf_float+0xaa>
 8013d40:	232d      	movs	r3, #45	; 0x2d
 8013d42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013d46:	e798      	b.n	8013c7a <_printf_float+0xaa>
 8013d48:	9a06      	ldr	r2, [sp, #24]
 8013d4a:	2a47      	cmp	r2, #71	; 0x47
 8013d4c:	d1be      	bne.n	8013ccc <_printf_float+0xfc>
 8013d4e:	2b00      	cmp	r3, #0
 8013d50:	d1bc      	bne.n	8013ccc <_printf_float+0xfc>
 8013d52:	2301      	movs	r3, #1
 8013d54:	e7b9      	b.n	8013cca <_printf_float+0xfa>
 8013d56:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8013d5a:	d118      	bne.n	8013d8e <_printf_float+0x1be>
 8013d5c:	2900      	cmp	r1, #0
 8013d5e:	6863      	ldr	r3, [r4, #4]
 8013d60:	dd0b      	ble.n	8013d7a <_printf_float+0x1aa>
 8013d62:	6121      	str	r1, [r4, #16]
 8013d64:	b913      	cbnz	r3, 8013d6c <_printf_float+0x19c>
 8013d66:	6822      	ldr	r2, [r4, #0]
 8013d68:	07d0      	lsls	r0, r2, #31
 8013d6a:	d502      	bpl.n	8013d72 <_printf_float+0x1a2>
 8013d6c:	3301      	adds	r3, #1
 8013d6e:	440b      	add	r3, r1
 8013d70:	6123      	str	r3, [r4, #16]
 8013d72:	65a1      	str	r1, [r4, #88]	; 0x58
 8013d74:	f04f 0900 	mov.w	r9, #0
 8013d78:	e7de      	b.n	8013d38 <_printf_float+0x168>
 8013d7a:	b913      	cbnz	r3, 8013d82 <_printf_float+0x1b2>
 8013d7c:	6822      	ldr	r2, [r4, #0]
 8013d7e:	07d2      	lsls	r2, r2, #31
 8013d80:	d501      	bpl.n	8013d86 <_printf_float+0x1b6>
 8013d82:	3302      	adds	r3, #2
 8013d84:	e7f4      	b.n	8013d70 <_printf_float+0x1a0>
 8013d86:	2301      	movs	r3, #1
 8013d88:	e7f2      	b.n	8013d70 <_printf_float+0x1a0>
 8013d8a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8013d8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013d90:	4299      	cmp	r1, r3
 8013d92:	db05      	blt.n	8013da0 <_printf_float+0x1d0>
 8013d94:	6823      	ldr	r3, [r4, #0]
 8013d96:	6121      	str	r1, [r4, #16]
 8013d98:	07d8      	lsls	r0, r3, #31
 8013d9a:	d5ea      	bpl.n	8013d72 <_printf_float+0x1a2>
 8013d9c:	1c4b      	adds	r3, r1, #1
 8013d9e:	e7e7      	b.n	8013d70 <_printf_float+0x1a0>
 8013da0:	2900      	cmp	r1, #0
 8013da2:	bfd4      	ite	le
 8013da4:	f1c1 0202 	rsble	r2, r1, #2
 8013da8:	2201      	movgt	r2, #1
 8013daa:	4413      	add	r3, r2
 8013dac:	e7e0      	b.n	8013d70 <_printf_float+0x1a0>
 8013dae:	6823      	ldr	r3, [r4, #0]
 8013db0:	055a      	lsls	r2, r3, #21
 8013db2:	d407      	bmi.n	8013dc4 <_printf_float+0x1f4>
 8013db4:	6923      	ldr	r3, [r4, #16]
 8013db6:	4642      	mov	r2, r8
 8013db8:	4631      	mov	r1, r6
 8013dba:	4628      	mov	r0, r5
 8013dbc:	47b8      	blx	r7
 8013dbe:	3001      	adds	r0, #1
 8013dc0:	d12c      	bne.n	8013e1c <_printf_float+0x24c>
 8013dc2:	e764      	b.n	8013c8e <_printf_float+0xbe>
 8013dc4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8013dc8:	f240 80e0 	bls.w	8013f8c <_printf_float+0x3bc>
 8013dcc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8013dd0:	2200      	movs	r2, #0
 8013dd2:	2300      	movs	r3, #0
 8013dd4:	f7ec fea0 	bl	8000b18 <__aeabi_dcmpeq>
 8013dd8:	2800      	cmp	r0, #0
 8013dda:	d034      	beq.n	8013e46 <_printf_float+0x276>
 8013ddc:	4a37      	ldr	r2, [pc, #220]	; (8013ebc <_printf_float+0x2ec>)
 8013dde:	2301      	movs	r3, #1
 8013de0:	4631      	mov	r1, r6
 8013de2:	4628      	mov	r0, r5
 8013de4:	47b8      	blx	r7
 8013de6:	3001      	adds	r0, #1
 8013de8:	f43f af51 	beq.w	8013c8e <_printf_float+0xbe>
 8013dec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013df0:	429a      	cmp	r2, r3
 8013df2:	db02      	blt.n	8013dfa <_printf_float+0x22a>
 8013df4:	6823      	ldr	r3, [r4, #0]
 8013df6:	07d8      	lsls	r0, r3, #31
 8013df8:	d510      	bpl.n	8013e1c <_printf_float+0x24c>
 8013dfa:	ee18 3a10 	vmov	r3, s16
 8013dfe:	4652      	mov	r2, sl
 8013e00:	4631      	mov	r1, r6
 8013e02:	4628      	mov	r0, r5
 8013e04:	47b8      	blx	r7
 8013e06:	3001      	adds	r0, #1
 8013e08:	f43f af41 	beq.w	8013c8e <_printf_float+0xbe>
 8013e0c:	f04f 0800 	mov.w	r8, #0
 8013e10:	f104 091a 	add.w	r9, r4, #26
 8013e14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013e16:	3b01      	subs	r3, #1
 8013e18:	4543      	cmp	r3, r8
 8013e1a:	dc09      	bgt.n	8013e30 <_printf_float+0x260>
 8013e1c:	6823      	ldr	r3, [r4, #0]
 8013e1e:	079b      	lsls	r3, r3, #30
 8013e20:	f100 8107 	bmi.w	8014032 <_printf_float+0x462>
 8013e24:	68e0      	ldr	r0, [r4, #12]
 8013e26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013e28:	4298      	cmp	r0, r3
 8013e2a:	bfb8      	it	lt
 8013e2c:	4618      	movlt	r0, r3
 8013e2e:	e730      	b.n	8013c92 <_printf_float+0xc2>
 8013e30:	2301      	movs	r3, #1
 8013e32:	464a      	mov	r2, r9
 8013e34:	4631      	mov	r1, r6
 8013e36:	4628      	mov	r0, r5
 8013e38:	47b8      	blx	r7
 8013e3a:	3001      	adds	r0, #1
 8013e3c:	f43f af27 	beq.w	8013c8e <_printf_float+0xbe>
 8013e40:	f108 0801 	add.w	r8, r8, #1
 8013e44:	e7e6      	b.n	8013e14 <_printf_float+0x244>
 8013e46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013e48:	2b00      	cmp	r3, #0
 8013e4a:	dc39      	bgt.n	8013ec0 <_printf_float+0x2f0>
 8013e4c:	4a1b      	ldr	r2, [pc, #108]	; (8013ebc <_printf_float+0x2ec>)
 8013e4e:	2301      	movs	r3, #1
 8013e50:	4631      	mov	r1, r6
 8013e52:	4628      	mov	r0, r5
 8013e54:	47b8      	blx	r7
 8013e56:	3001      	adds	r0, #1
 8013e58:	f43f af19 	beq.w	8013c8e <_printf_float+0xbe>
 8013e5c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8013e60:	4313      	orrs	r3, r2
 8013e62:	d102      	bne.n	8013e6a <_printf_float+0x29a>
 8013e64:	6823      	ldr	r3, [r4, #0]
 8013e66:	07d9      	lsls	r1, r3, #31
 8013e68:	d5d8      	bpl.n	8013e1c <_printf_float+0x24c>
 8013e6a:	ee18 3a10 	vmov	r3, s16
 8013e6e:	4652      	mov	r2, sl
 8013e70:	4631      	mov	r1, r6
 8013e72:	4628      	mov	r0, r5
 8013e74:	47b8      	blx	r7
 8013e76:	3001      	adds	r0, #1
 8013e78:	f43f af09 	beq.w	8013c8e <_printf_float+0xbe>
 8013e7c:	f04f 0900 	mov.w	r9, #0
 8013e80:	f104 0a1a 	add.w	sl, r4, #26
 8013e84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013e86:	425b      	negs	r3, r3
 8013e88:	454b      	cmp	r3, r9
 8013e8a:	dc01      	bgt.n	8013e90 <_printf_float+0x2c0>
 8013e8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013e8e:	e792      	b.n	8013db6 <_printf_float+0x1e6>
 8013e90:	2301      	movs	r3, #1
 8013e92:	4652      	mov	r2, sl
 8013e94:	4631      	mov	r1, r6
 8013e96:	4628      	mov	r0, r5
 8013e98:	47b8      	blx	r7
 8013e9a:	3001      	adds	r0, #1
 8013e9c:	f43f aef7 	beq.w	8013c8e <_printf_float+0xbe>
 8013ea0:	f109 0901 	add.w	r9, r9, #1
 8013ea4:	e7ee      	b.n	8013e84 <_printf_float+0x2b4>
 8013ea6:	bf00      	nop
 8013ea8:	7fefffff 	.word	0x7fefffff
 8013eac:	08016eb4 	.word	0x08016eb4
 8013eb0:	08016eb8 	.word	0x08016eb8
 8013eb4:	08016ebc 	.word	0x08016ebc
 8013eb8:	08016ec0 	.word	0x08016ec0
 8013ebc:	08016ec4 	.word	0x08016ec4
 8013ec0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013ec2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013ec4:	429a      	cmp	r2, r3
 8013ec6:	bfa8      	it	ge
 8013ec8:	461a      	movge	r2, r3
 8013eca:	2a00      	cmp	r2, #0
 8013ecc:	4691      	mov	r9, r2
 8013ece:	dc37      	bgt.n	8013f40 <_printf_float+0x370>
 8013ed0:	f04f 0b00 	mov.w	fp, #0
 8013ed4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013ed8:	f104 021a 	add.w	r2, r4, #26
 8013edc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013ede:	9305      	str	r3, [sp, #20]
 8013ee0:	eba3 0309 	sub.w	r3, r3, r9
 8013ee4:	455b      	cmp	r3, fp
 8013ee6:	dc33      	bgt.n	8013f50 <_printf_float+0x380>
 8013ee8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013eec:	429a      	cmp	r2, r3
 8013eee:	db3b      	blt.n	8013f68 <_printf_float+0x398>
 8013ef0:	6823      	ldr	r3, [r4, #0]
 8013ef2:	07da      	lsls	r2, r3, #31
 8013ef4:	d438      	bmi.n	8013f68 <_printf_float+0x398>
 8013ef6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8013efa:	eba2 0903 	sub.w	r9, r2, r3
 8013efe:	9b05      	ldr	r3, [sp, #20]
 8013f00:	1ad2      	subs	r2, r2, r3
 8013f02:	4591      	cmp	r9, r2
 8013f04:	bfa8      	it	ge
 8013f06:	4691      	movge	r9, r2
 8013f08:	f1b9 0f00 	cmp.w	r9, #0
 8013f0c:	dc35      	bgt.n	8013f7a <_printf_float+0x3aa>
 8013f0e:	f04f 0800 	mov.w	r8, #0
 8013f12:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013f16:	f104 0a1a 	add.w	sl, r4, #26
 8013f1a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013f1e:	1a9b      	subs	r3, r3, r2
 8013f20:	eba3 0309 	sub.w	r3, r3, r9
 8013f24:	4543      	cmp	r3, r8
 8013f26:	f77f af79 	ble.w	8013e1c <_printf_float+0x24c>
 8013f2a:	2301      	movs	r3, #1
 8013f2c:	4652      	mov	r2, sl
 8013f2e:	4631      	mov	r1, r6
 8013f30:	4628      	mov	r0, r5
 8013f32:	47b8      	blx	r7
 8013f34:	3001      	adds	r0, #1
 8013f36:	f43f aeaa 	beq.w	8013c8e <_printf_float+0xbe>
 8013f3a:	f108 0801 	add.w	r8, r8, #1
 8013f3e:	e7ec      	b.n	8013f1a <_printf_float+0x34a>
 8013f40:	4613      	mov	r3, r2
 8013f42:	4631      	mov	r1, r6
 8013f44:	4642      	mov	r2, r8
 8013f46:	4628      	mov	r0, r5
 8013f48:	47b8      	blx	r7
 8013f4a:	3001      	adds	r0, #1
 8013f4c:	d1c0      	bne.n	8013ed0 <_printf_float+0x300>
 8013f4e:	e69e      	b.n	8013c8e <_printf_float+0xbe>
 8013f50:	2301      	movs	r3, #1
 8013f52:	4631      	mov	r1, r6
 8013f54:	4628      	mov	r0, r5
 8013f56:	9205      	str	r2, [sp, #20]
 8013f58:	47b8      	blx	r7
 8013f5a:	3001      	adds	r0, #1
 8013f5c:	f43f ae97 	beq.w	8013c8e <_printf_float+0xbe>
 8013f60:	9a05      	ldr	r2, [sp, #20]
 8013f62:	f10b 0b01 	add.w	fp, fp, #1
 8013f66:	e7b9      	b.n	8013edc <_printf_float+0x30c>
 8013f68:	ee18 3a10 	vmov	r3, s16
 8013f6c:	4652      	mov	r2, sl
 8013f6e:	4631      	mov	r1, r6
 8013f70:	4628      	mov	r0, r5
 8013f72:	47b8      	blx	r7
 8013f74:	3001      	adds	r0, #1
 8013f76:	d1be      	bne.n	8013ef6 <_printf_float+0x326>
 8013f78:	e689      	b.n	8013c8e <_printf_float+0xbe>
 8013f7a:	9a05      	ldr	r2, [sp, #20]
 8013f7c:	464b      	mov	r3, r9
 8013f7e:	4442      	add	r2, r8
 8013f80:	4631      	mov	r1, r6
 8013f82:	4628      	mov	r0, r5
 8013f84:	47b8      	blx	r7
 8013f86:	3001      	adds	r0, #1
 8013f88:	d1c1      	bne.n	8013f0e <_printf_float+0x33e>
 8013f8a:	e680      	b.n	8013c8e <_printf_float+0xbe>
 8013f8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013f8e:	2a01      	cmp	r2, #1
 8013f90:	dc01      	bgt.n	8013f96 <_printf_float+0x3c6>
 8013f92:	07db      	lsls	r3, r3, #31
 8013f94:	d53a      	bpl.n	801400c <_printf_float+0x43c>
 8013f96:	2301      	movs	r3, #1
 8013f98:	4642      	mov	r2, r8
 8013f9a:	4631      	mov	r1, r6
 8013f9c:	4628      	mov	r0, r5
 8013f9e:	47b8      	blx	r7
 8013fa0:	3001      	adds	r0, #1
 8013fa2:	f43f ae74 	beq.w	8013c8e <_printf_float+0xbe>
 8013fa6:	ee18 3a10 	vmov	r3, s16
 8013faa:	4652      	mov	r2, sl
 8013fac:	4631      	mov	r1, r6
 8013fae:	4628      	mov	r0, r5
 8013fb0:	47b8      	blx	r7
 8013fb2:	3001      	adds	r0, #1
 8013fb4:	f43f ae6b 	beq.w	8013c8e <_printf_float+0xbe>
 8013fb8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8013fbc:	2200      	movs	r2, #0
 8013fbe:	2300      	movs	r3, #0
 8013fc0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8013fc4:	f7ec fda8 	bl	8000b18 <__aeabi_dcmpeq>
 8013fc8:	b9d8      	cbnz	r0, 8014002 <_printf_float+0x432>
 8013fca:	f10a 33ff 	add.w	r3, sl, #4294967295
 8013fce:	f108 0201 	add.w	r2, r8, #1
 8013fd2:	4631      	mov	r1, r6
 8013fd4:	4628      	mov	r0, r5
 8013fd6:	47b8      	blx	r7
 8013fd8:	3001      	adds	r0, #1
 8013fda:	d10e      	bne.n	8013ffa <_printf_float+0x42a>
 8013fdc:	e657      	b.n	8013c8e <_printf_float+0xbe>
 8013fde:	2301      	movs	r3, #1
 8013fe0:	4652      	mov	r2, sl
 8013fe2:	4631      	mov	r1, r6
 8013fe4:	4628      	mov	r0, r5
 8013fe6:	47b8      	blx	r7
 8013fe8:	3001      	adds	r0, #1
 8013fea:	f43f ae50 	beq.w	8013c8e <_printf_float+0xbe>
 8013fee:	f108 0801 	add.w	r8, r8, #1
 8013ff2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013ff4:	3b01      	subs	r3, #1
 8013ff6:	4543      	cmp	r3, r8
 8013ff8:	dcf1      	bgt.n	8013fde <_printf_float+0x40e>
 8013ffa:	464b      	mov	r3, r9
 8013ffc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8014000:	e6da      	b.n	8013db8 <_printf_float+0x1e8>
 8014002:	f04f 0800 	mov.w	r8, #0
 8014006:	f104 0a1a 	add.w	sl, r4, #26
 801400a:	e7f2      	b.n	8013ff2 <_printf_float+0x422>
 801400c:	2301      	movs	r3, #1
 801400e:	4642      	mov	r2, r8
 8014010:	e7df      	b.n	8013fd2 <_printf_float+0x402>
 8014012:	2301      	movs	r3, #1
 8014014:	464a      	mov	r2, r9
 8014016:	4631      	mov	r1, r6
 8014018:	4628      	mov	r0, r5
 801401a:	47b8      	blx	r7
 801401c:	3001      	adds	r0, #1
 801401e:	f43f ae36 	beq.w	8013c8e <_printf_float+0xbe>
 8014022:	f108 0801 	add.w	r8, r8, #1
 8014026:	68e3      	ldr	r3, [r4, #12]
 8014028:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801402a:	1a5b      	subs	r3, r3, r1
 801402c:	4543      	cmp	r3, r8
 801402e:	dcf0      	bgt.n	8014012 <_printf_float+0x442>
 8014030:	e6f8      	b.n	8013e24 <_printf_float+0x254>
 8014032:	f04f 0800 	mov.w	r8, #0
 8014036:	f104 0919 	add.w	r9, r4, #25
 801403a:	e7f4      	b.n	8014026 <_printf_float+0x456>

0801403c <_printf_common>:
 801403c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014040:	4616      	mov	r6, r2
 8014042:	4699      	mov	r9, r3
 8014044:	688a      	ldr	r2, [r1, #8]
 8014046:	690b      	ldr	r3, [r1, #16]
 8014048:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801404c:	4293      	cmp	r3, r2
 801404e:	bfb8      	it	lt
 8014050:	4613      	movlt	r3, r2
 8014052:	6033      	str	r3, [r6, #0]
 8014054:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014058:	4607      	mov	r7, r0
 801405a:	460c      	mov	r4, r1
 801405c:	b10a      	cbz	r2, 8014062 <_printf_common+0x26>
 801405e:	3301      	adds	r3, #1
 8014060:	6033      	str	r3, [r6, #0]
 8014062:	6823      	ldr	r3, [r4, #0]
 8014064:	0699      	lsls	r1, r3, #26
 8014066:	bf42      	ittt	mi
 8014068:	6833      	ldrmi	r3, [r6, #0]
 801406a:	3302      	addmi	r3, #2
 801406c:	6033      	strmi	r3, [r6, #0]
 801406e:	6825      	ldr	r5, [r4, #0]
 8014070:	f015 0506 	ands.w	r5, r5, #6
 8014074:	d106      	bne.n	8014084 <_printf_common+0x48>
 8014076:	f104 0a19 	add.w	sl, r4, #25
 801407a:	68e3      	ldr	r3, [r4, #12]
 801407c:	6832      	ldr	r2, [r6, #0]
 801407e:	1a9b      	subs	r3, r3, r2
 8014080:	42ab      	cmp	r3, r5
 8014082:	dc26      	bgt.n	80140d2 <_printf_common+0x96>
 8014084:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8014088:	1e13      	subs	r3, r2, #0
 801408a:	6822      	ldr	r2, [r4, #0]
 801408c:	bf18      	it	ne
 801408e:	2301      	movne	r3, #1
 8014090:	0692      	lsls	r2, r2, #26
 8014092:	d42b      	bmi.n	80140ec <_printf_common+0xb0>
 8014094:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014098:	4649      	mov	r1, r9
 801409a:	4638      	mov	r0, r7
 801409c:	47c0      	blx	r8
 801409e:	3001      	adds	r0, #1
 80140a0:	d01e      	beq.n	80140e0 <_printf_common+0xa4>
 80140a2:	6823      	ldr	r3, [r4, #0]
 80140a4:	6922      	ldr	r2, [r4, #16]
 80140a6:	f003 0306 	and.w	r3, r3, #6
 80140aa:	2b04      	cmp	r3, #4
 80140ac:	bf02      	ittt	eq
 80140ae:	68e5      	ldreq	r5, [r4, #12]
 80140b0:	6833      	ldreq	r3, [r6, #0]
 80140b2:	1aed      	subeq	r5, r5, r3
 80140b4:	68a3      	ldr	r3, [r4, #8]
 80140b6:	bf0c      	ite	eq
 80140b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80140bc:	2500      	movne	r5, #0
 80140be:	4293      	cmp	r3, r2
 80140c0:	bfc4      	itt	gt
 80140c2:	1a9b      	subgt	r3, r3, r2
 80140c4:	18ed      	addgt	r5, r5, r3
 80140c6:	2600      	movs	r6, #0
 80140c8:	341a      	adds	r4, #26
 80140ca:	42b5      	cmp	r5, r6
 80140cc:	d11a      	bne.n	8014104 <_printf_common+0xc8>
 80140ce:	2000      	movs	r0, #0
 80140d0:	e008      	b.n	80140e4 <_printf_common+0xa8>
 80140d2:	2301      	movs	r3, #1
 80140d4:	4652      	mov	r2, sl
 80140d6:	4649      	mov	r1, r9
 80140d8:	4638      	mov	r0, r7
 80140da:	47c0      	blx	r8
 80140dc:	3001      	adds	r0, #1
 80140de:	d103      	bne.n	80140e8 <_printf_common+0xac>
 80140e0:	f04f 30ff 	mov.w	r0, #4294967295
 80140e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80140e8:	3501      	adds	r5, #1
 80140ea:	e7c6      	b.n	801407a <_printf_common+0x3e>
 80140ec:	18e1      	adds	r1, r4, r3
 80140ee:	1c5a      	adds	r2, r3, #1
 80140f0:	2030      	movs	r0, #48	; 0x30
 80140f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80140f6:	4422      	add	r2, r4
 80140f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80140fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014100:	3302      	adds	r3, #2
 8014102:	e7c7      	b.n	8014094 <_printf_common+0x58>
 8014104:	2301      	movs	r3, #1
 8014106:	4622      	mov	r2, r4
 8014108:	4649      	mov	r1, r9
 801410a:	4638      	mov	r0, r7
 801410c:	47c0      	blx	r8
 801410e:	3001      	adds	r0, #1
 8014110:	d0e6      	beq.n	80140e0 <_printf_common+0xa4>
 8014112:	3601      	adds	r6, #1
 8014114:	e7d9      	b.n	80140ca <_printf_common+0x8e>
	...

08014118 <_printf_i>:
 8014118:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801411c:	7e0f      	ldrb	r7, [r1, #24]
 801411e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8014120:	2f78      	cmp	r7, #120	; 0x78
 8014122:	4691      	mov	r9, r2
 8014124:	4680      	mov	r8, r0
 8014126:	460c      	mov	r4, r1
 8014128:	469a      	mov	sl, r3
 801412a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801412e:	d807      	bhi.n	8014140 <_printf_i+0x28>
 8014130:	2f62      	cmp	r7, #98	; 0x62
 8014132:	d80a      	bhi.n	801414a <_printf_i+0x32>
 8014134:	2f00      	cmp	r7, #0
 8014136:	f000 80d4 	beq.w	80142e2 <_printf_i+0x1ca>
 801413a:	2f58      	cmp	r7, #88	; 0x58
 801413c:	f000 80c0 	beq.w	80142c0 <_printf_i+0x1a8>
 8014140:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014144:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8014148:	e03a      	b.n	80141c0 <_printf_i+0xa8>
 801414a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801414e:	2b15      	cmp	r3, #21
 8014150:	d8f6      	bhi.n	8014140 <_printf_i+0x28>
 8014152:	a101      	add	r1, pc, #4	; (adr r1, 8014158 <_printf_i+0x40>)
 8014154:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014158:	080141b1 	.word	0x080141b1
 801415c:	080141c5 	.word	0x080141c5
 8014160:	08014141 	.word	0x08014141
 8014164:	08014141 	.word	0x08014141
 8014168:	08014141 	.word	0x08014141
 801416c:	08014141 	.word	0x08014141
 8014170:	080141c5 	.word	0x080141c5
 8014174:	08014141 	.word	0x08014141
 8014178:	08014141 	.word	0x08014141
 801417c:	08014141 	.word	0x08014141
 8014180:	08014141 	.word	0x08014141
 8014184:	080142c9 	.word	0x080142c9
 8014188:	080141f1 	.word	0x080141f1
 801418c:	08014283 	.word	0x08014283
 8014190:	08014141 	.word	0x08014141
 8014194:	08014141 	.word	0x08014141
 8014198:	080142eb 	.word	0x080142eb
 801419c:	08014141 	.word	0x08014141
 80141a0:	080141f1 	.word	0x080141f1
 80141a4:	08014141 	.word	0x08014141
 80141a8:	08014141 	.word	0x08014141
 80141ac:	0801428b 	.word	0x0801428b
 80141b0:	682b      	ldr	r3, [r5, #0]
 80141b2:	1d1a      	adds	r2, r3, #4
 80141b4:	681b      	ldr	r3, [r3, #0]
 80141b6:	602a      	str	r2, [r5, #0]
 80141b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80141bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80141c0:	2301      	movs	r3, #1
 80141c2:	e09f      	b.n	8014304 <_printf_i+0x1ec>
 80141c4:	6820      	ldr	r0, [r4, #0]
 80141c6:	682b      	ldr	r3, [r5, #0]
 80141c8:	0607      	lsls	r7, r0, #24
 80141ca:	f103 0104 	add.w	r1, r3, #4
 80141ce:	6029      	str	r1, [r5, #0]
 80141d0:	d501      	bpl.n	80141d6 <_printf_i+0xbe>
 80141d2:	681e      	ldr	r6, [r3, #0]
 80141d4:	e003      	b.n	80141de <_printf_i+0xc6>
 80141d6:	0646      	lsls	r6, r0, #25
 80141d8:	d5fb      	bpl.n	80141d2 <_printf_i+0xba>
 80141da:	f9b3 6000 	ldrsh.w	r6, [r3]
 80141de:	2e00      	cmp	r6, #0
 80141e0:	da03      	bge.n	80141ea <_printf_i+0xd2>
 80141e2:	232d      	movs	r3, #45	; 0x2d
 80141e4:	4276      	negs	r6, r6
 80141e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80141ea:	485a      	ldr	r0, [pc, #360]	; (8014354 <_printf_i+0x23c>)
 80141ec:	230a      	movs	r3, #10
 80141ee:	e012      	b.n	8014216 <_printf_i+0xfe>
 80141f0:	682b      	ldr	r3, [r5, #0]
 80141f2:	6820      	ldr	r0, [r4, #0]
 80141f4:	1d19      	adds	r1, r3, #4
 80141f6:	6029      	str	r1, [r5, #0]
 80141f8:	0605      	lsls	r5, r0, #24
 80141fa:	d501      	bpl.n	8014200 <_printf_i+0xe8>
 80141fc:	681e      	ldr	r6, [r3, #0]
 80141fe:	e002      	b.n	8014206 <_printf_i+0xee>
 8014200:	0641      	lsls	r1, r0, #25
 8014202:	d5fb      	bpl.n	80141fc <_printf_i+0xe4>
 8014204:	881e      	ldrh	r6, [r3, #0]
 8014206:	4853      	ldr	r0, [pc, #332]	; (8014354 <_printf_i+0x23c>)
 8014208:	2f6f      	cmp	r7, #111	; 0x6f
 801420a:	bf0c      	ite	eq
 801420c:	2308      	moveq	r3, #8
 801420e:	230a      	movne	r3, #10
 8014210:	2100      	movs	r1, #0
 8014212:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8014216:	6865      	ldr	r5, [r4, #4]
 8014218:	60a5      	str	r5, [r4, #8]
 801421a:	2d00      	cmp	r5, #0
 801421c:	bfa2      	ittt	ge
 801421e:	6821      	ldrge	r1, [r4, #0]
 8014220:	f021 0104 	bicge.w	r1, r1, #4
 8014224:	6021      	strge	r1, [r4, #0]
 8014226:	b90e      	cbnz	r6, 801422c <_printf_i+0x114>
 8014228:	2d00      	cmp	r5, #0
 801422a:	d04b      	beq.n	80142c4 <_printf_i+0x1ac>
 801422c:	4615      	mov	r5, r2
 801422e:	fbb6 f1f3 	udiv	r1, r6, r3
 8014232:	fb03 6711 	mls	r7, r3, r1, r6
 8014236:	5dc7      	ldrb	r7, [r0, r7]
 8014238:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801423c:	4637      	mov	r7, r6
 801423e:	42bb      	cmp	r3, r7
 8014240:	460e      	mov	r6, r1
 8014242:	d9f4      	bls.n	801422e <_printf_i+0x116>
 8014244:	2b08      	cmp	r3, #8
 8014246:	d10b      	bne.n	8014260 <_printf_i+0x148>
 8014248:	6823      	ldr	r3, [r4, #0]
 801424a:	07de      	lsls	r6, r3, #31
 801424c:	d508      	bpl.n	8014260 <_printf_i+0x148>
 801424e:	6923      	ldr	r3, [r4, #16]
 8014250:	6861      	ldr	r1, [r4, #4]
 8014252:	4299      	cmp	r1, r3
 8014254:	bfde      	ittt	le
 8014256:	2330      	movle	r3, #48	; 0x30
 8014258:	f805 3c01 	strble.w	r3, [r5, #-1]
 801425c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8014260:	1b52      	subs	r2, r2, r5
 8014262:	6122      	str	r2, [r4, #16]
 8014264:	f8cd a000 	str.w	sl, [sp]
 8014268:	464b      	mov	r3, r9
 801426a:	aa03      	add	r2, sp, #12
 801426c:	4621      	mov	r1, r4
 801426e:	4640      	mov	r0, r8
 8014270:	f7ff fee4 	bl	801403c <_printf_common>
 8014274:	3001      	adds	r0, #1
 8014276:	d14a      	bne.n	801430e <_printf_i+0x1f6>
 8014278:	f04f 30ff 	mov.w	r0, #4294967295
 801427c:	b004      	add	sp, #16
 801427e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014282:	6823      	ldr	r3, [r4, #0]
 8014284:	f043 0320 	orr.w	r3, r3, #32
 8014288:	6023      	str	r3, [r4, #0]
 801428a:	4833      	ldr	r0, [pc, #204]	; (8014358 <_printf_i+0x240>)
 801428c:	2778      	movs	r7, #120	; 0x78
 801428e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8014292:	6823      	ldr	r3, [r4, #0]
 8014294:	6829      	ldr	r1, [r5, #0]
 8014296:	061f      	lsls	r7, r3, #24
 8014298:	f851 6b04 	ldr.w	r6, [r1], #4
 801429c:	d402      	bmi.n	80142a4 <_printf_i+0x18c>
 801429e:	065f      	lsls	r7, r3, #25
 80142a0:	bf48      	it	mi
 80142a2:	b2b6      	uxthmi	r6, r6
 80142a4:	07df      	lsls	r7, r3, #31
 80142a6:	bf48      	it	mi
 80142a8:	f043 0320 	orrmi.w	r3, r3, #32
 80142ac:	6029      	str	r1, [r5, #0]
 80142ae:	bf48      	it	mi
 80142b0:	6023      	strmi	r3, [r4, #0]
 80142b2:	b91e      	cbnz	r6, 80142bc <_printf_i+0x1a4>
 80142b4:	6823      	ldr	r3, [r4, #0]
 80142b6:	f023 0320 	bic.w	r3, r3, #32
 80142ba:	6023      	str	r3, [r4, #0]
 80142bc:	2310      	movs	r3, #16
 80142be:	e7a7      	b.n	8014210 <_printf_i+0xf8>
 80142c0:	4824      	ldr	r0, [pc, #144]	; (8014354 <_printf_i+0x23c>)
 80142c2:	e7e4      	b.n	801428e <_printf_i+0x176>
 80142c4:	4615      	mov	r5, r2
 80142c6:	e7bd      	b.n	8014244 <_printf_i+0x12c>
 80142c8:	682b      	ldr	r3, [r5, #0]
 80142ca:	6826      	ldr	r6, [r4, #0]
 80142cc:	6961      	ldr	r1, [r4, #20]
 80142ce:	1d18      	adds	r0, r3, #4
 80142d0:	6028      	str	r0, [r5, #0]
 80142d2:	0635      	lsls	r5, r6, #24
 80142d4:	681b      	ldr	r3, [r3, #0]
 80142d6:	d501      	bpl.n	80142dc <_printf_i+0x1c4>
 80142d8:	6019      	str	r1, [r3, #0]
 80142da:	e002      	b.n	80142e2 <_printf_i+0x1ca>
 80142dc:	0670      	lsls	r0, r6, #25
 80142de:	d5fb      	bpl.n	80142d8 <_printf_i+0x1c0>
 80142e0:	8019      	strh	r1, [r3, #0]
 80142e2:	2300      	movs	r3, #0
 80142e4:	6123      	str	r3, [r4, #16]
 80142e6:	4615      	mov	r5, r2
 80142e8:	e7bc      	b.n	8014264 <_printf_i+0x14c>
 80142ea:	682b      	ldr	r3, [r5, #0]
 80142ec:	1d1a      	adds	r2, r3, #4
 80142ee:	602a      	str	r2, [r5, #0]
 80142f0:	681d      	ldr	r5, [r3, #0]
 80142f2:	6862      	ldr	r2, [r4, #4]
 80142f4:	2100      	movs	r1, #0
 80142f6:	4628      	mov	r0, r5
 80142f8:	f7eb ff92 	bl	8000220 <memchr>
 80142fc:	b108      	cbz	r0, 8014302 <_printf_i+0x1ea>
 80142fe:	1b40      	subs	r0, r0, r5
 8014300:	6060      	str	r0, [r4, #4]
 8014302:	6863      	ldr	r3, [r4, #4]
 8014304:	6123      	str	r3, [r4, #16]
 8014306:	2300      	movs	r3, #0
 8014308:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801430c:	e7aa      	b.n	8014264 <_printf_i+0x14c>
 801430e:	6923      	ldr	r3, [r4, #16]
 8014310:	462a      	mov	r2, r5
 8014312:	4649      	mov	r1, r9
 8014314:	4640      	mov	r0, r8
 8014316:	47d0      	blx	sl
 8014318:	3001      	adds	r0, #1
 801431a:	d0ad      	beq.n	8014278 <_printf_i+0x160>
 801431c:	6823      	ldr	r3, [r4, #0]
 801431e:	079b      	lsls	r3, r3, #30
 8014320:	d413      	bmi.n	801434a <_printf_i+0x232>
 8014322:	68e0      	ldr	r0, [r4, #12]
 8014324:	9b03      	ldr	r3, [sp, #12]
 8014326:	4298      	cmp	r0, r3
 8014328:	bfb8      	it	lt
 801432a:	4618      	movlt	r0, r3
 801432c:	e7a6      	b.n	801427c <_printf_i+0x164>
 801432e:	2301      	movs	r3, #1
 8014330:	4632      	mov	r2, r6
 8014332:	4649      	mov	r1, r9
 8014334:	4640      	mov	r0, r8
 8014336:	47d0      	blx	sl
 8014338:	3001      	adds	r0, #1
 801433a:	d09d      	beq.n	8014278 <_printf_i+0x160>
 801433c:	3501      	adds	r5, #1
 801433e:	68e3      	ldr	r3, [r4, #12]
 8014340:	9903      	ldr	r1, [sp, #12]
 8014342:	1a5b      	subs	r3, r3, r1
 8014344:	42ab      	cmp	r3, r5
 8014346:	dcf2      	bgt.n	801432e <_printf_i+0x216>
 8014348:	e7eb      	b.n	8014322 <_printf_i+0x20a>
 801434a:	2500      	movs	r5, #0
 801434c:	f104 0619 	add.w	r6, r4, #25
 8014350:	e7f5      	b.n	801433e <_printf_i+0x226>
 8014352:	bf00      	nop
 8014354:	08016ec6 	.word	0x08016ec6
 8014358:	08016ed7 	.word	0x08016ed7

0801435c <std>:
 801435c:	2300      	movs	r3, #0
 801435e:	b510      	push	{r4, lr}
 8014360:	4604      	mov	r4, r0
 8014362:	e9c0 3300 	strd	r3, r3, [r0]
 8014366:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801436a:	6083      	str	r3, [r0, #8]
 801436c:	8181      	strh	r1, [r0, #12]
 801436e:	6643      	str	r3, [r0, #100]	; 0x64
 8014370:	81c2      	strh	r2, [r0, #14]
 8014372:	6183      	str	r3, [r0, #24]
 8014374:	4619      	mov	r1, r3
 8014376:	2208      	movs	r2, #8
 8014378:	305c      	adds	r0, #92	; 0x5c
 801437a:	f000 f92e 	bl	80145da <memset>
 801437e:	4b0d      	ldr	r3, [pc, #52]	; (80143b4 <std+0x58>)
 8014380:	6263      	str	r3, [r4, #36]	; 0x24
 8014382:	4b0d      	ldr	r3, [pc, #52]	; (80143b8 <std+0x5c>)
 8014384:	62a3      	str	r3, [r4, #40]	; 0x28
 8014386:	4b0d      	ldr	r3, [pc, #52]	; (80143bc <std+0x60>)
 8014388:	62e3      	str	r3, [r4, #44]	; 0x2c
 801438a:	4b0d      	ldr	r3, [pc, #52]	; (80143c0 <std+0x64>)
 801438c:	6323      	str	r3, [r4, #48]	; 0x30
 801438e:	4b0d      	ldr	r3, [pc, #52]	; (80143c4 <std+0x68>)
 8014390:	6224      	str	r4, [r4, #32]
 8014392:	429c      	cmp	r4, r3
 8014394:	d006      	beq.n	80143a4 <std+0x48>
 8014396:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801439a:	4294      	cmp	r4, r2
 801439c:	d002      	beq.n	80143a4 <std+0x48>
 801439e:	33d0      	adds	r3, #208	; 0xd0
 80143a0:	429c      	cmp	r4, r3
 80143a2:	d105      	bne.n	80143b0 <std+0x54>
 80143a4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80143a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80143ac:	f000 b9e8 	b.w	8014780 <__retarget_lock_init_recursive>
 80143b0:	bd10      	pop	{r4, pc}
 80143b2:	bf00      	nop
 80143b4:	08014521 	.word	0x08014521
 80143b8:	08014543 	.word	0x08014543
 80143bc:	0801457b 	.word	0x0801457b
 80143c0:	0801459f 	.word	0x0801459f
 80143c4:	20009828 	.word	0x20009828

080143c8 <stdio_exit_handler>:
 80143c8:	4a02      	ldr	r2, [pc, #8]	; (80143d4 <stdio_exit_handler+0xc>)
 80143ca:	4903      	ldr	r1, [pc, #12]	; (80143d8 <stdio_exit_handler+0x10>)
 80143cc:	4803      	ldr	r0, [pc, #12]	; (80143dc <stdio_exit_handler+0x14>)
 80143ce:	f000 b869 	b.w	80144a4 <_fwalk_sglue>
 80143d2:	bf00      	nop
 80143d4:	200003b8 	.word	0x200003b8
 80143d8:	08016151 	.word	0x08016151
 80143dc:	200003c4 	.word	0x200003c4

080143e0 <cleanup_stdio>:
 80143e0:	6841      	ldr	r1, [r0, #4]
 80143e2:	4b0c      	ldr	r3, [pc, #48]	; (8014414 <cleanup_stdio+0x34>)
 80143e4:	4299      	cmp	r1, r3
 80143e6:	b510      	push	{r4, lr}
 80143e8:	4604      	mov	r4, r0
 80143ea:	d001      	beq.n	80143f0 <cleanup_stdio+0x10>
 80143ec:	f001 feb0 	bl	8016150 <_fflush_r>
 80143f0:	68a1      	ldr	r1, [r4, #8]
 80143f2:	4b09      	ldr	r3, [pc, #36]	; (8014418 <cleanup_stdio+0x38>)
 80143f4:	4299      	cmp	r1, r3
 80143f6:	d002      	beq.n	80143fe <cleanup_stdio+0x1e>
 80143f8:	4620      	mov	r0, r4
 80143fa:	f001 fea9 	bl	8016150 <_fflush_r>
 80143fe:	68e1      	ldr	r1, [r4, #12]
 8014400:	4b06      	ldr	r3, [pc, #24]	; (801441c <cleanup_stdio+0x3c>)
 8014402:	4299      	cmp	r1, r3
 8014404:	d004      	beq.n	8014410 <cleanup_stdio+0x30>
 8014406:	4620      	mov	r0, r4
 8014408:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801440c:	f001 bea0 	b.w	8016150 <_fflush_r>
 8014410:	bd10      	pop	{r4, pc}
 8014412:	bf00      	nop
 8014414:	20009828 	.word	0x20009828
 8014418:	20009890 	.word	0x20009890
 801441c:	200098f8 	.word	0x200098f8

08014420 <global_stdio_init.part.0>:
 8014420:	b510      	push	{r4, lr}
 8014422:	4b0b      	ldr	r3, [pc, #44]	; (8014450 <global_stdio_init.part.0+0x30>)
 8014424:	4c0b      	ldr	r4, [pc, #44]	; (8014454 <global_stdio_init.part.0+0x34>)
 8014426:	4a0c      	ldr	r2, [pc, #48]	; (8014458 <global_stdio_init.part.0+0x38>)
 8014428:	601a      	str	r2, [r3, #0]
 801442a:	4620      	mov	r0, r4
 801442c:	2200      	movs	r2, #0
 801442e:	2104      	movs	r1, #4
 8014430:	f7ff ff94 	bl	801435c <std>
 8014434:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8014438:	2201      	movs	r2, #1
 801443a:	2109      	movs	r1, #9
 801443c:	f7ff ff8e 	bl	801435c <std>
 8014440:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8014444:	2202      	movs	r2, #2
 8014446:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801444a:	2112      	movs	r1, #18
 801444c:	f7ff bf86 	b.w	801435c <std>
 8014450:	20009960 	.word	0x20009960
 8014454:	20009828 	.word	0x20009828
 8014458:	080143c9 	.word	0x080143c9

0801445c <__sfp_lock_acquire>:
 801445c:	4801      	ldr	r0, [pc, #4]	; (8014464 <__sfp_lock_acquire+0x8>)
 801445e:	f000 b990 	b.w	8014782 <__retarget_lock_acquire_recursive>
 8014462:	bf00      	nop
 8014464:	20009969 	.word	0x20009969

08014468 <__sfp_lock_release>:
 8014468:	4801      	ldr	r0, [pc, #4]	; (8014470 <__sfp_lock_release+0x8>)
 801446a:	f000 b98b 	b.w	8014784 <__retarget_lock_release_recursive>
 801446e:	bf00      	nop
 8014470:	20009969 	.word	0x20009969

08014474 <__sinit>:
 8014474:	b510      	push	{r4, lr}
 8014476:	4604      	mov	r4, r0
 8014478:	f7ff fff0 	bl	801445c <__sfp_lock_acquire>
 801447c:	6a23      	ldr	r3, [r4, #32]
 801447e:	b11b      	cbz	r3, 8014488 <__sinit+0x14>
 8014480:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014484:	f7ff bff0 	b.w	8014468 <__sfp_lock_release>
 8014488:	4b04      	ldr	r3, [pc, #16]	; (801449c <__sinit+0x28>)
 801448a:	6223      	str	r3, [r4, #32]
 801448c:	4b04      	ldr	r3, [pc, #16]	; (80144a0 <__sinit+0x2c>)
 801448e:	681b      	ldr	r3, [r3, #0]
 8014490:	2b00      	cmp	r3, #0
 8014492:	d1f5      	bne.n	8014480 <__sinit+0xc>
 8014494:	f7ff ffc4 	bl	8014420 <global_stdio_init.part.0>
 8014498:	e7f2      	b.n	8014480 <__sinit+0xc>
 801449a:	bf00      	nop
 801449c:	080143e1 	.word	0x080143e1
 80144a0:	20009960 	.word	0x20009960

080144a4 <_fwalk_sglue>:
 80144a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80144a8:	4607      	mov	r7, r0
 80144aa:	4688      	mov	r8, r1
 80144ac:	4614      	mov	r4, r2
 80144ae:	2600      	movs	r6, #0
 80144b0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80144b4:	f1b9 0901 	subs.w	r9, r9, #1
 80144b8:	d505      	bpl.n	80144c6 <_fwalk_sglue+0x22>
 80144ba:	6824      	ldr	r4, [r4, #0]
 80144bc:	2c00      	cmp	r4, #0
 80144be:	d1f7      	bne.n	80144b0 <_fwalk_sglue+0xc>
 80144c0:	4630      	mov	r0, r6
 80144c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80144c6:	89ab      	ldrh	r3, [r5, #12]
 80144c8:	2b01      	cmp	r3, #1
 80144ca:	d907      	bls.n	80144dc <_fwalk_sglue+0x38>
 80144cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80144d0:	3301      	adds	r3, #1
 80144d2:	d003      	beq.n	80144dc <_fwalk_sglue+0x38>
 80144d4:	4629      	mov	r1, r5
 80144d6:	4638      	mov	r0, r7
 80144d8:	47c0      	blx	r8
 80144da:	4306      	orrs	r6, r0
 80144dc:	3568      	adds	r5, #104	; 0x68
 80144de:	e7e9      	b.n	80144b4 <_fwalk_sglue+0x10>

080144e0 <siprintf>:
 80144e0:	b40e      	push	{r1, r2, r3}
 80144e2:	b500      	push	{lr}
 80144e4:	b09c      	sub	sp, #112	; 0x70
 80144e6:	ab1d      	add	r3, sp, #116	; 0x74
 80144e8:	9002      	str	r0, [sp, #8]
 80144ea:	9006      	str	r0, [sp, #24]
 80144ec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80144f0:	4809      	ldr	r0, [pc, #36]	; (8014518 <siprintf+0x38>)
 80144f2:	9107      	str	r1, [sp, #28]
 80144f4:	9104      	str	r1, [sp, #16]
 80144f6:	4909      	ldr	r1, [pc, #36]	; (801451c <siprintf+0x3c>)
 80144f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80144fc:	9105      	str	r1, [sp, #20]
 80144fe:	6800      	ldr	r0, [r0, #0]
 8014500:	9301      	str	r3, [sp, #4]
 8014502:	a902      	add	r1, sp, #8
 8014504:	f001 fca0 	bl	8015e48 <_svfiprintf_r>
 8014508:	9b02      	ldr	r3, [sp, #8]
 801450a:	2200      	movs	r2, #0
 801450c:	701a      	strb	r2, [r3, #0]
 801450e:	b01c      	add	sp, #112	; 0x70
 8014510:	f85d eb04 	ldr.w	lr, [sp], #4
 8014514:	b003      	add	sp, #12
 8014516:	4770      	bx	lr
 8014518:	20000410 	.word	0x20000410
 801451c:	ffff0208 	.word	0xffff0208

08014520 <__sread>:
 8014520:	b510      	push	{r4, lr}
 8014522:	460c      	mov	r4, r1
 8014524:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014528:	f000 f8dc 	bl	80146e4 <_read_r>
 801452c:	2800      	cmp	r0, #0
 801452e:	bfab      	itete	ge
 8014530:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8014532:	89a3      	ldrhlt	r3, [r4, #12]
 8014534:	181b      	addge	r3, r3, r0
 8014536:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801453a:	bfac      	ite	ge
 801453c:	6563      	strge	r3, [r4, #84]	; 0x54
 801453e:	81a3      	strhlt	r3, [r4, #12]
 8014540:	bd10      	pop	{r4, pc}

08014542 <__swrite>:
 8014542:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014546:	461f      	mov	r7, r3
 8014548:	898b      	ldrh	r3, [r1, #12]
 801454a:	05db      	lsls	r3, r3, #23
 801454c:	4605      	mov	r5, r0
 801454e:	460c      	mov	r4, r1
 8014550:	4616      	mov	r6, r2
 8014552:	d505      	bpl.n	8014560 <__swrite+0x1e>
 8014554:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014558:	2302      	movs	r3, #2
 801455a:	2200      	movs	r2, #0
 801455c:	f000 f8b0 	bl	80146c0 <_lseek_r>
 8014560:	89a3      	ldrh	r3, [r4, #12]
 8014562:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014566:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801456a:	81a3      	strh	r3, [r4, #12]
 801456c:	4632      	mov	r2, r6
 801456e:	463b      	mov	r3, r7
 8014570:	4628      	mov	r0, r5
 8014572:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014576:	f000 b8c7 	b.w	8014708 <_write_r>

0801457a <__sseek>:
 801457a:	b510      	push	{r4, lr}
 801457c:	460c      	mov	r4, r1
 801457e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014582:	f000 f89d 	bl	80146c0 <_lseek_r>
 8014586:	1c43      	adds	r3, r0, #1
 8014588:	89a3      	ldrh	r3, [r4, #12]
 801458a:	bf15      	itete	ne
 801458c:	6560      	strne	r0, [r4, #84]	; 0x54
 801458e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8014592:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8014596:	81a3      	strheq	r3, [r4, #12]
 8014598:	bf18      	it	ne
 801459a:	81a3      	strhne	r3, [r4, #12]
 801459c:	bd10      	pop	{r4, pc}

0801459e <__sclose>:
 801459e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80145a2:	f000 b827 	b.w	80145f4 <_close_r>

080145a6 <memmove>:
 80145a6:	4288      	cmp	r0, r1
 80145a8:	b510      	push	{r4, lr}
 80145aa:	eb01 0402 	add.w	r4, r1, r2
 80145ae:	d902      	bls.n	80145b6 <memmove+0x10>
 80145b0:	4284      	cmp	r4, r0
 80145b2:	4623      	mov	r3, r4
 80145b4:	d807      	bhi.n	80145c6 <memmove+0x20>
 80145b6:	1e43      	subs	r3, r0, #1
 80145b8:	42a1      	cmp	r1, r4
 80145ba:	d008      	beq.n	80145ce <memmove+0x28>
 80145bc:	f811 2b01 	ldrb.w	r2, [r1], #1
 80145c0:	f803 2f01 	strb.w	r2, [r3, #1]!
 80145c4:	e7f8      	b.n	80145b8 <memmove+0x12>
 80145c6:	4402      	add	r2, r0
 80145c8:	4601      	mov	r1, r0
 80145ca:	428a      	cmp	r2, r1
 80145cc:	d100      	bne.n	80145d0 <memmove+0x2a>
 80145ce:	bd10      	pop	{r4, pc}
 80145d0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80145d4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80145d8:	e7f7      	b.n	80145ca <memmove+0x24>

080145da <memset>:
 80145da:	4402      	add	r2, r0
 80145dc:	4603      	mov	r3, r0
 80145de:	4293      	cmp	r3, r2
 80145e0:	d100      	bne.n	80145e4 <memset+0xa>
 80145e2:	4770      	bx	lr
 80145e4:	f803 1b01 	strb.w	r1, [r3], #1
 80145e8:	e7f9      	b.n	80145de <memset+0x4>
	...

080145ec <_localeconv_r>:
 80145ec:	4800      	ldr	r0, [pc, #0]	; (80145f0 <_localeconv_r+0x4>)
 80145ee:	4770      	bx	lr
 80145f0:	20000504 	.word	0x20000504

080145f4 <_close_r>:
 80145f4:	b538      	push	{r3, r4, r5, lr}
 80145f6:	4d06      	ldr	r5, [pc, #24]	; (8014610 <_close_r+0x1c>)
 80145f8:	2300      	movs	r3, #0
 80145fa:	4604      	mov	r4, r0
 80145fc:	4608      	mov	r0, r1
 80145fe:	602b      	str	r3, [r5, #0]
 8014600:	f7f0 fd9d 	bl	800513e <_close>
 8014604:	1c43      	adds	r3, r0, #1
 8014606:	d102      	bne.n	801460e <_close_r+0x1a>
 8014608:	682b      	ldr	r3, [r5, #0]
 801460a:	b103      	cbz	r3, 801460e <_close_r+0x1a>
 801460c:	6023      	str	r3, [r4, #0]
 801460e:	bd38      	pop	{r3, r4, r5, pc}
 8014610:	20009964 	.word	0x20009964

08014614 <_reclaim_reent>:
 8014614:	4b29      	ldr	r3, [pc, #164]	; (80146bc <_reclaim_reent+0xa8>)
 8014616:	681b      	ldr	r3, [r3, #0]
 8014618:	4283      	cmp	r3, r0
 801461a:	b570      	push	{r4, r5, r6, lr}
 801461c:	4604      	mov	r4, r0
 801461e:	d04b      	beq.n	80146b8 <_reclaim_reent+0xa4>
 8014620:	69c3      	ldr	r3, [r0, #28]
 8014622:	b143      	cbz	r3, 8014636 <_reclaim_reent+0x22>
 8014624:	68db      	ldr	r3, [r3, #12]
 8014626:	2b00      	cmp	r3, #0
 8014628:	d144      	bne.n	80146b4 <_reclaim_reent+0xa0>
 801462a:	69e3      	ldr	r3, [r4, #28]
 801462c:	6819      	ldr	r1, [r3, #0]
 801462e:	b111      	cbz	r1, 8014636 <_reclaim_reent+0x22>
 8014630:	4620      	mov	r0, r4
 8014632:	f000 ff33 	bl	801549c <_free_r>
 8014636:	6961      	ldr	r1, [r4, #20]
 8014638:	b111      	cbz	r1, 8014640 <_reclaim_reent+0x2c>
 801463a:	4620      	mov	r0, r4
 801463c:	f000 ff2e 	bl	801549c <_free_r>
 8014640:	69e1      	ldr	r1, [r4, #28]
 8014642:	b111      	cbz	r1, 801464a <_reclaim_reent+0x36>
 8014644:	4620      	mov	r0, r4
 8014646:	f000 ff29 	bl	801549c <_free_r>
 801464a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801464c:	b111      	cbz	r1, 8014654 <_reclaim_reent+0x40>
 801464e:	4620      	mov	r0, r4
 8014650:	f000 ff24 	bl	801549c <_free_r>
 8014654:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014656:	b111      	cbz	r1, 801465e <_reclaim_reent+0x4a>
 8014658:	4620      	mov	r0, r4
 801465a:	f000 ff1f 	bl	801549c <_free_r>
 801465e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8014660:	b111      	cbz	r1, 8014668 <_reclaim_reent+0x54>
 8014662:	4620      	mov	r0, r4
 8014664:	f000 ff1a 	bl	801549c <_free_r>
 8014668:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801466a:	b111      	cbz	r1, 8014672 <_reclaim_reent+0x5e>
 801466c:	4620      	mov	r0, r4
 801466e:	f000 ff15 	bl	801549c <_free_r>
 8014672:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8014674:	b111      	cbz	r1, 801467c <_reclaim_reent+0x68>
 8014676:	4620      	mov	r0, r4
 8014678:	f000 ff10 	bl	801549c <_free_r>
 801467c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 801467e:	b111      	cbz	r1, 8014686 <_reclaim_reent+0x72>
 8014680:	4620      	mov	r0, r4
 8014682:	f000 ff0b 	bl	801549c <_free_r>
 8014686:	6a23      	ldr	r3, [r4, #32]
 8014688:	b1b3      	cbz	r3, 80146b8 <_reclaim_reent+0xa4>
 801468a:	4620      	mov	r0, r4
 801468c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014690:	4718      	bx	r3
 8014692:	5949      	ldr	r1, [r1, r5]
 8014694:	b941      	cbnz	r1, 80146a8 <_reclaim_reent+0x94>
 8014696:	3504      	adds	r5, #4
 8014698:	69e3      	ldr	r3, [r4, #28]
 801469a:	2d80      	cmp	r5, #128	; 0x80
 801469c:	68d9      	ldr	r1, [r3, #12]
 801469e:	d1f8      	bne.n	8014692 <_reclaim_reent+0x7e>
 80146a0:	4620      	mov	r0, r4
 80146a2:	f000 fefb 	bl	801549c <_free_r>
 80146a6:	e7c0      	b.n	801462a <_reclaim_reent+0x16>
 80146a8:	680e      	ldr	r6, [r1, #0]
 80146aa:	4620      	mov	r0, r4
 80146ac:	f000 fef6 	bl	801549c <_free_r>
 80146b0:	4631      	mov	r1, r6
 80146b2:	e7ef      	b.n	8014694 <_reclaim_reent+0x80>
 80146b4:	2500      	movs	r5, #0
 80146b6:	e7ef      	b.n	8014698 <_reclaim_reent+0x84>
 80146b8:	bd70      	pop	{r4, r5, r6, pc}
 80146ba:	bf00      	nop
 80146bc:	20000410 	.word	0x20000410

080146c0 <_lseek_r>:
 80146c0:	b538      	push	{r3, r4, r5, lr}
 80146c2:	4d07      	ldr	r5, [pc, #28]	; (80146e0 <_lseek_r+0x20>)
 80146c4:	4604      	mov	r4, r0
 80146c6:	4608      	mov	r0, r1
 80146c8:	4611      	mov	r1, r2
 80146ca:	2200      	movs	r2, #0
 80146cc:	602a      	str	r2, [r5, #0]
 80146ce:	461a      	mov	r2, r3
 80146d0:	f7f0 fd5c 	bl	800518c <_lseek>
 80146d4:	1c43      	adds	r3, r0, #1
 80146d6:	d102      	bne.n	80146de <_lseek_r+0x1e>
 80146d8:	682b      	ldr	r3, [r5, #0]
 80146da:	b103      	cbz	r3, 80146de <_lseek_r+0x1e>
 80146dc:	6023      	str	r3, [r4, #0]
 80146de:	bd38      	pop	{r3, r4, r5, pc}
 80146e0:	20009964 	.word	0x20009964

080146e4 <_read_r>:
 80146e4:	b538      	push	{r3, r4, r5, lr}
 80146e6:	4d07      	ldr	r5, [pc, #28]	; (8014704 <_read_r+0x20>)
 80146e8:	4604      	mov	r4, r0
 80146ea:	4608      	mov	r0, r1
 80146ec:	4611      	mov	r1, r2
 80146ee:	2200      	movs	r2, #0
 80146f0:	602a      	str	r2, [r5, #0]
 80146f2:	461a      	mov	r2, r3
 80146f4:	f7f0 fcea 	bl	80050cc <_read>
 80146f8:	1c43      	adds	r3, r0, #1
 80146fa:	d102      	bne.n	8014702 <_read_r+0x1e>
 80146fc:	682b      	ldr	r3, [r5, #0]
 80146fe:	b103      	cbz	r3, 8014702 <_read_r+0x1e>
 8014700:	6023      	str	r3, [r4, #0]
 8014702:	bd38      	pop	{r3, r4, r5, pc}
 8014704:	20009964 	.word	0x20009964

08014708 <_write_r>:
 8014708:	b538      	push	{r3, r4, r5, lr}
 801470a:	4d07      	ldr	r5, [pc, #28]	; (8014728 <_write_r+0x20>)
 801470c:	4604      	mov	r4, r0
 801470e:	4608      	mov	r0, r1
 8014710:	4611      	mov	r1, r2
 8014712:	2200      	movs	r2, #0
 8014714:	602a      	str	r2, [r5, #0]
 8014716:	461a      	mov	r2, r3
 8014718:	f7f0 fcf5 	bl	8005106 <_write>
 801471c:	1c43      	adds	r3, r0, #1
 801471e:	d102      	bne.n	8014726 <_write_r+0x1e>
 8014720:	682b      	ldr	r3, [r5, #0]
 8014722:	b103      	cbz	r3, 8014726 <_write_r+0x1e>
 8014724:	6023      	str	r3, [r4, #0]
 8014726:	bd38      	pop	{r3, r4, r5, pc}
 8014728:	20009964 	.word	0x20009964

0801472c <__errno>:
 801472c:	4b01      	ldr	r3, [pc, #4]	; (8014734 <__errno+0x8>)
 801472e:	6818      	ldr	r0, [r3, #0]
 8014730:	4770      	bx	lr
 8014732:	bf00      	nop
 8014734:	20000410 	.word	0x20000410

08014738 <__libc_init_array>:
 8014738:	b570      	push	{r4, r5, r6, lr}
 801473a:	4d0d      	ldr	r5, [pc, #52]	; (8014770 <__libc_init_array+0x38>)
 801473c:	4c0d      	ldr	r4, [pc, #52]	; (8014774 <__libc_init_array+0x3c>)
 801473e:	1b64      	subs	r4, r4, r5
 8014740:	10a4      	asrs	r4, r4, #2
 8014742:	2600      	movs	r6, #0
 8014744:	42a6      	cmp	r6, r4
 8014746:	d109      	bne.n	801475c <__libc_init_array+0x24>
 8014748:	4d0b      	ldr	r5, [pc, #44]	; (8014778 <__libc_init_array+0x40>)
 801474a:	4c0c      	ldr	r4, [pc, #48]	; (801477c <__libc_init_array+0x44>)
 801474c:	f002 f87c 	bl	8016848 <_init>
 8014750:	1b64      	subs	r4, r4, r5
 8014752:	10a4      	asrs	r4, r4, #2
 8014754:	2600      	movs	r6, #0
 8014756:	42a6      	cmp	r6, r4
 8014758:	d105      	bne.n	8014766 <__libc_init_array+0x2e>
 801475a:	bd70      	pop	{r4, r5, r6, pc}
 801475c:	f855 3b04 	ldr.w	r3, [r5], #4
 8014760:	4798      	blx	r3
 8014762:	3601      	adds	r6, #1
 8014764:	e7ee      	b.n	8014744 <__libc_init_array+0xc>
 8014766:	f855 3b04 	ldr.w	r3, [r5], #4
 801476a:	4798      	blx	r3
 801476c:	3601      	adds	r6, #1
 801476e:	e7f2      	b.n	8014756 <__libc_init_array+0x1e>
 8014770:	08017224 	.word	0x08017224
 8014774:	08017224 	.word	0x08017224
 8014778:	08017224 	.word	0x08017224
 801477c:	08017234 	.word	0x08017234

08014780 <__retarget_lock_init_recursive>:
 8014780:	4770      	bx	lr

08014782 <__retarget_lock_acquire_recursive>:
 8014782:	4770      	bx	lr

08014784 <__retarget_lock_release_recursive>:
 8014784:	4770      	bx	lr

08014786 <memcpy>:
 8014786:	440a      	add	r2, r1
 8014788:	4291      	cmp	r1, r2
 801478a:	f100 33ff 	add.w	r3, r0, #4294967295
 801478e:	d100      	bne.n	8014792 <memcpy+0xc>
 8014790:	4770      	bx	lr
 8014792:	b510      	push	{r4, lr}
 8014794:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014798:	f803 4f01 	strb.w	r4, [r3, #1]!
 801479c:	4291      	cmp	r1, r2
 801479e:	d1f9      	bne.n	8014794 <memcpy+0xe>
 80147a0:	bd10      	pop	{r4, pc}

080147a2 <quorem>:
 80147a2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80147a6:	6903      	ldr	r3, [r0, #16]
 80147a8:	690c      	ldr	r4, [r1, #16]
 80147aa:	42a3      	cmp	r3, r4
 80147ac:	4607      	mov	r7, r0
 80147ae:	db7e      	blt.n	80148ae <quorem+0x10c>
 80147b0:	3c01      	subs	r4, #1
 80147b2:	f101 0814 	add.w	r8, r1, #20
 80147b6:	f100 0514 	add.w	r5, r0, #20
 80147ba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80147be:	9301      	str	r3, [sp, #4]
 80147c0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80147c4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80147c8:	3301      	adds	r3, #1
 80147ca:	429a      	cmp	r2, r3
 80147cc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80147d0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80147d4:	fbb2 f6f3 	udiv	r6, r2, r3
 80147d8:	d331      	bcc.n	801483e <quorem+0x9c>
 80147da:	f04f 0e00 	mov.w	lr, #0
 80147de:	4640      	mov	r0, r8
 80147e0:	46ac      	mov	ip, r5
 80147e2:	46f2      	mov	sl, lr
 80147e4:	f850 2b04 	ldr.w	r2, [r0], #4
 80147e8:	b293      	uxth	r3, r2
 80147ea:	fb06 e303 	mla	r3, r6, r3, lr
 80147ee:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80147f2:	0c1a      	lsrs	r2, r3, #16
 80147f4:	b29b      	uxth	r3, r3
 80147f6:	ebaa 0303 	sub.w	r3, sl, r3
 80147fa:	f8dc a000 	ldr.w	sl, [ip]
 80147fe:	fa13 f38a 	uxtah	r3, r3, sl
 8014802:	fb06 220e 	mla	r2, r6, lr, r2
 8014806:	9300      	str	r3, [sp, #0]
 8014808:	9b00      	ldr	r3, [sp, #0]
 801480a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801480e:	b292      	uxth	r2, r2
 8014810:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8014814:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014818:	f8bd 3000 	ldrh.w	r3, [sp]
 801481c:	4581      	cmp	r9, r0
 801481e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014822:	f84c 3b04 	str.w	r3, [ip], #4
 8014826:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801482a:	d2db      	bcs.n	80147e4 <quorem+0x42>
 801482c:	f855 300b 	ldr.w	r3, [r5, fp]
 8014830:	b92b      	cbnz	r3, 801483e <quorem+0x9c>
 8014832:	9b01      	ldr	r3, [sp, #4]
 8014834:	3b04      	subs	r3, #4
 8014836:	429d      	cmp	r5, r3
 8014838:	461a      	mov	r2, r3
 801483a:	d32c      	bcc.n	8014896 <quorem+0xf4>
 801483c:	613c      	str	r4, [r7, #16]
 801483e:	4638      	mov	r0, r7
 8014840:	f001 f9a8 	bl	8015b94 <__mcmp>
 8014844:	2800      	cmp	r0, #0
 8014846:	db22      	blt.n	801488e <quorem+0xec>
 8014848:	3601      	adds	r6, #1
 801484a:	4629      	mov	r1, r5
 801484c:	2000      	movs	r0, #0
 801484e:	f858 2b04 	ldr.w	r2, [r8], #4
 8014852:	f8d1 c000 	ldr.w	ip, [r1]
 8014856:	b293      	uxth	r3, r2
 8014858:	1ac3      	subs	r3, r0, r3
 801485a:	0c12      	lsrs	r2, r2, #16
 801485c:	fa13 f38c 	uxtah	r3, r3, ip
 8014860:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8014864:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014868:	b29b      	uxth	r3, r3
 801486a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801486e:	45c1      	cmp	r9, r8
 8014870:	f841 3b04 	str.w	r3, [r1], #4
 8014874:	ea4f 4022 	mov.w	r0, r2, asr #16
 8014878:	d2e9      	bcs.n	801484e <quorem+0xac>
 801487a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801487e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014882:	b922      	cbnz	r2, 801488e <quorem+0xec>
 8014884:	3b04      	subs	r3, #4
 8014886:	429d      	cmp	r5, r3
 8014888:	461a      	mov	r2, r3
 801488a:	d30a      	bcc.n	80148a2 <quorem+0x100>
 801488c:	613c      	str	r4, [r7, #16]
 801488e:	4630      	mov	r0, r6
 8014890:	b003      	add	sp, #12
 8014892:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014896:	6812      	ldr	r2, [r2, #0]
 8014898:	3b04      	subs	r3, #4
 801489a:	2a00      	cmp	r2, #0
 801489c:	d1ce      	bne.n	801483c <quorem+0x9a>
 801489e:	3c01      	subs	r4, #1
 80148a0:	e7c9      	b.n	8014836 <quorem+0x94>
 80148a2:	6812      	ldr	r2, [r2, #0]
 80148a4:	3b04      	subs	r3, #4
 80148a6:	2a00      	cmp	r2, #0
 80148a8:	d1f0      	bne.n	801488c <quorem+0xea>
 80148aa:	3c01      	subs	r4, #1
 80148ac:	e7eb      	b.n	8014886 <quorem+0xe4>
 80148ae:	2000      	movs	r0, #0
 80148b0:	e7ee      	b.n	8014890 <quorem+0xee>
 80148b2:	0000      	movs	r0, r0
 80148b4:	0000      	movs	r0, r0
	...

080148b8 <_dtoa_r>:
 80148b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80148bc:	ed2d 8b04 	vpush	{d8-d9}
 80148c0:	69c5      	ldr	r5, [r0, #28]
 80148c2:	b093      	sub	sp, #76	; 0x4c
 80148c4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80148c8:	ec57 6b10 	vmov	r6, r7, d0
 80148cc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80148d0:	9107      	str	r1, [sp, #28]
 80148d2:	4604      	mov	r4, r0
 80148d4:	920a      	str	r2, [sp, #40]	; 0x28
 80148d6:	930d      	str	r3, [sp, #52]	; 0x34
 80148d8:	b975      	cbnz	r5, 80148f8 <_dtoa_r+0x40>
 80148da:	2010      	movs	r0, #16
 80148dc:	f000 fe2a 	bl	8015534 <malloc>
 80148e0:	4602      	mov	r2, r0
 80148e2:	61e0      	str	r0, [r4, #28]
 80148e4:	b920      	cbnz	r0, 80148f0 <_dtoa_r+0x38>
 80148e6:	4bae      	ldr	r3, [pc, #696]	; (8014ba0 <_dtoa_r+0x2e8>)
 80148e8:	21ef      	movs	r1, #239	; 0xef
 80148ea:	48ae      	ldr	r0, [pc, #696]	; (8014ba4 <_dtoa_r+0x2ec>)
 80148ec:	f001 fc68 	bl	80161c0 <__assert_func>
 80148f0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80148f4:	6005      	str	r5, [r0, #0]
 80148f6:	60c5      	str	r5, [r0, #12]
 80148f8:	69e3      	ldr	r3, [r4, #28]
 80148fa:	6819      	ldr	r1, [r3, #0]
 80148fc:	b151      	cbz	r1, 8014914 <_dtoa_r+0x5c>
 80148fe:	685a      	ldr	r2, [r3, #4]
 8014900:	604a      	str	r2, [r1, #4]
 8014902:	2301      	movs	r3, #1
 8014904:	4093      	lsls	r3, r2
 8014906:	608b      	str	r3, [r1, #8]
 8014908:	4620      	mov	r0, r4
 801490a:	f000 ff07 	bl	801571c <_Bfree>
 801490e:	69e3      	ldr	r3, [r4, #28]
 8014910:	2200      	movs	r2, #0
 8014912:	601a      	str	r2, [r3, #0]
 8014914:	1e3b      	subs	r3, r7, #0
 8014916:	bfbb      	ittet	lt
 8014918:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801491c:	9303      	strlt	r3, [sp, #12]
 801491e:	2300      	movge	r3, #0
 8014920:	2201      	movlt	r2, #1
 8014922:	bfac      	ite	ge
 8014924:	f8c8 3000 	strge.w	r3, [r8]
 8014928:	f8c8 2000 	strlt.w	r2, [r8]
 801492c:	4b9e      	ldr	r3, [pc, #632]	; (8014ba8 <_dtoa_r+0x2f0>)
 801492e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8014932:	ea33 0308 	bics.w	r3, r3, r8
 8014936:	d11b      	bne.n	8014970 <_dtoa_r+0xb8>
 8014938:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801493a:	f242 730f 	movw	r3, #9999	; 0x270f
 801493e:	6013      	str	r3, [r2, #0]
 8014940:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8014944:	4333      	orrs	r3, r6
 8014946:	f000 8593 	beq.w	8015470 <_dtoa_r+0xbb8>
 801494a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801494c:	b963      	cbnz	r3, 8014968 <_dtoa_r+0xb0>
 801494e:	4b97      	ldr	r3, [pc, #604]	; (8014bac <_dtoa_r+0x2f4>)
 8014950:	e027      	b.n	80149a2 <_dtoa_r+0xea>
 8014952:	4b97      	ldr	r3, [pc, #604]	; (8014bb0 <_dtoa_r+0x2f8>)
 8014954:	9300      	str	r3, [sp, #0]
 8014956:	3308      	adds	r3, #8
 8014958:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801495a:	6013      	str	r3, [r2, #0]
 801495c:	9800      	ldr	r0, [sp, #0]
 801495e:	b013      	add	sp, #76	; 0x4c
 8014960:	ecbd 8b04 	vpop	{d8-d9}
 8014964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014968:	4b90      	ldr	r3, [pc, #576]	; (8014bac <_dtoa_r+0x2f4>)
 801496a:	9300      	str	r3, [sp, #0]
 801496c:	3303      	adds	r3, #3
 801496e:	e7f3      	b.n	8014958 <_dtoa_r+0xa0>
 8014970:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014974:	2200      	movs	r2, #0
 8014976:	ec51 0b17 	vmov	r0, r1, d7
 801497a:	eeb0 8a47 	vmov.f32	s16, s14
 801497e:	eef0 8a67 	vmov.f32	s17, s15
 8014982:	2300      	movs	r3, #0
 8014984:	f7ec f8c8 	bl	8000b18 <__aeabi_dcmpeq>
 8014988:	4681      	mov	r9, r0
 801498a:	b160      	cbz	r0, 80149a6 <_dtoa_r+0xee>
 801498c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801498e:	2301      	movs	r3, #1
 8014990:	6013      	str	r3, [r2, #0]
 8014992:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014994:	2b00      	cmp	r3, #0
 8014996:	f000 8568 	beq.w	801546a <_dtoa_r+0xbb2>
 801499a:	4b86      	ldr	r3, [pc, #536]	; (8014bb4 <_dtoa_r+0x2fc>)
 801499c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801499e:	6013      	str	r3, [r2, #0]
 80149a0:	3b01      	subs	r3, #1
 80149a2:	9300      	str	r3, [sp, #0]
 80149a4:	e7da      	b.n	801495c <_dtoa_r+0xa4>
 80149a6:	aa10      	add	r2, sp, #64	; 0x40
 80149a8:	a911      	add	r1, sp, #68	; 0x44
 80149aa:	4620      	mov	r0, r4
 80149ac:	eeb0 0a48 	vmov.f32	s0, s16
 80149b0:	eef0 0a68 	vmov.f32	s1, s17
 80149b4:	f001 f994 	bl	8015ce0 <__d2b>
 80149b8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80149bc:	4682      	mov	sl, r0
 80149be:	2d00      	cmp	r5, #0
 80149c0:	d07f      	beq.n	8014ac2 <_dtoa_r+0x20a>
 80149c2:	ee18 3a90 	vmov	r3, s17
 80149c6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80149ca:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80149ce:	ec51 0b18 	vmov	r0, r1, d8
 80149d2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80149d6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80149da:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80149de:	4619      	mov	r1, r3
 80149e0:	2200      	movs	r2, #0
 80149e2:	4b75      	ldr	r3, [pc, #468]	; (8014bb8 <_dtoa_r+0x300>)
 80149e4:	f7eb fc78 	bl	80002d8 <__aeabi_dsub>
 80149e8:	a367      	add	r3, pc, #412	; (adr r3, 8014b88 <_dtoa_r+0x2d0>)
 80149ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149ee:	f7eb fe2b 	bl	8000648 <__aeabi_dmul>
 80149f2:	a367      	add	r3, pc, #412	; (adr r3, 8014b90 <_dtoa_r+0x2d8>)
 80149f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149f8:	f7eb fc70 	bl	80002dc <__adddf3>
 80149fc:	4606      	mov	r6, r0
 80149fe:	4628      	mov	r0, r5
 8014a00:	460f      	mov	r7, r1
 8014a02:	f7eb fdb7 	bl	8000574 <__aeabi_i2d>
 8014a06:	a364      	add	r3, pc, #400	; (adr r3, 8014b98 <_dtoa_r+0x2e0>)
 8014a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a0c:	f7eb fe1c 	bl	8000648 <__aeabi_dmul>
 8014a10:	4602      	mov	r2, r0
 8014a12:	460b      	mov	r3, r1
 8014a14:	4630      	mov	r0, r6
 8014a16:	4639      	mov	r1, r7
 8014a18:	f7eb fc60 	bl	80002dc <__adddf3>
 8014a1c:	4606      	mov	r6, r0
 8014a1e:	460f      	mov	r7, r1
 8014a20:	f7ec f8c2 	bl	8000ba8 <__aeabi_d2iz>
 8014a24:	2200      	movs	r2, #0
 8014a26:	4683      	mov	fp, r0
 8014a28:	2300      	movs	r3, #0
 8014a2a:	4630      	mov	r0, r6
 8014a2c:	4639      	mov	r1, r7
 8014a2e:	f7ec f87d 	bl	8000b2c <__aeabi_dcmplt>
 8014a32:	b148      	cbz	r0, 8014a48 <_dtoa_r+0x190>
 8014a34:	4658      	mov	r0, fp
 8014a36:	f7eb fd9d 	bl	8000574 <__aeabi_i2d>
 8014a3a:	4632      	mov	r2, r6
 8014a3c:	463b      	mov	r3, r7
 8014a3e:	f7ec f86b 	bl	8000b18 <__aeabi_dcmpeq>
 8014a42:	b908      	cbnz	r0, 8014a48 <_dtoa_r+0x190>
 8014a44:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014a48:	f1bb 0f16 	cmp.w	fp, #22
 8014a4c:	d857      	bhi.n	8014afe <_dtoa_r+0x246>
 8014a4e:	4b5b      	ldr	r3, [pc, #364]	; (8014bbc <_dtoa_r+0x304>)
 8014a50:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8014a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a58:	ec51 0b18 	vmov	r0, r1, d8
 8014a5c:	f7ec f866 	bl	8000b2c <__aeabi_dcmplt>
 8014a60:	2800      	cmp	r0, #0
 8014a62:	d04e      	beq.n	8014b02 <_dtoa_r+0x24a>
 8014a64:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014a68:	2300      	movs	r3, #0
 8014a6a:	930c      	str	r3, [sp, #48]	; 0x30
 8014a6c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014a6e:	1b5b      	subs	r3, r3, r5
 8014a70:	1e5a      	subs	r2, r3, #1
 8014a72:	bf45      	ittet	mi
 8014a74:	f1c3 0301 	rsbmi	r3, r3, #1
 8014a78:	9305      	strmi	r3, [sp, #20]
 8014a7a:	2300      	movpl	r3, #0
 8014a7c:	2300      	movmi	r3, #0
 8014a7e:	9206      	str	r2, [sp, #24]
 8014a80:	bf54      	ite	pl
 8014a82:	9305      	strpl	r3, [sp, #20]
 8014a84:	9306      	strmi	r3, [sp, #24]
 8014a86:	f1bb 0f00 	cmp.w	fp, #0
 8014a8a:	db3c      	blt.n	8014b06 <_dtoa_r+0x24e>
 8014a8c:	9b06      	ldr	r3, [sp, #24]
 8014a8e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8014a92:	445b      	add	r3, fp
 8014a94:	9306      	str	r3, [sp, #24]
 8014a96:	2300      	movs	r3, #0
 8014a98:	9308      	str	r3, [sp, #32]
 8014a9a:	9b07      	ldr	r3, [sp, #28]
 8014a9c:	2b09      	cmp	r3, #9
 8014a9e:	d868      	bhi.n	8014b72 <_dtoa_r+0x2ba>
 8014aa0:	2b05      	cmp	r3, #5
 8014aa2:	bfc4      	itt	gt
 8014aa4:	3b04      	subgt	r3, #4
 8014aa6:	9307      	strgt	r3, [sp, #28]
 8014aa8:	9b07      	ldr	r3, [sp, #28]
 8014aaa:	f1a3 0302 	sub.w	r3, r3, #2
 8014aae:	bfcc      	ite	gt
 8014ab0:	2500      	movgt	r5, #0
 8014ab2:	2501      	movle	r5, #1
 8014ab4:	2b03      	cmp	r3, #3
 8014ab6:	f200 8085 	bhi.w	8014bc4 <_dtoa_r+0x30c>
 8014aba:	e8df f003 	tbb	[pc, r3]
 8014abe:	3b2e      	.short	0x3b2e
 8014ac0:	5839      	.short	0x5839
 8014ac2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8014ac6:	441d      	add	r5, r3
 8014ac8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8014acc:	2b20      	cmp	r3, #32
 8014ace:	bfc1      	itttt	gt
 8014ad0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8014ad4:	fa08 f803 	lslgt.w	r8, r8, r3
 8014ad8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8014adc:	fa26 f303 	lsrgt.w	r3, r6, r3
 8014ae0:	bfd6      	itet	le
 8014ae2:	f1c3 0320 	rsble	r3, r3, #32
 8014ae6:	ea48 0003 	orrgt.w	r0, r8, r3
 8014aea:	fa06 f003 	lslle.w	r0, r6, r3
 8014aee:	f7eb fd31 	bl	8000554 <__aeabi_ui2d>
 8014af2:	2201      	movs	r2, #1
 8014af4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8014af8:	3d01      	subs	r5, #1
 8014afa:	920e      	str	r2, [sp, #56]	; 0x38
 8014afc:	e76f      	b.n	80149de <_dtoa_r+0x126>
 8014afe:	2301      	movs	r3, #1
 8014b00:	e7b3      	b.n	8014a6a <_dtoa_r+0x1b2>
 8014b02:	900c      	str	r0, [sp, #48]	; 0x30
 8014b04:	e7b2      	b.n	8014a6c <_dtoa_r+0x1b4>
 8014b06:	9b05      	ldr	r3, [sp, #20]
 8014b08:	eba3 030b 	sub.w	r3, r3, fp
 8014b0c:	9305      	str	r3, [sp, #20]
 8014b0e:	f1cb 0300 	rsb	r3, fp, #0
 8014b12:	9308      	str	r3, [sp, #32]
 8014b14:	2300      	movs	r3, #0
 8014b16:	930b      	str	r3, [sp, #44]	; 0x2c
 8014b18:	e7bf      	b.n	8014a9a <_dtoa_r+0x1e2>
 8014b1a:	2300      	movs	r3, #0
 8014b1c:	9309      	str	r3, [sp, #36]	; 0x24
 8014b1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014b20:	2b00      	cmp	r3, #0
 8014b22:	dc52      	bgt.n	8014bca <_dtoa_r+0x312>
 8014b24:	2301      	movs	r3, #1
 8014b26:	9301      	str	r3, [sp, #4]
 8014b28:	9304      	str	r3, [sp, #16]
 8014b2a:	461a      	mov	r2, r3
 8014b2c:	920a      	str	r2, [sp, #40]	; 0x28
 8014b2e:	e00b      	b.n	8014b48 <_dtoa_r+0x290>
 8014b30:	2301      	movs	r3, #1
 8014b32:	e7f3      	b.n	8014b1c <_dtoa_r+0x264>
 8014b34:	2300      	movs	r3, #0
 8014b36:	9309      	str	r3, [sp, #36]	; 0x24
 8014b38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014b3a:	445b      	add	r3, fp
 8014b3c:	9301      	str	r3, [sp, #4]
 8014b3e:	3301      	adds	r3, #1
 8014b40:	2b01      	cmp	r3, #1
 8014b42:	9304      	str	r3, [sp, #16]
 8014b44:	bfb8      	it	lt
 8014b46:	2301      	movlt	r3, #1
 8014b48:	69e0      	ldr	r0, [r4, #28]
 8014b4a:	2100      	movs	r1, #0
 8014b4c:	2204      	movs	r2, #4
 8014b4e:	f102 0614 	add.w	r6, r2, #20
 8014b52:	429e      	cmp	r6, r3
 8014b54:	d93d      	bls.n	8014bd2 <_dtoa_r+0x31a>
 8014b56:	6041      	str	r1, [r0, #4]
 8014b58:	4620      	mov	r0, r4
 8014b5a:	f000 fd9f 	bl	801569c <_Balloc>
 8014b5e:	9000      	str	r0, [sp, #0]
 8014b60:	2800      	cmp	r0, #0
 8014b62:	d139      	bne.n	8014bd8 <_dtoa_r+0x320>
 8014b64:	4b16      	ldr	r3, [pc, #88]	; (8014bc0 <_dtoa_r+0x308>)
 8014b66:	4602      	mov	r2, r0
 8014b68:	f240 11af 	movw	r1, #431	; 0x1af
 8014b6c:	e6bd      	b.n	80148ea <_dtoa_r+0x32>
 8014b6e:	2301      	movs	r3, #1
 8014b70:	e7e1      	b.n	8014b36 <_dtoa_r+0x27e>
 8014b72:	2501      	movs	r5, #1
 8014b74:	2300      	movs	r3, #0
 8014b76:	9307      	str	r3, [sp, #28]
 8014b78:	9509      	str	r5, [sp, #36]	; 0x24
 8014b7a:	f04f 33ff 	mov.w	r3, #4294967295
 8014b7e:	9301      	str	r3, [sp, #4]
 8014b80:	9304      	str	r3, [sp, #16]
 8014b82:	2200      	movs	r2, #0
 8014b84:	2312      	movs	r3, #18
 8014b86:	e7d1      	b.n	8014b2c <_dtoa_r+0x274>
 8014b88:	636f4361 	.word	0x636f4361
 8014b8c:	3fd287a7 	.word	0x3fd287a7
 8014b90:	8b60c8b3 	.word	0x8b60c8b3
 8014b94:	3fc68a28 	.word	0x3fc68a28
 8014b98:	509f79fb 	.word	0x509f79fb
 8014b9c:	3fd34413 	.word	0x3fd34413
 8014ba0:	08016ef5 	.word	0x08016ef5
 8014ba4:	08016f0c 	.word	0x08016f0c
 8014ba8:	7ff00000 	.word	0x7ff00000
 8014bac:	08016ef1 	.word	0x08016ef1
 8014bb0:	08016ee8 	.word	0x08016ee8
 8014bb4:	08016ec5 	.word	0x08016ec5
 8014bb8:	3ff80000 	.word	0x3ff80000
 8014bbc:	08016ff8 	.word	0x08016ff8
 8014bc0:	08016f64 	.word	0x08016f64
 8014bc4:	2301      	movs	r3, #1
 8014bc6:	9309      	str	r3, [sp, #36]	; 0x24
 8014bc8:	e7d7      	b.n	8014b7a <_dtoa_r+0x2c2>
 8014bca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014bcc:	9301      	str	r3, [sp, #4]
 8014bce:	9304      	str	r3, [sp, #16]
 8014bd0:	e7ba      	b.n	8014b48 <_dtoa_r+0x290>
 8014bd2:	3101      	adds	r1, #1
 8014bd4:	0052      	lsls	r2, r2, #1
 8014bd6:	e7ba      	b.n	8014b4e <_dtoa_r+0x296>
 8014bd8:	69e3      	ldr	r3, [r4, #28]
 8014bda:	9a00      	ldr	r2, [sp, #0]
 8014bdc:	601a      	str	r2, [r3, #0]
 8014bde:	9b04      	ldr	r3, [sp, #16]
 8014be0:	2b0e      	cmp	r3, #14
 8014be2:	f200 80a8 	bhi.w	8014d36 <_dtoa_r+0x47e>
 8014be6:	2d00      	cmp	r5, #0
 8014be8:	f000 80a5 	beq.w	8014d36 <_dtoa_r+0x47e>
 8014bec:	f1bb 0f00 	cmp.w	fp, #0
 8014bf0:	dd38      	ble.n	8014c64 <_dtoa_r+0x3ac>
 8014bf2:	4bc0      	ldr	r3, [pc, #768]	; (8014ef4 <_dtoa_r+0x63c>)
 8014bf4:	f00b 020f 	and.w	r2, fp, #15
 8014bf8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014bfc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8014c00:	e9d3 6700 	ldrd	r6, r7, [r3]
 8014c04:	ea4f 182b 	mov.w	r8, fp, asr #4
 8014c08:	d019      	beq.n	8014c3e <_dtoa_r+0x386>
 8014c0a:	4bbb      	ldr	r3, [pc, #748]	; (8014ef8 <_dtoa_r+0x640>)
 8014c0c:	ec51 0b18 	vmov	r0, r1, d8
 8014c10:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8014c14:	f7eb fe42 	bl	800089c <__aeabi_ddiv>
 8014c18:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014c1c:	f008 080f 	and.w	r8, r8, #15
 8014c20:	2503      	movs	r5, #3
 8014c22:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8014ef8 <_dtoa_r+0x640>
 8014c26:	f1b8 0f00 	cmp.w	r8, #0
 8014c2a:	d10a      	bne.n	8014c42 <_dtoa_r+0x38a>
 8014c2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014c30:	4632      	mov	r2, r6
 8014c32:	463b      	mov	r3, r7
 8014c34:	f7eb fe32 	bl	800089c <__aeabi_ddiv>
 8014c38:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014c3c:	e02b      	b.n	8014c96 <_dtoa_r+0x3de>
 8014c3e:	2502      	movs	r5, #2
 8014c40:	e7ef      	b.n	8014c22 <_dtoa_r+0x36a>
 8014c42:	f018 0f01 	tst.w	r8, #1
 8014c46:	d008      	beq.n	8014c5a <_dtoa_r+0x3a2>
 8014c48:	4630      	mov	r0, r6
 8014c4a:	4639      	mov	r1, r7
 8014c4c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8014c50:	f7eb fcfa 	bl	8000648 <__aeabi_dmul>
 8014c54:	3501      	adds	r5, #1
 8014c56:	4606      	mov	r6, r0
 8014c58:	460f      	mov	r7, r1
 8014c5a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8014c5e:	f109 0908 	add.w	r9, r9, #8
 8014c62:	e7e0      	b.n	8014c26 <_dtoa_r+0x36e>
 8014c64:	f000 809f 	beq.w	8014da6 <_dtoa_r+0x4ee>
 8014c68:	f1cb 0600 	rsb	r6, fp, #0
 8014c6c:	4ba1      	ldr	r3, [pc, #644]	; (8014ef4 <_dtoa_r+0x63c>)
 8014c6e:	4fa2      	ldr	r7, [pc, #648]	; (8014ef8 <_dtoa_r+0x640>)
 8014c70:	f006 020f 	and.w	r2, r6, #15
 8014c74:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c7c:	ec51 0b18 	vmov	r0, r1, d8
 8014c80:	f7eb fce2 	bl	8000648 <__aeabi_dmul>
 8014c84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014c88:	1136      	asrs	r6, r6, #4
 8014c8a:	2300      	movs	r3, #0
 8014c8c:	2502      	movs	r5, #2
 8014c8e:	2e00      	cmp	r6, #0
 8014c90:	d17e      	bne.n	8014d90 <_dtoa_r+0x4d8>
 8014c92:	2b00      	cmp	r3, #0
 8014c94:	d1d0      	bne.n	8014c38 <_dtoa_r+0x380>
 8014c96:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014c98:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8014c9c:	2b00      	cmp	r3, #0
 8014c9e:	f000 8084 	beq.w	8014daa <_dtoa_r+0x4f2>
 8014ca2:	4b96      	ldr	r3, [pc, #600]	; (8014efc <_dtoa_r+0x644>)
 8014ca4:	2200      	movs	r2, #0
 8014ca6:	4640      	mov	r0, r8
 8014ca8:	4649      	mov	r1, r9
 8014caa:	f7eb ff3f 	bl	8000b2c <__aeabi_dcmplt>
 8014cae:	2800      	cmp	r0, #0
 8014cb0:	d07b      	beq.n	8014daa <_dtoa_r+0x4f2>
 8014cb2:	9b04      	ldr	r3, [sp, #16]
 8014cb4:	2b00      	cmp	r3, #0
 8014cb6:	d078      	beq.n	8014daa <_dtoa_r+0x4f2>
 8014cb8:	9b01      	ldr	r3, [sp, #4]
 8014cba:	2b00      	cmp	r3, #0
 8014cbc:	dd39      	ble.n	8014d32 <_dtoa_r+0x47a>
 8014cbe:	4b90      	ldr	r3, [pc, #576]	; (8014f00 <_dtoa_r+0x648>)
 8014cc0:	2200      	movs	r2, #0
 8014cc2:	4640      	mov	r0, r8
 8014cc4:	4649      	mov	r1, r9
 8014cc6:	f7eb fcbf 	bl	8000648 <__aeabi_dmul>
 8014cca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014cce:	9e01      	ldr	r6, [sp, #4]
 8014cd0:	f10b 37ff 	add.w	r7, fp, #4294967295
 8014cd4:	3501      	adds	r5, #1
 8014cd6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8014cda:	4628      	mov	r0, r5
 8014cdc:	f7eb fc4a 	bl	8000574 <__aeabi_i2d>
 8014ce0:	4642      	mov	r2, r8
 8014ce2:	464b      	mov	r3, r9
 8014ce4:	f7eb fcb0 	bl	8000648 <__aeabi_dmul>
 8014ce8:	4b86      	ldr	r3, [pc, #536]	; (8014f04 <_dtoa_r+0x64c>)
 8014cea:	2200      	movs	r2, #0
 8014cec:	f7eb faf6 	bl	80002dc <__adddf3>
 8014cf0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8014cf4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014cf8:	9303      	str	r3, [sp, #12]
 8014cfa:	2e00      	cmp	r6, #0
 8014cfc:	d158      	bne.n	8014db0 <_dtoa_r+0x4f8>
 8014cfe:	4b82      	ldr	r3, [pc, #520]	; (8014f08 <_dtoa_r+0x650>)
 8014d00:	2200      	movs	r2, #0
 8014d02:	4640      	mov	r0, r8
 8014d04:	4649      	mov	r1, r9
 8014d06:	f7eb fae7 	bl	80002d8 <__aeabi_dsub>
 8014d0a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014d0e:	4680      	mov	r8, r0
 8014d10:	4689      	mov	r9, r1
 8014d12:	f7eb ff29 	bl	8000b68 <__aeabi_dcmpgt>
 8014d16:	2800      	cmp	r0, #0
 8014d18:	f040 8296 	bne.w	8015248 <_dtoa_r+0x990>
 8014d1c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8014d20:	4640      	mov	r0, r8
 8014d22:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014d26:	4649      	mov	r1, r9
 8014d28:	f7eb ff00 	bl	8000b2c <__aeabi_dcmplt>
 8014d2c:	2800      	cmp	r0, #0
 8014d2e:	f040 8289 	bne.w	8015244 <_dtoa_r+0x98c>
 8014d32:	ed8d 8b02 	vstr	d8, [sp, #8]
 8014d36:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014d38:	2b00      	cmp	r3, #0
 8014d3a:	f2c0 814e 	blt.w	8014fda <_dtoa_r+0x722>
 8014d3e:	f1bb 0f0e 	cmp.w	fp, #14
 8014d42:	f300 814a 	bgt.w	8014fda <_dtoa_r+0x722>
 8014d46:	4b6b      	ldr	r3, [pc, #428]	; (8014ef4 <_dtoa_r+0x63c>)
 8014d48:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8014d4c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8014d50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014d52:	2b00      	cmp	r3, #0
 8014d54:	f280 80dc 	bge.w	8014f10 <_dtoa_r+0x658>
 8014d58:	9b04      	ldr	r3, [sp, #16]
 8014d5a:	2b00      	cmp	r3, #0
 8014d5c:	f300 80d8 	bgt.w	8014f10 <_dtoa_r+0x658>
 8014d60:	f040 826f 	bne.w	8015242 <_dtoa_r+0x98a>
 8014d64:	4b68      	ldr	r3, [pc, #416]	; (8014f08 <_dtoa_r+0x650>)
 8014d66:	2200      	movs	r2, #0
 8014d68:	4640      	mov	r0, r8
 8014d6a:	4649      	mov	r1, r9
 8014d6c:	f7eb fc6c 	bl	8000648 <__aeabi_dmul>
 8014d70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014d74:	f7eb feee 	bl	8000b54 <__aeabi_dcmpge>
 8014d78:	9e04      	ldr	r6, [sp, #16]
 8014d7a:	4637      	mov	r7, r6
 8014d7c:	2800      	cmp	r0, #0
 8014d7e:	f040 8245 	bne.w	801520c <_dtoa_r+0x954>
 8014d82:	9d00      	ldr	r5, [sp, #0]
 8014d84:	2331      	movs	r3, #49	; 0x31
 8014d86:	f805 3b01 	strb.w	r3, [r5], #1
 8014d8a:	f10b 0b01 	add.w	fp, fp, #1
 8014d8e:	e241      	b.n	8015214 <_dtoa_r+0x95c>
 8014d90:	07f2      	lsls	r2, r6, #31
 8014d92:	d505      	bpl.n	8014da0 <_dtoa_r+0x4e8>
 8014d94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014d98:	f7eb fc56 	bl	8000648 <__aeabi_dmul>
 8014d9c:	3501      	adds	r5, #1
 8014d9e:	2301      	movs	r3, #1
 8014da0:	1076      	asrs	r6, r6, #1
 8014da2:	3708      	adds	r7, #8
 8014da4:	e773      	b.n	8014c8e <_dtoa_r+0x3d6>
 8014da6:	2502      	movs	r5, #2
 8014da8:	e775      	b.n	8014c96 <_dtoa_r+0x3de>
 8014daa:	9e04      	ldr	r6, [sp, #16]
 8014dac:	465f      	mov	r7, fp
 8014dae:	e792      	b.n	8014cd6 <_dtoa_r+0x41e>
 8014db0:	9900      	ldr	r1, [sp, #0]
 8014db2:	4b50      	ldr	r3, [pc, #320]	; (8014ef4 <_dtoa_r+0x63c>)
 8014db4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014db8:	4431      	add	r1, r6
 8014dba:	9102      	str	r1, [sp, #8]
 8014dbc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014dbe:	eeb0 9a47 	vmov.f32	s18, s14
 8014dc2:	eef0 9a67 	vmov.f32	s19, s15
 8014dc6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8014dca:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8014dce:	2900      	cmp	r1, #0
 8014dd0:	d044      	beq.n	8014e5c <_dtoa_r+0x5a4>
 8014dd2:	494e      	ldr	r1, [pc, #312]	; (8014f0c <_dtoa_r+0x654>)
 8014dd4:	2000      	movs	r0, #0
 8014dd6:	f7eb fd61 	bl	800089c <__aeabi_ddiv>
 8014dda:	ec53 2b19 	vmov	r2, r3, d9
 8014dde:	f7eb fa7b 	bl	80002d8 <__aeabi_dsub>
 8014de2:	9d00      	ldr	r5, [sp, #0]
 8014de4:	ec41 0b19 	vmov	d9, r0, r1
 8014de8:	4649      	mov	r1, r9
 8014dea:	4640      	mov	r0, r8
 8014dec:	f7eb fedc 	bl	8000ba8 <__aeabi_d2iz>
 8014df0:	4606      	mov	r6, r0
 8014df2:	f7eb fbbf 	bl	8000574 <__aeabi_i2d>
 8014df6:	4602      	mov	r2, r0
 8014df8:	460b      	mov	r3, r1
 8014dfa:	4640      	mov	r0, r8
 8014dfc:	4649      	mov	r1, r9
 8014dfe:	f7eb fa6b 	bl	80002d8 <__aeabi_dsub>
 8014e02:	3630      	adds	r6, #48	; 0x30
 8014e04:	f805 6b01 	strb.w	r6, [r5], #1
 8014e08:	ec53 2b19 	vmov	r2, r3, d9
 8014e0c:	4680      	mov	r8, r0
 8014e0e:	4689      	mov	r9, r1
 8014e10:	f7eb fe8c 	bl	8000b2c <__aeabi_dcmplt>
 8014e14:	2800      	cmp	r0, #0
 8014e16:	d164      	bne.n	8014ee2 <_dtoa_r+0x62a>
 8014e18:	4642      	mov	r2, r8
 8014e1a:	464b      	mov	r3, r9
 8014e1c:	4937      	ldr	r1, [pc, #220]	; (8014efc <_dtoa_r+0x644>)
 8014e1e:	2000      	movs	r0, #0
 8014e20:	f7eb fa5a 	bl	80002d8 <__aeabi_dsub>
 8014e24:	ec53 2b19 	vmov	r2, r3, d9
 8014e28:	f7eb fe80 	bl	8000b2c <__aeabi_dcmplt>
 8014e2c:	2800      	cmp	r0, #0
 8014e2e:	f040 80b6 	bne.w	8014f9e <_dtoa_r+0x6e6>
 8014e32:	9b02      	ldr	r3, [sp, #8]
 8014e34:	429d      	cmp	r5, r3
 8014e36:	f43f af7c 	beq.w	8014d32 <_dtoa_r+0x47a>
 8014e3a:	4b31      	ldr	r3, [pc, #196]	; (8014f00 <_dtoa_r+0x648>)
 8014e3c:	ec51 0b19 	vmov	r0, r1, d9
 8014e40:	2200      	movs	r2, #0
 8014e42:	f7eb fc01 	bl	8000648 <__aeabi_dmul>
 8014e46:	4b2e      	ldr	r3, [pc, #184]	; (8014f00 <_dtoa_r+0x648>)
 8014e48:	ec41 0b19 	vmov	d9, r0, r1
 8014e4c:	2200      	movs	r2, #0
 8014e4e:	4640      	mov	r0, r8
 8014e50:	4649      	mov	r1, r9
 8014e52:	f7eb fbf9 	bl	8000648 <__aeabi_dmul>
 8014e56:	4680      	mov	r8, r0
 8014e58:	4689      	mov	r9, r1
 8014e5a:	e7c5      	b.n	8014de8 <_dtoa_r+0x530>
 8014e5c:	ec51 0b17 	vmov	r0, r1, d7
 8014e60:	f7eb fbf2 	bl	8000648 <__aeabi_dmul>
 8014e64:	9b02      	ldr	r3, [sp, #8]
 8014e66:	9d00      	ldr	r5, [sp, #0]
 8014e68:	930f      	str	r3, [sp, #60]	; 0x3c
 8014e6a:	ec41 0b19 	vmov	d9, r0, r1
 8014e6e:	4649      	mov	r1, r9
 8014e70:	4640      	mov	r0, r8
 8014e72:	f7eb fe99 	bl	8000ba8 <__aeabi_d2iz>
 8014e76:	4606      	mov	r6, r0
 8014e78:	f7eb fb7c 	bl	8000574 <__aeabi_i2d>
 8014e7c:	3630      	adds	r6, #48	; 0x30
 8014e7e:	4602      	mov	r2, r0
 8014e80:	460b      	mov	r3, r1
 8014e82:	4640      	mov	r0, r8
 8014e84:	4649      	mov	r1, r9
 8014e86:	f7eb fa27 	bl	80002d8 <__aeabi_dsub>
 8014e8a:	f805 6b01 	strb.w	r6, [r5], #1
 8014e8e:	9b02      	ldr	r3, [sp, #8]
 8014e90:	429d      	cmp	r5, r3
 8014e92:	4680      	mov	r8, r0
 8014e94:	4689      	mov	r9, r1
 8014e96:	f04f 0200 	mov.w	r2, #0
 8014e9a:	d124      	bne.n	8014ee6 <_dtoa_r+0x62e>
 8014e9c:	4b1b      	ldr	r3, [pc, #108]	; (8014f0c <_dtoa_r+0x654>)
 8014e9e:	ec51 0b19 	vmov	r0, r1, d9
 8014ea2:	f7eb fa1b 	bl	80002dc <__adddf3>
 8014ea6:	4602      	mov	r2, r0
 8014ea8:	460b      	mov	r3, r1
 8014eaa:	4640      	mov	r0, r8
 8014eac:	4649      	mov	r1, r9
 8014eae:	f7eb fe5b 	bl	8000b68 <__aeabi_dcmpgt>
 8014eb2:	2800      	cmp	r0, #0
 8014eb4:	d173      	bne.n	8014f9e <_dtoa_r+0x6e6>
 8014eb6:	ec53 2b19 	vmov	r2, r3, d9
 8014eba:	4914      	ldr	r1, [pc, #80]	; (8014f0c <_dtoa_r+0x654>)
 8014ebc:	2000      	movs	r0, #0
 8014ebe:	f7eb fa0b 	bl	80002d8 <__aeabi_dsub>
 8014ec2:	4602      	mov	r2, r0
 8014ec4:	460b      	mov	r3, r1
 8014ec6:	4640      	mov	r0, r8
 8014ec8:	4649      	mov	r1, r9
 8014eca:	f7eb fe2f 	bl	8000b2c <__aeabi_dcmplt>
 8014ece:	2800      	cmp	r0, #0
 8014ed0:	f43f af2f 	beq.w	8014d32 <_dtoa_r+0x47a>
 8014ed4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8014ed6:	1e6b      	subs	r3, r5, #1
 8014ed8:	930f      	str	r3, [sp, #60]	; 0x3c
 8014eda:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8014ede:	2b30      	cmp	r3, #48	; 0x30
 8014ee0:	d0f8      	beq.n	8014ed4 <_dtoa_r+0x61c>
 8014ee2:	46bb      	mov	fp, r7
 8014ee4:	e04a      	b.n	8014f7c <_dtoa_r+0x6c4>
 8014ee6:	4b06      	ldr	r3, [pc, #24]	; (8014f00 <_dtoa_r+0x648>)
 8014ee8:	f7eb fbae 	bl	8000648 <__aeabi_dmul>
 8014eec:	4680      	mov	r8, r0
 8014eee:	4689      	mov	r9, r1
 8014ef0:	e7bd      	b.n	8014e6e <_dtoa_r+0x5b6>
 8014ef2:	bf00      	nop
 8014ef4:	08016ff8 	.word	0x08016ff8
 8014ef8:	08016fd0 	.word	0x08016fd0
 8014efc:	3ff00000 	.word	0x3ff00000
 8014f00:	40240000 	.word	0x40240000
 8014f04:	401c0000 	.word	0x401c0000
 8014f08:	40140000 	.word	0x40140000
 8014f0c:	3fe00000 	.word	0x3fe00000
 8014f10:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8014f14:	9d00      	ldr	r5, [sp, #0]
 8014f16:	4642      	mov	r2, r8
 8014f18:	464b      	mov	r3, r9
 8014f1a:	4630      	mov	r0, r6
 8014f1c:	4639      	mov	r1, r7
 8014f1e:	f7eb fcbd 	bl	800089c <__aeabi_ddiv>
 8014f22:	f7eb fe41 	bl	8000ba8 <__aeabi_d2iz>
 8014f26:	9001      	str	r0, [sp, #4]
 8014f28:	f7eb fb24 	bl	8000574 <__aeabi_i2d>
 8014f2c:	4642      	mov	r2, r8
 8014f2e:	464b      	mov	r3, r9
 8014f30:	f7eb fb8a 	bl	8000648 <__aeabi_dmul>
 8014f34:	4602      	mov	r2, r0
 8014f36:	460b      	mov	r3, r1
 8014f38:	4630      	mov	r0, r6
 8014f3a:	4639      	mov	r1, r7
 8014f3c:	f7eb f9cc 	bl	80002d8 <__aeabi_dsub>
 8014f40:	9e01      	ldr	r6, [sp, #4]
 8014f42:	9f04      	ldr	r7, [sp, #16]
 8014f44:	3630      	adds	r6, #48	; 0x30
 8014f46:	f805 6b01 	strb.w	r6, [r5], #1
 8014f4a:	9e00      	ldr	r6, [sp, #0]
 8014f4c:	1bae      	subs	r6, r5, r6
 8014f4e:	42b7      	cmp	r7, r6
 8014f50:	4602      	mov	r2, r0
 8014f52:	460b      	mov	r3, r1
 8014f54:	d134      	bne.n	8014fc0 <_dtoa_r+0x708>
 8014f56:	f7eb f9c1 	bl	80002dc <__adddf3>
 8014f5a:	4642      	mov	r2, r8
 8014f5c:	464b      	mov	r3, r9
 8014f5e:	4606      	mov	r6, r0
 8014f60:	460f      	mov	r7, r1
 8014f62:	f7eb fe01 	bl	8000b68 <__aeabi_dcmpgt>
 8014f66:	b9c8      	cbnz	r0, 8014f9c <_dtoa_r+0x6e4>
 8014f68:	4642      	mov	r2, r8
 8014f6a:	464b      	mov	r3, r9
 8014f6c:	4630      	mov	r0, r6
 8014f6e:	4639      	mov	r1, r7
 8014f70:	f7eb fdd2 	bl	8000b18 <__aeabi_dcmpeq>
 8014f74:	b110      	cbz	r0, 8014f7c <_dtoa_r+0x6c4>
 8014f76:	9b01      	ldr	r3, [sp, #4]
 8014f78:	07db      	lsls	r3, r3, #31
 8014f7a:	d40f      	bmi.n	8014f9c <_dtoa_r+0x6e4>
 8014f7c:	4651      	mov	r1, sl
 8014f7e:	4620      	mov	r0, r4
 8014f80:	f000 fbcc 	bl	801571c <_Bfree>
 8014f84:	2300      	movs	r3, #0
 8014f86:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014f88:	702b      	strb	r3, [r5, #0]
 8014f8a:	f10b 0301 	add.w	r3, fp, #1
 8014f8e:	6013      	str	r3, [r2, #0]
 8014f90:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014f92:	2b00      	cmp	r3, #0
 8014f94:	f43f ace2 	beq.w	801495c <_dtoa_r+0xa4>
 8014f98:	601d      	str	r5, [r3, #0]
 8014f9a:	e4df      	b.n	801495c <_dtoa_r+0xa4>
 8014f9c:	465f      	mov	r7, fp
 8014f9e:	462b      	mov	r3, r5
 8014fa0:	461d      	mov	r5, r3
 8014fa2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014fa6:	2a39      	cmp	r2, #57	; 0x39
 8014fa8:	d106      	bne.n	8014fb8 <_dtoa_r+0x700>
 8014faa:	9a00      	ldr	r2, [sp, #0]
 8014fac:	429a      	cmp	r2, r3
 8014fae:	d1f7      	bne.n	8014fa0 <_dtoa_r+0x6e8>
 8014fb0:	9900      	ldr	r1, [sp, #0]
 8014fb2:	2230      	movs	r2, #48	; 0x30
 8014fb4:	3701      	adds	r7, #1
 8014fb6:	700a      	strb	r2, [r1, #0]
 8014fb8:	781a      	ldrb	r2, [r3, #0]
 8014fba:	3201      	adds	r2, #1
 8014fbc:	701a      	strb	r2, [r3, #0]
 8014fbe:	e790      	b.n	8014ee2 <_dtoa_r+0x62a>
 8014fc0:	4ba3      	ldr	r3, [pc, #652]	; (8015250 <_dtoa_r+0x998>)
 8014fc2:	2200      	movs	r2, #0
 8014fc4:	f7eb fb40 	bl	8000648 <__aeabi_dmul>
 8014fc8:	2200      	movs	r2, #0
 8014fca:	2300      	movs	r3, #0
 8014fcc:	4606      	mov	r6, r0
 8014fce:	460f      	mov	r7, r1
 8014fd0:	f7eb fda2 	bl	8000b18 <__aeabi_dcmpeq>
 8014fd4:	2800      	cmp	r0, #0
 8014fd6:	d09e      	beq.n	8014f16 <_dtoa_r+0x65e>
 8014fd8:	e7d0      	b.n	8014f7c <_dtoa_r+0x6c4>
 8014fda:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014fdc:	2a00      	cmp	r2, #0
 8014fde:	f000 80ca 	beq.w	8015176 <_dtoa_r+0x8be>
 8014fe2:	9a07      	ldr	r2, [sp, #28]
 8014fe4:	2a01      	cmp	r2, #1
 8014fe6:	f300 80ad 	bgt.w	8015144 <_dtoa_r+0x88c>
 8014fea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014fec:	2a00      	cmp	r2, #0
 8014fee:	f000 80a5 	beq.w	801513c <_dtoa_r+0x884>
 8014ff2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8014ff6:	9e08      	ldr	r6, [sp, #32]
 8014ff8:	9d05      	ldr	r5, [sp, #20]
 8014ffa:	9a05      	ldr	r2, [sp, #20]
 8014ffc:	441a      	add	r2, r3
 8014ffe:	9205      	str	r2, [sp, #20]
 8015000:	9a06      	ldr	r2, [sp, #24]
 8015002:	2101      	movs	r1, #1
 8015004:	441a      	add	r2, r3
 8015006:	4620      	mov	r0, r4
 8015008:	9206      	str	r2, [sp, #24]
 801500a:	f000 fc3d 	bl	8015888 <__i2b>
 801500e:	4607      	mov	r7, r0
 8015010:	b165      	cbz	r5, 801502c <_dtoa_r+0x774>
 8015012:	9b06      	ldr	r3, [sp, #24]
 8015014:	2b00      	cmp	r3, #0
 8015016:	dd09      	ble.n	801502c <_dtoa_r+0x774>
 8015018:	42ab      	cmp	r3, r5
 801501a:	9a05      	ldr	r2, [sp, #20]
 801501c:	bfa8      	it	ge
 801501e:	462b      	movge	r3, r5
 8015020:	1ad2      	subs	r2, r2, r3
 8015022:	9205      	str	r2, [sp, #20]
 8015024:	9a06      	ldr	r2, [sp, #24]
 8015026:	1aed      	subs	r5, r5, r3
 8015028:	1ad3      	subs	r3, r2, r3
 801502a:	9306      	str	r3, [sp, #24]
 801502c:	9b08      	ldr	r3, [sp, #32]
 801502e:	b1f3      	cbz	r3, 801506e <_dtoa_r+0x7b6>
 8015030:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015032:	2b00      	cmp	r3, #0
 8015034:	f000 80a3 	beq.w	801517e <_dtoa_r+0x8c6>
 8015038:	2e00      	cmp	r6, #0
 801503a:	dd10      	ble.n	801505e <_dtoa_r+0x7a6>
 801503c:	4639      	mov	r1, r7
 801503e:	4632      	mov	r2, r6
 8015040:	4620      	mov	r0, r4
 8015042:	f000 fce1 	bl	8015a08 <__pow5mult>
 8015046:	4652      	mov	r2, sl
 8015048:	4601      	mov	r1, r0
 801504a:	4607      	mov	r7, r0
 801504c:	4620      	mov	r0, r4
 801504e:	f000 fc31 	bl	80158b4 <__multiply>
 8015052:	4651      	mov	r1, sl
 8015054:	4680      	mov	r8, r0
 8015056:	4620      	mov	r0, r4
 8015058:	f000 fb60 	bl	801571c <_Bfree>
 801505c:	46c2      	mov	sl, r8
 801505e:	9b08      	ldr	r3, [sp, #32]
 8015060:	1b9a      	subs	r2, r3, r6
 8015062:	d004      	beq.n	801506e <_dtoa_r+0x7b6>
 8015064:	4651      	mov	r1, sl
 8015066:	4620      	mov	r0, r4
 8015068:	f000 fcce 	bl	8015a08 <__pow5mult>
 801506c:	4682      	mov	sl, r0
 801506e:	2101      	movs	r1, #1
 8015070:	4620      	mov	r0, r4
 8015072:	f000 fc09 	bl	8015888 <__i2b>
 8015076:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015078:	2b00      	cmp	r3, #0
 801507a:	4606      	mov	r6, r0
 801507c:	f340 8081 	ble.w	8015182 <_dtoa_r+0x8ca>
 8015080:	461a      	mov	r2, r3
 8015082:	4601      	mov	r1, r0
 8015084:	4620      	mov	r0, r4
 8015086:	f000 fcbf 	bl	8015a08 <__pow5mult>
 801508a:	9b07      	ldr	r3, [sp, #28]
 801508c:	2b01      	cmp	r3, #1
 801508e:	4606      	mov	r6, r0
 8015090:	dd7a      	ble.n	8015188 <_dtoa_r+0x8d0>
 8015092:	f04f 0800 	mov.w	r8, #0
 8015096:	6933      	ldr	r3, [r6, #16]
 8015098:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801509c:	6918      	ldr	r0, [r3, #16]
 801509e:	f000 fba5 	bl	80157ec <__hi0bits>
 80150a2:	f1c0 0020 	rsb	r0, r0, #32
 80150a6:	9b06      	ldr	r3, [sp, #24]
 80150a8:	4418      	add	r0, r3
 80150aa:	f010 001f 	ands.w	r0, r0, #31
 80150ae:	f000 8094 	beq.w	80151da <_dtoa_r+0x922>
 80150b2:	f1c0 0320 	rsb	r3, r0, #32
 80150b6:	2b04      	cmp	r3, #4
 80150b8:	f340 8085 	ble.w	80151c6 <_dtoa_r+0x90e>
 80150bc:	9b05      	ldr	r3, [sp, #20]
 80150be:	f1c0 001c 	rsb	r0, r0, #28
 80150c2:	4403      	add	r3, r0
 80150c4:	9305      	str	r3, [sp, #20]
 80150c6:	9b06      	ldr	r3, [sp, #24]
 80150c8:	4403      	add	r3, r0
 80150ca:	4405      	add	r5, r0
 80150cc:	9306      	str	r3, [sp, #24]
 80150ce:	9b05      	ldr	r3, [sp, #20]
 80150d0:	2b00      	cmp	r3, #0
 80150d2:	dd05      	ble.n	80150e0 <_dtoa_r+0x828>
 80150d4:	4651      	mov	r1, sl
 80150d6:	461a      	mov	r2, r3
 80150d8:	4620      	mov	r0, r4
 80150da:	f000 fcef 	bl	8015abc <__lshift>
 80150de:	4682      	mov	sl, r0
 80150e0:	9b06      	ldr	r3, [sp, #24]
 80150e2:	2b00      	cmp	r3, #0
 80150e4:	dd05      	ble.n	80150f2 <_dtoa_r+0x83a>
 80150e6:	4631      	mov	r1, r6
 80150e8:	461a      	mov	r2, r3
 80150ea:	4620      	mov	r0, r4
 80150ec:	f000 fce6 	bl	8015abc <__lshift>
 80150f0:	4606      	mov	r6, r0
 80150f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80150f4:	2b00      	cmp	r3, #0
 80150f6:	d072      	beq.n	80151de <_dtoa_r+0x926>
 80150f8:	4631      	mov	r1, r6
 80150fa:	4650      	mov	r0, sl
 80150fc:	f000 fd4a 	bl	8015b94 <__mcmp>
 8015100:	2800      	cmp	r0, #0
 8015102:	da6c      	bge.n	80151de <_dtoa_r+0x926>
 8015104:	2300      	movs	r3, #0
 8015106:	4651      	mov	r1, sl
 8015108:	220a      	movs	r2, #10
 801510a:	4620      	mov	r0, r4
 801510c:	f000 fb28 	bl	8015760 <__multadd>
 8015110:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015112:	f10b 3bff 	add.w	fp, fp, #4294967295
 8015116:	4682      	mov	sl, r0
 8015118:	2b00      	cmp	r3, #0
 801511a:	f000 81b0 	beq.w	801547e <_dtoa_r+0xbc6>
 801511e:	2300      	movs	r3, #0
 8015120:	4639      	mov	r1, r7
 8015122:	220a      	movs	r2, #10
 8015124:	4620      	mov	r0, r4
 8015126:	f000 fb1b 	bl	8015760 <__multadd>
 801512a:	9b01      	ldr	r3, [sp, #4]
 801512c:	2b00      	cmp	r3, #0
 801512e:	4607      	mov	r7, r0
 8015130:	f300 8096 	bgt.w	8015260 <_dtoa_r+0x9a8>
 8015134:	9b07      	ldr	r3, [sp, #28]
 8015136:	2b02      	cmp	r3, #2
 8015138:	dc59      	bgt.n	80151ee <_dtoa_r+0x936>
 801513a:	e091      	b.n	8015260 <_dtoa_r+0x9a8>
 801513c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801513e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8015142:	e758      	b.n	8014ff6 <_dtoa_r+0x73e>
 8015144:	9b04      	ldr	r3, [sp, #16]
 8015146:	1e5e      	subs	r6, r3, #1
 8015148:	9b08      	ldr	r3, [sp, #32]
 801514a:	42b3      	cmp	r3, r6
 801514c:	bfbf      	itttt	lt
 801514e:	9b08      	ldrlt	r3, [sp, #32]
 8015150:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8015152:	9608      	strlt	r6, [sp, #32]
 8015154:	1af3      	sublt	r3, r6, r3
 8015156:	bfb4      	ite	lt
 8015158:	18d2      	addlt	r2, r2, r3
 801515a:	1b9e      	subge	r6, r3, r6
 801515c:	9b04      	ldr	r3, [sp, #16]
 801515e:	bfbc      	itt	lt
 8015160:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8015162:	2600      	movlt	r6, #0
 8015164:	2b00      	cmp	r3, #0
 8015166:	bfb7      	itett	lt
 8015168:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 801516c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8015170:	1a9d      	sublt	r5, r3, r2
 8015172:	2300      	movlt	r3, #0
 8015174:	e741      	b.n	8014ffa <_dtoa_r+0x742>
 8015176:	9e08      	ldr	r6, [sp, #32]
 8015178:	9d05      	ldr	r5, [sp, #20]
 801517a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801517c:	e748      	b.n	8015010 <_dtoa_r+0x758>
 801517e:	9a08      	ldr	r2, [sp, #32]
 8015180:	e770      	b.n	8015064 <_dtoa_r+0x7ac>
 8015182:	9b07      	ldr	r3, [sp, #28]
 8015184:	2b01      	cmp	r3, #1
 8015186:	dc19      	bgt.n	80151bc <_dtoa_r+0x904>
 8015188:	9b02      	ldr	r3, [sp, #8]
 801518a:	b9bb      	cbnz	r3, 80151bc <_dtoa_r+0x904>
 801518c:	9b03      	ldr	r3, [sp, #12]
 801518e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015192:	b99b      	cbnz	r3, 80151bc <_dtoa_r+0x904>
 8015194:	9b03      	ldr	r3, [sp, #12]
 8015196:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801519a:	0d1b      	lsrs	r3, r3, #20
 801519c:	051b      	lsls	r3, r3, #20
 801519e:	b183      	cbz	r3, 80151c2 <_dtoa_r+0x90a>
 80151a0:	9b05      	ldr	r3, [sp, #20]
 80151a2:	3301      	adds	r3, #1
 80151a4:	9305      	str	r3, [sp, #20]
 80151a6:	9b06      	ldr	r3, [sp, #24]
 80151a8:	3301      	adds	r3, #1
 80151aa:	9306      	str	r3, [sp, #24]
 80151ac:	f04f 0801 	mov.w	r8, #1
 80151b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80151b2:	2b00      	cmp	r3, #0
 80151b4:	f47f af6f 	bne.w	8015096 <_dtoa_r+0x7de>
 80151b8:	2001      	movs	r0, #1
 80151ba:	e774      	b.n	80150a6 <_dtoa_r+0x7ee>
 80151bc:	f04f 0800 	mov.w	r8, #0
 80151c0:	e7f6      	b.n	80151b0 <_dtoa_r+0x8f8>
 80151c2:	4698      	mov	r8, r3
 80151c4:	e7f4      	b.n	80151b0 <_dtoa_r+0x8f8>
 80151c6:	d082      	beq.n	80150ce <_dtoa_r+0x816>
 80151c8:	9a05      	ldr	r2, [sp, #20]
 80151ca:	331c      	adds	r3, #28
 80151cc:	441a      	add	r2, r3
 80151ce:	9205      	str	r2, [sp, #20]
 80151d0:	9a06      	ldr	r2, [sp, #24]
 80151d2:	441a      	add	r2, r3
 80151d4:	441d      	add	r5, r3
 80151d6:	9206      	str	r2, [sp, #24]
 80151d8:	e779      	b.n	80150ce <_dtoa_r+0x816>
 80151da:	4603      	mov	r3, r0
 80151dc:	e7f4      	b.n	80151c8 <_dtoa_r+0x910>
 80151de:	9b04      	ldr	r3, [sp, #16]
 80151e0:	2b00      	cmp	r3, #0
 80151e2:	dc37      	bgt.n	8015254 <_dtoa_r+0x99c>
 80151e4:	9b07      	ldr	r3, [sp, #28]
 80151e6:	2b02      	cmp	r3, #2
 80151e8:	dd34      	ble.n	8015254 <_dtoa_r+0x99c>
 80151ea:	9b04      	ldr	r3, [sp, #16]
 80151ec:	9301      	str	r3, [sp, #4]
 80151ee:	9b01      	ldr	r3, [sp, #4]
 80151f0:	b963      	cbnz	r3, 801520c <_dtoa_r+0x954>
 80151f2:	4631      	mov	r1, r6
 80151f4:	2205      	movs	r2, #5
 80151f6:	4620      	mov	r0, r4
 80151f8:	f000 fab2 	bl	8015760 <__multadd>
 80151fc:	4601      	mov	r1, r0
 80151fe:	4606      	mov	r6, r0
 8015200:	4650      	mov	r0, sl
 8015202:	f000 fcc7 	bl	8015b94 <__mcmp>
 8015206:	2800      	cmp	r0, #0
 8015208:	f73f adbb 	bgt.w	8014d82 <_dtoa_r+0x4ca>
 801520c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801520e:	9d00      	ldr	r5, [sp, #0]
 8015210:	ea6f 0b03 	mvn.w	fp, r3
 8015214:	f04f 0800 	mov.w	r8, #0
 8015218:	4631      	mov	r1, r6
 801521a:	4620      	mov	r0, r4
 801521c:	f000 fa7e 	bl	801571c <_Bfree>
 8015220:	2f00      	cmp	r7, #0
 8015222:	f43f aeab 	beq.w	8014f7c <_dtoa_r+0x6c4>
 8015226:	f1b8 0f00 	cmp.w	r8, #0
 801522a:	d005      	beq.n	8015238 <_dtoa_r+0x980>
 801522c:	45b8      	cmp	r8, r7
 801522e:	d003      	beq.n	8015238 <_dtoa_r+0x980>
 8015230:	4641      	mov	r1, r8
 8015232:	4620      	mov	r0, r4
 8015234:	f000 fa72 	bl	801571c <_Bfree>
 8015238:	4639      	mov	r1, r7
 801523a:	4620      	mov	r0, r4
 801523c:	f000 fa6e 	bl	801571c <_Bfree>
 8015240:	e69c      	b.n	8014f7c <_dtoa_r+0x6c4>
 8015242:	2600      	movs	r6, #0
 8015244:	4637      	mov	r7, r6
 8015246:	e7e1      	b.n	801520c <_dtoa_r+0x954>
 8015248:	46bb      	mov	fp, r7
 801524a:	4637      	mov	r7, r6
 801524c:	e599      	b.n	8014d82 <_dtoa_r+0x4ca>
 801524e:	bf00      	nop
 8015250:	40240000 	.word	0x40240000
 8015254:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015256:	2b00      	cmp	r3, #0
 8015258:	f000 80c8 	beq.w	80153ec <_dtoa_r+0xb34>
 801525c:	9b04      	ldr	r3, [sp, #16]
 801525e:	9301      	str	r3, [sp, #4]
 8015260:	2d00      	cmp	r5, #0
 8015262:	dd05      	ble.n	8015270 <_dtoa_r+0x9b8>
 8015264:	4639      	mov	r1, r7
 8015266:	462a      	mov	r2, r5
 8015268:	4620      	mov	r0, r4
 801526a:	f000 fc27 	bl	8015abc <__lshift>
 801526e:	4607      	mov	r7, r0
 8015270:	f1b8 0f00 	cmp.w	r8, #0
 8015274:	d05b      	beq.n	801532e <_dtoa_r+0xa76>
 8015276:	6879      	ldr	r1, [r7, #4]
 8015278:	4620      	mov	r0, r4
 801527a:	f000 fa0f 	bl	801569c <_Balloc>
 801527e:	4605      	mov	r5, r0
 8015280:	b928      	cbnz	r0, 801528e <_dtoa_r+0x9d6>
 8015282:	4b83      	ldr	r3, [pc, #524]	; (8015490 <_dtoa_r+0xbd8>)
 8015284:	4602      	mov	r2, r0
 8015286:	f240 21ef 	movw	r1, #751	; 0x2ef
 801528a:	f7ff bb2e 	b.w	80148ea <_dtoa_r+0x32>
 801528e:	693a      	ldr	r2, [r7, #16]
 8015290:	3202      	adds	r2, #2
 8015292:	0092      	lsls	r2, r2, #2
 8015294:	f107 010c 	add.w	r1, r7, #12
 8015298:	300c      	adds	r0, #12
 801529a:	f7ff fa74 	bl	8014786 <memcpy>
 801529e:	2201      	movs	r2, #1
 80152a0:	4629      	mov	r1, r5
 80152a2:	4620      	mov	r0, r4
 80152a4:	f000 fc0a 	bl	8015abc <__lshift>
 80152a8:	9b00      	ldr	r3, [sp, #0]
 80152aa:	3301      	adds	r3, #1
 80152ac:	9304      	str	r3, [sp, #16]
 80152ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 80152b2:	4413      	add	r3, r2
 80152b4:	9308      	str	r3, [sp, #32]
 80152b6:	9b02      	ldr	r3, [sp, #8]
 80152b8:	f003 0301 	and.w	r3, r3, #1
 80152bc:	46b8      	mov	r8, r7
 80152be:	9306      	str	r3, [sp, #24]
 80152c0:	4607      	mov	r7, r0
 80152c2:	9b04      	ldr	r3, [sp, #16]
 80152c4:	4631      	mov	r1, r6
 80152c6:	3b01      	subs	r3, #1
 80152c8:	4650      	mov	r0, sl
 80152ca:	9301      	str	r3, [sp, #4]
 80152cc:	f7ff fa69 	bl	80147a2 <quorem>
 80152d0:	4641      	mov	r1, r8
 80152d2:	9002      	str	r0, [sp, #8]
 80152d4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80152d8:	4650      	mov	r0, sl
 80152da:	f000 fc5b 	bl	8015b94 <__mcmp>
 80152de:	463a      	mov	r2, r7
 80152e0:	9005      	str	r0, [sp, #20]
 80152e2:	4631      	mov	r1, r6
 80152e4:	4620      	mov	r0, r4
 80152e6:	f000 fc71 	bl	8015bcc <__mdiff>
 80152ea:	68c2      	ldr	r2, [r0, #12]
 80152ec:	4605      	mov	r5, r0
 80152ee:	bb02      	cbnz	r2, 8015332 <_dtoa_r+0xa7a>
 80152f0:	4601      	mov	r1, r0
 80152f2:	4650      	mov	r0, sl
 80152f4:	f000 fc4e 	bl	8015b94 <__mcmp>
 80152f8:	4602      	mov	r2, r0
 80152fa:	4629      	mov	r1, r5
 80152fc:	4620      	mov	r0, r4
 80152fe:	9209      	str	r2, [sp, #36]	; 0x24
 8015300:	f000 fa0c 	bl	801571c <_Bfree>
 8015304:	9b07      	ldr	r3, [sp, #28]
 8015306:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015308:	9d04      	ldr	r5, [sp, #16]
 801530a:	ea43 0102 	orr.w	r1, r3, r2
 801530e:	9b06      	ldr	r3, [sp, #24]
 8015310:	4319      	orrs	r1, r3
 8015312:	d110      	bne.n	8015336 <_dtoa_r+0xa7e>
 8015314:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8015318:	d029      	beq.n	801536e <_dtoa_r+0xab6>
 801531a:	9b05      	ldr	r3, [sp, #20]
 801531c:	2b00      	cmp	r3, #0
 801531e:	dd02      	ble.n	8015326 <_dtoa_r+0xa6e>
 8015320:	9b02      	ldr	r3, [sp, #8]
 8015322:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8015326:	9b01      	ldr	r3, [sp, #4]
 8015328:	f883 9000 	strb.w	r9, [r3]
 801532c:	e774      	b.n	8015218 <_dtoa_r+0x960>
 801532e:	4638      	mov	r0, r7
 8015330:	e7ba      	b.n	80152a8 <_dtoa_r+0x9f0>
 8015332:	2201      	movs	r2, #1
 8015334:	e7e1      	b.n	80152fa <_dtoa_r+0xa42>
 8015336:	9b05      	ldr	r3, [sp, #20]
 8015338:	2b00      	cmp	r3, #0
 801533a:	db04      	blt.n	8015346 <_dtoa_r+0xa8e>
 801533c:	9907      	ldr	r1, [sp, #28]
 801533e:	430b      	orrs	r3, r1
 8015340:	9906      	ldr	r1, [sp, #24]
 8015342:	430b      	orrs	r3, r1
 8015344:	d120      	bne.n	8015388 <_dtoa_r+0xad0>
 8015346:	2a00      	cmp	r2, #0
 8015348:	dded      	ble.n	8015326 <_dtoa_r+0xa6e>
 801534a:	4651      	mov	r1, sl
 801534c:	2201      	movs	r2, #1
 801534e:	4620      	mov	r0, r4
 8015350:	f000 fbb4 	bl	8015abc <__lshift>
 8015354:	4631      	mov	r1, r6
 8015356:	4682      	mov	sl, r0
 8015358:	f000 fc1c 	bl	8015b94 <__mcmp>
 801535c:	2800      	cmp	r0, #0
 801535e:	dc03      	bgt.n	8015368 <_dtoa_r+0xab0>
 8015360:	d1e1      	bne.n	8015326 <_dtoa_r+0xa6e>
 8015362:	f019 0f01 	tst.w	r9, #1
 8015366:	d0de      	beq.n	8015326 <_dtoa_r+0xa6e>
 8015368:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801536c:	d1d8      	bne.n	8015320 <_dtoa_r+0xa68>
 801536e:	9a01      	ldr	r2, [sp, #4]
 8015370:	2339      	movs	r3, #57	; 0x39
 8015372:	7013      	strb	r3, [r2, #0]
 8015374:	462b      	mov	r3, r5
 8015376:	461d      	mov	r5, r3
 8015378:	3b01      	subs	r3, #1
 801537a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801537e:	2a39      	cmp	r2, #57	; 0x39
 8015380:	d06c      	beq.n	801545c <_dtoa_r+0xba4>
 8015382:	3201      	adds	r2, #1
 8015384:	701a      	strb	r2, [r3, #0]
 8015386:	e747      	b.n	8015218 <_dtoa_r+0x960>
 8015388:	2a00      	cmp	r2, #0
 801538a:	dd07      	ble.n	801539c <_dtoa_r+0xae4>
 801538c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8015390:	d0ed      	beq.n	801536e <_dtoa_r+0xab6>
 8015392:	9a01      	ldr	r2, [sp, #4]
 8015394:	f109 0301 	add.w	r3, r9, #1
 8015398:	7013      	strb	r3, [r2, #0]
 801539a:	e73d      	b.n	8015218 <_dtoa_r+0x960>
 801539c:	9b04      	ldr	r3, [sp, #16]
 801539e:	9a08      	ldr	r2, [sp, #32]
 80153a0:	f803 9c01 	strb.w	r9, [r3, #-1]
 80153a4:	4293      	cmp	r3, r2
 80153a6:	d043      	beq.n	8015430 <_dtoa_r+0xb78>
 80153a8:	4651      	mov	r1, sl
 80153aa:	2300      	movs	r3, #0
 80153ac:	220a      	movs	r2, #10
 80153ae:	4620      	mov	r0, r4
 80153b0:	f000 f9d6 	bl	8015760 <__multadd>
 80153b4:	45b8      	cmp	r8, r7
 80153b6:	4682      	mov	sl, r0
 80153b8:	f04f 0300 	mov.w	r3, #0
 80153bc:	f04f 020a 	mov.w	r2, #10
 80153c0:	4641      	mov	r1, r8
 80153c2:	4620      	mov	r0, r4
 80153c4:	d107      	bne.n	80153d6 <_dtoa_r+0xb1e>
 80153c6:	f000 f9cb 	bl	8015760 <__multadd>
 80153ca:	4680      	mov	r8, r0
 80153cc:	4607      	mov	r7, r0
 80153ce:	9b04      	ldr	r3, [sp, #16]
 80153d0:	3301      	adds	r3, #1
 80153d2:	9304      	str	r3, [sp, #16]
 80153d4:	e775      	b.n	80152c2 <_dtoa_r+0xa0a>
 80153d6:	f000 f9c3 	bl	8015760 <__multadd>
 80153da:	4639      	mov	r1, r7
 80153dc:	4680      	mov	r8, r0
 80153de:	2300      	movs	r3, #0
 80153e0:	220a      	movs	r2, #10
 80153e2:	4620      	mov	r0, r4
 80153e4:	f000 f9bc 	bl	8015760 <__multadd>
 80153e8:	4607      	mov	r7, r0
 80153ea:	e7f0      	b.n	80153ce <_dtoa_r+0xb16>
 80153ec:	9b04      	ldr	r3, [sp, #16]
 80153ee:	9301      	str	r3, [sp, #4]
 80153f0:	9d00      	ldr	r5, [sp, #0]
 80153f2:	4631      	mov	r1, r6
 80153f4:	4650      	mov	r0, sl
 80153f6:	f7ff f9d4 	bl	80147a2 <quorem>
 80153fa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80153fe:	9b00      	ldr	r3, [sp, #0]
 8015400:	f805 9b01 	strb.w	r9, [r5], #1
 8015404:	1aea      	subs	r2, r5, r3
 8015406:	9b01      	ldr	r3, [sp, #4]
 8015408:	4293      	cmp	r3, r2
 801540a:	dd07      	ble.n	801541c <_dtoa_r+0xb64>
 801540c:	4651      	mov	r1, sl
 801540e:	2300      	movs	r3, #0
 8015410:	220a      	movs	r2, #10
 8015412:	4620      	mov	r0, r4
 8015414:	f000 f9a4 	bl	8015760 <__multadd>
 8015418:	4682      	mov	sl, r0
 801541a:	e7ea      	b.n	80153f2 <_dtoa_r+0xb3a>
 801541c:	9b01      	ldr	r3, [sp, #4]
 801541e:	2b00      	cmp	r3, #0
 8015420:	bfc8      	it	gt
 8015422:	461d      	movgt	r5, r3
 8015424:	9b00      	ldr	r3, [sp, #0]
 8015426:	bfd8      	it	le
 8015428:	2501      	movle	r5, #1
 801542a:	441d      	add	r5, r3
 801542c:	f04f 0800 	mov.w	r8, #0
 8015430:	4651      	mov	r1, sl
 8015432:	2201      	movs	r2, #1
 8015434:	4620      	mov	r0, r4
 8015436:	f000 fb41 	bl	8015abc <__lshift>
 801543a:	4631      	mov	r1, r6
 801543c:	4682      	mov	sl, r0
 801543e:	f000 fba9 	bl	8015b94 <__mcmp>
 8015442:	2800      	cmp	r0, #0
 8015444:	dc96      	bgt.n	8015374 <_dtoa_r+0xabc>
 8015446:	d102      	bne.n	801544e <_dtoa_r+0xb96>
 8015448:	f019 0f01 	tst.w	r9, #1
 801544c:	d192      	bne.n	8015374 <_dtoa_r+0xabc>
 801544e:	462b      	mov	r3, r5
 8015450:	461d      	mov	r5, r3
 8015452:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8015456:	2a30      	cmp	r2, #48	; 0x30
 8015458:	d0fa      	beq.n	8015450 <_dtoa_r+0xb98>
 801545a:	e6dd      	b.n	8015218 <_dtoa_r+0x960>
 801545c:	9a00      	ldr	r2, [sp, #0]
 801545e:	429a      	cmp	r2, r3
 8015460:	d189      	bne.n	8015376 <_dtoa_r+0xabe>
 8015462:	f10b 0b01 	add.w	fp, fp, #1
 8015466:	2331      	movs	r3, #49	; 0x31
 8015468:	e796      	b.n	8015398 <_dtoa_r+0xae0>
 801546a:	4b0a      	ldr	r3, [pc, #40]	; (8015494 <_dtoa_r+0xbdc>)
 801546c:	f7ff ba99 	b.w	80149a2 <_dtoa_r+0xea>
 8015470:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015472:	2b00      	cmp	r3, #0
 8015474:	f47f aa6d 	bne.w	8014952 <_dtoa_r+0x9a>
 8015478:	4b07      	ldr	r3, [pc, #28]	; (8015498 <_dtoa_r+0xbe0>)
 801547a:	f7ff ba92 	b.w	80149a2 <_dtoa_r+0xea>
 801547e:	9b01      	ldr	r3, [sp, #4]
 8015480:	2b00      	cmp	r3, #0
 8015482:	dcb5      	bgt.n	80153f0 <_dtoa_r+0xb38>
 8015484:	9b07      	ldr	r3, [sp, #28]
 8015486:	2b02      	cmp	r3, #2
 8015488:	f73f aeb1 	bgt.w	80151ee <_dtoa_r+0x936>
 801548c:	e7b0      	b.n	80153f0 <_dtoa_r+0xb38>
 801548e:	bf00      	nop
 8015490:	08016f64 	.word	0x08016f64
 8015494:	08016ec4 	.word	0x08016ec4
 8015498:	08016ee8 	.word	0x08016ee8

0801549c <_free_r>:
 801549c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801549e:	2900      	cmp	r1, #0
 80154a0:	d044      	beq.n	801552c <_free_r+0x90>
 80154a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80154a6:	9001      	str	r0, [sp, #4]
 80154a8:	2b00      	cmp	r3, #0
 80154aa:	f1a1 0404 	sub.w	r4, r1, #4
 80154ae:	bfb8      	it	lt
 80154b0:	18e4      	addlt	r4, r4, r3
 80154b2:	f000 f8e7 	bl	8015684 <__malloc_lock>
 80154b6:	4a1e      	ldr	r2, [pc, #120]	; (8015530 <_free_r+0x94>)
 80154b8:	9801      	ldr	r0, [sp, #4]
 80154ba:	6813      	ldr	r3, [r2, #0]
 80154bc:	b933      	cbnz	r3, 80154cc <_free_r+0x30>
 80154be:	6063      	str	r3, [r4, #4]
 80154c0:	6014      	str	r4, [r2, #0]
 80154c2:	b003      	add	sp, #12
 80154c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80154c8:	f000 b8e2 	b.w	8015690 <__malloc_unlock>
 80154cc:	42a3      	cmp	r3, r4
 80154ce:	d908      	bls.n	80154e2 <_free_r+0x46>
 80154d0:	6825      	ldr	r5, [r4, #0]
 80154d2:	1961      	adds	r1, r4, r5
 80154d4:	428b      	cmp	r3, r1
 80154d6:	bf01      	itttt	eq
 80154d8:	6819      	ldreq	r1, [r3, #0]
 80154da:	685b      	ldreq	r3, [r3, #4]
 80154dc:	1949      	addeq	r1, r1, r5
 80154de:	6021      	streq	r1, [r4, #0]
 80154e0:	e7ed      	b.n	80154be <_free_r+0x22>
 80154e2:	461a      	mov	r2, r3
 80154e4:	685b      	ldr	r3, [r3, #4]
 80154e6:	b10b      	cbz	r3, 80154ec <_free_r+0x50>
 80154e8:	42a3      	cmp	r3, r4
 80154ea:	d9fa      	bls.n	80154e2 <_free_r+0x46>
 80154ec:	6811      	ldr	r1, [r2, #0]
 80154ee:	1855      	adds	r5, r2, r1
 80154f0:	42a5      	cmp	r5, r4
 80154f2:	d10b      	bne.n	801550c <_free_r+0x70>
 80154f4:	6824      	ldr	r4, [r4, #0]
 80154f6:	4421      	add	r1, r4
 80154f8:	1854      	adds	r4, r2, r1
 80154fa:	42a3      	cmp	r3, r4
 80154fc:	6011      	str	r1, [r2, #0]
 80154fe:	d1e0      	bne.n	80154c2 <_free_r+0x26>
 8015500:	681c      	ldr	r4, [r3, #0]
 8015502:	685b      	ldr	r3, [r3, #4]
 8015504:	6053      	str	r3, [r2, #4]
 8015506:	440c      	add	r4, r1
 8015508:	6014      	str	r4, [r2, #0]
 801550a:	e7da      	b.n	80154c2 <_free_r+0x26>
 801550c:	d902      	bls.n	8015514 <_free_r+0x78>
 801550e:	230c      	movs	r3, #12
 8015510:	6003      	str	r3, [r0, #0]
 8015512:	e7d6      	b.n	80154c2 <_free_r+0x26>
 8015514:	6825      	ldr	r5, [r4, #0]
 8015516:	1961      	adds	r1, r4, r5
 8015518:	428b      	cmp	r3, r1
 801551a:	bf04      	itt	eq
 801551c:	6819      	ldreq	r1, [r3, #0]
 801551e:	685b      	ldreq	r3, [r3, #4]
 8015520:	6063      	str	r3, [r4, #4]
 8015522:	bf04      	itt	eq
 8015524:	1949      	addeq	r1, r1, r5
 8015526:	6021      	streq	r1, [r4, #0]
 8015528:	6054      	str	r4, [r2, #4]
 801552a:	e7ca      	b.n	80154c2 <_free_r+0x26>
 801552c:	b003      	add	sp, #12
 801552e:	bd30      	pop	{r4, r5, pc}
 8015530:	2000996c 	.word	0x2000996c

08015534 <malloc>:
 8015534:	4b02      	ldr	r3, [pc, #8]	; (8015540 <malloc+0xc>)
 8015536:	4601      	mov	r1, r0
 8015538:	6818      	ldr	r0, [r3, #0]
 801553a:	f000 b823 	b.w	8015584 <_malloc_r>
 801553e:	bf00      	nop
 8015540:	20000410 	.word	0x20000410

08015544 <sbrk_aligned>:
 8015544:	b570      	push	{r4, r5, r6, lr}
 8015546:	4e0e      	ldr	r6, [pc, #56]	; (8015580 <sbrk_aligned+0x3c>)
 8015548:	460c      	mov	r4, r1
 801554a:	6831      	ldr	r1, [r6, #0]
 801554c:	4605      	mov	r5, r0
 801554e:	b911      	cbnz	r1, 8015556 <sbrk_aligned+0x12>
 8015550:	f000 fe26 	bl	80161a0 <_sbrk_r>
 8015554:	6030      	str	r0, [r6, #0]
 8015556:	4621      	mov	r1, r4
 8015558:	4628      	mov	r0, r5
 801555a:	f000 fe21 	bl	80161a0 <_sbrk_r>
 801555e:	1c43      	adds	r3, r0, #1
 8015560:	d00a      	beq.n	8015578 <sbrk_aligned+0x34>
 8015562:	1cc4      	adds	r4, r0, #3
 8015564:	f024 0403 	bic.w	r4, r4, #3
 8015568:	42a0      	cmp	r0, r4
 801556a:	d007      	beq.n	801557c <sbrk_aligned+0x38>
 801556c:	1a21      	subs	r1, r4, r0
 801556e:	4628      	mov	r0, r5
 8015570:	f000 fe16 	bl	80161a0 <_sbrk_r>
 8015574:	3001      	adds	r0, #1
 8015576:	d101      	bne.n	801557c <sbrk_aligned+0x38>
 8015578:	f04f 34ff 	mov.w	r4, #4294967295
 801557c:	4620      	mov	r0, r4
 801557e:	bd70      	pop	{r4, r5, r6, pc}
 8015580:	20009970 	.word	0x20009970

08015584 <_malloc_r>:
 8015584:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015588:	1ccd      	adds	r5, r1, #3
 801558a:	f025 0503 	bic.w	r5, r5, #3
 801558e:	3508      	adds	r5, #8
 8015590:	2d0c      	cmp	r5, #12
 8015592:	bf38      	it	cc
 8015594:	250c      	movcc	r5, #12
 8015596:	2d00      	cmp	r5, #0
 8015598:	4607      	mov	r7, r0
 801559a:	db01      	blt.n	80155a0 <_malloc_r+0x1c>
 801559c:	42a9      	cmp	r1, r5
 801559e:	d905      	bls.n	80155ac <_malloc_r+0x28>
 80155a0:	230c      	movs	r3, #12
 80155a2:	603b      	str	r3, [r7, #0]
 80155a4:	2600      	movs	r6, #0
 80155a6:	4630      	mov	r0, r6
 80155a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80155ac:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8015680 <_malloc_r+0xfc>
 80155b0:	f000 f868 	bl	8015684 <__malloc_lock>
 80155b4:	f8d8 3000 	ldr.w	r3, [r8]
 80155b8:	461c      	mov	r4, r3
 80155ba:	bb5c      	cbnz	r4, 8015614 <_malloc_r+0x90>
 80155bc:	4629      	mov	r1, r5
 80155be:	4638      	mov	r0, r7
 80155c0:	f7ff ffc0 	bl	8015544 <sbrk_aligned>
 80155c4:	1c43      	adds	r3, r0, #1
 80155c6:	4604      	mov	r4, r0
 80155c8:	d155      	bne.n	8015676 <_malloc_r+0xf2>
 80155ca:	f8d8 4000 	ldr.w	r4, [r8]
 80155ce:	4626      	mov	r6, r4
 80155d0:	2e00      	cmp	r6, #0
 80155d2:	d145      	bne.n	8015660 <_malloc_r+0xdc>
 80155d4:	2c00      	cmp	r4, #0
 80155d6:	d048      	beq.n	801566a <_malloc_r+0xe6>
 80155d8:	6823      	ldr	r3, [r4, #0]
 80155da:	4631      	mov	r1, r6
 80155dc:	4638      	mov	r0, r7
 80155de:	eb04 0903 	add.w	r9, r4, r3
 80155e2:	f000 fddd 	bl	80161a0 <_sbrk_r>
 80155e6:	4581      	cmp	r9, r0
 80155e8:	d13f      	bne.n	801566a <_malloc_r+0xe6>
 80155ea:	6821      	ldr	r1, [r4, #0]
 80155ec:	1a6d      	subs	r5, r5, r1
 80155ee:	4629      	mov	r1, r5
 80155f0:	4638      	mov	r0, r7
 80155f2:	f7ff ffa7 	bl	8015544 <sbrk_aligned>
 80155f6:	3001      	adds	r0, #1
 80155f8:	d037      	beq.n	801566a <_malloc_r+0xe6>
 80155fa:	6823      	ldr	r3, [r4, #0]
 80155fc:	442b      	add	r3, r5
 80155fe:	6023      	str	r3, [r4, #0]
 8015600:	f8d8 3000 	ldr.w	r3, [r8]
 8015604:	2b00      	cmp	r3, #0
 8015606:	d038      	beq.n	801567a <_malloc_r+0xf6>
 8015608:	685a      	ldr	r2, [r3, #4]
 801560a:	42a2      	cmp	r2, r4
 801560c:	d12b      	bne.n	8015666 <_malloc_r+0xe2>
 801560e:	2200      	movs	r2, #0
 8015610:	605a      	str	r2, [r3, #4]
 8015612:	e00f      	b.n	8015634 <_malloc_r+0xb0>
 8015614:	6822      	ldr	r2, [r4, #0]
 8015616:	1b52      	subs	r2, r2, r5
 8015618:	d41f      	bmi.n	801565a <_malloc_r+0xd6>
 801561a:	2a0b      	cmp	r2, #11
 801561c:	d917      	bls.n	801564e <_malloc_r+0xca>
 801561e:	1961      	adds	r1, r4, r5
 8015620:	42a3      	cmp	r3, r4
 8015622:	6025      	str	r5, [r4, #0]
 8015624:	bf18      	it	ne
 8015626:	6059      	strne	r1, [r3, #4]
 8015628:	6863      	ldr	r3, [r4, #4]
 801562a:	bf08      	it	eq
 801562c:	f8c8 1000 	streq.w	r1, [r8]
 8015630:	5162      	str	r2, [r4, r5]
 8015632:	604b      	str	r3, [r1, #4]
 8015634:	4638      	mov	r0, r7
 8015636:	f104 060b 	add.w	r6, r4, #11
 801563a:	f000 f829 	bl	8015690 <__malloc_unlock>
 801563e:	f026 0607 	bic.w	r6, r6, #7
 8015642:	1d23      	adds	r3, r4, #4
 8015644:	1af2      	subs	r2, r6, r3
 8015646:	d0ae      	beq.n	80155a6 <_malloc_r+0x22>
 8015648:	1b9b      	subs	r3, r3, r6
 801564a:	50a3      	str	r3, [r4, r2]
 801564c:	e7ab      	b.n	80155a6 <_malloc_r+0x22>
 801564e:	42a3      	cmp	r3, r4
 8015650:	6862      	ldr	r2, [r4, #4]
 8015652:	d1dd      	bne.n	8015610 <_malloc_r+0x8c>
 8015654:	f8c8 2000 	str.w	r2, [r8]
 8015658:	e7ec      	b.n	8015634 <_malloc_r+0xb0>
 801565a:	4623      	mov	r3, r4
 801565c:	6864      	ldr	r4, [r4, #4]
 801565e:	e7ac      	b.n	80155ba <_malloc_r+0x36>
 8015660:	4634      	mov	r4, r6
 8015662:	6876      	ldr	r6, [r6, #4]
 8015664:	e7b4      	b.n	80155d0 <_malloc_r+0x4c>
 8015666:	4613      	mov	r3, r2
 8015668:	e7cc      	b.n	8015604 <_malloc_r+0x80>
 801566a:	230c      	movs	r3, #12
 801566c:	603b      	str	r3, [r7, #0]
 801566e:	4638      	mov	r0, r7
 8015670:	f000 f80e 	bl	8015690 <__malloc_unlock>
 8015674:	e797      	b.n	80155a6 <_malloc_r+0x22>
 8015676:	6025      	str	r5, [r4, #0]
 8015678:	e7dc      	b.n	8015634 <_malloc_r+0xb0>
 801567a:	605b      	str	r3, [r3, #4]
 801567c:	deff      	udf	#255	; 0xff
 801567e:	bf00      	nop
 8015680:	2000996c 	.word	0x2000996c

08015684 <__malloc_lock>:
 8015684:	4801      	ldr	r0, [pc, #4]	; (801568c <__malloc_lock+0x8>)
 8015686:	f7ff b87c 	b.w	8014782 <__retarget_lock_acquire_recursive>
 801568a:	bf00      	nop
 801568c:	20009968 	.word	0x20009968

08015690 <__malloc_unlock>:
 8015690:	4801      	ldr	r0, [pc, #4]	; (8015698 <__malloc_unlock+0x8>)
 8015692:	f7ff b877 	b.w	8014784 <__retarget_lock_release_recursive>
 8015696:	bf00      	nop
 8015698:	20009968 	.word	0x20009968

0801569c <_Balloc>:
 801569c:	b570      	push	{r4, r5, r6, lr}
 801569e:	69c6      	ldr	r6, [r0, #28]
 80156a0:	4604      	mov	r4, r0
 80156a2:	460d      	mov	r5, r1
 80156a4:	b976      	cbnz	r6, 80156c4 <_Balloc+0x28>
 80156a6:	2010      	movs	r0, #16
 80156a8:	f7ff ff44 	bl	8015534 <malloc>
 80156ac:	4602      	mov	r2, r0
 80156ae:	61e0      	str	r0, [r4, #28]
 80156b0:	b920      	cbnz	r0, 80156bc <_Balloc+0x20>
 80156b2:	4b18      	ldr	r3, [pc, #96]	; (8015714 <_Balloc+0x78>)
 80156b4:	4818      	ldr	r0, [pc, #96]	; (8015718 <_Balloc+0x7c>)
 80156b6:	216b      	movs	r1, #107	; 0x6b
 80156b8:	f000 fd82 	bl	80161c0 <__assert_func>
 80156bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80156c0:	6006      	str	r6, [r0, #0]
 80156c2:	60c6      	str	r6, [r0, #12]
 80156c4:	69e6      	ldr	r6, [r4, #28]
 80156c6:	68f3      	ldr	r3, [r6, #12]
 80156c8:	b183      	cbz	r3, 80156ec <_Balloc+0x50>
 80156ca:	69e3      	ldr	r3, [r4, #28]
 80156cc:	68db      	ldr	r3, [r3, #12]
 80156ce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80156d2:	b9b8      	cbnz	r0, 8015704 <_Balloc+0x68>
 80156d4:	2101      	movs	r1, #1
 80156d6:	fa01 f605 	lsl.w	r6, r1, r5
 80156da:	1d72      	adds	r2, r6, #5
 80156dc:	0092      	lsls	r2, r2, #2
 80156de:	4620      	mov	r0, r4
 80156e0:	f000 fd8c 	bl	80161fc <_calloc_r>
 80156e4:	b160      	cbz	r0, 8015700 <_Balloc+0x64>
 80156e6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80156ea:	e00e      	b.n	801570a <_Balloc+0x6e>
 80156ec:	2221      	movs	r2, #33	; 0x21
 80156ee:	2104      	movs	r1, #4
 80156f0:	4620      	mov	r0, r4
 80156f2:	f000 fd83 	bl	80161fc <_calloc_r>
 80156f6:	69e3      	ldr	r3, [r4, #28]
 80156f8:	60f0      	str	r0, [r6, #12]
 80156fa:	68db      	ldr	r3, [r3, #12]
 80156fc:	2b00      	cmp	r3, #0
 80156fe:	d1e4      	bne.n	80156ca <_Balloc+0x2e>
 8015700:	2000      	movs	r0, #0
 8015702:	bd70      	pop	{r4, r5, r6, pc}
 8015704:	6802      	ldr	r2, [r0, #0]
 8015706:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801570a:	2300      	movs	r3, #0
 801570c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8015710:	e7f7      	b.n	8015702 <_Balloc+0x66>
 8015712:	bf00      	nop
 8015714:	08016ef5 	.word	0x08016ef5
 8015718:	08016f75 	.word	0x08016f75

0801571c <_Bfree>:
 801571c:	b570      	push	{r4, r5, r6, lr}
 801571e:	69c6      	ldr	r6, [r0, #28]
 8015720:	4605      	mov	r5, r0
 8015722:	460c      	mov	r4, r1
 8015724:	b976      	cbnz	r6, 8015744 <_Bfree+0x28>
 8015726:	2010      	movs	r0, #16
 8015728:	f7ff ff04 	bl	8015534 <malloc>
 801572c:	4602      	mov	r2, r0
 801572e:	61e8      	str	r0, [r5, #28]
 8015730:	b920      	cbnz	r0, 801573c <_Bfree+0x20>
 8015732:	4b09      	ldr	r3, [pc, #36]	; (8015758 <_Bfree+0x3c>)
 8015734:	4809      	ldr	r0, [pc, #36]	; (801575c <_Bfree+0x40>)
 8015736:	218f      	movs	r1, #143	; 0x8f
 8015738:	f000 fd42 	bl	80161c0 <__assert_func>
 801573c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015740:	6006      	str	r6, [r0, #0]
 8015742:	60c6      	str	r6, [r0, #12]
 8015744:	b13c      	cbz	r4, 8015756 <_Bfree+0x3a>
 8015746:	69eb      	ldr	r3, [r5, #28]
 8015748:	6862      	ldr	r2, [r4, #4]
 801574a:	68db      	ldr	r3, [r3, #12]
 801574c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8015750:	6021      	str	r1, [r4, #0]
 8015752:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8015756:	bd70      	pop	{r4, r5, r6, pc}
 8015758:	08016ef5 	.word	0x08016ef5
 801575c:	08016f75 	.word	0x08016f75

08015760 <__multadd>:
 8015760:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015764:	690d      	ldr	r5, [r1, #16]
 8015766:	4607      	mov	r7, r0
 8015768:	460c      	mov	r4, r1
 801576a:	461e      	mov	r6, r3
 801576c:	f101 0c14 	add.w	ip, r1, #20
 8015770:	2000      	movs	r0, #0
 8015772:	f8dc 3000 	ldr.w	r3, [ip]
 8015776:	b299      	uxth	r1, r3
 8015778:	fb02 6101 	mla	r1, r2, r1, r6
 801577c:	0c1e      	lsrs	r6, r3, #16
 801577e:	0c0b      	lsrs	r3, r1, #16
 8015780:	fb02 3306 	mla	r3, r2, r6, r3
 8015784:	b289      	uxth	r1, r1
 8015786:	3001      	adds	r0, #1
 8015788:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801578c:	4285      	cmp	r5, r0
 801578e:	f84c 1b04 	str.w	r1, [ip], #4
 8015792:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8015796:	dcec      	bgt.n	8015772 <__multadd+0x12>
 8015798:	b30e      	cbz	r6, 80157de <__multadd+0x7e>
 801579a:	68a3      	ldr	r3, [r4, #8]
 801579c:	42ab      	cmp	r3, r5
 801579e:	dc19      	bgt.n	80157d4 <__multadd+0x74>
 80157a0:	6861      	ldr	r1, [r4, #4]
 80157a2:	4638      	mov	r0, r7
 80157a4:	3101      	adds	r1, #1
 80157a6:	f7ff ff79 	bl	801569c <_Balloc>
 80157aa:	4680      	mov	r8, r0
 80157ac:	b928      	cbnz	r0, 80157ba <__multadd+0x5a>
 80157ae:	4602      	mov	r2, r0
 80157b0:	4b0c      	ldr	r3, [pc, #48]	; (80157e4 <__multadd+0x84>)
 80157b2:	480d      	ldr	r0, [pc, #52]	; (80157e8 <__multadd+0x88>)
 80157b4:	21ba      	movs	r1, #186	; 0xba
 80157b6:	f000 fd03 	bl	80161c0 <__assert_func>
 80157ba:	6922      	ldr	r2, [r4, #16]
 80157bc:	3202      	adds	r2, #2
 80157be:	f104 010c 	add.w	r1, r4, #12
 80157c2:	0092      	lsls	r2, r2, #2
 80157c4:	300c      	adds	r0, #12
 80157c6:	f7fe ffde 	bl	8014786 <memcpy>
 80157ca:	4621      	mov	r1, r4
 80157cc:	4638      	mov	r0, r7
 80157ce:	f7ff ffa5 	bl	801571c <_Bfree>
 80157d2:	4644      	mov	r4, r8
 80157d4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80157d8:	3501      	adds	r5, #1
 80157da:	615e      	str	r6, [r3, #20]
 80157dc:	6125      	str	r5, [r4, #16]
 80157de:	4620      	mov	r0, r4
 80157e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80157e4:	08016f64 	.word	0x08016f64
 80157e8:	08016f75 	.word	0x08016f75

080157ec <__hi0bits>:
 80157ec:	0c03      	lsrs	r3, r0, #16
 80157ee:	041b      	lsls	r3, r3, #16
 80157f0:	b9d3      	cbnz	r3, 8015828 <__hi0bits+0x3c>
 80157f2:	0400      	lsls	r0, r0, #16
 80157f4:	2310      	movs	r3, #16
 80157f6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80157fa:	bf04      	itt	eq
 80157fc:	0200      	lsleq	r0, r0, #8
 80157fe:	3308      	addeq	r3, #8
 8015800:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8015804:	bf04      	itt	eq
 8015806:	0100      	lsleq	r0, r0, #4
 8015808:	3304      	addeq	r3, #4
 801580a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801580e:	bf04      	itt	eq
 8015810:	0080      	lsleq	r0, r0, #2
 8015812:	3302      	addeq	r3, #2
 8015814:	2800      	cmp	r0, #0
 8015816:	db05      	blt.n	8015824 <__hi0bits+0x38>
 8015818:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801581c:	f103 0301 	add.w	r3, r3, #1
 8015820:	bf08      	it	eq
 8015822:	2320      	moveq	r3, #32
 8015824:	4618      	mov	r0, r3
 8015826:	4770      	bx	lr
 8015828:	2300      	movs	r3, #0
 801582a:	e7e4      	b.n	80157f6 <__hi0bits+0xa>

0801582c <__lo0bits>:
 801582c:	6803      	ldr	r3, [r0, #0]
 801582e:	f013 0207 	ands.w	r2, r3, #7
 8015832:	d00c      	beq.n	801584e <__lo0bits+0x22>
 8015834:	07d9      	lsls	r1, r3, #31
 8015836:	d422      	bmi.n	801587e <__lo0bits+0x52>
 8015838:	079a      	lsls	r2, r3, #30
 801583a:	bf49      	itett	mi
 801583c:	085b      	lsrmi	r3, r3, #1
 801583e:	089b      	lsrpl	r3, r3, #2
 8015840:	6003      	strmi	r3, [r0, #0]
 8015842:	2201      	movmi	r2, #1
 8015844:	bf5c      	itt	pl
 8015846:	6003      	strpl	r3, [r0, #0]
 8015848:	2202      	movpl	r2, #2
 801584a:	4610      	mov	r0, r2
 801584c:	4770      	bx	lr
 801584e:	b299      	uxth	r1, r3
 8015850:	b909      	cbnz	r1, 8015856 <__lo0bits+0x2a>
 8015852:	0c1b      	lsrs	r3, r3, #16
 8015854:	2210      	movs	r2, #16
 8015856:	b2d9      	uxtb	r1, r3
 8015858:	b909      	cbnz	r1, 801585e <__lo0bits+0x32>
 801585a:	3208      	adds	r2, #8
 801585c:	0a1b      	lsrs	r3, r3, #8
 801585e:	0719      	lsls	r1, r3, #28
 8015860:	bf04      	itt	eq
 8015862:	091b      	lsreq	r3, r3, #4
 8015864:	3204      	addeq	r2, #4
 8015866:	0799      	lsls	r1, r3, #30
 8015868:	bf04      	itt	eq
 801586a:	089b      	lsreq	r3, r3, #2
 801586c:	3202      	addeq	r2, #2
 801586e:	07d9      	lsls	r1, r3, #31
 8015870:	d403      	bmi.n	801587a <__lo0bits+0x4e>
 8015872:	085b      	lsrs	r3, r3, #1
 8015874:	f102 0201 	add.w	r2, r2, #1
 8015878:	d003      	beq.n	8015882 <__lo0bits+0x56>
 801587a:	6003      	str	r3, [r0, #0]
 801587c:	e7e5      	b.n	801584a <__lo0bits+0x1e>
 801587e:	2200      	movs	r2, #0
 8015880:	e7e3      	b.n	801584a <__lo0bits+0x1e>
 8015882:	2220      	movs	r2, #32
 8015884:	e7e1      	b.n	801584a <__lo0bits+0x1e>
	...

08015888 <__i2b>:
 8015888:	b510      	push	{r4, lr}
 801588a:	460c      	mov	r4, r1
 801588c:	2101      	movs	r1, #1
 801588e:	f7ff ff05 	bl	801569c <_Balloc>
 8015892:	4602      	mov	r2, r0
 8015894:	b928      	cbnz	r0, 80158a2 <__i2b+0x1a>
 8015896:	4b05      	ldr	r3, [pc, #20]	; (80158ac <__i2b+0x24>)
 8015898:	4805      	ldr	r0, [pc, #20]	; (80158b0 <__i2b+0x28>)
 801589a:	f240 1145 	movw	r1, #325	; 0x145
 801589e:	f000 fc8f 	bl	80161c0 <__assert_func>
 80158a2:	2301      	movs	r3, #1
 80158a4:	6144      	str	r4, [r0, #20]
 80158a6:	6103      	str	r3, [r0, #16]
 80158a8:	bd10      	pop	{r4, pc}
 80158aa:	bf00      	nop
 80158ac:	08016f64 	.word	0x08016f64
 80158b0:	08016f75 	.word	0x08016f75

080158b4 <__multiply>:
 80158b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80158b8:	4691      	mov	r9, r2
 80158ba:	690a      	ldr	r2, [r1, #16]
 80158bc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80158c0:	429a      	cmp	r2, r3
 80158c2:	bfb8      	it	lt
 80158c4:	460b      	movlt	r3, r1
 80158c6:	460c      	mov	r4, r1
 80158c8:	bfbc      	itt	lt
 80158ca:	464c      	movlt	r4, r9
 80158cc:	4699      	movlt	r9, r3
 80158ce:	6927      	ldr	r7, [r4, #16]
 80158d0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80158d4:	68a3      	ldr	r3, [r4, #8]
 80158d6:	6861      	ldr	r1, [r4, #4]
 80158d8:	eb07 060a 	add.w	r6, r7, sl
 80158dc:	42b3      	cmp	r3, r6
 80158de:	b085      	sub	sp, #20
 80158e0:	bfb8      	it	lt
 80158e2:	3101      	addlt	r1, #1
 80158e4:	f7ff feda 	bl	801569c <_Balloc>
 80158e8:	b930      	cbnz	r0, 80158f8 <__multiply+0x44>
 80158ea:	4602      	mov	r2, r0
 80158ec:	4b44      	ldr	r3, [pc, #272]	; (8015a00 <__multiply+0x14c>)
 80158ee:	4845      	ldr	r0, [pc, #276]	; (8015a04 <__multiply+0x150>)
 80158f0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80158f4:	f000 fc64 	bl	80161c0 <__assert_func>
 80158f8:	f100 0514 	add.w	r5, r0, #20
 80158fc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8015900:	462b      	mov	r3, r5
 8015902:	2200      	movs	r2, #0
 8015904:	4543      	cmp	r3, r8
 8015906:	d321      	bcc.n	801594c <__multiply+0x98>
 8015908:	f104 0314 	add.w	r3, r4, #20
 801590c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8015910:	f109 0314 	add.w	r3, r9, #20
 8015914:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8015918:	9202      	str	r2, [sp, #8]
 801591a:	1b3a      	subs	r2, r7, r4
 801591c:	3a15      	subs	r2, #21
 801591e:	f022 0203 	bic.w	r2, r2, #3
 8015922:	3204      	adds	r2, #4
 8015924:	f104 0115 	add.w	r1, r4, #21
 8015928:	428f      	cmp	r7, r1
 801592a:	bf38      	it	cc
 801592c:	2204      	movcc	r2, #4
 801592e:	9201      	str	r2, [sp, #4]
 8015930:	9a02      	ldr	r2, [sp, #8]
 8015932:	9303      	str	r3, [sp, #12]
 8015934:	429a      	cmp	r2, r3
 8015936:	d80c      	bhi.n	8015952 <__multiply+0x9e>
 8015938:	2e00      	cmp	r6, #0
 801593a:	dd03      	ble.n	8015944 <__multiply+0x90>
 801593c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8015940:	2b00      	cmp	r3, #0
 8015942:	d05b      	beq.n	80159fc <__multiply+0x148>
 8015944:	6106      	str	r6, [r0, #16]
 8015946:	b005      	add	sp, #20
 8015948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801594c:	f843 2b04 	str.w	r2, [r3], #4
 8015950:	e7d8      	b.n	8015904 <__multiply+0x50>
 8015952:	f8b3 a000 	ldrh.w	sl, [r3]
 8015956:	f1ba 0f00 	cmp.w	sl, #0
 801595a:	d024      	beq.n	80159a6 <__multiply+0xf2>
 801595c:	f104 0e14 	add.w	lr, r4, #20
 8015960:	46a9      	mov	r9, r5
 8015962:	f04f 0c00 	mov.w	ip, #0
 8015966:	f85e 2b04 	ldr.w	r2, [lr], #4
 801596a:	f8d9 1000 	ldr.w	r1, [r9]
 801596e:	fa1f fb82 	uxth.w	fp, r2
 8015972:	b289      	uxth	r1, r1
 8015974:	fb0a 110b 	mla	r1, sl, fp, r1
 8015978:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801597c:	f8d9 2000 	ldr.w	r2, [r9]
 8015980:	4461      	add	r1, ip
 8015982:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8015986:	fb0a c20b 	mla	r2, sl, fp, ip
 801598a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801598e:	b289      	uxth	r1, r1
 8015990:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8015994:	4577      	cmp	r7, lr
 8015996:	f849 1b04 	str.w	r1, [r9], #4
 801599a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801599e:	d8e2      	bhi.n	8015966 <__multiply+0xb2>
 80159a0:	9a01      	ldr	r2, [sp, #4]
 80159a2:	f845 c002 	str.w	ip, [r5, r2]
 80159a6:	9a03      	ldr	r2, [sp, #12]
 80159a8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80159ac:	3304      	adds	r3, #4
 80159ae:	f1b9 0f00 	cmp.w	r9, #0
 80159b2:	d021      	beq.n	80159f8 <__multiply+0x144>
 80159b4:	6829      	ldr	r1, [r5, #0]
 80159b6:	f104 0c14 	add.w	ip, r4, #20
 80159ba:	46ae      	mov	lr, r5
 80159bc:	f04f 0a00 	mov.w	sl, #0
 80159c0:	f8bc b000 	ldrh.w	fp, [ip]
 80159c4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80159c8:	fb09 220b 	mla	r2, r9, fp, r2
 80159cc:	4452      	add	r2, sl
 80159ce:	b289      	uxth	r1, r1
 80159d0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80159d4:	f84e 1b04 	str.w	r1, [lr], #4
 80159d8:	f85c 1b04 	ldr.w	r1, [ip], #4
 80159dc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80159e0:	f8be 1000 	ldrh.w	r1, [lr]
 80159e4:	fb09 110a 	mla	r1, r9, sl, r1
 80159e8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80159ec:	4567      	cmp	r7, ip
 80159ee:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80159f2:	d8e5      	bhi.n	80159c0 <__multiply+0x10c>
 80159f4:	9a01      	ldr	r2, [sp, #4]
 80159f6:	50a9      	str	r1, [r5, r2]
 80159f8:	3504      	adds	r5, #4
 80159fa:	e799      	b.n	8015930 <__multiply+0x7c>
 80159fc:	3e01      	subs	r6, #1
 80159fe:	e79b      	b.n	8015938 <__multiply+0x84>
 8015a00:	08016f64 	.word	0x08016f64
 8015a04:	08016f75 	.word	0x08016f75

08015a08 <__pow5mult>:
 8015a08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015a0c:	4615      	mov	r5, r2
 8015a0e:	f012 0203 	ands.w	r2, r2, #3
 8015a12:	4606      	mov	r6, r0
 8015a14:	460f      	mov	r7, r1
 8015a16:	d007      	beq.n	8015a28 <__pow5mult+0x20>
 8015a18:	4c25      	ldr	r4, [pc, #148]	; (8015ab0 <__pow5mult+0xa8>)
 8015a1a:	3a01      	subs	r2, #1
 8015a1c:	2300      	movs	r3, #0
 8015a1e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8015a22:	f7ff fe9d 	bl	8015760 <__multadd>
 8015a26:	4607      	mov	r7, r0
 8015a28:	10ad      	asrs	r5, r5, #2
 8015a2a:	d03d      	beq.n	8015aa8 <__pow5mult+0xa0>
 8015a2c:	69f4      	ldr	r4, [r6, #28]
 8015a2e:	b97c      	cbnz	r4, 8015a50 <__pow5mult+0x48>
 8015a30:	2010      	movs	r0, #16
 8015a32:	f7ff fd7f 	bl	8015534 <malloc>
 8015a36:	4602      	mov	r2, r0
 8015a38:	61f0      	str	r0, [r6, #28]
 8015a3a:	b928      	cbnz	r0, 8015a48 <__pow5mult+0x40>
 8015a3c:	4b1d      	ldr	r3, [pc, #116]	; (8015ab4 <__pow5mult+0xac>)
 8015a3e:	481e      	ldr	r0, [pc, #120]	; (8015ab8 <__pow5mult+0xb0>)
 8015a40:	f240 11b3 	movw	r1, #435	; 0x1b3
 8015a44:	f000 fbbc 	bl	80161c0 <__assert_func>
 8015a48:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8015a4c:	6004      	str	r4, [r0, #0]
 8015a4e:	60c4      	str	r4, [r0, #12]
 8015a50:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8015a54:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8015a58:	b94c      	cbnz	r4, 8015a6e <__pow5mult+0x66>
 8015a5a:	f240 2171 	movw	r1, #625	; 0x271
 8015a5e:	4630      	mov	r0, r6
 8015a60:	f7ff ff12 	bl	8015888 <__i2b>
 8015a64:	2300      	movs	r3, #0
 8015a66:	f8c8 0008 	str.w	r0, [r8, #8]
 8015a6a:	4604      	mov	r4, r0
 8015a6c:	6003      	str	r3, [r0, #0]
 8015a6e:	f04f 0900 	mov.w	r9, #0
 8015a72:	07eb      	lsls	r3, r5, #31
 8015a74:	d50a      	bpl.n	8015a8c <__pow5mult+0x84>
 8015a76:	4639      	mov	r1, r7
 8015a78:	4622      	mov	r2, r4
 8015a7a:	4630      	mov	r0, r6
 8015a7c:	f7ff ff1a 	bl	80158b4 <__multiply>
 8015a80:	4639      	mov	r1, r7
 8015a82:	4680      	mov	r8, r0
 8015a84:	4630      	mov	r0, r6
 8015a86:	f7ff fe49 	bl	801571c <_Bfree>
 8015a8a:	4647      	mov	r7, r8
 8015a8c:	106d      	asrs	r5, r5, #1
 8015a8e:	d00b      	beq.n	8015aa8 <__pow5mult+0xa0>
 8015a90:	6820      	ldr	r0, [r4, #0]
 8015a92:	b938      	cbnz	r0, 8015aa4 <__pow5mult+0x9c>
 8015a94:	4622      	mov	r2, r4
 8015a96:	4621      	mov	r1, r4
 8015a98:	4630      	mov	r0, r6
 8015a9a:	f7ff ff0b 	bl	80158b4 <__multiply>
 8015a9e:	6020      	str	r0, [r4, #0]
 8015aa0:	f8c0 9000 	str.w	r9, [r0]
 8015aa4:	4604      	mov	r4, r0
 8015aa6:	e7e4      	b.n	8015a72 <__pow5mult+0x6a>
 8015aa8:	4638      	mov	r0, r7
 8015aaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015aae:	bf00      	nop
 8015ab0:	080170c0 	.word	0x080170c0
 8015ab4:	08016ef5 	.word	0x08016ef5
 8015ab8:	08016f75 	.word	0x08016f75

08015abc <__lshift>:
 8015abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015ac0:	460c      	mov	r4, r1
 8015ac2:	6849      	ldr	r1, [r1, #4]
 8015ac4:	6923      	ldr	r3, [r4, #16]
 8015ac6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8015aca:	68a3      	ldr	r3, [r4, #8]
 8015acc:	4607      	mov	r7, r0
 8015ace:	4691      	mov	r9, r2
 8015ad0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8015ad4:	f108 0601 	add.w	r6, r8, #1
 8015ad8:	42b3      	cmp	r3, r6
 8015ada:	db0b      	blt.n	8015af4 <__lshift+0x38>
 8015adc:	4638      	mov	r0, r7
 8015ade:	f7ff fddd 	bl	801569c <_Balloc>
 8015ae2:	4605      	mov	r5, r0
 8015ae4:	b948      	cbnz	r0, 8015afa <__lshift+0x3e>
 8015ae6:	4602      	mov	r2, r0
 8015ae8:	4b28      	ldr	r3, [pc, #160]	; (8015b8c <__lshift+0xd0>)
 8015aea:	4829      	ldr	r0, [pc, #164]	; (8015b90 <__lshift+0xd4>)
 8015aec:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8015af0:	f000 fb66 	bl	80161c0 <__assert_func>
 8015af4:	3101      	adds	r1, #1
 8015af6:	005b      	lsls	r3, r3, #1
 8015af8:	e7ee      	b.n	8015ad8 <__lshift+0x1c>
 8015afa:	2300      	movs	r3, #0
 8015afc:	f100 0114 	add.w	r1, r0, #20
 8015b00:	f100 0210 	add.w	r2, r0, #16
 8015b04:	4618      	mov	r0, r3
 8015b06:	4553      	cmp	r3, sl
 8015b08:	db33      	blt.n	8015b72 <__lshift+0xb6>
 8015b0a:	6920      	ldr	r0, [r4, #16]
 8015b0c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015b10:	f104 0314 	add.w	r3, r4, #20
 8015b14:	f019 091f 	ands.w	r9, r9, #31
 8015b18:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8015b1c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8015b20:	d02b      	beq.n	8015b7a <__lshift+0xbe>
 8015b22:	f1c9 0e20 	rsb	lr, r9, #32
 8015b26:	468a      	mov	sl, r1
 8015b28:	2200      	movs	r2, #0
 8015b2a:	6818      	ldr	r0, [r3, #0]
 8015b2c:	fa00 f009 	lsl.w	r0, r0, r9
 8015b30:	4310      	orrs	r0, r2
 8015b32:	f84a 0b04 	str.w	r0, [sl], #4
 8015b36:	f853 2b04 	ldr.w	r2, [r3], #4
 8015b3a:	459c      	cmp	ip, r3
 8015b3c:	fa22 f20e 	lsr.w	r2, r2, lr
 8015b40:	d8f3      	bhi.n	8015b2a <__lshift+0x6e>
 8015b42:	ebac 0304 	sub.w	r3, ip, r4
 8015b46:	3b15      	subs	r3, #21
 8015b48:	f023 0303 	bic.w	r3, r3, #3
 8015b4c:	3304      	adds	r3, #4
 8015b4e:	f104 0015 	add.w	r0, r4, #21
 8015b52:	4584      	cmp	ip, r0
 8015b54:	bf38      	it	cc
 8015b56:	2304      	movcc	r3, #4
 8015b58:	50ca      	str	r2, [r1, r3]
 8015b5a:	b10a      	cbz	r2, 8015b60 <__lshift+0xa4>
 8015b5c:	f108 0602 	add.w	r6, r8, #2
 8015b60:	3e01      	subs	r6, #1
 8015b62:	4638      	mov	r0, r7
 8015b64:	612e      	str	r6, [r5, #16]
 8015b66:	4621      	mov	r1, r4
 8015b68:	f7ff fdd8 	bl	801571c <_Bfree>
 8015b6c:	4628      	mov	r0, r5
 8015b6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015b72:	f842 0f04 	str.w	r0, [r2, #4]!
 8015b76:	3301      	adds	r3, #1
 8015b78:	e7c5      	b.n	8015b06 <__lshift+0x4a>
 8015b7a:	3904      	subs	r1, #4
 8015b7c:	f853 2b04 	ldr.w	r2, [r3], #4
 8015b80:	f841 2f04 	str.w	r2, [r1, #4]!
 8015b84:	459c      	cmp	ip, r3
 8015b86:	d8f9      	bhi.n	8015b7c <__lshift+0xc0>
 8015b88:	e7ea      	b.n	8015b60 <__lshift+0xa4>
 8015b8a:	bf00      	nop
 8015b8c:	08016f64 	.word	0x08016f64
 8015b90:	08016f75 	.word	0x08016f75

08015b94 <__mcmp>:
 8015b94:	b530      	push	{r4, r5, lr}
 8015b96:	6902      	ldr	r2, [r0, #16]
 8015b98:	690c      	ldr	r4, [r1, #16]
 8015b9a:	1b12      	subs	r2, r2, r4
 8015b9c:	d10e      	bne.n	8015bbc <__mcmp+0x28>
 8015b9e:	f100 0314 	add.w	r3, r0, #20
 8015ba2:	3114      	adds	r1, #20
 8015ba4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8015ba8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8015bac:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8015bb0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8015bb4:	42a5      	cmp	r5, r4
 8015bb6:	d003      	beq.n	8015bc0 <__mcmp+0x2c>
 8015bb8:	d305      	bcc.n	8015bc6 <__mcmp+0x32>
 8015bba:	2201      	movs	r2, #1
 8015bbc:	4610      	mov	r0, r2
 8015bbe:	bd30      	pop	{r4, r5, pc}
 8015bc0:	4283      	cmp	r3, r0
 8015bc2:	d3f3      	bcc.n	8015bac <__mcmp+0x18>
 8015bc4:	e7fa      	b.n	8015bbc <__mcmp+0x28>
 8015bc6:	f04f 32ff 	mov.w	r2, #4294967295
 8015bca:	e7f7      	b.n	8015bbc <__mcmp+0x28>

08015bcc <__mdiff>:
 8015bcc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015bd0:	460c      	mov	r4, r1
 8015bd2:	4606      	mov	r6, r0
 8015bd4:	4611      	mov	r1, r2
 8015bd6:	4620      	mov	r0, r4
 8015bd8:	4690      	mov	r8, r2
 8015bda:	f7ff ffdb 	bl	8015b94 <__mcmp>
 8015bde:	1e05      	subs	r5, r0, #0
 8015be0:	d110      	bne.n	8015c04 <__mdiff+0x38>
 8015be2:	4629      	mov	r1, r5
 8015be4:	4630      	mov	r0, r6
 8015be6:	f7ff fd59 	bl	801569c <_Balloc>
 8015bea:	b930      	cbnz	r0, 8015bfa <__mdiff+0x2e>
 8015bec:	4b3a      	ldr	r3, [pc, #232]	; (8015cd8 <__mdiff+0x10c>)
 8015bee:	4602      	mov	r2, r0
 8015bf0:	f240 2137 	movw	r1, #567	; 0x237
 8015bf4:	4839      	ldr	r0, [pc, #228]	; (8015cdc <__mdiff+0x110>)
 8015bf6:	f000 fae3 	bl	80161c0 <__assert_func>
 8015bfa:	2301      	movs	r3, #1
 8015bfc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8015c00:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015c04:	bfa4      	itt	ge
 8015c06:	4643      	movge	r3, r8
 8015c08:	46a0      	movge	r8, r4
 8015c0a:	4630      	mov	r0, r6
 8015c0c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8015c10:	bfa6      	itte	ge
 8015c12:	461c      	movge	r4, r3
 8015c14:	2500      	movge	r5, #0
 8015c16:	2501      	movlt	r5, #1
 8015c18:	f7ff fd40 	bl	801569c <_Balloc>
 8015c1c:	b920      	cbnz	r0, 8015c28 <__mdiff+0x5c>
 8015c1e:	4b2e      	ldr	r3, [pc, #184]	; (8015cd8 <__mdiff+0x10c>)
 8015c20:	4602      	mov	r2, r0
 8015c22:	f240 2145 	movw	r1, #581	; 0x245
 8015c26:	e7e5      	b.n	8015bf4 <__mdiff+0x28>
 8015c28:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8015c2c:	6926      	ldr	r6, [r4, #16]
 8015c2e:	60c5      	str	r5, [r0, #12]
 8015c30:	f104 0914 	add.w	r9, r4, #20
 8015c34:	f108 0514 	add.w	r5, r8, #20
 8015c38:	f100 0e14 	add.w	lr, r0, #20
 8015c3c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8015c40:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8015c44:	f108 0210 	add.w	r2, r8, #16
 8015c48:	46f2      	mov	sl, lr
 8015c4a:	2100      	movs	r1, #0
 8015c4c:	f859 3b04 	ldr.w	r3, [r9], #4
 8015c50:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8015c54:	fa11 f88b 	uxtah	r8, r1, fp
 8015c58:	b299      	uxth	r1, r3
 8015c5a:	0c1b      	lsrs	r3, r3, #16
 8015c5c:	eba8 0801 	sub.w	r8, r8, r1
 8015c60:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8015c64:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8015c68:	fa1f f888 	uxth.w	r8, r8
 8015c6c:	1419      	asrs	r1, r3, #16
 8015c6e:	454e      	cmp	r6, r9
 8015c70:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8015c74:	f84a 3b04 	str.w	r3, [sl], #4
 8015c78:	d8e8      	bhi.n	8015c4c <__mdiff+0x80>
 8015c7a:	1b33      	subs	r3, r6, r4
 8015c7c:	3b15      	subs	r3, #21
 8015c7e:	f023 0303 	bic.w	r3, r3, #3
 8015c82:	3304      	adds	r3, #4
 8015c84:	3415      	adds	r4, #21
 8015c86:	42a6      	cmp	r6, r4
 8015c88:	bf38      	it	cc
 8015c8a:	2304      	movcc	r3, #4
 8015c8c:	441d      	add	r5, r3
 8015c8e:	4473      	add	r3, lr
 8015c90:	469e      	mov	lr, r3
 8015c92:	462e      	mov	r6, r5
 8015c94:	4566      	cmp	r6, ip
 8015c96:	d30e      	bcc.n	8015cb6 <__mdiff+0xea>
 8015c98:	f10c 0203 	add.w	r2, ip, #3
 8015c9c:	1b52      	subs	r2, r2, r5
 8015c9e:	f022 0203 	bic.w	r2, r2, #3
 8015ca2:	3d03      	subs	r5, #3
 8015ca4:	45ac      	cmp	ip, r5
 8015ca6:	bf38      	it	cc
 8015ca8:	2200      	movcc	r2, #0
 8015caa:	4413      	add	r3, r2
 8015cac:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8015cb0:	b17a      	cbz	r2, 8015cd2 <__mdiff+0x106>
 8015cb2:	6107      	str	r7, [r0, #16]
 8015cb4:	e7a4      	b.n	8015c00 <__mdiff+0x34>
 8015cb6:	f856 8b04 	ldr.w	r8, [r6], #4
 8015cba:	fa11 f288 	uxtah	r2, r1, r8
 8015cbe:	1414      	asrs	r4, r2, #16
 8015cc0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8015cc4:	b292      	uxth	r2, r2
 8015cc6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8015cca:	f84e 2b04 	str.w	r2, [lr], #4
 8015cce:	1421      	asrs	r1, r4, #16
 8015cd0:	e7e0      	b.n	8015c94 <__mdiff+0xc8>
 8015cd2:	3f01      	subs	r7, #1
 8015cd4:	e7ea      	b.n	8015cac <__mdiff+0xe0>
 8015cd6:	bf00      	nop
 8015cd8:	08016f64 	.word	0x08016f64
 8015cdc:	08016f75 	.word	0x08016f75

08015ce0 <__d2b>:
 8015ce0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8015ce4:	460f      	mov	r7, r1
 8015ce6:	2101      	movs	r1, #1
 8015ce8:	ec59 8b10 	vmov	r8, r9, d0
 8015cec:	4616      	mov	r6, r2
 8015cee:	f7ff fcd5 	bl	801569c <_Balloc>
 8015cf2:	4604      	mov	r4, r0
 8015cf4:	b930      	cbnz	r0, 8015d04 <__d2b+0x24>
 8015cf6:	4602      	mov	r2, r0
 8015cf8:	4b24      	ldr	r3, [pc, #144]	; (8015d8c <__d2b+0xac>)
 8015cfa:	4825      	ldr	r0, [pc, #148]	; (8015d90 <__d2b+0xb0>)
 8015cfc:	f240 310f 	movw	r1, #783	; 0x30f
 8015d00:	f000 fa5e 	bl	80161c0 <__assert_func>
 8015d04:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8015d08:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8015d0c:	bb2d      	cbnz	r5, 8015d5a <__d2b+0x7a>
 8015d0e:	9301      	str	r3, [sp, #4]
 8015d10:	f1b8 0300 	subs.w	r3, r8, #0
 8015d14:	d026      	beq.n	8015d64 <__d2b+0x84>
 8015d16:	4668      	mov	r0, sp
 8015d18:	9300      	str	r3, [sp, #0]
 8015d1a:	f7ff fd87 	bl	801582c <__lo0bits>
 8015d1e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8015d22:	b1e8      	cbz	r0, 8015d60 <__d2b+0x80>
 8015d24:	f1c0 0320 	rsb	r3, r0, #32
 8015d28:	fa02 f303 	lsl.w	r3, r2, r3
 8015d2c:	430b      	orrs	r3, r1
 8015d2e:	40c2      	lsrs	r2, r0
 8015d30:	6163      	str	r3, [r4, #20]
 8015d32:	9201      	str	r2, [sp, #4]
 8015d34:	9b01      	ldr	r3, [sp, #4]
 8015d36:	61a3      	str	r3, [r4, #24]
 8015d38:	2b00      	cmp	r3, #0
 8015d3a:	bf14      	ite	ne
 8015d3c:	2202      	movne	r2, #2
 8015d3e:	2201      	moveq	r2, #1
 8015d40:	6122      	str	r2, [r4, #16]
 8015d42:	b1bd      	cbz	r5, 8015d74 <__d2b+0x94>
 8015d44:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8015d48:	4405      	add	r5, r0
 8015d4a:	603d      	str	r5, [r7, #0]
 8015d4c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8015d50:	6030      	str	r0, [r6, #0]
 8015d52:	4620      	mov	r0, r4
 8015d54:	b003      	add	sp, #12
 8015d56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015d5a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8015d5e:	e7d6      	b.n	8015d0e <__d2b+0x2e>
 8015d60:	6161      	str	r1, [r4, #20]
 8015d62:	e7e7      	b.n	8015d34 <__d2b+0x54>
 8015d64:	a801      	add	r0, sp, #4
 8015d66:	f7ff fd61 	bl	801582c <__lo0bits>
 8015d6a:	9b01      	ldr	r3, [sp, #4]
 8015d6c:	6163      	str	r3, [r4, #20]
 8015d6e:	3020      	adds	r0, #32
 8015d70:	2201      	movs	r2, #1
 8015d72:	e7e5      	b.n	8015d40 <__d2b+0x60>
 8015d74:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8015d78:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8015d7c:	6038      	str	r0, [r7, #0]
 8015d7e:	6918      	ldr	r0, [r3, #16]
 8015d80:	f7ff fd34 	bl	80157ec <__hi0bits>
 8015d84:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8015d88:	e7e2      	b.n	8015d50 <__d2b+0x70>
 8015d8a:	bf00      	nop
 8015d8c:	08016f64 	.word	0x08016f64
 8015d90:	08016f75 	.word	0x08016f75

08015d94 <__ssputs_r>:
 8015d94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015d98:	688e      	ldr	r6, [r1, #8]
 8015d9a:	461f      	mov	r7, r3
 8015d9c:	42be      	cmp	r6, r7
 8015d9e:	680b      	ldr	r3, [r1, #0]
 8015da0:	4682      	mov	sl, r0
 8015da2:	460c      	mov	r4, r1
 8015da4:	4690      	mov	r8, r2
 8015da6:	d82c      	bhi.n	8015e02 <__ssputs_r+0x6e>
 8015da8:	898a      	ldrh	r2, [r1, #12]
 8015daa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8015dae:	d026      	beq.n	8015dfe <__ssputs_r+0x6a>
 8015db0:	6965      	ldr	r5, [r4, #20]
 8015db2:	6909      	ldr	r1, [r1, #16]
 8015db4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015db8:	eba3 0901 	sub.w	r9, r3, r1
 8015dbc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8015dc0:	1c7b      	adds	r3, r7, #1
 8015dc2:	444b      	add	r3, r9
 8015dc4:	106d      	asrs	r5, r5, #1
 8015dc6:	429d      	cmp	r5, r3
 8015dc8:	bf38      	it	cc
 8015dca:	461d      	movcc	r5, r3
 8015dcc:	0553      	lsls	r3, r2, #21
 8015dce:	d527      	bpl.n	8015e20 <__ssputs_r+0x8c>
 8015dd0:	4629      	mov	r1, r5
 8015dd2:	f7ff fbd7 	bl	8015584 <_malloc_r>
 8015dd6:	4606      	mov	r6, r0
 8015dd8:	b360      	cbz	r0, 8015e34 <__ssputs_r+0xa0>
 8015dda:	6921      	ldr	r1, [r4, #16]
 8015ddc:	464a      	mov	r2, r9
 8015dde:	f7fe fcd2 	bl	8014786 <memcpy>
 8015de2:	89a3      	ldrh	r3, [r4, #12]
 8015de4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8015de8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015dec:	81a3      	strh	r3, [r4, #12]
 8015dee:	6126      	str	r6, [r4, #16]
 8015df0:	6165      	str	r5, [r4, #20]
 8015df2:	444e      	add	r6, r9
 8015df4:	eba5 0509 	sub.w	r5, r5, r9
 8015df8:	6026      	str	r6, [r4, #0]
 8015dfa:	60a5      	str	r5, [r4, #8]
 8015dfc:	463e      	mov	r6, r7
 8015dfe:	42be      	cmp	r6, r7
 8015e00:	d900      	bls.n	8015e04 <__ssputs_r+0x70>
 8015e02:	463e      	mov	r6, r7
 8015e04:	6820      	ldr	r0, [r4, #0]
 8015e06:	4632      	mov	r2, r6
 8015e08:	4641      	mov	r1, r8
 8015e0a:	f7fe fbcc 	bl	80145a6 <memmove>
 8015e0e:	68a3      	ldr	r3, [r4, #8]
 8015e10:	1b9b      	subs	r3, r3, r6
 8015e12:	60a3      	str	r3, [r4, #8]
 8015e14:	6823      	ldr	r3, [r4, #0]
 8015e16:	4433      	add	r3, r6
 8015e18:	6023      	str	r3, [r4, #0]
 8015e1a:	2000      	movs	r0, #0
 8015e1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015e20:	462a      	mov	r2, r5
 8015e22:	f000 fa13 	bl	801624c <_realloc_r>
 8015e26:	4606      	mov	r6, r0
 8015e28:	2800      	cmp	r0, #0
 8015e2a:	d1e0      	bne.n	8015dee <__ssputs_r+0x5a>
 8015e2c:	6921      	ldr	r1, [r4, #16]
 8015e2e:	4650      	mov	r0, sl
 8015e30:	f7ff fb34 	bl	801549c <_free_r>
 8015e34:	230c      	movs	r3, #12
 8015e36:	f8ca 3000 	str.w	r3, [sl]
 8015e3a:	89a3      	ldrh	r3, [r4, #12]
 8015e3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015e40:	81a3      	strh	r3, [r4, #12]
 8015e42:	f04f 30ff 	mov.w	r0, #4294967295
 8015e46:	e7e9      	b.n	8015e1c <__ssputs_r+0x88>

08015e48 <_svfiprintf_r>:
 8015e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e4c:	4698      	mov	r8, r3
 8015e4e:	898b      	ldrh	r3, [r1, #12]
 8015e50:	061b      	lsls	r3, r3, #24
 8015e52:	b09d      	sub	sp, #116	; 0x74
 8015e54:	4607      	mov	r7, r0
 8015e56:	460d      	mov	r5, r1
 8015e58:	4614      	mov	r4, r2
 8015e5a:	d50e      	bpl.n	8015e7a <_svfiprintf_r+0x32>
 8015e5c:	690b      	ldr	r3, [r1, #16]
 8015e5e:	b963      	cbnz	r3, 8015e7a <_svfiprintf_r+0x32>
 8015e60:	2140      	movs	r1, #64	; 0x40
 8015e62:	f7ff fb8f 	bl	8015584 <_malloc_r>
 8015e66:	6028      	str	r0, [r5, #0]
 8015e68:	6128      	str	r0, [r5, #16]
 8015e6a:	b920      	cbnz	r0, 8015e76 <_svfiprintf_r+0x2e>
 8015e6c:	230c      	movs	r3, #12
 8015e6e:	603b      	str	r3, [r7, #0]
 8015e70:	f04f 30ff 	mov.w	r0, #4294967295
 8015e74:	e0d0      	b.n	8016018 <_svfiprintf_r+0x1d0>
 8015e76:	2340      	movs	r3, #64	; 0x40
 8015e78:	616b      	str	r3, [r5, #20]
 8015e7a:	2300      	movs	r3, #0
 8015e7c:	9309      	str	r3, [sp, #36]	; 0x24
 8015e7e:	2320      	movs	r3, #32
 8015e80:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015e84:	f8cd 800c 	str.w	r8, [sp, #12]
 8015e88:	2330      	movs	r3, #48	; 0x30
 8015e8a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8016030 <_svfiprintf_r+0x1e8>
 8015e8e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015e92:	f04f 0901 	mov.w	r9, #1
 8015e96:	4623      	mov	r3, r4
 8015e98:	469a      	mov	sl, r3
 8015e9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015e9e:	b10a      	cbz	r2, 8015ea4 <_svfiprintf_r+0x5c>
 8015ea0:	2a25      	cmp	r2, #37	; 0x25
 8015ea2:	d1f9      	bne.n	8015e98 <_svfiprintf_r+0x50>
 8015ea4:	ebba 0b04 	subs.w	fp, sl, r4
 8015ea8:	d00b      	beq.n	8015ec2 <_svfiprintf_r+0x7a>
 8015eaa:	465b      	mov	r3, fp
 8015eac:	4622      	mov	r2, r4
 8015eae:	4629      	mov	r1, r5
 8015eb0:	4638      	mov	r0, r7
 8015eb2:	f7ff ff6f 	bl	8015d94 <__ssputs_r>
 8015eb6:	3001      	adds	r0, #1
 8015eb8:	f000 80a9 	beq.w	801600e <_svfiprintf_r+0x1c6>
 8015ebc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015ebe:	445a      	add	r2, fp
 8015ec0:	9209      	str	r2, [sp, #36]	; 0x24
 8015ec2:	f89a 3000 	ldrb.w	r3, [sl]
 8015ec6:	2b00      	cmp	r3, #0
 8015ec8:	f000 80a1 	beq.w	801600e <_svfiprintf_r+0x1c6>
 8015ecc:	2300      	movs	r3, #0
 8015ece:	f04f 32ff 	mov.w	r2, #4294967295
 8015ed2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015ed6:	f10a 0a01 	add.w	sl, sl, #1
 8015eda:	9304      	str	r3, [sp, #16]
 8015edc:	9307      	str	r3, [sp, #28]
 8015ede:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015ee2:	931a      	str	r3, [sp, #104]	; 0x68
 8015ee4:	4654      	mov	r4, sl
 8015ee6:	2205      	movs	r2, #5
 8015ee8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015eec:	4850      	ldr	r0, [pc, #320]	; (8016030 <_svfiprintf_r+0x1e8>)
 8015eee:	f7ea f997 	bl	8000220 <memchr>
 8015ef2:	9a04      	ldr	r2, [sp, #16]
 8015ef4:	b9d8      	cbnz	r0, 8015f2e <_svfiprintf_r+0xe6>
 8015ef6:	06d0      	lsls	r0, r2, #27
 8015ef8:	bf44      	itt	mi
 8015efa:	2320      	movmi	r3, #32
 8015efc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015f00:	0711      	lsls	r1, r2, #28
 8015f02:	bf44      	itt	mi
 8015f04:	232b      	movmi	r3, #43	; 0x2b
 8015f06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015f0a:	f89a 3000 	ldrb.w	r3, [sl]
 8015f0e:	2b2a      	cmp	r3, #42	; 0x2a
 8015f10:	d015      	beq.n	8015f3e <_svfiprintf_r+0xf6>
 8015f12:	9a07      	ldr	r2, [sp, #28]
 8015f14:	4654      	mov	r4, sl
 8015f16:	2000      	movs	r0, #0
 8015f18:	f04f 0c0a 	mov.w	ip, #10
 8015f1c:	4621      	mov	r1, r4
 8015f1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015f22:	3b30      	subs	r3, #48	; 0x30
 8015f24:	2b09      	cmp	r3, #9
 8015f26:	d94d      	bls.n	8015fc4 <_svfiprintf_r+0x17c>
 8015f28:	b1b0      	cbz	r0, 8015f58 <_svfiprintf_r+0x110>
 8015f2a:	9207      	str	r2, [sp, #28]
 8015f2c:	e014      	b.n	8015f58 <_svfiprintf_r+0x110>
 8015f2e:	eba0 0308 	sub.w	r3, r0, r8
 8015f32:	fa09 f303 	lsl.w	r3, r9, r3
 8015f36:	4313      	orrs	r3, r2
 8015f38:	9304      	str	r3, [sp, #16]
 8015f3a:	46a2      	mov	sl, r4
 8015f3c:	e7d2      	b.n	8015ee4 <_svfiprintf_r+0x9c>
 8015f3e:	9b03      	ldr	r3, [sp, #12]
 8015f40:	1d19      	adds	r1, r3, #4
 8015f42:	681b      	ldr	r3, [r3, #0]
 8015f44:	9103      	str	r1, [sp, #12]
 8015f46:	2b00      	cmp	r3, #0
 8015f48:	bfbb      	ittet	lt
 8015f4a:	425b      	neglt	r3, r3
 8015f4c:	f042 0202 	orrlt.w	r2, r2, #2
 8015f50:	9307      	strge	r3, [sp, #28]
 8015f52:	9307      	strlt	r3, [sp, #28]
 8015f54:	bfb8      	it	lt
 8015f56:	9204      	strlt	r2, [sp, #16]
 8015f58:	7823      	ldrb	r3, [r4, #0]
 8015f5a:	2b2e      	cmp	r3, #46	; 0x2e
 8015f5c:	d10c      	bne.n	8015f78 <_svfiprintf_r+0x130>
 8015f5e:	7863      	ldrb	r3, [r4, #1]
 8015f60:	2b2a      	cmp	r3, #42	; 0x2a
 8015f62:	d134      	bne.n	8015fce <_svfiprintf_r+0x186>
 8015f64:	9b03      	ldr	r3, [sp, #12]
 8015f66:	1d1a      	adds	r2, r3, #4
 8015f68:	681b      	ldr	r3, [r3, #0]
 8015f6a:	9203      	str	r2, [sp, #12]
 8015f6c:	2b00      	cmp	r3, #0
 8015f6e:	bfb8      	it	lt
 8015f70:	f04f 33ff 	movlt.w	r3, #4294967295
 8015f74:	3402      	adds	r4, #2
 8015f76:	9305      	str	r3, [sp, #20]
 8015f78:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8016040 <_svfiprintf_r+0x1f8>
 8015f7c:	7821      	ldrb	r1, [r4, #0]
 8015f7e:	2203      	movs	r2, #3
 8015f80:	4650      	mov	r0, sl
 8015f82:	f7ea f94d 	bl	8000220 <memchr>
 8015f86:	b138      	cbz	r0, 8015f98 <_svfiprintf_r+0x150>
 8015f88:	9b04      	ldr	r3, [sp, #16]
 8015f8a:	eba0 000a 	sub.w	r0, r0, sl
 8015f8e:	2240      	movs	r2, #64	; 0x40
 8015f90:	4082      	lsls	r2, r0
 8015f92:	4313      	orrs	r3, r2
 8015f94:	3401      	adds	r4, #1
 8015f96:	9304      	str	r3, [sp, #16]
 8015f98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015f9c:	4825      	ldr	r0, [pc, #148]	; (8016034 <_svfiprintf_r+0x1ec>)
 8015f9e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015fa2:	2206      	movs	r2, #6
 8015fa4:	f7ea f93c 	bl	8000220 <memchr>
 8015fa8:	2800      	cmp	r0, #0
 8015faa:	d038      	beq.n	801601e <_svfiprintf_r+0x1d6>
 8015fac:	4b22      	ldr	r3, [pc, #136]	; (8016038 <_svfiprintf_r+0x1f0>)
 8015fae:	bb1b      	cbnz	r3, 8015ff8 <_svfiprintf_r+0x1b0>
 8015fb0:	9b03      	ldr	r3, [sp, #12]
 8015fb2:	3307      	adds	r3, #7
 8015fb4:	f023 0307 	bic.w	r3, r3, #7
 8015fb8:	3308      	adds	r3, #8
 8015fba:	9303      	str	r3, [sp, #12]
 8015fbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015fbe:	4433      	add	r3, r6
 8015fc0:	9309      	str	r3, [sp, #36]	; 0x24
 8015fc2:	e768      	b.n	8015e96 <_svfiprintf_r+0x4e>
 8015fc4:	fb0c 3202 	mla	r2, ip, r2, r3
 8015fc8:	460c      	mov	r4, r1
 8015fca:	2001      	movs	r0, #1
 8015fcc:	e7a6      	b.n	8015f1c <_svfiprintf_r+0xd4>
 8015fce:	2300      	movs	r3, #0
 8015fd0:	3401      	adds	r4, #1
 8015fd2:	9305      	str	r3, [sp, #20]
 8015fd4:	4619      	mov	r1, r3
 8015fd6:	f04f 0c0a 	mov.w	ip, #10
 8015fda:	4620      	mov	r0, r4
 8015fdc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015fe0:	3a30      	subs	r2, #48	; 0x30
 8015fe2:	2a09      	cmp	r2, #9
 8015fe4:	d903      	bls.n	8015fee <_svfiprintf_r+0x1a6>
 8015fe6:	2b00      	cmp	r3, #0
 8015fe8:	d0c6      	beq.n	8015f78 <_svfiprintf_r+0x130>
 8015fea:	9105      	str	r1, [sp, #20]
 8015fec:	e7c4      	b.n	8015f78 <_svfiprintf_r+0x130>
 8015fee:	fb0c 2101 	mla	r1, ip, r1, r2
 8015ff2:	4604      	mov	r4, r0
 8015ff4:	2301      	movs	r3, #1
 8015ff6:	e7f0      	b.n	8015fda <_svfiprintf_r+0x192>
 8015ff8:	ab03      	add	r3, sp, #12
 8015ffa:	9300      	str	r3, [sp, #0]
 8015ffc:	462a      	mov	r2, r5
 8015ffe:	4b0f      	ldr	r3, [pc, #60]	; (801603c <_svfiprintf_r+0x1f4>)
 8016000:	a904      	add	r1, sp, #16
 8016002:	4638      	mov	r0, r7
 8016004:	f7fd fde4 	bl	8013bd0 <_printf_float>
 8016008:	1c42      	adds	r2, r0, #1
 801600a:	4606      	mov	r6, r0
 801600c:	d1d6      	bne.n	8015fbc <_svfiprintf_r+0x174>
 801600e:	89ab      	ldrh	r3, [r5, #12]
 8016010:	065b      	lsls	r3, r3, #25
 8016012:	f53f af2d 	bmi.w	8015e70 <_svfiprintf_r+0x28>
 8016016:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016018:	b01d      	add	sp, #116	; 0x74
 801601a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801601e:	ab03      	add	r3, sp, #12
 8016020:	9300      	str	r3, [sp, #0]
 8016022:	462a      	mov	r2, r5
 8016024:	4b05      	ldr	r3, [pc, #20]	; (801603c <_svfiprintf_r+0x1f4>)
 8016026:	a904      	add	r1, sp, #16
 8016028:	4638      	mov	r0, r7
 801602a:	f7fe f875 	bl	8014118 <_printf_i>
 801602e:	e7eb      	b.n	8016008 <_svfiprintf_r+0x1c0>
 8016030:	080170cc 	.word	0x080170cc
 8016034:	080170d6 	.word	0x080170d6
 8016038:	08013bd1 	.word	0x08013bd1
 801603c:	08015d95 	.word	0x08015d95
 8016040:	080170d2 	.word	0x080170d2

08016044 <__sflush_r>:
 8016044:	898a      	ldrh	r2, [r1, #12]
 8016046:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801604a:	4605      	mov	r5, r0
 801604c:	0710      	lsls	r0, r2, #28
 801604e:	460c      	mov	r4, r1
 8016050:	d458      	bmi.n	8016104 <__sflush_r+0xc0>
 8016052:	684b      	ldr	r3, [r1, #4]
 8016054:	2b00      	cmp	r3, #0
 8016056:	dc05      	bgt.n	8016064 <__sflush_r+0x20>
 8016058:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801605a:	2b00      	cmp	r3, #0
 801605c:	dc02      	bgt.n	8016064 <__sflush_r+0x20>
 801605e:	2000      	movs	r0, #0
 8016060:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016064:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016066:	2e00      	cmp	r6, #0
 8016068:	d0f9      	beq.n	801605e <__sflush_r+0x1a>
 801606a:	2300      	movs	r3, #0
 801606c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8016070:	682f      	ldr	r7, [r5, #0]
 8016072:	6a21      	ldr	r1, [r4, #32]
 8016074:	602b      	str	r3, [r5, #0]
 8016076:	d032      	beq.n	80160de <__sflush_r+0x9a>
 8016078:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801607a:	89a3      	ldrh	r3, [r4, #12]
 801607c:	075a      	lsls	r2, r3, #29
 801607e:	d505      	bpl.n	801608c <__sflush_r+0x48>
 8016080:	6863      	ldr	r3, [r4, #4]
 8016082:	1ac0      	subs	r0, r0, r3
 8016084:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016086:	b10b      	cbz	r3, 801608c <__sflush_r+0x48>
 8016088:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801608a:	1ac0      	subs	r0, r0, r3
 801608c:	2300      	movs	r3, #0
 801608e:	4602      	mov	r2, r0
 8016090:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016092:	6a21      	ldr	r1, [r4, #32]
 8016094:	4628      	mov	r0, r5
 8016096:	47b0      	blx	r6
 8016098:	1c43      	adds	r3, r0, #1
 801609a:	89a3      	ldrh	r3, [r4, #12]
 801609c:	d106      	bne.n	80160ac <__sflush_r+0x68>
 801609e:	6829      	ldr	r1, [r5, #0]
 80160a0:	291d      	cmp	r1, #29
 80160a2:	d82b      	bhi.n	80160fc <__sflush_r+0xb8>
 80160a4:	4a29      	ldr	r2, [pc, #164]	; (801614c <__sflush_r+0x108>)
 80160a6:	410a      	asrs	r2, r1
 80160a8:	07d6      	lsls	r6, r2, #31
 80160aa:	d427      	bmi.n	80160fc <__sflush_r+0xb8>
 80160ac:	2200      	movs	r2, #0
 80160ae:	6062      	str	r2, [r4, #4]
 80160b0:	04d9      	lsls	r1, r3, #19
 80160b2:	6922      	ldr	r2, [r4, #16]
 80160b4:	6022      	str	r2, [r4, #0]
 80160b6:	d504      	bpl.n	80160c2 <__sflush_r+0x7e>
 80160b8:	1c42      	adds	r2, r0, #1
 80160ba:	d101      	bne.n	80160c0 <__sflush_r+0x7c>
 80160bc:	682b      	ldr	r3, [r5, #0]
 80160be:	b903      	cbnz	r3, 80160c2 <__sflush_r+0x7e>
 80160c0:	6560      	str	r0, [r4, #84]	; 0x54
 80160c2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80160c4:	602f      	str	r7, [r5, #0]
 80160c6:	2900      	cmp	r1, #0
 80160c8:	d0c9      	beq.n	801605e <__sflush_r+0x1a>
 80160ca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80160ce:	4299      	cmp	r1, r3
 80160d0:	d002      	beq.n	80160d8 <__sflush_r+0x94>
 80160d2:	4628      	mov	r0, r5
 80160d4:	f7ff f9e2 	bl	801549c <_free_r>
 80160d8:	2000      	movs	r0, #0
 80160da:	6360      	str	r0, [r4, #52]	; 0x34
 80160dc:	e7c0      	b.n	8016060 <__sflush_r+0x1c>
 80160de:	2301      	movs	r3, #1
 80160e0:	4628      	mov	r0, r5
 80160e2:	47b0      	blx	r6
 80160e4:	1c41      	adds	r1, r0, #1
 80160e6:	d1c8      	bne.n	801607a <__sflush_r+0x36>
 80160e8:	682b      	ldr	r3, [r5, #0]
 80160ea:	2b00      	cmp	r3, #0
 80160ec:	d0c5      	beq.n	801607a <__sflush_r+0x36>
 80160ee:	2b1d      	cmp	r3, #29
 80160f0:	d001      	beq.n	80160f6 <__sflush_r+0xb2>
 80160f2:	2b16      	cmp	r3, #22
 80160f4:	d101      	bne.n	80160fa <__sflush_r+0xb6>
 80160f6:	602f      	str	r7, [r5, #0]
 80160f8:	e7b1      	b.n	801605e <__sflush_r+0x1a>
 80160fa:	89a3      	ldrh	r3, [r4, #12]
 80160fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016100:	81a3      	strh	r3, [r4, #12]
 8016102:	e7ad      	b.n	8016060 <__sflush_r+0x1c>
 8016104:	690f      	ldr	r7, [r1, #16]
 8016106:	2f00      	cmp	r7, #0
 8016108:	d0a9      	beq.n	801605e <__sflush_r+0x1a>
 801610a:	0793      	lsls	r3, r2, #30
 801610c:	680e      	ldr	r6, [r1, #0]
 801610e:	bf08      	it	eq
 8016110:	694b      	ldreq	r3, [r1, #20]
 8016112:	600f      	str	r7, [r1, #0]
 8016114:	bf18      	it	ne
 8016116:	2300      	movne	r3, #0
 8016118:	eba6 0807 	sub.w	r8, r6, r7
 801611c:	608b      	str	r3, [r1, #8]
 801611e:	f1b8 0f00 	cmp.w	r8, #0
 8016122:	dd9c      	ble.n	801605e <__sflush_r+0x1a>
 8016124:	6a21      	ldr	r1, [r4, #32]
 8016126:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8016128:	4643      	mov	r3, r8
 801612a:	463a      	mov	r2, r7
 801612c:	4628      	mov	r0, r5
 801612e:	47b0      	blx	r6
 8016130:	2800      	cmp	r0, #0
 8016132:	dc06      	bgt.n	8016142 <__sflush_r+0xfe>
 8016134:	89a3      	ldrh	r3, [r4, #12]
 8016136:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801613a:	81a3      	strh	r3, [r4, #12]
 801613c:	f04f 30ff 	mov.w	r0, #4294967295
 8016140:	e78e      	b.n	8016060 <__sflush_r+0x1c>
 8016142:	4407      	add	r7, r0
 8016144:	eba8 0800 	sub.w	r8, r8, r0
 8016148:	e7e9      	b.n	801611e <__sflush_r+0xda>
 801614a:	bf00      	nop
 801614c:	dfbffffe 	.word	0xdfbffffe

08016150 <_fflush_r>:
 8016150:	b538      	push	{r3, r4, r5, lr}
 8016152:	690b      	ldr	r3, [r1, #16]
 8016154:	4605      	mov	r5, r0
 8016156:	460c      	mov	r4, r1
 8016158:	b913      	cbnz	r3, 8016160 <_fflush_r+0x10>
 801615a:	2500      	movs	r5, #0
 801615c:	4628      	mov	r0, r5
 801615e:	bd38      	pop	{r3, r4, r5, pc}
 8016160:	b118      	cbz	r0, 801616a <_fflush_r+0x1a>
 8016162:	6a03      	ldr	r3, [r0, #32]
 8016164:	b90b      	cbnz	r3, 801616a <_fflush_r+0x1a>
 8016166:	f7fe f985 	bl	8014474 <__sinit>
 801616a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801616e:	2b00      	cmp	r3, #0
 8016170:	d0f3      	beq.n	801615a <_fflush_r+0xa>
 8016172:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8016174:	07d0      	lsls	r0, r2, #31
 8016176:	d404      	bmi.n	8016182 <_fflush_r+0x32>
 8016178:	0599      	lsls	r1, r3, #22
 801617a:	d402      	bmi.n	8016182 <_fflush_r+0x32>
 801617c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801617e:	f7fe fb00 	bl	8014782 <__retarget_lock_acquire_recursive>
 8016182:	4628      	mov	r0, r5
 8016184:	4621      	mov	r1, r4
 8016186:	f7ff ff5d 	bl	8016044 <__sflush_r>
 801618a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801618c:	07da      	lsls	r2, r3, #31
 801618e:	4605      	mov	r5, r0
 8016190:	d4e4      	bmi.n	801615c <_fflush_r+0xc>
 8016192:	89a3      	ldrh	r3, [r4, #12]
 8016194:	059b      	lsls	r3, r3, #22
 8016196:	d4e1      	bmi.n	801615c <_fflush_r+0xc>
 8016198:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801619a:	f7fe faf3 	bl	8014784 <__retarget_lock_release_recursive>
 801619e:	e7dd      	b.n	801615c <_fflush_r+0xc>

080161a0 <_sbrk_r>:
 80161a0:	b538      	push	{r3, r4, r5, lr}
 80161a2:	4d06      	ldr	r5, [pc, #24]	; (80161bc <_sbrk_r+0x1c>)
 80161a4:	2300      	movs	r3, #0
 80161a6:	4604      	mov	r4, r0
 80161a8:	4608      	mov	r0, r1
 80161aa:	602b      	str	r3, [r5, #0]
 80161ac:	f7ee fffc 	bl	80051a8 <_sbrk>
 80161b0:	1c43      	adds	r3, r0, #1
 80161b2:	d102      	bne.n	80161ba <_sbrk_r+0x1a>
 80161b4:	682b      	ldr	r3, [r5, #0]
 80161b6:	b103      	cbz	r3, 80161ba <_sbrk_r+0x1a>
 80161b8:	6023      	str	r3, [r4, #0]
 80161ba:	bd38      	pop	{r3, r4, r5, pc}
 80161bc:	20009964 	.word	0x20009964

080161c0 <__assert_func>:
 80161c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80161c2:	4614      	mov	r4, r2
 80161c4:	461a      	mov	r2, r3
 80161c6:	4b09      	ldr	r3, [pc, #36]	; (80161ec <__assert_func+0x2c>)
 80161c8:	681b      	ldr	r3, [r3, #0]
 80161ca:	4605      	mov	r5, r0
 80161cc:	68d8      	ldr	r0, [r3, #12]
 80161ce:	b14c      	cbz	r4, 80161e4 <__assert_func+0x24>
 80161d0:	4b07      	ldr	r3, [pc, #28]	; (80161f0 <__assert_func+0x30>)
 80161d2:	9100      	str	r1, [sp, #0]
 80161d4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80161d8:	4906      	ldr	r1, [pc, #24]	; (80161f4 <__assert_func+0x34>)
 80161da:	462b      	mov	r3, r5
 80161dc:	f000 f872 	bl	80162c4 <fiprintf>
 80161e0:	f000 f882 	bl	80162e8 <abort>
 80161e4:	4b04      	ldr	r3, [pc, #16]	; (80161f8 <__assert_func+0x38>)
 80161e6:	461c      	mov	r4, r3
 80161e8:	e7f3      	b.n	80161d2 <__assert_func+0x12>
 80161ea:	bf00      	nop
 80161ec:	20000410 	.word	0x20000410
 80161f0:	080170e7 	.word	0x080170e7
 80161f4:	080170f4 	.word	0x080170f4
 80161f8:	08017122 	.word	0x08017122

080161fc <_calloc_r>:
 80161fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80161fe:	fba1 2402 	umull	r2, r4, r1, r2
 8016202:	b94c      	cbnz	r4, 8016218 <_calloc_r+0x1c>
 8016204:	4611      	mov	r1, r2
 8016206:	9201      	str	r2, [sp, #4]
 8016208:	f7ff f9bc 	bl	8015584 <_malloc_r>
 801620c:	9a01      	ldr	r2, [sp, #4]
 801620e:	4605      	mov	r5, r0
 8016210:	b930      	cbnz	r0, 8016220 <_calloc_r+0x24>
 8016212:	4628      	mov	r0, r5
 8016214:	b003      	add	sp, #12
 8016216:	bd30      	pop	{r4, r5, pc}
 8016218:	220c      	movs	r2, #12
 801621a:	6002      	str	r2, [r0, #0]
 801621c:	2500      	movs	r5, #0
 801621e:	e7f8      	b.n	8016212 <_calloc_r+0x16>
 8016220:	4621      	mov	r1, r4
 8016222:	f7fe f9da 	bl	80145da <memset>
 8016226:	e7f4      	b.n	8016212 <_calloc_r+0x16>

08016228 <__ascii_mbtowc>:
 8016228:	b082      	sub	sp, #8
 801622a:	b901      	cbnz	r1, 801622e <__ascii_mbtowc+0x6>
 801622c:	a901      	add	r1, sp, #4
 801622e:	b142      	cbz	r2, 8016242 <__ascii_mbtowc+0x1a>
 8016230:	b14b      	cbz	r3, 8016246 <__ascii_mbtowc+0x1e>
 8016232:	7813      	ldrb	r3, [r2, #0]
 8016234:	600b      	str	r3, [r1, #0]
 8016236:	7812      	ldrb	r2, [r2, #0]
 8016238:	1e10      	subs	r0, r2, #0
 801623a:	bf18      	it	ne
 801623c:	2001      	movne	r0, #1
 801623e:	b002      	add	sp, #8
 8016240:	4770      	bx	lr
 8016242:	4610      	mov	r0, r2
 8016244:	e7fb      	b.n	801623e <__ascii_mbtowc+0x16>
 8016246:	f06f 0001 	mvn.w	r0, #1
 801624a:	e7f8      	b.n	801623e <__ascii_mbtowc+0x16>

0801624c <_realloc_r>:
 801624c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016250:	4680      	mov	r8, r0
 8016252:	4614      	mov	r4, r2
 8016254:	460e      	mov	r6, r1
 8016256:	b921      	cbnz	r1, 8016262 <_realloc_r+0x16>
 8016258:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801625c:	4611      	mov	r1, r2
 801625e:	f7ff b991 	b.w	8015584 <_malloc_r>
 8016262:	b92a      	cbnz	r2, 8016270 <_realloc_r+0x24>
 8016264:	f7ff f91a 	bl	801549c <_free_r>
 8016268:	4625      	mov	r5, r4
 801626a:	4628      	mov	r0, r5
 801626c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016270:	f000 f841 	bl	80162f6 <_malloc_usable_size_r>
 8016274:	4284      	cmp	r4, r0
 8016276:	4607      	mov	r7, r0
 8016278:	d802      	bhi.n	8016280 <_realloc_r+0x34>
 801627a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801627e:	d812      	bhi.n	80162a6 <_realloc_r+0x5a>
 8016280:	4621      	mov	r1, r4
 8016282:	4640      	mov	r0, r8
 8016284:	f7ff f97e 	bl	8015584 <_malloc_r>
 8016288:	4605      	mov	r5, r0
 801628a:	2800      	cmp	r0, #0
 801628c:	d0ed      	beq.n	801626a <_realloc_r+0x1e>
 801628e:	42bc      	cmp	r4, r7
 8016290:	4622      	mov	r2, r4
 8016292:	4631      	mov	r1, r6
 8016294:	bf28      	it	cs
 8016296:	463a      	movcs	r2, r7
 8016298:	f7fe fa75 	bl	8014786 <memcpy>
 801629c:	4631      	mov	r1, r6
 801629e:	4640      	mov	r0, r8
 80162a0:	f7ff f8fc 	bl	801549c <_free_r>
 80162a4:	e7e1      	b.n	801626a <_realloc_r+0x1e>
 80162a6:	4635      	mov	r5, r6
 80162a8:	e7df      	b.n	801626a <_realloc_r+0x1e>

080162aa <__ascii_wctomb>:
 80162aa:	b149      	cbz	r1, 80162c0 <__ascii_wctomb+0x16>
 80162ac:	2aff      	cmp	r2, #255	; 0xff
 80162ae:	bf85      	ittet	hi
 80162b0:	238a      	movhi	r3, #138	; 0x8a
 80162b2:	6003      	strhi	r3, [r0, #0]
 80162b4:	700a      	strbls	r2, [r1, #0]
 80162b6:	f04f 30ff 	movhi.w	r0, #4294967295
 80162ba:	bf98      	it	ls
 80162bc:	2001      	movls	r0, #1
 80162be:	4770      	bx	lr
 80162c0:	4608      	mov	r0, r1
 80162c2:	4770      	bx	lr

080162c4 <fiprintf>:
 80162c4:	b40e      	push	{r1, r2, r3}
 80162c6:	b503      	push	{r0, r1, lr}
 80162c8:	4601      	mov	r1, r0
 80162ca:	ab03      	add	r3, sp, #12
 80162cc:	4805      	ldr	r0, [pc, #20]	; (80162e4 <fiprintf+0x20>)
 80162ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80162d2:	6800      	ldr	r0, [r0, #0]
 80162d4:	9301      	str	r3, [sp, #4]
 80162d6:	f000 f83f 	bl	8016358 <_vfiprintf_r>
 80162da:	b002      	add	sp, #8
 80162dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80162e0:	b003      	add	sp, #12
 80162e2:	4770      	bx	lr
 80162e4:	20000410 	.word	0x20000410

080162e8 <abort>:
 80162e8:	b508      	push	{r3, lr}
 80162ea:	2006      	movs	r0, #6
 80162ec:	f000 fa0c 	bl	8016708 <raise>
 80162f0:	2001      	movs	r0, #1
 80162f2:	f7ee fee1 	bl	80050b8 <_exit>

080162f6 <_malloc_usable_size_r>:
 80162f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80162fa:	1f18      	subs	r0, r3, #4
 80162fc:	2b00      	cmp	r3, #0
 80162fe:	bfbc      	itt	lt
 8016300:	580b      	ldrlt	r3, [r1, r0]
 8016302:	18c0      	addlt	r0, r0, r3
 8016304:	4770      	bx	lr

08016306 <__sfputc_r>:
 8016306:	6893      	ldr	r3, [r2, #8]
 8016308:	3b01      	subs	r3, #1
 801630a:	2b00      	cmp	r3, #0
 801630c:	b410      	push	{r4}
 801630e:	6093      	str	r3, [r2, #8]
 8016310:	da08      	bge.n	8016324 <__sfputc_r+0x1e>
 8016312:	6994      	ldr	r4, [r2, #24]
 8016314:	42a3      	cmp	r3, r4
 8016316:	db01      	blt.n	801631c <__sfputc_r+0x16>
 8016318:	290a      	cmp	r1, #10
 801631a:	d103      	bne.n	8016324 <__sfputc_r+0x1e>
 801631c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016320:	f000 b934 	b.w	801658c <__swbuf_r>
 8016324:	6813      	ldr	r3, [r2, #0]
 8016326:	1c58      	adds	r0, r3, #1
 8016328:	6010      	str	r0, [r2, #0]
 801632a:	7019      	strb	r1, [r3, #0]
 801632c:	4608      	mov	r0, r1
 801632e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016332:	4770      	bx	lr

08016334 <__sfputs_r>:
 8016334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016336:	4606      	mov	r6, r0
 8016338:	460f      	mov	r7, r1
 801633a:	4614      	mov	r4, r2
 801633c:	18d5      	adds	r5, r2, r3
 801633e:	42ac      	cmp	r4, r5
 8016340:	d101      	bne.n	8016346 <__sfputs_r+0x12>
 8016342:	2000      	movs	r0, #0
 8016344:	e007      	b.n	8016356 <__sfputs_r+0x22>
 8016346:	f814 1b01 	ldrb.w	r1, [r4], #1
 801634a:	463a      	mov	r2, r7
 801634c:	4630      	mov	r0, r6
 801634e:	f7ff ffda 	bl	8016306 <__sfputc_r>
 8016352:	1c43      	adds	r3, r0, #1
 8016354:	d1f3      	bne.n	801633e <__sfputs_r+0xa>
 8016356:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08016358 <_vfiprintf_r>:
 8016358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801635c:	460d      	mov	r5, r1
 801635e:	b09d      	sub	sp, #116	; 0x74
 8016360:	4614      	mov	r4, r2
 8016362:	4698      	mov	r8, r3
 8016364:	4606      	mov	r6, r0
 8016366:	b118      	cbz	r0, 8016370 <_vfiprintf_r+0x18>
 8016368:	6a03      	ldr	r3, [r0, #32]
 801636a:	b90b      	cbnz	r3, 8016370 <_vfiprintf_r+0x18>
 801636c:	f7fe f882 	bl	8014474 <__sinit>
 8016370:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016372:	07d9      	lsls	r1, r3, #31
 8016374:	d405      	bmi.n	8016382 <_vfiprintf_r+0x2a>
 8016376:	89ab      	ldrh	r3, [r5, #12]
 8016378:	059a      	lsls	r2, r3, #22
 801637a:	d402      	bmi.n	8016382 <_vfiprintf_r+0x2a>
 801637c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801637e:	f7fe fa00 	bl	8014782 <__retarget_lock_acquire_recursive>
 8016382:	89ab      	ldrh	r3, [r5, #12]
 8016384:	071b      	lsls	r3, r3, #28
 8016386:	d501      	bpl.n	801638c <_vfiprintf_r+0x34>
 8016388:	692b      	ldr	r3, [r5, #16]
 801638a:	b99b      	cbnz	r3, 80163b4 <_vfiprintf_r+0x5c>
 801638c:	4629      	mov	r1, r5
 801638e:	4630      	mov	r0, r6
 8016390:	f000 f93a 	bl	8016608 <__swsetup_r>
 8016394:	b170      	cbz	r0, 80163b4 <_vfiprintf_r+0x5c>
 8016396:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016398:	07dc      	lsls	r4, r3, #31
 801639a:	d504      	bpl.n	80163a6 <_vfiprintf_r+0x4e>
 801639c:	f04f 30ff 	mov.w	r0, #4294967295
 80163a0:	b01d      	add	sp, #116	; 0x74
 80163a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80163a6:	89ab      	ldrh	r3, [r5, #12]
 80163a8:	0598      	lsls	r0, r3, #22
 80163aa:	d4f7      	bmi.n	801639c <_vfiprintf_r+0x44>
 80163ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80163ae:	f7fe f9e9 	bl	8014784 <__retarget_lock_release_recursive>
 80163b2:	e7f3      	b.n	801639c <_vfiprintf_r+0x44>
 80163b4:	2300      	movs	r3, #0
 80163b6:	9309      	str	r3, [sp, #36]	; 0x24
 80163b8:	2320      	movs	r3, #32
 80163ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80163be:	f8cd 800c 	str.w	r8, [sp, #12]
 80163c2:	2330      	movs	r3, #48	; 0x30
 80163c4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8016578 <_vfiprintf_r+0x220>
 80163c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80163cc:	f04f 0901 	mov.w	r9, #1
 80163d0:	4623      	mov	r3, r4
 80163d2:	469a      	mov	sl, r3
 80163d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80163d8:	b10a      	cbz	r2, 80163de <_vfiprintf_r+0x86>
 80163da:	2a25      	cmp	r2, #37	; 0x25
 80163dc:	d1f9      	bne.n	80163d2 <_vfiprintf_r+0x7a>
 80163de:	ebba 0b04 	subs.w	fp, sl, r4
 80163e2:	d00b      	beq.n	80163fc <_vfiprintf_r+0xa4>
 80163e4:	465b      	mov	r3, fp
 80163e6:	4622      	mov	r2, r4
 80163e8:	4629      	mov	r1, r5
 80163ea:	4630      	mov	r0, r6
 80163ec:	f7ff ffa2 	bl	8016334 <__sfputs_r>
 80163f0:	3001      	adds	r0, #1
 80163f2:	f000 80a9 	beq.w	8016548 <_vfiprintf_r+0x1f0>
 80163f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80163f8:	445a      	add	r2, fp
 80163fa:	9209      	str	r2, [sp, #36]	; 0x24
 80163fc:	f89a 3000 	ldrb.w	r3, [sl]
 8016400:	2b00      	cmp	r3, #0
 8016402:	f000 80a1 	beq.w	8016548 <_vfiprintf_r+0x1f0>
 8016406:	2300      	movs	r3, #0
 8016408:	f04f 32ff 	mov.w	r2, #4294967295
 801640c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016410:	f10a 0a01 	add.w	sl, sl, #1
 8016414:	9304      	str	r3, [sp, #16]
 8016416:	9307      	str	r3, [sp, #28]
 8016418:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801641c:	931a      	str	r3, [sp, #104]	; 0x68
 801641e:	4654      	mov	r4, sl
 8016420:	2205      	movs	r2, #5
 8016422:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016426:	4854      	ldr	r0, [pc, #336]	; (8016578 <_vfiprintf_r+0x220>)
 8016428:	f7e9 fefa 	bl	8000220 <memchr>
 801642c:	9a04      	ldr	r2, [sp, #16]
 801642e:	b9d8      	cbnz	r0, 8016468 <_vfiprintf_r+0x110>
 8016430:	06d1      	lsls	r1, r2, #27
 8016432:	bf44      	itt	mi
 8016434:	2320      	movmi	r3, #32
 8016436:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801643a:	0713      	lsls	r3, r2, #28
 801643c:	bf44      	itt	mi
 801643e:	232b      	movmi	r3, #43	; 0x2b
 8016440:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016444:	f89a 3000 	ldrb.w	r3, [sl]
 8016448:	2b2a      	cmp	r3, #42	; 0x2a
 801644a:	d015      	beq.n	8016478 <_vfiprintf_r+0x120>
 801644c:	9a07      	ldr	r2, [sp, #28]
 801644e:	4654      	mov	r4, sl
 8016450:	2000      	movs	r0, #0
 8016452:	f04f 0c0a 	mov.w	ip, #10
 8016456:	4621      	mov	r1, r4
 8016458:	f811 3b01 	ldrb.w	r3, [r1], #1
 801645c:	3b30      	subs	r3, #48	; 0x30
 801645e:	2b09      	cmp	r3, #9
 8016460:	d94d      	bls.n	80164fe <_vfiprintf_r+0x1a6>
 8016462:	b1b0      	cbz	r0, 8016492 <_vfiprintf_r+0x13a>
 8016464:	9207      	str	r2, [sp, #28]
 8016466:	e014      	b.n	8016492 <_vfiprintf_r+0x13a>
 8016468:	eba0 0308 	sub.w	r3, r0, r8
 801646c:	fa09 f303 	lsl.w	r3, r9, r3
 8016470:	4313      	orrs	r3, r2
 8016472:	9304      	str	r3, [sp, #16]
 8016474:	46a2      	mov	sl, r4
 8016476:	e7d2      	b.n	801641e <_vfiprintf_r+0xc6>
 8016478:	9b03      	ldr	r3, [sp, #12]
 801647a:	1d19      	adds	r1, r3, #4
 801647c:	681b      	ldr	r3, [r3, #0]
 801647e:	9103      	str	r1, [sp, #12]
 8016480:	2b00      	cmp	r3, #0
 8016482:	bfbb      	ittet	lt
 8016484:	425b      	neglt	r3, r3
 8016486:	f042 0202 	orrlt.w	r2, r2, #2
 801648a:	9307      	strge	r3, [sp, #28]
 801648c:	9307      	strlt	r3, [sp, #28]
 801648e:	bfb8      	it	lt
 8016490:	9204      	strlt	r2, [sp, #16]
 8016492:	7823      	ldrb	r3, [r4, #0]
 8016494:	2b2e      	cmp	r3, #46	; 0x2e
 8016496:	d10c      	bne.n	80164b2 <_vfiprintf_r+0x15a>
 8016498:	7863      	ldrb	r3, [r4, #1]
 801649a:	2b2a      	cmp	r3, #42	; 0x2a
 801649c:	d134      	bne.n	8016508 <_vfiprintf_r+0x1b0>
 801649e:	9b03      	ldr	r3, [sp, #12]
 80164a0:	1d1a      	adds	r2, r3, #4
 80164a2:	681b      	ldr	r3, [r3, #0]
 80164a4:	9203      	str	r2, [sp, #12]
 80164a6:	2b00      	cmp	r3, #0
 80164a8:	bfb8      	it	lt
 80164aa:	f04f 33ff 	movlt.w	r3, #4294967295
 80164ae:	3402      	adds	r4, #2
 80164b0:	9305      	str	r3, [sp, #20]
 80164b2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8016588 <_vfiprintf_r+0x230>
 80164b6:	7821      	ldrb	r1, [r4, #0]
 80164b8:	2203      	movs	r2, #3
 80164ba:	4650      	mov	r0, sl
 80164bc:	f7e9 feb0 	bl	8000220 <memchr>
 80164c0:	b138      	cbz	r0, 80164d2 <_vfiprintf_r+0x17a>
 80164c2:	9b04      	ldr	r3, [sp, #16]
 80164c4:	eba0 000a 	sub.w	r0, r0, sl
 80164c8:	2240      	movs	r2, #64	; 0x40
 80164ca:	4082      	lsls	r2, r0
 80164cc:	4313      	orrs	r3, r2
 80164ce:	3401      	adds	r4, #1
 80164d0:	9304      	str	r3, [sp, #16]
 80164d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80164d6:	4829      	ldr	r0, [pc, #164]	; (801657c <_vfiprintf_r+0x224>)
 80164d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80164dc:	2206      	movs	r2, #6
 80164de:	f7e9 fe9f 	bl	8000220 <memchr>
 80164e2:	2800      	cmp	r0, #0
 80164e4:	d03f      	beq.n	8016566 <_vfiprintf_r+0x20e>
 80164e6:	4b26      	ldr	r3, [pc, #152]	; (8016580 <_vfiprintf_r+0x228>)
 80164e8:	bb1b      	cbnz	r3, 8016532 <_vfiprintf_r+0x1da>
 80164ea:	9b03      	ldr	r3, [sp, #12]
 80164ec:	3307      	adds	r3, #7
 80164ee:	f023 0307 	bic.w	r3, r3, #7
 80164f2:	3308      	adds	r3, #8
 80164f4:	9303      	str	r3, [sp, #12]
 80164f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80164f8:	443b      	add	r3, r7
 80164fa:	9309      	str	r3, [sp, #36]	; 0x24
 80164fc:	e768      	b.n	80163d0 <_vfiprintf_r+0x78>
 80164fe:	fb0c 3202 	mla	r2, ip, r2, r3
 8016502:	460c      	mov	r4, r1
 8016504:	2001      	movs	r0, #1
 8016506:	e7a6      	b.n	8016456 <_vfiprintf_r+0xfe>
 8016508:	2300      	movs	r3, #0
 801650a:	3401      	adds	r4, #1
 801650c:	9305      	str	r3, [sp, #20]
 801650e:	4619      	mov	r1, r3
 8016510:	f04f 0c0a 	mov.w	ip, #10
 8016514:	4620      	mov	r0, r4
 8016516:	f810 2b01 	ldrb.w	r2, [r0], #1
 801651a:	3a30      	subs	r2, #48	; 0x30
 801651c:	2a09      	cmp	r2, #9
 801651e:	d903      	bls.n	8016528 <_vfiprintf_r+0x1d0>
 8016520:	2b00      	cmp	r3, #0
 8016522:	d0c6      	beq.n	80164b2 <_vfiprintf_r+0x15a>
 8016524:	9105      	str	r1, [sp, #20]
 8016526:	e7c4      	b.n	80164b2 <_vfiprintf_r+0x15a>
 8016528:	fb0c 2101 	mla	r1, ip, r1, r2
 801652c:	4604      	mov	r4, r0
 801652e:	2301      	movs	r3, #1
 8016530:	e7f0      	b.n	8016514 <_vfiprintf_r+0x1bc>
 8016532:	ab03      	add	r3, sp, #12
 8016534:	9300      	str	r3, [sp, #0]
 8016536:	462a      	mov	r2, r5
 8016538:	4b12      	ldr	r3, [pc, #72]	; (8016584 <_vfiprintf_r+0x22c>)
 801653a:	a904      	add	r1, sp, #16
 801653c:	4630      	mov	r0, r6
 801653e:	f7fd fb47 	bl	8013bd0 <_printf_float>
 8016542:	4607      	mov	r7, r0
 8016544:	1c78      	adds	r0, r7, #1
 8016546:	d1d6      	bne.n	80164f6 <_vfiprintf_r+0x19e>
 8016548:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801654a:	07d9      	lsls	r1, r3, #31
 801654c:	d405      	bmi.n	801655a <_vfiprintf_r+0x202>
 801654e:	89ab      	ldrh	r3, [r5, #12]
 8016550:	059a      	lsls	r2, r3, #22
 8016552:	d402      	bmi.n	801655a <_vfiprintf_r+0x202>
 8016554:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016556:	f7fe f915 	bl	8014784 <__retarget_lock_release_recursive>
 801655a:	89ab      	ldrh	r3, [r5, #12]
 801655c:	065b      	lsls	r3, r3, #25
 801655e:	f53f af1d 	bmi.w	801639c <_vfiprintf_r+0x44>
 8016562:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016564:	e71c      	b.n	80163a0 <_vfiprintf_r+0x48>
 8016566:	ab03      	add	r3, sp, #12
 8016568:	9300      	str	r3, [sp, #0]
 801656a:	462a      	mov	r2, r5
 801656c:	4b05      	ldr	r3, [pc, #20]	; (8016584 <_vfiprintf_r+0x22c>)
 801656e:	a904      	add	r1, sp, #16
 8016570:	4630      	mov	r0, r6
 8016572:	f7fd fdd1 	bl	8014118 <_printf_i>
 8016576:	e7e4      	b.n	8016542 <_vfiprintf_r+0x1ea>
 8016578:	080170cc 	.word	0x080170cc
 801657c:	080170d6 	.word	0x080170d6
 8016580:	08013bd1 	.word	0x08013bd1
 8016584:	08016335 	.word	0x08016335
 8016588:	080170d2 	.word	0x080170d2

0801658c <__swbuf_r>:
 801658c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801658e:	460e      	mov	r6, r1
 8016590:	4614      	mov	r4, r2
 8016592:	4605      	mov	r5, r0
 8016594:	b118      	cbz	r0, 801659e <__swbuf_r+0x12>
 8016596:	6a03      	ldr	r3, [r0, #32]
 8016598:	b90b      	cbnz	r3, 801659e <__swbuf_r+0x12>
 801659a:	f7fd ff6b 	bl	8014474 <__sinit>
 801659e:	69a3      	ldr	r3, [r4, #24]
 80165a0:	60a3      	str	r3, [r4, #8]
 80165a2:	89a3      	ldrh	r3, [r4, #12]
 80165a4:	071a      	lsls	r2, r3, #28
 80165a6:	d525      	bpl.n	80165f4 <__swbuf_r+0x68>
 80165a8:	6923      	ldr	r3, [r4, #16]
 80165aa:	b31b      	cbz	r3, 80165f4 <__swbuf_r+0x68>
 80165ac:	6823      	ldr	r3, [r4, #0]
 80165ae:	6922      	ldr	r2, [r4, #16]
 80165b0:	1a98      	subs	r0, r3, r2
 80165b2:	6963      	ldr	r3, [r4, #20]
 80165b4:	b2f6      	uxtb	r6, r6
 80165b6:	4283      	cmp	r3, r0
 80165b8:	4637      	mov	r7, r6
 80165ba:	dc04      	bgt.n	80165c6 <__swbuf_r+0x3a>
 80165bc:	4621      	mov	r1, r4
 80165be:	4628      	mov	r0, r5
 80165c0:	f7ff fdc6 	bl	8016150 <_fflush_r>
 80165c4:	b9e0      	cbnz	r0, 8016600 <__swbuf_r+0x74>
 80165c6:	68a3      	ldr	r3, [r4, #8]
 80165c8:	3b01      	subs	r3, #1
 80165ca:	60a3      	str	r3, [r4, #8]
 80165cc:	6823      	ldr	r3, [r4, #0]
 80165ce:	1c5a      	adds	r2, r3, #1
 80165d0:	6022      	str	r2, [r4, #0]
 80165d2:	701e      	strb	r6, [r3, #0]
 80165d4:	6962      	ldr	r2, [r4, #20]
 80165d6:	1c43      	adds	r3, r0, #1
 80165d8:	429a      	cmp	r2, r3
 80165da:	d004      	beq.n	80165e6 <__swbuf_r+0x5a>
 80165dc:	89a3      	ldrh	r3, [r4, #12]
 80165de:	07db      	lsls	r3, r3, #31
 80165e0:	d506      	bpl.n	80165f0 <__swbuf_r+0x64>
 80165e2:	2e0a      	cmp	r6, #10
 80165e4:	d104      	bne.n	80165f0 <__swbuf_r+0x64>
 80165e6:	4621      	mov	r1, r4
 80165e8:	4628      	mov	r0, r5
 80165ea:	f7ff fdb1 	bl	8016150 <_fflush_r>
 80165ee:	b938      	cbnz	r0, 8016600 <__swbuf_r+0x74>
 80165f0:	4638      	mov	r0, r7
 80165f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80165f4:	4621      	mov	r1, r4
 80165f6:	4628      	mov	r0, r5
 80165f8:	f000 f806 	bl	8016608 <__swsetup_r>
 80165fc:	2800      	cmp	r0, #0
 80165fe:	d0d5      	beq.n	80165ac <__swbuf_r+0x20>
 8016600:	f04f 37ff 	mov.w	r7, #4294967295
 8016604:	e7f4      	b.n	80165f0 <__swbuf_r+0x64>
	...

08016608 <__swsetup_r>:
 8016608:	b538      	push	{r3, r4, r5, lr}
 801660a:	4b2a      	ldr	r3, [pc, #168]	; (80166b4 <__swsetup_r+0xac>)
 801660c:	4605      	mov	r5, r0
 801660e:	6818      	ldr	r0, [r3, #0]
 8016610:	460c      	mov	r4, r1
 8016612:	b118      	cbz	r0, 801661c <__swsetup_r+0x14>
 8016614:	6a03      	ldr	r3, [r0, #32]
 8016616:	b90b      	cbnz	r3, 801661c <__swsetup_r+0x14>
 8016618:	f7fd ff2c 	bl	8014474 <__sinit>
 801661c:	89a3      	ldrh	r3, [r4, #12]
 801661e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016622:	0718      	lsls	r0, r3, #28
 8016624:	d422      	bmi.n	801666c <__swsetup_r+0x64>
 8016626:	06d9      	lsls	r1, r3, #27
 8016628:	d407      	bmi.n	801663a <__swsetup_r+0x32>
 801662a:	2309      	movs	r3, #9
 801662c:	602b      	str	r3, [r5, #0]
 801662e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8016632:	81a3      	strh	r3, [r4, #12]
 8016634:	f04f 30ff 	mov.w	r0, #4294967295
 8016638:	e034      	b.n	80166a4 <__swsetup_r+0x9c>
 801663a:	0758      	lsls	r0, r3, #29
 801663c:	d512      	bpl.n	8016664 <__swsetup_r+0x5c>
 801663e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016640:	b141      	cbz	r1, 8016654 <__swsetup_r+0x4c>
 8016642:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016646:	4299      	cmp	r1, r3
 8016648:	d002      	beq.n	8016650 <__swsetup_r+0x48>
 801664a:	4628      	mov	r0, r5
 801664c:	f7fe ff26 	bl	801549c <_free_r>
 8016650:	2300      	movs	r3, #0
 8016652:	6363      	str	r3, [r4, #52]	; 0x34
 8016654:	89a3      	ldrh	r3, [r4, #12]
 8016656:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801665a:	81a3      	strh	r3, [r4, #12]
 801665c:	2300      	movs	r3, #0
 801665e:	6063      	str	r3, [r4, #4]
 8016660:	6923      	ldr	r3, [r4, #16]
 8016662:	6023      	str	r3, [r4, #0]
 8016664:	89a3      	ldrh	r3, [r4, #12]
 8016666:	f043 0308 	orr.w	r3, r3, #8
 801666a:	81a3      	strh	r3, [r4, #12]
 801666c:	6923      	ldr	r3, [r4, #16]
 801666e:	b94b      	cbnz	r3, 8016684 <__swsetup_r+0x7c>
 8016670:	89a3      	ldrh	r3, [r4, #12]
 8016672:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8016676:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801667a:	d003      	beq.n	8016684 <__swsetup_r+0x7c>
 801667c:	4621      	mov	r1, r4
 801667e:	4628      	mov	r0, r5
 8016680:	f000 f884 	bl	801678c <__smakebuf_r>
 8016684:	89a0      	ldrh	r0, [r4, #12]
 8016686:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801668a:	f010 0301 	ands.w	r3, r0, #1
 801668e:	d00a      	beq.n	80166a6 <__swsetup_r+0x9e>
 8016690:	2300      	movs	r3, #0
 8016692:	60a3      	str	r3, [r4, #8]
 8016694:	6963      	ldr	r3, [r4, #20]
 8016696:	425b      	negs	r3, r3
 8016698:	61a3      	str	r3, [r4, #24]
 801669a:	6923      	ldr	r3, [r4, #16]
 801669c:	b943      	cbnz	r3, 80166b0 <__swsetup_r+0xa8>
 801669e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80166a2:	d1c4      	bne.n	801662e <__swsetup_r+0x26>
 80166a4:	bd38      	pop	{r3, r4, r5, pc}
 80166a6:	0781      	lsls	r1, r0, #30
 80166a8:	bf58      	it	pl
 80166aa:	6963      	ldrpl	r3, [r4, #20]
 80166ac:	60a3      	str	r3, [r4, #8]
 80166ae:	e7f4      	b.n	801669a <__swsetup_r+0x92>
 80166b0:	2000      	movs	r0, #0
 80166b2:	e7f7      	b.n	80166a4 <__swsetup_r+0x9c>
 80166b4:	20000410 	.word	0x20000410

080166b8 <_raise_r>:
 80166b8:	291f      	cmp	r1, #31
 80166ba:	b538      	push	{r3, r4, r5, lr}
 80166bc:	4604      	mov	r4, r0
 80166be:	460d      	mov	r5, r1
 80166c0:	d904      	bls.n	80166cc <_raise_r+0x14>
 80166c2:	2316      	movs	r3, #22
 80166c4:	6003      	str	r3, [r0, #0]
 80166c6:	f04f 30ff 	mov.w	r0, #4294967295
 80166ca:	bd38      	pop	{r3, r4, r5, pc}
 80166cc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80166ce:	b112      	cbz	r2, 80166d6 <_raise_r+0x1e>
 80166d0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80166d4:	b94b      	cbnz	r3, 80166ea <_raise_r+0x32>
 80166d6:	4620      	mov	r0, r4
 80166d8:	f000 f830 	bl	801673c <_getpid_r>
 80166dc:	462a      	mov	r2, r5
 80166de:	4601      	mov	r1, r0
 80166e0:	4620      	mov	r0, r4
 80166e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80166e6:	f000 b817 	b.w	8016718 <_kill_r>
 80166ea:	2b01      	cmp	r3, #1
 80166ec:	d00a      	beq.n	8016704 <_raise_r+0x4c>
 80166ee:	1c59      	adds	r1, r3, #1
 80166f0:	d103      	bne.n	80166fa <_raise_r+0x42>
 80166f2:	2316      	movs	r3, #22
 80166f4:	6003      	str	r3, [r0, #0]
 80166f6:	2001      	movs	r0, #1
 80166f8:	e7e7      	b.n	80166ca <_raise_r+0x12>
 80166fa:	2400      	movs	r4, #0
 80166fc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8016700:	4628      	mov	r0, r5
 8016702:	4798      	blx	r3
 8016704:	2000      	movs	r0, #0
 8016706:	e7e0      	b.n	80166ca <_raise_r+0x12>

08016708 <raise>:
 8016708:	4b02      	ldr	r3, [pc, #8]	; (8016714 <raise+0xc>)
 801670a:	4601      	mov	r1, r0
 801670c:	6818      	ldr	r0, [r3, #0]
 801670e:	f7ff bfd3 	b.w	80166b8 <_raise_r>
 8016712:	bf00      	nop
 8016714:	20000410 	.word	0x20000410

08016718 <_kill_r>:
 8016718:	b538      	push	{r3, r4, r5, lr}
 801671a:	4d07      	ldr	r5, [pc, #28]	; (8016738 <_kill_r+0x20>)
 801671c:	2300      	movs	r3, #0
 801671e:	4604      	mov	r4, r0
 8016720:	4608      	mov	r0, r1
 8016722:	4611      	mov	r1, r2
 8016724:	602b      	str	r3, [r5, #0]
 8016726:	f7ee fcb7 	bl	8005098 <_kill>
 801672a:	1c43      	adds	r3, r0, #1
 801672c:	d102      	bne.n	8016734 <_kill_r+0x1c>
 801672e:	682b      	ldr	r3, [r5, #0]
 8016730:	b103      	cbz	r3, 8016734 <_kill_r+0x1c>
 8016732:	6023      	str	r3, [r4, #0]
 8016734:	bd38      	pop	{r3, r4, r5, pc}
 8016736:	bf00      	nop
 8016738:	20009964 	.word	0x20009964

0801673c <_getpid_r>:
 801673c:	f7ee bca4 	b.w	8005088 <_getpid>

08016740 <__swhatbuf_r>:
 8016740:	b570      	push	{r4, r5, r6, lr}
 8016742:	460c      	mov	r4, r1
 8016744:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016748:	2900      	cmp	r1, #0
 801674a:	b096      	sub	sp, #88	; 0x58
 801674c:	4615      	mov	r5, r2
 801674e:	461e      	mov	r6, r3
 8016750:	da0d      	bge.n	801676e <__swhatbuf_r+0x2e>
 8016752:	89a3      	ldrh	r3, [r4, #12]
 8016754:	f013 0f80 	tst.w	r3, #128	; 0x80
 8016758:	f04f 0100 	mov.w	r1, #0
 801675c:	bf0c      	ite	eq
 801675e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8016762:	2340      	movne	r3, #64	; 0x40
 8016764:	2000      	movs	r0, #0
 8016766:	6031      	str	r1, [r6, #0]
 8016768:	602b      	str	r3, [r5, #0]
 801676a:	b016      	add	sp, #88	; 0x58
 801676c:	bd70      	pop	{r4, r5, r6, pc}
 801676e:	466a      	mov	r2, sp
 8016770:	f000 f848 	bl	8016804 <_fstat_r>
 8016774:	2800      	cmp	r0, #0
 8016776:	dbec      	blt.n	8016752 <__swhatbuf_r+0x12>
 8016778:	9901      	ldr	r1, [sp, #4]
 801677a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801677e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8016782:	4259      	negs	r1, r3
 8016784:	4159      	adcs	r1, r3
 8016786:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801678a:	e7eb      	b.n	8016764 <__swhatbuf_r+0x24>

0801678c <__smakebuf_r>:
 801678c:	898b      	ldrh	r3, [r1, #12]
 801678e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016790:	079d      	lsls	r5, r3, #30
 8016792:	4606      	mov	r6, r0
 8016794:	460c      	mov	r4, r1
 8016796:	d507      	bpl.n	80167a8 <__smakebuf_r+0x1c>
 8016798:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801679c:	6023      	str	r3, [r4, #0]
 801679e:	6123      	str	r3, [r4, #16]
 80167a0:	2301      	movs	r3, #1
 80167a2:	6163      	str	r3, [r4, #20]
 80167a4:	b002      	add	sp, #8
 80167a6:	bd70      	pop	{r4, r5, r6, pc}
 80167a8:	ab01      	add	r3, sp, #4
 80167aa:	466a      	mov	r2, sp
 80167ac:	f7ff ffc8 	bl	8016740 <__swhatbuf_r>
 80167b0:	9900      	ldr	r1, [sp, #0]
 80167b2:	4605      	mov	r5, r0
 80167b4:	4630      	mov	r0, r6
 80167b6:	f7fe fee5 	bl	8015584 <_malloc_r>
 80167ba:	b948      	cbnz	r0, 80167d0 <__smakebuf_r+0x44>
 80167bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80167c0:	059a      	lsls	r2, r3, #22
 80167c2:	d4ef      	bmi.n	80167a4 <__smakebuf_r+0x18>
 80167c4:	f023 0303 	bic.w	r3, r3, #3
 80167c8:	f043 0302 	orr.w	r3, r3, #2
 80167cc:	81a3      	strh	r3, [r4, #12]
 80167ce:	e7e3      	b.n	8016798 <__smakebuf_r+0xc>
 80167d0:	89a3      	ldrh	r3, [r4, #12]
 80167d2:	6020      	str	r0, [r4, #0]
 80167d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80167d8:	81a3      	strh	r3, [r4, #12]
 80167da:	9b00      	ldr	r3, [sp, #0]
 80167dc:	6163      	str	r3, [r4, #20]
 80167de:	9b01      	ldr	r3, [sp, #4]
 80167e0:	6120      	str	r0, [r4, #16]
 80167e2:	b15b      	cbz	r3, 80167fc <__smakebuf_r+0x70>
 80167e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80167e8:	4630      	mov	r0, r6
 80167ea:	f000 f81d 	bl	8016828 <_isatty_r>
 80167ee:	b128      	cbz	r0, 80167fc <__smakebuf_r+0x70>
 80167f0:	89a3      	ldrh	r3, [r4, #12]
 80167f2:	f023 0303 	bic.w	r3, r3, #3
 80167f6:	f043 0301 	orr.w	r3, r3, #1
 80167fa:	81a3      	strh	r3, [r4, #12]
 80167fc:	89a3      	ldrh	r3, [r4, #12]
 80167fe:	431d      	orrs	r5, r3
 8016800:	81a5      	strh	r5, [r4, #12]
 8016802:	e7cf      	b.n	80167a4 <__smakebuf_r+0x18>

08016804 <_fstat_r>:
 8016804:	b538      	push	{r3, r4, r5, lr}
 8016806:	4d07      	ldr	r5, [pc, #28]	; (8016824 <_fstat_r+0x20>)
 8016808:	2300      	movs	r3, #0
 801680a:	4604      	mov	r4, r0
 801680c:	4608      	mov	r0, r1
 801680e:	4611      	mov	r1, r2
 8016810:	602b      	str	r3, [r5, #0]
 8016812:	f7ee fca0 	bl	8005156 <_fstat>
 8016816:	1c43      	adds	r3, r0, #1
 8016818:	d102      	bne.n	8016820 <_fstat_r+0x1c>
 801681a:	682b      	ldr	r3, [r5, #0]
 801681c:	b103      	cbz	r3, 8016820 <_fstat_r+0x1c>
 801681e:	6023      	str	r3, [r4, #0]
 8016820:	bd38      	pop	{r3, r4, r5, pc}
 8016822:	bf00      	nop
 8016824:	20009964 	.word	0x20009964

08016828 <_isatty_r>:
 8016828:	b538      	push	{r3, r4, r5, lr}
 801682a:	4d06      	ldr	r5, [pc, #24]	; (8016844 <_isatty_r+0x1c>)
 801682c:	2300      	movs	r3, #0
 801682e:	4604      	mov	r4, r0
 8016830:	4608      	mov	r0, r1
 8016832:	602b      	str	r3, [r5, #0]
 8016834:	f7ee fc9f 	bl	8005176 <_isatty>
 8016838:	1c43      	adds	r3, r0, #1
 801683a:	d102      	bne.n	8016842 <_isatty_r+0x1a>
 801683c:	682b      	ldr	r3, [r5, #0]
 801683e:	b103      	cbz	r3, 8016842 <_isatty_r+0x1a>
 8016840:	6023      	str	r3, [r4, #0]
 8016842:	bd38      	pop	{r3, r4, r5, pc}
 8016844:	20009964 	.word	0x20009964

08016848 <_init>:
 8016848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801684a:	bf00      	nop
 801684c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801684e:	bc08      	pop	{r3}
 8016850:	469e      	mov	lr, r3
 8016852:	4770      	bx	lr

08016854 <_fini>:
 8016854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016856:	bf00      	nop
 8016858:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801685a:	bc08      	pop	{r3}
 801685c:	469e      	mov	lr, r3
 801685e:	4770      	bx	lr
